"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Standard Libraries"	"ISO C++ Standards Committee"	"https://github.com/cplusplus"	"ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ISO C++ Standards Committee · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization ISO C++ Standards Committee Worldwide http://www.open-std.org/JTC1/SC22/WG21/ Repositories People 7 Filters Sources Forks TeX 1,748 274 draft C++ standards drafts Updated Jul 15, 2016 HTML 43 16 LWG forked from lwg/issues Home of the official Library Working Group issues list Updated Jul 13, 2016 Shell 36 8 filesystem-ts Library Enhancements Working Group Updated Jul 6, 2016 HTML 44 15 fundamentals-ts The draft C++ Library Fundamentals Technical Specification Updated Jul 1, 2016 JavaScript 5 4 LEWG The Library Evolution Working Group issues list Updated Jul 1, 2016 TeX 14 3 networking-ts The draft C++ Extensions for Networking Technical Specification Updated Jun 27, 2016 HTML 33 21 concepts-ts Technical Specification: Concepts Updated Jun 24, 2016 HTML 28 7 parallelism-ts Technical Specification: Parallelism Updated Mar 23, 2016 HTML 12 8 html-doc-framework A set of custom HTML elements to make writing well-formatted C++ papers and ISO documents easier. Updated Feb 15, 2016 HTML 30 10 concurrency_ts The draft C++ Library Concurrency Technical Specification Updated Nov 4, 2015 JavaScript 0 1 cxxpoll A polling site for the C++ committee. Updated Nov 1, 2015 HTML 12 1 transactional-memory-ts Updated Jul 27, 2015 HTML 15 3 EWG Evolution Working Group Updated May 22, 2015 C++ 4 5 lib-issues-software Library issues list software sources Updated Oct 8, 2014 4 0 bikeshed This repository should have a better name Created Aug 8, 2011 7 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cplusplus"	"ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee."	"true"
"Standard Libraries"	"website"	"http://www.open-std.org/JTC1/SC22/WG21/"	"ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee - ISOCPP Welcome to the home of JTC1/SC22/WG21 - The C++ Standards Committee - ISOCPP 2016-07-15: standards | projects | papers | mailings | internals | meetings | contacts News 2016-07-15: The deadline for the next mailing is 2016-10-17 14:00 UTC News 2016-07-15: The 2016-07 mailing is available (23000 kB tar.gz, .zip 23000 kB), individual papers News 2016-07-15: The C++ Standard Library Issues List (Revision 99) is available (.zip) News 2016-02-18: The C++ Standard Core Language Issues List (Revision 96) is available (.zip) News 2013-05-24: The CD for the new C++14 standard is released ISO/IEC   JTC1/SC22/WG21 is the international standardization working group for the programming language C++. Published standards and technical reports include: ISO/IEC 14882:2011 Programming Language C++ - draft ISO/IEC TR 18015:2006 C++ Performance - draft TR Work on projects and their milestones include: ISO/IEC 14882: Programming Language C++ - latest publicly available draft ISO/IEC TR 24733: C++ decimal floating point arithmetic extensions - draft ISO/IEC 29124: C++ Mathematical Special Functions - draft Other information: Some further information on C++ standardization - isocpp.org C++ Standard Core Issues List C++ Standard Core Language Issues List C++ Standard Library Issues List C++ Standard Library Issues List C++ Standard Evolution Issues List WG papers WG mailings File System TS Issues List ISO terminology standard ISO/IEC 2382 WG21 business plan and convener's report 2011 Information on past and future WG meetings Contacts: membership, liaisons and related work ISO/IEC TR 24772 Information technology -- Programming languages -- Guidance to avoiding vulnerabilities in programming languages through language selection and use WG internal information (For members of the C++ standardization committee) If you want further information, or want to participate, please contact your national member body or one of the contact addresses of the WG. 2016-07-15: standards | projects | papers | mailings | internals | meetings | contacts This page is sponsored by DTU. HTML design by Keld Simonsen. Comments welcome!"	"null"	"null"	"ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee."	"true"
"Standard Libraries"	"The GNU C Library"	"http://elmerland.com/gnu_manual.html"	"The purpose of this manual is to tell you how to use the facilities of the GNU C Library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GNU Manual        The GNU C Library About Style template By:Elmer Landaverde 1 Introduction 1.1 Getting Started 1.2 Standards and Portability 1.2.1 ISO C 1.2.2 POSIX (The Portable Operating System Interface) 1.2.2.1 POSIX Safety Concepts 1.2.2.2 Unsafe Features 1.2.2.3 Conditionally Safe Features 1.2.2.4 Other Safety Remarks 1.2.3 Berkeley Unix 1.2.4 SVID (The System V Interface Description) 1.2.5 XPG (The X/Open Portability Guide) 1.3 Using the Library 1.3.1 Header Files 1.3.2 Macro Definitions of Functions 1.3.3 Reserved Names 1.3.4 Feature Test Macros 1.4 Roadmap to the Manual 2 Error Reporting 2.1 Checking for Errors 2.2 Error Codes 2.3 Error Messages 3 Virtual Memory Allocation And Paging 3.1 Process Memory Concepts 3.2 Allocating Storage For Program Data 3.2.1 Memory Allocation in C Programs 3.2.1.1 Dynamic Memory Allocation 3.2.2 Unconstrained Allocation 3.2.2.1 Basic Memory Allocation 3.2.2.2 Examples of malloc 3.2.2.3 Freeing Memory Allocated with malloc 3.2.2.4 Changing the Size of a Block 3.2.2.5 Allocating Cleared Space 3.2.2.6 Efficiency Considerations for malloc 3.2.2.7 Allocating Aligned Memory Blocks 3.2.2.8 Malloc Tunable Parameters 3.2.2.9 Heap Consistency Checking 3.2.2.10 Memory Allocation Hooks 3.2.2.11 Statistics for Memory Allocation with malloc 3.2.2.12 Summary of malloc-Related Functions 3.2.3 Allocation Debugging 3.2.3.1 How to install the tracing functionality 3.2.3.2 Example program excerpts 3.2.3.3 Some more or less clever ideas 3.2.3.4 Interpreting the traces 3.2.4 Obstacks 3.2.4.1 Creating Obstacks 3.2.4.2 Preparing for Using Obstacks 3.2.4.3 Allocation in an Obstack 3.2.4.4 Freeing Objects in an Obstack 3.2.4.5 Obstack Functions and Macros 3.2.4.6 Growing Objects 3.2.4.7 Extra Fast Growing Objects 3.2.4.8 Status of an Obstack 3.2.4.9 Alignment of Data in Obstacks 3.2.4.10 Obstack Chunks 3.2.4.11 Summary of Obstack Functions 3.2.5 Automatic Storage with Variable Size 3.2.5.1 alloca Example 3.2.5.2 Advantages of alloca 3.2.5.3 Disadvantages of alloca 3.2.5.4 GNU C Variable-Size Arrays 3.3 Resizing the Data Segment 3.4 Locking Pages 3.4.1 Why Lock Pages 3.4.2 Locked Memory Details 3.4.3 Functions To Lock And Unlock Pages 4 Character Handling 4.1 Classification of Characters 4.2 Case Conversion 4.3 Character class determination for wide characters 4.4 Notes on using the wide character classes 4.5 Mapping of wide characters. 5 String and Array Utilities 5.1 Representation of Strings 5.2 String and Array Conventions 5.3 String Length 5.4 Copying and Concatenation 5.5 String/Array Comparison 5.6 Collation Functions 5.7 Search Functions 5.7.1 Compatibility String Search Functions 5.8 Finding Tokens in a String 5.9 strfry 5.10 Trivial Encryption 5.11 Encode Binary Data 5.12 Argz and Envz Vectors 5.12.1 Argz Functions 5.12.2 Envz Functions 6 Character Set Handling 6.1 Introduction to Extended Characters 6.2 Overview about Character Handling Functions 6.3 Restartable Multibyte Conversion Functions 6.3.1 Selecting the conversion and its properties 6.3.2 Representing the state of the conversion 6.3.3 Converting Single Characters 6.3.4 Converting Multibyte and Wide Character Strings 6.3.5 A Complete Multibyte Conversion Example 6.4 Non-reentrant Conversion Function 6.4.1 Non-reentrant Conversion of Single Characters 6.4.2 Non-reentrant Conversion of Strings 6.4.3 States in Non-reentrant Functions 6.5 Generic Charset Conversion 6.5.1 Generic Character Set Conversion Interface 6.5.2 A complete iconv example 6.5.3 Some Details about other iconv Implementations 6.5.4 The iconv Implementation in the GNU C Library 6.5.4.1 Format of gconv-modules files 6.5.4.2 Finding the conversion path in iconv 6.5.4.3 iconv module data structures 6.5.4.4 iconv module interfaces 7 Locales and Internationalization 7.1 What Effects a Locale Has 7.2 Choosing a Locale 7.3 Locale Categories 7.4 How Programs Set the Locale 7.5 Standard Locales 7.6 Locale Names 7.7 Accessing Locale Information 7.7.1 localeconv: It is portable but … 7.7.1.1 Generic Numeric Formatting Parameters 7.7.1.2 Printing the Currency Symbol 7.7.1.3 Printing the Sign of a Monetary Amount 7.7.2 Pinpoint Access to Locale Data 7.8 A dedicated function to format numbers 7.9 Yes-or-No Questions 8 Message Translation 8.1 X/Open Message Catalog Handling 8.1.1 The catgets function family 8.1.2 Format of the message catalog files 8.1.3 Generate Message Catalogs files 8.1.4 How to use the catgets interface 8.1.4.1 Not using symbolic names 8.1.4.2 Using symbolic names 8.1.4.3 How does to this allow to develop 8.2 The Uniforum approach to Message Translation 8.2.1 The gettext family of functions 8.2.1.1 What has to be done to translate a message? 8.2.1.2 How to determine which catalog to be used 8.2.1.3 Additional functions for more complicated situations 8.2.1.4 How to specify the output character set gettext uses 8.2.1.5 How to use gettext in GUI programs 8.2.1.6 User influence on gettext 8.2.2 Programs to handle message catalogs for gettext 9 Searching and Sorting 9.1 Defining the Comparison Function 9.2 Array Search Function 9.3 Array Sort Function 9.4 Searching and Sorting Example 9.5 The hsearch function. 9.6 The tsearch function. 10 Pattern Matching 10.1 Wildcard Matching 10.2 Globbing 10.2.1 Calling glob 10.2.2 Flags for Globbing 10.2.3 More Flags for Globbing 10.3 Regular Expression Matching 10.3.1 POSIX Regular Expression Compilation 10.3.2 Flags for POSIX Regular Expressions 10.3.3 Matching a Compiled POSIX Regular Expression 10.3.4 Match Results with Subexpressions 10.3.5 Complications in Subexpression Matching 10.3.6 POSIX Regexp Matching Cleanup 10.4 Shell-Style Word Expansion 10.4.1 The Stages of Word Expansion 10.4.2 Calling wordexp 10.4.3 Flags for Word Expansion 10.4.4 wordexp Example 10.4.5 Details of Tilde Expansion 10.4.6 Details of Variable Substitution 11 Input/Output Overview 11.1 Input/Output Concepts 11.1.1 Streams and File Descriptors 11.1.2 File Position 11.2 File Names 11.2.1 Directories 11.2.2 File Name Resolution 11.2.3 File Name Errors 11.2.4 Portability of File Names 12 Input/Output on Streams 12.1 Streams 12.2 Standard Streams 12.3 Opening Streams 12.4 Closing Streams 12.5 Streams and Threads 12.6 Streams in Internationalized Applications 12.7 Simple Output by Characters or Lines 12.8 Character Input 12.9 Line-Oriented Input 12.10 Unreading 12.10.1 What Unreading Means 12.10.2 Using ungetc To Do Unreading 12.11 Block Input/Output 12.12 Formatted Output 12.12.1 Formatted Output Basics 12.12.2 Output Conversion Syntax 12.12.3 Table of Output Conversions 12.12.4 Integer Conversions 12.12.5 Floating-Point Conversions 12.12.6 Other Output Conversions 12.12.7 Formatted Output Functions 12.12.8 Dynamically Allocating Formatted Output 12.12.9 Variable Arguments Output Functions 12.12.10 Parsing a Template String 12.12.11 Example of Parsing a Template String 12.13 Customizing printf 12.13.1 Registering New Conversions 12.13.2 Conversion Specifier Options 12.13.3 Defining the Output Handler 12.13.4 printf Extension Example 12.13.5 Predefined printf Handlers 12.14 Formatted Input 12.14.1 Formatted Input Basics 12.14.2 Input Conversion Syntax 12.14.3 Table of Input Conversions 12.14.4 Numeric Input Conversions 12.14.5 String Input Conversions 12.14.6 Dynamically Allocating String Conversions 12.14.7 Other Input Conversions 12.14.8 Formatted Input Functions 12.14.9 Variable Arguments Input Functions 12.15 End-Of-File and Errors 12.16 Recovering from errors 12.17 Text and Binary Streams 12.18 File Positioning 12.19 Portable File-Position Functions 12.20 Stream Buffering 12.20.1 Buffering Concepts 12.20.2 Flushing Buffers 12.20.3 Controlling Which Kind of Buffering 12.21 Other Kinds of Streams 12.21.1 String Streams 12.21.2 Programming Your Own Custom Streams 12.21.2.1 Custom Streams and Cookies 12.21.2.2 Custom Stream Hook Functions 12.22 Formatted Messages 12.22.1 Printing Formatted Messages 12.22.2 Adding Severity Classes 12.22.3 How to use fmtmsg and addseverity 13 Low-Level Input/Output 13.1 Opening and Closing Files 13.2 Input and Output Primitives 13.3 Setting the File Position of a Descriptor 13.4 Descriptors and Streams 13.5 Dangers of Mixing Streams and Descriptors 13.5.1 Linked Channels 13.5.2 Independent Channels 13.5.3 Cleaning Streams 13.6 Fast Scatter-Gather I/O 13.7 Memory-mapped I/O 13.8 Waiting for Input or Output 13.9 Synchronizing I/O operations 13.10 Perform I/O Operations in Parallel 13.10.1 Asynchronous Read and Write Operations 13.10.2 Getting the Status of AIO Operations 13.10.3 Getting into a Consistent State 13.10.4 Cancellation of AIO Operations 13.10.5 How to optimize the AIO implementation 13.11 Control Operations on Files 13.12 Duplicating Descriptors 13.13 File Descriptor Flags 13.14 File Status Flags 13.14.1 File Access Modes 13.14.2 Open-time Flags 13.14.3 I/O Operating Modes 13.14.4 Getting and Setting File Status Flags 13.15 File Locks 13.16 Open File Description Locks 13.17 Open File Description Locks Example 13.18 Interrupt-Driven Input 13.19 Generic I/O Control operations 14 File System Interface 14.1 Working Directory 14.2 Accessing Directories 14.2.1 Format of a Directory Entry 14.2.2 Opening a Directory Stream 14.2.3 Reading and Closing a Directory Stream 14.2.4 Simple Program to List a Directory 14.2.5 Random Access in a Directory Stream 14.2.6 Scanning the Content of a Directory 14.2.7 Simple Program to List a Directory, Mark II 14.3 Working with Directory Trees 14.4 Hard Links 14.5 Symbolic Links 14.6 Deleting Files 14.7 Renaming Files 14.8 Creating Directories 14.9 File Attributes 14.9.1 The meaning of the File Attributes 14.9.2 Reading the Attributes of a File 14.9.3 Testing the Type of a File 14.9.4 File Owner 14.9.5 The Mode Bits for Access Permission 14.9.6 How Your Access to a File is Decided 14.9.7 Assigning File Permissions 14.9.8 Testing Permission to Access a File 14.9.9 File Times 14.9.10 File Size 14.10 Making Special Files 14.11 Temporary Files 15 Pipes and FIFOs 15.1 Creating a Pipe 15.2 Pipe to a Subprocess 15.3 FIFO Special Files 15.4 Atomicity of Pipe I/O 16 Sockets 16.1 Socket Concepts 16.2 Communication Styles 16.3 Socket Addresses 16.3.1 Address Formats 16.3.2 Setting the Address of a Socket 16.3.3 Reading the Address of a Socket 16.4 Interface Naming 16.5 The Local Namespace 16.5.1 Local Namespace Concepts 16.5.2 Details of Local Namespace 16.5.3 Example of Local-Namespace Sockets 16.6 The Internet Namespace 16.6.1 Internet Socket Address Formats 16.6.2 Host Addresses 16.6.2.1 Internet Host Addresses 16.6.2.2 Host Address Data Type 16.6.2.3 Host Address Functions 16.6.2.4 Host Names 16.6.3 Internet Ports 16.6.4 The Services Database 16.6.5 Byte Order Conversion 16.6.6 Protocols Database 16.6.7 Internet Socket Example 16.7 Other Namespaces 16.8 Opening and Closing Sockets 16.8.1 Creating a Socket 16.8.2 Closing a Socket 16.8.3 Socket Pairs 16.9 Using Sockets with Connections 16.9.1 Making a Connection 16.9.2 Listening for Connections 16.9.3 Accepting Connections 16.9.4 Who is Connected to Me? 16.9.5 Transferring Data 16.9.5.1 Sending Data 16.9.5.2 Receiving Data 16.9.5.3 Socket Data Options 16.9.6 Byte Stream Socket Example 16.9.7 Byte Stream Connection Server Example 16.9.8 Out-of-Band Data 16.10 Datagram Socket Operations 16.10.1 Sending Datagrams 16.10.2 Receiving Datagrams 16.10.3 Datagram Socket Example 16.10.4 Example of Reading Datagrams 16.11 The inetd Daemon 16.11.1 inetd Servers 16.11.2 Configuring inetd 16.12 Socket Options 16.12.1 Socket Option Functions 16.12.2 Socket-Level Options 16.13 Networks Database 17 Low-Level Terminal Interface 17.1 Identifying Terminals 17.2 I/O Queues 17.3 Two Styles of Input: Canonical or Not 17.4 Terminal Modes 17.4.1 Terminal Mode Data Types 17.4.2 Terminal Mode Functions 17.4.3 Setting Terminal Modes Properly 17.4.4 Input Modes 17.4.5 Output Modes 17.4.6 Control Modes 17.4.7 Local Modes 17.4.8 Line Speed 17.4.9 Special Characters 17.4.9.1 Characters for Input Editing 17.4.9.2 Characters that Cause Signals 17.4.9.3 Special Characters for Flow Control 17.4.9.4 Other Special Characters 17.4.10 Noncanonical Input 17.5 BSD Terminal Modes 17.6 Line Control Functions 17.7 Noncanonical Mode Example 17.8 Pseudo-Terminals 17.8.1 Allocating Pseudo-Terminals 17.8.2 Opening a Pseudo-Terminal Pair 18 Syslog 18.1 Overview of Syslog 18.2 Submitting Syslog Messages 18.2.1 openlog 18.2.2 syslog, vsyslog 18.2.3 closelog 18.2.4 setlogmask 18.2.5 Syslog Example 19 Mathematics 19.1 Predefined Mathematical Constants 19.2 Trigonometric Functions 19.3 Inverse Trigonometric Functions 19.4 Exponentiation and Logarithms 19.5 Hyperbolic Functions 19.6 Special Functions 19.7 Known Maximum Errors in Math Functions 19.8 Pseudo-Random Numbers 19.8.1 ISO C Random Number Functions 19.8.2 BSD Random Number Functions 19.8.3 SVID Random Number Function 19.9 Is Fast Code or Small Code preferred? 20 Arithmetic Functions 20.1 Integers 20.2 Integer Division 20.3 Floating Point Numbers 20.4 Floating-Point Number Classification Functions 20.5 Errors in Floating-Point Calculations 20.5.1 FP Exceptions 20.5.2 Infinity and NaN 20.5.3 Examining the FPU status word 20.5.4 Error Reporting by Mathematical Functions 20.6 Rounding Modes 20.7 Floating-Point Control Functions 20.8 Arithmetic Functions 20.8.1 Absolute Value 20.8.2 Normalization Functions 20.8.3 Rounding Functions 20.8.4 Remainder Functions 20.8.5 Setting and modifying single bits of FP values 20.8.6 Floating-Point Comparison Functions 20.8.7 Miscellaneous FP arithmetic functions 20.9 Complex Numbers 20.10 Projections, Conjugates, and Decomposing of Complex Numbers 20.11 Parsing of Numbers 20.11.1 Parsing of Integers 20.11.2 Parsing of Floats 20.12 Old-fashioned System V number-to-string functions 21 Date and Time 21.1 Time Basics 21.2 Elapsed Time 21.3 Processor And CPU Time 21.3.1 CPU Time Inquiry 21.3.2 Processor Time Inquiry 21.4 Calendar Time 21.4.1 Simple Calendar Time 21.4.2 High-Resolution Calendar 21.4.3 Broken-down Time 21.4.4 High Accuracy Clock 21.4.5 Formatting Calendar Time 21.4.6 Convert textual time and date information back 21.4.6.1 Interpret string according to given format 21.4.6.2 A More User-friendly Way to Parse Times and Dates 21.4.7 Specifying the Time Zone with TZ 21.4.8 Functions and Variables for Time Zones 21.4.9 Time Functions Example 21.5 Setting an Alarm 21.6 Sleeping 22 Resource Usage And Limitation 22.1 Resource Usage 22.2 Limiting Resource Usage 22.3 Process CPU Priority And Scheduling 22.3.1 Absolute Priority 22.3.1.1 Using Absolute Priority 22.3.2 Realtime Scheduling 22.3.3 Basic Scheduling Functions 22.3.4 Traditional Scheduling 22.3.4.1 Introduction To Traditional Scheduling 22.3.4.2 Functions For Traditional Scheduling 22.3.5 Limiting execution to certain CPUs 22.4 Querying memory available resources 22.4.1 Overview about traditional Unix memory handling 22.4.2 How to get information about the memory subsystem? 22.5 Learn about the processors available 23 Non-Local Exits 23.1 Introduction to Non-Local Exits 23.2 Details of Non-Local Exits 23.3 Non-Local Exits and Signals 23.4 Complete Context Control 24 Signal Handling 24.1 Basic Concepts of Signals 24.1.1 Some Kinds of Signals 24.1.2 Concepts of Signal Generation 24.1.3 How Signals Are Delivered 24.2 Standard Signals 24.2.1 Program Error Signals 24.2.2 Termination Signals 24.2.3 Alarm Signals 24.2.4 Asynchronous I/O Signals 24.2.5 Job Control Signals 24.2.6 Operation Error Signals 24.2.7 Miscellaneous Signals 24.2.8 Signal Messages 24.3 Specifying Signal Actions 24.3.1 Basic Signal Handling 24.3.2 Advanced Signal Handling 24.3.3 Interaction of signal and sigaction 24.3.4 sigaction Function Example 24.3.5 Flags for sigaction 24.3.6 Initial Signal Actions 24.4 Defining Signal Handlers 24.4.1 Signal Handlers that Return 24.4.2 Handlers That Terminate the Process 24.4.3 Nonlocal Control Transfer in Handlers 24.4.4 Signals Arriving While a Handler Runs 24.4.5 Signals Close Together Merge into One 24.4.6 Signal Handling and Nonreentrant Functions 24.4.7 Atomic Data Access and Signal Handling 24.4.7.1 Problems with Non-Atomic Access 24.4.7.2 Atomic Types 24.4.7.3 Atomic Usage Patterns 24.5 Primitives Interrupted by Signals 24.6 Generating Signals 24.6.1 Signaling Yourself 24.6.2 Signaling Another Process 24.6.3 Permission for using kill 24.6.4 Using kill for Communication 24.7 Blocking Signals 24.7.1 Why Blocking Signals is Useful 24.7.2 Signal Sets 24.7.3 Process Signal Mask 24.7.4 Blocking to Test for Delivery of a Signal 24.7.5 Blocking Signals for a Handler 24.7.6 Checking for Pending Signals 24.7.7 Remembering a Signal to Act On Later 24.8 Waiting for a Signal 24.8.1 Using pause 24.8.2 Problems with pause 24.8.3 Using sigsuspend 24.9 Using a Separate Signal Stack 24.10 BSD Signal Handling 25 The Basic Program/System Interface 25.1 Program Arguments 25.1.1 Program Argument Syntax Conventions 25.1.2 Parsing Program Arguments 25.2 Parsing program options using getopt 25.2.1 Using the getopt function 25.2.2 Example of Parsing Arguments with getopt 25.2.3 Parsing Long Options with getopt_long 25.2.4 Example of Parsing Long Options with getopt_long 25.3 Parsing Program Options with Argp 25.3.1 The argp_parse Function 25.3.2 Argp Global Variables 25.3.3 Specifying Argp Parsers 25.3.4 Specifying Options in an Argp Parser 25.3.4.1 Flags for Argp Options 25.3.5 Argp Parser Functions 25.3.5.1 Special Keys for Argp Parser Functions 25.3.5.2 Argp Parsing State 25.3.5.3 Functions For Use in Argp Parsers 25.3.6 Combining Multiple Argp Parsers 25.3.7 Flags for argp_parse 25.3.8 Customizing Argp Help Output 25.3.8.1 Special Keys for Argp Help Filter Functions 25.3.9 The argp_help Function 25.3.10 Flags for the argp_help Function 25.3.11 Argp Examples 25.3.11.1 A Minimal Program Using Argp 25.3.11.2 A Program Using Argp with Only Default Options 25.3.11.3 A Program Using Argp with User Options 25.3.11.4 A Program Using Multiple Combined Argp Parsers 25.3.12 Argp User Customization 25.3.12.1 Parsing of Suboptions 25.3.13 Parsing of Suboptions Example 25.4 Environment Variables 25.4.1 Environment Access 25.4.2 Standard Environment Variables 25.5 Auxiliary Vector 25.5.1 Definition of getauxval 25.6 System Calls 25.7 Program Termination 25.7.1 Normal Termination 25.7.2 Exit Status 25.7.3 Cleanups on Exit 25.7.4 Aborting a Program 25.7.5 Termination Internals 26 Processes 26.1 Running a Command 26.2 Process Creation Concepts 26.3 Process Identification 26.4 Creating a Process 26.5 Executing a File 26.6 Process Completion 26.7 Process Completion Status 26.8 BSD Process Wait Functions 26.9 Process Creation Example 27 Inter-Process Communication 27.1 Semaphores 27.1.1 System V Semaphores 27.1.2 POSIX Semaphores 28 Job Control 28.1 Concepts of Job Control 28.2 Job Control is Optional 28.3 Controlling Terminal of a Process 28.4 Access to the Controlling Terminal 28.5 Orphaned Process Groups 28.6 Implementing a Job Control Shell 28.6.1 Data Structures for the Shell 28.6.2 Initializing the Shell 28.6.3 Launching Jobs 28.6.4 Foreground and Background 28.6.5 Stopped and Terminated Jobs 28.6.6 Continuing Stopped Jobs 28.6.7 The Missing Pieces 28.7 Functions for Job Control 28.7.1 Identifying the Controlling Terminal 28.7.2 Process Group Functions 28.7.3 Functions for Controlling Terminal Access 29 System Databases and Name Service Switch 29.1 NSS Basics 29.2 The NSS Configuration File 29.2.1 Services in the NSS configuration File 29.2.2 Actions in the NSS configuration 29.2.3 Notes on the NSS Configuration File 29.3 NSS Module Internals 29.3.1 The Naming Scheme of the NSS Modules 29.3.2 The Interface of the Function in NSS Modules 29.4 Extending NSS 29.4.1 Adding another Service to NSS 29.4.2 Internals of the NSS Module Functions 30 Users and Groups 30.1 User and Group IDs 30.2 The Persona of a Process 30.3 Why Change the Persona of a Process? 30.4 How an Application Can Change Persona 30.5 Reading the Persona of a Process 30.6 Setting the User ID 30.7 Setting the Group IDs 30.8 Enabling and Disabling Setuid Access 30.9 Setuid Program Example 30.10 Tips for Writing Setuid Programs 30.11 Identifying Who Logged In 30.12 The User Accounting Database 30.12.1 Manipulating the User Accounting Database 30.12.2 XPG User Accounting Database Functions 30.12.3 Logging In and Out 30.13 User Database 30.13.1 The Data Structure that Describes a User 30.13.2 Looking Up One User 30.13.3 Scanning the List of All Users 30.13.4 Writing a User Entry 30.14 Group Database 30.14.1 The Data Structure for a Group 30.14.2 Looking Up One Group 30.14.3 Scanning the List of All Groups 30.15 User and Group Database Example 30.16 Netgroup Database 30.16.1 Netgroup Data 30.16.2 Looking up one Netgroup 30.16.3 Testing for Netgroup Membership 31 System Management 31.1 Host Identification 31.2 Platform Type Identification 31.3 Controlling and Querying Mounts 31.3.1 Mount Information 31.3.1.1 The fstab file 31.3.1.2 The mtab file 31.3.1.3 Other (Non-libc) Sources of Mount Information 31.3.2 Mount, Unmount, Remount 31.4 System Parameters 32 System Configuration Parameters 32.1 General Capacity Limits 32.2 Overall System Options 32.3 Which Version of POSIX is Supported 32.4 Using sysconf 32.4.1 Definition of sysconf 32.4.2 Constants for sysconf Parameters 32.4.3 Examples of sysconf 32.5 Minimum Values for General Capacity Limits 32.6 Limits on File System Capacity 32.7 Optional Features in File Support 32.8 Minimum Values for File System Limits 32.9 Using pathconf 32.10 Utility Program Capacity Limits 32.11 Minimum Values for Utility Limits 32.12 String-Valued Parameters 33 DES Encryption and Password Handling 33.1 Legal Problems 33.2 Reading Passwords 33.3 Encrypting Passwords 33.4 DES Encryption 34 Debugging support 34.1 Backtraces 35 POSIX Threads 35.1 Thread-specific Data 35.2 Non-POSIX Extensions 35.2.1 Setting Process-wide defaults for thread attributes 36 Internal probes 36.1 Memory Allocation Probes 36.2 Mathematical Function Probes 36.3 Non-local Goto Probes Appendix A C Language Facilities in the Library A.1 Explicitly Checking Internal Consistency A.2 Variadic Functions A.2.1 Why Variadic Functions are Used A.2.2 How Variadic Functions are Defined and Used A.2.2.1 Syntax for Variable Arguments A.2.2.2 Receiving the Argument Values A.2.2.3 How Many Arguments Were Supplied A.2.2.4 Calling Variadic Functions A.2.2.5 Argument Access Macros A.2.3 Example of a Variadic Function A.3 Null Pointer Constant A.4 Important Data Types A.5 Data Type Measurements A.5.1 Computing the Width of an Integer Data Type A.5.2 Range of an Integer Type A.5.3 Floating Type Macros A.5.3.1 Floating Point Representation Concepts A.5.3.2 Floating Point Parameters A.5.3.3 IEEE Floating Point A.5.4 Structure Field Offset Measurement Appendix B Summary of Library Facilities Appendix C Installing the GNU C Library C.1 Configuring and compiling the GNU C Library C.2 Installing the C Library C.3 Recommended Tools for Compilation C.4 Specific advice for GNU/Linux systems C.5 Reporting Bugs Appendix D Library Maintenance D.1 Adding New Functions D.1.1 Platform-specific types, macros and functions D.2 Porting the GNU C Library D.2.1 Layout of the sysdeps Directory Hierarchy D.2.2 Porting the GNU C Library to Unix Systems Appendix E Platform-specific facilities E.1 PowerPC-specific Facilities Appendix F Contributors to the GNU C Library Appendix G Free Software Needs Free Documentation Appendix H GNU Lesser General Public License Appendix I GNU Free Documentation License Concept Index Type Index Function and Macro Index Variable and Constant Macro Index Program and File Index"	"null"	"null"	"The purpose of this manual is to tell you how to use the facilities of the GNU C Library."	"true"
"Frameworks"	"Apache C++ Standard Library"	"http://stdcxx.apache.org/"	"STDCXX, A collection of algorithms, containers, iterators, and other fundamental components. [retired] [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache C++ Standard Library Apache > stdcxx   stdcxx Last Modified: $Date: 2012-02-14 21:41:50 +0100 (Tue, 14 Feb 2012) $   stdcxx Status Download README License Bugs Class Reference User Guide Design and Style Document Apache C++ Standard Library (STDCXX) What is The Apache C++ Standard Library? Objectives Project News Platforms Project Status Users Contributors Committers PMC Communication Mailing Lists References What is the Apache C++ Standard Library? The Apache C++ Standard Library project (code name stdcxx, pronounced ""standard C++ library"", not S-T-D-C-X-X) is a collection of algorithms, containers, iterators, and other fundamental components of every piece of software, implemented as C++ classes, templates, and functions essential for writing C++ programs. The goal of the Apache C++ Standard Library is to provide a free implementation of the ISO/IEC 14882 international standard for C++ that enables source code portability and consistent behavior of programs across all major hardware implementations, operating systems, and compilers, open source and commercial alike. An additional goal is to achieve maximum implementation efficiency on each platform by taking advantage of platform-specific high-performance facilities and features which are often unique to the type of hardware, the operating system or the compiler. As the starting point for future efforts, in summer 2005 Rogue Wave Software has contributed its commercial implementation of the C++ Standard Library to the Apache stdcxx project, a proven code base that has been shipping for over a decade and is among the most widely used cross-platform implementations of the library. The key features of the stdcxx project at the time of submission include: Full conformance to the C++ standard Complete implementation of the localization library independent of the underlying operating system, including a large set of locale definition files, character set description files, and utility programs to process these files and generate locale databases User control over strict or permissive conformance checking Thread-safe implementation of strings, iostreams, and locales Reference counted basic_string implementation using atomic locking with the ability to switch to a non-reference counted implementation Excellent runtime performance Optimized for fast compiles and extremely small executable file sizes Portable to and fully tested on a large set of operating systems, including AIX, HP-UX, Linux, Solaris, Windows, etc. Portable to most leading commercial as well as open source compilers Debugging facilities such as safe iterators, precondition and postcondition checking, and the ability to generate stack traces Fully documented configuration and build infrastructure Thorough, well-maintained documentation Ten years of deployment in the world's most critical enterprise systems Objectives The long-term objectives of the project include: Standards Conformance. Continue to closely track the C++ Standard, as well as any other relevant standards. Portablity. Continue to provide support for a broad set of platforms (C++ compilers, operating systems, and hardware architectures). Quality of Implementation. Maintain the current high quality of implementation, which has come to be expected of all Apache projects. This ranges from high runtime efficiency to high space efficiency, to high portability of data (in areas such as localization and internationalization which are typically not specified by the C++ or C standards), to facilitating the portability of program source code. Project News 5/1/2008 STDCXX 4.2.1 released. 12/14/2007 STDCXX graduates from the Incubator and becomes a Top Level Project. 11/29/2007 STDCXX community adds a new committer, Travis Vitek. 10/29/2007 With the approval of the Incubator PMC, STDCXX 4.2.0 was released. 10/16/2007 Proposal to graduate STDCXX to a Top Level Project passes the Incubator PMC vote. 9/5/2007 STDCXX community adds two new committers, Eric (Brad) Lemings and Mark Brown. 10/11/2006 STDCXX community adds a new committer, Andrew Black. 8/26/2007 Started tracking project metrics at www.ohloh.net under Apache C++ Standard Library. 6/1/2007 Started tracking site visitation at Google Analytics under stdcxx. Send an email from your Google Mail account to dev to request access to the account. 3/26/2007 Tim Triemstra joins the PPMC. 2/13/2007 Andrew Black and Farid Zaripov join the PPMC. 10/11/2006 STDCXX community adds a new committer, Andrew Black. 8/10/2006 STDCXX community adds a new committer, Farid Zaripov. 1/30/2006 With the approval of the Incubator PMC, STDCXX 4.1.3 was released. 1/13/2006 STDCXX community adds a new committer, Anton Pevtsov. 11/25/2005 Windows configuration and build infarstructure committed to Subversion (stdcxx-5). 9/16/2005 The first snapshot of stdcxx 4.1.2 has been published. 9/5/2005 The test suite driver committed to Subversion (stdcxx-3). 9/1/2005 A proposal to publish the first stdcxx snapshot on the stdcxx Web site has passed the community vote. 8/28/2005 The process of downloading stdcxx files documented on the Download page. (See stdcxx-17). 8/01/2005 The process of reporting bugs in the stdcxx bug tracking database documented and published on the Bugs page. (See stdcxx-9.) 7/19/2005 stdcxx project page committed to Subversion. The project status page committed to Subversion. 7/18/2005 stdcxx sources and documentation committed Subversion. 5/19/2005 stdcxx project accepted for incubation. 5/13/2005 stdcxx project proposal submitted to the Incubator mailing list. Platforms A key stdcxx objective is to facilitate the portability of C++ programs to as many platforms (hardware architectures, operating systems, and compilers) as practical. It is envisaged that the set of platforms will evolve and grow as the project attracts contributors. The project sources initially committed to the Subversion repository (revision 219596) are based on Rogue Wave C++ Standard Library version 4.1.0. The list of platforms to which this version of the project was ported (but which is expected to grow as the stdcxx project evolves) is: compiler operating system processor/architecture Comeau C++ 4.2.4 or later Solaris 7 or later UltraSPARC Compaq C++ 6.3 or later Tru64 UNIX Alpha EDG eccp 2.45.2 or later Linux, Solaris 7 or later x86, UltraSPARC GNU gcc 2.95.2 or later AIX, Cygwin, HP-UX, Linux, SFU, Solaris HP aC++ 3.33 or later HP-UX 11.00, HP-UX 11i HP-UX 11i v2 PA-RISC HP aC++ 5.50 or later HP-UX 11i v1.5 , HP-UX 11i v1.6 HP-UX 11i v2 IPF IBM VisualAge C++ 5.0 or later AIX 4.3.3 or later PowerPC IBM XL C/C++ 7.0 or later AIX 5.2 or later, Linux PowerPC Intel C++ 7.0 or later Linux, Windows NT or later x86, AMD64 , EM64T, IA64 SGI MIPSpro 7.3 or later SGI IRIX MIPS Visual C++ 6.0 Windows NT or later x86 Visual C++ .NET 2002 (7.0) Windows 2003 or later IA64 Visual C++ 2005 (8.0) Windows 2003 or later IA64 Sun C++ 5.3 or later Solaris 2.6 or later UltraSPARC Sun C++ 5.7 or later Solaris 10 or later x86, AMD64, EM64T Project Status Stdcxx status reports to the ASF Board of Directors are stored in the status/ subdirectory of the site. Users Stdcxx Users are Developers with read-only access, i.e., without Commit Access to the stdcxx Codebase who are using the project. The mailing list appropriate for discussions of using the stdcxx project is user@stdcxx.apache.org. This is an archived, moderated mailing list open to all subscribers. You may subscribe by sending a blank email to user-subscribe@stdcxx.apache.org. To obtain additional information about this list send a blank email to user-info@stdcxx.apache.org. Contributors Stdcxx Contributors are Developers without commit (or write) access to the stdcxx codebase who directly or otherwise make improvements to the project codebase, including its Web pages. This includes but is not limited to individuals who respond to questions on the project's mailing lists, review and provide helpful feedback on patches or commits, submit, provide helpful comments on, or triage bug reports, or contribute useful patches of their own. Interested contributors may be voted to become Committers after a period of valuable activity. Because Contributors have read but not write access to stdcxx code repository, they can check stdcxx out and make changes to their local copy of stdcxx files but they cannot check them back in. To get their changes committed, they must follow the process for Submitting Patches. The stdcxx community welcomes new contributors. If you are interested in getting involved, the first thing to do after reading the project Web pages is to subscribe to the dev mailing list and skimming the archives. If you're looking for ideas for where your help might be needed, browse the bug database or simply ask on the maling list. Committers Stdcxx Committers are Developers with commit (or write) access to the stdcxx codebase. For safe changes on trunk all stdcxx committers follow the Commit-Then-Review policy (CTR for short). For potentially unsafe changes or any changes to branches all stdcxx committers follow the Review-Then-Commit policy (RTC for short). Whether a change is safe or not is a judgment call that should be made after careful testing of the change on at least two different platforms with two different compilers. The list of current committers in alphabetical order is below: user id name/email affiliation since comment ablack Andrew Black Rogue Wave Software, Inc. Oct 11, 2006 mbrown Mark Brown Sep 5, 2007 hbuelow Heidi Buelow May 19, 2005 Emeritus ldiduck Lance Diduck May 19, 2005 jhollis John Hollis Rogue Wave Software, Inc. May 19, 2005 Emeritus ajindal Amit Jindal Aquevix, Ltd. May 19, 2005 elemings Eric (Brad) Lemings Sep 5, 2007 lnicoara Liviu Nicoara May 19, 2005 rpalepu Ravi Palepu May 19, 2005 Emeritus antonp Anton Pevtsov VDI Jan 3, 2006 sebor Martin Sebor Cisco Systems, Inc. May 19, 2005 ttriemstra Tim Triemstra Apple May 19, 2005 vitek Travis Vitek Rogue Wave Software, Inc. November 29, 2007 faridz Farid Zaripov EPAM Aug 10, 2006 Committers in italics do not yet have a signed Contributor License Agreement on file. This indicates a transient state after a committer has been voted in but their CLA hasn't been received or processed by the foundation. An up-to-date list of all Apache committers (or committers-to-be) is being maintained by Jim Jagielski on this page. The mailing list used by stdcxx committers for discussions of the maintenance, development, and porting of the stdcxx project is dev@stdcxx.apache.org. This is an archived, moderated mailing list open to all subscribers. You may subscribe by sending a blank email to dev-subscribe@stdcxx.apache.org. PMC The stdcxx Project Management Committee (PMC) is a group of volunteers responsible for the formal oversight of the stdcxx podling, its management, and for interfacing with the Apache Board of Directors. The members of the stdcxx PMC are: user id name/contact comment ablack Andrew Black mbrown Mark Brown hbuelow Heidi Buelow jerenkrantz Justin Erenkrantz ajindal Amit Jindal elemings Eric (Brad) Lemings lnicoara Liviu Nicoara apevtsov Anton Pevtsov wrowe William A. Rowe, Jr. sebor Martin Sebor PMC Chair ttriemstra Tim Triemstra faridz Farid Zaripov The PMC mailing list is private@stdcxx.apache.org. This is a moderated, by-invitation-only mailing list closed to the public. Invited individuals can subscribe by sending a blank email to private-subscribe@stdcxx.apache.org. An example of a topic that might be appropriate for this list is a discussion of the merits of a proposed committer. Communication Communication about the project and all decisions take place on the project's mailing lists. There are a number good reasons why communicating on mailing lists is preferable to other ways of communicating, including private email or instant messaging. Some of the important ones include: Unlike communicating in private, mailing lists make it possible for all list subscribers to benefit from the discussion, and provides an opportunity for those who wouldn't be invited to the private discussion to offer their own feedback on the subject. Unlike Instant Messaging, mailing list make it possible for interested parties to participate asynchronously, regardless of which time zone they are located in. Unlike private communications, mailing list discussions are archived for future reference, with the archives being easily searchable by anyone interested. Mailing list archives are important not just so that new contributors can learn from past decisions but they are an indispensable tool also for long-time committers when we forget why certain things were done a certain way. It is the preferred mode of communicating for all Apache projects. See the Communication section of How the ASF works. If you choose to contact one of the project committers in private expect to be directed to the mailing lists. Mailing Lists The following table provides a summary of information about stdcxx mailing lists along with a number of interfaces to their archives. All lists are moderated. Only subscribers may post. Subscription to private is by invitation of the PMC only. With one exception, the activity of each list is monitored and can be viewed along with other interesting information on this page maintained by Ken Coar. name subscribe raw archives Apache archive Nabble Forums The Mail Archive MARC activity dev dev-subscribe mail/dev mod_mbox stdcxx-dev forum dev apache-stdcxx-dev stats user user-subscribe mail/user mod_mbox stdcxx-user forum user apache-stdcxx-user stats commits commits-subscribe mail/commits mod_mbox stdcxx-commits forum commits apache-stdcxx-commits stats issues issues-subscribe mail/issues mod_mbox stdcxx-issues forum issues apache-stdcxx-issues stats private private-subscribe N/A N/A N/A N/A N/A N/A References A number of excellent design and programming books describe the C++ Standard Library in an approachable way. In addition, besides the required Class Reference, this implementation of the library also includes an extensive User Guide complete with tutorials and example programs. That being said, the ultimate reference to the C++ Standard Library is, of course, the C++ Standard itself (and to a smaller extent, also the C Standard). An electronic copy of the most recent version of the C++ and C standards can be obtained from the ANSI eStandards store. INCITS/ISO/IEC 14882-2003 Programming Languages  C++ INCITS/ISO/IEC 9899-1999 Programming Languages  C The C++ Standard Library: A Tutorial and Reference by Nicolai M. Josuttis Generic Programming and the STL: Using and Extending the C++ Standard Template Library by Matthew H. Austern Stl Tutorial & Reference Guide: C++ Programming With the Standard Template Library by David R. Musser and Atul Saini The C++ Standard Template Library by P.J. Plauger, Alexander A. Stepanov, Meng Lee, and David R. Musser Effective STL: 50 Specific Ways to Improve Your Use of the Standard Template Library by Scott Meyers Standard C++ IOStreams and Locales: Advanced Programmer's Guide and Reference by Angelika Langer, Klaus Kreft   Copyright © 2005-2009 The Apache Software Foundation."	"null"	"null"	"STDCXX, A collection of algorithms, containers, iterators, and other fundamental components. [retired] [Apache2]"	"true"
"Frameworks"	"APR"	"http://apr.apache.org/"	"Apache Portable Runtime. Another library of cross-platform utility functions. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome! - The Apache Portable Runtime Project Get Involved Subversion Mailing Lists Build on Win32 Build on Unix Download! from a mirror APR Docs Version 1.5 Version 1.6 (dev preview) Trunk APR 2.0 (dev preview) APR-util Docs Version 1.5 Trunk APR 2.0 (dev preview) APR-iconv Docs Version 1.2 Trunk (dev preview) Guidelines Project Guidelines Contributing Version Numbers Miscellaneous License Security Reports Projects using APR Sponsors Sponsorship Welcome The mission of the Apache Portable Runtime (APR) project is to create and maintain software libraries that provide a predictable and consistent interface to underlying platform-specific implementations. The primary goal is to provide an API to which software developers may code and be assured of predictable if not identical behaviour regardless of the platform on which their software is built, relieving them of the need to code special-case conditions to work around or take advantage of platform-specific deficiencies or features. Recommended releases The recommended releases of the several Apache Portable Runtime libraries are APR 1.5.2, released April 29, 2015 APR-util 1.5.4, released September 22, 2014 APR-iconv 1.2.1, released November 26, 2007 Apache Portable Runtime 1.5.2 Released The Apache Software Foundation and the Apache Portable Runtime Project are proud to announce the General Availability of version 1.5.2 of the Apache Portable Runtime library. APR 1.5.2 resolves an important issue on the Windows platform that can result in vulnerabilities in APR applications which use APR pipes; this issue is tracked by CVE-2015-1829. APR 1.5.2 fixes a number of additional run-time and build-time bugs affecting multiple platforms. Users of previous versions are encouraged to update to this release. For further details of this release, see the official announcement as well as the CHANGES-APR-1.5 file. Download Programmer's Manual: APR Apache Portable Runtime Utility 1.5.4 Released The Apache Software Foundation and the Apache Portable Runtime Project are proud to announce the General Availability of version 1.5.4 of the APR Apache Portable Runtime Utility library. APR-util 1.5.4 is a bug fix release. For further details of this release, see the official announcement as well as the CHANGES-APR-UTIL-1.5 file. Download Programmer's Manual: APR-util Projects Using APR After several years of development, APR is beginning to see use outside of the Apache HTTP Server. To encourage more people to investigate APR for their projects, here are a list of both Open Source and Commercial projects that are currently using APR. If you are using APR, and would like your project recognized, please send e-mail to the developer's mailing list. APR subprojects The following is a list of supported development projects under the APR Project. All of the development happens on the indicated mailing lists. See mailing lists to learn how to take part in these discussions. Or, check the archives. apr - a portable runtime library Source: apr Mailing list: dev@apr.apache.org Releases: apr releases API Documentation: apr docs (current stable branch), Using APR Pools Tutorial: An Introduction to APR covers the structure and basic concepts. See sample code. Test Coverage: apr test coverage apr-util - a companion library to APR Source: apr-util Mailing list: dev@apr.apache.org Releases: apr-util releases API Documentation: apr-util docs (current stable branch) apr-iconv - a portable implementation of the iconv() library Source: apr-iconv Releases: apr-iconv releases Mailing list: dev@apr.apache.org API Documentation: apr-iconv docs (current stable branch) How to start developing with APR We hope this website starts you in the right direction. Please read the docs and tutorials for the project you are interested in. If you have suggestions of any sort, please feel free to send us an email at dev@apr.apache.org! Copyright © 2008-2016, The Apache Software Foundation"	"null"	"null"	"Apache Portable Runtime. Another library of cross-platform utility functions. [Apache2]"	"true"
"Frameworks"	"ASL"	"http://stlab.adobe.com/"	"Adobe Source Libraries provides peer-reviewed and portable C++ source libraries. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Adobe Software Technology Lab: Main Page Documentation Overview Building ASL Documentation Library Wiki Docs Indices Browse Perforce More Info Release Notes Wiki Site Search License Success Stories Contributors Media Download Perforce Depots Support ASL SourceForge Home Mailing Lists Discussion Forums Report Bugs Suggest Features Contribute to ASL RSS Short-text news Full-text news File releases Other Adobe Projects Open @ Adobe Adobe Open Source Adobe Labs Adobe Media Gallery C++ Benchmarks Other Resources Boost RIAForge SGI STL Welcome to stlab.adobe.com stlab.adobe.com is the home of the Adobe Source Libraries (ASL). ASL provides peer-reviewed and portable C++ source libraries. The libraries are intended to be widely useful, leveraging and extending both the C++ Standard Library and the Boost Libraries. stlab.adobe.com is maintained by Sean Parent, Mat Marcus, and Foster Brereton. Search Latest News November 4, 2010 ASL - 1.0.43 Release I've recently returned to Adobe as architect for mobile imaging applications. The Software Technology Lab remains a ""virtual group."" We have a collection of improvements, fixes, updates, and additions that we've gathered over the last year and a half since the last release. My hope is to simplify the process and the libraries to something more managable and to get back to more frequent releases. Suggestions welcome. A huge thanks to Foster and Mat who have continued to contribute to the libraries. Thanks much for your continued support! Sean Highlights of this release include: ASL: Updated projects to support Boost 1.44.0 Simplified move library. Removed move_sink and copy_sink in favor of always using RVO. Added the ""to"" token (""->"") to the lexer Added support for hexadecimal numbers to the lexer (0xDEADBEEF, 0xffe0, etc.) Removed gil from ASL (clients can use boost version instead) Added support for gcc 4.5.0 with -std=C++0x. Updated to Visual Studio 2010, older versions not supported. Extended the dancing links algorithm to include colorized nodes; updated test cases as well. gcc 4.2 and OS X 10.5 SDK support (deprecated function warnings selectively disabled). Replaced of basic_sheet_t with sheet_t in layouts and associated Eve grammar updates. New external_model_t with support for cell creation in Adam parser. once.hpp fix (Thanks John (Eljay) Love-Jensen) Added support for overriding the index operator in the virtual machine. Miscellaneous bug fixes. Property model library Added support for multi-out relate terms. For example: --- logic: relate { x, y <== [a, b]; a, b <== [x, y]; } --- The rhs value must be an array with the same arity as the number of cells named on the left. A cell can appear more than once on the left so long as the term can be uniquely selected. User supported libs (APL): Binary file format debugger (bffd) submitted May 13, 2009 ASL - 1.0.42 Release Highlights of this release include: Property model library (Adam) Changed filters (self referential expression on an interface cell) so they aren't ignored when the cell is derived from a relate clause (see Release Notes for details). Fixed issue introduced in 1.0.41 with incorrect poison set being calculated for invariants. Reworked invariant cells they now behave more like output cells and can be refered to in expressions. Updated the image_size example to demonstrate an ignored/disabled control (resample method when not resampling). Some 64 bit fixes and cleanup. Minor cleanup, performance improvements and bug fixes. February 13, 2009 ASL - 1.0.41 Release Highlights of this release include: ASL: Property model library (Adam) - rewrote main solver no longer uses exceptions as flow control. fixed bug with initializers that refer to cells with define_expressions has causing the define_expressions to evaluate which could refer to cells which had not been declared. exported get() member, it is now the client responsibility to wire sheet_t::get() to the variable lookup in the VM (this also allows the clients to hook the variable lookup for supporting custom variables). In the future the VM will be separated entirely from the property model library. added some more error reporting including reporting duplicate cell names. virtual machine library removed the contributing buts which were tracked through calculations. The VM stack is now just a stack of any_regular_t. removed the use of storing size_t in an any_regular_t in the VM (was breaking serialization among other things because size_t is not a C++ basic type on Win64). any_regular_t improved serialization by removing one heap alloc/dealloc per item serialized, also uses logN search for type instead of linear search. removed the hack to handle size_t serialization on Win64. serialization will now throw an exception when it encounters a type other than one of the 7 CEL types (it used to assert). in debug builds, the version field of the any_regular_t vtable contains a short type name for debugging purposes only. See the wiki documentation. December 23, 2008 ASL - 1.0.40 Release I have left Adobe and will be pursuing other opportunities. This release is my first as an ""external"" opensource contributor. Please use my mmarcus <at> emarcus <dot> org address instead of my former adobe.com address. Mat Highlights of this release include: ASL: The pmeval (property model evaluator) interpreter is ready for general purpose use. It has been enhanced to allow flexible exploration and testing of property models. Commands include check assertions, print statements, update, reinitialize, and property model dumps (showing enablement, contributing/intent). pmeval can be built from source (all platforms, including cygwinand *N*X) or downloaded from sourceforge for Mac or Windows. Property models can also be evaluated via an experimental web form-based interface to pmeval. The service, along with an intermediate property modeling tutorial is available through http://emarcus.org/#pmeval . Rewrote enablement for the property model engine. Enabled status is set to a conservative approximation of enablement detection (erring towards enablement): it is set to false if a change to the cell cannot affect the output of a correct sheet, and true if it *may* effect the output. Replaced monitor_active with monitor_enabled (conservative enablement, touch_set support). See the documentation for monitor_enabled in adam.hpp, and the calls to monitor_enabled in (APL's) widget_factory.hpp for details. (Note that it is incorrect to unconditionally pass NULLs to monitor_enabled. The bug will manifest as incorrect enablement behavior in the presence of touch sets in eve sheets.) Fixed bug where interface cells appearing in a when clause condition were not contributing. New papers and presnetations at http://stlab.adobe.com/wiki/index.php/Papers_and_Presentations Patched boost to allow preservation of test targets (now the default). Patched to serializes std::size_t on MSVC when compiling for 64 bit architecture. Added qualification to binary_search algorithm to remove ambiguity. Refactored pmeval, introduced (test-only) queryable_sheet_t. pmeval now supports multiple input files, sheet separate from commands, multiple simultaneous sheets. Allow monitoring of invariants under monitor_value. Improved release notes and build scripts for *N*X/cygwin User supported libs (APL): Updated widget factory so that widgets monitor_considered instead of monitor_active, to properly enable in presence of touch sets. Fixed reveal widget bug Update so that both stlab and internal adobe frameworks can leverage widget_factory.hpp; also rolled in updates from other teams within adobe More News... Company |  Online Privacy Policy |  Terms of Use |  Contact Us |  Accessibility |  Report Piracy |  Permissions & Trademarks |  Product License Agreements |  Send Feedback Copyright © 2006-2007 Adobe Systems Incorporated. Use of this website signifies your agreement to the Terms of Use and Online Privacy Policy. Search powered by Google"	"null"	"null"	"Adobe Source Libraries provides peer-reviewed and portable C++ source libraries. [MIT]"	"true"
"Frameworks"	"Boost"	"https://github.com/boostorg"	"A large collection of generic C++ libraries. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Boost.org · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization Boost.org Boost provides free peer-reviewed portable C++ source libraries. Interstellar Space http://boost.org owners@boost.org Repositories People 32 Filters Sources Forks C++ 465 63 hana Your standard library for metaprogramming Updated Jul 15, 2016 HTML 900 383 boost forked from harr999y/boost Super-project for modularized Boost Updated Jul 15, 2016 C++ 30 37 math Boost.org math module Updated Jul 15, 2016 C++ 21 70 test Boost.org test module Updated Jul 15, 2016 C++ 40 57 python Boost.org python module Updated Jul 15, 2016 C 63 98 build Boost.Build Updated Jul 15, 2016 Python 0 3 release-tools Updated Jul 15, 2016 C++ 84 67 spirit Boost.org spirit module Updated Jul 15, 2016 C++ 17 41 algorithm Boost.org algorithm module Updated Jul 14, 2016 C++ 15 23 multiprecision Updated Jul 14, 2016 C++ 32 62 graph Boost.org graph module Updated Jul 14, 2016 HTML 4 40 website The boost website. Updated Jul 13, 2016 C++ 46 76 thread Boost.org thread module Updated Jul 13, 2016 C++ 1 12 exception Boost.org exception module Updated Jul 13, 2016 C++ 34 33 log Updated Jul 13, 2016 C++ 5 38 iostreams Boost.org iostreams module Updated Jul 12, 2016 C++ 9 25 date_time Boost.org date_time module Updated Jul 12, 2016 C++ 12 22 mpl Boost.org mpl module Updated Jul 12, 2016 C++ 7 21 variant Boost.org variant module Updated Jul 12, 2016 C++ 11 21 core Boost Core Utilities Updated Jul 12, 2016 Previous 1 2 3 4 5 6 7 8 Next 32 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/boostorg"	"A large collection of generic C++ libraries. [Boost]"	"true"
"Frameworks"	"website"	"http://www.boost.org/"	"A large collection of generic C++ libraries. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Boost C++ Libraries Boost C++ Libraries ...one of the most highly regarded and expertly designed C++ library projects in the world. — Herb Sutter and Andrei Alexandrescu, C++ Coding Standards Welcome to Boost.org! Boost provides free peer-reviewed portable C++ source libraries. We emphasize libraries that work well with the C++ Standard Library. Boost libraries are intended to be widely useful, and usable across a broad spectrum of applications. The Boost license encourages both commercial and non-commercial use. We aim to establish ""existing practice"" and provide reference implementations so that Boost libraries are suitable for eventual standardization. Ten Boost libraries are included in the C++ Standards Committee's Library Technical Report (TR1) and in the new C++11 Standard. C++11 also includes several more Boost libraries in addition to those from TR1. More Boost libraries are proposed for standardization in C++17. Since 2006 an intimate week long annual conference related to Boost called C++ Now has been held in Aspen, Colorado each May. Boost has been a participant in the annual Google Summer of Code since 2007. Getting Started Boost works on almost any modern operating system, including UNIX and Windows variants. Follow the Getting Started Guide to download and install Boost. Popular Linux and Unix distributions such as Fedora, Debian, and NetBSD include pre-built Boost packages. Boost may also already be available on your organization's internal web server. Background Read on with the introductory material to help you understand what Boost is about and to help in educating your organization about Boost. Community Boost welcomes and thrives on participation from a variety of individuals and organizations. Many avenues for participation are available in the Boost Community. Downloads Current Release Version 1.61.0 Release Notes | Download | Documentation May 13th, 2016 02:58 GMT More Downloads... (RSS) News Version 1.61.0 New Libraries: Compute, DLL, Hana, Metaparse. Updated Libraries: Any, Container, Context, Coroutine, Coroutine2, Fusion, Geometry, Interprocess, Intrusive, Lexical Cast, Log, Move, Optional, Test, Variant. May 13th, 2016 02:58 GMT Version 1.60.0 New Libraries: VMD Updated Libraries: Atomic, Chrono, Container, Context, Core, Filesystem, Flyweight, Fusion, Interprocess, Intrusive, Lexical Cast, Locale, Log, Move, Multi-index Containers, odeint, Optional, Predef, Test, Thread, UUID. December 17th, 2015 15:52 GMT Version 1.59.0 New Libraries: Convert, Coroutine2. Updated Libraries: Container, Context, Coroutine, Fusion, Geometry, Interprocess, Intrusive, Lexical Cast, Log, Move, Multi-index Containers, Predef, Program Options, Property Tree, Test, TypeIndex, Variant. August 13th, 2015 15:23 GMT More News... (RSS) Loading Welcome > Getting Started > Download > Libraries > Mailing Lists > Reporting and Fixing Bugs> Wiki> Introduction > Download > News > Version History > License > People > Bibliography > Who's Using Boost > FAQ > How Boost Started > Index > Community > Discussion Groups > Discussion Policy > C++ > Committee Meetings > Generic Progamming Techniques > Error and Exception Handling > Exception-Safety in Generic Components > Counted Body Techniques > Implementation Variations > Feature Model Diagrams > Acknowledgements > Mailing Lists > Moderators > Steering Committee > Requesting a New Feature > Reviews > Schedule > Sandbox > IRC > Google Summer of Code > 2006 Overview > C++Now > Development > Submissions > Reporting and Fixing Bugs> Open Pull Requests Report> Testing > Master Summary > Master Issues > Develop Summary > Develop Issues > Running Regression Tests > Requirements and Guidelines > Test policy > Header policy > Separate Source > Library Reuse > Coding Guidelines for Integral Constant Expressions > Library Metadata > Website Updating > Exemplar > Design FAQ > Self Check > Documentation > Getting Started > Libraries > 1.61.0 - Current Release > 1.60.0> 1.59.0> 1.58.0> 1.57.0> 1.56.0 > 1.55.0 > 1.54.0 > 1.53.0 > 1.52.0 > 1.51.0 > 1.50.0 > 1.49.0 > 1.48.0 > 1.47.0 > 1.46.1 > 1.45.0 > 1.44.0 > 1.43.0 > 1.42.0 > 1.41.0 > 1.40.0 > 1.39.0 > 1.38.0 > 1.37.0 > 1.36.0 > 1.35.0 > 1.34.1 > 1.34.0 > 1.33.1 > 1.32.0 > 1.31.0 > Tools > Boost Build > Regression > Inspect > BoostBook > QuickBook > bcp > Wave > AutoIndex > Copyright Beman Dawes, David Abrahams, 1998-2005. Copyright Rene Rivera 2004-2007. Distributed under the Boost Software License, Version 1.0. XHTML 1.0 CSS OSI Certified"	"null"	"null"	"A large collection of generic C++ libraries. [Boost]"	"true"
"Frameworks"	"BDE"	"https://github.com/bloomberg/bde"	"The BDE Development Environment from Bloomberg Labs. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"573"	"136"	"125"	"GitHub - bloomberg/bde: Basic Development Environment - a set of foundational C++ libraries used at Bloomberg. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 136 Star 573 Fork 125 bloomberg/bde Code Issues 5 Pull requests 1 Wiki Pulse Graphs Basic Development Environment - a set of foundational C++ libraries used at Bloomberg. http://bloomberglabs.com/bde 2,135 commits 67 branches 14 releases 30 contributors C++ 99.8% Other 0.2% C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev/mversche/bdlcc-sketch dev/mversche/memory-advisor-sketch gh-pages master releases/2.x releases/2.17.x releases/2.22.x releases/2.23.x releases/2.24.x review/Linux-on-POWER-port review/add-bdlma-localsequentialallocator-drqs60395113 review/add-branch-prediction-to-bsls-bsltestutil-drqs-61407707 review/add-missing-header-decimalconvertutil-drqs-61853981 review/add-safe-string-cstr review/add-warning-error-msg-decorator-drqs-50185532 review/added-hashAsBytes-to-hashutil-DRQS-53258507 review/bbldc_initial_development review/bdlb_cstringhash-drqs-66747832 review/bdlb_nullinputiterator-drqs-66483237 review/bdlb_nulloutputiterator-drqs-66603638 review/bdlb_randomdevice-license review/bdldfp-ostream-formatting review/bdlma_guardingallocator-bus-error-drqs_52306644 review/bdlsb_fixedmemoutstreambuf-drqs-65895425 review/bdlt-oss-test review/bdlt_packedcalendar-drqs-65075841 review/benchmarking-N4468 review/bsl-oss-fix-msvc-2013-compile-error-drqs-54584496 review/bsldoc_glossary-hyphen-issues-drqs-64782225 review/bslh_hash-fix-solaris-platform-checks-drqs-58680234 review/bslim-printer-stringref-drqs-58996420-2.22 review/bslim_testutil-compareText-drqs-70750507 review/bslma_usesbslmaallocator-component-doc review/bsls-atomics-doc-issue-80 review/bsls-platform-clang-cmp-version-drqs-58997308 review/bsls_atomic-test-driver-case-7-timing-out-drqs-64653622 review/bslstl_vector_funpr_drqs-34693876 review/bslx-integration review/candidate-oss-releases-2.x review/change-string-assert-drqs46098721 review/cleaned-up-test-macros-DRQS-50952662 review/dev-integration review/doxygen_fixes-bde-671 review/fix-bdldfp-stlport-build-drqs-54236699 review/fix-errno-include-drqs-64366081 review/fix_sun_standard_header_issues_drqs47769642 review/fixes_for_trivial_traits_drqs64622372 review/fixup-namespace-issue-drqs-40876203 review/gcc-4.9-warning-fix-drqs-64612127 review/guard_all_bslstl_headers_against_direct_include_drqs39222154 review/improve-bsls-levilization-drqs57356904 review/instrumentedAllocator-drqs40405746 review/issue-103-mach-monotonic-clock-drqs-47763030 review/issue-116-waf-default-bitness-drqs-53452608 review/issue-144-print-stringref-drqs-58996420 review/mac-clang-5-fix-drqs-46440247 review/remove-default-opts-from-tools-drqs-48413565 review/review/make_string_dtor_asserts_safe-drqs-49789550 review/stringbuf-init-pos-drqs-60134509 review/third-party-support-53510269 review/third-party-work review/unused-local-typedefs-drqs49348207 review/update-sample-examples review/use-rsync-on-AIX review/wchar_t-size-on-windows-github-issue-125 review/weiyeh-integration-drqs-37660496 review/weiyeh-integration Nothing to show BDE_3.0.0.0 BDE_2.22.1.2 BDE_2.22.1.1 BDE_2.22.1.0 BDE_2.22.0.15 BDE_2.22.0.14 BDE_2.22.0.13 BDE_2.22.0.12 BDE_2.22.0.11 BDE_2.22.0.10 BDE_2.22.0.9 BDE_2.22.0.8 BDE_2.22.0.7 BDE_2.22.0.3 Nothing to show New pull request Latest commit 14c03d7 Jun 10, 2016 abeels Adopt commit cb42ab8 from master: Merge pull request #465 from hrosen… … …4/path-symlink-drqs-82022519  commit cb42ab841ba638cb589ed0155936a28e1afbbba0 Merge: 89e6df8 0f4810e Author: Henry Verschell <hverschell@bloomberg.net> Date:   Wed Jun 8 15:18:33 2016 -0400      Merge pull request #465 from hrosen4/path-symlink-drqs-82022519      Get rid of weird bad cast when hashing.  commit 0f4810e3a12bdb0c1623e95585809fa07ef6b319 Author: Hyman Rosen <hrosen4@bloomberg.net> Date:   Wed Jun 8 14:46:14 2016 -0400      Get rid of weird bad cast when hashing. Permalink Failed to load latest commit information. benchmarks/allocators Update per Alex's comments Apr 29, 2015 groups Adopt commit cb42ab8 from master: Merge pull request #465 from hrosen… Jun 10, 2016 samples Adopt commit 2970f27 from master: Merge pull request #445 from abeels… Jun 6, 2016 thirdparty Adopt commit b6fb686 from master: Merge pull request #455 from mgirou… Jun 6, 2016 tools Adopt commit c7cc78f2 from master Nov 6, 2015 .arcconfig Update .arcconfig Apr 22, 2013 .gitignore Adopt commit 7502998 from master: Merge pull request #224 from afeher… Mar 23, 2016 CONTRIBUTING.md Correct wiki link, remove unneccessary license Jan 21, 2014 LICENSE Support new install options for third-party dirs Apr 17, 2015 README.md Update README.md link to BDE 3.0 notes Oct 13, 2015 wscript Adopt commit e6ca323 from master: Merge pull request #308 from che2/t… May 5, 2016 README.md BDE Libraries This repository contains the BDE libraries, currently BSL (BDE Standard Library) and BDL (BDE Development Library). For more information about BSL, BDL, and BDE, follow the links below: BDE wiki Quick-Start Guide Online Library Documentation BDE Mission Statement What's New October 2015 BDE 3.0 is now available. This major release introduces important subsystems including calendar types, time-zone utilities, logging facilities, event schedulers, thread-pools, and more. See: BDE 3.0 Open-Source Release Basic Build Instructions BDE uses a build system based on waf, which is located in the BDE Tools repository. This build system must be set up before being used: Make sure that python 2.6 - 2.7 are installed on the system. Download BDE Tools and add the path <bde_tools_repo_root>/bin to the system PATH environment variable. Make sure the first waf command found in PATH is a script from that path. Once the waf based build system has been set up. The following commands can be used to configure and build the BDE repository: From the root of this source repository, run: waf configure To build the libraries, but not the test drivers, run: waf build To also build the test drivers, run: waf build --test build To build and run the test drivers, run: waf build --test run For more details on building the BDE repository, please see the Quick Start Guide. For more details on the waf-based build system for building BDE-style repositories, please see its wiki page. License The BDE libraries are distributed under the Apache License (version 2.0); see the LICENSE file at the top of the source tree for more information. Question, Comments and Feedback If you have questions, comments, suggestions for improvement or any other inquiries regarding BDE, feel free to open an issue in the issue tracker. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bloomberg/bde"	"The BDE Development Environment from Bloomberg Labs. [Apache2]"	"true"
"Frameworks"	"Cinder"	"https://libcinder.org/"	"A community-developed, free and open source library for professional-quality creative coding. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2637"	"260"	"642"	"GitHub - cinder/Cinder: Cinder is a community-developed, free and open source library for professional-quality creative coding in C++. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 260 Star 2,637 Fork 642 cinder/Cinder Code Issues 159 Pull requests 25 Wiki Pulse Graphs Cinder is a community-developed, free and open source library for professional-quality creative coding in C++. http://libcinder.org 6,429 commits 4 branches 8 releases 85 contributors C 56.3% C++ 41.2% Objective-C 1.2% Objective-C++ 0.7% Python 0.5% Makefile 0.1% C C++ Objective-C Objective-C++ Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags android_linux master release_v0.9.0 vulkan Nothing to show v0.9.0 v0.8.6 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 Nothing to show New pull request Latest commit e7ea5d9 Jun 10, 2016 andrewfb committed on GitHub Merge pull request #1476 from philcn/fix-dds-parsing … Fixed an issue with uncompressed dds texture Permalink Failed to load latest commit information. blocks Merge branch 'master' of https://github.com/sroske/Cinder into sroske… Jun 4, 2016 docs Merge pull request #1278 from drewish/doxygen-guide Feb 13, 2016 include Changing signature of SurfaceConstraints::getRowBytes() to take 'requ… Jun 2, 2016 lib Updating WinRT ANGLE binaries to MSOpenTech/ANGLE commit 52be963147ea… Oct 14, 2015 samples remove unnecessary Resources.h, fixes #1408 Mar 31, 2016 src Fixed a bug introduced in the dds parser Jun 10, 2016 test updated audio DeviceTest to handle no input or output hardware Apr 11, 2016 tools Adding WinRT tests for packageRelease script Oct 1, 2015 vc2013 Removing XAudio2 traces; preproc changes to enable building on _xp va… Sep 29, 2015 vc2015_winrt Adding missing audio support files to UWP project Mar 5, 2016 xcode Removed CINDER_GL_ES_3 from preprocessor macros Sep 9, 2015 .gitattributes Changed gitattributes on pbxproj to prevent merging but not diffing Jun 11, 2011 .gitignore Ignore Visual Studio's new DB file (for VS 2015 update 2) Apr 4, 2016 .gitmodules Fixing URL for new boost submodule in .gitmodules May 8, 2015 CONTRIBUTING.md Typo correction Jun 7, 2016 COPYING Minor formatting license updates, and moving COPYING from docs/ to root Feb 12, 2016 README.md Update README.md Oct 26, 2015 README.md Cinder 0.9.1dev: libcinder.org Cinder is a peer-reviewed, free, open source C++ library for creative coding. Please note that Cinder depends on a few submodules. The simplest way to clone it is: git clone --recursive https://github.com/cinder/Cinder.git  To get started with Cinder from GitHub, please read this git setup document. You might also prefer one of our pre-packaged downloads. Cinder supports OS X, Windows and iOS. It requires Xcode 5.1.1 or later for development on the Mac, and Visual C++ 2013 or later on Windows. Cinder is released under the Modified BSD License. Please visit our website for more information. Also be sure to check the User Forum. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cinder/Cinder"	"A community-developed, free and open source library for professional-quality creative coding. [BSD]"	"true"
"Frameworks"	"Cxxomfort"	"http://ryan.gulix.cl/fossil.cgi/cxxomfort/"	"A small, header-only library that backports to C++03 some of the nifty C++11 goodies. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cxxomfort: Cxxomfort Login Cxxomfort Home Timeline Files Branches Tags Tickets Wiki Help Help List Comfort, n. [2] A consolation; something relieving suffering or worry. ""We still have the spare tire? That's a comfort at least."" (Wiktionary) Cxxomfort is a small, header-only library that backports to C++03 or C++11 some of the nifty C++11 and later goodies, including some proposals still in the works. I wrote it to facilitate my working with the evolving C++ standard as I was getting back into the language. It is intended to reduce the amount and stress of code rewrite while at the same time assisting in backwards and forwards portability. Current version: 0.48 (2015-06) Installation and Configuration Quick and dirty:  fossil clone http://ryan.gulix.cl/fossil.cgi/cxxomfort fossil open cxxomfort  The basic installation procedure is as follows: download package or clone repo; extract package or copy repo to an adequate directory; add directory path to compiler #include paths; then write some code. For specifics: Installation Configuration Configuration/CompilerPath Configuration/GCC-Tr1 Getting Documentation (this wiki) Usage Using this library is as simple as writing C++ code. Include the cxxomfort header in your code:  #include <cxxomfort/cxxomfort.hpp>   …and start using the various features that are made available, including but not limited in C++03 mode to nullptr, static_assert, iterator helpers and metaprogramming helpers, and alignof where available. You can include the header cxxomfort/base.hpp in library code where you want to have the benefit of the most basic features that do not require TR1 or other components to be made available; see Features for more information. There are also some extra features that are included and activated explicitly, such as scoped enumeration emulation and a handful of proposals that haven't been verified yet into later Standards, such as optional. See Features/Extras for more information. BehaviourMacros Features Features/Keywords Integrated type traits Rvalue-reference emulation Features/MetaprogrammingHelpers Other Utilities Features/Extras Transparent Headers Symbols Reference Meta For a list of frequently asked questions read the FAQ. The purpose of this library is to ease writing natural-feeling, forwards-compatible code once. As such, some design decisions are made that might conflict with conflict with certain pedantic ""coding styles"". For a quick, uncomprehensive check read Rationale. For a list features included in this library and what are the Standard Proposals they come from check Implementation Status. Credits to the various solutions in Credits. License information in the included LICENSE.txt file or in License. Q&A at luis[dot]machuca[at]gmail[dot]com Fossil version [9c65b5432e] 2015-05-23 11:11:31 This page was generated in about 0.001s"	"null"	"null"	"A small, header-only library that backports to C++03 some of the nifty C++11 goodies. [MIT]"	"true"
"Frameworks"	"Dlib"	"http://dlib.net/"	"A general purpose cross-platform C++ library designed using contract programming and modern C++ techniques. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"638"	"70"	"237"	"GitHub - davisking/dlib: A toolkit for making real world machine learning and data analysis applications in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 70 Star 638 Fork 237 davisking/dlib Code Issues 9 Pull requests 2 Pulse Graphs A toolkit for making real world machine learning and data analysis applications in C++ http://dlib.net 5,912 commits 1 branch 32 releases 30 contributors C++ 98.7% Python 0.6% CMake 0.3% C 0.2% Cuda 0.2% Makefile 0.0% C++ Python CMake C Cuda Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v19.0 v18.18 v18.17 v18.16 v18.15 v18.14 v18.13 v18.12 v18.11 v18.10 v18.9 v18.8 v18.7 v18.6 v18.5 v18.4 v18.3 v18.2 v18.1 v18.0 v17.49 v17.48 v17.47 v17.46 v17.45 v17.44 v17.43 v17.42 v17.41 v17.40 v17.39 before_dnn_serialization_cleanup Nothing to show New pull request Latest commit 2849ebd Jul 12, 2016 vsooda committed with davisking fix shape_predictor dlib::searialize and dlib::desearialize error (#156) … * fix shape_predictor dlib::searialize and dlib::desearialize error  * declare shape_predictor searialize and desearialize inline  * fix inline declare issue: declare inline before implement Permalink Failed to load latest commit information. dlib fix shape_predictor dlib::searialize and dlib::desearialize error (#156) Jul 12, 2016 docs Improved FAQ a little Jul 6, 2016 examples Added some more comments Jun 25, 2016 python_examples Changed URLs to point to dlib.net instead of sourceforge.net Jun 25, 2016 tools Added --extract-chips option to imglab. Jul 4, 2016 .gitignore ignore dist directory as well as egg directories Aug 19, 2015 .hgignore updated ignore list May 31, 2016 .hgtags Added tag v19.0 for changeset 7210589728f6 Jun 25, 2016 CMakeLists.txt Support building dlib from a top-level CMakeLists file Feb 26, 2016 MANIFEST.in package no build binaies in sdist Aug 20, 2015 README.txt updated aknowledgement Apr 4, 2016 setup.py setup.py: Don't fail if pip fails in cmake err msg Jun 11, 2016 README.txt                                dlib C++ library  Dlib is a modern C++ toolkit containing machine learning algorithms and tools for creating complex software in C++ to solve real world problems.  See http://dlib.net for the main project documentation and API reference.    COMPILING DLIB C++ EXAMPLE PROGRAMS    Go into the examples folder and type:        mkdir build; cd build; cmake .. ; cmake --build .    That will build all the examples.  If you have a CPU that supports AVX    instructions then turn them on like this:        mkdir build; cd build; cmake .. -DUSE_AVX_INSTRUCTIONS=1; cmake --build .    Doing so will make some things run faster.  COMPILING DLIB Python API    Before you can run the Python example programs you must compile dlib. Type:        python setup.py install    or type        python setup.py install --yes USE_AVX_INSTRUCTIONS    if you have a CPU that supports AVX instructions, since this makes some    things run faster.    RUNNING THE UNIT TEST SUITE    Type the following to compile and run the dlib unit test suite:        cd dlib/test        mkdir build        cd build        cmake ..        cmake --build . --config Release        ./dtest --runall     Note that on windows your compiler might put the test executable in a    subfolder called Release.  If that's the case then you have to go to that    folder before running the test.  This library is licensed under the Boost Software License, which can be found in dlib/LICENSE.txt.  The long and short of the license is that you can use dlib however you like, even in closed source commercial software.  Dlib Sponsors:   This research is based in part upon work supported by the Office of the   Director of National Intelligence (ODNI), Intelligence Advanced Research   Projects Activity (IARPA) under contract number 2014-14071600010. The   views and conclusions contained herein are those of the authors and   should not be interpreted as necessarily representing the official policies   or endorsements, either expressed or implied, of ODNI, IARPA, or the U.S.   Government.     Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/davisking/dlib"	"A general purpose cross-platform C++ library designed using contract programming and modern C++ techniques. [Boost]"	"true"
"Frameworks"	"EASTL"	"https://github.com/electronicarts/EASTL"	"Electronic Arts Standard Template Library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2128"	"183"	"168"	"GitHub - electronicarts/EASTL: EASTL stands for Electronic Arts Standard Template Library.  It is an extensive and robust implementation that has an emphasis on high performance. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 183 Star 2,128 Fork 168 electronicarts/EASTL Code Issues 6 Pull requests 0 Pulse Graphs EASTL stands for Electronic Arts Standard Template Library. It is an extensive and robust implementation that has an emphasis on high performance. 138 commits 2 branches 3 releases 16 contributors C++ 99.8% Other 0.2% C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags container_alias master Nothing to show 3.01.01 3.01.00 3.00.00 Nothing to show New pull request Latest commit 3133776 Jul 9, 2016 rparolin reformatting appveyor.yml Permalink Failed to load latest commit information. benchmark Changes: Apr 3, 2016 doc Fix typos in Introduction Feb 14, 2016 include/EASTL 3.01.01 release May 25, 2016 source initial commit Feb 9, 2016 test 3.01.01 release May 25, 2016 .appveyor.yml reformatting appveyor.yml Jul 9, 2016 .clang-format 3.01.00 release Apr 4, 2016 .gitattributes initial commit Feb 10, 2016 .gitignore updating .gitignore Feb 20, 2016 .travis.yml reformating travis script Jul 9, 2016 3RDPARTYLICENSES.TXT updating 3rdpartylicenses.txt file Feb 10, 2016 CMakeLists.txt Fixed issue where cmake (3.2.2) does not understand its own tests (#41) Apr 8, 2016 CONTRIBUTING.md Added CMake options to optionally build benchmark and tests. Mar 13, 2016 LICENSE renaming LICENCE to LICENSE Feb 10, 2016 README.md Update README.md Feb 22, 2016 README.md EA Standard Template Library EASTL stands for Electronic Arts Standard Template Library. It is a C++ template library of containers, algorithms, and iterators useful for runtime and tool development across multiple platforms. It is a fairly extensive and robust implementation of such a library and has an emphasis on high performance above all other considerations. Usage If you are familiar with the C++ STL or have worked with other templated container/algorithm libraries, you probably don't need to read this. If you have no familiarity with C++ templates at all, then you probably will need more than this document to get you up to speed. In this case, you need to understand that templates, when used properly, are powerful vehicles for the ease of creation of optimized C++ code. A description of C++ templates is outside the scope of this documentation, but there is plenty of such documentation on the Internet. EASTL is suitable for any tools and shipping applications where the functionality of EASTL is useful. Modern compilers are capable of producing good code with templates and many people are using them in both current generation and future generation applications on multiple platforms from embedded systems to servers and mainframes. Documentation Please see EASTL Introduction. Compiling sources Please see CONTRIBUTING.md for details on compiling and testing the source. Credits EASTL was created by Paul Pedriana and he maintained the project for roughly 10 years. Roberto Parolin is the current EASTL owner within EA and is responsible for the open source repository. Significant EASTL contributions were made by (in alphabetical order): Avery Lee Colin Andrews JP Flouret Matt Newport Paul Pedriana Roberto Parolin Simon Everett License Modified BSD License (3-Clause BSD license) see the file LICENSE in the project root. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/electronicarts/EASTL"	"Electronic Arts Standard Template Library. [BSD]"	"true"
"Frameworks"	"ffead-cpp"	"https://github.com/sumeetchhetri/ffead-cpp"	"Framework for Enterprise Application Development. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"171"	"45"	"63"	"GitHub - sumeetchhetri/ffead-cpp: Framework for Enterprise Application Development, c++ framework, c++ web framework, c++ application framework, c++ rest framework, c++ soap framework, c++ web sites,c++ web applications, c++ driven web development - c++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 45 Star 171 Fork 63 sumeetchhetri/ffead-cpp Code Issues 9 Pull requests 0 Wiki Pulse Graphs Framework for Enterprise Application Development, c++ framework, c++ web framework, c++ application framework, c++ rest framework, c++ soap framework, c++ web sites,c++ web applications, c++ driven web development - c++ 52 commits 17 branches 5 releases Fetching contributors C++ 62.1% Groff 19.9% Makefile 6.1% JavaScript 3.6% M4 3.6% Shell 2.8% Other 1.9% C++ Groff Makefile JavaScript M4 Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Cygwin_Pack_Testing bsd-v1.6 ffead-server-no-boost-dep master solaris-v1.6 solaris-v1.6@589 unix-v1.6 unix-v1.6@590 v1.6 v1.6@584 v1.6@587 v1.7 v1.8 v1.9 winX_Cygwin winx-cygwin-v1.6 winx-cygwin-v1.6@591 Nothing to show v2.0-Draft-TLV-Fixed-TE_Benchmark v2.0-Draft-TL-Fixed-TE_Benchmark v2.0-Draft-TE_Benchmark 1.9 1.8 Nothing to show New pull request Latest commit 56d46c0 Jun 7, 2016 Sumeet Fixed comppilation issue of apache module Permalink Failed to load latest commit information. autom4te.cache Major Release - v2.0 Aug 19, 2015 lib Version 1.9 changes, Mar 16, 2014 m4 Updated the check for CXX standard Sep 25, 2015 modules Fixed comppilation issue of apache module Jun 7, 2016 public Version 1.9 changes, Mar 16, 2014 resources Fix for techempower benchmarking performance issue Apr 14, 2016 rtdcf/autotools Updated the check for CXX standard Sep 25, 2015 script Major Release - v2.0 Aug 19, 2015 src Fixed segfaults May 31, 2016 tests Resolved multiple issues for compilation in CLANG Sep 27, 2015 web Major Release - v2.0 Aug 19, 2015 .project Major Release - v2.0 Aug 19, 2015 .pydevproject Major Release - v2.0 Aug 19, 2015 INSTALL Fix for techempower benchmarking performance issue Apr 14, 2016 Makefile.am Major Release - v2.0 Aug 19, 2015 Makefile.in Added support for MAC OS (Tested with Snow Leopard) Aug 28, 2014 README Fixed the automake version issue Sep 17, 2015 aclocal.m4 Added support for MAC OS (Tested with Snow Leopard) Aug 28, 2014 autogen-noreconf.sh Major Release - v2.0 Aug 19, 2015 autogen.sh Major Release - v2.0 Aug 19, 2015 configure.ac Fixed segfaults May 31, 2016 configure.ac.old Fixed github issue 10 (#10) Dec 5, 2015 ffead-cpp-wiki-1.6.pdf Version 1.9 changes, Mar 16, 2014 ffead-cpp-wiki-1.7.pdf Moved older versions to branch Feb 5, 2013 ffead-cpp-wiki-1.8.pdf Code changes for version 1.8 Nov 30, 2013 ffead-server.doxyfile Version 1.9 changes, Mar 16, 2014 ffead_gen.help Fixed the automake version issue Sep 17, 2015 ffead_gen.sh more changes Nov 21, 2015 release-notes-v1.8 Version 1.9 changes, Mar 16, 2014 release-notes-v1.9 Version 1.9 changes, Mar 16, 2014 README v2.0 is here and is definitely the beginning of a new era!!  Features - Introduction of modules - Advanced ORM - SDORM (sql/monogo) - Better Event loop - Server Framework - Web Socket Support - HTTP2.0 Support - Cache API (memcached/redis) - Improved Thread/ThreadPool API(s) - Marker based configuration (Java style annotations) - Added sample application for techempower benchmarks - Improved autotools support - Improved Reflection support - Improved Serialization support - Fixed issues related to Date/Time - Better Logging support - Faster server engine  Quickstart - ./autogen.sh (Setup configure for your platform) - ./configure (Setup makefiles) - Stretch a bit :-) - make all (Build ffead-cpp) - Sip some coffee - make build-apps (Build the sample applications in web + generate ffead-cpp binary) - cd ffead-cpp-2.0-bin/ (Navigate to the ffead-cpp binary folder) - ./server.sh (Startup ffead-cpp Njoy!!)   v2.0 will bring better documentation to the world of ffead-cpp v2.0 also outlines interfacing support for multiple platforms!  Stay tuned for further updates!! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sumeetchhetri/ffead-cpp"	"Framework for Enterprise Application Development. [Apache2]"	"true"
"Frameworks"	"Folly"	"https://github.com/facebook/folly"	"An open-source C++ library developed and used at Facebook. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6895"	"677"	"1585"	"GitHub - facebook/folly: An open-source C++ library developed and used at Facebook. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 677 Star 6,895 Fork 1,585 facebook/folly Code Issues 58 Pull requests 15 Wiki Pulse Graphs An open-source C++ library developed and used at Facebook. https://groups.google.com/forum/?fromgroups#!forum/facebook-folly 2,834 commits 1 branch 36 releases 195 contributors C++ 97.1% M4 1.3% C 0.8% Makefile 0.4% Python 0.1% Shell 0.1% Other 0.2% C++ M4 C Makefile Python Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.57.0 v0.56.0 v0.55.0 v0.54.0 v0.53.0 v0.52.0 v0.51.0 v0.50.0 v0.49.1 v0.49.0 v0.48.0 v0.47.0 v0.45.0 v0.43.0 v0.42.0 v0.41.0 v0.40.0 v0.39.0 v0.38.0 v0.37.0 v0.36.0 v0.35.0 v0.34.0 v0.33.0 v0.32.0 v0.31.0 v0.30.0 v0.29.0 v0.28.0 v0.27.0 v0.26.0 v0.25.0 v0.24.0 v0.23.0 v0.22.0 deprecate-dynamic-initializer Nothing to show New pull request Latest commit f3c02cf Jul 15, 2016 Orvid committed with Facebook Github Bot 6 Assume GFlags isn't present if FOLLY_HAVE_LIBGFLAGS isn't defined … Summary: Because, if it follows the same pattern as a normal config flag, it simply won't be defined if it isn't available.  Reviewed By: yfeldblum  Differential Revision: D3571862  fbshipit-source-id: 3322ceb0ce349de16b29310b66d1333aa04da516 Permalink Failed to load latest commit information. folly Assume GFlags isn't present if FOLLY_HAVE_LIBGFLAGS isn't defined Jul 15, 2016 .gitignore Remove double-conversion as a source dep in OS X script Jun 26, 2015 LICENSE Move LICENCE and README to top level directory Jun 4, 2012 README.md Fixing typo in Readme May 18, 2016 README.md Folly: Facebook Open-source Library What is folly? Folly (acronymed loosely after Facebook Open Source Library) is a library of C++11 components designed with practicality and efficiency in mind. Folly contains a variety of core library components used extensively at Facebook. In particular, it's often a dependency of Facebook's other open source C++ efforts and place where those projects can share code. It complements (as opposed to competing against) offerings such as Boost and of course std. In fact, we embark on defining our own component only when something we need is either not available, or does not meet the needed performance profile. We endeavor to remove things from folly if or when std or Boost obsoletes them. Performance concerns permeate much of Folly, sometimes leading to designs that are more idiosyncratic than they would otherwise be (see e.g. PackedSyncPtr.h, SmallLocks.h). Good performance at large scale is a unifying theme in all of Folly. Logical Design Folly is a collection of relatively independent components, some as simple as a few symbols. There is no restriction on internal dependencies, meaning that a given folly module may use any other folly components. All symbols are defined in the top-level namespace folly, except of course macros. Macro names are ALL_UPPERCASE and should be prefixed with FOLLY_. Namespace folly defines other internal namespaces such as internal or detail. User code should not depend on symbols in those namespaces. Folly has an experimental directory as well. This designation connotes primarily that we feel the API may change heavily over time. This code, typically, is still in heavy use and is well tested. Physical Design At the top level Folly uses the classic ""stuttering"" scheme folly/folly used by Boost and others. The first directory serves as an installation root of the library (with possible versioning a la folly-1.0/), and the second is to distinguish the library when including files, e.g. #include <folly/FBString.h>. The directory structure is flat (mimicking the namespace structure), i.e. we don't have an elaborate directory hierarchy (it is possible this will change in future versions). The subdirectory experimental contains files that are used inside folly and possibly at Facebook but not considered stable enough for client use. Your code should not use files in folly/experimental lest it may break when you update Folly. The folly/folly/test subdirectory includes the unittests for all components, usually named ComponentXyzTest.cpp for each ComponentXyz.*. The folly/folly/docs directory contains documentation. What's in it? Because of folly's fairly flat structure, the best way to see what's in it is to look at the headers in top level folly/ directory. You can also check the docs folder for documentation, starting with the overview. Folly is published on Github at https://github.com/facebook/folly Build Notes Dependencies folly requires gcc 4.8+ and a version of boost compiled with C++11 support. Please download googletest from https://googletest.googlecode.com/files/gtest-1.7.0.zip and unzip it in the folly/test subdirectory. Ubuntu 12.04 This release is old, requiring many upgrades. However, since Travis CI runs on 12.04, folly/build/deps_ubuntu_12.04.sh is provided, and upgrades all the required packages. Ubuntu 13.10 The following packages are required (feel free to cut and paste the apt-get command below): sudo apt-get install \     g++ \     automake \     autoconf \     autoconf-archive \     libtool \     libboost-all-dev \     libevent-dev \     libdouble-conversion-dev \     libgoogle-glog-dev \     libgflags-dev \     liblz4-dev \     liblzma-dev \     libsnappy-dev \     make \     zlib1g-dev \     binutils-dev \     libjemalloc-dev \     libssl-dev  If advanced debugging functionality for tests are required sudo apt-get install \     libunwind8-dev \     libelf-dev \     libdwarf-dev  Ubuntu 14.04 LTS The packages listed above for Ubuntu 13.10 are required, as well as: sudo apt-get install \     libiberty-dev  The above packages are sufficient for Ubuntu 13.10 and Ubuntu 14.04. In the folly directory, run   autoreconf -ivf   ./configure   make   make check   sudo make install  OS X (Homebrew) folly is available as a Formula and releases may be built via brew install folly. You may also use folly/build/bootstrap-osx-homebrew.sh to build against master:   cd folly   ./build/bootstrap-osx-homebrew.sh   make   make check  OS X (MacPorts) Install the required packages from MacPorts:   sudo port install \     autoconf \     automake \     boost \     gflags \     git \     google-glog \     libevent \     libtool \     lz4 \     lzma \     scons \     snappy \     zlib  Download and install double-conversion:   git clone https://github.com/google/double-conversion.git   cd double-conversion   cmake -DBUILD_SHARED_LIBS=ON .   make   sudo make install  Download and install folly with the parameters listed below:   git clone https://github.com/facebook/folly.git   cd folly/folly   autoreconf -ivf   ./configure CPPFLAGS=""-I/opt/local/include"" LDFLAGS=""-L/opt/local/lib""   make   sudo make install  Other Linux distributions double-conversion (https://github.com/google/double-conversion) Download and build double-conversion. You may need to tell configure where to find it. [double-conversion/] ln -s src double-conversion [folly/] ./configure LDFLAGS=-L$DOUBLE_CONVERSION_HOME/ CPPFLAGS=-I$DOUBLE_CONVERSION_HOME/ [folly/] LD_LIBRARY_PATH=$DOUBLE_CONVERSION_HOME/ make additional platform specific dependencies: Fedora 21 64-bit gcc gcc-c++ autoconf autoconf-archive automake boost-devel libtool lz4-devel lzma-devel snappy-devel zlib-devel glog-devel gflags-devel scons double-conversion-devel openssl-devel libevent-devel Optional libdwarf-dev libelf-dev libunwind8-dev Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/facebook/folly"	"An open-source C++ library developed and used at Facebook. [Apache2]"	"true"
"Frameworks"	"JUCE"	"https://github.com/julianstorer/JUCE"	"An all-encompassing C++ class library for developing cross-platform software. [Core-Module: ISC, Rest: GPL2/GPL3/Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"362"	"89"	"329"	"GitHub - julianstorer/JUCE: The JUCE cross-platform C++ framework. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 89 Star 362 Fork 329 julianstorer/JUCE Code Pull requests 4 Wiki Pulse Graphs The JUCE cross-platform C++ framework. http://www.juce.com 6,368 commits 2 branches 43 releases 6 contributors C++ 68.6% C 27.3% Objective-C++ 3.2% Objective-C 0.5% Java 0.3% Makefile 0.1% C++ C Objective-C++ Objective-C Java Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show 4.2.3 4.2.2 4.2.1 4.2.0 4.1.0 4.0.3 4.0.2 4.0.1 3.2.0 3.1.1 3.1.0 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 2.1.8 2.1.7 2.1.6 2.1.5 2.1.4 2.1.3 2.1.2 2.1.1 2.0.41 2.0.40 2.0.39 2.0.38 2.0.37 2.0.36 2.0.35 2.0.34 2.0.33 2.0.32 2.0.31 2.0.0 1.53 1.52 1.51 Nothing to show New pull request Latest commit 572868f Jul 8, 2016 hogliux Fix incorrect parameter id <-> index conversion when hosting AUs Permalink Failed to load latest commit information. doxygen Embedded the Apple CoreAudio support files inside the juce_audio_plug… Aug 18, 2015 examples Version number update Jul 5, 2016 extras Version number update Jul 5, 2016 modules Fix incorrect parameter id <-> index conversion when hosting AUs Jul 8, 2016 .gitignore Added some linux build files to the .gitignore Jun 23, 2016 ChangeList.txt Version number update Jul 5, 2016 README.txt Added several new features: support for AudioUnit v3, new simplified … Apr 6, 2016 README.txt # The JUCE Library  JUCE (Jules' Utility Class Extensions) is an all-encompassing  C++ framework for developing cross-platform software.  It contains pretty much everything you're likely to need to create most applications, and is particularly well-suited for building  highly-customised GUIs, and for handling graphics and sound.  Most JUCE modules are shared under the GNU Public Licence  (GPLv2, v3, and the AGPLv3). This means that the code can  be freely copied and distributed, and costs nothing to use  in other GPL applications. One module (the juce_core module)  is permissively licensed under the ISC.  For more information, visit the website: http://www.juce.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/julianstorer/JUCE"	"An all-encompassing C++ class library for developing cross-platform software. [Core-Module: ISC, Rest: GPL2/GPL3/Commercial]"	"true"
"Frameworks"	"website"	"http://www.juce.com/"	"An all-encompassing C++ class library for developing cross-platform software. [Core-Module: ISC, Rest: GPL2/GPL3/Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JUCE Make it fast JUCE is a C++ cross-platform framework built for speed Discover JUCE Audio Developer Conference Powered by JUCE 3-4 November 2016, London Learn more Introducing JUCE 4: Grapefruit JUCE Explore Get JUCE 4PreviousNext Audio Developer Conference 3-4 Nov 2016 Learn more Tutorial: Write an audio plug-in Julian Storer’s JUCE coding standards Forum Get support from the community Tutorial: Android Studio JUCE 4.2 is out Check out the new features! JUCE 4: Grapefruit JUCE The most powerful version of JUCE now features the Projucer, the ICE engine, and more Developer story: Building Max with JUCE × Discover Get JUCE Community DiscoverADCGet JUCE CommunityHistoryCareers ContactPrivacyCookies © 2016 ROLI Ltd. All rights reserved."	"null"	"null"	"An all-encompassing C++ class library for developing cross-platform software. [Core-Module: ISC, Rest: GPL2/GPL3/Commercial]"	"true"
"Frameworks"	"libPhenom"	"https://github.com/facebook/libphenom"	"libPhenom is an eventing framework for building high performance and high scalability systems in C. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1383"	"209"	"312"	"GitHub - facebook/libphenom: An eventing framework for building high performance and high scalability systems in C. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 209 Star 1,383 Fork 312 facebook/libphenom Code Issues 4 Pull requests 0 Wiki Pulse Graphs An eventing framework for building high performance and high scalability systems in C. http://facebook.github.io/libphenom 267 commits 2 branches 0 releases Fetching contributors C 95.9% PHP 3.7% Other 0.4% C PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit b93da64 Jan 27, 2016 wez Bump up minimum CK version to 0.5.0 Permalink Failed to load latest commit information. arcanist Modify cpplint to more closely approximate libphenom style Oct 7, 2013 corelib mechanical change to allow compilation with CK 0.5.x Jan 27, 2016 docs docs/phenom: minor add some missing semicolons and variable declaration Mar 23, 2015 examples Allow listeners to opt out of SSL_CTX_free for ph_sock_t Mar 30, 2014 include/phenom Mark static assert type as unused. Jan 27, 2016 tests fix warning for implicit declaration of function 'ph_snprintf' in tes… Jan 27, 2016 thirdparty linting: Default to pwd if the .git dir is missing Nov 13, 2014 travis Bump up minimum CK version to 0.5.0 Jan 27, 2016 .arcconfig initial commit Dec 28, 2012 .gitignore add <phenom/feature_test.h> to detect configure time features Nov 23, 2013 .travis.yml take a stab at travis-CI integration Sep 16, 2013 LICENSE initial commit Dec 29, 2012 Makefile.am Fixup install rule for ck unbundling Apr 20, 2014 README.markdown update readme about c-ares dependency Apr 21, 2014 autogen.sh add gimli tracer module support Nov 18, 2013 configure.ac Bump up minimum CK version to 0.5.0 Jan 28, 2016 libphenom.pc.in Remove ares from pkg-config deps Apr 21, 2014 mkdoc.php auto generation of proper tags Sep 30, 2013 README.markdown libPhenom libPhenom is an eventing framework for building high performance and high scalability systems in C System Requirements libPhenom is known to compile and pass its test suite on: Linux systems with epoll OS X Illumos and Solaris style systems that have port_create(3C). libPhenom has been known to compile and pass its test suite on these systems, but they have not been tried in a little while, so may require a little bit of TLC: BSDish systems that have the kqueue(2) facility, including FreeBSD 9.1 and OpenBSD 5.2 libPhenom depends on: pkg-config to find dependencies. Concurrency Kit for its excellent concurrency primitives and key data structures. If you are on OS/X, you can brew install concurrencykit. On other platforms, you will You will need to install CK yourself as it is not widely distributed at this time. We expect to be able to find CK using pkg-config. OpenSSL is required; this should be provided by your OS. You will need to install openssl-devel or libssl-dev or a similarly named package. autoconf, automake and libtool are required to build libPhenom libPhenom works best if built with GCC version 4.3 or later, but should be able to build with any C99 compiler. Facilities Memory management with counters - record how much of which kinds of memory your application is using. Jobs - decompose your application into portions of work and let the phenom scheduler manage getting them done streaming I/O with buffers Handy data structures (hash tables, lists, queues) Variant data type to enable serialization and deserialization of JSON A printf implementation with registerable object formatting Goals Balance ease of use with performance Aim to be neutral wrt. your choice of threaded or event-based dispatch and work well with both. Where possible, avoid contention points in our implementation so as to avoid limiting scalability with the number of cores in the system. How to use these docs If you're reading these on http://facebook.github.io/libphenom, simply start typing and the search box will suggest topics. You may select topics from the Topics menu or browse the header files via the Headers menu. Getting it You can obtain the sources from https://github.com/facebook/libphenom: $ git clone https://github.com/facebook/libphenom.git or grab a snapshot of master Build $ ./autogen.sh $ ./configure $ make $ make check $ sudo make install Quick Start for using the library You'll want to set up the main loop using something like this: // Always include phenom/defs.h first to correctly set up the compilation env #include ""phenom/defs.h"" #include ""phenom/configuration.h"" #include ""phenom/job.h"" #include ""phenom/log.h"" #include ""phenom/sysutil.h""  int main(int argc, char **argv) {   // Must be called prior to calling any other phenom functions   ph_library_init();   // Optional config file for tuning internals   ph_config_load_config_file(""/path/to/my/config.json"");   // Enable the non-blocking IO manager   ph_nbio_init(0);    // Do stuff here to register client/server stuff.   // This enables a very simple request/response console   // that allows you to run diagnostic commands:   // `echo memory | nc -UC /tmp/phenom-debug-console`   // (on BSD systems, use `nc -Uc`!)   // The code behind this is in   // https://github.com/facebook/libphenom/blob/master/corelib/debug_console.c   ph_debug_console_start(""/tmp/phenom-debug-console"");    // Run   ph_sched_run();    return 0; } And compile it using something like this: (you need optimization enabled) $ gcc -O2 main.c `pkg-config libphenom --cflags --libs` (this will link against libphenom). A more detailed example can be found at https://github.com/facebook/libphenom/blob/master/examples/echo.c Want more inspiration? Take a look at the code in the test suite. Status We're still hacking and evolving this library, so there may be some rough edges. We're very open to feedback; check out the Contributing section below. Getting Help We've started an IRC channel for realtime conversations; join us in #phenom @ freenode Contributing If you're thinking of hacking on libPhenom we'd love to hear from you! Feel free to use the Github issue tracker and pull requests to discuss and submit code changes. We (Facebook) have to ask for a ""Contributor License Agreement"" from someone who sends in a patch or code that we want to include in the codebase. This is a legal requirement; a similar situation applies to Apache and other ASF projects. If we ask you to fill out a CLA we'll direct you to our online CLA page where you can complete it easily. We use the same form as the Apache CLA so that friction is minimal. License libPhenom is made available under the terms of the Apache License 2.0. See the LICENSE file that accompanies this distribution for the full text of the license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/facebook/libphenom"	"libPhenom is an eventing framework for building high performance and high scalability systems in C. [Apache2]"	"true"
"Frameworks"	"LibSourcey"	"https://github.com/sourcey/libsourcey"	"C++11 evented IO for real-time video streaming and high performance networking applications. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"266"	"50"	"99"	"GitHub - sourcey/libsourcey: C++11 evented IO for realtime video streaming and high performance networking applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 266 Fork 99 sourcey/libsourcey Code Issues 1 Pull requests 0 Pulse Graphs C++11 evented IO for realtime video streaming and high performance networking applications http://sourcey.com/libsourcey 223 commits 1 branch 0 releases 3 contributors C++ 77.6% HTML 16.4% CMake 5.5% Objective-C++ 0.3% JavaScript 0.1% C 0.1% C++ HTML CMake Objective-C++ JavaScript C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 20a87d4 Apr 10, 2016 auscaster Update HTTP parser to return num bytes parsed … Handle early websocket data Permalink Failed to load latest commit information. cmake Fix archo build when zlib not available Apr 4, 2016 src Update HTTP parser to return num bytes parsed Apr 10, 2016 .gitignore Remove old dependencies Feb 21, 2016 BUILD.md Update build system Mar 14, 2016 CMakeLists.txt Fix archo build when zlib not available Apr 3, 2016 README.md Improve Symple tests Mar 19, 2016 TODO.md Update HTTP classes and tests Mar 28, 2016 circle.yml Include vendor zconf.h in include path Apr 3, 2016 README.md LibSourcey Homepage: http://sourcey.com/libsourcey Licence: LGPL LibSourcey is a collection of open source cross platform C++11 modules and classes that provide developers with a flexible high performance arsenal for the rapid development of realtime messaging and live media streaming applications. Think of it as the power of libuv combined with the ease and readability of the stl (C++ Standard Library). Features Event-based IO — Core modules are built on top of libuv (the underlying C library that powers Node.js) and use event-based asynchronous IO throughout to maximise performance and minimise concurrency reliance for building mission critical native and server-side apps. Cross platform — The codebase is cross platform and should compile on any system with access to a modern C++11 compiler. We have compiled and used LibSourcey on the following platforms; Linux(gcc), Mac(Xcode, gcc), Windows(msys, vs), Android and iOS. Clean readable code — Modern C++11 design principles have been used for clear, readable code, and simple integration into your existing projects. Networking layer — The networking layer provides TCP, SSL and UDP socket implementations that combine the use of libuv for blazing fast networking, and openssl for security and encryption. Elegant PacketStream API — The PacketStream API allows LibSourcey modules to pipe and process arbitrary data packets through a dynamic delegate chain. This dynamic method of layering packet processors makes it possible to develop complex data processing applications quickly and easily. Check out this writeup on how the PacketSteram API can be used for encoding H.264 on the fly: http://sourcey.com/libsourcey-packetstream-api/ Media streaming and encoding — The media library consists of thin wrappers around FFmpeg and OpenCV for media capture, encoding, recording, streaming, analysis and more. The Media API makes full use of the PacketStream API so that encoders, processors and broadcasters can be dynamically added and removed from any media source - a great base for building a media server. Realtime messaging — LibSourcey aims to bridge the gap between desktop, mobile and web by providing performance oriented messaging solutions that work across all platforms. Socket.IO — Socket.IO C++ client that supports the latest protocol revision 4 (>- 1.0). Read more about Socket.IO. Symple — Sourcey's home grown realtime messaging protocol that works over the top of Socket.IO to provide rostering, presence and many other features necessary for building online games and chat applications. More about Symple. Web servers and clients — A HTTP stack is included that supports HTTP servers, clients, WebSockets, media streaming, file transfers, and authentication. The HTTP parser is based on the super-fast C code used by nginx. Full ICE stack — The ICE module is a complete implementation of RFC 5245 (Interactive Connectivity Establishment) based on LibSourcey architecture. STUN — RFC 5389 implementation that includes support for ICE and TURN and TURN TCP messages. TURN — Server and client stack that supports both RFC 5766 (Traversal Using Relays around NAT) and RFC 6062 (Traversal Using Relays around NAT Extensions for TCP Allocations) specifications. SDP — RFC 4566 implementation that includes extra support for ICE headers. Dependencies LibUV (required, >= 1.8.0) Networking, filesystem and cross platform utilities OpenSSL (required, >= 1.0.1g) SSL networking layer and encryption FFmpeg (optional, >= 2.8.3) Media encoding and streaming OpenCV (optional, >= 3.0) Video capture and computer vision algorithms RtAudio (optional, >= 4.1.2) Audio capture WebRTC (optional) Peer-to-peer video conferencing Installation LibSourcey uses CMake to build the project files for the compiler on your platform, and should build on any system with a modern C++11 compiler. Note: To compile LibSourcey with video and streaming capabilities enabled you should install the latest version of both FFmpeg and OpenCV, otherwise modules and features dependent on those libraries will be disabled by default. Installing on Linux This guide is written for Ubuntu 14.04, although installation should be fairly portable across most flavours of Linux. Install Dependencies sudo apt-get update sudo apt-get install -y build-essential pkg-config git cmake openssl libssl-dev jackd2 libjack-jackd2-dev Install LibUV: cd ~/tmp git clone https://github.com/libuv/libuv.git cd libuv sh autogen.sh ./configure make # make check sudo make install Install FFmpeg (optional): FFmpeg is an optional but recommended dependency that's required to make use of LibSourcey's media encoding capabilities. Please follow the official guide for installing FFmpeg which works out of the box with LibSourcey. Install OpenCV (optional): OpenCV is an optional dependecy that's used by LibSourcey for it's video capture, video analysis and computer vision algorithms. Note that if you're compiling FFmpeg yourself (as above), then you should compile OpenCV with WITH_FFMPEG=OFF otherwise conflicting FFmpeg libraries may be installed on your system. cd ~/tmp wget https://github.com/Itseez/opencv/archive/3.0.0.zip -O opencv-3.0.0.zip unzip opencv-3.0.0.zip cd opencv-3.0.0 mkdir build cd build cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D WITH_V4L=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D WITH_FFMPEG=OFF .. make -j $(nproc) sudo make install sudo /bin/bash -c 'echo ""/usr/local/lib"" > /etc/ld.so.conf.d/opencv.conf' sudo ldconfig Install LibSourcey cd ~/tmp git clone https://github.com/sourcey/libsourcey.git cd libsourcey mkdir build cd build cmake .. -D CMAKE_BUILD_TYPE=RELEASE # extra cmake commands here... make sudo make install All done! See here for a complete list of build options, and here for examples. Installing on Apple (OS X) This guide is for written for Mac users using Homebrew. Install Dependencies # OpenSSL: brew install openssl brew link --force openssl  # CMake: brew install cmake Please see the Linux instructions for other optional dependencies such as FFmpeg and OpenCV. Install LibSourcey cd ~/tmp git clone https://github.com/sourcey/libsourcey.git cd libsourcey mkdir build cd build cmake .. -D CMAKE_BUILD_TYPE=RELEASE # extra cmake commands here... make sudo make install Generate Project Files See linux instructions. See here for a complete list of build options, and here for examples. Compile with Xcode Installing on Windows Install Dependencies Install Git : Install TortoiseGit, a convenient git front-end that integrates right into Windows Explorer. MinGW users can use msysgit. Install CMake : CMake generates the LibSourcey project files so you can build on most platforms and compilers. Download CMake Install OpenSSL : Download and install the Windows OpenSSL binaries. Download LibSourcey : Clone the repository: git clone https://github.com/sourcey/libsourcey.git. If you haven't got Git for some reason you can download and extract the package archive from Github. Generate Project Files Open the CMake GUI and set the project directory to point to the LibSourcey root directory. Execute ""Configure"" to do the initial configuration, then adjust any options, then press ""Configure"" again and then press ""Generate"". See here for a complete list of build options, and here for examples. Compile with Visual Studio Generate solutions using CMake, as described above. Make sure, you chose the proper generator (32-bit or 64-bit) Launch Visual Studio, locate and open the ""libsourcey.sln"" solution file in your generated build folder (eg: C:\LibSourcey\build\libsourcey.sln). Select ""Debug"" configuration, build the solution (Ctrl-Shift-B), and/or select ""Release"" and build it. Add {CMAKE_BINARY_DIR}\bin\Release, {CMAKE_BINARY_DIR}\bin\Debug (containing ""libscy.dll"" and ""libscyd.dll"", respectively) to the system path (My Computer--[Right button click]->Properties->Advanced->Environment Variables->Path) CMake Build Options The main build options you will want to configure are as follows: BUILD_SHARED_LIBS: Build shared libraries (.dll/.so) instead of static ones (.lib/.a). default: NOT (WIN32 OR ANDROID OR IOS) BUILD_DEPENDENCIES: Build LibSourcey in source third-party dependencies. default: ON BUILD_MODULES: Build LibSourcey modules. default: ON BUILD_MODULE_xxx: Enable or disable a specific module replacing xxx with the module name. BUILD_APPLICATIONS: Build LibSourcey modules default: ON BUILD_APPLICATION_xxx: Enable or disable a specific applications replacing xxx with the module name. BUILD_MODULE_TESTS: Build module test applications default: ON BUILD_MODULES_xxx: Enable or disable a specific module replacing xxx with the module name. BUILD_MODULE_SAMPLES: Build module sample applications default: ON If you are using third-party libraries is custom locations then make sure you update the CMake include paths: CMAKE_SYSTEM_PREFIX_PATH and CMAKE_LIBRARY_PATH. The only third-party libraries that may need configuring if you're using them are FFmpeg, OpenCV and WebRTC. For an exhaustive list of options check the CMakeLists.txt in the main directory. Examples There is also plenty of examples available in the samples and tests folder of each module for you to cut your teeth on. If you're interested in media streaming examples check out the mediaserver sample in the symple module. Remember, you will need to compile LibSourcey with OpenCV and FFmpeg enabled to use it: https://github.com/sourcey/libsourcey/tree/master/src/media/samples/mediaserver For a redistributable C++ package manager, take a look at pacm, and specifically the pacmconsole application: http://sourcey.com/pacm/ Also, check out pluga, a simple C++ plugin API using LibSourcey: http://sourcey.com/pluga/ Contributing We welcome PRs, if you make any improvements please feel free to float them back upstream. Fork LibSourcey on Github Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Add some feature') Push to the branch (git push origin my-new-feature) Create new Pull Request Issues For bugs and issues please use the Github issue tracker. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sourcey/libsourcey"	"C++11 evented IO for real-time video streaming and high performance networking applications. [LGPL]"	"true"
"Frameworks"	"LibU"	"https://github.com/koanlogic/libu"	"A multiplatform utility library written in C. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"124"	"16"	"31"	"GitHub - koanlogic/libu: LibU is a multiplatform utility library written in C, with APIs for handling memory allocation, networking and URI parsing, string manipulation, debugging, and logging in a very compact way, plus many other miscellaneous tasks Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 124 Fork 31 koanlogic/libu Code Issues 0 Pull requests 0 Wiki Pulse Graphs LibU is a multiplatform utility library written in C, with APIs for handling memory allocation, networking and URI parsing, string manipulation, debugging, and logging in a very compact way, plus many other miscellaneous tasks http://koanlogic.com/libu 822 commits 2 branches 26 releases Fetching contributors C 98.6% Shell 1.4% C Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags LIBU_1_5_MAINT_BRANCH master Nothing to show WI_AUTH_REL_1_2_0 REL_0_0 REL_BCA_1_0 LIBU_1_0_0 LIBU_REL_2_2_0 LIBU_REL_2_1_0 LIBU_REL_2_0_0 LIBU_REL_1_4_2 LIBU_REL_1_4_1 LIBU_REL_1_4_0 LIBU_REL_1_3_1 LIBU_REL_1_3_0 LIBU_REL_1_2_1 LIBU_REL_1_2_0 LIBU_REL_1_1_0 LIBU_REL_0_5_0 LIBU_REL_0_2_0 LIB_REL_0_2_0 KLONE_REL_2_2_0 KLONE_REL_2_1_0 KLONE_REL_2_0_2 KLONE_REL_1_1_1 KLONE_REL_1_1_0 KLONE_REL_1_0_4 KLONE_REL_1_0_3 KLONE_REL_1_0_2 Nothing to show New pull request Latest commit d6d6c3a Apr 16, 2012 babongo [libu] fix inconsistency in u_string_detach_cstr Permalink Failed to load latest commit information. build [libu] boh! Mar 19, 2012 contrib [libu] xsl generated reports pass through the w3c validator Feb 26, 2010 doc automatically substitute version in libu.doxy Jan 23, 2012 example s/2011/2012 Jan 13, 2012 include [queue] avoid complaints about redefined macros Apr 10, 2012 pkg [libu] fix the fix! Jan 31, 2007 pkgs rel-git.sh: 2.2.0 Jan 22, 2012 srcs [libu] fix inconsistency in u_string_detach_cstr Apr 16, 2012 test [libu] fix inconsistency in u_string_detach_cstr Apr 16, 2012 ChangeLog [libu] fix inconsistency in u_string_detach_cstr Apr 16, 2012 INTERFACE_CHANGES [libu] --compat_1x and related stuff Jan 15, 2010 LICENSE s/2011/2012 Jan 13, 2012 Makefile [libu/klone] kl2 build fix (1st attempt) Jul 4, 2008 Makefile.dist [libu] missing doxy files in dist Mar 23, 2010 README make README version-independent Jan 23, 2012 TODO fix conditional include logics that enables unit test sandboxing Nov 23, 2010 VERSION [libu] boh! Mar 19, 2012 configure [libu] add #-escaping to doxy docs + fix possible makl regression in … Jan 31, 2012 configure.help [libu] json module integration (wip) May 27, 2010 README == MaKL is a Prerequisite ==  LibU needs http://koanlogic.com/makl to configure and build.   The following commands should be sufficient to get MaKL installed on any Linux  flavour or Darwin/MacOSX:  $ wget http://koanlogic.com/download/makl/makl-${VERSION}.tar.gz $ tar zxf makl-${VERSION}.tar.gz && cd makl-${VERSION} $ sh configure.sh $ su  Password: **** # make install  Should your platform be one of Solaris, OpenSolaris, FreeBSD, PC-BSD, OpenBSD, NetBSD, DragonflyBSD, Minix or Windows (MinGW or Gygwin) take a look at the  INSTALL file in the top-level MaKL sources directory to track down specific  variations on the theme.  == Download ==   Once MaKL is there, you can start downloading the package (always check the  official http://koanlogic.com/libu page for the latest version and related  ChangeLog) and tailor it to your specific needs:  $ wget http://koanlogic.com/download/libu/libu-${VERSION}.tar.gz $ tar zxf libu-${VERSION}.tar.gz && cd libu-${VERSION}   == Configure ==  E.g. should you need to change the default installation path (i.e. /usr/local), use:  $ makl-conf --prefix=""/my/install/base/dir""   Debug symbols and warnings from the compiler can be switched on via --enable_debug and --enable_warns (use --enable_icc_warns instead when  working with the Intel C compiler):  $ makl-conf --enable_debug --enable_warns   Code profiling using gprof(1) can be activated via --enable_profile, and, more generally, any compiler flag can be passed to the build stage in the  following way:  $ makl-conf --extra-cflags=""-Wformat -Wno-format-extra-args -Wformat-security -Wformat-nonliteral -Wformat=2""  The --extra-xxx=""val"" is indeed a powerful mechanism by which any Makefile  variable 'XXX' (uppercase!) can be given an additional value 'val': (ab)use  it to tweak LDFLAGS, SHLIB_LDFLAGS, etc. as needed.  Anyway if in doubt,  or in search for exotic features, type makl-conf -h to display the complete  list of options: it's likely that what you are trying to achieve is already  there.  By default LibU is compiled as static library, to also enable shared library  build, supply the --enable_shared flag.  == Pick Up What Needs to be Included ==  The default is to build all the modules, but you can disable the  inclusion of specific bits selectively using the following switches:     - --no_hmap: to disable the hmap module     - --no_config: to disable the config module     - --no_net: to disable the net module     - --no_env: to disable the env module     - --no_fs: to disable the fs module     - --no_pwd: to disable the pwd module     - --no_list: to disable the list module     - --no_array: to disable the array module     - --no_ringbuffer: to disable the rb module     - --no_pqueue: to disable the pq module     - --no_json: to disable the json module     - --no_bst: to disable the bst module  Also, some specific features regarding the networking code can be disabled at configuration:     - --no_ipv6: to disable IPv6 protocol support     - --no_sctp: to disable SCTP protocol support     - --no_unixsock: to disable UNIX IPC support  If you need to enable compatibility with (some, not all) 1.X interfaces,  specify the --compat_1x command line switch.  == Build, Test and Install ==  When you are done with the configure step, you can build LibU bits and  optionally test them:  $ makl $ makl -C test   And finally install it:  $ su Password: **** # makl install   == Hello LibU ! ==  You now are ready to play with your first LibU program:  $ cat main.c #include <u/libu.h>  int facility = LOG_LOCAL0;  int main (void) {     u_con(""Hello LibU world !"");     return 0; }  Write a Makefile like the following:  $ cat Makefile include common.mk  PROG = hellolibu SRCS = main.c  LDADD += /path/to/install/prefix/lib/libu.a CFLAGS += -I/path/to/install/prefix/include  include prog.mk  Then type:  $ makl && ./hellolibu  and enjoy !  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/koanlogic/libu"	"A multiplatform utility library written in C. [BSD]"	"true"
"Frameworks"	"Loki"	"http://loki-lib.sourceforge.net/"	"A C++ library of designs, containing flexible implementations of common design patterns and idioms. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Loki | Main / HomePage Loki <library> Print Home News Philosophy Policy-based Design Modern C++ Design Idioms Pattern Multithreading Generic Programming License Documentation Download Development Contact Contributors Who uses Loki? Welcome to the C++ library Loki. Loki is a C++ library of designs, containing flexible implementations of common design patterns and idioms. Wikipedia on Loki library"	"null"	"null"	"A C++ library of designs, containing flexible implementations of common design patterns and idioms. [MIT]"	"true"
"Frameworks"	"MiLi"	"https://bitbucket.org/fudepan/mili/"	"Minimal headers-only C++ Library. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"fudepan / mili / wiki / Home — Bitbucket  Bitbucket Features Pricing owner/repository English English 日本語 Sign up Log in mili Actions Clone Compare Fork Navigation Overview Source Commits Branches 1 Pull requests Issues Wiki Downloads Settings HTTPS HTTPS SSH Need help cloning? Learn how to clone a repository. Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. FuDePAN fudepan mili Wiki Clone wiki HTTPS HTTPS SSH Need help cloning? Learn how to clone a repository. Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. mili / Home View History Abstract MiLi is a collection of useful C++ libraries, composed only by headers. No installation, no makefile, no complications: just KISS. Simple solutions for simple problems. Libraries !MiLi version 17 includes the following libraries (one header file length each): bitwise-enums: library for type-safe bitwise operations based on enums. pre-pos caller: library for wrapping object methods calls. promotion-disable: library for disabling undesired C++ type conversions. delete-container: deletes the elements of an STL container filled with pointers. factory: provides a simple machinery to create subclasses from a given key. invariants: provides invariants for function arguments and classes. type-mapper: simple type mapping declarations. properties: simple properties implementation. string-utils: various string utilities, such as case-insensitive strings and number/text conversions. container-utils: UPDATED! generic STL container utilities, optimized for specific containers. (formerly find-utils). stream-utils: i/o stream utilities for reading/writing formatted data (such as CSV). arith-utils: FIXED! arithmetic utilities (random numbers, range checks). binary-streams: binary streams for serializing data. loop-unrolling: compile-time loop unrolling using TMP. compile-assert: compile-time (a.k.a. static) assertions. template-info: template parameters information (a la typeinfo). fast-list: very optimized list for high performance. ranker: UPDATED! ranker library. coroutines: simple and os-independant coroutines library. generic exception: utilities to generate a custom exception hierarchy. variants-set: NEW! a simple set of heterogenic types library. circular-buffer: NEW! A circular buffer. some more new libraries not documented yet. NEWS: License change! MiLi has changed the license from GPLv3 to Boost 1.0, making it suitable for some commercial projects and still being free software. Donations MiLi is maintained at FuDePAN, an NGO/NPO for bioinformatics research. If you find !MiLi useful, please consider to donate so we can keep up the research and maintenance. donate Usage Just #include ""mili.h"". You can disable then inclusion of individual libraries by adding a specific #define (refer to README), or just include specific headers ([IncludingSpecificHeaders note]). Additionally, you may enclose all the libraries within the mili namespace by #defining MILI_NAMESPACE before including ""mili.h"". More Libraries Coming soon: PendingLibraries Feel free to ask for more functionalities. Need it for commercial use? Contact the email address contained in the README. Contributing See How To Contribute. This project belongs to FuDePAN. Updated 2015-06-13 Blog Support Plans & pricing Documentation API Site status Version info Terms of service Privacy policy English Git 2.7.4.1.g5468f9e Mercurial 3.6.3 Django 1.7.11 Python 2.7.3 b7520e3d05e9 / b7520e3d05e9 @ app-104 JIRA Software Confluence Bamboo SourceTree HipChat Atlassian Help Online help Learn Git Keyboard shortcuts Latest features Bitbucket tutorials Site status Support"	"null"	"null"	"Minimal headers-only C++ Library. [Boost]"	"true"
"Frameworks"	"OpenFrameworks"	"https://github.com/openframeworks/openFrameworks"	"A cross platform open source toolkit for creative coding in C++. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4455"	"424"	"1640"	"GitHub - openframeworks/openFrameworks: openFrameworks is a community-developed cross platform toolkit for creative coding in C++. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 424 Star 4,455 Fork 1,640 openframeworks/openFrameworks Code Issues 629 Pull requests 81 Wiki Pulse Graphs openFrameworks is a community-developed cross platform toolkit for creative coding in C++. http://openframeworks.cc 14,107 commits 7 branches 16 releases 220 contributors C++ 62.8% C 34.0% Objective-C 1.1% Objective-C++ 0.6% Makefile 0.5% Shell 0.3% Other 0.7% C++ C Objective-C Objective-C++ Makefile Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9.4 apothecary-freeimage bugfix-hdv master ofThreadChannel-trySend revert-5111-fix-paddingDuplicateSymbols stable Nothing to show 0073 0072 0071 0062 0061 007 0.9.3 0.9.2 0.9.1 0.9.0 0.8.4 0.8.3 0.8.2 0.8.1 0.8.0 0.7.4 Nothing to show New pull request Latest commit 23380c7 Jul 15, 2016 arturoc committed on GitHub Merge pull request #5162 from synapse-network/fix-mouseScrolled-inertia … Fix mouseScrolled()'s initial inertia behavior Permalink Failed to load latest commit information. addons Merge pull request #5066 from danoli3/emscripten_touch Jul 14, 2016 apps Project generator last commit Apr 29, 2016 docs Update linux.md Apr 10, 2016 examples Merge pull request #4517 from HalfdanJ/android_camera_orientation May 25, 2016 export MSYS2 : Copy necessary DLL to project bin directory Jan 24, 2016 libs ofEasyCam: Fix the inertia behavior of mouseScrolled() Jul 15, 2016 other/serialTest merge master into feature-YUV Aug 30, 2014 scripts install_dependencies: more fixes for glfw Jul 5, 2016 tests events: return true in notify if event is attended Apr 27, 2016 .appveyor.yml merge newest master 2016/01/05 Jan 5, 2016 .gitattributes merge newest master 2016/01/05 Jan 5, 2016 .gitignore gitignore iOS example Media Assets Feb 22, 2016 .gitmodules fix projectGenerator location Aug 17, 2015 .travis.yml re-enable all travis tests Mar 8, 2016 CHANGELOG.md CHANGELOG Mar 22, 2016 CODE_OF_CONDUCT.md note to address concerns from @GeorgiaG215 Jul 23, 2015 CONTRIBUTING.md Fix spelling error in CONTRIBUTING.md Feb 18, 2016 LICENSE.md Restore libraries licenses Mar 18, 2013 README.md Slack badge moved Feb 19, 2016 README.md openFrameworks openFrameworks is a C++ toolkit for creative coding. If you are new to OF, welcome! Build status Linux, OSX, iOS and Android Visual studio folder structure This release of OF comes with several folders: addons apps docs examples export (on some systems) libs other scripts project generator docs has some documentation around OF usage, per platform things to consider, etc. You should definitely take a look in there; for example, if you are on OSX, read the osx.md. apps and examples are where projects go -- examples contains a variety of projects that show you how to use OF, and apps is where your own projects will go. libs contains the libraries that OF uses, including the openframeworks core itself. addons are for additional functionality that's not part of the core. export is for DLLs and dylibs that need to be put in each compiled project. The scripts folder has the templates and small scripts for automating OF per platform. project generator is a GUI based tool for making new projects - this folder is only there in packaged releases. One idea that's important is that OF releases are designed to be self-contained. You can put them anywhere on your hard drive, but it's not possible to mix different releases of OF together, so please keep each release (0.8.0, 0.8.1) separate. Projects may generally work from release to release, but this is not guaranteed. Because OF is self-contained, there's extensive use of local file paths (ie, ../../../) thoughout OF. It's important to be aware of how directories are structured. A common error is to take a project and move it so that it's a level below or above where it used to be compared to the root of OF. This means that links such as ../../../libs will break. Get involved The openframeworks forum: http://forum.openframeworks.cc/ is a warm and friendly place. Please ask or answer a question. The most important part of this project is that it's a community, more than just a tool, so please join us! Also, this is free software, and we learn so much about what is hard, what doesn't make sense, what is useful, etc. The most basic questions are acceptable here! Don't worry, just join the conversation. Learning in OF is social, it's hard to do it alone, but together we can get far! Our github site is active: https://github.com/openframeworks/openFrameworks if you have bugs or feature requests, consider opening an issue. If you are a developer and want to help, pull requests are warmly welcome. Please read the contributing guide for guidelines: https://github.com/openframeworks/openFrameworks/blob/master/CONTRIBUTING.md We also have a developer's mailing list, which is useful for discussing issues around the development and future of OF. Developers To grab a copy of openFrameworks for your platform, check the download page on the main site. If you are working with the Git repository, the stable branch of the OF repository corresponds to the most recent release, with a few important differences: The release includes a simple openFrameworks project generator. This GitHub repository contains code and libs for all the platforms, but the releases are done on a per-platform basis. This GitHub repository has no project files for the different examples. They are generated automatically for each release using a tool in apps/devApps/projectGenerator/. If you want to work with the openFrameworks GitHub repository, you should use the project generator to create project files for all the code in examples/. For per-platform readmes, and more informations, see the documentation. To set up the project generator submodule, use the command git submodule init then git submodule update whilst inside the openFrameworks repo. Versioning openFrameworks uses Semantic Versioning, although strict adherence will only come into effect at version 1.0.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/openframeworks/openFrameworks"	"A cross platform open source toolkit for creative coding in C++. [MIT]"	"true"
"Frameworks"	"website"	"http://www.openframeworks.cc/"	"A cross platform open source toolkit for creative coding in C++. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A cross platform open source toolkit for creative coding in C++. [MIT]"	"false"
"Frameworks"	"Qt"	"http://www.qt.io/"	"A cross-platform application and UI framework. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Qt - Home We bake cookies in your browser for a better experience. Using this site means that you consent. Read More Menu Blog Partners Company Investors Sign in Search Download Create Applications Build Devices Developers EN CN FI RU Sign in The future is written with Qt A modern user interface that is beautiful on every screen and performs perfectly on every platform is not an option, it’s a necessity.Download Qt 8 of Top 10 Fortune 500 companies use Qt Qt is the faster, smarter way to create innovative devices, UIs and applications for multiple screens. Qt 5.7 Qt licensing explained IoT whitepaper Qt World Summit 2016 Sharing exponential possibilities of cross-platform application development and device creation. Register now Build your world with Qt From your favorite apps on all of your devices to ground-breaking cars and the deep depths of space, Qt is powering millions of devices and applications all over the world. Whether you want to build devices that stand out from the crowd with innovative software, or you just want the freedom to code once and watch as your applications run natively across all platforms, we’re putting the power back in your hands. Learn more 578956236c4f6"" frameborder=""0""> Built with Qt Leading companies in over 70 industries use Qt to power millions of devices and applications.Discover why Recent News June 30, 2016 Qt enhances user experience on AMD’s Radeon Software Crimson Edition graphic software June 16, 2016 The Qt Company Releases Qt 5.7 with a New Qt 3D Module, User Interface Library, Leveraging Modern C++11, and with Updated Licensing Offering June 9, 2016 The Qt Company Launches Automotive Suite v1.0 View more Upcoming Events July 24 – 28 SIGGRAPH 2016 – Anaheim, CA, USA September 1 – 4 QtCon 2016  – Berlin, Germany October 4 – 6 IndiaESC India – Bangalore, India October 18 – 20 Qt World Summit – San Francisco, CA, USA View more One ecosystem — Stronger together — One Qt Learn why over 1 million engineers choose Qt as their #1 cross-platform development framework. Application Development Build powerful, connected and beautiful applications that run on any screen and across any platform. Develop applications with Qt Device Creation Breathe new life into your devices by using innovative software to stand out from the crowd. Create devices with Qt Get started with Qt Qt is a completely flexible and customisable platform. Find out which option is right for you and get started straight away. Download Qt today Get started with Qt Find out which option is right for you and get started straight away. Download Qt Download Qt for Device Creation Qt for Application Development Buy Qt Terms & Conditions Licensing Build with Qt Device Creation Application Development Automotive UIs Resource Center Built with Qt Services Qt Training Partner Directory Consultancy Services Qt for Educational Use Developers Documentation Development Tools Wiki Forums Contribute to Qt Company About Us Events News Careers Contact Us Qt Merchandise Sign In Feedback © 2016 The Qt Company Follow @qtproject"	"null"	"null"	"A cross-platform application and UI framework. [LGPL]"	"true"
"Frameworks"	"Reason"	"http://code.google.com/p/reason/"	"A cross platform framework designed to bring the ease of use of Java.Net, or Python to developers who require the performance and strength of C++. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"A cross platform framework designed to bring the ease of use of Java.Net, or Python to developers who require the performance and strength of C++. [GPL2]"	"true"
"Frameworks"	"ROOT"	"https://root.cern.ch/"	"A set of OO frameworks with all the functionality needed to handle and analyze large amounts of data in a very efficient way. Used at CERN. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ROOT a Data analysis Framework | ROOT a Data analysis Framework Menu Download Download ROOT All Releases Documentation Reference Manual User's Guides HowTo Courses Building ROOT Patch Release Notes Code Examples Javascript Root FAQ News Blog Publications Workshops Support Forum Bug submission guidelines Submit a Bug RootTalk Digest About Licence Contact Us Project Founders Team Previous Developers Development Program of Work Release Checklist Project Statistics Coding Conventions Git Primer Integrating a Github Pull Request in the ROOT repository A suggested work flow for distributed projects: NoSY Git How Tos Git Tips and Tricks Browse Sources Meetings ROOT 7 Contribute Contributors Collaborate with Us Enter your keywords View the results at Google, or enable JavaScript to view them here. Download Download ROOT All Releases Documentation Reference Manual User's Guides HowTo Courses Building ROOT Patch Release Notes Code Examples Javascript Root FAQ News Blog Publications Workshops Support Forum Bug submission guidelines Submit a Bug RootTalk Digest About Licence Contact Us Project Founders Team Previous Developers Development Program of Work Release Checklist Project Statistics Coding Conventions Git Primer Integrating a Github Pull Request in the ROOT repository A suggested work flow for distributed projects: NoSY Git How Tos Git Tips and Tricks Browse Sources Meetings ROOT 7 Contribute Contributors Collaborate with Us Getting Started Reference Guide Forum Gallery   ROOT is ... A modular scientific software framework. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other languages such as Python and R. Try it in your browser! (Beta)   Download ROOT or Read More ... Previous Pause Next Under the Spotlight 06-07-2016 CERN Summer Students' Course The CERN Summer Student program is in full swing and ROOT is part of it. 16-12-2015 Try the new ROOTbooks on Binder (beta) Try the new ROOTbooks on Binder (Beta)! Use ROOT interactively in notebooks and explore to the examples. 05-12-2015 ROOT has its Jupyter Kernel! ROOT has its Jupyter kernel! More information here. 15-09-2015 ROOT Users' Workshop 2015 The next ROOT Users' Workshop will celebrate ROOT's 20th anniversary. It will take place on 15-18 Sept 2015 in Saas-Fee, Switzerland Other News 16-04-2016 The status of reflection in C++ 05-01-2016 Wanted: A tool to 'warn' user of inefficient (for I/O) construct in data model 03-12-2015 ROOT::TSeq::GetSize() or ROOT::seq::size()? 02-09-2015 Wanted: Storage of HEP data via key/value storage solutions Latest Releases Release 6.06/06 - 2016-07-06 Release 6.04/18 - 2016-06-22 Release 6.06/04 - 2016-05-03 Release 5.34/36 - 2016-04-05 Sitemap Download Download ROOT All Releases Documentation Reference Manual User's Guides HowTo Courses Building ROOT Patch Release Notes Code Examples Javascript Root FAQ News Blog Publications Workshops Support Forum Bug submission guidelines Submit a Bug RootTalk Digest About Licence Contact Us Project Founders Team Previous Developers Development Program of Work Release Checklist Project Statistics Coding Conventions Git Primer Browse Sources Meetings ROOT 7 Contribute Contributors Collaborate with Us © Copyright CERN 2014-16. All rights reserved."	"null"	"null"	"A set of OO frameworks with all the functionality needed to handle and analyze large amounts of data in a very efficient way. Used at CERN. [LGPL]"	"true"
"Frameworks"	"STLport"	"http://www.stlport.org/"	"An exemplary version of STL. [Free]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"STLport: Welcome! Welcome to STLport Consulting! The company was started back in 1997 by a small group of developers gathered around STLport Standard Library Project. Since then STLport has been accepted by the technical community as industry standard for multiplatform development. STLport library can be downloaded here at no charge. Complete first-hand product support is being rendered by the original developer crew. Over the years, we have been able to attract top-notch professionals, who currently provide on- and off-site consulting services to hi-tech businesses in Silicon Valley and nationwide. The reputation of STLport main product and variety of skills of the STLport has allowed us to win several substantial custom software development contracts. We invite you to join the community of STLport users, contributors, clients or just friends. What They Say: Copyright 2001-2008 by STLport"	"null"	"null"	"An exemplary version of STL. [Free]"	"true"
"Frameworks"	"STXXL"	"http://stxxl.sourceforge.net/"	"Standard Template Library for Extra Large Data Sets. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"STXXL - Standard Template Library for Extra Large Data Sets STXXL Downloads Documentation References STXXL: Standard Template Library for Extra Large Data Sets. The core of STXXL is an implementation of the C++ standard template library STL for external memory (out-of-core) computations, i. e., STXXL implements containers and algorithms that can process huge volumes of data that only fit on disks. While the closeness to the STL supports ease of use and compatibility with existing applications, another design priority is high performance. The key features of STXXL are: Transparent support of parallel disks. The library provides implementations of basic parallel disk algorithms. STXXL is the only external memory algorithm library supporting parallel disks. The library is able to handle problems of very large size (tested to up to dozens of terabytes). Improved utilization of computer resources. STXXL implementations of external memory algorithms and data structures benefit from overlapping of I/O and computation. Small constant factors in I/O volume. A unique library feature called ""pipelining"" can save more than half the number of I/Os, by streaming data between algorithmic components, instead of temporarily storing them on disk. A development branch supports asynchronous execution of the algorithmic components, enabling high-level task parallelism. Shorter development times due to well known STL-compatible interfaces for external memory algorithms and data structures. STL algorithms can be directly applied to STXXL containers; moreover, the I/O complexity of the algorithms remains optimal in most of the cases. [more info] For internal computation, parallel algorithms from the MCSTL or the libstdc++ parallel mode are optionally utilized, making the algorithms inherently benefit from multi-core parallelism. STXXL is free, open source, and available under the Boost Software License 1.0. Current maintainers: Andreas Beckmann, Timo Bingmann Past contributors: Roman Dementiev (author), Peter Sanders, Johannes Singler, Raoul Steffen, Markus Westphal Downloads and Documentation     Current Stable Previous Stable Development Documentation: [1.4.1] [1.3.1] [1.4-dev] [1.3-dev] Download: [sf.net page] [1.4.1] tar.gz [1.3.1] tar.gz git Repository: https://github.com/stxxl/stxxl [Browse] [Browse] [1.4-dev] [1.3-dev] Tutorial and Design Documentation Recording of a Talk ""STXXL 1.4.0 and Beyond"" given on 2014-06-22 by Timo Bingmann Further, older documentation is available below: FAQ- Frequently Asked Questions [html] Design paper (2005) - library overview [pdf] [html] libstdc++ parallel mode homepage: [link] (optional, comes with GCC) Support Channels Questions concerning use and development can be search for and asked on Stack Overflow, and longer user-contributed solutions may also be shared via the Github Wiki.. Bugs and issues should be reported via Github's issue tracker Discussions about future development and details of the STXXL should be posted to the sourceforge forums. Platforms supported Operating Systems Compilers Extras Linux (kernel >= 2.4.18) g++ (3.4-4.9) icpc (2011,2013,2015) clang++ (3.1-3.5) libstdc++ parallel mode (optional, included with g++ 4.3+) Boost (optional) Mac OS X clang++ (3.5) FreeBSD g++ Windows Visual C++ 2010, 2012 and 2013 -- Boost (required only for VS 2010) Versions Version 1.4.1 (October 29, 2014) Integrated support for kernel based asynchronous I/O on Linux (new file type ""linuxaio""), which exploits Native Command Queuing (NCQ) if available. Merged stxxl::unordered_map branch, which provides a hash map backed by external memory. Replaced struct default_completion_handler with a NULL pointer, thus avoiding superfluous new/delete work for each I/O request Added stxxl::external_shared_ptr which is a proxy class to allow use of shared_ptr classes inside stxxl containers Fixing bugs and warnings on 32-bit systems (yes, they still exist). Use atomic_counted_object in class file for request reference counting. Adding support for MinGW-w64 (64-bit) systems with working SJLJ thread implementations. Version 1.4.0 (December 12, 2013) reorganized source hierarchy into include/ lib/ tests/ examples/ doc/ tools/ CMake build system for cross-platform compilation greatly improved documentation with tutorials and examples efficient external matrix operations new containers stxxl::sequence and stxxl::sorter improved .stxxl disk configuration files and additional options combined stxxl_tool of disk benchmarks simple examples and skew3 as real-world stream application support for Visual Studio 2012 and 2013 _without_ Boost important bug fixes in stxxl::queue and stxxl::priority_queue Version 1.3.1 (March 10, 2011) Contains memory management, disk virtualization, prefetching, and so on, as the lower layers, and as part of the higher layer (pipelined) sorting with SMP and multi-core processor support, (pipelined) scanning and containers (vectors, stacks, priority queues, maps (B+Tree), queues, deques). Currently that sums to about 35,000 lines of code. See the current Changelog for detailed lists of changes. Branches Special features are maintained as Github forks until they are merged into master. Until inclusion into the master branch, the interface may change without further notice. Asynchronous Pipelining/Streaming: parallel_pipelining_integration This contains an unfinished integration attempt of the async nodes and parallel sorting/pipelining described in the IPDPS 2009 paper. If someone has a stake or interest in this branch, please contact me (Timo) about further work on it. -- 2014-10-23 Publications, Ongoing and Completed Projects using STXXL If you use STXXL and wish to appear in the following list, please provide a description line via email to one of the maintainers. Open-Source Routing Machine (Project OSRM) (2011 - ongoing) [project page] Thomas Keh: ""Bulk-Parallel Priority Queue in External Memory"", 2014: Bachelor Thesis, Supervisor: Timo Bingmann and Peter Sanders [pdf] Timo Bingmann, Johannes Fischer, Vitaly Osipov: ""Inducing Suffix and LCP Arrays in External Memory"", ALENEX 2013: Workshop on Algorithm Engineering and Experiments (Jan 2013, New Orleans, LA, USA) [pdf] [project page] Daniel Feist: ""External Batched Range Minimum Queries and LCP Construction"", 2013: Bachelor Thesis, Supervisor: Timo Bingmann and Peter Sanders [pdf] Dennis Luxen, Christian Vetter: ""Real-Time Routing with OpenStreetMap Data"", ACM GIS 2011: 19th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems (Nov 2011, Chicago, IL, USA) [pdf] Mirko Rahn, Peter Sanders, Johannes Singler: ""Scalable Distributed-Memory External Sorting"", ICDE 2010: International Conference on Data Engineering (Mar 2010, Long Beach) [arXiv] Raoul Steffen: ""Matrix Operations for STXXL"", 2010: Bachelor Thesis, Supervisor: Johannes Singler and Peter Sanders [pdf] Andreas Beckmann, Roman Dementiev, Johannes Singler: ""Building A Parallel Pipelined External Memory Algorithm Library"", IPDPS 2009: International Parallel and Distributed Processing Symposium (May 2009, Rome, Italy) [full text] Roman Dementiev, Lutz Kettner, Peter Sanders: ""STXXL: standard template library for XXL data sets"", Software: Practice and Experience (August 2007, DOI: 10.1002/spe.844) [link] [preprint] D. Ajwani, Roman Dementiev, Ulrich Meyer: ""A Computational Study of External-Memory BFS Algorithms"", SODA 2006: ACM-SIAM Symposium on Discrete Algorithms (January 2006, Miami, Florida, USA) [pdf] Roman Dementiev, Lutz Kettner, Peter Sanders: ""Stxxl: Standard Template Library for XXL Data Sets"", ESA 2005: 13th Annual European Symposium on Algorithms (October 2005, Palma de Mallorca, Spain) [pdf] [see also the extended version] Roman Dementiev, Lutz Kettner, Peter Sanders: ""Stxxl: Standard Template Library for XXL Data Sets"", Technical Report 2005/18, Department of Informatics, University of Karlsruhe [pdf] [html] Roman Dementiev, Juha Kaerkkaeinen, Jens Mehnert, Peter Sanders: ""Better External Memory Suffix Array Construction"", ALENEX 2005: Algorithm Engineering and Experiments (January 2005, Vancouver, Canada): [pdf] [input instances] [project page] Roman Dementiev, Peter Sanders, Dominik Schultes, Jop Sibeyn: ""Engineering an External Memory Minimum Spanning Tree Algorithm"", TSC 04: 3rd IFIP International Conference on Theoretical Computer Science (August 24-26, 2004, Toulouse): [ps] [pdf] [project page] Dominik Schultes: ""External Memory Spanning Forests and Connected Components"" (2003) [report] [src tarball] Roman Dementiev, Peter Sanders: ""Asynchronous Parallel Disk Sorting"", SPAA 2003: 15th ACM Symposium on Parallelism in Algorithms and Architectures (June 7-9, 2003, San Diego, California, USA) [pdf]"	"null"	"null"	"Standard Template Library for Extra Large Data Sets. [Boost]"	"true"
"Frameworks"	"Ultimate++"	"http://www.ultimatepp.org/"	"A C++ cross-platform rapid application development framework. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Ultimate++ is a C++ cross-platform rapid application development framework :: Ultimate++    Overview Examples Screenshots Comparisons Applications Download Documentation Bazaar Status & Roadmap FAQ Authors & License Forums Funding Ultimate++ Search on this site Last update 07/15/2016 Ultimate++ is a C++ cross-platform rapid application development framework   U++ is a C++ cross-platform rapid application development framework focused on programmers productivity. It includes a set of libraries (GUI, SQL, etc..), and an integrated development environment.   Rapid development is achieved by the smart and aggressive use of C++ rather than through fancy code generators. In this respect, U++ competes with popular scripting languages while preserving C/C++ runtime characteristics.   The U++ integrated development environment, TheIDE, introduces modular concepts to C++ programming. It features BLITZ-build technology to speedup C++ rebuilds up to 4 times, Visual designers for U++ libraries, Topic++ system for documenting code and creating rich text resources for applications (like help and code documentation) and Assist++ - a powerful C++ code analyzer that provides features like code completion, navigation and transformation.   TheIDE can work with GCC, MinGW and Visual C++ as contained in free Windows Vista SDK and contains a full featured debugger. TheIDE can also be used to develop non-U++ applications.   What you can get with the Ultimate++ download in plain English   Very effective C++ library for cross-platform development in source form. A good integrated development environment, designed for developing large C++ applications.   You can use both, or you can use whichever you need.       Current release: 2015.2 (rev 9251) License: BSD     U++ Resources   Getting Started 5 minutes to learn the basics... ... and more   Users   GUI Tutorial Comparisons Overview Tutoring Plan   Documentation Examples Video Tutorials Supported platforms Applications FAQ Forums           Developers If you feel like contributing to web or code this is your place Download U++ Let's go! Project management (Redmine) SVN install and permissions Bug report. Submitting a patch Web page New development ideas Current topics GSoC ideas Bazaar Authors & License Download Current release: 9251 Latest svn: 10043         Students   Other   Supporting U++ Sometimes more than code is needed... Google Summer of Code resources Learn C/C++ with TheIDE External links Funding U++ Cookie prize   Page updated at 07/15/2016 05:20:32 UTC. Last edit by klugier on 06/26/2016. Do you want to contribute?. T++"	"null"	"null"	"A C++ cross-platform rapid application development framework. [BSD]"	"true"
"Frameworks"	"uSTL"	"http://msharov.github.io/ustl/"	"The small STL library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"152"	"27"	"28"	"GitHub - msharov/ustl: A size-optimized STL implementation. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 152 Fork 28 msharov/ustl Code Issues 0 Pull requests 0 Pulse Graphs A size-optimized STL implementation. 776 commits 2 branches 23 releases Fetching contributors C++ 97.0% Objective-C 1.3% Other 1.7% C++ Objective-C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v2.4 v2.3 v2.2 v2.1 v2.0 v1.6 v1.5 v1.4 v1.3 v1.2 v1.1 v1.0 v0.8 v0.7.1 v0.7 v0.6 v0.5 v0.4.3 v0.4.2 v0.4.1 v0.3.1 v0.2.1 v0.1 Nothing to show New pull request Latest commit c68b073 Jul 14, 2016 msharov Include <intializer_list> when --with-libstdc++. Fixes #63. Permalink Failed to load latest commit information. bvt vector.data should cast to return type. Fixes #62. Jul 14, 2016 docs Update size benchmark results for the current release. Jan 22, 2016 .gitignore Update build system Sep 28, 2015 Config.mk.in Remove -Wno-long-double on MacOS. Apparently this warning is no longe… Jan 6, 2016 LICENSE Set all copyright dates to initial file creation to not abuse the alr… Mar 16, 2011 Makefile Remove self-symlink used for bvts. Fixes #25. Mar 3, 2016 README Add README and web docs with gh-pages Nov 13, 2013 bktrace.cc Coding style changes Nov 25, 2014 bktrace.h Pull more system includes into utypes.h, before force inline define. May 8, 2016 cmemlink.cc Coding style changes Nov 25, 2014 cmemlink.h Coding style changes Nov 25, 2014 config.h.in Move forced inline define after inclusion of libstdc++ headers due to… Feb 27, 2016 configure Bump version number for release May 10, 2016 fstream.cc Pull more system includes into utypes.h, before force inline define. May 9, 2016 fstream.h Coding style changes Nov 25, 2014 memblock.cc Pull more system includes into utypes.h, before force inline define. May 9, 2016 memblock.h Coding style changes Nov 25, 2014 memlink.cc Add noexcept wherever possible Feb 14, 2013 memlink.h Coding style changes Nov 25, 2014 metamac.h Replace header guards with pragma once Dec 4, 2012 mistream.cc Set eofbit|failbit in istream underflow Jan 6, 2016 mistream.h Add iterator_category type to all iterators, and its value tags. Closes Jan 10, 2016 mostream.h Add iterator_category type to all iterators, and its value tags. Closes Jan 10, 2016 ofstream.cc Pull more system includes into utypes.h, before force inline define. May 9, 2016 ofstream.h Move putback from istringstream to ifstream because istringsteam is a… Jan 13, 2016 simd.h Fixes to compile with clang 3.7 Jan 6, 2016 sistream.cc Fix potentially uninitialized value read from an invalid stream. Fixes … Feb 27, 2016 sistream.h Implement setw and setprecision manipulators. Jan 16, 2016 sostream.cc Change ostringstream default fill to 0 for ABI compatibility May 11, 2016 sostream.h Implement ostringstream fill and setfill manip. Closes #58. May 11, 2016 strmsize.h Coding style changes Nov 25, 2014 traits.h Zero memory when constructing POD types instead of calling ctors Dec 21, 2015 typeinfo.h Move forced inline define after inclusion of libstdc++ headers due to… Feb 27, 2016 typelist.h Replace header guards with pragma once Dec 4, 2012 typet.h Remove tm::Conversion<T,U>::exists2Way Jan 9, 2016 ualgo.h Pull more system includes into utypes.h, before force inline define. May 9, 2016 ualgobase.cc Remove unused stosv spec for non-intel builds Jan 6, 2016 ualgobase.h Pull more system includes into utypes.h, before force inline define. May 9, 2016 uarray.h Restrict initializer_list use to c++11 mode Sep 28, 2015 uatomic.h Move forced inline define after inclusion of libstdc++ headers due to… Feb 27, 2016 ubitset.cc Add noexcept wherever possible Feb 15, 2013 ubitset.h Coding style changes Nov 25, 2014 uctralgo.h Coding style changes Nov 25, 2014 uctrstrm.h Fix printing of empty vectors. Jan 13, 2016 uerror.h Pull more system includes into utypes.h, before force inline define. May 9, 2016 uexception.cc Move libc_exception, file_exception, and stream_bounds_exception to s… Dec 25, 2015 uexception.h Move forced inline define after inclusion of libstdc++ headers due to… Feb 27, 2016 ufunction.h Coding style changes Nov 25, 2014 uheap.h Implement c++11 members of priority_queue Apr 3, 2016 uios.h Optimize istringstream get string Jan 7, 2016 uiosfunc.h Implement setw and setprecision manipulators. Jan 16, 2016 uiterator.h Add iterator template Jan 10, 2016 ulaalgo.h Coding style changes Nov 25, 2014 ulimits.h Zero memory when constructing POD types instead of calling ctors Dec 21, 2015 ulist.h Replace deque define with a template alias Jan 13, 2016 umap.h Restrict initializer_list use to c++11 mode Sep 28, 2015 umatrix.h Coding style changes Nov 25, 2014 umemory.h Include <intializer_list> when --with-libstdc++. Fixes #63. Jul 14, 2016 umultimap.h Restrict initializer_list use to c++11 mode Sep 28, 2015 umultiset.h Restrict initializer_list use to c++11 mode Sep 28, 2015 unew.cc Remove unused argument n in MacOS version of sized delete operators Jan 9, 2016 unew.h Pull more system includes into utypes.h, before force inline define. May 9, 2016 unumeric.h Coding style changes Nov 25, 2014 upair.h Do not remove lvalue make_pair for c++11 Feb 8, 2016 upredalgo.h Coding style changes Nov 25, 2014 uqueue.h Implement c++11 members of priority_queue Apr 3, 2016 uset.h Restrict initializer_list use to c++11 mode Sep 28, 2015 uspecial.h Pull more system includes into utypes.h, before force inline define. May 9, 2016 ustack.h Implement c++11 members of priority_queue Apr 3, 2016 ustdxept.cc Pull more system includes into utypes.h, before force inline define. May 9, 2016 ustdxept.h Rename libc_exception to system_error; in c++14 that is now a standard Dec 25, 2015 ustl.h Use atomic refcount in shared_ptr May 31, 2016 ustldoc.in Bump version number for release May 10, 2016 ustring.cc Add constexpr to definition of string::npos Feb 27, 2016 ustring.h Pull more system includes into utypes.h, before force inline define. May 9, 2016 utf8.h Fix utf8out_iterator postfix ++ to not create a new iterator Mar 22, 2016 uttraits.h Fallback to __has_trivial* from __is_trivially* for gcc <5 Jan 9, 2016 utuple.h Restrict initializer_list use to c++11 mode Sep 28, 2015 utypes.h Include <intializer_list> when --with-libstdc++. Fixes #63. Jul 14, 2016 uutility.h Pull more system includes into utypes.h, before force inline define. May 9, 2016 uvector.h vector.data should cast to return type. Fixes #62. Jul 14, 2016 README                           ####  #####  #                          #       #    #                     # #  ####    #    #                     # #     #    #    #                     ###  ####    #    ####                     # ============================================================================  uSTL is a partial implementation of the C++ standard library that focuses on decreasing the memory footprint of user executables. While many projects can use it to replace the standard library without any code changes, there exist important differences that you should be aware of. Please read documentation in docs/index.html (or online at http://msharov.github.io/ustl) before using this library in your project.  uSTL ought to still compile under gcc as old as 2.95, but many features will be unavailable. For best results, including C++11 support, use at least 4.6. Clang 3.2 or later is also supported. There are no other dependencies.  Latest version:		https://github.com/msharov/ustl/releases/latest  ./configure && make && make check && make install  Build configuration is in Config.mk and config.h, generated by configure.  Bug tracker:		https://github.com/msharov/ustl/issues Working git branch:	https://github.com/msharov/ustl  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/msharov/ustl"	"The small STL library. [MIT]"	"true"
"Frameworks"	"Windows Template Library"	"http://sourceforge.net/projects/wtl/"	"A C++ library for developing Windows applications and UI components. [Public]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Windows Template Library (WTL) download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse Development Software Development Windows Template Library (WTL) Windows Template Library (WTL) Brought to you by: nenadstefanovic, tsudakageyu Summary Files Reviews Support Wiki Mailing Lists Tickets ▾ Bugs Support Requests Patches Feature Requests News Discussion Code ★ 4.8 Stars (29) 494 Downloads (This Week) Last Update: 2015-11-19 Download WTL91_5321_Final.zip Browse All Files Windows Description Windows Template Library (WTL) is a C++ library for developing Windows applications and UI components. It extends ATL (Active Template Library) and provides a set of classes for controls, dialogs, frame windows, GDI objects, and more. Windows Template Library (WTL) Web Site Categories Software Development License Common Public License 1.0, Microsoft Public License KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 4.8 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 27 1 0 0 1 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ calmopyrin 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Extremely lightweight library that makes Windows development a breeze. Posted 11/16/2015 ihart 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Been using WTL for years now. Its Perfect - Love your work. Thank you Posted 10/31/2015 thims 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Great alternative to MFC. Posted 09/03/2015 cstup 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Thank you very much for continuing to develop WTL. I <heart> WTL! Posted 06/19/2014 marcelraad 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Thank you very much for the great improvements in version 9! Posted 05/12/2014 Read more reviews Additional Project Details Languages English Intended Audience Developers User Interface Win32 (MS Windows) Programming Language C++ Registered 2004-05-09 Recommended Projects Visual WTL and WinxGui ClassWizard Win32++ wtlhelper9 Deals Top Searches atl atl(active template library) c++ gui .xlsx allegro android password cracker audacity windows 10 bittorrent boost c++ libraries c++ gui framework Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"A C++ library for developing Windows applications and UI components. [Public]"	"true"
"Frameworks"	"Yomm11"	"https://github.com/jll63/yomm11"	"Open multi-methods for C++11. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"73"	"14"	"12"	"GitHub - jll63/yomm11: Open multi-methods for C++11 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 73 Fork 12 jll63/yomm11 Code Issues 1 Pull requests 0 Pulse Graphs Open multi-methods for C++11 http://www.yorel.be/mm/ 118 commits 1 branch 4 releases 2 contributors C++ 97.8% CMake 2.2% C++ CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.02 1.0.1 1.0 1.0-rc1 Nothing to show New pull request Latest commit 2e15957 Jun 27, 2015 jll63 Fix a stray multi_ Permalink Failed to load latest commit information. doc Remove the remaining compile-command. Jun 27, 2015 examples Remove the remaining compile-command. Jun 27, 2015 include/yorel Fix a stray multi_ Jun 27, 2015 src Move most of everything to namespace detail. Jun 27, 2015 tests Remove the remaining compile-command. Jun 27, 2015 .gitignore Port to MSVC 2013. Mar 28, 2015 CMakeLists.txt Rename: YOMM11 everywhere, remove multi from identifiers. Jun 27, 2015 LICENSE Include copy of the BPL. Aug 17, 2013 README Fix typo. Mar 28, 2015 go Foundation. Jul 6, 2013 README This library implements open multi-methods for C++11.  Salient features are:  * syntax: is relatively uncluttered. There are no limitations on the   number of virtual arguments. Virtual and non-virtual arguments can   be arbitrarily mixed. Virtual and multiple inheritance are   supported.  * speed: close to a virtual function call when the hierarchies   involved in the virtual arguments collaborate with the   library. Calling a method that does nothing, with a single virtual   argument in a single inheritance hierarchy is 33% slower than the   equivalent virtual function call. The difference becomes   unnoticeable if the functions perform a few simple maths   operations. See tests/benchmarks.cpp.  * size: dispatch tables are constructed in terms of class groups. This   results in a tables devoid of redundancies.  * support for ""foreign"" class hierarchies: the library can be used   without modifications to existing classes, at the cost of lower   performance. Collaborating and foreign arguments can be freely   mixed. Performance is still quite good, see the benchmarks.  * next: a pointer to the next most specialized method is available   inside method specializations - see examples/next.cpp.   Alternatively, it is possible to call a specialization directly.  Documentation: http://www.yorel.be/mm/ - see also the articles on Code Project http://tinyurl.com/m8kg2y3  Support and discussions: yomm11 on Google Groups (https://groups.google.com/forum/#!forum/yomm11)  Author: Jean-Louis Leroy - jl@yorel.be  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jll63/yomm11"	"Open multi-methods for C++11. [Boost]"	"true"
"Artificial Intelligence"	"btsk"	"https://github.com/aigamedev/btsk"	"Game Behavior Tree Starter Kit. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"166"	"44"	"65"	"GitHub - aigamedev/btsk: Behavior Tree Starter Kit Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 166 Fork 65 aigamedev/btsk Code Issues 0 Pull requests 1 Pulse Graphs Behavior Tree Starter Kit 4 commits 1 branch 0 releases Fetching contributors C++ 100.0% C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 8124c3e Jun 24, 2014 alexjc Adding an explicit zlib license to the repository. Permalink Failed to load latest commit information. .gitignore Updated version of the BTSK: Oct 4, 2012 BTSK.sln First release of the BehaviorTreeStarterKit from February 2012, files… Oct 4, 2012 BehaviorTree.cpp Updated version of the BTSK: Oct 4, 2012 BehaviorTreeEvent.cpp Updated version of the BTSK: Oct 4, 2012 BehaviorTreeOptimized.cpp Updated version of the BTSK: Oct 4, 2012 BehaviorTreeShared.cpp First release of the BehaviorTreeStarterKit from February 2012, files… Oct 4, 2012 BehaviorTreeStarterKit.vcxproj First release of the BehaviorTreeStarterKit from February 2012, files… Oct 4, 2012 BehaviorTreeStarterKit.vcxproj.filters First release of the BehaviorTreeStarterKit from February 2012, files… Oct 4, 2012 LICENSE.md Adding an explicit zlib license to the repository. Jun 24, 2014 README.md Initial commit Aug 7, 2012 Shared.h Updated version of the BTSK: Oct 4, 2012 Test.cpp Updated version of the BTSK: Oct 4, 2012 Test.h First release of the BehaviorTreeStarterKit from February 2012, files… Oct 4, 2012 README.md btsk Behavior Tree Starter Kit Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aigamedev/btsk"	"Game Behavior Tree Starter Kit. [zlib]"	"true"
"Artificial Intelligence"	"Evolving Objects"	"http://eodev.sourceforge.net/"	"A template-based, ANSI-C++ evolutionary computation library which helps you to write your own stochastic optimization algorithms insanely fast. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Evolving Objects (EO): Evolutionary Computation Framework C++ evolutionary computation components framework Shortcuts: Download Tutorial FAQ EO documentation EDO documentation Project page Contact us Submit a bug see also ParadisEO Jump to section: Features Component-based Main Features Portability Presentations Code Download Facts License Documentation Development Mailing-lists Get involved Related software Authors Links Loading... Evolving Objects (EO): an Evolutionary Computation Framework EO is a template-based, ANSI-C++ evolutionary computation library which helps you to write your own stochastic optimization algorithms insanely fast. Evolutionary algorithms forms a family of algorithms inspired by the theory of evolution, that solve various problems. They evolve a set of solutions to a given problem, in order to produce the best results. These are stochastic algorithms, because they iteratively use random processes. The vast majority of these methods are used to solve optimization problems, and may be also called ""metaheuristics"". They are also ranked among computational intelligence methods, a domain close to artificial intelligence. With the help of EO, you can easily design evolutionary algorithms that will find solutions to virtually all kind of hard optimization problems, from continuous to combinatorial ones. Download If you need immediate support or have any question, the best way to get answers is to subscribe to the mailing list and send your email to eodev-main@lists.sourceforge.net Alternatively, you can join us on the official chatroom. You can try our webchat interface, or if you already use IRC, you can directly connect to the irc.freenode.org/#paradiseo multi-user chatroom with your favorite client. Features ⤒ Component-based framework Designing an algorithm with EO consists in choosing what components you want to use for your specific needs, just as building a structure with Lego blocks. If you have a classical problem for which available code exists (for example if you have a black-box problem with real-valued variables), you will just choose components to form an algorithm and connect it to your fitness function (which computes the quality of a given solution). If your problem is a bit more exotic, you will have to code a class that represents how your individuals (a solution to your problem) are represented, and perhaps some variations operators, but most of the other operators (selection, replacement, stopping criteria, command-line interface, etc.) are already available in EO. Main Features Examples of problems that you can solve with the help of EO: Flexible design that permits to easily create virtually any algorithm Solution representation for continuous and combinatorial problems: binary-strings, permutations, vectors, easily write your own, … Several algorithm paradigms: evolution strategies, genetic algorithms, estimation of distribution, particle swarm optimization … Many selection and replacement operators: rank-based, deterministic or stochastic tournaments, roulette, elitism, … Ready-to-use variations operators: uniform initializer, gaussian mutation, subtree crossover, … Easy combination of several operators: proportional combination, sequential call, … Parallelization tools: Shared memory loops unrolling (with OpenMP) Message passing parallelization (with openMPI): map/reduce-like design, with operators choice, as in EO useful existing operators (parallel dynamic multi-start, static evaluations, …) Portable and human-readable parameter files Suspend and load population from files Versatile checkpointing and logging: graphical display, file dump, various statistics, signal catching, … Mersenne Twister random number generator (and various distributions) No useless computation (sparing fitness call, functor-based calls) Fast running speed, thanks to C++ And more! Portability EO should work on Windows and any Un*x-like operating system with a standard-conforming C++ development system. Recent versions of EO have been tested on the following platforms: Linux x86 with GCC 3.x and 4.x Linux x86_64 with GCC 3.x and GCC 4.x MacOS X/Darwin PowerPC with GCC 3.x MacOS X/Darwin x86 with GCC 4.x Microsoft Windows using Cygwin's GCC 3.x (cygming special). Microsoft Windows using Visual Studio 2003/2005; projects files are provided. Solaris SPARC with GCC 3.x Solaris x86 with GCC 3.x Recent versions of EO uses the CMake portable build system, that permits to easily generate a build chain for your environment. If you have tested EO on a system not listed here, please let us know. If you are working on a system with an older C++ compiler there is a good chance that eo-0.9.3z.1 works. It is tested on Linux with gcc-2.9x and several systems (IRIX, Solaris) with egcs. Presentations A functional and ""philosophical"" overview of EO was presented at EA'01 conference. You can download the paper or the slides, or browse them right here: Evolving Objects: Yet Another Evolutionary Computation Library? You can also read this PowerPoint presentation, that shows the EO philosophy. It includes a Visual Basic macro for evolving objects in Visual Basic for Applications. EO is described in the following scientific article: M. Keijzer, J.J. Merelo, G. Romero, G., M. Schoenauer, ""Evolving objects: A general purpose evolutionary computation library"", Artificial Evolution, 2310, 829--888 (2002). @Article{Keijzer2001,   title =     ""Evolving Objects: A General Purpose Evolutionary Computation Library "",   author =    ""Maarten Keijzer and J. J. Merelo and G. Romero and M. Schoenauer"",   journal =   ""Artificial Evolution"",   year =      ""2002"",   volume =    ""2310"",   pages =     ""829--888"",   keywords =  ""genetic algorithms, genetic programming, evolutionary computation, metaheuristic, computational intelligence, optimization"",   URL =       ""http://www.lri.fr/~marc/EO/EO-EA01.ps.gz"",   size =      ""12 pages"",   abstract =  ""This paper presents the evolving objects library                  (EOlib), an object-oriented framework for evolutionary                  computation (EC) that aims to provide a flexible set of                  classes to build EC applications. EOlib design                  objective is to be able to evolve any object in which                  fitness makes sense."", } If you want to understand the message-passing parallelization module, check the introduction to eo::MPI by Benjamin Bouvier. Here is a list of some known publications that used EO: J.J. Gilijamse, J. Küpper, S. Hoekstra, S.Y.T. van de Meerakker, G. Meijer, Optimizing the Stark-decelerator beamline for the trapping of cold molecules using evolutionary strategies, Physical Review, A 73, 063410 (2006). Also available at arXiv physics/0603108 (2006). Johann Dreo, Using Performance Fronts for Parameter Setting of Stochastic Metaheuristics, Genetic and Evolutionary Computation Conference, (2009). Jacques Bibaï, Pierre Savéant, Marc Schoenauer, Vincent Vidal, An Evolutionary Metaheuristic Based on State Decomposition for Domain-Independent Satisficing Planning, Twentieth International Conference on Automated Planning and Scheduling (2010). Jacques Bibaï, Pierre Savéant, Marc Schoenauer, Vincent Vidal, An Evolutionary Metaheuristic for Domain-Independent Satisficing Planning, Genetic and Evolutionary Computation Conference (2010). Silver Medal at the Human-Competitive Competition Code ⤒ Download The current stable release is EO 1.0. It supports any standard-compliant C++ compiler. You can obtain the latest version directly via GIT or browse the repository online. All releases can be obtained from the SourceForge download area. Facts Those statistics are automatically generated by ohloh.net, directly from the EO source code. License EO is distributed under the GNU Lesser General Public License. Note that this license places copyleft restrictions on a program created with EO, but does not apply these restrictions to other software that would links with the program. Documentation The tutorial demonstrates that writing an evolutionary algorithm evolving your own structures is now easy, using ready-to-use template files. Although the tutorial has not been upgraded for some time now and refers to version 0.9.2 of EO, it nevertheless remains the best way to dive into EO. You can start by trying it on-line at LRI or SourceForge, before downloading it. The tutorial is also included in the released sources. The latest tutorial release. The complete code is also well documented and you can look at the generated interface documentation. The easiest way to create a complete new EO-project, even for new genomes, is to use the script provided in tutorial/Templates/; see the README in that directory and lesson 5 of the tutorial for detail. Development ⤒ Mailing-lists EO is an open development effort; that is why we have created mailing lists to discuss future developments, solve technical problems, announce releases, publish patches, and discuss evolutionary computation in general. Browse the archives or join the EO mailing lists. Get involved The following resources are available, thanks to sourceforge EO SourceForge Project Page EO automatic documentation page at SF EO tutorial page at SF Releases Mailing Lists Message Forums Bug Submission and Tracking Technical Support Code repository Related software The softwares listed here are using EO, but they are not maintained by the EO team. They may not be free softwares or may even be outdated. ParadisEO provides EO extensions for the flexible design of single solution-based metaheuristics, metaheuristics for multi objective optimization as well as hybrid, parallel and distributed metaheuristics. DegaX is an ActiveX control which embeds EO 0.8.4. EASEA was a GUI that permits to build evolutionary algorithm with EO or the GAlib. It is now a platform that allows program evolutionary algorithms on massively parallel many-core architectures. GUIDE is a GUI that allows the generation of evolutionary algorithms. It can use EO or ECJ. Authors EO was started by the Geneura Team at the University of Granada, headed by Juan Julián Merelo. The original Web site is also the only place where you will find old releases of EO (up to 0.8.7), but beware that it is not compatible at all with the current version. The developement team has then been reinforced by Maarten Keijzer, the C++ wizzard, and Marc Schoenauer. Later came Jeroen Eggermont, who, among other things, did a lot of work on GP, INRIA Dolphin Team, Olivier König, who did a lot of useful additions and cleaning of the code and Jochen Küpper, working on infrastructure maintenance. The project is now maintained by Johann Dréo, working on it with the help of Caner Candan. Benjamin Bouvier have designed a whole new MPI parallelization module. Links COCO (COmparing Continuous Optimisers), a platform for systematic and sound comparisons of real-parameter global optimisers. COCO provides benchmark function testbeds and tools for processing and visualizing data generated by one or several optimizers. The Hitch-Hiker's Guide to Evolutionary Computation, FAQ for comp.ai.genetic. Wikipedia entries on Evolutionary algorithms. Charles Darwin: The Origin of Species."	"null"	"null"	"A template-based, ANSI-C++ evolutionary computation library which helps you to write your own stochastic optimization algorithms insanely fast. [LGPL]"	"true"
"Artificial Intelligence"	"TensorFlow"	"https://github.com/tensorflow/tensorflow"	"An open source software library for numerical computation using data flow graphs [Apache]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"28102"	"2697"	"11437"	"GitHub - tensorflow/tensorflow: Computation using data flow graphs for scalable machine learning Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2,697 Star 28,102 Fork 11,437 tensorflow/tensorflow Code Issues 382 Pull requests 22 Pulse Graphs Computation using data flow graphs for scalable machine learning http://tensorflow.org 5,908 commits 8 branches 9 releases 311 contributors C++ 45.4% Python 38.1% Jupyter Notebook 7.8% HTML 3.8% TypeScript 1.9% Shell 1.0% Other 2.0% C++ Python Jupyter Notebook HTML TypeScript Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.6.0 go master r0.7 r0.8 r0.9 vincentvanhoucke-patch-1 vincentvanhoucke-patch-2 Nothing to show v0.9.0 v0.9.0rc0 v0.8.0 v0.8.0rc0 v0.7.1 v0.7.0 v0.6.0 0.6.0 0.5.0 Nothing to show New pull request Latest commit d2c913a Jul 15, 2016 siddharth-agrawal committed with vrv Documentation for broadcasting behavior of binary elementwise operati… … …ons (#3314)  * Documentation for broadcasting behavior of binary elementwise operations  * Remove broadcasting example - math_ops.py doc Permalink Failed to load latest commit information. tensorflow Documentation for broadcasting behavior of binary elementwise operati… Jul 14, 2016 third_party Merge commit for internal changes Jul 13, 2016 tools Fix genrule Python execution problem with Python3. Jun 17, 2016 util/python Merge changes from github. Jun 24, 2016 .gitignore added cuda/extras and cuda/lib to gitignore (#2182) May 1, 2016 .gitmodules Remove submodule for protobuf from staging May 27, 2016 ACKNOWLEDGMENTS TensorFlow: Improve performance of Alexnet Nov 20, 2015 AUTHORS Merge changes from github. Jul 11, 2016 CONTRIBUTING.md Change contributing.md for new contribution policy. Dec 17, 2015 ISSUE_TEMPLATE.md Merge changes from github. Jun 11, 2016 LICENSE TensorFlow: Initial commit of TensorFlow library. Nov 6, 2015 README.md Update URLs in README.md Jul 13, 2016 RELEASE.md Include recent C graph-construction API in release notes. Jul 13, 2016 WORKSPACE Autogenerated Change: Release TensorBoard at TAG: 22 Jul 12, 2016 avro.BUILD Add a new contrib/avro directory and the initial schema that resembles May 27, 2016 boost.BUILD Add a new contrib/avro directory and the initial schema that resembles May 27, 2016 boringssl.BUILD Add SSL target to TensorFlow's Boringssl BUILD files. Also make genru… Jun 1, 2016 bower.BUILD Adding a device checkbox list for excluding devices when computing st… Jun 28, 2016 bzip2.BUILD Add a new contrib/avro directory and the initial schema that resembles May 27, 2016 configure Merge changes from github. Jun 30, 2016 eigen.BUILD Switched to the latest version of Eigen that provides significant per… Jul 12, 2016 farmhash.BUILD Add farmhash fingerprint64 into hash.h and include corresponding depe… May 13, 2016 gif.BUILD Add giflib library dependency Jul 10, 2016 gmock.BUILD Merge changes from github. May 27, 2016 grpc.BUILD Merge changes from github. Jun 11, 2016 jpeg.BUILD TensorFlow: Initial commit of TensorFlow library. Nov 7, 2015 jsoncpp.BUILD File system implementation for Google Cloud Storage. May 11, 2016 nanopb.BUILD Specializes the implementation of the gRPC Master and Worker services. Jun 3, 2016 navbar.md TensorFlow: Upstream changes to git. Nov 8, 2015 png.BUILD TensorFlow: Initial commit of TensorFlow library. Nov 7, 2015 six.BUILD TensorFlow: Minor updates to docs, BUILD, GPU config / perf, etc. Nov 12, 2015 zlib.BUILD Add a new contrib/avro directory and the initial schema that resembles May 27, 2016 README.md Linux CPU Linux GPU PIP Mac OS CPU Android TensorFlow is an open source software library for numerical computation using data flow graphs. Nodes in the graph represent mathematical operations, while the graph edges represent the multidimensional data arrays (tensors) that flow between them. This flexible architecture lets you deploy computation to one or more CPUs or GPUs in a desktop, server, or mobile device without rewriting code. TensorFlow also includes TensorBoard, a data visualization toolkit. TensorFlow was originally developed by researchers and engineers working on the Google Brain team within Google's Machine Intelligence research organization for the purposes of conducting machine learning and deep neural networks research. The system is general enough to be applicable in a wide variety of other domains, as well. If you'd like to contribute to TensorFlow, be sure to review the contribution guidelines. We use GitHub issues for tracking requests and bugs, but please see Community for general questions and discussion. Installation See Download and Setup for instructions on how to install our release binaries or how to build from source. People who are a little more adventurous can also try our nightly binaries: Linux CPU-only: Python 2 (build history) / Python 3.4 (build history) / Python 3.5 (build history) Linux GPU: Python 2 (build history) / Python 3.4 (build history) / Python 3.5 (build history) Mac CPU-only: Python 2 (build history) / Python 3 (build history) Android (build history) Try your first TensorFlow program $ python >>> import tensorflow as tf >>> hello = tf.constant('Hello, TensorFlow!') >>> sess = tf.Session() >>> sess.run(hello) Hello, TensorFlow! >>> a = tf.constant(10) >>> b = tf.constant(32) >>> sess.run(a+b) 42 >>> For more information TensorFlow website TensorFlow whitepaper TensorFlow Model Zoo TensorFlow MOOC on Udacity The TensorFlow community has created amazing things with TensorFlow, please see the resources section of tensorflow.org for an incomplete list. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tensorflow/tensorflow"	"An open source software library for numerical computation using data flow graphs [Apache]"	"true"
"Networking"	"Boost.Asio"	"http://think-async.com/"	"A cross-platform C++ library for network and low-level I/O programming. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"asio C++ library Asio>WebHome New! No external dependencies With C++11, most of Asio can be used without any extra dependencies. More... Who is using Asio? Add your project here! Latest Stable Release Asio version 1.10.6 Download Release notes Documentation (non-Boost) Documentation (Boost) (Note: Boost.Asio 1.10.6 will also be included in Boost 1.58.) Latest Development Release Asio version 1.11.0 Download Release notes Documentation (non-Boost) Asio C++ Library Asio is a cross-platform C++ library for network and low-level I/O programming that provides developers with a consistent asynchronous model using a modern C++ approach. What does Asio provide? Asio provides the basic building blocks for C++ networking, concurrency and other kinds of I/O. What kind of applications can use Asio? Asio is used in all kinds of applications, from phone apps to the world's fastest share markets. Asio and Boost.Asio Asio comes in two variants: (non-Boost) Asio and Boost.Asio. More... License Asio is released under the Boost Software License. Supported Platforms The following platforms and compilers have been tested: Win32 and Win64 using Visual C++ 7.1, 8.0, 9.0 and 10.0. Win32 using MinGW. Win32 using Cygwin. ( __USE_W32_SOCKETS must be defined.) Linux (2.4 or 2.6 kernels) using g++ 3.3 or later. Solaris using g++ 3.3 or later. Mac OS X 10.4 and later using g++ 3.3 or later. The following platforms may also work: Win32 using Borland C++Builder 2007. AIX 5.3 using XL C/C++ v9. HP-UX 11i v3 using patched aC++ A.06.14. QNX Neutrino 6.3 using g++ 3.3 or later. Solaris using Sun Studio 11 or later. Tru64 v5.1 using Compaq C++ v7.1. Asio Home Download Documentation Source Repository GitHub Page Mailing List Blog Support Community Content FAQ Tips and Tricks Recipes Examples Users Wishlist Create New Topic Index Search Log In or Register         Copyright © by the contributing authors. All material on this collaboration platform is the property of the contributing authors. Ideas, requests, problems regarding TWiki? Send feedback"	"null"	"null"	"A cross-platform C++ library for network and low-level I/O programming. [Boost]"	"true"
"Asynchronous Event Loop"	"libev"	"http://libev.schmorp.de/"	"A full-featured and high-performance event loop that is loosely modelled after libevent, but without its limitations and bugs. [BSD and GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"libev Schmorpforge Software Repository libev The free as in beer, liberal, code & content retro-style graphical MMORPG :) libev A full-featured and high-performance (see benchmark) event loop that is loosely modelled after libevent, but without its limitations and bugs. It is used in GNU Virtual Private Ethernet, rxvt-unicode, auditd, the Deliantra MORPG Server and Client, and many other programs. Blurb Features include child/pid watchers, periodic timers based on wallclock (absolute) time (in addition to timers using relative timeouts), as well as epoll/kqueue/event ports/inotify/eventfd/signalfd support, fast timer management, time jump detection and correction, and ease-of-use. It can be used as a libevent replacement using its emulation API or directly embedded into your programs without the need for complex configuration support. A full-featured and well-documented perl interface is also available. A mailing list for discussion and support is now available. Resources CVS Browsable CVS module 'libev' CVS Anonymous CVS:  cvs -z3 -d :pserver:anonymous@cvs.schmorp.de/schmorpforge co libev FILE File Releases LIST Mailing List 'libev' IRC Server irc.schmorp.de, channel #schmorpforge, user schmorp (say hi and wait a few minutes or hours) Additional Documents FILE README POD ev.pod Contact for this page: Marc Lehmann <schmorpforge@schmorp.de>."	"null"	"null"	"A full-featured and high-performance event loop that is loosely modelled after libevent, but without its limitations and bugs. [BSD and GPL]"	"true"
"Asynchronous Event Loop"	"libevent"	"http://libevent.org/"	"An event notification library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1622"	"227"	"1119"	"GitHub - libevent/libevent: A public libevent repository.  The official repository is at https://github.com/libevent/libevent Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 227 Star 1,622 Fork 1,119 libevent/libevent forked from nmathewson/Libevent Code Issues 48 Pull requests 25 Wiki Pulse Graphs A public libevent repository. The official repository is at https://github.com/libevent/libevent http://libevent.org 3,658 commits 6 branches 45 releases 83 contributors C 88.5% CMake 3.4% Python 2.3% Groff 1.8% C++ 1.7% M4 1.5% Other 0.8% C CMake Python Groff C++ M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0.23-stable-rc 20-issue306-fix 21_http_extended_methodcmp master patches-1.4 patches-2.0 Nothing to show release-2.1.5-beta release-2.0.22-stable release-2.0.21-stable release-2.0.20-stable release-2.0.19-stable release-2.0.18-stable release-2.0.17-stable release-2.0.16-stable release-2.0.15-stable release-2.0.14-stable release-2.0.13-stable release-2.0.12-stable release-2.0.11-stable release-2.0.10-stable release-2.0.9-rc release-2.0.8-rc release-2.0.7-rc release-2.0.6-rc release-2.0.5-beta release-2.0.3-alpha release-2.0.2-alpha@1379 release-1.4.15-stable release-1.4.14b-stable release-1.4.14-stable release-1.4.13-stable release-1.4.12-stable release-1.4.11-stable release-1.4.10-stable release-1.4.9-stable release-1.4.8-stable release-1.4.7-stable release-1.4.6 release-1.4.5-stable release-1.4.4-stable release-1.4.3-stable release-1.4.2-rc release-1.4.1-beta release-1.4.0-beta release-1.3e release-1.3d release-1.3c release-1.3b release-1.3a release-1.2 release-1.1b Nothing to show New pull request #379 Compare This branch is even with nmathewson:master. Latest commit df6f99e Jul 8, 2016 mark-chromium committed with azat Check for Mac OS X 10.4 kqueue bug properly … EV_ERROR is a bit in struct kevent::flags. Other bits may be set too.  Actually we have osx builds on travis-ci, but it uses osx 10.9.5, and we don't have warnings there, since I guess that there is no OR'ing with previous flag in case of error, while in 10.12 there is OR.  Fixes: #377 Fixes: #376 Link: https://crbug.com/626534 Link: https://travis-ci.org/libevent/libevent/jobs/141033429 Permalink Failed to load latest commit information. WIN32-Code Increment version to 2.1.5-beta Jan 5, 2015 cmake cmake: fix adding of compiler flags, and now it will Mar 10, 2016 compat/sys Fix all identifiers with names beginning with underscore. Feb 29, 2012 include [#372] check for errno.h Jun 28, 2016 m4 Merge remote-tracking branch 'origin/patches-2.0' Feb 14, 2012 sample Fix memory leak in signal-test.c Jun 29, 2016 test test/buffer: cover evbuffer_expand() for overflow Jun 26, 2016 .gitignore Update gitignore file to ignore cscope gen'ed files Jun 22, 2016 .travis.yml travis-ci/osx: relink gcc/g++ instead of clang May 10, 2016 CMakeLists.txt [#372] check for errno.h Jun 28, 2016 ChangeLog Update changelog Jan 5, 2015 ChangeLog-1.4 Try to finalize changelog situation for 2.1.1-alpha Apr 3, 2012 ChangeLog-2.0 Update ChangeLog-2.0 Nov 18, 2012 Doxyfile Fix doxygen to use new macro conventions Feb 29, 2012 LICENSE Implement fast/precise monotonic clocks on Windows Apr 26, 2012 Makefile.am automake: define serial-tests only if automake have this option May 11, 2016 Makefile.nmake Revert ""The Windows socket type is defined as SOCKET."" Dec 20, 2015 README.md Update README.md Dec 23, 2015 appveyor.yml Use autotools for appveyor until cmake is fixed. May 12, 2015 arc4random.c Merge remote-tracking branch 'origin/patches-2.0' Aug 19, 2013 autogen.sh Prefer autoreconf -ivf to manual autogen.sh Sep 3, 2010 buffer.c buffer: don't mix code and declarations Jul 7, 2016 buffer_iocp.c Have all visible internal function names end with an underscore. Feb 29, 2012 bufferevent-internal.h be_sock: cancel in-progress dns requests Mar 23, 2016 bufferevent.c be: introduce bufferevent_generic_adj_existing_timeouts_() Nov 6, 2015 bufferevent_async.c be async: avoid double close() Nov 21, 2014 bufferevent_filter.c be_filter: avoid data stuck under active watermarks Jun 19, 2016 bufferevent_openssl.c be_openssl: clear all pending errors before SSL_*() calls May 2, 2016 bufferevent_pair.c Fix bufferevent_pair to properly set BEV_EVENT_{READING,WRITING} on f… Jun 17, 2016 bufferevent_ratelim.c Pass and return const for bufferevent_get_token_bucket_cfg Jul 11, 2013 bufferevent_sock.c be_sock: cancel in-progress dns requests Mar 23, 2016 changelist-internal.h Implemented EV_CLOSED event for epoll backend (EPOLLRDHUP). Jan 17, 2014 configure.ac [#372] check for errno.h Jun 28, 2016 defer-internal.h fix the return value of event_deferred_cb_schedule_ Mar 24, 2015 devpoll.c Have all visible internal function names end with an underscore. Feb 29, 2012 epoll.c epoll: introduce PRINT_CHANGES() macro to avoid copy-pasting Nov 18, 2015 epoll_sub.c Merge remote-tracking branch 'origin/patches-2.0' Jan 22, 2014 epolltable-internal.h Split epoll lookup table into a separate header file Jan 21, 2014 evbuffer-internal.h Fix CVE-2014-6272 in Libevent 2.1 Jan 5, 2015 evconfig-private.h.cmake Generate a dummy evconfig-private.h so things build properly. Dec 13, 2013 evconfig-private.h.in Clean up lingering _identifiers. Feb 29, 2012 evdns.3 improved nroff mdoc for the man page Oct 15, 2006 evdns.c evdns: fix searching empty hostnames Mar 25, 2016 event-config.h.cmake [#372] check for errno.h Jun 28, 2016 event-internal.h Add a prototype for event_disable_debug_mode() Sep 10, 2015 event.3 Don't use BSD u_* types. Aug 25, 2015 event.c event_reinit: make signals works after fork() without evsig_add() Dec 27, 2015 event_iocp.c Merge remote-tracking branch 'origin/patches-2.0' Nov 1, 2013 event_rpcgen.py Merge remote-tracking branch 'origin/patches-2.0' Oct 26, 2012 event_tagging.c Include <sys/ioctl.h>, <sys/resource.h> and <sys/wait.h> optionally. Sep 10, 2015 evmap-internal.h Have all visible internal function names end with an underscore. Feb 29, 2012 evmap.c Implemented EV_CLOSED event for epoll backend (EPOLLRDHUP). Jan 18, 2014 evport.c Have all visible internal function names end with an underscore. Feb 29, 2012 evrpc-internal.h Add an include to evrpc-internal to fix openbsd compilation warning Mar 12, 2014 evrpc.c Fix even more coverity warnings. Jan 8, 2014 evsignal-internal.h Add a new libevent_global_shutdown() to free all globals before exiting. Mar 22, 2012 evthread-internal.h Fix ""function declaration isn’t a prototype"" Feb 16, 2015 evthread.c evthread: fix evthread_setup_global_lock_() for debug-lock with a rea… Oct 4, 2015 evthread_pthread.c Clean up lingering _identifiers. Feb 29, 2012 evthread_win32.c Merge remote-tracking branch 'origin/patches-2.0' Dec 4, 2012 evutil.c evdns: export cancel via callbacks in util (like async lib core/extra… Mar 23, 2016 evutil_rand.c Merge remote-tracking branch 'origin/patches-2.0' Sep 19, 2013 evutil_time.c Implement new/free for struct evutil_monotonic_timer and export monot… Dec 4, 2014 ht-internal.h ht-internal: don't reset hth_table_length explicitly in name_##HT_CLEAR Jan 8, 2015 http-internal.h http: fix EVHTTP_CON_READ_ON_WRITE_ERROR when it doesn't supported by OS Mar 11, 2016 http.c [Issue #313] set method to ASCII ""NULL"" if evhttp_method() returns NULL Jun 24, 2016 iocp-internal.h Have all visible internal function names end with an underscore. Feb 29, 2012 ipv6-internal.h Convert include-guard macro convention to avoid reserved identifiers Feb 29, 2012 kqueue-internal.h Replace pipe-based notification with EVFILT_USER where possible Apr 11, 2012 kqueue.c Check for Mac OS X 10.4 kqueue bug properly Jul 12, 2016 libevent.pc.in Change use of AC_CHECK_LIB to AC_SEARCH_LIBS. Jul 10, 2009 libevent_core.pc.in libevent_core and libevent_extra also deserve a pkgconfig file Apr 20, 2016 libevent_extra.pc.in libevent_core and libevent_extra also deserve a pkgconfig file Apr 20, 2016 libevent_openssl.pc.in Use correct openssl libs and includes in pkgconfig file Nov 16, 2012 libevent_pthreads.pc.in Add pkgconfig files for libevent_{openssl,pthreads} Aug 10, 2010 listener.c listener: unlock lev on error in listener_read_cb() Apr 1, 2016 log-internal.h Actually use the log facility for reporting evdns problems. May 29, 2013 log.c Actually use the log facility for reporting evdns problems. May 29, 2013 make-event-config.sed Generate event-config.h with a single sed script Apr 27, 2012 make_epoll_table.py Implemented EV_CLOSED event for epoll backend (EPOLLRDHUP). Jan 18, 2014 minheap-internal.h Remove an unreachable return statement in minheap-internal.h Aug 1, 2013 mm-internal.h Convert include-guard macro convention to avoid reserved identifiers Feb 29, 2012 poll.c Split out time-related prototypes into time-internal.h Apr 20, 2012 ratelim-internal.h Have all visible internal function names end with an underscore. Feb 29, 2012 select.c Tweak the new evutil_weakrand_() code Apr 9, 2012 signal.c Merge remote-tracking branch 'github/20_win64_compilation' into 21_wi… Nov 2, 2012 strlcpy-internal.h Fix all identifiers with names beginning with underscore. Feb 29, 2012 strlcpy.c Fix all identifiers with names beginning with underscore. Feb 29, 2012 time-internal.h Implement new/free for struct evutil_monotonic_timer and export monot… Dec 4, 2014 util-internal.h evdns: export cancel via callbacks in util (like async lib core/extra… Mar 23, 2016 whatsnew-2.0.txt ""buffer"" spelling Feb 7, 2013 whatsnew-2.1.txt Add new APIs to whatsnew-2.1 Mar 16, 2014 win32select.c Don't use BSD u_* types. Aug 25, 2015 README.md 0. BUILDING AND INSTALLATION (Briefly) Autoconf  $ ./configure  $ make  $ make verify   # (optional)  $ sudo make install  Cmake (General) The following Libevent specific Cmake variables ar as follows (the values being the default). # Installation directory for executables EVENT_INSTALL_BIN_DIR:PATH=bin  # Installation directory for CMake files EVENT_INSTALL_CMAKE_DIR:PATH=lib/cmake/libevent  ## Installation directory for header files EVENT_INSTALL_INCLUDE_DIR:PATH=include  ## Installation directory for libraries EVENT_INSTALL_LIB_DIR:PATH=lib  ## Define if libevent should be built with shared libraries instead of archives EVENT__BUILD_SHARED_LIBRARIES:BOOL=OFF  # Enable running gcov to get a test coverage report (only works with # GCC/CLang). Make sure to enable -DCMAKE_BUILD_TYPE=Debug as well. EVENT__COVERAGE:BOOL=OFF  # Defines if libevent should build without the benchmark exectuables EVENT__DISABLE_BENCHMARK:BOOL=OFF  # Define if libevent should build without support for a debug mode EVENT__DISABLE_DEBUG_MODE:BOOL=OFF  # Define if libevent should not allow replacing the mm functions EVENT__DISABLE_MM_REPLACEMENT:BOOL=OFF  # Define if libevent should build without support for OpenSSL encrpytion EVENT__DISABLE_OPENSSL:BOOL=ON  # Disable the regress tests EVENT__DISABLE_REGRESS:BOOL=OFF  # Disable sample files EVENT__DISABLE_SAMPLES:BOOL=OFF  # If tests should be compiled or not EVENT__DISABLE_TESTS:BOOL=OFF  # Define if libevent should not be compiled with thread support EVENT__DISABLE_THREAD_SUPPORT:BOOL=OFF  # Enables verbose debugging EVENT__ENABLE_VERBOSE_DEBUG:BOOL=OFF  # When crosscompiling forces running a test program that verifies that Kqueue # works with pipes. Note that this requires you to manually run the test program # on the the cross compilation target to verify that it works. See cmake # documentation for try_run for more details EVENT__FORCE_KQUEUE_CHECK:BOOL=OFF  # set EVENT_STAGE_VERSION EVENT__STAGE_VERSION:STRING=beta  More variables can be found by running cmake -LAH <sourcedir_path> CMake (Windows) Install CMake: http://www.cmake.org  $ md build && cd build  $ cmake -G ""Visual Studio 10"" ..   # Or whatever generator you want to use cmake --help for a list.  $ start libevent.sln  CMake (Unix)  $ mkdir build && cd build  $ cmake ..     # Default to Unix Makefiles.  $ make  $ make verify  # (optional)  1. BUILDING AND INSTALLATION (In Depth) Autoconf To build libevent, type  $ ./configure && make  (If you got libevent from the git repository, you will first need to run the included ""autogen.sh"" script in order to generate the configure script.) You can run the regression tests by running  $ make verify  Install as root via  $ make install  Before reporting any problems, please run the regression tests. To enable the low-level tracing build the library as:  $ CFLAGS=-DUSE_DEBUG ./configure [...]  Standard configure flags should work. In particular, see: --disable-shared Only build static libraries --prefix Install all files relative to this directory. The configure script also supports the following flags: --enable-gcc-warnings Enable extra compiler checking with GCC. --disable-malloc-replacement Don't let applications replace our memory management functions --disable-openssl Disable support for OpenSSL encryption. --disable-thread-support Don't support multithreaded environments. CMake (Windows) (Note that autoconf is currently the most mature and supported build enviroment for libevent; the cmake instructions here are new and experimental, though they should be solid. We hope that cmake will still be supported in future versions of Libevent, and will try to make sure that happens.) First of all install http://www.cmake.org. To build libevent using Microsoft Visual studio open the ""Visual Studio Command prompt"" and type: $ cd <libevent source dir> $ mkdir build && cd build $ cmake -G ""Visual Studio 10"" ..   # Or whatever generator you want to use cmake --help for a list. $ start libevent.sln  In the above, the "".."" refers to the dir containing the Libevent source code. You can build multiple versions (with different compile time settings) from the same source tree by creating other build directories. It is highly recommended to build ""out of source"" when using CMake instead of ""in source"" like the normal behaviour of autoconf for this reason. The ""NMake Makefiles"" CMake generator can be used to build entirely via the command line. To get a list of settings available for the project you can type: $ cmake -LH ..  GUI CMake also provides a GUI that lets you specify the source directory and output (binary) directory that the build should be placed in. OpenSSL support To build Libevent with OpenSSL support you will need to have OpenSSL binaries available when building, these can be found here: http://www.openssl.org/related/binaries.html 2. USEFUL LINKS: For the latest released version of Libevent, see the official website at http://libevent.org/ . There's a pretty good work-in-progress manual up at http://www.wangafu.net/~nickm/libevent-book/ . For the latest development versions of Libevent, access our Git repository via $ git clone https://github.com/libevent/libevent.git  You can browse the git repository online at: https://github.com/libevent/Libevent To report bugs, issues, or ask for new features: Patches: https://github.com/libevent/libevent/pulls OK, those are not really patches You fork, modify, and hit the ""Create Pull Request"" button. You can still submit normal git patchs via the mailing list. Bugs, Features [RFC], and Issus: https://github.com/libevent/libevent/issues Or you can do it via the mailing list. There's also a libevent-users mailing list for talking about Libevent use and development: http://archives.seul.org/libevent/users/ 3. ACKNOWLEDGMENTS The following people have helped with suggestions, ideas, code or fixing bugs: Samy Al Bahra Antony Antony Jacob Appelbaum Arno Bakker Weston Andros Adamson William Ahern Ivan Andropov Sergey Avseyev Avi Bab Joachim Bauch Andrey Belobrov Gilad Benjamini Stas Bekman Denis Bilenko Julien Blache Kevin Bowling Tomash Brechko Kelly Brock Ralph Castain Adrian Chadd Lawnstein Chan Shuo Chen Ka-Hing Cheung Andrew Cox Paul Croome George Danchev Andrew Danforth Ed Day Christopher Davis Mike Davis Frank Denis Antony Dovgal Mihai Draghicioiu Alexander Drozdov Mark Ellzey Shie Erlich Leonid Evdokimov Juan Pablo Fernandez Christophe Fillot Mike Frysinger Remi Gacogne Artem Germanov Alexander von Gernler Diego Giagio Artur Grabowski Diwaker Gupta Kuldeep Gupta Sebastian Hahn Dave Hart Greg Hazel Nicholas Heath Michael Herf Sebastian Hahn Savg He Mark Heily Maxime Henrion Michael Herf Greg Hewgill Andrew Hochhaus Aaron Hopkins Tani Hosokawa Jamie Iles Xiuqiang Jiang Claudio Jeker Evan Jones Marcin Juszkiewicz George Kadianakis Makoto Kato Phua Keat Azat Khuzhin Alexander Klauer Kevin Ko Brian Koehmstedt Marko Kreen Ondřej Kuzník Valery Kyholodov Ross Lagerwall Scott Lamb Christopher Layne Adam Langley Graham Leggett Volker Lendecke Philip Lewis Zhou Li David Libenzi Yan Lin Moshe Litvin Simon Liu Mitchell Livingston Hagne Mahre Lubomir Marinov Abilio Marques Nicolas Martyanoff Abel Mathew Nick Mathewson James Mansion Nicholas Marriott Andrey Matveev Caitlin Mercer Dagobert Michelsen Andrea Montefusco Mansour Moufid Mina Naguib Felix Nawothnig Trond Norbye Linus Nordberg Richard Nyberg Jon Oberheide John Ohl Phil Oleson Alexey Ozeritsky Dave Pacheco Derrick Pallas Tassilo von Parseval Catalin Patulea Patrick Pelletier Simon Perreault Dan Petro Pierre Phaneuf Amarin Phaosawasdi Ryan Phillips Dimitre Piskyulev Pavel Plesov Jon Poland Roman Puls Nate R Robert Ransom Balint Reczey Bert JW Regeer Nate Rosenblum Peter Rosin Maseeb Abdul Qadir Wang Qin Alex S Gyepi Sam Hanna Schroeter Ralf Schmitt Mike Smellie Steve Snyder Nir Soffer Dug Song Dongsheng Song Hannes Sowa Joakim Soderberg Joseph Spadavecchia Kevin Springborn Harlan Stenn Andrew Sweeney Ferenc Szalai Brodie Thiesfield Jason Toffaletti Brian Utterback Gisle Vanem Bas Verhoeven Constantine Verutin Colin Watt Zack Weinberg Jardel Weyrich Jay R. Wren Zack Weinberg Mobai Zhang Alejo Alex Taral propanbutan masksqwe mmadia yangacer If we have forgotten your name, please contact us. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libevent/libevent"	"An event notification library. [BSD]"	"true"
"Asynchronous Event Loop"	"libuv"	"https://github.com/libuv/libuv"	"Cross-platform asychronous I/O. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4375"	"379"	"724"	"GitHub - libuv/libuv: Cross-platform asynchronous I/O Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 379 Star 4,375 Fork 724 libuv/libuv Code Issues 63 Pull requests 40 Wiki Pulse Graphs Cross-platform asynchronous I/O http://libuv.org/ 3,551 commits 6 branches 179 releases 231 contributors C 95.2% C++ 1.8% Python 0.8% M4 0.6% Makefile 0.6% Shell 0.4% Other 0.6% C C++ Python M4 Makefile Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: v1.x Switch branches/tags Branches Tags master v0.6 v0.8 v0.10 v1.x wip/uv-object Nothing to show v1.9.1 v1.9.0 v1.8.0 v1.7.5 v1.7.4 v1.7.3 v1.7.2 v1.7.1 v1.7.0 v1.6.1 v1.6.0 v1.5.0 v1.4.2 v1.4.1 v1.4.0 v1.3.0 v1.2.1 v1.2.0 v1.1.0 v1.0.2 v1.0.1 v1.0.0 v1.0.0-rc2 v1.0.0-rc1 v0.11.29 v0.11.28 v0.11.27 v0.11.26 v0.11.25 v0.11.24 v0.11.23 v0.11.22 v0.11.21 v0.11.20 v0.11.19 v0.11.18 v0.11.17 v0.11.16 v0.11.15 v0.11.14 v0.11.13 v0.11.12 v0.11.11 v0.11.10 v0.11.9 v0.11.8 v0.11.7 v0.11.6 v0.11.5 v0.11.4 v0.11.3 v0.11.2 v0.11.1 v0.10.37 v0.10.36 v0.10.35 v0.10.34 v0.10.33 v0.10.32 v0.10.31 v0.10.30 v0.10.29 v0.10.28 v0.10.27 v0.10.26 v0.10.25 v0.10.24 v0.10.23 v0.10.22 v0.10.21 v0.10.20 v0.10.19 v0.10.18 v0.10.17 v0.10.16 v0.10.15 v0.10.14 v0.10.13 v0.10.12 v0.10.11 v0.10.10 v0.10.9 v0.10.8 v0.10.7 v0.10.6 v0.10.5 v0.10.4 v0.10.3 v0.10.2 pubkey-saghul pubkey-iwuzhere pubkey-indutny pubkey-cjihrig pubkey-bnoordhuis node-v0.11.0 node-v0.10.1 node-v0.10.0 node-v0.9.12 node-v0.9.11 node-v0.9.10 Nothing to show New pull request Latest commit 840a8c5 Jun 27, 2016 cjihrig unix,win: make uv_get_process_title() stricter … This commit causes uv_get_process_title() to:  - return EINVAL if the buffer is null or size is 0  - return ENOBUFS if the title is too big for the buffer  - null terminate the buffer on success  Fixes: #315 PR-URL: #928 Reviewed-By: Saúl Ibarra Corretgé <saghul@gmail.com> Permalink Failed to load latest commit information. docs unix,win: make uv_get_process_title() stricter Jul 14, 2016 img img: add logo files Jul 20, 2014 include Now working on version 1.9.2 May 16, 2016 m4 build: remove dtrace probes Nov 10, 2014 samples gyp: qualify `library` variable Feb 5, 2014 src unix,win: make uv_get_process_title() stricter Jul 14, 2016 test unix,win: make uv_get_process_title() stricter Jul 14, 2016 .gitignore gitignore: ignore VS temporary database files May 12, 2016 .mailmap 2016.05.17, Version 1.9.1 (Stable) May 16, 2016 AUTHORS 2016.05.17, Version 1.9.1 (Stable) May 16, 2016 CONTRIBUTING.md doc: update coding style link Jun 13, 2016 ChangeLog Add SHA to ChangeLog May 16, 2016 LICENSE license: add license text we've been using for a while May 28, 2016 MAINTAINERS.md doc: add iWuzHere GPG ID Jun 8, 2016 Makefile.am build: fix build on DragonFly Jun 9, 2016 Makefile.mingw Revert ""win,build: remove unused build defines"" Apr 12, 2016 README.md doc: add licensing information to README May 28, 2016 android-configure build: bump android ndk version Apr 26, 2016 appveyor.yml 2016.05.17, Version 1.9.1 (Stable) May 16, 2016 autogen.sh build: invoke libtoolize with --copy Jan 5, 2016 checksparse.sh unix,win: add uv_get_passwd() Mar 29, 2016 common.gypi build: always compile with -fvisibility=hidden Apr 29, 2016 configure.ac build: check for warnings for -fvisibility=hidden Jun 15, 2016 gyp_uv.py build: python 2.x/3.x consistent print usage Feb 15, 2016 libuv.nsi build: add experimental Windows installer Jul 28, 2015 libuv.pc.in build: add required libraries to libuv.pc.in Mar 2, 2014 uv.gyp test: silence build warnings Jun 3, 2016 vcbuild.bat build,win: rename platform to msbuild_platform May 12, 2016 README.md Overview libuv is a multi-platform support library with a focus on asynchronous I/O. It was primarily developed for use by Node.js, but it's also used by Luvit, Julia, pyuv, and others. Feature highlights Full-featured event loop backed by epoll, kqueue, IOCP, event ports. Asynchronous TCP and UDP sockets Asynchronous DNS resolution Asynchronous file and file system operations File system events ANSI escape code controlled TTY IPC with socket sharing, using Unix domain sockets or named pipes (Windows) Child processes Thread pool Signal handling High resolution clock Threading and synchronization primitives Versioning Starting with version 1.0.0 libuv follows the semantic versioning scheme. The API change and backwards compatibility rules are those indicated by SemVer. libuv will keep a stable ABI across major releases. Licensing libuv is licensed under the MIT license. Check the LICENSE file. Community Mailing list IRC chatroom (#libuv@irc.freenode.org) Documentation Official API documentation Located in the docs/ subdirectory. It uses the Sphinx framework, which makes it possible to build the documentation in multiple formats. Show different supported building options: $ make help  Build documentation as HTML: $ make html  Build documentation as HTML and live reload it when it changes (this requires sphinx-autobuild to be installed and is only supported on Unix): $ make livehtml  Build documentation as man pages: $ make man  Build documentation as ePub: $ make epub  NOTE: Windows users need to use make.bat instead of plain 'make'. Documentation can be browsed online here. The tests and benchmarks also serve as API specification and usage examples. Other resources An Introduction to libuv — An overview of libuv with tutorials. LXJS 2012 talk — High-level introductory talk about libuv. libuv-dox — Documenting types and methods of libuv, mostly by reading uv.h. learnuv — Learn uv for fun and profit, a self guided workshop to libuv. These resources are not handled by libuv maintainers and might be out of date. Please verify it before opening new issues. Downloading libuv can be downloaded either from the GitHub repository or from the downloads site. Starting with libuv 1.7.0, binaries for Windows are also provided. This is to be considered EXPERIMENTAL. Before verifying the git tags or signature files, importing the relevant keys is necessary. Key IDs are listed in the MAINTAINERS file, but are also available as git blob objects for easier use. Importing a key the usual way: $ gpg --keyserver pool.sks-keyservers.net \   --recv-keys AE9BC059  Importing a key from a git blob object: $ git show pubkey-saghul | gpg --import  Verifying releases Git tags are signed with the developer's key, they can be verified as follows: $ git verify-tag v1.6.1  Starting with libuv 1.7.0, the tarballs stored in the downloads site are signed and an accompanying signature file sit alongside each. Once both the release tarball and the signature file are downloaded, the file can be verified as follows: $ gpg --verify libuv-1.7.0.tar.gz.sign  Build Instructions For GCC there are two build methods: via autotools or via GYP. GYP is a meta-build system which can generate MSVS, Makefile, and XCode backends. It is best used for integration into other projects. To build with autotools: $ sh autogen.sh $ ./configure $ make $ make check $ make install  Windows First, Python 2.6 or 2.7 must be installed as it is required by GYP. If python is not in your path, set the environment variable PYTHON to its location. For example: set PYTHON=C:\Python27\python.exe To build with Visual Studio, launch a git shell (e.g. Cmd or PowerShell) and run vcbuild.bat which will checkout the GYP code into build/gyp and generate uv.sln as well as related project files. To have GYP generate build script for another system, checkout GYP into the project tree manually: $ git clone https://chromium.googlesource.com/external/gyp.git build/gyp  Unix For Debug builds (recommended) run: $ ./gyp_uv.py -f make $ make -C out  For Release builds run: $ ./gyp_uv.py -f make $ BUILDTYPE=Release make -C out  Run ./gyp_uv.py -f make -Dtarget_arch=x32 to build x32 binaries. OS X Run: $ ./gyp_uv.py -f xcode $ xcodebuild -ARCHS=""x86_64"" -project uv.xcodeproj \      -configuration Release -target All  Using Homebrew: $ brew install --HEAD libuv  Note to OS X users: Make sure that you specify the architecture you wish to build for in the ""ARCHS"" flag. You can specify more than one by delimiting with a space (e.g. ""x86_64 i386""). Android Run: $ source ./android-configure NDK_PATH gyp $ make -C out  Note for UNIX users: compile your project with -D_LARGEFILE_SOURCE and -D_FILE_OFFSET_BITS=64. GYP builds take care of that automatically. Using Ninja To use ninja for build on ninja supported platforms, run: $ ./gyp_uv.py -f ninja $ ninja -C out/Debug     #for debug build OR $ ninja -C out/Release  Running tests Run: $ ./gyp_uv.py -f make $ make -C out $ ./out/Debug/run-tests  Supported Platforms Microsoft Windows operating systems since Windows XP SP2. It can be built with either Visual Studio or MinGW. Consider using Visual Studio Express 2010 or later if you do not have a full Visual Studio license. Linux using the GCC toolchain. OS X using the GCC or XCode toolchain. Solaris 121 and later using GCC toolchain. AIX 6 and later using GCC toolchain (see notes). AIX Notes AIX support for filesystem events requires the non-default IBM bos.ahafs package to be installed. This package provides the AIX Event Infrastructure that is detected by autoconf. IBM documentation describes the package in more detail. AIX support for filesystem events is not compiled when building with gyp. Patches See the guidelines for contributing. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libuv/libuv"	"Cross-platform asychronous I/O. [BSD]"	"true"
"Audio"	"FMOD"	"http://www.fmod.org/"	"An easy to use crossplatform audio engine and audio content creation tool for games. [Free for non-commercial/Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"FMOD Remember | Register | Lost Password Home Products Sales Services Download Resources Questions & Answers Documentation Videos Training News Contact FMOD Studio is an adaptive audio tool and engine for games — built on top of FMOD, the industry leading cross-platform audio middleware solution that has shipped in over 2,000 games over the past 15 years. Downloads FMOD is available for downloading in full without feature restriction or trial evaluation periods. Click here to go to the Downloads page for the latest version. Education & Videos View information on the official training course for educational users and institutions, as well as in-studio training for FMOD products. Also view the range of videos to help you navigate through FMOD’s latest features. About FMOD Studio Introducing the world’s most sophisticated game audio solution. Open your ears to a new world of creative sound-scapes with enhanced performance and an incredibly polished & efficient workflow.   AudioGaming’s AudioMotors in WRC5 Together with Firelight Technologies, AudioGaming is proud to announce the latest integration of AudioMotors FMOD in the renowned rally racing game WRC5.... FMOD Studio 1.08 released Firelight Technologies announced today the release of FMOD Studio 1.08 and FMOD.io. FMOD Studio now includes FMOD.io. Directly accessible from within... FMOD Studio 1.07 released. Big Projects. ... Firelight Technologies announced today the release of FMOD Studio 1.07 FMOD Studio is more powerful and flexible than ever. This release focuses on... FMOD Studio 1.06 released April 13, 2015 Firelight Technologies announced today the release of FMOD Studio 1.06. The release includes a number of new features, including support...   Sign up for the FMOD newsletter for the latest news! Engine Partners Technology Partners Home Products Sales Download Resources News Contact Copyright Copyright 2016 FIRELIGHT TECHNOLOGIES PTY LTD. All RIGHTS RESERVED."	"null"	"null"	"An easy to use crossplatform audio engine and audio content creation tool for games. [Free for non-commercial/Commercial]"	"true"
"Audio"	"Maximilian"	"https://github.com/micknoise/Maximilian"	"C++ Audio and Music DSP Library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"380"	"67"	"100"	"GitHub - micknoise/Maximilian: C++ Audio and Music DSP Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 380 Fork 100 micknoise/Maximilian Code Issues 8 Pull requests 10 Wiki Pulse Graphs C++ Audio and Music DSP Library http://www.maximilian.strangeloop.co.uk 208 commits 4 branches 0 releases 8 contributors C++ 86.4% C 13.4% Other 0.2% C++ C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags atoms dev fishpolice master Nothing to show Nothing to show New pull request Latest commit ff89198 Mar 4, 2016 micknoise fixing maxiGrains Permalink Failed to load latest commit information. libs fixing maxiGrains Mar 4, 2016 maximilianTest.xcodeproj removing more user-specific xcode files Mar 3, 2016 maximilianTestWindowsVS2015 removing more binaries Oct 2, 2015 maximilian_examples adding fft terminal example Dec 8, 2015 openFrameworks fixing maxiGrains Mar 4, 2016 .gitignore ignore xcode and emacs Feb 26, 2016 README Update README Jan 8, 2015 RtAudio.cpp rtaudio mods Aug 25, 2011 RtAudio.h maximillian basic examples Aug 23, 2011 RtError.h maximillian basic examples Aug 23, 2011 beat2.wav maximillian basic examples Aug 23, 2011 blip.wav fixed the triangle waveform generator. Added some samples to test the… Oct 22, 2011 main.cpp fixing maxiGrains Mar 4, 2016 maximilian.cpp more work for kadenze mooc Sep 22, 2015 maximilian.h more work for kadenze mooc Sep 22, 2015 player.cpp more work for kadenze mooc Sep 22, 2015 player.h maximillian basic examples Aug 23, 2011 portaudio.h maximillian basic examples Aug 23, 2011 snare.wav fixed the triangle waveform generator. Added some samples to test the… Oct 22, 2011 stb_vorbis.c Some initial changes that are long overdue part 1 Jul 26, 2015 stb_vorbis.h ""added ogg vorbis support also did some minor bug fixes for windows a… Apr 7, 2012 README                       .__        .__.__  .__                  _____ _____  ___  __|__| _____ |__|  | |__|____    ____    /     \\__  \ \  \/  /  |/     \|  |  | |  \__  \  /    \  |  Y Y  \/ __ \_>    <|  |  Y Y  \  |  |_|  |/ __ \|   |  \ |__|_|  (____  /__/\_ \__|__|_|  /__|____/__(____  /___|  /       \/     \/      \/        \/                \/     \/   ::::::::::::::::::::::::::What's Maximilian?  Maximilian is an audio synthesis and signal processing library written in C++. It's cross-platform compatible with MacOS, Windows, Linux and IOS systems.  The main features are:  - sample playback, recording and looping - read from WAV and OGG files. - a selection of oscillators and filters - enveloping - multichannel mixing for 1, 2, 4 and 8 channel setups - controller mapping functions - effects including delay, distortion, chorus, flanging - granular synthesis, including time and pitch stretching - atom synthesis - realtime music information retrieval functions: spectrum analysis, spectral features, octave analysis, Bark scale analysis, and MFCCs - example projects for Windows and MacOS, using command line and OpenFrameworks environments   :::::::::::::::::::::::::::BASIC EXAMPLES  You can choose between using RTAudio and PortAudio drivers in player.h by uncommenting the appropriate line.  To use PortAudio, you will need to compile the portAudio library from http://http://www.portaudio.com/ and link it with your executable.  Examples demonstrating different features can be found in the maximilian_examples folder.  To try them, replace the contents of main.cpp with the contents of a tutorial file and compile.   :::MAC OSX XCODE PROJECT  You can run the examples using the 'maximilianTest' XCode 3 project provided.   ::WINDOWS VISUAL STUDIO 2010 PROJECT  This is in the maximilianTestWindowsVS2010 folder. You will need to install the DirectX SDK, so that the program can use DirectSound.   :::COMMAND LINE COMPILATION IN MACOSX  > g++ -Wall -D__MACOSX_CORE__ -o maximilian main.cpp RtAudio.cpp player.cpp maximilian.cpp -framework CoreAudio -lpthread  > ./maximilian   ::COMMAND LINE COMPILATION IN LINUX  With OSS: > g++ -Wall -D__LINUX_OSS__ -o maximilian main.cpp RtAudio.cpp player.cpp maximilian.cpp -lpthread  With ALSA: > g++ -Wall -D__LINUX_ALSA__ -o maximilian main.cpp RtAudio.cpp player.cpp maximilian.cpp -lasound -lpthread  With Jack: > g++ -Wall -D__UNIX_JACK__ -o maximilian main.cpp RtAudio.cpp player.cpp maximilian.cpp `pkg-config --cflags --libs jack` -lpthread  then: > ./maximilian    :::::::::::::::::::::::::::OPENFRAMEWORKS  Maximilian works well with the OpenFrameworks C++ creative coding toolkit (http://www.openframeworks.cc).  In the ofxMaxim directory you will find examples to run in Windows, OSX and iOS, including FFT analysis and granular synthesis.    You can install the ofxMaxim addon by copying the ofxMaxim/ofxMaxim folder into your openframeworks addons directory.  Important: when using Maximilian on OSX, link against the Accelerate framework.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/micknoise/Maximilian"	"C++ Audio and Music DSP Library. [MIT]"	"true"
"Audio"	"OpenAL"	"http://www.openal.org/"	"Open Audio Library - A crossplatform audio API. [BSD/LGPL/Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"5"	"2"	"GitHub - TimeDoctor/openal-website Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 5 Fork 2 TimeDoctor/openal-website Code Issues 0 Pull requests 0 Pulse Graphs http://openal.org 18 commits 1 branch 0 releases Fetching contributors Perl 73.7% PHP 24.8% CSS 1.2% JavaScript 0.3% Perl PHP CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f2839c7 Sep 25, 2015 TimeDoctor Fix header link to homepage. Permalink Failed to load latest commit information. alextreg None of this is going to wrok Sep 24, 2015 css krushing some kode Jul 25, 2015 documentation Added the OpenAL Programmers Guide Sep 24, 2015 downloads why not zoidberg? Jul 24, 2015 games Removed a bunch of broken links and fixed a few Sep 2, 2015 js complete rewrite based on a different design that actually works? Jul 24, 2015 links krushing some kode Jul 26, 2015 mailing_lists commit all the things Jul 24, 2015 platforms words Aug 2, 2015 AdobeStock_76467781.jpg initial commit Jun 29, 2015 README.md krushing some kode Jul 26, 2015 body.php krushing some kode Jul 26, 2015 footer.php krushing some kode Jul 26, 2015 header.php Fix header link to homepage. Sep 25, 2015 index.php initial commit Jun 29, 2015 openalheader.jpg complete rewrite based on a different design that actually works? Jul 24, 2015 README.md This is the website for openal.org. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TimeDoctor/openal-website"	"Open Audio Library - A crossplatform audio API. [BSD/LGPL/Commercial]"	"true"
"Audio"	"Opus"	"http://opus-codec.org/"	"A totally open, royalty-free, highly versatile audio codec. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Opus Codec Home Downloads Documentation Presentations Development Comparison Examples Opus FAQ License Contact Opus Interactive Audio Codec Overview Opus is a totally open, royalty-free, highly versatile audio codec. Opus is unmatched for interactive speech and music transmission over the Internet, but is also intended for storage and streaming applications. It is standardized by the Internet Engineering Task Force (IETF) as RFC 6716 which incorporated technology from Skype's SILK codec and Xiph.Org's CELT codec. Technology Opus can handle a wide range of audio applications, including Voice over IP, videoconferencing, in-game chat, and even remote live music performances. It can scale from low bitrate narrowband speech to very high quality stereo music. Supported features are: Bitrates from 6 kb/s to 510 kb/s Sampling rates from 8 kHz (narrowband) to 48 kHz (fullband) Frame sizes from 2.5 ms to 60 ms Support for both constant bitrate (CBR) and variable bitrate (VBR) Audio bandwidth from narrowband to fullband Support for speech and music Support for mono and stereo Support for up to 255 channels (multistream frames) Dynamically adjustable bitrate, audio bandwidth, and frame size Good loss robustness and packet loss concealment (PLC) Floating point and fixed-point implementation You can read the full specification, including the reference implementation, in RFC 6716. An up-to-date implementation of the Opus standard is also available from the downloads page. News Version 1.1.3 released 15 July, 2016 This Opus 1.1.3 release focuses mainly on optimizations and bug fixes. Changes include: Neon optimizations improving performance on ARMv7 and ARMv8 by up to 15% Fixes some issues with 16-bit platforms (e.g. TI C55x) Fixes to comfort noise generation (CNG) Documenting that PLC packets can also be 2 bytes Includes experimental ambisonics work (--enable-ambisonics) The code is available from the downloads page. Version 1.1.2 released 12 January, 2016 This Opus 1.1.2 release fixes two bugs: Resetting the encoder or decoder state with OPUS_RESET_STATE would disable some run-time selected architecture-specific optimizations; and In hybrid mode discontinuous transmission (DTX) operation, the comfort noise above 8 kHz was incorrectly estimated and could oscillate in time. None of these bugs were regressions over previous releases. The code is available from the downloads page. Version 1.1.1 released 26 November, 2015 This Opus 1.1.1 release brings many optimizations to the encoder and decoder, including: x86 SSE, SSE2 and SSE4.1 intrinsics optimizations with run-time CPU detection contributed by Cisco Systems, MIPS intrinsics optimizations contributed by Imagination Technologies, ARM Neon optimizations contributed by Linaro and ARM, many architecture-independent optimizations and memory footprint reductions that should improve performance on all platforms, and several minor bug fixes. The quality of the encoder should be mostly unchanged compared to version 1.1. The code is available from the downloads page. Older News Copyright © 2011-2014. This website is licensed under a Creative Commons Attribution 3.0 Unported License."	"null"	"null"	"A totally open, royalty-free, highly versatile audio codec. [BSD]"	"true"
"Audio"	"SELA"	"https://github.com/sahaRatul/sela"	"SimplE Lossless Audio. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"178"	"15"	"14"	"GitHub - sahaRatul/sela: SimplE Lossless Audio Skip to content Personal Open source Business Explore Start building Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 178 Fork 14 sahaRatul/sela Code Issues 2 Pull requests 0 Pulse Graphs SimplE Lossless Audio 181 commits 2 branches 3 releases Fetching contributors C 68.0% Arduino 27.1% Makefile 2.4% Matlab 2.2% M 0.3% C Arduino Makefile Matlab M Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: latest Switch branches/tags Branches Tags latest master Nothing to show v0.1.2-alpha v0.1.1-alpha v0.1-alpha Nothing to show New pull request Latest commit bff43ee Mar 30, 2016 sahaRatul Arduino encoder Permalink Failed to load latest commit information. arduino Arduino encoder Mar 30, 2016 core Better metadata handling Dec 30, 2015 include Better metadata handling Dec 30, 2015 player Better metadata handling Dec 30, 2015 tests Better metadata handling Dec 30, 2015 utils Fixed wavdiff Dec 27, 2015 .gitignore Updated .gitignore Dec 27, 2015 LICENSE commit Jul 31, 2015 Makefile Slight changes Dec 30, 2015 README.md Updated with more references Dec 28, 2015 TODO.txt Added TODO Nov 20, 2015 README.md SELA SimplE Lossless Audio A simplified lossless audio codec written for my ongoing project. Block Diagrams Main Components Linear prediction filter (core/lpc.c) Golomb-Rice compressor and decompressor (core/rice.c) apev2 metadata reader/writer (apev2.c) Encoder (core/encoder.c) Decoder (core/decoder.c) Command line player (player/selaplay.c) Matlab implementation of Linear prediction filter can be found in 'tests/matlab-tests' folder Build requirements gcc (You can use clang if you modify the CC variable in the Makefile) GNU make Standard math library for building the encoder and decoder. POSIX threading and pulseaudio/libao developement libraries for building the command line player. Note : On Windows you will need cygwin to build the command line player. Otherwise MinGW is sufficient. Build instructions cd to the directory type make all to build the encoder & decoder type make selaplay_ao or make selaplay_pulse to build the player using either libao/pulseaudio libraries type make lpctest && make ricetest && make apev2test to build the tests type make wavdiff to build the diff utility for .wav files References Linear Prediction Wikipedia Digital Signal Processing by John G. Proakis & Dimitris G. Monolakis A detailed pdf Golomb-Rice lossless compression algorithm Wikipedia Here is an implementation FLAC overview Paper on shorten, the original open source lossless codec ISO/IEC 14496 Part 3, Subpart 11 (Audio Lossless Coding) License : MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sahaRatul/sela"	"SimplE Lossless Audio. [MIT]"	"true"
"Audio"	"Speex"	"http://www.speex.org/"	"A free codec for free speech. Obsoleted by Opus. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Speex: a free codec for free speech Xiph.org Opus FLAC Icecast Vorbis Daala Theora Speex XSPF —The Speex codec has been obsoleted by Opus. It will continue to be available, but since Opus is better than Speex in all aspects, users are encouraged to switch— Home News Comparison Samples Downloads Documentation Roadmap Plugins & Software Contact Speex: A Free Codec For Free Speech Overview Speex is an Open Source/Free Software patent-free audio compression format designed for speech. The Speex Project aims to lower the barrier of entry for voice applications by providing a free alternative to expensive proprietary speech codecs. Moreover, Speex is well-adapted to Internet applications and provides useful features that are not present in most other codecs. Finally, Speex is part of the GNU Project and is available under the revised BSD license. The Technology Speex is based on CELP and is designed to compress voice at bitrates ranging from 2 to 44 kbps. Some of Speex's features include: Narrowband (8 kHz), wideband (16 kHz), and ultra-wideband (32 kHz) compression in the same bitstream Intensity stereo encoding Packet loss concealment Variable bitrate operation (VBR) Voice Activity Detection (VAD) Discontinuous Transmission (DTX) Fixed-point port Acoustic echo canceller Noise suppression Note that Speex has a number of features that are not present in other codecs, such as intensity stereo encoding, integration of multiple sampling rates in the same bitstream (embedded coding), and a VBR mode; see our comparison page for more. Getting Involved One of the simplest things you can do to get involved in Speex is by using it in your application; Speex is well-suited to handle VoIP, internet audio streaming, data archival (like voice mail), and audio books. Currently, LinPhone, Ekiga, and Asterisk are some of the projects currently using Speex. For a list of projects with Speex support, visit our Plugins & Software page. If you have questions or are interested in contributing to the project, have a look at our roadmap, join our mailing list, or send us money so we can keep working on Speex. You can also contact the Project Lead, Jean-Marc Valin (though the mailing is usually the best place to ask questions). Headlines SpeexDSP 1.2rc3 is out January 3, 2015 This brown-paper-bag release adds two headers that should have been included with SpeexDSP 1.2rc2. These are needed to build the resampler with NEON optimizations and to build SpeexDSP without the Speex codec library. Speex 1.2rc2 and SpeexDSP 1.2rc2 are out December 6, 2014 This release splits the speex codec library and the speex DSP library into separate source trees. Both projects received build-system improvements, bugfixes, and cleanup. The speex codec's VBR tuning was improved, while the speexdsp resampler got some NEON optimizations. Speex 1.2rc1 is out July 23, 2008 This release adds support for acoustic echo cancellation with multiple microphones and multiple loudspeakers. It also adds an API to decorrelate loudspeaker signals to improve multi-channel performance. In the bugfix department, there are fixes for a few bugs in the echo canceller, jitter buffer and preprocessor. At this point, the API for 1.2 should be stable and only a few very minor additions are planned. Speex 1.2beta3 is out December 11, 2007 The most obvious change in this release is that all the non-codec components (preprocessor, echo cancellation, jitter buffer) have been moved to a new libspeexdsp library. Other changes include a new jitter buffer algorithm and resampler improvements/fixes. This is also the first release where libspeex can be built without any floating point support. To do this, the float compatibility API must be disabled (--disable-float-api or DISABLE_FLOAT_API) and the VBR feature must be disabled (--disable-vbr or DISABLE_VBR). The Xiph OSC and the Speex Parrot logos are trademarks (™) of Xiph.Org. These pages © 1994–2006 Xiph.Org. All rights reserved. Last Modified: ""> Validate XHTML and CSS"	"null"	"null"	"A free codec for free speech. Obsoleted by Opus. [BSD]"	"true"
"Audio"	"Tonic"	"https://github.com/TonicAudio/Tonic"	"Easy and efficient audio synthesis in C++. [Unlicense]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"247"	"35"	"45"	"GitHub - TonicAudio/Tonic: Easy and efficient audio synthesis in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 247 Fork 45 TonicAudio/Tonic Code Issues 47 Pull requests 6 Wiki Pulse Graphs Easy and efficient audio synthesis in C++ 684 commits 6 branches 0 releases Fetching contributors C++ 95.1% Objective-C 3.3% Other 1.6% C++ Objective-C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags MP-ControlSwitcherAdvanceTrigger MP-Thicket MP-massive-commit-backlog development master windows_file_read Nothing to show Nothing to show New pull request Latest commit ff84448 Oct 16, 2015 morganpackard Merge pull request #268 from son0p/master … Add backticks for build to UNIX_JACK. #267 Permalink Failed to load latest commit information. Tests Directory reorganization, universal build target for static lib project Apr 14, 2013 examples Add backticks for build to UNIX_JACK. #267 Oct 3, 2015 extensions Rename demo and extension directories, remove oF demos since there's … Oct 20, 2013 lib [HOTFIX] added arm64 to list of valid architectures for TonicLib ios … Nov 7, 2014 src Fix implicit precision conversion warnings Nov 7, 2014 .gitignore Add Mavericks .idea files to gitignore Mar 21, 2014 LICENSE.txt Update LICENSE to the unlicense Jun 11, 2014 README.md Update README.md Apr 16, 2014 README.md Tonic Fast and easy audio synthesis in C++. Prefer coding to patching? Love clean syntax? Care about performance? That's how we feel too, and why we made Tonic. //Tonic is a collection of signal generators and processors TriangleWave tone1 = TriangleWave(); SineWave tone2 = SineWave(); SineWave vibrato = SineWave().freq(10); SineWave tremelo = SineWave().freq(1);  //that you can combine using intuitive operators Generator combinedSignal = (tone1 + tone2) * tremelo;  //and plug in to one another float baseFreq = 200; tone1.freq(baseFreq + vibrato * 10); tone2.freq(baseFreq * 2 + vibrato * 20); Here look. With Tonic you can create an awesome synthesizer with just a couple lines of code. ControlXYSpeed speed = ControlXYSpeed().x(addParameter(""x"")).y(addParameter(""y""));     outputGen = RectWave().freq(100).pwm( 0.1 + (SineWave().freq(0.1) + 1) * 0.1) * SineWave().freq(1) >> LPF12().cutoff(100 + 600 * speed); This code creates a rectangle wave oscillator, modulates the timbre of that oscillator by a sine wave, adds some slow tremelo, and sends it through a filter. On top of all that, it maps mouse speed to the cutoff frequency. You can browse more synth examples here Example Projects Tonic comes with several example projects, found in the ""examples"" directory. We plan to add more demo projects for Windows and Linux in the future. Several example synth patches in Demo Synths Standalone example using RTAudio for building a non-interactive synth patch that runs from the command line iOS example for making synths on your iPhone/iPad. See ofxTonic for examples in openFrameworks. Development If you are interested in contributing to Tonic, please visit our Wiki and read the guidelines. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TonicAudio/Tonic"	"Easy and efficient audio synthesis in C++. [Unlicense]"	"true"
"Audio"	"Vorbis"	"http://xiph.org/vorbis/"	"Ogg Vorbis is a fully open, non-proprietary, patent-and-royalty-free, general-purpose compressed audio format. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Xiph.org Xiph.org Opus FLAC Icecast Vorbis Daala Theora Speex XSPF About Press Donate Contact Wiki Downloads Bugs Documentation Videos Resources by Project Vorbis audio compression Ogg Vorbis is a fully open, non-proprietary, patent-and-royalty-free, general-purpose compressed audio format for mid to high quality (8kHz-48.0kHz, 16+ bit, polyphonic) audio and music at fixed and variable bitrates from 16 to 128 kbps/channel. This places Vorbis in the same competitive class as audio representations such as MPEG-4 (AAC), and similar to, but higher performance than MPEG-1/2 audio layer 3, MPEG-4 audio (TwinVQ), WMA and PAC. The bitstream format for Vorbis I was frozen Monday, May 8th 2000. All bitstreams encoded since will remain compatible with all future releases of Vorbis. Resources Visit Vorbis.com to get set up to use vorbis, find music, and more. Frequently Asked Questions A format specification and related documentation are available on this site. The libvorbis reference implementation provides both a standard encoder and decoder under a BSD license. [Source download] [Git master] The Tremor reference decoder provides an integer-only implementation of the decoder for embedded devices [Git master] [low-memory branch] The Xiph Fish Logo and the Vorbis.com many-fish logos are trademarks (™) of Xiph.Org. These pages © 1994 - 2016 Xiph.Org. All rights reserved."	"null"	"null"	"Ogg Vorbis is a fully open, non-proprietary, patent-and-royalty-free, general-purpose compressed audio format. [BSD]"	"true"
"Biology"	"libsequence"	"http://molpopgen.github.io/libsequence/"	"A C++ library for representing and analyzing population genetics data. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The libsequence home page This is the homepage for libsequence, which is a C++ library for evolutionary genetics. Versions The current “master” branch of the library is 1.8.3. This version represents a major change to the code base. The biggest change is that the library no longer requires boost or the GSL libraries. It still requires zlib. See the Revision History section in the README, which you can find at the GitHub repo for the project. Source code The library code is here Library documentation Reference manual Programs using the library There are lots of these: Thornton lab software page Kevin Thornton’s GitHub account Thornton lab GitHub account Some specific project using the library fwdpp - Forward simulation library described in Thornton (2014, doi: 10.1534/genetics.114.165019) pecnv - code from Rogers et al. (2014, doi: 10.1093/molbev/msu124) and Cridland et al (2013, doi: 10.1093/molbev/mst129) for detecting structural variants and transposable element insertions baldwin_brown_2014 - Code from Baldwin-Brown et al. (2014, doi: 10.1093/molbev/msu048) for simulating “evolve and resequence” experiments analysis sequtils msstats sweepsims - selective sweep code from Jensen et al. (2008, doi: 10.1371/journal.pgen.1000198), Thornton and Jensen 2007, doi: 10.1534/genetics.106.064642) newgene - copy-number variant simulation code from Thornton (2007, doi: 10.1534/genetics.107.074948) Citation If you use libsequence for yor research, or programs depending up on it, please cite the following paper: Thornton, K. (2003) libsequence, a C++ class library for evolutionary genetic analysis. Bioinformatics 19(17): 2325-2327 PMID 14630667 Manuscript, Software"	"null"	"null"	"A C++ library for representing and analyzing population genetics data. [GPL]"	"true"
"Biology"	"SeqAn"	"http://www.seqan.de/"	"Algorithms and data structures for the analysis of sequences with the focus on biological data. [BSD/3-clause]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"151"	"34"	"77"	"GitHub - seqan/seqan: SeqAn's official repository. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 151 Fork 77 seqan/seqan Code Issues 134 Pull requests 10 Wiki Pulse Graphs SeqAn's official repository. http://www.seqan.de 7,169 commits 2 branches 19 releases 28 contributors C++ 63.9% POV-Ray SDL 22.8% Python 3.4% HTML 3.3% CSS 1.4% Groff 1.4% Other 3.8% C++ POV-Ray SDL Python HTML CSS Groff Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show yara-v0.9.6 yara-v0.9.5 yara-v0.9.4 yara-v0.9.3 yara-v0.9.2 yara-v0.9.1 yara-v0.9.0 yara-v0.8.1 seqan-v2.2.0 seqan-v2.1.1 seqan-v2.1.0 seqan-v2.0.2 seqan-v2.0.1 seqan-v2.0.0 seqan-v2.0.0-rc1 seqan-v1.4.2 sak-v0.2.0 masai-v0.7.2 gustaf-v1.0.0 Nothing to show New pull request Latest commit 8b3e168 Jul 13, 2016 h-2 committed on GitHub Merge pull request #1808 from seqan/develop … merge develop into master [begin of 2.2.x cycle] Permalink Failed to load latest commit information. apps [NOP] bump app version numbers Jul 13, 2016 demos [INTERNAL] Use _unlink instead of unlink with STDLIB_VS Jun 28, 2016 dox change links to tutorial pages in dox May 30, 2016 include/seqan [NOP] bump seqan version number Jul 13, 2016 manual [FIX] Update ftp link for win contribs to latest package. Jul 11, 2016 tests [FIX, TEST] Intel: division by 0 fixed, removed unnecessary tests Jul 11, 2016 util [FIX] py_lib_dox test. Jul 12, 2016 .gitattributes [FEATURE] merged latest develop into stream branch Sep 19, 2014 .gitignore [INTERNAL] Updated .gitignore Feb 9, 2015 .travis.yml [FIX] Enable nosetests on travis. Jul 12, 2016 CHANGELOG.rst [DOC] Updated Changelog to make h-2 happy :) Jul 12, 2016 CMakeLists.txt [INTERNAL] Add support for AVX2 optimizations. Jun 29, 2016 CONTRIBUTING.rst [DOC] add CONTRIBUTING.rst May 30, 2016 LICENSE [COMMENT] updated copyright year Feb 15, 2016 README.rst Add Intel UNIX compiler Jul 12, 2016 README.rst SeqAn - The Library for Sequence Analysis What Is SeqAn? SeqAn is an open source C++ library of efficient algorithms and data structures for the analysis of sequences with the focus on biological data. Our library applies a unique generic design that guarantees high performance, generality, extensibility, and integration with other libraries. SeqAn is easy to use and simplifies the development of new software tools with a minimal loss of performance. License The SeqAn library itself, the tests and demos are licensed under the very permissing 3-clause BSD License. The licenses for the applications themselves can be found in the LICENSE files. Prerequisites Linux, Mac OSX, FreeBSD: GCC ≥ 4.9 Clang/LLVM ≥ 3.5 Intel Compiler ≥ 16.0.2 Windows: Visual C++ ≥ 14.0 / Visual Studio ≥ 2015 Intel Compiler ≥ 16.0.3 / Visual Studio ≥ 2015u2 Clang/C2 ≥ 3.8.0 / Visual Studio ≥ 2015u3 [experimental, requires CMake ≥ 3.6] We test on 32-bit and 64-bit Intel/AMD architectures, although we highly recommend 64-bit platforms. To build tests, demos, and official SeqAn applications you also need: CMake ≥ 3.0 (http://cmake.org/) Some of the official applications might have additional requirements or work only on a subset of platforms. Documentation Resources Getting Started Manual Tutorial How-Tos API Documentation (stable) Contact Mailing List GitHub Project (issues, source code) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/seqan/seqan"	"Algorithms and data structures for the analysis of sequences with the focus on biological data. [BSD/3-clause]"	"true"
"Biology"	"Vcflib"	"https://github.com/ekg/vcflib"	"A C++ library for parsing and manipulating VCF files. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"157"	"38"	"80"	"GitHub - vcflib/vcflib: a simple C++ library for parsing and manipulating VCF files, + many command-line utilities Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 157 Fork 80 vcflib/vcflib Code Issues 70 Pull requests 11 Pulse Graphs a simple C++ library for parsing and manipulating VCF files, + many command-line utilities https://github.com/vcflib/vcflib#vcflib 638 commits 3 branches 2 releases 21 contributors C++ 88.6% TeX 3.0% C 2.9% R 2.9% Perl 1.0% Shell 0.6% Other 1.0% C++ TeX C R Perl Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master revert-127-master revert-128-revert-127-master Nothing to show v1.0.0-rc1 v1.0.0-rc0 Nothing to show New pull request Latest commit e3ab177 Jun 14, 2016 Zev N. Kronenberg fixed bug in segment Fst Permalink Failed to load latest commit information. 1KG_Index updates for Phase3 1kG processing Oct 15, 2014 examples adding example Feb 2, 2016 fastahack @ c68cebb updated fastahack Oct 1, 2013 filevercmp @ 1a9b779 cleanup .gitignore in submodules Nov 19, 2014 fsom @ a6ef318 cleanup .gitignore in submodules Nov 19, 2014 googletest @ d225acc google test now building Mar 28, 2016 intervaltree @ b704f19 update interval tree version Dec 12, 2014 logos png logo May 2, 2014 multichoose @ 73d35da updated multichoose Jul 5, 2011 paper slight change to abstract Apr 1, 2016 samples Missing fields in genotypes are now backfilled in Variant.h. This fixes Mar 29, 2016 scripts adds bgziptabix convenience script May 2, 2016 smithwaterman @ 84c08d7 sync back to ekg/smithwaterman Nov 16, 2015 src fixed bug in segment Fst Jun 14, 2016 tabixpp @ 80012f8 updates tabixpp May 18, 2016 test removed ~ backup files Apr 1, 2016 .gitignore Added one line hack to put libvcflib in lib folder. Should be properl… Nov 4, 2015 .gitmodules google test now building Mar 28, 2016 .travis.yml rollback travis file Mar 30, 2016 LICENSE added MIT license Aug 1, 2012 Makefile fixes #154 Jun 6, 2016 README.md Update README.md Mar 30, 2016 README.md vcflib A C++ library for parsing and manipulating VCF files. author: Erik Garrison erik.garrison@bc.edu license: MIT overview The Variant Call Format (VCF) is a flat-file, tab-delimited textual format intended to concisely describe reference-indexed variations between individuals. VCF provides a common interchange format for the description of variation in individuals and populations of samples, and has become the defacto standard reporting format for a wide array of genomic variant detectors. vcflib provides methods to manipulate and interpret sequence variation as it can be described by VCF. It is both: an API for parsing and operating on records of genomic variation as it can be described by the VCF format, and a collection of command-line utilities for executing complex manipulations on VCF files. The API itself provides a quick and extremely permissive method to read and write VCF files. Extensions and applications of the library provided in the included utilities (*.cpp) comprise the vast bulk of the library's utility for most users. download and install Under the repository name, click to copy the clone URL for the repository. Go to the location where you want the cloned directory to be made: cd <PathWhereIWantToCloneVcflib> Type git clone --recursive, and then paste the URL you copied in Step 1. Enter the cloned directory and type make to compile the programs. If you want to use threading type make openmp instead of make. Only a few VCFLIB tools are threaded. Once make is finished the executables are ready in the folder <PathWhereIWantToCloneVcflib>/vcflib/bin/. Set this path as an environment variable in the .bashrc file to access executables form everywhere on your proile OR call the executables from the path where they are. usage vcflib provides a variety of functions for VCF manipulation: comparison Generate haplotype-aware intersections (vcfintersect -i), unions (vcfintersect -u), and complements (vcfintersect -v -i). Overlay-merge multiple VCF files together, using provided order as precedence (vcfoverlay). Combine multiple VCF files together, handling samples when alternate allele descriptions are identical (vcfcombine). Validate the integrity and identity of the VCF by verifying that the VCF record's REF matches a given reference file (vcfcheck). format conversion Convert a VCF file into a per-allele or per-genotype tab-separated (.tsv) file (vcf2tsv). Store a VCF file in an SQLite3 database (vcf2sqlite.py). Make a BED file from the intervals in a VCF file (vcf2bed.py). filtering and subsetting Filter variants and genotypes using arbitrary expressions based on values in the INFO and sample fields (vcffilter). Randomly sample a subset of records from a VCF file, given a rate (vcfrandomsample). Select variants of a certain type (vcfsnps, vcfbiallelic, vcfindels, vcfcomplex, etc.) annotation Annotate one VCF file with fields from the INFO column of another, based on position (vcfaddinfo, vcfintersect). Incorporate annotations or targets provided by a BED file (vcfannotate, vcfintersect). Examine genotype correspondence between two VCF files by annotating samples in one file with genotypes from another (vcfannotategenotypes). Annotate variants with the distance to the nearest variant (vcfdistance). Count the number of alternate alleles represented in samples at each variant record (vcfaltcount). Subset INFO fields to decrease file size and processing time (vcfkeepinfo). Lighten up VCF files by keeping only a subset of per-sample information (vcfkeepgeno). Numerically index alleles in a VCF file (vcfindex). samples Quickly obtain the list of samples in a given VCF file (vcfsamplenames). Remove samples from a VCF file (vcfkeepsamples, vcfremovesamples). ordering Sort variants by genome coordinate (vcfstreamsort). Remove duplicate variants in vcfstreamsort'ed files according to their REF and ALT fields (vcfuniq). variant representation Break multiallelic records into multiple records (vcfbreakmulti), retaining allele-specific INFO fields. Combine overlapping biallelic records into a single record (vcfcreatemulti). Decompose complex variants into a canonical SNP and indel representation (vcfallelicprimitives), generating phased genotypes for available samples. Reconstitute complex variants provided a phased VCF with samples (vcfgeno2haplo). Left-align indel and complex variants (vcfleftalign). genotype manipulation Set genotypes in a VCF file provided genotype likelihoods in the GL field (vcfglxgt). Establish putative somatic variants using reported differences between germline and somatic samples (vcfsamplediff). Remove samples for which the reported genotype (GT) and observation counts disagree (AO, RO) (vcfremoveaberrantgenotypes). interpretation and classification of variants Obtain aggregate statistics about VCF files (vcfstats). Print the receiver-operating characteristic (ROC) of one VCF given a truth set (vcfroc). Annotate VCF records with the Shannon entropy of flanking sequence (vcfentropy). Calculate the heterozygosity rate (vcfhetcount). Generate potential primers from VCF records (vcfprimers), to check for genome uniqueness. Convert the numerical represenation of genotypes provided by the GT field to a human-readable genotype format (vcfgenotypes). Observe how different alignment parameters, including context and entropy-dependent ones, influence variant classification and interpretation (vcfremap). Classify variants by annotations in the INFO field using a self-organizing map (vcfsom); re-estimate their quality given known variants. A number of ""helper"" perl and python scripts (e.g. vcf2bed.py, vcfbiallelic) further extend functionality. In practice, users are encouraged to drive the utilities in the library in a streaming fashion, using pipes, to fully utilize resources on multi-core systems during interactive work. Piping provides a convenient method to interface with other libraries (vcf-tools, BedTools, GATK, htslib, bcftools, freebayes) which interface via VCF files, allowing the composition of an immense variety of processing functions. development See src/vcfecho.cpp for basic usage. src/Variant.h and src/Variant.cpp describe methods available in the API. vcflib is incorporated into several projects, such as freebayes, which may provide a point of reference for prospective developers. Additionally, developers should be aware of that vcflib contains submodules (git repositories) comprising its dependencies (outside of lzib and a *nix environment). installing vcflib includes submodules, so to obtain vcflib you have to use: % git clone --recursive git://github.com/ekg/vcflib.git  or % git clone --recursive https://github.com/ekg/vcflib.git  To build, use Make: % cd vcflib % make  Executables are built into the ./bin directory in the repository. A number of shell, perl, python, and R scripts already reside there. This makes installation easy, as users can add vcflib/bin to their path, or copy the contained executables to a directory already in their path. executables vcf2tsv usage: vcf2tsv [-n null_string] [-g] [vcf file] Converts stdin or given VCF file to tab-delimited format, using null string to replace empty values in the table. Specifying -g will output one line per sample with genotype information.  vcfaddinfo usage: vcfaddinfo <vcf file> <vcf file> Adds info fields from the second file which are not present in the first vcf file.  vcfafpath Uses allele frequencies in the AF info column to estimate phylogeny at multiallelic sites. vcfallelicprimitives usage: vcfallelicprimitives [options] [file]  options:     -m, --use-mnps          Retain MNPs as separate events (default: false)     -t, --tag-parsed FLAG   Tag records which are split apart of a complex allele                             with this flag  If multiple alleleic primitives (gaps or mismatches) are specified in a single VCF record, split the record into multiple lines, but drop all INFO fields.  ""Pure"" MNPs are split into multiple SNPs unless the -m flag is provided.  Genotypes are phased where complex alleles have been decomposed, provided genotypes in the input.  vcfaltcount Counts the number of alternate alleles in the record. vcfannotate usage: vcfannotate [options] [<vcf file>]  options:     -b, --bed   use annotations provided by this BED file     -k, --key   use this INFO field key for the annotations     -d, --default  use this INFO field key for records without annotations  Intersect the records in the VCF file with targets provided in a BED file. Intersections are done on the reference sequences in the VCF file. If no VCF filename is specified on the command line (last argument) the VCF read from stdin.  vcfannotategenotypes usage: vcfannotategenotypes <annotation-tag> <vcf file> <vcf file>  annotates genotypes in the first file with genotypes in the second adding the genotype as another flag to each sample filed in the first file. annotation-tag is the name of the sample flag which is added to store the annotation.  also adds a 'has\_variant' flag for sites where the second file has a variant.  vcfbreakmulti usage: vcfbreakmulti [options] [file]  If multiple alleles are specified in a single record, break the record into multiple lines, preserving allele-specific INFO fields.  vcfcheck usage: vcfcheck [options] <vcf file>  options: -f, --fasta-reference  FASTA reference file to use to obtain                                 primer sequences  Verifies that the VCF REF field matches the reference as described.  vcfcleancomplex Removes reference-matching sequence from complex alleles and adjusts records to reflect positional change. vcfcombine usage: vcfcombine [vcf file] [vcf file] ...  options:     -h --help           This text.     -r --region REGION  A region specifier of the form chrN:x-y to bound the merge  Combines VCF files positionally, combining samples when sites and alleles are identical. Any number of VCF files may be combined. The INFO field and other columns are taken from one of the files which are combined when records in multiple files match. Alleles must have identical ordering to be combined into one record. If they do not, multiple records will be emitted. vcfcommonsamples usage: vcfcommonsamples <vcf file> <vcf file> outputs each record in the first file, removing samples not present in the second  vcfcountalleles Counts the total number of alleles in the input. vcfcreatemulti If overlapping alleles are represented across multiple records, merge them into a single record. vcfdistance Adds a value to each VCF record indicating the distance to the nearest variant in the file. vcfentropy usage: vcfentropy [options] <vcf file>  options: -f, --fasta-reference  FASTA reference file to use to obtain  primer sequences -w, --window-size Size of the window over which to calculate entropy Anotates the output VCF file with, for each record, EntropyLeft,  EntropyRight, EntropyCenter, which are the entropies of the sequence of the given window size to the left, right, and center of the record. vcffilter usage: vcffilter [options] <vcf file>  options:     -f, --info-filter     specifies a filter to apply to the info fields of records,                           removes alleles which do not pass the filter     -g, --genotype-filter specifies a filter to apply to the genotype fields of records     -s, --filter-sites    filter entire records, not just alleles     -t, --tag-pass        tag vcf records as positively filtered with this tag, print all records     -F, --tag-fail        tag vcf records as negatively filtered with this tag, print all records     -A, --append-filter   append the existing filter tag, don't just replace it     -a, --allele-tag      apply -t on a per-allele basis.  adds or sets the corresponding INFO field tag     -v, --invert          inverts the filter, e.g. grep -v     -o, --or              use logical OR instead of AND to combine filters     -r, --region          specify a region on which to target the filtering, requires a BGZF                           compressed file which has been indexed with tabix.  any number of                           regions may be specified.  Filter the specified vcf file using the set of filters. Filters are specified in the form ""<ID> <operator> <value>:  -f ""DP > 10""  # for info fields  -g ""GT = 1|1"" # for genotype fields  -f ""CpG""  # for 'flag' fields  Operators can be any of: =, !, <, >, |, &  Any number of filters may be specified.  They are combined via logical AND unless --or is specified on the command line.  Obtain logical negation through the use of parentheses, e.g. ""! ( DP = 10 )""  For convenience, you can specify ""QUAL"" to refer to the quality of the site, even though it does not appear in the INFO fields.  vcffixup Count the allele frequencies across alleles present in each record in the VCF file. (Similar to vcftools --freq.) Uses genotypes from the VCF file to correct AC (alternate allele count), AF (alternate allele frequency), NS (number of called), in the VCF records. For example: % vcfkeepsamples file.vcf NA12878 | vcffixup - | vcffilter -f ""AC > 0""  Would downsample file.vcf to only NA12878, removing sites for which the sample was not called as polymorphic. vcfflatten usage: vcfflatten [file]  Removes multi-allelic sites by picking the most common alternate.  Requires allele frequency specification 'AF' and use of 'G' and 'A' to specify the fields which vary according to the Allele or Genotype. VCF file may be specified on the command line or piped as stdin.  vcfgeno2haplo usage: vcfgeno2haplo [options] [<vcf file>]  options:     -w, --window-size N       compare records up to this many bp away (default 30)     -r, --reference FILE      FASTA reference file, required with -i and -u  Convert genotype-based phased alleles within --window-size into haplotype alleles.  vcfgenotypecompare usage: vcfgenotypecompare <other-genotype-tag> <vcf file> adds statistics to the INFO field of the vcf file describing the amount of discrepancy between the genotypes (GT) in the vcf file and the genotypes reported in the <other-genotype-tag>.  use this after vcfannotategenotypes to get correspondence statistics for two vcfs.  vcfgenotypes Converts numerical representation of genotypes (standard in GT field) to the alleles provided in the call's ALT/REF fields. vcfglxgt usage: vcfglxgt [options] <vcf file>  options:     -n, --fix-null-genotypes   only apply to null and partly-null genotypes  Set genotypes using the maximum genotype likelihood for each sample.  vcfhetcount Count the number of heterozygotes in the input VCF. vcfhethomratio Provides the ratio between heterozygotes and homozygotes. vcfindex Adds a field (id) which contains an allele-specific numerical index. vcfintersect usage: vcfintersect [options] [<vcf file>]  options:     -b, --bed FILE            use intervals provided by this BED file     -v, --invert              invert the selection, printing only records which would                                 not have been printed out     -i, --intersect-vcf FILE  use this VCF for set intersection generation     -u, --union-vcf FILE      use this VCF for set union generation     -w, --window-size N       compare records up to this many bp away (default 30)     -r, --reference FILE      FASTA reference file, required with -i and -u     -l, --loci                output whole loci when one alternate allele matches     -m, --ref-match           intersect on the basis of record REF string     -t, --tag TAG             attach TAG to each record's info field if it would intersect     -V, --tag-value VAL       use this value to indicate that the allele is passing                               '.' will be used otherwise.  default: 'PASS'     -M, --merge-from FROM-TAG     -T, --merge-to   TO-TAG   merge from FROM-TAG used in the -i file, setting TO-TAG                               in the current file.  For bed-vcf intersection, alleles which fall into the targets are retained.  For vcf-vcf intersection and union, unify on equivalent alleles within window-size bp as determined by haplotype comparison alleles.  vcfkeepgeno usage: vcfkeepgeno <vcf file> [FIELD1] [FIELD2] ... outputs each record in the vcf file, removing FORMAT fields not listed on the command line from sample specifications in the output  vcfkeepinfo usage: vcfkeepinfo <vcf file> [FIELD1] [FIELD2] ... outputs each record in the vcf file, removing INFO fields not listed on the command line  vcfkeepsamples usage: vcfkeepsamples <vcf file> [SAMPLE1] [SAMPLE2] ... outputs each record in the vcf file, removing samples not listed on the command line  vcfleftalign Left-align indels and complex variants in the input using a pairwise ref/alt alignment followed by a heuristic, iterative left realignment process that shifts indel representations to their absolute leftmost (5') extent. This is the same procedure used in the internal left alignment in freebayes, and can be used when preparing VCF files for input to freebayes to decrease positional representation differences between the input alleles and left-realigned alignments. usage: vcfleftalign [options] [file]  options:     -r, --reference FILE  Use this reference as a basis for realignment.     -w, --window N        Use a window of this many bp when left aligning (150).  Left-aligns variants in the specified input file or stdin.  Window size is determined dynamically according to the entropy of the regions flanking the indel.  These must have entropy > 1 bit/bp, or be shorter than ~5kb.  vcflength Adds the length of the variant record (in [-/+]) relative to the reference allele to each VCF record. vcfnumalt Annotates the VCF stream on stdin with the number of alternate alleles at the site. vcfoverlay usage: vcfoverlay [options] [<vcf file> ...]  options:     -h, --help       this dialog  Overlays records in the input vcf files in the order in which they appear.  vcfparsealts Demonstration of alternate allele parsing method. This method uses pairwise alignment of REF and ALTs to determine component allelic primitives for each alternate allele. Use vcfallelicprimitives to decompose records while preserving format. vcfprimers usage: vcfprimers [options] <vcf file>  options:     -f, --fasta-reference  FASTA reference file to use to obtain primer sequences     -l, --primer-length    The length of the primer sequences on each side of the variant  For each VCF record, extract the flanking sequences, and write them to stdout as FASTA records suitable for alignment.  This tool is intended for use in designing validation experiments.  Primers extracted which would flank all of the alleles at multi-allelic sites.  The name of the FASTA ""reads"" indicates the VCF record which they apply to. The form is >CHROM_POS_LEFT for the 3' primer and >CHROM_POS_RIGHT for the 5' primer, for example:  >20_233255_LEFT CCATTGTATATATAGACCATAATTTCTTTATCCAATCATCTGTTGATGGA >20_233255_RIGHT ACTCAGTTGATTCCATACCTTTGCCATCATGAATCATGTTGTAATAAACA  vcfrandomsample usage: vcfrandomsample [options] [<vcf file>]  options:     -r, --rate RATE      base sampling probability per locus     -s, --scale-by KEY   scale sampling likelihood by this Float info field     -p, --random-seed N  use this random seed  Randomly sample sites from an input VCF file, which may be provided as stdin. Scale the sampling probability by the field specified in KEY.  This may be used to provide uniform sampling across allele frequencies, for instance.  vcfremap usage: vcfremap [options] [<vcf file>]  options:     -w, --ref-window-size N      align using this many bases flanking each side of the reference allele     -s, --alt-window-size N      align using this many flanking bases from the reference around each alternate allele     -r, --reference FILE         FASTA reference file, required with -i and -u     -m, --match-score N          match score for SW algorithm     -x, --mismatch-score N       mismatch score for SW algorithm     -o, --gap-open-penalty N     gap open penalty for SW algorithm     -e, --gap-extend-penalty N   gap extension penalty for SW algorithm     -z, --entropy-gap-open       use entropy scaling for the gap open penalty     -R, --repeat-gap-extend N    penalize non-repeat-unit gaps in repeat sequence     -a, --adjust-vcf TAG         supply a new cigar as TAG in the output VCF  For each alternate allele, attempt to realign against the reference with lowered gap open penalty. If realignment is possible, adjust the cigar and reference/alternate alleles.  vcfremoveaberrantgenotypes Strips genotypes which are homozygous but have observations implying heterozygosity. Requires RA (reference allele observation) and AA (alternate allele observation) for each genotype. vcfremovesamples usage: vcfremovesamples <vcf file> [SAMPLE1] [SAMPLE2] ... outputs each record in the vcf file, removing samples listed on the command line  vcfroc usage: vcfroc [options] [<vcf file>]  options:     -t, --truth-vcf FILE      use this VCF as ground truth for ROC generation     -w, --window-size N       compare records up to this many bp away (default 30)     -r, --reference FILE      FASTA reference file  Generates a pseudo-ROC curve using sensitivity and specificity estimated against a putative truth set.  Thresholding is provided by successive QUAL cutoffs.  vcfsamplediff usage: vcfsamplediff <tag> <sample> <sample> [ <sample> ... ] <vcf file> tags each record where the listed sample genotypes differ with <tag> The first sample is assumed to be germline, the second somatic. Each record is tagged with <tag>={germline,somatic,loh} to specify the type of variant given the genotype difference between the two samples.  vcfsamplenames Prints the names of the samples in the VCF file. vcfsom usage: vcfsom [options] [vcf file]  training:      vcfsom -s output.som -f ""AF DP ABP"" training.vcf  application:      vcfsom -a output.som -f ""AF DP ABP"" test.vcf >results.vcf  vcfsomtrains and/or applies a self-organizing map to the input VCF data on stdin, adding two columns for the x and y coordinates of the winning neuron in the network and an optional euclidean distance from a given node (--center).  If a map is provided via --apply,  map will be applied to input without training.  Automated filtering to an estimated FP rate is   options:      -h, --help             this dialog  training:      -f, --fields ""FIELD ...""  INFO fields to provide to the SOM     -a, --apply FILE       apply the saved map to input data to FILE     -s, --save  FILE       train on input data and save the map to FILE     -t, --print-training-results                            print results of SOM on training input                            (you can also just use --apply on the same input)     -x, --width X          width in columns of the output array     -y, --height Y         height in columns of the output array     -i, --iterations N     number of training iterations or epochs     -d, --debug            print timing information  recalibration:      -c, --center X,Y       annotate with euclidean distance from center     -p, --paint-true VCF   use VCF file to annotate true variants (multiple)     -f, --paint-false VCF  use VCF file to annotate false variants (multiple)     -R, --paint-tag TAG    provide estimated FDR% in TAG in variant INFO     -N, --false-negative   replace FDR% (false detection) with FNR% (false negative)  vcfstats usage: vcfstats [options] <vcf file>      -r, --region          specify a region on which to target the stats, requires a BGZF                           compressed file which has been indexed with tabix.  any number of                           regions may be specified.     -a, --add-info        add the statistics intermediate information to the VCF file,                           writing out VCF records instead of summary statistics     -l, --no-length-frequency    don't out the indel and mnp length-frequency spectra     -m, --match-score N          match score for SW algorithm     -x, --mismatch-score N       mismatch score for SW algorithm     -o, --gap-open-penalty N     gap open penalty for SW algorithm     -e, --gap-extend-penalty N   gap extension penalty for SW algorithm  Prints statistics about variants in the input VCF file.  vcfstreamsort Reads VCF on stdin and guarantees that the positional order is correct provided out-of-order variants are no more than 100 positions in the VCF file apart. vcfuniq Like GNU uniq, but for VCF records. Remove records which have the same positon, ref, and alt as the previous record. vcfuniqalleles For each record, remove any duplicate alternate alleles that may have resulted from merging separate VCF files. GPAT++ The application of population genomics to non-model organisms is greatly facilitated by the low cost of next generation sequencing (NGS). Barriers, however, exist for using NGS data for population level analyses. Traditional population genetic metrics, such as Fst, are not robust to the genotyping errors inherent in noisy NGS data. Additionally, many older software tools were never designed to handle the volume of data produced by NGS pipelines. To overcome these limitations we have developed a flexible software library designed specifically for large and noisy NGS datasets. The Genotype Phenotype Association Toolkit (GPAT++) implements both traditional and novel population genetic methods in a single user-friendly framework. GPAT consists of a suite of command-line tools and a Perl API that programmers can use to develop new applications. To date GPAT++ has been used successfully to identity genotype-phenotype associations in several real-world datasets including: domestic pigeons, Pox virus and pine rust fungus. GPAT++ is open source and freely available for academic use. Functions Basic population stats (Af, Pi, eHH, oHet, genotypeCounts) Several flavors of Fst Linkage Association testing (genotypic and pooled data) Haplotype methods (hapLrt) Smoothing Permutation Plotting Documentation , basic usage, FAQ Most GPAT++ tools write to both STDERR and STDOUT. All GPAT++ tools group individuals using a zero-based comma separated index (e.g. 0,1,2 ; first three individuals in VCF) Some GPAT++ tools (haplotype methods) require a region. What is the genotype likelihood format? When in doubt use GT! Only a few GPAT++ tools make use of the genotype likelihoods. GT: The genotype is correct GL: Genotype likelihood (Freebayes) GP: Genotype probability (Beagle) PL: Scaled genotype likelihood (GATK) pFst is the only tool that will work on pooled data. wcFst Calculates Weir and Cockerham's Fst estimator bi-allelic genotype data (Weir and Cockerham 1984). Sites with less than five genotypes in the target and background are skipped because they provide unreliable estimates of Fst. Fix sites are also ignored. INFO: help INFO: description:       wcFst is Weir & Cockerham's Fst for two populations.  Negative values are VALID,       they are sites which can be treated as zero Fst. For more information see Evolution, Vol. 38 N. 6 Nov 1984.       Specifically wcFst uses equations 1,2,3,4.  Output : 3 columns :      1. seqid      2. position      3. target allele frequency      4. background allele frequency      5. wcFst  INFO: usage:  wcFst --target 0,1,2,3,4,5,6,7 --background 11,12,13,16,17,19,22 --file my.vcf --deltaaf 0.1 --type PL  INFO: required: t,target     -- argument: a zero based comma separated list of target individuals corrisponding to VCF columns INFO: required: b,background -- argument: a zero based comma separated list of background individuals corrisponding to VCF columns INFO: required: f,file       -- argument: proper formatted VCF INFO: required, y,type       -- argument: genotype likelihood format; genotype : GT,GL,PL,GP INFO: optional: r,region     -- argument: a tabix compliant genomic range: seqid or seqid:start-end INFO: optional: d,deltaaf    -- argument: skip sites where the difference in allele frequencies is less than deltaaf, default is zero  segmentFst This program provides a way to find continious regions with high Fst values. It takes the output of wcFst and produces a BED file. These high Fst region can be permutated with 'permuteGPATwindow'. INFO: help INFO: description:       Creates genomic segments (bed file) for regions with high wcFst Output : 8 columns :      1. Seqid      2. Start (zero based)      3. End   (zero based)      4. Average Fst      5. Average high Fst (Fst > -s)      6. N Fst values in segment      7. N high fst values in segment      8. Segment length INFO: usage:  segmentFst -s 0.7 -f wcFst.output.txt  INFO: required: -f            -- Output from wcFst INFO: optional: -s            -- High Fst cutoff [0.8]    popStats Calculates basic population statistics at bi-allelic sites. The allele frequency is the number of non-reference alleles divided by the total number of alleles. The expected hetrozygosity is 2pq, where p is the non-reference allele frequency and q is 1-p. The observed heterozgosity is the fraction of 0/1 genotypes out of all genotypes. The inbreeding coefficent, Fis, is the relative heterozygosity of each individual vs. compared to the target group. INFO: help INFO: description:       General population genetic statistics for each SNP  Output : 9 columns :      1. seqid      2. position      3. target allele frequency      4. expected heterozygosity      5. observed heterozygosity      6. number of hets      7. number of homozygous ref      8. number of homozygous alt      9. target Fis INFO: usage:  popStat --type PL --target 0,1,2,3,4,5,6,7 --file my.vcf  INFO: required: t,target     -- a zero based comma separated list of target individuals corresponding to VCF columns INFO: required: f,file       -- proper formatted VCF INFO: required, y,type       -- genotype likelihood format; genotype : GL,PL,GP INFO: optional, r,region     -- a tabix compliant region : chr1:1-1000 or chr1  genotypeSummary Generates a table of genotype counts. INFO: help INFO: description:       Summarizes genotype counts for bi-allelic SNVs and indel  INFO: usage:  genotypeSummmary --type PL --target 0,1,2,3,4,5,6,7 --file my.vcf --snp  INFO: required: t,target     -- a zero based comma separated list of target individuals corresponding to VCF columns INFO: required: f,file       -- proper formatted VCF INFO: required, y,type       -- genotype likelihood format; genotype : GL,PL,GP INFO: optional, r,region     -- a tabix compliant region : chr1:1-1000 or chr1 INFO: optional, s,snp        -- Only count SNPs    pFst pFst is a likelihood ratio test (LRT) quantifying allele frequency differences between populations. The LRT by default uses the binomial distribution. If Genotype likelihoods are provided it uses a modified binomial that weights each allele count by its certainty. If type is set to 'PO' the LRT uses a beta distribution to fit the allele frequency spectrum of the target and background. PO requires the AD and DP genotype fields and requires at least two pools for the target and background. The p-value calculated in pFst is based on the chi-squared distribution with one degree of freedom. INFO: help INFO: description:       Summarizes genotype counts for bi-allelic SNVs and indel INFO: output: table of genotype counts for each individual. INFO: usage:  genotypeSummmary --type PL --target 0,1,2,3,4,5,6,7 --file my.vcf --snp  INFO: required: t,target     -- a zero based comma separated list of target individuals corresponding to VCF columns INFO: required: f,file       -- proper formatted VCF INFO: required, y,type       -- genotype likelihood format; genotype : GL,PL,GP INFO: optional, r,region     -- a tabix compliant region : chr1:1-1000 or chr1 INFO: optional, s,snp        -- Only count SNPs  EHH and PI The 'sequenceDiversity' program calculates extended haplotype homozygosity and pi within a fixed-width sliding window. This requires phased data. INFO: help INFO: description:       The sequenceDiversity program calculates two popular metrics of  haplotype diversity: pi and       extended haplotype homozygoisty (eHH).  Pi is calculated using the Nei and Li 1979 formulation.       eHH a convenient way to think about haplotype diversity.  When eHH = 0 all haplotypes in the window       are unique and when eHH = 1 all haplotypes in the window are identical.  Output : 5 columns:          1.  seqid          2.  start of window          3.  end of window          4.  pi          5.  eHH   INFO: usage: sequenceDiversity --target 0,1,2,3,4,5,6,7 --file my.vcf  INFO: required: t,target     -- argument: a zero base comma separated list of target individuals corresponding to VCF columns INFO: required: f,file       -- argument: a properly formatted phased VCF file INFO: required: y,type       -- argument: type of genotype likelihood: PL, GL or GP INFO: optional: a,af         -- sites less than af  are filtered out; default is 0 INFO: optional: r,region     -- argument: a tabix compliant region : ""seqid:0-100"" or ""seqid"" INFO: optional: w,window     -- argument: the number of SNPs per window; default is 20   meltEHH The program 'meltEHH' produces the data to generate the following plot: INFO: help INFO: description:      meltEHH provides the data to plot EHH curves. Output : 4 columns :      1. seqid      2. position      3. EHH      4. ref or alt [0 == ref] Usage:       meltEHH --target 0,1,2,3,4,5,6,7 --pos 10 --file my.phased.vcf  \            --region chr1:1-1000 > STDOUT 2> STDERR  Params:        required: t,target   <STRING>  A zero base comma separated list of target                                      individuals corresponding to VCF columns        required: r,region   <STRING>  A tabix compliant genomic range                                      format: ""seqid:start-end"" or ""seqid""        required: f,file     <STRING>  Proper formatted and phased VCF.        required: y,type     <STRING>  Genotype likelihood format: GT,PL,GL,GP        required: p,position <INT>     Variant position to melt.        optional: a,af       <DOUBLE>  Alternative alleles with frequencies less                                      than [0.05] are skipped.  iHS iHS calculates the integrated haplotype score which measures the relative decay of extended haplotype homozygosity (EHH) for the reference and alternative alleles at a site (see: voight et al. 2006, Spiech & Hernandez 2014). Our code is highly concordant with both implementations mentioned. However, we do not set an upper limit to the allele frequency. iHS can be run without a genetic map, in which case the change in EHH is integrated over a constant. Human genetic maps for GRCh36 and GRCh37 (hg18 & hg19) can be found at: http://bochet.gcc.biostat.washington.edu/beagle/genetic_maps/ . iHS by default interpolates SNV positions to genetic position (you don't need a genetic position for every VCF entry in the map file). iHS analyses requires normalization by allele frequency. It is important that iHS is calculated over large regions so that the normalization does not down weight real signals. For genome-wide runs it is recommended to run slightly overlapping windows and throwing out values that fail integration (columns 7 & 8 in the output) and then removing duplicates by using the 'sort' and 'uniq' linux commands. Normalization of the output is as simple as running 'normalize-iHS'. INFO: help INFO: description:      iHS calculates the integrated ratio of haplotype decay between the reference and non-reference allele. Output : 4 columns :      1. seqid      2. position      3. target allele frequency      4. integrated EHH (alternative)      5. integrated EHH (reference)      6. iHS ln(iEHHalt/iEHHref)      7. != 0 integration failure      8. != 0 integration failure  Usage:       iHS  --target 0,1,2,3,4,5,6,7 --file my.phased.vcf  \            --region chr1:1-1000 > STDOUT 2> STDERR  Params:        required: t,target  <STRING>  A zero base comma separated list of target                                      individuals corresponding to VCF columns        required: r,region  <STRING>  A tabix compliant genomic range                                      format: ""seqid:start-end"" or ""seqid""        required: f,file    <STRING>  Proper formatted and phased VCF.        required: y,type    <STRING>  Genotype likelihood format: GT,PL,GL,GP        optional: a,af      <DOUBLE>  Alternative alleles with frquences less                                      than [0.05] are skipped.        optional: x,threads <INT>     Number of CPUS [1].        recommended: g,gen <STRING>   A PLINK formatted map file.   smoother A method for window smoothing many of the GPAT++ formats.  INFO: help INFO: description:       Smoother averages a set of scores over a sliding genomic window.       Smoother slides over genomic positions not the SNP indices. In other words       the number of scores within a window will not be constant. The last       window for each seqid can be smaller than the defined window size.       Smoother automatically analyses different seqids separately. Output : 4 columns :      1. seqid      2. window start      2. window end      3. averaged score  INFO: usage: smoother --format pFst --file GPA.output.txt  INFO: required: f,file     -- argument: a file created by GPAT++ INFO: required: o,format   -- argument: format of input file, case sensitive                               available format options:                                 wcFst, pFst, bFst, iHS, xpEHH, abba-baba INFO: optional: w,window   -- argument: size of genomic window in base pairs (default 5000) INFO: optional: s,step     -- argument: window step size in base pairs (default 1000) INFO: optional: t,truncate -- flag    : end last window at last position (zero based) last window at last position (zero based)  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ekg/vcflib"	"A C++ library for parsing and manipulating VCF files. [MIT]"	"true"
"Biology"	"Wham"	"https://github.com/zeeev/wham"	"Structural variants (SVs) in Genomes by directly applying association tests to BAM files. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"15"	"14"	"GitHub - zeeev/wham: Structural variant detection and association testing Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 32 Fork 14 zeeev/wham Code Issues 4 Pull requests 0 Wiki Pulse Graphs Structural variant detection and association testing 630 commits 3 branches 9 releases Fetching contributors C++ 65.9% Perl 19.4% C 11.1% Python 3.2% Makefile 0.4% C++ Perl C Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags devel gh-pages master Nothing to show v1.7.0 v1.6.0 v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 1.8.0 Nothing to show New pull request Latest commit 6cfcb37 Jul 8, 2016 Zev N. Kronenberg adding min match flag Permalink Failed to load latest commit information. benchmarking adding 1kg data Feb 6, 2015 data fixed merge conflict and moved devel into master Apr 7, 2015 docs updating readme figure Jun 2, 2016 src adding min match flag Jul 8, 2016 utils cleaned up make May 25, 2016 .gitmodules added fasta hack Mar 27, 2015 .travis.yml trying to get travis started Dec 3, 2015 LICENSE.md added release notes and license Oct 22, 2014 Makefile 5pm May 27, 2016 README.md Update README.md Jun 15, 2016 RELEASE.md added benchmarking Jan 15, 2015 VCF2R Update VCF2R Mar 25, 2015 README.md wham The wham suite consists of two programs, wham and whamg. wham, the original tool, is a very sensitive method with a high false discovery rate. The second program, whamg, is more accurate and better suited for general structural variant (SV) discovery. For most studies, we strongly recommend using whamg. Below, we outline the basics of running whamg. Important sections are highlighted in bold text. Please cite the wham paper if you use wham or whamg. whamg workflow Installing whamg whamg depends on CMake and OpenMP. These dependances are commonly preinstalled on various Linux distributions. The following command should install wham into your current working directory: git clone --recursive  https://github.com/zeeev/wham.git; cd wham; make   Running whamg whamg uses paired alignments generated with BWA-MEM. whamg uses the same BAMs as SNV and INDEL calling tools. Duplicates should be marked or removed, and indel realignment is helpful. whamg is agnostic regarding the BWA-MEM –M flag (if you don’t know what that means, don’t worry). It is important that the –R flag in BWA-MEM is used. whamg requires read-group information. Currently, whamg assumes one library per bam file. Example 1 export EXCLUDE=GL000207.1,GL000226.1,GL000229.1,GL000231.1,GL000210.1,GL000239.1,GL000235.1,GL000201.1,GL000247.1,GL000245.1,GL000197.1,GL000203.1,GL000246.1,GL000249.1,GL000196.1,GL000248.1,GL000244.1,GL000238.1,GL000202.1,GL000234.1,GL000232.1,GL000206.1,GL000240.1,GL000236.1,GL000241.1,GL000243.1,GL000242.1,GL000230.1,GL000237.1,GL000233.1,GL000204.1,GL000198.1,GL000208.1,GL000191.1,GL000227.1,GL000228.1,GL000214.1,GL000221.1,GL000209.1,GL000218.1,GL000220.1,GL000213.1,GL000211.1,GL000199.1,GL000217.1,GL000216.1,GL000215.1,GL000205.1,GL000219.1,GL000224.1,GL000223.1,GL000195.1,GL000212.1,GL000222.1,GL000200.1,GL000193.1,GL000194.1,GL000225.1,GL000192.1,NC_007605 whamg -e $EXCLUDE -a Homo_sapiens_assembly19.fasta -f CHM1_1.bam > chm1.vcf  2> chm1.err  In the example above, whamg will process all chomosomes in the CHM1 genome. The export statement allows you to mask certain chromosomes/contigs; it may be useful to mask certain chromosomes that are either problematic for read mapping (i.e. rDNA) or short contigs from de novo genome assemblies. The provided example masks human contigs that we have found to be problematic in SV calling. The standard output contains the SV calls and is written to chm1.vcf. The standard error is written to chm1.err, and includes progress updates that can be useful to track runtimes and errors. If you have a trio or a quad and want to joint call, you can pass the bam files as a comma-separated list or a simple text file with the full path to each bam file on each line. PLEASE NOTE: It is very important that the –e or -c flags are used. If –e or –c are not specified, there is a chance that whamg will incorrectly estimate the insert sizes of the library. Example 2 whamg -x 2 -e $EXCLUDE -a Homo_sapiens_assembly19.fasta -f CHM1_1.bam > chm1.vcf  2> chm1.err  In the example above, we are telling whamg to only use two CPUs (-x). Example 3 whamg  -g graph.txt -x 2 -e $EXCLUDE -a Homo_sapiens_assembly19.fasta -f CHM1_1.bam > chm1.vcf  2> chm1.err  In the example above, each putative structural variant will be written to a flat text file. Individual graphs can be visualized with dotviz or gephi. This output can be helpful for interrogating missing calls or complex structural variants. Do not use this option on a genome-wide run as the file sizes can be extremely large. Explanation of options -f : A comma-separated list of indexed bam files or a sample text file that looks like: NA12878.sort.bam NA12776.sort.bam  -a: The matched reference genome. It is important that the bams were aligned to the same reference sequence. -s: whamg will exit after collecting the basic statistics: INFO: for Sample:CHM1   STATS:    CHM1: mean depth ..............: 38.5064   STATS:    CHM1: sd depth ................: 8.93088   STATS:    CHM1: mean insert length: .....: 292.639   STATS:    CHM1: median insert length ....: 264   STATS:    CHM1: sd insert length ........: 129.843   STATS:    CHM1: lower insert cutoff .....: 32.9538   STATS:    CHM1: upper insert cutoff .....: 617.245   STATS:    CHM1: average base quality ....: 36.2782   STATS:    CHM1: average mapping quality .: 57.9975   STATS:    CHM1: number of reads used ....: 100405  -g: The file to write the graphs to. Not recommended for whole-genome runs. -e: A comma-separated list of seqids to skip. -c: A comma-sepearted list of seqids to use for estimating the insert size distribution. -r: Region in seqid:start-end format. Runs whamg on a specific genomic region. -x: The number of CPUs whamg will attempt to use. During the first step, whamg reads the entire bam file. If you notice CPU usage dropping, I/O might be swamping out. After the bam files are read, there are several single CPU steps before whamg finishes. The optimal number of CPUs to use really depends on I/O speeds. -i: whamg uses the BWA-MEM SA tag (default). Older versions of BWA-MEM used a different tag, XP (-i XP). -z: Sometimes whamg can fail to sample enough reads (low-fold coverage, exome, …). The –z flag forces whamg to keep sampling random regions until it succeeds VCF 4.2 output In this section, each INFO and FORMAT field will be covered. Here is an example whamg VCF header: ##fileformat=VCFv4.2 ##source=WHAM-GRAPHENING:v1.7.0-225-g1e35-dirty ##reference=Homo_sapiens_assembly19.fasta ##INFO=<ID=A,Number=1,Type=Integer,Description=""Total pieces of evidence""> ##INFO=<ID=CIEND,Number=2,Type=Integer,Description=""Confidence interval around END for imprecise variants""> ##INFO=<ID=CIPOS,Number=2,Type=Integer,Description=""Confidence interval around POS for imprecise variants""> ##INFO=<ID=CF,Number=1,Type=Float,Description=""Fraction of reads in graph that cluster with SVTYPE pattern""> ##INFO=<ID=CW,Number=5,Type=Float,Description=""SVTYPE weight 0-1; DEL,DUP,INV,INS,BND""> ##INFO=<ID=D,Number=1,Type=Integer,Description=""Number of reads supporting a deletion""> ##INFO=<ID=DI,Number=1,Type=Float,Description=""Average distance of mates to breakpoint""> ##INFO=<ID=END,Number=1,Type=Integer,Description=""End position of the variant described in this record""> ##INFO=<ID=EV,Number=1,Type=Integer,Description=""Number everted mate-pairs""> ##INFO=<ID=I,Number=1,Type=Integer,Description=""Number of reads supporting an insertion""> ##INFO=<ID=SR,Number=1,Type=Integer,Description=""Number of split-reads supporing SV""> ##INFO=<ID=SS,Number=1,Type=Integer,Description=""Number of split-reads supporing SV""> ##INFO=<ID=SVLEN,Number=.,Type=Integer,Description=""Difference in length between REF and ALT alleles""> ##INFO=<ID=SVTYPE,Number=1,Type=String,Description=""Type of structural variant""> ##INFO=<ID=T,Number=1,Type=Integer,Description=""Number of reads supporting a BND""> ##INFO=<ID=TAGS,Number=.,Type=Integer,Description=""SM tags with breakpoint support""> ##INFO=<ID=TF,Number=1,Type=Integer,Description=""Number of reads mapped too far""> ##INFO=<ID=U,Number=1,Type=Integer,Description=""Number of reads supporting a duplication""> ##INFO=<ID=V,Number=1,Type=Integer,Description=""Number of reads supporting an inversion""> ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype""> ##FORMAT=<ID=DP,Number=1,Type=Integer,Description=""Read Depth""> ##FORMAT=<ID=SP,Number=1,Type=Integer,Description=""Per sample SV support""> #CHROM  POS ID  REF ALT QUAL    FILTER  INFO    FORMAT  CHM1  FIELD DESCRIPTION A Each pair of reads counts as a piece of evidence. The total evidence is summed across the whamg graph structure. Since whamg does not initially cluster similar graph structures, you may see several SVs with low total support that are off by a couple base pairs. Merging SVs is a good idea. CIEND and CIPOS This field is fixed at [-10, 10]. Most whamg calls are accurate to within a couple base pairs. However, this field is updated during SV merging. CF Larger SVs (greater than average insert size of the library) generate mate pair patterns. For example, the mates of reads overlapping the 5’ end of a deletion should map downstream of the 3’ breakpoint. Each SV class generates a different pattern. CF is the fraction of the reads in the graph structure that cluster according to SVTYPE. CW Each mate pair and split read can contribute evidence to one or more SVTYPES. The CW field describes what fraction of the total support belongs to each SVTYPE. In the case of inverted deletions, you might find that both the inversion and deletion have high weights. This field sums to one. D The number of mate pairs in the graph that support a deletion. DI This field is related to the CF field. This measures the average distance of the mate pairs to the alternative breakpoint. Inversions can have large DI scores, but deletions should not END This is a standard VCF field. Insertions start and end at the same position. EV The number of everted mate pairs (← →). I The number of reads supporting and inversion. SR The number of split reads in the graph. This is not necessarily the same as the number of split reads between the breakpoints. SS The number of reads on the same strand (→ → or ← ←). SVLEN This is a standard VCF field. SVTYPE This is a standard VCF field. T The number of reads supporting and interchomosmal event. TAGS The individuals (SMs) that are in the graph. TF The number of mate pairs that map too far away. U The number of reads that support duplication. V The number of reads that support an inversion. GT Genotype. Currently, there is no genotype provided. We are working on a fast and accurate genotyper. DP Depth. Currently, no depth is provided. SP This is the number of reads in each individual that supports the exact breakpoint. Because of breakpoint variability, this number might be lower than expected. Be cautious when filtering on SP. wham wham is the other SV called provided in the suite and represents the codebase published in our PLoS Computational Biology paper. All wham documents can be found on the wiki: http://zeeev.github.io/wham/ WHole-genome Alignment Metrics (wham) is a structural variant (SV) caller that integrates several sources of mapping information to identify SVs. wham classifies SVs using a flexible and extendable machine-learning algorithm (random forest). wham is not only accurate at identifying SVs, but its association test can identify shared SVs enriched in a cohort of diseased individuals compared to a background of healthy individuals. wham can be easily run as a stand-alone tool or as part of gkno (http://gkno.me) or bcbio-nextgen (http://bcbio-nextgen.readthedocs.org) pipelines. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zeeev/wham"	"Structural variants (SVs) in Genomes by directly applying association tests to BAM files. [MIT]"	"true"
"BitTorrent"	"jech/dht"	"https://github.com/jech/dht"	"BitTorrent DHT library in C. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"281"	"42"	"70"	"GitHub - jech/dht: BitTorrent DHT library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 281 Fork 70 jech/dht Code Issues 1 Pull requests 1 Pulse Graphs BitTorrent DHT library http://www.pps.jussieu.fr/~jch/software/bittorrent/ 241 commits 1 branch 23 releases 6 contributors C 99.8% Makefile 0.2% C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show dht-0.24 dht-0.23 dht-0.22 dht-0.21 dht-0.20 dht-0.19 dht-0.17 dht-0.16 dht-0.15 dht-0.14 dht-0.13 dht-0.12 dht-0.11 dht-0.10 dht-0.9 dht-0.8 dht-0.7 dht-0.6 dht-0.5 dht-0.4 dht-0.3 dht-0.2 dht-0.1 Nothing to show New pull request Latest commit b5b4ce7 Jun 18, 2016 GamePad64 committed with jech Fixed const-correctness for sockaddr on dht_ping_node Permalink Failed to load latest commit information. CHANGES Update CHANGES for 0.24. May 18, 2015 LICENCE Update copyright dates. Nov 2, 2010 Makefile Remove obsolete compiler flag. Dec 14, 2009 README Typo in documentation. Aug 19, 2015 dht-example.c Add const to parameters of DHT callback. May 2, 2014 dht.c Fixed const-correctness for sockaddr on dht_ping_node Jun 21, 2016 dht.h Fixed const-correctness for sockaddr on dht_ping_node Jun 21, 2016 README The files dht.c and dht.h implement the variant of the Kademlia Distributed Hash Table (DHT) used in the Bittorrent network (``mainline'' variant).  The file dht-example.c is a stand-alone program that participates in the DHT.  Another example is a patch against Transmission, which you might or might not be able to find somewhere.  The code is designed to work well in both event-driven and threaded code. The caller, which is either an event-loop or a dedicated thread, must periodically call the function dht_periodic.  In addition, it must call dht_periodic whenever any data has arrived from the network.  All functions return -1 in case of failure, in which case errno is set, or a positive value in case of success.  Initialisation **************  * dht_init  This must be called before using the library.  You pass it a bound IPv4 datagram socket, a bound IPv6 datagram socket, and your node id, a 20-octet array that should be globally unique.  If you're on a multi-homed host, you should bind the sockets to one of your addresses.  Node ids must be well distributed, so you cannot just use your Bittorrent id; you should either generate a truly random value (using plenty of entropy), or at least take the SHA-1 of something.  However, it is a good idea to keep the id stable, so you may want to store it in stable storage at client shutdown.    * dht_uninit  This may be called at the end of the session.  Bootstrapping *************  The DHT needs to be taught a small number of contacts to begin functioning. You can hard-wire a small number of stable nodes in your application, but this obviously fails to scale.  You may save the list of known good nodes at shutdown, and restore it at restart.  You may also grab nodes from torrent files (the nodes field), and you may exchange contacts with other Bittorrent peers using the PORT extension.  * dht_ping  This is the main bootstrapping primitive.  You pass it an address at which you believe that a DHT node may be living, and a query will be sent.  If a node replies, and if there is space in the routing table, it will be inserted.  * dht_insert_node  This is a softer bootstrapping method, which doesn't actually send a query -- it only stores the node in the routing table for later use.  It is a good idea to use that when e.g. restoring your routing table from disk.  Note that dht_insert_node requires that you supply a node id.  If the id turns out to be wrong, the DHT will eventually recover; still, inserting massive amounts of incorrect information into your routing table is certainly not a good idea.  An additionaly difficulty with dht_insert_node is that, for various reasons, a Kademlia routing table cannot absorb nodes faster than a certain rate.  Dumping a large number of nodes into a table using dht_insert_node will probably cause most of these nodes to be discarded straight away. (The tolerable rate is difficult to estimate; it is probably on the order of one node every few seconds per node already in the table divided by 8, for some suitable value of 8.)  Doing some work ***************  * dht_periodic  This function should be called by your main loop periodically, and also whenever data is available on the socket.  The time after which dht_periodic should be called if no data is available is returned in the parameter tosleep.  (You do not need to be particularly accurate; actually, it is a good idea to be late by a random value.)  The parameters buf, buflen, from and fromlen optionally carry a received message.  If buflen is 0, then no message was received.  Dht_periodic also takes a callback, which will be called whenever something interesting happens (see below).  * dht_search  This schedules a search for information about the info-hash specified in id.  If port is not 0, it specifies the TCP port on which the current peer is listening; in that case, when the search is complete it will be announced to the network.  The port is in host order, beware if you got it from a struct sockaddr_in.  In either case, data is passed to the callback function as soon as it is available, possibly in multiple pieces.  The callback function will additionally be called when the search is complete.  Up to DHT_MAX_SEARCHES (1024) searches can be in progress at a given time; any more, and dht_search will return -1.  If you specify a new search for the same info hash as a search still in progress, the previous search is combined with the new one -- you will only receive a completion indication once.  Information queries *******************  * dht_nodes  This returns the number of known good, dubious and cached nodes in our routing table.  This can be used to decide whether it's reasonable to start a search; a search is likely to be successful as long as we have a few good nodes; however, in order to avoid overloading your bootstrap nodes, you may want to wait until good is at least 4 and good + doubtful is at least 30 or so.  It also includes the number of nodes that recently sent us an unsolicited request; this can be used to determine if the UDP port used for the DHT is firewalled.  If you want to display a single figure to the user, you should display good + doubtful, which is the total number of nodes in your routing table. Some clients try to estimate the total number of nodes, but this doesn't make much sense -- since the result is exponential in the number of nodes in the routing table, small variations in the latter cause huge jumps in the former.  * dht_get_nodes  This retrieves the list of known good nodes, starting with the nodes in our own bucket.  It is a good idea to save the list of known good nodes at shutdown, and ping them at startup.  * dht_dump_tables * dht_debug  These are debugging aids.  Functions provided by you *************************  * The callback function  The callback function is called with 5 arguments.  Closure is simply the value that you passed to dht_periodic.  Event is one of DHT_EVENT_VALUES or DHT_EVENT_VALUES6, which indicates that we have new values, or DHT_EVENT_SEARCH_DONE or DHT_EVENT_SEARCH_DONE6, which indicates that a search has completed.  In either case, info_hash is set to the info-hash of the search.  In the case of DHT_EVENT_VALUES, data is a list of nodes in ``compact'' format -- 6 or 18 bytes per node.  Its length in bytes is in data_len.  * dht_blacklisted  This is a function that takes an IP address and returns true if this address should be silently ignored.  Do not use this feature unless you really must -- Kademlia supposes transitive reachability.  * dht_hash  This should compute a reasonably strong cryptographic hash of the passed values.  It should map cleanly to your favourite crypto toolkit's MD5 or SHA-1 function.  * dht_random_bytes  This should fill the supplied buffer with true random bytes.  Final notes ***********  * NAT  Nothing works well across NATs, but Kademlia is somewhat less impacted than many other protocols.  The implementation takes care to distinguish between unidirectional and bidirectional reachability, and NATed nodes will eventually fall out from other nodes' routing tables.  While there is no periodic pinging in this implementation, maintaining a full routing table requires slightly more than one packet exchange per minute, even in a completely idle network; this should be sufficient to make most full cone NATs happy.  * Missing functionality  Some of the code has had very little testing.  If it breaks, you get to keep both pieces.                                           Juliusz Chroboczek                                         <jch@pps.jussieu.fr>  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jech/dht"	"BitTorrent DHT library in C. [MIT]"	"true"
"BitTorrent"	"libtorrent"	"https://github.com/arvidn/libtorrent"	"(a.k.a. libtorrent-rasterbar) - An efficient feature complete C++ bittorrent implementation. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"466"	"58"	"137"	"GitHub - arvidn/libtorrent: an efficient feature complete C++ bittorrent implementation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 466 Fork 137 arvidn/libtorrent Code Issues 65 Pull requests 3 Wiki Pulse Graphs an efficient feature complete C++ bittorrent implementation http://libtorrent.org 9,182 commits 15 branches 69 releases 32 contributors C++ 94.7% M4 1.8% C 1.8% Python 0.7% Makefile 0.4% Shell 0.4% CMake 0.2% C++ M4 C Python Makefile Shell CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags RC_0_9_1 RC_0_12 RC_0_13 RC_0_14 RC_0_15 RC_0_16 RC_1_0 RC_1_1 c-binding-travis cached-clock clang-tidy disk-buffer-pool master multi-threading snprintf Nothing to show libtorrent_0_16_6 libtorrent_0_16_5 libtorrent_0_16_4 libtorrent_0_16_3 libtorrent_0_16_2 libtorrent_0_16_1 libtorrent_0_16_0 libtorrent_0_14_6 libtorrent_0_14_5 libtorrent_0_14_4 libtorrent_asio_bp libtorrent-aio-stage1 libtorrent-1_1 libtorrent-1_0_9 libtorrent-1_0_8 libtorrent-1_0_7 libtorrent-1_0_6 libtorrent-1_0_5 libtorrent-1_0_4 libtorrent-1_0_3 libtorrent-1_0_2 libtorrent-1_0_1 libtorrent-1_0 libtorrent-1_0-rc3 libtorrent-1_0-rc libtorrent-0_16_19 libtorrent-0_16_18 libtorrent-0_16_17 libtorrent-0_16_16 libtorrent-0_16_15 libtorrent-0_16_14 libtorrent-0_16_13 libtorrent-0_16_12 libtorrent-0_16_11 libtorrent-0_16_10 libtorrent-0_16_9 libtorrent-0_16_8 libtorrent-0_16_7 libtorrent-0_15_10 libtorrent-0_15_9 libtorrent-0_15_8 libtorrent-0_15_7 libtorrent-0_15_6 libtorrent-0_15_5 libtorrent-0_15_4 libtorrent-0_15_3 libtorrent-0_15_2 libtorrent-0_15_1 libtorrent-0_15_0 libtorrent-0_14_12 libtorrent-0_14_11 libtorrent-0_14_10 libtorrent-0_14_9 libtorrent-0_14_8 libtorrent-0_14_7 libtorrent-0_14_3 libtorrent-0_14_2 libtorrent-0_14_1 libtorrent-0_14 libtorrent-0_13_2 libtorrent-0_13_1 libtorrent-0_13 libtorrent-0_12_1 libtorrent-0_12 libtorrent-0_9 libtorrent-0_9-rc2 RC2_0_11 RC_0_11 LIBTORRENT_0_11 Nothing to show New pull request Latest commit e72f95e Jul 15, 2016 arvidn committed on GitHub fix test_remap_files (#905) … fix test_remap_files Permalink Failed to load latest commit information. .github add contributing and issue template Apr 14, 2016 bindings modernize misc (#898) Jul 10, 2016 cmake/Modules Fix compilation with cmake (#767) May 29, 2016 docs clean-up more defines (#872) Jul 1, 2016 ed25519 use cstdint intead of boost/cstdint.hpp (#833) Jun 18, 2016 examples apply modernization transforms to headers too. nullptr, explicit cons… Jul 10, 2016 include/libtorrent deprecate and remove guided read cache (#904) Jul 10, 2016 m4 use std::chrono and not boost::chrono May 1, 2016 simulation apply modernization transforms to headers too. nullptr, explicit cons… Jul 10, 2016 src fix test_remap_files (#905) Jul 15, 2016 test fix test_remap_files (#905) Jul 15, 2016 tools modernize replace deprecated headers (#897) Jul 9, 2016 .gitignore Share the DHT storage for both IPv4 and IPv6 (#762) Jun 3, 2016 .gitmodules add .gitmodules Aug 7, 2015 .travis.yml cleanup appveyor and .travis scripts (#890) Jul 6, 2016 AUTHORS merge copyright year update and changelog from RC_1_0 Jan 17, 2016 CMakeLists.txt option to use only the openssl's sha1 implementation (#845) Jun 23, 2016 CONTRIBUTING.rst update changelog and update contributing document Apr 24, 2016 COPYING merge copyright year update and changelog from RC_1_0 Jan 17, 2016 ChangeLog Merge branch 'RC_1_1' Jul 9, 2016 Jamfile support CryptoAPI on windows, for SHA-1 hashing (#882) Jul 5, 2016 Jamroot.jam add Jamroot.jam Jun 14, 2012 LICENSE merge copyright year update and changelog from RC_1_0 Jan 17, 2016 Makefile.am fix documentation mentions of session_settings to refer to settings_p… Mar 18, 2016 NEWS polishing, update copyright Jul 2, 2014 README.rst add contributing and issue template Apr 14, 2016 appveyor.yml cleanup appveyor and .travis scripts (#890) Jul 6, 2016 autotool.sh merged configure fix from RC_0_16 Nov 19, 2012 bootstrap.sh merged bootstrap.sh script from RC_0_16 May 29, 2013 build_dist.sh fix msvc test build. make test framework robust to tmpfile() failing.… Apr 10, 2016 configure.ac fix configure.ac typo Jul 3, 2016 libtorrent-rasterbar-cmake.pc.in don't add to pkg-config. #462 Jan 7, 2009 libtorrent-rasterbar.pc.in merged fixes from RC_0_16 Sep 7, 2013 setup.py Add/fix shebang in python scripts, add execute permission (linux), re… Jul 12, 2015 README.rst libtorrent libtorrent is an open source C++ library implementing the BitTorrent protocol, along with most popular extensions, making it suitable for real world deployment. It is configurable to be able to fit both servers and embedded devices. The main goals of libtorrent are to be efficient and easy to use. See libtorrent.org for more detailed build and usage instructions. To build with boost-build, make sure boost and boost-build is installed and run: b2 In the libtorrent root. To build the examples, run b2 in the examples directory. See building.html for more details on how to build and which configuration options are available. For python bindings, see the python docs. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/arvidn/libtorrent"	"(a.k.a. libtorrent-rasterbar) - An efficient feature complete C++ bittorrent implementation. [BSD]"	"true"
"BitTorrent"	"LibTorrent"	"https://github.com/rakshasa/libtorrent"	"(a.k.a. libtorrent-rakshasa) - BitTorrent library. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"568"	"69"	"135"	"GitHub - rakshasa/libtorrent: libTorrent BitTorrent library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 568 Fork 135 rakshasa/libtorrent Code Issues 22 Pull requests 4 Wiki Pulse Graphs libTorrent BitTorrent library http://rtorrent.net/downloads/ 1,384 commits 5 branches 4 releases 8 contributors C++ 96.4% M4 2.9% Other 0.7% C++ M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags branch-0.13 feature-uri-parser ipv6 master threaded_hash Nothing to show 0.13.6 0.13.4 0.13.1 0.13.0 Nothing to show New pull request Latest commit 0042d93 Jun 19, 2016 rakshasa Merge branch 'master' of github.com:rakshasa/libtorrent Permalink Failed to load latest commit information. doc Starting cleanup of algo stuff. Jun 5, 2005 extra * Optimized AvailableList::erase. Sep 26, 2007 rak Merge branch 'master' into c++11 Jun 18, 2014 scripts Added unordered_map to tr1 wrapper. Jul 2, 2014 src Merge branch 'master' of github.com:rakshasa/libtorrent Jun 19, 2016 test Added missing <stdexcept> to 'test/main.cc'. Mar 10, 2016 .gitignore Added log output to gitignore. Jun 30, 2014 .travis.yml Fixed travis config. Mar 10, 2016 AUTHORS Importing codebase 0.2.6. Jul 15, 2004 BUGS * Fixed a buffer overflow when writting to the output buffer. This Dec 5, 2005 COPYING Importing codebase 0.2.6. Jul 15, 2004 ChangeLog * Added unlimited setting for max unchoked in ChokeManager and made it Mar 26, 2007 INSTALL Importing codebase 0.2.6. Jul 15, 2004 Makefile.am Removed last uses of <rak/functional_fun.h> and replaced them with TR… Dec 14, 2011 NEWS Throttle working. Jul 27, 2004 README Minor fixes to the README. Mar 10, 2016 TODO_LONGTERM * Fixed a bug that cause the hash checker not to start. Jan 22, 2007 autogen.sh Exit the autogen.sh script if one of the commands fail. Jan 5, 2012 configure.ac Bumped master to 0.13.6. Sep 8, 2015 libtorrent.pc.in Importing codebase 0.2.6. Jul 15, 2004 README LibTorrent  LICENSE   GNU GPL, see COPYING. ""libtorrent/src/utils/sha_fast.{cc,h}"" is originally from the Mozilla NSS and is under a triple license; MPL, LGPL and GPL. An exception to non-NSS code has been added for linking to OpenSSL as requested by Debian, though the author considers that library to be part of the Operative System and thus linking is allowed according to the GPL.   Use whatever fits your purpose, the code required to compile with Mozilla's NSS implementation of SHA1 has been retained and can be compiled if the user wishes to avoid using OpenSSL.  CONTACT   Send bug reports, suggestions and patches to <sundell.software@gmail.com> or to the mailinglist.  POLLING   ""libtorrent/src/torrent/poll.h"" provides an abstract class for implementing any kind of polling the client wishes to use. Currently epoll and select based polling is included.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rakshasa/libtorrent"	"(a.k.a. libtorrent-rakshasa) - BitTorrent library. [GPL]"	"true"
"BitTorrent"	"libutp"	"https://github.com/bittorrent/libutp"	"uTorrent Transport Protocol library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"464"	"96"	"119"	"GitHub - bittorrent/libutp: uTorrent Transport Protocol library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 96 Star 464 Fork 119 bittorrent/libutp Code Issues 18 Pull requests 11 Pulse Graphs uTorrent Transport Protocol library http://github.com/bittorrent/libutp 156 commits 14 branches 0 releases Fetching contributors C++ 78.7% C 16.6% Python 4.0% Makefile 0.7% C++ C Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags HEAD alpha close-reason defer_writable_notification feature-modify-perf-pr feature-ut-1034-configuration flush_packets_optimization lower_timeout master nicer_slow_start npm share_path_tate steve-2015.02.27-runtime vs2015 Nothing to show Nothing to show New pull request Latest commit 3110314 Apr 25, 2016 jpcottin Merge pull request #90 from bittorrent/feature-modify-perf-pr … Feature modify perf Pull Request Permalink Failed to load latest commit information. prop_sheets Separate runtime property sheet Feb 27, 2015 .gitignore cleanup_wine Apr 8, 2014 LICENSE Merge BitTorrent libutp changes from uTorrent 3.4 (alpha) May 22, 2013 Makefile optimization level as variable Apr 14, 2016 README.md Update README.md to reference ucat.c as an example Sep 10, 2015 libutp-2012.vcxproj.filters Change name of compatibility source file. May 19, 2014 libutp.vcxproj remove year from solution name Apr 7, 2016 libutp_inet_ntop.cpp Compatibility for pre-Vista win32 May 19, 2014 libutp_inet_ntop.h Add missing header. May 19, 2014 parse_log.py initial import May 20, 2010 ucat.c Performance fixes and one small bugfix. Jan 6, 2016 utp.h Merge BitTorrent libutp changes from uTorrent 3.4 (alpha) May 22, 2013 utp_api.cpp Merge BitTorrent libutp changes from uTorrent 3.4 (alpha) May 22, 2013 utp_callbacks.cpp cleanup_winsockapi Mar 31, 2014 utp_callbacks.h Merge BitTorrent libutp changes from uTorrent 3.4 (alpha) May 22, 2013 utp_hash.cpp cleanup_winsockapi: adjustment of a few warning fixes Apr 2, 2014 utp_hash.h cleanup_winsockapi: adjustment of a few warning fixes Apr 2, 2014 utp_internal.cpp tab Apr 13, 2016 utp_internal.h Performance fixes and one small bugfix. Jan 7, 2016 utp_packedsockaddr.cpp Make libutp build on XP, Win32 post-XP, and POSIX. May 19, 2014 utp_packedsockaddr.h Merge BitTorrent libutp changes from uTorrent 3.4 (alpha) May 22, 2013 utp_templates.h Merge BitTorrent libutp changes from uTorrent 3.4 (alpha) May 22, 2013 utp_types.h remove snprintf, already defined in VS2015 Apr 7, 2016 utp_utils.cpp Merge BitTorrent libutp changes from uTorrent 3.4 (alpha) May 22, 2013 utp_utils.h Merge BitTorrent libutp changes from uTorrent 3.4 (alpha) May 22, 2013 README.md libutp - The uTorrent Transport Protocol library. Copyright (c) 2010 BitTorrent, Inc. uTP is a TCP-like implementation of LEDBAT documented as a BitTorrent extension in BEP-29. uTP provides provides reliable, ordered delivery while maintaining minimum extra delay. It is implemented on top of UDP to be cross-platform and functional today. As a result, uTP is the primary transport for uTorrent peer-to-peer connections. uTP is written in C++, but the external interface is strictly C (ANSI C89). The Interface The uTP socket interface is a bit different from the Berkeley socket API to avoid the need for our own select() implementation, and to make it easier to write event-based code with minimal buffering. When you create a uTP socket, you register a set of callbacks. Most notably, the on_read callback is a reactive callback which occurs when bytes arrive off the network. The write side of the socket is proactive, and you call UTP_Write to indicate the number of bytes you wish to write. As packets are created, the on_write callback is called for each packet, so you can fill the buffers with data. The libutp interface is not thread-safe. It was designed for use in a single-threaded asyncronous context, although with proper synchronization it may be used from a multi-threaded environment as well. See utp.h for more details and other API documentation. Example See ucat.c. Build with: make ucat Building uTP has been known to build on Windows with MSVC and on linux and OS X with gcc. On Windows, use the MSVC project files (utp.sln, and friends). On other platforms, building the shared library is as simple as: make  To build one of the examples, which will statically link in everything it needs from libutp: cd utp_test && make  Packaging and API The libutp API is considered unstable, and probably always will be. We encourage you to test with the version of libutp you have, and be mindful when upgrading. For this reason, it is probably also a good idea to bundle libutp with your application. License libutp is released under the MIT license. Related Work Research and analysis of congestion control mechanisms can be found here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bittorrent/libutp"	"uTorrent Transport Protocol library. [MIT]"	"true"
"CLI"	"Boost.Program_options"	"http://www.boost.org/doc/libs/1_57_0/doc/html/program_options.html"	"A library to obtain program options via conventional methods such as command line and config file. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Chapter 21. Boost.Program_options - 1.57.0 Boost C++ Libraries ...one of the most highly regarded and expertly designed C++ library projects in the world. — Herb Sutter and Andrei Alexandrescu, C++ Coding Standards Click here to view the latest version of this page. Chapter 21. Boost.Program_options Vladimir Prus Copyright © 2002-2004 Vladimir Prus Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) Table of Contents Introduction Tutorial Getting Started Option Details Multiple Sources Library Overview Options Description Component Parsers Component Storage Component Specific parsers Annotated List of Symbols How To Non-conventional Syntax Response Files Winmain Command Line Option Groups and Hidden Options Custom Validators Unicode Support Allowing Unknown Options Design Discussion Unicode Support Acknowledgements Reference Header <boost/program_options/cmdline.hpp> Header <boost/program_options/config.hpp> Header <boost/program_options/environment_iterator.hpp> Header <boost/program_options/eof_iterator.hpp> Header <boost/program_options/errors.hpp> Header <boost/program_options/option.hpp> Header <boost/program_options/options_description.hpp> Header <boost/program_options/parsers.hpp> Header <boost/program_options/positional_options.hpp> Header <boost/program_options/value_semantic.hpp> Header <boost/program_options/variables_map.hpp> Header <boost/program_options/version.hpp> Introduction The program_options library allows program developers to obtain program options, that is (name, value) pairs from the user, via conventional methods such as command line and config file. Why would you use such a library, and why is it better than parsing your command line by straightforward hand-written code? It's easier. The syntax for declaring options is simple, and the library itself is small. Things like conversion of option values to desired type and storing into program variables are handled automatically. Error reporting is better. All the problems with the command line are reported, while hand-written code can just misparse the input. In addition, the usage message can be automatically generated, to avoid falling out of sync with the real list of options. Options can be read from anywhere. Sooner or later the command line will be not enough for your users, and you'll want config files or maybe even environment variables. These can be added without significant effort on your part. Now let's see some examples of the library usage in the the section called “Tutorial”."	"null"	"null"	"A library to obtain program options via conventional methods such as command line and config file. [Boost]"	"true"
"CLI"	"docopt.cpp"	"https://github.com/docopt/docopt.cpp"	"A library to generate option parser from docstring. [MIT/Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"364"	"40"	"43"	"GitHub - docopt/docopt.cpp: C++11 port of docopt Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 40 Star 364 Fork 43 docopt/docopt.cpp Code Issues 19 Pull requests 5 Pulse Graphs C++11 port of docopt 57 commits 4 branches 0 releases 11 contributors C++ 89.1% CMake 8.2% Python 2.7% C++ CMake Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-1 fix-2 jgrubb-travis master Nothing to show Nothing to show New pull request Latest commit c15f292 May 15, 2016 jaredgrubb Merge pull request #37 from rmpowell77/header_only … Header only Permalink Failed to load latest commit information. examples Add license files and README; add example.cpp as well Nov 6, 2013 .gitignore Add license files and README; add example.cpp as well Nov 7, 2013 .travis.yml Bumped CMake version to 3.1 Nov 26, 2015 CMakeLists.txt Revamped CMakeLists.txt Dec 26, 2015 LICENSE-Boost-1.0 Add license files and README; add example.cpp as well Nov 7, 2013 LICENSE-MIT Add license files and README; add example.cpp as well Nov 7, 2013 README.rst Simple typo fix: ""doctopt"" should be ""docopt"" May 27, 2015 docopt-config.cmake Revamped CMakeLists.txt Dec 26, 2015 docopt.cpp Moving more files into the _private.h file. This is because I noticed… Jan 24, 2016 docopt.h Header only changes. Jan 24, 2016 docopt_private.h Moving more files into the _private.h file. This is because I noticed… Jan 25, 2016 docopt_util.h Initial commit, based on docopt-py, revision 0.6.1-47-g64d3926 Nov 6, 2013 docopt_value.h Moving more files into the _private.h file. This is because I noticed… Jan 25, 2016 main.cpp Initial commit, based on docopt-py, revision 0.6.1-47-g64d3926 Nov 7, 2013 run_testcase.cpp Initial commit, based on docopt-py, revision 0.6.1-47-g64d3926 Nov 7, 2013 run_tests.py Enhancements: run_tests preparing corrected May 24, 2015 testcases.docopt Initial commit, based on docopt-py, revision 0.6.1-47-g64d3926 Nov 7, 2013 README.rst docopt.cpp: A C++11 Port docopt creates beautiful command-line interfaces Isn't it awesome how getopt (and boost::program_options for you fancy folk!) generate help messages based on your code?! These timeless functions have been around for decades and have proven we don't need anything better, right? Hell no! You know what's awesome? It's when the option parser is generated based on the beautiful help message that you write yourself! This way you don't need to write this stupid repeatable parser-code, and instead can write only the help message--the way you want it. docopt helps you create most beautiful command-line interfaces easily: #include ""docopt.h""  #include <iostream>  static const char USAGE[] = R""(Naval Fate.      Usage:       naval_fate ship new <name>...       naval_fate ship <name> move <x> <y> [--speed=<kn>]       naval_fate ship shoot <x> <y>       naval_fate mine (set|remove) <x> <y> [--moored | --drifting]       naval_fate (-h | --help)       naval_fate --version      Options:       -h --help     Show this screen.       --version     Show version.       --speed=<kn>  Speed in knots [default: 10].       --moored      Moored (anchored) mine.       --drifting    Drifting mine. )"";  int main(int argc, const char** argv) {     std::map<std::string, docopt::value> args         = docopt::docopt(USAGE,                          { argv + 1, argv + argc },                          true,               // show help if requested                          ""Naval Fate 2.0"");  // version string      for(auto const& arg : args) {         std::cout << arg.first <<  arg.second << std::endl;     }      return 0; } Beat that! The option parser is generated based on the docstring above that is passed to docopt::docopt function. docopt parses the usage pattern (""Usage: ..."") and option descriptions (lines starting with dash ""-"") and ensures that the program invocation matches the usage pattern; it parses options, arguments and commands based on that. The basic idea is that a good help message has all necessary information in it to make a parser. C++11 port details This is a port of the docopt.py module (https://github.com/docopt/docopt), and we have tried to maintain full feature parity (and code structure) as the original. This port is written in C++11 and also requires a good C++11 standard library (in particular, one with regex support). The following compilers are known to work with docopt: Clang 3.3 and later GCC 4.9 Visual C++ 2015 RC Note that GCC-4.8 will not work due to its missing the regex module. This port is licensed under the MIT license, just like the original module. However, we are also dual-licensing this code under the Boost License, version 1.0, as this is a popular C++ license. The licenses are similar and you are free to use this code under the terms of either license. The differences from the Python port are: the addition of a docopt_parse function, which does not terminate the program on error a docopt::value type to hold the various value types that can be parsed. We considered using boost::variant, but it seems better to have no external dependencies (beyond a good STL). because C++ is statically-typed and Python is not, we had to make some changes to the interfaces of the internal parse tree types. because std::regex does not have an equivalent to Python's regex.split, some of the regex's had to be restructured and additional loops used. API docopt::docopt(doc, argv, help /* =true */, version /* ="""" */, options_first /* =false */) docopt takes 2 required and 3 optional arguments: doc is a string that contains a help message that will be parsed to create the option parser. The simple rules of how to write such a help message are given in next sections. Here is a quick example of such a string (note that this example uses the ""raw string literal"" feature that was added to C++11): R""(Usage: my_program [-hso FILE] [--quiet | --verbose] [INPUT ...]  -h --help    show this -s --sorted  sorted output -o FILE      specify output file [default: ./test.txt] --quiet      print less text --verbose    print more text )"" argv is a vector of strings representing the args passed. Although main usually takes a (int argc, const char** argv) pair, you can pass the value {argv+1, argv+argc} to generate the vector automatically. (Note we skip the argv[0] argument!) Alternatively you can supply a list of strings like { ""--verbose"", ""-o"", ""hai.txt"" }. help, by default true, specifies whether the parser should automatically print the help message (supplied as doc) and terminate, in case -h or --help option is encountered (options should exist in usage pattern, more on that below). If you want to handle -h or --help options manually (as other options), set help=false. version, by default empty, is an optional argument that specifies the version of your program. If supplied, then, (assuming --version option is mentioned in usage pattern) when parser encounters the --version option, it will print the supplied version and terminate. version could be any printable object, but most likely a string, e.g. ""2.1.0rc1"". Note, when docopt is set to automatically handle -h, --help and --version options, you still need to mention them in usage pattern for this to work (also so your users to know about them!) options_first, by default false. If set to true will disallow mixing options and positional argument. I.e. after first positional argument, all arguments will be interpreted as positional even if the look like options. This can be used for strict compatibility with POSIX, or if you want to dispatch your arguments to other programs. The return value is a map<string, docopt::value> with options, arguments and commands as keys, spelled exactly like in your help message. Long versions of options are given priority. For example, if you invoke the top example as: naval_fate ship Guardian move 100 150 --speed=15  the return dictionary will be: {""--drifting"": false,    ""mine"": false,  ""--help"": false,        ""move"": true,  ""--moored"": false,      ""new"": false,  ""--speed"": ""15"",        ""remove"": false,  ""--version"": false,     ""set"": false,  ""<name>"": [""Guardian""], ""ship"": true,  ""<x>"": ""100"",           ""shoot"": false,  ""<y>"": ""150""} If any parsing error (in either the usage, or due to incorrect user inputs) is encountered, the program will exit with exit code -1. Note that there is another function that does not exit on error, and instead will propogate an exception that you can catch and process as you like. See the docopt.h file for information on the exceptions and usage: docopt::docopt_parse(doc, argv, help /* =true */, version /* =true */, options_first /* =false) Help message format Help message consists of 2 parts: Usage pattern, e.g.: Usage: my_program [-hso FILE] [--quiet | --verbose] [INPUT ...]  Option descriptions, e.g.: -h --help    show this -s --sorted  sorted output -o FILE      specify output file [default: ./test.txt] --quiet      print less text --verbose    print more text  Their format is described below; other text is ignored. Usage pattern format Usage pattern is a substring of doc that starts with usage: (case insensitive) and ends with a visibly empty line. Minimum example: """"""Usage: my_program  """""" The first word after usage: is interpreted as your program's name. You can specify your program's name several times to signify several exclusive patterns: """"""Usage: my_program FILE           my_program COUNT FILE  """""" Each pattern can consist of the following elements: <arguments>, ARGUMENTS. Arguments are specified as either upper-case words, e.g. my_program CONTENT-PATH or words surrounded by angular brackets: my_program <content-path>. --options. Options are words started with dash (-), e.g. --output, -o. You can ""stack"" several of one-letter options, e.g. -oiv which will be the same as -o -i -v. The options can have arguments, e.g. --input=FILE or -i FILE or even -iFILE. However it is important that you specify option descriptions if you want your option to have an argument, a default value, or specify synonymous short/long versions of the option (see next section on option descriptions). commands are words that do not follow the described above conventions of --options or <arguments> or ARGUMENTS, plus two special commands: dash ""-"" and double dash ""--"" (see below). Use the following constructs to specify patterns: [ ] (brackets) optional elements. e.g.: my_program [-hvqo FILE] ( ) (parens) required elements. All elements that are not put in [ ] are also required, e.g.: my_program --path=<path> <file>... is the same as my_program (--path=<path> <file>...). (Note, ""required options"" might be not a good idea for your users). | (pipe) mutually exclusive elements. Group them using ( ) if one of the mutually exclusive elements is required: my_program (--clockwise | --counter-clockwise) TIME. Group them using [ ] if none of the mutually-exclusive elements are required: my_program [--left | --right]. ... (ellipsis) one or more elements. To specify that arbitrary number of repeating elements could be accepted, use ellipsis (...), e.g. my_program FILE ... means one or more FILE-s are accepted. If you want to accept zero or more elements, use brackets, e.g.: my_program [FILE ...]. Ellipsis works as a unary operator on the expression to the left. [options] (case sensitive) shortcut for any options. You can use it if you want to specify that the usage pattern could be provided with any options defined below in the option-descriptions and do not want to enumerate them all in usage-pattern. ""[--]"". Double dash ""--"" is used by convention to separate positional arguments that can be mistaken for options. In order to support this convention add ""[--]"" to your usage patterns. ""[-]"". Single dash ""-"" is used by convention to signify that stdin is used instead of a file. To support this add ""[-]"" to your usage patterns. ""-"" acts as a normal command. If your pattern allows to match argument-less option (a flag) several times: Usage: my_program [-v | -vv | -vvv]  then number of occurrences of the option will be counted. I.e. args['-v'] will be 2 if program was invoked as my_program -vv. Same works for commands. If your usage patterns allows to match same-named option with argument or positional argument several times, the matched arguments will be collected into a list: Usage: my_program <file> <file> --path=<path>...  I.e. invoked with my_program file1 file2 --path=./here --path=./there the returned dict will contain args['<file>'] == ['file1', 'file2'] and args['--path'] == ['./here', './there']. Option descriptions format Option descriptions consist of a list of options that you put below your usage patterns. It is necessary to list option descriptions in order to specify: synonymous short and long options, if an option has an argument, if option's argument has a default value. The rules are as follows: Every line in doc that starts with - or -- (not counting spaces) is treated as an option description, e.g.: Options:   --verbose   # GOOD   -o FILE     # GOOD Other: --bad  # BAD, line does not start with dash ""-""  To specify that option has an argument, put a word describing that argument after space (or equals ""="" sign) as shown below. Follow either <angular-brackets> or UPPER-CASE convention for options' arguments. You can use comma if you want to separate options. In the example below, both lines are valid, however you are recommended to stick to a single style.: -o FILE --output=FILE       # without comma, with ""="" sign -i <file>, --input <file>   # with comma, without ""="" sing  Use two spaces to separate options with their informal description: --verbose More text.   # BAD, will be treated as if verbose option had                        # an argument ""More"", so use 2 spaces instead -q        Quit.        # GOOD -o FILE   Output file. # GOOD --stdout  Use stdout.  # GOOD, 2 spaces  If you want to set a default value for an option with an argument, put it into the option-description, in form [default: <my-default-value>]: --coefficient=K  The K coefficient [default: 2.95] --output=FILE    Output file [default: test.txt] --directory=DIR  Some directory [default: ./]  If the option is not repeatable, the value inside [default: ...] will be interpreted as string. If it is repeatable, it will be splited into a list on whitespace: Usage: my_program [--repeatable=<arg> --repeatable=<arg>]                      [--another-repeatable=<arg>]...                      [--not-repeatable=<arg>]  # will be ['./here', './there'] --repeatable=<arg>          [default: ./here ./there]  # will be ['./here'] --another-repeatable=<arg>  [default: ./here]  # will be './here ./there', because it is not repeatable --not-repeatable=<arg>      [default: ./here ./there]  Examples We have an extensive list of examples which cover every aspect of functionality of docopt. Try them out, read the source if in doubt. There are also very intersting applications and ideas at that page. Check out the sister project for more information! Subparsers, multi-level help and huge applications (like git) If you want to split your usage-pattern into several, implement multi-level help (with separate help-screen for each subcommand), want to interface with existing scripts that don't use docopt, or you're building the next ""git"", you will need the new options_first parameter (described in API section above). To get you started quickly we implemented a subset of git command-line interface as an example: examples/git Compiling the example / Running the tests The original Python module includes some language-agnostic unit tests, and these can be run with this port as well. The tests are a Python driver that uses the testcases.docopt file to then invoke a C++ test case runner (run_testcase.cpp): $ clang++ --std=c++11 --stdlib=libc++ docopt.cpp run_testcase.cpp -o run_testcase $ python run_tests.py PASS (175)  You can also compile the example shown at the start (included as example.cpp): $ clang++ --std=c++11 --stdlib=libc++ -I . docopt.cpp examples/naval_fate.cpp -o naval_fate $ ./naval_fate --help  [ ... ] $ ./naval_fate ship Guardian move 100 150 --speed=15 --drifting: false --help: false --moored: false --speed: ""15"" --version: false <name>: [""Guardian""] <x>: ""100"" <y>: ""150"" mine: false move: true new: false remove: false set: false ship: true shoot: false  Development Comments and suggestions are very welcome! If you find issues, please file them and help improve our code! Please note, however, that we have tried to stay true to the original Python code. If you have any major patches, structural changes, or new features, we might want to first negotiate these changes into the Python code first. However, bring it up! Let's hear it! Changelog docopt follows semantic versioning. The first release with stable API will be 1.0.0 (soon). 0.6.1 The initial C++ port of docopt.py Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/docopt/docopt.cpp"	"A library to generate option parser from docstring. [MIT/Boost]"	"true"
"CLI"	"gflags"	"https://gflags.github.io/gflags/"	"Commandline flags module for C++. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"477"	"59"	"193"	"GitHub - gflags/gflags: The gflags package contains a C++ library that implements commandline flags processing. It includes built-in support for standard types such as string and the ability to define flags in the source file in which they are used. Online documentation available at: Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 59 Star 477 Fork 193 gflags/gflags Code Issues 20 Pull requests 0 Pulse Graphs The gflags package contains a C++ library that implements commandline flags processing. It includes built-in support for standard types such as string and the ability to define flags in the source file in which they are used. Online documentation available at: https://gflags.github.io/gflags/ 317 commits 4 branches 22 releases 14 contributors C++ 74.9% CMake 20.0% C 1.9% Shell 1.8% Python 1.4% C++ CMake C Shell Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bugfix/#51-memory-leaks gh-pages master release Nothing to show v2.1.2 v2.1.1 v2.1.0 v2.0 v1.7 v1.6 v1.5 v1.4 v1.3 v1.2 v1.1 v1.0rc2 v1.0rc1 v0.9 v0.8 v0.7 v0.6 v0.5 v0.4 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit 546819b Jun 28, 2016 schuhschuh committed on GitHub Merge pull request #152 from Liuchang0812/master … fix: Consider Windows-style LRLF in flag parsing Permalink Failed to load latest commit information. cmake cmake: Rename targets to gflags[_nothreads]_(static|shared), support Mar 1, 2016 doc @ ea1cc83 mod: Update doc with new find_package COMPONENTS or subproject use Mar 1, 2016 src fix bug about LRLF Jun 28, 2016 test fix test compilation Apr 26, 2016 .gitattributes Add .gitattributes file to normalize all files to LF. Mar 19, 2014 .gitignore git: Add CMakeLists.txt.user Qt Creator configuration to ignore list Mar 1, 2016 .gitmodules #112 Use HTTPS protocol for ""doc"" submodule to not require SSH authen… Mar 31, 2015 AUTHORS.txt Enable packaging of library using CPack. Mar 20, 2014 BUILD Add gendir to the include path so that building with bazel doesn't May 10, 2016 CMakeLists.txt fix: Change SOVERSION to <major>.<minor> for 2.x release versions Mar 4, 2016 COPYING.txt Enable packaging of library using CPack. Mar 20, 2014 ChangeLog.txt doc: Add ChangeLog entries for release 2.1.2 Mar 24, 2015 INSTALL.md fix #151: Ubuntu package name in INSTALL instructions Jun 1, 2016 README.md doc: Correct year in README Mar 24, 2015 README.md 24 March 2015 I've just released gflags 2.1.2. This release completes the namespace change fixes. In particular, it restores binary ABI compatibility with release version 2.0. The deprecated ""google"" namespace is by default still kept as primary namespace while symbols are imported into the new ""gflags"" namespace. This can be overridden using the CMake variable GFLAGS_NAMESPACE. Other fixes of the build configuration are related to the (patched) CMake modules FindThreads.cmake and CheckTypeSize.cmake. These have been removed and instead the C language is enabled again even though gflags is written in C++ only. This release also marks the complete move of the gflags project from Google Code to GitHub. Email addresses of original issue reporters got lost in the process. Given the age of most issue reports, this should be negligable. Please report any further issues using the GitHub issue tracker. 30 March 2014 I've just released gflags 2.1.1. This release fixes a few bugs in the configuration of gflags_declare.h and adds a separate GFLAGS_INCLUDE_DIR CMake variable to the build configuration. Setting GFLAGS_NAMESPACE to ""google"" no longer changes also the include path of the public header files. This allows the use of the library with other Google projects such as glog which still use the deprecated ""google"" namespace for the gflags library, but include it as ""gflags/gflags.h"". 20 March 2014 I've just released gflags 2.1. The major changes are the use of CMake for the build configuration instead of the autotools and packaging support through CPack. The default namespace of all C++ symbols is now ""gflags"" instead of ""google"". This can be configured via the GFLAGS_NAMESPACE variable. This release compiles with all major compilers without warnings and passed the unit tests on Ubuntu 12.04, Windows 7 (Visual Studio 2008 and 2010, Cygwin, MinGW), and Mac OS X (Xcode 5.1). The SVN repository on Google Code is now frozen and replaced by a Git repository such that it can be used as Git submodule by projects. The main hosting of this project remains at Google Code. Thanks to the distributed character of Git, I can push (and pull) changes from both GitHub and Google Code in order to keep the two public repositories in sync. When fixing an issue for a pull request through either of these hosting platforms, please reference the issue number as described here. For the further development, I am following the Git branching model with feature branch names prefixed by ""feature/"" and bugfix branch names prefixed by ""bugfix/"", respectively. Binary and source packages are available on GitHub. 14 January 2014 The migration of the build system to CMake is almost complete. What remains to be done is rewriting the tests in Python such they can be executed on non-Unix platforms and splitting them up into separate CTest tests. Though merging these changes into the master branch yet remains to be done, it is recommended to already start using the cmake-migration branch. 20 April 2013 More than a year has past since I (Andreas) took over the maintenance for gflags. Only few minor changes have been made since then, much to my regret. To get more involved and stimulate participation in the further development of the library, I moved the project source code today to GitHub. I believe that the strengths of Git will allow for better community collaboration as well as ease the integration of changes made by others. I encourage everyone who would like to contribute to send me pull requests. Git's lightweight feature branches will also provide the right tool for more radical changes which should only be merged back into the master branch after these are complete and implement the desired behavior. The SVN repository remains accessible at Google Code and I will keep the master branch of the Git repository hosted at GitHub and the trunk of the Subversion repository synchronized. Initially, I was going to simply switch the Google Code project to Git, but in this case the SVN repository would be frozen and force everyone who would like the latest development changes to use Git as well. Therefore I decided to host the public Git repository at GitHub instead. Please continue to report any issues with gflags on Google Code. The GitHub project will only be used to host the Git repository. One major change of the project structure I have in mind for the next weeks is the migration from autotools to CMake. Check out the (unstable!) cmake-migration branch on GitHub for details. 25 January 2012 I've just released gflags 2.0. The google-gflags project has been renamed to gflags. I (csilvers) am stepping down as maintainer, to be replaced by Andreas Schuh. Welcome to the team, Andreas! I've seen the energy you have around gflags and the ideas you have for the project going forward, and look forward to having you on the team. I bumped the major version number up to 2 to reflect the new community ownership of the project. All the changes are related to the renaming. There are no functional changes from gflags 1.7. In particular, I've kept the code in the namespace google, though in a future version it should be renamed to gflags. I've also kept the /usr/local/include/google/ subdirectory as synonym of /usr/local/include/gflags/, though the former name has been obsolete for some time now. 18 January 2011 The google-gflags Google Code page has been renamed to gflags, in preparation for the project being renamed to gflags. In the coming weeks, I'll be stepping down as maintainer for the gflags project, and as part of that Google is relinquishing ownership of the project; it will now be entirely community run. The name change reflects that shift. 20 December 2011 I've just released gflags 1.7. This is a minor release; the major change is that CommandLineFlagInfo now exports the address in memory where the flag is located. There has also been a bugfix involving very long --help strings, and some other minor changes. 29 July 2011 I've just released gflags 1.6. The major new feature in this release is support for setting version info, so that --version does something useful. One minor change has required bumping the library number: ReparseCommandlineFlags now returns void instead of int (the int return value was always meaningless). Though I doubt anyone ever used this (meaningless) return value, technically it's a change to the ABI that requires a version bump. A bit sad. There's also a procedural change with this release: I've changed the internal tools used to integrate Google-supplied patches for gflags into the opensource release. These new tools should result in more frequent updates with better change descriptions. They will also result in future ChangeLog entries being much more verbose (for better or for worse). See the ChangeLog for a full list of changes for this release. 24 January 2011 I've just released gflags 1.5. This release has only minor changes from 1.4, including some slightly better reporting in --help, and an new memory-cleanup function that can help when running gflags-using libraries under valgrind. The major change is to fix up the macros (DEFINE_bool and the like) to work more reliably inside namespaces. If you have not had a problem with these macros, and don't need any of the other changes described, there is no need to upgrade. See the ChangeLog for a full list of changes for this release. 11 October 2010 I've just released gflags 1.4. This release has only minor changes from 1.3, including some documentation tweaks and some work to make the library smaller. If 1.3 is working well for you, there's no particular reason to upgrade. 4 January 2010 I've just released gflags 1.3. gflags now compiles under MSVC, and all tests pass. I really never thought non-unix-y Windows folks would want gflags, but at least some of them do. The major news, though, is that I've separated out the python package into its own library, python-gflags. If you're interested in the Python version of gflags, that's the place to get it now. 10 September 2009 I've just released gflags 1.2. The major change from gflags 1.1 is it now compiles under MinGW (as well as cygwin), and all tests pass. I never thought Windows folks would want unix-style command-line flags, since they're so different from the Windows style, but I guess I was wrong! The other changes are minor, such as support for --htmlxml in the python version of gflags. 15 April 2009 I've just released gflags 1.1. It has only minor changes fdrom gflags 1.0 (see the ChangeLog for details). The major change is that I moved to a new system for creating .deb and .rpm files. This allows me to create x86_64 deb and rpm files. In the process of moving to this new system, I noticed an inconsistency: the tar.gz and .rpm files created libraries named libgflags.so, but the deb file created libgoogle-gflags.so. I have fixed the deb file to create libraries like the others. I'm no expert in debian packaging, but I believe this has caused the package name to change as well. Please let me know (at [mailto:google-gflags@googlegroups.com google-gflags@googlegroups.com]) if this causes problems for you -- especially if you know of a fix! I would be happy to change the deb packages to add symlinks from the old library name to the new (libgoogle-gflags.so -> libgflags.so), but that is beyond my knowledge of how to make .debs. If you've tried to install a .rpm or .deb and it doesn't work for you, let me know. I'm excited to finally have 64-bit package files, but there may still be some wrinkles in the new system to iron out. 1 October 2008 gflags 1.0rc2 was out for a few weeks without any issues, so gflags 1.0 is now released. This is much like gflags 0.9. The major change is that the .h files have been moved from /usr/include/google to /usr/include/gflags. While I have backwards-compatibility forwarding headeds in place, please rewrite existing code to say    #include <gflags/gflags.h>  instead of    #include <google/gflags.h>  I've kept the default namespace to google. You can still change with with the appropriate flag to the configure script (./configure --help to see the flags). If you have feedback as to whether the default namespace should change to gflags, which would be a non-backwards-compatible change, send mail to google-gflags@googlegroups.com! Version 1.0 also has some neat new features, like support for bash commandline-completion of help flags. See the ChangeLog for more details. If I don't hear any bad news for a few weeks, I'll release 1.0-final. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gflags/gflags"	"Commandline flags module for C++. [BSD]"	"true"
"CLI"	"Ncurses"	"http://invisible-island.net/ncurses/"	"A terminal user interfaces. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"NCURSES – New Curses http://invisible-island.net/ Copyright © 1996-2013,2014 by Thomas E. Dickey NCURSES – New Curses (top) Synopsis Stable release FAQ History Foundations... My Involvement Change-logs Subsets and otherwise Ada95 binding test/sample programs tack Download Download ncurses Download tack Terminal Database MinGW Port Other Resources Packages Comments Synopsis See the ncurses release announcement or the FAQ History Foundations... Ncurses has an involved history: The package was originated as pcurses, written by Pavel Curtis around 1982, maintained by various people through 1986. It was later polished (e.g., ANSI prototypes, reformatted, some bug fixes, but still essentially the same package). and re-issued as ncurses 1.8.1 in late 1993 by Zeyd Ben-Halim. Subsequent work (through 1.8.8) was driven by Eric Raymond, who eradicated previous signs of authorship with the current copyright notice between 1.8.7 and 1.8.8, early 1995. Later, this extended to incorporating the forms and menus libraries written by Juergen Pfeifer, and a panel library written by Warren Tucker. Adding these libraries almost doubled the size of the package. There are even a few chunks from BSD curses (in tset and part of the logic which reads termcap data for tgetent). Ncurses is the work of dozens of people. Some are listed in the credits. My Involvement My involvement with ncurses dates back to the 1.8.1 release. I was looking for an avenue to make a SystemV-based curses support resizable windows (e.g., in an xterm). This is easily achievable with BSD-curses, but not with the distributed versions of SystemV curses. Ncurses 1.8.1 was too immature (dumped core, was not portable, etc). I revisited it in mid-1994, after an initial pass of making ded auto-configured. Ncurses 1.8.5 was advertised as 100% SVr4 compatible. I designed a minimal interface for resizeterm, proposing it to Zeyd, who promised it would be in 1.8.6 (it wasn't). Coming back to 1.8.7, I found that the color support was broken (specifically for add, which I had colorized using PDCurses with MS-DOS). Since the package is useless to me unless it implements faithfully the SVr4 interface, I approached Eric in early 1995 with my growing list of problems. For more information, see the discussion of the ncurses license. Since then, I've corrected the implementation of color, terminal modes, implemented resizing, as well as the configuration scripts, and resolved numerous reliability and portability issues. There is further work to do: the screen optimization has not been rigorously tested, there are interesting problems to work out with internationalization, etc. Change-logs Here are links to the changelog for ncurses: the changelog in html form (very large) NEWS.gz (gzip'd copy of the actual changelog) Subsets of the Distribution Starting with release 5.8, the source includes scripts which automate the process of building tarballs of useful subsets. These are Ada95 binding test/sample programs The tack program is commonly distributed with ncurses, though it is not part of ncurses. Download Download ncurses The ncurses source (gzip'd tar) Development rollup and incremental diff's Development ncurses patches since previous release The ncurses source (gzip'd tar via http) Development ncurses source (gzip'd tar via http) Download tack The tack source (gzip'd tar) The tack source (gzip'd tar via http) Development tack source (gzip'd tar via http) Terminal Database The current terminfo/termcap sources are available via http. They require tic/infocmp from ncurses 5.7 or later, since they use a feature which was broken in previous releases. Here are links to a browsable version of the terminfo database: The terminfo database Sections of the database An index of the history-section The terminfo database (colored/large) Sections of the database An index of the history-section and here are the actual files: Development terminfo source (gzip'd text via http) Development termcap source (gzip'd text via http) You may also find the discussion of tctest useful. MinGW Port Beginning with ncurses 5.8, ncurses has been ported to Win32 console using MinGW. I have built it both on Windows7 as well as via cross-compiling from FreeBSD, Fedora and Debian. From the latter, I make occasional builds which you may find useful: 32-bit 64-bit Other Resources Stable releases are mentioned on gnu.org. Packages OSWatershed.org Linux RPMs Arch Linux Debian Gentoo Ubuntu FreeBSD base devel/ncurses and devel/ncursesw NetBSD pkgsrc MacPorts UNIX Packages (around page 9 of the Package Matrix) OpenCSW Comments Programmer's Guide to NCurses I helped with this, as the technical editor."	"null"	"null"	"A terminal user interfaces. [MIT]"	"true"
"CLI"	"termbox"	"https://github.com/nsf/termbox"	"A C library for writing text-based user interfaces. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"855"	"60"	"71"	"GitHub - nsf/termbox: Library for writing text-based user interfaces Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 855 Fork 71 nsf/termbox Code Issues 4 Pull requests 1 Pulse Graphs Library for writing text-based user interfaces http://code.google.com/p/termbox 232 commits 1 branch 0 releases 30 contributors C 67.3% C++ 18.8% Python 13.9% C C++ Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 7f76940 Jul 10, 2016 nsf Use proper mouse enter/exit sequence on built-in database as well. … Go implemention does it the same way. Permalink Failed to load latest commit information. src Use proper mouse enter/exit sequence on built-in database as well. Jul 10, 2016 tools Zero is not required at the end of funcs sequence. Jul 29, 2013 .gitignore Move termboxmodule.pyx to its own directory. Aug 3, 2013 COPYING Update README and COPYING. Aug 5, 2013 README.rst Add a link to D wrapper Mar 5, 2016 package.json fixed source paths May 7, 2015 setup.py Workaround for changes in 3.4 CPython Sep 15, 2014 test_termboxmodule.py test_termboxmodule: Use defined API for colors Jun 21, 2015 waf Update waf. Fixes #39. Sep 15, 2014 wscript Port wide char display hack from termbox-go Mar 10, 2015 README.rst Termbox is a library that provides minimalistic API which allows the programmer to write text-based user interfaces. It is based on a very simple abstraction. The main idea is viewing terminals as a table of fixed-size cells and input being a stream of structured messages. Would be fair to say that the model is inspired by windows console API. The abstraction itself is not perfect and it may create problems in certain areas. The most sensitive ones are copy & pasting and wide characters (mostly Chinese, Japanese, Korean (CJK) characters). When it comes to copy & pasting, the notion of cells is not really compatible with the idea of text. And CJK runes often require more than one cell to display them nicely. Despite the mentioned flaws, using such a simple model brings benefits in a form of simplicity. And KISS principle is important. At this point one should realize, that CLI (command-line interfaces) aren't really a thing termbox is aimed at. But rather pseudo-graphical user interfaces. INSTALLATION Termbox comes with a waf-based build scripts. In order to configure, build and install it, do the following: ./waf configure --prefix=/usr                                (configure) ./waf                                                        (build) ./waf install --destdir=DESTDIR                              (install)  By default termbox will install the header file and both shared and static libraries. If you want to install a shared library or static library alone, use the following as an install command: ./waf install --targets=termbox_shared --destdir=PREFIX      (shared library)  or: ./waf install --targets=termbox_static --destdir=PREFIX      (static library)  PYTHON In order to install the python module, use the following command (as root or via sudo): python setup.py install  for Python 3: python3 setup.py install  GETTING STARTED Termbox's interface only consists of 12 functions: tb_init() // initialization tb_shutdown() // shutdown  tb_width() // width of the terminal screen tb_height() // height of the terminal screen  tb_clear() // clear buffer tb_present() // sync internal buffer with terminal  tb_put_cell() tb_change_cell() tb_blit() // drawing functions  tb_select_input_mode() // change input mode tb_peek_event() // peek a keyboard event tb_poll_event() // wait for a keyboard event  See src/termbox.h header file for full detail. LINKS http://pecl.php.net/package/termbox - PHP Termbox wrapper https://github.com/nsf/termbox-go - Go pure Termbox implementation https://github.com/gchp/rustbox - Rust Termbox wrapper https://github.com/fouric/cl-termbox - Common Lisp Termbox wrapper https://github.com/zyedidia/termbox-d - D Termbox wrapper If you want me to add your project here, send me a pull request or drop a note via email, you can find my email below. BUGS & QUESTIONS Report bugs to the https://github.com/nsf/termbox issue tracker. Send rants and questions to me: no.smile.face@gmail.com. CHANGES v1.1.0 (not released yet): API: tb_width() and tb_height() are guaranteed to be negative if the termbox wasn't initialized. API: Output mode switching is now possible, adds 256-color and grayscale color modes. API: Better tb_blit() function. Thanks, Gunnar Zötl <gz@tset.de>. Bug fixes in code and documentation. v1.0.0: Remove the Go directory. People generally know about termbox-go and where to look for it. Remove old terminfo-related python scripts and backport the new one from termbox-go. Remove cmake/make-based build scripts, use waf. Add a simple terminfo database parser. Now termbox prefers using the terminfo database if it can be found. Otherwise it still has a fallback built-in database for most popular terminals. Some internal code cleanups and refactorings. The most important change is that termbox doesn't leak meaningless exported symbols like 'keys' and 'funcs' now. Only the ones that have 'tb_' as a prefix are being exported. API: Remove unsigned ints, use plain ints instead. API: Rename UTF-8 functions 'utf8_*' -> 'tb_utf8_*'. API: TB_DEFAULT equals 0 now, it means you can use attributes alones assuming the default color. API: Add TB_REVERSE. API: Add TB_INPUT_CURRENT. Move python module to its own directory and update it due to changes in the termbox library. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nsf/termbox"	"A C library for writing text-based user interfaces. [BSD]"	"true"
"Compression"	"bzip2"	"http://www.bzip.org/"	"A freely available, patent free, high-quality data compressor. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"bzip2 : Home [ <Home> | Documentation | Downloads ] bzip2 and libbzip2 What is bzip2? bzip2 is a freely available, patent free (see below), high-quality data compressor. It typically compresses files to within 10% to 15% of the best available techniques (the PPM family of statistical compressors), whilst being around twice as fast at compression and six times faster at decompression. The current version is 1.0.6, released 20 Sept 2010. Version 1.0.6 removes a potential security vulnerability, CVE-2010-0405, so all users are recommended to upgrade immediately. Why would I want to use it? Because it compresses well. So it packs more stuff into your overfull disk drives, distribution CDs, backup tapes, USB sticks, etc. And/or it reduces your customer download times, long distance network traffic, etc. It's not the world's fastest compressor, but it's still fast enough to be very useful. Because it's open-source (BSD-style license), and, as far as I know, patent-free. (To the best of my knowledge. I can't afford to do a full patent search, so I can't guarantee this. Caveat emptor). So you can use it for whatever you like. Naturally, the source code is part of the distribution. Because it supports (limited) recovery from media errors. If you are trying to restore compressed data from a backup tape or disk, and that data contains some errors, bzip2 may still be able to decompress those parts of the file which are undamaged. Because you already know how to use it. bzip2's command line flags are similar to those of GNU Gzip, so if you know how to use gzip, you know how to use bzip2. Because it's very portable. It should run on any 32 or 64-bit machine with an ANSI C compiler. The distribution should compile unmodified on Unix and Win32 systems. Earlier versions have been ported with little difficulty to a large number of weird and wonderful systems. The code is organised as a library with a programming interface. The bzip2 program itself is a client of the library. You can use the library in your own programs, to directly read and write .bz2 files, or even just to compress data in memory using the bzip2 algorithms. Copyright © 1996 - 2016  julian@bzip.org Hosting kindly donated by Mythic Beasts"	"null"	"null"	"A freely available, patent free, high-quality data compressor. [BSD]"	"true"
"Compression"	"doboz"	"https://bitbucket.org/attila_afra/doboz/overview"	"Compression library with very fast decompression. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"attila_afra / Doboz   — Bitbucket  Bitbucket Features Pricing owner/repository English English 日本語 Sign up Log in Doboz Actions Clone Compare Fork Navigation Overview Source Commits Branches Pull requests 4 Issues Wiki Downloads Settings HTTPS HTTPS SSH Need help cloning? Learn how to clone a repository. Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. Attila Áfra Doboz Overview Clone in SourceTree Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. HTTPS HTTPS SSH Last updated 2014-08-06 Language C++ Access level Read 1 Branch 1 Tag 1 Fork 5 Watchers There isn't a README yet A README file tells people where to start and how to contribute. Unlimited private and public hosted repositories. Free for small teams! Sign up for free Close Recent activity Don't depend on unaligned access Issue #5 created in attila_afra/doboz nemequ · getSizeCodedSize optimization Issue #4 created in attila_afra/doboz Anonymous · Decompression can access memory outside the buffer it is provided Issue #3 created in attila_afra/doboz nemequ · Consider if Intel's zlib improvements can be applied Issue #2 created in attila_afra/doboz Janus Troelsen · doboz::Compressor::getMaxCompressedSize can return less than doboz::Compressor::compress uses Issue #1 updated in attila_afra/doboz Attila Áfra · 1 commit Pushed to attila_afra/doboz c57b710 Fixed getMaxCompressedSize Attila Áfra · doboz::Compressor::getMaxCompressedSize can return less than doboz::Compressor::compress uses Issue #1 commented on in attila_afra/doboz nemequ · doboz::Compressor::getMaxCompressedSize can return less than doboz::Compressor::compress uses Issue #1 created in attila_afra/doboz nemequ · attila_afra/doboz Repository watched Michael Williams · attila_afra/doboz Repository watched evans80 · attila_afra/doboz Repository watched website_scraping · Blog Support Plans & pricing Documentation API Site status Version info Terms of service Privacy policy English Git 2.7.4.1.g5468f9e Mercurial 3.6.3 Django 1.7.11 Python 2.7.3 b7520e3d05e9 / b7520e3d05e9 @ app-106 JIRA Software Confluence Bamboo SourceTree HipChat Atlassian Help Online help Learn Git Keyboard shortcuts Latest features Bitbucket tutorials Site status Support"	"null"	"null"	"Compression library with very fast decompression. [zlib]"	"true"
"Compression"	"PhysicsFS"	"https://icculus.org/physfs/"	"A library to provide abstract access to various archives. It is intended for use in video games, and the design was somewhat inspired by Quake 3's file subsystem. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PhysicsFS PhysicsFS October 22nd, 2012: 2.0.3 released! PhysicsFS is a library to provide abstract access to various archives. It is intended for use in video games, and the design was somewhat inspired by Quake 3's file subsystem. The programmer defines a ""write directory"" on the physical filesystem. No file writing done through the PhysicsFS API can leave that write directory, for security. For example, an embedded scripting language cannot write outside of this path if it uses PhysFS for all of its I/O, which means that untrusted scripts can run more safely. Symbolic links can be disabled as well, for added safety. For file reading, the programmer lists directories and archives that form a ""search path"". Once the search path is defined, it becomes a single, transparent hierarchical filesystem. This makes for easy access to ZIP files in the same way as you access a file directly on the disk, and it makes it easy to ship a new archive that will override a previous archive on a per-file basis. Finally, PhysicsFS gives you platform-abstracted means to determine if CD-ROMs are available, the user's home directory, where in the real filesystem your program is running, etc. To explain better, you have two zipfiles, one has these files: music/intro.mid graphics/splashscreen.bmp mainconfig.cfg ...the other's got these: music/hero.mid maps/desert.map ...and, finally, in your game's real directory: maps/city.map graphics/gun.bmp When you create the search path in PhysicsFS with those three components, and ask for what's in the ""music"" directory, you are told: intro.mid hero.mid ...in the maps directory: desert.map city.map ...in the graphics directory: splashscreen.bmp gun.bmp ...and, finally, in the root (toplevel) directory: maps music graphics mainconfig.cfg The programmer does not know and does not care where each of these files came from, and what sort of archive (if any) is storing them. But if he needs to know, he can find out through the PhysicsFS API. Furthermore, he can take comfort in knowing that those untrusted scripts we mentioned earlier can't access any other files than these. The file entries ""."" and "".."" are explicitly forbidden in PhysicsFS. Places PhysicsFS can be found in use: The Build Engine can optionally be compiled with PhysicsFS support, which is good, because its standard packfile format offers no compression or long filenames. ParaGUI is a cross platform toolkit built on Simple Directmedia Layer. That library has, among other useful stuff, a C++ wrapper for PhysicsFS. Here is an API reference for their interface to PhysicsFS. SDL_sound comes with a technology demonstration program, playsound, that is a generalized sound file playback program. playsound can use PhysicsFS to stream audio out of archive files on-the-fly. Falling Block Game is a Tetris-style game that uses PhysicsFS under the hood. Excido is a 3D arcade game using PhysicsFS. Tales of Middle Earth is an Angband-based RPG that uses PhysicsFS. Dead Meat is a Bomberman clone with PhysicsFS support. netPanzer, a multiplayer tactical warfare game, utilizes PhysicsFS. Z-Raid is a River Raid clone using PhysicsFS on PocketPC devices! Final Frontier Trader is a 2D single player space strategy, combat, and trading game powered by PhysicsFS. Yac3De is a 3D engine that is using PhysicsFS to access Doom3 pakfiles in order to load their maps. The maya2q3 plugin uses PhysicsFS to load shader resources from Quake 3 packages. MindBender uses PhysicsFS for resource management. Lincity-NG is a highly-polished SimCity clone that makes use of PhysicsFS. Project Xenocide uses PhysicsFS for their data management. Warzone 2100 makes use of PhysicsFS so modders can use standard .zip processing utilities. SuperTux is a side-scroller using PhysicsFS. The Mana World makes use of PhysicsFS. LÖVE uses PhysicsFS behind the scenes. Daimonin is an MMORPG that uses PhysicsFS. Puzzle Quest for the iPhone appears to use PhysicsFS. Seventh Sense is using PhysicsFS for playing Lone Wolf adventure books on a computer. The Legend of Mazzeroth, a 2D isometric RPG, uses PhysicsFS. Allegro 5.0 provides a PhysicsFS addon. Shank, Klei Entertainment's side-scrolling beat-em-up, uses PhysicsFS, ported to various game consoles. Dungeons of Dredmor dropped PhysicsFS into the game at a moment's notice, enabling modders to go crazy. Polycode is an open source, cross-platform framework that uses PhysicsFS for file management. Battle Brothers is a strategy/RPG hybrid that uses PhysicsFS. PhysFS++ is a third-party C++ wrapper around the PhysicsFS API. Probably other software uses PhysicsFS. If you know of one, drop me a line. Operating Systems and distros known to provide PhysicsFS: Ubuntu. Debian. Gentoo. Fedora Core. FreeBSD. Mandriva Linux. SourceMage. ALTLinux. Arch Linux. Zenwalk Linux. OpenSUSE. Homebrew. MOPSLinux. Lunar Linux. Probably others. If you know of one, drop me a line. What works: Support for .ZIP files (PkZip/Info-ZIP/WinZip compatible). version 1.1+: support for .7z files (7zip/lzma). Support for the Build Engine's GRP format. Support for Quake 1 and Quake 2's PAK file format. Support for Descent 1 and Descent 2's HOG file format. Support for Descent 1 and Descent 2's MVL file format. Support for Doom WAD files. Support for access to the native filesystem. version 1.1+: Fully supports Unicode filenames. Compiles/runs on GNU/Linux (x86, PPC, MIPS, Sparc, Alpha, Itanium, and x86-64 tested; gcc). Compiles/runs on Windows XP and later (x86 and x64 tested; Visual Studio, Cygwin, and MinGW). Compiles/runs on Mac OS X (x86, PPC, and x86-64 tested; gcc and clang). Compiles/runs on iOS (iPhone, iPad tested; xcode). Compiles/runs on BeOS, YellowTab, Zeta, and Haiku (x86 tested; gcc). Compiles/runs on generic Unix, like FreeBSD, OpenBSD, Solaris, etc (x86 and Alpha tested; gcc). up to version 1.0: Compiles/runs on MacOS 8/9 (PPC tested; CodeWarrior 6). up to version 2.0: Compiles/runs on Windows 95 and later (x86 and x64 tested; Visual Studio, Cygwin, and MinGW). up to version 2.0: Compiles/runs on OS/2 Warp (x86 tested; EMX). up to version 2.0: Compiles/runs on Microsoft PocketPC. Third parties have reported easily porting PhysicsFS to PlayStation 2, PlayStation 3, and Xbox360. May compile and run elsewhere with little to no modification. Success stories and patches are welcome. What doesn't work: Other stuff in the docs/TODO.txt file. Contributions of other ports are, of course, welcome. License: PhysicsFS is licensed under the zlib license. Documentation: A Doxygen-generated API reference can be found here (or here for the development branch). You can generate your own HTML, manpage, LaTeX, RTF, etc documents with this program; download the PhysicsFS source and use the included Doxyfile. Some kind folks put together a brief PhysicsFS tutorial. Downloads: Prepackaged source code: Here is the download directory. You can find official source code releases here. "".tar.gz"" files are like ZIP files, and can be unarchived by WinZip and Stuffit Expander. Here is a real-time listing of changes between versions. We no longer do binary packages for several reasons. Please build from source. Downloading with Mercurial: PhysicsFS's source code may be downloaded using Mercurial (aka: ""hg""). Hg allows you to get up-to-the-minute fixes and enhancements; as a developer works on a source tree, you can use hg to mirror that source tree instead of waiting for an official release. Please look at the Mercurial website for more information on using hg, where you can also download software for Mac OS X, Windows, and Unix systems. PhysicsFS is no longer hosted in a CVS or Subversion repository. You have to use hg or wait for an official release. Here is the web interface to PhysicsFS's Mercurial repository. To download PhysicsFS via Mercurial: hg clone http://hg.icculus.org/icculus/physfs/ ...or, for the stable (non-development) branch: hg clone -r stable-2.0 http://hg.icculus.org/icculus/physfs/ ...or, for the obsolete stable 1.0 branch: hg clone -r stable-1.0 http://hg.icculus.org/icculus/physfs/ Mailing list: There is a mailing list for PhysicsFS available. To subscribe or view archives, go here. To send mail to the list, subscribe, then write to physfs@icculus.org. Page maintained by Ryan C. Gordon."	"null"	"null"	"A library to provide abstract access to various archives. It is intended for use in video games, and the design was somewhat inspired by Quake 3's file subsystem. [zlib]"	"true"
"Compression"	"KArchive"	"https://quickgit.kde.org/?p=karchive.git"	"A library for creating, reading, writing and manipulating file archives like zip and tar. It also provides transparent compression and decompression of data, using formats like gzip, via a subclass of QIODevice. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"KDE QuickGit :: karchive.git/summary     language: Deutsch (de_DE) English (en_US) Español (es_ES) Français (fr_FR) Italiano (it_IT) 日本語 (ja_JP) Русский (ru_RU) Türkçe (tr_TR) 中文简体 (zh_CN) projects / karchive.git / summary commit author committer search: summary | shortlog | log | commit | commitdiff | tree   description Qt 5 addon providing access to numerous types of archives last change Sat, 09 Jul 2016 09:47:51 +0000 clone url git://anongit.kde.org/karchive.git push url git@git.kde.org:karchive.git shortlog 89584aa 6 days ago l10n daemon script Upgrade KF5 version to 5.25.0. master commit | commitdiff | tree | snapshot 6635695 10 days ago Martin T. H. Sandsmark Add unit test where there's three gzip streams af… commit | commitdiff | tree | snapshot 8534968 10 days ago Martin T. H. Sandsmark Handle multiple gzip streams commit | commitdiff | tree | snapshot b7d8fce 11 days ago Sune Vuorela Assume a directory is a directory, even if the pe… commit | commitdiff | tree | snapshot dda6226 11 days ago Sune Vuorela Unit test of directory permissions. commit | commitdiff | tree | snapshot be8e3e4 12 days ago Sune Vuorela Skip unit test with bz2 data if karchive is not s… commit | commitdiff | tree | snapshot c75a82d 12 days ago Sune Vuorela Unit test for bug 232843. Extracting two gz files… commit | commitdiff | tree | snapshot cfac8c1 13 days ago l10n daemon script Upgrade ECM and KF5 version requirements for 5.24… v5.24.0 v5.24.0-rc1 commit | commitdiff | tree | snapshot 7669fab 2016-06-17 Andreas Cord-Landwehr Promote Android support commit | commitdiff | tree | snapshot 1bca372 2016-06-15 Andreas Cord-Landwehr Individually specify supported platforms commit | commitdiff | tree | snapshot 0cb243f 2016-06-14 Andreas Cord-Landwehr Ensure extraction location to be in subfolder commit | commitdiff | tree | snapshot 8f90e39 2016-06-13 l10n daemon script Upgrade KF5 version to 5.24.0. commit | commitdiff | tree | snapshot 6b5fb5d 2016-06-06 l10n daemon script Upgrade ECM and KF5 version requirements for 5.23… v5.23.0-rc1 v5.23.0 commit | commitdiff | tree | snapshot 325152f 2016-06-06 l10n daemon script Upgrade KF5 version to 5.23.0. commit | commitdiff | tree | snapshot 81f9f78 2016-05-22 Olivier CHURLAUD update metainfo.yaml for new kapidox version commit | commitdiff | tree | snapshot cdf260f 2016-05-06 l10n daemon script Upgrade ECM and KF5 version requirements for 5.22… v5.22.0 v5.22.0-rc1 commit | commitdiff | tree | snapshot … tags 13 days ago v5.24.0 Create tag for 5.24.0 tag | commit | shortlog | log | snapshot 13 days ago v5.24.0-rc1 Create tag for 5.24.0 tag | commit | shortlog | log | snapshot 5 weeks ago v5.23.0 Create tag for 5.23.0 tag | commit | shortlog | log | snapshot 5 weeks ago v5.23.0-rc1 Create tag for 5.23.0 tag | commit | shortlog | log | snapshot 2 months ago v5.22.0 Create tag for 5.22.0 tag | commit | shortlog | log | snapshot 2 months ago v5.22.0-rc1 Create tag for 5.22.0 tag | commit | shortlog | log | snapshot 3 months ago v5.21.0 Create tag for 5.21.0 tag | commit | shortlog | log | snapshot 3 months ago v5.21.0-rc2 Create tag for 5.21.0 tag | commit | shortlog | log | snapshot 3 months ago v5.21.0-rc1 Create tag for 5.21.0 tag | commit | shortlog | log | snapshot 4 months ago v5.20.0 Create tag for 5.20.0 tag | commit | shortlog | log | snapshot 4 months ago v5.20.0-rc1 Create tag for 5.20.0 tag | commit | shortlog | log | snapshot 5 months ago v5.19.0 Create tag for 5.19.0 tag | commit | shortlog | log | snapshot 5 months ago v5.19.0-rc1 Create tag for 5.19.0 tag | commit | shortlog | log | snapshot 6 months ago v5.18.0 Create tag for 5.18.0 tag | commit | shortlog | log | snapshot 6 months ago v5.18.0-rc1 Create tag for 5.18.0 tag | commit | shortlog | log | snapshot 7 months ago v5.17.0 Create tag for 5.17.0 tag | commit | shortlog | log | snapshot … heads 6 days ago master shortlog | log | tree Qt 5 addon providing access to numerous types of archives RSS Atom GitPHP by Chris Han"	"null"	"null"	"A library for creating, reading, writing and manipulating file archives like zip and tar. It also provides transparent compression and decompression of data, using formats like gzip, via a subclass of QIODevice. [LGPL]"	"true"
"Compression"	"LZ4"	"https://code.google.com/p/lz4/"	"Extremely Fast Compression algorithm. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"Extremely Fast Compression algorithm. [BSD]"	"true"
"Compression"	"LZHAM"	"https://code.google.com/p/lzham/"	"Lossless data compression library with a compression ratio similar to LZMA but with much faster decompression. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"Lossless data compression library with a compression ratio similar to LZMA but with much faster decompression. [BSD]"	"true"
"Compression"	"LZMA"	"http://www.7-zip.org/sdk.html"	"The default and general compression method of 7z format. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LZMA SDK (Software Development Kit) Home 7z Format LZMA SDK Download FAQ Support Links English Chinese Simpl. Chinese Trad. Esperanto French German Japanese Polish Portuguese Brazil Spanish Thai Vietnamese LZMA SDK (Software Development Kit) The LZMA SDK provides the documentation, samples, header files, libraries, and tools you need to develop applications that use LZMA compression. Link Size Date Version Description Download 1 MB 2016-05-21 16.02 LZMA SDK (C, C++, C#, Java) (with binaries for Windows) Download 12 KB 2015-06-14 LZMA Specification (Draft) What's new: 16.02: Some bugs were fixed. 9.35: AES code and SFXs modules were included to SDK. 9.20: New small SFX module for installers. 9.11: PPMd support. 9.04: LZMA2 and XZ support. 4.62: LZMA SDK is placed in the public domain. 4.58: Speed optimizations. New ANSI-C code for LZMA compression. 4.57: Speed optimizations. Some fixes. 4.49: .7z ANSI-C decoder was improved. C++ code for .7z archive handling was included. LZMA is the default and general compression method of 7z format in the 7-Zip program. LZMA provides a high compression ratio and very fast decompression, so it is very suitable for embedded applications. For example, it can be used for ROM (firmware) compressing. LZMA SDK includes: C++ source code of LZMA Encoder and Decoder C++ source code for .7z compression and decompression (reduced version) ANSI-C compatible source code for LZMA / LZMA2 / XZ compression and decompression ANSI-C compatible source code for 7z decompression with example C# source code for LZMA compression and decompression Java source code for LZMA compression and decompression lzma.exe for .lzma compression and decompression 7zr.exe to work with 7z archives (reduced version of 7z.exe from 7-Zip) SFX modules to create self-extracting packages and installers ANSI-C and C++ source code in LZMA SDK is subset of source code of 7-Zip. LZMA features: Compression speed: 2 MB/s on 2 GHz dual-core CPU. Decompression speed: 20-30 MB/s on modern 2 GHz CPU (Intel, AMD). 5-10 MB/s on simple 1 GHz RISC CPU (ARM, MIPS, PowerPC). Small memory requirements for decompression: 8-32 KB + DictionarySize Small code size for decompression: 2-8 KB (depending on speed optimizations) The LZMA decoder uses only CPU integer instructions and can be implemented for any modern 32-bit CPU (or, on a 16-bit CPU with some conditions). License LZMA SDK is placed in the public domain. Anyone is free to copy, modify, publish, use, compile, sell, or distribute the original LZMA SDK code, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means. LZMA Links LZMA at Wikipedia Port of LZMA SDK for JAVA from independent developer Port of LZMA SDK to Pascal (Delphi, Kylix and Freepascal) PyLZMA: Python bindings for LZMA XZ Utils / LZMA utils LZMA Streams in Java LZMA Benchmark results for different CPUs Copyright (C) 2016 Igor Pavlov. The site is hosted at Digital Ocean"	"null"	"null"	"The default and general compression method of 7z format. [PublicDomain]"	"true"
"Compression"	"LZMAT"	"http://www.matcode.com/lzmat.htm"	"An extremely fast real-time lossless data compression library. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"An extremely fast real-time lossless data compression library. [GPL]"	"false"
"Compression"	"miniz"	"https://code.google.com/p/miniz/"	"Single C source file Deflate/Inflate compression library with zlib-compatible API, ZIP archive reading/writing, PNG writing. [Unlicense]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"Single C source file Deflate/Inflate compression library with zlib-compatible API, ZIP archive reading/writing, PNG writing. [Unlicense]"	"true"
"Compression"	"Minizip"	"https://github.com/nmoinvaz/minizip"	"Zlib with latest bug fixes that supports PKWARE disk spanning, AES encryption, and IO buffering. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"160"	"19"	"73"	"GitHub - nmoinvaz/minizip: Minizip contrib in zlib with latest bug fixes that supports PKWARE disk spanning, AES encryption, and IO buffering Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 160 Fork 73 nmoinvaz/minizip Code Issues 0 Pull requests 5 Pulse Graphs Minizip contrib in zlib with latest bug fixes that supports PKWARE disk spanning, AES encryption, and IO buffering http://www.winimage.com/zLibDll/minizip.html 227 commits 1 branch 0 releases 18 contributors C 98.6% Other 1.4% C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit bcf489c Jun 20, 2016 nmoinvaz committed on GitHub Merge pull request #61 from mschmieder/cmake_link_zlib … Added missing link library for minzip target Permalink Failed to load latest commit information. aes Normalize line endings. Nov 25, 2015 CMakeLists.txt added missing link library for minzip target Jun 8, 2016 ChangeLog Updated changelog. Dec 12, 2015 LICENSE Update and rename license file Jan 11, 2014 Makefile Added AES makefile Jun 16, 2015 Makefile.am removed mztools reference Oct 25, 2012 README.md Updated readme. Dec 12, 2015 configure.ac Zlib 1.2.8 Jun 20, 2013 crypt.h eliminate unused parameter to decrypt_byte Mar 14, 2016 ioapi.c Fixed formatting. Dec 22, 2015 ioapi.h Use HAVE_STDINT_H instead of HAS_STDINT_H. (Issue: #42) Jan 11, 2016 ioapi_buf.c Add back some variables for debugging. Oct 7, 2014 ioapi_buf.h Add extern ""C"" to ioapi_buf.h and ioapi_mem.h Jul 24, 2014 ioapi_mem.c Fixed compiler warning on iOS 9. (Issue #37) Nov 20, 2015 ioapi_mem.h Fix formatting. Dec 12, 2015 iowin32.c Fixed casting when project in Unicode charset. Jan 13, 2016 iowin32.h Add header guards. Mar 7, 2014 miniunz.c Update link May 17, 2015 miniunz.vcproj Moved _CRT_SECURE_NO_WARNINGS to vcprojs Jan 7, 2014 minizip.c Fix formatting. Dec 12, 2015 minizip.pc.in latest changes from gvollant Jan 21, 2012 minizip.sln Revert changes to solution file. Nov 25, 2015 minizip.vcproj Moved _CRT_SECURE_NO_WARNINGS to vcprojs Jan 8, 2014 unzip.c Tabs to Spaces Mar 26, 2016 unzip.h Typo in a comment (and the first commit of the original creator in th… Apr 20, 2016 zip.c Fix parameter signatures Mar 16, 2016 zip.h Merge remote-tracking branch 'upstream/master' Jan 30, 2016 README.md Minizip zlib contribution that includes: AES encryption I/O buffering PKWARE disk spanning Visual Studio 2008 project files It also has the latest bug fixes that having been found all over the internet including the minizip forum and zlib developer's mailing list. AES Encryption Requires #define HAVE_AES Requires AES library files When zipping with a password it will always use AES 256-bit encryption. When unzipping it will use AES decryption only if necessary. I/O Buffering Improves I/O performance by buffering read and write operations. zlib_filefunc64_def filefunc64 = {0}; ourbuffer_t buffered = {0};  fill_win32_filefunc64(&buffered->filefunc64); fill_buffer_filefunc64(&filefunc64, buffered);  unzOpen2_64(filename, &filefunc64)  PKWARE disk spanning To create an archive with multiple disks use zipOpen3_64 supplying a disk_size value in bytes. extern zipFile ZEXPORT zipOpen3_64 OF((const void *pathname, int append,    ZPOS64_T disk_size, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def));  The central directory is the only data stored in the .zip and doesn't follow disk_size restrictions. When unzipping it will automatically determine when in needs to span disks. I/O Memory To unzip from a zip file in memory use fill_memory_filefunc and supply a proper ourmemory_t structure. zlib_filefunc_def filefunc32 = {0}; ourmemory_t unzmem = {0};  unzmem.size = bufsize; unzmem.base = (char *)malloc(unzmem.size); memcpy(unzmem.base, buffer, unzmem.size);  fill_memory_filefunc(&filefunc32, &unzmem);  unzOpen2(""__notused__"", &filefunc32);  To create a zip file in memory use fill_memory_filefunc and supply a proper ourmemory_t structure. It is important not to forget to free zipmem->base when finished. If grow is set, zipmem->base will expand to fit the size of the zip. If grow is not set be sure to fill out zipmem.base and zipmem.size. zlib_filefunc_def filefunc32 = {0}; ourmemory_t zipmem = {0};  zipmem.grow = 1;  fill_memory_filefunc(&filefunc32, &zipmem);  zipOpen3(""__notused__"", APPEND_STATUS_CREATE, 0, 0, &filefunc32);  BZIP2 Requires #define HAVE_BZIP2 Requires BZIP2 library Windows RT Requires #define IOWIN32_USING_WINRT_API Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nmoinvaz/minizip"	"Zlib with latest bug fixes that supports PKWARE disk spanning, AES encryption, and IO buffering. [zlib]"	"true"
"Compression"	"smaz"	"https://github.com/antirez/smaz"	"Small strings compression library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"461"	"24"	"60"	"GitHub - antirez/smaz: Small strings compression library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 461 Fork 60 antirez/smaz Code Issues 1 Pull requests 4 Pulse Graphs Small strings compression library 7 commits 1 branch 0 releases Fetching contributors C 100.0% C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2f62584 Feb 24, 2012 antirez Smaz test improved. Permalink Failed to load latest commit information. COPYING README and COPYING added Mar 31, 2009 Makefile first commit Mar 31, 2009 README doc updated Mar 31, 2009 TODO TODO added with feedbacks from progreddit / hackernews Apr 1, 2009 smaz.c first commit Mar 31, 2009 smaz.h first commit Mar 31, 2009 smaz_test.c Smaz test improved. Feb 24, 2012 README SMAZ - compression for very small strings -----------------------------------------  Smaz is a simple compression library suitable for compressing very short strings. General purpose compression libraries will build the state needed for compressing data dynamically, in order to be able to compress every kind of data. This is a very good idea, but not for a specific problem: compressing small strings will not work.  Smaz instead is not good for compressing general purpose data, but can compress text by 40-50% in the average case (works better with English), and is able to perform a bit of compression for HTML and urls as well. The important point is that Smaz is able to compress even strings of two or three bytes!  For example the string ""the"" is compressed into a single byte.  To compare this with other libraries, think that like zlib will usually not be able to compress text shorter than 100 bytes.  COMPRESSION EXAMPLES --------------------  'This is a small string' compressed by 50% 'foobar' compressed by 34% 'the end' compressed by 58% 'not-a-g00d-Exampl333' enlarged by 15% 'Smaz is a simple compression library' compressed by 39% 'Nothing is more difficult, and therefore more precious, than to be able to decide' compressed by 49% 'this is an example of what works very well with smaz' compressed by 49% '1000 numbers 2000 will 10 20 30 compress very little' compressed by 10%  In general, lowercase English will work very well. It will suck with a lot of numbers inside the strings. Other languages are compressed pretty well too, the following is Italian, not very similar to English but still compressible by smaz:  'Nel mezzo del cammin di nostra vita, mi ritrovai in una selva oscura' compressed by 33% 'Mi illumino di immenso' compressed by 37% 'L'autore di questa libreria vive in Sicilia' compressed by 28%  It can compress URLS pretty well:  'http://google.com' compressed by 59% 'http://programming.reddit.com' compressed by 52% 'http://github.com/antirez/smaz/tree/master' compressed by 46%  USAGE -----  The lib consists of just two functions:      int smaz_compress(char *in, int inlen, char *out, int outlen);  Compress the buffer 'in' of length 'inlen' and put the compressed data into 'out' of max length 'outlen' bytes. If the output buffer is too short to hold the whole compressed string, outlen+1 is returned. Otherwise the length of the compressed string (less then or equal to outlen) is returned.      int smaz_decompress(char *in, int inlen, char *out, int outlen);  Decompress the buffer 'in' of length 'inlen' and put the decompressed data into 'out' of max length 'outlen' bytes. If the output buffer is too short to hold the whole decompressed string, outlen+1 is returned. Otherwise the length of the compressed string (less then or equal to outlen) is returned. This function will not automatically put a nul-term at the end of the string if the original compressed string didn't included a nulterm.   CREDITS -------  Small was writte by Salvatore Sanfilippo and is released under the BSD license. Check the COPYING file for more information.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/antirez/smaz"	"Small strings compression library. [BSD]"	"true"
"Compression"	"Snappy"	"https://code.google.com/p/snappy/"	"A fast compressor/decompressor. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Project Hosting  My favorites ▼ | Sign in Project has moved What happened? Project ""snappy"" has moved to another location on the Internet. Your options: View the project at: http://google.github.io/snappy/ Search the web for pages about ""snappy"". If you are the project's administrator, you can update the new project URL here. Terms - Privacy - Project Hosting Help Powered by Google Project Hosting"	"null"	"null"	"A fast compressor/decompressor. [BSD]"	"true"
"Compression"	"ZLib"	"http://zlib.net/"	"A very compact compression library for data streams. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"606"	"89"	"410"	"GitHub - madler/zlib: A massively spiffy yet delicately unobtrusive compression library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 89 Star 606 Fork 410 madler/zlib Code Issues 17 Pull requests 63 Wiki Pulse Graphs A massively spiffy yet delicately unobtrusive compression library. http://zlib.net/ 312 commits 2 branches 69 releases 17 contributors C 67.3% Assembly 9.4% C++ 8.2% Ada 5.9% C# 3.7% Component Pascal 2.8% Other 2.7% C Assembly C++ Ada C# Component Pascal Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v1.2.8 v1.2.7.3 v1.2.7.2 v1.2.7.1 v1.2.7 v1.2.6.1 v1.2.6 v1.2.5.3 v1.2.5.2 v1.2.5.1 v1.2.5 v1.2.4.5 v1.2.4.4 v1.2.4.3 v1.2.4.2 v1.2.4.1 v1.2.4 v1.2.4-pre2 v1.2.4-pre1 v1.2.3.9 v1.2.3.8 v1.2.3.7 v1.2.3.6 v1.2.3.5 v1.2.3.4 v1.2.3.3 v1.2.3.2 v1.2.3.1 v1.2.3 v1.2.2.4 v1.2.2.3 v1.2.2.2 v1.2.2.1 v1.2.2 v1.2.1.2 v1.2.1.1 v1.2.1 v1.2.0.8 v1.2.0.7 v1.2.0.6 v1.2.0.5 v1.2.0.4 v1.2.0.3 v1.2.0.2 v1.2.0.1 v1.2.0 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.9 v1.0.8 v1.0.7 v1.0.5 v1.0.4 v1.0.2 v1.0.1 v1.0-pre v0.99 v0.95 v0.94 v0.93 v0.92 v0.91 v0.79 v0.71 v0.9 v0.8 Nothing to show New pull request Latest commit 5089329 Apr 28, 2013 madler zlib 1.2.8 Permalink Failed to load latest commit information. amiga zlib 1.2.3.9 Sep 9, 2011 as400 Change version number to 1.2.8. Apr 28, 2013 contrib Fix mixed line endings in contrib/vstudio. Apr 28, 2013 doc zlib 1.2.5.1 Sep 11, 2011 examples Check for input buffer malloc failure in examples/gzappend.c. Oct 11, 2012 msdos Move example.c and minigzip.c to test/. Nov 27, 2011 nintendods zlib 1.2.3.5 Sep 9, 2011 old Move obsolete emx makefile to old [Truta]. Mar 12, 2012 qnx Change version number to 1.2.8. Apr 28, 2013 test Clean up the usage of z_const and respect const usage within zlib. Aug 13, 2012 watcom zlib 1.2.3.9 Sep 10, 2011 win32 Update some copyright years. Apr 28, 2013 .gitignore zlib 1.2.7.1 Mar 24, 2013 CMakeLists.txt Change version number to 1.2.8. Apr 28, 2013 ChangeLog zlib 1.2.8 Apr 28, 2013 FAQ Move example.c and minigzip.c to test/. Nov 27, 2011 INDEX Generate and install the pkg-config file with cmake. Mar 11, 2012 Makefile zlib 1.2.4-pre2 Sep 9, 2011 Makefile.in Update some copyright years. Apr 28, 2013 README Change version number to 1.2.8. Apr 28, 2013 adler32.c zlib 1.2.5.1 Sep 11, 2011 compress.c Clean up the usage of z_const and respect const usage within zlib. Aug 13, 2012 configure Remove runtime check in configure for four-byte integer type. Mar 23, 2013 crc32.c Fix type mismatch between get_crc_table() and crc_table. Apr 29, 2012 crc32.h Fix type mismatch between get_crc_table() and crc_table. Apr 29, 2012 deflate.c Change version number to 1.2.8. Apr 28, 2013 deflate.h Correct comment in deflate.h. Jun 2, 2012 gzclose.c zlib 1.2.3.9 Sep 10, 2011 gzguts.h Add casts in gzwrite.c for pointer differences. Apr 13, 2013 gzlib.c zlib 1.2.7.1 Mar 25, 2013 gzread.c zlib 1.2.7.1 Mar 25, 2013 gzwrite.c Add casts in gzwrite.c for pointer differences. Apr 14, 2013 infback.c Clean up the usage of z_const and respect const usage within zlib. Aug 13, 2012 inffast.c zlib 1.2.7.1 Mar 25, 2013 inffast.h zlib 1.2.5 Sep 9, 2011 inffixed.h Get inffixed.h and MAKEFIXED result to match. Oct 5, 2011 inflate.c Clean up the usage of z_const and respect const usage within zlib. Aug 13, 2012 inflate.h zlib 1.2.3.5 Sep 10, 2011 inftrees.c Change version number to 1.2.8. Apr 28, 2013 inftrees.h zlib 1.2.5 Sep 10, 2011 make_vms.com Add ability to choose the builder in make_vms.com [Schweda]. Mar 9, 2012 treebuild.xml Change version number to 1.2.8. Apr 28, 2013 trees.c Clean up the usage of z_const and respect const usage within zlib. Aug 13, 2012 trees.h zlib 1.2.4.5 Sep 9, 2011 uncompr.c Clean up the usage of z_const and respect const usage within zlib. Aug 13, 2012 zconf.h Do not force Z_CONST for C++. Apr 28, 2013 zconf.h.cmakein Do not force Z_CONST for C++. Apr 28, 2013 zconf.h.in Do not force Z_CONST for C++. Apr 28, 2013 zlib.3 zlib 1.2.8 Apr 29, 2013 zlib.3.pdf zlib 1.2.8 Apr 29, 2013 zlib.h zlib 1.2.8 Apr 29, 2013 zlib.map Clean up the addition of gzvprintf. Mar 23, 2013 zlib.pc.cmakein Generate and install the pkg-config file with cmake. Mar 11, 2012 zlib.pc.in zlib 1.2.4.4 Sep 9, 2011 zlib2ansi zlib 1.2.3.8 Sep 9, 2011 zutil.c Clean up the usage of z_const and respect const usage within zlib. Aug 13, 2012 zutil.h zlib 1.2.7.1 Mar 25, 2013 README ZLIB DATA COMPRESSION LIBRARY  zlib 1.2.8 is a general purpose data compression library.  All the code is thread safe.  The data format used by the zlib library is described by RFCs (Request for Comments) 1950 to 1952 in the files http://tools.ietf.org/html/rfc1950 (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format).  All functions of the compression library are documented in the file zlib.h (volunteer to write man pages welcome, contact zlib@gzip.org).  A usage example of the library is given in the file test/example.c which also tests that the library is working correctly.  Another example is given in the file test/minigzip.c.  The compression library itself is composed of all source files in the root directory.  To compile all files and run the test program, follow the instructions given at the top of Makefile.in.  In short ""./configure; make test"", and if that goes well, ""make install"" should work for most flavors of Unix.  For Windows, use one of the special makefiles in win32/ or contrib/vstudio/ .  For VMS, use make_vms.com.  Questions about zlib should be sent to <zlib@gzip.org>, or to Gilles Vollant <info@winimage.com> for the Windows DLL version.  The zlib home page is http://zlib.net/ .  Before reporting a problem, please check this site to verify that you have the latest version of zlib; otherwise get the latest version and check whether the problem still exists or not.  PLEASE read the zlib FAQ http://zlib.net/zlib_faq.html before asking for help.  Mark Nelson <markn@ieee.org> wrote an article about zlib for the Jan.  1997 issue of Dr.  Dobb's Journal; a copy of the article is available at http://marknelson.us/1997/01/01/zlib-engine/ .  The changes made in version 1.2.8 are documented in the file ChangeLog.  Unsupported third party contributions are provided in directory contrib/ .  zlib is available in Java using the java.util.zip package, documented at http://java.sun.com/developer/technicalArticles/Programming/compression/ .  A Perl interface to zlib written by Paul Marquess <pmqs@cpan.org> is available at CPAN (Comprehensive Perl Archive Network) sites, including http://search.cpan.org/~pmqs/IO-Compress-Zlib/ .  A Python interface to zlib written by A.M. Kuchling <amk@amk.ca> is available in Python 1.5 and later versions, see http://docs.python.org/library/zlib.html .  zlib is built into tcl: http://wiki.tcl.tk/4610 .  An experimental package to read and write files in .zip format, written on top of zlib by Gilles Vollant <info@winimage.com>, is available in the contrib/minizip directory of zlib.   Notes for some targets:  - For Windows DLL versions, please see win32/DLL_FAQ.txt  - For 64-bit Irix, deflate.c must be compiled without any optimization. With   -O, one libpng test fails. The test works in 32 bit mode (with the -n32   compiler flag). The compiler bug has been reported to SGI.  - zlib doesn't work with gcc 2.6.3 on a DEC 3000/300LX under OSF/1 2.1 it works   when compiled with cc.  - On Digital Unix 4.0D (formely OSF/1) on AlphaServer, the cc option -std1 is   necessary to get gzprintf working correctly. This is done by configure.  - zlib doesn't work on HP-UX 9.05 with some versions of /bin/cc. It works with   other compilers. Use ""make test"" to check your compiler.  - gzdopen is not supported on RISCOS or BEOS.  - For PalmOs, see http://palmzlib.sourceforge.net/   Acknowledgments:    The deflate format used by zlib was defined by Phil Katz.  The deflate and   zlib specifications were written by L.  Peter Deutsch.  Thanks to all the   people who reported problems and suggested various improvements in zlib; they   are too numerous to cite here.  Copyright notice:   (C) 1995-2013 Jean-loup Gailly and Mark Adler    This software is provided 'as-is', without any express or implied   warranty.  In no event will the authors be held liable for any damages   arising from the use of this software.    Permission is granted to anyone to use this software for any purpose,   including commercial applications, and to alter it and redistribute it   freely, subject to the following restrictions:    1. The origin of this software must not be misrepresented; you must not      claim that you wrote the original software. If you use this software      in a product, an acknowledgment in the product documentation would be      appreciated but is not required.   2. Altered source versions must be plainly marked as such, and must not be      misrepresented as being the original software.   3. This notice may not be removed or altered from any source distribution.    Jean-loup Gailly        Mark Adler   jloup@gzip.org          madler@alumni.caltech.edu  If you use the zlib library in a product, we would appreciate *not* receiving lengthy legal documents to sign.  The sources are provided for free but without warranty of any kind.  The library has been entirely written by Jean-loup Gailly and Mark Adler; it does not include third-party code.  If you redistribute modified sources, we would appreciate that you include in the file ChangeLog history information documenting your changes.  Please read the FAQ for more information on the distribution of modified source versions.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/madler/zlib"	"A very compact compression library for data streams. [zlib]"	"true"
"Compression"	"zlib-ng"	"https://github.com/Dead2/zlib-ng"	"zlib for the ""next generation"" systems. Drop-In replacement with some serious optimizations. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"303"	"25"	"18"	"GitHub - Dead2/zlib-ng: zlib for the ""next generation"" systems. Drop-In replacement with some serious optimizations. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 303 Fork 18 Dead2/zlib-ng Code Issues 13 Pull requests 2 Pulse Graphs zlib for the ""next generation"" systems. Drop-In replacement with some serious optimizations. 623 commits 4 branches 0 releases Fetching contributors C 95.8% Makefile 2.1% CMake 1.3% Other 0.8% C Makefile CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop hacknslash hacknslash2 hacknslash3 Nothing to show Nothing to show New pull request Latest commit 515fcf5 Jul 7, 2016 Dead2 committed on GitHub Merge pull request #72 from mtl1979/duphead … Don't update prev if old head is same as new. Permalink Failed to load latest commit information. arch Don't update prev if old head is same as new. Jul 4, 2016 doc zlib 1.2.5.1 Sep 11, 2011 test Only run tests requiring zlib-compat if zlib-ng was compiled with it. Apr 28, 2016 win32 Split insert_string_sse into separate file in arch folder. Nov 4, 2015 .gitignore Add test for CVE-2003-0107 Apr 28, 2016 .travis.yml Fix spelling in travis config Apr 28, 2016 CMakeLists.txt Fix build under MSYS2. Apr 26, 2016 ChangeLog.zlib Fix typo. Nov 3, 2015 FAQ.zlib Add notice about README.zlib FAQ.zlib Changelog.zlib being unmaintained Oct 15, 2014 INDEX Update documentation and version strings Oct 14, 2014 LICENSE.md Update readme and create LICENSE.md file Apr 10, 2015 Makefile zlib 1.2.4-pre2 Sep 9, 2011 Makefile.in Move Makefile.in test-related parts into test/Makefile.in Apr 28, 2016 README Actually commit the updated README file. Apr 10, 2015 README.md Add README file with markup code enabled, allows links and images to … May 8, 2015 README.zlib Add notice about README.zlib FAQ.zlib Changelog.zlib being unmaintained Oct 15, 2014 adler32.c Type cleanup. Dec 14, 2015 compress.c Use size_t for total_in and total_out. Dec 14, 2015 configure Only run tests requiring zlib-compat if zlib-ng was compiled with it. Apr 28, 2016 crc32.c Fix endianness-detection code on Solaris 11. Apr 28, 2016 crc32.h Style cleanup for adler/crc code May 25, 2015 deflate.c Type cleanup. Dec 14, 2015 deflate.h Type cleanup. Dec 14, 2015 deflate_fast.c Split deflate.c Jun 24, 2015 deflate_medium.c Type cleanup. Dec 14, 2015 deflate_p.h Don't update prev if old head is same as new. Jul 4, 2016 deflate_slow.c No need to update hash_head. Jun 25, 2015 gzclose.c Style cleanup for gzfile code May 25, 2015 gzguts.h Fix the remaining warnings due to conflicting defines of ZLIB_INTERNAL Apr 28, 2016 gzlib.c Fix gzseek() problem on MinGW due to buggy _lseeki64 there. Apr 26, 2016 gzread.c Style cleanup for gzfile code May 25, 2015 gzwrite.c Loop on write() calls in gzwrite.c in case of non-blocking I/O. Apr 27, 2016 infback.c Type cleanup. Dec 14, 2015 inffast.c Type cleanup. Dec 14, 2015 inffast.h Type cleanup. Dec 14, 2015 inffixed.h Get inffixed.h and MAKEFIXED result to match. Oct 5, 2011 inflate.c Use size_t for total_in and total_out. Dec 14, 2015 inflate.h Type cleanup. Dec 14, 2015 inftrees.c Style cleanup for inflate code May 25, 2015 inftrees.h Style cleanup for inflate code May 25, 2015 match.c Do not define __builtin_ctzl for Clang on MSVC Jun 13, 2016 match.h Type cleanup. Dec 14, 2015 treebuild.xml Change version number to 1.2.8. Apr 28, 2013 trees.c Type cleanup. Dec 14, 2015 trees.h Style cleanup for trees.* May 25, 2015 uncompr.c Use size_t for total_in and total_out. Dec 14, 2015 zconf.h.in Fix build under MSYS2. Apr 26, 2016 zlib.3 Follow manpage update from zlib, adding licence to manpage. Nov 3, 2015 zlib.3.pdf zlib 1.2.8 Apr 28, 2013 zlib.h Use size_t for total_in and total_out. Dec 14, 2015 zlib.map Clean up the addition of gzvprintf. Mar 23, 2013 zlib.pc.cmakein Generate and install the pkg-config file with cmake. Mar 11, 2012 zlib.pc.in zlib 1.2.4.4 Sep 9, 2011 zutil.c Type cleanup. Dec 14, 2015 zutil.h Add support for internal attribute, the advantage of this over hidden Apr 28, 2016 README.md Travis CI: zlib-ng - zlib for the next generation systems Maintained by Hans Kristian Rosbach aka Dead2 (zlib-ng àt circlestorm dót org) Fork Motivation and History The motivation for this fork was due to seeing several 3rd party contributions containing new optimizations not getting implemented into the official zlib repository. Mark Adler has been maintaining zlib for a very long time, and he has done a great job and hopefully he will continue for a long time yet. The idea of zlib-ng is not to replace zlib, but to co-exist as a drop-in replacement with a lower threshold for code change. zlib has a long history and is incredibly portable, even supporting lots of systems that predate the Internet. This is great, but it does complicate further development and maintainability. The zlib code has to make numerous workarounds for old compilers that do not understand ANSI-C or to accommodate systems with limitations such as operating in a 16-bit environment. Many of these workarounds are only maintenance burdens, some of them are pretty huge code-wise. For example, the [v]s[n]printf workaround code has a whopping 8 different implementations just to cater to various old compilers. With this many workarounds cluttered throughout the code, new programmers with an idea/interest for zlib will need to take some time to figure out why all of these seemingly strange things are used, and how to work within those confines. So I decided to make a fork, merge all the Intel optimizations, merge the Cloudflare optimizations that did not conflict, plus a couple of other smaller patches. Then I started cleaning out workarounds, various dead code, all contrib and example code as there is little point in having those in this fork for different reasons. Lastly I have been cleaning up the handling of different arches, so that it will be easier to implement arch-specific code without cluttering up the main code too much. Now, there is still a lot to do and I am sure there are better ways of doing several of the changes I have done. And I would be delighted to receive patches, preferably as pull requests on github. Just remember that any code you submit must be your own and it must be zlib licensed. Please read LICENSE.md, it is very simple and very liberal. Acknowledgments Big thanks to Raske Sider AS / raskesider.no for sponsoring my maintainership of zlib-ng. The deflate format used by zlib was defined by Phil Katz. The deflate and zlib specifications were written by L. Peter Deutsch. zlib was originally created by Jean-loup Gailly (compression) and Mark Adler (decompression). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Dead2/zlib-ng"	"zlib for the ""next generation"" systems. Drop-In replacement with some serious optimizations. [zlib]"	"true"
"Compression"	"ZZIPlib"	"http://zziplib.sourceforge.net/"	"Provides read access on ZIP-archives. [MPL/LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"zziplib - the library   ZZIPlib 0.13.58 Library - ZIP Access - Transparently - SDLrwops Example - ext/io Customization   xor/io Obfuscation   zip/no Encryption (2) - Library API   basics   extras =Parsing ZIPs - 64on32 extras - Next To Come   fseeko mmapped memdisk - Config Helpers - Making a zip/exe =Hints And Links - Referentials - Functions List..   - zziplib.*   - zzipmmapped.*   - zzipfseeko.*   - unix man pages     faq   notes   zip-php Download Area   Developer Area   Sourceforge Project   zziplib.sf.net Home   ChangeLog LGPL/MPL license   -sitemap- generated 2009-08-23 (C) Guido Draheim guidod@gmx.de formatted by mksite.sh as xml: Library - 64on32 extras - Next To Come   The Library & Overview The zziplib library is intentionally lightweight, it offers the ability to easily extract data from files archived in a single zip file. Applications can bundle files into a single zip archive and access them. The implementation is based only on the (free) subset of compression with the zlib algorithm which is actually used by the zip/unzip tools. The library allows reading zip archives in a number of ways, archive mode: reading the zip directory and extracting files from it. This is the traditional mode as seen with unzip-utilities. Some extra unzip-utiles for transparent/magic mode are shipped as well. replacement mode: Use ZZIP_FILE / ZZIP_DIR pointers provided by zziplib and put them to work with routines originally developped to work with real directories and file handles. The API calls do follow traditional synopsis from posix/stdio. transparent mode: Use replacement handles and allow the open()-calls to automatically detect when a file is contained in a zip archive or when it is a real file in the file system. A filepath can be partly in a real filesystem and partly within the zip archive when one is seen. ext magic Use the same filepath to access either a zipped or real file - it looks for a real file and there is none then every subdirectory of the path is checked, a "".zip"" extension appended, and the zipped file transparently opened. This can speed up dat-file development dramatically. io/xor magic The access to the filesystem can be hooked up - examples are given for xor obfuscation which is great for game artwork and AI data. A small intro for SDLrwops usage is given as well. guidod@gmx.de created 1.Jun.2000, last updated 09.Feb.2003"	"null"	"null"	"Provides read access on ZIP-archives. [MPL/LGPL]"	"true"
"Concurrency"	"ArrayFire"	"https://github.com/arrayfire/arrayfire"	"A general purpose GPU library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1385"	"102"	"206"	"GitHub - arrayfire/arrayfire: ArrayFire: a general purpose GPU library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 102 Star 1,385 Fork 206 arrayfire/arrayfire Code Issues 135 Pull requests 13 Wiki Pulse Graphs ArrayFire: a general purpose GPU library. https://arrayfire.com 4,083 commits 2 branches 15 releases 37 contributors C++ 86.0% C 6.7% Cuda 4.4% CMake 2.8% Other 0.1% C++ C Cuda CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: devel Switch branches/tags Branches Tags devel master Nothing to show v3.3.2 v3.3.1 v3.3.0 v3.3.alpha v3.2.2 v3.2.1 v3.2.0 v3.1.3 v3.1.2 v3.1.1 v3.1.0 v3.0.2 v3.0.1 v3.0.0 v3.0beta Nothing to show New pull request Latest commit 072d507 Jul 11, 2016 pavanky Enabling OpenMP flags when building with CUDA 8 Permalink Failed to load latest commit information. .github Generalized Scan May 6, 2016 CMakeModules Fixes to build with MKL Jul 8, 2016 LICENSES Added OpenSIFT License Aug 13, 2015 assets @ f16f8bf Changes to remove unneeded font Feb 9, 2016 docs PERF: Removing the need to check for maxJitLen() Jun 25, 2016 examples A faster implementation of black scholes example Jun 27, 2016 include Merge pull request #1453 from syurkevi/image_moments_devel Jun 30, 2016 src Enabling OpenMP flags when building with CUDA 8 Jul 11, 2016 test Merge pull request #1476 from pavanky/jit_perf_fixes Jul 10, 2016 .coveralls.yml Sort functions in docs. Update coveralls Apr 4, 2015 .gitignore Synchronize when AF_SYNCHRONOUS_CALLS is set to 1 Dec 30, 2015 .gitmodules Replaced ssh based url with http url for threads submodule Jan 4, 2016 ACKNOWLEDGEMENTS.md Point all acknowledgement documents to GitHub repo. Jun 25, 2015 CMakeLists.txt Merge branch 'devel' into cl2_hpp Jun 13, 2016 CONTRIBUTING.md Updated contribution guidelines with new wiki page link Apr 1, 2015 COPYRIGHT.md Added SIFT Copyright information Aug 13, 2015 LICENSE Fix License grammar Jun 21, 2016 README.md Generalized Scan May 6, 2016 README.md ArrayFire is a high performance software library for parallel computing with an easy-to-use API. Its array based function set makes parallel programming simple. ArrayFire's multiple backends (CUDA, OpenCL and native CPU) make it platform independent and highly portable. ArrayFire provides visualization capabilities using our OpenGL-based, high performance visualization library. A few lines of code in ArrayFire can replace dozens of lines of parallel computing code, saving you valuable time and lowering development costs. Linux x86_64 Linux armv7l Linux aarch64 Windows OSX Build Test Installation You can install the ArrayFire library from one of the following ways: Official installers Execute one of our official binary installers for Linux, OSX, and Windows platforms. Build from source Build from source by following instructions on our wiki. Examples The following examples are simplified versions of helloworld.cpp and conway_pretty.cpp, respectively. For more code examples, visit the examples/ directory. Hello, world! array A = randu(5, 3, f32); // Create 5x3 matrix of random floats on the GPU array B = sin(A) + 1.5;     // Element-wise arithmetic array C = fft(B);           // Fourier transform the result  float d[] = { 1, 2, 3, 4, 5, 6 }; array D(2, 3, d, afHost);   // Create 2x3 matrix from host data D.col(0) = D.col(end);      // Copy last column onto first  array vals, inds; sort(vals, inds, A);        // Sort A and print sorted array and corresponding indices af_print(vals); af_print(inds); Conway's Game of Life Visit the Wikipedia page for a description of Conway's Game of Life. static const float h_kernel[] = {1, 1, 1, 1, 0, 1, 1, 1, 1}; static const array kernel(3, 3, h_kernel, afHost);  array state = (randu(128, 128, f32) > 0.5).as(f32); // Generate starting state Window myWindow(256, 256); while(!myWindow.close()) {   array nHood = convolve(state, kernel); // Obtain neighbors   array C0 = (nHood == 2);               // Generate conditions for life   array C1 = (nHood == 3);   state = state * C0 + C1;               // Update state   myWindow.image(state);                 // Display }  Documentation You can find our complete documentation here. Quick links: List of functions Tutorials Examples Blog Language wrappers We currently support the following language wrappers for ArrayFire: arrayfire-python arrayfire-rust Wrappers for other languages are a work in progress: arrayfire-dotnet, arrayfire-fortran, arrayfire-go, arrayfire-java, arrayfire-lua, arrayfire-nodejs, arrayfire-r Contributing Contributions of any kind are welcome! Please refer to CONTRIBUTING.md to learn more about how you can get involved with ArrayFire. Citations and Acknowledgements If you redistribute ArrayFire, please follow the terms established in the license. If you wish to cite ArrayFire in an academic publication, please use the following citation document. ArrayFire development is funded by ArrayFire LLC and several third parties, please see the list of acknowledgements for further details. Support and Contact Info Google Groups ArrayFire Services: Consulting | Support | Training Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/arrayfire/arrayfire"	"A general purpose GPU library. [BSD]"	"true"
"Concurrency"	"Boost.Compute"	"https://github.com/boostorg/compute"	"A C++ GPU Computing Library for OpenCL. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"564"	"82"	"135"	"GitHub - boostorg/compute: A C++ GPU Computing Library for OpenCL Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 82 Star 564 Fork 135 boostorg/compute Code Issues 89 Pull requests 11 Wiki Pulse Graphs A C++ GPU Computing Library for OpenCL http://boostorg.github.io/compute/ 1,128 commits 6 branches 6 releases 35 contributors C++ 96.0% CMake 2.5% Cuda 1.1% Other 0.4% C++ CMake Cuda Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags appveyor-ci develop gh-pages master travis-build-relwithdebinfo vector-default-queue Nothing to show v0.5 v0.4 v0.3 v0.2 v0.1 boost-1.61.0 Nothing to show New pull request Latest commit 04e7dde Jun 3, 2016 kylelutz Merge pull request #617 from haahh/pr_travis_ci_boost161 … Add Travis CI build with latest Boost libs Permalink Failed to load latest commit information. .travis Add AMD APP SDK Travis CI builds Feb 27, 2016 cmake Use custom FindOpenCL.cmake only for cmake older than 3.1 Mar 9, 2016 doc Merge pull request #601 from boostorg/stable-sort-by-key-doc Apr 26, 2016 example Remove debug macro, fix names of event variables May 28, 2016 include/boost Reuse dispatch_copy_async() in dispatch_copy() May 28, 2016 meta Add meta/libraries.json file Feb 7, 2015 perf Fix type, long_ and long might be different types May 21, 2016 test Fix async copying when first == last (input is empty) May 28, 2016 .coveralls.yml Add coveralls.io integration Mar 12, 2014 .gitignore Add performance section to documentation Sep 21, 2014 .travis.yml Remove unnecessary source from Travis CI build Jun 2, 2016 CMakeLists.txt Update minimum required Boost version to 1.54 May 3, 2016 CONTRIBUTING.md Update GitHub links May 17, 2015 LICENSE_1_0.txt Initial commit Mar 2, 2013 README.md Update GitHub links May 18, 2015 index.html Add top-level index.html file Jun 29, 2015 README.md Boost.Compute Boost.Compute is a GPU/parallel-computing library for C++ based on OpenCL. The core library is a thin C++ wrapper over the OpenCL API and provides access to compute devices, contexts, command queues and memory buffers. On top of the core library is a generic, STL-like interface providing common algorithms (e.g. transform(), accumulate(), sort()) along with common containers (e.g. vector<T>, flat_set<T>). It also features a number of extensions including parallel-computing algorithms (e.g. exclusive_scan(), scatter(), reduce()) and a number of fancy iterators (e.g. transform_iterator<>, permutation_iterator<>, zip_iterator<>). The full documentation is available at http://boostorg.github.io/compute/. Example The following example shows how to sort a vector of floats on the GPU: #include <vector> #include <algorithm> #include <boost/compute.hpp>  namespace compute = boost::compute;  int main() {     // get the default compute device     compute::device gpu = compute::system::default_device();      // create a compute context and command queue     compute::context ctx(gpu);     compute::command_queue queue(ctx, gpu);      // generate random numbers on the host     std::vector<float> host_vector(1000000);     std::generate(host_vector.begin(), host_vector.end(), rand);      // create vector on the device     compute::vector<float> device_vector(1000000, ctx);      // copy data to the device     compute::copy(         host_vector.begin(), host_vector.end(), device_vector.begin(), queue     );      // sort data on the device     compute::sort(         device_vector.begin(), device_vector.end(), queue     );      // copy data back to the host     compute::copy(         device_vector.begin(), device_vector.end(), host_vector.begin(), queue     );      return 0; } Boost.Compute is a header-only library, so no linking is required. The example above can be compiled with: g++ -I/path/to/compute/include sort.cpp -lOpenCL More examples can be found in the tutorial and under the examples directory. Support Questions about the library (both usage and development) can be posted to the mailing list. Bugs and feature requests can be reported through the issue tracker. Also feel free to send me an email with any problems, questions, or feedback. Help Wanted The Boost.Compute project is currently looking for additional developers with interest in parallel computing. Please send an email to Kyle Lutz (kyle.r.lutz@gmail.com) for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/boostorg/compute"	"A C++ GPU Computing Library for OpenCL. [Boost]"	"true"
"Concurrency"	"Bolt"	"https://github.com/HSA-Libraries/Bolt"	"A C++ template library optimized for GPUs. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"228"	"52"	"49"	"GitHub - HSA-Libraries/Bolt: Bolt is a C++ template library optimized for GPUs. Bolt provides high-performance library implementations for common algorithms such as scan, reduce, transform, and sort. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 52 Star 228 Fork 49 HSA-Libraries/Bolt Code Issues 17 Pull requests 5 Wiki Pulse Graphs Bolt is a C++ template library optimized for GPUs. Bolt provides high-performance library implementations for common algorithms such as scan, reduce, transform, and sort. 706 commits 7 branches 8 releases 8 contributors C++ 95.3% C 2.6% Other 2.1% C++ C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master v0.4 v1.0 v1.1 v1.2 Nothing to show v1.3GA v1.3Alpha v1.2GA v1.1GA v1.0GA v1.0.Beta v0.4.4 v0.4.0 Nothing to show New pull request Latest commit c53998c Dec 9, 2014 avinashcpandey It's time for Bolt1.3 Permalink Failed to load latest commit information. automation Merged from develop Branch. Getting ready for Bolt 1.3 Alpha release. Nov 25, 2014 bench It's time for Bolt1.3. Dec 9, 2014 benchmarkPackage Merged from develop Branch. Getting ready for Bolt 1.3 Alpha release. Nov 25, 2014 bin replaced the bin folder Dec 4, 2012 bolt It's time for Bolt1.3. Dec 9, 2014 doxy It's time for Bolt1.3. Dec 9, 2014 examples Checkin for Bolt 1.2 GA release. Jul 2, 2014 include/bolt It's time for Bolt1.3. Dec 9, 2014 superbuild Merged from develop Branch. Getting ready for Bolt 1.3 Alpha release. Nov 25, 2014 test It's time for Bolt1.3. Dec 9, 2014 tools Merged from develop Branch. Getting ready for Bolt 1.3 Alpha release. Nov 25, 2014 .gitignore replaced J's gitignore with the master Dec 21, 2012 CMakeLists.txt Merged from develop Branch. Getting ready for Bolt 1.3 Alpha release. Nov 25, 2014 FindOpenCL.cmake Checkin for Bolt 1.2 GA release. Jul 2, 2014 FindTBB.cmake Checkin for Bolt 1.2 GA release. Jul 2, 2014 LICENSE.txt Added License information and removed ReadmeBuild.html Apr 2, 2013 README.md It's time for Bolt1.3 Dec 9, 2014 README.md Bolt is a C++ template library optimized for heterogeneous computing. Bolt is designed to provide high-performance library implementations for common algorithms such as scan, reduce, transform, and sort. The Bolt interface was modeled on the C++ Standard Template Library (STL). Developers familiar with the STL will recognize many of the Bolt APIs and customization techniques. The primary goal of Bolt is to make it easier for developers to utilize the inherent performance and power efficiency benefits of heterogeneous computing. It has interfaces that are easy to use, and has comprehensive documentation for the library routines, memory management, control interfaces, and host/device code sharing. Compared to writing the equivalent functionality in OpenCL™, you’ll find that Bolt requires significantly fewer lines-of-code and less developer effort. Bolt is designed to provide a standard way to develop an application that can execute on either a regular CPU, or use any available OpenCL™ capable accelerated compute unit, with a single code path. Here's a link to our BOLT wiki page. Prerequisites Windows Visual Studio 2010 onwards (VS2012 for C++ AMP) Tested with 32/64 bit Windows® 7/8 and Windows® Blue CMake 2.8.10 TBB (For Multicore CPU path only) (4.1 Update 1 or Above) . See Building Bolt with TBB. APP SDK 2.8 or onwards. Note: If the user has installed both Visual Studio 2012 and Visual Studio 2010, the latter should be updated to SP1. Linux GCC 4.6.3 and above Tested with OpenSuse 12.3, RHEL 6.4 64bit, RHEL 6.3 32bit, Ubuntu 13.4 CMake 2.8.10 TBB (For Multicore CPU path only) (4.1 Update 1 or Above) . See Building Bolt with TBB. APP SDK 2.8 or onwards. Note: Bolt pre-built binaries for Linux are build with GCC 4.7.3, same version should be used for Application building else user has to build Bolt from source with GCC 4.6.3 or higher. Catalyst™ package The latest Catalyst driver contains the most recent OpenCL runtime. Recommended Catalyst package is latest 13.11 Beta Driver. 13.4 and higher is supported. Note: 13.9 in not supported. Supported Devices AMD APU Family with AMD Radeon™ HD Graphics A-Series C-Series E-Series E2-Series G-Series R-Series AMD Radeon™ HD Graphics 7900 Series (7990, 7970, 7950) 7800 Series (7870, 7850) 7700 Series (7770, 7750) AMD Radeon™ HD Graphics 6900 Series (6990, 6970, 6950) 6800 Series (6870, 6850) 6700 Series (6790 , 6770, 6750) 6600 Series (6670) 6500 Series (6570) 6400 Series (6450) 6xxxM Series AMD Radeon™ Rx 2xx Graphics R9 2xx Series R8 2xx Series R7 2xx Series AMD FirePro™ Professional Graphics W9100 Compiled binary windows packages (zip packages) for Bolt may be downloaded from the Bolt landing page hosted on AMD's Developer Central website. Examples The simple example below shows how to use Bolt to sort a random array of 8192 integers. #include <bolt/cl/sort.h> #include <vector> #include <algorithm>  int main () {     // generate random data (on host)     size_t length = 8192     std::vector<int> a (length);     std::generate ( a.begin (), a.end(), rand );      // sort, run on best device in the platform     bolt::cl::sort(a.begin(), a.end());     return 0; }  The code will be familiar to programmers who have used the C++ Standard Template Library; the difference is the include file (bolt/cl/sort.h) and the bolt::cl namespace before the sort call. Bolt developers do not need to learn a new device-specific programming model to leverage the power and performance advantages of heterogeneous computing. #include <bolt/cl/device_vector.h> #include <bolt/cl/scan.h> #include <vector> #include <numeric>  int main() {   size_t length = 1024;   // Create device_vector and initialize it to 1   bolt::cl::device_vector< int > boltInput( length, 1 );    // Calculate the inclusive_scan of the device_vector   bolt::cl::inclusive_scan(boltInput.begin(),boltInput.end(),boltInput.begin( ) );    // Create an std vector and initialize it to 1   std::vector<int> stdInput( length, 1 );    // Calculate the inclusive_scan of the std vector   bolt::cl::inclusive_scan(stdInput.begin( ),stdInput.end( ),stdInput.begin( ) );   return 0; }  This example shows how Bolt simplifies management of heterogeneous memory. The creation and destruction of device resident memory is abstracted inside of the bolt::cl::device_vector <> class, which provides an interface familiar to nearly all C++ programmers. All of Bolt’s provided algorithms can take either the normal std::vector or the bolt::cl::device_vector<> class, which allows the user to control when and where memory is transferred between host and device to optimize performance. Copyright and Licensing information © 2012,2014 Advanced Micro Devices, Inc. All rights reserved. Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/HSA-Libraries/Bolt"	"A C++ template library optimized for GPUs. [Apache2]"	"true"
"Concurrency"	"ck"	"https://github.com/concurrencykit/ck"	"Concurrency primitives, safe memory reclamation mechanisms and non-blocking data structures. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"965"	"81"	"126"	"GitHub - concurrencykit/ck: Concurrency primitives, safe memory reclamation mechanisms and non-blocking (including lock-free) data structures designed to aid in the research, design and implementation of high performance concurrent systems. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 81 Star 965 Fork 126 concurrencykit/ck Code Issues 11 Pull requests 1 Pulse Graphs Concurrency primitives, safe memory reclamation mechanisms and non-blocking (including lock-free) data structures designed to aid in the research, design and implementation of high performance concurrent systems. http://concurrencykit.org/ 1,463 commits 1 branch 35 releases Fetching contributors C 90.4% C++ 5.8% Makefile 3.5% Objective-C 0.3% C C++ Makefile Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.5.1 0.5.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3 0.2.20 0.2.19 0.2.18 0.2.17 0.2.16 0.2.15 0.2.14 0.2.13 0.2.12 0.2.11 0.2.10 0.2.9 0.2.8 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. build build/ck.pc.in: fix expansion of PC_CFLAGS Aug 10, 2015 doc doc: ck_epoch_poll now only takes one argument. Jun 3, 2016 include Update ck_ring.h Jul 14, 2016 regressions Ht: regressions: validate serial: check that our hash function was ac… Mar 10, 2016 src ck_ht_hash(): actually use user-provided hash function Mar 10, 2016 tools Initial import. Feb 20, 2011 .gitignore [git] Additional .gitignore entries. Dec 30, 2015 LICENSE update Aug 1, 2014 Makefile.in add --with(out)?-pic configure options Apr 21, 2014 README README: Remove trailing whitespace. Jun 10, 2012 configure build: Fix clang detection to require major >= 3. Jul 15, 2016 README   ____                                                        _  ___ _  / ___|___  _ __   ___ _   _ _ __ _ __ ___ _ __   ___ _   _  | |/ (_) |_ | |   / _ \| '_ \ / __| | | | '__| '__/ _ \ '_ \ / __| | | | | ' /| | __| | |__| (_) | | | | (__| |_| | |  | | |  __/ | | | (__| |_| | | . \| | |_  \____\___/|_| |_|\___|\__,_|_|  |_|  \___|_| |_|\___|\__, | |_|\_\_|\__|                                                       |___/  Step 1. 	./configure 	For additional options try ./configure --help  Step 2. 	In order to compile regressions (requires POSIX threads) use         ""make regressions"". In order to compile libck use ""make all"" or ""make"".  Step 3. 	In order to install use ""make install"" 	To uninstall use ""make uninstall"".  See http://concurrencykit.org/ for more information.   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/concurrencykit/ck"	"Concurrency primitives, safe memory reclamation mechanisms and non-blocking data structures. [BSD]"	"true"
"Concurrency"	"C++React"	"https://github.com/schlangster/cpp.react"	"A reactive programming library for C++11. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"563"	"61"	"54"	"GitHub - schlangster/cpp.react: C++React: A reactive programming library for C++11. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 61 Star 563 Fork 54 schlangster/cpp.react Code Issues 9 Pull requests 3 Wiki Pulse Graphs C++React: A reactive programming library for C++11. http://schlangster.github.io/cpp.react/ 417 commits 3 branches 2 releases Fetching contributors C++ 99.4% CMake 0.6% C++ CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags all_engines gh-pages master Nothing to show REMOVING_PIPELINING REMOVING_FLOODING Nothing to show New pull request Latest commit 1f6ddb7 Mar 23, 2015 schlangster Fixed #9 Permalink Failed to load latest commit information. benchmarks Cleaned up LifeSim benchmark a bit (it's still not great). Jul 30, 2014 examples Comment correction. Aug 1, 2014 include/react Fixed #9 Mar 23, 2015 project/msvc Changed Subystem to Console for Release profile in some examples. Aug 1, 2014 src Fixed #1. Jul 29, 2014 tests Cleanup/refactoring. Jan 12, 2015 tools/ReactPlayer Added ReactPlayer tool. Jul 28, 2014 .gitattributes Initial commit. Feb 22, 2014 .gitignore Initial commit. Feb 22, 2014 CMakeLists.txt Improved build scripts, enabled Example_BasicReactors. Jun 3, 2014 LICENSE_1_0.txt Released under the Boost Software License, Version 1.0. Mar 12, 2014 README.md Fixed #3. Aug 3, 2014 README.md C++React is reactive programming library for C++11. Generally speaking, it provides abstractions to handle change propagation and data processing for a push-based event model. A more practical description is that it enables coordinated, multi-layered - and potentially parallel - execution of callbacks. All this happens implicitly, based on declarative definitions, with guarantees regarding update minimality - nothing is re-calculated or processed unnecessarily; glitch freedom - no transiently inconsistent data sets; thread safety - no data races for parallel execution by avoiding side effects. The core abstractions of the library are signals, reactive variables that are automatically re-calculated when their dependencies change, and event streams as composable first class objects. Signals specifically deal with aspects of time-varying state, whereas event streams facilitate event processing in general. Additional features include a publish/subscribe mechanism for callbacks with side effects; a set of operations and algorithms to combine signals and events; a domain model to encapsulate multiple reactive systems; transactions to group related events, supporting both synchronous and asynchrounous execution. Documentation If you're interested in learning about C++React, have a look at its documentation. Using the library This library is a work-in-progress. It should not be considered release quality yet and its API might still change. It is, however, in a perfectly usable state and has already received a fair amount of testing and tuning. Dependencies Intel TBB 4.2 (required) Google test framework (optional, to compile the unit tests) Boost 1.55.0 C++ Libraries (optional, to include Reactor.h, which requires boost::coroutine) Compiling C++React has been tested with the following compilers: Visual Studio 2013.2 GCC 4.8.2 Clang 3.4 To build with Visual Studio, use the pre-made solution found in project/msvc/. To build with GCC or Clang, use CMake: mkdir build cd build cmake .. make  For more details, refer to the Build instructions. Features by example Signals Signals are self-updating reactive variables. They can be combined in expressions to create new signals, which are automatically re-calculated when their dependencies change. using namespace std; using namespace react;  // Defines a reactive domain that uses single-threaded, sequential updating REACTIVE_DOMAIN(D, sequential)  // Defines aliases for types of the given domain, // e.g. using VarSignalT<X> = VarSignal<D,X> USING_REACTIVE_DOMAIN(D)  // Two reactive variables that can be manipulated imperatively // to input external changes VarSignalT<int> width  = MakeVar<D>(1); VarSignalT<int> height = MakeVar<D>(2);  // A signal that depends on width and height and multiplies their values SignalT<int> area = MakeSignal(     With(width, height),     [] (int w, int h) {         return w * h;     }); Signal values can be accessed imperatively: cout << ""area: "" << area.Value() << endl; // => area: 2  // Width changed, so area is re-calculated automatically width.Set(10);  cout << ""area: "" << area.Value() << endl; // => area: 20 Or, instead of using Value() to pull the new value, callback functions can be registered to receive notifications on a change: Observe(area, [] (int newValue) {     cout << ""area changed: "" << newValue << endl; }); Overloaded operators for signal types allow to omit MakeSignal for a more concise syntax: // Lift as reactive expression - equivalent to previous example SignalT<int> area = width * height; Event streams Unlike signals, event streams are not centered on changing state, but represent flows of discrete values. They are first-class objects and can be merged, filtered, transformed or composed to more complex types: using namespace std; using namespace react;  REACTIVE_DOMAIN(D, sequential) USING_REACTIVE_DOMAIN(D)  // Two event sources EventSourceT<Token> leftClick  = MakeEventSource<D>(); EventSourceT<Token> rightClick = MakeEventSource<D>();  // Merge both event streams EventsT<Token> anyClick = leftClick | rightClick;  // React to events Observe(anyClick, [] (Token) {     cout << ""clicked!"" << endl; }); leftClick.Emit(); // => clicked! rightClick.Emit(); // => clicked!  Parallelism and concurrency When enabling it through the concurrency policy, updates are automatically parallelized: REACTIVE_DOMAIN(D, parallel)  VarSignalT<int> in = MakeVar<D>(0);  SignalT<int> op1 = MakeSignal(in,     [] (int in) {         int result = doCostlyOperation1(in);         return result;     });  SignalT<int> op2 = MakeSignal(in,     [] (int in) {         int result = doCostlyOperation2(in);         return result;     });  // op1 and op2 can be re-calculated in parallel SignalT<int> out = op1 + op2; Acknowledgements The API of C++React has been inspired by the following two research papers: Deprecating the Observer Pattern with Scala.React REScala: Bridging Between Object-oriented and Functional Style in Reactive Applications Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/schlangster/cpp.react"	"A reactive programming library for C++11. [Boost]"	"true"
"Concurrency"	"Intel TBB"	"https://www.threadingbuildingblocks.org/"	"Intel® Threading Building Blocks. [GPL2 with runtime exception]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Threading Building Blocks | Skip to main content Learn What's New Documentation FAQ Licensing System Requirements Open Source on Intel® Hot Topics TBB Getting Started Tutorial Download Stable Releases Development Releases Plug-Ins Past Contributions Code Samples Commercial Versions News News Archive Testimonials Powered By Intel® Tools Video Archive Blogs Our forum Contribute Submit Contribution Contact Us Login Search form Search for -Any-Basic pageCode sampleFAQNewsPluginSoftware releaseTestimonialVideo Intel® Threading Building Blocks (Intel® TBB) 4.4 Update 5 Would you like to visit Cilk™ Plus? Intel® Cilk™ Plus offers a quick, easy, and reliable way to improve performance on multicore processors. DOWNLOAD NOW 3.18 MB TBB 4.4 Update 5 for OS X* All Operating Systems & Previous Releases » Flow Graph Designer Features and Sample Walk-Through Intel® Threading Building Blocks Concurrent Vector Use concurrent_vector for thread safe vector operations SHARE: GDCE: Parallelize your Games with Intel® TBB During GDC, we had the opportunity to talk to Dr. Mario Deilmann from Intel about Intel® TBB and why game developers should consider using this template library. Moreover we learnt what the main benefits are of Intel® TBB and how it can help developers to parallelize their games. SHARE: An Introduction to the Intel® TBB Flow Graph This video will introduce you to the flow graph feature in Intel® Threading Building Blocks (Intel® TBB) and provide examples of how it can be used. The flow graph feature provides a flexible and convenient API for parallel reactive and streaming applications. SHARE: Flow Graph Designer - Performance Analysis This video explains the performance analysis features available in Flow Graph Designer . It includes an overview of the performance timelines and an example workflow for analyzing a Flow Graph application. SHARE: Flow Graph Designer Features and Sample Walk-Through This video demonstrates the features of Flow Graph Designer while stepping through its workflow using one of the included sample files: samples/code_generation/feature_detectio­n.graphml. SHARE: Why Use Intel® TBB? Why use it? Intel® Threading Building Blocks (Intel® TBB) lets you easily write parallel C++ programs that take full advantage of multicore performance, that are portable and composable, and that have future-proof scalability. What is it? Widely used C++ template library for task parallelism   Primary features Parallel algorithms and data structures Scalable memory allocation and task scheduling   Reasons to use Rich feature set for general purpose parallelism C++; Windows*, Linux*, OS X* and other OSes Learn More Latest Posts News Forums May 27, 2016: Intel® TBB 4.4 Update 5 released Files are available in the stable releases section. Download it! Find out more about the changes. SHARE May 5, 2016: Intel® TBB 4.4 Update 4 released Files are available in the stable releases section. Download it! Find out more about the changes.   SHARE February 19, 2016: Intel® TBB 4.4 Update 3 released Files are available in the stable releases section. Download it! Find out more about the changes.   SHARE Load more “ We achieved great scaling with a minimum of effort on our part. Intel TBB gave us cross-platform atomic operations, thread-safe containers, threads, and thread-locking mechanisms as well as multi-thread allocators in one package.” Michaël Rouillé CTO, Golaem Documentation Developer Guide Web Developer Reference Web Stable Documentation Web Latest Documentation Web Doxygen Web Release Notes Web CHANGES file Txt Resources TBB Forums Web Code Samples Web FAQs Web Licensing Web Hot Topics Web TBB Getting Started Web   Structured Parallel Programming: Patterns for Efficient Computation Buy Now Intel Threading Build Blocks: Outfitting C++ for Multi-Core Processor Parallelism Buy Now Intel® Threading Building Blocks Resources Code Samples Documentation Downloads Forum ©Intel Corporation Intel and Threading Building Blocks are trademarks of Intel Corporation in the U.S. and other countries. * Other names and brands may be claimed as the property of others. Optimization Notice Legal Information Privacy Terms of Use Site Map Brought to you by"	"null"	"null"	"Intel® Threading Building Blocks. [GPL2 with runtime exception]"	"true"
"Concurrency"	"junction"	"https://github.com/preshing/junction"	"A library of concurrent data structures in C++. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"498"	"38"	"33"	"GitHub - preshing/junction: Concurrent data structures in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 498 Fork 33 preshing/junction Code Issues 4 Pull requests 0 Pulse Graphs Concurrent data structures in C++ 31 commits 1 branch 0 releases 2 contributors C++ 92.9% CMake 6.8% C 0.3% C++ CMake C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 39e02b3 May 18, 2016 preshing Fixes for C++98 Permalink Failed to load latest commit information. cmake Simplify CMake scripts Feb 8, 2016 docs Don't copy CMake scripts to install folder Feb 8, 2016 junction Fixes for C++98 May 18, 2016 samples Fixes for C++98 May 18, 2016 .clang-format Run clang-format Feb 6, 2016 .gitignore Initial commit Feb 1, 2016 CMakeLists.txt Simplify CMake scripts Feb 9, 2016 LICENSE Add project description to license Feb 8, 2016 README.md Rename set() to assign() Mar 14, 2016 README.md Junction is a library of concurrent data structures in C++. It contains several hash map implementations: junction::ConcurrentMap_Crude junction::ConcurrentMap_Linear junction::ConcurrentMap_Leapfrog junction::ConcurrentMap_Grampa  CMake and Turf are required. See the blog post New Concurrent Hash Maps for C++ for more information. License Junction uses the Simplified BSD License. You can use the source code freely in any project, including commercial applications, as long as you give credit by publishing the contents of the LICENSE file in your documentation somewhere. Getting Started If you just want to get the code and look around, start by cloning Junction and Turf into adjacent folders, then run CMake on Junction's CMakeLists.txt. You'll want to pass different arguments to cmake depending on your platform and IDE. $ git clone https://github.com/preshing/junction.git $ git clone https://github.com/preshing/turf.git $ cd junction $ mkdir build $ cd build $ cmake <additional options> ..  On Unix-like environments, cmake will generate a Makefile by default. On Windows, it will create a Visual Studio solution. To use a specific version of Visual Studio: $ cmake -G ""Visual Studio 14 2015"" ..  To generate an Xcode project on OS X: $ cmake -G ""Xcode"" ..  To generate an Xcode project for iOS: $ cmake -G ""Xcode"" -DCMAKE_TOOLCHAIN_FILE=../../turf/cmake/toolchains/iOS.cmake ..  The generated build system will contain separate targets for Junction, Turf, and some sample applications. Alternatively, you can run CMake on a specific sample only: $ cd junction/samples/MapCorrectnessTests $ mkdir build $ cd build $ cmake <additional options> ..  Adding Junction to Your Project There are several ways to add Junction to your own C++ project. Add Junction as a build target in an existing CMake-based project. Use CMake to build Junction and Turf, then link the static libraries into your own project. Grab only the source files you need from Junction, copy them to your project and hack them until they build correctly. Some developers will prefer approach #3, but I encourage you to try approach #1 or #2 instead. It will be easier to grab future updates that way. There are plenty of files in Junction (and Turf) that you don't really need, but it won't hurt to keep them on your hard drive either. And if you link Junction statically, the linker will exclude the parts that aren't used. Adding to an Existing CMake Project If your project is already based on CMake, clone the Junction and Turf source trees somewhere, then call add_subdirectory on Junction's root folder from your own CMake script. This will add both Junction and Turf targets to your build system. For a simple example, see the junction-sample repository. Building the Libraries Separately Generate Junction's build system using the steps described in the Getting Started section, then use it to build the libraries you need. Add these to your own build system. Make sure to generate static libraries to avoid linking parts of the library that aren't needed. If you build the install target provided by Junction's CMake script, the build system will output a clean folder containing only the headers and libs that you need. You can add this to your own project using a single include path. Choose the output directory by specifying the CMAKE_INSTALL_PREFIX variable to CMake. Additionally, you can specify JUNCTION_WITH_SAMPLES=OFF to avoid building the samples. For example: $ cmake -DCMAKE_INSTALL_PREFIX=~/junction-install -DJUNCTION_WITH_SAMPLES=OFF .. $ cmake --build . --target install --config RelWithDebInfo  Notes: Instead of running the second cmake command, which runs the build system, you could run your build system directly. For example, make install on Unix, or build the INSTALL project in Visual Studio. If using makefiles, you'll probably want to pass the additional option -DCMAKE_BUILD_TYPE=RelWithDebInfo to the first cmake command. This will create the following file structure: Configuration When you first run CMake on Junction, Turf will detect the capabilities of your compiler and write the results to a file in the build tree named include/turf_config.h. Similarly, Junction will write include/junction_config.h to the build tree. You can modify the contents of those files by setting variables when CMake runs. This can be done by passing additional options to cmake, or by using an interactive GUI such as cmake-gui or ccmake. For example, to configure Turf to use the C++11 standard library, you can set the TURF_PREFER_CPP11 variable on the command line: $ cmake -DTURF_PREFER_CPP11=1 ..  Or, using the CMake GUI: Many header files in Turf, and some in Junction, are configurable using preprocessor definitions. For example, turf/Thread.h will switch between turf::Thread implementations depending on the values of TURF_IMPL_THREAD_PATH and TURF_IMPL_THREAD_TYPE. If those macros are not defined, they will be set to default values based on information from the environment. You can set them directly by providing your own header file and passing it in the TURF_USERCONFIG variable when CMake runs. You can place this file anywhere; CMake will copy it to Turf's build tree right next to include/turf_config.h. $ cmake -DTURF_USERCONFIG=path/to/custom/turf_userconfig.h.in ..  The JUNCTION_USERCONFIG variable works in a similar way. As an example, take a look at the Python script junction/samples/MapScalabilityTests/TestAllMaps.py. This script invokes cmake several times, passing a different junction_userconfig.h.in file each time. That's how it builds the same test application using different map implementations. Rules and Behavior A Junction map is a lot like a big array of std::atomic<> variables, where the key is an index into the array. More precisely: All of a Junction map's member functions, together with its Mutator member functions, are atomic with respect to each other, so you can safely call them from any thread without mutual exclusion. If an assign happens before a get with the same key, the get will return the value it inserted, except if another operation changes the value in between. Any synchronizing operation will establish this relationship. For Linear, Leapfrog and Grampa maps, assign is a release operation and get is a consume operation, so you can safely pass non-atomic information between threads using a pointer. For Crude maps, all operations are relaxed. In the current version, you must not assign while concurrently using an Iterator. Feedback If you have any feedback on improving these steps, feel free to open an issue on GitHub, or send a direct message using the contact form on my blog. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/preshing/junction"	"A library of concurrent data structures in C++. [BSD]"	"true"
"Concurrency"	"libcds"	"https://github.com/khizmax/libcds"	"A C++ library of Concurrent Data Structures. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"376"	"54"	"60"	"GitHub - khizmax/libcds: A C++ library of Concurrent Data Structures Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 54 Star 376 Fork 60 khizmax/libcds Code Issues 1 Pull requests 4 Pulse Graphs A C++ library of Concurrent Data Structures http://libcds.sourceforge.net/doc/cds-api/index.html 1,162 commits 5 branches 2 releases 6 contributors C++ 98.0% C 1.5% CMake 0.5% Perl 0.0% Batchfile 0.0% HTML 0.0% C++ C CMake Perl Batchfile HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev integration master rel_1.6.0 rel_2.0 Nothing to show v2.1.0 v2.0.0 Nothing to show New pull request Latest commit 5e2a985 Jun 27, 2016 khizmax Merge branch 'dev' into integration Permalink Failed to load latest commit information. build/cmake static lib warning Jun 16, 2016 cds Added description of wait strategies for flat combining Jun 26, 2016 doxygen Removed old goals from CMakeLists, docfix May 30, 2016 projects/Win Added stripped uRCU to all unit tests Jun 22, 2016 src Added copyright and license Jan 5, 2016 test Added detail level to queue stress test for minimizing runtime Jun 23, 2016 tools Added copyright and license Jan 5, 2016 .gitignore Removed old test directory May 30, 2016 .travis.yml Travis-ci: try gcc-4.9 Mar 6, 2015 CMakeLists.txt Fixed CMake messages Jun 16, 2016 LICENSE Fix license Sep 18, 2014 change.log Added description of wait strategies for flat combining Jun 26, 2016 readme.md Removed old goals from CMakeLists, docfix May 30, 2016 thanks Added description of wait strategies for flat combining Jun 26, 2016 readme.md CDS C++ library The Concurrent Data Structures (CDS) library is a collection of concurrent containers that don't require external (manual) synchronization for shared access, and safe memory reclamation (SMR) algorithms like Hazard Pointer and user-space RCU that is used as an epoch-based SMR. CDS is mostly header-only template library. Only SMR core implementation is segregated to .so/.dll file. The library contains the implementations of the following containers: lock-free stack with optional elimination support several algo for lock-free queue, including classic Michael & Scott algorithm and its derivatives, the flat combining queue, the segmented queue. several implementation of unordered set/map - lock-free and fine-grained lock-based flat-combining technique lock-free skip-list lock-free FeldmanHashMap/Set Multi-Level Array Hash with thread-safe bidirectional iterator support Bronson's et al algorithm for fine-grained lock-based AVL tree Generally, each container has an intrusive and non-intrusive (STL-like) version belonging to cds::intrusive and cds::container namespace respectively. Version 2.x of the library is written on C++11 and can be compiled by GCC 4.8+, clang 3.3+, Intel C++ 15+, and MS VC++ 12 (2013) Update 4. Download the latest release from http://sourceforge.net/projects/libcds/files/ See online doxygen-generated doc here: http://libcds.sourceforge.net/doc/cds-api/index.html How to build *nix: use CMake Windows: use MS Visual C++ 2015 project Pull request requirements Pull-request to master branch will be unconditionally rejected integration branch is intended for pull-request. Usually, integration branch is the same as master dev branch is intended for main developing. Usually, it contains unstable code References Stack TreiberStack: [1986] R. K. Treiber. Systems programming: Coping with parallelism. Technical Report RJ 5118, IBM Almaden Research Center, April 1986. Elimination back-off implementation is based on idea from [2004] Danny Hendler, Nir Shavit, Lena Yerushalmi ""A Scalable Lock-free Stack Algorithm"" pdf FCStack - flat-combining wrapper for std::stack Queue BasketQueue: [2007] Moshe Hoffman, Ori Shalev, Nir Shavit ""The Baskets Queue"" pdf MSQueue: [1998] Maged Michael, Michael Scott ""Simple, fast, and practical non-blocking and blocking concurrent queue algorithms"" pdf [2002] Maged M.Michael ""Safe memory reclamation for dynamic lock-free objects using atomic reads and writes"" pdf [2003] Maged M.Michael ""Hazard Pointers: Safe memory reclamation for lock-free objects"" pdf RWQueue: [1998] Maged Michael, Michael Scott ""Simple, fast, and practical non-blocking and blocking concurrent queue algorithms"" pdf MoirQueue: [2000] Simon Doherty, Lindsay Groves, Victor Luchangco, Mark Moir ""Formal Verification of a practical lock-free queue algorithm"" pdf OptimisticQueue: [2008] Edya Ladan-Mozes, Nir Shavit ""An Optimistic Approach to Lock-Free FIFO Queues"" pdf SegmentedQueue: [2010] Afek, Korland, Yanovsky ""Quasi-Linearizability: relaxed consistency for improved concurrency"" pdf FCQueue - flat-combining wrapper for std::queue TsigasCycleQueue: [2000] Philippas Tsigas, Yi Zhang ""A Simple, Fast and Scalable Non-Blocking Concurrent FIFO Queue for Shared Memory Multiprocessor Systems"" pdf VyukovMPMCCycleQueue Dmitry Vyukov (see http://www.1024cores.net) Deque flat-combining deque based on stl::deque Map, set MichaelHashMap: [2002] Maged Michael ""High performance dynamic lock-free hash tables and list-based sets"" pdf SplitOrderedList: [2003] Ori Shalev, Nir Shavit ""Split-Ordered Lists - Lock-free Resizable Hash Tables"" pdf StripedMap, StripedSet: [2008] Maurice Herlihy, Nir Shavit ""The Art of Multiprocessor Programming"" CuckooMap, CuckooSet: [2008] Maurice Herlihy, Nir Shavit ""The Art of Multiprocessor Programming"" SkipListMap, SkipListSet: [2008] Maurice Herlihy, Nir Shavit ""The Art of Multiprocessor Programming"" FeldmanHashMap, FeldmanHashSet: [2013] Steven Feldman, Pierre LaBorde, Damian Dechev ""Concurrent Multi-level Arrays: Wait-free Extensible Hash Maps"". Supports thread-safe bidirectional iterators pdf Ordered single-linked list LazyList: [2005] Steve Heller, Maurice Herlihy, Victor Luchangco, Mark Moir, William N. Scherer III, and Nir Shavit ""A Lazy Concurrent List-Based Set Algorithm"" pdf MichaelList: [2002] Maged Michael ""High performance dynamic lock-free hash tables and list-based sets"" pdf Priority queue MSPriorityQueue: [1996] G.Hunt, M.Michael, S. Parthasarathy, M.Scott ""An efficient algorithm for concurrent priority queue heaps"" pdf Tree EllenBinTree: [2010] F.Ellen, P.Fatourou, E.Ruppert, F.van Breugel ""Non-blocking Binary Search Tree"" pdf BronsonAVLTreeMap - lock-based fine-grained AVL-tree implementation: [2010] Nathan Bronson, Jared Casper, Hassan Chafi, Kunle Olukotun ""A Practical Concurrent Binary Search Tree"" pdf SMR Hazard Pointers [2002] Maged M.Michael ""Safe memory reclamation for dynamic lock-free objects using atomic reads and writes"" pdf [2003] Maged M.Michael ""Hazard Pointers: Safe memory reclamation for lock-free objects"" pdf [2004] Andrei Alexandrescy, Maged Michael ""Lock-free Data Structures with Hazard Pointers"" pdf User-space RCU [2009] M.Desnoyers ""Low-Impact Operating System Tracing"" PhD Thesis, Chapter 6 ""User-Level Implementations of Read-Copy Update"" pdf [2011] M.Desnoyers, P.McKenney, A.Stern, M.Dagenias, J.Walpole ""User-Level Implementations of Read-Copy Update"" pdf Memory allocation [2004] M.Michael ""Scalable Lock-free Dynamic Memory Allocation"" pdf Flat Combining technique [2010] Hendler, Incze, Shavit and Tzafrir ""Flat Combining and the Synchronization-Parallelism Tradeoff"" pdf Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/khizmax/libcds"	"A C++ library of Concurrent Data Structures. [BSD]"	"true"
"Concurrency"	"Libclsph"	"https://github.com/libclsph/libclsph"	"An OpenCL based GPU accelerated SPH fluid simulation library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"4"	"6"	"GitHub - libclsph/libclsph: OpenCL based GPU accelerated SPH fluid simulation library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 26 Fork 6 libclsph/libclsph Code Issues 11 Pull requests 0 Wiki Pulse Graphs OpenCL based GPU accelerated SPH fluid simulation library 91 commits 2 branches 0 releases Fetching contributors C++ 98.4% Other 1.6% C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 4cdf18f Sep 13, 2015 OlivierLi Merge branch 'cleanup' into 'master' …  Massive cleanup of the simulation code, part 1  This change mainly moves some kernels, buffers, and other misc stuff to member variables. This reduces the clutter in the member function signatures and in some cases avoids unnecessary OpenCL buffer allocation/deallocation pairs.  See merge request !5 Permalink Failed to load latest commit information. cmake/Modules Search for OpenCL correctly and find shaders independently of bin dir. May 7, 2015 example Massive cleanup of the simulation code, part 1 Sep 11, 2015 fluid_properties Added polyhedral mesh collision Apr 14, 2014 libclsph Fix formatting. Sep 11, 2015 scenes Improve the OpenGL example. Jul 31, 2015 shaders Improve the OpenGL example. Aug 1, 2015 simulation_properties removed unused file Apr 24, 2014 util Improve the OpenGL example. Aug 1, 2015 .clang-format Fix formatting. Sep 12, 2015 .gitignore clang format google Aug 9, 2015 CMakeLists.txt Massive cleanup of the simulation code, part 1 Sep 12, 2015 README.md Update README.md Apr 20, 2014 format.sh Better format script Aug 26, 2015 license.txt Initial commit Nov 28, 2013 README.md libclsph An OpenCL based GPU accelerated SPH fluid simulation library Can I see it in action? Demo #1 Demo #2 Why? Libclsph was created to explore the possibilty of using the power of OpenCL to speed up the simulation of SPH fluid mechanics. Smoothed particle hydrodynamics is a fluid simulation technique that can be used to produce realistic simulations for animation,CGI or videogames. How ? Libclsph uses C++11 and OpenCL to run simulations. Results are exported using industry standards and can then be used in programs like houdini. Simulation properties can be easily modified by the user. Getting started Be sure to visit the wiki for more information and detailed instructions on how to get started. Libraries used picojson is used to load simulation properties from files. cereal is used for all serialization needs. partio is used to import/export particle data. tinyobjloader is used to load geometry in obj format. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libclsph/libclsph"	"An OpenCL based GPU accelerated SPH fluid simulation library. [MIT]"	"true"
"Concurrency"	"OpenCL"	"https://www.khronos.org/opencl/"	"The open standard for parallel programming of heterogeneous systems."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"75"	"46"	"28"	"GitHub - KhronosGroup/SPIR Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 75 Fork 28 KhronosGroup/SPIR Code Issues 3 Pull requests 1 Wiki Pulse Graphs No description or website provided. 40,400 commits 4 branches 0 releases Fetching contributors C++ 76.5% C 10.7% Objective-C 9.3% Objective-C++ 1.1% Python 1.0% HTML 0.9% Other 0.5% C++ C Objective-C Objective-C++ Python HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: spir_12 Switch branches/tags Branches Tags spir_12 spir_20_provisional spirv-1.0 spirv-1.1 Nothing to show Nothing to show New pull request Latest commit fd090c8 Apr 26, 2016 nizhegorodets committed with bader Add spir12 Ignore optimization level provided by user (#35) … Ignore optimization level provided by user Permalink Failed to load latest commit information. INPUTS Revert 'Fix a typo 'iff' => 'if''. iff is an abreviation of if and on… Sep 27, 2012 bindings [clang.py] Add Cursor.get_arguments() Nov 1, 2012 docs Added Documentation and ASan notes, clean-up of emtpy sections, coupl… Dec 20, 2012 examples analyzer-plugin/MainCallChecker.cpp: Fixup corresponding to r167275. Nov 2, 2012 include Add spir12 Ignore optimization level provided by user (#35) Apr 26, 2016 lib Add spir12 Ignore optimization level provided by user (#35) Apr 26, 2016 runtime Pass LLVM_ANDROID_TOOLCHAIN_DIR if set. Oct 24, 2012 test Add spir12 Ignore optimization level provided by user (#35) Apr 26, 2016 tools Merge SPIR generator changes Nov 28, 2013 unittests Fix binding of nodes in case of forEach..() matchers. Nov 11, 2012 utils Remove leftover code. Nov 9, 2012 www [analyzer] Check that the argument to CFMakeCollectable is non-NULL. Nov 7, 2012 .gitignore Add extra vim swap file pattern Oct 9, 2012 CMakeLists.txt CMake: Fix public header search for generating Xcode/MSVC projects. Oct 23, 2012 INSTALL.txt Add minimal INSTALL.txt Sep 13, 2009 LICENSE.TXT Happy new year 2012! Jan 1, 2012 Makefile The top-level clang Makefile is #included into other Makefiles. (sigh… Oct 3, 2012 ModuleInfo.txt Move the ModuleInfo.txt file. Jul 11, 2007 NOTES.txt Fix typo (test commit) Oct 18, 2012 README.md Add spir12 Ignore optimization level provided by user (#35) Apr 26, 2016 README.txt commit access verified, revert change Mar 6, 2012 README.md SPIR generator/Clang Installation Instructions These instructions describe how to build, install and operate SPIR generator Clang. Step 1: Organization SPIR generator/Clang is designed to be built as part of an LLVM build. SPIR generator/Clang is based on LLVM/Clang version 3.2. The LLVM source code could be downloaded from http://www.llvm.org/releases/3.2/llvm-3.2.src.tar.gz. It is also available directly from the LLVM svn server:   svn co http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_32/final llvm Or could be cloned from LLVM git repository:   git clone http://llvm.org/git/llvm.git llvm   cd llvm   git checkout --track -b release_32 remotes/origin/release_32 Assuming that the LLVM source code is located at $LLVM_SRC_ROOT, then the clang source code should be installed as: $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the LLVM build system to automatically recognize it and build it along with LLVM.   cd $LLVM_SRC_ROOT/tools   git clone https://github.com/KhronosGroup/SPIR clang   cd clang   git checkout --track -b spir_12 remotes/origin/spir_12 Step 2: Configure and Build LLVM Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will automatically be built with LLVM. Otherwise, run make in the Clang source directory to build Clang. Note: currently there might be failures in check_clang project. Step 3: (Optional) Verify Your Build It is a good idea to run the Clang tests to make sure your build works correctly. From inside the Clang build directory, run make test to run the tests. Step 4: Install Clang If you wish to run Clang from the generated binary directory, you may skip this section. From inside the Clang build directory, run make install to install the Clang compiler and header files into the prefix directory selected when LLVM was configured. The Clang compiler is available as clang and clang++. It supports a gcc like command line interface. See the man page for clang (installed into $prefix/share/man/man1) for more information. Step 5: Creating SPIR binaries To create a SPIR binary from a valid OpenCL-C file (.cl), use the following command lines:   clang -cc1 -emit-llvm-bc -triple <triple> <OpenCL compile options> -cl-spir-compile-options ""<OpenCL compile options>"" -include <opencl_spir.h> -o <output> <input> <triple>: for 32 bit SPIR use spir-unknown-unknown, for 64 bit SPIR use spir64-unknown-unknown. Note: <OpenCL compile options> appears twice. The command line option -cl-spir-compile-options ""<OpenCL compile options>"" specifies the compile options that occur in the SPIR metadata. : download opencl_spir.h from https://github.com/KhronosGroup/SPIR-Tools/blob/master/headers/opencl_spir.h -O: -O0 (default) is the only tested option value at the moment. It's assumed by design that all optimizations are executed by SPIR consumer. Reporting issues Bugs/feature requests can be filed via github or Khronos Bugzilla bug tracker. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KhronosGroup/SPIR"	"The open standard for parallel programming of heterogeneous systems."	"true"
"Concurrency"	"OpenMP"	"http://openmp.org/"	"The OpenMP API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OpenMP.org    The OpenMP® API specification for parallel programming OpenMP News »Bristol University Joins the OpenMP Effort 27 vendors and research organizations now collaborating on developing standard parallel programming model June 15, 2016 — The University of Bristol has joined the OpenMP ARB, a group of leading hardware and software vendors and research organizations creating the standard for the most popular shared-memory parallel programming model in use today. “My group is strongly committed to the development and promotion of truly open, cross- platform standards for parallel programming”, said Simon McIntosh-Smith, head of the High Performance Computing group at the University of Bristol. “Developing scientific applications which are capable of exploiting future computer architectures, from multi-core CPUs with wide vector units to many-core GPUs, is already an extremely challenging task. The investment of time and effort required to meet this challenge is best returned by employing standards such as OpenMP, and the early work in my group with partners such as Intel and Cray, has convinced us that OpenMP 4.5 can be a highly effective way of writing portable parallel programs” The University of Bristol is one of the most popular and successful universities in the UK, and was ranked within the top 40 universities in the world in the QS World University rankings 2015. “It is good to see that the strong interest of the European OpenMP community also materializes in a growing number of ARB members from the European region”, says Michael Klemm, OpenMP ARB CEO. The OpenMP ARB now has 13 permanent members and 14 auxiliary members. Permanent members are vendors with a long-term interest in creating products for OpenMP, while auxiliary members have an interest in OpenMP and do not create or sell products. Posted on June 15, 2016    »Call for Papers - OpenMPCon 2016 Call for Papers - OpenMPCon 2016 International OpenMP Developers Conference    October 03-05 2016   Nara, Japan  http://www.openmpcon.org  IMPORTANT DATE: Abstract Deadline:  June 11, 2016  *****************************************************************  Sponsored by: OpenMP ARB  Description: OpenMPCon is the annual OpenMP Developers conference organized by the OpenMP community, for the community.  OpenMPCon takes place 03-05 October in Nara, Japan and will focus on the practical application of OpenMP and other directive based languages, to deliver high-performance computing through parallel processing. Associated workshops, tutorials, special sessions, poster sessions and an exhibition will run in parallel with the conference.  Submissions: Submissions are requested from industry experts, developers and academia on all topics related to OpenMP, including but not limited to: application development from any discipline, algorithms, performance analysis, tools and libraries, optimization, verification, portability and education. Sessions can be in the form of technical presentations, tutorials and workshops, posters or panel discussions.  All submissions should be in the form of short abstracts (Minimum 300 words - Maximum 1,000 words) that will go through a peer review process.  Session materials will be posted on the OpenMPCon website and will be available to conference attendees.  Topics of interest include, but are not limited to: * How you Use OpenMP * Guidelines of OpenMP * Tips, tricks, gotchas of OpenMP * Performance of OpenMP * Conformance, build, options of OpenMP compilers/runtime implementations * Latest OpenMP and older releases and how it changes life for users * Accelerator, and heterogeneous computing (GPUs, accelerators, FPGA, etc.) * Tasks, task groups and task dependencies * Scientific, HPC workloads * Commercial, analytic workload * Oil and Gas use of OpenMP * Research on OpenMP (although a good research paper should be submitted to IWOMP) * Manufacturing, games, graphics, operating system, device drivers, and networking domains for OpenMP * Comparisons with other parallel languages * Future of OpenMP * Reduction * Base language (C++, C, Fortran) with OpenMP * Affinity * SIMD and vectors * Memory model, atomics, locks, mutexes, barriers and critical sections in OpenMP * OpenMP APIs and environment variables * Cancellation and Error Model * Technical Reports, TR1, TR2 * Arrays shaping in OpenMP * OpenMP concurrency and parallelism * OpenMP designs * Cancellation * Interoperability * Event programming, futures * Governance, ARB, committee logistics * OpenMP website, discussion groups, forums, twikis * Conferences, language meetings, IWOMP * Speculative execution and transactional memory * Software development tools for OpenMP * Relation with other (MPI, OpenCL, OpenACC, ISO, etc) * History of OpenMP * Tutorial-style sessions Posted on June 3, 2016    »Latest OpenMP News Some new developments regarding OpenMP: LLVM Clang is growing towards full OpenMP 4.5 support. http://www.phoronix.com/scan.php?page=news_item&px=Clang-OpenMP-4x-Better GCC 6.1 has been released with full support for OpenMP 4.5 https://gcc.gnu.org/ml/gcc-announce/2016/msg00000.html The Parallella Board is now running OpenMP. It has dual-core ARM A9 processors and as co-processor Adapteva Epiphany https://www.parallella.org/board How to do parallel processing with Python and OpenMP https://goparallel.sourceforge.net/parallel-processing-with-python-and-openmp/?utm_campaign=parallel-processing-with-python-and-openmp InsideHPC published an article on OpenMP and OpenCL on Intel Xeon Phi http://insidehpc.com/2016/02/openmp-and-opencl/ An excellent route to invoking C++/OpenMP from R is by using the Rcpp package http://www.r-bloggers.com/parallel-computing-for-data-science/ Posted on May 12, 2016    »GCC 6.1 Released - Supports OpenMP 4.5 GCC 6.1 is a major release containing substantial new functionality not available in GCC 5.x or previous GCC releases. The OpenMP 4.5 specification is fully supported in this new release, and the compiler can be configured for OpenMP offloading to Intel XeonPhi Knights Landing and AMD HSAIL. See https://gcc.gnu.org/gcc-6/ for details. Posted on May 12, 2016    »OpenMPCon 2016 Developers Conference – Call for Papers OpenMPCon is the annual forum for OpenMP developers to present and discuss the development of real-world applications that leverage the performance of parallel processing through the use of OpenMP. OpenMPCon takes place 3-5 October in Nara, Japan. Abstract submissions are requested from industry experts, developers, and academia on all topics related to OpenMP, including but not limited to: the experience of developing real-world applications with OpenMP, algorithms, performance analysis, tools and libraries, optimization, verification, portability and education. Sessions can be in the form of short form technical presentations, tutorials, workshops, posters, or panel discussions. The deadline for the submission of short abstracts is 11 June, 2016 - For additional information visit: http://www.openmpcon.org OpenMPCon 2016 builds on the success of last year’s inaugural event to provide developers with a unique opportunity to enhance their knowledge and share their practical experience of using the OpenMP API, its supporting tools, and applying the latest advances in parallel programming techniques - said Michael Klemm, OpenMP CEO. OpenMPCon runs in partnership with IWOMP, the International Workshop on OpenMP. IWOMP focuses on the presentation of unpublished academic research and takes place immediately after OpenMPCon. Both events share the same tutorial sessions on Wednesday 5th October, 2016. For additional information visit: www.iwomp.org Posted on May 5, 2016    »OpenMP ARB Appoints Michael Klemm as New CEO The Board of Directors of the OpenMP Architecture Review Board (ARB) is pleased to announce the appointment of Dr. Michael Klemm as the new CEO of the OpenMP organization, a group of vendors and research organizations creating the standard for one of the most popular shared-memory and embedded parallel programming models in use today. Dr. Klemm succeeds Mr. Michael Wong, who served as the OpenMP CEO for almost 5 years. The Board of Directors and the members of the OpenMP ARB would like to thank Mr. Wong for his dedication and leadership over the past years. During his tenure, the OpenMP language standard added support for coprocessors and accelerators, became more agile by adding a procedure for publishing Technical Reports and yearly ratifications to the standard, and significantly grew in membership. “We are delighted to welcome Dr. Klemm as our CEO,” says Sanjiv Shah, Chairman of the Board of Directors. “His experience leading many organizational activities as well as several technical features of OpenMP make him well qualified to lead the OpenMP ARB.” “I look forward to working with Dr. Klemm to ensure the continued success and modernization of OpenMP,” says Dr. Bronis de Supinski, Chair of the OpenMP Language Committee. “Very close collaboration between Bronis de Supinski as the Chair of the OpenMP Language Committee and myself will be key to maintain OpenMP the programming model of choice, not only in HPC but for parallel programming in general,” says Michael Klemm. Dr. Michael Klemm obtained an M.Sc. in Computer Science in 2003 and received a Doctor of Engineering degree (Dr.-Ing.) from the Friedrich-Alexander-University Erlangen-Nuremberg, Germany, in 2008. Michael Klemm works in the Developer Relations Division at Intel in Germany and his areas of interest include compiler construction, design of programming languages, parallel programming, and performance analysis and tuning. Michael Klemm joined the OpenMP organization in 2009. Posted on April 21, 2016    »OpenMP ARB Announces IWOMP 2016 Workshop in Japan The OpenMP ARB announces the twelfth International Workshop on OpenMP (IWOMP), which is the premier forum to present and to discuss issues, trends, recent research ideas and results related to programming with OpenMP. The international workshop affords an opportunity for OpenMP users as well as developers to meet to discuss new ideas and information on this topic. IWOMP 2016 is a three-day event that will be held from October 5 to 7, 2016 in Nara, Japan. The deadline for paper submission is May 18, 2016. The website is http://www.iwomp.org Submissions of unpublished technical papers detailing innovative, original research and development related to OpenMP are solicited. All topics related to OpenMP are of interest, including OpenMP performance analysis and modeling, OpenMP performance and correctness tools, proposed OpenMP extensions, and OpenMP applications in any domain (e.g., scientific and numerical computation, video games, computer graphics, multimedia, information retrieval, optimization, text processing, data mining, finance, signal and image processing and machine learning). Advances in technologies, such as multicore processors and OpenMP devices (accelerators such as GPGPUs, DSPs or FPGAs), Multiprocessor Systems on a Chip (MPSoCs), and recent developments in OpenMP itself (e.g., tasking) present new opportunities and challenges for software and hardware developers. Recent advances in the C, C++ and Fortran base languages also offer interesting opportunities and challenges to the OpenMP programming model. IWOMP 2016 particularly solicits submissions in these areas as well as ones that discuss how to apply OpenMP to additional models of parallelism such as event loops. Posted on March 31, 2016    »Additional OpenMP Support in Clang Announced Recently released Clang 3.8 fully supports OpenMP 3.1 and some features of OpenMP 4.0 and 4.5. For details, see the Clang 3.8 Release Notes. Pre-compiled packages can be downloaded from http://llvm.org/releases/download.html#3.8.0 Posted on March 17, 2016    « Previous Entries The OpenMP API supports multi-platform parallel programming in C/C++ and Fortran. The OpenMP API defines a portable, scalable model with a simple and flexible interface for developing parallel applications on platforms from the desktop to the supercomputer. »Read about OpenMP.org Get »OpenMP specs Use »OpenMP Compilers Learn »Using OpenMP -- the book »Using OpenMP -- the examples »Using OpenMP -- the forum »Wikipedia »OpenMP Tutorial »More Resources Discuss »User Forum Ask the experts and get answers to questions about OpenMP Recent News Bristol University Joins the OpenMP Effort Call for Papers - OpenMPCon 2016 Latest OpenMP News GCC 6.1 Released - Supports OpenMP 4.5 OpenMPCon 2016 Developers Conference – Call for Papers Subscribe to the News Feed »OpenMP Specifications »About the OpenMP ARB »Frequently Asked Questions »Compilers »Resources »Who's Using OpenMP? »Press Releases »Videos »Discussion Forums Events »Public OpenMP Calendar Input Register Alert the OpenMP.org webmaster about new products, events, or updates and we'll post it here. »webmaster@openmp.org Follow @OpenMP_ARB Search OpenMP.org Archives June 2016 May 2016 April 2016 March 2016 February 2016 December 2015 November 2015 October 2015 September 2015 August 2015 July 2015 May 2015 April 2015 February 2015 January 2015 December 2014 November 2014 October 2014 June 2014 April 2014 March 2014 February 2014 January 2014 December 2013 November 2013 September 2013 July 2013 May 2013 April 2013 March 2013 February 2013 January 2013 December 2012 November 2012 October 2012 September 2012 July 2012 June 2012 May 2012 April 2012 March 2012 February 2012 January 2012 November 2011 October 2011 September 2011 July 2011 May 2011 February 2011 October 2010 July 2010 May 2010 June 2009 April 2009 March 2009 February 2009 January 2009 November 2008 October 2008 September 2008 August 2008 July 2008 June 2008 May 2008 April 2008 Copyright © 1998-2015. OpenMP and the OpenMP logo are registered trademarks of the OpenMP Architecture Review Board in the United States and other countries. All rights reserved. »Trademarks and Logo Usage »Privacy Policy"	"null"	"null"	"The OpenMP API."	"true"
"Concurrency"	"Thrust"	"http://thrust.github.io/"	"A parallel algorithms library which resembles the C++ Standard Template Library (STL). [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Thrust - Parallel Algorithms Library   Get Started Documentation Thrust API (Doxygen) Example Programs General Overview (PDF) Thrust Wiki Community Stack Overflow Mailing List Get Thrust What is Thrust? Thrust is a parallel algorithms library which resembles the C++ Standard Template Library (STL). Thrust's high-level interface greatly enhances programmer productivity while enabling performance portability between GPUs and multicore CPUs. Interoperability with established technologies (such as CUDA, TBB, and OpenMP) facilitates integration with existing software. Develop high-performance applications rapidly with Thrust! Recent News Thrust v1.8.1 release (18 Mar 2015) Thrust v1.8.0 release (12 Jan 2015) Thrust v1.7.0 release (02 Jul 2013) Thrust Content from GTC 2012 (12 May 2012) Thrust v1.6.0 release (07 Mar 2012) Thrust v1.5.1 release (30 Jan 2012) Thrust v1.5.0 release (28 Nov 2011) Thrust v1.3.0 release (05 Oct 2010) View all news » Examples Thrust is best explained through examples. The following source code generates random numbers serially and then transfers them to a parallel device where they are sorted. #include <thrust/host_vector.h> #include <thrust/device_vector.h> #include <thrust/generate.h> #include <thrust/sort.h> #include <thrust/copy.h> #include <algorithm> #include <cstdlib>  int main(void) {   // generate 32M random numbers serially   thrust::host_vector<int> h_vec(32 << 20);   std::generate(h_vec.begin(), h_vec.end(), rand);    // transfer data to the device   thrust::device_vector<int> d_vec = h_vec;    // sort data on the device (846M keys per second on GeForce GTX 480)   thrust::sort(d_vec.begin(), d_vec.end());    // transfer data back to host   thrust::copy(d_vec.begin(), d_vec.end(), h_vec.begin());    return 0; } This code sample computes the sum of 100 random numbers in parallel: #include <thrust/host_vector.h> #include <thrust/device_vector.h> #include <thrust/generate.h> #include <thrust/reduce.h> #include <thrust/functional.h> #include <algorithm> #include <cstdlib>  int main(void) {   // generate random data serially   thrust::host_vector<int> h_vec(100);   std::generate(h_vec.begin(), h_vec.end(), rand);    // transfer to device and compute sum   thrust::device_vector<int> d_vec = h_vec;   int x = thrust::reduce(d_vec.begin(), d_vec.end(), 0, thrust::plus<int>());   return 0; } Refer to the Quick Start Guide page for further information and examples. Contributors The original creators of Thrust are Jared Hoberock and Nathan Bell."	"null"	"null"	"A parallel algorithms library which resembles the C++ Standard Template Library (STL). [Apache2]"	"true"
"Concurrency"	"HPX"	"https://github.com/STEllAR-GROUP/hpx/"	"A general purpose C++ runtime system for parallel and distributed applications of any scale. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"476"	"76"	"125"	"GitHub - STEllAR-GROUP/hpx: A general purpose C++ runtime system for parallel and distributed applications of any scale Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 76 Star 476 Fork 125 STEllAR-GROUP/hpx Code Issues 99 Pull requests 7 Wiki Pulse Graphs A general purpose C++ runtime system for parallel and distributed applications of any scale http://stellar-group.org/libraries/hpx 15,684 commits 23 branches 29 releases 60 contributors C++ 95.9% CMake 3.2% Python 0.5% C 0.2% Cuda 0.1% Assembly 0.1% C++ CMake Python C Cuda Assembly Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags concurrent_data_structures copy_algorithms fabrics_parcelport fixing_wait_for_1751 fixing_1591 fixing_2236 fixing_2239 fixing_2243 gcc-bump gh-pages gid_target hpx_compute ibverbs_parcelport_1401 improved_sort iterators log_scripts master move_to_master parallel_scan prefix_scan range release vtables Nothing to show parquet 20140522.workshop 0.9.99 0.9.99-rc1 0.9.11 0.9.11-rc1 0.9.10 0.9.10-rc1 0.9.9 0.9.9-rc1 0.9.8 0.9.8-rc1 0.9.7 0.9.7-rc1 0.9.6 0.9.6-rc1 0.9.5 0.9.5-rc1 0.9.0 0.9.0-rc1 0.8.1 0.8.0 0.8.0-rc2 0.8.0-rc1 0.7.0 0.7.0-rc1 0.6.0 0.6.0-rc2 0.6.0-rc1 Nothing to show New pull request Latest commit 18ba891 Jul 12, 2016 hkaiser committed on GitHub Merge pull request #2244 from STEllAR-GROUP/fixing_msvc12 … Fixing MSVC problems Permalink Failed to load latest commit information. .github Hiding file which is github specific Feb 18, 2016 cmake Handle more than one library directory for pkgconfig Jul 9, 2016 docs Adding more closed tickets to docs Jul 3, 2016 examples Add missing linker dependency Jul 4, 2016 external Replace NULL with nullptr Jun 14, 2016 hpx Merge pull request #2244 from STEllAR-GROUP/fixing_msvc12 Jul 12, 2016 plugins Add a cleanup_ip_address function to fix ipv6 comparison problem Jul 2, 2016 python Fixing problems reported by the Boost inspect tool (this fixes #1478:… Apr 25, 2015 runtime Fixed an error with the whitespace check that showed the incorrect li… Jul 17, 2015 src Make inspect happy Jul 3, 2016 tests Fixing test compilation problems for MSVC12 Jul 9, 2016 tools Adding basic clang-tidy checker to circle-ci Jun 24, 2016 .editorconfig Revert .editorconfig change Jun 8, 2016 .gitattributes Boost policy dictates that all files must have the license header. Jul 10, 2012 .gitignore switched to debug mode, minor fixes in hpxcxx May 5, 2015 CMakeLists.txt Merge branch 'release' Jul 9, 2016 CTestConfig.cmake Adding missing license Sep 14, 2014 LICENSE_1_0.txt Undo the rename of LICENSE_1_0.txt - every header file points to LICE… Jul 16, 2013 README.rst Fixed typos Apr 4, 2016 circle.yml Adding basic clang-tidy checker to circle-ci Jun 24, 2016 README.rst HPX HPX is a general purpose C++ runtime system for parallel and distributed applications of any scale. Even if that's quite a mouthful, we mean every word of it! The goal of HPX is to create a high quality, freely available, open source implementation of the ParalleX model for conventional systems, such as classic Linux based Beowulf clusters or multi-socket highly parallel SMP nodes. At the same time, we want to have a very modular and well designed runtime system architecture which would allow us to port our implementation onto new computer system architectures. We want to use real world applications to drive the development of the runtime system, coining out required functionalities and converging onto a stable API which will provide a smooth migration path for developers. The API exposed by HPX is modelled after the interfaces defined by the C++11/14 ISO standard and adheres to the programming guidelines used by the Boost collection of C++ libraries. We aim improve the scalability of today's applications and to expose new levels of parallelism which are necessary to take advantage of the exascale systems of the future. What's so special about HPX? HPX exposes an uniform, standards-oriented API for ease of programming parallel and distributed applications. It enables programmers to write fully asynchronous code using hundreds of millions of threads. HPX provides unified syntax and semantics for local and remote operations. HPX makes concurrency manageable with dataflow and future based synchronization. It implements a rich set of runtime services supporting a broad range of use cases. HPX exposes a uniform, flexible, and extendable performance counter framework which can enable runtime adaptivity It is designed to solve problems conventionally considered to be scaling-impaired. HPX has been designed and developed for systems of any scale, from hand-held devices to very large scale systems. It is the first fully functional implementation of the ParalleX execution model. HPX is published under a liberal open-source license and has an open, active, and thriving developer community. The documentation for the latest release of HPX (currently V0.9.11) can be found here. In publications this release of HPX can be cited as: . Additionally, we regularly upload the current status of the documentation (which is being worked on as we speak) here. We also have a single-page version of the documentation here. If you plan to use HPX we suggest to start with the latest released version (currently HPX V0.9.11) which can be downloaded here. If you would like to work with the cutting edge version from this repository we suggest following the current health status of the master branch by looking at our contiguous integration results website. While we try to keep the master branch stable and usable, sometimes new bugs trick their way into the code base - you have been warned! The CircleCI contiguous integration service tracks the current build status for the master branch: In any case, if you happen to run into problems we very much encourage and appreciate any issue reports through the issue tracker for this Github project. Also, if you have any questions feel free to ask it over at stackoverflow and tag the question with hpx. Build Instructions All of HPX is distributed under the Boost Software License, Version 1.0 (See accompanying file LICENSE_1_0.txt or an online copy available here). Linux Before starting to build HPX, please read about the prerequisites. Clone the master HPX git repository (or a stable tag): git clone git://github.com/STEllAR-GROUP/hpx.git  Create a build directory. HPX requires an out-of-tree build. This means you will be unable to run CMake in the HPX source directory: cd hpx mkdir my_hpx_build cd my_hpx_build  Invoke CMake from your build directory, pointing the CMake driver to the root of your HPX source tree: cmake -DBOOST_ROOT=/your_boost_directory \       -DHWLOC_ROOT=/your_hwloc_directory \       [other CMake variable definitions] \       /path/to/hpx/source/tree  for instance: cmake -DBOOST_ROOT=~/packages/boost \       -DHWLOC_ROOT=/packages/hwloc \       -DCMAKE_INSTALL_PREFIX=~/packages/hpx \       ~/downloads/hpx_0.9.11  Invoke GNU make. If you are on a machine with multiple cores (very likely), add the -jN flag to your make invocation, where N is the number of cores on your machine plus one: gmake -j5  To complete the build and install HPX: gmake install  This will build and install the essential core components of HPX only. Use: gmake tests  to build and run the tests and: gmake examples gmake install  to build and install the examples. Please refer here for more information about building HPX on a Linux system. OS X (Mac) Before starting to build HPX, please read about the prerequisites. Clone the master HPX git repository (or a stable tag): git clone git://github.com/STEllAR-GROUP/hpx.git  Create a build directory. HPX requires an out-of-tree build. This means you will be unable to run CMake in the HPX source directory: cd hpx mkdir my_hpx_build cd my_hpx_build  Invoke CMake from your build directory, pointing the CMake driver to the root of your HPX source tree: cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \       -DBOOST_ROOT=/your_boost_directory    \       [other CMake variable definitions]    \       /path/to/hpx/source/tree  for instance: cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \       -DBOOST_ROOT=~/packages/boost \       -DCMAKE_INSTALL_PREFIX=~/packages/hpx \       ~/downloads/hpx_0.9.11  Invoke GNU make. If you are on a machine with multiple cores (very likely), add the -jN flag to your make invocation, where N is the number of cores on your machine plus one: make -j5  To complete the build and install HPX: make install  This will build and install the essential core components of HPX only. Use: make tests  to build and run the tests and: make examples make install  to build and install the examples. For more information and additional options, please see the corresponding documentation. Windows Before starting to build HPX, please read about the prerequisites. Clone the master HPX git repository (or a stable tag). You can use TortoiseGIT, or the git client that Cygwin provides. The git repository can be found at: git://github.com/STEllAR-GROUP/hpx.git  Create a build folder. HPX requires an out-of-tree-build. This means that you will be unable to run CMake in the HPX source folder. Open up the CMake GUI. In the input box labelled ""Where is the source code:"", enter the full path to the source folder. In the input box labelled ""Where to build the binaries:"", enter the full path to the build folder you created in step 2. Add CMake variable definitions (if any) by clicking the ""Add Entry"" button and selecting type ""String"". Most probably you will need to at least add the directories where Boost is located as BOOST_ROOT and where Hwloc is located as HWLOC_ROOT. Press the ""Configure"" button. A window will pop up asking you which compiler to use. Select the x64 Visual Studio 2012 compiler. Note that while it is possible to build HPX for x86 we don't recommend doing so as 32 bit runs are severely restricted by a 32 bit Windows system limitation affecting the number of HPX threads you can create. If the ""Generate"" button is not clickable, press ""Configure"" again. Repeat this step until the ""Generate"" button becomes clickable. Press ""Generate"". Open up the build folder, and double-click hpx.sln. Build the INSTALL target. For more information, please see the corresponding section in the documentation BlueGene/Q So far we only support BGClang for compiling HPX on the BlueGene/Q. Before starting to build HPX, please read about the prerequisites. Check if BGClang is available on your installation. If not obtain and install a copy from the BGClang trac page Build (and install) a recent version of Hwloc With the following commands: ./configure \       --host=powerpc64-bgq-linux \       --prefix=$HOME/install/hwloc \       --disable-shared \       --enable-static \       CPPFLAGS='-I/bgsys/drivers/ppcfloor ' \                '-I/bgsys/drivers/ppcfloor/spi/include/kernel/cnk/' make make install  Build (and install) a recent version of Boost, using BGClang:: To build Boost with BGClang, you'll need to set up the following in your Boost ~/user-config.jam file: # user-config.jam (put this file into your home directory) using clang   :   : bgclang++11   :   ;  You can then use this as your build command: ./bootstrap.sh ./b2 --build-dir=/tmp/build-boost --layout=versioned toolset=clang -j12  Clone the master HPX git repository (or a stable tag): git clone git://github.com/STEllAR-GROUP/hpx.git  Generate the HPX buildfiles using cmake: cmake -DHPX_PLATFORM=BlueGeneQ \       -DCMAKE_TOOLCHAIN_FILE=/path/to/hpx/cmake/toolchains/BGQ.cmake \       -DCMAKE_CXX_COMPILER=bgclang++11 \       -DMPI_CXX_COMPILER=mpiclang++11 \       -DHWLOC_ROOT=/path/to/hwloc/installation \       -DBOOST_ROOT=/path/to/boost \       -DHPX_MALLOC=system \       /path/to/hpx  To complete the build and install HPX: make -j24 make install  This will build and install the essential core components of HPX only. Use: make -j24 examples make -j24 install  to build and install the examples. You can find more details about using HPX on a BlueGene/Q system here. Intel(R) Xeon/Phi After installing Boost and HWLOC, the build procedure is almost the same as for how to build HPX on Unix Variants with the sole difference that you have to enable the Xeon Phi in the CMake Build system. This is achieved by invoking CMake in the following way: cmake \      -DCMAKE_TOOLCHAIN_FILE=/path/to/hpx/cmake/toolchains/XeonPhi.cmake \      -DBOOST_ROOT=$BOOST_ROOT \      -DHWLOC_ROOT=$HWLOC_ROOT \      /path/to/hpx  For more detailed information about building HPX for the Xeon/Phi please refer to the documentation. Docker We also provide several HPX docker images. Those can be used for rapid prototyping, demonstrations or writing minimal examples for issue reports. This also provides an HPX build environment for continuous integration of external projects. The following images are currently available: stellargroup/hpx:dev (HEAD, updated on every commit to master which builds successfully, see here for the build status) stellargroup/hpx:latest (latest release) stellargroup/hpx:0.9.11 (release v0.9.11) stellargroup/hpx:0.9.10 (release v0.9.10) While a more detailed introduction to docker can be found at the official docker homepage, here are some easy steps that explain how to use a docker image: # Download/Update the image docker pull stellargroup/hpx:dev  # Run a command. # NOTICE: Docker images are read-only and will be reset after execution. docker run stellargroup/hpx:dev hello_world  # Mount a host directory to make changes persistent. # In this case, mount the current host directory $PWD to /hpx in the # dockerfile via '-v'. # Also, make /hpx the current working directory with '-w'. docker run -v $PWD:/hpx -w /hpx stellargroup/hpx:dev <command> <arguments>  # For example, build the binary ""example"" from ""example.cpp"" using # the built-in hpx compilation script ""hpxcxx"". Note that hpx libraries # other than the core library have to be linked explicitly (like hpx_iostreams). docker run -v $PWD:/hpx -w /hpx stellargroup/hpx:dev \     hpxcxx example.cpp --exe=example -lhpx_iostreams  # Now run the resulting program: docker run -v $PWD:/hpx -w /hpx stellargroup/hpx:dev ./example  Acknowledgements We would like to acknowledge the NSF, DoE, DARPA, the Center for Computation and Technology (CCT) at Louisiana State University, and the Department of Computer Science 3 - Computer Architecture at the University of Erlangen Nuremberg who fund and support our work. We would also like to thank the following organizations for granting us allocations of their compute resources: LSU HPC, LONI, XSEDE, NERSC, and the Gauss Center for Supercomputing. HPX is currently funded by The National Science Foundation through awards 1117470 (APX), 1240655 (STAR), 1447831 (PXFS), and 1339782 (STORM). Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation. The Department of Energy (DoE) through the award DE-SC0008714 (XPRESS). Neither the United States Government nor any agency thereof, nor any of their employees, makes any warranty, express or implied, or assumes any legal liability or responsibility for the accuracy, completeness, or usefulness of any information, apparatus, product, or process disclosed, or represents that its use would not infringe privately owned rights. Reference herein to any specific commercial product, process, or service by trade name, trademark, manufacturer, or otherwise does not necessarily constitute or imply its endorsement, recommendation, or favoring by the United States Government or any agency thereof. The views and opinions of authors expressed herein do not necessarily state or reflect those of the United States Government or any agency thereof. The Bavarian Research Foundation (Bayerische Forschungsstfitung) through the grant AZ-987-11. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/STEllAR-GROUP/hpx/"	"A general purpose C++ runtime system for parallel and distributed applications of any scale. [Boost]"	"true"
"Concurrency"	"VexCL"	"https://github.com/ddemidov/vexcl"	"A C++ vector expression template library for OpenCL/CUDA. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"341"	"59"	"56"	"GitHub - ddemidov/vexcl: VexCL is a C++ vector expression template library for OpenCL/CUDA Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 59 Star 341 Fork 56 ddemidov/vexcl Code Issues 12 Pull requests 0 Pulse Graphs VexCL is a C++ vector expression template library for OpenCL/CUDA http://vexcl.readthedocs.org 1,631 commits 15 branches 55 releases Fetching contributors C++ 99.4% Other 0.6% C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags amd_fft benchmark_amdfft boost_phoenix_cmath_issue fft-niisi gh-pages hard-coded-fft-params home-brewed-expression-templates icc issue-100 issue-158-fft master mba-openmp mpi nvrtc symbolic_vs_combined Nothing to show 1.3.3 1.3.2 1.3.1 1.3.0 1.2.0 1.1.2 1.1.1 1.1.0 1.0.0 0.8.5 0.8.4 0.8.4-r1 0.8.3 0.8.2 0.8.1 0.8.0 0.7.6 0.7.5 0.7.4 0.7.3 0.7.2 0.7.1 0.7.0 0.6.7 0.6.6 0.6.5 0.6.2 0.6.1 0.6.0 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.6 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.1 0.3.0 0.2.4 0.2.3 0.2.2 0.2.1 0.2 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1 Nothing to show New pull request Latest commit 8b9f0af Jun 1, 2016 ddemidov Fix a problem with source_generator and g++ 6.1 Permalink Failed to load latest commit information. .travis Switch to Trusty on Travis Feb 24, 2016 CL Revert to using CL/cl.hpp Apr 22, 2016 cmake Use builtin FindOpenCL when available May 20, 2015 docs Switch documentation to Sphinx format Mar 15, 2016 examples Get rid of debug-only code introduced in the last commit May 17, 2016 tests Only expose opencl images when CL_VERSION_1_2 is defined May 19, 2016 vexcl Fix a problem with source_generator and g++ 6.1 Jun 1, 2016 .appveyor.yml AppVeyor-CI support Dec 4, 2015 .gitignore Add 'tags' to .gitignore Aug 5, 2013 .travis.yml Switch to Trusty on Travis Feb 24, 2016 CMakeLists.txt Silence a warning for gcc 6.1 May 14, 2016 DEPENDS.md Mentioned issue with Boost versions 1.49-1.51 in DEPENDS Jun 3, 2014 INSTALL.md Clarified INSTALL.md a bit Oct 3, 2013 LICENSE.md Update years in license Mar 1, 2016 README.md Fix RTFD image link Apr 28, 2016 build_init Update test scripts Mar 11, 2016 build_n_test Revert to using CL/cl.hpp Apr 22, 2016 README.md VexCL VexCL is a vector expression template library for OpenCL/CUDA. It has been created for ease of GPGPU development with C++. VexCL strives to reduce amount of boilerplate code needed to develop GPGPU applications. The library provides convenient and intuitive notation for vector arithmetic, reduction, sparse matrix-vectork products, etc. Multi-device and even multi-platform computations are supported. The source code of the library is distributed under very permissive MIT license. See VexCL documentation at http://vexcl.readthedocs.io/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ddemidov/vexcl"	"A C++ vector expression template library for OpenCL/CUDA. [MIT]"	"true"
"Containers"	"C++ B-tree"	"https://code.google.com/p/cpp-btree/"	"A template library that implements ordered in-memory containers based on a B-tree data structure. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"A template library that implements ordered in-memory containers based on a B-tree data structure. [Apache2]"	"true"
"Containers"	"Hashmaps"	"https://github.com/goossaert/hashmap"	"Implementation of open addressing hash table algorithms in C++. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"69"	"15"	"42"	"GitHub - goossaert/hashmap: Various open addressing hashmap algorithms in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 69 Fork 42 goossaert/hashmap Code Issues 0 Pull requests 0 Pulse Graphs Various open addressing hashmap algorithms in C++ 66 commits 1 branch 0 releases Fetching contributors C++ 85.8% Python 12.8% Other 1.4% C++ Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 1717425 Dec 6, 2015 goossaert Fixed Remove() method for backshift Robin Hood. … Implemented same lookup conditions in the Remove() method for the backshift Robin Hood as in the Get(), to prevent a useless iteration over the entire bucket array in case the key is missing. Permalink Failed to load latest commit information. .gitignore Initial commit. Aug 8, 2013 LICENSE Initial commit Aug 8, 2013 Makefile go for speed not -pg Apr 3, 2014 README.md Updated readme. Sep 8, 2013 backshift_hashmap.cc Fixed Remove() method for backshift Robin Hood. Dec 6, 2015 backshift_hashmap.h Added metric: distance to shift bucket. May 2, 2014 bitmap_hashmap.cc Renamed methods for clarity. Aug 16, 2014 bitmap_hashmap.h Renamed methods for clarity. Aug 15, 2014 hamming.cc Added first files. Aug 8, 2013 hamming.h Fixed includes and renamed defines. Aug 11, 2013 hashmap.h Removed the shift of the mean. Sep 24, 2013 main.cc Normalized the names of all methods referencing metrics. Apr 27, 2014 monitoring.cc Added metric: distance to shift bucket. May 2, 2014 monitoring.h Cleaned up traces. May 5, 2014 murmurhash3.cc Added first files. Aug 8, 2013 murmurhash3.h Added first files. Aug 8, 2013 plot.py Major cleanup. May 5, 2014 probing_hashmap.cc Normalized the names of all methods referencing metrics. Apr 27, 2014 probing_hashmap.h Added Close() method. Sep 8, 2013 shadow_hashmap.cc Renamed methods for clarity. Aug 15, 2014 shadow_hashmap.h Renamed methods for clarity. Aug 15, 2014 testcase.cc Reset metrics on breaks. May 5, 2014 testcase.h Added various monitoring metrics. Apr 21, 2014 tombstone_hashmap.cc Normalized the names of all methods referencing metrics. Apr 27, 2014 tombstone_hashmap.h no %%llu on uint64_t, #include <limits> for std::numeric_limits Apr 3, 2014 README.md hashmap Implementation of open addressing hash table algorithms in C++. Most of the code is under development, but the main() function in main.cc should provide enough information as to how to use the algorithms. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/goossaert/hashmap"	"Implementation of open addressing hash table algorithms in C++. [MIT]"	"true"
"Containers"	"LSHBOX"	"https://github.com/RSIA-LIESMARS-WHU/LSHBOX"	"A c++ toolbox of locality-sensitive hashing (LSH), provides several popular LSH algorithms, also support Python and MATLAB. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"54"	"11"	"23"	"GitHub - RSIA-LIESMARS-WHU/LSHBOX: A c++ toolbox of locality-sensitive hashing (LSH), provides several popular LSH algorithms, also support python and matlab. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 54 Fork 23 RSIA-LIESMARS-WHU/LSHBOX Code Issues 0 Pull requests 0 Pulse Graphs A c++ toolbox of locality-sensitive hashing (LSH), provides several popular LSH algorithms, also support python and matlab. 136 commits 2 branches 0 releases Fetching contributors C++ 76.5% FORTRAN 19.5% CMake 2.7% C 0.6% Python 0.2% Shell 0.2% Other 0.3% C++ FORTRAN CMake C Python Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 95f072c Jun 20, 2016 primetang introduce File-Based-ITQ Permalink Failed to load latest commit information. include add some instructions Jun 19, 2016 matlab rewrite some lsh headers Jun 19, 2016 python rewrite some lsh headers Jun 19, 2016 tools add some instructions Jun 19, 2016 CMakeLists.txt add some instructions Jun 19, 2016 LICENSE first commit Jul 7, 2014 README.md introduce File-Based-ITQ Jun 20, 2016 README.md LSHBOX-0.9 A C++ Toolbox of Locality-Sensitive Hashing for Large Scale Image Retrieval, Also Support Python and MATLAB. Change Log 2015.07.04 A new LSH method, K-means Based Double-Bit Quantization for Hashing (KDBQ), was added into LSHBOX-0.9 on July 4th, 2015. We implement KDBQ by C++ but also provide MATLAB interface. And the Python interface will be added into LSHBOX-0.9 later. Other files related to KDBQ have been updated synchronously. 2015.06.04 A new LSH method, Double-Bit Quantization Hashing (DBQ), was added into LSHBOX-0.9 on June 4th, 2015. We implement DBQ by C++ but also provide MATLAB interface. And the Python interface will be added into LSHBOX-0.9 later. Other files related to DBQ have been updated synchronously. Chapter 1 - Introduction Locality-Sensitive Hashing (LSH) is an efficient method for large scale image retrieval, and it achieves great performance in approximate nearest neighborhood searching. LSHBOX is a simple but robust C++ toolbox that provides several LSH algrithms, in addition, it can be integrated into Python and MATLAB languages. The following LSH algrithms have been implemented in LSHBOX, they are: LSH Based on Random Bits Sampling Random Hyperplane Hashing LSH Based on Thresholding LSH Based on p-Stable Distributions Spectral Hashing (SH) Iterative Quantization (ITQ) Double-Bit Quantization Hashing (DBQ) K-means Based Double-Bit Quantization Hashing (KDBQ) There are two repositories for compilation and performance tests, they are: LSHBOX-3rdparty: 3rdparty of LSHBOX, it is for compilation LSHBOX-sample datasets: a dataset for performance tests In addition, File-Based-ITQ is an File Based ITQ example for LSHBOX. Part of the code depends on the C++11, So I think your compiler should support this feature. We tested LSHBOX with VS2010 in Windows 7/8 32bit/64bit and with g++ in Linux, Mac test will be done in the future. We hope that there are more people that join in the test or contribute more algrithms. Please feel free to contact us [tanggefu@gmail.com, 20288ly@sina.cn or xiaozf@gmail.com] if you have any questions. Chapter 2 - Compilation LSHBOX is written by C++. And it also can be easily used in many contexts through the Python and MATLAB bindings provided with this toolbox. LSHBOX is simple and easy to use. If you want to integrate LSHBOX into you application, it don't need compile. You only need to add the include directory or modify the program search path, then you can use this library directly in C, C++, Python or MATLAB. If you want to test or contribute, CMAKE, a cross-platform, open-source build system, is usded to build some tools for the purpose. CMake can be downloaded from CMake' website. In some cases, if you want or need to compile it by yourself with Python and MATLAB, please delete the comment of the last two lines in file CMakeLists.txt, and you will find the compiling progress of python must rely on Boost library or some part of this library. For more detailed information, you can view the document ./python/README.md. During compilation, create a new directory named build in the main directory, then choose a appropriate compiler and switch to the build directory, finally, execute the following command according to your machine: Windows cmake -DCMAKE_BUILD_TYPE=Release .. -G""NMake Makefiles"" nmake Linux & OS X cmake .. make Chapter 3 - Usage This chapter contains small examples of how to use the LSHBOX library from different programming languages (C++, Python and MATLAB). For C++ /**  * @file itqlsh_test.cpp  *  * @brief Example of using Iterative Quantization LSH index for L2 distance.  */ #include <lshbox.h> int main(int argc, char const *argv[]) {     if (argc != 4)     {         std::cerr << ""Usage: ./itqlsh_test data_file lsh_file benchmark_file"" << std::endl;         return -1;     }     std::cout << ""Example of using Iterative Quantization"" << std::endl << std::endl;     typedef float DATATYPE;     std::cout << ""LOADING DATA ..."" << std::endl;     lshbox::timer timer;     lshbox::Matrix<DATATYPE> data(argv[1]);     std::cout << ""LOAD TIME: "" << timer.elapsed() << ""s."" << std::endl;     std::cout << ""CONSTRUCTING INDEX ..."" << std::endl;     timer.restart();     std::string file(argv[2]);     bool use_index = false;     lshbox::itqLsh<DATATYPE> mylsh;     if (use_index)     {         mylsh.load(file);     }     else     {         lshbox::itqLsh<DATATYPE>::Parameter param;         param.M = 521;         param.L = 5;         param.D = data.getDim();         param.N = 8;         param.S = 100;         param.I = 50;         mylsh.reset(param);         mylsh.train(data);         mylsh.hash(data);     }     mylsh.save(file);     std::cout << ""CONSTRUCTING TIME: "" << timer.elapsed() << ""s."" << std::endl;     std::cout << ""LOADING BENCHMARK ..."" << std::endl;     timer.restart();     lshbox::Matrix<DATATYPE>::Accessor accessor(data);     lshbox::Metric<DATATYPE> metric(data.getDim(), L1_DIST);     lshbox::Benchmark bench;     std::string benchmark(argv[3]);     bench.load(benchmark);     unsigned K = bench.getK();     lshbox::Scanner<lshbox::Matrix<DATATYPE>::Accessor> scanner(         accessor,         metric,         K     );     std::cout << ""LOADING TIME: "" << timer.elapsed() << ""s."" << std::endl;     std::cout << ""RUNING QUERY ..."" << std::endl;     timer.restart();     lshbox::Stat cost, recall;     lshbox::progress_display pd(bench.getQ());     for (unsigned i = 0; i != bench.getQ(); ++i)     {         mylsh.query(data[bench.getQuery(i)], scanner);         recall << bench.getAnswer(i).recall(scanner.topk());         cost << float(scanner.cnt()) / float(data.getSize());         ++pd;     }     std::cout << ""MEAN QUERY TIME: "" << timer.elapsed() / bench.getQ() << ""s."" << std::endl;     std::cout << ""RECALL   : "" << recall.getAvg() << "" +/- "" << recall.getStd() << std::endl;     std::cout << ""COST     : "" << cost.getAvg() << "" +/- "" << cost.getStd() << std::endl;      // mylsh.query(data[0], scanner);     // std::vector<std::pair<float, unsigned> > res = scanner.topk().getTopk();     // for (std::vector<std::pair<float, unsigned> >::iterator it = res.begin(); it != res.end(); ++it)     // {     //     std::cout << it->second << "": "" << it->first << std::endl;     // }     // std::cout << ""DISTANCE COMPARISON TIMES: "" << scanner.cnt() << std::endl; } You can get the sample dataset audio.data from http://www.cs.princeton.edu/cass/audio.tar.gz, if the link is invalid, you can also get it from LSHBOX-sample-data. FOR EXAMPLE, YOU CAN RUN THE FOLLOWING CODE IN COMMAND LINE AFTER BUILD ALL THE TOOLS: > create_benchmark audio.data audio.ben 200 50 > itqlsh_test audio.data audio.itq audio.ben  NOTE1: In our project, the format of the input file (such as audio.data, which is in float data type) is a binary file but not a text file, because binary file has many advantages. In LSHBOX/tools/create_test_data.cpp, we create a binary file with unsigned data type, from the process, you will find that the binary file is organized as the following format: {Bytes of the data type} {The size of the vectors} {The dimension of the vectors} {All of the binary vector, arranged in turn} For your application, you should also transform your dataset into this binary format. NOTE2: In addition, the dataset should be zero-centered, IT IS VERY IMPORTANT! For Python #!/usr/bin/env python # -*- coding: utf-8 -*- # pylshbox_example.py import pylshbox import numpy as np print 'prepare test data' float_mat = np.random.randn(100000, 192) float_query = float_mat[0] unsigned_mat = np.uint32(float_mat * 5) unsigned_query = unsigned_mat[0] print '' print 'Test rbsLsh' rbs_mat = pylshbox.rbslsh() rbs_mat.init_mat(unsigned_mat.tolist(), '', 521, 5, 20, 5) result = rbs_mat.query(unsigned_query.tolist(), 1) indices, dists = result[0], result[1] for i in range(len(indices)):     print indices[i], '\t', dists[i] print '' print 'Test rhpLsh' rhp_mat = pylshbox.rhplsh() rhp_mat.init_mat(float_mat.tolist(), '', 521, 5, 6) result = rhp_mat.query(float_query.tolist(), 2, 10) indices, dists = result[0], result[1] for i in range(len(indices)):     print indices[i], '\t', dists[i] print '' print 'Test thLsh' th_mat = pylshbox.thlsh() th_mat.init_mat(float_mat.tolist(), '', 521, 5, 12) result = th_mat.query(float_query.tolist(), 2, 10) indices, dists = result[0], result[1] for i in range(len(indices)):     print indices[i], '\t', dists[i] print '' print 'Test psdlsh with param.T = 1' psdL1_mat = pylshbox.psdlsh() psdL1_mat.init_mat(float_mat.tolist(), '', 521, 5, 1, 5) result = psdL1_mat.query(float_query.tolist(), 2, 10) indices, dists = result[0], result[1] for i in range(len(indices)):     print indices[i], '\t', dists[i] print '' print 'Test psdlsh with param.T = 2' psdL2_mat = pylshbox.psdlsh() psdL2_mat.init_mat(float_mat.tolist(), '', 521, 5, 2, 0.5) result = psdL2_mat.query(float_query.tolist(), 2, 10) indices, dists = result[0], result[1] for i in range(len(indices)):     print indices[i], '\t', dists[i] print '' print 'Test shLsh' sh_mat = pylshbox.shlsh() sh_mat.init_mat(float_mat.tolist(), '', 521, 5, 4, 100) result = sh_mat.query(float_query.tolist(), 2, 10) indices, dists = result[0], result[1] for i in range(len(indices)):     print indices[i], '\t', dists[i] print '' print 'Test itqLsh' itq_mat = pylshbox.itqlsh() itq_mat.init_mat(float_mat.tolist(), '', 521, 5, 8, 100, 50) result = itq_mat.query(float_query.tolist(), 2, 10) indices, dists = result[0], result[1] for i in range(len(indices)):     print indices[i], '\t', dists[i] NOTE: In Windows, the py module name is pylshbox, but in linux, it will be libpylshbox. For MATLAB % matlab_example.m disp('prepare test data ...') dataset = randn(128,100000); dataset = dataset - repmat(mean(dataset), size(dataset, 1), 1); testset = dataset(:,1:10); disp('ok') input('Test rhplsh, Press any key to continue ...') param_rhp.M = 521; param_rhp.L = 5; param_rhp.N = 6; [indices, dists] = rhplsh(dataset, testset, param_rhp, '', 2, 10) input('Test thlsh, Press any key to continue ...') param_th.M = 521; param_th.L = 5; param_th.N = 12; [indices, dists] = thlsh(dataset, testset, param_th, '', 2, 10) input('Test psdlsh with param_psdL1.T = 1, Press any key to continue ...') param_psdL1.M = 521; param_psdL1.L = 5; param_psdL1.T = 1; param_psdL1.W = 5; [indices, dists] = psdlsh(dataset, testset, param_psdL1, '', 1, 10) input('Test psdlsh with param_psdL2.T = 2, Press any key to continue ...') param_psdL2.M = 521; param_psdL2.L = 5; param_psdL2.T = 2; param_psdL2.W = 0.5; [indices, dists] = psdlsh(dataset, testset, param_psdL2, '', 2, 10) input('Test shlsh, Press any key to continue ...') param_sh.M = 521; param_sh.L = 5; param_sh.N = 4; param_sh.S = 100; [indices, dists] = shlsh(dataset, testset, param_sh, '', 2, 10) disp('Test itqlsh, Press any key to continue.') param_itq.M = 521; param_itq.L = 5; param_itq.N = 8; param_itq.S = 100; param_itq.I = 50; [indices, dists] = itqlsh(dataset, testset, param_itq, '', 2, 10) disp('Test dbqlsh, Press any key to continue.') param_dbq.M = 521; param_dbq.L = 5; param_dbq.N = 4; param_dbq.I = 5; [indices, dists] = dbqlsh(dataset, testset, param_dbq, '', 2, 10) disp('Test kdbqlsh, Press any key to continue.') param_kdbq.M = 521; param_kdbq.L = 5; param_kdbq.N = 4; param_kdbq.I = 50; [indices, dists] = kdbqlsh(dataset, testset, param_kdbq, '', 2, 10) Have you ever find the empty string used in the Python and MATLAB code? In fact, they can be used to save the index through pass a file name. Like the following, you will find the next query speed faster than the first, because there is no re-indexing. In Python #!/usr/bin/env python # -*- coding: utf-8 -*- # pylshbox_example2.py import pylshbox import numpy as np import time print 'prepare test data' float_mat = np.random.randn(100000, 192) float_query = float_mat[0] print '' print 'Test itqLsh' print '' print 'First time, need to constructing index.'  # About 7s. start = time.time() itq_mat = pylshbox.itqlsh() itq_mat.init_mat(float_mat.tolist(), 'pyitq.lsh', 521, 5, 8, 100, 50) result = itq_mat.query(float_query.tolist(), 2, 10) indices, dists = result[0], result[1] for i in range(len(indices)):     print indices[i], '\t', dists[i] print 'Elapsed time is %f seconds.' % (time.time() - start) print '' print 'Second time, no need to re-indexing.'  # About 3s. start = time.time() itq_mat2 = pylshbox.itqlsh() itq_mat2.init_mat(float_mat.tolist(), 'pyitq.lsh') result = itq_mat2.query(float_query.tolist(), 2, 10) indices, dists = result[0], result[1] for i in range(len(indices)):     print indices[i], '\t', dists[i] print 'Elapsed time is %f seconds.' % (time.time() - start) In MATLAB % matlab_example2.m dataset = randn(128,500000); testset = dataset(:,1:10); disp('Test itqlsh') param_itq.M = 521; param_itq.L = 5; param_itq.N = 8; param_itq.S = 100; param_itq.I = 50; disp('First time, need to constructing index') % About 13s. tic; [indices, dists] = itqlsh(dataset, testset, param_itq, 'itq.lsh', 2, 10); toc; disp('Second time, no need to re-indexing') % About 0.5s. tic; [indices, dists] = itqlsh(dataset, testset, param_itq, 'itq.lsh', 2, 10); toc; Chapter 4 - Algorithm LSHBOX is based on many approximate nearest neighbor schemes, and the following is a brief description of each algorithm and its parameters. 4.1 - Locality-Sensitive Hashing Scheme Based on Random Bits Sampling Reference P. Indyk and R. Motwani. Approximate Nearest Neighbor - Towards Removing the Curse of Dimensionality. In Proceedings of the 30th Symposium on Theory of Computing, 1998, pp. 604-613.  A. Gionis, P. Indyk, and R. Motwani. Similarity search in high dimensions via hashing. Proceedings of the 25th International Conference on Very Large Data Bases (VLDB), 1999.  Parameters struct Parameter {     /// Hash table size     unsigned M;     /// Number of hash tables     unsigned L;     /// Dimension of the vector     unsigned D;     /// Binary code bytes     unsigned N;     /// The Difference between upper and lower bound of each dimension     unsigned C; }; Implementation #include <lshbox/lsh/rbslsh.h> According to the second assumption in the paper, all coordinates of points in P are positive integer. Although we can convert all coordinates to integers by multiplying them by a suitably large number and rounding to the nearest integer, but I think it is very fussy, What's more, it often gets criticized for using too much memory when in a larger range of data. Therefore, it is recommended to use other algorithm. 4.2 - Locality-Sensitive Hashing Scheme Based on Random Hyperplane Reference Charikar, M. S. 2002. Similarity estimation techniques from rounding algorithms. In Proceedings of the Thiry-Fourth Annual ACM Symposium on theory of Computing (Montreal, Quebec, Canada, May 19 - 21, 2002). STOC '02. ACM, New York, NY, 380-388. DOI= http://doi.acm.org/10.1145/509907.509965  Parameters struct Parameter {     /// Hash table size     unsigned M;     /// Number of hash tables     unsigned L;     /// Dimension of the vector     unsigned D;     /// Binary code bytes     unsigned N; }; Implementation #include <lshbox/lsh/rhplsh.h> 4.3 - Locality-Sensitive Hashing Scheme Based on Thresholding Reference Zhe Wang, Wei Dong, William Josephson, Qin Lv, Moses Charikar, Kai Li. Sizing Sketches: A Rank-Based Analysis for Similarity Search. In Proceedings of the 2007 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems . San Diego, CA, USA. June 2007.  Qin Lv, Moses Charikar, Kai Li. Image Similarity Search with Compact Data Structures. In Proceedings of ACM 13th Conference on Information and Knowledge Management (CIKM), Washington D.C., USA. November 2004.  Parameters struct Parameter {     /// Hash table size     unsigned M;     /// Number of hash tables     unsigned L;     /// Dimension of the vector     unsigned D;     /// Binary code bytes     unsigned N;     /// Upper bound of each dimension     float Max;     /// Lower bound of each dimension     float Min; }; Implementation #include <lshbox/lsh/thlsh.h> 4.4 - Locality-Sensitive Hashing Scheme Based on p-Stable Distributions Reference Mayur Datar , Nicole Immorlica , Piotr Indyk , Vahab S. Mirrokni, Locality-sensitive hashing scheme based on p-stable distributions, Proceedings of the twentieth annual symposium on Computational geometry, June 08-11, 2004, Brooklyn, New York, USA.  Parameters struct Parameter {     /// Hash table size     unsigned M;     /// Number of hash tables     unsigned L;     /// Dimension of the vector     unsigned D;     /// Index mode, you can choose 1(CAUCHY) or 2(GAUSSIAN)     unsigned T;     /// Window size     float W; }; Implementation #include <lshbox/lsh/psdlsh.h> 4.5 - Spectral Hashing Reference Y. Weiss, A. Torralba, R. Fergus. Spectral Hashing. Advances in Neural Information Processing Systems, 2008.  Parameters struct Parameter {     /// Hash table size     unsigned M;     /// Number of hash tables     unsigned L;     /// Dimension of the vector     unsigned D;     /// Binary code bytes     unsigned N;     /// Size of vectors in train     unsigned S; }; Implementation #include <lshbox/lsh/shlsh.h> 4.6 - Iterative Quantization Reference Gong Y, Lazebnik S, Gordo A, et al. Iterative quantization: A procrustean approach to learning binary codes for large-scale image retrieval[J]. Pattern Analysis and Machine Intelligence, IEEE Transactions on, 2013, 35(12): 2916-2929.  Parameters struct Parameter {     /// Hash table size     unsigned M;     /// Number of hash tables     unsigned L;     /// Dimension of the vector     unsigned D;     /// Binary code bytes     unsigned N;     /// Size of vectors in train     unsigned S;     /// Training iterations     unsigned I; }; Implementation #include <lshbox/lsh/itqlsh.h> 4.7 - Double-Bit Quantization Hashing Reference Kong W, Li W. Double-Bit Quantization for Hashing. In AAAI, 2012.  Gong Y, Lazebnik S, Gordo A, et al. Iterative quantization: A procrustean approach to learning binary codes for large-scale image retrieval[J]. Pattern Analysis and Machine Intelligence, IEEE Transactions on, 2013, 35(12): 2916-2929.  Parameters struct Parameter {     /// Hash table size     unsigned M;     /// Number of hash tables     unsigned L;     /// Dimension of the vector     unsigned D;     /// Number of projection dimensions,corresponding to 2*N binary code bytes for each vector     unsigned N;     /// Training iterations     unsigned I; }; Implementation #include <lshbox/lsh/dbqlsh.h> 4.8 - K-means Based Double-Bit Quantization Hashing Reference Zhu, H. K-means based double-bit quantization for hashing.Computational Intelligence for Multimedia, Signal and Vision Processing (CIMSIVP),2014 IEEE Symposium on (pp.1-5). IEEE.  Parameters struct Parameter {     /// Hash table size     unsigned M;     /// Number of hash tables     unsigned L;     /// Dimension of the vector     unsigned D;     /// Number of projection dimensions,corresponding to 2*N binary code bytes for each vector     unsigned N;     /// Training iterations     unsigned I; }; Implementation #include <lshbox/lsh/kdbqlsh.h> According to the test, Double-Bit Quantization Hashing and Iterative Quantization performance very good and are superior to other schemes. Iterative Quantization can get high query accuracy with minimum cost while Double-Bit Quantization Hashing can achieve better query accuracy. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/RSIA-LIESMARS-WHU/LSHBOX"	"A c++ toolbox of locality-sensitive hashing (LSH), provides several popular LSH algorithms, also support Python and MATLAB. [GPL]"	"true"
"Cryptography"	"Bcrypt"	"http://bcrypt.sourceforge.net/"	"A cross platform file encryption utility. Encrypted files are portable across all supported operating systems and processors."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Bcrypt - Blowfish File Encryption bcrypt There are two kinds of cryptography in this world: cryptography that will stop your kid sister from reading your files, and cryptography that will stop major governments from reading your files. This book is about the latter. -- Preface to Applied Cryptography by Bruce Schneier Description Bcrypt is a cross platform file encryption utility. Encrypted files are portable across all supported operating systems and processors. Passphrases must be between 8 and 56 characters and are hashed internally to a 448 bit key. However, all characters supplied are significant. The stronger your passphrase, the more secure your data. In addition to encrypting your data, bcrypt will by default overwrite the original input file with random garbage three times before deleting it in order to thwart data recovery attempts by persons who may gain access to your computer. If you're not quite ready for this level of paranoia yet, see the installation instructions below for how to disable this feature. If you don't think this is paranoid enough.. see below. Bcrypt uses the blowfish encryption algorithm published by Bruce Schneier in 1993. More information on the algorithm can be found at Counterpane. Specifically, bcrypt uses Paul Kocher's implementation of the algorithm. The source distributed with bcrypt has been slightly altered from the original. Original source code can be obtained from http://www.counterpane.com/bfsh-koc.zip. Supported Platforms Bcrypt has been successfully tested on the following platforms: x86:      FreeBSD, OpenBSD, Linux, Cygwin, Win32 Sparc R220:      Solaris 2.7, 2.8 Sparc Ultra60:      Linux 2.4 Alpha:      Linux 2.4 PPC G4:      MacOS X 10.1 SERVER PPC RS/6000:      Linux 2.4 MIPS:      Linux 2.0.34 (Cobalt) HPPA 1.1      HP-UX 11.0 No other operating systems have been tested, but most should work with minimal modifications. If you get bcrypt to compile without errors on any other platform or architecture, I'd like to know about it. If patches are necessary to get bcrypt work on your OS, I will try to incorporate them into the main distribution. If you have a machine not listed above that is incapable of compiling bcrypt and are willing to give me access to the machine, I will make an attempt to port it to your OS. News (Updated September 11, 2002) Bcrypt 1.1 fixes a few minor bugs and adds support for many new operating systems. If you previously used 1.0 on an unsupported platform, you may not be able to decrypt any encrypted files you have. Alpha systems are known to have this problem. 32 bit systems should not have this problem. 64 bit systems probably do. If your system exhibits this problem, you should decrypt your files with 1.0 and reencrypt them with 1.1. 1.1 is immensely faster than 1.0. Additionally, it uses about 50% as much memory with compression turned off, or 66% with compression on. System Requirements Source code release: zlib - http://www.gzip.org/zlib/ Win32 binary release: zlib.dll - zlib-1.1.4-bin.zip Download Source Code: bcrypt-1.1.tar.gz GPG signature bcrypt-1.1.tar.gz.asc Win32 Binary: bcrypt-1.1.zip GPG signature bcrypt-1.1.zip.asc Compatibility testing The following files are copies of the LICENSE file that have been encrypted with the passphrase 'eggheads'. If you can decrypt both, then your installation should be compatible with any other supported systems. bigendian.bfe littleendian.bfe Installation If you're so inclined, edit config.h and change the defaults to whatever you think is appropriate for your needs. If you choose not to have bcrypt remove input files after processing, or set SECUREDELETE to 0, you are likely to have data on your hard drive that can be recovered even after deletion. All of these options can be set on the command line as well. When you're satisfied with the default settings, simply type:    make then su and type:    make install It would be wise to test the installation on a few unimportant files before encrypting anything you value, removing the only copy and overwriting it 127 times with garbage. Usage bcrypt [-orc][-sN] file ... Encrypted files will be saved with an extension of .bfe. Any files ending in .bfe will be assumed to be encrypted with bcrypt and will attempt to decrypt them. Any other input files will be encrypted. If more than one type of file is given, bcrypt will process all files which are the same as the first filetype given. By default, bcrypt will compress input files before encryption, remove input files after they are processed (assuming they are processed successfully) and overwrite input files with random data to prevent data recovery. Passphrases may be between 8 and 56 characters. Regardless of the passphrase size, the key is hashed internally to 448 bits - the largest keysize supported by the blowfish algorithm. However, it is still wise to use a strong passphrase. Options -o print output to standard out. Implies -r. -c DO NOT compress files before encryption. -r DO NOT remove input files after processing -sN How many times to overwrite input files with random data before processing. The default number of overwrites is 3. Use -s0 to disable this feature. No effect if -r is supplied. Note The options o,c and r each have the opposite effects if the appropriate settings are altered from the default in config.h. Encrypted files should be compatible between most systems. Binary compatibility has been tested for all systems listed above. Support, Help, Bugs, What the hell is this?! Bcrypt has a mailing list for support. You can subscribe at https://lists.sourceforge.net/lists/listinfo/bcrypt-users. Authors johnny shelley - core code and unix ports. Philip Stolarczyk - native Win32 support and testing. License Copyright (c) 2002 Johnny Shelley All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the author nor any contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."	"null"	"null"	"A cross platform file encryption utility. Encrypted files are portable across all supported operating systems and processors."	"true"
"Cryptography"	"Botan"	"http://botan.randombit.net/"	"A crypto library for C++. [BSD-2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"352"	"50"	"93"	"GitHub - randombit/botan: Crypto and TLS for C++11 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 352 Fork 93 randombit/botan Code Issues 58 Pull requests 15 Wiki Pulse Graphs Crypto and TLS for C++11 http://botan.randombit.net 6,695 commits 8 branches 119 releases Fetching contributors C++ 95.7% Python 4.2% Shell 0.1% Emacs Lisp 0.0% HTML 0.0% C 0.0% C++ Python Shell Emacs Lisp HTML C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ciphers cmake coverity_scan insito-bib master release-1_8 release-1_10 rng-fork-check Nothing to show 1.11.30 1.11.29 1.11.28 1.11.27 1.11.26 1.11.25 1.11.24 1.11.23 1.11.22 1.11.21 1.11.20 1.11.19 1.11.18 1.11.17 1.11.16 1.11.15 1.11.14 1.11.13 1.11.12 1.11.11 1.11.10 1.11.9 1.11.8 1.11.7 1.11.6 1.11.5 1.11.4 1.11.3 1.11.2 1.11.1 1.11.0 1.10.13 1.10.12 1.10.11 1.10.9 1.10.8 1.10.7 1.10.6 1.10.5 1.10.4 1.10.3 1.10.2 1.10.1 1.10.0 1.10.0-rc1 1.9.18 1.9.17 1.9.16 1.9.15 1.9.14 1.9.13 1.9.12 1.9.11 1.9.10 1.9.9 1.9.8 1.9.7 1.9.6 1.9.5 1.9.4 1.9.3 1.9.2 1.9.1 1.9.0 1.8.15 1.8.14 1.8.13 1.8.12 1.8.11 1.8.10 1.8.9 1.8.8 1.8.7 1.8.6 1.8.5 1.8.4 1.8.3 1.8.2 1.8.1 1.8.0 1.7.24 1.7.23 1.7.22 1.7.21 1.7.20 1.7.19 1.7.18 1.7.17 1.7.16 1.7.15 1.7.14 1.7.13 1.7.12 1.7.11 1.7.10 1.7.9 1.7.8 1.7.7 1.7.6 1.7.5 Nothing to show New pull request Latest commit cd1e2d3 Jul 15, 2016 randombit Fix SecRandomCopyBytes call with older OS X SDKs … In 10.8 (and presumably older) versions, the header for SecRandomCopyBytes is SecRandom.h, and Security.h does not include SecRandom.h  With this change, the include of Security.h may be redundant for all versions, but I have no way to test this.  GH #528 Permalink Failed to load latest commit information. doc Fix undefined behavior in donna128 type Jul 15, 2016 src Fix SecRandomCopyBytes call with older OS X SDKs Jul 15, 2016 .coveragerc Exclude tests from python coverage Feb 20, 2016 .gitignore Ignore VC++-specific *.pdb and *.ilk May 10, 2016 .travis.yml Add boost builds on Travis OSX Dec 9, 2015 botan_version.py Tick to 1.11.31 Jun 19, 2016 circle.yml Fix CircleCI build Jun 7, 2016 configure.py Merge GH #507 Add PKCS #11 support. Previous merge 360a3a5 missed lat… Jul 4, 2016 readme.rst Update for 1.11.30 release Jun 19, 2016 readme.rst Botan: Crypto and TLS for C++11 Botan (Japanese for peony) is a cryptography library written in C++11 and released under the permissive Simplified BSD license. It contains TLS client and server implementation, X.509 certificates, ECDSA, AES, GCM, ChaCha20Poly1305, McEliece, bcrypt and other useful tools. As part of the build there is also a botan program built for command line usage (similar to openssl). The sources for these are intended to act as good examples of library usage. Development is coordinated on GitHub and contributions are welcome. Read doc/contributing.rst for more about how to contribute. For all the details on building the library, read the users manual, but basically: $ ./configure.py --help $ ./configure.py [probably some options] $ make $ ./botan-test # lots of output... Tests all ok $ ./botan # shows available commands $ make install  The library can also be built into a single-file amalgamation for easy inclusion into external build systems. If you need help or have questions, send a mail to the mailing list or open a ticket on GitHub Issues. If you think you've found a security bug, read the security page for contact information and procedures. In addition to C++, botan has a C89 API specifically designed to be easy to call from other languages. A Python binding using ctypes is included, there are also partial bindings for Node.js and OCaml among others. There is no support for the SSH protocol in Botan but there is a seperately developed C++11 SSH library by cdesjardins which uses Botan for crypto operations. Download See the change notes and security page All releases are signed with a PGP key: pub   2048R/EFBADFBC 2004-10-30       Key fingerprint = 621D AF64 11E1 851C 4CF9  A2E1 6211 EBF1 EFBA DFBC uid                  Botan Distribution Key  Some distributions such as Arch, Fedora and Debian include packages for Botan. However these are often out of date; using the latest source release is recommended. Current Development Work (1.11) The 1.11 branch is highly recommended, especially for new projects. Versions 1.11 and later require a working C++11 compiler; GCC 4.8 and later, Clang 3.4 and later, and MSVC 2013 are regularly tested. The latest development release is 1.11.30 (sig) released on 2016-06-19 Old Stable Series (1.10) The 1.10 branch is the last version of the library written in C++98 and is the most commonly packaged version. It is still supported for security patches, but all development efforts are focused on 1.11. The latest 1.10 release is 1.10.13 (sig) released on 2016-04-23 Books and other resources You should have some knowledge of cryptography before trying to use the library. This is an area where it is very easy to make mistakes, and where things are often subtle and/or counterintuitive. Obviously the library tries to provide things at a high level precisely to minimize the number of ways things can go wrong, but naive use will almost certainly not result in a secure system. Especially recommended are: Cryptography Engineering by Niels Ferguson, Bruce Schneier, and Tadayoshi Kohno Security Engineering -- A Guide to Building Dependable Distributed Systems by Ross Anderson (available online) Handbook of Applied Cryptography by Alfred J. Menezes, Paul C. Van Oorschot, and Scott A. Vanstone (available online) If you're doing something non-trivial or unique, you might want to at the very least ask for review/input on a mailing list such as the metzdowd or randombit crypto lists. And (if possible) pay a professional cryptographer or security company to review your design and code. Find Enclosed TLS/Public Key Infrastructure TLS and DTLS (v1.0 to v1.2), including using preshared keys (TLS-PSK) and passwords (TLS-SRP) and most important extensions, such as session tickets, SNI, and ALPN. X.509v3 certificates and CRLs PKIX certificate path validation OCSP requests PKCS #10 certificate requests Public Key Cryptography RSA signatures and encryption DH and ECDH key agreement DSA and ECDSA signatures Quantum computer resistant McEliece KEM scheme GOST-34.10-2001 ElGamal encryption Rabin-Williams signatures (deprecated) Nyberg-Rueppel signatures (deprecated) Padding schemes OAEP, PSS, PKCS #1 v1.5, X9.31 Ciphers and cipher modes Authenticated cipher modes EAX, OCB, GCM, SIV, CCM, and ChaCha20Poly1305 Unauthenticated cipher modes CTR, CBC, XTS, CFB, OFB, and ECB AES (including constant time SSSE3 and AES-NI versions) AES candidates Serpent, Twofish, MARS, CAST-256, RC6 Stream ciphers Salsa20/XSalsa20, ChaCha20, and RC4 DES, 3DES and DESX Threefish-512, Noekeon, Blowfish, CAST-128, IDEA National/telecom block ciphers SEED, KASUMI, MISTY1, GOST 28147 Large block cipher construction Lion Deprecated ciphers TEA, XTEA, RC2, RC5, SAFER-SK Hash functions and MACs SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 SHA-3 winner Keccak-1600 Skein-512, BLAKE2b RIPEMD-160, Tiger, Whirlpool, GOST 34.11 Authentication codes HMAC, CMAC, Poly1305, SipHash Hash function combiners (Parallel and Comb4P) Non-cryptographic checksums Adler32, CRC24, CRC32 Obsolete algorithms MD5, MD4, CBC-MAC, X9.19 DES-MAC Deprecated hashes MD2, HAS-160, RIPEMD-128 Other Useful Things Key derivation functions for passwords, including PBKDF2 Password hashing functions, including bcrypt and a PBKDF based scheme General key derivation functions KDF1 and KDF2 from IEEE 1363 Format preserving encryption scheme FE1 Threshold secret sharing RFC 3394 keywrapping Rivest's all or nothing transform Recommended Algorithms For encryption of network traffic use TLS v1.2 Packet encryption: AES-128/GCM, AES-128/OCB, ChaCha20Poly1305 General hash functions: SHA-256 or SHA-384 Message authentication: HMAC with SHA-256 Public Key Encryption: RSA, 2048+ bit keys, with OAEP and SHA-256 Public Key Signatures: RSA, 2048+ bit keys with PSS and SHA-512, or ECDSA with P-256/SHA-256 or P-384/SHA-384 Key Agreement: ECDH P-256 or Curve25519, with KDF2(SHA-256) Or McEliece if you are concerned about attacks by quantum computers. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/randombit/botan"	"A crypto library for C++. [BSD-2]"	"true"
"Cryptography"	"Crypto++"	"http://www.cryptopp.com/"	"A free C++ class library of cryptographic schemes. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"277"	"49"	"130"	"GitHub - weidai11/cryptopp Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 277 Fork 130 weidai11/cryptopp Code Issues 24 Pull requests 5 Pulse Graphs No description or website provided. 1,632 commits 3 branches 14 releases 20 contributors C++ 89.3% Shell 5.4% Assembly 3.1% C 0.9% Makefile 0.8% CMake 0.3% Other 0.2% C++ Shell Assembly C Makefile CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags det-sig hmqv master Nothing to show CRYPTOPP_5_6_3 CRYPTOPP_5_6_2 CRYPTOPP_5_6_1 CRYPTOPP_5_6_0 CRYPTOPP_5_5_2 CRYPTOPP_5_5_1 CRYPTOPP_5_5 CRYPTOPP_5_4 CRYPTOPP_5_3_0 CRYPTOPP_5_2_3 CRYPTOPP_5_2_1 CRYPTOPP_5_2 CRYPTOPP_5_1 CRYPTOPP_5_0 Nothing to show New pull request Latest commit fa758db Jul 15, 2016 noloader Fix SunCC 12.2 failed compile due to -D__AES__ and above platform fla… … …gs (Issue 228) Permalink Failed to load latest commit information. TestData Revert ""Add HMQV implementation (and merge the old FHMQV into the new… Jul 6, 2016 TestVectors Make test program aware of CRYPTOPP_USE_FIPS_202_SHA3, use alternate … Apr 23, 2016 .gitignore Added C++Builder section in .gitignore file Jan 11, 2016 3way.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 3way.h Updated documentation Dec 13, 2015 CMakeLists.txt CMake cryptest binary is now named ""cryptest.exe"" on all platforms. Jun 21, 2016 Doxyfile Tweaked makefile recipes to use variables for CP, MV, MKDIR, etc. Add… Dec 26, 2015 Filelist.txt Revert ""Added 8 new files that support HMQV and FHMQV to Filelist.txt… Jul 6, 2016 GNUmakefile Fix Sun Studio 12.5 detection. Only add ""-w -erroff=wvarhidemem -erro… Jul 8, 2016 GNUmakefile-cross Rename bench.cpp to bench1.cpp Apr 22, 2016 Install.txt Crypto++ 5.6.3 check-in Nov 22, 2015 License.txt CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 Readme.txt Additional documentation; fixed issues with Clang integrated assemble… Nov 19, 2015 adhoc.cpp.proto Cleared missing function protoype under Sun Studio Jun 8, 2016 adler32.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 adler32.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 aes.h Updated documentation Dec 14, 2015 algebra.cpp Add size_t cast to resolve VS warning C4334 Apr 20, 2016 algebra.h Updated documentation Apr 5, 2016 algparam.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 algparam.h Updated documentation Dec 17, 2015 arc4.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 arc4.h Crypto++ 5.6.3 check-in Nov 23, 2015 argnames.h Clear Visual Studio C4316 warning for ""object allocated on the heap m… May 17, 2016 asn.cpp remove unwanted assert Mar 3, 2016 asn.h Updated documentation Apr 20, 2016 authenc.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 authenc.h Updated documentation Apr 24, 2016 base32.cpp Fixed IsolatedInitialize (Issue 108) Jan 11, 2016 base32.h Updated documentation Jan 17, 2016 base64.cpp Fixed IsolatedInitialize (Issue 108) Jan 12, 2016 base64.h Updated documentation Jan 17, 2016 basecode.cpp Aligned assert with subtraction that follows Jan 1, 2016 basecode.h Updated documentation Jan 14, 2016 bench.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 bench1.cpp Add CRC-32C using CXX and SSE4 (Issue 160) Apr 24, 2016 bench2.cpp Added CRYPTOPP_DATA_DIR patch (Issue 82) Dec 25, 2015 bfinit.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 blake2.cpp Fix compile under iOS Jul 13, 2016 blake2.h Remove uneeded debug assignment in dtor Jun 30, 2016 blowfish.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 blowfish.h Updated documentation Dec 14, 2015 blumshub.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 blumshub.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 camellia.cpp Add C++11 alignas support. Deleting 'alignas' branch Jun 14, 2016 camellia.h Cleared -Wcast-align (Issue 122) Jan 24, 2016 cast.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 cast.h Updated documentation Dec 14, 2015 casts.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 cbcmac.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 cbcmac.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 ccm.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 ccm.h Updated documentation Jan 29, 2016 chacha.cpp Remove branch in increment counter Apr 21, 2016 chacha.h Cleared warning 'extra "";"" ignored' Jun 8, 2016 channels.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 channels.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 cmac.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 cmac.h Updated documentation Apr 21, 2016 config.h Aloow GCC to particpate in MACH-O initialization Jul 12, 2016 config.recommend Aloow GCC to particpate in MACH-O initialization Jul 13, 2016 cpu.cpp Clear Valgrind findings under -Ofast Jul 12, 2016 cpu.h Add AVX and AVX2 for Sun Studio Jul 13, 2016 crc.cpp Fix compile under iOS Jul 13, 2016 crc.h Add CRC-32C using CXX and SSE4 (Issue 160) Apr 24, 2016 cryptdll.dsp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 cryptdll.vcproj CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 cryptest-ios.sh Fixed Apple WatchOS SDK version; whitespace Mar 9, 2016 cryptest.dsp Rename bench.cpp to bench1.cpp Apr 22, 2016 cryptest.dsw CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 cryptest.nmake Force include <sdkddkver.h>, detect X86 and X64 (in addition to x86 a… Apr 30, 2016 cryptest.sh Fix SunCC 12.2 failed compile due to -D__AES__ and above platform fla… Jul 15, 2016 cryptest.sln CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 cryptest.vcproj Rename bench.cpp to bench1.cpp Apr 22, 2016 cryptest_bds.bdsgroup Removed execute bit from other project files Jun 24, 2015 cryptest_bds.bdsproj Rename bench.cpp to bench1.cpp Apr 22, 2016 cryptest_bds.bpf Removed execute bit from other project files Jun 24, 2015 cryptlib.cpp Cleared most ""Conditional jump or move depends on uninitialised value… Jul 13, 2016 cryptlib.dsp Add ChaCha family of stream ciphers Apr 21, 2016 cryptlib.h Updated documentation Apr 26, 2016 cryptlib.vcproj Add ChaCha family of stream ciphers Apr 21, 2016 cryptlib_bds.bdsproj Add ChaCha family of stream ciphers Apr 21, 2016 cryptlib_bds.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 cryptopp-config.cmake Tweaked makefile recipes to use variables for CP, MV, MKDIR, etc. Add… Dec 26, 2015 cryptopp.rc CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 datatest.cpp Cut-in determinsitic signature verification during signing Apr 10, 2016 default.cpp Crypto++ 5.6.3 check-in Nov 23, 2015 default.h Go back to Commit 66ada4c Jul 6, 2016 des.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 des.h Additional documentation Dec 13, 2015 dessp.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 dh.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 dh.h Updated documentation Jan 20, 2016 dh2.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 dh2.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 dll.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 dll.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 dlltest.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 dlltest.dsp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 dlltest.vcproj CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 dmac.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 dsa.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 dsa.h Crypto++ 5.6.3 check-in Nov 23, 2015 eax.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 eax.h Updated documentation Jan 29, 2016 ec2n.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 ec2n.h Added ""algebra.h"" include for ""make deps"" recipe Dec 4, 2015 eccrypto.cpp removed ECPM code Jan 13, 2016 eccrypto.h Go back to Commit 66ada4c Jul 6, 2016 ecp.cpp Cleared warning 'Warning: mr hides CryptoPP::ProjectiveDoubling::mr' Jun 8, 2016 ecp.h Added ""algebra.h"" include for ""make deps"" recipe Dec 4, 2015 elgamal.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 elgamal.h Crypto++ 5.6.3 check-in Nov 23, 2015 emsa2.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 emsa2.h Crypto++ 5.6.3 check-in Nov 23, 2015 eprecomp.cpp Added ""algebra.h"" include for ""make deps"" recipe Dec 4, 2015 eprecomp.h Crypto++ 5.6.3 check-in Nov 23, 2015 esign.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 esign.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 factory.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 files.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 files.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 filters.cpp Cleared assert in debug builds (Issue 138) Feb 20, 2016 filters.h Fix clang warning May 31, 2016 fips140.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 fips140.h Additional documentation; fixed issues with Clang integrated assemble… Nov 19, 2015 fipsalgt.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 fipstest.cpp Merge pull request #151 from bretthall/master Jun 21, 2016 fltrimpl.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 gcm.cpp Fix SunCC crash and failed compile for gcm.cpp. This is the hammer - … Jul 15, 2016 gcm.h Updated documentation Jan 29, 2016 gf256.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 gf256.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 gf2_32.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 gf2_32.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 gf2n.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 gf2n.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 gfpcrypt.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 gfpcrypt.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 gost.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 gost.h Updated documentation Dec 14, 2015 gzip.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 gzip.h Updated documentation Apr 5, 2016 hex.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 hex.h Updated documentation Apr 20, 2016 hkdf.h Cleared warning 'extra "";"" ignored' Jun 8, 2016 hmac.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 hmac.h Updated documentation Dec 16, 2015 hrtimer.cpp Cleaned up Windows-Store May 17, 2016 hrtimer.h Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 ida.cpp Fixed broken Sun Studio compile (Issue 179) Jun 8, 2016 ida.h Crypto++ 5.6.3 check-in Nov 23, 2015 idea.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 idea.h Updated documentation Dec 14, 2015 integer.cpp Cleared SDLC warning under Visual Studio 2005 Jul 13, 2016 integer.h Updated documentation Jan 14, 2016 iterhash.cpp Cleared -Wcast-align (Issue 122) Jan 24, 2016 iterhash.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 lubyrack.h Updated documentation Dec 14, 2015 luc.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 luc.h Added ""algebra.h"" include for ""make deps"" recipe Dec 4, 2015 mars.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 mars.h Updated documentation Dec 14, 2015 marss.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 md2.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 md2.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 md4.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 md4.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 md5.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 md5.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 mdc.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 mersenne.h Updated documentation Jan 20, 2016 misc.cpp Fixed potential ODR violation of non-member function StringNarrow Jan 30, 2016 misc.h Go back to Commit 66ada4c Jul 6, 2016 modarith.h Updated documentation Apr 5, 2016 modes.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 modes.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 modexppc.h Added ""algebra.h"" include for ""make deps"" recipe Dec 4, 2015 mqueue.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 mqueue.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 mqv.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 mqv.h Updated documentation Jan 18, 2016 nbtheory.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 nbtheory.h Crypto++ 5.6.3 check-in Nov 23, 2015 network.cpp Cleaned up Windows-Store May 17, 2016 network.h Cleaned up Windows-Store May 17, 2016 nr.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 oaep.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 oaep.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 oids.h Fixed OIDs for curve25519 and curve448 Apr 11, 2016 osrng.cpp Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 osrng.h Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 panama.cpp Backed-off on assert. Panama_SSE2_Pull is ASM, and its not bound by C… Jan 25, 2016 panama.h Go back to Commit 66ada4c Jul 6, 2016 pch.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 pch.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 pkcspad.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 pkcspad.h Fixes a compiler error with C++Builder XE6 Jan 11, 2016 polynomi.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 polynomi.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 pssr.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 pssr.h Update documentation Feb 29, 2016 pubkey.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 pubkey.h Updated documentation Apr 8, 2016 pwdbased.h Updated documentation Apr 5, 2016 queue.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 queue.h Updated documentation Dec 16, 2015 rabin.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 rabin.h Additional documentation; fixed issues with Clang integrated assemble… Nov 19, 2015 randpool.cpp Cleared -Wcast-align (Issue 122) Jan 24, 2016 randpool.h Cleared -Wcast-align (Issue 122) Jan 25, 2016 rc2.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 rc2.h Updated documentation Dec 14, 2015 rc5.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 rc5.h Updated documentation Dec 14, 2015 rc6.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 rc6.h Updated documentation Dec 14, 2015 rdrand-masm.cmd Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 rdrand-nasm.sh Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 rdrand.S Use _rdrand32_step for X32. Whitespace Jun 21, 2016 rdrand.asm Add RDRAND and RDSEED for SunCC 12.1 and above Jul 10, 2016 rdrand.cpp Fix compile under iOS Jul 13, 2016 rdrand.h Update comments for Intel RDRAND circuit and underflow Jun 14, 2016 rdtables.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 regtest.cpp Add CRC-32C using CXX and SSE4 (Issue 160) Apr 24, 2016 resource.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 rijndael.cpp Fix typo in SunCC check Jul 15, 2016 rijndael.h Go back to Commit 66ada4c Jul 6, 2016 ripemd.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 ripemd.h Additional documentation; fixed issues with Clang integrated assemble… Nov 19, 2015 rng.cpp Cleared Valgrind warnings on uninitialized reads (Issue 105) Jan 10, 2016 rng.h Updated documentation Jan 17, 2016 rsa.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 rsa.h Updated documentation Apr 8, 2016 rw.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 rw.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 safer.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 safer.h Updated documentation Dec 14, 2015 salsa.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 salsa.h Updated documentation Apr 21, 2016 seal.cpp Cleared -Wcast-align (Issue 122) Jan 24, 2016 seal.h Crypto++ 5.6.3 check-in Nov 23, 2015 secblock.h Updated documentation May 21, 2016 seckey.h C++Builder: The problem with the CRYPTOPP_CONSTANT macro was correcte… Jan 12, 2016 seed.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 seed.h Updated documentation Dec 14, 2015 serpent.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 serpent.h Updated documentation Dec 14, 2015 serpentp.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 setenv-android.sh Fixed spelling errors in setenv-* scripts Jul 11, 2016 setenv-embedded.sh Fixed spelling errors in setenv-* scripts Jul 11, 2016 setenv-ios.sh Fixed spelling errors in setenv-* scripts Jul 11, 2016 sha.cpp Fixed compile under Clang x86 Feb 1, 2016 sha.h Go back to Commit 66ada4c Jul 6, 2016 sha3.cpp Initial cut-in of CRYPTOPP_USE_FIPS_202_SHA3 macro Apr 23, 2016 sha3.h Added deprecated warning to SHA3 classes due to FIPS 202 finalization Apr 23, 2016 shacal2.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 shacal2.h Updated documentation Dec 14, 2015 shark.cpp Cleared -Wcast-align (Issue 122) Jan 25, 2016 shark.h Updated documentation Dec 14, 2015 sharkbox.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 simple.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 simple.h Added BLAKE2 Cryptographic Hash and Message Authentication Code Apr 17, 2016 skipjack.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 skipjack.h Updated documentation Dec 14, 2015 smartptr.h replaced special character which caused warning C4819 with other syst… Apr 25, 2016 socketft.cpp Go back to Commit 66ada4c Jul 6, 2016 socketft.h Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 sosemanuk.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 sosemanuk.h Crypto++ 5.6.3 check-in Nov 23, 2015 square.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 square.h Updated documentation Dec 14, 2015 squaretb.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 stdcpp.h Merge Atomics branch into Master Jun 6, 2016 strciphr.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 strciphr.h Updated documentation Apr 22, 2016 tea.cpp Cleared -Wcast-align (Issue 122) Jan 25, 2016 tea.h Updated documentation Dec 14, 2015 test.cpp Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 tftables.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 tiger.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 tiger.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 tigertab.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 trap.h Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 trdlocal.cpp Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 trdlocal.h Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 trunhash.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 ttmac.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 ttmac.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 twofish.cpp CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 twofish.h Updated documentation Dec 14, 2015 validat1.cpp Revert ""Add HMQV implementation (and merge the old FHMQV into the new… Jul 6, 2016 validat2.cpp Revert ""Add HMQV implementation (and merge the old FHMQV into the new… Jul 6, 2016 validat3.cpp Cleared ""warning: unused variable ‘hasPadlockRNG’"". Whitespace cleanup Jun 16, 2016 validate.h Revert ""Add HMQV implementation (and merge the old FHMQV into the new… Jul 6, 2016 vmac.cpp Fixed unused variable warnings Jan 25, 2016 vmac.h Cleared -Wcast-align (Issue 122) Jan 24, 2016 vs2010.zip Rename bench.cpp to bench1.cpp Apr 22, 2016 wait.cpp Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 wait.h Go back to Commit 66ada4c Jul 6, 2016 wake.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 wake.h Crypto++ 5.6.3 check-in Nov 23, 2015 whrlpool.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 whrlpool.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 winpipes.cpp Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 winpipes.h Add changes for Windows Sotre that went missing with my clumsy Git sk… May 9, 2016 words.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 x64dll.asm CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 x64masm.asm CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 xtr.cpp Added ""algebra.h"" include for ""make deps"" recipe Dec 4, 2015 xtr.h Added ""algebra.h"" include for ""make deps"" recipe Dec 4, 2015 xtrcrypt.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 xtrcrypt.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 zdeflate.cpp Fixed broken Sun Studio compile (Issue 179) Jun 9, 2016 zdeflate.h Updated documentation Apr 6, 2016 zinflate.cpp Cleared compile errors under Visual Studio .Net compilers Apr 29, 2016 zinflate.h Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 zlib.cpp Cleared issues 11,12,13 (Clang integrated assembler), 58 (RC rollup),… Nov 18, 2015 zlib.h CRYPTOPP 5.6.3 RC6 checkin Nov 5, 2015 Readme.txt Crypto++: a C++ Class Library of Cryptographic Schemes Version 5.6.3 - NOV/20/2015  Crypto++ Library is a free C++ class library of cryptographic schemes. Currently the library contains the following algorithms:                     algorithm type  name   authenticated encryption schemes  GCM, CCM, EAX           high speed stream ciphers  Panama, Sosemanuk, Salsa20, XSalsa20             AES and AES candidates  AES (Rijndael), RC6, MARS, Twofish, Serpent,                                    CAST-256                                     IDEA, Triple-DES (DES-EDE2 and DES-EDE3),               other block ciphers  Camellia, SEED, RC5, Blowfish, TEA, XTEA,                                    Skipjack, SHACAL-2    block cipher modes of operation  ECB, CBC, CBC ciphertext stealing (CTS),                                    CFB, OFB, counter mode (CTR)       message authentication codes  VMAC, HMAC, GMAC, CMAC, CBC-MAC, DMAC,                                     Two-Track-MAC                                     SHA-1, SHA-2 (SHA-224, SHA-256, SHA-384, and                    hash functions  SHA-512), SHA-3, Tiger, WHIRLPOOL, RIPEMD-128,                                    RIPEMD-256, RIPEMD-160, RIPEMD-320                                     RSA, DSA, ElGamal, Nyberg-Rueppel (NR),           public-key cryptography  Rabin-Williams (RW), LUC, LUCELG,                                    DLIES (variants of DHAES), ESIGN     padding schemes for public-key  PKCS#1 v2.0, OAEP, PSS, PSSR, IEEE P1363                           systems  EMSA2 and EMSA5                                     Diffie-Hellman (DH), Unified Diffie-Hellman             key agreement schemes  (DH2), Menezes-Qu-Vanstone (MQV), LUCDIF,                                    XTR-DH        elliptic curve cryptography  ECDSA, ECNR, ECIES, ECDH, ECMQV            insecure or obsolescent  MD2, MD4, MD5, Panama Hash, DES, ARC4, SEAL algorithms retained for backwards  3.0, WAKE-OFB, DESX (DES-XEX3), RC2,      compatibility and historical  SAFER, 3-WAY, GOST, SHARK, CAST-128, Square                             value  Other features include:    * pseudo random number generators (PRNG): ANSI X9.17 appendix C, RandomPool   * password based key derivation functions: PBKDF1 and PBKDF2 from PKCS #5,     PBKDF from PKCS #12 appendix B   * Shamir's secret sharing scheme and Rabin's information dispersal algorithm     (IDA)   * fast multi-precision integer (bignum) and polynomial operations   * finite field arithmetics, including GF(p) and GF(2^n)   * prime number generation and verification   * useful non-cryptographic algorithms       + DEFLATE (RFC 1951) compression/decompression with gzip (RFC 1952) and         zlib (RFC 1950) format support       + hex, base-32, and base-64 coding/decoding       + 32-bit CRC and Adler32 checksum   * class wrappers for these operating system features (optional):       + high resolution timers on Windows, Unix, and Mac OS       + Berkeley and Windows style sockets       + Windows named pipes       + /dev/random, /dev/urandom, /dev/srandom       + Microsoft's CryptGenRandom on Windows   * A high level interface for most of the above, using a filter/pipeline     metaphor   * benchmarks and validation testing   * x86, x86-64 (x64), MMX, and SSE2 assembly code for the most commonly used     algorithms, with run-time CPU feature detection and code selection   * some versions are available in FIPS 140-2 validated form  You are welcome to use it for any purpose without paying me, but see License.txt for the fine print.  The following compilers are supported for this release. Please visit http://www.cryptopp.com the most up to date build instructions and porting notes.    * MSVC 6.0 - 2015   * GCC 3.3 - 5.2   * C++Builder 2010   * Intel C++ Compiler 9 - 16.0   * Sun Studio 12u1, Express 11/08, Express 06/10  *** Important Usage Notes ***  1. If a constructor for A takes a pointer to an object B (except primitive types such as int and char), then A owns B and will delete B at A's destruction.  If a constructor for A takes a reference to an object B, then the caller retains ownership of B and should not destroy it until A no longer needs it.   2. Crypto++ is thread safe at the class level. This means you can use Crypto++ safely in a multithreaded application, but you must provide synchronization when multiple threads access a common Crypto++ object.  *** MSVC-Specific Information ***  On Windows, Crypto++ can be compiled into 3 forms: a static library including all algorithms, a DLL with only FIPS Approved algorithms, and a static library with only algorithms not in the DLL. (FIPS Approved means Approved according to the FIPS 140-2 standard.) The DLL may be used by itself, or it may be used together with the second form of the static library. MSVC project files are included to build all three forms, and sample applications using each of the three forms are also included.  To compile Crypto++ with MSVC, open the ""cryptest.dsw"" (for MSVC 6 and MSVC .NET  2003) or ""cryptest.sln"" (for MSVC 2005 - 2010) workspace file and build one or  more of the following projects:  cryptopp - This builds the DLL. Please note that if you wish to use Crypto++   as a FIPS validated module, you must use a pre-built DLL that has undergone   the FIPS validation process instead of building your own. dlltest - This builds a sample application that only uses the DLL. cryptest Non-DLL-Import Configuration - This builds the full static library   along with a full test driver. cryptest DLL-Import Configuration - This builds a static library containing   only algorithms not in the DLL, along with a full test driver that uses   both the DLL and the static library.  To use the Crypto++ DLL in your application, #include ""dll.h"" before including any other Crypto++ header files, and place the DLL in the same directory as your .exe file. dll.h includes the line #pragma comment(lib, ""cryptopp"") so you don't have to explicitly list the import library in your project settings. To use a static library form of Crypto++, make the ""cryptlib"" project a dependency of your application project, or specify it as an additional library to link with in your project settings. In either case you should check the compiler options to make sure that the library and your application are using the same C++ run-time libraries and calling conventions.  *** DLL Memory Management ***  Because it's possible for the Crypto++ DLL to delete objects allocated  by the calling application, they must use the same C++ memory heap. Three  methods are provided to achieve this. 1.  The calling application can tell Crypto++ what heap to use. This method      is required when the calling application uses a non-standard heap. 2.  Crypto++ can tell the calling application what heap to use. This method      is required when the calling application uses a statically linked C++ Run      Time Library. (Method 1 does not work in this case because the Crypto++ DLL      is initialized before the calling application's heap is initialized.) 3.  Crypto++ can automatically use the heap provided by the calling application's      dynamically linked C++ Run Time Library. The calling application must     make sure that the dynamically linked C++ Run Time Library is initialized     before Crypto++ is loaded. (At this time it is not clear if it is possible     to control the order in which DLLs are initialized on Windows 9x machines,     so it might be best to avoid using this method.)  When Crypto++ attaches to a new process, it searches all modules loaded  into the process space for exported functions ""GetNewAndDeleteForCryptoPP""  and ""SetNewAndDeleteFromCryptoPP"". If one of these functions is found,  Crypto++ uses methods 1 or 2, respectively, by calling the function.  Otherwise, method 3 is used.   *** GCC-Specific Information ***  A makefile is included for you to compile Crypto++ with GCC. Make sure you are using GNU Make and GNU ld. The make process will produce two files, libcryptopp.a and cryptest.exe. Run ""cryptest.exe v"" for the validation suite.  *** Documentation and Support ***  Crypto++ is documented through inline comments in header files, which are processed through Doxygen to produce an HTML reference manual. You can find a link to the manual from http://www.cryptopp.com. Also at that site is the Crypto++ FAQ, which you should browse through before attempting to  use this library, because it will likely answer many of questions that may come up.  If you run into any problems, please try the Crypto++ mailing list. The subscription information and the list archive are available on http://www.cryptopp.com. You can also email me directly by visiting http://www.weidai.com, but you will probably get a faster response through the mailing list.  *** History ***  1.0 - First public release.  Withdrawn at the request of RSA DSI.     - included Blowfish, BBS, DES, DH, Diamond, DSA, ElGamal, IDEA,       MD5, RC4, RC5, RSA, SHA, WAKE, secret sharing, DEFLATE compression     - had a serious bug in the RSA key generation code.  1.1 - Removed RSA, RC4, RC5     - Disabled calls to RSAREF's non-public functions     - Minor bugs fixed  2.0 - a completely new, faster multiprecision integer class     - added MD5-MAC, HAVAL, 3-WAY, TEA, SAFER, LUC, Rabin, BlumGoldwasser,       elliptic curve algorithms     - added the Lucas strong probable primality test     - ElGamal encryption and signature schemes modified to avoid weaknesses     - Diamond changed to Diamond2 because of key schedule weakness     - fixed bug in WAKE key setup     - SHS class renamed to SHA     - lots of miscellaneous optimizations  2.1 - added Tiger, HMAC, GOST, RIPE-MD160, LUCELG, LUCDIF, XOR-MAC,       OAEP, PSSR, SHARK     - added precomputation to DH, ElGamal, DSA, and elliptic curve algorithms     - added back RC5 and a new RSA     - optimizations in elliptic curves over GF(p)     - changed Rabin to use OAEP and PSSR     - changed many classes to allow copy constructors to work correctly     - improved exception generation and handling  2.2 - added SEAL, CAST-128, Square     - fixed bug in HAVAL (padding problem)     - fixed bug in triple-DES (decryption order was reversed)     - fixed bug in RC5 (couldn't handle key length not a multiple of 4)     - changed HMAC to conform to RFC-2104 (which is not compatible       with the original HMAC)     - changed secret sharing and information dispersal to use GF(2^32)       instead of GF(65521)     - removed zero knowledge prover/verifier for graph isomorphism     - removed several utility classes in favor of the C++ standard library  2.3 - ported to EGCS     - fixed incomplete workaround of min/max conflict in MSVC  3.0 - placed all names into the ""CryptoPP"" namespace     - added MD2, RC2, RC6, MARS, RW, DH2, MQV, ECDHC, CBC-CTS     - added abstract base classes PK_SimpleKeyAgreementDomain and       PK_AuthenticatedKeyAgreementDomain     - changed DH and LUCDIF to implement the PK_SimpleKeyAgreementDomain       interface and to perform domain parameter and key validation     - changed interfaces of PK_Signer and PK_Verifier to sign and verify       messages instead of message digests     - changed OAEP to conform to PKCS#1 v2.0     - changed benchmark code to produce HTML tables as output     - changed PSSR to track IEEE P1363a     - renamed ElGamalSignature to NR and changed it to track IEEE P1363     - renamed ECKEP to ECMQVC and changed it to track IEEE P1363     - renamed several other classes for clarity     - removed support for calling RSAREF     - removed option to compile old SHA (SHA-0)     - removed option not to throw exceptions  3.1 - added ARC4, Rijndael, Twofish, Serpent, CBC-MAC, DMAC     - added interface for querying supported key lengths of symmetric ciphers       and MACs     - added sample code for RSA signature and verification     - changed CBC-CTS to be compatible with RFC 2040     - updated SEAL to version 3.0 of the cipher specification     - optimized multiprecision squaring and elliptic curves over GF(p)     - fixed bug in MARS key setup     - fixed bug with attaching objects to Deflator  3.2 - added DES-XEX3, ECDSA, DefaultEncryptorWithMAC     - renamed DES-EDE to DES-EDE2 and TripleDES to DES-EDE3     - optimized ARC4     - generalized DSA to allow keys longer than 1024 bits     - fixed bugs in GF2N and ModularArithmetic that can cause calculation errors     - fixed crashing bug in Inflator when given invalid inputs     - fixed endian bug in Serpent     - fixed padding bug in Tiger  4.0 - added Skipjack, CAST-256, Panama, SHA-2 (SHA-256, SHA-384, and SHA-512),       and XTR-DH     - added a faster variant of Rabin's Information Dispersal Algorithm (IDA)     - added class wrappers for these operating system features:       - high resolution timers on Windows, Unix, and MacOS       - Berkeley and Windows style sockets       - Windows named pipes       - /dev/random and /dev/urandom on Linux and FreeBSD       - Microsoft's CryptGenRandom on Windows     - added support for SEC 1 elliptic curve key format and compressed points     - added support for X.509 public key format (subjectPublicKeyInfo) for       RSA, DSA, and elliptic curve schemes     - added support for DER and OpenPGP signature format for DSA     - added support for ZLIB compressed data format (RFC 1950)     - changed elliptic curve encryption to use ECIES (as defined in SEC 1)     - changed MARS key schedule to reflect the latest specification     - changed BufferedTransformation interface to support multiple channels       and messages     - changed CAST and SHA-1 implementations to use public domain source code     - fixed bug in StringSource     - optmized multi-precision integer code for better performance  4.1 - added more support for the recommended elliptic curve parameters in SEC 2     - added Panama MAC, MARC4     - added IV stealing feature to CTS mode     - added support for PKCS #8 private key format for RSA, DSA, and elliptic       curve schemes     - changed Deflate, MD5, Rijndael, and Twofish to use public domain code     - fixed a bug with flushing compressed streams     - fixed a bug with decompressing stored blocks     - fixed a bug with EC point decompression using non-trinomial basis     - fixed a bug in NetworkSource::GeneralPump()     - fixed a performance issue with EC over GF(p) decryption     - fixed syntax to allow GCC to compile without -fpermissive     - relaxed some restrictions in the license  4.2 - added support for longer HMAC keys     - added MD4 (which is not secure so use for compatibility purposes only)     - added compatibility fixes/workarounds for STLport 4.5, GCC 3.0.2,       and MSVC 7.0     - changed MD2 to use public domain code     - fixed a bug with decompressing multiple messages with the same object     - fixed a bug in CBC-MAC with MACing multiple messages with the same object     - fixed a bug in RC5 and RC6 with zero-length keys     - fixed a bug in Adler32 where incorrect checksum may be generated  5.0 - added ESIGN, DLIES, WAKE-OFB, PBKDF1 and PBKDF2 from PKCS #5     - added key validation for encryption and signature public/private keys     - renamed StreamCipher interface to SymmetricCipher, which is now implemented       by both stream ciphers and block cipher modes including ECB and CBC     - added keying interfaces to support resetting of keys and IVs without       having to destroy and recreate objects     - changed filter interface to support non-blocking input/output     - changed SocketSource and SocketSink to use overlapped I/O on Microsoft Windows     - grouped related classes inside structs to help templates, for example       AESEncryption and AESDecryption are now AES::Encryption and AES::Decryption     - where possible, typedefs have been added to improve backwards        compatibility when the CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY macro is defined     - changed Serpent, HAVAL and IDEA to use public domain code     - implemented SSE2 optimizations for Integer operations     - fixed a bug in HMAC::TruncatedFinal()     - fixed SKIPJACK byte ordering following NIST clarification dated 5/9/02  5.01 - added known answer test for X9.17 RNG in FIPS 140 power-up self test      - submitted to NIST/CSE, but not publicly released  5.02 - changed EDC test to MAC integrity check using HMAC/SHA1      - improved performance of integrity check      - added blinding to defend against RSA timing attack  5.03 - created DLL version of Crypto++ for FIPS 140-2 validation      - fixed vulnerabilities in GetNextIV for CTR and OFB modes  5.0.4 - Removed DES, SHA-256, SHA-384, SHA-512 from DLL  5.1 - added PSS padding and changed PSSR to track IEEE P1363a draft standard     - added blinding for RSA and Rabin to defend against timing attacks       on decryption operations     - changed signing and decryption APIs to support the above     - changed WaitObjectContainer to allow waiting for more than 64       objects at a time on Win32 platforms     - fixed a bug in CBC and ECB modes with processing non-aligned data     - fixed standard conformance bugs in DLIES (DHAES mode) and RW/EMSA2       signature scheme (these fixes are not backwards compatible)     - fixed a number of compiler warnings, minor bugs, and portability problems     - removed Sapphire  5.2 - merged in changes for 5.01 - 5.0.4     - added support for using encoding parameters and key derivation parameters       with public key encryption (implemented by OAEP and DL/ECIES)     - added Camellia, SHACAL-2, Two-Track-MAC, Whirlpool, RIPEMD-320,       RIPEMD-128, RIPEMD-256, Base-32 coding, FIPS variant of CFB mode     - added ThreadUserTimer for timing thread CPU usage     - added option for password-based key derivation functions       to iterate until a mimimum elapsed thread CPU time is reached     - added option (on by default) for DEFLATE compression to detect       uncompressible files and process them more quickly     - improved compatibility and performance on 64-bit platforms,       including Alpha, IA-64, x86-64, PPC64, Sparc64, and MIPS64     - fixed ONE_AND_ZEROS_PADDING to use 0x80 instead 0x01 as padding.     - fixed encoding/decoding of PKCS #8 privateKeyInfo to properly       handle optional attributes  5.2.1 - fixed bug in the ""dlltest"" DLL testing program       - fixed compiling with STLport using VC .NET       - fixed compiling with -fPIC using GCC       - fixed compiling with -msse2 on systems without memalign()       - fixed inability to instantiate PanamaMAC       - fixed problems with inline documentation  5.2.2 - added SHA-224       - put SHA-256, SHA-384, SHA-512, RSASSA-PSS into DLL        5.2.3 - fixed issues with FIPS algorithm test vectors       - put RSASSA-ISO into DLL  5.3 - ported to MSVC 2005 with support for x86-64     - added defense against AES timing attacks, and more AES test vectors     - changed StaticAlgorithmName() of Rijndael to ""AES"", CTR to ""CTR""  5.4 - added Salsa20     - updated Whirlpool to version 3.0     - ported to GCC 4.1, Sun C++ 5.8, and Borland C++Builder 2006  5.5 - added VMAC and Sosemanuk (with x86-64 and SSE2 assembly)     - improved speed of integer arithmetic, AES, SHA-512, Tiger, Salsa20,       Whirlpool, and PANAMA cipher using assembly (x86-64, MMX, SSE2)     - optimized Camellia and added defense against timing attacks     - updated benchmarks code to show cycles per byte and to time key/IV setup     - started using OpenMP for increased multi-core speed     - enabled GCC optimization flags by default in GNUmakefile     - added blinding and computational error checking for RW signing     - changed RandomPool, X917RNG, GetNextIV, DSA/NR/ECDSA/ECNR to reduce       the risk of reusing random numbers and IVs after virtual machine state       rollback     - changed default FIPS mode RNG from AutoSeededX917RNG<DES_EDE3> to       AutoSeededX917RNG<AES>     - fixed PANAMA cipher interface to accept 256-bit key and 256-bit IV     - moved MD2, MD4, MD5, PanamaHash, ARC4, WAKE_CFB into the namespace ""Weak""     - removed HAVAL, MD5-MAC, XMAC  5.5.1 - fixed VMAC validation failure on 32-bit big-endian machines  5.5.2 - ported x64 assembly language code for AES, Salsa20, Sosemanuk, and Panama         to MSVC 2005 (using MASM since MSVC doesn't support inline assembly on x64)       - fixed Salsa20 initialization crash on non-SSE2 machines       - fixed Whirlpool crash on Pentium 2 machines       - fixed possible branch prediction analysis (BPA) vulnerability in         MontgomeryReduce(), which may affect security of RSA, RW, LUC       - fixed link error with MSVC 2003 when using ""debug DLL"" form of runtime library       - fixed crash in SSE2_Add on P4 machines when compiled with          MSVC 6.0 SP5 with Processor Pack       - ported to MSVC 2008, GCC 4.2, Sun CC 5.9, Intel C++ Compiler 10.0,          and Borland C++Builder 2007  5.6.0 - added AuthenticatedSymmetricCipher interface class and Filter wrappers       - added CCM, GCM (with SSE2 assembly), EAX, CMAC, XSalsa20, and SEED       - added support for variable length IVs       - added OIDs for Brainpool elliptic curve parameters       - improved AES and SHA-256 speed on x86 and x64       - changed BlockTransformation interface to no longer assume data alignment       - fixed incorrect VMAC computation on message lengths          that are >64 mod 128 (x86 assembly version is not affected)       - fixed compiler error in vmac.cpp on x86 with GCC -fPIC       - fixed run-time validation error on x86-64 with GCC 4.3.2 -O2       - fixed HashFilter bug when putMessage=true       - fixed AES-CTR data alignment bug that causes incorrect encryption on ARM       - removed WORD64_AVAILABLE; compiler support for 64-bit int is now required       - ported to GCC 4.3, C++Builder 2009, Sun CC 5.10, Intel C++ Compiler 11  5.6.1 - added support for AES-NI and CLMUL instruction sets in AES and GMAC/GCM       - removed WAKE-CFB       - fixed several bugs in the SHA-256 x86/x64 assembly code:           * incorrect hash on non-SSE2 x86 machines on non-aligned input           * incorrect hash on x86 machines when input crosses 0x80000000           * incorrect hash on x64 when compiled with GCC with optimizations enabled       - fixed bugs in AES x86 and x64 assembly causing crashes in some MSVC build configurations       - switched to a public domain implementation of MARS       - ported to MSVC 2010, GCC 4.5.1, Sun Studio 12u1, C++Builder 2010, Intel C++ Compiler 11.1       - renamed the MSVC DLL project to ""cryptopp"" for compatibility with MSVC 2010  5.6.2 - changed license to Boost Software License 1.0       - added SHA-3 (Keccak)       - updated DSA to FIPS 186-3 (see DSA2 class)       - fixed Blowfish minimum keylength to be 4 bytes (32 bits)       - fixed Salsa validation failure when compiling with GCC 4.6       - fixed infinite recursion when on x64, assembly disabled, and no AESNI       - ported to MSVC 2012, GCC 4.7, Clang 3.2, Solaris Studio 12.3, Intel C++ Compiler 13.0  5.6.3 - maintenance release, honored API/ABI/Versioning requirements       - expanded processes to include community and its input       - fixed CVE-2015-2141       - cleared most Undefined Behavior Sanitizer (UBsan) findings       - cleared all Address Sanitizer (Asan) findings       - cleared all Valgrind findings       - cleared all Coverity findings       - cleared all Enterprise Analysis (/analyze) findings       - cleared most GCC warnings with -Wall       - cleared most Clang warnings with -Wall       - cleared most MSVC warnings with /W4       - added -fPIC 64-bit builds. Off by default for i386       - added HKDF class from RFC 5868       - switched to member_ptr due to C++ 11 warnings for auto_ptr       - initialization of C++ static objects, off by default           * GCC and init_priotirty/constructor attributes           * MSVC and init_seg(lib)           * CRYPTOPP_INIT_PRIORITY disabled by default, but available       - improved OS X support       - improved GNUmakefile support for Testing and QA       - added self tests for additional Testing and QA       - added cryptest.sh for systematic Testing and QA       - added GNU Gold linker support       - added Visual Studio 2010 solution and project files in vs2010.zip       - added Clang integrated assembler support       - unconditionally define CRYPTOPP_NO_UNALIGNED_DATA_ACCESS for Makefile         target 'ubsan' and at -O3 due to GCC vectorization on x86 and x86_64       - workaround ARMEL/GCC 5.2 bug and failed self test       - fixed crash in MQV due to GCC 4.9+ and inlining       - fixed hang in SHA due to GCC 4.9+ and inlining       - fixed missing rdtables::Te under VS with ALIGNED_DATA_ACCESS       - fixed S/390 and big endian feature detection       - fixed S/390 and int128_t/uint128_t detection       - fixed X32 (ILP32) feature detection       - removed  _CRT_SECURE_NO_DEPRECATE for Microsoft platforms       - utilized bound checking interfaces from ISO/IEC TR 24772 when available       - improved ARM, ARM64, MIPS, MIPS64, S/390 and X32 (ILP32) support       - introduced CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562       - added additional Doxygen-based documentation       - ported to MSVC 2015, Xcode 7.2, GCC 5.2, Clang 3.7, Intel C++ 16.00  5.7  - nearly identical to 5.6.3      - minor breaks to the ABI and API      - cleared remaining Undefined Behavior Sanitizer (UBsan) findings      - cleared remaining GCC and Visual Studio warnings      - removed CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562  Written by Wei Dai and the Crypto++ Project  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/weidai11/cryptopp"	"A free C++ class library of cryptographic schemes. [Boost]"	"true"
"Cryptography"	"GnuPG"	"https://www.gnupg.org/"	"A complete and free implementation of the OpenPGP standard. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The GNU Privacy Guard   Home Home Features News People Sites Service Donate Donate List of Donors Download Download Integrity Check Supported Systems Release Notes Mirrors GIT Support HOWTOs Manuals Guides FAQs Mailing Lists Bug Tracker Security Related software Frontends Tools Libraries All Blog Home Features News People Sites Service The GNU Privacy Guard GnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880 (also known as PGP). GnuPG allows to encrypt and sign your data and communication, features a versatile key management system as well as access modules for all kinds of public key directories. GnuPG, also known as GPG, is a command line tool with features for easy integration with other applications. A wealth of frontend applications and libraries are available. Version 2 of GnuPG also provides support for S/MIME and Secure Shell (ssh). GnuPG is Free Software (meaning that it respects your freedom). It can be freely used, modified and distributed under the terms of the GNU General Public License . GnuPG comes in three flavours: 2.1.14 is the modern version with support for ECC and many other new features, 2.0.30 is the stable version which is currently mostly used. and 1.4.20 is the classic portable version. Project Gpg4win provides a Windows version of GnuPG stable. It is nicely integrated into an installer and features several frontends as well as English and German manuals. A simple Windows installer for the modern version is available at our download page. Join us for the first OpenPGP conference OpenPGP.conf is a conference for users and implementers of the OpenPGP protocol, which is at the core of GnuPG. We meet in Cologne on September 8 and 9. OpenPGP.conf is a place to meet, discuss, and learn about latest developments of GnuPG and other OpenPGP aware applications and what technical measures can be deployed to repel the ever increasing trend to mass surveillance. News The latest blog entries: GnuPG in 2016 Financial Results for 2015 GnuPG News for November and December 2015 The latest release news: (all news) GnuPG 2.1.14 released (2016-07-14) A new version of the modern branch of GnuPG has been released. Read the full announcement mail for details. Libgcrypt 1.7.2 released (2016-07-14) We are pleased to announce the availability of Libgcrypt version 1.7.2. This is a maintenance release for the stable version of Libgcrypt with a few bug fixes. {more} GnuPG 2.1.13 released (2016-06-16) A new version of the modern branch of GnuPG has been released. Read the full announcement mail for details. Libgcrypt 1.7.1 released (2016-06-15) We are pleased to announce the availability of Libgcrypt version 1.7.1. This is a maintenance release for the stable version of Libgcrypt with a few bug fixes. {more} First OpenPGP conference (2016-05-20) If you are a user or implementer of OpenPGP related software, you may join us at OpenPGP.conf in Cologne on September 8 and 9, 2016. GnuPG 2.1.12 released (2016-05-04) A new version of the modern branch of GnuPG has been released. Read the full announcement mail for details. Libgcrypt 1.7.0 released (2016-04-15) We are pleased to announce the availability of Libgcrypt version 1.7.0. This is a new stable version of Libgcrypt with full API and ABI compatibiliy to the 1.6 series. Its main features are new algorithms, curves, and performance improvements. {more} GnuPG 2.0.30 released (2016-03-31) GnuPG 2.0.30 is now available. This release fixes a few minor bugs; users of GnuPG 2.0.x may want to update to this version. {more} Libgcrypt 1.6.5 released (2016-02-09)   important Libgcrypt version 1.6.5 and an updated Windows installer for GnuPG 2.1.11 has been released to mitigate a new side-channel attack. {more} GnuPG 2.1.11 released (2016-01-26) A new version of the modern branch of GnuPG has been released. Read the full announcement mail for details. A big Thanks to all supporters Due to this ProPublica article we received more than 120,000 € of individual donations on a single day. There was even more: The Core Infrastructure Initiative granted 60,000 $ for 2015. Our payment service Stripe and Facebook will each give 50,000 $ to the project. And finally the Wau Holland Stiftung is collecting tax deductible funds for GnuPG (19000 € plus 57 BTC). As the main author of GnuPG, I like to thank everyone for supporting the project, be it small or large individual donations, helping users, providing corporate sponsorship, working on the software, and for all the encouraging words. GnuPG does not stand alone: there are many other projects, often unknown to most people, which are essential to keep the free Internet running. Many of them are run by volunteers who spend a lot of unpaid time on them. They need our support as well. — Werner, 2015-02-06 (see also this blog entry) Privacy Policy Imprint Archive Sitemap Blog   These web pages are Copyright 1998--2015 The GnuPG Project and licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. See copying for details. Page source last changed on 2016-07-14."	"null"	"null"	"A complete and free implementation of the OpenPGP standard. [GPL]"	"true"
"Cryptography"	"GnuTLS"	"http://www.gnutls.org/"	"A secure communications library implementing the SSL, TLS and DTLS protocols. [LGPL2.1]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GnuTLS The GnuTLS Transport Layer Security Library Overview News Download Support Development Documentation Security advisories Authors Welcome to GnuTLS project pages Overview GnuTLS is a secure communications library implementing the SSL, TLS and DTLS protocols and technologies around them. It provides a simple C language application programming interface (API) to access the secure communications protocols as well as APIs to parse and write X.509, PKCS #12, OpenPGP and other required structures. It is aimed to be portable and efficient with focus on security and interoperability. Features Support for TLS 1.2, TLS 1.1, TLS 1.0, and SSL 3.0 protocols Support for DTLS 1.2, and DTLS 1.0, protocols Support for certificate path validation, as well as DANE and trust on first use. Support for the Online Certificate Status Protocol (OCSP). Support for multiple certificate types including X.509 and OpenPGP certificates. Support for public key methods, including RSA and Elliptic curves, as well as password and key authentication methods such as SRP and PSK protocols. Support for all the strong encryption algorithms, including AES and Camellia. Support for CPU-assisted cryptography with VIA padlock and AES-NI instruction sets. Support for cryptographic accelerator drivers via /dev/crypto. Supports natively HSMs and cryptographic tokens, via PKCS #11 and the Trusted Platform Module (TPM). Runs on most Unix platforms and Windows. License The core library licensed under the GNU Lesser General Public License version 2.1 (LGPLv2.1+). The LGPL license is compatible with a wide range of free licenses, and even permit you to use GnuTLS in non-free proprietary programs. Documentation: You can obtain GnuTLS' manual at lulu.com or download any of the electronic formats. For more information on GnuTLS features, see the wikipedia article comparing different TLS implementations. News flashes   Follow @GnuTLS 2016-07-06 Released GnuTLS 3.3.24, GnuTLS 3.4.14, and GnuTLS 3.5.2 which are bug fix releases in the old, current and next stable branches. Added the GnuTLS-SA-2016-2 security advisory. 2016-06-14 Released GnuTLS 3.5.1 a feature update release in the next stable branche. 2016-06-06 Released GnuTLS 3.4.13 a bug fix release on the current stable branch. Added GnuTLS-SA-2016-1 security advisory. 2016-05-20 Released GnuTLS 3.3.23 and GnuTLS 3.4.12 which are bug fix releases in the previous and current stable branches. Please send broken links and other corrections or suggestions to bugs@gnutls.org."	"null"	"null"	"A secure communications library implementing the SSL, TLS and DTLS protocols. [LGPL2.1]"	"true"
"Cryptography"	"Libgcrypt"	"http://www.gnu.org/software/libgcrypt/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Libgcrypt - GNU Project - Free Software Foundation (FSF) Libgcrypt Overview Libgcrypt is a general purpose cryptographic library based on the code from GnuPG. It provides functions for all cryptograhic building blocks: symmetric ciphers (AES, DES, Blowfish, CAST5, Twofish, SEED, Camellia, Arcfour), hash algorithms (MD4, MD5, RIPE-MD160, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, TIGER-192, Whirlpool), MACs (HMAC for all hash algorithms), public key algorithms (RSA, Elgamal, DSA, ECDSA), large integer functions, random numbers and a lot of supporting functions. Libgcrypt works on most POSIX systems and many pre-POSIX systems. It can also be built using a cross-compiler system for Microsoft Windows. Availibility Due to former U.S. export restrictions on cryptographic software, the program is not distributed via the standard GNU archives but from an European FTP site and its mirrors. The current stable version may also be retrieved through this download link. You find SHA-1 checksum also linked from this page. Development versions are available at ftp://ftp.gnupg.org/gcrypt/alpha/libgcrypt/. To access the GIT repository you may use this command: ""git clone git://git.gnupg.org/libgcrypt.git"" Manual The manual is included in the package and also available online: HTML version. PDF version. INFO version. HTML version of the development branch. PDF version of the development branch. INFO version of the development branch. Mailing Lists The gcrypt-devel mailing list is hosted at gnupg.org. To subscribe to the list, point your browser to http://lists.gnupg.org/mailman/listinfo/gcrypt-devel or send a mail with the subject ""subscribe"" to gcrypt-devel-request at gnupg dot org. Non-subscriber posting is allowed but it may take some time until a posting has been approved. Maintainer Libgcrypt is still maintained by its principal author Werner Koch. The file AUTHORS in the distribution includes contact information. Commercial support is available, see the GnuPG service directory. Return to the GNU Project home page. Please send FSF & GNU inquiries to gnu@gnu.org. There are also other ways to contact the FSF. Please send broken links and other corrections (or suggestions) to webmasters@gnu.org. Please see the Translations README for information on coordinating and submitting translations of this article. Copyright (C) 2007 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Verbatim copying and distribution of this entire article is permitted worldwide without royalty in any medium provided this notice is preserved. Updated: $Date: 2015/08/27 13:26:07 $ $Author: werner $"	"null"	"null"	""	"true"
"Cryptography"	"LibreSSL"	"http://www.libressl.org/"	"A free version of the SSL/TLS protocol forked from OpenSSL in 2014. [?]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OpenBSD LibreSSL Portable · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization OpenBSD LibreSSL Portable Github clone of official LibreSSL portable repositories for informational purposes. http://www.libressl.org/ Repositories People 5 Filters Sources Forks C 127 38 openbsd Source code pulled from OpenBSD for LibreSSL - this includes most of the library and supporting code. The place to contribute to this code is via the OpenBSD CVS tree. Updated Jul 11, 2016 C 439 80 portable LibreSSL Portable itself. This includes the build scaffold and compatibility layer that builds portable LibreSSL from the OpenBSD source code. Updated Jul 11, 2016 5 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libressl-portable/"	"A free version of the SSL/TLS protocol forked from OpenSSL in 2014. [?]"	"true"
"Cryptography"	"libsodium"	"https://github.com/jedisct1/libsodium"	"P(ortable|ackageable) NaCl-based crypto library, opinionated and easy to use. [ISC]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3007"	"247"	"400"	"GitHub - jedisct1/libsodium: A modern and easy-to-use crypto library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 247 Star 3,007 Fork 400 jedisct1/libsodium Code Issues 9 Pull requests 0 Pulse Graphs A modern and easy-to-use crypto library. 2,320 commits 4 branches 24 releases 53 contributors C 94.5% Assembly 2.4% M4 1.6% Shell 0.7% Makefile 0.6% Batchfile 0.1% Other 0.1% C Assembly M4 Shell Makefile Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags arm coverity_scan master stable Nothing to show 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.1 1.0.0 0.7.1 0.7.0 0.6.1 0.6.0 0.5.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4 0.3 0.2 0.1 Nothing to show New pull request Latest commit 351ae49 Jul 6, 2016 jedisct1 cpuid is not available on i686-nacl Permalink Failed to load latest commit information. builds Version bump (not released yet) Jun 30, 2016 dist-build CRLF Jun 5, 2016 m4 Import ax_pthread.m4 Apr 19, 2016 msvc-scripts Version bump (not released yet) Jun 30, 2016 packaging/nuget https Apr 12, 2016 src crit_{enter,leave} can fail Jul 6, 2016 test Add dist-build/nativeclient-x86-64.sh Apr 29, 2016 .gitignore Forgot to ignore libsodium-uninstalled.pc Jun 4, 2016 .travis.yml Travis: Limit the double compilation to a single OS Dec 11, 2015 AUTHORS Add crypto_core/curve25519 Mar 16, 2016 ChangeLog Update ChangeLog Jun 29, 2016 LICENSE Add license title Jun 30, 2016 Makefile.am CRLF Mar 17, 2016 README.markdown Link text = ""installation"" only Mar 17, 2016 THANKS THANKS << Scott Arciszewski Nov 28, 2015 appveyor.yml Update appveyor version Apr 4, 2016 autogen.sh pkg-config is not required Dec 25, 2015 configure.ac cpuid is not available on i686-nacl Jul 6, 2016 libsodium-uninstalled.pc.in Update description Mar 17, 2016 libsodium.pc.in Update description Mar 17, 2016 libsodium.sln Retarget the top solution to Visual Studio 2015 Nov 1, 2015 libsodium.vcxproj Add blake2b-compress-avx2.c to the top-level Visual Studio solution Mar 17, 2016 libsodium.vcxproj.filters Add blake2b-compress-avx2.c to the top-level Visual Studio solution Mar 17, 2016 logo.png Larger logo, less prominent saltcellar Apr 19, 2016 README.markdown Sodium is a new, easy-to-use software library for encryption, decryption, signatures, password hashing and more. It is a portable, cross-compilable, installable, packageable fork of NaCl, with a compatible API, and an extended API to improve usability even further. Its goal is to provide all of the core operations needed to build higher-level cryptographic tools. Sodium supports a variety of compilers and operating systems, including Windows (with MingW or Visual Studio, x86 and x64), iOS and Android. Documentation The documentation is a work-in-progress, and is being written using Gitbook: libsodium documentation - online, requires Javascript. offline documentation in PDF, MOBI and ePUB formats. Integrity Checking The integrity checking instructions (including the signing key for libsodium) are available in the installation section of the documentation. Community A mailing-list is available to discuss libsodium. In order to join, just send a random mail to sodium-subscribe {at} pureftpd {dot} org. License ISC license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jedisct1/libsodium"	"P(ortable|ackageable) NaCl-based crypto library, opinionated and easy to use. [ISC]"	"true"
"Cryptography"	"LibTomCrypt"	"https://github.com/libtom/libtomcrypt"	"A fairly comprehensive, modular and portable cryptographic toolkit. [WTFPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"380"	"65"	"135"	"GitHub - libtom/libtomcrypt: LibTomCrypt is a fairly comprehensive, modular and portable cryptographic toolkit that provides developers with a vast array of well known published block ciphers, one-way hash functions, chaining modes, pseudo-random number generators, public key cryptography and a plethora of other routines. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 65 Star 380 Fork 135 libtom/libtomcrypt Code Issues 26 Pull requests 17 Wiki Pulse Graphs LibTomCrypt is a fairly comprehensive, modular and portable cryptographic toolkit that provides developers with a vast array of well known published block ciphers, one-way hash functions, chaining modes, pseudo-random number generators, public key cryptography and a plethora of other routines. http://www.libtom.net 493 commits 10 branches 45 releases 17 contributors C 91.5% TeX 7.3% Makefile 0.5% Python 0.3% Java 0.2% Shell 0.2% C TeX Makefile Python Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop feature/doc feature/eccAddA feature/rsa_import_x509 fix/ccm_constant_time fix/90 fix/106 idea/ltc_rng master miko-ecc-enhancements Nothing to show 1.17 1.16 1.15 1.14 1.13 1.12 1.11 1.10 1.09 1.08 1.07 1.06 1.05 1.04 1.03 1.02 1.01 1.00 0.99 0.98 0.97 0.97b 0.97a 0.96 0.95 0.94 0.93 0.92 0.91 0.90 0.89 0.88 0.87 0.86 0.85 0.84 0.83 0.82 0.81 0.80 0.79 0.78 0.77 0.76 0.75 Nothing to show New pull request Latest commit 6ad5225 Jul 7, 2016 karel-m removing forgotten debug comment Permalink Failed to load latest commit information. demos fix some compiler warnings Jan 23, 2016 doc flush content of CVS/SVN tags Apr 29, 2014 notes regen rsa-testvectors Aug 28, 2014 src removing forgotten debug comment Jul 7, 2016 testprof make testprof/makefile silent Jan 23, 2016 .clang-format add .clang-format Aug 25, 2015 .gitignore fix gitignore Apr 3, 2016 .travis.yml travis: update local package index as first step Jan 5, 2016 Doxyfile added libtomcrypt-1.17 Jun 16, 2010 LICENSE after multiple objections of libtom users [1], we decided to change l… Jan 19, 2011 README.md add coverity badge May 25, 2014 TODO added libtomcrypt-1.17 Jun 16, 2010 build.sh automatically determine the number of parallel make jobs for the tests Apr 3, 2016 changes added libtomcrypt-1.17 Jun 16, 2010 coverage.sh bring coverage results near reality Apr 3, 2016 coverity.sh fix coverity script Oct 10, 2014 crypt.tex ccm: clarify pt and ct parameters in doc and API description Apr 30, 2014 filter.pl mark scripts as executable Nov 23, 2012 fixupind.pl mark scripts as executable Nov 22, 2012 genlist.sh sort HEADERS in makefiles, so it doesn't change spontaneously Sep 1, 2015 libtomcrypt.dsp add hkdf impl Mar 15, 2013 libtomcrypt.pc.in pkgconfig: set libdir= to $LIBPATH (for multi-arch) Feb 25, 2014 libtomcrypt_VS2005.sln Added project and solution files for Visual Studio 2005 and Visual St… Jun 16, 2010 libtomcrypt_VS2005.vcproj add hkdf impl Mar 15, 2013 libtomcrypt_VS2008.sln Added project and solution files for Visual Studio 2005 and Visual St… Jun 16, 2010 libtomcrypt_VS2008.vcproj add hkdf impl Mar 15, 2013 makefile bring coverage results near reality Apr 3, 2016 makefile.icc introduce new all_test make-target Jan 23, 2016 makefile.include make build process silent Jan 19, 2016 makefile.mingw introduce new all_test make-target Jan 23, 2016 makefile.msvc introduce new all_test make-target Jan 23, 2016 makefile.shared install without USER and GROUP Apr 1, 2016 makefile.unix introduce new all_test make-target Jan 23, 2016 mess.sh mark scripts as executable Nov 22, 2012 parsenames.pl flush content of CVS/SVN tags Apr 29, 2014 printinfo.sh printinfo: display version of correct compiler if CC does not point t… May 7, 2014 run.sh flush content of CVS/SVN tags Apr 29, 2014 testbuild.sh travis: print version information in build scripts Feb 25, 2014 testme.sh testme.sh: add test runs without ""timing resistance"" May 8, 2014 updatemakes.sh trim trailing spaces in mingw makefiles Aug 6, 2014 README.md libtomcrypt See doc/crypt.pdf for a detailed documentation Project Status develop: Submitting patches Please branch off from develop if you want to submit a patch. Branches Please be aware, that all branches besides master and develop can and will be force-pushed, rebased and/or removed! If you want to rely on such an unstable branch, create your own fork of this repository to make sure nothing breaks for you. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libtom/libtomcrypt"	"A fairly comprehensive, modular and portable cryptographic toolkit. [WTFPL]"	"true"
"Cryptography"	"Nettle"	"http://www.lysator.liu.se/~nisse/nettle/"	"A low-level cryptographic library. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Nettle - a low-level crypto library Nettle - a low-level cryptographic library Nettle is a cryptographic library that is designed to fit easily in more or less any context: In crypto toolkits for object-oriented languages (C++, Python, Pike, ...), in applications like LSH or GNUPG, or even in kernel space. Documentation A complete manual is included if you download the Nettle source code. You can also read the manual online. Download Get the latest version by https or ftp. Recent releases are signed with the following PGP key:  pub   2560R/28C67298 2013-01-07       Key fingerprint = 343C 2FF0 FBEE 5EC2 EDBE  F399 F359 9FF8 28C6 7298 uid                  Niels Möller <nisse@lysator.liu.se>      Language bindings I'm aware of nettle-bindings for the following higher-level languages. Pike An object-oriented interpreted language with C-like syntax. Nettle bindings are included with the official distribution. Perl Crypt::Nettle module, by Daniel Kahn Gillmor. PostgreSQL Bindings for the Postgres database, by Ron Peterson. R6RS Scheme Scheme bindings by Marco Maggi, supporting multiple R6RS implementations. Haskell Haskell bindings by Clint Adams. TCL Included in the chiark-tcl debian package by Ian Jackson (not sure if/how it's distributed outside of debian). Mail me for corrections or additions to this list. GIT access The public git repository for Nettle is located at git.lysator.liu.se. After checkout, you need to run the .bootstrap script before the standard ./configure && make. Earlier, Nettle was version controlled as part of the LSH repository. When converted to the current repository, the history of all files has been maintained as far as practical. But since the directory organization used to be a bit different, building old versions of Nettle from the current git repository does not work out of the box. To do that, you have to check out historic versions from the LSH repository instead. Contact Send mail to the nettle-bugs mailinglist or directly to me at Niels Möller <nisse@lysator.liu.se> if you have any questions."	"null"	"null"	"A low-level cryptographic library. [LGPL]"	"true"
"Cryptography"	"OpenSSL"	"https://github.com/openssl/openssl"	"A robust, commercial-grade, full-featured, and Open Source cryptography library. [Apache]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2886"	"470"	"1655"	"GitHub - openssl/openssl: TLS/SSL and crypto library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 470 Star 2,886 Fork 1,655 openssl/openssl Code Issues 50 Pull requests 67 Wiki Pulse Graphs TLS/SSL and crypto library https://www.openssl.org 17,286 commits 16 branches 260 releases 200 contributors C 66.0% Perl 27.0% Objective-C 1.8% Assembly 1.8% Shell 1.6% C++ 1.4% Other 0.4% C Perl Objective-C Assembly Shell C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags OpenSSL-engine-0_9_6-stable OpenSSL-fips-0_9_7-stable OpenSSL-fips-0_9_8-stable OpenSSL-fips-1_2-stable OpenSSL-fips-2_0-dev OpenSSL-fips-2_0-stable OpenSSL-fips2-0_9_7-stable OpenSSL_0_9_6-stable OpenSSL_0_9_7-stable OpenSSL_0_9_8-stable OpenSSL_0_9_8fg-stable OpenSSL_1_0_0-stable OpenSSL_1_0_1-stable OpenSSL_1_0_2-stable SSLeay master Nothing to show rsaref master-pre-reformat master-pre-auto-reformat master-post-reformat master-post-auto-reformat STATE_before_zlib STATE_after_zlib SSLeay_0_9_1b SSLeay_0_9_0b SSLeay_0_8_1b OpenSSL_1_1_0-pre5 OpenSSL_1_1_0-pre4 OpenSSL_1_1_0-pre3 OpenSSL_1_1_0-pre2 OpenSSL_1_1_0-pre1 OpenSSL_1_0_2 OpenSSL_1_0_2h OpenSSL_1_0_2g OpenSSL_1_0_2f OpenSSL_1_0_2e OpenSSL_1_0_2d OpenSSL_1_0_2c OpenSSL_1_0_2b OpenSSL_1_0_2a OpenSSL_1_0_2-pre-reformat OpenSSL_1_0_2-pre-auto-reformat OpenSSL_1_0_2-post-reformat OpenSSL_1_0_2-post-auto-reformat OpenSSL_1_0_2-beta3 OpenSSL_1_0_2-beta2 OpenSSL_1_0_2-beta1 OpenSSL_1_0_1 OpenSSL_1_0_1t OpenSSL_1_0_1s OpenSSL_1_0_1r OpenSSL_1_0_1q OpenSSL_1_0_1p OpenSSL_1_0_1o OpenSSL_1_0_1n OpenSSL_1_0_1m OpenSSL_1_0_1l OpenSSL_1_0_1k OpenSSL_1_0_1j OpenSSL_1_0_1i OpenSSL_1_0_1h OpenSSL_1_0_1g OpenSSL_1_0_1f OpenSSL_1_0_1e OpenSSL_1_0_1d OpenSSL_1_0_1c OpenSSL_1_0_1b OpenSSL_1_0_1a OpenSSL_1_0_1-pre-reformat OpenSSL_1_0_1-pre-auto-reformat OpenSSL_1_0_1-post-reformat OpenSSL_1_0_1-post-auto-reformat OpenSSL_1_0_1-beta3 OpenSSL_1_0_1-beta2 OpenSSL_1_0_1-beta1 OpenSSL_1_0_0 OpenSSL_1_0_0t OpenSSL_1_0_0s OpenSSL_1_0_0r OpenSSL_1_0_0q OpenSSL_1_0_0p OpenSSL_1_0_0o OpenSSL_1_0_0n OpenSSL_1_0_0m OpenSSL_1_0_0l OpenSSL_1_0_0k OpenSSL_1_0_0j OpenSSL_1_0_0i OpenSSL_1_0_0h OpenSSL_1_0_0g OpenSSL_1_0_0f OpenSSL_1_0_0e OpenSSL_1_0_0d OpenSSL_1_0_0c OpenSSL_1_0_0b OpenSSL_1_0_0a OpenSSL_1_0_0-pre-reformat OpenSSL_1_0_0-pre-auto-reformat OpenSSL_1_0_0-post-reformat OpenSSL_1_0_0-post-auto-reformat OpenSSL_1_0_0-beta5 OpenSSL_1_0_0-beta4 OpenSSL_1_0_0-beta3 OpenSSL_1_0_0-beta2 OpenSSL_1_0_0-beta1 OpenSSL_0_9_8 OpenSSL_0_9_8zh OpenSSL_0_9_8zg OpenSSL_0_9_8zf OpenSSL_0_9_8ze OpenSSL_0_9_8zd OpenSSL_0_9_8zc OpenSSL_0_9_8zb OpenSSL_0_9_8za OpenSSL_0_9_8y OpenSSL_0_9_8x Nothing to show New pull request Latest commit 8918a95 Jul 15, 2016 levitte Fix: dummy definition of rand_hw_seed() should also return int … Reviewed-by: Stephen Henson <steve@openssl.org> Permalink Failed to load latest commit information. Configurations Windows: allow input and output flags to end with a space, or not Jul 15, 2016 VMS VMS: Adjust the engines directory by adding the pointer size to its name Jul 10, 2016 apps check return values for EVP_Digest*() APIs Jul 15, 2016 crypto Fix: dummy definition of rand_hw_seed() should also return int Jul 15, 2016 demos Consolidate copyright for demos May 18, 2016 doc Install applink.c with the public header files. Jul 14, 2016 engines include/openssl: don't include <windows.h> in public headers. Jul 8, 2016 external/perl Copyright consolidation; .pm and Configure Apr 20, 2016 fuzz Don't rely on implicit rsa.h inclusion Jul 10, 2016 include check return values for EVP_Digest*() APIs Jul 15, 2016 ms Revert ""RT4526: Call TerminateProcess, not ExitProcess"" Jun 16, 2016 os-dep Move Haiku configuration to separate config file to denote May 19, 2016 ssl check return values for EVP_Digest*() APIs Jul 15, 2016 test check return values for EVP_Digest*() APIs Jul 15, 2016 tools perl: Separate compile-time environment from runtime environment Jul 4, 2016 util make update Jul 13, 2016 .gitattributes Make corpora binary. Jun 10, 2016 .gitignore Reorganize .gitignore to make better use of its features Jul 8, 2016 .travis-create-release.sh Remove the -n tar flag from osx dist creation Mar 8, 2016 .travis.yml Restore clang builds in travis.yml Jun 30, 2016 ACKNOWLEDGEMENTS Refer to website for acknowledgements. Dec 8, 2015 AUTHORS Copyright consolidation: perl files Apr 20, 2016 CHANGES Change default directory for the .rnd file on Windows and VMS Jun 20, 2016 CONTRIBUTING Spelling... and more spelling Jun 22, 2016 Configure perl: Separate compile-time environment from runtime environment Jul 4, 2016 FAQ Move FAQ to the web. Aug 16, 2015 INSTALL perl: Separate compile-time environment from runtime environment Jul 4, 2016 LICENSE Copyright consolidation 07/10 May 17, 2016 Makefile.shared Makefile.shared: revert Haiku support commit. May 25, 2016 NEWS Spelling... and more spelling Jun 21, 2016 NOTES.DJGPP Slight cleanup of the collection of READMEs, INSTALLs and NOTES May 23, 2016 NOTES.PERL Tweaks to NOTES.PERL Jun 3, 2016 NOTES.VMS Force argv to be an array of long pointers on VMS Apr 1, 2016 NOTES.WIN Spelling... and more spelling Jun 21, 2016 README Spelling... and more spelling Jun 21, 2016 README.ECC Add NSA sublicense info. May 11, 2011 README.ENGINE Remove Ubsec engine Feb 26, 2016 README.FIPS Remove more (rest?) of FIPS build stuff. Jan 6, 2016 appveyor.yml Appveyor: test install as well, via a fake deploy_script Jun 21, 2016 build.info Have the VMS shared library file names contain the shared version Jul 2, 2016 config ./config: minor cleanup. Jun 24, 2016 config.com VMS: arch in config.com was mistakenly made process global Jul 6, 2016 e_os.h Change default directory for the .rnd file on Windows and VMS Jun 20, 2016 README   OpenSSL 1.1.0-pre6-dev   Copyright (c) 1998-2016 The OpenSSL Project  Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson  All rights reserved.   DESCRIPTION  -----------   The OpenSSL Project is a collaborative effort to develop a robust,  commercial-grade, fully featured, and Open Source toolkit implementing the  Transport Layer Security (TLS) protocols (including SSLv3) as well as a  full-strength general purpose cryptographic library.   OpenSSL is descended from the SSLeay library developed by Eric A. Young  and Tim J. Hudson.  The OpenSSL toolkit is licensed under a dual-license (the  OpenSSL license plus the SSLeay license), which means that you are free to  get and use it for commercial and non-commercial purposes as long as you  fulfill the conditions of both licenses.   OVERVIEW  --------   The OpenSSL toolkit includes:   libssl (with platform specific naming):      Provides the client and server-side implementations for SSLv3 and TLS.   libcrypto (with platform specific naming):      Provides general cryptographic and X.509 support needed by SSL/TLS but      not logically part of it.   openssl:      A command line tool that can be used for:         Creation of key parameters         Creation of X.509 certificates, CSRs and CRLs         Calculation of message digests         Encryption and decryption         SSL/TLS client and server tests         Handling of S/MIME signed or encrypted mail         And more...   INSTALLATION  ------------   See the appropriate file:         INSTALL         Linux, Unix, Windows, OpenVMS, ...         NOTES.*         INSTALL addendums for different platforms   SUPPORT  -------   See the OpenSSL website www.openssl.org for details on how to obtain  commercial technical support. Free community support is available through the  openssl-users email list (see  https://www.openssl.org/community/mailinglists.html for further details).   If you have any problems with OpenSSL then please take the following steps  first:      - Download the current snapshot from ftp://ftp.openssl.org/snapshot/       to see if the problem has already been addressed     - Remove ASM versions of libraries     - Remove compiler optimisation flags   If you wish to report a bug then please include the following information in  any bug report:      - OpenSSL version: output of 'openssl version -a'     - Any ""Configure"" options that you selected during compilation of the       library if applicable (see INSTALL)     - OS Name, Version, Hardware platform     - Compiler Details (name, version)     - Application Details (name, version)     - Problem Description (steps that will reproduce the problem, if known)     - Stack Traceback (if the application dumps core)   Email the report to:      rt@openssl.org   In order to avoid spam, this is a moderated mailing list, and it might  take a couple of days for the ticket to show up.  (We also scan posts to make  sure that security disclosures aren't publicly posted by mistake.) Mail  to this address is recorded in the public RT (request tracker) database  (see https://www.openssl.org/community/index.html#bugs for details) and  also forwarded the public openssl-dev mailing list.  Confidential mail  may be sent to openssl-security@openssl.org (PGP key available from the  key servers).   Please do NOT use this for general assistance or support queries.  Just because something doesn't work the way you expect does not mean it  is necessarily a bug in OpenSSL. Use the openssl-users email list for this type  of query.   You can also make GitHub pull requests. See the CONTRIBUTING file for more  details.   HOW TO CONTRIBUTE TO OpenSSL  ----------------------------   See CONTRIBUTING   LEGALITIES  ----------   A number of nations, in particular the U.S., restrict the use or export  of cryptography. If you are potentially subject to such restrictions  you should seek competent professional legal advice before attempting to  develop or distribute cryptographic code.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/openssl/openssl"	"A robust, commercial-grade, full-featured, and Open Source cryptography library. [Apache]"	"true"
"Cryptography"	"websire"	"http://www.openssl.org/"	"A robust, commercial-grade, full-featured, and Open Source cryptography library. [Apache]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OpenSSL OpenSSL Cryptography and SSL/TLS Toolkit Home Downloads Docs News Policies Community Support Welcome to OpenSSL! OpenSSL is an open source project that provides a robust, commercial-grade, and full-featured toolkit for the Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols. It is also a general-purpose cryptography library. For more information about the team and community around the project, or to start making your own contributions, start with the community page. To get the latest news, download the source, and so on, please see the sidebar or the buttons at the top of every page. The OpenSSL toolkit is licensed under an Apache-style license, which basically means that you are free to get and use it for commercial and non-commercial purposes subject to some simple license conditions. Latest News Date Item 03-May-2016 Security Advisory: several security fixes 03-May-2016 OpenSSL 1.0.2h is now available, including bug and security fixes 03-May-2016 OpenSSL 1.0.1t is now available, including bug and security fixes 28-Apr-2016 OpenSSL 1.0.2h and 1.0.1t security releases due 3rd May 2016 19-Apr-2016 Beta 2 (pre-release 5) of OpenSSL 1.1.0 is now available: please download and test it More...   Legalities Please remember that export/import and/or use of strong cryptography software, providing cryptography hooks, or even just communicating technical details about cryptography software is illegal in some parts of the world. So when you import this package to your country, re-distribute it from there or even just email technical suggestions or even source patches to the authors or other people you are strongly advised to pay close attention to any laws or regulations which apply to you. The authors of openssl are not liable for any violations you make here. So be careful, it is your responsibility. Acknowledgement This product includes cryptographic software written by Eric Young. This product includes software written by Tim Hudson (tjh@cryptsoft.com). You are here: Home Sitemap Home Downloads: Source code Docs: FAQ, FIPS, manpages, ... News: Latest information Policies: How we operate Community: Blog, bugs, email, ... Support: Commercial support and contracting Sponsor Acknowledgements Please report problems with this website to webmaster at openssl.org. Copyright © 1999-2016, OpenSSL Software Foundation."	"null"	"null"	"A robust, commercial-grade, full-featured, and Open Source cryptography library. [Apache]"	"true"
"Cryptography"	"retter"	"https://github.com/MaciejCzyzewski/retter"	"A collection of hash functions, ciphers, tools, libraries, and materials related to cryptography."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1557"	"138"	"160"	"GitHub - maciejczyzewski/retter: A collection of hash functions, ciphers, tools, libraries, and materials related to cryptography & security. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 138 Star 1,557 Fork 160 maciejczyzewski/retter Code Issues 1 Pull requests 0 Pulse Graphs A collection of hash functions, ciphers, tools, libraries, and materials related to cryptography & security. 🔐 http://maciejczyzewski.me/retter 114 commits 4 branches 1 release Fetching contributors C 87.7% C++ 6.6% HTML 5.4% Makefile 0.2% Shell 0.1% JavaScript 0.0% C C++ HTML Makefile Shell JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master release-1.0 Nothing to show 1.0 Nothing to show New pull request Latest commit 56a8b14 Oct 25, 2015 maciejczyzewski Merge branch 'release-1.0' … * release-1.0:   [added]: new structure, my private bookmarks... Permalink Failed to load latest commit information. algorithms [added]: new structure, my private bookmarks... Oct 25, 2015 bookmarks [added]: new structure, my private bookmarks... Oct 25, 2015 tools [added]: new structure, my private bookmarks... Oct 25, 2015 CONTRIBUTING [added]: new structure, my private bookmarks... Oct 25, 2015 MAINTAINERS [added]: new structure, my private bookmarks... Oct 25, 2015 README [added]: new structure, my private bookmarks... Oct 25, 2015 RETTER.html [added]: new structure, my private bookmarks... Oct 25, 2015 bootstrap.sh [added]: new structure, my private bookmarks... Oct 25, 2015 README                _""""^^""-.             /  /   \  \             |  |.-""""-.|        ___ ___ _____ _____ ___ ___            ////`.;;;;.`\      | _ \ __|_   _|_   _| __| _ \\           |||; ::/  \:: ;     |   / _|  | |   | | | _||   /           |||; ::\__/:: ;     |_|_\___| |_|   |_| |___|_|_\\            \\\\ ';;;;' /      Cryptography & Security moves fast. Keep up!             `==':-..-'`                         http://maciejczyzewski.me/retter                               By: M. A. Czyzewski                              Date: April 3, 2011              This code is explicitly placed into the public domain.  === WHAT IS RETTER? ===========================================================      The purpose of this project is to promote and develop cryptography.      It includes the collection of known tools, libraries, articles, materials,     hash functions, and ciphers. Also it's a place for people who share an     interest in security & cryptography and want to discuss about it.      --------------------------------------------------------------------------     | If you invent a new hash function or ciphers, or write a paper related |     | to cryptography just add it here. That is the right place...           |     --------------------------------------------------------------------------      See CONTRIBUTING file in main directory.  === HOW DO I BUILD RETTER? ====================================================      The retter code has been tested on Debian Linux, using the Python 2.7.      ./bootstrap.sh build  === WHERE CAN I FIND UPDATES? =================================================      Find more information and updates at: github.com/maciejczyzewski/retter   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MaciejCzyzewski/retter"	"A collection of hash functions, ciphers, tools, libraries, and materials related to cryptography."	"true"
"Cryptography"	"s2n"	"https://github.com/awslabs/s2n"	"An implementation of the TLS/SSL protocols. [Apache]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2312"	"154"	"201"	"GitHub - awslabs/s2n: s2n : an implementation of the TLS/SSL protocols Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 154 Star 2,312 Fork 201 awslabs/s2n Code Issues 33 Pull requests 7 Pulse Graphs s2n : an implementation of the TLS/SSL protocols 658 commits 1 branch 0 releases 36 contributors C 96.2% Makefile 1.9% Python 1.4% Shell 0.5% C Makefile Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ed94d7c Jul 13, 2016 raycoll committed on GitHub Merge pull request #241 from colmmacc/master … Add support for session caching Permalink Failed to load latest commit information. .travis Merge pull request #238 from colmmacc/master Jun 20, 2016 api Add TTL to the store callback Jul 12, 2016 bin Update function signature Jul 12, 2016 crypto Merge pull request #260 from alexw91/addGuards Jul 7, 2016 docs Use TTL value Jul 12, 2016 error Add HKDF tests and fix style Jul 6, 2016 lib Support builds with existing libcrypto May 17, 2016 libcrypto-build Add full instructions for building OpenSSL locally Feb 27, 2015 libcrypto-root Add libcrypto README back Mar 12, 2015 stuffer Add support for session caching Jun 27, 2016 tests Merge pull request #241 from colmmacc/master Jul 13, 2016 tls Merge pull request #241 from colmmacc/master Jul 13, 2016 utils Adds Prediction Resistance to the DRBG and RDRAND if supported Jul 1, 2016 .gitignore Add .gitignore for generated files Jul 5, 2015 .travis.yml Use parallel make jobs for Travis unit tests Jun 17, 2016 LICENSE Adding license headers to a few files and adding a LICENSE and NOTICE… Feb 4, 2015 Makefile Add a basic handshake integration test Jun 9, 2016 NOTICE Adding license headers to a few files and adding a LICENSE and NOTICE… Feb 4, 2015 README.md Fix Build Status link in readme Jul 6, 2016 s2n.mk Support builds with existing libcrypto May 17, 2016 README.md s2n is a C99 implementation of the TLS/SSL protocols that is designed to be simple, small, fast, and with security as a priority. It is released and licensed under the Apache Software License 2.0. Using s2n The s2n I/O APIs are designed to be intuitive to developers familiar with the widely-used POSIX I/O APIs, and s2n supports blocking, non-blocking, and full-duplex I/O. Additionally there are no locks or mutexes within s2n. /* Create a server mode connection handle */ struct s2n_connection *conn = s2n_connection_new(S2N_SERVER); if (conn == NULL) {     ... error ... }  /* Associate a connection with a file descriptor */ if (s2n_connection_set_fd(conn, fd) < 0) {     ... error ... }  /* Negotiate the TLS handshake */ s2n_blocked_status blocked; if (s2n_negotiate(conn, &blocked) < 0) {     ... error ... }  /* Write data to the connection */ int bytes_written; bytes_written = s2n_send(conn, ""Hello World"", sizeof(""Hello World""), &blocked); For details on building the s2n library and how to use s2n in an application you are developing, see the API Reference. s2n features s2n implements SSLv3, TLS1.0, TLS1.1, and TLS1.2. For encryption, s2n supports 128-bit and 256-bit AES, in the CBC and GCM modes, 3DES, and RC4. For forward secrecy, s2n supports both DHE and ECDHE. s2n also supports the Server Name Indicator (SNI), Application-Layer Protocol Negotiation (ALPN) and the Online Certificate Status Protocol (OCSP) TLS extensions. SSLv3, RC4, and DHE are each disabled by default for security reasons. As it can be difficult to keep track of which encryption algorithms and protocols are best to use, s2n features a simple API to use the latest ""default"" set of preferences. If you prefer to remain on a specific version for backwards compatibility, that is also supported. /* Use the latest s2n ""default"" set of ciphersuite and protocol preferences */ s2n_config_set_cipher_preferences(config, ""default"");  /* Use a specific set of preferences, update when you're ready */ s2n_config_set_cipher_preferences(config, ""20150306"") s2n safety mechanisms Internally s2n takes a systematic approach to data protection and includes several mechanisms designed to improve safety. Small and auditable code base Ignoring tests, blank lines and comments, s2n is about 6,000 lines of code. s2n's code is also structured and written with a focus on reviewability. All s2n code is subject to code review, and we plan to complete security evaluations of s2n on an annual basis. To date there have been two external code-level reviews of s2n, including one by a commercial security vendor. s2n has also been shared with some trusted members of the broader cryptography, security, and Open Source communities. Any issues discovered are always recorded in the s2n issue tracker. Static analysis, fuzz-testing and penetration testing In addition to code reviews, s2n is subject to regular static analysis, fuzz-testing, and penetration testing. Several penetration tests have occurred, including two by commercial vendors. Unit tests and end-to-end testing s2n includes positive and negative unit tests and end-to-end test cases. Erase on read s2n encrypts or erases plaintext data as quickly as possible. For example, decrypted data buffers are erased as they are read by the application. Built-in memory protection s2n uses operating system features to protect data from being swapped to disk or appearing in core dumps. Minimalist feature adoption s2n avoids implementing rarely used options and extensions, as well as features with a history of triggering protocol-level vulnerabilities. For example there is no support for session renegotiation or DTLS. Compartmentalized random number generation The security of TLS and its associated encryption algorithms depends upon secure random number generation. s2n provides every thread with two separate random number generators. One for ""public"" randomly generated data that may appear in the clear, and one for ""private"" data that should remain secret. This approach lessens the risk of potential predictability weaknesses in random number generation algorithms from leaking information across contexts. Modularized encryption s2n has been structured so that different encryption libraries may be used. Today s2n supports OpenSSL, LibreSSL, BoringSSL, and the Apple Common Crypto framework to perform the underlying cryptographic operations. Timing blinding s2n includes structured support for blinding time-based side-channels that may leak sensitive data. For example, if s2n fails to parse a TLS record or handshake message, s2n will add a randomized delay of between 10 and 30 seconds, granular to nanoseconds, before responding. This raises the complexity of real-world timing side-channel attacks by a factor of at least tens of trillions. Table based state-machines s2n uses simple tables to drive the TLS/SSL state machines, making it difficult for invalid out-of-order states to arise. C safety s2n is written in C, but makes light use of standard C library functions and wraps all memory handling, string handling, and serialization in systematic boundary-enforcing checks. Security issue notifications If you discover a potential security issue in s2n we ask that you notify AWS Security via our vulnerability reporting page. Please do not create a public github issue. If you package or distribute s2n, or use s2n as part of a large multi-user service, you may be eligible for pre-notification of future s2n releases. Please contact s2n-pre-notification@amazon.com. Contributing to s2n If you are interested in contributing to s2n, please see our development guide. Language Bindings for s2n See our language bindings list for language bindings for s2n that we're aware of. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/awslabs/s2n"	"An implementation of the TLS/SSL protocols. [Apache]"	"true"
"Cryptography"	"Tiny AES128 in C"	"https://github.com/kokke/tiny-AES128-C"	"A small and portable implementation of the AES128 ECB encryption algorithm implemented in C. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"318"	"53"	"170"	"GitHub - kokke/tiny-AES128-C: Small portable AES128 in C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 53 Star 318 Fork 170 kokke/tiny-AES128-C Code Issues 6 Pull requests 10 Wiki Pulse Graphs Small portable AES128 in C 107 commits 1 branch 0 releases 3 contributors C 93.2% C++ 3.6% Makefile 3.2% C C++ Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f832b41 Jun 15, 2016 kokke committed on GitHub s/strncmp/memcmp/g Permalink Failed to load latest commit information. Makefile Create Makefile May 29, 2014 README.md Update README.md Nov 10, 2015 aes.c Update aes.c May 8, 2015 aes.h Update aes.h Dec 15, 2014 test.c s/strncmp/memcmp/g Jun 15, 2016 unlicense.txt Create unlicense.txt Dec 8, 2014 README.md Tiny AES128 in C This is a small and portable implementation of the AES128 ECB and CBC encryption algorithms written in C. The API is very simple and looks like this (I am using C99 <stdint.h>-style annotated types): void AES128_ECB_encrypt(uint8_t* input, const uint8_t* key, uint8_t* output); void AES128_ECB_decrypt(uint8_t* input, const uint8_t* key, uint8_t* output); void AES128_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv); void AES128_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv); You can choose to use one or both of the modes-of-operation, by defining the symbols CBC and ECB. See the header file for clarification. There is no built-in error checking or protection from out-of-bounds memory access errors as a result of malicious input. The two functions AES128_ECB_xxcrypt() do most of the work, and they expect inputs of 128 bit length. The module uses around 200 bytes of RAM and 2.5K ROM when compiled for ARM (~2K for Thumb but YMMV). It is one of the smallest implementation in C I've seen yet, but do contact me if you know of something smaller (or have improvements to the code here). I've successfully used the code on 64bit x86, 32bit ARM and 8 bit AVR platforms. GCC size output when ECB mode is compiled for ARM: $ arm-none-eabi-gcc -Os -c aes.c -DCBC=0 $ size aes.o    text    data     bss     dec     hex filename    2323       0     184    2507     9cb aes.o  .. and when compiling for the THUMB instruction set, we end up around 2K in code size. $ arm-none-eabi-gcc -mthumb -Os -c aes.c -DCBC=0 $ size aes.o    text    data     bss     dec     hex filename    1775       0     184    1959     7a7 aes.o  I am using Mentor Graphics free ARM toolchain: $ arm-none-eabi-gcc --version arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-branch revision 211358] Copyright (C) 2013 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This implementation is verified against the data in: National Institute of Standards and Technology Special Publication 800-38A 2001 ED Appendix F: Example Vectors for Modes of Operation of the AES. All material in this repository is in the public domain. I am a bit slow to react to pull requests and issues, but I have an ambition to go through all issues sometime in the future and release a stable version. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kokke/tiny-AES128-C"	"A small and portable implementation of the AES128 ECB encryption algorithm implemented in C. [PublicDomain]"	"true"
"Database"	"hiberlite"	"https://github.com/paulftw/hiberlite"	"C++ Object-relational mapping for sqlite3. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"234"	"37"	"68"	"GitHub - paulftw/hiberlite: C++ ORM for SQLite Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 234 Fork 68 paulftw/hiberlite Code Issues 8 Pull requests 0 Pulse Graphs C++ ORM for SQLite http://code.google.com/p/hiberlite/ 47 commits 2 branches 0 releases Fetching contributors C++ 91.5% Makefile 4.0% Lua 3.4% C 1.1% C++ Makefile Lua C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master paulftw-add-longlong Nothing to show Nothing to show New pull request Latest commit 1e41fc2 May 26, 2016 d-led added documentation on custom primitives. closes #21 Permalink Failed to load latest commit information. Build updated the build to premake5 and VS2013 Dec 15, 2015 Catch @ 981347b updated Catch Dec 15, 2015 include Add support for unsigned long long Dec 7, 2015 sqlite-amalgamation @ 5c05854 added sqlite amalgamation for testing Sep 2, 2013 src less warnings in 64 bit VS 2012 compile Jan 7, 2014 .gitignore test for unsigned long long Dec 15, 2015 .gitmodules added sqlite amalgamation for testing Sep 2, 2013 .travis.yml faster builds with travis-ci docker Aug 13, 2015 LICENSE Create LICENSE Oct 21, 2014 Makefile Add `clean` target to Makefile Dec 13, 2013 README Update README Dec 18, 2012 README.md added documentation on custom primitives. closes #21 May 26, 2016 catch_tests.cpp test as an example for #21 May 25, 2016 make_vs2013.bat test for unsigned long long Dec 15, 2015 premake5.lua test for unsigned long long Dec 15, 2015 sample.cpp Get rid of signedness warnings Dec 13, 2013 tests.cpp Get rid of signedness warnings Dec 13, 2013 README.md Hiberlite ORM C++ object-relational mapping with API inspired by the awesome Boost.Serialization - that means almost no API to learn. Usage Just compile and link all files under src/ to your project. Include the main header: #include ""hiberlite.h"" Features Key features of Hiberlite are: Boost.Serialization like API no code generators / preprocessors support for one-to-many and many-to-many relations automatic code generation lazy loading smart pointers no need to inherit from a single base class In contrast to most serialization libraries with SQL serializers, C++ objects mapped with hiberlite behave similar to active record pattern - you are not forced to follow the ""read all your data/modify some small part/write everything back"" path. For people who need reliable data storage, ACID transactions, simple random-access to their data files, and don't like coding in SQL. Tutorial While building a typical RDBMS application developer has to deal with the following tasks: Open a database Create database schema Populate the tables with data Read and/or modify that data Hiberlite greatly reduces the implementation of each of these tasks. Creating a database Opening a database is as simple as hiberlite::Database db; db.open(""sample.db""); Where Database::open(std::string filename) opens a sqlite3 file. If it doesn't exist it will be created. Another option is to have constructor automatically open/create the DB file: hiberlite::Database db(""sample.db""); Creating database schema In C++ You deal with classes and objects. You know what objects You want to store in the database. And hiberlite will figure out how to store that data. Defining data model First You must prepare the data classes for use with hiberlite. Suppose we develop a social-network application. We define a person class as: class Person{ public:         string name;         int age;         vector<string> bio; }; Now, to let hiberlite know about the internal structure of this class, we add an access method and an export declaration: class Person{     friend class hiberlite::access;     template<class Archive>     void hibernate(Archive & ar)     {         ar & HIBERLITE_NVP(name);         ar & HIBERLITE_NVP(age);         ar & HIBERLITE_NVP(bio);     } public:     string name;     double age;     vector<string> bio; }; HIBERLITE_EXPORT_CLASS(Person) Inside the hibernate(Archive & ar) method we list all the data fields we want to persist in the database. Macro HIBERLITE_EXPORT_CLASS(Person) is invoked to register the class name with Hiberlite. For now just remember to invoke it once per class in your project. (Placing it in the Person.cpp is a good idea) At this point hiberlite is able to map the Person to a database. Creating tables Database schema in hiberlite is simply a set of classes, that are stored in the database. A programmer defines that set of classes, and hiberlite determines the needed tables and their columns. Each instance of Database maintains its own copy of the database schema (set of data classes). To insert a new class to that set, use registerBeanClass template method: db.registerBeanClass<Person>(); In most applications several classes are stored in one database - so usually You will call registerBeanClass several times: Database db(""gmail2.0.db""); db.registerBeanClass<UserAccount>(); db.registerBeanClass<Letter>(); db.registerBeanClass<Attachment>(); When the classes are registered, Database can create tables to map them: db.dropModel(); db.createModel(); createModel() executes several CREATE TABLE queries. dropModel() cleans the database - executes DROP TABLE IF EXISTS query for each table in the schema. Besides uninstallers, this method may be used to destroy the old tables (from a probably obsolete scheme) before calling createModel(). Saving data When the database with proper schema is opened, we can put some Person objects in it: Person x; x.name=""Amanda""; x.age=21; x.bio.push_back(""born 1987""); hiberlite::bean_ptr<Person> p=db.copyBean(x); x.age=-1; //does NOT change any database record p->age=22; //does change the database copyBean(x) template method creates a copy of its argument and saves it to the database. It returns a smart pointer - bean_ptr. bean_ptr is inspired by the boost::shared_ptr. The main difference is that in addition to deletion, bean_ptr guarantees that the referenced object will be also saved to the database, when no longer needed. An internal primary key is autogenerated for each object in the database. It can be read with sqlid_t bean_ptr::get_id(). Another way to create a bean is to use createBean() template method: hiberlite::bean_ptr<Person> p=db.createBean<Person>(); p->name=""Amanda""; p->age=21; p->bio.push_back(""born 1987""); Loading data There are several methods to query the database: bean_ptr Database::loadBean(sqlid_t id) loads the bean with the given id. bean_ptr<Person> p=db.loadBean<Person>(1); cout << ""first person is "" << p->name << endl; In this case object itself is not loaded, when bean_ptr is returned. bean_ptr is a lazy pointer, so the wrapped object will be loaded when first needed. In this example Person will be loaded later, when we try to access the name field. std::vector< bean_ptr > Database::getAllBeans() returns a vector with all the beans of a given class C. vector< bean_ptr<Person> > v=db.getAllBeans<Person>(); cout << ""found "" << v.size() << "" persons in the database\n""; In this example objects are not loaded at all. You can load the same object more than once - all the returned bean_ptr's will point the same bean. Deleting beans To remove an object from the database, call bean_ptr::destroy(): bean_ptr<Person> p==db.loadBean<Person>(1); p.destroy(); Examples All the above code is put together in sample.cpp. For more demonstration see the poor-mans unit tests : tests.cpp. User-defined class First we define the class we plan to store in the database: class MyClass{     friend class hiberlite::access;     template<class Archive>     void hibernate(Archive & ar)     {         ar & HIBERLITE_NVP(a);         ar & HIBERLITE_NVP(b);         ar & HIBERLITE_NVP(vs);     } public:     int a;     double b;     vector<string> vs; }; HIBERLITE_EXPORT_CLASS(MyClass) Note the friend declaration and the hibernate(...) template method - these two pieces of code are necessary for hiberlite to access the internal structure of the user-defined class. HIBERLITE_NVP is a macro that creates a name-value pair with reference to its argument. HIBERLITE_EXPORT_CLASS() defines the root table name for the class. More on this later. How it is stored hiberlite will use 2 tables to represent MyClass instances in the database: CREATE TABLE MyClass (     a INTEGER,     b REAL,     hiberlite_id INTEGER PRIMARY KEY AUTOINCREMENT ) CREATE TABLE MyClass_vs_items (     hiberlite_entry_indx INTEGER,     hiberlite_id INTEGER PRIMARY KEY AUTOINCREMENT,     hiberlite_parent_id INTEGER,     item TEXT ) Table MyClass is the root table for MyClass. It will contain one row per object. Columns a and b store values of the corresponding int and double fields. HIBERLITE_EXPORT_CLASS(MyClass) macro simply declares that instances of MyClass must be stored int the MyClass root table and its subtables. MyClass_vs_items table is the ""subtable"" of MyClass. It is used to store elements of the vs vector: hiberlite_parent_id references the hiberlite_id of the root table, hiberlite_entry_indx - is the zero-index of the string element of the vector, and item is the value of that element. Objects in the database are called beans. To add a new bean to the database we call hiberlite::bean_ptr<MyClass> p=db.copyBean(x); copyBean() creates an internal copy of its argument (by invoking copy-constructor new MyClass(x)), saves it in the database and returns a bean_ptr, pointing to that copy. bean_ptr is a smart-pointer, it will perform reference-counting and care about saving and destroying your bean when it is no longer in use. But the object will not be lost - it is stored in the database. The only way to remove it is to call bean_ptr::destroy(). There are two other ways to create a bean in the database: bean_ptr Database::createBean() creates a bean using default constructor and returns a bean_ptr Database::manageBean(C& ptr) takes control over its argument and wraps it in the bean_ptr. You must not call delete ptr; after calling manageBean(ptr) - bean_ptr will do it when necessary. Loading data Call to std::vector< hiberlite::bean_ptr<MyClass> > v=db.getAllBeans<MyClass>(); will return a vector with all objects in the database. bean_ptr is a smart pointer, but I forgot to mention that it is also a lazy pointer. Beans itself are not loaded when with getAllBeans() - only their primary keys. To give user the access to the underlying object, C& bean_ptr::operator->() is overloaded. The object will be created and fetched from the database with the first use of operator->. User-defined primitive types Sometimes, numbers or strings are not suitable representations for fields of objects. In that case it is possible to extend hiberlite's conversion mechanism to support types other than the ones supported. For example: given an enum: enum class Status {         OK,         NOT_OK }; the macro HIBERLITE_NVP will cause a compile error if a member of that type is used with it. In order to convert the enum to a number and back (conversion safety considerations may apply), it is possible to define custom conversions before defining the data model: namespace hiberlite {     template <class A>     void hibernate(A& ar, Status& value, const unsigned int) {         ar& db_atom<Status>(value);     }      template <>     inline std::string db_atom<Status>::sqliteStorageClass() {         return ""INTEGER"";     }      template <>     template <class Stmt, class Arg>     void db_atom<Status>::loadValue(Stmt& res, Arg& arg) {         val = static_cast<Status>(res.get_int(arg));     }      template <>     inline void db_atom<Status>::bindValue(sqlite3_stmt* stmt, int col) {         sqlite3_bind_int(stmt, col, static_cast<int>(val));     } } This allows the following to work: struct Item {     Status status;      template <class Archive>     void hibernate(Archive & ar) {         ar & HIBERLITE_NVP(status);     } }; Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/paulftw/hiberlite"	"C++ Object-relational mapping for sqlite3. [BSD]"	"true"
"Database"	"Hiredis"	"https://github.com/redis/hiredis"	"A minimalistic C client library for the Redis database. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2039"	"198"	"711"	"GitHub - redis/hiredis: Minimalistic C client for Redis >= 1.2 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 198 Star 2,039 Fork 711 redis/hiredis Code Issues 32 Pull requests 5 Wiki Pulse Graphs Minimalistic C client for Redis >= 1.2 550 commits 17 branches 13 releases 67 contributors C 94.9% Makefile 3.3% C++ 1.8% C Makefile C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags asyncdoc auto backwards-compatibility-macros buffer catch-error-buf-overflow debug-flags develop fix-cygwin master new-readme ng pr-438 string-len-size_t try unstable updated-sds with-timeout Nothing to show v0.13.3 v0.13.2 v0.13.1 v0.13.0 v0.12.1 v0.12.0 v0.11.0 v0.10.1 v0.10.0 v0.9.2 v0.9.1 v0.9.0 v0.0.1 Nothing to show New pull request Latest commit 5f98e1d Jul 9, 2016 not-a-robot committed on GitHub Auto merge of #445 - xxvv:master, r=badboy … fix: should close socket fd when retry connect (tcp) Permalink Failed to load latest commit information. adapters Added MacOS X addapter and corresponding example. Jul 27, 2015 examples fix snprintf format string Oct 5, 2015 .gitignore Generate pkgconf during build Jan 5, 2015 .travis.yml chore(CI): Exclude valgrind jobs on OSX Jun 20, 2016 CHANGELOG.md docs: Add breaking change note about makefile variable Apr 20, 2016 COPYING Update license Apr 21, 2011 Makefile fix: Rename DEBUG to DEBUG_FLAGS Apr 20, 2016 README.md Auto merge of #417 - redis:thread-safety, r=badboy Apr 20, 2016 appveyor.yml chore: Cleanup appveyor configuration Apr 20, 2016 async.c fixing typos Oct 28, 2015 async.h Add support for SO_REUSEADDR Jan 5, 2015 dict.c fixing typos Oct 27, 2015 dict.h Make dictionary functions static and include the .c file Jan 14, 2011 fmacros.h Do not define _XOPEN_SOURCE for OS X Jun 19, 2016 hiredis.c Typo format in redisFormatSdsCommandArgv function May 14, 2016 hiredis.h fix: Change string length type to size_t Apr 20, 2016 net.c fix: should close socket fd when retry connet remote (tcp) Jul 7, 2016 net.h Change copyright date and add copyright holder Apr 16, 2015 read.c Update read.c Apr 11, 2016 read.h fix: Remove backwards compatibility macro's Apr 20, 2016 sds.c remove unnessory code Apr 20, 2016 sds.h Update sds.h May 14, 2016 sdsalloc.h fix: Add sdsalloc.h file Apr 20, 2016 test.c test: Add regression test for sds argv formatting May 14, 2016 win32.h Added support for compiling the parser code with Microsoft Visual C c… Mar 13, 2015 README.md This Readme reflects the latest changed in the master branch. See v0.13.3 for the Readme and documentation for the latest release. HIREDIS Hiredis is a minimalistic C client library for the Redis database. It is minimalistic because it just adds minimal support for the protocol, but at the same time it uses a high level printf-alike API in order to make it much higher level than otherwise suggested by its minimal code base and the lack of explicit bindings for every Redis command. Apart from supporting sending commands and receiving replies, it comes with a reply parser that is decoupled from the I/O layer. It is a stream parser designed for easy reusability, which can for instance be used in higher level language bindings for efficient reply parsing. Hiredis only supports the binary-safe Redis protocol, so you can use it with any Redis version >= 1.2.0. The library comes with multiple APIs. There is the synchronous API, the asynchronous API and the reply parsing API. Upgrading to 1.0.0 Version 1.0.0 marks a stable release of hiredis. It includes some minor breaking changes, mostly to make the exposed API more uniform and self-explanatory. It also bundles the updated sds library, to sync up with upstream and Redis. For most applications a recompile against the new hiredis should be enough. For code changes see the Changelog. Upgrading from <0.9.0 Version 0.9.0 is a major overhaul of hiredis in every aspect. However, upgrading existing code using hiredis should not be a big pain. The key thing to keep in mind when upgrading is that hiredis >= 0.9.0 uses a redisContext* to keep state, in contrast to the stateless 0.0.1 that only has a file descriptor to work with. Synchronous API To consume the synchronous API, there are only a few function calls that need to be introduced: redisContext *redisConnect(const char *ip, int port); void *redisCommand(redisContext *c, const char *format, ...); void freeReplyObject(void *reply); Connecting The function redisConnect is used to create a so-called redisContext. The context is where Hiredis holds state for a connection. The redisContext struct has an integer err field that is non-zero when the connection is in an error state. The field errstr will contain a string with a description of the error. More information on errors can be found in the Errors section. After trying to connect to Redis using redisConnect you should check the err field to see if establishing the connection was successful: redisContext *c = redisConnect(""127.0.0.1"", 6379); if (c == NULL || c->err) {     if (c) {         printf(""Error: %s\n"", c->errstr);         // handle error     } else {         printf(""Can't allocate redis context\n"");     } } Note: A redisContext is not thread-safe. Sending commands There are several ways to issue commands to Redis. The first that will be introduced is redisCommand. This function takes a format similar to printf. In the simplest form, it is used like this: reply = redisCommand(context, ""SET foo bar""); The specifier %s interpolates a string in the command, and uses strlen to determine the length of the string: reply = redisCommand(context, ""SET foo %s"", value); When you need to pass binary safe strings in a command, the %b specifier can be used. Together with a pointer to the string, it requires a size_t length argument of the string: reply = redisCommand(context, ""SET foo %b"", value, (size_t) valuelen); Internally, Hiredis splits the command in different arguments and will convert it to the protocol used to communicate with Redis. One or more spaces separates arguments, so you can use the specifiers anywhere in an argument: reply = redisCommand(context, ""SET key:%s %s"", myid, value); Using replies The return value of redisCommand holds a reply when the command was successfully executed. When an error occurs, the return value is NULL and the err field in the context will be set (see section on Errors). Once an error is returned the context cannot be reused and you should set up a new connection. The standard replies that redisCommand are of the type redisReply. The type field in the redisReply should be used to test what kind of reply was received: REDIS_REPLY_STATUS: The command replied with a status reply. The status string can be accessed using reply->str. The length of this string can be accessed using reply->len. REDIS_REPLY_ERROR: The command replied with an error. The error string can be accessed identical to REDIS_REPLY_STATUS. REDIS_REPLY_INTEGER: The command replied with an integer. The integer value can be accessed using the reply->integer field of type long long. REDIS_REPLY_NIL: The command replied with a nil object. There is no data to access. REDIS_REPLY_STRING: A bulk (string) reply. The value of the reply can be accessed using reply->str. The length of this string can be accessed using reply->len. REDIS_REPLY_ARRAY: A multi bulk reply. The number of elements in the multi bulk reply is stored in reply->elements. Every element in the multi bulk reply is a redisReply object as well and can be accessed via reply->element[..index..]. Redis may reply with nested arrays but this is fully supported. Replies should be freed using the freeReplyObject() function. Note that this function will take care of freeing sub-reply objects contained in arrays and nested arrays, so there is no need for the user to free the sub replies (it is actually harmful and will corrupt the memory). Important: the current version of hiredis (0.10.0) frees replies when the asynchronous API is used. This means you should not call freeReplyObject when you use this API. The reply is cleaned up by hiredis after the callback returns. This behavior will probably change in future releases, so make sure to keep an eye on the changelog when upgrading (see issue #39). Cleaning up To disconnect and free the context the following function can be used: void redisFree(redisContext *c); This function immediately closes the socket and then frees the allocations done in creating the context. Sending commands (cont'd) Together with redisCommand, the function redisCommandArgv can be used to issue commands. It has the following prototype: void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen); It takes the number of arguments argc, an array of strings argv and the lengths of the arguments argvlen. For convenience, argvlen may be set to NULL and the function will use strlen(3) on every argument to determine its length. Obviously, when any of the arguments need to be binary safe, the entire array of lengths argvlen should be provided. The return value has the same semantic as redisCommand. Pipelining To explain how Hiredis supports pipelining in a blocking connection, there needs to be understanding of the internal execution flow. When any of the functions in the redisCommand family is called, Hiredis first formats the command according to the Redis protocol. The formatted command is then put in the output buffer of the context. This output buffer is dynamic, so it can hold any number of commands. After the command is put in the output buffer, redisGetReply is called. This function has the following two execution paths: The input buffer is non-empty: Try to parse a single reply from the input buffer and return it If no reply could be parsed, continue at 2 The input buffer is empty: Write the entire output buffer to the socket Read from the socket until a single reply could be parsed The function redisGetReply is exported as part of the Hiredis API and can be used when a reply is expected on the socket. To pipeline commands, the only things that needs to be done is filling up the output buffer. For this cause, two commands can be used that are identical to the redisCommand family, apart from not returning a reply: void redisAppendCommand(redisContext *c, const char *format, ...); void redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen); After calling either function one or more times, redisGetReply can be used to receive the subsequent replies. The return value for this function is either REDIS_OK or REDIS_ERR, where the latter means an error occurred while reading a reply. Just as with the other commands, the err field in the context can be used to find out what the cause of this error is. The following examples shows a simple pipeline (resulting in only a single call to write(2) and a single call to read(2)): redisReply *reply; redisAppendCommand(context,""SET foo bar""); redisAppendCommand(context,""GET foo""); redisGetReply(context,&reply); // reply for SET freeReplyObject(reply); redisGetReply(context,&reply); // reply for GET freeReplyObject(reply); This API can also be used to implement a blocking subscriber: reply = redisCommand(context,""SUBSCRIBE foo""); freeReplyObject(reply); while(redisGetReply(context,&reply) == REDIS_OK) {     // consume message     freeReplyObject(reply); } Errors When a function call is not successful, depending on the function either NULL or REDIS_ERR is returned. The err field inside the context will be non-zero and set to one of the following constants: REDIS_ERR_IO: There was an I/O error while creating the connection, trying to write to the socket or read from the socket. If you included errno.h in your application, you can use the global errno variable to find out what is wrong. REDIS_ERR_EOF: The server closed the connection which resulted in an empty read. REDIS_ERR_PROTOCOL: There was an error while parsing the protocol. REDIS_ERR_OTHER: Any other error. Currently, it is only used when a specified hostname to connect to cannot be resolved. In every case, the errstr field in the context will be set to hold a string representation of the error. Asynchronous API Hiredis comes with an asynchronous API that works easily with any event library. Examples are bundled that show using Hiredis with libev and libevent. Connecting The function redisAsyncConnect can be used to establish a non-blocking connection to Redis. It returns a pointer to the newly created redisAsyncContext struct. The err field should be checked after creation to see if there were errors creating the connection. Because the connection that will be created is non-blocking, the kernel is not able to instantly return if the specified host and port is able to accept a connection. Note: A redisAsyncContext is not thread-safe. redisAsyncContext *c = redisAsyncConnect(""127.0.0.1"", 6379); if (c->err) {     printf(""Error: %s\n"", c->errstr);     // handle error } The asynchronous context can hold a disconnect callback function that is called when the connection is disconnected (either because of an error or per user request). This function should have the following prototype: void(const redisAsyncContext *c, int status); On a disconnect, the status argument is set to REDIS_OK when disconnection was initiated by the user, or REDIS_ERR when the disconnection was caused by an error. When it is REDIS_ERR, the err field in the context can be accessed to find out the cause of the error. The context object is always freed after the disconnect callback fired. When a reconnect is needed, the disconnect callback is a good point to do so. Setting the disconnect callback can only be done once per context. For subsequent calls it will return REDIS_ERR. The function to set the disconnect callback has the following prototype: int redisAsyncSetDisconnectCallback(redisAsyncContext *ac, redisDisconnectCallback *fn); Sending commands and their callbacks In an asynchronous context, commands are automatically pipelined due to the nature of an event loop. Therefore, unlike the synchronous API, there is only a single way to send commands. Because commands are sent to Redis asynchronously, issuing a command requires a callback function that is called when the reply is received. Reply callbacks should have the following prototype: void(redisAsyncContext *c, void *reply, void *privdata); The privdata argument can be used to curry arbitrary data to the callback from the point where the command is initially queued for execution. The functions that can be used to issue commands in an asynchronous context are: int redisAsyncCommand(   redisAsyncContext *ac, redisCallbackFn *fn, void *privdata,   const char *format, ...); int redisAsyncCommandArgv(   redisAsyncContext *ac, redisCallbackFn *fn, void *privdata,   int argc, const char **argv, const size_t *argvlen); Both functions work like their blocking counterparts. The return value is REDIS_OK when the command was successfully added to the output buffer and REDIS_ERR otherwise. Example: when the connection is being disconnected per user-request, no new commands may be added to the output buffer and REDIS_ERR is returned on calls to the redisAsyncCommand family. If the reply for a command with a NULL callback is read, it is immediately freed. When the callback for a command is non-NULL, the memory is freed immediately following the callback: the reply is only valid for the duration of the callback. All pending callbacks are called with a NULL reply when the context encountered an error. Disconnecting An asynchronous connection can be terminated using: void redisAsyncDisconnect(redisAsyncContext *ac); When this function is called, the connection is not immediately terminated. Instead, new commands are no longer accepted and the connection is only terminated when all pending commands have been written to the socket, their respective replies have been read and their respective callbacks have been executed. After this, the disconnection callback is executed with the REDIS_OK status and the context object is freed. Hooking it up to event library X There are a few hooks that need to be set on the context object after it is created. See the adapters/ directory for bindings to libev and libevent. Reply parsing API Hiredis comes with a reply parsing API that makes it easy for writing higher level language bindings. The reply parsing API consists of the following functions: redisReader *redisReaderCreate(void); void redisReaderFree(redisReader *reader); int redisReaderFeed(redisReader *reader, const char *buf, size_t len); int redisReaderGetReply(redisReader *reader, void **reply); The same set of functions are used internally by hiredis when creating a normal Redis context, the above API just exposes it to the user for a direct usage. Usage The function redisReaderCreate creates a redisReader structure that holds a buffer with unparsed data and state for the protocol parser. Incoming data -- most likely from a socket -- can be placed in the internal buffer of the redisReader using redisReaderFeed. This function will make a copy of the buffer pointed to by buf for len bytes. This data is parsed when redisReaderGetReply is called. This function returns an integer status and a reply object (as described above) via void **reply. The returned status can be either REDIS_OK or REDIS_ERR, where the latter means something went wrong (either a protocol error, or an out of memory error). The parser limits the level of nesting for multi bulk payloads to 7. If the multi bulk nesting level is higher than this, the parser returns an error. Customizing replies The function redisReaderGetReply creates redisReply and makes the function argument reply point to the created redisReply variable. For instance, if the response of type REDIS_REPLY_STATUS then the str field of redisReply will hold the status as a vanilla C string. However, the functions that are responsible for creating instances of the redisReply can be customized by setting the fn field on the redisReader struct. This should be done immediately after creating the redisReader. For example, hiredis-rb uses customized reply object functions to create Ruby objects. Reader max buffer Both when using the Reader API directly or when using it indirectly via a normal Redis context, the redisReader structure uses a buffer in order to accumulate data from the server. Usually this buffer is destroyed when it is empty and is larger than 16 KiB in order to avoid wasting memory in unused buffers However when working with very big payloads destroying the buffer may slow down performances considerably, so it is possible to modify the max size of an idle buffer changing the value of the maxbuf field of the reader structure to the desired value. The special value of 0 means that there is no maximum value for an idle buffer, so the buffer will never get freed. For instance if you have a normal Redis context you can set the maximum idle buffer to zero (unlimited) just with: context->reader->maxbuf = 0; This should be done only in order to maximize performances when working with large payloads. The context should be set back to REDIS_READER_MAX_BUF again as soon as possible in order to prevent allocation of useless memory. AUTHORS Hiredis was written by Salvatore Sanfilippo (antirez at gmail) and Pieter Noordhuis (pcnoordhuis at gmail) and is released under the BSD license. Hiredis is currently maintained by Matt Stancliff (matt at genges dot com) and Jan-Erik Rediger (janerik at fnordig dot com) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/redis/hiredis"	"A minimalistic C client library for the Redis database. [BSD]"	"true"
"Database"	"LevelDB"	"https://github.com/google/leveldb"	"A fast key-value storage library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6346"	"650"	"1575"	"GitHub - google/leveldb: LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 650 Star 6,346 Fork 1,575 google/leveldb Code Issues 72 Pull requests 33 Pulse Graphs LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. 125 commits 4 branches 16 releases 13 contributors C++ 93.8% C 3.2% Makefile 2.0% Shell 1.0% C++ C Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags android master reuse-manifest windows Nothing to show v1.18 v1.17 v1.16 v1.15 v1.14 v1.13 v1.12 v1.11 v1.10 v1.9 v1.8 v1.7 v1.6 v1.5 v1.4 v1.3 Nothing to show New pull request Latest commit fa6dc01 May 27, 2016 sanjay committed with cmumford A zippy change broke test assumptions about the size of compressed ou… … …tput.  Fix the tests by allowing more slop in zippy's behavior. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=123432472 Permalink Failed to load latest commit information. db Change std::uint64_t to uint64_t (#354) Apr 12, 2016 doc include <assert> -> <cassert> Dec 9, 2015 helpers/memenv LevelDB now attempts to reuse the preceding MANIFEST and log file whe… Aug 11, 2015 include/leveldb Add ""approximate-memory-usage"" property to leveldb::DB::GetProperty Dec 9, 2015 issues Release LevelDB 1.14 Sep 19, 2013 port Merge pull request #272 from vapier/master Jan 12, 2016 table A zippy change broke test assumptions about the size of compressed ou… Jul 6, 2016 util fix problems in LevelDB's caching code Jul 6, 2016 .gitignore Release leveldb 1.10 May 14, 2013 .travis.yml Added a Travis CI build file. Jan 14, 2016 AUTHORS Release LevelDB 1.14 Sep 19, 2013 CONTRIBUTING.md Release 1.18 Sep 16, 2014 LICENSE reverting disastrous MOE commit, returning to r21 Apr 19, 2011 Makefile Putting build artifacts in subdirectory. Jan 29, 2016 NEWS sync with upstream @ 21409451 May 21, 2011 README.md add travis build badge Jan 15, 2016 TODO Update to leveldb 1.6 Oct 12, 2012 build_detect_platform Putting build artifacts in subdirectory. Jan 30, 2016 README.md LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. Authors: Sanjay Ghemawat (sanjay@google.com) and Jeff Dean (jeff@google.com) Features Keys and values are arbitrary byte arrays. Data is stored sorted by key. Callers can provide a custom comparison function to override the sort order. The basic operations are Put(key,value), Get(key), Delete(key). Multiple changes can be made in one atomic batch. Users can create a transient snapshot to get a consistent view of data. Forward and backward iteration is supported over the data. Data is automatically compressed using the Snappy compression library. External activity (file system operations etc.) is relayed through a virtual interface so users can customize the operating system interactions. Documentation LevelDB library documentation is online and bundled with the source code. Limitations This is not a SQL database. It does not have a relational data model, it does not support SQL queries, and it has no support for indexes. Only a single process (possibly multi-threaded) can access a particular database at a time. There is no client-server support builtin to the library. An application that needs such support will have to wrap their own server around the library. Contributing to the leveldb Project The leveldb project welcomes contributions. leveldb's primary goal is to be a reliable and fast key/value store. Changes that are in line with the features/limitations outlined above, and meet the requirements below, will be considered. Contribution requirements: POSIX only. We generally will only accept changes that are both compiled, and tested on a POSIX platform - usually Linux. Very small changes will sometimes be accepted, but consider that more of an exception than the rule. Stable API. We strive very hard to maintain a stable API. Changes that require changes for projects using leveldb might be rejected without sufficient benefit to the project. Tests: All changes must be accompanied by a new (or changed) test, or a sufficient explanation as to why a new (or changed) test is not required. Submitting a Pull Request Before any pull request will be accepted the author must first sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/. In order to keep the commit timeline linear squash your changes down to a single commit and rebase on google/leveldb/master. This keeps the commit timeline linear and more easily sync'ed with the internal repository at Google. More information at GitHub's About Git rebase page. Performance Here is a performance report (with explanations) from the run of the included db_bench program. The results are somewhat noisy, but should be enough to get a ballpark performance estimate. Setup We use a database with a million entries. Each entry has a 16 byte key, and a 100 byte value. Values used by the benchmark compress to about half their original size. LevelDB:    version 1.1 Date:       Sun May  1 12:11:26 2011 CPU:        4 x Intel(R) Core(TM)2 Quad CPU    Q6600  @ 2.40GHz CPUCache:   4096 KB Keys:       16 bytes each Values:     100 bytes each (50 bytes after compression) Entries:    1000000 Raw Size:   110.6 MB (estimated) File Size:  62.9 MB (estimated)  Write performance The ""fill"" benchmarks create a brand new database, in either sequential, or random order. The ""fillsync"" benchmark flushes data from the operating system to the disk after every operation; the other write operations leave the data sitting in the operating system buffer cache for a while. The ""overwrite"" benchmark does random writes that update existing keys in the database. fillseq      :       1.765 micros/op;   62.7 MB/s fillsync     :     268.409 micros/op;    0.4 MB/s (10000 ops) fillrandom   :       2.460 micros/op;   45.0 MB/s overwrite    :       2.380 micros/op;   46.5 MB/s  Each ""op"" above corresponds to a write of a single key/value pair. I.e., a random write benchmark goes at approximately 400,000 writes per second. Each ""fillsync"" operation costs much less (0.3 millisecond) than a disk seek (typically 10 milliseconds). We suspect that this is because the hard disk itself is buffering the update in its memory and responding before the data has been written to the platter. This may or may not be safe based on whether or not the hard disk has enough power to save its memory in the event of a power failure. Read performance We list the performance of reading sequentially in both the forward and reverse direction, and also the performance of a random lookup. Note that the database created by the benchmark is quite small. Therefore the report characterizes the performance of leveldb when the working set fits in memory. The cost of reading a piece of data that is not present in the operating system buffer cache will be dominated by the one or two disk seeks needed to fetch the data from disk. Write performance will be mostly unaffected by whether or not the working set fits in memory. readrandom   :      16.677 micros/op;  (approximately 60,000 reads per second) readseq      :       0.476 micros/op;  232.3 MB/s readreverse  :       0.724 micros/op;  152.9 MB/s  LevelDB compacts its underlying storage data in the background to improve read performance. The results listed above were done immediately after a lot of random writes. The results after compactions (which are usually triggered automatically) are better. readrandom   :      11.602 micros/op;  (approximately 85,000 reads per second) readseq      :       0.423 micros/op;  261.8 MB/s readreverse  :       0.663 micros/op;  166.9 MB/s  Some of the high cost of reads comes from repeated decompression of blocks read from disk. If we supply enough cache to the leveldb so it can hold the uncompressed blocks in memory, the read performance improves again: readrandom   :       9.775 micros/op;  (approximately 100,000 reads per second before compaction) readrandom   :       5.215 micros/op;  (approximately 190,000 reads per second after compaction)  Repository contents See doc/index.html for more explanation. See doc/impl.html for a brief overview of the implementation. The public interface is in include/*.h. Callers should not include or rely on the details of any other header files in this package. Those internal APIs may be changed without warning. Guide to header files: include/db.h: Main interface to the DB: Start here include/options.h: Control over the behavior of an entire database, and also control over the behavior of individual reads and writes. include/comparator.h: Abstraction for user-specified comparison function. If you want just bytewise comparison of keys, you can use the default comparator, but clients can write their own comparator implementations if they want custom ordering (e.g. to handle different character encodings, etc.) include/iterator.h: Interface for iterating over data. You can get an iterator from a DB object. include/write_batch.h: Interface for atomically applying multiple updates to a database. include/slice.h: A simple module for maintaining a pointer and a length into some other byte array. include/status.h: Status is returned from many of the public interfaces and is used to report success and various kinds of errors. include/env.h: Abstraction of the OS environment. A posix implementation of this interface is in util/env_posix.cc include/table.h, include/table_builder.h: Lower-level modules that most clients probably won't use directly Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/leveldb"	"A fast key-value storage library. [BSD]"	"true"
"Database"	"LMDB"	"http://symas.com/mdb/"	"Very fast embedded key/value store with full ACID semantics. [OpenLDAP]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Symas Lightning Memory-mapped Database | Enterprise Directory SoftwareEnterprise Directory Software Home Products Symas Enforcement Foundry Symas OpenLDAP Directory Symas Lightning Memory-mapped Database Symas Subscriptions Services Support Programs Professional Services Training Resources Downloads Knowledge Base Technical Support About Team News Blog Careers Contact Symas Lightning Memory-mapped Database Products Symas Enforcement Foundry Symas Lightning Memory-mapped Database Symas OpenLDAP Directory Symas Subscriptions Symas Lightning Memory-mapped Database An ultra-fast, ultra-compact, crash-proof key-value embedded data store. LMDB is an extraordinarily fast, memory-efficient database developed by Symas for the OpenLDAP Project. With memory-mapped files, it has the read performance of a pure in-memory database while retaining the persistence of standard disk-based databases. In other words, it runs like a bat out of hell, performing several times faster than other DB engines — several orders of magnitude faster in many cases. No buffers or caches needed, no memory copies generated. And it’s only limited to the size of the virtual address space, not to the size of physical RAM. Bottom line, with only 32KB of object code, LMDB may seem tiny. But it’s the right 32KB. Compact and efficient are two sides of a coin; that’s part of what makes LMDB so powerful. The features at a glance: Ordered-map interface (keys are always sorted; range lookups are supported) Fully-transactional, full ACID semantics with MVCC Reader/writer transactions (readers don’t block writers; writers don’t block readers) Fully serialized writers (writes are always deadlock-free) Extremely cheap read transactions, which can be performed using no mallocs or any other blocking calls Multi-thread and multi-process concurrency supported; environments may be opened by multiple processes on the same host Multiple sub-databases may be created with transactions covering all sub-databases Memory-mapped, allowing for zero-copy lookup and iteration Maintenance-free (no external process or background cleanup or compaction required) Crash-proof (no logs or crash recovery procedures required) No application-level caching (LMDB fully exploits the operating system’s buffer cache) 32KB of object code and 6KLOC of C Licensed under the OpenLDAP Public License Learn More How Does it Compare to Other Key Value Stores? Where Can I Find Support and Documentation? Where Can I Read the Published Reports? Where Can I See the Project Benchmarks? In What Other Projects is it Available? Are there LMDB Wrappers for Other Languages? Recent Blog Posts Introducing a Security Access Control Engine Inside OpenLDAP Understanding LMDB Database File Sizes and Memory Utilization ApacheDS & Fortress QUICKSTART Apache Fortress 1.0-RC42 Released Recent News Tollgrade Smart Grid EMS LightHouse Vulnerabilities | ICS-CERT https://ics-cert.us-cert.gov/advisories/ICSA-16-194-01 2 days ago GE Proficy HMI SCADA CIMPLICITY Privilege Management Vulnerability | ICS-CERT https://ics-cert.us-cert.gov/advisories/ICSA-16-194-02 2 days ago Find us on Facebook Follow Us on Twitter https://t.co/I4ZFchuPBh https://t.co/ejyvyhLiKr 2 days ago - symascorp https://t.co/Y74jPbsK6D https://t.co/8K4oSPIyPo 2 days ago - symascorp Search Our Site Copyright © 2001–2016, Symas Corporation. All rights reserved. Privacy Statement"	"null"	"null"	"Very fast embedded key/value store with full ACID semantics. [OpenLDAP]"	"true"
"Database"	"LMDB++"	"https://github.com/bendiken/lmdbxx"	"C++11 wrapper for the LMDB embedded database library. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"67"	"10"	"19"	"GitHub - bendiken/lmdbxx: C++11 wrapper for the LMDB embedded B+ tree database library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 67 Fork 19 bendiken/lmdbxx Code Issues 5 Pull requests 4 Pulse Graphs C++11 wrapper for the LMDB embedded B+ tree database library. http://lmdbxx.sourceforge.net 167 commits 2 branches 1 release 2 contributors C++ 91.5% Makefile 4.2% Tcl 2.2% Shell 2.1% C++ Makefile Tcl Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coverity master Nothing to show 0.9.14.0 Nothing to show New pull request Latest commit 0b43ca8 Feb 29, 2016 bendiken Merge branch 'master' of github.com:bendiken/lmdbxx Permalink Failed to load latest commit information. etc Corrected the Fink package files per reviewer feedback. May 10, 2015 .gitignore Added tasks for creating distributables. Apr 22, 2015 .travis.yml Integrated with Coverity Scan. Apr 22, 2015 AUTHORS Created the project. Apr 7, 2015 CREDITS Added kudos. Apr 21, 2015 Doxyfile Added a task for building the Doxygen output. Apr 22, 2015 INSTALL Added basic installation instructions. Apr 22, 2015 Makefile Ensured that `make clean` removes distributables. Apr 22, 2015 README Created the project. Apr 7, 2015 README.rst Improved lmdb::dbi_get() const-correctness. Aug 17, 2015 TODO Created the project. Apr 7, 2015 UNLICENSE Created the project. Apr 7, 2015 VERSION Bumped the version to 0.9.14.1. Apr 22, 2015 check.cc Added a top-level exception handler. Apr 22, 2015 example.cc Ensured that all examples include a #set_mapsize() call. Aug 11, 2015 lmdb++.h Merge branch 'master' of github.com:bendiken/lmdbxx Feb 29, 2016 README.rst lmdb++: a C++11 wrapper for LMDB This is a comprehensive C++ wrapper for the LMDB embedded database library, offering both an error-checked procedural interface and an object-oriented resource interface with RAII semantics. Example Here follows a simple motivating example demonstrating basic use of the object-oriented resource interface: #include <cstdio> #include <cstdlib> #include <lmdb++.h>  int main() {   /* Create and open the LMDB environment: */   auto env = lmdb::env::create();   env.set_mapsize(1UL * 1024UL * 1024UL * 1024UL); /* 1 GiB */   env.open(""./example.mdb"", 0, 0664);    /* Insert some key/value pairs in a write transaction: */   auto wtxn = lmdb::txn::begin(env);   auto dbi = lmdb::dbi::open(wtxn, nullptr);   dbi.put(wtxn, ""username"", ""jhacker"");   dbi.put(wtxn, ""email"", ""jhacker@example.org"");   dbi.put(wtxn, ""fullname"", ""J. Random Hacker"");   wtxn.commit();    /* Fetch key/value pairs in a read-only transaction: */   auto rtxn = lmdb::txn::begin(env, nullptr, MDB_RDONLY);   auto cursor = lmdb::cursor::open(rtxn, dbi);   std::string key, value;   while (cursor.get(key, value, MDB_NEXT)) {     std::printf(""key: '%s', value: '%s'\n"", key.c_str(), value.c_str());   }   cursor.close();   rtxn.abort();    /* The enviroment is closed automatically. */    return EXIT_SUCCESS; }  Should any operation in the above fail, an lmdb::error exception will be thrown and terminate the program since we don't specify an exception handler. All resources will regardless get automatically cleaned up due to RAII semantics. Note In order to run this example, you must first manually create the ./example.mdb directory. This is a basic characteristic of LMDB: the given environment path must already exist, as LMDB will not attempt to automatically create it. Features Designed to be entirely self-contained as a single <lmdb++.h> header file that can be dropped into a project. Implements a straightforward mapping from C to C++, with consistent naming. Provides both a procedural interface and an object-oriented RAII interface. Simplifies error handling by translating error codes into C++ exceptions. Carefully differentiates logic errors, runtime errors, and fatal errors. Exception strings include the name of the LMDB function that failed. Plays nice with others: all symbols are placed into the lmdb namespace. 100% free and unencumbered public domain software, usable in any context and for any purpose. Requirements The <lmdb++.h> header file requires a C++11 compiler and standard library. Recent releases of Clang or GCC will work fine. In addition, for your application to build and run, the underlying <lmdb.h> header file shipped with LMDB must be available in the preprocessor's include path, and you must link with the liblmdb native library. On Ubuntu Linux 14.04 and newer, these prerequisites can be satisfied by installing the liblmdb-dev package. Overview This wrapper offers both an error-checked procedural interface and an object-oriented resource interface with RAII semantics. The former will be useful for easily retrofitting existing projects that currently use the raw C interface, but we recommend the latter for all new projects due to the exception safety afforded by RAII semantics. Resource Interface The high-level resource interface wraps LMDB handles in a loving RAII embrace. This way, you can ensure e.g. that a transaction will get automatically aborted when exiting a lexical scope, regardless of whether the escape happened normally or by throwing an exception. C handle C++ wrapper class MDB_env* lmdb::env MDB_txn* lmdb::txn MDB_dbi lmdb::dbi MDB_cursor* lmdb::cursor MDB_val lmdb::val The methods available on these C++ classes are named consistently with the procedural interface, below, with the obvious difference of omitting the handle type prefix which is already implied by the class in question. Procedural Interface The low-level procedural interface wraps LMDB functions with error-checking code that will throw an instance of a corresponding C++ exception class in case of failure. This interface doesn't offer any convenience overloads as does the resource interface; the parameter types are exactly the same as for the raw C interface offered by LMDB itself. The return type is generally void for these functions since the wrapper eats the error code returned by the underlying C function, throwing an exception in case of failure and otherwise returning values in the same output parameters as the C interface. This interface is implemented entirely using static inline functions, so there are no hidden extra costs to using these wrapper functions so long as you have a decent compiler capable of basic inlining optimization. C function C++ wrapper function mdb_version() N/A mdb_strerror() N/A mdb_env_create() lmdb::env_create() mdb_env_open() lmdb::env_open() mdb_env_copy() lmdb::env_copy() [1] mdb_env_copyfd() lmdb::env_copy_fd() [1] mdb_env_copy2() lmdb::env_copy() [1] mdb_env_copyfd2() lmdb::env_copy_fd() [1] mdb_env_stat() lmdb::env_stat() mdb_env_info() lmdb::env_info() mdb_env_sync() lmdb::env_sync() mdb_env_close() lmdb::env_close() mdb_env_set_flags() lmdb::env_set_flags() mdb_env_get_flags() lmdb::env_get_flags() mdb_env_get_path() lmdb::env_get_path() mdb_env_get_fd() lmdb::env_get_fd() mdb_env_set_mapsize() lmdb::env_set_mapsize() mdb_env_set_maxreaders() lmdb::env_set_max_readers() mdb_env_get_maxreaders() lmdb::env_get_max_readers() mdb_env_set_maxdbs() lmdb::env_set_max_dbs() mdb_env_get_maxkeysize() lmdb::env_get_max_keysize() mdb_env_set_userctx() lmdb::env_set_userctx() [2] mdb_env_get_userctx() lmdb::env_get_userctx() [2] mdb_env_set_assert() N/A mdb_txn_begin() lmdb::txn_begin() mdb_txn_env() lmdb::txn_env() mdb_txn_id() lmdb::txn_id() [3] mdb_txn_commit() lmdb::txn_commit() mdb_txn_abort() lmdb::txn_abort() mdb_txn_reset() lmdb::txn_reset() mdb_txn_renew() lmdb::txn_renew() mdb_dbi_open() lmdb::dbi_open() mdb_stat() lmdb::dbi_stat() [4]_ mdb_dbi_flags() lmdb::dbi_flags() mdb_dbi_close() lmdb::dbi_close() mdb_drop() lmdb::dbi_drop() [4]_ mdb_set_compare() lmdb::dbi_set_compare() [4]_ mdb_set_dupsort() lmdb::dbi_set_dupsort() [4]_ mdb_set_relfunc() lmdb::dbi_set_relfunc() [4]_ mdb_set_relctx() lmdb::dbi_set_relctx() [4]_ mdb_get() lmdb::dbi_get() [4]_ mdb_put() lmdb::dbi_put() [4]_ mdb_del() lmdb::dbi_del() [4]_ mdb_cursor_open() lmdb::cursor_open() mdb_cursor_close() lmdb::cursor_close() mdb_cursor_renew() lmdb::cursor_renew() mdb_cursor_txn() lmdb::cursor_txn() mdb_cursor_dbi() lmdb::cursor_dbi() mdb_cursor_get() lmdb::cursor_get() mdb_cursor_put() lmdb::cursor_put() mdb_cursor_del() lmdb::cursor_del() mdb_cursor_count() lmdb::cursor_count() mdb_cmp() N/A mdb_dcmp() N/A mdb_reader_list() TODO mdb_reader_check() TODO Footnotes [1] (1, 2, 3, 4) Three-parameter signature available since LMDB 0.9.14 (2014/09/20). [2] (1, 2) Only available since LMDB 0.9.11 (2014/01/15). [3] Only available in LMDB HEAD, not yet in any 0.9.x release (as of 0.9.16). Define the LMDBXX_TXN_ID preprocessor symbol to unhide this. [4] Note the difference in naming. (See below.) Caveats The C++ procedural interface is more strictly and consistently grouped by handle type than is the LMDB native interface. For instance, mdb_put() is wrapped as the C++ function lmdb::dbi_put(), not lmdb::put(). These differences--a handful in number--all concern operations on database handles. The C++ interface takes some care to be const-correct for input-only parameters, something the original C interface largely ignores. Hence occasional use of const_cast in the wrapper code base. lmdb::dbi_put() does not throw an exception if LMDB returns the MDB_KEYEXIST error code; it instead just returns false. This is intended to simplify common usage patterns. lmdb::dbi_get(), lmdb::dbi_del(), and lmdb::cursor_get() do not throw an exception if LMDB returns the MDB_NOTFOUND error code; they instead just return false. This is intended to simplify common usage patterns. lmdb::env_get_max_keysize() returns an unsigned integer, instead of a signed integer as the underlying mdb_env_get_maxkeysize() function does. This conversion is done since the return value cannot in fact be negative. Error Handling This wrapper draws a careful distinction between three different classes of possible LMDB error conditions: Logic errors, represented by lmdb::logic_error. Errors of this class are thrown due to programming errors where the function interfaces are used in violation of documented preconditions. A common strategy for handling this class of error conditions is to abort the program with a core dump, facilitating introspection to locate and remedy the bug. Fatal errors, represented by lmdb::fatal_error. Errors of this class are thrown due to the exhaustion of critical system resources, in particular available memory (ENOMEM), or due to attempts to exceed applicable system resource limits. A typical strategy for handling this class of error conditions is to terminate the program with a descriptive error message. More robust programs and shared libraries may wish to implement another strategy, such as retrying the operation after first letting most of the call stack unwind in order to free up scarce resources. Runtime errors, represented by lmdb::runtime_error. Errors of this class are thrown as a matter of course to indicate various exceptional conditions. These conditions are generally recoverable, and robust programs will take care to correctly handle them. Note The distinction between logic errors and runtime errors mirrors that found in the C++11 standard library, where the <stdexcept> header defines the standard exception base classes std::logic_error and std::runtime_error. The standard exception class std::bad_alloc, on the other hand, is a representative example of a fatal error. Error code Exception class Exception type MDB_KEYEXIST lmdb::key_exist_error runtime MDB_NOTFOUND lmdb::not_found_error runtime MDB_CORRUPTED lmdb::corrupted_error fatal MDB_PANIC lmdb::panic_error fatal MDB_VERSION_MISMATCH lmdb::version_mismatch_error fatal MDB_MAP_FULL lmdb::map_full_error runtime MDB_BAD_DBI lmdb::bad_dbi_error runtime [4]_ (others) lmdb::runtime_error runtime Footnotes [4] Available since LMDB 0.9.14 (2014/09/20). Note MDB_KEYEXIST and MDB_NOTFOUND are handled specially by some functions. Versioning Policy The lmdb++ version tracks the upstream LMDB release (x.y.z) that it is compatible with, and appends a sub-patch-level version (x.y.z.N) to indicate changes to the wrapper itself. For example, an lmdb++ release of 0.9.14.2 would indicate that it is designed for compatibility with LMDB 0.9.14, and is the third wrapper release (the first being .0, and the second .1) for that upstream target. Note To the extent that LMDB will preserve API and ABI compatibility going forward, older versions of the wrapper should work with newer versions of LMDB; and newer versions of the wrapper will generally work with older versions of LMDB by using the preprocessor to conditionalize the visibility of newer symbols--see, for example, the preprocessor guards around the definition of lmdb::env_set_userctx(). Installation lmdb++ is currently available as a package/port in the following operating system distributions and package management systems: Distribution Package Name Installation Hint Arch Linux AUR liblmdb++ yaourt -Sa liblmdb++ Fink [5] lmdb++ sudo fink install lmdb++ MacPorts lmdbxx sudo port install lmdbxx Portage [6] lmdb++ sudo emerge --ask lmdb++ Footnotes [5] Still pending review. [6] Compatible with Gentoo Linux, Funtoo Linux, and Sabayon Linux. Support To report a bug or submit a patch for lmdb++, please file an issue in the issue tracker on GitHub. Questions and discussions about LMDB itself should be directed to the OpenLDAP mailing lists. Elsewhere Find this project at: GitHub, Bitbucket, Open Hub, SourceForge, Travis CI, and Coverity Scan. The API documentation is published at: http://lmdbxx.sourceforge.net/ Author Arto Bendiken - http://ar.to/ License This is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying UNLICENSE file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bendiken/lmdbxx"	"C++11 wrapper for the LMDB embedded database library. [PublicDomain]"	"true"
"Database"	"MongoDB C Driver"	"https://github.com/mongodb/mongo-c-driver"	"MongoDB client library for C. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"248"	"72"	"165"	"GitHub - mongodb/mongo-c-driver: A high-performance MongoDB driver for C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 248 Fork 165 mongodb/mongo-c-driver Code Pull requests 0 Pulse Graphs A high-performance MongoDB driver for C 3,421 commits 15 branches 51 releases 44 contributors C 93.7% M4 3.1% CMake 1.0% C++ 0.9% Makefile 0.7% Python 0.5% Other 0.1% C M4 CMake C++ Makefile Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.2.0-dev 1.3.0-dev CDRIVER-520 CDRIVER-721-crash-unavail-rs debian glib legacy master mci r1.2 r1.3 refcount sdam socket-debug socket Nothing to show v0.8.1 v0.8 v0.7.1 v0.7 v0.6 v0.5.2 v0.5.1 v0.5 v0.4 v0.3.1 v0.3 v0.2 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.3.0-rc0 1.3.0-beta0 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.2.0-rc0 1.2.0-beta1 1.2.0-beta 1.1.11 1.1.10 1.1.9 1.1.8 1.1.7 1.1.6 1.1.5 1.1.4 1.1.2 1.1.0 1.1.0-rc0 1.0.2 1.0.0 0.98.2 0.98.0 0.96.4 0.96.2 0.96.0 0.94.2 0.94.0 0.92.2 0.92.0 0.90.0 Nothing to show New pull request Latest commit 4f8f007 Jul 15, 2016 ajdavis committed on GitHub Merge pull request #348 from derickr/generated-files-in-gitignore … Add generated file to .gitignore Permalink Failed to load latest commit information. build CDRIVER-1155: Use OpenSSL to verify the certificate hostname Jul 14, 2016 doc CDRIVER-1363 maxStalenessMS URI option Jul 8, 2016 examples Merge pull request #337 from puppyofkosh/CDRIVER-1201 Jun 17, 2016 orchestration_configs CDRIVER-1307: Enforce client certificate in evergreen May 26, 2016 src CDRIVER-1380: Don't verify certificate hostname for UDS Jul 14, 2016 tests CDRIVER-1155: Use OpenSSL to verify the certificate hostname Jul 14, 2016 .gitattributes CDRIVER-929 line-endings in test data files Oct 19, 2015 .gitignore Add generated files to .gitignore Jul 15, 2016 .gitmodules Ignore stray files/changes in submodules Oct 6, 2015 .mci.yml CDRIVER-1108: Windows + OpenSSL Build variant in Evergreen Jul 14, 2016 CMakeLists.txt CDRIVER-1182: Import CAs from the Windows Cert store to OpenSSL Jul 14, 2016 CONTRIBUTING.md CDRIVER-1337 disable experimental features by default Jul 13, 2016 COPYING doc: drop appendix from license. Mar 13, 2014 Makefile.am CDRIVER-1217 remove spec files May 2, 2016 NEWS CDRIVER-1104 remove MONGOC_I_AM_A_DRIVER and libmongoc-priv May 16, 2016 README.rst updated readme to include build from git instructions for windows and… Jul 6, 2016 VERSION_CURRENT post-release bump Mar 11, 2016 VERSION_RELEASED merge r1.3 branch May 7, 2016 autogen.sh CDRIVER-1080: Warn when downloading non-releases from Github Apr 14, 2016 configure.ac CDRIVER-1104 remove MONGOC_I_AM_A_DRIVER and libmongoc-priv May 16, 2016 valgrind.suppressions CDRIVER-884: Ignore ""still reachable"" messages from sasl Sep 28, 2015 README.rst mongo-c-driver About mongo-c-driver is a client library written in C for MongoDB. mongo-c-driver depends on Libbson. Libbson will automatically be built if you do not have it installed on your system. Documentation / Support / Feedback The documentation is available at http://api.mongodb.org/c/current/. For issues with, questions about, or feedback for libmongoc, please look into our support channels. Please do not email any of the libmongoc developers directly with issues or questions - you're more likely to get an answer on the mongodb-user list on Google Groups. Bugs / Feature Requests Think you’ve found a bug? Want to see a new feature in libmongoc? Please open a case in our issue management tool, JIRA: Create an account and login. Navigate to the CDRIVER project. Click Create Issue - Please provide as much information as possible about the issue type and how to reproduce it. Bug reports in JIRA for all driver projects (i.e. CDRIVER, CSHARP, JAVA) and the Core Server (i.e. SERVER) project are public. How To Ask For Help If you are having difficulty building the driver after reading the below instructions, please email the mongodb-user list to ask for help. Please include in your email all of the following information: The version of the driver you are trying to build (branch or tag). Examples: master branch, 1.2.1 tag Host OS, version, and architecture. Examples: Windows 8 64-bit x86, Ubuntu 12.04 32-bit x86, OS X Mavericks C Compiler and version. Examples: GCC 4.8.2, MSVC 2013 Express, clang 3.4, XCode 5 The output of ./autogen.sh or ./configure (depending on whether you are building from a repository checkout or from a tarball). The output starting from ""libbson was configured with the following options"" is sufficient. The text of the error you encountered. Failure to include the relevant information will result in additional round-trip communications to ascertain the necessary details, delaying a useful response. Here is a made-up example of a help request that provides the relevant information: Hello, I'm trying to build the C driver with SSL, from mongo-c-driver-1.2.1.tar.gz. I'm on Ubuntu 14.04, 64-bit Intel, with gcc 4.8.2. I run configure like: $ ./configure --enable-sasl=yes checking for gcc... gcc checking whether the C compiler works... yes  ... SNIPPED OUTPUT, but when you ask for help, include full output without any omissions ...  checking for pkg-config... no checking for SASL... no checking for sasl_client_init in -lsasl2... no checking for sasl_client_init in -lsasl... no configure: error: You must install the Cyrus SASL libraries and development headers to enable SASL support.  Can you tell me what I need to install? Thanks! Security Vulnerabilities If you’ve identified a security vulnerability in a driver or any other MongoDB project, please report it according to the instructions here. Building the Driver from Source Detailed installation instructions are in the manual: http://api.mongodb.org/c/current/installing.html From a tarball Download the latest release from the release page, then: $ tar xzf mongo-c-driver-$ver.tar.gz $ cd mongo-c-driver-$ver $ ./configure $ make $ sudo make install  To see all of the options available to you during configuration, run: $ ./configure --help  To build on Windows Vista or newer with Visual Studio 2015, do the following: cd mongo-c-driver-$ver cd src\libbson cmake -DCMAKE_INSTALL_PREFIX=C:\usr -G ""Visual Studio 14 Win64"" . msbuild.exe ALL_BUILD.vcxproj msbuild.exe INSTALL.vcxproj cd ..\.. cmake -DCMAKE_INSTALL_PREFIX=C:\usr -DBSON_ROOT_DIR=C:\usr -G ""Visual Studio 14 Win64"" . msbuild.exe ALL_BUILD.vcxproj msbuild.exe INSTALL.vcxproj  Building From Git You can use the following to checkout and build mongo-c-driver: $ git clone https://github.com/mongodb/mongo-c-driver.git $ cd mongo-c-driver $ git checkout x.y.z  # To build a particular release $ ./autogen.sh --with-libbson=bundled $ make $ sudo make install  Building from Git on using Visual Studio 2015: git clone https://github.com/mongodb/mongo-c-driver.git cd mongo-c-driver git checkout x.y.z # for your specific release git submodule init git submodule update # libbson is a submodule cd src\libbson cmake -DCMAKE_INSTALL_PREFIX=C:\libmongoc -G ""Visual Studio 14 Win64"" . msbuild.exe ALL_BUILD.vcxproj msbuild.exe INSTALL.vcxproj cd ..\.. cmake -DCMAKE_INSTALL_PREFIX=C:\libmongoc -DENABLE_SSL=WINDOWS -DBSON_ROOT_DIR=C:\libmongoc -G ""Visual Studio 14 Win64"" . msbuild.exe ALL_BUILD.vcxproj msbuild.exe INSTALL.vcxproj  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mongodb/mongo-c-driver"	"MongoDB client library for C. [Apache2]"	"true"
"Database"	"MongoDB C++ Driver"	"https://github.com/mongodb/mongo-cxx-driver"	"C++ driver for MongoDB. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"274"	"105"	"237"	"GitHub - mongodb/mongo-cxx-driver: C++ Driver for MongoDB Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 105 Star 274 Fork 237 mongodb/mongo-cxx-driver Code Pull requests 5 Wiki Pulse Graphs C++ Driver for MongoDB 439 commits 5 branches 46 releases 27 contributors C++ 93.5% Python 3.4% CMake 3.1% C++ Python CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 26compat gh-pages legacy-1.1-dev legacy master Nothing to show r3.0.1 r3.0.0 r3.0.0-rc0 r0.2.0 r0.1.0 legacy-1.1.2 legacy-1.1.1 legacy-1.1.0 legacy-1.1.0-rc0 legacy-1.0.7 legacy-1.0.6 legacy-1.0.5 legacy-1.0.4 legacy-1.0.4-rc0 legacy-1.0.3 legacy-1.0.3-rc0 legacy-1.0.2 legacy-1.0.2-rc0 legacy-1.0.1 legacy-1.0.1-rc0 legacy-1.0.0 legacy-1.0.0-rc4 legacy-1.0.0-rc3 legacy-1.0.0-rc2 legacy-1.0.0-rc1 legacy-1.0.0-rc0 legacy-0.11.0 legacy-0.10.0 legacy-0.9.0 legacy-0.8.0 legacy-0.0-26compat-2.6.12 legacy-0.0-26compat-2.6.11 legacy-0.0-26compat-2.6.10 legacy-0.0-26compat-2.6.9 legacy-0.0-26compat-2.6.7 legacy-0.0-26compat-2.6.6 legacy-0.0-26compat-2.6.5 legacy-0.0-26compat-2.6.4 legacy-0.0-26compat-2.6.3 legacy-0.0-26compat-2.6.2 legacy-0.0-26compat-2.6.1 legacy-0.0-26compat-2.6.0 legacy-0.0-26compat-2.6.0-rc3 legacy-0.0-26compat-2.6.0-rc2 legacy-0.0-26compat-2.6.0-rc1 legacy-0.0-26compat-2.6.0-rc0 Nothing to show New pull request Latest commit c25e50b Jul 8, 2016 adamchel CXX-940 Deprecate bsoncxx::oid::init_tag and make bsoncxx::oid's defa… … …ult constructor do full OID initialization Permalink Failed to load latest commit information. build Add initial CMake build system Jan 29, 2015 cmake CXX-882 Correct case of include path in cmake find helper Mar 31, 2016 etc CXX-911 Add clang-format version check May 18, 2016 examples CXX-940 Deprecate bsoncxx::oid::init_tag and make bsoncxx::oid's defa… Jul 15, 2016 src CXX-940 Deprecate bsoncxx::oid::init_tag and make bsoncxx::oid's defa… Jul 15, 2016 .clang-format Add miscellaneous repo files Jan 29, 2015 .gitignore Cleanup .gitignore Feb 13, 2015 .mci.yml CXX-884 Upgrade OS X builders to OS X 10.10 Apr 1, 2016 .travis.yml minor: pin travis to mongoc 1.3.4 Mar 29, 2016 .ycm_extra_conf.py Fix you complete me conf Feb 20, 2015 CMakeLists.txt CXX-825 Use bigobj for the mocked library as well Jan 22, 2016 CONTRIBUTING.md Fix contributing example Feb 12, 2015 CREDITS.json minor: update CREDITS.json Jan 28, 2016 Doxyfile minor: don't run doxygen on private directories Jan 24, 2016 LICENSE Initial commit Jan 13, 2014 README.md minor: Fix ""26comapt"" typo Feb 2, 2016 TODO.md minor: remove some stale todo items Jul 8, 2015 appveyor.yml CXX-969 appveyor.yml - pin C driver to 1.3.4 Jul 11, 2016 README.md MongoDB C++ Driver Welcome to the MongoDB C++ Driver! This branch contains the new C++11 driver and is the recommended branch for all users. Please see the README.md files in the ""legacy"" and ""26compat"" branches for notes on when to use those release streams. Quickstart Guide See the wiki page. Why a rewrite? This driver contains a completely new API and implementation. A complete rewrite allows us to take full advantage of the features offered in C++11, and gives us the chance to re-architect the driver based on past driver design decisions and their effectiveness. We aim for this new driver to be more modern, more lightweight, and friendlier to contributors than its predecessors. Repository Overview Branch Stability Development Purpose master Stable Stable Evolution New C++11 driver legacy Stable Stable Evolution Stable C++ driver release 26compat Stable Maintenance Only Drop in replacement for users of existing 2.6 era C++ driver Bugs and Issues See our JIRA project. Mailing Lists and IRC Outlined on the MongoDB Community site. License The source files in this repository are made available under the terms of the Apache License, version 2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mongodb/mongo-cxx-driver"	"C++ driver for MongoDB. [Apache2]"	"true"
"Database"	"MongoDB Libbson"	"https://github.com/mongodb/libbson"	"A BSON utility library. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"204"	"37"	"129"	"GitHub - mongodb/libbson: A BSON utility library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 204 Fork 129 mongodb/libbson Code Pull requests 2 Pulse Graphs A BSON utility library. 1,432 commits 6 branches 42 releases 47 contributors C 88.3% M4 7.6% C++ 1.4% CMake 1.2% Other 1.5% C M4 C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.2.0-dev 1.3.0-dev debian master r1.2 r1.3 Nothing to show 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.3.0-rc0 1.3.0-beta0 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.2.0-rc0 1.2.0-beta 1.1.11 1.1.10 1.1.9 1.1.8 1.1.7 1.1.6 1.1.5 1.1.4 1.1.2 1.1.0 1.1.0-rc0 1.0.2 1.0.0 0.98.0 0.8.4 0.8.2 0.8.0 0.6.8 0.6.6 0.6.4 0.6.2 0.6.0 0.5.0 0.4.0 0.2.4 0.2.2 0.2.0 Nothing to show New pull request Latest commit c5aef2e Jul 15, 2016 puppyofkosh committed with bjori Added warning message in mallard2man script (#163) Permalink Failed to load latest commit information. .evergreen Move evergreen config into more apropriate location Jul 6, 2016 build CDRIVER-1337 export all symbols in libbson-experimental.def Jul 7, 2016 doc Added warning message in mallard2man script (#163) Jul 15, 2016 examples CDRIVER-1145: Fix build on VS 2010 (-Wdeclaration-after-statement) Mar 25, 2016 src CDRIVER-1374: Accept uppercase hex characters in bson_oid_is_valid() (#… Jul 12, 2016 tests CDRIVER-1374: Fix strcasecmp() usage in test case (#169) Jul 15, 2016 .gitattributes Rewrite the Windows evergreen config to emulate the *nix one Jun 15, 2016 .gitignore Add generated files to .gitignore (#168) Jul 15, 2016 CMakeLists.txt CDRIVER-1337 export all symbols in libbson-experimental.def Jul 7, 2016 COPYING Fix LICENSE issue with cmake Mar 11, 2014 Makefile.am CDRIVER-1217 remove spec files Apr 30, 2016 NEWS merge r1.3 branch May 7, 2016 README.md Added Windows 10 and updated the Windows instructions to use current … Jul 15, 2016 VERSION_CURRENT post-release bump Mar 11, 2016 VERSION_RELEASED merge r1.3 branch May 7, 2016 autogen.sh build: check for libtoolize in autogen.sh, and remove from tree. Mar 12, 2014 configure.ac CDRIVER-1077 prefix all man pages with ""bson_"" Mar 25, 2016 README.md Libbson libbson is a library providing useful routines related to building, parsing, and iterating BSON documents. Building Libbson tries to support a variety of operation systems and architectures. The following are known to work. If your platform is not listed here, it may still work, we simply haven't tested it. If you would like us to add your platform here, we would be happy to hear from you. Supported Operating Systems RHEL/CentOS 5, 6, 7beta SLES 11 SP3 Ubuntu 12.04 LTS Debian 7 SmartOS Solaris FreeBSD 10 Windows Vista, 7, 8, 10 OS X 10.8 Supported Architectures x86 x86_64/amd64 SPARC ARM PowerPC Supported Compilers GCC 4.1 and newer Clang 3.3 and newer Visual Studio (MSVC) 2010 and newer Oracle Solaris Studio (5.7 and newer, Solaris 10) Dependencies Fedora / RedHat Enterprise / CentOS yum install git automake autoconf libtool gcc Debian / Ubuntu apt-get install git-core automake autoconf libtool gcc FreeBSD pkg install git automake autoconf libtool gcc pkgconf OS X You'll need to have Xcode (at least the command-line package) and we recommend using Homebrew for other dependencies. brew install automake autoconf libtool pkgconfig SmartOS pkgin install git automake autoconf libtool gcc47 gmake pkg-config export PATH=/opt/local/gcc47/bin:$PATH Windows Vista and Higher from Git Builds on Windows Vista and Higher require cmake to build Visual Studio project files. Alternatively, you can use cygwin or mingw with the automake based build. git clone git://github.com/mongodb/libbson.git cd libbson cmake.exe -G ""Visual Studio 10 Win64"" ""-DCMAKE_INSTALL_PREFIX=C:\install\path"" msbuild.exe ALL_BUILD.vcxproj msbuild.exe INSTALL.vcxproj For the adventurous, you can cross-compile for Windows from Fedora easily using mingw. sudo yum install mingw64-gcc automake autoconf libtool ./configure --host=x86_64-w64-mingw32 From Git git clone git://github.com/mongodb/libbson.git cd libbson/ git checkout x.y.z  # To build a particular release ./autogen.sh make sudo make install You can run the unit tests with make test From Tarball tar xzf libbson-$ver.tar.gz ./configure make sudo make install Configuration Options You may be interested in the following options for ./configure. These are not availble when using the alternate CMake build system. --help                    Show all possible help options.                           There are many more than those displayed here.  --enable-optimizations    Enable various compile and link optimizations. --enable-debug            Enable debugging features. --enable-debug-symbols    Link with debug symbols in tact. --enable-hardening        Enable stack protector and other hardening features. --enable-silent-rules     Force silent rules like the Linux kernel. --enable-coverage         Compile with gcov support. --enable-static           Build static archives (.a).  Developing using libbson In your source code: #include <bson.h> To get the include path and libraries appropriate for your system. gcc my_program.c $(pkg-config --cflags --libs libbson-1.0) Examples See the examples/ directory for how to use the libbson library in your application. Documentation See the doc/ directory for documentation on individual types. Bug reports and Feature requests Please use the MongoDB C Driver JIRA project to report bugs or request features. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mongodb/libbson"	"A BSON utility library. [Apache2]"	"true"
"Database"	"MySQL++"	"http://www.tangentsoft.net/mysql++/"	"A C++ wrapper for MySQL's C API. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"MySQL++ MySQL++ MySQL++ is a C++ wrapper for MySQL’s C API. It is built around the same principles as the Standard C++ Library, to make dealing with the database as easy as dealing with STL containers. In addition, MySQL++ provides facilities that let you avoid the most repetitive sorts of SQL within your own code, providing native C++ interfaces for these common tasks. If you have any questions about this project, do not email us about it unless the question is inherently personal. The documentation answers most questions, and the mail list archives are a treasure trove of information: If you can’t find an answer in the documentation or the list archives, ask on the list. Everyone active in MySQL++’s development monitors that mailing list, and the library’s primary maintainer responds to almost every question posted there. By posting to the mailing list, your question and any answers are archived for future developers to find, and you reach a wider audience than is possible with personal email. Latest Stable Version Before upgrading an existing version of MySQL++, please scan through the change log first. If you’re coming from a much older version, better read through the “Incompatible Library Changes” chapter in the user manual instead. Source Code mysql++-3.2.2.tar.gz (3.1 MB, 2015.03.18) — Library source code. If you aren’t sure which file to download, download this. mysql++-3.2.2-1.src.rpm (3.1 MB, 2015.03.18) — Source RPM, for those that need to build their own binary RPMs. To do this, run this command as root: # rpmbuild --rebuild /wherever/it/is/mysql++-3.2.2-1.src.rpm The resulting mysql++, mysql++-devel and mysql++-manuals RPMs will be in a distribution-dependent directory, typically somewhere under /usr/src. Linux Binary Packages MySQL++ has been picked up by many package distros. It’s been spotted in the Debian, Fedora, FreeBSD, Gentoo, Homebrew, RHEL (EPEL), and Ubuntu package systems. Since these first-party packages are properly integrated into their host distributions, there is no point offering competing binary packages here. If you want something different in your binary package than you get in the standard package distro for yoru OS, you should build it from source on the target OS, or else you are likely to have problems. Old Versions These old versions are provided for people who cannot or will not upgrade their source code to work with the current version. MySQL++ has had assorted API and ABI breakages over the years, so there can be good reasons for sticking with an old version. mysql++-3.1.0.tar.gz (1.9 MB, 2010.06.03) — This was the only version in the 3.1.x line. It is remarkable only in that it was the current release for a 3-year span. MySQL++ 3.2.x is both ABI and API-compatible with 3.1.0, so there is little reason to insist on using this particular version. mysql++-3.0.9.tar.gz (2.6 MB, 2009.02.04) — This is the last version in the 3.0.x line. It has a slightly different ABI from 3.1.0. mysql++-2.3.2.tar.gz (1.6 MB, 2007.07.11) — This is the last version in the 2.x line. The change to 3.x was fairly traumatic for some code bases, so it is understandable if you still must use this version. mysql++-1.7.40.tar.gz (1.7 MB, 2005.05.26) — This is the last version in the 1.x line. This is really old, and known to be really broken in some ways. If your code can’t be upgraded any further than this, you might want to reexamine your priorities. :) mysql++-1.7.9.tar.gz (731 KB, 2001.05.01) — This is the last version Sinisa Milivojevic maintained. This version is significant because it was the only “official” version for over three years. As a result, there are many patches floating around on the Internet that apply to this version of the library. Also, it is the last version of the library known to work on GCC 2.95.x without changes. mysql++-1.7.1-win32-vc++.zip (786 KB, 2000.05.17) — Ancient version for Visual C++ 6.0. Use this only if you absolutely, positively cannot upgrade to Visual C++ 2003 or newer. It is known to have bugs, and there is almost no chance they will ever be fixed. The path forward is to switch to a newer compiler; see below for information on obtaining a free version of Visual C++ 2013! All files — This is simply a link to the raw directory view. There are old versions of the source code going back to 0.64, old binaries, etc. Documentation The user and reference manuals are shipped in the source code tarball above. They are also available online. Contributing to the Effort The easiest thing to do if you want to help out with the MySQL++ development effort is to participate on the mailing list. We could use help answering questions, and it’s frequently helpful to have different voices contributing to discussions about the library’s future. If you want to participate in the coding effort, the MySQL++ development project is hosted here, courtesy of Gna! They host the MySQL++ Subversion repository, which holds the version history going back to version 1.7.9. The HACKERS.txt file included with the MySQL++ sources contains further instructions; please read it before making changes to the library. For a great source of projects to tackle, see the Wishlist file. There’s a copy distributed with MySQL++, but the repository version may be more current. You wouldn’t want to go to the effort of creating a patch, only to find that someone had already checked in a change for that item! If you just want to keep up on the in-progress developments, you can sign up for the mysqlpp-commits mailing list on our Gna! project page. This mails you all of the Subversion commit messages. Between that and the regular mailing list traffic, you will know as much about MySQL++’s development as anyone save the people actually working on it. :) FAQs What version of MySQL++ should I use? If you’re writing new code, you should use the latest stable version. If you have existing code currently using an older version of MySQL++, you may not want to upgrade all the way to the current version, at least not in a single step. You might want to upgrade to an intermediate version first, just to get bug fixes and maybe some minor features. Then once that step is working and tested, you can think about jumping to the latest stable version. MySQL++ uses the standard major.minor.bug-fix version number scheme. A change in the library’s major version number denotes changes that will almost certainly require source code changes in your program. See the “Incompatible Library Changes” chapter of the user manual for details. A change in the minor version number indicates added features that don’t change existing library interfaces. If you don’t want to use those features, you should be able to install the new library without rebuilding your program. A change in the bug-fix number indicates internal bug fixes, which don’t affect the library interface at all, so such versions are always safe to install. We haven’t followed this discipline perfectly. The library’s binary interface changed a few times between the epochal 1.7.9 release and the final 1.x release, 1.7.40. If your program uses a version in between, be prepared to change the code when upgrading. The library interface also changed a few times early in the 3.x series before settling down. What platforms does it work on? MySQL++ should work on any platform that has a Standard C++ compiler and the MySQL C API development files. The code does use some C99/TR1 features that are widely supported in advance of full standardization, but these are optional. In practice, MySQL++ works best on the platforms that get the most attention. This means mass-market operating systems on common hardware, and the default tool chain for the platform. There are FAQ items for most common platforms below; if your platform isn’t addressed and it’s outside the mainstream or older than about 2003, the chance of it working out of the box are low. We’re happy to discuss porting on the mailing list, but be prepared to do most of the work yourself; if MySQL++ hasn’t been ported to your system already, there’s usually a pretty good reason why not. If you use a different platform and it isn’t mentioned in the subsequent FAQ items, probably little is known about it. If it builds out of the box, we’d appreciate it if you’d send a report to the mailing list. If not, please send patches to fix this to the mailing list. We will support any platform that gets enough interest from the users. What versions of MySQL does it work with? MySQL++ works best with MySQL version 4.1 or higher, simply because this is the oldest version that it’s regularly tested against during development. We do most of the development against MySQL 5.1, since this is the version we still use on most of our production machines. Because MySQL++ is intended for use in production environments, we don’t test it against bleeding-edge versions of MySQL; the newest version we typically test it with is the current GA release, 5.6 as of this writing. We’re not opposed to supporting newer versions, we just don’t build test environments for these newer versions in advance of need. If you find that MySQL++ isn’t building against a newer release of MySQL, a short bug report is usually sufficient to get it fixed. It probably builds fine against MySQL 4.0, but this hasn’t been tested in quite a long time now. Some of the examples demonstrate the explicit UTF-8 support available in MySQL 4.1 and newer. If you want to run the examples, you will need to remove the UTF-8 bits from the CREATE TABLE statements in examples/resetdb.cpp. Older versions of MySQL will allow implicit use of UTF-8, they just won’t let you declare your intentions, or give you features like UTF-8 aware sorting. MySQL++ can be made to build against MySQL 3.23, but it won’t do so out of the box. The last time I tried this, the only thing that needed doing was changing MYSQL_TYPE_* in lib/type_info.cpp to FIELD_TYPE_*. (It’s a fairly invasive change, which is the only reason the library doesn’t come with this change already.) Also, the UTF-8 comments above apply equally to older versions of MySQL. Does it build against MariaDB? Sorry, no idea. We haven’t tried it yet. What software license does MySQL++ use? Is it free? MySQL++ is free software, licensed under the GNU LGPL. What does the LGPL license mean to me, as far as MySQL++ goes? The common wisdom regarding LGPL’d libraries is that you can use them with a program using almost any software license as long as you’re willing to link dynamically. Think of the GNU C library (glibc) on Linux: it’s LGPL’d and linked to almost everything on a Linux system, at least indirectly. If your program’s software license allows dynamic linking to glibc, it should allow you to use MySQL++ dynamically, too. If you link to MySQL++ statically, you trigger the “viral” provisions of the LGPL. Practically speaking, it means your program must be licensed under the LGPL or something compatible with it, such as the GPL. This rules out static linking when you want to keep your source code closed, and even rules out static linking with some open source licenses, since not all of them are compatible with LGPL at that level. There’s no practical way of avoiding this. MySQL++’s licensing history is tangled, what with the numerous changes of maintainership and the lack of a copyright assignment system for third-party contributions. It would simply be impractical to contact all of the past contributors and get them to agree on the licensing changes needed to make this happen. If you need to link to your C++ database library statically and can’t use the LGPL or something compatible with it for your program, you might consider using MySQL’s Connector/C++ instead. The free version is GPL’d, but they will sell you a commercial license which allows static linking. Doesn’t the MySQL C API library’s GPL license override MySQL++’s LGPL license? The MySQL C API library is available under two different licenses, not one. The default license for MySQL (including its C API library) is GPL with the FOSS license exception. This is what you get if you got MySQL for free, such as by downloading it from mysql.com or as part of your Linux distro. The less liberal distribution terms of the C API library’s GPL do override the less restrictive ones of MySQL++’s LGPL license. This matters if you want to distribute your program as a binary only, keeping the source to yourself. If you need to be able to distribute closed-source programs, MySQL, Inc. will happily sell you a commercial distribution license for their C API library. This issue really has nothing to do with MySQL++. The same restriction applies if you write your program directly against the C API library. The only reason I even put this here is because people keep asking the question. Please work out the licensing with MySQL, Inc. Having settled that, the previous FAQ item applies. How does MySQL++ compare to MySQL’s Connector/C++? Connector/C++ is a new C++ wrapper for the MySQL C API library, fully developed under the MySQL corporate aegis. By contrast, MySQL++ has a long, complex development history. MySQL++ started out as a third-party library, was maintained and enhanced by MySQL for several years, then got spun back out again, this time probably for good. MySQL does still host our mailing list, for which we thank them, but they don’t control the hosting or development of MySQL++ any more. MySQL decided to create a competing library for two reasons. First, having the entire thing to themselves mean they can do the same dual-licensing thing they do with the C API library. Second, after Sun bought MySQL, they wanted to put MySQL support into OpenOffice, and wanted a JDBC style API for that support. By contrast with Connector/C++’s Java-style database API, MySQL++ is very much a native C++ library: we use STL and other Standard C++ features heavily. If you are a Java developer or simply admire its database interface design, you may prefer Connector/C++. Another way to look at it is that Connector/C++ is new and therefore perhaps less crufty, while MySQL++ is mature and featureful. Will it build under GCC? Yes, with GCC version 3.0 and up, except on MinGW, which requires 3.4.5 at minimum. The last version of MySQL++ that works with GCC 2.95.x is 1.7.9. It may be less painful to port the current version back to GCC 2.95 than to live with the limitations and bugs of this older version. The main thing breaking this backwards compatibility are the steps forward we’ve taken for Standard C++ compliance. If you work around or revert these, it should work on GCC 2.95 again. If you’re stuck on anything older than GCC 2.95, we recommend that you use the MySQL C API instead of trying to arm-twist MySQL++ into working. Will it build under Visual C++? Yes, it works out of the box with Visual C++ 2005 and 2008. MySQL++ also works fine with Visual C++ 2010, 2012, and 2013, with a project file conversion. This may require minor manual adjustments. For example, when VC++ 2013 converts the VS2008 project files, it changes the debug build output directory from debug to debug\x64 but fails to update the linker settings for the executables. MySQL++ mostly works with Visual C++ 2003. The main exception is the Specialized SQL Structures feature, which doesn’t work at all any more. It appears to be difficult to fix, because the symptom is that the compiler crashes when you try to build even the most trivial SSQLS code. There are several possible ways to work around this limitation. If you must use Visual C++ 2002 (a.k.a. 7.0) or older, you can try the ancient 1.7.1 version of MySQL++. This is a third-party contribution which is known to have bugs. You might be better off using Connector/C instead. The library’s primary maintainer only uses MySQL++ seriously on Linux, OS X and FreeBSD systems, and let his MSDN membership lapse years ago. Consequently, he only tests MySQL++ occasionally under the current version of Visual C++ Express. Consequently, we’re highly reliant on testing and patches from the user base for this platform. If you’re not using a recent version of Visual C++, you should really consider upgrading as the compliance of the compiler has improved greatly. Microsoft is giving away a limited but functional version of Visual C++ 2013 which works just fine with MySQL++. (You want the Express 2013 for Windows Desktop version.) The main practical limitation of VC++ Express — relative to the Professional edition — is that the Express version doesn’t include MFC. If you need to build GUI programs using only Standard C++, we recommend the free wxWidgets library as a capable MFC substitute. If you don’t mind stepping into the .NET world, there is explicit support for C++/CLI in MySQL++ now, including a Windows Forms based example program. (Microsoft attemted to kill the VC++-for-Desktop product with the 2012 release, but relented when the community yelled that it wasn’t going to tolerate a Metro-only Express version of Visual C++. Here’s hoping they continue offering this.) Will it build on Mac OS X? Yes, it builds just fine, both from within the Xcode environment and at the command line. We currently test only on OS X 10.8 and up. The Xcode project files should with Xcode 2+, which implies that it may still build on systems as old as OS X 10.4. In the past, we successfully tested command line builds on a 10.3 box. Command line builds are still preferred to Xcode, as there is more flexibility to be had here. See README-Mac-OS-X.txt in the MySQL++ tarball for details. That file also contains instructions on getting Connector/C for OS X, which MySQL++ builds against. Will it build under Cygwin? Yes, but beware of Cygwin’s licensing: any program linked to cygwin1.dll is subject to the GPL, unless you’ve purchased ($$) a commercial license for Cygwin from Red Hat. If that’s not a problem for you, see the README-Cygwin.txt file. If you are making a closed-source program, we recommend using Visual C++ or MinGW instead. Will it build under MinGW? Yes. You want to be using the current version, because there are important bugs fixed in recent versions that prevent the current version of MySQL++ from building or working correctly. Will it build under Solaris? Yes, we have reports of people building it successfully on versions as old as Solaris 8. It gets the most testing with GCC, but we have heard occasional success reports from people using Sun CC. I’ve personally only built it with GCC under OpenSolaris 2008.05 and 2008.11. Just use the built-in package manager to install MySQL 5.0 and GCC, and you’re set. Beware, the “mysql” package is MySQL 4.0, which MySQL++ no longer works 100% with out of the box. (See above.) You want the “mysql5” package instead. Will it build under Borland C++ Builder? It can be made to work, mostly. The only major feature that doesn’t work out of the box is the Specialized SQL Structures. It can’t work as-is due to a compiler limitation. A full discussion of the problem and possible workarounds is in this mailing list message. Fixes and further support are unlikely, as it seems that this is a dead product now. g++ simple1.cpp -o simple1 ? No! You’re probably missing a -I flag for the MySQL++ headers, and you’re certainly missing correct link flags. The user manual has a section that describes how to build a program based on MySQL++. It compiles, but it won’t link! Why? To build any program using MySQL++, at minimum you must link to the MySQL++ library and also to the MySQL C API library that MySQL++ is built upon. The MySQL++ library is libmysqlpp.so on Unixy systems, and mysqlpp.lib on Windows. The MySQL C API library is either libmysqlclient{_r}.{a,so} on Unixy systems and libmysql.lib on Windows. Visual C++: An additional requirement with Visual C++ is that you must link to the same C Run-Time Library (RTL) for all modules throughout your project. The Visual C++ project files that come with MySQL++ use the multithreaded DLL version (/MD or /MDd) of the C RTL. If you link MySQL++ to a program or additional third party library that uses a different RTL, you will get link errors. Study the example projects’ settings to see how this is done. The instructions in the README-Visual-C++.txt file may also be helpful. See Chapter 9, Using MySQL++ in Your Own Project in the MySQL++ User Manual for more on this. Why is my program leaking memory? The current version of MySQL++ has no known memory leaks. If you free all of the MySQL++ objects you allocate, it should not be leaking memory. If you’re getting a report from a memory debugger about a leak, most likely you’re seeing memory that the MySQL C API library allocates for its own internal purposes. MySQL++ is built atop this library, so it can look like it’s MySQL++ leaking the memory. This underlying C library automatically allocates multiple blocks of memory in ways that are more or less outside MySQL++’s control. If you feel you must plug these leaks, it is up to your code to call the relevant C API functions. These “leaks” are all harmless in practice for most programs. A typical program using MySQL++ needs database access for its entire effective run time, and the size of the leak doesn’t increase over run time if you follow the instructions in the threads chapter of the User Manual. The OS automatically frees this memory when your program exits. That said, it’s annoying to see leak reports in a memory debugger, particularly if leak checking is a regular part of your build and test process. You can placate the memory debugger by calling Connection::thread_end() from each thread that uses a database connection when that thread finishes using the database. In addition, after the last bit of code that uses MySQL++ stops, you need to call the MySQL C API function mysql_library_end(). If you’re using a ConnectionPool, you might put this last call in the destructor, since the pool object is typically the last MySQL++ object to be destroyed. If you’ve done that and still think you really have a serious memory leak — one of those “the longer it runs, the more memory it uses” sorts of leak — you need to tie it to some unit of work. Does memory go up as a function of time? number of queries issued? count of rows retreived? Until you can establish this link, it’s premature to post to the MySQL++ mailing list claiming there’s a leak in MySQL++. Even if you can establish such a link, it’s far more likely that you’re not releasing the MySQL++ objects you allocate than MySQL++ itself failing to release memory. My program is crashing. Help! The most common cause of crashes in MySQL++ is uncaught exceptions. The library throws exceptions when it detects errors, such as invalid SQL syntax, invalid login parameters, etc. Try running the example programs, since they all catch exceptions properly. If the examples also crash and you’re using a package built for a different Linux distribution than the one you’re actually running, try rebuilding the package from source on the target OS. A binary package is fairly closely tied to the system it is built under, so it’s possible that RPMs you build on your system will work better than those built elsewhere. Nothing’s working at all! Is it broken? Maybe, but have you tried running the examples? Follow the instructions in the README-examples.txt file. If the examples work but your program doesn’t, chances are good that the error is in your program; study the examples, and read the manuals. If the examples also fail to work, post to the mailing list with a detailed failure report. I’m sure I’ve found a bug. How do I submit a report? We’ll want some code that demonstrates the bug. No doubt you’d rather not send us a copy of your database to demonstrate the problem, and to be frank, we don’t want your database, either. The best thing is to modify one of the MySQL++ examples so that it reproduces the problem you’re seeing. This lets the people that can help you reproduce the problem on their machines, without needing your database. Once you have your problem boiled down to a simple example, send the source code to the mailing list along with a detailed report. We want to know what you expect the program to do, and what it actually does on your machine. Keep in mind, programs often behave differently on different systems. As a programmer yourself, you know what it is like to deal with vague user bug reports. Give us the sort of error report you’d like to receive for your programs. How do I submit a change to MySQL++? This is covered in detail in the HACKERS.txt file that accompanied MySQL++. But in brief: we want the patch in unified diff format, made against either the latest release of MySQL++ or (preferrably) against the svn repository. You can send it either to the mailing list, or to the bug tracker. We prefer that you only use the bug tracker for patches that are so trivial or obvious that they won’t need discussion. When a patch is rejected, the most common reason is that it breaks the library’s binary interface (ABI), so that an old program can’t link to the changed library without recompiling. We only make such changes at major version transitions. These transitions are rare, and we can’t even promise that there will ever be another one, much less when it will occur. If you have a choice of two ways to get your desired effect and one of them doesn’t break the ABI, it will increase the chances that we accept your patch if you do it that way. This space intentionally left blank. :)   Go to my home page"	"null"	"null"	"A C++ wrapper for MySQL's C API. [LGPL]"	"true"
"Database"	"redis3m"	"https://github.com/luca3m/redis3m"	"Wrapper of hiredis with clean C++ interface, supporting sentinel and ready to use patterns. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"87"	"18"	"45"	"GitHub - luca3m/redis3m: A C++ Redis client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 87 Fork 45 luca3m/redis3m Code Issues 15 Pull requests 2 Pulse Graphs A C++ Redis client 166 commits 5 branches 6 releases 6 contributors C++ 89.6% CMake 4.8% Lua 4.4% Other 1.2% C++ CMake Lua Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags c++11 coverity gh-pages master model-gen Nothing to show 2.0 1.1 1.0 0.2 0.1.1 0.1 Nothing to show New pull request Latest commit 950209f Oct 20, 2015 luca3m Add gitter badge Permalink Failed to load latest commit information. Redis3M-VisualStudio update for c++11 Jan 27, 2015 data/lua Improve median_filter and test suites Jun 15, 2014 examples Change variable name Mar 7, 2015 include/redis3m Fix logging design to integrate better with library users' logging Aug 17, 2015 src Fix logging design to integrate better with library users' logging Aug 17, 2015 tests adding unix socket support Aug 11, 2015 .gitignore update for c++11 Jan 27, 2015 .travis.yml Try new travis Aug 14, 2015 CMakeLists.txt Compile also a static version, closes #36 Aug 14, 2015 Doxyfile Add other documentation, version bump May 2, 2014 LICENSE Initial commit Feb 5, 2014 README.md Add gitter badge Oct 20, 2015 TODO.md Update TODO.md Jul 23, 2014 redis3m.pc.in Remove boost_system dependency Mar 22, 2015 run-tests.sh Redis sentinel tests pass Sep 27, 2014 README.md redis3m A C++ Redis client, born to bring my experience using Redis and C++ on a opensource library. Main goals Provide a simple and efficient wrapper of hiredis, with C++ facilities like memory management A connection pooling system, with support for high availability using sentinel A set of useful patterns ready to use and composable with other code. For example scheduler, orm, counters or message queueing Dependencies redis3m requires hiredis and boost libraries. Install First step install all required dependencies, on a Debian system you can use: sudo apt-get install libmsgpack-dev libboost-thread-dev libboost-date-time-dev libboost-test-dev libboost-filesystem-dev libboost-system-dev libhiredis-dev cmake build-essential Then checkout the code and compile it git clone https://github.com/luca3m/redis3m cd redis3m cmake make sudo make install Documentation See examples directory for some examples, you can compile them with: g++ <example.cpp> $(pkg-config --cflags --libs redis3m) -o <example.bin> You can find all classes reference here Versioning This project uses semantic versioning. In short words versions are named X.Y[.Z]. Changing X means break API changes, Y means new features without breaking old code, Z means bug fixing. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/luca3m/redis3m"	"Wrapper of hiredis with clean C++ interface, supporting sentinel and ready to use patterns. [Apache2]"	"true"
"Database"	"RocksDB"	"https://github.com/facebook/rocksdb"	"Embedded key-value store for fast storage from facebook. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5649"	"634"	"1134"	"GitHub - facebook/rocksdb: A library that provides an embeddable, persistent key-value store for fast storage. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 634 Star 5,649 Fork 1,134 facebook/rocksdb Code Issues 209 Pull requests 34 Wiki Pulse Graphs A library that provides an embeddable, persistent key-value store for fast storage. http://rocksdb.org 5,188 commits 49 branches 87 releases 208 contributors C++ 85.5% Java 10.2% C 1.0% Shell 1.0% Makefile 1.0% PHP 0.6% Other 0.7% C++ Java C Shell Makefile PHP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.7 2.8.fb.trunk 2.8.fb 2.8.1.fb 3.0.fb 3.1.fb 3.2.fb 3.3.fb 3.4.fb 3.5.fb 3.6.fb 3.7.fb 3.8.fb 3.9.fb 3.10.fb 3.11.fb 3.12.fb 3.13.fb 4.0.fb 4.1.fb 4.2.fb 4.3.fb 4.4.fb 4.5.fb 4.6.fb 4.7.fb 4.8.fb 4.9.fb Issue134 andrewkr_test andrewkr_test2 andrewkr_test3 cmake_head fix_win gh-pages hotcold igorcanadi-patch-1 igorcanadi-patch-2 krad_blkcache krad_blkcache_3.11.fb krad_windows_build master mongorocks sdong_test sdong_write single_delete_checker tec_travis write_throughput zdb.4.0 Nothing to show v4.8 v4.6.1 v4.5.1 v4.4.1 v4.4 v4.3.1 v4.3 v4.2 v4.1 v4.0 v3.13.1 v3.13 v3.12.1 v3.12 v3.11 v3.10 v3.9 v3.8 v3.7 v3.6.1 v3.5 v3.4 v3.3 v3.2 v3.1 v3.0 v2.8 v2.7 v2.6 v2.5 v2.4 v2.3 v2.2 v2.1 v2.0 v1.5.9.1 v1.5.8.2 v1.5.8.1 v1.5.8 v1.5.7 rocksdb-4.8 rocksdb-4.6.1 rocksdb-4.5.1 rocksdb-4.4.1 rocksdb-4.4 rocksdb-4.3.1 rocksdb-4.3 rocksdb-4.2 rocksdb-4.1 rocksdb-3.13.1 rocksdb-3.13 rocksdb-3.12.1 rocksdb-3.12 rocksdb-3.11.2 rocksdb-3.11.1 rocksdb-3.11 rocksdb-3.10.2 rocksdb-3.10.1 rocksdb-3.9.1 rocksdb-3.9 rocksdb-3.8 rocksdb-3.7 rocksdb-3.6.2 rocksdb-3.6.1 rocksdb-3.5.1 rocksdb-3.5 rocksdb-3.4 rocksdb-3.3 rocksdb-3.2 rocksdb-3.1 3.0.fb 2.8.fb 2.7.fb 2.6.fb 2.5.fb 2.4.fb 2.3.fb 2.2.fb 2.1.fb 2.0.fb 1.5.9.2.fb 1.5.9.1.fb 1.5.9.fb 1.5.8.2.fb 1.5.8.1.fb 1.5.8.fb 1.5.7.fb Nothing to show New pull request Latest commit 4b95253 Jul 15, 2016 yiwu-arbug Refactor cache.cc … Summary: Refactor cache.cc so that I can plugin clock cache (D55581). Mainly move `ShardedCache` to separate file, move `LRUHandle` back to cache.cc and rename it lru_cache.cc.  Test Plan:     make check -j64  Reviewers: lightmark, sdong  Reviewed By: sdong  Subscribers: andrewkr, dhruba, leveldb  Differential Revision: https://reviews.facebook.net/D59655 Permalink Failed to load latest commit information. arcanist_util Add release build to RocksDB per-diff/post-commit tests Jul 8, 2016 build_tools Add release build to RocksDB per-diff/post-commit tests Jul 8, 2016 coverage Fix coverage script Nov 3, 2014 db Avoid updating memtable allocated bytes if write_buffer_size is not set Jul 13, 2016 doc Lint everything Nov 16, 2015 examples Fix examples/Makefile jemalloc error Jun 14, 2016 hdfs using java7 in runtime for hdfs env (#1072) Apr 12, 2016 include/rocksdb Refactor cache.cc Jul 15, 2016 java Add options.write_buffer_manager: control total memtable size across … Jul 5, 2016 memtable Updated all copyright headers to the new format. Feb 9, 2016 port stack_trace,cc: The current Stacktrace code does not compile for Free… Jun 5, 2016 table Miscellaneous performance improvements Jul 12, 2016 third-party Fix clang analyzer errors Jul 8, 2016 tools ldb backup support Jul 14, 2016 util Refactor cache.cc Jul 15, 2016 utilities Refactor cache.cc Jul 15, 2016 .arcconfig Integrate Jenkins with Phabricator Apr 7, 2015 .clang-format A script that automatically reformat affected lines Jan 14, 2014 .gitignore Ignore db_test2 Mar 7, 2016 .travis.yml Re-enable linux on travis Jun 30, 2016 AUTHORS Add AUTHORS file. Fix #203 Sep 29, 2014 CMakeLists.txt Refactor cache.cc Jul 15, 2016 CONTRIBUTING.md facebook accounts are not required for CLA signers Jul 8, 2014 DEFAULT_OPTIONS_HISTORY.md Release RocksDB 4.8.0 May 2, 2016 DUMP_FORMAT.md First version of rocksdb_dump and rocksdb_undump. Jun 19, 2015 HISTORY.md Add options.write_buffer_manager: control total memtable size across … Jul 6, 2016 INSTALL.md Simple changes to support builds for ppc64[le] consistent with X86 Jan 19, 2016 LANGUAGE-BINDINGS.md Update LANGUAGE-BINDINGS.md Jul 15, 2016 LICENSE Updated all copyright headers to the new format. Feb 9, 2016 Makefile Fix deadlock when trying update options when write stalls Jul 12, 2016 PATENTS Update Patent Grant. Apr 13, 2015 README.md Replaced ""built on on earlier work"" by ""built on earlier work"" in REA… Sep 17, 2014 ROCKSDB_LITE.md Optimistic Transactions May 29, 2015 USERS.md Update USER.md to include more services at Facebook. Jul 6, 2016 Vagrantfile RocksDB on FreeBSD support Feb 26, 2015 WINDOWS_PORT.md Commit both PR and internal code review changes Jul 7, 2015 appveyor.yml Disable long running GroupCommitTest (#1125) May 19, 2016 src.mk Refactor cache.cc Jul 15, 2016 thirdparty.inc Introduce XPRESS compresssion on Windows. (#1081) Apr 19, 2016 README.md RocksDB: A Persistent Key-Value Store for Flash and RAM Storage RocksDB is developed and maintained by Facebook Database Engineering Team. It is built on earlier work on LevelDB by Sanjay Ghemawat (sanjay@google.com) and Jeff Dean (jeff@google.com) This code is a library that forms the core building block for a fast key value server, especially suited for storing data on flash drives. It has a Log-Structured-Merge-Database (LSM) design with flexible tradeoffs between Write-Amplification-Factor (WAF), Read-Amplification-Factor (RAF) and Space-Amplification-Factor (SAF). It has multi-threaded compactions, making it specially suitable for storing multiple terabytes of data in a single database. Start with example usage here: https://github.com/facebook/rocksdb/tree/master/examples See the github wiki for more explanation. The public interface is in include/. Callers should not include or rely on the details of any other header files in this package. Those internal APIs may be changed without warning. Design discussions are conducted in https://www.facebook.com/groups/rocksdb.dev/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/facebook/rocksdb"	"Embedded key-value store for fast storage from facebook. [BSD]"	"true"
"Database"	"SQLite"	"http://www.sqlite.org/"	"A completely embedded, full-featured relational database in a few 100k that you can include right into your project. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SQLite Home Page Small. Fast. Reliable. Choose any three. About Documentation Download License Support Purchase SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine. SQLite is the most widely deployed database engine in the world. The source code for SQLite is in the public domain. More... Sponsors Continuing enhancement and maintenance of SQLite is made possible by SQLite Consortium members, including: Current Status Version 3.13.0 of SQLite is recommended for all new development. Common Links Features When to use SQLite Frequently Asked Questions Getting Started SQL Syntax Pragmas SQL functions Date & time functions Aggregate functions JSON functions C/C++ Interface Spec Introduction List of C-language APIs The TCL Interface Spec Development Timeline Report a Bug News"	"null"	"null"	"A completely embedded, full-featured relational database in a few 100k that you can include right into your project. [PublicDomain]"	"true"
"Database"	"upscaledb"	"https://upscaledb.com/"	"An embedded ""typed"" key/value store with a built-in query interface. [GPLv3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"284"	"25"	"31"	"GitHub - cruppstahl/upscaledb: A very fast lightweight embedded database engine with a built-in query language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 284 Fork 31 cruppstahl/upscaledb Code Issues 7 Pull requests 0 Pulse Graphs A very fast lightweight embedded database engine with a built-in query language. https://upscaledb.com 3,428 commits 12 branches 39 releases Fetching contributors C++ 85.6% C# 4.9% Java 2.8% C 2.1% M4 1.8% Python 1.0% Other 1.8% C++ C# Java C M4 Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master topic/batch topic/c++11 topic/issue64 topic/refactoring topic/txn topic/uqi topic/v1_microcontroller topic/2.1.12 topic/2.1.13 topic/2.2.0 topic/2.2.1 Nothing to show upscaledb-2.2.0 upscaledb-2.1.13 upscaledb-2.1.12 hamsterdb-pro-2.1.11 hamsterdb-pro-2.1.10 hamsterdb-pro-2.1.9 hamsterdb-pro-2.1.8 hamsterdb-pro-2.1.7 hamsterdb-2.1.11 hamsterdb-2.1.10 hamsterdb-2.1.9 hamsterdb-2.1.8 hamsterdb-2.1.7 hamsterdb-2.1.6 hamsterdb-2.1.5 hamsterdb-2.1.4 hamsterdb-2.1.3 hamsterdb-2.1.2 hamsterdb-2.1.1 hamsterdb-2.1.0 hamsterdb-2.0.5 hamsterdb-2.0.4 hamsterdb-2.0.3 hamsterdb-2.0.2 hamsterdb-2.0.1 hamsterdb-2.0.0 hamsterdb-2.0.0.rc3 hamsterdb-2.0.0.rc2 hamsterdb-2.0.0.rc1 hamsterdb-1.1.15 hamsterdb-1.1.14 hamsterdb-1.1.13 hamsterdb-1.1.12 hamsterdb-1.1.11 hamsterdb-1.1.10 hamsterdb-1.1.9 hamsterdb-1.1.7 hamsterdb-1.1.6 2.0.4 Nothing to show New pull request Latest commit 2b17df5 May 29, 2016 cruppstahl issue #80: fixed streamvbyte compilation for c++11 Permalink Failed to load latest commit information. 3rdparty issue #80: fixed streamvbyte compilation for c++11 May 29, 2016 bin Copyright is now 2016 Jan 21, 2016 documentation Records now use the fast scan method whenever possible Mar 31, 2016 dotnet Minor fixes Apr 4, 2016 include Preparing 2.2.0 Mar 31, 2016 java Preparing 2.2.0 Mar 31, 2016 m4 issue #64: fixed segfault when recovering a database with a custom co… Jan 21, 2016 python Fixing regressions Mar 31, 2016 samples Adding two new UQI samples Mar 31, 2016 src Win32 fixes for 2.2.0 Mar 31, 2016 tools Minor fixes Apr 4, 2016 unittests Win32 fixes for 2.2.0 Mar 31, 2016 win32 Win32 fixes for 2.2.0 Mar 31, 2016 .gitattributes .gitattributes: fixed line endings for windows/unix Sep 28, 2012 .gitignore Removing BlockIndex pseudo compression Oct 12, 2015 .gitmodules Updated TODO, .gitmodules Feb 3, 2015 AUTHORS UpsBench now uses the new callback compare interface Jan 25, 2016 COPYING License is now GPL 3.0 Sep 25, 2015 CREDITS wscleaned the bugger - otherwise it's Hell to merge... Sep 28, 2012 ChangeLog issue #80: fixed streamvbyte compilation for c++11 May 29, 2016 INSTALL Preparations for 2.1.2 Jul 29, 2013 LICENSE.foss-exceptions Adding license exceptions Apr 12, 2016 Makefile.am Fixed distribution setup Feb 1, 2016 NEWS Renamed API, files Sep 25, 2015 README More fixes for 2.2.0 Mar 31, 2016 TODO Records now use the fast scan method whenever possible Mar 31, 2016 bootstrap.sh Fixed compiler warnings, reorganized the autoconf environment; no fun… Sep 5, 2013 config.h.in Compression cleanups Oct 2, 2015 configure.ac Always specify NDEBUG in release mode Mar 31, 2016 upscaledb.spec Preparing 2.2.0 Mar 31, 2016 README upscaledb 2.2.0                                   Mo 7. Mar 23:11:14 CET 2016 (C) Christoph Rupp, chris@crupp.de; http://www.upscaledb.com  This is the README file of upscaledb.  Contents:  1. About  upscaledb is a database engine written in C/C++. It is fast, production-proven and easy to use.  There are a few significant changes coming with this release:  1. A new query interface (uqi_select and uqi_select_range) with an SQL-ish     query language. The query engine can be extended through custom plugins,     which can also be loaded from an external library. You can therefore     run fast queries even when using the remote API or wrapper APIs like java,     .NET, Python or Erlang.  2. Records can now also be ""typed"", i.e. for uint32, uint64 and all other     currently supported types.  In addition there were a few (mostly minor) changes in the API and a bug fix.  CALL FOR ACTION:   I will upgrade some parts of the code to C++ 11 with the next releases,   starting with non-critical parts (i.e. unittests, tools). If your compiler   does not yet support C++11 then please tell me.   2. Changes  New Features * Records are now typed, just like the keys * A new query interface based on SQL-ish query statements  Bugfixes * issue #71: fixed growing journal file (thanks, Hitoshi Yonemichi) o issue #74: fixed ups_import for databases with record numbers (thanks, mjmckp) * issue #71: fixed ARM compilation (thanks, MrApe)  Other Changes * Added ups_at_exit cleanup function to release statically allocated 	resources * Removed UPS_PARTIAL and all related functionality * Removed UPS_FLUSH_TXN_IMMEDIATELY - it was deprecated and not used * UPS_DIRECT_ACCESS is now deprecated and only used internally * ups_info, ups_dump and ups_export now work for UPS_TYPE_CUSTOM databases * ups_cursor_get_record_size: size is now uint32_t* instead of uint64_t*  To see a list of all changes, look in the file ChangeLog.  3. Features  - Very fast sorted B+Tree with variable length keys - Basic schema support for POD types (i.e. uint32, uint64, real32 etc) - Very fast analytical functions - Can run as an in-memory database - Multiple databases in one file - Record number databases (""auto-increment"") - Duplicate keys - Logging and recovery - Unlimited number of parallel Transactions - Transparent AES encryption - Transparent CRC32 verification - Various compression codecs for journal, keys and records using      zlib, snappy, lzf - Compression for uint32 keys - Network access (remote databases) via TCP/Protocol Buffers - Very fast bi-directional database cursors - Configurable page size, cache size, key sizes etc - Runs on Linux, Unices, Microsoft Windows and other architectures - Uses memory mapped I/O for fast disk access (but falls back to read/write if     mmap is not available) - Uses 64bit file pointers and supports huge files (>2 GB) - Easy to use and well-documented - Open source and released under APL 2.0 license - Wrappers for C++, Java, .NET, Erlang, Python, Ada and others  4. Known Issues/Bugs  See https://github.com/cruppstahl/upscaledb/issues.  5. Compiling  5.1 Linux, MacOS and other Unix systems  To compile upscaledb, run ./configure, make, make install.  Run `./configure --help' for more options (i.e. static/dynamic library, build with debugging symbols etc).  5.2 Microsoft Visual Studio  A Solution file is provided for Microsoft Visual C++ in the ""win32"" folder for MSVC 2013. All libraries can be downloaded precompiled from the upscaledb webpage.  To download Microsoft Visual Studio Express Edition for free, go to http://msdn.microsoft.com/vstudio/express/visualc/default.aspx.  5.3 Dependencies  On Ubuntu, the following packages are required:   - libdb-dev (optional)   - protobuf-compiler   - libprotobuf-dev   - libgoogle-perftools-dev   - libboost-system-dev   - libboost-thread-dev   - libboost-dev   - (libuv needs to be installed from sources - see       https://github.com/joyent/libuv)  For Windows, precompiled dependencies are available here: https://github.com/cruppstahl/upscaledb-alien  6. Testing and Example Code  Make automatically compiles several example programs in the directory 'samples'. To see upscaledb in action, just run 'samples/db1' or any other sample. (or 'win32/out/samples/db1/db1.exe' on Windows platforms).  7. API Documentation  The header files in 'include/ups' have extensive comments. Also, a doxygen script is available; run 'make doc' to start doxygen. The generated documentation is also available on the upscaledb web page.  8. Porting upscaledb  Porting upscaledb shouldn't be too difficult. All operating system dependend functions are declared in '1os/*.h' and defined in '1os/os_win32.cc' or '1os/os_posix.cc'. Other compiler- and OS-specific macros are in 'include/ups/types.h'. Most likely, these are the only files which have to be touched. Also see item 9) for important macros.  9. Migrating files from older versions  Usually, upscaledb releases are backwards compatible. There are some exceptions, though. In this case tools are provided to migrate the database. First, export your existing database with ups_export linked against the old version. (ups_export links statically and will NOT be confused if your system has a newer version of upscaledb installed). Then use the newest version of ups_import to import the data into a new database. You can find ups_export and ups_import in the ""tools"" subdirectory.      Example (ups_export of 2.1.2 was renamed to ups_export-2.1.2 for clarity):      ups_export-2.1.2 input.db | ups_import --stdin output.db  10. Licensing  upscaledb is released under the GNU Public License (GPL) 3.0. See the file COPYING for more information.  For commercial use licenses are available. Visit http://upscaledb.com for more information.  11. Contact  Author of upscaledb is     Christoph Rupp     Paul-Preuss-Str. 63     80995 Muenchen/Germany     email: chris@crupp.de     web: http://www.upscaledb.com  12. Other Copyrights  The Google Protocol Buffers (""protobuf"") library is Copyright 2008, Google Inc. It has the following license:      Copyright 2008, Google Inc.     All rights reserved.      Redistribution and use in source and binary forms, with or without     modification, are permitted provided that the following conditions are     met:      * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above       copyright notice, this list of conditions and the following disclaimer       in the documentation and/or other materials provided with the       distribution.     * Neither the name of Google Inc. nor the names of its       contributors may be used to endorse or promote products derived from       this software without specific prior written permission.      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS     ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR     A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,     SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT     LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE     OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.      Code generated by the Protocol Buffer compiler is owned by the owner     of the input file used when generating it.  This code is not     standalone and requires a support library to be linked with it.  This     support library is itself covered by the above license.  The libuv library is part of the Node project: http://nodejs.org/ libuv may be distributed alone under Node's license:      Copyright Joyent, Inc. and other Node contributors. All rights reserved.     Permission is hereby granted, free of charge, to any person obtaining a copy     of this software and associated documentation files (the ""Software""), to     deal in the Software without restriction, including without limitation the     rights to use, copy, modify, merge, publish, distribute, sublicense, and/or     sell copies of the Software, and to permit persons to whom the Software is     furnished to do so, subject to the following conditions:      The above copyright notice and this permission notice shall be included in     all copies or substantial portions of the Software.      THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS     IN THE SOFTWARE.   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cruppstahl/upscaledb"	"An embedded ""typed"" key/value store with a built-in query interface. [GPLv3]"	"true"
"Debug"	"benchmark"	"https://github.com/google/benchmark"	"Google provided small microbenchmark support library. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"975"	"81"	"182"	"GitHub - google/benchmark: A microbenchmark support library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 81 Star 975 Fork 182 google/benchmark Code Issues 18 Pull requests 8 Pulse Graphs A microbenchmark support library 560 commits 3 branches 3 releases 49 contributors C++ 86.9% CMake 6.2% Python 5.8% Other 1.1% C++ CMake Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags abstract dartconfiguration master Nothing to show v1.0.0 v0.1.0 v0.0.9 Nothing to show New pull request Latest commit ebd37b1 Jul 13, 2016 SvenJo committed with dominichamon set cpuinfo_num_cpus on Windows (#254) Permalink Failed to load latest commit information. cmake Prevent re-execution of slow feature tests. May 23, 2016 include/benchmark Provide a better implementation of DoNotOptimize(...). Jul 11, 2016 src set cpuinfo_num_cpus on Windows (#254) Jul 13, 2016 test fix issue 235 (#236) Jun 3, 2016 .gitignore Coverage support with LCOV and GCOV May 13, 2015 .travis-setup.sh Upgrade travis to use CMake 2.8.12 and add Clang builders Apr 3, 2015 .travis.yml Mark sudo: required for Travis May 11, 2016 .ycm_extra_conf.py Better include path for YCM users Jan 16, 2014 AUTHORS Force DoNotOptimize operand to memory for both gcc and clang May 26, 2016 CMakeLists.txt Add export linker flags policy to cmake (#251) Jul 6, 2016 CONTRIBUTING.md Add information about CLAs. Feb 12, 2014 CONTRIBUTORS Force DoNotOptimize operand to memory for both gcc and clang May 26, 2016 LICENSE Add LICENSE and copyright headers Jan 9, 2014 README.md Provide a better implementation of DoNotOptimize(...). Jul 11, 2016 appveyor.yml Support MSVC on appveyor Feb 12, 2016 mingw.py Added a script that can download MinGW Mar 31, 2015 README.md benchmark A library to support the benchmarking of functions, similar to unit-tests. Discussion group: https://groups.google.com/d/forum/benchmark-discuss IRC channel: https://freenode.net #googlebenchmark Example usage Basic usage Define a function that executes the code to be measured. static void BM_StringCreation(benchmark::State& state) {   while (state.KeepRunning())     std::string empty_string; } // Register the function as a benchmark BENCHMARK(BM_StringCreation);  // Define another benchmark static void BM_StringCopy(benchmark::State& state) {   std::string x = ""hello"";   while (state.KeepRunning())     std::string copy(x); } BENCHMARK(BM_StringCopy);  BENCHMARK_MAIN(); Passing arguments Sometimes a family of benchmarks can be implemented with just one routine that takes an extra argument to specify which one of the family of benchmarks to run. For example, the following code defines a family of benchmarks for measuring the speed of memcpy() calls of different lengths: static void BM_memcpy(benchmark::State& state) {   char* src = new char[state.range_x()];   char* dst = new char[state.range_x()];   memset(src, 'x', state.range_x());   while (state.KeepRunning())     memcpy(dst, src, state.range_x());   state.SetBytesProcessed(int64_t(state.iterations()) *                           int64_t(state.range_x()));   delete[] src;   delete[] dst; } BENCHMARK(BM_memcpy)->Arg(8)->Arg(64)->Arg(512)->Arg(1<<10)->Arg(8<<10); The preceding code is quite repetitive, and can be replaced with the following short-hand. The following invocation will pick a few appropriate arguments in the specified range and will generate a benchmark for each such argument. BENCHMARK(BM_memcpy)->Range(8, 8<<10); By default the arguments in the range are generated in multiples of eight and the command above selects [ 8, 64, 512, 4k, 8k ]. In the following code the range multiplier is changed to multiples of two. BENCHMARK(BM_memcpy)->RangeMultiplier(2)->Range(8, 8<<10); Now arguments generated are [ 8, 16, 32, 64, 128, 256, 512, 1024, 2k, 4k, 8k ]. You might have a benchmark that depends on two inputs. For example, the following code defines a family of benchmarks for measuring the speed of set insertion. static void BM_SetInsert(benchmark::State& state) {   while (state.KeepRunning()) {     state.PauseTiming();     std::set<int> data = ConstructRandomSet(state.range_x());     state.ResumeTiming();     for (int j = 0; j < state.range_y(); ++j)       data.insert(RandomNumber());   } } BENCHMARK(BM_SetInsert)     ->ArgPair(1<<10, 1)     ->ArgPair(1<<10, 8)     ->ArgPair(1<<10, 64)     ->ArgPair(1<<10, 512)     ->ArgPair(8<<10, 1)     ->ArgPair(8<<10, 8)     ->ArgPair(8<<10, 64)     ->ArgPair(8<<10, 512); The preceding code is quite repetitive, and can be replaced with the following short-hand. The following macro will pick a few appropriate arguments in the product of the two specified ranges and will generate a benchmark for each such pair. BENCHMARK(BM_SetInsert)->RangePair(1<<10, 8<<10, 1, 512); For more complex patterns of inputs, passing a custom function to Apply allows programmatic specification of an arbitrary set of arguments on which to run the benchmark. The following example enumerates a dense range on one parameter, and a sparse range on the second. static void CustomArguments(benchmark::internal::Benchmark* b) {   for (int i = 0; i <= 10; ++i)     for (int j = 32; j <= 1024*1024; j *= 8)       b->ArgPair(i, j); } BENCHMARK(BM_SetInsert)->Apply(CustomArguments); Calculate asymptotic complexity (Big O) Asymptotic complexity might be calculated for a family of benchmarks. The following code will calculate the coefficient for the high-order term in the running time and the normalized root-mean square error of string comparison. static void BM_StringCompare(benchmark::State& state) {   std::string s1(state.range_x(), '-');   std::string s2(state.range_x(), '-');   while (state.KeepRunning()) {     benchmark::DoNotOptimize(s1.compare(s2));   }   state.SetComplexityN(state.range_x()); } BENCHMARK(BM_StringCompare)     ->RangeMultiplier(2)->Range(1<<10, 1<<18)->Complexity(benchmark::oN); As shown in the following invocation, asymptotic complexity might also be calculated automatically. BENCHMARK(BM_StringCompare)     ->RangeMultiplier(2)->Range(1<<10, 1<<18)->Complexity(); The following code will specify asymptotic complexity with a lambda function, that might be used to customize high-order term calculation. BENCHMARK(BM_StringCompare)->RangeMultiplier(2)     ->Range(1<<10, 1<<18)->Complexity([](int n)->double{return n; }); Templated benchmarks Templated benchmarks work the same way: This example produces and consumes messages of size sizeof(v) range_x times. It also outputs throughput in the absence of multiprogramming. template <class Q> int BM_Sequential(benchmark::State& state) {   Q q;   typename Q::value_type v;   while (state.KeepRunning()) {     for (int i = state.range_x(); i--; )       q.push(v);     for (int e = state.range_x(); e--; )       q.Wait(&v);   }   // actually messages, not bytes:   state.SetBytesProcessed(       static_cast<int64_t>(state.iterations())*state.range_x()); } BENCHMARK_TEMPLATE(BM_Sequential, WaitQueue<int>)->Range(1<<0, 1<<10); Three macros are provided for adding benchmark templates. #if __cplusplus >= 201103L // C++11 and greater. #define BENCHMARK_TEMPLATE(func, ...) // Takes any number of parameters. #else // C++ < C++11 #define BENCHMARK_TEMPLATE(func, arg1) #endif #define BENCHMARK_TEMPLATE1(func, arg1) #define BENCHMARK_TEMPLATE2(func, arg1, arg2) Passing arbitrary arguments to a benchmark In C++11 it is possible to define a benchmark that takes an arbitrary number of extra arguments. The BENCHMARK_CAPTURE(func, test_case_name, ...args) macro creates a benchmark that invokes func with the benchmark::State as the first argument followed by the specified args.... The test_case_name is appended to the name of the benchmark and should describe the values passed. template <class ...ExtraArgs>` void BM_takes_args(benchmark::State& state, ExtraArgs&&... extra_args) {   [...] } // Registers a benchmark named ""BM_takes_args/int_string_test` that passes // the specified values to `extra_args`. BENCHMARK_CAPTURE(BM_takes_args, int_string_test, 42, std::string(""abc"")); Note that elements of ...args may refer to global variables. Users should avoid modifying global state inside of a benchmark. Multithreaded benchmarks In a multithreaded test (benchmark invoked by multiple threads simultaneously), it is guaranteed that none of the threads will start until all have called KeepRunning, and all will have finished before KeepRunning returns false. As such, any global setup or teardown can be wrapped in a check against the thread index: static void BM_MultiThreaded(benchmark::State& state) {   if (state.thread_index == 0) {     // Setup code here.   }   while (state.KeepRunning()) {     // Run the test as normal.   }   if (state.thread_index == 0) {     // Teardown code here.   } } BENCHMARK(BM_MultiThreaded)->Threads(2); If the benchmarked code itself uses threads and you want to compare it to single-threaded code, you may want to use real-time (""wallclock"") measurements for latency comparisons: BENCHMARK(BM_test)->Range(8, 8<<10)->UseRealTime(); Without UseRealTime, CPU time is used by default. Manual timing For benchmarking something for which neither CPU time nor real-time are correct or accurate enough, completely manual timing is supported using the UseManualTime function. When UseManualTime is used, the benchmarked code must call SetIterationTime once per iteration of the KeepRunning loop to report the manually measured time. An example use case for this is benchmarking GPU execution (e.g. OpenCL or CUDA kernels, OpenGL or Vulkan or Direct3D draw calls), which cannot be accurately measured using CPU time or real-time. Instead, they can be measured accurately using a dedicated API, and these measurement results can be reported back with SetIterationTime. static void BM_ManualTiming(benchmark::State& state) {   int microseconds = state.range_x();   std::chrono::duration<double, std::micro> sleep_duration {     static_cast<double>(microseconds)   };    while (state.KeepRunning()) {     auto start = std::chrono::high_resolution_clock::now();     // Simulate some useful workload with a sleep     std::this_thread::sleep_for(sleep_duration);     auto end   = std::chrono::high_resolution_clock::now();      auto elapsed_seconds =       std::chrono::duration_cast<std::chrono::duration<double>>(         end - start);      state.SetIterationTime(elapsed_seconds.count());   } } BENCHMARK(BM_ManualTiming)->Range(1, 1<<17)->UseManualTime(); Preventing optimisation To prevent a value or expression from being optimized away by the compiler the benchmark::DoNotOptimize(...) and benchmark::ClobberMemory() functions can be used. static void BM_test(benchmark::State& state) {   while (state.KeepRunning()) {       int x = 0;       for (int i=0; i < 64; ++i) {         benchmark::DoNotOptimize(x += i);       }   } } DoNotOptimize(<expr>) forces the result of <expr> to be stored in either memory or a register. For GNU based compilers it acts as read/write barrier for global memory. More specifically it forces the compiler to flush pending writes to memory and reload any other values as necessary. Note that DoNotOptimize(<expr>) does not prevent optimizations on <expr> in any way. <expr> may even be removed entirely when the result is already known. For example:   /* Example 1: `<expr>` is removed entirely. */   int foo(int x) { return x + 42; }   while (...) DoNotOptimize(foo(0)); // Optimized to DoNotOptimize(42);    /*  Example 2: Result of '<expr>' is only reused */   int bar(int) __attribute__((const));   while (...) DoNotOptimize(bar(0)); // Optimized to:   // int __result__ = bar(0);   // while (...) DoNotOptimize(__result__); The second tool for preventing optimizations is ClobberMemory(). In essence ClobberMemory() forces the compiler to perform all pending writes to global memory. Memory managed by block scope objects must be ""escaped"" using DoNotOptimize(...) before it can be clobbered. In the below example ClobberMemory() prevents the call to v.push_back(42) from being optimized away. static void BM_vector_push_back(benchmark::State& state) {   while (state.KeepRunning()) {     std::vector<int> v;     v.reserve(1);     benchmark::DoNotOptimize(v.data()); // Allow v.data() to be clobbered.     v.push_back(42);     benchmark::ClobberMemory(); // Force 42 to be written to memory.   } } Note that ClobberMemory() is only available for GNU based compilers. Set time unit manually If a benchmark runs a few milliseconds it may be hard to visually compare the measured times, since the output data is given in nanoseconds per default. In order to manually set the time unit, you can specify it manually: BENCHMARK(BM_test)->Unit(benchmark::kMillisecond); Controlling number of iterations In all cases, the number of iterations for which the benchmark is run is governed by the amount of time the benchmark takes. Concretely, the number of iterations is at least one, not more than 1e9, until CPU time is greater than the minimum time, or the wallclock time is 5x minimum time. The minimum time is set as a flag --benchmark_min_time or per benchmark by calling MinTime on the registered benchmark object. Reporting the mean and standard devation by repeated benchmarks By default each benchmark is run once and that single result is reported. However benchmarks are often noisy and a single result may not be representative of the overall behavior. For this reason it's possible to repeatedly rerun the benchmark. The number of runs of each benchmark is specified globally by the --benchmark_repetitions flag or on a per benchmark basis by calling Repetitions on the registered benchmark object. When a benchmark is run more than once the mean and standard deviation of the runs will be reported. Fixtures Fixture tests are created by first defining a type that derives from ::benchmark::Fixture and then creating/registering the tests using the following macros: BENCHMARK_F(ClassName, Method) BENCHMARK_DEFINE_F(ClassName, Method) BENCHMARK_REGISTER_F(ClassName, Method) For Example: class MyFixture : public benchmark::Fixture {};  BENCHMARK_F(MyFixture, FooTest)(benchmark::State& st) {    while (st.KeepRunning()) {      ...   } }  BENCHMARK_DEFINE_F(MyFixture, BarTest)(benchmark::State& st) {    while (st.KeepRunning()) {      ...   } } /* BarTest is NOT registered */ BENCHMARK_REGISTER_F(MyFixture, BarTest)->Threads(2); /* BarTest is now registered */ Exiting Benchmarks in Error When errors caused by external influences, such as file I/O and network communication, occur within a benchmark the State::SkipWithError(const char* msg) function can be used to skip that run of benchmark and report the error. Note that only future iterations of the KeepRunning() are skipped. Users may explicitly return to exit the benchmark immediately. The SkipWithError(...) function may be used at any point within the benchmark, including before and after the KeepRunning() loop. For example: static void BM_test(benchmark::State& state) {   auto resource = GetResource();   if (!resource.good()) {       state.SkipWithError(""Resource is not good!"");       // KeepRunning() loop will not be entered.   }   while (state.KeepRunning()) {       auto data = resource.read_data();       if (!resource.good()) {         state.SkipWithError(""Failed to read data!"");         break; // Needed to skip the rest of the iteration.      }      do_stuff(data);   } } Output Formats The library supports multiple output formats. Use the --benchmark_format=<tabular|json|csv> flag to set the format type. tabular is the default format. The Tabular format is intended to be a human readable format. By default the format generates color output. Context is output on stderr and the tabular data on stdout. Example tabular output looks like: Benchmark                               Time(ns)    CPU(ns) Iterations ---------------------------------------------------------------------- BM_SetInsert/1024/1                        28928      29349      23853  133.097kB/s   33.2742k items/s BM_SetInsert/1024/8                        32065      32913      21375  949.487kB/s   237.372k items/s BM_SetInsert/1024/10                       33157      33648      21431  1.13369MB/s   290.225k items/s  The JSON format outputs human readable json split into two top level attributes. The context attribute contains information about the run in general, including information about the CPU and the date. The benchmarks attribute contains a list of ever benchmark run. Example json output looks like: {   ""context"": {     ""date"": ""2015/03/17-18:40:25"",     ""num_cpus"": 40,     ""mhz_per_cpu"": 2801,     ""cpu_scaling_enabled"": false,     ""build_type"": ""debug""   },   ""benchmarks"": [     {       ""name"": ""BM_SetInsert/1024/1"",       ""iterations"": 94877,       ""real_time"": 29275,       ""cpu_time"": 29836,       ""bytes_per_second"": 134066,       ""items_per_second"": 33516     },     {       ""name"": ""BM_SetInsert/1024/8"",       ""iterations"": 21609,       ""real_time"": 32317,       ""cpu_time"": 32429,       ""bytes_per_second"": 986770,       ""items_per_second"": 246693     },     {       ""name"": ""BM_SetInsert/1024/10"",       ""iterations"": 21393,       ""real_time"": 32724,       ""cpu_time"": 33355,       ""bytes_per_second"": 1199226,       ""items_per_second"": 299807     }   ] } The CSV format outputs comma-separated values. The context is output on stderr and the CSV itself on stdout. Example CSV output looks like: name,iterations,real_time,cpu_time,bytes_per_second,items_per_second,label ""BM_SetInsert/1024/1"",65465,17890.7,8407.45,475768,118942, ""BM_SetInsert/1024/8"",116606,18810.1,9766.64,3.27646e+06,819115, ""BM_SetInsert/1024/10"",106365,17238.4,8421.53,4.74973e+06,1.18743e+06,  Debug vs Release By default, benchmark builds as a debug library. You will see a warning in the output when this is the case. To build it as a release library instead, use: cmake -DCMAKE_BUILD_TYPE=Release  To enable link-time optimisation, use cmake -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_LTO=true  Linking against the library When using gcc, it is necessary to link against pthread to avoid runtime exceptions. This is due to how gcc implements std::thread. See issue #67 for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/benchmark"	"Google provided small microbenchmark support library. [Apache2]"	"true"
"Debug"	"Boost.Test"	"http://www.boost.org/doc/libs/master/libs/test/doc/html/index.html"	"Boost Test Library. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Boost.Test - master Boost C++ Libraries ...one of the most highly regarded and expertly designed C++ library projects in the world. — Herb Sutter and Andrei Alexandrescu, C++ Coding Standards This is the documentation for a development version of boost Boost.Test Gennadiy Rozental Raffi Enficiaud Copyright © 2001-2016 Boost.Test contributors Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) Table of Contents Introduction Design rationale How to read this documentation Usage variants Declaring and organizing tests Test cases Test cases without parameters Data-driven test cases Template test cases Parametrized test cases Test suite Master Test Suite Decorators Suite-level decorators Explicit decorator declaration Fixtures Fixture models Test case fixture Test suite entry/exit fixture Global fixture Managing test dependencies Grouping tests into logical units by labels Enabling or disabling test unit execution Adding semantic to a test Summary of the API for declaring and organizing tests Writing unit tests Assertion severity level BOOST_TEST: universal and general purpose assertions Reported information Extended comparisons support Floating point comparison C-string comparison Collections comparison Bitwise comparison Exception correctness Time-out for test cases Expected failures specification Custom predicate support Output streams testing tool BOOST_TEST: details on expressions Debugging the assertions Summary of the API for writing tests Controlling outputs Test log output Verbosity of the logs Disabling automatic printing for specific types Custom messages Checkpoints Contexts Logging floating point type numbers Log formats Human readable log format XML based log output format Report formats Human readable report format XML based report output format Compile time configuration Log output stream redirection Log level configuration Predefined log format selection Custom log format support Progress display Summary of the API for controlling the output Runtime parameters Test unit filtering Summary of run-time parameters Advanced Usage Scenarios Building the Unit Test Framework Test module's entry point Test module's initialization Test module runner Single-header variant customizations Customizing the module's entry point Customizing the module's initialization function Static-library variant customizations Customizing the module's entry point Customizing the module's initialization function Shared-library variant customizations Customizing the module's entry point Customizing the module's initialization function The external test runner usage variant The obsolete initialization function Practical usage recommendations General IDE usage recommendations Command line usage recommendations Tutorials Test driven development with Boost.Test A testing framework, what for? Web Wisdom Frequently Asked Questions Glossary Change log Acknowledgements Unit Test Framework API reference Tests declaration and organization BOOST_TEST_CASE BOOST_AUTO_TEST_CASE BOOST_AUTO_TEST_CASE_TEMPLATE BOOST_TEST_CASE_TEMPLATE BOOST_TEST_CASE_TEMPLATE_FUNCTION BOOST_PARAM_TEST_CASE BOOST_DATA_TEST_CASE BOOST_DATA_TEST_CASE_F BOOST_TEST_SUITE BOOST_AUTO_TEST_SUITE BOOST_AUTO_TEST_SUITE_END BOOST_FIXTURE_TEST_CASE BOOST_FIXTURE_TEST_SUITE BOOST_GLOBAL_FIXTURE BOOST_TEST_DECORATOR depends_on (decorator) description (decorator) enabled / disabled (decorator) enable_if (decorator) fixture (decorator) label (decorator) precondition (decorator) Reference API for writing tests BOOST_TEST expected_failures (decorator) timeout (decorator) tolerance (decorator) BOOST_<level> BOOST_<level>_BITWISE_EQUAL BOOST_<level>_EQUAL BOOST_<level>_EQUAL_COLLECTIONS BOOST_<level>_CLOSE BOOST_<level>_CLOSE_FRACTION BOOST_<level>_GE BOOST_<level>_GT BOOST_<level>_LE BOOST_<level>_LT BOOST_<level>_MESSAGE BOOST_<level>_NE BOOST_<level>_PREDICATE BOOST_<level>_NO_THROW BOOST_<level>_THROW BOOST_<level>_EXCEPTION BOOST_<level>_SMALL BOOST_AUTO_TEST_CASE_EXPECTED_FAILURES BOOST_ERROR BOOST_FAIL BOOST_IS_DEFINED BOOST_TEST_TOOLS_UNDER_DEBUGGER BOOST_TEST_TOOLS_DEBUGGABLE Controlling tests outputs BOOST_TEST_CHECKPOINT BOOST_TEST_PASSPOINT BOOST_TEST_MESSAGE BOOST_TEST_INFO BOOST_TEST_CONTEXT BOOST_TEST_DONT_PRINT_LOG_VALUE Runtime parameters reference auto_start_dbg build_info catch_system_errors color_output detect_fp_exceptions detect_memory_leaks help list_content list_labels log_format log_level log_sink output_format random report_format report_level report_memory_leaks_to report_sink result_code run_test save_pattern show_progress use_alt_stack usage wait_for_debugger Build scenarios and behaviors BOOST_TEST_MAIN BOOST_TEST_MODULE BOOST_TEST_ALTERNATIVE_INIT_API BOOST_TEST_NO_LIB BOOST_TEST_DYN_LINK BOOST_TEST_NO_MAIN BOOST_TEST_DISABLE_ALT_STACK Reference Header <boost/test/data/config.hpp> Header <boost/test/data/for_each_sample.hpp> Header <boost/test/data/monomorphic/array.hpp> Header <boost/test/data/monomorphic/collection.hpp> Header <boost/test/data/monomorphic/fwd.hpp> Header <boost/test/data/monomorphic/generate.hpp> Header <boost/test/data/monomorphic/generators.hpp> Header <boost/test/data/monomorphic/generators/keywords.hpp> Header <boost/test/data/monomorphic/generators/random.hpp> Header <boost/test/data/monomorphic/generators/xrange.hpp> Header <boost/test/data/monomorphic/grid.hpp> Header <boost/test/data/monomorphic/initializer_list.hpp> Header <boost/test/data/monomorphic/join.hpp> Header <boost/test/data/monomorphic/singleton.hpp> Header <boost/test/data/monomorphic/zip.hpp> Header <boost/test/data/size.hpp> Header <boost/test/data/test_case.hpp> Header <boost/test/debug.hpp> Header <boost/test/debug_config.hpp> Header <boost/test/execution_monitor.hpp> Header <boost/test/framework.hpp> Header <boost/test/output/compiler_log_formatter.hpp> Header <boost/test/output/plain_report_formatter.hpp> Header <boost/test/output/xml_log_formatter.hpp> Header <boost/test/output/xml_report_formatter.hpp> Header <boost/test/parameterized_test.hpp> Header <boost/test/progress_monitor.hpp> Header <boost/test/results_collector.hpp> Header <boost/test/results_reporter.hpp> Header <boost/test/tools/assertion_result.hpp> Header <boost/test/tools/detail/bitwise_manip.hpp> Header <boost/test/tools/detail/lexicographic_manip.hpp> Header <boost/test/tools/detail/per_element_manip.hpp> Header <boost/test/tools/detail/tolerance_manip.hpp> Header <boost/test/tools/floating_point_comparison.hpp> Header <boost/test/tools/output_test_stream.hpp> Header <boost/test/tree/test_unit.hpp> Header <boost/test/unit_test.hpp> Header <boost/test/unit_test_log_formatter.hpp> Header <boost/test/unit_test_parameters.hpp> Header <boost/test/utils/algorithm.hpp> Header <boost/test/utils/is_forward_iterable.hpp> Header <boost/test/utils/named_params.hpp> Last revised: July 15, 2016 at 01:33:56 GMT"	"null"	"null"	"Boost Test Library. [Boost]"	"true"
"Debug"	"doctest"	"https://github.com/onqtam/doctest"	"The lightest feature rich C++ single header testing framework. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"570"	"23"	"23"	"GitHub - onqtam/doctest: The lightest feature-rich C++ single-header testing framework for unit tests and TDD - docs: Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 570 Fork 23 onqtam/doctest Code Issues 23 Pull requests 0 Pulse Graphs The lightest feature-rich C++ single-header testing framework for unit tests and TDD - docs: http://bit.ly/1rsQ0Br 194 commits 3 branches 1 release 2 contributors C++ 85.7% Python 8.1% CMake 6.2% C++ Python CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coverity_scan dev master Nothing to show 1.0.0 Nothing to show New pull request Latest commit d62b666 May 22, 2016 onqtam fixed broken links in docs Permalink Failed to load latest commit information. doc fixed broken links in docs May 22, 2016 doctest disabled the test of the ""subcases_and_bdd"" example for GCC 4.4 under… May 22, 2016 examples disabled the test of the ""subcases_and_bdd"" example for GCC 4.4 under… May 22, 2016 scripts disabled the test of the ""subcases_and_bdd"" example for GCC 4.4 under… May 22, 2016 .clang-format squashing git history for the last time Mar 5, 2016 .gitignore benchmarking script done May 22, 2016 .gitmodules benchmarking script done May 22, 2016 .travis.yml disable valgrind for osx even for 64 bit builds... May 22, 2016 CHANGELOG.md disabled the test of the ""subcases_and_bdd"" example for GCC 4.4 under… May 22, 2016 CMakeLists.txt - building with 5 studios on appveyor! May 3, 2016 LICENSE.txt squashing git history for the last time Mar 5, 2016 README.md fixed broken links in docs May 22, 2016 appveyor.yml version 1.0.0 release! May 22, 2016 README.md The lightest feature rich C++ single header testing framework The doctest library is inspired by the unittest {} functionality of the D programming language and Python's docstrings - tests can be considered a form of documentation and should be able to reside near the production code which they test. A complete example with a self-registering test that compiles to an executable looks like this: #define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN #include ""doctest.h""  int factorial(int number) { return number <= 1 ? number : factorial(number - 1) * number; }  TEST_CASE(""testing the factorial function"") {     CHECK(factorial(1) == 1);     CHECK(factorial(2) == 2);     CHECK(factorial(10) == 3628800); } Note how a standard C++ operator for the comparison is used - doctest has only one core assertion macro (instead of many for less than, equals, greater than...) - yet the full expression is decomposed and the left and right values are logged. It is modeled after Catch which is currently the most popular and easy to use alternative for testing in C++ There are many C++ testing frameworks - Catch, Boost.Test, UnitTest++, lest, bandit, igloo, xUnit++, CppTest, CppUnit, CxxTest, cpputest, googletest, cute and many other. What makes doctest different is that it is ultra light on compile times (by orders of magnitude) and is unintrusive. The key differences between it and other testing libraries are: Ultra light - below 10ms of compile time overhead for including the header in a source file Offers a way to remove everything testing-related from the binary with the DOCTEST_CONFIG_DISABLE identifier Doesn't pollute the global namespace (everything is in the doctest namespace) and doesn't drag any headers with it Doesn't produce any warnings even on the most aggressive warning levels for MSVC/GCC/Clang Very portable and well tested C++98 - per commit tested on CI with over 200 different builds (valgrind, sanitizers...) Just one header and no external dependencies apart from the C/C++ standard library! (well... same as Catch...) This allows the library to be used in more ways than any other - tests can be written directly in the production code! This makes the barrier for writing tests much lower - you don't have to: 1. make a separate source file 2. include a bunch of stuff in it 3. add it to the build system and 4. add it to source control - You can just write the tests for a class or a piece of functionality at the bottom of it's source file - or even header file! Tests in the production code can be thought of as documentation or up to date comments - showing how an API is used Tests can be shipped to the customer with the software to diagnose a bug faster TDD in C++ has never been easier! The library can be used like any other if you don't like the idea of mixing production code and tests - check out the features master branch dev branch Documentation Features and design goals - the complete list of features Roadmap - upcoming features Tutorial - make sure you have read it before the other parts of the documentation Benchmarks - compile-time supremacy Examples Assertion macros Test cases, subcases and test fixtures Command line Configuration String conversions main() entry point and dealing with shared objects FAQ Contributing Support the development of the project with donations! There is a list of planned features which are all important and big - see the roadmap. I work on this project in my spare time and every cent is a big deal. I took a break from working in the industry to make open source software. Contributions in the form of issues and pull requests are welcome as well. Open an issue for a discussion before making a pull request to make sure the contribution goes smoothly. This framework has some design goals which must be kept. Make sure you have read the features and design goals page. The master branch is the stable one with the latest release and the dev branch is on the bleeding edge. All the framework tests (using ctest) have their output collected when the CMake TEST_MODE variable is set to COLLECT (making the new reference output) and later the tests are ran on the CI services (travis and appveyor) - their output is compared with the current reference output in the repository with the COMPARE mode (default mode is COMPARE). Code should be formatted with a recent-enough clang-format using the config file in the root of the repo (or I will do it...) Testing with compilers different from GCC/Clang/MSVC (and more platforms) is something the project would benefit from. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/onqtam/doctest"	"The lightest feature rich C++ single header testing framework. [MIT]"	"true"
"Debug"	"Catch"	"https://github.com/philsquared/Catch"	"A modern, C++-native, header-only, framework for unit-tests, TDD and BDD. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3342"	"266"	"483"	"GitHub - philsquared/Catch: A modern, C++-native, header-only, framework for unit-tests, TDD and BDD Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 266 Star 3,342 Fork 483 philsquared/Catch Code Issues 217 Pull requests 61 Wiki Pulse Graphs A modern, C++-native, header-only, framework for unit-tests, TDD and BDD http://C++ Automated Test Cases in Headers 1,403 commits 2 branches 38 releases 47 contributors C++ 94.7% Python 1.8% Objective-C 1.7% Groff 0.7% Objective-C++ 0.4% C 0.4% Other 0.3% C++ Python Objective-C Groff Objective-C++ C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop-v2 master Nothing to show v2.0.0-develop.3 v2.0.0-develop.1 v2.0.0-develop-2 v1.5.6 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.0 v1.3.5 v1.3.4 v1.3.3 v1.3.1 v1.3.0 v1.3.0-develop.4 v1.3.0-develop.3 v1.3.0-develop.2 v1.3.0-develop.1 v1.2.1 v1.2.1-develop.16 v1.2.1-develop.15 v1.2.1-develop.14 v1.2.1-develop.12 v1.2.1-develop.11 v1.2.1-develop.10 v1.2.1-develop.9 v1.2.1-develop.8 v1.2.1-develop.7 v1.2.1-develop.6 v1.2.1-develop.5 v1.2.1-develop.4 v1.2.1-develop.3 v1.2.1-develop.2 v1.2.1-develop.1 v1.2.0 V1.5.0 Nothing to show New pull request Latest commit 35f5105 Jun 9, 2016 philsquared v1.5.6 Permalink Failed to load latest commit information. docs Update tutorial.md Apr 4, 2016 include v1.5.6 Jun 9, 2016 projects Updated embedded Clara to 0.0.2.3 Apr 23, 2016 scripts Removed unnecessary parentheses Nov 4, 2015 single_include v1.5.6 Jun 9, 2016 .gitattributes Git Attributes, with control for line-endings Oct 18, 2013 .gitignore Ignore *.xccheckout Mar 27, 2015 .travis.yml Pins LLVM 3.8 (stable) instead of tracking the nightly repository May 7, 2016 LICENSE_1_0.txt Fixed crlf issue Nov 7, 2013 README.md v1.5.6 Jun 9, 2016 catch-logo-small.png Added logo to readme Mar 21, 2013 README.md v1.5.6 Build status (on Travis CI) The latest, single header, version can be downloaded directly using this link What's the Catch? Catch stands for C++ Automated Test Cases in Headers and is a multi-paradigm automated test framework for C++ and Objective-C (and, maybe, C). It is implemented entirely in a set of header files, but is packaged up as a single header for extra convenience. How to use it This documentation comprises these three parts: Why do we need yet another C++ Test Framework? Tutorial - getting started Reference section - all the details More Issues and bugs can be raised on the Issue tracker on GitHub For discussion or questions please use the dedicated Google Groups forum Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/philsquared/Catch"	"A modern, C++-native, header-only, framework for unit-tests, TDD and BDD. [Boost]"	"true"
"Debug"	"Celero"	"https://github.com/DigitalInBlue/Celero"	"C++ Benchmarking Framework. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"162"	"28"	"32"	"GitHub - DigitalInBlue/Celero: C++ Benchmark Authoring Library/Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 162 Fork 32 DigitalInBlue/Celero Code Issues 5 Pull requests 1 Wiki Pulse Graphs C++ Benchmark Authoring Library/Framework 171 commits 2 branches 20 releases 9 contributors C++ 83.5% Shell 8.4% Python 4.6% Makefile 1.7% CMake 1.3% M4 0.5% C++ Shell Python Makefile CMake M4 Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.2.0 v1.1.1 v1.1.0 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.1.0 2.0.5 Nothing to show New pull request Latest commit 4296281 Apr 13, 2016 DigitalInBlue #noissue Minor documentation update. Permalink Failed to load latest commit information. experiments #noissue Code to compute some reasonable iteration count and sample s… Mar 28, 2016 include/celero #noissue Code to compute some reasonable iteration count and sample s… Mar 28, 2016 src #noissue Code to compute some reasonable iteration count and sample s… Mar 28, 2016 test #58 Fixed iterations on simple test cases. Jul 6, 2015 .gitattributes Initial GitHub Commit Jan 11, 2013 .gitignore #13 Updated DoNotOptimizeAway Jan 16, 2014 .travis.yml Readded the .travis.yml from v1.2.0 Jul 8, 2015 CMakeLists.txt #noissue Update of Copyright. Mar 20, 2016 CONTRIBUTING.md Added a ""Contributing.md"" file. Mar 22, 2015 Doxyfile Minor updates Jan 14, 2014 README.md #noissue Minor documentation update. Apr 13, 2016 license.txt Updated license file. Jul 10, 2014 README.md Celero C++ Benchmarking Library Copyright 2016 John Farrier Apache 2.0 License Travis CI Branch Status origin/master: origin/develop: Overview Developing consistent and meaningful benchmark results for code is a complex task. Measurement tools exist (Intel® VTune™ Amplifier, SmartBear AQTime, Valgrind, etc.) external to applications, but they are sometimes expensive for small teams or cumbersome to utilize. This project, Celero, aims to be a small library which can be added to a C++ project and perform benchmarks on code in a way which is easy to reproduce, share, and compare among individual runs, developers, or projects. Celero uses a framework similar to that of GoogleTest to make its API easier to use and integrate into a project. Make automated benchmarking as much a part of your development process as automated testing. Celero uses CMake to provide cross-platform builds. It does require a modern compiler (Visual C++ 2012+, GCC 4.7+, Clang 2.9+) due to its use of C++11. Once Celero is added to your project. You can create dedicated benchmark projects and source files. For convenience, there is single header file and a CELERO_MAIN macro that can be used to provide a main() for your benchmark project that will automatically execute all of your benchmark tests. Command Line <celeroOutputExecutable> [-g groupNameToRun] [-t resultsTable.csv] [-j junitOutputFile.xml] [-a resultArchive.csv] [-d numberOfIterationsPerDistribution] [-h]  -g Use this option to run only one benchmark group out of all benchmarks contained within a test executable. -t Writes all results to a CSV file. Very useful when using problem sets to graph performance. -j Writes JUnit formatted XML output. To utilize JUnit output, benchmarks must use the ""_TEST"" version of the macros and specify an expected baseline multiple. When the test exceeds this multiple, the JUnit output will indicate a failure. -a Builds or updates an archive of historical results, tracking current, best, and worst results for each benchmark. -d (Experimental) builds a plot of four different sample sizes to investigate the distribution of sample results. Celero Basics Background The goal, generally, of writing benchmarks is to measure the performance of a piece of code. Benchmarks are useful for comparing multiple solutions to the same problem to select the most appropriate one. Other times, benchmarks can highlight the performance impact of design or algorithm changes and quantify them in a meaningful way. By measuring code performance, you eliminate errors in your assumptions about what the ""right"" solution is for performance. Only through measurement can you confirm that using a lookup table, for example, is faster than computing a value. Such lore (which is often repeated) can lead to bad design decisions and, ultimately, slower code. The goal in writing good benchmarking code is to eliminate all of the noise and overhead, and measure just the code under test. Sources of noise in the measurements include clock resolution noise, operating system background operations, test setup/teardown, framework overhead, and other unrelated system activity. At a theoretical level we want to measure ""t"", the time to execute the code under test. In reality, we measure ""t"" plus all of this measurement noise. These extraneous contributors to our measurement of ""t"" fluctuate over time. Therefore, we want to try to isolate ""t'. The way this is accomplished is by making many measurements, but only keeping the smallest total. The smallest total is necessarily the one with the smallest noise contribution and closest to the actual time ""t"". Once this measurement is obtained, it has little meaning in isolation. It is important to create a baseline test by which to compare. A baseline should generally be a ""classic"" or ""pure"" solution to the problem on which you are measuring a solution. Once you have a baseline, you have a meaningful time to compare your algorithm against. Simply saying that your fancy sorting algorithm (fSort) sorted a million elements in 10 milliseconds is not sufficient by itself. However, compare that to a classic sorting algorithm baseline such as quick sort (qSort) and then you can say that fSort is 50% faster than qSort on a million elements. That is a meaningful and powerful measurement. Implementation Celero heavily utilizes C++11 features that are available in both Visual C++ 2012 and GCC 4.7. This greatly aided in making the code clean and portable. To make adopting the code easier, all definitions needed by a user are defined in a celero namespace within a single include file: Celero.h Celero.h has within it the macro definitions that turn each of the user benchmark cases into its own unique class with the associated test fixture (if any) and then registers the test case within a Factory. The macros automatically associate baseline test cases with their associated test benchmarks so that, at run time, benchmark-relative numbers can be computed. This association is maintained by TestVector. The TestVector utilizes the PImpl idiom to help hide implementation and keep the include overhead of Celero.h to a minimum. Celero reports its outputs to the command line. Since colors are nice (and perhaps contribute to the human factors/readability of the results), something beyond std::cout was called for. Console.h defines a simple color function, SetConsoleColor, which is utilized by the functions in the celero::print namespace to nicely format the program's output. Measuring benchmark execution time takes place in the TestFixture base class, from which all benchmarks written are ultimately derived. First, the test fixture setup code is executed. Then, the start time for the test is retrieved and stored in microseconds using an unsigned long. This is done to reduce floating point error. Next, the specified number of operations (iterations) are executed. When complete, the end time is retrieved, the test fixture is torn down, and the measured time for the execution is returned and the results are saved. This cycle is repeated for however many samples were specified. If no samples were specified (zero), then the test is repeated until it as ran for at least one second or at least 30 samples have been taken. While writing this specific part of the code, there was a definite ""if-else"" relationship. However, the bulk of the code was repeated within the ""if"" and ""else"" sections. An old fashioned function could have been used here, but it was very natural to utilize std::function to define a lambda that could be called and keep all of the code clean. (C++11 is a fantastic thing.) Finally, the results are printed to the screen. General Program Flow To summarize, this pseudo-code illustrates how the tests are executed internally: for(Each Experiment) {     // Call the virtual function     experiment->onExperimentStart(x);      for(Each Sample)     {         // Call the virtual function         experiment->setUp();          // Start the Timer         timer->start();          // Run all iterations         for(Each Iteration)         {             // Run the code under test             experiment->run(threads, iterations, experimentValue);         }          // Stop the Timer         timer->stop();          // Record data...          // Call the virtual teardown function.         experiment->tearDown();     }      // Call the virtual function     experiment->onExperimentEnd(); }  Using the Code Celero uses CMake to provide cross-platform builds. It does require a modern compiler (Visual C++ 2012 or GCC 4.7+) due to its use of C++11. Once Celero is added to your project. You can create dedicated benchmark projects and source files. For convenience, there is single header file and a CELERO_MAIN macro that can be used to provide a main() for your benchmark project that will automatically execute all of your benchmark tests. Here is an example of a simple Celero Benchmark. (Note: This is a complete, runnable example.) #include <celero/Celero.h>  #include <random>  #ifndef WIN32 #include <cmath> #include <cstdlib> #endif  /// /// This is the main(int argc, char** argv) for the entire celero program. /// You can write your own, or use this macro to insert the standard one into the project. /// CELERO_MAIN  std::random_device RandomDevice; std::uniform_int_distribution<int> UniformDistribution(0, 1024);  /// /// In reality, all of the ""Complex"" cases take the same amount of time to run. /// The difference in the results is a product of measurement error. /// /// Interestingly, taking the sin of a constant number here resulted in a  /// great deal of optimization in clang and gcc. /// BASELINE(DemoSimple, Baseline, 10, 1000000) {     celero::DoNotOptimizeAway(static_cast<float>(sin(UniformDistribution(RandomDevice)))); }  /// /// Run a test consisting of 1 sample of 710000 operations per measurement. /// There are not enough samples here to likely get a meaningful result. /// BENCHMARK(DemoSimple, Complex1, 1, 710000) {     celero::DoNotOptimizeAway(static_cast<float>(sin(fmod(UniformDistribution(RandomDevice), 3.14159265)))); }  /// /// Run a test consisting of 30 samples of 710000 operations per measurement. /// There are not enough samples here to get a reasonable measurement /// It should get a Basline number lower than the previous test. /// BENCHMARK(DemoSimple, Complex2, 30, 710000) {     celero::DoNotOptimizeAway(static_cast<float>(sin(fmod(UniformDistribution(RandomDevice), 3.14159265)))); }  /// /// Run a test consisting of 60 samples of 710000 operations per measurement. /// There are not enough samples here to get a reasonable measurement /// It should get a Basline number lower than the previous test. /// BENCHMARK(DemoSimple, Complex3, 60, 710000) {     celero::DoNotOptimizeAway(static_cast<float>(sin(fmod(UniformDistribution(RandomDevice), 3.14159265)))); } The first thing we do in this code is to define a BASELINE test case. This template takes four arguments: BASELINE(GroupName, BaselineName, Samples, Operations) GroupName - The name of the benchmark group. This is used to batch together runs and results with their corresponding baseline measurement. BaselineName - The name of this baseline for reporting purposes. Samples - The total number of times you want to execute the given number of operations on the test code. Operations - The total number of times you want to execute the test code per sample. Samples and operations here are used to measure very fast code. If you know the code in your benchmark would take some time less than 100 milliseconds, for example, your operations number would say to execute the code ""operations"" number of times before taking a measurement. Samples defines how many measurements to make. Celero helps with this by allowing you to specify zero samples. Zero samples will tell Celero to make some statistically significant number of samples based on how long it takes to complete your specified number of operations. These numbers will be reported at run time. The celero::DoNotOptimizeAway template is provided to ensure that the optimizing compiler does not eliminate your function or code. Since this feature is used in all of the sample benchmarks and their baseline, it's time overhead is canceled out in the comparisons. After the baseline is defined, various benchmarks are then defined. They syntax for the BENCHMARK macro is identical to that of the macro. Results Running Celero's simple example experiment (celeroDemoSimple.exe) benchmark gave the following output on a PC: Celero Timer resolution: 0.069841 us -----------------------------------------------------------------------------------------------------------------------------------------------      Group      |   Experiment    |   Prob. Space   |     Samples     |   Iterations    |    Baseline     |  us/Iteration   | Iterations/sec  | ----------------------------------------------------------------------------------------------------------------------------------------------- DemoSimple      | Baseline        |               0 |              10 |         1000000 |         1.00000 |         0.28789 |      3473512.73 | DemoSimple      | Complex1        |               0 |               1 |          710000 |         1.11028 |         0.31964 |      3128497.53 | DemoSimple      | Complex2        |               0 |              30 |          710000 |         1.10749 |         0.31884 |      3136388.74 | DemoSimple      | Complex3        |               0 |              60 |          710000 |         1.10678 |         0.31863 |      3138398.97 | Complete.  The first test that executes will be the group's baseline. Celero took 10 samples of 1000000 iterations of the code in our test. (Each set of 1000000 iterations was measured, and this was done 10 times and the smallest time was taken.) The ""Baseline"" value for the baseline measurement itself will always be 1.0. After the baseline is complete, each individual test is ran. Each test is executed and measured in the same way, however, there is an additional metric reported: Baseline. This compares the time it takes to compute the benchmark to the baseline. The data here shows that CeleroBenchTest.Complex1 takes 1.007949 times longer to execute than the baseline. Statistically Sound Results In order to use Celero for real science, there are three primary factors to consider when reviewing results. Firstly, you MUST check the generated assembly for your test. There are different paths to viewing the assembly for different compilers, but essentially this must be done to ensure that you did not optimize out critical code. You must also verify, via assembly, that you are comparing apples to apples. Once that is sorted out, you should run just the ""Baseline"" case several times. The ""us/Iteration"" and ""Iterations/sec"" should not fluctuate by any significant degree between runs. If they do, then ensure that your number of iterations is sufficiently large as to overcome the timer resolution on your machine. Once the number of iterations is high enough, ensure that you are performing a statistically significant number of samples. Lore has it that 30 samples is good, but use your own science to figure out the best number for your situation. Finally, you need to ensure that the number of iterations and samples is producing stable output for your experiment cases. These numbers may be the same as your now-stable baseline case. One factor that can impact the number of samples and iterations required is the amount of work that your experiment is doing. For cases where you are utilizing Celero's ""problem space"" functionality to scale up the algorithms, you can corresponding scale down the number of iterations. Doing so can reduce the total run time of the larger experiments by doing less iterations, buy while still maintaining a statistically meaningful measurement. (It saves you time.) Threaded Benchmarks Celero can automatically run threaded benchmarks. BASELINE_T and BENCHMARK_T can be used to launch the given code on its own thread using a user-defined number of concurrent executions. celeroDemoMultithread illustrates using this feature. When defining these macros, the use the following format: BASELINE_T(groupName, baselineName, fixtureName, samples, iterations, threads); BASELINE_FIXED_T(groupName, baselineName, fixtureName, samples, iterations, threads, useconds);  BENCHMARK_T(groupName, benchmarkName, fixtureName, samples, iterations, threads); BENCHMARK_TEST_T(groupName, benchmarkName, fixtureName, samples, iterations, threads, target); Fixed Measurement Benchmarks While celero normally measures the baseline time and then executes benchmark cases for comparison, you can also specify a fixed measurement time. This is useful for measuring performance against a real-time requirement. To use, utilize the _FIXED_ version of the BASELINE and BENCHMARK macros. // No threads or test fixtures. BASELINE_FIXED(groupName, baselineName, samples, iterations, useconds);  // For using test fixtures: BASELINE_FIXED_F(groupName, baselineName, fixtureName, samples, iterations, useconds);  // For using threads and test fixtures. BASELINE_FIXED_T(groupName, baselineName, fixtureName, samples, iterations, threads, useconds); Example: BASELINE_FIXED_F(DemoTransform, FixedTime, DemoTransformFixture, 30, 10000, 100) { /* Nothing to do */ } Notes Benchmarks should always be performed on Release builds. Never measure the performance of a Debug build and make changes based on the results. The (optimizing) compiler is your friend with respect to code performance. Accuracy is tied very closely to the total number of samples and the sample sizes. As a general rule, you should aim to execute your baseline code for about as long as your longest benchmark test. Further, it is helpful if all of the benchmark tests take about the same order of magnitude of execution time. (Don't compare a baseline that executed in 0.1 seconds with benchmarks that take 60 seconds and an hour, respectivly.) Celero has Doxygen documentation of its API. Celero supports test fixtures for each baseline group. Celero Charts Background It has been noted many times that writing an algorithm to solve small problems is relatively easy. ""Brute force"" methods tend to function just as well as more graceful approaches. However, as the size of data increases, truly effective algorithms scale their performance to match. Theoretically, the best we can hope for with an algorithm is that is scales lineally (Order N, O(N) complexity) with respect to the problem size. That is to say that if the problem set doubles, the time it takes for the algorithm to execute doubles. While this seems obvious, it is often an elusive goal. Even well performing algorithms eventually run into problems with available memory or CPU cache. When making decisions within our software about algorithms and improvements to existing code, only through measurement and experimentation can we know our complex algorithms perform acceptably. Using the Code While Celero offers simple benchmarking of code and algorithms, it also offers a more complex method or directly producing performance graphs of how the benchmarks change with respect to some independent variable, referred to here as the Problem Set. Within Celero, a test fixture can push integers into a ProblemSetValues vector which allows for the fixture's own SetUp function to scale a problem set for the benchmarks to run against. For each value pushed into the ProblemSetValues vector, a complete set of benchmarks is executed. These measured values are then stored and can be written out to a CSV file for easy plotting of results. To demonstrate, we will study the performance of three common sorting algorithms: BubbleSort, SelectionSort, and std::sort. (The source code to this demo is distributed with Celero, available on GitHub.) First, we will write a test fixture for Celero. class SortFixture : public celero::TestFixture {     public:         SortFixture()         {         }          virtual std::vector<std::pair<int64_t, uint64_t>> getExperimentValues() const override         {             std::vector<std::pair<int64_t, uint64_t>> problemSpace;              // We will run some total number of sets of tests all together.              // Each one growing by a power of 2.             const int totalNumberOfTests = 6;              for(int i = 0; i < totalNumberOfTests; i++)             {                 // ExperimentValues is part of the base class and allows us to specify                 // some values to control various test runs to end up building a nice graph.                 problemSpace.push_back(std::make_pair(int64_t(pow(2, i+1)), uint64_t(0)));             }              return problemSpace;         }          /// Before each run, build a vector of random integers.         virtual void setUp(int64_t experimentValue)         {             this->arraySize = experimentValue;             this->array.reserve(this->arraySize);         }          /// Before each iteration. A common utility function to push back random ints to sort.         void randomize()         {             for(int i = 0; i < this->arraySize; i++)             {                 this->array.push_back(rand());             }         }          /// After each iteration, clear the vector of random integers.         void clear()         {             this->array.clear();         }          std::vector<int64_t> array;         int64_t arraySize; }; Before the test fixture is utilized by a benchmark, Celero will create an instanciation of the class and call its ""getExperimentValues()"" function. The test fixture can then build a vector of int64_t values. For each value added to this array, benchmarks will be executed following calls to the ""setUp"" virtual function. A new test fixture is created for each measurement. The SetUp() virtual function is called before each benchmark test is executed. When using a problem space values vector, the function will be given a value that was previously pushed into the array within the constructor. The function's code can then decide what to do with it. Here, we are using the value to indicate how many elements should be in the array that we intend to sort. For each of the array elements, we simply add a pseudo-random integer. Now for implementing the actual sorting algorithms. For the baseline case, I implemented the first sorting algorithm I ever learned in school: Bubble Sort. The code for bubble sort is straight forward. // For a baseline, I'll choose Bubble Sort. BASELINE_F(SortRandInts, BubbleSort, SortFixture, 30, 10000) {     this->randomize();      for(int x = 0; x < this->arraySize; x++)     {         for(int y = 0; y < this->arraySize - 1; y++)         {             if(this->array[y] > this->array[y+1])             {                 std::swap(this->array[y], this->array[y+1]);             }         }     }      this->clear(); } Celero will use the values from this baseline when computing a base lined measurement for the other two algorithms in the test group ""DemoSort"". However, when we run this at the command line, we will specify an output file. The output file will contain the measured number of seconds the algorithm took to execute on the given array size. Next, we will implement the Selection Sort algorithm. BENCHMARK_F(SortRandInts, SelectionSort, SortFixture, 30, 10000) {     this->randomize();      for(int x = 0; x < this->arraySize; x++)     {         auto minIdx = x;          for(int y = x; y < this->arraySize; y++)         {             if(this->array[minIdx] > this->array[y])             {                 minIdx = y;             }         }          std::swap(this->array[x], this->array[minIdx]);     }      this->clear(); } Finally, for good measure, we will simply use the Standard Library's sorting algorithm: Introsort*. We only need write a single line of code, but here it is for completeness. BENCHMARK_F(SortRandInts, stdSort, SortFixture, 30, 10000) {     this->randomize();      std::sort(this->array.begin(), this->array.end());      this->clear(); } Results This test was ran on a 4.00 GHz AMD with four cores, eight logical processors, and 32 GB of memory. (Hardware aside, the relative performance of these algorithms should be the same on any modern hardware.) Celero outputs timing and benchmark references for each test automatically. However, to write to an output file for easy plotting, simply specify an output file on the command line. celeroExperimentSortingRandomInts.exe -t results.csv  While not particularly surprising std::sort is by far the best option with any meaningful problem set size. The results are summarized in the following table output written directly by Celero: Celero Celero: CPU processor throttling disabled. Timer resolution: 0.254288 us Writing results to: results.csv -----------------------------------------------------------------------------------------------------------------------------------------------      Group      |   Experiment    |   Prob. Space   |     Samples     |   Iterations    |    Baseline     |  us/Iteration   | Iterations/sec  | ----------------------------------------------------------------------------------------------------------------------------------------------- SortRandInts    | BubbleSort      |               2 |              30 |           10000 |         1.00000 |         0.05270 |     18975332.07 | SortRandInts    | BubbleSort      |               4 |              30 |           10000 |         1.00000 |         0.12060 |      8291873.96 | SortRandInts    | BubbleSort      |               8 |              30 |           10000 |         1.00000 |         0.31420 |      3182686.19 | SortRandInts    | BubbleSort      |              16 |              30 |           10000 |         1.00000 |         1.09130 |       916338.31 | SortRandInts    | BubbleSort      |              32 |              30 |           10000 |         1.00000 |         3.23470 |       309147.68 | SortRandInts    | BubbleSort      |              64 |              30 |           10000 |         1.00000 |        10.82530 |        92376.19 | SortRandInts    | SelectionSort   |               2 |              30 |           10000 |         1.09108 |         0.05750 |     17391304.35 | SortRandInts    | SelectionSort   |               4 |              30 |           10000 |         1.03317 |         0.12460 |      8025682.18 | SortRandInts    | SelectionSort   |               8 |              30 |           10000 |         1.01464 |         0.31880 |      3136762.86 | SortRandInts    | SelectionSort   |              16 |              30 |           10000 |         0.72253 |         0.78850 |      1268230.82 | SortRandInts    | SelectionSort   |              32 |              30 |           10000 |         0.63771 |         2.06280 |       484777.97 | SortRandInts    | SelectionSort   |              64 |              30 |           10000 |         0.54703 |         5.92180 |       168867.57 | SortRandInts    | InsertionSort   |               2 |              30 |           10000 |         1.07021 |         0.05640 |     17730496.45 | SortRandInts    | InsertionSort   |               4 |              30 |           10000 |         1.05970 |         0.12780 |      7824726.13 | SortRandInts    | InsertionSort   |               8 |              30 |           10000 |         1.00382 |         0.31540 |      3170577.05 | SortRandInts    | InsertionSort   |              16 |              30 |           10000 |         0.74104 |         0.80870 |      1236552.49 | SortRandInts    | InsertionSort   |              32 |              30 |           10000 |         0.61508 |         1.98960 |       502613.59 | SortRandInts    | InsertionSort   |              64 |              30 |           10000 |         0.45097 |         4.88190 |       204838.28 | SortRandInts    | QuickSort       |               2 |              30 |           10000 |         1.18027 |         0.06220 |     16077170.42 | SortRandInts    | QuickSort       |               4 |              30 |           10000 |         1.16169 |         0.14010 |      7137758.74 | SortRandInts    | QuickSort       |               8 |              30 |           10000 |         1.01400 |         0.31860 |      3138731.95 | SortRandInts    | QuickSort       |              16 |              30 |           10000 |         0.65060 |         0.71000 |      1408450.70 | SortRandInts    | QuickSort       |              32 |              30 |           10000 |         0.48542 |         1.57020 |       636861.55 | SortRandInts    | QuickSort       |              64 |              30 |           10000 |         0.34431 |         3.72730 |       268290.72 | SortRandInts    | stdSort         |               2 |              30 |           10000 |         1.08539 |         0.05720 |     17482517.48 | SortRandInts    | stdSort         |               4 |              30 |           10000 |         0.94776 |         0.11430 |      8748906.39 | SortRandInts    | stdSort         |               8 |              30 |           10000 |         0.76926 |         0.24170 |      4137360.36 | SortRandInts    | stdSort         |              16 |              30 |           10000 |         0.45954 |         0.50150 |      1994017.95 | SortRandInts    | stdSort         |              32 |              30 |           10000 |         0.33573 |         1.08600 |       920810.31 | SortRandInts    | stdSort         |              64 |              30 |           10000 |         0.23979 |         2.59580 |       385237.69 |  The data shows first the test group name. Next, all of the data sizes are output. Then each row shows the baseline or benchmark name and the corresponding time for the algorithm to complete measured in useconds. This data, in CSV format, can be directly read by programs such as Microsoft Excel and plotted without any modification. The CSV contains the following data: Group Experiment Problem Space Samples Iterations Baseline us/Iteration Iterations/sec Min (us) Mean (us) Max (us) Variance Standard Deviation Skewness Kurtosis Z Score SortRandInts BubbleSort 2 30 10000 1 0.0527 1.89753e+07 527 532.533 582 118.74 10.8968 3.64316 13.0726 0.507794 SortRandInts BubbleSort 4 30 10000 1 0.1206 8.29187e+06 1206 1230.77 1455 1941.22 44.0593 4.60056 20.9542 0.562122 SortRandInts BubbleSort 8 30 10000 1 0.3142 3.18269e+06 3142 3195.73 3425 3080.41 55.5014 2.48383 7.72605 0.968143 SortRandInts BubbleSort 16 30 10000 1 1.0913 916338 10913 11022.1 11228 5450.26 73.8259 0.71778 0.387441 1.47825 SortRandInts BubbleSort 32 30 10000 1 3.2347 309148 32347 32803.9 36732 650545 806.563 4.1236 17.2616 0.566519 SortRandInts BubbleSort 64 30 10000 1 10.8253 92376.2 108253 110999 133389 2.8152e+07 5305.85 3.15455 9.60246 0.517542 SortRandInts SelectionSort 2 30 10000 1.09108 0.0575 1.73913e+07 575 620.167 753 2170.97 46.5937 1.33794 1.19871 0.969373 SortRandInts SelectionSort 4 30 10000 1.03317 0.1246 8.02568e+06 1246 1339.57 1413 2261.7 47.5574 -0.263592 -0.727621 1.96745 SortRandInts SelectionSort 8 30 10000 1.01464 0.3188 3.13676e+06 3188 3500.63 3742 20181.2 142.061 -0.438792 -0.522354 2.2007 SortRandInts SelectionSort 16 30 10000 0.722533 0.7885 1.26823e+06 7885 8504.67 9482 322584 567.965 0.274438 -1.43741 1.09103 SortRandInts SelectionSort 32 30 10000 0.63771 2.0628 484778 20628 20826.7 21378 26307.7 162.196 1.64431 2.96239 1.22526 SortRandInts SelectionSort 64 30 10000 0.547033 5.9218 168868 59218 59517.7 60308 55879.5 236.389 1.42419 2.38341 1.26783 SortRandInts InsertionSort 2 30 10000 1.07021 0.0564 1.77305e+07 564 585.4 814 2239.42 47.3225 4.06868 16.6254 0.452216 SortRandInts InsertionSort 4 30 10000 1.0597 0.1278 7.82473e+06 1278 1312 1574 3857.17 62.1061 3.06791 9.38706 0.54745 SortRandInts InsertionSort 8 30 10000 1.00382 0.3154 3.17058e+06 3154 3208.57 3617 8053.91 89.7436 3.40649 12.5161 0.608029 SortRandInts InsertionSort 16 30 10000 0.741043 0.8087 1.23655e+06 8087 8198.43 8556 11392.8 106.737 1.66984 3.10417 1.044 SortRandInts InsertionSort 32 30 10000 0.61508 1.9896 502614 19896 20088.9 20593 20955.8 144.761 1.97818 4.12296 1.33254 SortRandInts InsertionSort 64 30 10000 0.450971 4.8819 204838 48819 49152 50253 129327 359.62 1.7583 2.51588 0.925884 SortRandInts QuickSort 2 30 10000 1.18027 0.0622 1.60772e+07 622 647.4 836 2492.52 49.9252 2.83628 7.08836 0.508761 SortRandInts QuickSort 4 30 10000 1.16169 0.1401 7.13776e+06 1401 1450 1655 4476.21 66.9045 1.94538 2.90363 0.732388 SortRandInts QuickSort 8 30 10000 1.014 0.3186 3.13873e+06 3186 3245.8 3549 5043.89 71.0203 2.88396 9.36231 0.842012 SortRandInts QuickSort 16 30 10000 0.6506 0.71 1.40845e+06 7100 7231.07 7670 17248.2 131.332 1.93858 3.21011 0.997977 SortRandInts QuickSort 32 30 10000 0.485424 1.5702 636862 15702 15863.2 16469 33518 183.079 2.01833 3.2763 0.880494 SortRandInts QuickSort 64 30 10000 0.344314 3.7273 268291 37273 37554.4 37999 34113.3 184.698 0.822276 -0.0186633 1.52339 SortRandInts stdSort 2 30 10000 1.08539 0.0572 1.74825e+07 572 591.233 764 1863.15 43.1642 2.86875 7.63924 0.445585 SortRandInts stdSort 4 30 10000 0.947761 0.1143 8.74891e+06 1143 1185.33 1385 3435.4 58.6123 2.53277 5.69826 0.72226 SortRandInts stdSort 8 30 10000 0.769255 0.2417 4.13736e+06 2417 2459.47 2838 6555.84 80.9682 3.78132 14.5264 0.524486 SortRandInts stdSort 16 30 10000 0.459544 0.5015 1.99402e+06 5015 5120.97 5283 6486.65 80.5398 0.55161 -0.798651 1.31571 SortRandInts stdSort 32 30 10000 0.335734 1.086 920810 10860 13398 24592 8.85889e+06 2976.39 2.1597 4.93241 0.852722 SortRandInts stdSort 64 30 10000 0.23979 2.5958 385238 25958 27384.8 35800 4.88819e+06 2210.92 2.24632 5.15422 0.645326 The point here is not that std::sort is better than more elementary sorting methods, but how easily measureable results can be obtained. In making such measurements more accessible and easier to code, they can become part of the way we code just as automated testing has become. Test early and test often! Notes Because I like explicitness as much as the next programmer, I want to note that the actual sorting algorithm used by std::sort is not defined in the standard, but references cite Introsort as a likely contender for how an STL implementation would approach std::sort. http://en.wikipedia.org/wiki/Introsort. When choosing a sorting algorithm, start with std::sort and see if you can make improvements from there. Don't just trust your experience, measure your code! Example and Demo Code Example and demonstration code is provided under Celero's ""experiments"" folder. There are two types of projects. The first are ""Demo"" projects. These are useful for illustrating techniques and ideas, but may not be interesting from a computer-science perspective. Experiments, on the other hand, have been added which demonstrate real-world questions. The addition of real use cases of Celero are encouraged to be submitted to Celero's development branch for inclusion in the Demo and Experiment library. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DigitalInBlue/Celero"	"C++ Benchmarking Framework. [Apache2]"	"true"
"Debug"	"CUTE"	"http://cute-test.com/"	"C++ Unit Testing Easier. [LGPL3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Wiki - CUTE - C++ Unit Testing Easier Sign in Register Home Projects Help Search: CUTE Overview Activity News Wiki Forums Files CUTE¶ Main User Guide Contact Wiki Start page Index by title Index by date Green Bar for C++¶ CUTE is an easy to use C++ unit testing framework that leverages modern C++ libraries and features. CUTE is orthogonal, easily extendable and much simpler than other C++ unit testing approaches like CPPUnit. For example, CUTE does not require that you write a derived class for each C++ class you want to unit test. CUTE is published under LGPL3 License. (This does not include CUTE Eclipse plug-in) Eclipse plug-in for C++ unit testing with CUTE¶ Automated unit testing supports high quality of program code, even under inevitable change and refactoring. As a side effect, unit tested code often has a better structure. Java developers are used to unit testing because of JUnit and its tight integration into IDEs like Eclipse. C++ programmers lacked the tool support for easy-to-use unit testing, even though the languages complexity asks for it. Refactoring and simplifying C++ code without tests is very hard. No longer! IFS created a simple to use CUTE (C++ Unit Testing Easier) and integrated it into Eclipse CDT similar to JUnit. wizards creating test frames test navigator with green/red bar diff-viewer for failing tests gocv coverage visualization User Guide¶ The CUTE plug-in user guide consists of the following parts: Theory of Operation and Goals How Things Work New features of CUTE 2.0 CUTE Installation and System Requirements Supported platforms with CUTE 2.0 Using the CUTE Eclipse Plugin TDD Support New features of the plug-in with CUTE 2.0 Namespactor - namespace refactoring support Writing and Running CUTE Unit Test Suites Plug-in User Manual [PDF] Additional Plug-ins Elevenator Elevator Mock Support¶ The CUTE plug-in does not provide mock support by itself. But, thanks to an ambitious student project by Michael Rüegg, a powerful additional mock support plug-in is available. See the Mockator page for more information. Support Us¶ Due to severe budget cuts of our government we, the Institute for Software at University of Applied Sciences of Eastern Switzerland in Rapperswil, require the financial help of our users to keep maintenance and extension of our Eclipse CDT plug-ins continuing. If you are using our plug-in please donate an amount showing your valuation of the plug-in to help. The money will be used to ensure for maintenance and extension of our C++ support with Eclipse CDT exclusively. Loading... Powered by Redmine © 2006-2014 Jean-Philippe Lang"	"null"	"null"	"C++ Unit Testing Easier. [LGPL3]"	"true"
"Debug"	"CMocka"	"https://cmocka.org/"	"unit testing framework for C with support for mock objects. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"unit testing framework for C with support for mock objects. [Apache2]"	"false"
"Debug"	"CppUnit"	"http://www.freedesktop.org/wiki/Software/cppunit/"	"C++ port of JUnit. [LGPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"cppunit www/ Software/ cppunit Edit Page History Repo Info cppunit test framework CppUnit is the C++ port of the famous JUnit framework for unit testing. Test output is in XML for automatic testing and GUI based for supervised tests. This is a continuation of the original cppunit project. cppunit test framework Developers Contact Developers Getting the sources cppunit sources are stored in git. To get them, you can use: git clone git://anongit.freedesktop.org/git/libreoffice/cppunit/  or you can browse the code online. If you want to use a release version you can fetch it from libreoffice mirror. Release Versions Cppunit 1.13.2 MD5: d1c6bdd5a76c66d2c38331e2d287bc01 Cppunit 1.13.1 MD5: fa9aa839145cdf860bf596532bb8af97 Cppunit 1.13.0 MD5: f868f74647d29dbd793a16a0e5b48b88 Building it Dependencies Once the source has been checked out, cppunit can be built in usual manner: cd cppunit ./autogen.sh ./configure make make check # optional make install  Contributing Once you have done a change that you are happy with, and that builds with cppunit, contribute it back, we'll be happy to integrate it! Do: # commit your changes to your local repository git commit -a # create the patch git format-patch origin/master  Contact You can get in touch with us using multiple ways: using IRC server irc.freenode.net and joining channel #libreoffice-dev using mailing list libreoffice@lists.freedesktop.org filling bugreport in LibreOffice bugzilla against the cppunit project Links: Software Last edited Tue Apr 12 08:40:10 2016"	"null"	"null"	"C++ port of JUnit. [LGPL2]"	"true"
"Debug"	"CTest"	"https://cmake.org/cmake/help/v2.8.8/ctest.html"	"The CMake test driver program. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CMake - Cross Platform Make PROJECT About Participants License Publications Statistics Get Involved Press Kit Success Stories Contact Us News RESOURCES Download Dashboard  Webinars Related Software Bug Tracker       HELP Books Documentation FAQ  Wiki  Mailing Lists Support  Consulting  Training  OPEN SOURCE VTK   ITK   CMake   KiwiViewer   CDash   ParaView   MIDAS   IGSTK   BatchMake   CTest 2.8.8 Documentation Generated by ctest --help-html. Master Index CMake 2.8.8 Name Usage Description Options Generators Commands Properties Compatibility Commands Standard CMake Modules Copyright See Also Name   ctest - Testing driver provided by CMake. Usage   ctest [options] Description The ""ctest"" executable is the CMake test driver program. CMake-generated build trees created for projects that use the ENABLE_TESTING and ADD_TEST commands have testing support. This program will run the tests and report results. Options -C <cfg>, --build-config <cfg> -V,--verbose -VV,--extra-verbose --debug --output-on-failure -F -j <jobs>, --parallel <jobs> -Q,--quiet -O <file>, --output-log <file> -N,--show-only -L <regex>, --label-regex <regex> -R <regex>, --tests-regex <regex> -E <regex>, --exclude-regex <regex> -LE <regex>, --label-exclude <regex> -D <dashboard>, --dashboard <dashboard> -M <model>, --test-model <model> -T <action>, --test-action <action> --track <track> -S <script>, --script <script> -SP <script>, --script-new-process <script> -A <file>, --add-notes <file> -I [Start,End,Stride,test#,test#|Test file], --tests-information -U, --union --max-width <width> --interactive-debug-mode [0|1] --no-label-summary --build-and-test --build-target --build-nocmake --build-run-dir --build-two-config --build-exe-dir --build-generator --build-project --build-makeprogram --build-noclean --build-config-sample --build-options --test-command --test-timeout --tomorrow-tag --ctest-config --overwrite --extra-submit <file>[;<file>] --force-new-ctest-process --schedule-random --submit-index --timeout <seconds> --stop-time <time> --http1.0 --no-compress-output --print-labels --help-command <cmd> [<file>] --help-command-list [<file>] --help-commands [<file>] --copyright [file] --help,-help,-usage,-h,-H,/? --help-full [file] --help-html [file] --help-man [file] --version,-version,/V [file] -C <cfg>, --build-config <cfg>: Choose configuration to test. Some CMake-generated build trees can have multiple build configurations in the same tree. This option can be used to specify which one should be tested. Example configurations are ""Debug"" and ""Release"". -V,--verbose: Enable verbose output from tests. Test output is normally suppressed and only summary information is displayed. This option will show all test output. -VV,--extra-verbose: Enable more verbose output from tests. Test output is normally suppressed and only summary information is displayed. This option will show even more test output. --debug: Displaying more verbose internals of CTest. This feature will result in large number of output that is mostly useful for debugging dashboard problems. --output-on-failure: Output anything outputted by the test program if the test should fail. This option can also be enabled by setting the environment variable CTEST_OUTPUT_ON_FAILURE -F: Enable failover. This option allows ctest to resume a test set execution that was previously interrupted. If no interruption occurred, the -F option will have no effect. -j <jobs>, --parallel <jobs>: Run the tests in parallel using thegiven number of jobs. This option tells ctest to run the tests in parallel using given number of jobs. -Q,--quiet: Make ctest quiet. This option will suppress all the output. The output log file will still be generated if the --output-log is specified. Options such as --verbose, --extra-verbose, and --debug are ignored if --quiet is specified. -O <file>, --output-log <file>: Output to log file This option tells ctest to write all its output to a log file. -N,--show-only: Disable actual execution of tests. This option tells ctest to list the tests that would be run but not actually run them. Useful in conjunction with the -R and -E options. -L <regex>, --label-regex <regex>: Run tests with labels matching regular expression. This option tells ctest to run only the tests whose labels match the given regular expression. -R <regex>, --tests-regex <regex>: Run tests matching regular expression. This option tells ctest to run only the tests whose names match the given regular expression. -E <regex>, --exclude-regex <regex>: Exclude tests matching regular expression. This option tells ctest to NOT run the tests whose names match the given regular expression. -LE <regex>, --label-exclude <regex>: Exclude tests with labels matching regular expression. This option tells ctest to NOT run the tests whose labels match the given regular expression. -D <dashboard>, --dashboard <dashboard>: Execute dashboard test This option tells ctest to perform act as a Dart client and perform a dashboard test. All tests are <Mode><Test>, where Mode can be Experimental, Nightly, and Continuous, and Test can be Start, Update, Configure, Build, Test, Coverage, and Submit. -M <model>, --test-model <model>: Sets the model for a dashboard This option tells ctest to act as a Dart client where the TestModel can be Experimental, Nightly, and Continuous. Combining -M and -T is similar to -D -T <action>, --test-action <action>: Sets the dashboard action to perform This option tells ctest to act as a Dart client and perform some action such as start, build, test etc. Combining -M and -T is similar to -D --track <track>: Specify the track to submit dashboard to Submit dashboard to specified track instead of default one. By default, the dashboard is submitted to Nightly, Experimental, or Continuous track, but by specifying this option, the track can be arbitrary. -S <script>, --script <script>: Execute a dashboard for a configuration This option tells ctest to load in a configuration script which sets a number of parameters such as the binary and source directories. Then ctest will do what is required to create and run a dashboard. This option basically sets up a dashboard and then runs ctest -D with the appropriate options. -SP <script>, --script-new-process <script>: Execute a dashboard for a configuration This option does the same operations as -S but it will do them in a separate process. This is primarily useful in cases where the script may modify the environment and you do not want the modified environment to impact other -S scripts. -A <file>, --add-notes <file>: Add a notes file with submission This option tells ctest to include a notes file when submitting dashboard. -I [Start,End,Stride,test#,test#|Test file], --tests-information: Run a specific number of tests by number. This option causes ctest to run tests starting at number Start, ending at number End, and incrementing by Stride. Any additional numbers after Stride are considered individual test numbers. Start, End,or stride can be empty. Optionally a file can be given that contains the same syntax as the command line. -U, --union: Take the Union of -I and -R When both -R and -I are specified by default the intersection of tests are run. By specifying -U the union of tests is run instead. --max-width <width>: Set the max width for a test name to output Set the maximum width for each test name to show in the output. This allows the user to widen the output to avoid clipping the test name which can be very annoying. --interactive-debug-mode [0|1]: Set the interactive mode to 0 or 1. This option causes ctest to run tests in either an interactive mode or a non-interactive mode. On Windows this means that in non-interactive mode, all system debug pop up windows are blocked. In dashboard mode (Experimental, Nightly, Continuous), the default is non-interactive. When just running tests not for a dashboard the default is to allow popups and interactive debugging. --no-label-summary: Disable timing summary information for labels. This option tells ctest not to print summary information for each label associated with the tests run. If there are no labels on the tests, nothing extra is printed. --build-and-test: Configure, build and run a test. This option tells ctest to configure (i.e. run cmake on), build, and or execute a test. The configure and test steps are optional. The arguments to this command line are the source and binary directories. By default this will run CMake on the Source/Bin directories specified unless --build-nocmake is specified. Both --build-makeprogram and --build-generator MUST be provided to use --built-and-test. If --test-command is specified then that will be run after the build is complete. Other options that affect this mode are --build-target --build-nocmake, --build-run-dir, --build-two-config, --build-exe-dir, --build-project,--build-noclean, --build-options --build-target: Specify a specific target to build. This option goes with the --build-and-test option, if left out the all target is built. --build-nocmake: Run the build without running cmake first. Skip the cmake step. --build-run-dir: Specify directory to run programs from. Directory where programs will be after it has been compiled. --build-two-config: Run CMake twice --build-exe-dir: Specify the directory for the executable. --build-generator: Specify the generator to use. --build-project: Specify the name of the project to build. --build-makeprogram: Specify the make program to use. --build-noclean: Skip the make clean step. --build-config-sample: A sample executable to use to determine the configuration A sample executable to use to determine the configuration that should be used. e.g. Debug/Release/etc --build-options: Add extra options to the build step. This option must be the last option with the exception of --test-command --test-command: The test to run with the --build-and-test option. --test-timeout: The time limit in seconds, internal use only. --tomorrow-tag: Nightly or experimental starts with next day tag. This is useful if the build will not finish in one day. --ctest-config: The configuration file used to initialize CTest state when submitting dashboards. This option tells CTest to use different initialization file instead of CTestConfiguration.tcl. This way multiple initialization files can be used for example to submit to multiple dashboards. --overwrite: Overwrite CTest configuration option. By default ctest uses configuration options from configuration file. This option will overwrite the configuration option. --extra-submit <file>[;<file>]: Submit extra files to the dashboard. This option will submit extra files to the dashboard. --force-new-ctest-process: Run child CTest instances as new processes By default CTest will run child CTest instances within the same process. If this behavior is not desired, this argument will enforce new processes for child CTest processes. --schedule-random: Use a random order for scheduling tests This option will run the tests in a random order. It is commonly used to detect implicit dependencies in a test suite. --submit-index: Submit individual dashboard tests with specific index This option allows performing the same CTest action (such as test) multiple times and submit all stages to the same dashboard (Dart2 required). Each execution requires different index. --timeout <seconds>: Set a global timeout on all tests. This option will set a global timeout on all tests that do not already have a timeout set on them. --stop-time <time>: Set a time at which all tests should stop running. Set a real time of day at which all tests should timeout. Example: 7:00:00 -0400. Any time format understood by the curl date parser is accepted. Local time is assumed if no timezone is specified. --http1.0: Submit using HTTP 1.0. This option will force CTest to use HTTP 1.0 to submit files to the dashboard, instead of HTTP 1.1. --no-compress-output: Do not compress test output when submitting. This flag will turn off automatic compression of test output. Use this to maintain compatibility with an older version of CDash which doesn't support compressed test output. --print-labels: Print all available test labels. This option will not run any tests, it will simply print the list of all labels associated with the test set. --help-command <cmd> [<file>]: Show help for a single command and exit. Prints the help for the command to stdout or to the specified file. --help-command-list [<file>]: List available commands and exit. Prints the list of all available listfile commands to stdout or the specified file. --help-commands [<file>]: Print help for all commands and exit. Prints the help for all commands to stdout or to the specified file. --copyright [file]: Print the CMake copyright and exit. If a file is specified, the copyright is written into it. --help,-help,-usage,-h,-H,/?: Print usage information and exit. Usage describes the basic command line interface and its options. --help-full [file]: Print full help and exit. Full help displays most of the documentation provided by the UNIX man page. It is provided for use on non-UNIX platforms, but is also convenient if the man page is not installed. If a file is specified, the help is written into it. --help-html [file]: Print full help in HTML format. This option is used by CMake authors to help produce web pages. If a file is specified, the help is written into it. --help-man [file]: Print full help as a UNIX man page and exit. This option is used by the cmake build to generate the UNIX man page. If a file is specified, the help is written into it. --version,-version,/V [file]: Show program name/version banner and exit. If a file is specified, the version is written into it. Generators The following generators are available on this platform: Commands break build_name cmake_minimum_required cmake_policy configure_file ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ctest_test ctest_update ctest_upload else elseif endforeach endfunction endif endmacro endwhile exec_program execute_process file find_file find_library find_package find_path find_program foreach function get_cmake_property get_directory_property get_filename_component get_property if include list macro make_directory mark_as_advanced math message option remove return separate_arguments set set_directory_properties set_property site_name string unset use_mangled_mesa variable_watch while write_file break: Break from an enclosing foreach or while loop.   break() Breaks from an enclosing foreach loop or while loop build_name: Deprecated. Use ${CMAKE_SYSTEM} and ${CMAKE_CXX_COMPILER} instead.   build_name(variable) Sets the specified variable to a string representing the platform and compiler settings. These values are now available through the CMAKE_SYSTEM and CMAKE_CXX_COMPILER variables. cmake_minimum_required: Set the minimum required version of cmake for a project.   cmake_minimum_required(VERSION major[.minor[.patch[.tweak]]]                          [FATAL_ERROR]) If the current version of CMake is lower than that required it will stop processing the project and report an error. When a version higher than 2.4 is specified the command implicitly invokes   cmake_policy(VERSION major[.minor[.patch[.tweak]]]) which sets the cmake policy version level to the version specified. When version 2.4 or lower is given the command implicitly invokes   cmake_policy(VERSION 2.4) which enables compatibility features for CMake 2.4 and lower. The FATAL_ERROR option is accepted but ignored by CMake 2.6 and higher. It should be specified so CMake versions 2.4 and lower fail with an error instead of just a warning. cmake_policy: Manage CMake Policy settings. As CMake evolves it is sometimes necessary to change existing behavior in order to fix bugs or improve implementations of existing features. The CMake Policy mechanism is designed to help keep existing projects building as new versions of CMake introduce changes in behavior. Each new policy (behavioral change) is given an identifier of the form ""CMP<NNNN>"" where ""<NNNN>"" is an integer index. Documentation associated with each policy describes the OLD and NEW behavior and the reason the policy was introduced. Projects may set each policy to select the desired behavior. When CMake needs to know which behavior to use it checks for a setting specified by the project. If no setting is available the OLD behavior is assumed and a warning is produced requesting that the policy be set. The cmake_policy command is used to set policies to OLD or NEW behavior. While setting policies individually is supported, we encourage projects to set policies based on CMake versions.   cmake_policy(VERSION major.minor[.patch[.tweak]]) Specify that the current CMake list file is written for the given version of CMake. All policies introduced in the specified version or earlier will be set to use NEW behavior. All policies introduced after the specified version will be unset (unless variable CMAKE_POLICY_DEFAULT_CMP<NNNN> sets a default). This effectively requests behavior preferred as of a given CMake version and tells newer CMake versions to warn about their new policies. The policy version specified must be at least 2.4 or the command will report an error. In order to get compatibility features supporting versions earlier than 2.4 see documentation of policy CMP0001.   cmake_policy(SET CMP<NNNN> NEW)   cmake_policy(SET CMP<NNNN> OLD) Tell CMake to use the OLD or NEW behavior for a given policy. Projects depending on the old behavior of a given policy may silence a policy warning by setting the policy state to OLD. Alternatively one may fix the project to work with the new behavior and set the policy state to NEW.   cmake_policy(GET CMP<NNNN> <variable>) Check whether a given policy is set to OLD or NEW behavior. The output variable value will be ""OLD"" or ""NEW"" if the policy is set, and empty otherwise. CMake keeps policy settings on a stack, so changes made by the cmake_policy command affect only the top of the stack. A new entry on the policy stack is managed automatically for each subdirectory to protect its parents and siblings. CMake also manages a new entry for scripts loaded by include() and find_package() commands except when invoked with the NO_POLICY_SCOPE option (see also policy CMP0011). The cmake_policy command provides an interface to manage custom entries on the policy stack:   cmake_policy(PUSH)   cmake_policy(POP) Each PUSH must have a matching POP to erase any changes. This is useful to make temporary changes to policy settings. Functions and macros record policy settings when they are created and use the pre-record policies when they are invoked. If the function or macro implementation sets policies, the changes automatically propagate up through callers until they reach the closest nested policy stack entry. configure_file: Copy a file to another location and modify its contents.   configure_file(<input> <output>                  [COPYONLY] [ESCAPE_QUOTES] [@ONLY]                  [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ]) Copies a file <input> to file <output> and substitutes variable values referenced in the file content. If <input> is a relative path it is evaluated with respect to the current source directory. The <input> must be a file, not a directory. If <output> is a relative path it is evaluated with respect to the current binary directory. If <output> names an existing directory the input file is placed in that directory with its original name. This command replaces any variables in the input file referenced as ${VAR} or @VAR@ with their values as determined by CMake. If a variable is not defined, it will be replaced with nothing. If COPYONLY is specified, then no variable expansion will take place. If ESCAPE_QUOTES is specified then any substituted quotes will be C-style escaped. The file will be configured with the current values of CMake variables. If @ONLY is specified, only variables of the form @VAR@ will be replaces and ${VAR} will be ignored. This is useful for configuring scripts that use ${VAR}. Any occurrences of #cmakedefine VAR will be replaced with either #define VAR or /* #undef VAR */ depending on the setting of VAR in CMake. Any occurrences of #cmakedefine01 VAR will be replaced with either #define VAR 1 or #define VAR 0 depending on whether VAR evaluates to TRUE or FALSE in CMake. With NEWLINE_STYLE the line ending could be adjusted:     'UNIX' or 'LF' for \n, 'DOS', 'WIN32' or 'CRLF' for \r\n. COPYONLY must not be used with NEWLINE_STYLE. ctest_build: Build the project.   ctest_build([BUILD build_dir] [TARGET target] [RETURN_VALUE res]               [APPEND][NUMBER_ERRORS val] [NUMBER_WARNINGS val]) Builds the given build directory and stores results in Build.xml. If no BUILD is given, the CTEST_BINARY_DIRECTORY variable is used. The TARGET variable can be used to specify a build target. If none is specified, the ""all"" target will be built. The RETURN_VALUE option specifies a variable in which to store the return value of the native build tool. The NUMBER_ERRORS and NUMBER_WARNINGS options specify variables in which to store the number of build errors and warnings detected. The APPEND option marks results for append to those previously submitted to a dashboard server since the last ctest_start. Append semantics are defined by the dashboard server in use. ctest_configure: Configure the project build tree.   ctest_configure([BUILD build_dir] [SOURCE source_dir] [APPEND]                   [OPTIONS options] [RETURN_VALUE res]) Configures the given build directory and stores results in Configure.xml. If no BUILD is given, the CTEST_BINARY_DIRECTORY variable is used. If no SOURCE is given, the CTEST_SOURCE_DIRECTORY variable is used. The OPTIONS argument specifies command line arguments to pass to the configuration tool. The RETURN_VALUE option specifies a variable in which to store the return value of the native build tool. The APPEND option marks results for append to those previously submitted to a dashboard server since the last ctest_start. Append semantics are defined by the dashboard server in use. ctest_coverage: Collect coverage tool results.   ctest_coverage([BUILD build_dir] [RETURN_VALUE res] [APPEND]                  [LABELS label1 [label2 [...]]]) Perform the coverage of the given build directory and stores results in Coverage.xml. The second argument is a variable that will hold value. The LABELS option filters the coverage report to include only source files labeled with at least one of the labels specified. The APPEND option marks results for append to those previously submitted to a dashboard server since the last ctest_start. Append semantics are defined by the dashboard server in use. ctest_empty_binary_directory: empties the binary directory   ctest_empty_binary_directory( directory ) Removes a binary directory. This command will perform some checks prior to deleting the directory in an attempt to avoid malicious or accidental directory deletion. ctest_memcheck: Run tests with a dynamic analysis tool.   ctest_memcheck([BUILD build_dir] [RETURN_VALUE res] [APPEND]              [START start number] [END end number]              [STRIDE stride number] [EXCLUDE exclude regex ]              [INCLUDE include regex]              [EXCLUDE_LABEL exclude regex]              [INCLUDE_LABEL label regex]              [PARALLEL_LEVEL level] ) Tests the given build directory and stores results in MemCheck.xml. The second argument is a variable that will hold value. Optionally, you can specify the starting test number START, the ending test number END, the number of tests to skip between each test STRIDE, a regular expression for tests to run INCLUDE, or a regular expression for tests not to run EXCLUDE. EXCLUDE_LABEL and INCLUDE_LABEL are regular expressions for tests to be included or excluded by the test property LABEL. PARALLEL_LEVEL should be set to a positive number representing the number of tests to be run in parallel. The APPEND option marks results for append to those previously submitted to a dashboard server since the last ctest_start. Append semantics are defined by the dashboard server in use. ctest_read_custom_files: read CTestCustom files.   ctest_read_custom_files( directory ... ) Read all the CTestCustom.ctest or CTestCustom.cmake files from the given directory. ctest_run_script: runs a ctest -S script   ctest_run_script([NEW_PROCESS] script_file_name script_file_name1               script_file_name2 ... [RETURN_VALUE var]) Runs a script or scripts much like if it was run from ctest -S. If no argument is provided then the current script is run using the current settings of the variables. If NEW_PROCESS is specified then each script will be run in a separate process.If RETURN_VALUE is specified the return value of the last script run will be put into var. ctest_sleep: sleeps for some amount of time   ctest_sleep(<seconds>) Sleep for given number of seconds.   ctest_sleep(<time1> <duration> <time2>) Sleep for t=(time1 + duration - time2) seconds if t > 0. ctest_start: Starts the testing for a given model   ctest_start(Model [TRACK <track>] [APPEND] [source [binary]]) Starts the testing for a given model. The command should be called after the binary directory is initialized. If the 'source' and 'binary' directory are not specified, it reads the CTEST_SOURCE_DIRECTORY and CTEST_BINARY_DIRECTORY. If the track is specified, the submissions will go to the specified track. If APPEND is used, the existing TAG is used rather than creating a new one based on the current time stamp. ctest_submit: Submit results to a dashboard server.   ctest_submit([PARTS ...] [FILES ...] [RETRY_COUNT count]                [RETRY_DELAY delay][RETURN_VALUE res]) By default all available parts are submitted if no PARTS or FILES are specified. The PARTS option lists a subset of parts to be submitted. Valid part names are:   Start      = nothing   Update     = ctest_update results, in Update.xml   Configure  = ctest_configure results, in Configure.xml   Build      = ctest_build results, in Build.xml   Test       = ctest_test results, in Test.xml   Coverage   = ctest_coverage results, in Coverage.xml   MemCheck   = ctest_memcheck results, in DynamicAnalysis.xml   Notes      = Files listed by CTEST_NOTES_FILES, in Notes.xml   ExtraFiles = Files listed by CTEST_EXTRA_SUBMIT_FILES   Submit     = nothing The FILES option explicitly lists specific files to be submitted. Each individual file must exist at the time of the call. The RETRY_DELAY option specifies how long in seconds to wait after a timed-out submission before attempting to re-submit. The RETRY_COUNT option specifies how many times to retry a timed-out submission. ctest_test: Run tests in the project build tree.   ctest_test([BUILD build_dir] [APPEND]              [START start number] [END end number]              [STRIDE stride number] [EXCLUDE exclude regex ]              [INCLUDE include regex] [RETURN_VALUE res]              [EXCLUDE_LABEL exclude regex]              [INCLUDE_LABEL label regex]              [PARALLEL_LEVEL level]              [SCHEDULE_RANDOM on]              [STOP_TIME time of day]) Tests the given build directory and stores results in Test.xml. The second argument is a variable that will hold value. Optionally, you can specify the starting test number START, the ending test number END, the number of tests to skip between each test STRIDE, a regular expression for tests to run INCLUDE, or a regular expression for tests to not run EXCLUDE. EXCLUDE_LABEL and INCLUDE_LABEL are regular expression for test to be included or excluded by the test property LABEL. PARALLEL_LEVEL should be set to a positive number representing the number of tests to be run in parallel. SCHEDULE_RANDOM will launch tests in a random order, and is typically used to detect implicit test dependencies. STOP_TIME is the time of day at which the tests should all stop running. The APPEND option marks results for append to those previously submitted to a dashboard server since the last ctest_start. Append semantics are defined by the dashboard server in use. ctest_update: Update the work tree from version control.   ctest_update([SOURCE source] [RETURN_VALUE res]) Updates the given source directory and stores results in Update.xml. If no SOURCE is given, the CTEST_SOURCE_DIRECTORY variable is used. The RETURN_VALUE option specifies a variable in which to store the result, which is the number of files updated or -1 on error. ctest_upload: Upload files to a dashboard server.   ctest_upload(FILES ...) Pass a list of files to be sent along with the build results to the dashboard server. else: Starts the else portion of an if block.   else(expression) See the if command. elseif: Starts the elseif portion of an if block.   elseif(expression) See the if command. endforeach: Ends a list of commands in a FOREACH block.   endforeach(expression) See the FOREACH command. endfunction: Ends a list of commands in a function block.   endfunction(expression) See the function command. endif: Ends a list of commands in an if block.   endif(expression) See the if command. endmacro: Ends a list of commands in a macro block.   endmacro(expression) See the macro command. endwhile: Ends a list of commands in a while block.   endwhile(expression) See the while command. exec_program: Deprecated. Use the execute_process() command instead. Run an executable program during the processing of the CMakeList.txt file.   exec_program(Executable [directory in which to run]                [ARGS <arguments to executable>]                [OUTPUT_VARIABLE <var>]                [RETURN_VALUE <var>]) The executable is run in the optionally specified directory. The executable can include arguments if it is double quoted, but it is better to use the optional ARGS argument to specify arguments to the program. This is because cmake will then be able to escape spaces in the executable path. An optional argument OUTPUT_VARIABLE specifies a variable in which to store the output. To capture the return value of the execution, provide a RETURN_VALUE. If OUTPUT_VARIABLE is specified, then no output will go to the stdout/stderr of the console running cmake. execute_process: Execute one or more child processes.   execute_process(COMMAND <cmd1> [args1...]]                   [COMMAND <cmd2> [args2...] [...]]                   [WORKING_DIRECTORY <directory>]                   [TIMEOUT <seconds>]                   [RESULT_VARIABLE <variable>]                   [OUTPUT_VARIABLE <variable>]                   [ERROR_VARIABLE <variable>]                   [INPUT_FILE <file>]                   [OUTPUT_FILE <file>]                   [ERROR_FILE <file>]                   [OUTPUT_QUIET]                   [ERROR_QUIET]                   [OUTPUT_STRIP_TRAILING_WHITESPACE]                   [ERROR_STRIP_TRAILING_WHITESPACE]) Runs the given sequence of one or more commands with the standard output of each process piped to the standard input of the next. A single standard error pipe is used for all processes. If WORKING_DIRECTORY is given the named directory will be set as the current working directory of the child processes. If TIMEOUT is given the child processes will be terminated if they do not finish in the specified number of seconds (fractions are allowed). If RESULT_VARIABLE is given the variable will be set to contain the result of running the processes. This will be an integer return code from the last child or a string describing an error condition. If OUTPUT_VARIABLE or ERROR_VARIABLE are given the variable named will be set with the contents of the standard output and standard error pipes respectively. If the same variable is named for both pipes their output will be merged in the order produced. If INPUT_FILE, OUTPUT_FILE, or ERROR_FILE is given the file named will be attached to the standard input of the first process, standard output of the last process, or standard error of all processes respectively. If OUTPUT_QUIET or ERROR_QUIET is given then the standard output or standard error results will be quietly ignored. If more than one OUTPUT_* or ERROR_* option is given for the same pipe the precedence is not specified. If no OUTPUT_* or ERROR_* options are given the output will be shared with the corresponding pipes of the CMake process itself. The execute_process command is a newer more powerful version of exec_program, but the old command has been kept for compatibility. file: File manipulation command.   file(WRITE filename ""message to write""... )   file(APPEND filename ""message to write""... )   file(READ filename variable [LIMIT numBytes] [OFFSET offset] [HEX])   file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)   file(STRINGS filename variable [LIMIT_COUNT num]        [LIMIT_INPUT numBytes] [LIMIT_OUTPUT numBytes]        [LENGTH_MINIMUM numBytes] [LENGTH_MAXIMUM numBytes]        [NEWLINE_CONSUME] [REGEX regex]        [NO_HEX_CONVERSION])   file(GLOB variable [RELATIVE path] [globbing expressions]...)   file(GLOB_RECURSE variable [RELATIVE path]        [FOLLOW_SYMLINKS] [globbing expressions]...)   file(RENAME <oldname> <newname>)   file(REMOVE [file1 ...])   file(REMOVE_RECURSE [file1 ...])   file(MAKE_DIRECTORY [directory1 directory2 ...])   file(RELATIVE_PATH variable directory file)   file(TO_CMAKE_PATH path result)   file(TO_NATIVE_PATH path result)   file(DOWNLOAD url file [INACTIVITY_TIMEOUT timeout]        [TIMEOUT timeout] [STATUS status] [LOG log] [SHOW_PROGRESS]        [EXPECTED_MD5 sum])   file(UPLOAD filename url [INACTIVITY_TIMEOUT timeout]        [TIMEOUT timeout] [STATUS status] [LOG log] [SHOW_PROGRESS]) WRITE will write a message into a file called 'filename'. It overwrites the file if it already exists, and creates the file if it does not exist. APPEND will write a message into a file same as WRITE, except it will append it to the end of the file READ will read the content of a file and store it into the variable. It will start at the given offset and read up to numBytes. If the argument HEX is given, the binary data will be converted to hexadecimal representation and this will be stored in the variable. MD5, SHA1, SHA224, SHA256, SHA384, and SHA512 will compute a cryptographic hash of the content of a file. STRINGS will parse a list of ASCII strings from a file and store it in a variable. Binary data in the file are ignored. Carriage return (CR) characters are ignored. It works also for Intel Hex and Motorola S-record files, which are automatically converted to binary format when reading them. Disable this using NO_HEX_CONVERSION. LIMIT_COUNT sets the maximum number of strings to return. LIMIT_INPUT sets the maximum number of bytes to read from the input file. LIMIT_OUTPUT sets the maximum number of bytes to store in the output variable. LENGTH_MINIMUM sets the minimum length of a string to return. Shorter strings are ignored. LENGTH_MAXIMUM sets the maximum length of a string to return. Longer strings are split into strings no longer than the maximum length. NEWLINE_CONSUME allows newlines to be included in strings instead of terminating them. REGEX specifies a regular expression that a string must match to be returned. Typical usage   file(STRINGS myfile.txt myfile) stores a list in the variable ""myfile"" in which each item is a line from the input file. GLOB will generate a list of all files that match the globbing expressions and store it into the variable. Globbing expressions are similar to regular expressions, but much simpler. If RELATIVE flag is specified for an expression, the results will be returned as a relative path to the given path. (We do not recommend using GLOB to collect a list of source files from your source tree. If no CMakeLists.txt file changes when a source is added or removed then the generated build system cannot know when to ask CMake to regenerate.) Examples of globbing expressions include:    *.cxx      - match all files with extension cxx    *.vt?      - match all files with extension vta,...,vtz    f[3-5].txt - match files f3.txt, f4.txt, f5.txt GLOB_RECURSE will generate a list similar to the regular GLOB, except it will traverse all the subdirectories of the matched directory and match the files. Subdirectories that are symlinks are only traversed if FOLLOW_SYMLINKS is given or cmake policy CMP0009 is not set to NEW. See cmake --help-policy CMP0009 for more information. Examples of recursive globbing include:    /dir/*.py  - match all python files in /dir and subdirectories MAKE_DIRECTORY will create the given directories, also if their parent directories don't exist yet RENAME moves a file or directory within a filesystem, replacing the destination atomically. REMOVE will remove the given files, also in subdirectories REMOVE_RECURSE will remove the given files and directories, also non-empty directories RELATIVE_PATH will determine relative path from directory to the given file. TO_CMAKE_PATH will convert path into a cmake style path with unix /. The input can be a single path or a system path like ""$ENV{PATH}"". Note the double quotes around the ENV call TO_CMAKE_PATH only takes one argument. This command will also convert the native list delimiters for a list of paths like the PATH environment variable. TO_NATIVE_PATH works just like TO_CMAKE_PATH, but will convert from a cmake style path into the native path style \ for windows and / for UNIX. DOWNLOAD will download the given URL to the given file. If LOG var is specified a log of the download will be put in var. If STATUS var is specified the status of the operation will be put in var. The status is returned in a list of length 2. The first element is the numeric return value for the operation, and the second element is a string value for the error. A 0 numeric error means no error in the operation. If TIMEOUT time is specified, the operation will timeout after time seconds, time should be specified as an integer. The INACTIVITY_TIMEOUT specifies an integer number of seconds of inactivity after which the operation should terminate. If EXPECTED_MD5 sum is specified, the operation will verify that the downloaded file's actual md5 sum matches the expected value. If it does not match, the operation fails with an error. If SHOW_PROGRESS is specified, progress information will be printed as status messages until the operation is complete. UPLOAD will upload the given file to the given URL. If LOG var is specified a log of the upload will be put in var. If STATUS var is specified the status of the operation will be put in var. The status is returned in a list of length 2. The first element is the numeric return value for the operation, and the second element is a string value for the error. A 0 numeric error means no error in the operation. If TIMEOUT time is specified, the operation will timeout after time seconds, time should be specified as an integer. The INACTIVITY_TIMEOUT specifies an integer number of seconds of inactivity after which the operation should terminate. If SHOW_PROGRESS is specified, progress information will be printed as status messages until the operation is complete. The file() command also provides COPY and INSTALL signatures:   file(<COPY|INSTALL> files... DESTINATION <dir>        [FILE_PERMISSIONS permissions...]        [DIRECTORY_PERMISSIONS permissions...]        [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]        [FILES_MATCHING]        [[PATTERN <pattern> | REGEX <regex>]         [EXCLUDE] [PERMISSIONS permissions...]] [...]) The COPY signature copies files, directories, and symlinks to a destination folder. Relative input paths are evaluated with respect to the current source directory, and a relative destination is evaluated with respect to the current build directory. Copying preserves input file timestamps, and optimizes out a file if it exists at the destination with the same timestamp. Copying preserves input permissions unless explicit permissions or NO_SOURCE_PERMISSIONS are given (default is USE_SOURCE_PERMISSIONS). See the install(DIRECTORY) command for documentation of permissions, PATTERN, REGEX, and EXCLUDE options. The INSTALL signature differs slightly from COPY: it prints status messages, and NO_SOURCE_PERMISSIONS is default. Installation scripts generated by the install() command use this signature (with some undocumented options for internal use). find_file: Find the full path to a file.    find_file(<VAR> name1 [path1 path2 ...]) This is the short-hand signature for the command that is sufficient in many cases. It is the same as find_file(<VAR> name1 [PATHS path1 path2 ...])    find_file(              <VAR>              name | NAMES name1 [name2 ...]              [HINTS path1 [path2 ... ENV var]]              [PATHS path1 [path2 ... ENV var]]              [PATH_SUFFIXES suffix1 [suffix2 ...]]              [DOC ""cache documentation string""]              [NO_DEFAULT_PATH]              [NO_CMAKE_ENVIRONMENT_PATH]              [NO_CMAKE_PATH]              [NO_SYSTEM_ENVIRONMENT_PATH]              [NO_CMAKE_SYSTEM_PATH]              [CMAKE_FIND_ROOT_PATH_BOTH |               ONLY_CMAKE_FIND_ROOT_PATH |               NO_CMAKE_FIND_ROOT_PATH]             ) This command is used to find a full path to named file. A cache entry named by <VAR> is created to store the result of this command. If the full path to a file is found the result is stored in the variable and the search will not be repeated unless the variable is cleared. If nothing is found, the result will be <VAR>-NOTFOUND, and the search will be attempted again the next time find_file is invoked with the same variable. The name of the full path to a file that is searched for is specified by the names listed after the NAMES argument. Additional search locations can be specified after the PATHS argument. If ENV var is found in the HINTS or PATHS section the environment variable var will be read and converted from a system environment variable to a cmake style list of paths. For example ENV PATH would be a way to list the system path variable. The argument after DOC will be used for the documentation string in the cache. PATH_SUFFIXES specifies additional subdirectories to check below each search path. If NO_DEFAULT_PATH is specified, then no additional paths are added to the search. If NO_DEFAULT_PATH is not specified, the search process is as follows: 1. Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a -DVAR=value. This can be skipped if NO_CMAKE_PATH is passed.    <prefix>/include for each <prefix> in CMAKE_PREFIX_PATH    CMAKE_INCLUDE_PATH    CMAKE_FRAMEWORK_PATH 2. Search paths specified in cmake-specific environment variables. These are intended to be set in the user's shell configuration. This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.    <prefix>/include for each <prefix> in CMAKE_PREFIX_PATH    CMAKE_INCLUDE_PATH    CMAKE_FRAMEWORK_PATH 3. Search the paths specified by the HINTS option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the PATHS option. 4. Search the standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH is an argument.    PATH    INCLUDE 5. Search cmake variables defined in the Platform files for the current system. This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.    <prefix>/include for each <prefix> in CMAKE_SYSTEM_PREFIX_PATH    CMAKE_SYSTEM_INCLUDE_PATH    CMAKE_SYSTEM_FRAMEWORK_PATH 6. Search the paths specified by the PATHS option or in the short-hand version of the command. These are typically hard-coded guesses. On Darwin or systems supporting OS X Frameworks, the cmake variable CMAKE_FIND_FRAMEWORK can be set to empty or one of the following:    ""FIRST""  - Try to find frameworks before standard               libraries or headers. This is the default on Darwin.    ""LAST""   - Try to find frameworks after standard               libraries or headers.    ""ONLY""   - Only try to find frameworks.    ""NEVER"" - Never try to find frameworks. On Darwin or systems supporting OS X Application Bundles, the cmake variable CMAKE_FIND_APPBUNDLE can be set to empty or one of the following:    ""FIRST""  - Try to find application bundles before standard               programs. This is the default on Darwin.    ""LAST""   - Try to find application bundles after standard               programs.    ""ONLY""   - Only try to find application bundles.    ""NEVER"" - Never try to find application bundles. The CMake variable CMAKE_FIND_ROOT_PATH specifies one or more directories to be prepended to all other search directories. This effectively ""re-roots"" the entire search under given locations. By default it is empty. It is especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in CMAKE_FIND_ROOT_PATH and then the non-rooted directories will be searched. The default behavior can be adjusted by setting CMAKE_FIND_ROOT_PATH_MODE_INCLUDE. This behavior can be manually overridden on a per-call basis. By using CMAKE_FIND_ROOT_PATH_BOTH the search order will be as described above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH will not be used. If ONLY_CMAKE_FIND_ROOT_PATH is used then only the re-rooted directories will be searched. The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the NO_* options:    find_file(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)    find_file(<VAR> NAMES name) Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again. find_library: Find a library.    find_library(<VAR> name1 [path1 path2 ...]) This is the short-hand signature for the command that is sufficient in many cases. It is the same as find_library(<VAR> name1 [PATHS path1 path2 ...])    find_library(              <VAR>              name | NAMES name1 [name2 ...]              [HINTS path1 [path2 ... ENV var]]              [PATHS path1 [path2 ... ENV var]]              [PATH_SUFFIXES suffix1 [suffix2 ...]]              [DOC ""cache documentation string""]              [NO_DEFAULT_PATH]              [NO_CMAKE_ENVIRONMENT_PATH]              [NO_CMAKE_PATH]              [NO_SYSTEM_ENVIRONMENT_PATH]              [NO_CMAKE_SYSTEM_PATH]              [CMAKE_FIND_ROOT_PATH_BOTH |               ONLY_CMAKE_FIND_ROOT_PATH |               NO_CMAKE_FIND_ROOT_PATH]             ) This command is used to find a library. A cache entry named by <VAR> is created to store the result of this command. If the library is found the result is stored in the variable and the search will not be repeated unless the variable is cleared. If nothing is found, the result will be <VAR>-NOTFOUND, and the search will be attempted again the next time find_library is invoked with the same variable. The name of the library that is searched for is specified by the names listed after the NAMES argument. Additional search locations can be specified after the PATHS argument. If ENV var is found in the HINTS or PATHS section the environment variable var will be read and converted from a system environment variable to a cmake style list of paths. For example ENV PATH would be a way to list the system path variable. The argument after DOC will be used for the documentation string in the cache. PATH_SUFFIXES specifies additional subdirectories to check below each search path. If NO_DEFAULT_PATH is specified, then no additional paths are added to the search. If NO_DEFAULT_PATH is not specified, the search process is as follows: 1. Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a -DVAR=value. This can be skipped if NO_CMAKE_PATH is passed.    <prefix>/lib/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and    <prefix>/lib for each <prefix> in CMAKE_PREFIX_PATH    CMAKE_LIBRARY_PATH    CMAKE_FRAMEWORK_PATH 2. Search paths specified in cmake-specific environment variables. These are intended to be set in the user's shell configuration. This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.    <prefix>/lib/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and    <prefix>/lib for each <prefix> in CMAKE_PREFIX_PATH    CMAKE_LIBRARY_PATH    CMAKE_FRAMEWORK_PATH 3. Search the paths specified by the HINTS option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the PATHS option. 4. Search the standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH is an argument.    PATH    LIB 5. Search cmake variables defined in the Platform files for the current system. This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.    <prefix>/lib/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and    <prefix>/lib for each <prefix> in CMAKE_SYSTEM_PREFIX_PATH    CMAKE_SYSTEM_LIBRARY_PATH    CMAKE_SYSTEM_FRAMEWORK_PATH 6. Search the paths specified by the PATHS option or in the short-hand version of the command. These are typically hard-coded guesses. On Darwin or systems supporting OS X Frameworks, the cmake variable CMAKE_FIND_FRAMEWORK can be set to empty or one of the following:    ""FIRST""  - Try to find frameworks before standard               libraries or headers. This is the default on Darwin.    ""LAST""   - Try to find frameworks after standard               libraries or headers.    ""ONLY""   - Only try to find frameworks.    ""NEVER"" - Never try to find frameworks. On Darwin or systems supporting OS X Application Bundles, the cmake variable CMAKE_FIND_APPBUNDLE can be set to empty or one of the following:    ""FIRST""  - Try to find application bundles before standard               programs. This is the default on Darwin.    ""LAST""   - Try to find application bundles after standard               programs.    ""ONLY""   - Only try to find application bundles.    ""NEVER"" - Never try to find application bundles. The CMake variable CMAKE_FIND_ROOT_PATH specifies one or more directories to be prepended to all other search directories. This effectively ""re-roots"" the entire search under given locations. By default it is empty. It is especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in CMAKE_FIND_ROOT_PATH and then the non-rooted directories will be searched. The default behavior can be adjusted by setting CMAKE_FIND_ROOT_PATH_MODE_LIBRARY. This behavior can be manually overridden on a per-call basis. By using CMAKE_FIND_ROOT_PATH_BOTH the search order will be as described above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH will not be used. If ONLY_CMAKE_FIND_ROOT_PATH is used then only the re-rooted directories will be searched. The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the NO_* options:    find_library(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)    find_library(<VAR> NAMES name) Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again. If the library found is a framework, then VAR will be set to the full path to the framework <fullPath>/A.framework. When a full path to a framework is used as a library, CMake will use a -framework A, and a -F<fullPath> to link the framework to the target. If the global property FIND_LIBRARY_USE_LIB64_PATHS is set all search paths will be tested as normal, with ""64/"" appended, and with all matches of ""lib/"" replaced with ""lib64/"". This property is automatically set for the platforms that are known to need it if at least one of the languages supported by the PROJECT command is enabled. find_package: Load settings for an external project.   find_package(<package> [version] [EXACT] [QUIET] [MODULE]                [[REQUIRED|COMPONENTS] [components...]]                [OPTIONAL_COMPONENTS components...]                [NO_POLICY_SCOPE]) Finds and loads settings from an external project. <package>_FOUND will be set to indicate whether the package was found. When the package is found package-specific information is provided through variables documented by the package itself. The QUIET option disables messages if the package cannot be found. The MODULE option disables the second signature documented below. The REQUIRED option stops processing with an error message if the package cannot be found. A package-specific list of required components may be listed after the COMPONENTS option or directly after the REQUIRED option. Additional optional components may be listed after OPTIONAL_COMPONENTS. Available components and their influence on whether a package is considered to be found are defined by the target package. The [version] argument requests a version with which the package found should be compatible (format is major[.minor[.patch[.tweak]]]). The EXACT option requests that the version be matched exactly. If no [version] and/or component list is given to a recursive invocation inside a find-module, the corresponding arguments are forwarded automatically from the outer call (including the EXACT flag for [version]). Version support is currently provided only on a package-by-package basis (details below). User code should generally look for packages using the above simple signature. The remainder of this command documentation specifies the full command signature and details of the search process. Project maintainers wishing to provide a package to be found by this command are encouraged to read on. The command has two modes by which it searches for packages: ""Module"" mode and ""Config"" mode. Module mode is available when the command is invoked with the above reduced signature. CMake searches for a file called ""Find<package>.cmake"" in the CMAKE_MODULE_PATH followed by the CMake installation. If the file is found, it is read and processed by CMake. It is responsible for finding the package, checking the version, and producing any needed messages. Many find-modules provide limited or no support for versioning; check the module documentation. If no module is found and the MODULE option is not given the command proceeds to Config mode. The complete Config mode command signature is:   find_package(<package> [version] [EXACT] [QUIET]                [[REQUIRED|COMPONENTS] [components...]]                [CONFIG|NO_MODULE]                [NO_POLICY_SCOPE]                [NAMES name1 [name2 ...]]                [CONFIGS config1 [config2 ...]]                [HINTS path1 [path2 ... ]]                [PATHS path1 [path2 ... ]]                [PATH_SUFFIXES suffix1 [suffix2 ...]]                [NO_DEFAULT_PATH]                [NO_CMAKE_ENVIRONMENT_PATH]                [NO_CMAKE_PATH]                [NO_SYSTEM_ENVIRONMENT_PATH]                [NO_CMAKE_PACKAGE_REGISTRY]                [NO_CMAKE_BUILDS_PATH]                [NO_CMAKE_SYSTEM_PATH]                [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]                [CMAKE_FIND_ROOT_PATH_BOTH |                 ONLY_CMAKE_FIND_ROOT_PATH |                 NO_CMAKE_FIND_ROOT_PATH]) The CONFIG option may be used to skip Module mode explicitly and switch to Config mode. It is synonymous to using NO_MODULE. Config mode is also implied by use of options not specified in the reduced signature. Config mode attempts to locate a configuration file provided by the package to be found. A cache entry called <package>_DIR is created to hold the directory containing the file. By default the command searches for a package with the name <package>. If the NAMES option is given the names following it are used instead of <package>. The command searches for a file called ""<name>Config.cmake"" or ""<lower-case-name>-config.cmake"" for each name specified. A replacement set of possible configuration file names may be given using the CONFIGS option. The search procedure is specified below. Once found, the configuration file is read and processed by CMake. Since the file is provided by the package it already knows the location of package contents. The full path to the configuration file is stored in the cmake variable <package>_CONFIG. All configuration files which have been considered by CMake while searching for an installation of the package with an appropriate version are stored in the cmake variable <package>_CONSIDERED_CONFIGS, the associated versions in <package>_CONSIDERED_VERSIONS. If the package configuration file cannot be found CMake will generate an error describing the problem unless the QUIET argument is specified. If REQUIRED is specified and the package is not found a fatal error is generated and the configure step stops executing. If <package>_DIR has been set to a directory not containing a configuration file CMake will ignore it and search from scratch. When the [version] argument is given Config mode will only find a version of the package that claims compatibility with the requested version (format is major[.minor[.patch[.tweak]]]). If the EXACT option is given only a version of the package claiming an exact match of the requested version may be found. CMake does not establish any convention for the meaning of version numbers. Package version numbers are checked by ""version"" files provided by the packages themselves. For a candidate package configuration file ""<config-file>.cmake"" the corresponding version file is located next to it and named either ""<config-file>-version.cmake"" or ""<config-file>Version.cmake"". If no such version file is available then the configuration file is assumed to not be compatible with any requested version. A basic version file containing generic version matching code can be created using the macro write_basic_package_version_file(), see its documentation for more details. When a version file is found it is loaded to check the requested version number. The version file is loaded in a nested scope in which the following variables have been defined:   PACKAGE_FIND_NAME          = the <package> name   PACKAGE_FIND_VERSION       = full requested version string   PACKAGE_FIND_VERSION_MAJOR = major version if requested, else 0   PACKAGE_FIND_VERSION_MINOR = minor version if requested, else 0   PACKAGE_FIND_VERSION_PATCH = patch version if requested, else 0   PACKAGE_FIND_VERSION_TWEAK = tweak version if requested, else 0   PACKAGE_FIND_VERSION_COUNT = number of version components, 0 to 4 The version file checks whether it satisfies the requested version and sets these variables:   PACKAGE_VERSION            = full provided version string   PACKAGE_VERSION_EXACT      = true if version is exact match   PACKAGE_VERSION_COMPATIBLE = true if version is compatible   PACKAGE_VERSION_UNSUITABLE = true if unsuitable as any version These variables are checked by the find_package command to determine whether the configuration file provides an acceptable version. They are not available after the find_package call returns. If the version is acceptable the following variables are set:   <package>_VERSION       = full provided version string   <package>_VERSION_MAJOR = major version if provided, else 0   <package>_VERSION_MINOR = minor version if provided, else 0   <package>_VERSION_PATCH = patch version if provided, else 0   <package>_VERSION_TWEAK = tweak version if provided, else 0   <package>_VERSION_COUNT = number of version components, 0 to 4 and the corresponding package configuration file is loaded. When multiple package configuration files are available whose version files claim compatibility with the version requested it is unspecified which one is chosen. No attempt is made to choose a highest or closest version number. Config mode provides an elaborate interface and search procedure. Much of the interface is provided for completeness and for use internally by find-modules loaded by Module mode. Most user code should simply call   find_package(<package> [major[.minor]] [EXACT] [REQUIRED|QUIET]) in order to find a package. Package maintainers providing CMake package configuration files are encouraged to name and install them such that the procedure outlined below will find them without requiring use of additional options. CMake constructs a set of possible installation prefixes for the package. Under each prefix several directories are searched for a configuration file. The tables below show the directories searched. Each entry is meant for installation trees following Windows (W), UNIX (U), or Apple (A) conventions.   <prefix>/                                               (W)   <prefix>/(cmake|CMake)/                                 (W)   <prefix>/<name>*/                                       (W)   <prefix>/<name>*/(cmake|CMake)/                         (W)   <prefix>/(lib/<arch>|lib|share)/cmake/<name>*/          (U)   <prefix>/(lib/<arch>|lib|share)/<name>*/                (U)   <prefix>/(lib/<arch>|lib|share)/<name>*/(cmake|CMake)/  (U) On systems supporting OS X Frameworks and Application Bundles the following directories are searched for frameworks or bundles containing a configuration file:   <prefix>/<name>.framework/Resources/                    (A)   <prefix>/<name>.framework/Resources/CMake/              (A)   <prefix>/<name>.framework/Versions/*/Resources/         (A)   <prefix>/<name>.framework/Versions/*/Resources/CMake/   (A)   <prefix>/<name>.app/Contents/Resources/                 (A)   <prefix>/<name>.app/Contents/Resources/CMake/           (A) In all cases the <name> is treated as case-insensitive and corresponds to any of the names specified (<package> or names given by NAMES). Paths with lib/<arch> are enabled if CMAKE_LIBRARY_ARCHITECTURE is set. If PATH_SUFFIXES is specified the suffixes are appended to each (W) or (U) directory entry one-by-one. This set of directories is intended to work in cooperation with projects that provide configuration files in their installation trees. Directories above marked with (W) are intended for installations on Windows where the prefix may point at the top of an application's installation directory. Those marked with (U) are intended for installations on UNIX platforms where the prefix is shared by multiple packages. This is merely a convention, so all (W) and (U) directories are still searched on all platforms. Directories marked with (A) are intended for installations on Apple platforms. The cmake variables CMAKE_FIND_FRAMEWORK and CMAKE_FIND_APPBUNDLE determine the order of preference as specified below. The set of installation prefixes is constructed using the following steps. If NO_DEFAULT_PATH is specified all NO_* options are enabled. 1. Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a -DVAR=value. This can be skipped if NO_CMAKE_PATH is passed.    CMAKE_PREFIX_PATH    CMAKE_FRAMEWORK_PATH    CMAKE_APPBUNDLE_PATH 2. Search paths specified in cmake-specific environment variables. These are intended to be set in the user's shell configuration. This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.    <package>_DIR    CMAKE_PREFIX_PATH    CMAKE_FRAMEWORK_PATH    CMAKE_APPBUNDLE_PATH 3. Search paths specified by the HINTS option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the PATHS option. 4. Search the standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH is passed. Path entries ending in ""/bin"" or ""/sbin"" are automatically converted to their parent directories.    PATH 5. Search project build trees recently configured in a CMake GUI. This can be skipped if NO_CMAKE_BUILDS_PATH is passed. It is intended for the case when a user is building multiple dependent projects one after another. 6. Search paths stored in the CMake user package registry. This can be skipped if NO_CMAKE_PACKAGE_REGISTRY is passed. On Windows a <package> may appear under registry key   HKEY_CURRENT_USER\Software\Kitware\CMake\Packages\<package> as a REG_SZ value, with arbitrary name, that specifies the directory containing the package configuration file. On UNIX platforms a <package> may appear under the directory   ~/.cmake/packages/<package> as a file, with arbitrary name, whose content specifies the directory containing the package configuration file. See the export(PACKAGE) command to create user package registry entries for project build trees. 7. Search cmake variables defined in the Platform files for the current system. This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.    CMAKE_SYSTEM_PREFIX_PATH    CMAKE_SYSTEM_FRAMEWORK_PATH    CMAKE_SYSTEM_APPBUNDLE_PATH 8. Search paths stored in the CMake system package registry. This can be skipped if NO_CMAKE_SYSTEM_PACKAGE_REGISTRY is passed. On Windows a <package> may appear under registry key   HKEY_LOCAL_MACHINE\Software\Kitware\CMake\Packages\<package> as a REG_SZ value, with arbitrary name, that specifies the directory containing the package configuration file. There is no system package registry on non-Windows platforms. 9. Search paths specified by the PATHS option. These are typically hard-coded guesses. On Darwin or systems supporting OS X Frameworks, the cmake variable CMAKE_FIND_FRAMEWORK can be set to empty or one of the following:    ""FIRST""  - Try to find frameworks before standard               libraries or headers. This is the default on Darwin.    ""LAST""   - Try to find frameworks after standard               libraries or headers.    ""ONLY""   - Only try to find frameworks.    ""NEVER"" - Never try to find frameworks. On Darwin or systems supporting OS X Application Bundles, the cmake variable CMAKE_FIND_APPBUNDLE can be set to empty or one of the following:    ""FIRST""  - Try to find application bundles before standard               programs. This is the default on Darwin.    ""LAST""   - Try to find application bundles after standard               programs.    ""ONLY""   - Only try to find application bundles.    ""NEVER"" - Never try to find application bundles. The CMake variable CMAKE_FIND_ROOT_PATH specifies one or more directories to be prepended to all other search directories. This effectively ""re-roots"" the entire search under given locations. By default it is empty. It is especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in CMAKE_FIND_ROOT_PATH and then the non-rooted directories will be searched. The default behavior can be adjusted by setting CMAKE_FIND_ROOT_PATH_MODE_PACKAGE. This behavior can be manually overridden on a per-call basis. By using CMAKE_FIND_ROOT_PATH_BOTH the search order will be as described above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH will not be used. If ONLY_CMAKE_FIND_ROOT_PATH is used then only the re-rooted directories will be searched. The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the NO_* options:    find_package(<package> PATHS paths... NO_DEFAULT_PATH)    find_package(<package>) Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again. Every non-REQUIRED find_package() call can be disabled by setting the variable CMAKE_DISABLE_FIND_PACKAGE_<package> to TRUE. See the documentation for the CMAKE_DISABLE_FIND_PACKAGE_<package> variable for more information. See the cmake_policy() command documentation for discussion of the NO_POLICY_SCOPE option. find_path: Find the directory containing a file.    find_path(<VAR> name1 [path1 path2 ...]) This is the short-hand signature for the command that is sufficient in many cases. It is the same as find_path(<VAR> name1 [PATHS path1 path2 ...])    find_path(              <VAR>              name | NAMES name1 [name2 ...]              [HINTS path1 [path2 ... ENV var]]              [PATHS path1 [path2 ... ENV var]]              [PATH_SUFFIXES suffix1 [suffix2 ...]]              [DOC ""cache documentation string""]              [NO_DEFAULT_PATH]              [NO_CMAKE_ENVIRONMENT_PATH]              [NO_CMAKE_PATH]              [NO_SYSTEM_ENVIRONMENT_PATH]              [NO_CMAKE_SYSTEM_PATH]              [CMAKE_FIND_ROOT_PATH_BOTH |               ONLY_CMAKE_FIND_ROOT_PATH |               NO_CMAKE_FIND_ROOT_PATH]             ) This command is used to find a directory containing the named file. A cache entry named by <VAR> is created to store the result of this command. If the file in a directory is found the result is stored in the variable and the search will not be repeated unless the variable is cleared. If nothing is found, the result will be <VAR>-NOTFOUND, and the search will be attempted again the next time find_path is invoked with the same variable. The name of the file in a directory that is searched for is specified by the names listed after the NAMES argument. Additional search locations can be specified after the PATHS argument. If ENV var is found in the HINTS or PATHS section the environment variable var will be read and converted from a system environment variable to a cmake style list of paths. For example ENV PATH would be a way to list the system path variable. The argument after DOC will be used for the documentation string in the cache. PATH_SUFFIXES specifies additional subdirectories to check below each search path. If NO_DEFAULT_PATH is specified, then no additional paths are added to the search. If NO_DEFAULT_PATH is not specified, the search process is as follows: 1. Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a -DVAR=value. This can be skipped if NO_CMAKE_PATH is passed.    <prefix>/include for each <prefix> in CMAKE_PREFIX_PATH    CMAKE_INCLUDE_PATH    CMAKE_FRAMEWORK_PATH 2. Search paths specified in cmake-specific environment variables. These are intended to be set in the user's shell configuration. This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.    <prefix>/include for each <prefix> in CMAKE_PREFIX_PATH    CMAKE_INCLUDE_PATH    CMAKE_FRAMEWORK_PATH 3. Search the paths specified by the HINTS option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the PATHS option. 4. Search the standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH is an argument.    PATH    INCLUDE 5. Search cmake variables defined in the Platform files for the current system. This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.    <prefix>/include for each <prefix> in CMAKE_SYSTEM_PREFIX_PATH    CMAKE_SYSTEM_INCLUDE_PATH    CMAKE_SYSTEM_FRAMEWORK_PATH 6. Search the paths specified by the PATHS option or in the short-hand version of the command. These are typically hard-coded guesses. On Darwin or systems supporting OS X Frameworks, the cmake variable CMAKE_FIND_FRAMEWORK can be set to empty or one of the following:    ""FIRST""  - Try to find frameworks before standard               libraries or headers. This is the default on Darwin.    ""LAST""   - Try to find frameworks after standard               libraries or headers.    ""ONLY""   - Only try to find frameworks.    ""NEVER"" - Never try to find frameworks. On Darwin or systems supporting OS X Application Bundles, the cmake variable CMAKE_FIND_APPBUNDLE can be set to empty or one of the following:    ""FIRST""  - Try to find application bundles before standard               programs. This is the default on Darwin.    ""LAST""   - Try to find application bundles after standard               programs.    ""ONLY""   - Only try to find application bundles.    ""NEVER"" - Never try to find application bundles. The CMake variable CMAKE_FIND_ROOT_PATH specifies one or more directories to be prepended to all other search directories. This effectively ""re-roots"" the entire search under given locations. By default it is empty. It is especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in CMAKE_FIND_ROOT_PATH and then the non-rooted directories will be searched. The default behavior can be adjusted by setting CMAKE_FIND_ROOT_PATH_MODE_INCLUDE. This behavior can be manually overridden on a per-call basis. By using CMAKE_FIND_ROOT_PATH_BOTH the search order will be as described above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH will not be used. If ONLY_CMAKE_FIND_ROOT_PATH is used then only the re-rooted directories will be searched. The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the NO_* options:    find_path(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)    find_path(<VAR> NAMES name) Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again. When searching for frameworks, if the file is specified as A/b.h, then the framework search will look for A.framework/Headers/b.h. If that is found the path will be set to the path to the framework. CMake will convert this to the correct -F option to include the file. find_program: Find an executable program.    find_program(<VAR> name1 [path1 path2 ...]) This is the short-hand signature for the command that is sufficient in many cases. It is the same as find_program(<VAR> name1 [PATHS path1 path2 ...])    find_program(              <VAR>              name | NAMES name1 [name2 ...]              [HINTS path1 [path2 ... ENV var]]              [PATHS path1 [path2 ... ENV var]]              [PATH_SUFFIXES suffix1 [suffix2 ...]]              [DOC ""cache documentation string""]              [NO_DEFAULT_PATH]              [NO_CMAKE_ENVIRONMENT_PATH]              [NO_CMAKE_PATH]              [NO_SYSTEM_ENVIRONMENT_PATH]              [NO_CMAKE_SYSTEM_PATH]              [CMAKE_FIND_ROOT_PATH_BOTH |               ONLY_CMAKE_FIND_ROOT_PATH |               NO_CMAKE_FIND_ROOT_PATH]             ) This command is used to find a program. A cache entry named by <VAR> is created to store the result of this command. If the program is found the result is stored in the variable and the search will not be repeated unless the variable is cleared. If nothing is found, the result will be <VAR>-NOTFOUND, and the search will be attempted again the next time find_program is invoked with the same variable. The name of the program that is searched for is specified by the names listed after the NAMES argument. Additional search locations can be specified after the PATHS argument. If ENV var is found in the HINTS or PATHS section the environment variable var will be read and converted from a system environment variable to a cmake style list of paths. For example ENV PATH would be a way to list the system path variable. The argument after DOC will be used for the documentation string in the cache. PATH_SUFFIXES specifies additional subdirectories to check below each search path. If NO_DEFAULT_PATH is specified, then no additional paths are added to the search. If NO_DEFAULT_PATH is not specified, the search process is as follows: 1. Search paths specified in cmake-specific cache variables. These are intended to be used on the command line with a -DVAR=value. This can be skipped if NO_CMAKE_PATH is passed.    <prefix>/[s]bin for each <prefix> in CMAKE_PREFIX_PATH    CMAKE_PROGRAM_PATH    CMAKE_APPBUNDLE_PATH 2. Search paths specified in cmake-specific environment variables. These are intended to be set in the user's shell configuration. This can be skipped if NO_CMAKE_ENVIRONMENT_PATH is passed.    <prefix>/[s]bin for each <prefix> in CMAKE_PREFIX_PATH    CMAKE_PROGRAM_PATH    CMAKE_APPBUNDLE_PATH 3. Search the paths specified by the HINTS option. These should be paths computed by system introspection, such as a hint provided by the location of another item already found. Hard-coded guesses should be specified with the PATHS option. 4. Search the standard system environment variables. This can be skipped if NO_SYSTEM_ENVIRONMENT_PATH is an argument.    PATH    5. Search cmake variables defined in the Platform files for the current system. This can be skipped if NO_CMAKE_SYSTEM_PATH is passed.    <prefix>/[s]bin for each <prefix> in CMAKE_SYSTEM_PREFIX_PATH    CMAKE_SYSTEM_PROGRAM_PATH    CMAKE_SYSTEM_APPBUNDLE_PATH 6. Search the paths specified by the PATHS option or in the short-hand version of the command. These are typically hard-coded guesses. On Darwin or systems supporting OS X Frameworks, the cmake variable CMAKE_FIND_FRAMEWORK can be set to empty or one of the following:    ""FIRST""  - Try to find frameworks before standard               libraries or headers. This is the default on Darwin.    ""LAST""   - Try to find frameworks after standard               libraries or headers.    ""ONLY""   - Only try to find frameworks.    ""NEVER"" - Never try to find frameworks. On Darwin or systems supporting OS X Application Bundles, the cmake variable CMAKE_FIND_APPBUNDLE can be set to empty or one of the following:    ""FIRST""  - Try to find application bundles before standard               programs. This is the default on Darwin.    ""LAST""   - Try to find application bundles after standard               programs.    ""ONLY""   - Only try to find application bundles.    ""NEVER"" - Never try to find application bundles. The CMake variable CMAKE_FIND_ROOT_PATH specifies one or more directories to be prepended to all other search directories. This effectively ""re-roots"" the entire search under given locations. By default it is empty. It is especially useful when cross-compiling to point to the root directory of the target environment and CMake will search there too. By default at first the directories listed in CMAKE_FIND_ROOT_PATH and then the non-rooted directories will be searched. The default behavior can be adjusted by setting CMAKE_FIND_ROOT_PATH_MODE_PROGRAM. This behavior can be manually overridden on a per-call basis. By using CMAKE_FIND_ROOT_PATH_BOTH the search order will be as described above. If NO_CMAKE_FIND_ROOT_PATH is used then CMAKE_FIND_ROOT_PATH will not be used. If ONLY_CMAKE_FIND_ROOT_PATH is used then only the re-rooted directories will be searched. The default search order is designed to be most-specific to least-specific for common use cases. Projects may override the order by simply calling the command multiple times and using the NO_* options:    find_program(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)    find_program(<VAR> NAMES name) Once one of the calls succeeds the result variable will be set and stored in the cache so that no call will search again. foreach: Evaluate a group of commands for each value in a list.   foreach(loop_var arg1 arg2 ...)     COMMAND1(ARGS ...)     COMMAND2(ARGS ...)     ...   endforeach(loop_var) All commands between foreach and the matching endforeach are recorded without being invoked. Once the endforeach is evaluated, the recorded list of commands is invoked once for each argument listed in the original foreach command. Before each iteration of the loop ""${loop_var}"" will be set as a variable with the current value in the list.   foreach(loop_var RANGE total)   foreach(loop_var RANGE start stop [step]) Foreach can also iterate over a generated range of numbers. There are three types of this iteration: * When specifying single number, the range will have elements 0 to ""total"". * When specifying two numbers, the range will have elements from the first number to the second number. * The third optional number is the increment used to iterate from the first number to the second number.   foreach(loop_var IN [LISTS [list1 [...]]]                       [ITEMS [item1 [...]]]) Iterates over a precise list of items. The LISTS option names list-valued variables to be traversed, including empty elements (an empty string is a zero-length list). The ITEMS option ends argument parsing and includes all arguments following it in the iteration. function: Start recording a function for later invocation as a command.   function(<name> [arg1 [arg2 [arg3 ...]]])     COMMAND1(ARGS ...)     COMMAND2(ARGS ...)     ...   endfunction(<name>) Define a function named <name> that takes arguments named arg1 arg2 arg3 (...). Commands listed after function, but before the matching endfunction, are not invoked until the function is invoked. When it is invoked, the commands recorded in the function are first modified by replacing formal parameters (${arg1}) with the arguments passed, and then invoked as normal commands. In addition to referencing the formal parameters you can reference the variable ARGC which will be set to the number of arguments passed into the function as well as ARGV0 ARGV1 ARGV2 ... which will have the actual values of the arguments passed in. This facilitates creating functions with optional arguments. Additionally ARGV holds the list of all arguments given to the function and ARGN holds the list of argument past the last expected argument. See the cmake_policy() command documentation for the behavior of policies inside functions. get_cmake_property: Get a property of the CMake instance.   get_cmake_property(VAR property) Get a property from the CMake instance. The value of the property is stored in the variable VAR. If the property is not found, VAR will be set to ""NOTFOUND"". Some supported properties include: VARIABLES, CACHE_VARIABLES, COMMANDS, MACROS, and COMPONENTS. See also the more general get_property() command. get_directory_property: Get a property of DIRECTORY scope.   get_directory_property(<variable> [DIRECTORY <dir>] <prop-name>) Store a property of directory scope in the named variable. If the property is not defined the empty-string is returned. The DIRECTORY argument specifies another directory from which to retrieve the property value. The specified directory must have already been traversed by CMake.   get_directory_property(<variable> [DIRECTORY <dir>]                          DEFINITION <var-name>) Get a variable definition from a directory. This form is useful to get a variable definition from another directory. See also the more general get_property() command. get_filename_component: Get a specific component of a full filename.   get_filename_component(<VAR> FileName                          PATH|ABSOLUTE|NAME|EXT|NAME_WE|REALPATH                          [CACHE]) Set <VAR> to be the path (PATH), file name (NAME), file extension (EXT), file name without extension (NAME_WE) of FileName, the full path (ABSOLUTE), or the full path with all symlinks resolved (REALPATH). Note that the path is converted to Unix slashes format and has no trailing slashes. The longest file extension is always considered. If the optional CACHE argument is specified, the result variable is added to the cache.   get_filename_component(<VAR> FileName                          PROGRAM [PROGRAM_ARGS <ARG_VAR>]                          [CACHE]) The program in FileName will be found in the system search path or left as a full path. If PROGRAM_ARGS is present with PROGRAM, then any command-line arguments present in the FileName string are split from the program name and stored in <ARG_VAR>. This is used to separate a program name from its arguments in a command line string. get_property: Get a property.   get_property(<variable>                <GLOBAL             |                 DIRECTORY [dir]    |                 TARGET    <target> |                 SOURCE    <source> |                 TEST      <test>   |                 CACHE     <entry>  |                 VARIABLE>                PROPERTY <name>                [SET | DEFINED | BRIEF_DOCS | FULL_DOCS]) Get one property from one object in a scope. The first argument specifies the variable in which to store the result. The second argument determines the scope from which to get the property. It must be one of the following: GLOBAL scope is unique and does not accept a name. DIRECTORY scope defaults to the current directory but another directory (already processed by CMake) may be named by full or relative path. TARGET scope must name one existing target. SOURCE scope must name one source file. TEST scope must name one existing test. CACHE scope must name one cache entry. VARIABLE scope is unique and does not accept a name. The required PROPERTY option is immediately followed by the name of the property to get. If the property is not set an empty value is returned. If the SET option is given the variable is set to a boolean value indicating whether the property has been set. If the DEFINED option is given the variable is set to a boolean value indicating whether the property has been defined such as with define_property. If BRIEF_DOCS or FULL_DOCS is given then the variable is set to a string containing documentation for the requested property. If documentation is requested for a property that has not been defined NOTFOUND is returned. if: Conditionally execute a group of commands.   if(expression)     # then section.     COMMAND1(ARGS ...)     COMMAND2(ARGS ...)     ...   elseif(expression2)     # elseif section.     COMMAND1(ARGS ...)     COMMAND2(ARGS ...)     ...   else(expression)     # else section.     COMMAND1(ARGS ...)     COMMAND2(ARGS ...)     ...   endif(expression) Evaluates the given expression. If the result is true, the commands in the THEN section are invoked. Otherwise, the commands in the else section are invoked. The elseif and else sections are optional. You may have multiple elseif clauses. Note that the expression in the else and endif clause is optional. Long expressions can be used and there is a traditional order of precedence. Parenthetical expressions are evaluated first followed by unary operators such as EXISTS, COMMAND, and DEFINED. Then any EQUAL, LESS, GREATER, STRLESS, STRGREATER, STREQUAL, MATCHES will be evaluated. Then NOT operators and finally AND, OR operators will be evaluated. Possible expressions are:   if(<constant>) True if the constant is 1, ON, YES, TRUE, Y, or a non-zero number. False if the constant is 0, OFF, NO, FALSE, N, IGNORE, """", or ends in the suffix '-NOTFOUND'. Named boolean constants are case-insensitive. If the argument is not one of these constants, it is treated as a variable:   if(<variable>) True if the variable is defined to a value that is not a false constant. False otherwise.   if(NOT <expression>) True if the expression is not true.   if(<expr1> AND <expr2>) True if both expressions would be considered true individually.   if(<expr1> OR <expr2>) True if either expression would be considered true individually.   if(COMMAND command-name) True if the given name is a command, macro or function that can be invoked.   if(POLICY policy-id) True if the given name is an existing policy (of the form CMP<NNNN>).   if(TARGET target-name) True if the given name is an existing target, built or imported.   if(EXISTS file-name)   if(EXISTS directory-name) True if the named file or directory exists. Behavior is well-defined only for full paths.   if(file1 IS_NEWER_THAN file2) True if file1 is newer than file2 or if one of the two files doesn't exist. Behavior is well-defined only for full paths.   if(IS_DIRECTORY directory-name) True if the given name is a directory. Behavior is well-defined only for full paths.   if(IS_SYMLINK file-name) True if the given name is a symbolic link. Behavior is well-defined only for full paths.   if(IS_ABSOLUTE path) True if the given path is an absolute path.   if(<variable|string> MATCHES regex) True if the given string or variable's value matches the given regular expression.   if(<variable|string> LESS <variable|string>)   if(<variable|string> GREATER <variable|string>)   if(<variable|string> EQUAL <variable|string>) True if the given string or variable's value is a valid number and the inequality or equality is true.   if(<variable|string> STRLESS <variable|string>)   if(<variable|string> STRGREATER <variable|string>)   if(<variable|string> STREQUAL <variable|string>) True if the given string or variable's value is lexicographically less (or greater, or equal) than the string or variable on the right.   if(<variable|string> VERSION_LESS <variable|string>)   if(<variable|string> VERSION_EQUAL <variable|string>)   if(<variable|string> VERSION_GREATER <variable|string>) Component-wise integer version number comparison (version format is major[.minor[.patch[.tweak]]]).   if(DEFINED <variable>) True if the given variable is defined. It does not matter if the variable is true or false just if it has been set.   if((expression) AND (expression OR (expression))) The expressions inside the parenthesis are evaluated first and then the remaining expression is evaluated as in the previous examples. Where there are nested parenthesis the innermost are evaluated as part of evaluating the expression that contains them. The if command was written very early in CMake's history, predating the ${} variable evaluation syntax, and for convenience evaluates variables named by its arguments as shown in the above signatures. Note that normal variable evaluation with ${} applies before the if command even receives the arguments. Therefore code like   set(var1 OFF)   set(var2 ""var1"")   if(${var2}) appears to the if command as   if(var1) and is evaluated according to the if(<variable>) case documented above. The result is OFF which is false. However, if we remove the ${} from the example then the command sees   if(var2) which is true because var2 is defined to ""var1"" which is not a false constant. Automatic evaluation applies in the other cases whenever the above-documented signature accepts <variable|string>: 1) The left hand argument to MATCHES is first checked to see if it is a defined variable, if so the variable's value is used, otherwise the original value is used. 2) If the left hand argument to MATCHES is missing it returns false without error 3) Both left and right hand arguments to LESS GREATER EQUAL are independently tested to see if they are defined variables, if so their defined values are used otherwise the original value is used. 4) Both left and right hand arguments to STRLESS STREQUAL STRGREATER are independently tested to see if they are defined variables, if so their defined values are used otherwise the original value is used. 5) Both left and right hand argumemnts to VERSION_LESS VERSION_EQUAL VERSION_GREATER are independently tested to see if they are defined variables, if so their defined values are used otherwise the original value is used. 6) The right hand argument to NOT is tested to see if it is a boolean constant, if so the value is used, otherwise it is assumed to be a variable and it is dereferenced. 7) The left and right hand arguments to AND OR are independently tested to see if they are boolean constants, if so they are used as such, otherwise they are assumed to be variables and are dereferenced. include: Read CMake listfile code from the given file.   include(<file|module> [OPTIONAL] [RESULT_VARIABLE <VAR>]                         [NO_POLICY_SCOPE]) Reads CMake listfile code from the given file. Commands in the file are processed immediately as if they were written in place of the include command. If OPTIONAL is present, then no error is raised if the file does not exist. If RESULT_VARIABLE is given the variable will be set to the full filename which has been included or NOTFOUND if it failed. If a module is specified instead of a file, the file with name <modulename>.cmake is searched first in CMAKE_MODULE_PATH, then in the CMake module directory. There is one exception to this: if the file which calls include() is located itself in the CMake module directory, then first the CMake module directory is searched and CMAKE_MODULE_PATH afterwards. See also policy CMP0017. See the cmake_policy() command documentation for discussion of the NO_POLICY_SCOPE option. list: List operations.   list(LENGTH <list> <output variable>)   list(GET <list> <element index> [<element index> ...]        <output variable>)   list(APPEND <list> <element> [<element> ...])   list(FIND <list> <value> <output variable>)   list(INSERT <list> <element_index> <element> [<element> ...])   list(REMOVE_ITEM <list> <value> [<value> ...])   list(REMOVE_AT <list> <index> [<index> ...])   list(REMOVE_DUPLICATES <list>)   list(REVERSE <list>)   list(SORT <list>) LENGTH will return a given list's length. GET will return list of elements specified by indices from the list. APPEND will append elements to the list. FIND will return the index of the element specified in the list or -1 if it wasn't found. INSERT will insert elements to the list to the specified location. REMOVE_AT and REMOVE_ITEM will remove items from the list. The difference is that REMOVE_ITEM will remove the given items, while REMOVE_AT will remove the items at the given indices. REMOVE_DUPLICATES will remove duplicated items in the list. REVERSE reverses the contents of the list in-place. SORT sorts the list in-place alphabetically. The list subcommands APPEND, INSERT, REMOVE_AT, REMOVE_ITEM, REMOVE_DUPLICATES, REVERSE and SORT may create new values for the list within the current CMake variable scope. Similar to the SET command, the LIST command creates new variable values in the current scope, even if the list itself is actually defined in a parent scope. To propagate the results of these operations upwards, use SET with PARENT_SCOPE, SET with CACHE INTERNAL, or some other means of value propagation. NOTES: A list in cmake is a ; separated group of strings. To create a list the set command can be used. For example, set(var a b c d e) creates a list with a;b;c;d;e, and set(var ""a b c d e"") creates a string or a list with one item in it. When specifying index values, if <element index> is 0 or greater, it is indexed from the beginning of the list, with 0 representing the first list element. If <element index> is -1 or lesser, it is indexed from the end of the list, with -1 representing the last list element. Be careful when counting with negative indices: they do not start from 0. -0 is equivalent to 0, the first list element. macro: Start recording a macro for later invocation as a command.   macro(<name> [arg1 [arg2 [arg3 ...]]])     COMMAND1(ARGS ...)     COMMAND2(ARGS ...)     ...   endmacro(<name>) Define a macro named <name> that takes arguments named arg1 arg2 arg3 (...). Commands listed after macro, but before the matching endmacro, are not invoked until the macro is invoked. When it is invoked, the commands recorded in the macro are first modified by replacing formal parameters (${arg1}) with the arguments passed, and then invoked as normal commands. In addition to referencing the formal parameters you can reference the values ${ARGC} which will be set to the number of arguments passed into the function as well as ${ARGV0} ${ARGV1} ${ARGV2} ... which will have the actual values of the arguments passed in. This facilitates creating macros with optional arguments. Additionally ${ARGV} holds the list of all arguments given to the macro and ${ARGN} holds the list of argument past the last expected argument. Note that the parameters to a macro and values such as ARGN are not variables in the usual CMake sense. They are string replacements much like the c preprocessor would do with a macro. If you want true CMake variables you should look at the function command. See the cmake_policy() command documentation for the behavior of policies inside macros. make_directory: Deprecated. Use the file(MAKE_DIRECTORY ) command instead.   make_directory(directory) Creates the specified directory. Full paths should be given. Any parent directories that do not exist will also be created. Use with care. mark_as_advanced: Mark cmake cached variables as advanced.   mark_as_advanced([CLEAR|FORCE] VAR VAR2 VAR...) Mark the named cached variables as advanced. An advanced variable will not be displayed in any of the cmake GUIs unless the show advanced option is on. If CLEAR is the first argument advanced variables are changed back to unadvanced. If FORCE is the first argument, then the variable is made advanced. If neither FORCE nor CLEAR is specified, new values will be marked as advanced, but if the variable already has an advanced/non-advanced state, it will not be changed. It does nothing in script mode. math: Mathematical expressions.   math(EXPR <output variable> <math expression>) EXPR evaluates mathematical expression and return result in the output variable. Example mathematical expression is '5 * ( 10 + 13 )'. Supported operators are + - * / % | & ^ ~ << >> * / %. They have the same meaning as they do in c code. message: Display a message to the user.   message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR]           ""message to display"" ...) The optional keyword determines the type of message:   (none)         = Important information   STATUS         = Incidental information   WARNING        = CMake Warning, continue processing   AUTHOR_WARNING = CMake Warning (dev), continue processing   SEND_ERROR     = CMake Error, continue but skip generation   FATAL_ERROR    = CMake Error, stop all processing The CMake command-line tool displays STATUS messages on stdout and all other message types on stderr. The CMake GUI displays all messages in its log area. The interactive dialogs (ccmake and CMakeSetup) show STATUS messages one at a time on a status line and other messages in interactive pop-up boxes. CMake Warning and Error message text displays using a simple markup language. Non-indented text is formatted in line-wrapped paragraphs delimited by newlines. Indented text is considered pre-formatted. option: Provides an option that the user can optionally select.   option(<option_variable> ""help string describing option""          [initial value]) Provide an option for the user to select as ON or OFF. If no initial value is provided, OFF is used. If you have options that depend on the values of other options, see the module help for CMakeDependentOption. remove: Deprecated. Use the list(REMOVE_ITEM ) command instead.   remove(VAR VALUE VALUE ...) Removes VALUE from the variable VAR. This is typically used to remove entries from a vector (e.g. semicolon separated list). VALUE is expanded. return: Return from a file, directory or function.   return() Returns from a file, directory or function. When this command is encountered in an included file (via include() or find_package()), it causes processing of the current file to stop and control is returned to the including file. If it is encountered in a file which is not included by another file, e.g. a CMakeLists.txt, control is returned to the parent directory if there is one. If return is called in a function, control is returned to the caller of the function. Note that a macro is not a function and does not handle return like a function does. separate_arguments: Parse space-separated arguments into a semicolon-separated list.   separate_arguments(<var> <UNIX|WINDOWS>_COMMAND ""<args>"") Parses a unix- or windows-style command-line string ""<args>"" and stores a semicolon-separated list of the arguments in <var>. The entire command line must be given in one ""<args>"" argument. The UNIX_COMMAND mode separates arguments by unquoted whitespace. It recognizes both single-quote and double-quote pairs. A backslash escapes the next literal character (\"" is ""); there are no special escapes (\n is just n). The WINDOWS_COMMAND mode parses a windows command-line using the same syntax the runtime library uses to construct argv at startup. It separates arguments by whitespace that is not double-quoted. Backslashes are literal unless they precede double-quotes. See the MSDN article ""Parsing C Command-Line Arguments"" for details.   separate_arguments(VARIABLE) Convert the value of VARIABLE to a semi-colon separated list. All spaces are replaced with ';'. This helps with generating command lines. set: Set a CMAKE variable to a given value.   set(<variable> <value>       [[CACHE <type> <docstring> [FORCE]] | PARENT_SCOPE]) Within CMake sets <variable> to the value <value>. <value> is expanded before <variable> is set to it. If CACHE is present, then the <variable> is put in the cache. <type> and <docstring> are then required. <type> is used by the CMake GUI to choose a widget with which the user sets a value. The value for <type> may be one of   FILEPATH = File chooser dialog.   PATH     = Directory chooser dialog.   STRING   = Arbitrary string.   BOOL     = Boolean ON/OFF checkbox.   INTERNAL = No GUI entry (used for persistent variables). If <type> is INTERNAL, then the <value> is always written into the cache, replacing any values existing in the cache. If it is not a cache variable, then this always writes into the current makefile. The FORCE option will overwrite the cache value removing any changes by the user. If PARENT_SCOPE is present, the variable will be set in the scope above the current scope. Each new directory or function creates a new scope. This command will set the value of a variable into the parent directory or calling function (whichever is applicable to the case at hand). If <value> is not specified then the variable is removed instead of set. See also: the unset() command.   set(<variable> <value1> ... <valueN>) In this case <variable> is set to a semicolon separated list of values. <variable> can be an environment variable such as:   set( ENV{PATH} /home/martink ) in which case the environment variable will be set. set_directory_properties: Set a property of the directory.   set_directory_properties(PROPERTIES prop1 value1 prop2 value2) Set a property for the current directory and subdirectories. If the property is not found, CMake will report an error. The properties include: INCLUDE_DIRECTORIES, LINK_DIRECTORIES, INCLUDE_REGULAR_EXPRESSION, and ADDITIONAL_MAKE_CLEAN_FILES. ADDITIONAL_MAKE_CLEAN_FILES is a list of files that will be cleaned as a part of ""make clean"" stage. set_property: Set a named property in a given scope.   set_property(<GLOBAL                            |                 DIRECTORY [dir]                   |                 TARGET    [target1 [target2 ...]] |                 SOURCE    [src1 [src2 ...]]       |                 TEST      [test1 [test2 ...]]     |                 CACHE     [entry1 [entry2 ...]]>                [APPEND] [APPEND_STRING]                PROPERTY <name> [value1 [value2 ...]]) Set one property on zero or more objects of a scope. The first argument determines the scope in which the property is set. It must be one of the following: GLOBAL scope is unique and does not accept a name. DIRECTORY scope defaults to the current directory but another directory (already processed by CMake) may be named by full or relative path. TARGET scope may name zero or more existing targets. SOURCE scope may name zero or more source files. Note that source file properties are visible only to targets added in the same directory (CMakeLists.txt). TEST scope may name zero or more existing tests. CACHE scope must name zero or more cache existing entries. The required PROPERTY option is immediately followed by the name of the property to set. Remaining arguments are used to compose the property value in the form of a semicolon-separated list. If the APPEND option is given the list is appended to any existing property value.If the APPEND_STRING option is given the string is append to any existing property value as string, i.e. it results in a longer string and not a list of strings. site_name: Set the given variable to the name of the computer.   site_name(variable) string: String operations.   string(REGEX MATCH <regular_expression>          <output variable> <input> [<input>...])   string(REGEX MATCHALL <regular_expression>          <output variable> <input> [<input>...])   string(REGEX REPLACE <regular_expression>          <replace_expression> <output variable>          <input> [<input>...])   string(REPLACE <match_string>          <replace_string> <output variable>          <input> [<input>...])   string(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512>          <output variable> <input>)   string(COMPARE EQUAL <string1> <string2> <output variable>)   string(COMPARE NOTEQUAL <string1> <string2> <output variable>)   string(COMPARE LESS <string1> <string2> <output variable>)   string(COMPARE GREATER <string1> <string2> <output variable>)   string(ASCII <number> [<number> ...] <output variable>)   string(CONFIGURE <string1> <output variable>          [@ONLY] [ESCAPE_QUOTES])   string(TOUPPER <string1> <output variable>)   string(TOLOWER <string1> <output variable>)   string(LENGTH <string> <output variable>)   string(SUBSTRING <string> <begin> <length> <output variable>)   string(STRIP <string> <output variable>)   string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]          [RANDOM_SEED <seed>] <output variable>)   string(FIND <string> <substring> <output variable> [REVERSE]) REGEX MATCH will match the regular expression once and store the match in the output variable. REGEX MATCHALL will match the regular expression as many times as possible and store the matches in the output variable as a list. REGEX REPLACE will match the regular expression as many times as possible and substitute the replacement expression for the match in the output. The replace expression may refer to paren-delimited subexpressions of the match using \1, \2, ..., \9. Note that two backslashes (\\1) are required in CMake code to get a backslash through argument parsing. REPLACE will replace all occurrences of match_string in the input with replace_string and store the result in the output. MD5, SHA1, SHA224, SHA256, SHA384, and SHA512 will compute a cryptographic hash of the input string. COMPARE EQUAL/NOTEQUAL/LESS/GREATER will compare the strings and store true or false in the output variable. ASCII will convert all numbers into corresponding ASCII characters. CONFIGURE will transform a string like CONFIGURE_FILE transforms a file. TOUPPER/TOLOWER will convert string to upper/lower characters. LENGTH will return a given string's length. SUBSTRING will return a substring of a given string. If length is -1 the remainder of the string starting at begin will be returned. STRIP will return a substring of a given string with leading and trailing spaces removed. RANDOM will return a random string of given length consisting of characters from the given alphabet. Default length is 5 characters and default alphabet is all numbers and upper and lower case letters. If an integer RANDOM_SEED is given, its value will be used to seed the random number generator. FIND will return the position where the given substring was found in the supplied string. If the REVERSE flag was used, the command will search for the position of the last occurrence of the specified substring. The following characters have special meaning in regular expressions:    ^         Matches at beginning of a line    $         Matches at end of a line    .         Matches any single character    [ ]       Matches any character(s) inside the brackets    [^ ]      Matches any character(s) not inside the brackets     -        Matches any character in range on either side of a dash    *         Matches preceding pattern zero or more times    +         Matches preceding pattern one or more times    ?         Matches preceding pattern zero or once only    |         Matches a pattern on either side of the |    ()        Saves a matched subexpression, which can be referenced              in the REGEX REPLACE operation. Additionally it is saved              by all regular expression-related commands, including              e.g. if( MATCHES ), in the variables CMAKE_MATCH_(0..9). unset: Unset a variable, cache variable, or environment variable.   unset(<variable> [CACHE]) Removes the specified variable causing it to become undefined. If CACHE is present then the variable is removed from the cache instead of the current scope. <variable> can be an environment variable such as:   unset(ENV{LD_LIBRARY_PATH}) in which case the variable will be removed from the current environment. use_mangled_mesa: Copy mesa headers for use in combination with system GL.   use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY) The path to mesa includes, should contain gl_mangle.h. The mesa headers are copied to the specified output directory. This allows mangled mesa headers to override other GL headers by being added to the include directory path earlier. variable_watch: Watch the CMake variable for change.   variable_watch(<variable name> [<command to execute>]) If the specified variable changes, the message will be printed about the variable being changed. If the command is specified, the command will be executed. The command will receive the following arguments: COMMAND(<variable> <access> <value> <current list file> <stack>) while: Evaluate a group of commands while a condition is true   while(condition)     COMMAND1(ARGS ...)     COMMAND2(ARGS ...)     ...   endwhile(condition) All commands between while and the matching endwhile are recorded without being invoked. Once the endwhile is evaluated, the recorded list of commands is invoked as long as the condition is true. The condition is evaluated using the same logic as the if command. write_file: Deprecated. Use the file(WRITE ) command instead.   write_file(filename ""message to write""... [APPEND]) The first argument is the file name, the rest of the arguments are messages to write. If the argument APPEND is specified, then the message will be appended. NOTE 1: file(WRITE ... and file(APPEND ... do exactly the same as this one but add some more functionality. NOTE 2: When using write_file the produced file cannot be used as an input to CMake (CONFIGURE_FILE, source file ...) because it will lead to an infinite loop. Use configure_file if you want to generate input files to CMake. Properties   CMake Properties - Properties supported by CMake, the Cross-Platform Makefile Generator. This is the documentation for the properties supported by CMake. Properties can have different scopes. They can either be assigned to a source file, a directory, a target or globally to CMake. By modifying the values of properties the behaviour of the build system can be customized. Compatibility Commands   CMake Compatibility Listfile Commands - Obsolete commands supported by CMake for compatibility. This is the documentation for now obsolete listfile commands from previous CMake versions, which are still supported for compatibility reasons. You should instead use the newer, faster and shinier new commands. ;-) Standard CMake Modules Copyright Copyright 2000-2009 Kitware, Inc., Insight Software Consortium. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the names of Kitware, Inc., the Insight Software Consortium, nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See Also Home Page Frequently Asked Questions Online Documentation Mailing List The following resources are available to get help using CMake: Home Page: http://www.cmake.org The primary starting point for learning about CMake. Frequently Asked Questions: http://www.cmake.org/Wiki/CMake_FAQ A Wiki is provided containing answers to frequently asked questions. Online Documentation: http://www.cmake.org/HTML/Documentation.html Links to available documentation may be found on this web page. Mailing List: http://www.cmake.org/HTML/MailingLists.html For help and discussion about using cmake, a mailing list is provided at cmake@cmake.org. The list is member-post-only but one may sign up on the CMake web page. Please first read the full documentation at http://www.cmake.org before posting questions to the list. Summary of helpful links:   Home: http://www.cmake.org   Docs: http://www.cmake.org/HTML/Documentation.html   Mail: http://www.cmake.org/HTML/MailingLists.html   FAQ:  http://www.cmake.org/Wiki/CMake_FAQ This website is licensed under a Creative Commons Attribution-NoDerivs 3.0 Unported License. More license and site management information can be found here."	"null"	"null"	"The CMake test driver program. [BSD]"	"true"
"Debug"	"Google Mock"	"https://github.com/google/googletest/blob/master/googlemock/README.md"	"A library for writing and using C++ mock classes. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2652"	"311"	"1039"	"googletest/README.md at master · google/googletest · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 311 Star 2,652 Fork 1,039 google/googletest Code Issues 274 Pull requests 63 Pulse Graphs Permalink Branch: master Switch branches/tags Branches Tags BillyDonahue-patch-1 BillyDonahue-patch-2 master rollback_808 Nothing to show release-1.7.0 release-1.6.0 release-1.5.0 release-1.4.0 release-1.3.0 release-1.2.1 release-1.2.0 release-1.1.0 release-1.0.1 release-1.0.0 Nothing to show Find file Copy path googletest/googlemock/README.md ccd0f94 Nov 30, 2015 BillyDonahue Merge pull request #592 from Ferenc-/master 3 contributors Users who have contributed to this file BillyDonahue Ferenc- marco-m Raw Blame History 334 lines (237 sloc) 12.4 KB Google Mock The Google C++ mocking framework. Overview Google's framework for writing and using C++ mock classes. It can help you derive better designs of your system and write better tests. It is inspired by: jMock, EasyMock, and Hamcrest, and designed with C++'s specifics in mind. Google mock: lets you create mock classes trivially using simple macros. supports a rich set of matchers and actions. handles unordered, partially ordered, or completely ordered expectations. is extensible by users. We hope you find it useful! Features Provides a declarative syntax for defining mocks. Can easily define partial (hybrid) mocks, which are a cross of real and mock objects. Handles functions of arbitrary types and overloaded functions. Comes with a rich set of matchers for validating function arguments. Uses an intuitive syntax for controlling the behavior of a mock. Does automatic verification of expectations (no record-and-replay needed). Allows arbitrary (partial) ordering constraints on function calls to be expressed,. Lets a user extend it by defining new matchers and actions. Does not use exceptions. Is easy to learn and use. Please see the project page above for more information as well as the mailing list for questions, discussions, and development. There is also an IRC channel on OFTC (irc.oftc.net) #gtest available. Please join us! Please note that code under scripts/generator is from cppclean and released under the Apache License, which is different from Google Mock's license. Getting Started If you are new to the project, we suggest that you read the user documentation in the following order: Learn the basics of Google Test, if you choose to use Google Mock with it (recommended). Read Google Mock for Dummies. Read the instructions below on how to build Google Mock. You can also watch Zhanyong's talk on Google Mock's usage and implementation. Once you understand the basics, check out the rest of the docs: CheatSheet - all the commonly used stuff at a glance. CookBook - recipes for getting things done, including advanced techniques. If you need help, please check the KnownIssues and FrequentlyAskedQuestions before posting a question on the discussion group. Using Google Mock Without Google Test Google Mock is not a testing framework itself. Instead, it needs a testing framework for writing tests. Google Mock works seamlessly with Google Test, but you can also use it with any C++ testing framework. Requirements for End Users Google Mock is implemented on top of Google Test, and depends on it. You must use the bundled version of Google Test when using Google Mock. You can also easily configure Google Mock to work with another testing framework, although it will still need Google Test. Please read ""Using_Google_Mock_with_Any_Testing_Framework"" for instructions. Google Mock depends on advanced C++ features and thus requires a more modern compiler. The following are needed to use Google Mock: Linux Requirements GNU-compatible Make or ""gmake"" POSIX-standard shell POSIX(-2) Regular Expressions (regex.h) C++98-standard-compliant compiler (e.g. GCC 3.4 or newer) Windows Requirements Microsoft Visual C++ 8.0 SP1 or newer Mac OS X Requirements Mac OS X 10.4 Tiger or newer Developer Tools Installed Requirements for Contributors We welcome patches. If you plan to contribute a patch, you need to build Google Mock and its tests, which has further requirements: Automake version 1.9 or newer Autoconf version 2.59 or newer Libtool / Libtoolize Python version 2.3 or newer (for running some of the tests and re-generating certain source files from templates) Building Google Mock Preparing to Build (Unix only) If you are using a Unix system and plan to use the GNU Autotools build system to build Google Mock (described below), you'll need to configure it now. To prepare the Autotools build system: cd googlemock autoreconf -fvi  To build Google Mock and your tests that use it, you need to tell your build system where to find its headers and source files. The exact way to do it depends on which build system you use, and is usually straightforward. This section shows how you can integrate Google Mock into your existing build system. Suppose you put Google Mock in directory ${GMOCK_DIR} and Google Test in ${GTEST_DIR} (the latter is ${GMOCK_DIR}/gtest by default). To build Google Mock, create a library build target (or a project as called by Visual Studio and Xcode) to compile ${GTEST_DIR}/src/gtest-all.cc and ${GMOCK_DIR}/src/gmock-all.cc  with ${GTEST_DIR}/include and ${GMOCK_DIR}/include  in the system header search path, and ${GTEST_DIR} and ${GMOCK_DIR}  in the normal header search path. Assuming a Linux-like system and gcc, something like the following will do: g++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} \     -isystem ${GMOCK_DIR}/include -I${GMOCK_DIR} \     -pthread -c ${GTEST_DIR}/src/gtest-all.cc g++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} \     -isystem ${GMOCK_DIR}/include -I${GMOCK_DIR} \     -pthread -c ${GMOCK_DIR}/src/gmock-all.cc ar -rv libgmock.a gtest-all.o gmock-all.o  (We need -pthread as Google Test and Google Mock use threads.) Next, you should compile your test source file with ${GTEST_DIR}/include and ${GMOCK_DIR}/include in the header search path, and link it with gmock and any other necessary libraries: g++ -isystem ${GTEST_DIR}/include -isystem ${GMOCK_DIR}/include \     -pthread path/to/your_test.cc libgmock.a -o your_test  As an example, the make/ directory contains a Makefile that you can use to build Google Mock on systems where GNU make is available (e.g. Linux, Mac OS X, and Cygwin). It doesn't try to build Google Mock's own tests. Instead, it just builds the Google Mock library and a sample test. You can use it as a starting point for your own build script. If the default settings are correct for your environment, the following commands should succeed: cd ${GMOCK_DIR}/make make ./gmock_test  If you see errors, try to tweak the contents of make/Makefile to make them go away. Windows The msvc/2005 directory contains VC++ 2005 projects and the msvc/2010 directory contains VC++ 2010 projects for building Google Mock and selected tests. Change to the appropriate directory and run ""msbuild gmock.sln"" to build the library and tests (or open the gmock.sln in the MSVC IDE). If you want to create your own project to use with Google Mock, you'll have to configure it to use the gmock_config propety sheet. For that: Open the Property Manager window (View | Other Windows | Property Manager) Right-click on your project and select ""Add Existing Property Sheet..."" Navigate to gmock_config.vsprops or gmock_config.props and select it. In Project Properties | Configuration Properties | General | Additional Include Directories, type /include. Tweaking Google Mock Google Mock can be used in diverse environments. The default configuration may not work (or may not work well) out of the box in some environments. However, you can easily tweak Google Mock by defining control macros on the compiler command line. Generally, these macros are named like GTEST_XYZ and you define them to either 1 or 0 to enable or disable a certain feature. We list the most frequently used macros below. For a complete list, see file ${GTEST_DIR}/include/gtest/internal/gtest-port.h. Choosing a TR1 Tuple Library Google Mock uses the C++ Technical Report 1 (TR1) tuple library heavily. Unfortunately TR1 tuple is not yet widely available with all compilers. The good news is that Google Test 1.4.0+ implements a subset of TR1 tuple that's enough for Google Mock's need. Google Mock will automatically use that implementation when the compiler doesn't provide TR1 tuple. Usually you don't need to care about which tuple library Google Test and Google Mock use. However, if your project already uses TR1 tuple, you need to tell Google Test and Google Mock to use the same TR1 tuple library the rest of your project uses, or the two tuple implementations will clash. To do that, add -DGTEST_USE_OWN_TR1_TUPLE=0  to the compiler flags while compiling Google Test, Google Mock, and your tests. If you want to force Google Test and Google Mock to use their own tuple library, just add -DGTEST_USE_OWN_TR1_TUPLE=1  to the compiler flags instead. If you want to use Boost's TR1 tuple library with Google Mock, please refer to the Boost website (http://www.boost.org/) for how to obtain it and set it up. As a Shared Library (DLL) Google Mock is compact, so most users can build and link it as a static library for the simplicity. Google Mock can be used as a DLL, but the same DLL must contain Google Test as well. See Google Test's README for instructions on how to set up necessary compiler settings. Tweaking Google Mock Most of Google Test's control macros apply to Google Mock as well. Please see Google Test's README for how to tweak them. Upgrading from an Earlier Version We strive to keep Google Mock releases backward compatible. Sometimes, though, we have to make some breaking changes for the users' long-term benefits. This section describes what you'll need to do if you are upgrading from an earlier version of Google Mock. Upgrading from 1.1.0 or Earlier You may need to explicitly enable or disable Google Test's own TR1 tuple library. See the instructions in section ""Choosing a TR1 Tuple Library"". Upgrading from 1.4.0 or Earlier On platforms where the pthread library is available, Google Test and Google Mock use it in order to be thread-safe. For this to work, you may need to tweak your compiler and/or linker flags. Please see the ""Multi-threaded Tests"" section in file Google Test's README for what you may need to do. If you have custom matchers defined using MatcherInterface or MakePolymorphicMatcher(), you'll need to update their definitions to use the new matcher API ( monomorphic, polymorphic). Matchers defined using MATCHER() or MATCHER_P*() aren't affected. Developing Google Mock This section discusses how to make your own changes to Google Mock. Testing Google Mock Itself To make sure your changes work as intended and don't break existing functionality, you'll want to compile and run Google Test's own tests. For that you'll need Autotools. First, make sure you have followed the instructions above to configure Google Mock. Then, create a build output directory and enter it. Next, ${GMOCK_DIR}/configure  # try --help for more info  Once you have successfully configured Google Mock, the build steps are standard for GNU-style OSS packages. make        # Standard makefile following GNU conventions make check  # Builds and runs all tests - all should pass.  Note that when building your project against Google Mock, you are building against Google Test as well. There is no need to configure Google Test separately. Contributing a Patch We welcome patches. Please read the Developer's Guide for how you can contribute. In particular, make sure you have signed the Contributor License Agreement, or we won't be able to accept the patch. Happy testing! Jump to Line Go Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/googletest/blob/master/googlemock/README.md"	"A library for writing and using C++ mock classes. [BSD]"	"true"
"Debug"	"Google Test"	"https://github.com/google/googletest"	"Google C++ Testing Framework. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2652"	"311"	"1039"	"GitHub - google/googletest: Google Test Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 311 Star 2,652 Fork 1,039 google/googletest Code Issues 274 Pull requests 63 Pulse Graphs Google Test 944 commits 4 branches 10 releases 42 contributors C++ 85.4% Python 11.4% CMake 0.8% Shell 0.7% Makefile 0.7% M4 0.6% Other 0.4% C++ Python CMake Shell Makefile M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags BillyDonahue-patch-1 BillyDonahue-patch-2 master rollback_808 Nothing to show release-1.7.0 release-1.6.0 release-1.5.0 release-1.4.0 release-1.3.0 release-1.2.1 release-1.2.0 release-1.1.0 release-1.0.1 release-1.0.0 Nothing to show New pull request Latest commit ec44c6c Jul 14, 2016 BillyDonahue committed on GitHub Merge pull request #821 from mazong1123/master … Fixed issue #775. Mark the ConvertibleFromAny constructor as explicit, and fix operator overload issue for Unprintable Permalink Failed to load latest commit information. googlemock Reformatted the Unprintable operator== code style. Jul 14, 2016 googletest Support running MSVC build on AppVeyour Jun 27, 2016 .gitignore Add build artifacts to git ignore. Feb 16, 2016 .travis.yml Override clang++ name on Linux only Oct 18, 2015 CMakeLists.txt Create CMakeLists.txt Nov 11, 2015 README.md Add Appveyor badge to Readme.md Jun 28, 2016 appveyor.yml Support running MSVC build on AppVeyour Jun 27, 2016 travis.sh Support running MSVC build on AppVeyour Jun 27, 2016 README.md Google Test Welcome to Google Test, Google's C++ test framework! This repository is a merger of the formerly separate GoogleTest and GoogleMock projects. These were so closely related that it makes sense to maintain and release them together. Please see the project page above for more information as well as the mailing list for questions, discussions, and development. There is also an IRC channel on OFTC (irc.oftc.net) #gtest available. Please join us! Getting started information for Google Test is available in the Google Test Primer documentation. Google Mock is an extension to Google Test for writing and using C++ mock classes. See the separate Google Mock documentation. More detailed documentation for googletest (including build instructions) are in its interior googletest/README.md file. Features An XUnit test framework. Test discovery. A rich set of assertions. User-defined assertions. Death tests. Fatal and non-fatal failures. Value-parameterized tests. Type-parameterized tests. Various options for running the tests. XML test report generation. Platforms Google test has been used on a variety of platforms: Linux Mac OS X Windows Cygwin MinGW Windows Mobile Symbian Who Is Using Google Test? In addition to many internal projects at Google, Google Test is also used by the following notable projects: The Chromium projects (behind the Chrome browser and Chrome OS). The LLVM compiler. Protocol Buffers, Google's data interchange format. The OpenCV computer vision library. Related Open Source Projects Google Test UI is test runner that runs your test binary, allows you to track its progress via a progress bar, and displays a list of test failures. Clicking on one shows failure text. Google Test UI is written in C#. GTest TAP Listener is an event listener for Google Test that implements the TAP protocol for test result output. If your test runner understands TAP, you may find it useful. Requirements Google Test is designed to have fairly minimal requirements to build and use with your projects, but there are some. Currently, we support Linux, Windows, Mac OS X, and Cygwin. We will also make our best effort to support other platforms (e.g. Solaris, AIX, and z/OS). However, since core members of the Google Test project have no access to these platforms, Google Test may have outstanding issues there. If you notice any problems on your platform, please notify googletestframework@googlegroups.com. Patches for fixing them are even more welcome! Linux Requirements These are the base requirements to build and use Google Test from a source package (as described below): GNU-compatible Make or gmake POSIX-standard shell POSIX(-2) Regular Expressions (regex.h) A C++98-standard-compliant compiler Windows Requirements Microsoft Visual C++ v7.1 or newer Cygwin Requirements Cygwin v1.5.25-14 or newer Mac OS X Requirements Mac OS X v10.4 Tiger or newer Xcode Developer Tools Requirements for Contributors We welcome patches. If you plan to contribute a patch, you need to build Google Test and its own tests from a git checkout (described below), which has further requirements: Python v2.3 or newer (for running some of the tests and re-generating certain source files from templates) CMake v2.6.4 or newer Regenerating Source Files Some of Google Test's source files are generated from templates (not in the C++ sense) using a script. For example, the file include/gtest/internal/gtest-type-util.h.pump is used to generate gtest-type-util.h in the same directory. You don't need to worry about regenerating the source files unless you need to modify them. You would then modify the corresponding .pump files and run the 'pump.py' generator script. See the Pump Manual. Contributing Code We welcome patches. Please read the Developer's Guide for how you can contribute. In particular, make sure you have signed the Contributor License Agreement, or we won't be able to accept the patch. Happy testing! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/googletest"	"Google C++ Testing Framework. [BSD]"	"true"
"Debug"	"ig-debugheap"	"https://github.com/deplinenoise/ig-debugheap"	"Multiplatform debug heap useful for tracking down memory errors. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"83"	"4"	"9"	"GitHub - deplinenoise/ig-debugheap: Debug heap useful for tracking down memory errors. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 83 Fork 9 deplinenoise/ig-debugheap Code Issues 0 Pull requests 0 Pulse Graphs Debug heap useful for tracking down memory errors. 7 commits 1 branch 0 releases Fetching contributors C 94.8% Lua 5.2% C Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f8a9ab0 Nov 8, 2015 deplinenoise Merge pull request #4 from r-lyeh/master … Fix compilation error when compiled as C++ source Permalink Failed to load latest commit information. .gitignore DebugHeap.c DebugHeap.h README.md demo.c tundra.lua README.md ig-debugheap - A debugging heap This is a debug heap useful when trying to track down memory errors (especially on Windows, where there's no Valgrind.) It is written in C, and works on Mac, Linux and Windows. This package provides the following features: Array indexing errors (positive) trigger crashes, because allocations are aligned as closely as possible up to an inaccessible virtual memory page. Using memory after freeing it triggers a crash most of the time. Double frees are detected most of the time. Unsynchronized multi-threaded access is detected. To improve the chances of crashing on use-after-free or double frees, increase the size of the heap. Freed blocks are kept on an ""observation list"" for as long as possible to flush out these error classes, but it will eventually be reused. This heap is terribly slow, and wastes tons of memory. You only want to use it to track down memory errors. One neat way of doing that is to provide a heap interface that can dynamically switch to this heap, maybe with a configuration option. You can then hunt for memory errors without recompiling. License Copyright (c) 2014, Insomniac Games All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/deplinenoise/ig-debugheap"	"Multiplatform debug heap useful for tracking down memory errors. [BSD]"	"true"
"Debug"	"libtap"	"https://github.com/zorgnax/libtap"	"Write tests in C. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"94"	"11"	"25"	"GitHub - zorgnax/libtap: Write tests in C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 94 Fork 25 zorgnax/libtap Code Issues 0 Pull requests 1 Pulse Graphs Write tests in C 117 commits 1 branch 1 release Fetching contributors C 91.4% Makefile 8.6% C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.0 Nothing to show New pull request Latest commit d2109aa Feb 8, 2016 zorgnax Use x variable so compiler doesn't complain about it Permalink Failed to load latest commit information. t Use x variable so compiler doesn't complain about it Feb 8, 2016 .gitignore Adding pkgconfig file Jul 10, 2015 .travis.yml Travis now supports C Jul 26, 2012 COPYING License under LGPL Jul 10, 2015 INSTALL Test itself without Perl Jul 17, 2015 Makefile Rely on prove (or another tap consumer) to provide color results Jul 17, 2015 Makefile.win Combine config.mk and t/Makefile into Makefile. Separate windows rela… Sep 2, 2011 README.md Make all diagnostic messages go to STDOUT to avoid out of order displ… Jul 17, 2015 tap.c Make all diagnostic messages go to STDOUT to avoid out of order displ… Jul 17, 2015 tap.h Cast argument to int to avoid possibly compiler warnings Feb 8, 2016 README.md NAME libtap - Write tests in C SYNOPSIS #include <tap.h>  int main () {     plan(5);     ok(3 == 3);     is(""fnord"", ""eek"", ""two different strings not that way?"");     ok(3 <= 8732, ""%d <= %d"", 3, 8732);     like(""fnord"", ""f(yes|no)r*[a-f]$"");     cmp_ok(3, "">="", 10);     done_testing(); }  results in: 1..5 ok 1 not ok 2 - two different strings not that way? #   Failed test 'two different strings not that way?' #   at t/synopsis.c line 7. #          got: 'fnord' #     expected: 'eek' ok 3 - 3 <= 8732 ok 4 not ok 5 #   Failed test at t/synopsis.c line 10. #     3 #         >= #     10 # Looks like you failed 2 tests of 5 run.  DESCRIPTION tap is an easy to read and easy to write way of creating tests for your software. This library creates functions that can be used to generate it for your C programs. It is mostly based on the Test::More Perl module. INSTALL On Unix systems: $ make $ make install  For more detailed installation instructions (eg, for Windows), see INSTALL. FUNCTIONS plan(tests) plan(NO_PLAN) plan(SKIP_ALL); plan(SKIP_ALL, fmt, ...) Use this to start a series of tests. When you know how many tests there will be, you can put a number as a number of tests you expect to run. If you do not know how many tests there will be, you can use plan(NO_PLAN) or not call this function. When you pass it a number of tests to run, a message similar to the following will appear in the output: 1..5  If you pass it SKIP_ALL, the whole test will be skipped. ok(test) ok(test, fmt, ...) Specify a test. the test can be any statement returning a true or false value. You may optionally pass a format string describing the test. ok(r = reader_new(""Of Mice and Men""), ""create a new reader""); ok(reader_go_to_page(r, 55), ""can turn the page""); ok(r->page == 55, ""page turned to the right one"");  Should print out: ok 1 - create a new reader ok 2 - can turn the page ok 3 - page turned to the right one  On failure, a diagnostic message will be printed out. not ok 3 - page turned to the right one #   Failed test 'page turned to the right one' #   at reader.c line 13.  is(got, expected) is(got, expected, fmt, ...) isnt(got, unexpected) isnt(got, unexpected, fmt, ...) Tests that the string you got is what you expected. with isnt, it is the reverse. is(""this"", ""that"", ""this is that"");  prints: not ok 1 - this is that #   Failed test 'this is that' #   at is.c line 6. #          got: 'this' #     expected: 'that'  cmp_ok(a, op, b) cmp_ok(a, op, b, fmt, ...) Compares two ints with any binary operator that doesn't require an lvalue. This is nice to use since it provides a better error message than an equivalent ok. cmp_ok(420, "">"", 666);  prints: not ok 1 #   Failed test at cmpok.c line 5. #     420 #         > #     666  cmp_mem(got, expected, n) cmp_mem(got, expected, n, fmt, ...) Tests that the first n bytes of the memory you got is what you expected. NULL pointers for got and expected are handled (if either is NULL, the test fails), but you need to ensure n is not too large. char *a = ""foo""; char *b = ""bar""; cmp_mem(a, b, 3)  prints not ok 1 #   Failed test at t/cmp_mem.c line 9. #     Difference starts at offset 0 #          got: 0x66 #     expected: 0x62  like(got, expected) like(got, expected, fmt, ...) unlike(got, unexpected) unlike(got, unexpected, fmt, ...) Tests that the string you got matches the expected extended POSIX regex. unlike is the reverse. These macros are the equivalent of a skip on Windows. like(""stranger"", ""^s.(r).*\\1$"", ""matches the regex"");  prints: ok 1 - matches the regex  pass() pass(fmt, ...) fail() fail(fmt, ...) Speciy that a test succeeded or failed. Use these when the statement is longer than you can fit into the argument given to an ok() test. dies_ok(code) dies_ok(code, fmt, ...) lives_ok(code) lives_ok(code, fmt, ...) Tests whether the given code causes your program to exit. The code gets passed to a macro that will test it in a forked process. If the code succeeds it will be executed in the parent process. You can test things like passing a function a null pointer and make sure it doesnt dereference it and crash. dies_ok({abort();}, ""abort does close your program""); dies_ok({int x = 0/0;}, ""divide by zero crash""); lives_ok({pow(3.0, 5.0);}, ""nothing wrong with taking 3**5"");  On Windows, these macros are the equivalent of a skip. done_testing() Summarizes the tests that occurred and exits the main function. If there was no plan, it will print out the number of tests as. 1..5  It will also print a diagnostic message about how many failures there were. # Looks like you failed 2 tests of 3 run.  If all planned tests were successful, it will return 0. If any test fails, it will return 1. If they all passed, but there were missing tests, it will return 2. diag(fmt, ...) print out a message to the tap output on stdout. Each line is preceeded by a ""# "" so that you know its a diagnostic message. diag(""This is\na diag\nto describe\nsomething."");  prints: # This is # a diag # to describe # something  ok() and this function return an int so you can use it like: ok(0) || diag(""doh!"");  skip(test, n) skip(test, n, fmt, ...) end_skip Skip a series of n tests if test is true. You may give a reason why you are skipping them or not. The (possibly) skipped tests must occur between the skip and end_skip macros. skip(TRUE, 2); ok(1); ok(0); end_skip;  prints: ok 1 # skip ok 2 # skip  todo() todo(fmt, ...) end_todo Specifies a series of tests that you expect to fail because they are not yet implemented. todo() ok(0); end_todo;  prints: not ok 1 # TODO #   Failed (TODO) test at todo.c line 7  BAIL_OUT() BAIL_OUT(fmt, ...) Immediately stops all testing. BAIL_OUT(""Can't go no further"");  prints Bail out!  Can't go no further  and exits with 255. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zorgnax/libtap"	"Write tests in C. [GPL2]"	"true"
"Debug"	"MemTrack"	"http://www.almostinfinite.com/memtrack.html"	"Tracking memory allocations in C++."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"MemTrack: Tracking Memory Allocations in C++ MemTrack: Tracking Memory Allocations in C++ Introduction This article describes MemTrack, a library which replaces the standard operator new with a special version that records information about each memory allocation. This information can be analyzed later for debugging purposes or for performance measurement. The article begins by discussing the use of macros to instrument memory allocation in C and the use of macros combined with ""placement operator new"" to accomplish the same thing in C++. Then it describes the alternative approach used in the MemTrack library. This alternative approach differs from the more conventional approach in two important ways: First, it does not rely on the implicit use of placement operator new syntax and, second, it can capture the type of each memory allocation. Instrumenting Memory Allocations in C The use of macros to instrument memory allocation in C is a well-known technique, and it's worth reviewing. Two standard C preprocessor macros are the key to this technique: the __FILE__ and __LINE__ macros. __FILE__ expands to a string literal containing the filename of the source file currently being processed, and __LINE__ always expands to the line number of the line that the __LINE__ macro appears on. Typically, __FILE__ and __LINE__ will be embedded inside another macro, so that they can be applied transparently. The typical targets for this approach are malloc() and its sibling functions. For example:     #define malloc(size) custom_malloc(size, __FILE__, __LINE__) Ideally, the instrumented memory allocation functions can be transparently substituted for the regular ones throughout an entire project by making changes to a single header file. Instrumenting Memory Allocations in C++ A similar approach can be used in C++, but to understand it, it's first necessary to discuss ""placement operator new"". C++ makes it possible to define custom versions of operator new, and these custom versions may take extra arguments. The simplest example is the classic placement operator new:     void *operator new(size_t size, void *p) { return p; } This version of operator new can be used to construct a C++ object at an arbitrary place in memory, hence the name ""placement operator new"". This capability was thought to be so useful that a stock implementation of placement operator new with these semantics is provided by the standard C++ library. This operator new can be called like so:     Object *object = new(buffer) Object; The first argument to any operator new function is the size of the memory block to allocate. This argument is always supplied implicitly by the compiler. If there are any extra arguments, then they are listed in parentheses immediately after the new keyword, using normal function call syntax. There's no restriction on the number of parameters a custom implementation of operator new may take, nor is there any restriction on how those parameters may be used. Nevertheless, the moniker ""placement operator new"" is used broadly (and confusingly) to refer to all forms of operator new which take extra arguments, even those forms which do not match the classic placement semantics. We can use the placement syntax to define a version of operator new equivalent to our hypothetical custom_malloc() function above:  	void *operator new(size_t size, char const *filename, int lineNum)  	{  		...  	}  Now that we know how to pass arguments to operator new, and since the preprocessor will not recursively expand macros, we can define a new macro equivalent to the malloc() macro above:     #define new    new(__FILE__, __LINE__) As in the case for C, we'd like to be able to transparently switch between the normal memory allocation function and the instrumented one by changing a single include file. This goal may be more difficult to achieve in C++ than in C, however. One problem is that the new macro will conflict with any explicit use of placement syntax. For example, a use of classic placement new syntax will conflict with the new macro:     Object *object = new(buffer) Object; will expand to something like:     Object *object = new(""object.cpp"", 131)(buffer) Object; which is clearly in error. Another problem is that any declaration of a custom operator new will also conflict with the macro. Storing the Extra Information The notion that we can have a custom memory allocator begs the question of just how such an allocator should be implemented. If we are only interested in recording extra information about each memory allocation then the easiest technique is to simply piggyback on top of the standard allocator. When the custom allocator is called with a request for memory, it simply asks the standard allocator for the memory, which the custom allocator then returns to the original caller. It's easy to store the extra information in the piggyback scheme. Assume we need to store m bytes of extra data for every allocation. If the original caller requests n bytes of information, then the custom allocator will simply request n +m bytes of storage from the standard allocator. The custom allocator will then retain the first m bytes of storage for its own use and return a pointer to the original caller that points m bytes into the new memory block. Needless to say, this kind of allocator needs to be paired with a de-allocator that is aware of this offset. The piggyback scheme is the approach used by MemTrack. An Alternative Approach to Instrumenting Memory Allocation in C++ Overview MemTrack uses an alternative approach to instrumenting memory allocation in C++. It separates the allocation of a block of memory from the storage of the descriptive information about that memory. Instead, this information is applied later in a process I refer to as ""stamping"". Since the stamping step is embedded inside a new macro, this approach is as easy to use as the placement new approach. There's more work involved in making the stamping process work. Since the new operator does not require parentheses for its type argument, we can't write a new macro that will capture the type argument. This means that we can't just pass the result of the new expression into a stamp() function which then returns its argument after stamping it. However, if we make our stamping function an overloaded operator we can accomplish the same thing, and we don't have to capture the type in the macro -- we just have to juxtapose the stamping operator with the new expression, which we can do without capturing the type in the new macro. Astute readers will have already noticed that the stamping function must not only be an operator but that it must also be a template function. This is because the stamping operator must be capable of returning exactly the same type as the new expression. This is a lot of work simply to avoid the use of placement new. However, the use of the template introduces a new capability that's simply not available with the placement new approach: we can capture the type of the new expression inside the stamping operator and record it along with the other information we care about. It's exactly this capability that makes the stamping approach worth exploring. The new Macro The new macro and its component parts are the heart of MemTrack, so let's examine them in detail. These examples were drawn from the ""MemTrack.h"" header file, although they've been simplified somewhat for the sake of clarity. Let's start with the new macro itself:     #define new    MemStamp(__FILE__, __LINE__) * new This will expand the following statement     Object *object = new Object; into something like:     Object *object = MemStamp(""object.cpp"", 131) * new Object; The MemStamp temporary combines the filename and line number into a single entity, which then serves as the first argument to operator*. operator* is then called with both the stamp and the newly allocated object as arguments, and it returns the new object after stamping it. The MemStamp class looks like this:      class MemStamp 	{         public:		// member variables             char const * const filename;             int const lineNum;         public:		// construction/destruction             MemStamp(char const *filename, int lineNum)                 : filename(filename), lineNum(lineNum) { }             ~MemStamp() { }     };  The operator* template is quite simple, and the only thing really of note is the call to typeid(T).name() in the call to the internal stamping function.      template <class T> inline T *operator*(const MemStamp &stamp, T *p)     {         TrackStamp(p, stamp, typeid(T).name());         return p;     }  Since the first argument to operator* is a MemStamp value, it's very unlikely that this definition of operator* will conflict with any ordinary use of the operator. Public MemTrack Functions The previous section describes the new macro that MemTrack uses to automatically and transparently (as much as is possible) instrument source code. This is only half the story, though. The other half of the story is the custom allocator, the stamping function, and the mechanism for later retrieving the information that we've stamped on all those memory blocks. The public interface to MemTrack consists of two sets of functions. The first set of functions are the Track* functions: 	void *TrackMalloc(size_t size); 	void TrackFree(void *p); 	void TrackStamp(void *p, const MemStamp &stamp, char const *typeName); 	void TrackDumpBlocks(); 	void TrackListMemoryUsage(); Normally there will be no need to call TrackMalloc() or TrackFree() directly, but they're available if you can think of a good reason to use them. TrackStamp() is needed for the implementation of the stamping operator, and TrackDumpBlocks() and TrackListMemoryUsage() provide ways to dump information about the currently allocated memory blocks. The second set of functions are the overrides for global new and delete operators.     void *operator new(size_t size) { ... }     void operator delete(void *p) { ... }     void *operator new[](size_t size) { ... }     void operator delete[](void *p) { ... } There are no prototypes for these functions in ""MemTrack.h"" since the signatures of these functions are automatically known to the C++ compiler. However, the override definitions appear in ""MemTrack.cpp"" and they will override the default versions supplied by the compiler. These functions basically just call TrackMalloc() and TrackFree(). Implementation Notes TrackMalloc() uses the piggyback approach described earlier in the article. The extra information stored for each allocated block of memory is referred to as the prolog, and currently the prolog is broken into two parts, the ""block header"", and the ""signature"". Block headers serve two important functions. First, they store all the extra information for each memory block, such as the filename and the type name. Second, they store the forward and backward pointers of the doubly-linked list that links all currently allocated memory blocks together. The signature consists of a specific 64 bit pattern that can be used to identify a memory block as one that has been allocated by TrackMalloc() and which can safely be ""stamped"". If a pointer is pointing to a block of memory returned from TrackMalloc(), then the 8 bytes before that pointer will consist of the signature. This approach is rather crude, and it introduces some risks when testing pointers to valid memory blocks allocated by other memory allocators. The first problem is that there is a chance of a false positive on a signature test which would then result in a memory overwrite error when the memory block is stamped. The second problem is that the signature test could attempt to read memory not assigned to the process, resulting in a memory access fault. Neither of these problems should occur when the MemTrack allocator is the only one being used in a program, however. MemTrack in Action I tested MemTrack using FH-reader, a library I wrote several years ago for reading Macromedia FreeHand files. FH-reader made a good platform for testing the type capture capabilities of MemTrack since it represents FreeHand files in memory using objects of more than 70 different classes. TrackDumpBlocks() listed 80701 blocks after one test run of the FH-reader test driver. This quantity of information is a little hard to interpret usefully. TrackListMemoryUsage() lists total memory usage by type from highest to lowest. Table 1 is the first 20 items from a test run of FH-reader. Table 1  ----------------------- Memory Usage Statistics -----------------------  allocated type                        blocks          bytes   --------------                        ------          -----   struct FHRDocPath::IndexedRec          11031  13.7% 2756600  45.8% class FHRDocPath                       10734  13.3%  772848  12.8% class FHRDocElemPropLst                13132  16.3%  420224   7.0% struct FHRDocVDict::IndexedRec          3595   4.5%  370336   6.2% struct FHRDocMDict::IndexedRec         13368  16.6%  208200   3.5% class FHRDocObject *                      36   0.0%  172836   2.9% struct FHRDocData::IndexedRec            890   1.1%  159880   2.7% struct FHRDocLineTable::IndexedRec       408   0.5%  152824   2.5% struct FHRDocMList::IndexedRec          2656   3.3%  119168   2.0% class FHRDocMList                       1964   2.4%   62848   1.0% class FHRDocVMpObj                      2096   2.6%   58688   1.0% class FHRDocProcessColor                1259   1.6%   50360   0.8% struct FHRDocTextBlok::IndexedRec        680   0.8%   48756   0.8% class FHRDocUString                     1800   2.2%   43200   0.7% class FHRDocGroup                        684   0.8%   41040   0.7% class FHRDocObject * (__cdecl*)(void)     36   0.0%   39928   0.7% class FHRDocXform                        516   0.6%   35088   0.6% class FHRDocTextColumn                   403   0.5%   33852   0.6% class FHRDocTString                      407   0.5%   29304   0.5% struct FHRDocUString::IndexedRec        1800   2.2%   27904   0.5%  Caveats Besides the potential for conflict with the definition of other operator new functions there is another problem worth mentioning. C++ allows classes to be declared inside functions, but it does not allow templates to be specialized on these classes. This restriction makes the MemTrack new macro unusable for local classes. MemTrack also lacks a lot of features that a fully functional library would provide, such as logic to check for memory overwrites and double frees. A fully functional library should also be able to make claims about portability that MemTrack currently can't since it has only been tested on one compiler on one platform (Visual C++.Net on Windows 2000). The signature mechanism has some serious deficiencies, which could make MemTrack unusable for some projects. Finally, using any library that relies on a global macro to redefine a language keyword is potentially asking for trouble. However, MemTrack has been used successfully with the FH-reader library, providing a successful demonstration of the memory stamping and type capture techniques described in this article. Room for Improvement There is lots of room for improvement in the MemTrack library. Here's an incomplete list of ways the library might be improved, in no particular order: Detection of double frees. Detection of memory overwrites A safer alternative to the signature mechanism. Support for the malloc(), calloc(), realloc(), and free() functions. Conditional compilation directives should be added so MemTrack can be turned on and off with a single #define. A way to handle the instantiation of local classes. More testing on a variety of platforms, operating systems, and compilers, and testing in a variety of existing projects. Appendix A: MemTrack.h  /* Copyright (c) 2002, 2008 Curtis Bartley All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  - Neither the name of Curtis Bartley nor the names of any other contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */  #ifndef MemTrack_H_ #define MemTrack_H_  #include <typeinfo>  namespace MemTrack {     /* ---------------------------------------- class MemStamp */      class MemStamp     {         public:        // member variables             char const * const filename;             int const lineNum;         public:        // construction/destruction             MemStamp(char const *filename, int lineNum)                 : filename(filename), lineNum(lineNum) { }             ~MemStamp() { }     };      /* ---------------------------------------- memory allocation and stamping prototypes */      void *TrackMalloc(size_t size);     void TrackFree(void *p);     void TrackStamp(void *p, const MemStamp &stamp, char const *typeName);     void TrackDumpBlocks();     void TrackListMemoryUsage();      /* ---------------------------------------- operator * (MemStamp, ptr) */      template <class T> inline T *operator*(const MemStamp &stamp, T *p)     {         TrackStamp(p, stamp, typeid(T).name());         return p;     }  }    // namespace MemTrack  /* ---------------------------------------- new macro */  #define MEMTRACK_NEW MemTrack::MemStamp(__FILE__, __LINE__) * new #define new MEMTRACK_NEW  #endif    // MemTrack_H_  Appendix B: MemTrack.cpp  /* Copyright (c) 2002, 2008 Curtis Bartley All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  - Neither the name of Curtis Bartley nor the names of any other contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */  /* ---------------------------------------- includes */  #include <assert.h> #include <stdio.h> #include <stdlib.h> #include <algorithm> #include <new>  #include ""MemTrack.h"" #undef new    // IMPORTANT!  /* ------------------------------------------------------------ */ /* -------------------- namespace MemTrack -------------------- */ /* ------------------------------------------------------------ */  namespace MemTrack {      /* ------------------------------------------------------------ */     /* --------------------- class BlockHeader -------------------- */     /* ------------------------------------------------------------ */      class BlockHeader     {         private:    // static member variables             static BlockHeader *ourFirstNode;              private:    // member variables             BlockHeader *myPrevNode;             BlockHeader *myNextNode;             size_t myRequestedSize;             char const *myFilename;             int myLineNum;             char const *myTypeName;          public:     // members             BlockHeader(size_t requestedSize);             ~BlockHeader();                      size_t GetRequestedSize() const { return myRequestedSize; }             char const *GetFilename() const { return myFilename; }             int GetLineNum() const { return myLineNum; }             char const *GetTypeName() const { return myTypeName; }                      void Stamp(char const *filename, int lineNum, char const *typeName);                      static void AddNode(BlockHeader *node);             static void RemoveNode(BlockHeader *node);             static size_t CountBlocks();             static void GetBlocks(BlockHeader **blockHeaderPP);             static bool TypeGreaterThan(BlockHeader *header1, BlockHeader *header2);     };      /* ---------------------------------------- BlockHeader static member variables */      BlockHeader *BlockHeader::ourFirstNode = NULL;      /* ---------------------------------------- BlockHeader constructor */      BlockHeader::BlockHeader(size_t requestedSize)     {         myPrevNode = NULL;         myNextNode = NULL;         myRequestedSize = requestedSize;         myFilename = ""[unknown]"";         myLineNum = 0;         myTypeName = ""[unknown]"";     }      /* ---------------------------------------- BlockHeader destructor */      BlockHeader::~BlockHeader()     {     }              /* ---------------------------------------- BlockHeader Stamp */      void BlockHeader::Stamp(char const *filename, int lineNum, char const *typeName)     {         myFilename = filename;         myLineNum = lineNum;         myTypeName = typeName;     }      /* ---------------------------------------- BlockHeader AddNode */      void BlockHeader::AddNode(BlockHeader *node)     {         assert(node != NULL);         assert(node->myPrevNode == NULL);         assert(node->myNextNode == NULL);          // If we have at least one node in the list ...                 if (ourFirstNode != NULL)         {             // ... make the new node the first node's predecessor.             assert(ourFirstNode->myPrevNode == NULL);             ourFirstNode->myPrevNode = node;         }          // Make the first node the new node's succesor.         node->myNextNode = ourFirstNode;          // Make the new node the first node.         ourFirstNode = node;     }      /* ---------------------------------------- BlockHeader RemoveNode */      void BlockHeader::RemoveNode(BlockHeader *node)     {         assert(node != NULL);         assert(ourFirstNode != NULL);          // If target node is the first node in the list...         if (ourFirstNode == node)         {             // ... make the target node's successor the first node.             assert(ourFirstNode->myPrevNode == NULL);             ourFirstNode = node->myNextNode;         }                  // Link target node's predecessor, if any, to its successor.         if (node->myPrevNode != NULL)         {             node->myPrevNode->myNextNode = node->myNextNode;         }                  // Link target node's successor, if any, to its predecessor.         if (node->myNextNode != NULL)         {             node->myNextNode->myPrevNode = node->myPrevNode;         }          // Clear target node's previous and next pointers.         node->myPrevNode = NULL;         node->myNextNode = NULL;     }      /* ---------------------------------------- BlockHeader CountBlocks */      size_t BlockHeader::CountBlocks()     {         size_t count = 0;         BlockHeader *currNode = ourFirstNode;         while (currNode != NULL)         {             count++;             currNode = currNode->myNextNode;         }         return count;     }      /* ---------------------------------------- BlockHeader GetBlocks */      void BlockHeader::GetBlocks(BlockHeader **blockHeaderPP)     {         BlockHeader *currNode = ourFirstNode;         while (currNode != NULL)         {             *blockHeaderPP = currNode;             blockHeaderPP++;             currNode = currNode->myNextNode;         }     }      /* ---------------------------------------- BlockHeader TypeGreaterThan */      bool BlockHeader::TypeGreaterThan(BlockHeader *header1, BlockHeader *header2)     {         return (strcmp(header1->myTypeName, header2->myTypeName) > 0);     }      /* ------------------------------------------------------------ */     /* ---------------------- class Signature --------------------- */     /* ------------------------------------------------------------ */      class Signature     {         private:    // constants             static const unsigned int SIGNATURE1 = 0xCAFEBABE;             static const unsigned int SIGNATURE2 = 0xFACEFACE;                  private:    // member variables             unsigned int mySignature1;             unsigned int mySignature2;                      public:        // construction/destruction             Signature() : mySignature1(SIGNATURE1), mySignature2(SIGNATURE2) {};             ~Signature() { mySignature1 = 0; mySignature2 = 0; }                      public:        // static member functions             static bool IsValidSignature(const Signature *pProspectiveSignature)             {                 try                 {                     if (pProspectiveSignature->mySignature1 != SIGNATURE1) return false;                     if (pProspectiveSignature->mySignature2 != SIGNATURE2) return false;                     return true;                 }                 catch (...)                 {                     return false;                 }             }     };      /* ------------------------------------------------------------ */     /* -------------------- address conversion -------------------- */     /* ------------------------------------------------------------ */      /* We divide the memory blocks we allocate into two ""chunks"", the      * ""prolog chunk"" where we store information about the allocation,      * and the ""user chunk"" which we return to the caller to use.      */      /* ---------------------------------------- alignment */      const size_t ALIGNMENT = 4;      /* If ""value"" (a memory size or offset) falls on an alignment boundary,      * then just return it.  Otherwise return the smallest number larger      * than ""value"" that falls on an alignment boundary.      */          #define PAD_TO_ALIGNMENT_BOUNDARY(value) \         ((value) + ((ALIGNMENT - ((value) % ALIGNMENT)) % ALIGNMENT))      /* ---------------------------------------- chunk structs */          /* We declare incomplete structures for each chunk, just to       * provide type safety.      */      struct PrologChunk;     struct UserChunk;      /* ---------------------------------------- chunk sizes and offsets */      const size_t SIZE_BlockHeader = PAD_TO_ALIGNMENT_BOUNDARY(sizeof(BlockHeader));     const size_t SIZE_Signature = PAD_TO_ALIGNMENT_BOUNDARY(sizeof(Signature));      const size_t OFFSET_BlockHeader = 0;     const size_t OFFSET_Signature = OFFSET_BlockHeader + SIZE_BlockHeader;     const size_t OFFSET_UserChunk = OFFSET_Signature + SIZE_Signature;          const size_t SIZE_PrologChunk = OFFSET_UserChunk;      /* ---------------------------------------- GetUserAddress */      static UserChunk *GetUserAddress(PrologChunk *pProlog)     {         char *pchProlog = reinterpret_cast<char *>(pProlog);         char *pchUser = pchProlog + OFFSET_UserChunk;         UserChunk *pUser = reinterpret_cast<UserChunk *>(pchUser);         return pUser;     }      /* ---------------------------------------- GetPrologAddress */      static PrologChunk *GetPrologAddress(UserChunk *pUser)     {         char *pchUser = reinterpret_cast<char *>(pUser);         char *pchProlog = pchUser - OFFSET_UserChunk;         PrologChunk *pProlog = reinterpret_cast<PrologChunk *>(pchProlog);         return pProlog;     }      /* ---------------------------------------- GetHeaderAddress */      static BlockHeader *GetHeaderAddress(PrologChunk *pProlog)     {         char *pchProlog = reinterpret_cast<char *>(pProlog);         char *pchHeader = pchProlog + OFFSET_BlockHeader;         BlockHeader *pHeader = reinterpret_cast<BlockHeader *>(pchHeader);         return pHeader;     }      /* ---------------------------------------- GetSignatureAddress */      static Signature *GetSignatureAddress(PrologChunk *pProlog)     {         char *pchProlog = reinterpret_cast<char *>(pProlog);         char *pchSignature = pchProlog + OFFSET_Signature;         Signature *pSignature = reinterpret_cast<Signature *>(pchSignature);         return pSignature;     }      /* ------------------------------------------------------------ */     /* -------------- memory allocation and stamping -------------- */     /* ------------------------------------------------------------ */      /* ---------------------------------------- TrackMalloc */          void *TrackMalloc(size_t size)     {         // Allocate the memory, including space for the prolog.         PrologChunk *pProlog = (PrologChunk *)malloc(SIZE_PrologChunk + size);                  // If the allocation failed, then return NULL.         if (pProlog == NULL) return NULL;                  // Use placement new to construct the block header in place.         BlockHeader *pBlockHeader = new (pProlog) BlockHeader(size);                  // Link the block header into the list of extant block headers.         BlockHeader::AddNode(pBlockHeader);                  // Use placement new to construct the signature in place.         Signature *pSignature = new (GetSignatureAddress(pProlog)) Signature;                  // Get the offset to the user chunk and return it.         UserChunk *pUser = GetUserAddress(pProlog);                  return pUser;     }      /* ---------------------------------------- TrackFree */          void TrackFree(void *p)     {         // It's perfectly valid for ""p"" to be null; return if it is.         if (p == NULL) return;              // Get the prolog address for this memory block.         UserChunk *pUser = reinterpret_cast<UserChunk *>(p);             PrologChunk *pProlog = GetPrologAddress(pUser);                 // Check the signature, and if it's invalid, return immediately.         Signature *pSignature = GetSignatureAddress(pProlog);         if (!Signature::IsValidSignature(pSignature)) return;                  // Destroy the signature.         pSignature->~Signature();         pSignature = NULL;          // Unlink the block header from the list and destroy it.         BlockHeader *pBlockHeader = GetHeaderAddress(pProlog);         BlockHeader::RemoveNode(pBlockHeader);         pBlockHeader->~BlockHeader();         pBlockHeader = NULL;          // Free the memory block.             free(pProlog);     }      /* ---------------------------------------- TrackStamp */      void TrackStamp(void *p, const MemStamp &stamp, char const *typeName)     {         // Get the header and signature address for this pointer.         UserChunk *pUser = reinterpret_cast<UserChunk *>(p);         PrologChunk *pProlog = GetPrologAddress(pUser);         BlockHeader *pHeader = GetHeaderAddress(pProlog);         Signature *pSignature = GetSignatureAddress(pProlog);          // If the signature is not valid, then return immediately.         if (!Signature::IsValidSignature(pSignature)) return;          // ""Stamp"" the information onto the header.         pHeader->Stamp(stamp.filename, stamp.lineNum, typeName);     }      /* ---------------------------------------- TrackDumpBlocks */      void TrackDumpBlocks()     {         // Get an array of pointers to all extant blocks.         size_t numBlocks = BlockHeader::CountBlocks();         BlockHeader **ppBlockHeader =             (BlockHeader **)calloc(numBlocks, sizeof(*ppBlockHeader));         BlockHeader::GetBlocks(ppBlockHeader);          // Dump information about the memory blocks.         printf(""\n"");         printf(""=====================\n"");         printf(""Current Memory Blocks\n"");         printf(""=====================\n"");         printf(""\n"");         for (size_t i = 0; i < numBlocks; i++)         {             BlockHeader *pBlockHeader = ppBlockHeader[i];             char const *typeName = pBlockHeader->GetTypeName();             size_t size = pBlockHeader->GetRequestedSize();             char const *fileName = pBlockHeader->GetFilename();             int lineNum = pBlockHeader->GetLineNum();             printf(""*** #%-6d %5d bytes %-50s\n"", i, size, typeName);             printf(""... %s:%d\n"", fileName, lineNum);         }          // Clean up.         free(ppBlockHeader);     }      /* ---------------------------------------- struct MemDigest */      struct MemDigest     {         char const *typeName;         int blockCount;         size_t totalSize;          static bool TotalSizeGreaterThan(const MemDigest &md1, const MemDigest &md2)             { return md1.totalSize > md2.totalSize; }     };       /* ---------------------------------------- SummarizeMemoryUsageForType */      static void SummarizeMemoryUsageForType(         MemDigest *pMemDigest,         BlockHeader **ppBlockHeader,         size_t startPost,         size_t endPost     )     {         pMemDigest->typeName = ppBlockHeader[startPost]->GetTypeName();         pMemDigest->blockCount = 0;         pMemDigest->totalSize = 0;         for (size_t i = startPost; i < endPost; i++)         {             pMemDigest->blockCount++;             pMemDigest->totalSize += ppBlockHeader[i]->GetRequestedSize();             assert(strcmp(ppBlockHeader[i]->GetTypeName(), pMemDigest->typeName) == 0);         }     }      /* ---------------------------------------- TrackListMemoryUsage */      void TrackListMemoryUsage()     {         // If there are no allocated blocks, then return now.         size_t numBlocks = BlockHeader::CountBlocks();         if (numBlocks == 0) return;          // Get an array of pointers to all extant blocks.         BlockHeader **ppBlockHeader =             (BlockHeader **)calloc(numBlocks, sizeof(*ppBlockHeader));         BlockHeader::GetBlocks(ppBlockHeader);          // Sort the blocks by type name.         std::sort(             ppBlockHeader,             ppBlockHeader + numBlocks,             BlockHeader::TypeGreaterThan         );          // Find out how many unique types we have.         size_t numUniqueTypes = 1;         for (size_t i = 1; i < numBlocks; i++)         {             char const *prevTypeName = ppBlockHeader[i - 1]->GetTypeName();             char const *currTypeName = ppBlockHeader[i]->GetTypeName();             if (strcmp(prevTypeName, currTypeName) != 0) numUniqueTypes++;         }          // Create an array of ""digests"" summarizing memory usage by type.         size_t startPost = 0;         size_t uniqueTypeIndex = 0;         MemDigest *pMemDigestArray =             (MemDigest *)calloc(numUniqueTypes, sizeof(*pMemDigestArray));         for (size_t i = 1; i <= numBlocks; i++)    // yes, less than or *equal* to         {             char const *prevTypeName = ppBlockHeader[i - 1]->GetTypeName();             char const *currTypeName = (i < numBlocks) ? ppBlockHeader[i]->GetTypeName() : """";             if (strcmp(prevTypeName, currTypeName) != 0)             {                 size_t endPost = i;                 SummarizeMemoryUsageForType(                     pMemDigestArray + uniqueTypeIndex,                     ppBlockHeader,                     startPost,                     endPost                 );                 startPost = endPost;                 uniqueTypeIndex++;             }         }         assert(uniqueTypeIndex = numUniqueTypes);          // Sort the digests by total memory usage.         std::sort(             pMemDigestArray,             pMemDigestArray + numUniqueTypes,             MemDigest::TotalSizeGreaterThan         );          // Compute the grand total memory usage.         size_t grandTotalNumBlocks = 0;         size_t grandTotalSize = 0;         for (size_t i = 0; i < numUniqueTypes; i++)         {             grandTotalNumBlocks += pMemDigestArray[i].blockCount;             grandTotalSize += pMemDigestArray[i].totalSize;         }          // Dump the memory usage statistics.         printf(""\n"");         printf(""-----------------------\n"");         printf(""Memory Usage Statistics\n"");         printf(""-----------------------\n"");         printf(""\n"");         printf(""%-50s%5s  %5s %7s %s \n"", ""allocated type"", ""blocks"", """", ""bytes"", """");         printf(""%-50s%5s  %5s %7s %s \n"", ""--------------"", ""------"", """", ""-----"", """");          for (size_t i = 0; i < numUniqueTypes; i++)         {             MemDigest *pMD = pMemDigestArray + i;             size_t blockCount = pMD->blockCount;             double blockCountPct = 100.0 * blockCount / grandTotalNumBlocks;             size_t totalSize = pMD->totalSize;             double totalSizePct = 100.0 * totalSize / grandTotalSize;              printf(                 ""%-50s %5d %5.1f%% %7d %5.1f%%\n"",                 pMD->typeName,                 blockCount,                 blockCountPct,                 totalSize,                 totalSizePct             );         }         printf(""%-50s %5s %5s  %7s %s \n"", ""--------"", ""-----"", """", ""-------"", """");         printf(""%-50s %5d %5s  %7d %s \n"", ""[totals]"", grandTotalNumBlocks, """", grandTotalSize, """");          // Clean up.         free(ppBlockHeader);         free(pMemDigestArray);     }  }    // namespace MemTrack  /* ------------------------------------------------------------ */ /* ---------------------- new and delete ---------------------- */ /* ------------------------------------------------------------ */  /* ---------------------------------------- operator new */  void *operator new(size_t size) {     void *p = MemTrack::TrackMalloc(size);     if (p == NULL) throw std::bad_alloc();     return p; }  /* ---------------------------------------- operator delete */  void operator delete(void *p) {     MemTrack::TrackFree(p); }  /* ---------------------------------------- operator new[] */  void *operator new[](size_t size) {     void *p = MemTrack::TrackMalloc(size);     if (p == NULL) throw std::bad_alloc();     return p; }  /* ---------------------------------------- operator delete[] */  void operator delete[](void *p) {     MemTrack::TrackFree(p); }"	"null"	"null"	"Tracking memory allocations in C++."	"true"
"Debug"	"microprofile"	"https://bitbucket.org/jonasmeyer/microprofile/overview"	"Profiler with web-view for multiple platforms. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"jonasmeyer / microprofile   — Bitbucket  Bitbucket Features Pricing owner/repository English English 日本語 Sign up Log in microprofile Actions Clone Compare Fork Navigation Overview Source Commits Branches Pull requests 5 Issues Downloads Settings HTTPS HTTPS SSH Need help cloning? Learn how to clone a repository. Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. Jonas Meyer microprofile Overview Clone in SourceTree Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. HTTPS HTTPS SSH Last updated 2016-06-09 Language C++ Access level Read 1 Branch 1 Tag 11 Forks 69 Watchers microprofile MicroProfile is a embeddable profiler in a single file, written in C++ It can display profile information in the application, or by generating captures via a minimal built in webserver. Dependencies Microprofile supports generating compressed captures using miniz(http:/code.google.com/miniz). License Licensed using unlicense.org Screenshot Unlimited private and public hosted repositories. Free for small teams! Sign up for free Close Recent activity 3 commits Pushed to jonasmeyer/microprofile 0a73d01 Merge 76733b7 Merge 57a4dd9 fix: process iteration is no longer super slow. Jonas Meyer · Adding CMakeLists ? Issue #19 created in jonasmeyer/microprofile roxlu · 1 commit Pushed to jonasmeyer/microprofile 7917030 include fixes Jonas Meyer · 1 commit Pushed to jonasmeyer/microprofile 0c4a732 fix ui Jonas Meyer · 1 commit Pushed to jonasmeyer/microprofile 16d0fc2 rename threadidtype Jonas Meyer · 1 commit Pushed to jonasmeyer/microprofile 79ee8f9 fix clang compile errors Jonas Meyer · Key to go the current highlighted timer in the next/previous frame Issue #18 created in jonasmeyer/microprofile Jon Rocatis · URL with path to specific place in profile Issue #17 created in jonasmeyer/microprofile Jon Rocatis · Registered threads dont show thread ids. Issue #16 created in jonasmeyer/microprofile Jonas Meyer · 2 commits Pushed to jonasmeyer/microprofile fede0f6 proper fixed thread issue when reusing threads from the pool 7a63b93 fixed thread issue when reusing threads from the pool Jonas Meyer · fixed thread issue when reusing threads from the pool Pull request #7 merged in jonasmeyer/microprofile Jonas Meyer · Blog Support Plans & pricing Documentation API Site status Version info Terms of service Privacy policy English Git 2.7.4.1.g5468f9e Mercurial 3.6.3 Django 1.7.11 Python 2.7.3 b7520e3d05e9 / b7520e3d05e9 @ app-106 JIRA Software Confluence Bamboo SourceTree HipChat Atlassian Help Online help Learn Git Keyboard shortcuts Latest features Bitbucket tutorials Site status Support"	"null"	"null"	"Profiler with web-view for multiple platforms. [PublicDomain]"	"true"
"Debug"	"minUnit"	"http://www.jera.com/techinfo/jtns/jtn002.html"	"A minimal unit testing framework for C written using only 2 macros. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JTN002 - MinUnit -- a minimal unit testing framework for C Jera Design : Tech Info : Jera Tech Notes JTN002 - MinUnit -- a minimal unit testing framework for C Introduction Source Code Setting Up A Test Case Example Conclusion License Appendix: Why do {} while? Introduction Unit testing frameworks are quite popular in the object-oriented programming world. Frameworks like JUnit (for Java), SUnit (for Smalltalk), and CppUnit (for C++) provide a rich set of functionality. However, this rich set of functionality can be intimidating to someone who wants to do unit testing in a more constrained environment, such as an embedded system written in C. But the important thing about unit testing is the testing, not the framework. MinUnit is an extremely simple unit testing framework written in C. It uses no memory allocation, so it should work fine under almost any circumstance, including ROMable code. Source Code  /* file: minunit.h */  #define mu_assert(message, test) do { if (!(test)) return message; } while (0)  #define mu_run_test(test) do { char *message = test(); tests_run++; \                                 if (message) return message; } while (0)  extern int tests_run;  No, that's not a typo. It's just 3 lines of code (4 here because I wrapped a long line.) Setting Up A Test Case A MinUnit test case is just a function that returns 0 (null) if the tests pass. If the test fails, the function should return a string describing the failing test. mu_assert is simply a macro that returns a string if the expression passed to it is false. The mu_runtest macro calls another test case and returns if that test case fails. That's all there is to it! Example The following example runs two tests, one that passes, one that fails.  /* file minunit_example.c */    #include <stdio.h>  #include ""minunit.h""    int tests_run = 0;    int foo = 7;  int bar = 4;    static char * test_foo() {      mu_assert(""error, foo != 7"", foo == 7);      return 0;  }    static char * test_bar() {      mu_assert(""error, bar != 5"", bar == 5);      return 0;  }    static char * all_tests() {      mu_run_test(test_foo);      mu_run_test(test_bar);      return 0;  }    int main(int argc, char **argv) {      char *result = all_tests();      if (result != 0) {          printf(""%s\n"", result);      }      else {          printf(""ALL TESTS PASSED\n"");      }      printf(""Tests run: %d\n"", tests_run);        return result != 0;  }  Conclusion People think that writing a unit testing framework has to be complex. In fact, you can write one in just a few lines of code, as this tech note shows. Of course, if you have access to a full-featured testing framework like JUnit, by all means use it. But if you don't, you can still use a simple framework like MinUnit, or whip up your own in a few hours. There's no excuse for not unit testing. License You may use the code in this tech note for any purpose, with the understanding that it comes with NO WARRANTY. Appendix: Why do {} while? I've gotten a number of questions about the use of do {} while in the mu_run_test macro. This is a standard C idiom for writing a macro that contains multiple statements. For more information, see:   http://www.eskimo.com/~scs/C-faq/q10.4.html"	"null"	"null"	"A minimal unit testing framework for C written using only 2 macros. [PublicDomain]"	"true"
"Debug"	"Mockator"	"http://www.mockator.com/"	"Eclipse CDT plug-in for C++ Seams and Mock Objects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Wiki - Mockator Sign in Register Projects Help Search: Mockator Overview Activity Issues News Wiki Forums Files Mockator¶ Installation User Guide Refactoring Towards Seams Object Seam Compile Seam Preprocessor Seam Link Seams Shadow Functions Wrap Functions Intercept Functions Using Test Doubles Creating Mock Objects Move Test Double to Namespace Converting Fake to Mock Objects Toggle Mock Support Registration Consistency Mock Functions Using Regular Expressions Reporting Bugs An Eclipse CDT plug-in for C++ Seams and Mock Objects¶ Refactoring Towards Seams¶ Breaking dependencies is an important task in refactoring legacy code and putting this code under tests. Feathers' seams help us in this task because they enable us to inject dependencies from outside. But it is hard and cumbersome to apply them without automated refactorings and tool chain configuration assistance. We provide support for seams with Mockator and create the boilerplate code and the necessary infrastructure for the following four seam types: Object seam: Based on inheritance to inject a subclass with an alternative implementation. Mockator helps in extracting an interface and in creating the missing test double including all used member functions. Compile seam: Inject dependencies at compile-time through template parameters. Extract a template parameter and Mockator creates the missing test double including all used member functions. Preprocessor seam: With the help of the preprocessor, Mockator redefines function names to use an alternative implementation. Link seam: Mockator supports three kinds of link seams: Shadowing functions through linking order (override functions in libraries with new definitions in object files) Wrapping functions with GNU's linker option -wrap (GNU Linux only) Run-time function interception with the preload functionality of the dynamic linker for shared libraries (GNU Linux and MacOS X only) Using Test Doubles¶ Mockator offers a header-only mock object library and an Eclipse plug-in to create test doubles in a simple yet powerful way. It leverages new C++11 language facilities while still being compatible with C++03. Features include: Mock classes and functions with sophisticated IDE support Easy conversion from fake to mock objects that collect call traces Convenient specification of expected calls with C++11 initializer lists or with Boost assign including Eclipse linked edit mode support Support for regular expressions to match calls with expectations Questions?¶ Post your questions in the Forum. Read Reporting Bugs to get information about how to report an issue in case of problems. Try it out now!¶ Follow the instructions in Installation and give it a try! Further information¶ If you want to know more about us, please also consider our Flyer. Support Us¶ Due to severe budget cuts of our government we, the Institute for Software at University of Applied Sciences of Eastern Switzerland in Rapperswil, require the financial help of our users to keep maintenance and extension of our Eclipse CDT plug-ins continuing. If you are using our plug-in please donate an amount showing your valuation of the plug-in to help. The money will be used to ensure for maintenance and extension of our C++ support with Eclipse CDT exclusively. Please contact us for further information. Loading... Powered by Redmine © 2006-2014 Jean-Philippe Lang"	"null"	"null"	"Eclipse CDT plug-in for C++ Seams and Mock Objects."	"true"
"Debug"	"Remotery"	"https://github.com/Celtoys/Remotery"	"Single C File Profiler with Web Viewer. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"445"	"37"	"63"	"GitHub - Celtoys/Remotery: Realtime CPU/D3D/OpenGL/CUDA Profiler in a single C file with web browser viewer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 445 Fork 63 Celtoys/Remotery Code Issues 23 Pull requests 2 Wiki Pulse Graphs Realtime CPU/D3D/OpenGL/CUDA Profiler in a single C file with web browser viewer 332 commits 2 branches 0 releases 20 contributors C 71.9% JavaScript 16.2% C++ 9.0% CSS 1.9% HTML 1.0% C JavaScript C++ CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show Nothing to show New pull request Latest commit eb581d0 Jun 13, 2016 dwilliamson Remove -std=c99 support with _POSIX_C_SOURCE 199309L. … I don't actively maintain this branch and nobody else does so it's just dragging us down. Permalink Failed to load latest commit information. lib Remove -std=c99 support with _POSIX_C_SOURCE 199309L. Jun 13, 2016 sample Fix sample not passing flags Mar 24, 2016 vis Only update log HTML and scroll to top when the content changes. Apr 12, 2016 LICENSE Change license to Apache 2.0, removing need for CLAs. May 16, 2014 readme.md Update readme to pass flags parameter Mar 24, 2016 screenshot.png up-to-date screenshot Jan 4, 2015 readme.md Remotery A realtime CPU/GPU profiler hosted in a single C file with a viewer that runs in a web browser. Supported features: Lightweight instrumentation of multiple threads running on the CPU. Web viewer that runs in Chrome, Firefox and Safari. Custom WebSockets server transmits sample data to the browser on a latent thread. Profiles itself and shows how it's performing in the viewer. Can optionally sample CUDA/D3D11/OpenGL GPU activity. Console output for logging text. Console input for sending commands to your game. Compiling Windows (MSVC) - add lib/Remotery.c and lib/Remotery.h to your program. Set include directories to add Remotery/lib path. The required library ws2_32.lib should be picked up through the use of the #pragma comment(lib, ""ws2_32.lib"") directive in Remotery.c. Mac OS X (XCode) - simply add lib/Remotery.c and lib/Remotery.h to your program. Linux (GCC) - add the source in lib folder. Compilation of the code requires -pthreads for library linkage. For example to compile the same run: cc lib/Remotery.c sample/sample.c -I lib -pthread -lm You can define some extra macros to modify what features are compiled into Remotery: Macro               Default     Description  RMT_ENABLED         1           Disable this to not include any bits of Remotery in your build RMT_USE_TINYCRT     0           Used by the Celtoys TinyCRT library (not released yet) RMT_USE_CUDA        0           Assuming CUDA headers/libs are setup, allow CUDA profiling RMT_USE_D3D11       0           Assuming Direct3D 11 headers/libs are setup, allow D3D11 GPU profiling RMT_USE_OPENGL      0           Allow OpenGL GPU profiling (standalone except you must link to OpenGL which you already do if you use it)  Basic Use See the sample directory for further examples. A quick example: int main() {     // Create the main instance of Remotery.     // You need only do this once per program.     Remotery* rmt;     rmt_CreateGlobalInstance(&rmt);      // Explicit begin/end for C     {         rmt_BeginCPUSample(LogText, 0);         rmt_LogText(""Time me, please!"");         rmt_EndCPUSample();     }      // Scoped begin/end for C++     {         rmt_ScopedCPUSample(LogText, 0);         rmt_LogText(""Time me, too!"");     }      // Destroy the main instance of Remotery.     rmt_DestroyGlobalInstance(rmt); }  Running the Viewer Double-click or launch vis/index.html from the browser. Sampling CUDA GPU activity Remotery allows for profiling multiple threads of CUDA execution using different asynchronous streams that must all share the same context. After initialising both Remotery and CUDA you need to bind the two together using the call: rmtCUDABind bind; bind.context = m_Context; bind.CtxSetCurrent = &cuCtxSetCurrent; bind.CtxGetCurrent = &cuCtxGetCurrent; bind.EventCreate = &cuEventCreate; bind.EventDestroy = &cuEventDestroy; bind.EventRecord = &cuEventRecord; bind.EventQuery = &cuEventQuery; bind.EventElapsedTime = &cuEventElapsedTime; rmt_BindCUDA(&bind);  Explicitly pointing to the CUDA interface allows Remotery to be included anywhere in your project without need for you to link with the required CUDA libraries. After the bind completes you can safely sample any CUDA activity: CUstream stream;  // Explicit begin/end for C {     rmt_BeginCUDASample(UnscopedSample, stream);     // ... CUDA code ...     rmt_EndCUDASample(stream); }  // Scoped begin/end for C++ {     rmt_ScopedCUDASample(ScopedSample, stream);     // ... CUDA code ... }  Remotery supports only one context for all threads and will use cuCtxGetCurrent and cuCtxSetCurrent to ensure the current thread has the context you specify in rmtCUDABind.context. Sampling Direct3D 11 GPU activity Remotery allows sampling of GPU activity on your main D3D11 context. After initialising Remotery, you need to bind it to D3D11 with a single call from the thread that owns the device context: // Parameters are ID3D11Device* and ID3D11DeviceContext* rmt_BindD3D11(d3d11_device, d3d11_context);  Sampling is then a simple case of: // Explicit begin/end for C {     rmt_BeginD3D11Sample(UnscopedSample);     // ... D3D code ...     rmt_EndD3D11Sample(); }  // Scoped begin/end for C++ {     rmt_ScopedD3D11Sample(ScopedSample);     // ... D3D code ... }  Support for multiple contexts can be added pretty easily if there is demand for the feature. When you shutdown your D3D11 device and context, ensure you notify Remotery before shutting down Remotery itself: rmt_UnbindD3D11();  Sampling OpenGL GPU activity Remotery allows sampling of GPU activity on your main OpenGL context. After initialising Remotery, you need to bind it to OpenGL with the single call: rmt_BindOpenGL();  Sampling is then a simple case of: // Explicit begin/end for C {     rmt_BeginOpenGLSample(UnscopedSample);     // ... OpenGL code ...     rmt_EndOpenGLSample(); }  // Scoped begin/end for C++ {     rmt_ScopedOpenGLSample(ScopedSample);     // ... OpenGL code ... }  Support for multiple contexts can be added pretty easily if there is demand for the feature. When you shutdown your OpenGL device and context, ensure you notify Remotery before shutting down Remotery itself: rmt_UnbindOpenGL();  Applying Configuration Settings Before creating your Remotery instance, you can configure its behaviour by retrieving its settings object: rmtSettings* settings = rmt_Settings();  Some important settings are: // Redirect any Remotery allocations to your own malloc/free, with an additional context pointer // that gets passed to your callbacks. settings->malloc; settings->free; settings->mm_context;  // Specify an input handler that receives text input from the Remotery console, with an additional // context pointer that gets passed to your callback. settings->input_handler; settings->input_handler_context;  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Celtoys/Remotery"	"Single C File Profiler with Web Viewer. [Apache2]"	"true"
"Debug"	"UnitTest++"	"https://github.com/unittest-cpp/unittest-cpp"	"A lightweight unit testing framework for C++. [MIT/X Consortium license]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"207"	"29"	"82"	"GitHub - unittest-cpp/unittest-cpp: A lightweight unit testing framework for C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 207 Fork 82 unittest-cpp/unittest-cpp Code Issues 16 Pull requests 4 Wiki Pulse Graphs A lightweight unit testing framework for C++ 215 commits 6 branches 5 releases 19 contributors C++ 90.6% M4 6.5% Makefile 1.2% CMake 1.2% C 0.5% C++ M4 Makefile CMake C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags add_cmake_option_to_disable_running_tests_as_build_step googlecode long_and_short_macros master sourceforge v1.6.1-prep Nothing to show v1.6.1 v1.6.0 v1.5.1 v1.5.0 v1.4 Nothing to show New pull request Latest commit d220612 May 4, 2016 pjohnmeyer Merge pull request #111 from unittest-cpp/v1.6.1-prep … v1.6.1 prep Permalink Failed to load latest commit information. UnitTest++ Fix for #105 - Automake improvements: fixing pkgincludedir. Apr 7, 2016 builds Add 'empty' builds directory per the wiki. (The folder is not actuall… May 9, 2013 cmake Add support for CMake find_package() Mar 15, 2016 docs @ 14495a3 Update docs, versions for 1.6.0. Feb 29, 2016 m4 Enable C++11 support in autoconf Feb 23, 2016 tests Fix failures in `make distcheck` Apr 25, 2016 .gitattributes Add *.bat as eol=crlf. Mar 24, 2013 .gitignore Add pkg config file (with help from Vicente Adolfo Bolea Sánchez) Sep 22, 2015 .gitmodules Update docs, versions for 1.6.0. Mar 1, 2016 .travis.yml Add tiny comment change to trigger Travis. Jul 14, 2015 .uncrustify Tweak preprocessor blocks. Jan 29, 2016 AUTHORS Update AUTHORS and configure.ac Dec 19, 2014 CMakeLists.txt Merge branch 'master' of https://github.com/jasonhorsburgh/unittest-cpp… Apr 19, 2016 ChangeLog Added autobuild system Nov 14, 2012 INSTALL Added autobuild system Nov 14, 2012 LICENSE Rename COPYING to LICENSE; delete NEWS since it was empty anyway. Feb 20, 2013 Makefile.am Add pkg config file (with help from Vicente Adolfo Bolea Sánchez) Sep 22, 2015 README.md Update versions to 1.6.1 May 4, 2016 UnitTest++.pc.in Add pkg config file (with help from Vicente Adolfo Bolea Sánchez) Sep 22, 2015 appveyor.yml Update versions to 1.6.1 May 5, 2016 configure.ac Determine autoconf package version from git tags May 4, 2016 README.md UnitTest++ UnitTest++ is a lightweight unit testing framework for C++. It was designed to do test-driven development on a wide variety of platforms. Simplicity, portability, speed, and small footprint are all very important aspects of UnitTest++. UnitTest++ is mostly standard C++ and makes minimal use of advanced library and language features, which means it should be easily portable to just about any platform. Out of the box, the following platforms are supported: Windows Linux Mac OS X Documentation The full documentation for building and using UnitTest++ can be found on the GitHub wiki page. The contents of this wiki are also included as a git submodule under the docs folder, so version-specific Markdown documentation is always available along with the download. Pre-requisites While there are currently some bundled automake files, UnitTest++ is primarily built and supported using CMake. Downloading Latest (HEAD) Via git: git clone https://github.com/unittest-cpp/unittest-cpp  Via svn: svn checkout https://github.com/unittest-cpp/unittest-cpp/trunk unittest-cpp  Latest release (v1.6.1) Via git: git clone https://github.com/unittest-cpp/unittest-cpp cd unittest-cpp git checkout v1.6.1  Via svn: svn checkout https://github.com/unittest-cpp/unittest-cpp/tags/v1.6.1 unittest-cpp  License UnitTest++ is free software. You may copy, distribute, and modify it under the terms of the License contained in the file LICENSE distributed with this package. This license is the same as the MIT/X Consortium license. Contributors GitHub Contributor Graph Current Maintainers: Patrick Johnmeyer (pjohnmeyer@gmail.com) @pjohnmeyer Charles Nicholson (charles.nicholson@gmail.com) @charlesnicholson Original Authors: Noel Llopis (llopis@convexhull.com) Charles Nicholson (charles.nicholson@gmail.com) Contributors not included in github history Jim Tilander Kim Grasman Jonathan Jansson Dirck Blaskey Rory Driscoll Dan Lind Matt Kimmel -- Submitted with permission from Blue Fang Games Anthony Moralez Jeff Dixon Randy Coulman Lieven van der Heide Historic release notes Version 1.6.0 (2016-02-29) Add REQUIRE macro to end tests early when selected checks fail Full List Version 1.5.1 (2016-01-30) pkg-config support Fix for Visual Studio 2010 compilation issue in 1.5.0 Full List Version 1.5 (2015-11-04) Visual Studio 2015 support CMake-based build management Integration of SourceForge and Google Code versions of the project Full List Version 1.4 (2008-10-30) CHECK macros work at arbitrary stack depth from inside TESTs. Remove obsolete TEST_UTILITY macros Predicated test execution (via TestRunner::RunTestsIf) Better exception handling for fixture ctors/dtors. VC6/7/8/9 support Version 1.3 (2007-4-22) Removed dynamic memory allocations (other than streams) MinGW support Consistent (native) line endings Minor bug fixing Version 1.2 (2006-10-29) First pass at documentation. More detailed error crash catching in fixtures. Standard streams used for printing objects under check. This should allow the use of standard class types such as std::string or other custom classes with stream operators to ostream. Standard streams can be optionally compiled off by defining UNITTEST_USE_CUSTOM_STREAMS in Config.h Added named test suites Added CHECK_ARRAY2D_CLOSE Posix library name is libUnitTest++.a now Floating point numbers are postfixed with 'f' in the failure reports Version 1.1 (2006-04-18) CHECK macros do not have side effects even if one of the parameters changes state Removed CHECK_ARRAY_EQUAL (too similar to CHECK_ARRAY_CLOSE) Added local and global time constraints Removed dependencies on strstream Improved Posix signal to exception translator Failing tests are added to Visual Studio's error list Fixed Visual Studio projects to work with spaces in directories Version 1.0 (2006-03-15) Initial release Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/unittest-cpp/unittest-cpp"	"A lightweight unit testing framework for C++. [MIT/X Consortium license]"	"true"
"Debug"	"VLD"	"http://vld.codeplex.com/"	"Visual Leak Detector. A free, robust, open-source memory leak detection system for Visual C++."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Visual Leak Detector for Visual C++ 2008-2015 - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In Visual Leak Detector for Visual C++ 2008-2015 home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe  Project Description Visual Leak Detector is a free, robust, open-source memory leak detection system for Visual C++. It's pretty easy to use. After installing it, you just need to tell Visual C++ where to find the included header and library file. Then it can be used with any C/C++ project simply by adding the following line to your code: #include <vld.h> When you run your program under the Visual Studio debugger, Visual Leak Detector will output a memory leak report at the end of your debugging session. The leak report includes the full call stack showing how any leaked memory blocks were allocated. Double-click on a line in the call stack to jump to that file and line in the editor window. It's a very effective way to quickly diagnose, and fix, memory leaks in C/C++ applications. The main difference between the CRT Debug Library and VLD, is that Visual Leak Detector shows you the complete callstack used for memory allocation has led to the leak. For example: ---------- Block 1199 at 0x04BE1058: 136 bytes ---------- Call Stack: d:\Foobar\FooLog.cpp (26): FooLog::getInstance d:\Foobar\FooMain.cpp (75): FooMain::init f:\dd\vctools\crt_bld\self_x86\crt\src\crtexe.c (578): __tmainCRTStartup f:\dd\vctools\crt_bld\self_x86\crt\src\crtexe.c (403): WinMainCRTStartup 0x759A3677 (File and line number not available): BaseThreadInitThunk 0x770C9D42 (File and line number not available): RtlInitializeExceptionChain 0x770C9D15 (File and line number not available): RtlInitializeExceptionChain Data: 9C 33 2D 6B    74 2A 2D 6B    C8 11 BE 04    00 00 00 00     .3-kt*-k ........ 00 00 00 00    70 14 BB 6C    70 14 BB 6C    00 00 00 00     ....p..l p..l.... 00 00 00 00    68 14 BB 6C    68 14 BB 6C    00 00 00 00     ....h..l h..l.... 00 00 00 00    6C 14 BB 6C    6C 14 BB 6C    20 12 BE 04     ....l..l l..l.... 00 00 00 00    CD 00 CD CD    00 00 00 00    01 CD CD CD     ........ ........ 68 14 BB 6C    78 33 2D 6B    00 00 00 00    00 00 00 00     h..lx3-k ........ 00 00 00 00    01 02 00 00    06 00 00 00    00 00 00 00     ........ ........ 00 00 00 00    00 00 00 00    88 11 BE 04    5C 10 BE 04     ........ ....\... 00 00 00 00    20 CD CD CD                                   ........ ........ This software is provided ""AS IS"" without warranty of any kind. The project was originally developed by Dan Moulding, but they are no longer supported. Features of version 2.0 are implemented by Arkadiy Shapkin (me). Links Visual Leak Detector Previous Official Homepage http://sites.google.com/site/dmoulding/vld CodeProject article: Visual Leak Detector - Enhanced Memory Leak Detection for Visual C++ Finding Memory Leaks Using the CRT Library Visual Leak Detector: Investigate Memory Leaks in Visual C++ Last edited Jan 9 at 8:30 PM by KindDragon, version 22 download current v2.5 date Sat Jan 9, 2016 at 7:00 AM status Stable downloads 21,697 rating       3 ratings Review this release Most Helpful Reviews      Helps me so much to find any memory leaks in my application. Actually this plugin has to be included in Visual Studio as default.      Started application crashed with a callstack showing vld after only 15 seconds. 2.4rc2 works fine. View all reviews Ads by Developer Media activity downloads 996 Days: 7 7 30 30 All All Details related projects Visual Leak Detector Performance Test C++ Debugger Visualizers for VS2012+ © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"Visual Leak Detector. A free, robust, open-source memory leak detection system for Visual C++."	"true"
"Game Engine"	"Allegro"	"http://liballeg.org/"	"A cross-platform library mainly aimed for video games and multimedia programming. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"243"	"39"	"75"	"GitHub - liballeg/allegro5: The official Allegro 5 git repository. Pull requests welcome! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 243 Fork 75 liballeg/allegro5 Code Issues 141 Pull requests 4 Pulse Graphs The official Allegro 5 git repository. Pull requests welcome! http://liballeg.org 11,119 commits 30 branches 165 releases Fetching contributors C 74.3% C++ 12.3% Objective-C 6.0% CMake 2.7% Python 2.0% Java 1.6% Other 1.1% C C++ Objective-C CMake Python Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.2 4.3-xdummy-system 4.3 4.3.10plus 4.4 4.9-elias-display 4.9-fshook 4.9-newgfx 4.9-scons 4.9-trentg 4.9 5.0 5.0.8-pre 5.0.10-pre 5.1--gles-lock-bitmap-bb-proxy 5.1-ouya-ljoy 5.1-refactoring-experiment 5.1 5.1.12 5.1.13 5.2.0 allegro_console_branch allegro_4_0_branch gh-pages master mouse_api new_api_branch unix-pthreads vendor vfs-work-4.3 Nothing to show v4-2-3 v4-2-3-1 v4-2-2 v4-2-2-rc1 v4-2-1 v4-2-0@5476 v4-2-0 v4-2-0-rc2@5374 v4-2-0-rc2 v4-2-0-rc1@5325 v4-2-0-rc1 v4-2-0-beta4@5221 v4-2-0-beta4 v4-2-0-beta3@5108 v4-2-0-beta3 v4-2-0-beta2@5043 v4-2-0-beta2 v4-2-0-beta1@5002 v4-2-0-beta1 v4-1-18@4829 v4-1-18 v4-1-17@4722 v4-1-17 v4-1-16@4545 v4-1-16 v4-1-15@4357 v4-1-15 v4-1-14@4150 v4-1-14 v4-1-13@4091 v4-1-13 v4-1-12@3911 v4-1-12 v4-1-11@3621 v4-1-11 v4-1-10@3560 v4-1-10 v4-1-9@2943 v4-1-9 v4-1-8@2768 v4-1-8 v4-1-7@2742 v4-1-7 v4-1-6@2723 v4-1-6 v4-1-5@2695 v4-1-5 v4-1-4@2620 v4-1-4 v4-1-3@2511 v4-1-3 v4-1-2@2458 v4-1-2 v4-1-1@2341 v4-1-1 v4-1-0@2243 v4-1-0 v4-0-3@1892 v4-0-3 v4-0-2@1892 v4-0-2 v4-0-1@1892 v4-0-1 v4-0-0@1758 v4-0-0 v3-9-40@1561 v3-9-40 v3-9-39@1366 v3-9-39 v3-9-38@1107 v3-9-38 v3-9-37@764 v3-9-37 v3-9-36@566 v3-9-36 v3-9-35@443 v3-9-35 v3-9-34@322 v3-9-34 v3-9-33 v3-9-32 start new_api_branch_point@4418 new_api_branch_point merge_HEAD_to_new_api_3@4963 merge_HEAD_to_new_api_3 merge_HEAD_to_new_api_2@4916 merge_HEAD_to_new_api_2 merge_HEAD_to_new_api_1@4487 merge_HEAD_to_new_api_1 allegro_5_fork_point@1845 allegro_5_fork_point allegro_4_0_branch_point@1892 allegro_4_0_branch_point allegro_console_branch_point@3789 allegro_console_branch_point 5.2.0.0 5.1.13.1 5.1.13.0 5.1.12.0 Nothing to show New pull request Latest commit f4ad4db Jul 15, 2016 goobliata Optimize Raspberry Pi build. -Os seems the best. Permalink Failed to load latest commit information. addons Switch destructors to using a linked list with backreferences. Jul 4, 2016 android Fixed bogus display destruction on Android. Feb 23, 2016 cmake Optimize Raspberry Pi build. -Os seems the best. Jul 15, 2016 demos Use PROJECT_SOURCE_DIR and PROJECT_BINARY_DIR instead of CMAKE_SOURCE… Apr 16, 2016 docs Link to the master branch in the source links. May 12, 2016 examples Use 0.5 offsets for lines and rectangles Jun 12, 2016 include/allegro5 Switch destructors to using a linked list with backreferences. Jul 4, 2016 misc Create library when archiving in iOS project Jul 9, 2016 python Use PROJECT_SOURCE_DIR and PROJECT_BINARY_DIR instead of CMAKE_SOURCE… Apr 16, 2016 src Fix system mouse cursor stuff on Pi. Jul 10, 2016 tests Allow marking tests as being hardware only. May 12, 2016 tools Remove AL_CONST everywhere. Mar 2, 2010 .gitignore Add .gitignore and ignore build/ dir May 7, 2016 .travis.yml Build the debug version of Allegro on travis for extra assertions. Jul 4, 2016 CMakeLists.txt Specify the Android toolchain file on the command line now. Jun 26, 2016 CONTRIBUTORS.txt Update CONTRIBUTORS.txt Mar 30, 2016 LICENSE.txt Squashed commit of the following: Sep 6, 2015 README.md Add a symlink README.md pointing to README.txt. Mar 24, 2016 README.txt Opus codec support. Apr 25, 2016 README_android.txt Specify the Android toolchain file on the command line now. Jun 27, 2016 README_cmake.txt Split up readme_a5.txt; try to streamline the build instructions. Jun 14, 2010 README_iphone.txt Fix spelling of the cmake Xcode generator in the readme. May 31, 2015 README_macosx.txt Add retina display support to OSX. Jun 2, 2015 README_make.txt Add .gitignore and ignore build/ dir May 7, 2016 README_msvc.txt Minor updates to the build documentation. Jan 8, 2011 README_packaging.txt Add a readme for packagers. Oct 25, 2010 README_pkgconfig.txt Mention path and static linking for pkg-config. Apr 26, 2015 README_raspberrypi.txt Add notes about running Raspberry Pi VM with qemu. Dec 27, 2012 README_releasing.txt --numeric-ids is the secret sauce to rsync working with gna.org Jan 24, 2016 README_windows.txt Don't link to xinput and d3dx9. Mar 19, 2016 allegro5.cfg Rework TTF locking a bit. Feb 21, 2016 appveyor.yml Use AllegroDeps version 1.4.0 for AppVeyor. Feb 1, 2016 indent.pro Added -bls and -l80 and some types to indent.pro. Sep 23, 2008 README.md Welcome to Allegro! Allegro is a cross-platform library mainly aimed at video game and multimedia programming. It handles common, low-level tasks such as creating windows, accepting user input, loading data, drawing images, playing sounds, etc. and generally abstracting away the underlying platform. However, Allegro is not a game engine: you are free to design and structure your program as you like. Allegro 5 has the following additional features: Supported on Windows, Linux, Mac OSX, iPhone and Android User-friendly, intuitive C API usable from C++ and many other languages Hardware accelerated bitmap and graphical primitive drawing support (via OpenGL or Direct3D) Audio recording support Font loading and drawing Video playback Abstractions over shaders and low-level polygon drawing And more! This readme contains general information which applies to all platforms that Allegro builds on. README_cmake.txt discusses some build options for cmake. README_msvc.txt discusses compilation on Windows with Microsoft Visual C/C++. README_make.txt discusses compilation with GNU make. This applies to Unix-like operating systems such as Linux, MacOS X and MinGW on Windows. README_macosx.txt has a few additional notes for MacOS X. README_iphone.txt discusses iPhone operating systems. Requirements We assume you have C and C++ compilers installed and functioning. We support gcc, clang and MSVC. Allegro also requires CMake 2.8.5 or later to build. You may download it from http://www.cmake.org/ Library dependencies Allegro is divided into a core library and a number of addon libraries. The core library depends on certain libraries to function. If you don't have those, nothing will work. These are required for the core library: DirectX SDK (Windows only) You can get this for MSVC from the Microsoft web site (large download). Alternatively, smaller downloads for MSVC and MinGW are available here: http://liballeg.org/download.html#miscellaneous-files. Some MinGW distributions come with sufficient DirectX SDK to support compiling Allegro. X11 development libraries (Linux/Unix only) The libraries will be part of your Linux distribution, but you may have to install them explicitly. OpenGL development libraries (optional only on Windows) The addons, too, may require additional libraries. Since the addons are strictly optional, they are not required to build Allegro, but a lot of functionality may be disabled if they are not present. Windows users may find some precompiled binaries for the additional libraries from http://gnuwin32.sourceforge.net/. You need to get the bin and lib packages. The bin packages contain DLLs, and the lib packages contain the headers and import libraries. Mac users may find some dependencies in Homebrew, Fink or MacPorts. http://brew.sh/, http://www.finkproject.org/ and http://www.macports.org/ Linux users likely have all the dependencies already, except PhysicsFS and DUMB. If your distribution uses separate development packages, they will need to be installed. The packages are probably named *-dev or *-devel. These are the dependencies required for the addons: libpng and zlib, for PNG image support (Unix and older MinGW only) Home page: http://www.libpng.org/pub/png/ Windows binaries: http://gnuwin32.sourceforge.net/packages/libpng.htm On Windows/Mac OS X/iPhone/Android, PNG image support is available by using the native facilities on the respective operating systems, so libpng is not required. libjpeg, for JPEG image support (Unix and older MinGW only) Home page: http://www.ijg.org/ Windows binaries: http://gnuwin32.sourceforge.net/packages/jpeg.htm On Windows/Mac OS X/iPhone/Android, JPEG image support is available by using the native facilities on the respective operating systems, so libjpeg is not required. FreeType, for TrueType font support. Home page: http://freetype.sourceforge.net/ Windows binaries: http://gnuwin32.sourceforge.net/packages/freetype.htm Ogg Vorbis, a free lossy audio format. (libogg, libvorbis, libvorbisfile) Home page: http://www.vorbis.com/ Opus, a free lossy audio codec. (libogg, libopus, libopusfile) Home page: http://www.opus-codec.org/ FLAC, a free lossless audio codec. (libFLAC, libogg) Home page: http://flac.sourceforge.net/ DUMB, an IT, XM, S3M and MOD player library. (libdumb) Home page: http://dumb.sourceforge.net/ OpenAL, a 3D audio API. The audio addon can use OpenAL, although the 3D capabilities aren't used. http://kcat.strangesoft.net/openal.html On Mac OS X, OpenAL is required but should come with the OS anyway. On Linux and Windows, OpenAL will only be used if you request it, hence there is no reason to install it specifically. PhysicsFS, provides access to archives, e.g. .zip files. Home page: http://icculus.org/physfs/ On Windows it may be a pain to place all these libraries such that they can be found. Please see the README_cmake.txt section on the ""deps subdirectory"" when the time comes. API documentation To build the documentation you will need Pandoc. Pandoc's home page is http://johnmacfarlane.net/pandoc/ Installing Pandoc from source can be challenging, but you can build Allegro without building the documentation. Online documentation is available on the Allegro web site: http://docs.liballeg.org/ Building with CMake Building with CMake is a two step process. During the configuration step, cmake will detect your compiler setup and find the libraries which are installed on your system. At the same time, you may select options to customise your build. If you are unsure of what you are doing, leave all the options at the defaults. Once the configuration step is successful, you will invoke another tool to build Allegro. The tool depends on your compiler, but is usually either make, or your IDE. To avoid problems, unpack Allegro into a directory without spaces or other ""weird"" characters in the path. This is a known problem. Now read README_msvc.txt, README_make.txt or README_macosx.txt. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/liballeg/allegro5"	"A cross-platform library mainly aimed for video games and multimedia programming. [zlib]"	"true"
"Game Engine"	"Cocos2d-x"	"http://www.cocos2d-x.org/"	"A multi-platform framework for building 2d games, interactive books, demos and other graphical applications. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cocos2d-x - World's #1 Open-Source Game Development Platform Language (English) English Chinese Japanese Products Learn Programmers Guide Get Started API Reference Wiki SDKBOX Service Plugins Documentation Games Forums Download Blog Sign In What is Cocos2d-x? Cocos2d-x is a suite of open-source, cross-platform, game-development tools used by thousands of developers all over the world. Download v3.12 Learn More Documentation From Our Developer Blog See articles, case-studies, news about our tools and insights. View all blog posts Sign up for our newsletter to keep up with the latest developments, releases and updates for Cocos2d-x. Site Home Products Learn SDKBOX Games Forum Blog Hub Products Cocos2d-x Cocos Cocos Creator Featured Games BADLAND Castle Crash Big Fish Casino Dragon City Mobile View all featured games Latest Discussions Connect with us Post to our forum Facebook Twitter Weibo"	"null"	"null"	"A multi-platform framework for building 2d games, interactive books, demos and other graphical applications. [MIT]"	"true"
"Game Engine"	"delta3d"	"http://sourceforge.net/projects/delta3d/"	"A robust simulation platform. [LGPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"delta3d Open Source Engine download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse Games Simulation delta3d Open Source Engine delta3d Open Source Engine Brought to you by: banderegg, cowboycoder, legregius Summary Files Reviews Support Mailing Lists News Code Tickets ★ 5.0 Stars (19) 127 Downloads (This Week) Last Update: 2016-04-16 Download delta3d-2.8.0-final-OSX-Complete.dmg Browse All Files BSD Windows Linux Screenshots Description delta3d is a robust simulation platform built using open standards and open source software. It features full toolchain development supporting a wide variety of free and commercial software. delta3d Open Source Engine Web Site Categories Simulation, 3D Rendering License GNU Library or Lesser General Public License version 2.0 (LGPLv2) Features Commercial grade simulation engine Full toolchain and art pipeline Built using open standards and open source software Community forum, tutorials, and wiki at http://delta3d.org This video shows the new features in the latest delta3d release http://youtu.be/XOVkXpQvZsk KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 5.0 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 19 0 0 0 0 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ fireblastgames 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Yes, great software and one of the best features is an ability to read and edit files from other developers. Posted 05/13/2013 adamsilva 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Stable and works. Posted 02/13/2013 nicolascook 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 great program delta3d, thanks. Posted 01/19/2013 henrycollins 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Love that its free Posted 12/17/2012 <REDACTED> 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 deseo bajar delta3d gratis Posted 10/27/2012 Read more reviews Additional Project Details Languages English Intended Audience Developers User Interface X Window System (X11), Win32 (MS Windows) Programming Language Python, C++ Registered 2004-06-28 Recommended Projects Irrlicht Engine OGRE (O-O Graphics Rendering Engine) Delta3D-Extras Deals Top Searches 3d animator software 3d engine 3d face python 3d game 3d games using vb.net 3d mapping 3d mass spring 3d mmorpg engine 3d source code 3d unity source code game mobie Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"A robust simulation platform. [LGPL2]"	"true"
"Game Engine"	"GamePlay"	"https://github.com/gameplay3d/GamePlay"	"A cross-platform native C++ game framework for creating 2D/3D mobile and desktop games. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1839"	"362"	"900"	"GitHub - gameplay3d/GamePlay: Open-source, cross-platform, C++ game framework/engine for creating 2D/3D mobile and desktop games. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 362 Star 1,839 Fork 900 gameplay3d/GamePlay Code Issues 5 Pull requests 0 Wiki Pulse Graphs Open-source, cross-platform, C++ game framework/engine for creating 2D/3D mobile and desktop games. http://www.gameplay3d.io 4,602 commits 3 branches 1 release 62 contributors C++ 97.3% Objective-C++ 1.4% GLSL 0.4% QMake 0.2% CMake 0.2% Batchfile 0.2% Other 0.3% C++ Objective-C++ GLSL QMake CMake Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master next-gen Nothing to show v3.0.0 Nothing to show New pull request Latest commit 4de92c4 Mar 23, 2016 seanpaultaylor Merge branch 'next' Permalink Failed to load latest commit information. api Doxygen fixes. Jan 23, 2015 gameplay.xcworkspace Removes mesh, lua and particles samples Nov 27, 2014 gameplay Fix merge conflicts Mar 23, 2016 samples Fix merge conflicts Mar 23, 2016 template Fixed the template project so that it builds in visual studio. Mar 14, 2016 tools Merge branch 'next' of https://github.com/gameplay3d/GamePlay into next Feb 3, 2016 .gitattributes Updated gitattributes Jan 7, 2014 .gitignore Remove empty models from the bundle and stop tracking vcxproj.user file Oct 14, 2015 .travis.yml Added travis ci build Mar 18, 2016 CHANGES.md Fix merge conflicts Mar 23, 2016 CMakeLists.txt Don't compile the tools by default Jan 6, 2015 README.md Fix merge conflicts Mar 23, 2016 gameplay.doxyfile Updated the lua bindings and fixes for new Drawable class. Jan 9, 2015 gameplay.sln Removes mesh, lua and particles samples Nov 28, 2014 install.bat Update install.bat Nov 3, 2015 install.sh Update install.sh Nov 3, 2015 newproject.bat Simplifies Windows VS build path to be $(Configuration). Jan 15, 2015 newproject.sh Simplifies Windows VS build path to be $(Configuration). Jan 15, 2015 README.md GamePlay v3.0.0 GamePlay is an open-source, cross-platform, C++ game framework/engine for creating 2D/3D mobile and desktop games. Website Wiki API Development Guide Community Group Supported Platforms Windows MacOSX Linux iOS Android License Open-source under Apache 2.0 license. Bug Reporting Please log bugs under Issues on github. Disclaimer THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gameplay3d/GamePlay"	"A cross-platform native C++ game framework for creating 2D/3D mobile and desktop games. [Apache2]"	"true"
"Game Engine"	"Godot"	"https://github.com/godotengine/godot"	"A fully featured, open source, MIT licensed, game engine. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6135"	"662"	"1634"	"GitHub - godotengine/godot: Godot Engine – Multi-platform 2D and 3D game engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 662 Star 6,135 Fork 1,634 godotengine/godot Code Issues 1,070 Pull requests 71 Pulse Graphs Godot Engine – Multi-platform 2D and 3D game engine https://godotengine.org 4,906 commits 3 branches 14 releases 223 contributors C++ 91.1% Java 4.0% C 2.4% Objective-C++ 1.2% Python 1.1% Objective-C 0.2% C++ Java C Objective-C++ Python Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 2.0 master Nothing to show 2.0.4.1-stable 2.0.4-stable 2.0.3-stable 2.0.2-stable 2.0.1-stable 2.0-stable 2.0-rc1 2.0-beta 1.1-stable 1.1-rc3 1.1-rc2 1.1-rc1 1.0-stable 1.0-rc2 Nothing to show New pull request Latest commit 4c4ab14 Jul 15, 2016 akien-mga committed on GitHub Merge pull request #5702 from Paulb23/zoom_shortcuts … Added code editor zoom shortcuts Permalink Failed to load latest commit information. bin Removed unused variables (first pass) Jul 7, 2016 core Fix binding of File::get_sha256() Jul 14, 2016 doc Merge pull request #5705 from StraToN/doc-update Jul 15, 2016 drivers Merge pull request #5592 from volzhs/libwebp-0.5.1 Jul 14, 2016 main Merge pull request #5634 from vnen/assetlib-map-crash Jul 11, 2016 modules Allow semicolon after 'pass' keyword Jul 10, 2016 platform WinRT: Add missing license file for ANGLE Jul 14, 2016 scene Merge pull request #5638 from TheHX/tree-buttons Jul 12, 2016 servers Merge pull request #5533 from Hinsbart/cursor_atex Jul 10, 2016 tools Merge pull request #5702 from Paulb23/zoom_shortcuts Jul 15, 2016 .editorconfig Add .editorconfig Jun 22, 2015 .gitattributes GH linguist: properly detect .inc files as C++ Jul 3, 2016 .gitignore added KDevelop project files to gitignore Jul 14, 2016 .travis.yml x11: Implemented dpi detection Jun 9, 2016 CONTRIBUTING.md Enhance instructions for contributors Feb 12, 2016 ISSUE_TEMPLATE Issue template: ask for Godot version May 6, 2016 LICENSE.md Fix license markdown formatting Feb 20, 2016 LOGO_LICENSE.md logo in svg curves & license Jun 8, 2015 README.md README.md: Add codetriage badge May 27, 2016 SConstruct Add android_add_default_config for config.py Jul 7, 2016 icon.png Fixed iCCp chunk in pngs Jun 22, 2016 icon.svg Remove grey capsule on official logo Feb 28, 2016 logo.png Fixed iCCp chunk in pngs Jun 22, 2016 logo.svg Remove grey capsule on official logo Feb 28, 2016 methods.py Add android_add_default_config for config.py Jul 6, 2016 version.py Bump version to 2.1-beta \o/ Jul 12, 2016 README.md https://godotengine.org The Engine Godot is a fully featured, open source, MIT licensed, game engine. It focuses on having great tools, and a visual oriented workflow that can export to PC, Mobile and Web platforms with no hassle. The editor, language and APIs are feature rich, yet simple to learn, allowing you to become productive in a matter of hours. About Godot has been developed by Juan Linietsky and Ariel Manzur for several years, and was born as an in-house engine, used to publish several work-for-hire titles. Godot is a member project of the Software Freedom Conservancy Documentation Documentation is hosted on ReadTheDocs. Binary Downloads, Community, etc. Binary downloads, community, etc. can be found in Godot homepage: https://godotengine.org Compiling from Source See docs for compilation instructions for every platform: http://docs.godotengine.org/en/latest/reference/_compiling.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/godotengine/godot"	"A fully featured, open source, MIT licensed, game engine. [MIT]"	"true"
"Game Engine"	"Grit"	"http://www.gritengine.com/"	"Community project to build a free game engine for implementing open world 3D games. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Grit: An open source open world streaming game engine: Homepage Showcase Gallery Grit Book Download Grit Home LuaImg Community Forum Wiki Web chat (IRC) News Development Roadmap Issue Tracker Browse SVN Sourceforge Page maxscript.chm Dependencies Bullet Physics Lua Scripting OGRE Graphics What is Grit? The Grit Game Engine is a community project to build a free game engine (and pipeline tool-chain) for implementing open world 3D games, such as the those in the GTA series, Saints Row, Crysis, Fallout 3, Just Cause 2, Mafia 2, Burnout, etc. Anyone can use the engine as a foundation for their game, and anyone can read / modify / integrate the source code. While there are many open source game engines, ours is the only one that is being optimized for open world games. We support large maps (e.g. more than 30 square km, 50000 objects) with considerable diversity in geometry and textures, because game objects and scenery consume negligible memory / CPU resources when out of visual range. We also use deferred shading, which is essential for rendering the abundance of light sources that are needed in open world scenes. A key objective of the Grit Game Engine project is to enable ‘modders’ and other enthusiasts to build extremely diverse interactivity and gameplay into their environments. Although we support exporting from 3D Studio Max, even non-programmers find it easy to define new game object classes, materials, etc using simple definitions inside Lua scripts. Code is open source and MIT licensed. Large open world maps, content streamed from disk. Normal / specular / gloss maps Heightmap-based texture blending Deferred shading Soft dynamic shadows 24 hour time cycle with sun, moon, clouds Stars at night with real constellations Procedural placement of vegetation and clutter General purpose 3D physics engine. Game objects are extremely scriptable via Lua. Planes & cars (implemented via game object scripting). Developing/debugging scripts is easy thanks to an in-game Lua console. Linux and Windows ports are available. Recent Blog Posts • Jsonnet (September 9th, 2014) • Grit news and personal update (April 1st, 2012) • Update on progress since March (August 5th, 2011) • 1500 SVN revisions (March 15th, 2011) • Finally we have deferred lighting! (February 5th, 2011) Recent forum activity Problems creating a simple static scene with grit_blender... Problem with the grit_blender addons on ubuntu x64 16.04... Free Music Resource... Compile problem on ubuntu x64 16.04... Illegal instruction on ubuntu x64 16.04... Grit Blender Exporter... Grit is now on Github... Can you import Sketchup models into the Grit Engine?... Random GTA 1 & 2 Map Assets for Download... About having net code for grit... Join the discussion here. News Categories Community Game Engine Tutorials General Grit Stuff Not A Valid Category Game Engine Forum | Game Engine Wiki | Grit Development Map | Copyright © 2011 Grit Game Engine Community. All Rights Reserved. Designed by mortalhuman."	"null"	"null"	"Community project to build a free game engine for implementing open world 3D games. [MIT]"	"true"
"Game Engine"	"Oxygine"	"http://oxygine.org/"	"A cross-platform 2D C++ game engine. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"259"	"38"	"88"	"GitHub - oxygine/oxygine-framework: Oxygine is C++ engine and framework for 2D games on iOS, Android, Windows, Linux and Mac Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 259 Fork 88 oxygine/oxygine-framework Code Issues 1 Pull requests 0 Wiki Pulse Graphs Oxygine is C++ engine and framework for 2D games on iOS, Android, Windows, Linux and Mac http://oxygine.org/ 486 commits 4 branches 0 releases Fetching contributors C++ 88.4% C 4.3% Java 3.8% HTML 1.4% Objective-C++ 0.6% CMake 0.6% Other 0.9% C++ C Java HTML Objective-C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev emsc indexbuffer master Nothing to show Nothing to show New pull request Latest commit ecbbcfc Jul 10, 2016 frankinshtein committed on GitHub Merge pull request #69 from ptdave20/patch-1 … Spelling error Permalink Failed to load latest commit information. 3rdPartyTools minor Apr 1, 2016 cmake Find and include SDL2 from system Jan 11, 2016 doc docs Jun 20, 2016 examples added gradle to examples Jun 18, 2016 include/ox major changes: Jan 14, 2016 libs added InputText class Feb 8, 2014 oxygine minor Jun 22, 2016 readme Spelling error Jul 9, 2016 tools added gradle to examples Jun 18, 2016 .gitignore unifiing CMake with emscripten Apr 18, 2016 Android.mk removed greenlets Jan 8, 2016 CMakeLists.txt emscripten moves to SDL2 Jun 5, 2016 Doxyfile Python3 compatible Dec 10, 2014 license.txt minor Jun 18, 2016 readme.md updated some readme files for better grammar and clarity Feb 14, 2016 readme.md BUILD AND RUN See oxygine-framework/readme/ folder. It has instructions on how to build and run oxygine on different platforms. Wiki available at https://github.com/oxygine/oxygine-framework/wiki Oxygine is a C++ engine for 2D mobile games. Yet another shell around OpenGL/D3D API you would say? No, this is a set of classes and tools to create a game according to your requirements. At the basis of the engine there is a scene graph, that is similar to Flash. In short, You can call this as Flash for C++, but more comfortable and way faster. Initially it was developed for mobile platforms (iOS, Android), but can also be used for PC games. Source code is available under MIT license (use for free anywhere). SDK includes: Source code, libraries Necessary tools, documentation Examples Demo for testing and demonstration of base features Supported platforms: Android iOS Windows MacOSX Emscripten (web) Examples of code: //create sprite and display it spSprite sprite = new Sprite(); sprite->attachTo(getStage());  //run animation tween sprite->addTween(Sprite::TweenAnim(gameResources.getResAnim(""anim2"")), duration, loops);  //run position tween sprite->addTween(Sprite::TweenPosition(x, y), duration, loops);  //handle click event sprite->addEventListener(TouchEvent::CLICK, [sprite](Event*){      log::messageln(""clicked to sprite!"");     //change sprite color     sprite->setColor(Color::Gray); }); Features: Programming language is C++. For rendering OpenGL(ES) 2.0 is used. Custom shaders supported. Compressed textures supported. Component based system, simple and predictable OOP API. Possibility to inherit from classes and overload their behavior. No global mega managers of everything, that dictate the requirements and the way you write your code. Effective and flexible work with resources, very close to your game. Components of the engine have weak links between each other. Can be used together, separately or not at all. Fast creation and deletion of objects using memory pools for all engine objects. SceneGraph is somewhat similar to Flash (diagrams with inheritance models). It is built on smart pointers (analogue boost:intrusive_ptr). No need to hassle with memory control, memory leaks. Debug Tools (screenshot). Tree Inspector is “Visual profiler” for Scene Graph. Right in the game you can view the graph and different branches to analyze and errors search. “Textures Inspector” shows you currently loaded textures into memory (screenshot) Render to texture. Resources description is stored in xml file. It has multiple different parameters: you can add your own resources types, format can be set, in which you will store the texture(atlas) in memory, number of columns and rows for animation, etc. Any resource can have user-data attributes. Tweens for frame-by-frame animation, color, position, rotation, etc. Easily create your own. A set of basic UI components commonly used in games: Button, Sprite, ProgressBar and others (image) Command-line tool on Python to process your resources: Build you resources from XML files into atlases, determining the optimal size of atlases. Resize assets from high-res to necessary for your game. Does additional work to optimize work with resources in the game. Compress automatically to ETC1 or PVRTC textures format. Well-designed handling of events from mouse and multi-touch (for example you can press two buttons with two fingers at the same time without collisions) based on AS3 Flash model. It is possible to write code and dialogs in blocking style (concurency programming/coroutines). Accurate rendering of text with line-wraps, vertical and horizontal alignment support, localization, utf-8. Base HTML tags support (screenshot). If you want to add multiple sets of assets for different game resolutions it can be done on the engine level by writing just a few lines of code. You won’t need to adjust coordinates manually for different resolution. It is enough just to keep initial art in high-res. Masking (screenshot, screenshot) Atlas assembling on the fly during the loading, if you didn't provide it yourself. Multi-threaded resources loading. It is possible to partially unload “heavy” resources like atlases from memory. The resouce handle to work with atlas will be still valid (as well as its size) and will even have texture points, but the texture itself will be empty. This is very important when you have strict memory limitations: for example if you created the whole UI with all resources loaded, but there is no need to display them all at once. Fast automatic batching. Bitmap fonts based on BMFont and FreeType. Possibility to add your own font type. You could build it on top of Marmalade, SDL2 or adapt it for your platform. Oxygine can be built with Emscripten for internet browsers as well. And this is not everything. There are a lot of easy-to-use features, this framework is not a monster and is clear and intuitive. Viewing a couple of examples is enough to understand how it works. Contacts You can find more information at oxygine.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/oxygine/oxygine-framework"	"A cross-platform 2D C++ game engine. [MIT]"	"true"
"Game Engine"	"Panda3D"	"https://github.com/panda3d/panda3d"	"A game engine, a framework for 3D rendering and game development for Python and C++ programs. [Modified BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"487"	"116"	"165"	"GitHub - panda3d/panda3d: Powerful, mature open-source cross-platform game engine for Python and C++, developed by Disney and CMU Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 116 Star 487 Fork 165 panda3d/panda3d Code Pull requests 11 Pulse Graphs Powerful, mature open-source cross-platform game engine for Python and C++, developed by Disney and CMU https://www.panda3d.org/ 21,095 commits 10 branches 3 releases Fetching contributors C++ 66.0% C 17.4% Python 14.3% Objective-C++ 0.7% Emacs Lisp 0.6% Perl 0.5% Other 0.5% C++ C Python Objective-C++ Emacs Lisp Perl Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cmake eliminate-pystub gl-uniform-buffers input-overhaul master mingw-patch parameter-reimpl release/1.9.x vulkan webgl-port Nothing to show v1.9.2 v1.9.1 v1.9.0 Nothing to show New pull request Latest commit 400bc2c Jul 15, 2016 rdb Support .ktx textures, ETC1/ETC2/EAC compression Permalink Failed to load latest commit information. contrib Assorted tweaks and compile warning fixes Jul 14, 2016 direct Fix a TypeError in direct.fsm.FSM Jun 28, 2016 dmodels Remove ppremake, genPyCode, and all hacks created to support them Nov 9, 2015 doc Merge branch 'release/1.9.x' Jul 12, 2016 dtool gcc build fix Jul 14, 2016 makepanda Fix a couple of compile warnings, reduce unnecessary includes Jun 23, 2016 models static fonts should support explicit space advance specified from fon… Nov 21, 2011 panda Support .ktx textures, ETC1/ETC2/EAC compression Jul 15, 2016 pandatool Assorted tweaks and compile warning fixes Jul 14, 2016 samples Merge branch 'release/1.9.x' Jun 11, 2016 .gitignore Update .gitignore, add core dumps Jun 28, 2016 .travis.yml Fix a compile issue or two Apr 29, 2016 LICENSE Move LICENSE and README to the root, update README Nov 30, 2014 README.md Update thirdparty links Apr 1, 2016 README.md Panda3D Panda3D is a game engine, a framework for 3D rendering and game development for Python and C++ programs. Panda3D is open-source and free for any purpose, including commercial ventures, thanks to its liberal license. To learn more about Panda3D's capabilities, visit the gallery and the feature list. To learn how to use Panda3D, check the documentation resources. If you get stuck, ask for help from our active community. Panda3D is licensed under the Modified BSD License. See the LICENSE file for more details. Building Panda3D Windows We currently build using the Microsoft Visual C++ 2010 compiler. You do not need Microsoft Visual Studio to build Panda3D, though - the relevant compilers are included as part of the Windows 7.1 SDK. You will also need to have the third-party dependency libraries available for the build scripts to use. These are available from one of these two URLs, depending on whether you are on a 32-bit or 64-bit system: https://www.panda3d.org/download/panda3d-1.9.2/panda3d-1.9.2-tools-win32.zip https://www.panda3d.org/download/panda3d-1.9.2/panda3d-1.9.2-tools-win64.zip After acquiring these dependencies, you may simply build Panda3D from the command prompt using the following command: makepanda\makepanda.bat --everything --installer --no-eigen When the build succeeds, it will produce an .exe file that you can use to install Panda3D on your system. Note: you may choose to remove --no-eigen and build with Eigen support in order to improve runtime performance. However, this will cause the build to take hours to complete, as Eigen is a heavily template-based library, and the the MSVC compiler does not perform well under these circumstances. Linux Building Panda3D on Linux is easy. All you need is to invoke the makepanda script using the version of Python that you want Panda3D to be built against. Run makepanda.py with the --help option to see which options are available. Usually, you will want to specify the --everything option (which builds with support for all features for which it detects the prerequisite dependencies) and the --installer option (which produces an installable .deb or .rpm file for you to install, depending on your distribution). The following command illustrates how to build Panda3D with some common options: python2.7 makepanda/makepanda.py --everything --installer --no-egl --no-gles --no-gles2 You will probably see some warnings saying that it's unable to find several dependency packages. You should determine which ones you want to include in your build and install the respective development packages. You may visit this manual page for an overview of the various dependencies. If you are on Ubuntu, this command should cover the most frequently used third-party packages: sudo apt-get install build-essential pkg-config python-dev libpng-dev libjpeg-dev libtiff-dev zlib1g-dev libssl-dev libx11-dev libgl1-mesa-dev libxrandr-dev libxxf86dga-dev libxcursor-dev bison flex libfreetype6-dev libvorbis-dev libeigen3-dev libopenal-dev libode-dev libbullet-dev nvidia-cg-toolkit libgtk2.0-dev Once Panda3D has built, you can either install the .deb or .rpm package that it produced, depending on which Linux distribution you are using. For example, to install the package on Debian or Ubuntu, use this: sudo dpkg -i panda3d*.deb If you are not using a Linux distribution that supports .deb or .rpm packages, you may have to use the installpanda.py script instead, which will directly copy the files into the appropriate locations on your computer. You may have to run the ldconfig tool in order to update your library cache after installing Panda3D. Mac OS X On Mac OS X, you will need to download a set of precompiled thirdparty packages in order to compile Panda3D, which can be acquired from here. After placing the thirdparty directory inside the panda3d source directory, you may build Panda3D using a command like the following: python makepanda/makepanda.py --everything --installer In order to make a universal build, pass the --universal flag. You may also target a specific minimum Mac OS X version using the --osxtarget flag followed by the release number, eg. 10.6 or 10.7. If the build was successful, makepanda will have generated a .dmg file in the source directory containing the installer. Simply open it and run the package file in order to install the SDK onto your system. Reporting Issues If you encounter any bugs when using Panda3D, please report them in the bug tracker. This is hosted at: https://bugs.launchpad.net/panda3d Make sure to first use the search function to see if the bug has already been reported. When filling out a bug report, make sure that you include as much information as possible to help the developers track down the issue, such as your version of Panda3D, operating system, architecture, and any code and models that are necessary for the developers to reproduce the issue. If you're not sure whether you've encountered a bug, feel free to ask about it in the forums or the IRC channel first. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/panda3d/panda3d"	"A game engine, a framework for 3D rendering and game development for Python and C++ programs. [Modified BSD]"	"true"
"Game Engine"	"website"	"https://www.panda3d.org/"	"A game engine, a framework for 3D rendering and game development for Python and C++ programs. [Modified BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A game engine, a framework for 3D rendering and game development for Python and C++ programs. [Modified BSD]"	"false"
"Game Engine"	"Polycode"	"https://github.com/ivansafrin/Polycode"	"A cross-platform framework for creative code in C++ (with Lua bindings). [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2276"	"236"	"370"	"GitHub - ivansafrin/Polycode: Polycode is a cross-platform framework for creative code. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 236 Star 2,276 Fork 370 ivansafrin/Polycode Code Issues 169 Pull requests 23 Wiki Pulse Graphs Polycode is a cross-platform framework for creative code. http://polycode.org 1,694 commits 7 branches 1 release 34 contributors C++ 68.3% C 21.0% Python 4.8% CMake 2.9% Objective-C++ 1.1% GLSL 0.8% Other 1.1% C++ C Python CMake Objective-C++ GLSL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages goodbye_cmake master meshrewrite new_renderer screenrewrite spriterewrite Nothing to show 0.8.4 Nothing to show New pull request Latest commit 37a40fe Sep 23, 2015 ivansafrin Bugfixes across the codebase, fixed numerous memory leaks, SceneEntit… … …yInstances can now load assets into a resource pool explicitly, which can then be unloaded to remove all traces of loaded resources for an entity instance Permalink Failed to load latest commit information. Assets Fixed physics entity transforms not being set correctly Sep 21, 2015 Bindings Fixed up 3d physics constraints, added point2point constraint Jun 21, 2015 CMake Fix freetype on win. Jun 24, 2015 Core/Contents Bugfixes across the codebase, fixed numerous memory leaks, SceneEntit… Sep 23, 2015 Dependencies Switched polybuild to use libarchive instead of minizip in order to (… May 5, 2014 Documentation Fix Documentation being broken by some too new options not supported by Jan 7, 2015 Examples Fix freetype on win. Jun 24, 2015 IDE Bugfixes across the codebase, fixed numerous memory leaks, SceneEntit… Sep 23, 2015 Modules Fixed physics entity transforms not being set correctly Sep 21, 2015 Player Fix freetype on Linux Jun 24, 2015 Standalone Fix UIThemes.pak to be copied along with the Player on Linux and Wind… Jun 13, 2015 Tools Meshes now use direct arrays for vertex information storage making re… Aug 27, 2014 .gitignore WGL extensions now properly intialized. Antialiasing now works on Win… Mar 26, 2015 .travis.yml More travis stuff Jun 22, 2015 BUILD.md Build instructions more concise Jun 15, 2014 BuildLinux.sh Fixed Linux build script Feb 25, 2014 BuildMac.sh Clarified on how to use the py-ply dep for builds using macports. Jun 24, 2015 CMakeLists.txt Fix UIThemes.pak to be copied along with the Player on Linux and Wind… Jun 13, 2015 LICENSE.txt Updated license year Mar 30, 2014 README.md Made readme markdown Jun 22, 2015 Toolchain-mingw32.cmake Replaced path on my system with placeholder path in toolchain file. Jul 29, 2013 setup-travis.sh Added more travis config stuff Jun 22, 2015 README.md Polycode is a cross-platform framework for creative code. You can use it as a C++ API or as a standalone scripting language to get easy and simple access to accelerated 2D and 3D graphics, hardware shaders, sound and network programming, physics engines and more. The core Polycode API is written in C++ and can be used to create portable native applications. On top of the core C++ API, Polycode offers a Lua-based scripting system with its own set of compilation tools. The Lua API mirrors the C++ API and can be used to easily create prototypes and even publish complete applications to multiple platforms without compiling C++. Polycode is available under the MIT license and was designed and developed by Ivan Safrin. Please see BUILD.md for instructions on how to build Polycode from source. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ivansafrin/Polycode"	"A cross-platform framework for creative code in C++ (with Lua bindings). [MIT]"	"true"
"Game Engine"	"website"	"http://polycode.org/"	"A cross-platform framework for creative code in C++ (with Lua bindings). [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2276"	"236"	"370"	"GitHub - ivansafrin/Polycode: Polycode is a cross-platform framework for creative code. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 236 Star 2,276 Fork 370 ivansafrin/Polycode Code Issues 169 Pull requests 23 Wiki Pulse Graphs Polycode is a cross-platform framework for creative code. http://polycode.org 1,694 commits 7 branches 1 release 34 contributors C++ 68.3% C 21.0% Python 4.8% CMake 2.9% Objective-C++ 1.1% GLSL 0.8% Other 1.1% C++ C Python CMake Objective-C++ GLSL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages goodbye_cmake master meshrewrite new_renderer screenrewrite spriterewrite Nothing to show 0.8.4 Nothing to show New pull request Latest commit 37a40fe Sep 23, 2015 ivansafrin Bugfixes across the codebase, fixed numerous memory leaks, SceneEntit… … …yInstances can now load assets into a resource pool explicitly, which can then be unloaded to remove all traces of loaded resources for an entity instance Permalink Failed to load latest commit information. Assets Fixed physics entity transforms not being set correctly Sep 21, 2015 Bindings Fixed up 3d physics constraints, added point2point constraint Jun 21, 2015 CMake Fix freetype on win. Jun 24, 2015 Core/Contents Bugfixes across the codebase, fixed numerous memory leaks, SceneEntit… Sep 23, 2015 Dependencies Switched polybuild to use libarchive instead of minizip in order to (… May 5, 2014 Documentation Fix Documentation being broken by some too new options not supported by Jan 7, 2015 Examples Fix freetype on win. Jun 24, 2015 IDE Bugfixes across the codebase, fixed numerous memory leaks, SceneEntit… Sep 23, 2015 Modules Fixed physics entity transforms not being set correctly Sep 21, 2015 Player Fix freetype on Linux Jun 24, 2015 Standalone Fix UIThemes.pak to be copied along with the Player on Linux and Wind… Jun 13, 2015 Tools Meshes now use direct arrays for vertex information storage making re… Aug 27, 2014 .gitignore WGL extensions now properly intialized. Antialiasing now works on Win… Mar 26, 2015 .travis.yml More travis stuff Jun 22, 2015 BUILD.md Build instructions more concise Jun 15, 2014 BuildLinux.sh Fixed Linux build script Feb 25, 2014 BuildMac.sh Clarified on how to use the py-ply dep for builds using macports. Jun 24, 2015 CMakeLists.txt Fix UIThemes.pak to be copied along with the Player on Linux and Wind… Jun 13, 2015 LICENSE.txt Updated license year Mar 30, 2014 README.md Made readme markdown Jun 22, 2015 Toolchain-mingw32.cmake Replaced path on my system with placeholder path in toolchain file. Jul 29, 2013 setup-travis.sh Added more travis config stuff Jun 22, 2015 README.md Polycode is a cross-platform framework for creative code. You can use it as a C++ API or as a standalone scripting language to get easy and simple access to accelerated 2D and 3D graphics, hardware shaders, sound and network programming, physics engines and more. The core Polycode API is written in C++ and can be used to create portable native applications. On top of the core C++ API, Polycode offers a Lua-based scripting system with its own set of compilation tools. The Lua API mirrors the C++ API and can be used to easily create prototypes and even publish complete applications to multiple platforms without compiling C++. Polycode is available under the MIT license and was designed and developed by Ivan Safrin. Please see BUILD.md for instructions on how to build Polycode from source. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ivansafrin/Polycode"	"A cross-platform framework for creative code in C++ (with Lua bindings). [MIT]"	"true"
"Game Engine"	"Torque2D"	"https://github.com/GarageGames/Torque2D"	"An open-source and cross-platform C++ engine built for 2D game development. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1117"	"269"	"1328"	"GitHub - GarageGames/Torque2D: MIT Licensed Open Source version of Torque 2D game engine from GarageGames Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 269 Star 1,117 Fork 1,328 GarageGames/Torque2D Code Issues 26 Pull requests 1 Wiki Pulse Graphs MIT Licensed Open Source version of Torque 2D game engine from GarageGames 877 commits 3 branches 5 releases 24 contributors C++ 75.3% C 10.8% Objective-C++ 3.9% C# 3.0% HTML 1.9% Shell 1.8% Other 3.3% C++ C Objective-C++ C# HTML Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags development gh-pages master Nothing to show 3.3 3.2 3.1 3.0 2.0 Nothing to show New pull request Latest commit 55efccc Apr 8, 2016 greenfire27 Merge pull request #340 from GarageGames/development … Update version.h Permalink Failed to load latest commit information. engine Update version.h Apr 8, 2016 modules TextSprite Complete! Feb 25, 2016 tools Updated Config Files for Doxygen Dec 25, 2015 tutorials/fishTutorialBase Minor cleanup of doxygen files Feb 9, 2014 .gitattributes First attempt at adding a gitattributes file Oct 27, 2015 .gitignore Debug from VisualStudio Fix Dec 23, 2015 LICENSE.md License Added to ReadMe and in a License File Dec 23, 2015 Leap.dll Attempted merge of Leap motion and current development. Windows suppo… Jan 15, 2014 Leapd.dll Attempted merge of Leap motion and current development. Windows suppo… Jan 15, 2014 OpenAL32.dll - First push of Torque 2D 2.0 (MIT) Feb 5, 2013 README.md Updated the Readme to 3.3 Apr 3, 2016 cleandso.bat - First push of Torque 2D 2.0 (MIT) Feb 5, 2013 main.cs Debug from VisualStudio Fix Dec 23, 2015 main.runAllUnitTests.cs - First push of Torque 2D 2.0 (MIT) Feb 5, 2013 sandbox.torsion - First push of Torque 2D 2.0 (MIT) Feb 5, 2013 README.md Torque 2D 3.3 MIT Licensed Open Source version of Torque 2D from GarageGames. Maintained by the T2D Steering Committee and contributions from the community. Dedicated to 2D game development, Torque 2D is an extremely powerful, flexible, and fast C++ engine which has been used in hundreds of professional games. It is a true cross platform solution providing you access to Windows, OSX, Linux, iOS, Android, and the web - all from one codebase. It includes an OpenGL batched rendering system, Box2D physics, OpenAL audio, skeletal and spritesheet animation, automated asset management, a modular project structure, TAML object persistence, and a C-like scripting language. Branches Here is an overview of the branches found in the Torque 2D repository: master: this branch contains the current stable release code that can be used in a production environment. development: this branch is dedicated to active development. It contains the latest bug fixes, new features, and other updates. All pull requests need to go to the development branch. While we try our best to test all incoming changes, it is possible for mistakes to slip in therefore this branch should always be considered unstable. gh-pages: this branch currently contains the html pages generated from doxygen for the engine and TorqueScript references. Precompiled Version If you do not wish to compile the source code yourself, precompiled binary files for Windows and OSX are available from the Torque 2D Release Page. Building the Source After downloading a copy of the source code, the following project files for each platform are provided for you and can be found in the engine/compilers folder. Windows: Visual Studio 2013 or 2015 (works with the free, ""Express for Windows Desktop"" version) OSX: Xcode Linux: Make iOS: Xcode_iOS Android: Eclipse or Android Studio Web: Emscripten/Cmake See the wiki for available guides on platform setup and development. Batteries Included Running Torque 2D for the first time out of the box will start you off in the Sandbox. The Sandbox is a collection of over 30 simple ""toys"" (or modules) which demonstrate various features in T2D. The default toy is a side scrolling level with a monster truck. To see a list of the available modules/toys to choose from, click on the Show Tools button in the lower right corner of the screen. Naturally all of the script code and assets for each toy are available to you in the modules folder to use as practical examples while learning T2D. The Sandbox is also an excellent framework for rapidly prototyping your own game ideas - it allows for easy integration of additional modules and provides numerous debugging features, like console access and real-time metrics. Documentation All documentation for the open source version of Torque 2D can be found on our Github wiki page. It contains many tutorials, detailed technical information on engine systems, a script reference guide automatically generated from the source code, and articles on how to contribute to our open source development. Community Don't go it alone! Join the active community around Torque 2D at GarageGames.com. Ask questions, talk about T2D and general game development topics, learn the latest news, or post a blog promoting your game or showing off additional engine features in your T2D fork. Torque 2D Beginner Forum Torque 2D Professional Forum GarageGames Community Blogs License Copyright (c) 2012 GarageGames, LLC Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GarageGames/Torque2D"	"An open-source and cross-platform C++ engine built for 2D game development. [MIT]"	"true"
"Game Engine"	"website"	"https://www.garagegames.com/products/torque-2d"	"An open-source and cross-platform C++ engine built for 2D game development. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GarageGames · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization GarageGames Las Vegas,NV http://www.garagegames.com Repositories People 2 Filters Sources Forks C++ 2,385 1,104 Torque3D MIT Licensed Open Source version of Torque 3D from GarageGames Updated Jul 15, 2016 C++ 1,117 1,329 Torque2D MIT Licensed Open Source version of Torque 2D game engine from GarageGames Updated Jul 5, 2016 3 1 Qt Repo for our Qt source Updated Feb 12, 2016 ActionScript 2 2 DevProGameStack DevPro Game Snap - Building games can be a snap! Updated Aug 26, 2015 C++ 60 79 Torque3D-ProjectManager MIT Licensed Open Source version of the Torque 3D Project Manager from GarageGames Updated Jun 24, 2015 C++ 1 0 3SS Updated Mar 4, 2015 C# 0 0 ScratchGame Updated Feb 11, 2015 JavaScript 0 0 Bitcoin Distributed Bitcoin Mining project Updated Jun 14, 2014 2 8 Torque3D-Wiki Updated Jun 8, 2014 C# 0 0 ContentPacks Deployment repo of final versions of GG content packs to be package by build server for publishing Updated Oct 22, 2013 2 People DavidWyand-GG David Wyand ScottBurns-GG Scott Burns Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GarageGames/"	"An open-source and cross-platform C++ engine built for 2D game development. [MIT]"	"true"
"Game Engine"	"Torque3D"	"https://github.com/GarageGames/Torque3D"	"An open-source C++ engine built for 3D game development. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2385"	"183"	"1104"	"GitHub - GarageGames/Torque3D: MIT Licensed Open Source version of Torque 3D from GarageGames Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 183 Star 2,385 Fork 1,104 GarageGames/Torque3D Code Issues 231 Pull requests 47 Wiki Pulse Graphs MIT Licensed Open Source version of Torque 3D from GarageGames http://torque3d.org 2,315 commits 4 branches 17 releases Fetching contributors C++ 48.6% C 35.3% C# 6.3% HTML 1.6% NSIS 1.6% HLSL 1.2% Other 5.4% C++ C C# HTML NSIS HLSL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags development gh-pages linux-rnd master Nothing to show v3.8 v3.8-rc v3.7 v3.7-rc v3.6.3 v3.6.2 v3.6.1 v3.6 v3.5.1 v3.5 v3.0 v2.0 v1.1 v1 3.9 3.9-rc2 3.9-rc Nothing to show New pull request Latest commit 5fa8504 Jul 11, 2016 Areloch committed on GitHub Merge pull request #1685 from Areloch/maxRainDropBatch … Precipitation maxVBDrops correction. Permalink Failed to load latest commit information. Engine Properly initiates the max number of drops per batch to avoid possibl… Jul 11, 2016 My Projects changed readme Mar 19, 2014 Templates more case sensitivity corrections. Jul 9, 2016 Tools Resolves merging-order conflicts for the vehicle physics PR, as well … Jun 5, 2016 .gitattributes Update gitattributes with some text files for avoid EOF problems with… Jan 30, 2015 .gitignore improved gitignore for VS2012 Mar 14, 2014 CMakeLists.txt overrides the default CMAKE_INSTALL_PREFIX Jul 22, 2015 CONTRIBUTING.md Mention code style guidelines. Nov 2, 2014 README.md Added one more link to the readme. Jun 24, 2015 allProjects.txt Update allProjects.txt May 8, 2013 generateAllProjects.bat Top level files for ticket #1 Sep 19, 2012 projects.xml Direct3D11 CMake and Project Generator files. Mar 20, 2016 README.md Torque 3D MIT Licensed Open Source version of Torque 3D from GarageGames More Information Homepage Torque 3D wiki Community forum GarageGames forum GarageGames professional services Pre-compiled Version In addition to GitHub we also have a couple of pre-packaged files for you to download if you would prefer to not compile the code yourself. They are available from the downloads page on the wiki. Related repositories Torque 3D main repository (you are here!) Project Manager repository Offline documentation repository License Copyright (c) 2012 GarageGames, LLC  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GarageGames/Torque3D"	"An open-source C++ engine built for 3D game development. [MIT]"	"true"
"Game Engine"	"website"	"https://www.garagegames.com/products/torque-3d"	"An open-source C++ engine built for 3D game development. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2385"	"183"	"1104"	"GitHub - GarageGames/Torque3D: MIT Licensed Open Source version of Torque 3D from GarageGames Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 183 Star 2,385 Fork 1,104 GarageGames/Torque3D Code Issues 231 Pull requests 47 Wiki Pulse Graphs MIT Licensed Open Source version of Torque 3D from GarageGames http://torque3d.org 2,315 commits 4 branches 17 releases Fetching contributors C++ 48.6% C 35.3% C# 6.3% HTML 1.6% NSIS 1.6% HLSL 1.2% Other 5.4% C++ C C# HTML NSIS HLSL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags development gh-pages linux-rnd master Nothing to show v3.8 v3.8-rc v3.7 v3.7-rc v3.6.3 v3.6.2 v3.6.1 v3.6 v3.5.1 v3.5 v3.0 v2.0 v1.1 v1 3.9 3.9-rc2 3.9-rc Nothing to show New pull request Latest commit 5fa8504 Jul 11, 2016 Areloch committed on GitHub Merge pull request #1685 from Areloch/maxRainDropBatch … Precipitation maxVBDrops correction. Permalink Failed to load latest commit information. Engine Properly initiates the max number of drops per batch to avoid possibl… Jul 11, 2016 My Projects changed readme Mar 19, 2014 Templates more case sensitivity corrections. Jul 9, 2016 Tools Resolves merging-order conflicts for the vehicle physics PR, as well … Jun 5, 2016 .gitattributes Update gitattributes with some text files for avoid EOF problems with… Jan 30, 2015 .gitignore improved gitignore for VS2012 Mar 14, 2014 CMakeLists.txt overrides the default CMAKE_INSTALL_PREFIX Jul 22, 2015 CONTRIBUTING.md Mention code style guidelines. Nov 2, 2014 README.md Added one more link to the readme. Jun 24, 2015 allProjects.txt Update allProjects.txt May 8, 2013 generateAllProjects.bat Top level files for ticket #1 Sep 19, 2012 projects.xml Direct3D11 CMake and Project Generator files. Mar 20, 2016 README.md Torque 3D MIT Licensed Open Source version of Torque 3D from GarageGames More Information Homepage Torque 3D wiki Community forum GarageGames forum GarageGames professional services Pre-compiled Version In addition to GitHub we also have a couple of pre-packaged files for you to download if you would prefer to not compile the code yourself. They are available from the downloads page on the wiki. Related repositories Torque 3D main repository (you are here!) Project Manager repository Offline documentation repository License Copyright (c) 2012 GarageGames, LLC  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GarageGames/Torque3D"	"An open-source C++ engine built for 3D game development. [MIT]"	"true"
"GUI"	"CEGUI"	"http://cegui.org.uk/"	"Flexible, cross-platform GUI library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"News | CEGUI Jump to navigation News Getting Started Features Downloads Skins Documentation Magic Paid Support Home Quick Links Repository Documentation Forum Wiki Issue tracking Twitter Donate Latest releases Stable CEGUI 0.8.7 CEED 0.8.0 Unstable CEGUI default branch CEED snapshot11 See all releases User login Username * Password * Request new password News CEGUI 0.8.7 Submitted by Lukas_M on 28th Apr. 2016 Patch release from v0-8 branch - It contains many minor fixes and changes. You can use the following links: Source Package Downloads: Source code packaged a a .zip file Source code packaged as a .tar.bz2 file Documentation Downloads: Documentation packaged as a .zip file Dependencies (Windows / Apple OS X Only): http://prdownloads.sourceforge.net/crayzedsgui/cegui-deps-0.8.x-src.zip?download Or click here for the online version of the docs State:  Stable Branch:  0.8 Changelog:  Release 0.8.7 (taken from bitbucket issue-tracker, with the respective milestone. To read the full issue go to https://bitbucket.org/cegui/cegui/issue/ ""Issue tracker"" and append the ID - e.g. https://bitbucket.org/cegui/cegui/issue/998 #1123: Library soname was changed from 2 to 1 in 0.8.6 . This is important to all packagers - The 0.8.6 release should be ignored, use 0.8.7 instead. Category:  CEGUI CEGUI 0.8.6 Submitted by Lukas_M on 23rd Apr. 2016 Patch release from v0-8 branch - It contains many minor fixes and changes. You can use the following links: Source Package Downloads: Source code packaged a a .zip file Source code packaged as a .tar.bz2 file Documentation Downloads: Documentation packaged as a .zip file Dependencies (Windows / Apple OS X Only): http://prdownloads.sourceforge.net/crayzedsgui/cegui-deps-0.8.x-src.zip?... Or click here for the online version of the docs State:  Stable Branch:  0.8 Changelog:  Release 0.8.6 (taken from bitbucket issue-tracker, with the respective milestone. To read the full issue go to https://bitbucket.org/cegui/cegui/issue/ ""Issue tracker"" and append the ID - e.g. https://bitbucket.org/cegui/cegui/issue/998 #1120: Bug regarding order of destruction : Element object referenced by '__auto_titlebar__' is not attached to Element at (...)  #1111: Add official support for MinGW (32 and 64 bit targets)  Child removal (e.g. on destruction) always triggered a deactivation event due to a change in a fix for 0.8.5, now the deactivation event is only triggered when the element was actually active. Category:  CEGUI CEGUI 0.8.5 Submitted by Kulik on 12th Mar. 2016 Patch release from v0-8 branch - It contains many minor fixes and changes. You can use the following links: Source Package Downloads: Source code packaged a a .zip file Source code packaged as a .tar.bz2 file Documentation Downloads: Documentation packaged as a .zip file Dependencies (Windows / Apple OS X Only): http://prdownloads.sourceforge.net/crayzedsgui/cegui-deps-0.8.x-src.zip?... Or click here for the online version of the docs State:  Stable Branch:  0.8 Changelog:  Release 0.8.5 (taken from bitbucket issue-tracker, milestone 0.8.5. To read the full issue go to https://bitbucket.org/cegui/cegui/issue and append the ID - e.g. https://bitbucket.org/cegui/cegui/issue/998     Some changes around the Cmake for the OgreRenderer were done, both fixes and enhancements     #998: SimpleTimer.cpp includes headers into namespace     #1019: Docu lacks info on deinitialisation of CEGUI     #1034: Doxygen docs use GIF images     #1063: OpenGLRenderer on Linux renders CEGUI samples upside-down     #1065: The 0.7->0.8 porting tips should either be added to the API Docu or referenced from there     #1072: Docu: Replace CEGUIFalagardWRBase with CEGUICoreWindowRendererSet in Docu     #1076: TabControl XML printing prints children twice     #1077: ComboDropList output to XML shows RestoreOldCapture for Scrollbar's autowindow children     #1078: Properties that are forwarded via PropertyLinkDefinitions are printed to XML     #1079: Tooltips behave glitchy, take away focus from underlying windows, affect move-events     #1080: Tooltips are wrongly printed to XML, inheritance affects the printing and uses wrong values     #1081: Numerous windows XML-print some redundant (because forwarded) AutoWindow properties     #1082: Scrollable panes print their children inside their autowindow instead of directly inside them     #1087: StaticText uses incorrect Font when DefaultFont of a GUIContext is changed     #1097: Window font ignored in RenderStringTextComponents     #1104: Issue an exception if the locale is unexpected, before parsing anything with sscanf     #1110: Support building CEGUI and its deps on Windows with MSVC for 64-bit. Category:  CEGUI Current CEGUI developments and future plans Submitted by Lukas_M on 9th Sep. 2015 We are currently working on improving CEGUI 1.0 (current default branch) to bring CEGUI to the next level by upgrading core code using C++11 features, by improving the API design for easier and more inituitive use, by resolving naming issues and by adding features that will make everyday CEGUI usage easier. We will also in time improve the official API docu, which we consider crucial for the Release of 1.0. To summarise our current developments and goals for 1.0: Text rendering is currently slow due to Renderer changes, we will fix this soon and potentially also improve how Font will be rendered in general, by considering Kerning and thus improving the look/readability. We already replaced some containers using the new unordered containers of C++11 and replaced output/input int types using std::int8_t etc. We will continue adding C++11 features such as move-constructors, std::array, std::copy (removing memcpy), simplify loops, potentially use std::thread and are already in the process of doing so. We will replace sscanf and printf using sstream, to make CEGUI ready for multi-threading and protect it from changes to the global locale, which can occur from other libraries or user-code. We already finished this process for the PropertyHelper class. A Vulkan Renderer will be added once Vulkan drivers are available All CEGUI containers, which allow adding widgets as items, will be adapted so that they can be filled using layout XML files as well as via code. Currently filling them in layout files is not possible for all widgets, which is a big mistake in my opinion Let's also not forget that 1.0 already contains a lot of new features such as: a new input handling based on semantics making it suited for different input devices, loading/rendering simpel SVGs and creating custom vector graphics in runtime as CEGUI Image, new MVC pattern for container widgets, etc etc etc We are also working to solve the open tickets on our bug tracker, feel free to check them out if you want to know more about upcoming changes. Version 0.8.X has also not been forgotten. We work on bug fixes and ABI-compatible new features there. A new Release is planned and contains a lot of fixes we have applied in the past year. Unfortunately, a smaller release-blocker is keeping us from releasing it currently, but progress on resolving it has already been made. We will release the new version as soon as we have solved all blockers! CEGUI tutorial videos by MakingGamesWithBen Submitted by Lukas_M on 30th Jul. 2015 The channel MakingGamesWithBen on youtube recently posted this awesome guide on how to install/build CMake and go through the entire build process on Windows. Every CEGUI that every beginner should watch this video! I also just added this video to the Getting Started section with some extra information - check it out. And don't forget to follow Ben's future videos, it seems like he got more interesting videos coming up on CEGUI! Edit: A new video has been published. This one gives you a good introduction to the integration of CEGUI into your project, the resource initialisation and basic rendering. Edit2: And another helpful video by Ben: This one shows how to set up SDL input injection for CEGUI and talks about bit shifting and UTF Strings. In this context I would like to remind users to look at the CEGUI application templates (news here), which also deals with input injections, updates etc (SDL2 and GLFW currently only): CEGUI (0.8.5) will have new OpenGL ES 2 Renderer: Support for OpenGL ES 2.X and OpenGL ES 3.X and Epoxy (alternatively to GLEW)! Submitted by Lukas_M on 27th Jul. 2015 User Yaron Cohen-Tal provided us with a new contribution (PR link here) adding OpenGL ES 2 and OpenGL ES 3 support via a new Renderer (OpenGL ES Renderer). This is a good base for Android, iOS, etc support! But this is not all: The SampleBrowser now also supports GLFW3 and Epoxy can be used instead of GLEW for the GL extensions. The changes are merged into our v0-8 stable branch (link here) and are undergoing further testing. Feel free to try it out by cloning the branch or pulling the latest changes and report to us about it on our forum/IRC. We would like to hear about any issues you have with it, or any improvements you want to suggest or also feel free to just tell us if it worked nicely for you! The changes will be present in the upcoming 0.8.5 Release. CEGUI samples running in your web browser (javascript based)! Submitted by Lukas_M on 10th Jul. 2015 User ""iceiceice"" took the CEGUI library and the Samples using OpenGL3 Core Profile Renderer and ported them to OpenGL ES2. This way he could use them with emscripten, making it possible to run CEGUI in your browser. More Info here: http://cegui.org.uk/forum/viewtopic.php?f=4&t=7065 This is the link to the result: http://cbeck88.github.io/cegui-emscripten Try it out, it works really well! Gallery:  Application Templates added Submitted by Lukas_M on 3rd Jun. 2015 We got a new user contribution from lucebac that just got merged into CEGUI's v0-8 branch yesterday, which will be part of our next CEGUI Release (0.8.5). He provided what we decided to name ""application templates"". The currently present application templates (based on GLFW and SDL2) are buildable using CMake for your OS and IDE of choice, just like the rest of CEGUI. The templates are small stand-alone minimal applications that use CEGUI. They serve as a great starting point for creating your own application using CEGUI or might be used as quick guidance to integrate CEGUI into an existing program. Up to now we only had the SampleBrowser, which in itself is great for showing off samples (Be sure to check out the well-documented code of the samples to learn CEGUI) and for us to quickly test if features still work, but was not a good starting point to setting up your own CEGUI application or for explaining how CEGUI is set up. We suggest beginners to most of all, read the API docs, then to look at all samples in the SampleBrowser that are relevant to them and finally to grab the application template and see how it works. In the future we would like to add support for more window creation systems for the application template, and maybe also a Ogre and Irrlicht based application template. User contributions are very welcome (https://bitbucket.org/cegui/cegui) Also I want to remind all our users of our Ticket Issue system on bitbucket: https://bitbucket.org/cegui/cegui/issues I was made aware recently that there are some issues that do not get reported on our forum or issue tracker by users. It is very important for us that unreported issues get reported on our issue tracker (or at least on our forum). Use the search function to look for reported issues. If the issue was already reported you may also additionally comment on it or add your vote for it, which will raise awareness. We definitely pay more attention to issues (and also suggested features) with more votes, since this shows they are likely to be relevant to more people. Discuss the news here CEGUI on Open HUB Submitted by Lukas_M on 4th Mar. 2015 For those who haven't visited it yet, check out CEGUI on Open HUB: https://www.openhub.net/p/CEGUI It contains interesting information about the CEGUI project, its commits, contributors and a lot of statistics. Gallery:  CEGUI (as part of Worldforge) was not accepted for GSoC2015 Submitted by Lukas_M on 2nd Mar. 2015 Unfortunately we were not accepted for Google Summer of Code 2015. We had 3 successful years of participation, with a 100% completion rate and we are very thankful for that. Ogre3D was neither accepted this year nor last year. Mozilla also apparently didn't make it. It seems that a lot less organisations were accepted this year (2015) compared to 2014. The accepted organisations can be seen here: http://www.google-melange.com/gsoc/org/list/public/google/gsoc2015 Pages 1 2 3 4 5 6 7 8 9 next › last » © 2004 - 2015 Paul D Turner & The CEGUI Development Team"	"null"	"null"	"Flexible, cross-platform GUI library."	"true"
"GUI"	"FLTK"	"http://www.fltk.org/index.php"	"Fast, light, cross-platform C++ GUI toolkit. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Fast Light Toolkit - Fast Light Toolkit (FLTK) Fast Light Toolkit      FLTK Apps      FLTK Library      Forums      Links     Login  [  Home  |  Articles & FAQs  |  Bugs & Features  |  Documentation  |  Download  |  Screenshots  ]   Quick Info   Stable Release: v1.3.3 Stable Release Info: View Snapshots: v1.3.x-r11808 Developer Roadmap: View FLTK (pronounced ""fulltick"") is a cross-platform C++ GUI toolkit for UNIX®/Linux® (X11), Microsoft® Windows®, and MacOS® X. FLTK provides modern GUI functionality without the bloat and supports 3D graphics via OpenGL® and its built-in GLUT emulation. FLTK is designed to be small and modular enough to be statically linked, but works fine as a shared library. FLTK also includes an excellent UI builder called FLUID that can be used to create applications in minutes. FLTK is provided under the terms of the GNU Library Public License, Version 2 with exceptions that allow for static linking.     Current Poll [ Show All ]   The FLTK website was designed with speed in mind. The design as a result is very minimal. Should we change fltk.org? Please write your suggestions into the comments section. (please pick one) I love the site the way it is it only needs a different color scheme it needs a redesign, but minimalistic is good the FLTK site needs a complete redesign - please hire an artist [ Results ] (11531 votes, 18 comments)     Top 10 Links [ Show All ]   XLView 1.0.0     FL-Essentials 1.0.0     Ultimate Tic-Tac-Toe 1.0     The Larch 1.0 (beta)     System Information Retriever 1.0.4     fpwdman 1.0.6     Fl_Firmata 1     AIM-UC 1.4     flsane 0.1.0     XMolView (alpha 16.04)          ** NOTE ** Back in April 2013 we had to move the fltk.general and fltk.developer lists to google groups. Please join us there to reconnect. All postings from today on back through 2004 are available on the fltk Forums page. Recent Articles [ Show All ] FLTK 1.3.x Weekly Snapshot, r11808 03:00 Jul 15, 2016 by mike, 0 comments A new weekly snapshot of FLTK 1.3.x (r11808) is now available. [ Read ] FLTK 1.3.x Weekly Snapshot, r11800 03:00 Jul 01, 2016 by mike, 0 comments A new weekly snapshot of FLTK 1.3.x (r11800) is now available. [ Read ] FLTK 1.3.x Weekly Snapshot, r11798 03:00 Jun 24, 2016 by mike, 0 comments A new weekly snapshot of FLTK 1.3.x (r11798) is now available. [ Read ] What are the Versions of FLTK? 11:13 Jun 21, 2016 by engelsman, 0 comments There is a lot of confusion, especially for people who are new to FLTK, about the different versions that are available, what they offer, and when they will be released. This article attempts to clarify matters. [ Read ] FLTK 1.3.x Weekly Snapshot, r11784 03:00 Jun 17, 2016 by mike, 0 comments A new weekly snapshot of FLTK 1.3.x (r11784) is now available. [ Read ] FLTK 1.3.x Weekly Snapshot, r11771 03:00 Jun 10, 2016 by mike, 0 comments A new weekly snapshot of FLTK 1.3.x (r11771) is now available. [ Read ] [ RSS Feed ]     Comments are owned by the poster. All other content is copyright 1998-2015 by Bill Spitzak and others. This project is hosted by Seriss Corporation. Please report site problems to 'erco@seriss.com'.  "	"null"	"null"	"Fast, light, cross-platform C++ GUI toolkit. [GPL2]"	"true"
"GUI"	"GacUI"	"https://github.com/vczh-libraries/GacUI"	"GPU Accelerated C++ User Interface, with WYSIWYG developing tools, XML supports, built-in data binding and MVVM features. [Ms-PL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"503"	"110"	"139"	"GitHub - vczh-libraries/GacUI: GPU Accelerated C++ User Interface, with WYSIWYG developing tools, XML supports, built-in data binding and MVVM features. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 110 Star 503 Fork 139 vczh-libraries/GacUI Code Issues 4 Pull requests 0 Pulse Graphs GPU Accelerated C++ User Interface, with WYSIWYG developing tools, XML supports, built-in data binding and MVVM features. 448 commits 1 branch 0 releases Fetching contributors C++ 99.5% Other 0.5% C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 62b0af6 Jul 13, 2016 vczh Update release Permalink Failed to load latest commit information. Document ... Mar 27, 2016 Import ... Apr 10, 2016 Release Update release Jul 13, 2016 Source Update release Jul 13, 2016 Test ... Jul 13, 2016 Tools ... Apr 30, 2016 .gitattributes GacUISrc solution for developing GacUI source code Apr 1, 2015 .gitignore <ref.Component> and <ref.Event> Apr 26, 2016 License.txt GacUI source code Apr 1, 2015 README.md Update Readme.md Dec 21, 2015 README.md GacUI GPU Accelerated C++ User Interface, with WYSIWYG developing tools, XML supports, built-in data binding and MVVM features. New website: http://www.gaclib.net https://vczh-libraries.github.io This website is under construction, but it is somehow useable now. The old one (http://gaclib.net) is deprecated. After the new website is finished, I will update all domains to the new website. The Tutorial section tells you how to begin using this marvelous GUI library. The DEMOES section show you all demos using this GUI library. The DOCUMENT section show you all simple documentation organized by C++ classes and functions. Notice The release of the GacUI project is put in vczh-libraries/Release. This GacUI repo is for development only. Don't download the code from here to use, because in most of the time it does not run. Using this library requires you to use C++ source files directly in The Release folder for Vlpp, Workflow or GacUI. The GacGen.exe if you prefer to use XML to build your UI. All other files are for librari development only. Content This GUI library provides the following features: Develop your GUI using pure C++, Workflow script, XML or even JavaScript (under construction) Cross-platform abilities. for Windows: Just use the code here for Linux: https://github.com/vczh-libraries/XGac for OSX: https://github.com/vczh-libraries/iGac for running in Browser!: https://github.com/vczh-libraries/GacJS (under construction) Rich control library. Container controls supports MVC and virtual list mode. Control template system. You can write your own GPU acceleration. XML resource supports. You can use the provided GacGen.exe to generate multiple XML files with binary resources (images) into a compressed binary format. This program will also generate C++ code behind for you. You can fill event handlers (but we suggest you use MVVM and Data Binding instead) in generated C++ files. If you update your UI, GacGen.exe will merge your modification in C++ code and modification in XML together to generate new C++ code behind. Your update will still exist. MVVM and Data Binding. You can define interfaces that required to build your own MVVM pattern in XML and GacGen.exe will generate the C++ interface declaration for you. You can also use Workflow expressions in Data Binding and statements in event handlers (instead of writing C++ code in code behind). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vczh-libraries/GacUI"	"GPU Accelerated C++ User Interface, with WYSIWYG developing tools, XML supports, built-in data binding and MVVM features. [Ms-PL]"	"true"
"GUI"	"GTK+"	"http://www.gtk.org/"	"A multi-platform toolkit for creating graphical user interfaces. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The GTK+ Project The GTK+ Project About Features Download Screenshots Documentation Development Support News Feed Follow the GTK+ project on: blog | Twitter | identi.ca | Google+ What is GTK+, and how can I use it? GTK+, or the GIMP Toolkit, is a multi-platform toolkit for creating graphical user interfaces. Offering a complete set of widgets, GTK+ is suitable for projects ranging from small one-off tools to complete application suites. Where can I use it? Everywhere! GTK+ is cross-platform and boasts an easy to use API, speeding up your development time. Take a look at the screenshots to see a number of platforms GTK+ will run. What languages are supported? GTK+ is written in C but has been designed from the ground up to support a wide range of languages, not only C/C++. Using GTK+ from languages such as Perl and Python (especially in combination with the Glade GUI builder) provides an effective method of rapid application development. Are there any licensing restrictions? GTK+ is free software and part of the GNU Project. However, the licensing terms for GTK+, the GNU LGPL, allow it to be used by all developers, including those developing proprietary software, without any license fees or royalties. Get an overview of GTK+. Understand who started it, the basic architecture and why we use the license we do. GTK+ has been involved in many projects and some big platforms. To get a glimpse of what people think of GTK+ and how it has been used in commercial projects, read the success stories... To find out how more about what GTK+ can do for you, visit our features page. If you want to contribute, you are more than welcome. Copyright © 2007-2016 The GTK+ Team | Valid XHTML and CSS"	"null"	"null"	"A multi-platform toolkit for creating graphical user interfaces. [LGPL]"	"true"
"GUI"	"gtkmm"	"http://www.gtkmm.org/en/"	"The official C++ interface for the popular GUI library GTK+. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Features 		- gtkmm 		- C++ Interfaces for GTK+ and GNOME gtkmm C++ Interfaces for GTK+ and GNOME Home License Download Documentation Development Other Resources News FAQ Wiki Mailing Lists Git Bugs Books Commercial Support Additional Resources Language Brazilian Portuguese Deutsch English Español French Greek 中文 gtkmm is the official C++ interface for the popular GUI library GTK+. Highlights include typesafe callbacks, and a comprehensive set of widgets that are easily extensible via inheritance. You can create user interfaces either in code or with the Glade User Interface designer, using Gtk::Builder. There's extensive documentation, including API reference and a tutorial. gtkmm is free software distributed under the GNU Library General Public License (LGPL). gtkmm follows the official GNOME Platform Bindings release schedule. This guarantees API/ABI-stability and new releases on a predictable schedule, delivering C++ API for the underlying GTK+ and GNOME APIs as soon as possible. Features Use inheritance to derive custom widgets. Type-safe signal handlers, in standard C++. Polymorphism. Use of Standard C++ Library, including strings, containers, and iterators. Full internationalisation with UTF8. Complete C++ memory management Object composition Automatic deallocation of dynamically allocated widgets. Full use of C++ namespaces. No macros. Cross-platform: Linux (gcc), FreeBSD (gcc), NetBSD (gcc), Solaris (gcc, Forte), Win32 (gcc, MSVC++ .Net 2003, 2005, 2008), MacOS X (gcc), others Free software and free of cost for both Open Source and proprietary development. Discussed, designed and implemented in public. Other gtkmm-related libraries gnomemm gtkmm is a GUI toolkit and nothing more, and it strives to be the best C++ GUI toolkit. That mandate does not cover generic C++ data structures, an XML parser, or database access. Even our signal/slots system is part of a separate (libsigc++) library. However, gtkmm is designed to work well with all other C++ libraries. The gnomemm libraries cover some of these other tasks, but they are optional. libsigc++ Also, be sure to check out our companion libraries, glibmm (UTF8 strings, threading, etc) and libsigc++ (signal/slots). Others Be sure to check out Bakery, a framework for constructing gtkmm/gnomemm applications. It allows use of the Document/View architecture. Contact Us"	"null"	"null"	"The official C++ interface for the popular GUI library GTK+. [LGPL]"	"true"
"GUI"	"imgui"	"https://github.com/ocornut/imgui"	"Immediate Mode Graphical User Interface with minimal dependencies. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4198"	"310"	"490"	"GitHub - ocornut/imgui: Bloat-free Immediate Mode Graphical User interface for C++ with minimal dependencies Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 310 Star 4,198 Fork 490 ocornut/imgui Code Issues 78 Pull requests 14 Wiki Pulse Graphs Bloat-free Immediate Mode Graphical User interface for C++ with minimal dependencies 2,331 commits 6 branches 42 releases 66 contributors C++ 81.2% C 18.8% C++ C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2015-03-antialiased-primitives-CLOSED 2015-05-menus-CLOSED 2015-06-multiline_textedit-CLOSED 2016-02-colorpicker master reliasn-master Nothing to show v1.49 v1.48 v1.47 v1.46 v1.45 v1.44 v1.43 v1.42 v1.41 v1.40 v1.38 v1.37 v1.36 v1.35 v1.34 v1.33 v1.33b v1.32 v1.31 v1.30 v1.20 v1.19 v1.18 v1.17 v1.16 v1.16b v1.15 v1.14 v1.13 v1.12 v1.11 v1.10 v1.09 v1.08 v1.07 v1.06 v1.05 v1.04 v1.03 v1.02 v1.01 v1.00 Nothing to show New pull request Latest commit 04b36bc Jul 14, 2016 ocornut TODO list Permalink Failed to load latest commit information. examples Fix minor typo in examples/README.txt May 20, 2016 extra_fonts Fonts readme, refering to IconFontCppHeaders, AddRemapChar() function… May 4, 2016 .travis.yml Travis CI: test adding osx Jan 21, 2016 LICENSE Tweak date/credits Apr 14, 2015 README.md Comments, tweaks May 31, 2016 imconfig.h imconfig.h tweak, not advertising IMGUI_INCLUDE_IMGUI_USER_INL anymore. Dec 24, 2015 imgui.cpp TODO list Jul 14, 2016 imgui.h ImVector: reserve() tweak to avoid undefined behavior warning (#731) Jul 12, 2016 imgui_demo.cpp Minor bits Jun 25, 2016 imgui_draw.cpp ImDrawList: Fixed a (rarely occuring) bug with merging with previous … Jun 11, 2016 imgui_internal.h InputTextMultiline(): partial fix for when input and internal buffers… Jul 13, 2016 stb_rect_pack.h Minor warnings fixes. May 7, 2016 stb_textedit.h InputText(): Fixed state corruption/crash bug in stb_textedit redo lo… Jul 14, 2016 stb_truetype.h stb_truetype: updated 1.08 > 1.10 + minor unused variable warning fix Apr 2, 2016 README.md dear imgui, (This library is free and will stay free, but needs your support to sustain its development. There are lots of desirable new features and maintenance to do. If you work for a company using ImGui or have the means to do so, please consider financial support) dear imgui (AKA ImGui), is a bloat-free graphical user interface library for C++. It outputs vertex buffers that you can render in your 3D-pipeline enabled application. It is fast, portable, renderer agnostic and self-contained (no external dependencies). ImGui is designed to enable fast iteration and empower programmers to create content creation tools and visualization/debug tools (as opposed to UI for the average end-user). It favors simplicity and productivity toward this goal, and thus lacks certain features normally found in more high-level libraries. ImGui is particularly suited to integration in realtime 3D applications, fullscreen applications, embedded applications, games, or any applications on consoles platforms where operating system features are non-standard. ImGui is self-contained within a few files that you can easily copy and compile into your application/engine: imgui.cpp imgui.h imgui_demo.cpp imgui_draw.cpp imgui_internal.h imconfig.h (empty by default, user-editable) stb_rect_pack.h stb_textedit.h stb_truetype.h No specific build process is required. You can add the .cpp files to your project or #include them from an existing file. Your code passes mouse/keyboard inputs and settings to ImGui (see example applications for more details). After ImGui is setup, you can use it like in this example: ImGui outputs vertex buffers and simple command-lists that you can render in your application. The number of draw calls and state changes is typically very small. Because it doesn't know or touch graphics state directly, you can call ImGui commands anywhere in your code (e.g. in the middle of a running algorithm, or in the middle of your own rendering process). Refer to the sample applications in the examples/ folder for instructions on how to integrate ImGui with your existing codebase. ImGui allows you create elaborate tools as well as very short-lived ones. On the extreme side of short-liveness: using the Edit&Continue feature of modern compilers you can add a few widgets to tweaks variables while your application is running, and remove the code a minute later! ImGui is not just for tweaking values. You can use it to trace a running algorithm by just emitting text commands. You can use it along with your own reflection data to browse your dataset live. You can use it to expose the internals of a subsystem in your engine, to create a logger, an inspection tool, a profiler, a debugger, etc. Demo You should be able to build the examples from sources (tested on Windows/Mac/Linux). If you don't, let me know! If you want to have a quick look at the features of ImGui, you can download Windows binaries of the demo app here. imgui-demo-binaries-20160410.zip (Windows binaries, ImGui 1.48+ 2016/04/10, 4 executables, 534 KB) Gallery See the Screenshots Thread for some user creations. ImGui can load TTF fonts. UTF-8 is supported for text display and input. Here using Arial Unicode font to display Japanese. Initialize custom font with: ImGuiIO& io = ImGui::GetIO(); io.Fonts->AddFontFromFileTTF(""ArialUni.ttf"", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());  // For Microsoft IME, pass your HWND to enable IME positioning: io.ImeWindowHandle = my_hwnd;  References The Immediate Mode GUI paradigm may at first appear unusual to some users. This is mainly because ""Retained Mode"" GUIs have been so widespread and predominant. The following links can give you a better understanding about how Immediate Mode GUIs works. Johannes 'johno' Norneby's article. A presentation by Rickard Gustafsson and Johannes Algelind. Jari Komppa's tutorial on building an ImGui library. Casey Muratori's original video that popularized the concept. See the Links page for third-party bindings to different languages and frameworks. Frequently Asked Question (FAQ) Where is the documentation? The documentation is at the top of imgui.cpp + effectively imgui.h. Example code is in imgui_demo.cpp and particularly the ImGui::ShowTestWindow() function. It covers most features of ImGui so you can read the code and call the function itself to see its output. Standalone example applications using e.g. OpenGL/DirectX are provided in the examples/ folder. We obviously needs better documentation! Consider contributing or becoming a Patron to promote this effort. Why the odd dual naming, ""dear imgui"" vs ""ImGui""? The library started its life and is best known as ""ImGui"" only due to the fact that I didn't give it a proper name when I released it. However, the term IMGUI (immediate-mode graphical user interface) was coined before and is being used in variety of other situations. It seemed confusing and unfair to hog the name. To reduce the ambiguity without affecting existing codebases, I have decided on an alternate, longer name ""dear imgui"" that people can use to refer to this specific library in ambiguous situations. How do I update to a newer version of ImGui? What is ImTextureID and how do I display an image? I integrated ImGui in my engine and the text or lines are blurry.. I integrated ImGui in my engine and some elements are disappearing when I move windows around.. How can I have multiple widgets with the same label? Can I have widget without a label? (Yes). A primer on the purpose of labels/IDs. How can I tell when ImGui wants my mouse/keyboard inputs and when I can pass them to my application? How can I load a different font than the default? How can I load multiple fonts? How can I display and input non-latin characters such as Chinese, Japanese, Korean, Cyrillic? How can I use the drawing facilities without an ImGui window? (using ImDrawList API) See the FAQ in imgui.cpp for answers. How do you use ImGui on a platform that may not have a mouse or keyboard? I recommend using Synergy (sources). In particular, the src/micro/uSynergy.c file contains a small client that you can use on any platform to connect to your host PC. You can seamlessly use your PC input devices from a video game console or a tablet. ImGui allows to increase the hit box of widgets (via the TouchPadding setting) to accommodate a little for the lack of precision of touch inputs, but it is recommended you use a mouse to allow optimising for screen real-estate. Can you create elaborate/serious tools with ImGui? Yes. I have written data browsers, debuggers, profilers and all sort of non-trivial tools with the library. In my experience the simplicity of the API is very empowering. Your UI runs close to your live data. Make the tools always-on and everybody in the team will be inclined to create new tools (as opposed to more ""offline"" UI toolkits where only a fraction of your team effectively creates tools). ImGui is very programmer centric and the immediate-mode GUI paradigm might requires you to readjust some habits before you can realize its full potential. Many programmers have unfortunately been taught by their environment to make unnecessarily complicated things. ImGui is about making things that are simple, efficient and powerful. Is ImGui fast? Probably fast enough for most uses. Down to the foundation of its visual design, ImGui is engineered to be fairly performant both in term of CPU and GPU usage. Running elaborate code and creating elaborate UI will of course have a cost but ImGui aims to minimize it. Mileage may vary but the following screenshot can give you a rough idea of the cost of running and rendering UI code (In the case of a trivial demo application like this one, your driver/os setup are likely to be the bottleneck. Testing performance as part of a real application is recommended). This is showing framerate for the full application loop on my 2011 iMac running Windows 7, OpenGL, AMD Radeon HD 6700M with an optimized executable. In contrast, librairies featuring higher-quality rendering and layouting techniques may have a higher resources footprint. If you intend to display large lists of items (say, 1000+) it can be beneficial for your code to perform clipping manually - one way is using helpers such as ImGuiListClipper - in order to avoid submitting them to ImGui in the first place. Even though ImGui will discard your clipped items it still needs to calculate their size and that overhead will add up if you have thousands of items. If you can handle clipping and height positionning yourself then browsing a list with millions of items isn't a problem. Can you reskin the look of ImGui? You can alter the look of the interface to some degree: changing colors, sizes, padding, rounding, fonts. However, as ImGui is designed and optimised to create debug tools, the amount of skinning you can apply is limited. There is only so much you can stray away from the default look and feel of the interface. This is LumixEngine with a minor skinning hack + a docking/tabs extension (both of which you can find in the Issues section and will eventually be merged). Why using C++ (as opposed to C)? ImGui takes advantage of a few C++ features for convenience but nothing anywhere Boost-insanity/quagmire. In particular, function overloading and default parameters are used to make the API easier to use and code more terse. Doing so I believe the API is sitting on a sweet spot and giving up on those features would make the API more cumbersome. Other features such as namespace, constructors and templates (in the case of the ImVector<> class) are also relied on as a convenience but could be removed. There is an unofficial but reasonably maintained c-api for ImGui by Stephan Dilly. I would suggest using your target language functionality to try replicating the function overloading and default parameters used in C++ else the API may be harder to use. It was really designed with C++ in mind and may not make the same amount of sense with another language. Also see Links for third-party bindings to other languages. Donate Can I donate to support the development of ImGui? I'm currently an independent developer and your contributions are useful. I have setup an ImGui Patreon page if you want to donate and enable me to spend more time improving the library. If your company uses ImGui please consider making a contribution. One-off donations are also greatly appreciated. I am available for hire to work on or with ImGui. Thanks! Credits Developed by Omar Cornut and every direct or indirect contributors to the GitHub. The early version of this library was developed with the support of Media Molecule and first used internally on the game Tearaway. I first discovered imgui principles at Q-Games where Atman had dropped his own simple imgui implementation in the codebase, which I spent quite some time improving and thinking about. It turned out that Atman was exposed to the concept directly by working with Casey. When I moved to Media Molecule I rewrote a new library trying to overcome the flaws and limitations of the first one I've worked with. It became this library and since then I have spent an unreasonable amount of time iterating on it. Embeds ProggyClean.ttf font by Tristan Grimmer (MIT license). Embeds stb_textedit.h, stb_truetype.h, stb_rectpack.h by Sean Barrett (public domain). Inspiration, feedback, and testing for early versions: Casey Muratori, Atman Binstock, Mikko Mononen, Emmanuel Briney, Stefan Kamoda, Anton Mikhailov, Matt Willis. And everybody posting feedback, questions and patches on the GitHub. Ongoing ImGui development is financially supported on Patreon. Double-chocolate sponsors: Media Molecule, Mobigame Salty caramel supporters: Jetha Chan, Wild Sheep Studio, Pastagames, Mārtiņš Možeiko, Daniel Collin, Stefano Cristiano, Chris Genova, ikrima Caramel supporters: Michel Courtine, César Leblic, Dale Kim, Alex Evans, Rui Figueira, Paul Patrashcu, Jerome Lanquetot, Ctrl Alt Ninja, Paul Fleming, Neil Henning, Stephan Dilly, Neil Blakey-Milner, Aleksei, NeiloGD, Justin Paver, FiniteSol, Vincent Pancaldi, James Billot, Robin Hübner, furrtek, Eric, Simon Barratt, Game Atelier, Julian Bosch, Simon Lundmark, Vincent Hamm, Farhan Wali, Jeff Roberts, Matt Reyer, Colin Riley. And other supporters; thanks! License Dear ImGui is licensed under the MIT License, see LICENSE for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ocornut/imgui"	"Immediate Mode Graphical User Interface with minimal dependencies. [MIT]"	"true"
"GUI"	"libRocket"	"http://librocket.com/"	"libRocket is a C++ HTML/CSS game interface middleware. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"654"	"80"	"241"	"GitHub - libRocket/libRocket: libRocket - The HTML/CSS User Interface library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 80 Star 654 Fork 241 libRocket/libRocket Code Issues 51 Pull requests 26 Wiki Pulse Graphs libRocket - The HTML/CSS User Interface library http://librocket.com 578 commits 4 branches 5 releases 49 contributors C++ 67.6% C 28.3% CMake 3.7% Other 0.4% C++ C CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/bugfix-REM-units-support feature/osx-framework master stable Nothing to show release-issue-137 release-1.3.0.0 release-1.2.1 release-1.2.0 issue-137 Nothing to show New pull request Latest commit f164420 Sep 21, 2015 dwimsey Merge pull request #270 from Dinno/master … Fix for build error which happens under non GCC compilers Permalink Failed to load latest commit information. Build Merge pull request #267 from konopka90/master Sep 15, 2015 Dependencies Initial changes to make building dependancies much easier and require… Mar 26, 2015 Include/Rocket A lot of changes Aug 29, 2015 Samples Bitmap font example Sep 3, 2015 Source - Fix for build error which happens under non GCC compilers Sep 21, 2015 bin Removed Lua5.1 from the repo May 15, 2012 .gitignore Ignore new directories. Jan 21, 2013 changelog.txt Version number updates for 1.3.0 release Jul 10, 2014 how_to_build_for_mingw.txt Rename STATIC_LIB macro to ROCKET_STATIC_LIB. Dec 17, 2014 readme.md Update basic copyright info Aug 20, 2014 readme.md libRocket - The HTML/CSS User Interface Library http://librocket.com libRocket is the C++ user interface package based on the HTML and CSS standards. It is designed as a complete solution for any project's interface needs. libRocket uses the time-tested open standards XHTML1.0 and CSS2.0 (while borrowing features from HTML5 and CSS3), and extends them with features suited towards real-time applications. Because of this, you don't have to learn a whole new proprietary technology like other libraries in this space. Features Cross platform architecture: Windows, Mac, Linux, iPhone, etc. Dynamic layout system. Efficient application-wide styling, with a custom-built templating engine. Fully featured control set: buttons, sliders, drop-downs, etc. Runtime visual debugging suite. Easily integrated and extensible with Python or Lua scripting. Extensible Abstracted interfaces for plugging in to any game engine. Decorator engine allowing custom application-specific effects that can be applied to any element. Generic event system that binds seamlessly into existing projects. License (MIT) Copyright (c) 2008-2014 CodePoint Ltd, Shift Technology Ltd, and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lloydw/libRocket"	"libRocket is a C++ HTML/CSS game interface middleware. [MIT]"	"true"
"GUI"	"MyGUI"	"http://mygui.info/"	"Fast, flexible and simple GUI. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"230"	"51"	"101"	"GitHub - MyGUI/mygui: Fast, flexible and simple GUI. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 230 Fork 101 MyGUI/mygui Code Issues 23 Pull requests 4 Wiki Pulse Graphs Fast, flexible and simple GUI. http://mygui.info/ 4,600 commits 3 branches 6 releases 15 contributors C++ 51.5% C 41.6% C# 5.1% CMake 1.3% Tcl 0.3% Python 0.2% C++ C C# CMake Tcl Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master ogre2 ogre2.1 Nothing to show MyGUI3.2.2 MyGUI3.2.1 MyGUI3.2 MyGUI3.0 MyGUI2.2 MyGUI2.0 Nothing to show New pull request Latest commit 830db66 May 24, 2016 Altren Merge pull request #110 from kacprzak/master … Current matrix was changed after calling OpenGLRenderManager::drawOne… Permalink Failed to load latest commit information. CMake suppress warnings from 3rd party libraries Mar 22, 2016 Common add missing include Dec 6, 2015 Demos fix reserved identifier violation. close #46 Dec 26, 2014 Docs update line endings for all files with CRLF (part 3) Sep 1, 2014 Media implement OpenGLES render Jul 31, 2015 MyGUIEngine remove no longe needed MYGUI_DBG_BREAK macros Apr 6, 2016 Platforms Current matrix was changed after calling OpenGLRenderManager::drawOne… May 23, 2016 Plugins fix reserved identifier violation. close #46 Dec 26, 2014 Scripts OpenGL3.x+ core profile platform Apr 23, 2015 Tools fix #101: OpenGL render was cleaning screen Dec 6, 2015 UnitTests fixed an error stops unit test build in linux with opengl as render s… Jun 10, 2015 Wrappers remove no longe needed MYGUI_DBG_BREAK macros Apr 6, 2016 .gitattributes add .gitattributes to normalise lineendings Aug 17, 2014 .gitignore Replace assert in destructor with error in log. (Fixes #103) Jan 9, 2016 .travis.yml Attempt to fix travis build Mar 3, 2016 AUTHORS update license files (switching from LGPL to MIT license) Mar 2, 2013 CMakeLists.txt suppress warnings from 3rd party libraries Mar 21, 2016 COPYING.MIT update license files (switching from LGPL to MIT license) Mar 2, 2013 ChangeLog.txt dd version 3.2.2 change log Jan 26, 2015 ChangeLog_rus.txt dd version 3.2.2 change log Jan 26, 2015 README.md Update README.md Mar 11, 2015 README.md MyGUI is a cross-platform library for creating graphical user interfaces (GUIs) for games and 3D applications. Website: http://mygui.info/ There you can find basic information about how to build MyGUI: http://www.ogre3d.org/tikiwiki/MyGUI+Compiling Note: support for Ogre3D 2.0 is currently in beta state and available in a separate branch. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MyGUI/mygui"	"Fast, flexible and simple GUI. [MIT]"	"true"
"GUI"	"QCustomPlot"	"http://qcustomplot.com/"	"Qt plotting widget without further dependencies. [GPLv3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Qt Plotting Widget QCustomPlot - Introduction Introduction News Tutorials Setting Up Basic Plotting User Interactions Items Special Use Cases Embedding in QTextDocument Range control with Scrollbar Support Comments/Forum Documentation E-Mail News Feed Download Contact QCustomPlot is a Qt C++ widget for plotting and data visualization. It has no further dependencies and is well documented. This plotting library focuses on making good looking, publication quality 2D plots, graphs and charts, as well as offering high performance for realtime visualization applications. Have a look at the Setting Up and the Basic Plotting tutorials to get started. QCustomPlot can export to various formats such as vectorized PDF files and rasterized images like PNG, JPG and BMP. All outputs look consistent across the supported formats. QCustomPlot is the solution for displaying of realtime data inside the application as well as producing high quality plots for other media. The default license is the GPL. If your project requires a commercial license, please get in contact via e-mail. Plot Screenshots The screenshots below show what can be achieved with QCustomPlot in only a few lines. To view the code, click on the respective image. All codes are also available in the full package which can be found in the download section. Inside the package, navigate to the project examples/plots/plot-examples.pro. A simple decaying sine function with fill and its exponential envelope in red sinc function with data points, corresponding error bars and a 2-sigma confidence band A demonstration of several scatter point styles Demonstrating QCustomPlot's versatility in styling the plot A 2D color map with color scale Pixmap scatter points and a multi-lined axis label, as well as a plot title at the top Real time generated data and automatically scaling vertical axis Multiple plot styles with different key/value axes and manual tick labeling at top axis Logarithmic axis scaling. Note correct display of the sine function crossing zero in negative infinity A demonstration of several line styles Random walks with fill and date mode for bottom axis labels Parametric curves with translucent gradient filling Three stacked bar charts with manual x axis tick labels Statistical 5-parameter-box-plot with outliers The interaction example showing the selection mechanism for graphs Using items like text labels, arrows and a bracket. This is actually animated, see examples project QCP supports multiple axes on one axis rect side and multiple axis rects per plot widget QCP showing financial and stock data with the typical Candlestick and OHLC charts Non source code content of this website is licensed under creative commons license by-nc-sa. Source codes and Software are licensed under the GNU GPL except as noted otherwise."	"null"	"null"	"Qt plotting widget without further dependencies. [GPLv3]"	"true"
"GUI"	"Qwt"	"http://qwt.sourceforge.net/"	"Qt Widgets for Technical Applications. [Own based on LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Qwt User's Guide: Qwt - Qt Widgets for Technical Applications Qwt User's Guide  6.1.3 Main Page Classes Qwt - Qt Widgets for Technical Applications Table of Contents License Platforms What's new Screenshots Downloads Installation Support Related Projects Donations Credits The Qwt library contains GUI Components and utility classes which are primarily useful for programs with a technical background. Beside a framework for 2D plots it provides scales, sliders, dials, compasses, thermometers, wheels and knobs to control or display values, arrays, or ranges of type double. License Qwt is distributed under the terms of the Qwt License, Version 1.0. Platforms Qwt 6.1 might be usable in all environments where you find Qt. It is compatible with Qt4 ( >= 4.4 ) and all Qt5 versions. What's new Read the summary of the most important changes. Screenshots Curve Plots Spectrogram, Contour Plot Bar Charts, Histograms Other Plots Dials, Compasses, Knobs, Wheels, Sliders, Thermos Downloads Stable releases or prereleases are available at the Qwt project page. For getting a snapshot with all bugfixes for the latest 5.2 release: svn export svn://svn.code.sf.net/p/qwt/code/branches/qwt-5.2 For getting a snapshot with all bugfixes for the latest 6.1 release: svn export svn://svn.code.sf.net/p/qwt/code/branches/qwt-6.1 For getting a development snapshot from the SVN repository: svn export svn://svn.code.sf.net/p/qwt/code/trunk/qwt Installation Qwt doesn't distribute binary packages, but today all major Linux distributors offer one. Note, that these packages often don't include the examples. When no binary packages are available ( f.e. on Windows ) Qwt needs to be compiled and installed on the target system. Support Mailing list For all kind of Qwt related questions use the Qwt mailing list. If you prefer newsgroups use the mail to news gateway of Gmane. Forum Qt Centre is a great resource for Qt related questions. It has a sub forum, that is dedicated to Qwt related questions. Individual support If you are looking for individual support, or need someone who implements your Qwt component/application contact suppo.nosp@m.rt@q.nosp@m.wt-pr.nosp@m.ojec.nosp@m.t.org. Sending requests to this address without a good reason for not using public support channels might be silently ignored. Related Projects QwtPolar, a polar plot widget. QwtPlot3D, an OpenGL 3D plot widget. Donations Sourceforge offers a Donation System via PayPal. You can use it, if you like to support the development of Qwt. Credits Authors: Uwe Rathmann, Josef Wilgen ( <= Qwt 0.2 ) Generated by 1.8.11"	"null"	"null"	"Qt Widgets for Technical Applications. [Own based on LGPL]"	"true"
"GUI"	"QwtPlot3D"	"http://qwtplot3d.sourceforge.net/"	"A feature-rich Qt/OpenGL-based C++ programming library, providing essentially a bunch of 3D-widgets. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"QwtPlot3D"	"null"	"null"	"A feature-rich Qt/OpenGL-based C++ programming library, providing essentially a bunch of 3D-widgets. [zlib]"	"true"
"GUI"	"OtterUI"	"https://github.com/Twolewis/OtterUI"	"OtterUI is a User Interface development solution for embedded systems and interactive entertainment software. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"https://github.com/Twolewis/OtterUI"	"OtterUI is a User Interface development solution for embedded systems and interactive entertainment software. [MIT]"	"false"
"GUI"	"PDCurses"	"http://pdcurses.sourceforge.net/"	"Public domain curses library with both source code and pre-compiled library available. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"66"	"13"	"25"	"GitHub - wmcbrine/PDCurses: Public Domain Curses - a curses library for environments that don't fit the termcap/terminfo model. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 66 Fork 25 wmcbrine/PDCurses Code Pull requests 7 Pulse Graphs Public Domain Curses - a curses library for environments that don't fit the termcap/terminfo model. http://pdcurses.org/ 1,987 commits 1 branch 10 releases 4 contributors C 94.0% Makefile 5.1% Shell 0.9% C Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show PDCurses_3_4 PDCurses_3_3 PDCurses_3_2 PDCurses_3_1 PDCurses_3_0 PDCurses_2_8 PDCurses_2_7 PDCurses_2_6 PDCurses_2_5 PDCurses_2_4 Nothing to show New pull request Latest commit dc1d35e Feb 13, 2016 wmcbrine TTF and 16-bit Unicode output for SDL 1.2, after Laura Michaels. (""make … WIDE=Y"" builds against SDL_ttf, if available.) Permalink Failed to load latest commit information. demos Warning suppression. Feb 7, 2016 doc All documentation to markdown format; removed some redundancies. Jan 10, 2016 dos Man page sections reformatted slightly, markdown-style. Jan 7, 2016 os2 Man page sections reformatted slightly, markdown-style. Jan 7, 2016 pdcurses Parameters not given here. Feb 7, 2016 sdl1 TTF and 16-bit Unicode output for SDL 1.2, after Laura Michaels. (""make Feb 13, 2016 win32 Man page sections reformatted slightly, markdown-style. Jan 7, 2016 x11 Move configure script etc. to the x11 directory. Jan 12, 2016 HISTORY.md More markdown madness. Jan 5, 2016 IMPLEMNT.md Excess spaces. Jan 10, 2016 Makefile Move configure script etc. to the x11 directory. Jan 12, 2016 README.md More markdown madness. Jan 5, 2016 curses.h All documentation to markdown format; removed some redundancies. Jan 10, 2016 curspriv.h Move configure script etc. to the x11 directory. Jan 12, 2016 exp-base.def Unified exports list with no duplicates -- pdcurses.def is now built Jul 21, 2008 exp-wide.def Unified exports list with no duplicates -- pdcurses.def is now built Jul 21, 2008 libobjs.mif Abandoned PDCURSES_HOME in favor of PDCURSES_SRCDIR -- slightly simpler. Jun 5, 2007 makedist.mif More markdown madness. Jan 5, 2016 panel.h Id tags aren't useful with git. Jun 20, 2015 term.h Id tags aren't useful with git. Jun 20, 2015 version.mif Updated version number. No, 3.4 is not necessarily imminent. But I'm Nov 7, 2007 watcom.mif Stupid change needed for Open Watcom 1.8+ (no longer compatible with Jan 1, 2016 README.md Welcome to PDCurses! Public Domain Curses, aka PDCurses, is an implementation of X/Open curses for multiple platforms. The latest version can be found at: http://pdcurses.org/ For changes, see the HISTORY file. Legal Stuff The core package is in the public domain, but small portions of PDCurses are subject to copyright under various licenses. Each directory contains a README file, with a section titled ""Distribution Status"" which describes the status of the files in that directory. If you use PDCurses in an application, an acknowledgement would be appreciated, but is not mandatory. If you make corrections or enhancements to PDCurses, please forward them to the current maintainer for the benefit of other users. This software is provided AS IS with NO WARRANTY whatsoever. Ports PDCurses has been ported to DOS, OS/2, Win32, X11 and SDL. A directory containing the port-specific source files exists for each of these platforms. Build instructions are in the README file for each platform: DOS OS/2 SDL Win32 X11 Distribution Status All files in this directory except configure, config.guess and config.sub are released to the Public Domain. config.guess and config.sub are under the GPL; configure is under a free license described within it. Maintainer William McBrine wmcbrine@gmail.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wmcbrine/PDCurses"	"Public domain curses library with both source code and pre-compiled library available. [PublicDomain]"	"true"
"GUI"	"Sciter"	"http://sciter.com/"	"Sciter is an embeddable HTML/CSS/scripting engine aimed to be used as an UI layer of modern desktop applications. [Free/Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"310"	"42"	"34"	"GitHub - oskca/sciter: Golang bindings of Sciter: the Embeddable HTML/CSS/script engine for modern UI development Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 310 Fork 34 oskca/sciter Code Issues 7 Pull requests 2 Pulse Graphs Golang bindings of Sciter: the Embeddable HTML/CSS/script engine for modern UI development 41 commits 1 branch 0 releases Fetching contributors Go 47.3% C++ 35.4% C 17.3% Go C++ C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4fcee17 Jun 28, 2016 oskca committed on GitHub Merge pull request #31 from kuznetsovin/osx_support … LGTM Permalink Failed to load latest commit information. examples correct value returning in goLPCBYTE_RECEIVER to fix #21 Jun 28, 2016 include init branch Jun 10, 2016 rice change github username to oskca :) Oct 16, 2015 window Porting function for correct working on Mac OS X 10.11 Jun 10, 2016 .gitignore sciter golang biding Oct 15, 2015 README.md make it clear that OSX is not supported yet Nov 24, 2015 callbacks.c wrap ValueEnumElements for key&value enumeration of sciter object typ… Feb 28, 2016 generate.go sciter golang biding Oct 15, 2015 sciter-x-api.c init branch Jun 10, 2016 sciter.go correct value returning in goLPCBYTE_RECEIVER to fix #21 Jun 28, 2016 sciter_darwin.go Porting function for correct working on Mac OS X 10.11 Jun 10, 2016 sciter_linux.go sciter golang biding Oct 15, 2015 sciter_windows.go sciter golang biding Oct 15, 2015 types.go fix DefaultWindowCreaetFlag typo Feb 13, 2016 types_string.go sciter golang biding Oct 15, 2015 utils.go sciter golang biding Oct 15, 2015 value.go fix typo in IsObjectFunction Feb 25, 2016 wrapper.go sciter golang biding Oct 15, 2015 README.md This package provides a Golang bindings of Sciter using cgo. Using go sciter you must have the platform specified sciter dynamic library downloaded from sciter-sdk, the library itself is rather small (under 5MB, less than 2MB when upxed) . Most Sciter API are supported, including: Html string/file loading DOM manipulation/callback/event handling DOM state/attribute handling Custom resource loading Sciter Behavior Sciter Options Sciter Value support NativeFunctor (used in sciter scripting) And the API are organized in more or less a gopher friendly way. Things that are not supported: Sciter Node API TIScript Engine API Getting Started Download the sciter-sdk Extract the sciter runtime library from sciter-sdk to system PATH The runtime libraries lives in bin bin.gtk bin.osx with suffix like dll so or dylib (osx is not supported yet, due to the lack of osx computer) The system PATH is os specific, under Windows simply copying sciter32.dll or sciter64.dll to c:\windows\system32 is just enough. Set up GCC envrionmnet for CGO mingw64-gcc (5.2.0 is tested) is recommended for Windows users. Under Linux gcc(4.8 or above) and gtk+-3.0 are needed. Due to the dependencies of gkt version of Sciter runtime library, only debian 8 is tested but not for other distributions. go get -x github.com/oskca/sciter Run the example and enjoy :) Sciter Desktop UI Examples Sciter Version Support Currently supports Sciter version 3.3.0.3 - latest About Sciter Sciter is an Embeddable HTML/CSS/script engine for modern UI development, Web designers, and developers, can reuse their experience and expertise in creating modern looking desktop applications. In my opinion, Sciter , though not open sourced, is an great desktop UI development envrionment using the full stack of web technologies, which is rather small (under 5MB) especially compared to CEF,Node Webkit and Atom Electron. :) Finally, according to Andrew Fedoniouk the author and the Sciter END USER LICENSE AGREEMENT , the binary form of the Sciter dynamic libraries are totally free to use for commercial or non-commercial applications. The Tailered Sciter C Headers This binding ueses a tailored version of the sciter C Headers, which lives in directory: include. The included c headers are a modified version of the sciter-sdk standard headers. It seems Sciter is developed using C++, and the included headers in the Sciter SDK are a mixture of C and C++, which is not quite suitable for an easy golang binding. I'm not much fond of C++ since I started to use Golang, so I made this modification and hope Andrew Fedoniouk the author would provide pure C header files for Sciter. :) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/datagoes/sciter"	"Sciter is an embeddable HTML/CSS/scripting engine aimed to be used as an UI layer of modern desktop applications. [Free/Commercial]"	"true"
"GUI"	"wxWidgets"	"http://wxwidgets.org/"	"A C++ library that lets developers create applications for Windows, Mac OS X, Linux and other platforms with a single code base. [Own LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"3"	"488"	"GitHub - hokein/wxWidgets: Read-only mirror of the wxWidgets SVN repo (automatically updated). Report issues here: http://trac.wxwidgets.org/ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 3 Fork 488 hokein/wxWidgets forked from wxWidgets/wxWidgets Code Pull requests 1 Wiki Pulse Graphs Read-only mirror of the wxWidgets SVN repo (automatically updated). Report issues here: http://trac.wxwidgets.org/ http://www.wxwidgets.org/ 58,939 commits 58 branches 257 releases Fetching contributors C++ 74.8% C 20.1% Shell 2.1% Objective-C++ 1.6% R 0.5% Assembly 0.2% Other 0.7% C++ C Shell Objective-C++ R Assembly Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: SOC2014_WEBVIE… Switch branches/tags Branches Tags AUTOCONF_ARCHIVE BAKEFILE_BRANCH BAKEFILE CPPUNIT EXPAT GSTREAMER GTK1 GTK2 LIBPNG NEW_TBAR PKG_CONFIG RXSPENCER SDL SOC2006_RTL SOC2006_SOCKETS SOC2007_DVC SOC2007_WXWEB SOC2007_XTI SOC2008_WXWALLCTRL SOC2009_AUI SOC2009_FSWATCHER SOC2009_RIBBON SOC2010_GUI_TEST SOC2010_MASKED_CTRL SOC2010_RTC_IMAGES SOC2010_WIN7_UI SOC2011_ANIMATION SOC2011_GTK3 SOC2011_WEBVIEW SOC2011_WXIOS SOC2014_REBASE SOC2014_WEBVIEW_CHROMIUM_BAK SOC2014_WEBVIEW_CHROMIUM WX_2_0_FIXES WX_2_2_BRANCH WX_2_4_BRANCH WX_2_6_BRANCH WX_2_8_BRANCH WX_2_8_MICROFIX_BRANCH WX_2_9_0_BRANCH WX_2_10_BRANCH WX_3_0_BRANCH WXSTANDALONE_EXPERIMENT ZLIB download_support gh-pages karsten master ownerdraw-refactor screenshot wxPy-3.0.0 wxPy_branch wxPy_newswig wxPy_temp_253_branch wxQT wxSYMBIAN wxUNIVERSAL wxWebKitBranch-2.8 Nothing to show xrced-0_1_5-3 wxWINDOWS_2_1_BETA_8 wxPython-2_1b3 wxPython-2_1b1 wxPython-0_5_4 wxPython-0_5_3 wxPy_2_8_4_0 wxPy_2_8_3_0 wxPy_2_8_1_1 wxPy_2_8_1_0 wxPy_2_8_0_2 wxPy_2_8_0_1 wxPy_2_7_2_0 wxPy_2_7_1_3 wxPy_2_7_1_2 wxPy_2_7_1_1 wxPy_2_6_4_0 wxPy_2_6_3_3 wxPy_2_6_3_2 wxPy_2_6_3_0 wxPy_2_6_2_1 wxPy_2_6_1_0 wxPy_2_6_0_1 wxPy_2_6_0_0 wxPy_2_6_0_0_rc1 wxPy_2_5_5_1 wxPy_2_5_4_1 wxPy_2_5_3_1 wxPy_2_5_2_8 wxPy_2_5_2_7 wxPy_2_5_2_5 wxPy_2_5_1_5 wxPy_2_5_1_4 wxPy_2_5_1_2 wxPy_2_5_1_1 wxPy_2_4_2_4 wxPy_2_4_1_2 wxPy_2_4_0_7 wxPy_2_4_0_6 wxPy_2_4_0_5 wxPy_2_4_0_4 wxPy_2_4_0_2 wxPy_2_4_0_1 wxPy_2_4_0 wxPy_2_4_merge_2 wxPy_2_4_merge_1 wxPy_2_3_4_2 wxPy_2_3_4_1 wxPy_2_3_3_1 wxPy_2_3_3_pre wxPy_2_3_2_1 wxPy_2_3_2b7 wxPy_2_3_2b6 wxPy_2_3_2b5 wxPy_2_3_2b4 wxPy_2_3_2b1 wxPy_2_3_0 wxPy_2_3b1 wxPy_2_2_2 wxPy_2_2_0 wxPy_2_1_16 wxPy_p1 wxPy_last_28_merge wxPy_last_2_6_merge_point wxPy_b4_virtualization_fix wxPy_OLD_BUILD wxPy_LAST_2_3_2 wxPy_B4_UNICODE wxPy_B4_TSTATE_CHANGE wxPy-2.8.4.2 wxPy-2-1-5 wxPy-2-1-4 wxGTK_2_1_13 wxGTK_2_1_11 wxGTK_0_12 scintilla-extrafont scintilla-b4-extrafont old_gui_defines old_debug oglgdiptr modif before_templates before_odbc_removal before_gtk_scrolledwindow_refactoring b4_mousewheel b4_big_updates b4_OOR_1 agide ZLIB_1_2_3 ZLIB_1_2_2 ZLIB_1_2_1 ZLIB_1_1_4 WXXML_BEFORE_EXPAT WXP_OLD_BUILD WXGTK_ONLY WXGTK_OLD_FOCUS_CODE WXDLLEXPORTLOCAL WX_3_0_0 WX_3_0_0-rc2 WX_3_0_0-rc1 Nothing to show New pull request Pull request Compare This branch is 125 commits ahead, 2922 commits behind wxWidgets:master. Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. art build demos distrib docs include interface lib locale misc samples src tests utils .travis.yml BuildSVN.txt CONTRIBUTING.md Makefile.in README.md acinclude.m4 aclocal.m4 autoconf_inc.m4 autogen.sh config.guess config.sub configure configure.in descrip.mms install-sh mkinstalldirs regen setup.h.in setup.h_vms version-script.in wx-config-inplace.in wx-config.in wxwin.m4 README.md About wxWidgets is a free and open source cross-platform C++ framework for writing advanced GUI applications using native controls. wxWidgets allows you to write native-looking GUI applications for all the major desktop platforms and also helps with abstracting the differences in the non-GUI aspects between them. It is free for the use in both open source and commercial applications, comes with the full, easy to read and modify, source and extensive documentation and a collection of more than a hundred examples. You can learn more about wxWidgets at http://www.wxwidgets.org/ and read its documentation online at http://docs.wxwidgets.org/ Platforms wxWidgets currently supports the following primary platforms: Windows XP, Vista, 7 and 8 (32/64 bits). Most Unix variants using the GTK+ toolkit (version 2.6 or newer or 3.x). Mac OS X (10.6 or newer) using Cocoa (32/64 bits) or Carbon (32 only). Most popular C++ compilers are supported including but not limited to: Microsoft Visual C++ 2003 or later (up to 2013). g++ 3.4 or later, including MinGW/MinGW-64/TDM under Windows. Clang under OS X and Linux. Intel icc compiler. Oracle (ex-Sun) aCC. Licence wxWidgets licence is a modified version of LGPL explicitly allowing not distributing the sources of an application using the library even in the case of static linking. Further information If you are looking for support, you can get it from wx-users mailing list wxForum at http://forums.wxwidgets.org/ #wxwidgets IRC channel http://stackoverflow.com/ if you tag your question with ""wxwidgets"" Please report bugs at http://trac.wxwidgets.org/newticket We would also gladly welcome your contributions. Have fun! The wxWidgets Team. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hokein/wxWidgets"	"A C++ library that lets developers create applications for Windows, Mac OS X, Linux and other platforms with a single code base. [Own LGPL]"	"true"
"Graphics"	"bgfx"	"https://github.com/bkaradzic/bgfx"	"A cross-platform rendering library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2120"	"238"	"361"	"GitHub - bkaradzic/bgfx: Cross-platform, graphics API agnostic, ""Bring Your Own Engine/Framework"" style rendering library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 238 Star 2,120 Fork 361 bkaradzic/bgfx Code Issues 70 Pull requests 0 Pulse Graphs Cross-platform, graphics API agnostic, ""Bring Your Own Engine/Framework"" style rendering library. 3,746 commits 4 branches 0 releases 59 contributors C++ 75.3% Objective-C 8.3% C 6.4% Objective-C++ 6.2% Makefile 1.3% Lua 1.2% Other 1.3% C++ Objective-C C Objective-C++ Makefile Lua Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master revert-483-master revert-716-master Nothing to show Nothing to show New pull request Latest commit 2401ec3 Jul 14, 2016 bkaradzic Updated ImGui. Permalink Failed to load latest commit information. 3rdparty Updated ImGui. Jul 14, 2016 examples Cleanup. Jul 10, 2016 include/bgfx Fixed issue #823. Jun 27, 2016 scripts Mouse Picking Example (#846) Jul 9, 2016 src Cleanup. Jul 14, 2016 tools Added centroid interpolation modifier. Jul 10, 2016 .appveyor.yml Updated Appveyor. Jan 30, 2016 .editorconfig Switched texture assets build to ninja. May 7, 2016 .gitattributes Added .editorconfig. Nov 6, 2014 .gitignore Added workaround for compilers/platforms that don't support TLS speci… Sep 13, 2015 .travis.yml Updated TravisCI. Jan 20, 2016 CONTRIBUTING.md Cleanup. Apr 3, 2016 LICENSE Updated copyright year. Jan 1, 2016 README.md Updated README. Jun 22, 2016 makefile Updated makefile. Jun 22, 2016 README.md bgfx - Cross-platform rendering library What is it? Cross-platform, graphics API agnostic, ""Bring Your Own Engine/Framework"" style rendering library. Supported rendering backends: Direct3D 9 Direct3D 11 Direct3D 12 (WIP) Metal (WIP) OpenGL 2.1 OpenGL 3.1+ OpenGL ES 2 OpenGL ES 3.1 WebGL 1.0 WebGL 2.0 Supported HMD: OculusVR (1.3.0) Supported platforms: Android (14+, ARM, x86, MIPS) asm.js/Emscripten (1.25.0) FreeBSD iOS (iPhone, iPad, AppleTV) Linux MIPS Creator CI20 Native Client (PPAPI 37+, ARM, x86, x64, PNaCl) OSX (10.9+) RaspberryPi SteamLink Windows (XP, Vista, 7, 8, 10) WinRT (WinPhone 8.0+) Supported compilers: Clang 3.3 and above GCC 4.6 and above vs2008 and above Languages: C/C++ API documentation C#/VB/F# language API bindings D language API bindings Go language API bindings Haskell language API bindings Java language API bindings Lua language API bindings Python language API bindings Rust language API bindings Swift language API bindings Building AppVeyor https://ci.appveyor.com/project/bkaradzic/bgfx TravisCI https://travis-ci.org/bkaradzic/bgfx Examples API Reference Tools Who is using it? http://airmech.com/ AirMech is a free-to-play futuristic action real-time strategy video game developed and published by Carbon Games. https://github.com/dariomanesku/cmftStudio cmftStudio - cubemap filtering tool. https://github.com/taylor001/crown Crown is a general purpose data-driven game engine, written from scratch with a minimalistic and data-oriented design philosophy in mind. https://github.com/emoon/ProDBG - ProDBG is a new debugger under development that will support a variety of targets and operating systems. Currently it's in very early development and primary focusing on Mac as primary target. This is how it currently looks. http://www.dogbytegames.com/ Dogbyte Games is an indie mobile developer studio focusing on racing games. https://github.com/andr3wmac/Torque6 Torque 6 is an MIT licensed 3D engine loosely based on Torque2D. Being neither Torque2D or Torque3D it is the 6th derivative of the original Torque Engine. https://github.com/cgbystrom/twinkle GPU-accelerated UI framework powered by JavaScript for desktop/mobile apps. Idea is to combine the fast workflow and deployment model of web with the performance of native code and GPU acceleration. https://github.com/nem0/LumixEngine LumixEngine is a MIT licensed 3D engine. The main goal is performance and Unity-like usability. https://github.com/podgorskiy/KeplerOrbits KeplerOrbits - Tool that calculates positions of celestial bodies using their orbital elements. Web Demo https://github.com/cyberegoorg/cetech - CETech is Data-Driven game engine and toolbox inspired by Bitsquid/Stingray engine. https://github.com/jpcy/ioq3-renderer-bgfx - A renderer for ioquake3 written in C++ and using bgfx to support multiple rendering APIs. http://makingartstudios.itch.io/dls - DLS the digital logic simulator game. https://github.com/mamedev/mame MAME - Multiple Arcade Machine Emulator Try MAME in Browser! https://blackshift.itch.io/blackshift - Blackshift is a grid-based, space-themed action puzzle game which isn't afraid of complexity — think Chip's Challenge on crack. https://eheitzresearch.wordpress.com/415-2/ - Real-Time Polygonal-Light Shading with Linearly Transformed Cosines, Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt, ACM SIGGRAPH 2016 http://www.dogbytegames.com/dead_venture.html - Dead Venture is a new Drive 'N Gun game where you help a handful of survivals reach the safe haven: a military base on a far island. License (BSD 2-clause) Copyright 2010-2016 Branimir Karadzic. All rights reserved.  https://github.com/bkaradzic/bgfx  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:     1. Redistributions of source code must retain the above copyright notice,       this list of conditions and the following disclaimer.     2. Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.  THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDER ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bkaradzic/bgfx"	"A cross-platform rendering library. [BSD]"	"true"
"Graphics"	"Cairo"	"http://www.cairographics.org/"	"A 2D graphics library with support for multiple output devices. [LGPL2 or Mozilla MPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"cairographics.org News Download Documentation Contact Examples Latest news: 2015-12-10: cairo 1.15.2 release available 2015-12-09: cairo 1.14.6 release available Cairo is a 2D graphics library with support for multiple output devices. Currently supported output targets include the X Window System (via both Xlib and XCB), Quartz, Win32, image buffers, PostScript, PDF, and SVG file output. Experimental backends include OpenGL, BeOS, OS/2, and DirectFB. Cairo is designed to produce consistent output on all output media while taking advantage of display hardware acceleration when available (eg. through the X Render Extension). The cairo API provides operations similar to the drawing operators of PostScript and PDF. Operations in cairo including stroking and filling cubic Bézier splines, transforming and compositing translucent images, and antialiased text rendering. All drawing operations can be transformed by any affine transformation (scale, rotation, shear, etc.) Cairo is implemented as a library written in the C programming language, but bindings are available for several different programming languages. Cairo is free software and is available to be redistributed and/or modified under the terms of either the GNU Lesser General Public License (LGPL) version 2.1 or the Mozilla Public License (MPL) version 1.1 at your option. Last edited Thu Nov 20 20:05:09 2014"	"null"	"null"	"A 2D graphics library with support for multiple output devices. [LGPL2 or Mozilla MPL]"	"true"
"Graphics"	"GLFW"	"https://github.com/glfw/glfw"	"A simple, cross-platform OpenGL wrangling library. [zlib/libpng]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2062"	"245"	"563"	"GitHub - glfw/glfw: A multi-platform library for OpenGL, window and input Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 245 Star 2,062 Fork 563 glfw/glfw Code Issues 106 Pull requests 16 Wiki Pulse Graphs A multi-platform library for OpenGL, window and input http://www.glfw.org/ 3,025 commits 12 branches 9 releases 73 contributors C 88.3% Objective-C 9.2% CMake 1.4% Mathematica 1.1% C Objective-C CMake Mathematica Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags capturecursor ci horrible-keyname-hacks inithint latest master mirroring per-monitor-dpi thirteen touch transparent-window xsync Nothing to show 3.2 3.1.2 3.1.1 3.1 3.0.4 3.0.3 3.0.2 3.0.1 3.0 Nothing to show New pull request Latest commit 4888d7d Jul 14, 2016 elmindreda Documentation work … [ci skip] Permalink Failed to load latest commit information. .github Documentation work Jul 14, 2016 CMake Add check for VULKAN_SDK envvar on Windows Mar 5, 2016 deps Fix matrix rotation regression Jul 13, 2016 docs Documentation work Jul 14, 2016 examples Update email address Jun 1, 2016 include/GLFW Documentation work Jul 6, 2016 src Win32: Fix GLFW_MAXIMIZED ignored by first window Jul 12, 2016 tests Fix test program line endings Jun 15, 2016 .appveyor.yml Remove CRLF line endings Feb 18, 2016 .gitignore Add Xcode CMake output patterns to .gitignore Mar 6, 2016 .travis.yml Add build directory for CI Feb 4, 2016 CMakeLists.txt Start 3.2.1 Jun 15, 2016 COPYING.txt Update email address Jun 1, 2016 README.md Documentation work Jul 14, 2016 cmake_uninstall.cmake.in Formatting. Aug 19, 2012 README.md GLFW Introduction GLFW is a free, Open Source, multi-platform library for OpenGL, OpenGL ES and Vulkan application development. It provides a simple, platform-independent API for creating windows, contexts and surfaces, reading input, handling events, etc. The current stable release is version 3.2. See the downloads page for details and files, or fetch the latest branch, which always points to the latest stable release. Each release starting with 3.0 also has a corresponding annotated tag. This is version 3.2.1, which is not yet described. If you are new to GLFW, you may find the tutorial for GLFW 3 useful. If you have used GLFW 2 in the past, there is a transition guide for moving to the GLFW 3 API. Compiling GLFW GLFW itself needs only the headers and libraries for your window system. It does not need the headers for any context creation API (WGL, GLX, EGL, NSGL) or rendering API (OpenGL, OpenGL ES, Vulkan) to enable support for them. GLFW supports compilation on Windows with Visual C++ 2010 and later, MinGW and MinGW-w64, on OS X with Clang and on Linux and other Unix-like systems with GCC and Clang. It will likely compile in other environments as well, but this is not regularly tested. There are also pre-compiled Windows binaries available for all compilers supported on that platform. See the compilation guide in the documentation for more information. Using GLFW See the building application guide guide in the documentation for more information. System requirements GLFW supports Windows XP and later, OS X 10.7 Lion and later, and Linux and other Unix-like systems with the X Window System. Experimental implementations for the Wayland protocol and the Mir display server are available but not yet officially supported. See the compatibility guide in the documentation for more information. Dependencies The examples and test programs depend on a number of tiny libraries. These are located in the deps/ directory. getopt_port for examples with command-line options TinyCThread for threaded examples An OpenGL 3.2 core loader generated by glad for examples using modern OpenGL linmath.h for linear algebra in examples Vulkan headers for Vulkan tests The Vulkan example additionally requires the Vulkan SDK to be installed, or it will not be included in the build. The documentation is generated with Doxygen. If CMake does not find Doxygen, the documentation will not be generated. Reporting bugs Bugs are reported to our issue tracker. Please check the contribution guide for information on what to include when reporting a bug. Changelog Bugfix: Single compilation unit builds failed due to naming conflicts (#783) Bugfix: The range checks for glfwSetCursorPos used the wrong minimum (#773) [Win32] Bugfix: glfwSetClipboardString created an unnecessary intermediate copy of the string [Win32] Bugfix: Examples failed to build on Visual C++ 2010 due to C99 in linmath.h (#785) [Win32] Bugfix: The first shown window ignored the GLFW_MAXIMIZED hint when the process was provided a STARTUPINFO (#780) [GLX] Bugfix: Dynamically loaded entry points were not verified [EGL] Bugfix: Dynamically loaded entry points were not verified Contact The official website for GLFW is glfw.org. There you can find the latest version of GLFW, as well as news, documentation and other information about the project. If you have questions related to the use of GLFW, we have a support forum, and the IRC channel #glfw on Freenode. If you have a bug to report, a patch to submit or a feature you'd like to request, please file it in the issue tracker on GitHub. Finally, if you're interested in helping out with the development of GLFW or porting it to your favorite platform, join us on GitHub or IRC. Acknowledgements GLFW exists because people around the world donated their time and lent their skills. Bobyshev Alexander artblanc arturo Matt Arsenault Keith Bauer John Bartholomew Niklas Behrens Niklas Bergström Doug Binks blanco Martin Capitanio Chi-kwan Chan Lambert Clara Andrew Corrigan Noel Cower Jarrod Davis Olivier Delannoy Paul R. Deppe Michael Dickens Роман Донченко Mario Dorn Jonathan Dummer Ralph Eastwood Siavash Eliasi Michael Fogleman Gerald Franz GeO4d Marcus Geelnard Eloi Marín Gratacós Stefan Gustavson Sylvain Hellegouarch Matthew Henry heromyth Lucas Hinderberger Paul Holden IntellectualKitty Aaron Jacobs Toni Jovanoski Arseny Kapoulkine Osman Keskin Cameron King Peter Knut Christoph Kubisch Eric Larson Robin Leffmann Glenn Lewis Shane Liesegang Eyal Lotem Дмитри Малышев Martins Mozeiko Tristam MacDonald Hans Mackowiak Zbigniew Mandziejewicz Kyle McDonald David Medlock Bryce Mehring Jonathan Mercier Marcel Metz Jonathan Miller Kenneth Miller Bruce Mitchener Jack Moffitt Jeff Molofee Jon Morton Pierre Moulon Julian Møller Kamil Nowakowski Ozzy Andri Pálsson Peoro Braden Pellett Arturo J. Pérez Orson Peters Emmanuel Gil Peyrot Cyril Pichard Pieroman Jorge Rodriguez Ed Ropple Aleksey Rybalkin Riku Salminen Brandon Schaefer Sebastian Schuberth Matt Sealey SephiRok Steve Sexton Systemcluster Yoshiki Shibukawa Dmitri Shuralyov Daniel Skorupski Bradley Smith Julian Squires Johannes Stein Justin Stoecker Elviss Strazdins Nathan Sweet TTK-Bandit Sergey Tikhomirov Arthur Tombs Ioannis Tsakpinis Samuli Tuomola urraka Jari Vetoniemi Ricardo Vieira Nicholas Vitovitch Simon Voordouw Torsten Walluhn Patrick Walton Xo Wang Jay Weisskopf Frank Wille yuriks Santi Zupancic Jonas Ådahl Lasse Öörni All the unmentioned and anonymous contributors in the GLFW community, for bug reports, patches, feedback, testing and encouragement Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/glfw/glfw"	"A simple, cross-platform OpenGL wrangling library. [zlib/libpng]"	"true"
"Graphics"	"Horde3D"	"https://github.com/horde3d/Horde3D"	"A small 3D rendering and animation engine. [EPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"550"	"105"	"190"	"GitHub - horde3d/Horde3D: Horde3D is a small 3D rendering and animation engine. It is written in an effort to create an engine being as lightweight and conceptually clean as possible. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 105 Star 550 Fork 190 horde3d/Horde3D Code Issues 13 Pull requests 1 Pulse Graphs Horde3D is a small 3D rendering and animation engine. It is written in an effort to create an engine being as lightweight and conceptually clean as possible. 41 commits 2 branches 1 release 11 contributors C++ 44.4% C 21.8% HTML 20.0% C# 7.9% Objective-C 2.0% CSS 1.6% Other 2.3% C++ C HTML C# Objective-C CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show 482a4c2afb Nothing to show New pull request Latest commit bf174c5 Nov 14, 2015 horde3d Merge pull request #83 from bheesham/unix … Fix error with UnixMakeFiles.sh Permalink Failed to load latest commit information. CMake Fix error with UnixMakeFiles.sh Nov 13, 2015 Extensions Removed all VS C++ projects and solutions. Feb 11, 2014 Horde3D Added ability to set camera proj matrix Aug 4, 2014 .gitattributes Horde3D 1.0 Beta 5 Sep 6, 2013 .gitignore Merge pull request #36 from zuck/without-vs-solutions Feb 12, 2014 CMakeLists.txt Revert ""Fixed minimal cmake version"" Dec 12, 2014 README.md Revert ""Fixed minimal cmake version"" Dec 12, 2014 README.md Horde3D Horde3D is a 3D rendering engine written in C++ with an effort being as lightweight and conceptually clean as possible. Horde3D requires a fully OpenGL 2.0 compatible graphics card. In terms of DirectX that means a card supporting at least Shader Model 2.0 or higher. Features Modern, cross-platform, shader-based architecture (requires OpenGL 2.0+) Lightweight, non-intrusive design with very few dependencies, avoiding complexity where possible C-style API for easy usage from virtually any programming language Resource management Garbage collected resources, loaded from virtually any type of data stream Hot-reloading of resources for more increased productivity during development Access to vertex data for collision detection and interoperability with physics engines Übershader-based, customizable rendering pipeline Hot-reloading of pipelines for rapid testing of different rendering techniques Support for post processing effects like bloom, DOF or motion blur Support for almost all forward, deferred and High Dynamic Range rendering techniques Support for real-time reflections and other techniques that require several cameras Real-time shadows using Parallel Split Shadow Maps (PSSM) Particle systems that can cast shadows and have effects like motion blur Unified scene system World, models and skeletons are scene nodes instead of special objects Frustum culling based on spatial graph Hardware occlusion culling Level of detail for model geometry and materials Unified, low-level animation system Key frame animation for joints and meshes Skeletal animation with up to 4 weights per vertex for articulated models Layered animation blending and mixing using masks and additive channels Morph targets for facial animation and lip synchronization Access to joint data for dynamic animations and ragdoll physics Content Pipeline Mixture of binary and XML formats for best tradeoff between performance and productivity Pipeline, material and scene descriptions are XML Model and animation are binary for maximum performance Textures are common image formats (DDS, PNG, JPEG, etc.) COLLADA Converter for importing assets from many common DCC tools Calculation of tangent space basis for normal mapping Optimization of geometry for GPU post-transform vertex cache Editor for composing scenes, developing shaders and rendering techniques Building You need to have a C++ compiler and CMake 2.4+ installed. CMake is a meta-build system, e.g. it creates Makefiles or Visual Studio files using Generators. The main ways to use CMake are cmake-gui (Qt Interface), ccmake (Curses Interface) and cmake (Commandline Interface). Instructions for commonly used generators: Qt Creator: open CMakeLists.txt as new project, follow the instructions, hit build and you're done. Visual Studio: start cmake-gui, choose OGDF as source path, build-vs as build path, press generate, open build-vs\Horde3D.sln and start compiling. Makefiles: open up a terminal, navigate to the repository and run mkdir build-make && cd build-make && cmake -G ""Unix Makefiles"" .. && make (hint: use export JOBS=MAX to speed things up). Ninja: open up a terminal, navigate to the repository and run mkdir build-ninja && cd build-ninja && cmake -G ""Ninja"" .. && ninja. What's next Here are some quick links to help you get started: Homepage Introduction Tutorial Reference Documentation Community Forums Community Wiki License Horde3D is licensed under the Eclipse Public License v1.0 (EPL). The EPL is a quite liberal license and has fewer restrictions than the popular LGPL. Basically it allows you to use Horde3D in free and commercial projects as long as you contribute improvements like bug fixes, optimizations and code refactorings back to the community. The EPL allows static linking and is not viral; hence it does not affect any other modules of your application. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/horde3d/Horde3D"	"A small 3D rendering and animation engine. [EPL]"	"true"
"Graphics"	"Irrlicht"	"http://irrlicht.sourceforge.net/"	"A high performance realtime 3D engine written in C++. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Irrlicht Engine - A free open source 3D engine API| Chat| Forum| Home Welcome to the Irrlicht Engine The Irrlicht Engine is an open source high performance realtime 3D engine written in C++. It is completely cross-platform, using D3D, OpenGL and its own software renderers, and has all of the state-of-the-art features which can be found in commercial 3d engines. We've got a huge active community, and there are lots of projects in development that use the engine. You can find enhancements for Irrlicht all over the web, like alternative terrain renderers, portal renderers, exporters, world layers, tutorials, editors, language bindings for java, perl, ruby, basic, python, lua, and so on. And best of all: It's completely free. 09-Jul-16Irrlicht 1.8.4 release A new bugfix release for the Irrlicht 1.8 series. This one is mostly about getting it to compile with gcc5 and c++11. Visit the forum thread for more info about changes. Download the zip here. Enjoy! By CuteAlien | Posted in News, Releases | Comments Off on Irrlicht 1.8.4 release 11-May-16Release: “Worlds” “Worlds” is an action / adventure / stealth game made with Irrlicht, which will plunge you in many strange worlds. The game offers a lot of liberty, and you’ll find out that there’s often more than one way to finish your mission. It features: – A deep and intricate story, with plenty of surprises and odd characters – 8 amazing worlds, with their own backgrounds and atmospheres – Lots of possibilities; stealth, action, RPG… You choose the way you want to accomplish your objectives – Witness the consequences of your actions when coming back on a world – Tons of weapons, equipment and powers including grenades, medpaks, X-RAY Goggles, Analyzer, teleportation power, stop-time power… Check the forum thread for more info. By CuteAlien | Posted in Projects | Comments Off on Release: “Worlds” 11-May-16Release: “Nightork Adventures – Beyond the Moons of Shadalee” “Nightork Adventures – Beyond the Moons of Shadalee” has been released! It’s an arcade shooter game, made with the Irrlicht Engine. You fly with a spaceship through procedurally generated caves and fight against evil demons using magic colors. There is a campaign of 30 levels and 6 boss monsters. It also comes with a level editor, so you can create your own caves and missions. You can find further information in the forum thread. By CuteAlien | Posted in Projects | Comments Off on Release: “Nightork Adventures – Beyond the Moons of Shadalee” 22-Jan-16Back from hack The Irrlicht homepage got hacked last weekend. A backdoor was installed in our wordpress installation and invisible spam-links got added all over the place. This was possible as we hadn’t updated our WordPress installation for too long. Most things are now back in place. But we will no longer allow comments on posts (we have the forum for that) and we no longer support IRC chatting over the homepage (please use IRC clients for that instead). The attackers likely got access to the database which is also used for the forums. So please update your forum password. By CuteAlien | Posted in Uncategorized | Comments Off on Back from hack 13-Sep-15Irrlicht 1.8.3 released Unfortunately a bug had slipped into 1.8.2 which prevented Irrlicht from compiling with gcc5. Sorry for that, but here’s a new release which should fix it: Irrlicht version 1.8.3. Same forum thread as for the last release. Have fun! By CuteAlien | Posted in News, Releases | Comments (1) 30-Aug-15Irrlicht 1.8.2 released Irrlicht version 1.8.2 is now available. It is a bugfix release, please check this forum thread for a list of changes. Happy downloading! By CuteAlien | Posted in News, Releases | Comments Off on Irrlicht 1.8.2 released 27-Feb-15Sci-Fi racer coded with Irrlicht got open sourced The complete source code for the Sci-Fi racer H-Craft Championship is now availabe at irrgheist.com/hcraftsource. It uses the same liberal zlib license like Irrlicht. The game runs on Window, Linux and Android. Check this thread in the forum to discuss the sources. If you want to take a quick look at the game itself you can find screenshots, videos, binaries and an Android version at irrgheist.com/games and there is also another forum thread about the game. By CuteAlien | Posted in Projects | Comments Off on Sci-Fi racer coded with Irrlicht got open sourced 22-Feb-15IRR RPG Builder release alpha 0.31 IrrRPG Builder is a simple and powerful tool designed to help people new to programming and/or players who want to create RPG games without advanced knowledge in programming languages. -Now available for Windows in a setup package! -Basic projectile system implemented! -Implemented a experimental shadow mapping system (XEffect) (Still need room for performance improvement, got around 30fps on Intel integrated now) -Improved the configuration panel GUI and added more options! -Default player controls can be set via the configuration panel! -Default format for terrain tiles meshes save can be set via the configuration panel! The user as a format choice between .OBJ (Wavefront), .DAE (Collada) and .B3D (Blitz 3D) -Default player title picture can be set from the configuration panel -Default player project can be set from the configuration panel! Check the forum thread for more info! By CuteAlien | Posted in Projects | Comments Off on IRR RPG Builder release alpha 0.31 16-Dec-13Irrlicht 1.8.1 makefile version number fix The zip-file for Irrlicht 1.8.1 got uploaded once more. As our watchful forum member ent1ty noticed the version number in the Makefile had still been set to 1.8.0. Which resulted in wrong library names on Linux for the shared library. No other changes since last upload. Thanks for the report and sorry for the inconvenience this has caused. By CuteAlien | Posted in News, Releases | Comments Off on Irrlicht 1.8.1 makefile version number fix 08-Dec-13Monthly Screenshot Contest – November 2013 Here is the winner of the Screenshot of the Month contest for November: SteffL with his “Star Sonata 2” screenshot. As always, you can find the screenshot and all contestants in the forum and the gallery. By | Posted in Contests, News | Tagged 2013, competition, Jeffl, month, November, screenshot of the month, sotm, star sonata, star sonata2 | Comments Off on Monthly Screenshot Contest – November 2013 « Older posts Engine News Downloads Features Tools Contributing SF project page Community Forums Projects Wiki Documentation API Tutorials License FAQ Contact Authors Impressum Search"	"null"	"null"	"A high performance realtime 3D engine written in C++. [zlib]"	"true"
"Graphics"	"magnum"	"https://github.com/mosra/magnum"	"C++11 and OpenGL 2D/3D graphics engine. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1152"	"117"	"112"	"GitHub - mosra/magnum: C++11/C++14 and OpenGL graphics engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 117 Star 1,152 Fork 112 mosra/magnum Code Issues 24 Pull requests 1 Pulse Graphs C++11/C++14 and OpenGL graphics engine http://mosra.cz/blog/magnum.php 4,860 commits 11 branches 8 releases 13 contributors C++ 86.4% C 8.2% CMake 4.2% GLSL 0.7% Objective-C 0.2% Shell 0.1% Other 0.2% C++ C CMake GLSL Objective-C Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags android ci-updates compatibility cpp14 glfw-travis jni master multiwindow rigidbody-old rigidbody vulkan Nothing to show snapshot-2015-05 snapshot-2015-05-compatibility snapshot-2014-06 snapshot-2014-06-compatibility snapshot-2014-01 snapshot-2014-01-compatibility snapshot-2013-10 snapshot-2013-08 Nothing to show New pull request Latest commit 9b74425 Jul 4, 2016 mosra Don't use deprecated Corrade functionality. Permalink Failed to load latest commit information. doc Implemented *Framebuffer::copyImage() and copySubImage(). Jun 19, 2016 modules Introduce BUILD_MULTITHREADED CMake option. Jun 18, 2016 package package: build GL tests also on non-desktop ES builds. Jun 18, 2016 src Don't use deprecated Corrade functionality. Jul 4, 2016 toolchains @ 587043d Updated toolchains submodule. Jun 16, 2016 .gitignore Added Debian packaging temporaries to .gitignore. Nov 16, 2015 .gitmodules Added toolchains submodule. Feb 8, 2012 .travis.yml package/ci: initial Travis CI configuration. Sep 20, 2015 CMakeLists.txt Use WindowlessEglApplication for windowless apps on non-desktop GLES. Jun 18, 2016 CONTRIBUTING.md Hell, this project is big. Feb 5, 2016 COPYING Hell, this project is big. Feb 5, 2016 CREDITS.md Updated credits. Apr 22, 2016 Doxyfile Added \experimental Doxygen tag. Apr 18, 2016 DoxygenLayout.xml doc: show include for each class. Jan 11, 2014 README.md Modern CMake usage: bump minimal version to 2.8.12. Mar 17, 2016 README.md Magnum is 2D/3D graphics engine written in C++11/C++14 and modern OpenGL. Its goal is to simplify low-level graphics development and interaction with OpenGL using recent C++11/C++14 features and to abstract away platform-specific issues. DESIGN GOALS 2D is not an ugly stepchild Many engines out there were created as pure 2D or 3D and the alternative is usually just an afterthought, if it is present at all. If you want to do your next project in 2D only, you have to either relearn another engine from scratch or emulate it in 3D, leaving many things overly complicated. Magnum treats 2D equivalently to 3D so you can reuse what you already learned for 3D and even combine 2D and 3D in one project. Forward compatibility If newer technology makes things faster, simpler or more intuitive, it is the way to go. Magnum by default relies on decent C++11 support and modern OpenGL features and if some feature isn't available, it tries to emulate it using older functionality. However, you are not restricted to use the older functionality directly, if you really want to. Intuitive, but not restrictive API Scripting languages are often preferred to C/C++ because they are designed to have less complicated APIs and less boilerplate code. Magnum is designed with intuitivity in mind, but also with speed and static checks that strongly-typed native code offers. It wraps OpenGL into less verbose and more type-safe API, which is easier to use. Usually the most common way is the most simple, but if you need full control, you can have it. Extensible and replaceable components If you want to use different mathematical library for specific purposes, that new windowing toolkit, your own file formats or another physics library, you can. Conversion of math structures between different libraries can be done on top of pre-made skeleton classes, support for file formats is done using plugins and platform support is done by writing simple wrapper class. SUPPORTED PLATFORMS Graphics APIs: OpenGL 2.1 through 4.5, core profile functionality and modern extensions OpenGL ES 2.0, 3.0, 3.1 and extensions to match desktop OpenGL functionality WebGL 1.0, 2.0 and extensions to match desktop OpenGL functionality Platforms: Linux and embedded Linux (natively using GLX/EGL and Xlib or through SDL2 or GLUT toolkit) Windows natively or using ANGLE (through SDL2 or GLUT toolkit) OS X (through SDL2 toolkit) iOS (through SDL2 toolkit) Android 2.3 (API Level 9) and higher Windows RT (Store/Phone) using ANGLE (through SDL2 toolkit) Google Chrome (through Native Client, both newlib and glibc toolchains are supported) HTML5/JavaScript (through Emscripten) FEATURES Actively maintained Doxygen documentation with tutorials and examples. Snapshot is available at http://mosra.cz/blog/magnum-doc/. Vector and matrix library with implementation of complex numbers, quaternions and their dual counterparts for representing transformations. Classes wrapping OpenGL using RAII principle and simplifying its usage with direct state access and automatic fallback for unavailable features. Extensible scene graph which can be modified for each specific usage. Plugin-based data exchange framework, tools for manipulating meshes, textures and images. Pre-made shaders, primitives and other tools for easy prototyping and debugging. INSTALLATION You can either use packaging scripts, which are stored in package/ subdirectory, or compile and install everything manually. Note that Magnum documentation contains more comprehensive guide for building, packaging and crosscompiling. Minimal dependencies C++ compiler with good C++11 support. Compilers which are tested to have everything needed are GCC >= 4.7, Clang >= 3.1 and MSVC 2015. On Windows you can also use MinGW-w64. GCC 4.6, 4.5, 4.4 and MSVC 2013 support involves some ugly workarounds and thus is available only in compatibility branch. CMake >= 2.8.12 Corrade - Plugin management and utility library. You can get it at https://github.com/mosra/corrade. Note that full feature set is available only on GCC 4.8.1 and Clang 3.1. Compilation, installation The library (for example with support for SDL2 applications) can be built and installed using these four commands: mkdir -p build && cd build cmake .. \     -DCMAKE_INSTALL_PREFIX=/usr \     -DWITH_SDL2APPLICATION=ON make make install  See Doxygen documentation for more information about enabling or disabling additional features and targeting different platforms such as OpenGL ES. Building and running unit tests If you want to build also unit tests (which are not built by default), pass -DBUILD_TESTS=ON to CMake. Unit tests use Corrade's TestSuite framework and can be run using ctest --output-on-failure  in build directory. Everything should pass ;-) Building documentation The documentation is written in Doxygen (version 1.8 with Markdown support is used, but older versions should do good job too) and additionally uses Graphviz for class diagrams and TeX for math formulas. The documentation can be build by running: doxygen  in root directory (i.e. where Doxyfile is). Resulting HTML documentation will be in build/doc/ directory. You might need to create build/ directory if it doesn't exist yet. GETTING STARTED The Doxygen documentation has a thorough guide how to start using Magnum in your project. RELATED PROJECTS The engine itself is kept as small as possible with only little dependencies. Additional functionality, often depending on external libraries, is provided in separate repositories. Corrade -- main Magnum dependency, multiplatform utility library: https://github.com/mosra/corrade Magnum Bootstrap -- bootstrap projects for many use cases, helping you get up and running in no time: https://github.com/mosra/magnum-bootstrap Magnum Plugins -- various importer plugins for image, font, audio and 3D model formats is at https://github.com/mosra/magnum-plugins Magnum Integration -- integration with various external math and physics, get it at https://github.com/mosra/magnum-integration Magnum Examples -- examples of engine usage, varying from simple Hello World-like example to more advanced applications, such as viewer for complex 3D models. See it at https://github.com/mosra/magnum-examples Magnum Extras -- playground for testing new APIs, specialized stuff that doesn't necessarily need to be a part of main Magnum repository or mutually exclusive functionality: https://github.com/mosra/magnum-extras libRocket integration -- integrates Magnum as rendering backend into libRocket GUI library: https://github.com/miguelmartin75/Magnum-libRocket Magnum Inspector -- Gtk-based inspector window running alongside Magnum https://github.com/wivlaro/magnum-inspector CONTACT Want to learn more about the library? Found a bug or want to tell me an awesome idea? Feel free to visit my website or contact me at: Website -- http://mosra.cz/blog/magnum.php GitHub -- https://github.com/mosra/magnum Gitter -- https://gitter.im/mosra/magnum IRC -- join #magnum-engine channel on freenode Google Groups -- https://groups.google.com/forum/#!forum/magnum-engine Twitter -- https://twitter.com/czmosra E-mail -- mosra@centrum.cz Jabber -- mosra@jabbim.cz CREDITS See CREDITS.md file for details. Big thanks to everyone involved! LICENSE Magnum is licensed under MIT/Expat license, see COPYING file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mosra/magnum"	"C++11 and OpenGL 2D/3D graphics engine. [MIT]"	"true"
"Graphics"	"website"	"http://mosra.cz/blog/magnum.php"	"C++11 and OpenGL 2D/3D graphics engine. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Magnum - C++11 and OpenGL graphics engine | the place of mosra News RSS RSS - comments Projects Magnum Corrade Kompas HeyTrack Contact Twitter GitHub Magnum - C++11 and OpenGL graphics engine Magnum is 2D/3D graphics engine written in C++11/C++14 and modern OpenGL. Its goal is to simplify low-level graphics development and interaction with OpenGL using recent C++11 features and to abstract away platform-specific issues. MagnumDownload latest Design goals 2D is not an ugly stepchild Many engines out there were created as pure 2D or 3D and the alternative is usually just an afterthought, if it is present at all. If you want to do your next project in 2D only, you have to either relearn another engine from scratch or emulate it in 3D, leaving many things overly complicated. Magnum treats 2D equivalently to 3D so you can reuse what you already learned for 3D and even combine 2D and 3D in one project. Forward compatibility If newer technology makes things faster, simpler or more intuitive, it is the way to go. Magnum by default relies on decent C++11 support and modern OpenGL features and if some feature isn't available, it tries to emulate it using older functionality. However, you are not restricted to use the older functionality directly, if you really want to. Intuitive, but not restrictive API Scripting languages are often preferred to C/C++ because they are designed to have less complicated APIs and less boilerplate code. Magnum is designed with intuitivity in mind, but also with speed and static checks that strongly-typed native code offers. It wraps OpenGL into less verbose and more type-safe API, which is easier to use. Usually the most common way is the most simple, but if you need full control, you can have it. Extensible and replaceable components If you want to use different mathematical library for specific purposes, that new windowing toolkit, your own file formats or another physics library, you can. Conversion of math structures between different libraries can be done on top of pre-made skeleton classes, support for file formats is done using plugins and platform support is done by writing simple wrapper class. Supported platforms Graphics APIs: OpenGL 2.1 through 4.5, core profile functionality and modern extensions OpenGL ES 2.0, 3.0, 3.1 and extensions to match desktop OpenGL functionality WebGL 1.0 and extensions to match desktop OpenGL functionality Platforms: Linux and embedded Linux (natively using GLX/EGL and Xlib or through GLUT or SDL2 toolkit) Windows (through GLUT or SDL2 toolkit) OS X (through SDL2 toolkit, thanks to Miguel Martin and others) Google Chrome (through Native Client, both newlib and glibc toolchains are supported) HTML5/JavaScript (through Emscripten) Android Features Vector and matrix library with implementation of complex numbers, quaternions and their dual counterparts for representing transformations. Classes wrapping OpenGL using RAII principle and simplifying its usage with direct state access and automatic fallback for unavailable features. Extensible scene graph which can be modified for each specific usage. Plugin-based data exchange framework, tools for manipulating meshes, textures and images. Pre-made shaders, primitives and other tools for easy prototyping and debugging. See complete feature list for more information. You might want to read also official project announcement or notes from latest May 2015 release. Related projects The engine itself is kept as small as possible with only little dependencies. Additional functionality, often depending on external libraries, is provided in separate repositories -- integration with various external math and physics libraries, various importer plugins for image, audio and 3D model formats and also examples of engine usage, varying from simple Hello World-like example to more advanced applications, such as viewer for complex 3D models. There is also repository with bootstrap projects for many use cases, helping you get up and running in no time. Showcase Magnum is currently used in two small games (one of which is still unannounced) and the functionality is demonstrated in various examples. See showcase page for images and live applications. Getting started Documentation is available for online viewing, you can also generate it directly from the source code, see above download instructions for more information. The documentation has a thorough guide how to start using Magnum in your project. License Magnum is licensed under MIT/Expat license: Copyright © 2010, 2011, 2012, 2013, 2014, 2015 Vladimír Vondruš <mosra@centrum.cz> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Categories IT Graphics Tag Cloud A Lonely Apple ArchLinux Blender C++ CMake Corrade Git GP2X HeyTrack Inkscape Juice KDE Kompas Magnum MyPaint OpenGL Orange Web Engine PHP Qt webdesign The place of mosra. Design and content © Vladimír Vondruš, 2010-2015. Website runs on Orange 2 engine, © Vladimír Vondruš, 2006-2010. Send comments, criticism, threatening letters and hoaxes via e-mail (mosra@centrum.cz), Twitter (@czmosra) or Jabber (mosra@jabbim.cz). Elektronika Petrů | Penzion Cihelna"	"null"	"null"	"C++11 and OpenGL 2D/3D graphics engine. [MIT]"	"true"
"Graphics"	"Ogre 3D"	"http://www.ogre3d.org/"	"A scene-oriented, real-time, flexible 3D rendering engine (as opposed to a game engine) written in C++. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OGRE - Open Source 3D Graphics Engine | Home of a marvelous rendering engine News About What version to choose? Features Team Download Download OGRE Tools We Recommend Archives Developers HW & SW Requirements Submit Patch or Bug / JIRA Addons Continuous Integration Documentation API Reference Books Manual Wiki Support Support Channels Forum Sponsors Donations Contact Gallery Select Page OGRE3D Since 2001, OGRE has grown to become one of the most popular open-source graphics rendering engines, and has been used in a large number of production projects, in such diverse areas as games, simulators, educational software, interactive art, scientific visualisation, and others. Features  Cross Platform Support OGRE supports Windows (all major versions), Linux, OSX, Android, iOS, Javascript (via EMScripten), Windows Phone (Sponsored by Microsoft) and WinRT. Furthermore OGRE was ported to PS3 and Xbox360 for several titles.  Open source (MIT License) Ogre is released under the MIT License, which is a permissive open source license. The only condition is that you distribute the license text included in our distribution with any software that uses OGRE. i Documentation Learn OGRE using our community supported Wiki. Of course the OGRE team provides official documentation in form of the OGRE Manual and API documentation. v Support and community There are several support resources that you will want to consult when you have a problem: Forums – The primary support mechanism as the forums are populated with a large number of experienced users who are always happy to help. Addon Forums – The primary support mechanism for the various Ogre addons maintained by the community. Wiki – This is a repository of tutorials and reference knowledge which you should definitely consult if you need a hint. IRC – We have an IRC channel #ogre3d on irc.freenode.net. Ogre Progress Report: March 2016 by Matias Goldberg | March 14, 2016 | News | 0 Comments Whoa! Last time I (Matias) posted, we had a different website 🙂 What I’ve been working on: I’ve started working on “Compute Shaders” (CS). They have been blocking future progress for far too long. They are required for modern techniques such as... Read More New team member: Eugene Golushkov by spacegaier | March 13, 2016 | News | 0 Comments As many have already noticed, we have a new Ogre team member for already a few weeks now, so it is finally time to official announce this great news: Eugene Golushkov (forum account: Eugene) has joined the ranks of the core team and is currently focusing on the DX11... Read More Google Summer of Code Application 2016 by spacegaier | February 19, 2016 | News | 0 Comments In a few hours the deadline for organizations to apply for the Google Summer of Code 2016 will end. And of course we have submitted our application to participate again in this great project. One part of the application is an ideas list that proposes some interesting... Read More Ogre Steam Sales List by spacegaier | February 18, 2016 | News | 0 Comments Getting actual sales numbers for game titles is often difficult and unfortunately, we haven’t found a magic divining rod to get those numbers (yet), but with services such as SteamSpy it is at least possible to get a rough estimate for the leading game sales... Read More Ogre Progress Report: December 2015 by Matias Goldberg | January 1, 2016 | News | 0 Comments Merry Christmas and Happy New Year! If you don’t celebrate any of those two, then don’t worry. Best wishes to you too! We’re not dead. Just been busy, and very busy. First of all, I need to clarify that Ogre 2.1 is very stable. Several users in our... Read More Showcase Jack Kaene Dungeons Torchlight 2 Torchlight Ankh Venetica Zero Gear Garshap The Book Of Unwritten Tales Zombie Driver Shadows Heretic Kingdoms Testimonials Here’s a few examples of what people have been saying about OGRE: “We are currently using Ogre3D in our naval simulator. After trying other 3d graphics engines, Ogre3D was by far the best for a good combination of qualities: clean and understandable code, excellent documentation, and a great community. Those three characteristics make me choose it and so far, after almost a year and a half, I have never regretted that decision. Ogre3D has helped us a lot by speeding up the prototyping phase, testing new techniques for the physics algorithms really quickly, and, as part of my Argo Engine, serving really well as the presentation module.”Alvaro Pereyra Rabanal Independent Consultant , Peruvian Navy “Ogre’s complete feature set, along with the very well designed and documented API made it the perfect choice for our upcoming titles. The engine enables us to use cutting edge technology without having to lay out hundreds of thousands of dollars for licensing fees which is invaluable for small teams on a tight budget. As questions on the forums are never left unanswered, the support also leaves little to be desired. And if there is still something you need which you cannot do yourself, there’s always Torus Knot Software around to help you.”Thorsten Lange https://www.deck13.de/, Deck13 Interactive GmbH “Ogre is a shining beacon of open-source development. Boasting an efficient and versatile rendering engine, a clean, elegant API and a supportive community that leaves no question unanswered, Ogre offers a product which outperforms leading commercial rendering engines. Ogre has proven itself as an enabler for rapid 3D application development.”Development Team 3DNA When we were designing Blink 3D we knew that in order to take Web 3D to the next level we needed a high performance cutting edge graphics engine. In our search we examined and instantly discarded a number of respected graphics engines both commercial and open source. When we looked at Ogre the bar was instantly raised, it easily fulfilled all our criteria and more. The clean, extensible, object oriented architecture was well suited to our needs. Some open source projects often consist of cryptic, un-maintainable, spaghetti code. The thing I like most about Ogre, is that I do not feel compelled to have a shower every time I touch the code.Clive Jackson CEO, Pelican Crossing, Inc We use OGRE as a rendering engine to develop the webshop of the future. Imagine a real store where you can go through the courses and view the products. We are working on a prototype of a new online shop software, realising a totally new shopping experience. Thanks a lot for the library.Philipp v. d. Born Compredia GmbH To the seasoned developer OGRE looks different. It is like the carbon steel knife my friend uses to cut sushi in his restaurant. Deceivingly simple, yet a very potent tool in the hands of a craftsman. A single blade, a single purpose. The Zen of 3D engines, if there ever was one.Kai-Peter Backman ShortHike.com During the development of Supremacy: Four Paths to power I had the pleasure of using Ogre to create the particle effects and GUI functionality our game needed. Due to its object-oriented design, it was easy to pick up Ogre and start generating functional content quickly. For example, if you can learn how to use one type of particle generator in Ogre, you already know 90% of what you need to use all of the other types. In addition, creating the scripts for interface components is a breeze since Ogre’s approach is clean and straight-forward. While you can (and we did) manipulate GUI components through code for advanced effects, it is easy to get GUIs up and running quickly. Ogre’s well-documented design makes it great both for prototyping and for customization of a finished product.Vance Vagell Supremacy: Four Paths To Power Ogre has provided us with a solid, reliable base to build a powerful, ground-breaking, commercial platform. It provides a sufficient level of abstraction from the underlying rendersystems to provide a very simple interface balanced with the power to reach down to the hardware should it be necessary. As an accolade to it’s stability, it has performed outstandingly in an embedded environment. The transparent portability has allowed the development under a Microsoft environment and subsequent deployment on Linux with painless ease. With constant ongoing development in a growing, and evermore supportive, community, we have visions of using this engine for many years to come.Chris Pratt Technical Director, AGD Design Ltd Contact Us Name Email Address MessageMessage Submit Sponsors Donations Twitter feed Bugs Contact OGRE Sponsors and Partners Copyright ©2000-2016 Torus Knot Software Ltd All brand names, product names, or trademarks belong to their respective holders."	"null"	"null"	"A scene-oriented, real-time, flexible 3D rendering engine (as opposed to a game engine) written in C++. [MIT]"	"true"
"Graphics"	"OpenSceneGraph"	"http://www.openscenegraph.org/"	"An open source high performance 3D graphics toolkit. [OSGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"524"	"108"	"361"	"GitHub - openscenegraph/OpenSceneGraph: OpenSceneGraph git repository Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 108 Star 524 Fork 361 openscenegraph/OpenSceneGraph Code Issues 0 Pull requests 1 Wiki Pulse Graphs OpenSceneGraph git repository http://www.openscenegraph.org 14,185 commits 13 branches 196 releases 26 contributors C++ 89.7% C 5.4% CMake 2.2% HTML 1.6% Objective-C++ 0.9% Objective-C 0.2% C++ C CMake HTML Objective-C++ Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags OpenSceneGraph-2.6 OpenSceneGraph-2.8 OpenSceneGraph-2.8.2 OpenSceneGraph-3.0 OpenSceneGraph-3.2 OpenSceneGraph-3.4 OpenSceneGraph-osgWidget-dev coverity_scan master osg-cocoa-dev osg remotes/trunk vertex_array_object Nothing to show OpenSceneGraph_1_2_release_revision_2 OpenSceneGraph_1_2_release_revision_1 OpenSceneGraph_1_1_release_revision_1 OpenSceneGraph_1_0_0_release_revision_1 OpenSceneGraph_0_9_9_release_revision_1 OpenSceneGraph_0_9_8_release_revision_2 OpenSceneGraph_0_9_8_release_revision_1 OpenSceneGraph_0_9_7_release_revision_2 OpenSceneGraph_0_9_7_release_revision_1 OpenSceneGraph-3.5.3 OpenSceneGraph-3.5.2 OpenSceneGraph-3.5.1 OpenSceneGraph-3.5.0 OpenSceneGraph-3.4.0 OpenSceneGraph-3.4.0-rc11 OpenSceneGraph-3.4.0-rc10 OpenSceneGraph-3.4.0-rc9 OpenSceneGraph-3.4.0-rc8 OpenSceneGraph-3.4.0-rc7 OpenSceneGraph-3.4.0-rc6 OpenSceneGraph-3.4.0-rc5 OpenSceneGraph-3.4.0-rc4 OpenSceneGraph-3.4.0-rc3 OpenSceneGraph-3.4.0-rc2 OpenSceneGraph-3.4.0-rc1 OpenSceneGraph-3.3.9 OpenSceneGraph-3.3.8 OpenSceneGraph-3.3.7 OpenSceneGraph-3.3.6 OpenSceneGraph-3.3.5 OpenSceneGraph-3.3.4 OpenSceneGraph-3.3.3 OpenSceneGraph-3.3.2 OpenSceneGraph-3.3.1 OpenSceneGraph-3.3.0 OpenSceneGraph-3.2.2 OpenSceneGraph-3.2.2-rc3 OpenSceneGraph-3.2.2-rc2 OpenSceneGraph-3.2.2-rc1 OpenSceneGraph-3.2.1 OpenSceneGraph-3.2.1-rc7 OpenSceneGraph-3.2.1-rc6 OpenSceneGraph-3.2.1-rc5 OpenSceneGraph-3.2.1-rc4 OpenSceneGraph-3.2.1-rc3 OpenSceneGraph-3.2.1-rc2 OpenSceneGraph-3.2.1-rc1 OpenSceneGraph-3.2.0 OpenSceneGraph-3.2.0-rc4 OpenSceneGraph-3.2.0-rc3 OpenSceneGraph-3.2.0-rc2 OpenSceneGraph-3.2.0-rc1 OpenSceneGraph-3.1.10 OpenSceneGraph-3.1.9 OpenSceneGraph-3.1.8 OpenSceneGraph-3.1.7 OpenSceneGraph-3.1.6 OpenSceneGraph-3.1.5 OpenSceneGraph-3.1.4 OpenSceneGraph-3.1.2 OpenSceneGraph-3.1.1 OpenSceneGraph-3.1.0 OpenSceneGraph-3.0.1 OpenSceneGraph-3.0.1-rc3 OpenSceneGraph-3.0.1-rc2 OpenSceneGraph-3.0.1-rc1 OpenSceneGraph-3.0.0 OpenSceneGraph-3.0.0-rc7 OpenSceneGraph-3.0.0-rc6 OpenSceneGraph-3.0.0-rc5 OpenSceneGraph-3.0.0-rc4 OpenSceneGraph-3.0.0-rc3 OpenSceneGraph-3.0.0-rc2 OpenSceneGraph-3.0.0-rc1 OpenSceneGraph-2.9.16 OpenSceneGraph-2.9.15 OpenSceneGraph-2.9.14 OpenSceneGraph-2.9.13 OpenSceneGraph-2.9.12 OpenSceneGraph-2.9.11 OpenSceneGraph-2.9.10 OpenSceneGraph-2.9.9 OpenSceneGraph-2.9.8 OpenSceneGraph-2.9.7 OpenSceneGraph-2.9.6 OpenSceneGraph-2.9.5 OpenSceneGraph-2.9.4 OpenSceneGraph-2.9.3 OpenSceneGraph-2.9.2 OpenSceneGraph-2.9.1 OpenSceneGraph-2.9.0 OpenSceneGraph-2.8.5 OpenSceneGraph-2.8.5-rc4 OpenSceneGraph-2.8.5-rc3 OpenSceneGraph-2.8.5-rc2 OpenSceneGraph-2.8.5-rc1 OpenSceneGraph-2.8.4 OpenSceneGraph-2.8.4-rc3 OpenSceneGraph-2.8.4-rc2 OpenSceneGraph-2.8.4-rc1 Nothing to show New pull request Latest commit 0faebbe Jul 13, 2016 openscenegraph committed on GitHub Merge pull request #105 from marchelbling/compiler-friendly-gles … Moves gles visitors implementation in cpp files Permalink Failed to load latest commit information. CMakeModules fix FindGStreamer.cmake for msys2 mingw Jul 3, 2016 PlatformSpecifics From Adrian Clark, build fix for recent Android NDK using the old And… Dec 18, 2014 applications Added handling of return value Jun 23, 2016 doc/Doxyfiles Removed no longer supported doxygen settings Jun 1, 2016 examples Added osgshadermultiviewport example to test and demonstrate the new … Jun 29, 2016 include Added Optimizer::BufferObjectVisitor and associated BUFFER_OBJECT_SET… Jul 11, 2016 packaging From Alan Dickinson, ""I modified the CPack and CMake files to utilze … Mar 11, 2011 src Moves gles visitors implementation in cpp files Jul 12, 2016 .gitignore GitIgnorePatterns for Visual Studio May 20, 2016 .travis.yml Add coverity scan badge Jun 16, 2016 AUTHORS.txt Updated AUTHORS file Jun 3, 2016 CMakeLists.txt Removed the osgviewerGLUT as GLUT is terrible example of how to build… Jun 21, 2016 CTestConfig.cmake From Jean-Sebastien Guay, updated CTestConfig to point to new cdash.o… Jul 24, 2009 ChangeLog Updated ChangeLog Jun 3, 2016 LICENSE.txt From J.P. Delport, tweak to fix spelling and grammer Apr 10, 2009 NEWS.txt Added 3.4 press release to NEWS.txt May 6, 2016 README.md Uodate README date Jul 5, 2016 runexamples.bat Removed old examples that relied upon deprecated functionality Jun 17, 2016 README.md Introduction Welcome to the OpenSceneGraph (OSG). For up-to-date information on the project, in-depth details on how to compile and run libraries and examples, see the documentation on the OpenSceneGraph website: http://www.openscenegraph.org/index.php/documentation  For support subscribe to our public mailing list or forum, details at: http://www.openscenegraph.org/index.php/support  For the impatient, we've included quick build instructions below, these are are broken down is three parts: 1) General notes on building the OpenSceneGraph 2) OSX release notes 3) iOS release notes If details below are not sufficient then head over to the openscenegraph.org to the Documentation/GettingStarted and Documentation/PlatformSpecifics sections for more indepth instructions. Robert Osfield. Project Lead. 5th July 2016. Section 1. How to build the OpenSceneGraph The OpenSceneGraph uses the CMake build system to generate a platform-specific build environment. CMake reads the CMakeLists.txt files that you'll find throughout the OpenSceneGraph directories, checks for installed dependenciesand then generates the appropriate build system. If you don't already have CMake installed on your system you can grab it from http://www.cmake.org, use version 2.4.6 or later. Details on the OpenSceneGraph's CMake build can be found at: http://www.openscenegraph.org/projects/osg/wiki/Build/CMake  Under unices (i.e. Linux, IRIX, Solaris, Free-BSD, HP-Ux, AIX, OSX) use the cmake or ccmake command-line utils. Note that cmake . defaults to building Release to ensure that you get the best performance from your final libraries/applications. cd OpenSceneGraph cmake . make sudo make install  Alternatively, you can create an out-of-source build directory and run cmake or ccmake from there. The advantage to this approach is that the temporary files created by CMake won't clutter the OpenSceneGraph source directory, and also makes it possible to have multiple independent build targets by creating multiple build directories. In a directory alongside the OpenSceneGraph use: mkdir build cd build cmake ../OpenSceneGraph make sudo make install  Under Windows use the GUI tool CMakeSetup to build your VisualStudio files. The following page on our wiki dedicated to the CMake build system should help guide you through the process: http://www.openscenegraph.org/index.php/documentation/platform-specifics/windows  Under OSX you can either use the CMake build system above, or use the Xcode projects that you will find in the OpenSceneGraph/Xcode directory. See release notes on OSX CMake build below. For further details on compilation, installation and platform-specific information read ""Getting Started"" guide: http://www.openscenegraph.org/index.php/documentation/10-getting-started  Section 2. Release notes on OSX build, by Eric Sokolowsky, August 5, 2008 There are several ways to compile OpenSceneGraph under OSX. The recommended way is to use CMake 2.6 to generate Xcode projects, then use Xcode to build the library. The default project will be able to build Debug or Release libraries, examples, and sample applications. Here are some key settings to consider when using CMake: BUILD_OSG_EXAMPLES - By default this is turned off. Turn this setting on to compile many great example programs. CMAKE_OSX_ARCHITECTURES - Xcode can create applications, executables, libraries, and frameworks that can be run on more than one architecture. Use this setting to indicate the architectures on which to build OSG. Possibilities include ppc, ppc64, i386, and x86_64. Building OSG using either of the 64-bit options (ppc64 and x86_64) has its own caveats below. OSG_BUILD_APPLICATION_BUNDLES - Normally only executable binaries are created for the examples and sample applications. Turn this option on if you want to create real OSX .app bundles. There are caveats to creating .app bundles, see below. OSG_WINDOWING_SYSTEM - You have the choice to use Carbon or X11 when building applications on OSX. Under Leopard and later, X11 applications, when started, will automatically launch X11 when needed. However, full-screen X11 applications will still show the menu bar at the top of the screen. Since many parts of the Carbon user interface are not 64-bit, X11 is the only supported option for OSX applications compiled for ppc64 or x86_64. There is an Xcode directory in the base of the OSG software distribution, but its future is limited, and will be discontinued once the CMake project generator completely implements its functionality. APPLICATION BUNDLES (.app bundles) The example programs when built as application bundles only contain the executable file. They do not contain the dependent libraries as would a normal bundle, so they are not generally portable to other machines. They also do not know where to find plugins. An environmental variable OSG_LIBRARY_PATH may be set to point to the location where the plugin .so files are located. OSG_FILE_PATH may be set to point to the location where data files are located. Setting OSG_FILE_PATH to the OpenSceneGraph-Data directory is very useful when testing OSG by running the example programs. Many of the example programs use command-line arguments. When double-clicking on an application (or using the equivalent ""open"" command on the command line) only those examples and applications that do not require command-line arguments will successfully run. The executable file within the .app bundle can be run from the command-line if command-line arguments are needed. 64-BIT APPLICATION SUPPORT OpenSceneGraph will not compile successfully when OSG_WINDOWING_SYSTEM is Carbon and either x86_64 or ppc64 is selected under CMAKE_OSX_ARCHITECTURES, as Carbon is a 32bit only API. A version of the osgviewer library written in Cocoa is needed. However, OSG may be compiled under 64-bits if the X11 windowing system is selected. However, Two parts of the OSG default distribution will not work with 64-bit X11: the osgviewerWX example program and the osgdb_qt (Quicktime) plugin. These must be removed from the Xcode project after Cmake generates it in order to compile with 64-bit architectures. The lack of the latter means that images such as jpeg, tiff, png, and gif will not work, nor will animations dependent on Quicktime. A new ImageIO-based plugin is being developed to handle the still images, and a QTKit plugin will need to be developed to handle animations. Section 3. Release notes on iOS build, by Thomas Hoghart Run CMake with either OSG_BUILD_PLATFORM_IPHONE or OSG_BUILD_PLATFORM_IPHONE_SIMULATOR set: $ mkdir build-iOS ; cd build-iOS $ ccmake -DOSG_BUILD_PLATFORM_IPHONE_SIMULATOR=YES -G Xcode .. Check that CMAKE_OSX_ARCHITECTURE is i386 for the simulator or armv6;armv7 for the device Disable DYNAMIC_OPENSCENEGRAPH, DYNAMIC_OPENTHREADS This will give us the static build we need for iPhone. Disable OSG_GL1_AVAILABLE, OSG_GL2_AVAILABLE, OSG_GL3_AVAILABLE, OSG_GL_DISPLAYLISTS_AVAILABLE, OSG_GL_VERTEX_FUNCS_AVAILABLE Enable OSG_GLES1_AVAILABLE OR OSG_GLES2_AVAILABLE OR OSG_GLES3_AVAILABLE (GLES3 will enable GLES2 features) Ensure OSG_WINDOWING_SYSTEM is set to IOS Change FREETYPE include and library paths to an iPhone version (OpenFrameworks has one bundled with its distribution) Ensure that CMake_OSX_SYSROOT points to your iOS SDK. Generate the Xcode project Open the Xcode project $ open OpenSceneGraph.xcodeproj Under Sources -> osgDB, select FileUtils.cpp and open the 'Get Info' panel, change File Type to source.cpp.objcpp Here's an example for the command-line: $ cmake -G Xcode \ -D OSG_BUILD_PLATFORM_IPHONE:BOOL=ON \ -D CMAKE_CXX_FLAGS:STRING=""-ftree-vectorize -fvisibility-inlines-hidden -mno-thumb -arch armv6 -pipe -no-cpp-precomp -miphoneos-version-min=3.1 -mno-thumb"" \ -D BUILD_OSG_APPLICATIONS:BOOL=OFF \ -D OSG_BUILD_FRAMEWORKS:BOOL=OFF \ -D OSG_WINDOWING_SYSTEM:STRING=IOS \ -D OSG_BUILD_PLATFORM_IPHONE:BOOL=ON \ -D CMAKE_OSX_ARCHITECTURES:STRING=""armv6;armv7"" \ -D CMAKE_OSX_SYSROOT:STRING=/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.2.sdk \ -D OSG_GL1_AVAILABLE:BOOL=OFF \ -D OSG_GL2_AVAILABLE:BOOL=OFF \ -D OSG_GLES1_AVAILABLE:BOOL=ON \ -D OSG_GL_DISPLAYLISTS_AVAILABLE:BOOL=OFF \ -D OSG_GL_FIXED_FUNCTION_AVAILABLE:BOOL=ON \ -D OSG_GL_LIBRARY_STATIC:BOOL=OFF \ -D OSG_GL_MATRICES_AVAILABLE:BOOL=ON \ -D OSG_GL_VERTEX_ARRAY_FUNCS_AVAILABLE:BOOL=ON \ -D OSG_GL_VERTEX_FUNCS_AVAILABLE:BOOL=OFF \ -D DYNAMIC_OPENSCENEGRAPH:BOOL=OFF \ -D DYNAMIC_OPENTHREADS:BOOL=OFF .  Known issues: When Linking final app against ive plugin, you need to add -lz to the 'Other linker flags' list. Apps and exes don't get created You can only select Simulator, or Device projects. In the XCode project you will see both types but the sdk they link will be the same. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/openscenegraph/OpenSceneGraph"	"An open source high performance 3D graphics toolkit. [OSGPL]"	"true"
"Graphics"	"OpenSubdiv"	"https://github.com/PixarAnimationStudios/OpenSubdiv"	"Pixar's library for evaluating and rendering subdivision surfaces on CPU and GPU. [Modified Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1583"	"294"	"332"	"GitHub - PixarAnimationStudios/OpenSubdiv: An Open-Source subdivision surface library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 294 Star 1,583 Fork 332 PixarAnimationStudios/OpenSubdiv Code Issues 50 Pull requests 8 Pulse Graphs An Open-Source subdivision surface library. http://graphics.pixar.com/opensubdiv 2,071 commits 4 branches 35 releases 33 contributors C++ 90.4% CMake 3.3% GLSL 2.9% HLSL 2.3% Cuda 0.5% C 0.5% Other 0.1% C++ CMake GLSL HLSL Cuda C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2x_patch dev master revert-704-ispc Nothing to show v3_0_5 v3_0_4 v3_0_3 v3_0_2 v3_0_1 v3_0_0 v3_0_0_beta v3_0_0_alpha v3_0_0_RC2 v3_0_0_RC1 v2_6_1 v2_6_0 v2_5_1 v2_5_0 v2_4_1 v2_4_0 v2_3_5 v2_3_4 v2_3_3 v2_3_2 v2_3_1 v2_3_0 v2_2_0 v2_1_0 v2_0_1 v2_0_0 v1_2_4 v1_2_3 v1_2_2 v1_2_1 v1_2_0 v1_1_0 v1_0_0 beta_1_1 ReleaseCandidate_1_0 Nothing to show New pull request Latest commit 6d74e8c Mar 25, 2016 davidgyu Merge branch 'release/v3_0_5' Permalink Failed to load latest commit information. cmake Revert ""Add ISPC limit surface evaluation"" Jul 20, 2015 documentation Release 3.0.5 Mar 25, 2016 examples fix ptex lookup shaders to clamp the patchcoord Mar 10, 2016 opensubdiv Release 3.0.5 Mar 25, 2016 regression add a far performance test Sep 16, 2015 tutorials Fixed far_tutorial_6 refined primvar interpolation Jan 22, 2016 .gitignore Improve stringification of shaders & kernels in build. Jan 3, 2014 .travis.yml fix .travils.yaml to point 15.10 dist Oct 23, 2015 CMakeLists.txt Comment out CMake logic that attempts to copy glfw3 dll's, which fail… Jan 13, 2016 LICENSE.txt Amending Apache license language & file headers. Sep 26, 2013 NOTICE.txt Landing 3.0.0.alpha Sep 5, 2014 OpenSubdivCLA_corporate.pdf update documentation & CLA files to reflect Apache 2.0 move Aug 1, 2013 OpenSubdivCLA_individual.pdf update documentation & CLA files to reflect Apache 2.0 move Aug 1, 2013 README.md update README.md Jun 19, 2015 README.md OpenSubdiv OpenSubdiv is a set of open source libraries that implement high performance subdivision surface (subdiv) evaluation on massively parallel CPU and GPU architectures. This codepath is optimized for drawing deforming subdivs with static topology at interactive framerates. The resulting limit surface matches Pixar's Renderman to numerical precision. OpenSubdiv is covered by the Apache license, and is free to use for commercial or non-commercial use. This is the same code that Pixar uses internally for animated film production. Our intent is to encourage high performance accurate subdiv drawing by giving away the ""good stuff"". Feel free to use it and let us know what you think. For more details about OpenSubdiv, see Pixar Graphics Technologies. master : dev : Documents User Documents Doxygen API Documents Release Notes Forum OpenSubdiv Google Groups Prerequisite For complete information, please refer OpenSubdiv documents: Building with CMake General requirements: Lib (URL) Min Version Note CMake http://www.cmake.org 2.8.6 Required Osd optional requirements: Lib (URL) Min Version Note GLEW http://glew.sourceforge.net 1.9.0 GL backend (Win/Linux only) CUDA http://developer.nvidia.com/cuda-toolkit 4.0 cuda backend TBB https://www.threadingbuildingblocks.org 4.0 TBB backend OpenCL http://www.khronos.org/opencl 1.1 CL backend DX11 SDK http://www.microsoft.com/download/details.aspx?id=6812 DX backend Examples/Documents optional requirements: Lib (URL) Min Version Note GLFW http://www.glfw.org 3.0.0 GL examples Maya SDK http://www.autodesk.com/maya 2013 maya plugin example Ptex https://github.com/wdas/ptex 2.0 ptex viewers Zlib http://www.zlib.net (required for Ptex under windows) Docutils http://docutils.sourceforge.net documents Doxygen http://www.doxygen.org documents Build example to run glViewer and other example programs with minimal dependency All platforms: Install cmake, GLFW and GLEW (GLEW is not required on OSX) make sure GLEW and GLFW install directories configured as follows:    ${GLEW_LOCATION}/include/GL/glew.h    ${GLEW_LOCATION}/lib/libGLEW.a (linux)    ${GLEW_LOCATION}/lib/glew32.lib (windows)     ${GLFW_LOCATION}/include/glfw3.h    ${GLFW_LOCATION}/lib/libglfw3.a (linux)    ${GLFW_LOCATION}/lib/glfw3.lib (windows)  Clone OpenSubdiv repository, and create a build directory.    git clone https://github.com/PixarAnimationStudios/OpenSubdiv    mkdir build    cd build  Windows (Visual Studio) run cmake: ""c:/Program Files (x86)/CMake/bin/cmake.exe"" ^     -G ""Visual Studio 12 Win64"" ^     -D NO_MAYA=1 -D NO_PTEX=1 -D NO_DOC=1 ^     -D NO_OMP=1 -D NO_TBB=1 -D NO_CUDA=1 -D NO_OPENCL=1 -D NO_CLEW=1 ^     -D ""GLEW_LOCATION=*YOUR GLEW INSTALL LOCATION*"" ^     -D ""GLFW_LOCATION=*YOUR GLFW INSTALL LOCATION*"" ^     ..  Open OpenSubdiv.sln in VisualStudio and build. Linux cmake -D NO_MAYA=1 -D NO_PTEX=1 -D NO_DOC=1 \       -D NO_OMP=1 -D NO_TBB=1 -D NO_CUDA=1 -D NO_OPENCL=1 -D NO_CLEW=1 \       -D GLEW_LOCATION=""*YOUR GLEW INSTALL LOCATION*"" \       -D GLFW_LOCATION=""*YOUR GLFW INSTALL LOCATION*"" \       .. make  OSX cmake -D NO_MAYA=1 -D NO_PTEX=1 -D NO_DOC=1 \       -D NO_OMP=1 -D NO_TBB=1 -D NO_CUDA=1 -D NO_OPENCL=1 -D NO_CLEW=1 \       -D GLFW_LOCATION=""*YOUR GLFW INSTALL LOCATION*"" \       .. make  Useful cmake options and environment variables -DCMAKE_BUILD_TYPE=[Debug|Release]  -DCMAKE_INSTALL_PREFIX=[base path to install OpenSubdiv] -DCMAKE_LIBDIR_BASE=[library directory basename (default: lib)]  -DCUDA_TOOLKIT_ROOT_DIR=[path to CUDA Toolkit] -DPTEX_LOCATION=[path to Ptex] -DGLEW_LOCATION=[path to GLEW] -DGLFW_LOCATION=[path to GLFW] -DMAYA_LOCATION=[path to Maya]  -DNO_LIB=1        // disable the opensubdiv libs build (caveat emptor) -DNO_EXAMPLES=1   // disable examples build -DNO_TUTORIALS=1  // disable tutorials build -DNO_REGRESSION=1 // disable regression tests build -DNO_MAYA=1       // disable Maya plugin build -DNO_PTEX=1       // disable PTex support -DNO_DOC=1        // disable documentation build -DNO_OMP=1        // disable OpenMP -DNO_TBB=1        // disable TBB -DNO_CUDA=1       // disable CUDA -DNO_OPENCL=1     // disable OpenCL -DNO_OPENGL=1     // disable OpenGL -DNO_CLEW=1       // disable CLEW wrapper library  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PixarAnimationStudios/OpenSubdiv"	"Pixar's library for evaluating and rendering subdivision surfaces on CPU and GPU. [Modified Apache2]"	"true"
"Graphics"	"OpenVDB"	"http://www.openvdb.org/"	"Library and tools for storing, editing, and rendering volumetric datasets. [MPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"315"	"99"	"145"	"GitHub - dreamworksanimation/openvdb: OpenVDB Development Repository Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 99 Star 315 Fork 145 dreamworksanimation/openvdb Code Issues 4 Pull requests 9 Pulse Graphs OpenVDB Development Repository 203 commits 1 branch 8 releases 7 contributors C++ 95.9% Batchfile 2.8% Other 1.3% C++ Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v3.1.0 v3.0.0 v2.3.0 v2.2.0 v2.1.0 v2.0.0 v1.2.0 v1.1.1 Nothing to show New pull request Latest commit ebeee8e Jun 3, 2016 OpenVDB-DevTeam minor fix Permalink Failed to load latest commit information. openvdb minor fix Jun 2, 2016 openvdb_houdini minor fix Jun 3, 2016 openvdb_maya LOD mipmap construction tools and various improvements. Apr 6, 2016 README.md README info update Aug 28, 2015 README.md Website | Discussion Forum | Documentation OpenVDB is an open source C++ library comprising a novel hierarchical data structure and a large suite of tools for the efficient storage and manipulation of sparse volumetric data discretized on three-dimensional grids. It is developed and maintained by DreamWorks Animation for use in volumetric applications typically encountered in feature film production. Development Repository This GitHub repository hosts the trunk of the OpenVDB development. This implies that it is the newest public version with the latest features and bug fixes. However, it also means that it has not undergone a lot of testing and is generally less stable than the production releases. Contributing Developers who wish to contribute code to be considered for inclusion in the OpenVDB distribution must first complete the Contributor License Agreement and submit it to DreamWorks (directions are in the CLA). We prefer code submissions in the form of pull requests to this repository, and all code should adhere to the OpenVDB coding standards License OpenVDB is released under the Mozilla Public License Version 2.0, which is a free, open source, and detailed software license developed and maintained by the Mozilla Foundation. It is a hybrid of the modified BSD license and the GNU General Public License (GPL) that seeks to balance the concerns of proprietary and open source developers. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dreamworksanimation/openvdb"	"Library and tools for storing, editing, and rendering volumetric datasets. [MPL2]"	"true"
"Graphics"	"Panda3D"	"http://www.panda3d.org/"	"A framework for 3D rendering and game development for Python and C++. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"487"	"116"	"165"	"GitHub - panda3d/panda3d: Powerful, mature open-source cross-platform game engine for Python and C++, developed by Disney and CMU Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 116 Star 487 Fork 165 panda3d/panda3d Code Pull requests 11 Pulse Graphs Powerful, mature open-source cross-platform game engine for Python and C++, developed by Disney and CMU https://www.panda3d.org/ 21,095 commits 10 branches 3 releases Fetching contributors C++ 66.0% C 17.4% Python 14.3% Objective-C++ 0.7% Emacs Lisp 0.6% Perl 0.5% Other 0.5% C++ C Python Objective-C++ Emacs Lisp Perl Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cmake eliminate-pystub gl-uniform-buffers input-overhaul master mingw-patch parameter-reimpl release/1.9.x vulkan webgl-port Nothing to show v1.9.2 v1.9.1 v1.9.0 Nothing to show New pull request Latest commit 400bc2c Jul 15, 2016 rdb Support .ktx textures, ETC1/ETC2/EAC compression Permalink Failed to load latest commit information. contrib Assorted tweaks and compile warning fixes Jul 14, 2016 direct Fix a TypeError in direct.fsm.FSM Jun 28, 2016 dmodels Remove ppremake, genPyCode, and all hacks created to support them Nov 9, 2015 doc Merge branch 'release/1.9.x' Jul 12, 2016 dtool gcc build fix Jul 14, 2016 makepanda Fix a couple of compile warnings, reduce unnecessary includes Jun 23, 2016 models static fonts should support explicit space advance specified from fon… Nov 21, 2011 panda Support .ktx textures, ETC1/ETC2/EAC compression Jul 15, 2016 pandatool Assorted tweaks and compile warning fixes Jul 14, 2016 samples Merge branch 'release/1.9.x' Jun 11, 2016 .gitignore Update .gitignore, add core dumps Jun 28, 2016 .travis.yml Fix a compile issue or two Apr 29, 2016 LICENSE Move LICENSE and README to the root, update README Nov 30, 2014 README.md Update thirdparty links Apr 1, 2016 README.md Panda3D Panda3D is a game engine, a framework for 3D rendering and game development for Python and C++ programs. Panda3D is open-source and free for any purpose, including commercial ventures, thanks to its liberal license. To learn more about Panda3D's capabilities, visit the gallery and the feature list. To learn how to use Panda3D, check the documentation resources. If you get stuck, ask for help from our active community. Panda3D is licensed under the Modified BSD License. See the LICENSE file for more details. Building Panda3D Windows We currently build using the Microsoft Visual C++ 2010 compiler. You do not need Microsoft Visual Studio to build Panda3D, though - the relevant compilers are included as part of the Windows 7.1 SDK. You will also need to have the third-party dependency libraries available for the build scripts to use. These are available from one of these two URLs, depending on whether you are on a 32-bit or 64-bit system: https://www.panda3d.org/download/panda3d-1.9.2/panda3d-1.9.2-tools-win32.zip https://www.panda3d.org/download/panda3d-1.9.2/panda3d-1.9.2-tools-win64.zip After acquiring these dependencies, you may simply build Panda3D from the command prompt using the following command: makepanda\makepanda.bat --everything --installer --no-eigen When the build succeeds, it will produce an .exe file that you can use to install Panda3D on your system. Note: you may choose to remove --no-eigen and build with Eigen support in order to improve runtime performance. However, this will cause the build to take hours to complete, as Eigen is a heavily template-based library, and the the MSVC compiler does not perform well under these circumstances. Linux Building Panda3D on Linux is easy. All you need is to invoke the makepanda script using the version of Python that you want Panda3D to be built against. Run makepanda.py with the --help option to see which options are available. Usually, you will want to specify the --everything option (which builds with support for all features for which it detects the prerequisite dependencies) and the --installer option (which produces an installable .deb or .rpm file for you to install, depending on your distribution). The following command illustrates how to build Panda3D with some common options: python2.7 makepanda/makepanda.py --everything --installer --no-egl --no-gles --no-gles2 You will probably see some warnings saying that it's unable to find several dependency packages. You should determine which ones you want to include in your build and install the respective development packages. You may visit this manual page for an overview of the various dependencies. If you are on Ubuntu, this command should cover the most frequently used third-party packages: sudo apt-get install build-essential pkg-config python-dev libpng-dev libjpeg-dev libtiff-dev zlib1g-dev libssl-dev libx11-dev libgl1-mesa-dev libxrandr-dev libxxf86dga-dev libxcursor-dev bison flex libfreetype6-dev libvorbis-dev libeigen3-dev libopenal-dev libode-dev libbullet-dev nvidia-cg-toolkit libgtk2.0-dev Once Panda3D has built, you can either install the .deb or .rpm package that it produced, depending on which Linux distribution you are using. For example, to install the package on Debian or Ubuntu, use this: sudo dpkg -i panda3d*.deb If you are not using a Linux distribution that supports .deb or .rpm packages, you may have to use the installpanda.py script instead, which will directly copy the files into the appropriate locations on your computer. You may have to run the ldconfig tool in order to update your library cache after installing Panda3D. Mac OS X On Mac OS X, you will need to download a set of precompiled thirdparty packages in order to compile Panda3D, which can be acquired from here. After placing the thirdparty directory inside the panda3d source directory, you may build Panda3D using a command like the following: python makepanda/makepanda.py --everything --installer In order to make a universal build, pass the --universal flag. You may also target a specific minimum Mac OS X version using the --osxtarget flag followed by the release number, eg. 10.6 or 10.7. If the build was successful, makepanda will have generated a .dmg file in the source directory containing the installer. Simply open it and run the package file in order to install the SDK onto your system. Reporting Issues If you encounter any bugs when using Panda3D, please report them in the bug tracker. This is hosted at: https://bugs.launchpad.net/panda3d Make sure to first use the search function to see if the bug has already been reported. When filling out a bug report, make sure that you include as much information as possible to help the developers track down the issue, such as your version of Panda3D, operating system, architecture, and any code and models that are necessary for the developers to reproduce the issue. If you're not sure whether you've encountered a bug, feel free to ask about it in the forums or the IRC channel first. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/panda3d/panda3d"	"A framework for 3D rendering and game development for Python and C++. [BSD]"	"true"
"Graphics"	"Partio"	"https://github.com/wdas/partio"	"Library for wrangling particle data, with support for most common file formats. [Modified BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"159"	"44"	"81"	"GitHub - wdas/partio: C++ (with python bindings) library for easily reading/writing/manipulating common animation particle formats such as PDB, BGEO, PTC.   See the discussion group @ http://groups.google.com/group/partio-discuss Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 159 Fork 81 wdas/partio Code Issues 15 Pull requests 5 Pulse Graphs C++ (with python bindings) library for easily reading/writing/manipulating common animation particle formats such as PDB, BGEO, PTC. See the discussion group @ http://groups.google.com/group/partio-discuss http://www.partio.us 124 commits 4 branches 2 releases Fetching contributors C 67.1% C++ 30.6% CMake 1.3% TeX 0.5% Python 0.4% Makefile 0.1% C C++ CMake TeX Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aselle-temp aselle gh-pages master Nothing to show v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 7f3e0d1 Apr 26, 2016 aselle Merge pull request #61 from lchai/master … addParticle fixes and clustering support Permalink Failed to load latest commit information. src computeClustering now a free function Apr 25, 2016 .gitignore Git ignore updates Jan 10, 2012 CMakeLists.txt install partioSe in lib directory Jan 24, 2016 Makefile add build verbose shortcut Jan 24, 2016 README fix typos in README Dec 3, 2013 README =================================================================== Partio - A library for particle IO and manipulation ===================================================================  This is the initial source code release of partio a tool we used for particle reading/writing.  It started out as an abstraction for the commonalities in particle models (i.e. accessing many attributes associated with an index or entity).  Super impatient scons building guide ==================================== $ git clone https://github.com/wdas/partio.git $ cd partio $ scons -j 4 (dist/ will now have your build)  Getting Started ==============  I support both scons and cmake build files. I would rather not support more. Lately I have been using cmake more, so that may be more up to date, but others have contributed fixes from time to time.  Source code overview ====================  src/    lib/      Library code (public API in root)    lib/core  Core library (KDtree traversal, data representations)    lib/io    Input/Output (Different file formats)    py/       SWIG based python bindings    doc/      Doxygen documentation and (the start of) a manual    tests/    Start of regression tests (I need more)    tools/    Useful tools               partconv <input format> <output format>              partinfo <particle file>              partview <particle file>  Class Model -----------  The goal of the library is to abstract the particle interface from the data representation. That is why Partio represents particles using three classes that inherit and provide more functionality  ParticlesInfo - Information about # of particles and attributes ParticlesData - Read only access to all particle data ParticlesDataMutable - Read/write access to all particle data  The functions used to get particle access are these:  readHeaders()     returns ParticlesInfo    reads only the minimum data necessary to get number of particles and    attributes  readCached()    returns ParticlesData    For multiple users in different threads using the same particle file    ParticlesData  create() and read()    returns ParticlesDataMutable       allows read/write access  Behind the scenes you could implement these classes however you like.  Headers only representation is called core/ParticleHeader.{h,cpp}.  Simple non-interleaved attributes is core/ParticleSimple.{h,cpp}.  Attribute Data Model --------------------  All particles have the same data attributes.  They have the model that they are of three basic types with a count of how many scalar values they have.  VECTOR[3]     FLOAT[d] INT[d]  VECTOR[3] and FLOAT[3] have the same data representations. VECTOR[4] is invalid however FLOAT[4] is valid as is FLOAT[1...infinity]  This seems to encompass the most common file formats for particles   Iterating ---------  There are multiple ways to access data in the API. Here are some tips  - Use SIMD functions when possible prefer dataAsFloat(),data(arrayOfIndices) as   opposed to data(int singleIndex) which accesses multiple pieces of data at   once  - Cache ParticleAttributes for quick access instead of calling attributeInfo()   over a loop of particles  - Use iterators to do linear operations over all particles They are much more   optimized than both data() and the dataAsFloat or   Backends --------  Behind the scenes there are SimpleParticles, ParticleHeaders, and SimpleParticlesInterleaved.  In the future I would like to write a disk-based cached back end that can dynamically only load the data that is necessary. create(), read() and readCached could be augmented to create different structures in these cases.  Readers/Writers ---------------  New readers and writers can be added in the io/ directory. You simply need to implement the interface ParticlesInfo, ParticlesData and ParticlesDataMutable (or as many as you need). Editing the io/readers.h to add prototypes and io/ParticleIO.cpp to add file extension bindings should be easy.   - Andrew Selle, Walt Disney Animation Studios  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wdas/partio"	"Library for wrangling particle data, with support for most common file formats. [Modified BSD]"	"true"
"Graphics"	"Skia"	"https://github.com/google/skia"	"A complete 2D graphic library for drawing Text, Geometries, and Images. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"952"	"123"	"266"	"GitHub - google/skia: Skia is a complete 2D graphic library for drawing Text, Geometries, and Images. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 123 Star 952 Fork 266 google/skia mirrored from https://skia.googlesource.com/skia Code Pull requests 3 Pulse Graphs Skia is a complete 2D graphic library for drawing Text, Geometries, and Images. https://skia.org 23,016 commits 17 branches 4 releases Fetching contributors C++ 93.3% C 3.2% Python 1.9% Objective-C++ 0.4% HTML 0.3% JavaScript 0.2% Other 0.7% C++ C Python Objective-C++ HTML JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags chrome/m39 chrome/m40 chrome/m41 chrome/m42 chrome/m43 chrome/m44 chrome/m45 chrome/m46 chrome/m47 chrome/m48 chrome/m49 chrome/m50 chrome/m51 chrome/m52 chrome/m53 infra/config master Nothing to show chrome/m39_2138 chrome/m38_2125 chrome/m37_2062_94 chrome/m37_2062 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. animations first cut at a checkbox Oct 21, 2009 bench SkPdf: smaller color serialization Jul 15, 2016 bin bin/fetch-skps: print instruction on error Apr 26, 2016 build_overrides GN Jun 23, 2016 cmake initial checkin of SkSL compiler Jul 1, 2016 debugger Fix old debugger Apr 29, 2016 dm Make XML compilation conditional. Jul 15, 2016 example Lots of progress on switching to SkColorSpace rather than SkColorProf… Jun 16, 2016 experimental tools/SkShaper: SkStream->blob Jul 12, 2016 fuzz remove DownSample imagefilter Jun 25, 2016 gm SkPDF: Always give a default advance for glyphs. Jul 15, 2016 gyp Fix broken Android framework build. Jul 15, 2016 include remove unused CreateInfo flag Jul 15, 2016 infra Convert Win toolchain to CIPD package Jul 15, 2016 platform_tools Update documents/scripts for SampleApp removal Jul 12, 2016 resources Use hintgasp font when testing rendering. Jul 12, 2016 samplecode Factor code to rotate a canvas about a point. Jul 12, 2016 site Fix option name typo Jul 12, 2016 src Dont allocate a new image which already has mip levels, when regenera… Jul 15, 2016 tests SkPdf: smaller color serialization Jul 15, 2016 third_party GN Jun 23, 2016 tools Add verb field in scraping scripts Jul 14, 2016 .gitignore Add CIPD support for bot assets Jun 28, 2016 .gn GN Jun 23, 2016 AUTHORS SkPDF: Use type 2/3 shading for gradient shaders Jun 17, 2016 BUILD.gn GN Jun 23, 2016 CONTRIBUTING Fix references to https://sites.google.com/site/skiadocs/. Feb 3, 2015 CQ_COMMITTERS Moved committer list to chrome-infra-auth and deleted it from the repo Sep 2, 2015 DEPS Build Expat on all platforms Jul 14, 2016 Doxyfile Documentation: SkCanvas API May 19, 2015 LICENSE Include resources directory in google3 sync. Oct 20, 2015 Makefile Add visualbench as valid target to Makefile Dec 18, 2015 OWNERS add root files from chrome Aug 13, 2013 PRESUBMIT.py Specifying master names with ""master."" prefix is deprecated Jul 13, 2016 README Fix references to https://sites.google.com/site/skiadocs/. Feb 3, 2015 README.chromium Update README.chromium. Jun 11, 2015 SKP_VERSION Update SKP version Jul 10, 2016 SK_IMAGE_VERSION Remove extra DNG images and use smaller HTC.dng May 24, 2016 codereview.settings Automatically add a docs preview link and NOTRY=true when there are o… Feb 26, 2015 gn.py GN Jun 23, 2016 gyp_skia Make Win runtime DLLs writeable before overwriting Mar 18, 2016 gyp_skia.py Roll gyp deps from 1765 to 1796. Nov 21, 2013 make.bat Fix references to https://sites.google.com/site/skiadocs/. Feb 3, 2015 make.py GYP: remove stale skia_scalar gyp variable Nov 10, 2015 public.bzl Exclude XML and dependencies from Bazel build. Jul 15, 2016 skia.gyp Fix references to https://sites.google.com/site/skiadocs/. Feb 3, 2015 whitespace.txt Test PDFium bot again Jun 4, 2016 README Skia is a complete 2D graphic library for drawing Text, Geometries, and Images.  See full details, and build instructions, at https://skia.org.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/skia"	"A complete 2D graphic library for drawing Text, Geometries, and Images. [BSD]"	"true"
"Graphics"	"webpage"	"https://sites.google.com/site/skiadocs/home"	"A complete 2D graphic library for drawing Text, Geometries, and Images. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Skia Search this site Overview User Documentation Developer Documentation Getting more information Overview Project Roles User Documentation API Overview & Doxygen Docs How to download the Skia code Issue Tracker (bug database) Quick Start Guides How to check out and build Skia on Linux How to check out and build Skia on Mac OS X How to check out and build Skia on iOS How to check out and build Skia on Windows How to check out and build Skia on Android How to Check out and Build Skia for NaCl (Experimental) Samples and Tutorials Creating a Skia ""Hello World!"" Building with Skia Tutorial Specialized Builds Skia Lua Bindings Using ANGLE on Windows Tips & FAQ Developer Documentation Contributing to Skia Code reviews Coding Style Guidelines Commit Queue Keywords Flattenables How to apply a patch from a codereview issue How to Revert a CL How to submit a patch Managing Chrome's use of Skia How to manage a Skia repo inside a Chromium repo Landing Skia changes which require associated Chrome changes How to land Skia changes that change Blink layout test results Runtime Configuration Runtime Configuration Settings Skia Debugger Design Documents Testing Unit Tests Skia Trybots SkPicture Tests Using gm (""Golden Master"") baseline tools to validate results GM and fonts rebaseline_server Running the gm (""Golden Master"") tool Cluster Telemetry The Skia Buildbots 1. Overview 2. Builder Roles 3. Using buildbot display to figure out what's broken 4. Maintaining the production Skia Buildbots Troubleshooting Tree Sheriffs Getting more information Sitemap Overview WE'VE MOVED!  We are working on finishing touches, but core documentation is now being kept in our source repository and viewable at skia.org.  The search on the new site also queries these docs, so you'll be able to find everything you need...check it out! Skia is an open source 2D graphics library which provides common APIs that work across a variety of hardware and software platforms.  It serves as the graphics engine for Google Chrome and Chrome OS, Android, Mozilla Firefox and Firefox OS, and many other products. Skia is sponsored and managed by Google, but is available for use by anyone under the BSD Free Software License.  While engineering of the core components is done by the Skia development team, we consider contributions from any source. Roadmap For a look at high level items we have on tap the next 6-12 months, view our roadmap here.   Note it is a living document that changes based on the requirements of our users. Recent Highlights See a summary of recent changes to the library here. Subpages (1): Project Roles Sign in|Recent Site Activity|Report Abuse|Print Page|Powered By Google Sites"	"null"	"null"	"A complete 2D graphic library for drawing Text, Geometries, and Images. [BSD]"	"true"
"Graphics"	"urho3d"	"https://github.com/urho3d/Urho3D"	"Cross-platform rendering and game engine. [Many different, mostly MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1216"	"205"	"376"	"GitHub - urho3d/Urho3D: Cross-platform 2D and 3D game engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 205 Star 1,216 Fork 376 urho3d/Urho3D Code Issues 105 Pull requests 6 Wiki Pulse Graphs Cross-platform 2D and 3D game engine http://urho3d.github.io/ 7,626 commits 10 branches 17 releases 78 contributors C++ 73.0% ActionScript 12.1% Lua 4.5% CMake 4.5% HLSL 1.7% GLSL 1.4% Other 2.8% C++ ActionScript Lua CMake HLSL GLSL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags api-agnostic-headers clang-tools component-based-ui drawable-shader-parameters master new-lua-script-test refactor-buildsystem refactor-event-profiler sse2neon update-freetype Nothing to show 1.32 1.31 1.23 1.22 1.21 1.16 1.15 1.14 1.13 1.12 1.11 1.5 1.4 1.3 1.2 1.1 1.0 Nothing to show New pull request Latest commit ccf1abe Jul 15, 2016 cadaver Cleanup cameraPos function parameter from GLSL directional billboard … … …code. Fix directional billboard face camera rotation calculation when billboards are in model space (relative to node). Related to #1471. Permalink Failed to load latest commit information. Android Fix SDL 2.0.4 Android code to exclude bogus joystick registration. Apr 9, 2016 CMake Fix URHO3D_PACKAGING support for Android build. Jul 8, 2016 Docs Travis CI: API documentation update at 2016-07-15 07:58:43 UTC. Jul 15, 2016 Source Travis CI: API documentation update at 2016-07-15 07:58:43 UTC. Jul 15, 2016 SourceAssets Editor: fix all warnings; Complete UITemplate Mar 19, 2016 bin Cleanup cameraPos function parameter from GLSL directional billboard … Jul 15, 2016 .appveyor.yml For CI - clean up configuration for secondary AppVeyor CI setup. May 21, 2016 .bash_helpers.sh Speed up build for Debug configuration by building only active arch. Feb 2, 2016 .gitattributes Add .gitattributes to fix the languages breakdown report by GitHub. May 3, 2015 .gitignore Ignore KDE "".directory"" directory settings files Mar 29, 2016 .travis.yml For CI - address the limitation of Travis CI's caching logic. Jun 11, 2016 CMakeLists.txt Initial support for Linux on generic ARM cross-compiling. Jun 10, 2016 License.txt Add Boost Preprocessor library to Source/ThirdParty. Force C++11 for … Jun 2, 2016 README.md Add contributor credit & minor edit. Jul 5, 2016 Rakefile Sort samples list, just for consistency sake. Jun 11, 2016 cmake_android.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_android.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_arm.sh Initial support for Linux on generic ARM cross-compiling. Jun 10, 2016 cmake_clean.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_clean.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_codeblocks.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_codeblocks.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_codelite.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_codelite.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_eclipse.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_emscripten.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_emscripten.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_generic.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_generic.sh Initial support for Linux on generic ARM cross-compiling. Jun 10, 2016 cmake_ios.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_mingw.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_mingw.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_ninja.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_ninja.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_rpi.sh Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_vs2008.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_vs2010.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_vs2012.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_vs2013.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_vs2015.bat Travis CI: bump copyright to 2016. Jan 26, 2016 cmake_xcode.sh Travis CI: bump copyright to 2016. Jan 26, 2016 README.md Urho3D Urho3D is a free lightweight, cross-platform 2D and 3D game engine implemented in C++ and released under the MIT license. Greatly inspired by OGRE and Horde3D. Main website: http://urho3d.github.io/ License Licensed under the MIT license, see License.txt for details. Credits Urho3D development, contributions and bugfixes by: Lasse Öörni (loorni@gmail.com, AgentC at GameDev.net) Wei Tjong Yao Aster Jian Vivienne Anthony Colin Barrett Erik Beran Loic Blot Danny Boisvert Sergey Bosko Carlo Carollo Pete Chown Christian Clavet Sebastian Delatorre (primitivewaste) Josh Engebretson Chris Friesen Alex Fuller Mika Heinonen Jukka Jylänki Graham King Jason Kinzer Eugene Kozlov Gunnar Kriik Artem Kulyk Ali Kämäräinen Pete Leigh Frode 'Modanung' Lindeijer Thorbjørn Lindeijer Nathanial Lydick Xavier Maupeu Jonne Nauha Paul Noome David Palacios Alex Parlett Jordan Patterson Anton Petrov Vladimir Pobedinsky Franck Poulain Pranjal Raihan Nick Royer Miika Santala Bengt Soderstrom Hualin Song James Thomas Joshua Tippetts Yusuf Umar Daniel Wiberg Steven Zhang AGreatFish BlueMagnificent Enhex Firegorilla Lumak Magic.Lixin Mike3D MonkeyFirst Newb I the Newbd OvermindDL1 Skrylar TheComet93 Y-way 1vanK andmar1x amadeus_osa atship att celeron55 cosmy1 damu dragonCASTjosh feltech fredakilla hdunderscore lvshiling marynate mightyCelu neat3d nemerle ninjastone proller raould rasteron reattiva rifai rikorin r-ku skaiware ssinai1 svifylabs szamq thebluefish tommy3 yushli Urho3D is greatly inspired by OGRE (http://www.ogre3d.org) and Horde3D (http://www.horde3d.org). Additional inspiration & research used: Rectangle packing by Jukka Jylänki (clb) http://clb.demon.fi/projects/rectangle-bin-packing Tangent generation from Terathon http://www.terathon.com/code/tangent.html Fast, Minimum Storage Ray/Triangle Intersection by Möller & Trumbore http://www.graphics.cornell.edu/pubs/1997/MT97.pdf Linear-Speed Vertex Cache Optimisation by Tom Forsyth http://home.comcast.net/~tom_forsyth/papers/fast_vert_cache_opt.html Software rasterization of triangles based on Chris Hecker's Perspective Texture Mapping series in the Game Developer magazine http://chrishecker.com/Miscellaneous_Technical_Articles Networked Physics by Glenn Fiedler http://gafferongames.com/game-physics/networked-physics/ Euler Angle Formulas by David Eberly http://www.geometrictools.com/Documentation/EulerAngles.pdf Red Black Trees by Julienne Walker http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx Comparison of several sorting algorithms by Juha Nieminen http://warp.povusers.org/SortComparison/ Urho3D uses the following third-party libraries: AngelScript 2.30.2 (http://www.angelcode.com/angelscript) Boost 1.61.0 (http://www.boost.org) - only used for AngelScript generic bindings Box2D 2.3.0 (http://box2d.org) Bullet 2.83.6 (http://www.bulletphysics.org) Civetweb 1.7 (https://github.com/civetweb/civetweb) FreeType 2.5.0 (http://www.freetype.org) GLEW 1.13.0 (http://glew.sourceforge.net) jo_jpeg 1.52 (http://www.jonolick.com/uploads/7/9/2/1/7921194/jo_jpeg.cpp) kNet (https://github.com/juj/kNet) libcpuid 0.2.2 (https://github.com/anrieff/libcpuid) Lua 5.1 (http://www.lua.org) LuaJIT 2.1.0+ (http://www.luajit.org) LZ4 r131 (https://github.com/Cyan4973/lz4) MojoShader (http://icculus.org/mojoshader) Mustache 1.0 (http://mustache.github.io, https://github.com/kainjow/Mustache) nanodbc 2.12.4 (http://lexicalunit.github.io/nanodbc) Open Asset Import Library (http://assimp.sourceforge.net) pugixml 1.7 (http://pugixml.org) rapidjson 0.11 (https://code.google.com/p/rapidjson) Recast/Detour (https://github.com/memononen/recastnavigation) SDL 2.0.4 (http://www.libsdl.org) SQLite 3.13.0 (https://www.sqlite.org) StanHull (http://codesuppository.blogspot.com/2006/03/john-ratcliffs-code-suppository-blog.html) stb_image 2.12 (http://nothings.org) stb_image_write 1.02 (http://nothings.org) stb_rect_pack 0.08 (http://nothings.org) stb_vorbis 1.09 (http://nothings.org) tolua++ 1.0.93 (http://www.codenix.com/~tolua) DXT / ETC1 / PVRTC decompression code based on the Squish library and the Oolong Engine. Jack and mushroom models from the realXtend project. (http://www.realxtend.org) Ninja model and terrain, water, smoke, flare and status bar textures from OGRE. BlueHighway font from Larabie Fonts. Anonymous Pro font by Mark Simonson. NinjaSnowWar sounds by Veli-Pekka Tätilä. Documentation Urho3D classes have been sparsely documented using Doxygen notation. To generate documentation into the ""Docs"" subdirectory, open the Doxyfile in the ""Docs"" subdirectory with doxywizard and click ""Run doxygen"" from the ""Run"" tab. Get Doxygen from http://www.doxygen.org & Graphviz from http://www.graphviz.org. See section ""Documentation build"" below on how to automate documentation generation as part of the build process. The documentation is also available online at http://urho3d.github.io/documentation/HEAD/index.html Documentation on how to build Urho3D: http://urho3d.github.io/documentation/HEAD/_building.html Documentation on how to use Urho3D as external library http://urho3d.github.io/documentation/HEAD/_using_library.html Replace HEAD with a specific release version in the above links to obtain the documentation pertinent to the specified release. Alternatively, use the document-switcher in the documentation website to do so. History The change history is available online at http://urho3d.github.io/documentation/HEAD/_history.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/urho3d/Urho3D"	"Cross-platform rendering and game engine. [Many different, mostly MIT]"	"true"
"Image Processing"	"Boost.GIL"	"http://www.boost.org/doc/libs/1_56_0/libs/gil/doc/index.html"	"Generic Image Library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Adobe Generic Image Library: Main Page Information GIL ASL Home GIL Extensions GIL Discussion Forum Acknowledgements Other Resources Adobe Open Source SGI STL GIL Sponsor Generic Image Library Documentation Video Tutorial Watch a 55 minute video presentation of GIL. It roughly follows the tutorial, though in some places covers a bit more material. It is slightly outdated. Tutorial The tutorial gives you a jump start in using the library. It starts with a simple non-generic algorithm that is gradually evolved to be more generic, faster and more flexible. The tutorial covers most of what you need to know to make effective use of GIL, but does not systematically cover all aspects of the library. Design Guide The design guide provides a more formal and complete description of the library, including the concepts and the design rationale. Doxygen Documentation Interactive cross-linked documentation Sample files: x_gradient.cpp Writing an algorithm that operates on generic images dynamic_image.cpp Using images whose properties (color space, channel type) are specified at run time histogram.cpp Creating a histogram interleaved_ptr.cpp, interleaved_ptr.hpp, interleaved_ref.hpp Creating your own pixel reference and pixel iterator mandelbrot.cpp Creating a synthetic image defined by a function packed_pixel.cpp Defining bitmasks and images whose channels or pixels are not byte-aligned resize.cpp Rescaling an image using bilinear sampling (requires the optional Numeric extension) affine.cpp Applying an affine transformation to an image (requires the optional Numeric extension) convolution.cpp Blurring images (requires the optional Numeric extension)"	"null"	"null"	"Generic Image Library."	"true"
"Image Processing"	"CImg"	"http://cimg.sourceforge.net/"	"A small, open source, C++ toolkit for image processing. [Own LGPL or GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The CImg Library download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse Development Software Development The CImg Library The CImg Library An easy-to-use, efficient, portable C++ library for image processing. Brought to you by: ronounours Summary Files Reviews Support ★ 4.9 Stars (32) 1 Download (This Week) Last Update: 2015-06-03   Browse Code Git Repository Description The CImg Library provides a minimal set of C++ classes that can be used to perform common operations on generic 2D/3D images. It is simple-to-use, efficient, and portable. It's a really pleasant toolkit for developing image processing stuffs in C++. The CImg Library Web Site Categories Software Development, Graphics, Scientific/Engineering License GNU Library or Lesser General Public License version 2.0 (LGPLv2), GNU General Public License version 2.0 (GPLv2) Features C++ template image processing library Easy to use, and to integrate in third-party projects Offer a lot of classical image processing functionalities KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 4.9 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 31 0 0 0 1 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 5 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 3 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ coronax707 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 I have been using this library for developing simple demonstrative projects and for testing my ideas in a fast and efficient way. The library is simply amazing in what it offers to you as a single header file with very less project headache. Posted 06/08/2014 andraskhun 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Very useful toolkit, the only thing I am missing is the more detailed documentation, or description of the demos... Posted 05/27/2014 symeducation 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 The product may be great, but as far as installing it's hard. The product isn't clear on ""where"" it's getting installed but this tool is really useful! Posted 05/14/2013 <REDACTED> 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Amazing tool. Works perfect. Very helpful. Posted 04/25/2013 dillonbutler 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Reliable and runs smoothly Posted 02/15/2013 Read more reviews Additional Project Details Languages English Intended Audience Science/Research, Education, Developers User Interface X Window System (X11), Win32 (MS Windows) Programming Language C++ Registered 2003-12-04 Recommended Projects OpenCV Open Source Computer Vision Library G'MIC GREYCstoration GUI Deals Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"A small, open source, C++ toolkit for image processing. [Own LGPL or GPL]"	"true"
"Image Processing"	"CxImage"	"http://www.xdp.it/cximage.htm"	"An image processing and conversion library to load, save, display, transform BMP, JPEG, GIF, PNG, TIFF, MNG, ICO, PCX, TGA, WMF, WBMP, JBG, J2K images. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"xdp - CxImage :: CxImage:: Projects Downloads Documents Forum Contact About me Overview Documentation Features What's new   Description: Another free C++ image processing and conversion library Platform: Windows / Linux License: zlib Release: 6.00 Last update: 02 Feb 2008     Overview CxImage is a C++ class that can load, save, display, transform images in a very simple and fast way. CxImage is open source and licensed under the zlib license. In a nutshell, this means that you can use the code however you wish, as long as you don't claim it as your own. With more than 200 functions, and with comprehensive working demos, CxImage offers all the tools to build simple image processing applications on a fast learning curve. Supported file formats are: BMP, GIF, ICO, CUR, JBG, JPG, JPC, JP2, PCX, PGX, PNG, PNM, RAS, SKA, TGA, TIF, WBMP, WMF, RAW, CRW, NEF, CR2, DNG, ORF, ARW, ERF, 3FR, DCR, X3F, MEF, RAF, MRW, PEF, SR2. Cximage is highly portable and has been tested with Visual C++ 6 / 2008, C++ Builder 3 / 6, MinGW on Windows, and with gcc 3.3.2 on Linux. The library can be linked statically, or through a DLL or an activex component. Documentation CxImage is documented using Doxygen, however for historical reasons, many uncommon features are still undocumented. The class members reference, together with a short introduction article, release history, and license, can be found here Features Image formats: BMP, ICO, CUR, PCX, TGA, SKA, WBMP, GIF, animated GIF TIF, multipage TIF JPG, PNG, JPC, JP2, J2K, PGX, PNM, RAS, JBG, WMF (read only) RAW, CRW, NEF, CR2, DNG, ORF, ARW, ERF, 3FR, DCR, X3F, MEF, RAF, MRW, PEF, SR2 (read only) Filters: Contour, Edge, Dilate, Erode Median, Noise, Jitter, RedEyeRemove Colorize, Gamma, Saturate GaussianBlur, TextBlur, SelectiveBlur, UnsharpMask Filter, Lut, Gamma, Light, Negative, Dither, Grayscale Histogram stretch, equalize, normalize Threshold, OptimalThreshold, AdaptiveThreshold Transfomations: IncreaseBPP, DecreaseBPP Crop, Expand, Thumbnail Resample, Rotate, Skew Mirror, Flip Other: Direct pixel and palette manipulation Pixel interpolation Colorspaces: RGB, HSL, CMYK, YUV, YIQ, XYZ Repair FFT2 Mix, Combine, Split Save animated GIFs and multipage ICONs and TIFs Read/Save in memory buffers Alpha layer (transparency) Selections read/copy EXIF automatic file type detection What's new in version 6.00 The complete list of bugfixes and enhancements is reported in the documentation An application written with CxImage version 5.99 should work also with the new version; the interface of few methods is different, normally because of new parameters, but the default behaviour is the same. The applications linked with the old DLL will not work with the new one; but if necessary you can edit the declarations, or add new overloads, and revert to the old interface for the DLL. An issue to take care is ENUM_CXIMAGE_FORMATS: in the old version the CXIMAGE_FORMAT_... can change the value, depending on the supported formats enabled by the corresponding CXIMAGE_SUPPORT_... switch. In the new version, CXIMAGE_FORMAT_... are assigned to unique values. Static methods like GetNumTypes, GetTypeIdFromName, GetTypeIdFromIndex, GetTypeIndexFromId will help the application to manage the new policy. File formats & linked C libraries CxImage works with the latest version of these libraries: Zlib (1.2.3), Jasper ( 1.900.1), LibMNG (1.0.10), LibPNG (1.2.24). LibTIFF 3.8.2 can be linked with CxImage, but the version included in the CxImage distribution (3.5.7, patched) can read images with OJPEG compression, or with non standard bit per samples. The choice is up to you. The j2k library (now openjpeg), and the associated class CxImageJ2K, have been removed from the project. JPEG2000 images are supported through Jasper and CxImageJAS. CxImage 6.00 includes a new class (CxImageRAW) and a new library (LibDCR) to read RAW images from digital cameras; common file extension are: RAW, CRW, NEF, CR2, DNG, ORF, ARW, ERF, 3FR, DCR, X3F, MEF, RAF, MRW, PEF, SR2. LibDCR is based on Dave Coffin's dcraw.c; and offers the same features of the original dcraw application (see the ""dcr.dsw"" project included in the \raw directory). The restricted features under the GPL Version 2 are disabled; please read the license terms in ""libdcr.h"" before enabling the restricted code. CxImageRAW implements the basic functions to decode the image, the only available option controlled by SetCodecOption, is about the interpolation quality (DECODE_QUALITY_LIN=0, DECODE_QUALITY_VNG=1, DECODE_QUALITY_PPG=2, DECODE_QUALITY_AHD=3). CxImagePNG has been improved to read and write all of the PNG_COLOR_TYPE_... combinations. PNGs with a ""pixel depth"" more that 8 bits per channel will be converted down to 8 bits, this is the major limit in CxImage. CxImageGIF: better support for reading animated GIF, now can decode all frames in a single pass, if enabled with SetRetreiveAllFrames. The CxImage demo implements this option, and shows how to play an animated GIF (when the program asks ""File with N images. Read all?"", select ""Cancel""). CxImageBMP: reads and writes 32 bit images (with alpha layer). CxImageICO: reads and writes Vista (PNG) icons; and added support for writing multipage icons. CxImageMNG: reads MNGs with alpha layer. CxImageSKA: new class for SKA image format, used in some video rental application. CxImageJPG: new options for the JPEG format subsampling (ENCODE_SUBSAMPLE_422, ENCODE_SUBSAMPLE_444), default is 4:1:1 (high), can be set to 4:2:2 (medium) or 4:4:4 (none). The next table shows the different amount of artefacts in the compressed image, using to different subsampling. 4:4:4 subsampling is useful in images with sharp edges, to reduce the typical blurring effect of the JPG compression. original image JPG image and artefacts, quality 75, subsampling 4:1:1 JPG image and artefacts, quality 75, subsampling 4:4:4 Portability The class and the projects have been tested with different compilers, from Microsoft VC++6 to VC++2008, with Borland C++ Builder 3 and 6, and partially with wxDev-C++ and MinGW. UNICODE and non-UNICODE configurations are provided for all the libraries (thanks to Eric Jesover). A light version without the C libraries and with a small demo is provided for the first time users, or as a basic template, without the clutter of the full demo project. The console (\demo2) and the CxImageCrtDll projects can be built with VC++Express2005 and the Microsoft Platform SDK. If you get linker errors like ""unresolved external..."", check if all the C libraries have been compiled (set the correct project dependencies), or add the ""gdi32.lib"" and ""user32.lib"" modules to the ""Linker\Input\Additional Dependencies"" property. CxImage works also with Pocket PC 2003; a working version and demo are provided for the VC++2005 compiler (thanks to Vincent Richomme). For the old embedded VC compilers, the main limit was the support for exception handling. To overcome this problem, the try, throw and catch statements have been replaced with 3 macros (defined in ximadef.h), and with the definition of CXIMAGE_SUPPORT_EXCEPTION_HANDLING; in this way it is possible to build the library without exception handling support. Maybe the solution is not so elegant, but the impact on the source code is minimal when exception handling is disabled, while there are no changes in case of exception handling enabled. The compatibility between little-endian and big-endian platforms, for the built in formats (bmp, ico, tga, pcx, gif, ska) is handled by ntohs and ntohl. New features CQuantizer : the class is used with the DecreaseBpp menu. In the previous version there was a rounding error, clearly visible when in some case the white colour (255,255,255) was converted to (254,254,254). In the new release this error has been fixed.   Copy/Paste : now pastes also metafile pictures (for example, from Office applications). The demo internally uses a custom clipboard format, to test the Dump/Undump methods. Copy works on the active selection, use ""\CxImage\Remove Selection"" to copy the full image.   FloodFill : (\View\Tools\Flood Fill) with a floating dialog, you can test the FloodFill colour, tolerance, opacity, and selection. The case with opacity = 0 and selection enabled acts as a ""magic wand"".   Graph data extraction : (\Filters\graph data extraction) extracts the numeric data from graphs (acquired from scanners or downloaded from the internet). The converted values are pasted into the clipboard, and can be saved to text or Excel files. RedEyeRemove : (\Filters\Non Linear\Remove Red Eye) removes the red-eye effect that frequently occurs in pictures. You must select the region around the pupil, where the function will filter the red channel, the selection can be also rectangular, or including part of the iris: the filter works on a circular region centred on the selection. original image selection around the pupil result after RedEyeRemove   SelectiveBlur / UnsharpMask : these non linear filters increase the image quality. SelectiveBlur removes the ""granular"" noise (jpeg artefacts, or digital camera noise) preserving the details, UnsharpMask enhances the details without adding noise in the ""flat"" regions.   Custom linear filters : (\Filters\Linear\Custom) a small graphic interface to test new kernels for the Filter function (thanks to Priyank Bolia).   Histogram : (\Colors\Histogram\...) many menus are available to test HistogramStretch with different approaches (0 = luminance, 1 = linked channels , 2 = independent channels); the threshold parameter increases the robustness of the algorithm in case of noisy images. ""Half Saturation"" and ""Full Saturation"" test the combination of ConvertColorSpace, Histogram, and Saturate, to stretch the histogram in the YUV colorspace. original image + HistogramStretch(2,0.005f) + ""Half saturation""   Thresholding : ( \Colors\Threshold... and \Colors\Adaptive Threshold). OptimalThreshold is a new method to find the optimal threshold for image binarization, the available algorithms are: 1 = Otsu; 2 = Kittler & Illingworth; 3 = maximum entropy; 4 = potential difference; 0 = average all methods (default, and used in the demo); The option ""preserve colors less than the threshold"" will test Threshold2, useful to filter colored images with a noisy background, the result will be a colored image with an uniform background. AdaptiveThreshold is an application of OptimalThreshold to build a variable threshold mask. AdaptiveThreshold is useful in case of images with a non uniform lightness, where a single threshold can't be optimal for the whole image; but in general it will give bad results if the parameters are not well tuned. original image OptimalThreshold + Threshold AdaptiveThreshold   Add shadow : (\Filters\Add Shadow...) this menu is a small example on how the simple CxImage methods (selections, GaussianBlur, Mix) can be combined to obtain a common effect. purple shadow on white background black shadow on red background   Text smoothing : DrawStringEx implements a new option, through CXTEXTINFO::smooth, that can be tested with the text tool (\View\Tools\Text), checking the ""antialias"" option. A similar effect can be obtained in post processing with TextBlur (\Filters\Non Linear\Text Blur): a non linear filter that works only on diagonal or round edges, without affecting vertical or horizontal lines. In the next table there is a comparison between different smoothing methods: DrawStringEx without smoothing DrawStringEx with smoothing post processing with TextBlur post processing with a linear 3x3 ""soften"" Filter   2003 - 2008 © Davide Pizzolato - www.xdp.it        "	"null"	"null"	"An image processing and conversion library to load, save, display, transform BMP, JPEG, GIF, PNG, TIFF, MNG, ICO, PCX, TGA, WMF, WBMP, JBG, J2K images. [zlib]"	"true"
"Image Processing"	"FreeImage"	"http://freeimage.sourceforge.net/"	"An open source library that supports popular graphics image formats and others as needed by today's multimedia applications. [GPL2 or GPL3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The FreeImage Project FreeImage Features Requirements Who Uses FreeImage Download License Developer's Corner Contact Us Links What is FreeImage? FreeImage is an Open Source library project for developers who would like to support popular graphics image formats like PNG, BMP, JPEG, TIFF and others as needed by today's multimedia applications. FreeImage is easy to use, fast, multithreading safe, compatible with all 32-bit or 64-bit versions of Windows, and cross-platform (works both with Linux and Mac OS X).   read more... News March 15th, 2015 FreeImage 3.17.0 released Release 3.17.0 adds many improvements for ICO, TIFF, PNG, HDR, TGA, GIF, RAW, JXR, JP2, Exif plugins. It comes with new conversion functions for RGBA16/RGBAF formats, as well as new functions used to deal with external pixel buffers (ConvertFromRawBitsEx, CreateView). Other useful added functions are ReslaleRect, GetMemorySize, SetMetadataKeyValue and the FIQ_LFPQUANT quantizer algorithm. The library has been updated with the new LibPNG (1.6.16), LibTIFF (4.0.4), LibRaw (0.17.a1), LibWebP (0.4.2), OpenEXR (2.2.0). FreeImage is also distributed with updated VB6, Delphi and C++ wrappers. As usual, check the changes log for full details (especially for bug fixes) and check also the updated FreeImage documentation. read more... Download Now You can download FreeImage distributions (source code, DLL and wrappers) from the downloads page. Developer's Corner Find all resources you need to build your application using FreeImage: Documentation, FAQ, Mailing List, Changes Log, and Sample Source Code. © 2003-2015 by FreeImage Page maintained by Hervé Drolon     Website Design by Web World Expert Licensed under Creative Commons License    "	"null"	"null"	"An open source library that supports popular graphics image formats and others as needed by today's multimedia applications. [GPL2 or GPL3]"	"true"
"Image Processing"	"GD"	"https://github.com/libgd/libgd"	"GD Graphics Library, famously used in PHP for image loading/manipulation & thumbnail generation. [custom permissive license, requires mention in user docs]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"158"	"29"	"70"	"GitHub - libgd/libgd: GD Graphics Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 158 Fork 70 libgd/libgd Code Issues 43 Pull requests 1 Wiki Pulse Graphs GD Graphics Library http://libgd.org 1,633 commits 6 branches 57 releases 27 contributors C 81.5% CMake 4.7% C++ 4.0% HTML 2.4% Shell 2.2% M4 2.2% Other 3.0% C CMake C++ HTML Shell M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags GD-2.0 GD-2.1 GD-2.2 fix-247 fix-248 master Nothing to show gd-2.2.2 gd-2.2.1 gd-2.2.0 gd-2.1.1 gd-2.1.0 gd-2.1.0-rc2 gd-2.1.0-rc1 gd-2.1.0-alpha1 GD_2_0_34RC1 GD_2_0_33 GD_2_0_32 GD_2_0_31 GD_2_0_30 GD_2_0_29 GD_2_0_28 GD_2_0_27 GD_2_0_26 GD_2_0_25 GD_2_0_24 GD_2_0_23 GD_2_0_22 GD_2_0_21 GD_2_0_20 GD_2_0_19 GD_2_0_18 GD_2_0_17 GD_2_0_15 GD_2_0_14 GD_2_0_13 GD_2_0_12 GD_2_0_11 GD_2_0_10 GD_2_0_9 GD_2_0_8 GD_2_0_7 GD_2_0_6 GD_2_0_5 GD_2_0_4 GD_2_0_3 GD_2_0_2 GD_2_0_1 GD_2_0_0 GD_1_8_4 GD_1_8_3 GD_1_8_1 GD_1_8_0 GD_1_7_3 GD_1_7_2 GD_1_7_1 GD_1_7_0 GD_1_6_3 GD_1_6_2 GD_1_6_1 GD_1_6_0 GD_1_5_0 GD_1_4_0 GD_1_3_0 Nothing to show New pull request Latest commit 763cd19 Jul 15, 2016 cmb69 No need to skip this test assertion, because libgd supports only loss… … …less TIFF Permalink Failed to load latest commit information. VMS configure/cmake: unify header checks and config.h generation May 17, 2016 cmake/modules libimagequant: fix integration May 18, 2016 config gdlib-config: mark it as deprecated #140 May 18, 2016 docs Don't forget to `make` Jul 14, 2016 examples Make BUILD_SHARED_LIBS configurable Aug 27, 2015 m4 configure: add AX_REQUIRE_DEFINED macro Jun 3, 2016 netware Updated Netware makefile Nov 7, 2013 src Proper fix for #248 Jul 15, 2016 test Remove one more outstanding Makefile.am Apr 8, 2013 tests No need to skip this test assertion, because libgd supports only loss… Jul 15, 2016 travis travis: rework coverity scan Jun 24, 2016 windows mising file Jul 15, 2016 .gitignore build: handle renamed README file Apr 30, 2016 .travis.yml travis: rework coverity scan Jun 24, 2016 CMakeLists.txt libimagequant: fix integration May 18, 2016 CONTRIBUTORS Add contributors list Jan 14, 2015 COPYING add COPYING Apr 12, 2013 ChangeLog ChangeLog: update for gd-2.2.1 May 20, 2016 Makefile.am build: tweak `find` syntax for BSD systems Jun 24, 2016 NEWS fixed FS#100 Jan 19, 2010 README.md Add coverity status Jun 21, 2016 appveyor.yml squash test commits; add deps from nuget; fix bindings Oct 30, 2014 bootstrap.sh travis: convert OS X build to common autoconf+cmake logic May 21, 2016 configure.ac Add complex text layout support Jun 30, 2016 README.md GD Graphics (Draw) Library GD is an open source code library for the dynamic creation of images by programmers. GD is written in C, and ""wrappers"" are available for Perl, PHP and other languages. GD can read and write many different image formats. GD is commonly used to generate charts, graphics, thumbnails, and most anything else, on the fly. The most common applications of GD involve website development, although it can be used with any standalone application! The library was originally developed by Thomas Boutell and is now maintained by many contributors (see the CONTRIBUTORS file) under the umbrella of PHP.net. Downloads/etc... Please visit our homepage for more details. Supported Image Formats GD has builtin support for: BMP GIF TGA WBMP It also has optional support for more formats via external libraries: JPEG via IJG/libjpeg or libjpeg-turbo Does not include JPEG 2000 PNG via libpng TIFF via libtiff WebP via libwebp XPM via libXpm Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libgd/libgd"	"GD Graphics Library, famously used in PHP for image loading/manipulation & thumbnail generation. [custom permissive license, requires mention in user docs]"	"true"
"Image Processing"	"website"	"http://libgd.github.io/"	"GD Graphics Library, famously used in PHP for image loading/manipulation & thumbnail generation. [custom permissive license, requires mention in user docs]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"158"	"29"	"70"	"GitHub - libgd/libgd: GD Graphics Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 158 Fork 70 libgd/libgd Code Issues 43 Pull requests 1 Wiki Pulse Graphs GD Graphics Library http://libgd.org 1,633 commits 6 branches 57 releases 27 contributors C 81.5% CMake 4.7% C++ 4.0% HTML 2.4% Shell 2.2% M4 2.2% Other 3.0% C CMake C++ HTML Shell M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags GD-2.0 GD-2.1 GD-2.2 fix-247 fix-248 master Nothing to show gd-2.2.2 gd-2.2.1 gd-2.2.0 gd-2.1.1 gd-2.1.0 gd-2.1.0-rc2 gd-2.1.0-rc1 gd-2.1.0-alpha1 GD_2_0_34RC1 GD_2_0_33 GD_2_0_32 GD_2_0_31 GD_2_0_30 GD_2_0_29 GD_2_0_28 GD_2_0_27 GD_2_0_26 GD_2_0_25 GD_2_0_24 GD_2_0_23 GD_2_0_22 GD_2_0_21 GD_2_0_20 GD_2_0_19 GD_2_0_18 GD_2_0_17 GD_2_0_15 GD_2_0_14 GD_2_0_13 GD_2_0_12 GD_2_0_11 GD_2_0_10 GD_2_0_9 GD_2_0_8 GD_2_0_7 GD_2_0_6 GD_2_0_5 GD_2_0_4 GD_2_0_3 GD_2_0_2 GD_2_0_1 GD_2_0_0 GD_1_8_4 GD_1_8_3 GD_1_8_1 GD_1_8_0 GD_1_7_3 GD_1_7_2 GD_1_7_1 GD_1_7_0 GD_1_6_3 GD_1_6_2 GD_1_6_1 GD_1_6_0 GD_1_5_0 GD_1_4_0 GD_1_3_0 Nothing to show New pull request Latest commit 763cd19 Jul 15, 2016 cmb69 No need to skip this test assertion, because libgd supports only loss… … …less TIFF Permalink Failed to load latest commit information. VMS configure/cmake: unify header checks and config.h generation May 17, 2016 cmake/modules libimagequant: fix integration May 18, 2016 config gdlib-config: mark it as deprecated #140 May 18, 2016 docs Don't forget to `make` Jul 14, 2016 examples Make BUILD_SHARED_LIBS configurable Aug 27, 2015 m4 configure: add AX_REQUIRE_DEFINED macro Jun 3, 2016 netware Updated Netware makefile Nov 7, 2013 src Proper fix for #248 Jul 15, 2016 test Remove one more outstanding Makefile.am Apr 8, 2013 tests No need to skip this test assertion, because libgd supports only loss… Jul 15, 2016 travis travis: rework coverity scan Jun 24, 2016 windows mising file Jul 15, 2016 .gitignore build: handle renamed README file Apr 30, 2016 .travis.yml travis: rework coverity scan Jun 24, 2016 CMakeLists.txt libimagequant: fix integration May 18, 2016 CONTRIBUTORS Add contributors list Jan 14, 2015 COPYING add COPYING Apr 12, 2013 ChangeLog ChangeLog: update for gd-2.2.1 May 20, 2016 Makefile.am build: tweak `find` syntax for BSD systems Jun 24, 2016 NEWS fixed FS#100 Jan 19, 2010 README.md Add coverity status Jun 21, 2016 appveyor.yml squash test commits; add deps from nuget; fix bindings Oct 30, 2014 bootstrap.sh travis: convert OS X build to common autoconf+cmake logic May 21, 2016 configure.ac Add complex text layout support Jun 30, 2016 README.md GD Graphics (Draw) Library GD is an open source code library for the dynamic creation of images by programmers. GD is written in C, and ""wrappers"" are available for Perl, PHP and other languages. GD can read and write many different image formats. GD is commonly used to generate charts, graphics, thumbnails, and most anything else, on the fly. The most common applications of GD involve website development, although it can be used with any standalone application! The library was originally developed by Thomas Boutell and is now maintained by many contributors (see the CONTRIBUTORS file) under the umbrella of PHP.net. Downloads/etc... Please visit our homepage for more details. Supported Image Formats GD has builtin support for: BMP GIF TGA WBMP It also has optional support for more formats via external libraries: JPEG via IJG/libjpeg or libjpeg-turbo Does not include JPEG 2000 PNG via libpng TIFF via libtiff WebP via libwebp XPM via libXpm Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libgd/libgd"	"GD Graphics Library, famously used in PHP for image loading/manipulation & thumbnail generation. [custom permissive license, requires mention in user docs]"	"true"
"Image Processing"	"GDCM"	"http://gdcm.sourceforge.net/wiki/index.php/Main_Page"	"Grassroots DICOM library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GDCM Wiki Main Page From GDCM Wiki Jump to: navigation, search Contents 1 GDCM : Grassroots DICOM library 1.1 Short Presentation 1.2 Users Corner 1.3 Software Engineering and Development 1.4 Developers Corner 1.5 External links 1.6 Footnote GDCM : Grassroots DICOM library This is the GDCM Wiki, a collaborative hypertext database of information, documentation and resources. Short Presentation Whenever medical data, especially medical image data, is generated in a clinical environment, that data must be stored such that it can be retrieved by the same hospital either immediately, or after several years to determine the effectiveness of a course of treatment and to allow comparisons of multiple images for the same patient. Digital Imaging and Communications in Medicine (DICOM) is a standard that governs this capability by specifying handling, storing, printing, and transmitting information in medical imaging. Grassroots DICOM (GDCM) is an implementation of the DICOM standard designed to be open source so that researchers may access clinical data directly. GDCM includes a file format definition and a network communications protocol, both of which should be extended to provide a full set of tools for a researcher or small medical imaging vendor to interface with an existing medical database. GDCM is an open source implementation of the DICOM standard. It offers some compatibility with ACR-NEMA 1.0 & 2.0 files (raw files). It is written in C++ and offers wrapping to the following target languages (via the use of swig): Python (supported), C# (supported), Java (supported), PHP (experimental), Perl (experimental). It attempts to support all possible DICOM image encodings, namely: RAW, JPEG lossy 8 & 12 bits (ITU-T T.81, ISO/IEC IS 10918-1), JPEG lossless 8-16 bits (ITU-T T.81, ISO/IEC IS 10918-1), JPEG 2000 reversible & irreversible (ITU-T T.800, ISO/IEC IS 15444-1), RLE, Deflated (compression at DICOM Dataset level), JPEG-LS (ITU-T T.87, ISO/IEC IS 14495-1), JPEG 2000 Multi-component reversible & irreversible (ISO/IEC IS 15444-2) (not supported for now), MPEG-2 (not supported for now). GDCM is designed under the XP definition and has a nightly dashboard (CMake/CTest/Dart). Users Corner Frequently Asked Questions (FAQ) About GDCM Getting Started with GDCM (include platform-specific notes) GDCM Resources Downloads Documentation Related Software End User Applications Third Party Applications Releases What is currently missing from GDCM implementation (aka the roadmap) ? Software Engineering and Development Style Guide Configuring and Building Dashboards Developers Corner Rules for GDCM Contributors GDCM on Ohloh GDCM Factoids GDCM SF.net Statistics GDCM SF.net/Piwik Report Rank History For Grassroots DICOM External links Official DICOM webpage DICOM Standard Status MedicalImaging (MITA) David Clunie's blog Medical Image Format FAQ - Part 8 I Do Imaging entry DICOM notes History of Picture Archiving and Communications Systems (PACS) Footnote The design/layout of this wiki was largely inspired by the ITK wiki, available under a Attribution 2.5. See: ITK Wiki GDCM: [Welcome | Site Map] Retrieved from ""http://gdcm.sourceforge.net/wiki/index.php?title=Main_Page&oldid=6511"" Category: GDCM Personal tools Log in Namespaces Page Discussion Variants Views Read View source View history Actions Search Navigation Main page Recent changes Random page Help Toolbox What links here Related changes Special pages Printable version Permanent link This page was last modified on 14 March 2013, at 17:15. This page has been accessed 242,152 times. Privacy policy About GDCM Wiki Disclaimers"	"null"	"null"	"Grassroots DICOM library."	"true"
"Image Processing"	"ITK"	"http://www.itk.org/"	"An open-source, cross-platform system for image analysis. [Apache2 from ITK 4.0]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ITK - Segmentation & Registration Toolkit PROJECT About Participants License Publications Statistics Get Involved Press Kit Contact Us News   RESOURCES Download Dashboard   Webinars Related Software Relevant Links Applications Bug Tracker   Testing      HELP Books Documentation FAQ   Wiki  Mailing Lists Tutorials Support  Consulting  Training   OPEN SOURCE VTK    ITK   CMake   KiwiViewer   CDash   ParaView   MIDAS   IGSTK   BatchMake   Welcome to the National Library of Medicine Insight Segmentation and Registration Toolkit (ITK).  ITK is an open-source, cross-platform system that provides developers with an extensive suite of software tools for image analysis.  Developed through extreme programming methodologies, ITK employs leading-edge algorithms for registering and segmenting multidimensional data. The goals for ITK include: Supporting the Visible Human Project. Establishing a foundation for future research. Creating a repository of fundamental algorithms. Developing a platform for advanced product development. Support commercial application of the technology. Create conventions for future work. Grow a self-sustaining community of software users and developers. This website is licensed under a Creative Commons Attribution-NoDerivs 3.0 Unported License. More license and site management information can be found here."	"null"	"null"	"An open-source, cross-platform system for image analysis. [Apache2 from ITK 4.0]"	"true"
"Image Processing"	"libvips"	"https://github.com/jcupitt/libvips"	"A fast image processing library with low memory needs. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"796"	"46"	"77"	"GitHub - jcupitt/libvips: A fast image processing library with low memory needs. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 796 Fork 77 jcupitt/libvips Code Issues 34 Pull requests 4 Wiki Pulse Graphs A fast image processing library with low memory needs. http://www.vips.ecs.soton.ac.uk 4,218 commits 101 branches 7 releases 17 contributors C 83.1% C++ 11.1% Python 3.8% M4 1.2% Other 0.8% C C++ Python M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 7.26 7.28 7.28.5-1 7.30 7.32 7.34 7.36 7.38 7.40 7.42 8.0 8.1 8.2 8.3 add-assignment-overloads add-buffered-image-mode add-copy-to-memory add-coz add-exiv2 add-flif add-gexiv2 add-giflib add-hsv add-index add-lanczos3 add-libpoppler add-librsvg add-magick7 add-magickload-page add-premultiply add-reduce add-rgba-jpeg add-scale add-tiff-orientation affine-bug backport-shrink-to-8.1 better-new-from-file bg-alpha carrierwave-bug colour-fix colour complex-constants convolution-tuning core-debug corner cplusplus dbg debug dim64 draw dzsave-gsf dzsave-metadata dzsave exif-names felixbuenemann-run-python-tests-on-travis fits-hack fix-dzsave-overlap foreign-clean format-hacking free-main-thread-buffers free-non-worker-buffers gate gh-pages gobject-introspection hough insert-hack invalidate-on-load-error jpeg-autorotate load-from-stream loadpdf-range master more-intro mosaicing-rewrite nbit-tiff-reader new-bilinear new-tiff-save new-vipsthumbnail newmaxmin no-blank-tiles no-openslide operation-invalidate-2 orc-debug orc-reduce parallel-read reserve reserve2 revert-462-better-dzsave-zip64-checks revise-decode rewrite-convf rot45 scrgb shrink2 single-thread-first-tile threaded-init threaded-init2 threaded-shrink tiffload-buffer transform-variants update-cimg vipsobject-image webp Nothing to show v8.3.0 v8.2.3 v8.2.2 v8.1 v8.0-beta v7.30.0 v7.28.0 Nothing to show New pull request Latest commit 9c18f1b Jul 13, 2016 jcupitt yet mmore doc fixes … classes are working again in gtk-doc, yay Permalink Failed to load latest commit information. benchmark fix use of header Jul 1, 2014 cplusplus Merge branch 'master' into add-assignment-overloads Jun 11, 2016 doc doc fixups Mar 25, 2016 libvips yet mmore doc fixes Jul 13, 2016 libvipsCC remove a lock from VImage.cc Jan 8, 2016 m4 get rid of m4-safe May 18, 2016 man remove deprecated stuff from vips help Apr 20, 2015 po fix up translations Apr 24, 2015 python fix comment Jun 19, 2016 swig cleanup and bump to 7.42 Nov 3, 2014 test better reducev multiplication Jun 15, 2016 tools better max_alpha default May 23, 2016 .gitignore removed intltool again May 18, 2016 .travis.yml Revert ""only run travis on master and stable"" Jun 7, 2016 AUTHORS updated German translation May 7, 2011 COPYING Update address for Free Software Foundation Mar 7, 2013 ChangeLog upsize with something other than nearest Jun 22, 2016 INSTALL update configure system Jan 23, 2013 Makefile.am sort out alpha going to and from 16-bit Feb 12, 2015 NEWS split to trunk/branches Aug 29, 2007 README.md Target master branch for Travis CI build badge Jun 7, 2016 THANKS split to trunk/branches Aug 29, 2007 TODO add note on Peter's CM work Jul 5, 2016 bootstrap.sh Use printf instead of echo -n in bootstrap.sh May 26, 2016 compile update build system files Apr 17, 2015 configure.ac doc improvements Jul 13, 2016 libvips.supp small bugs, start unit tests Sep 11, 2014 vips-cpp.pc.in add gobject to Requires: line Dec 24, 2014 vips.pc.in add gobject to Requires: line Dec 24, 2014 vipsCC.pc.in cleanup and bump to 7.42 Nov 3, 2014 README.md libvips : an image processing library libvips is a 2D image processing library. Compared to similar libraries, libvips runs quickly and uses little memory. libvips is licensed under the LGPL 2.1+. It has around 300 operations covering arithmetic, histograms, convolutions, morphological operations, frequency filtering, colour, resampling, statistics and others. It supports a large range of numeric formats, from 8-bit int to 128-bit complex. It supports a good range of image formats, including JPEG, TIFF, PNG, WebP, FITS, Matlab, OpenEXR, PDF, SVG, HDR, PPM, CSV, GIF, Analyze, DeepZoom, and OpenSlide. It can also load images via ImageMagick or GraphicsMagick. It has APIs for C and C++ and comes with a Python binding and a command-line interface. Bindings are available for Ruby, JavaScript and others. There is full documentation. There are several GUIs as well, see the VIPS website. There are packages for most unix-like operating systems and binaries for Windows and OS X. Building libvips from a source tarball We keep pre-baked tarballs of releases on the vips website: http://www.vips.ecs.soton.ac.uk/supported/current/ Untar, then in the libvips directory you should just be able to do: $ ./configure  Check the summary at the end of configure carefully. libvips must have build-essential, pkg-config, glib2.0-dev, and libxml2-dev. For the vips8 Python binding, you must have gobject-introspection, python-gi-dev, and libgirepository1.0-dev. You'll need the dev packages for the file format support you want. For basic jpeg and tiff support, you'll need libtiff5-dev, libjpeg-turbo8-dev, and libgsf-1-dev. See the Dependencies section below for a full list of the things that libvips can be configured to use. Once configure is looking OK, compile and install with the usual: $ make $ sudo make install  By default this will install files to /usr/local. We have detailed guides on the wiki for building on Windows and building on OS X. Building libvips from git Checkout the latest sources with: $ git clone git://github.com/jcupitt/libvips.git  Building from git needs more packages, you'll need at least swig, gtk-doc and gobject-introspection, see the dependencies section below. For example: $ brew install gtk-doc swig  Then build the build system with: $ ./bootstrap.sh  Debug build: $ CFLAGS=""-g -Wall"" CXXFLAGS=""-g -Wall"" \     ./configure --prefix=/home/john/vips --enable-debug $ make $ make install  Leak check: $ export G_DEBUG=gc-friendly $ export G_SLICE=always-malloc $ valgrind --suppressions=libvips.supp \     --leak-check=yes \     vips ... > vips-vg.log 2>&1  valgrind threading check: $ valgrind --tool=helgrind vips ... > vips-vg.log 2>&1  Clang build: $ CC=clang CXX=clang++ ./configure --prefix=/home/john/vips  Clang static analysis: $ scan-build ./configure --disable-introspection $ scan-build -o scan -v make  $ scan-view scan/2013-11-22-2  Clang dynamic analysis: $ FLAGS=""-O1 -g -fsanitize=address"" $ FLAGS=""$FLAGS -fno-omit-frame-pointer -fno-optimize-sibling-calls"" $ CC=clang CXX=clang++ LD=clang \     CFLAGS=""$FLAGS"" CXXFLAGS=""$FLAGS"" LDFLAGS=-fsanitize=address \     ./configure --prefix=/home/john/vips   $ FLAGS=""-O1 -g -fsanitize=thread"" $ FLAGS=""$FLAGS -fPIC -pie"" $ FLAGS=""$FLAGS -fno-omit-frame-pointer -fno-optimize-sibling-calls"" $ CC=clang CXX=clang++ LD=clang \     CFLAGS=""$FLAGS"" CXXFLAGS=""$FLAGS"" \     LDFLAGS=""-fsanitize=thread -fPIC -pie"" \     ./configure --prefix=/home/john/vips   Build with the GCC auto-vectorizer and diagnostics (or just -O3): $ FLAGS=""-O2 -msse4.2 -ffast-math"" $ FLAGS=""$FLAGS -ftree-vectorize -fdump-tree-vect-details"" $ CFLAGS=""$FLAGS"" CXXFLAGS=""$FLAGS"" \     ./configure --prefix=/home/john/vips   Static analysis with: $ cppcheck --force --enable=style . &> cppcheck.log  Dependencies libvips has to have gettext, glib2.0-dev and libxml2-dev. Other dependencies are optional, see below. Optional dependencies If suitable versions are found, libvips will add support for the following libraries automatically. See ./configure --help for a set of flags to control library detection. Packages are generally found with pkg-config, so make sure that is working. libtiff, giflib and libjpeg do not usually use pkg-config so libvips looks for them in the default path and in $prefix. If you have installed your own versions of these libraries in a different location, libvips will not see them. Use switches to libvips configure like: ./configure --prefix=/Users/john/vips \     --with-giflib-includes=/opt/local/include \     --with-giflib-libraries=/opt/local/lib \     --with-tiff-includes=/opt/local/include \     --with-tiff-libraries=/opt/local/lib \     --with-jpeg-includes=/opt/local/include \     --with-jpeg-libraries=/opt/local/lib  or perhaps: CFLAGS=""-g -Wall -I/opt/local/include -L/opt/local/lib"" \     CXXFLAGS=""-g -Wall -I/opt/local/include -L/opt/local/lib"" \     ./configure --without-python --prefix=/Users/john/vips   to get libvips to see your builds. vips8 Python binding If gobject-introspection, python-gi-dev, and libgirepository1.0-dev are available, libvips will install the vips8 Python binding. libjpeg The IJG JPEG library. Use the -turbo version if you can. libexif If available, libvips adds support for EXIF metadata in JPEG files. giflib The standard gif loader. If this is not present, vips will try to load gifs via imagemagick instead. librsvg The usual SVG loader. If this is not present, vips will try to load SVGs via imagemagick instead. libpoppler The usual PDF loader. If this is not present, vips will try to load PDFs via imagemagick instead. libgsf-1 If available, libvips adds support for creating image pyramids with dzsave. libtiff The TIFF library. It needs to be built with support for JPEG and ZIP compression. 3.4b037 and later are known to be OK. fftw3 If libvips finds this library, it uses it for fourier transforms. lcms2, lcms If present, vips_icc_import(), vips_icc_export() and vips_icc_transform() are available for transforming images with ICC profiles. If lcms2 is available it is used in preference to lcms, since it is faster. Large files libvips uses the standard autoconf tests to work out how to support large files (>2GB) on your system. Any reasonably recent unix should be OK. libpng If present, libvips can load and save png files. ImageMagick, or optionally GraphicsMagick If available, libvips adds support for loading all libMagick-supported image file types. Use --with-magickpackage=GraphicsMagick to build against graphicsmagick instead. Imagemagick 6.9+ needs to have been built with --with-modules. Most packaged IMs are, I think, but if you are rolling your own, you'll need to pass this flag to configure. If you are going to be using libvips with untrusted images, perhaps in a web-server, for example, you should consider the security implications of using a package with such a large attack surface. You might prefer not to enable Magick support. pangoft2 If available, libvips adds support for text rendering. You need the package pangoft2 in pkg-config --list-all. orc-0.4 If available, vips will accelerate some operations with this run-time compiler. matio If available, vips can load images from Matlab save files. cfitsio If available, vips can load FITS images. libwebp If available, vips can load and save WebP images. OpenEXR If available, libvips will directly read (but not write, sadly) OpenEXR images. OpenSlide If available, libvips can load OpenSlide-supported virtual slide files: Aperio, Hamamatsu, Leica, MIRAX, Sakura, Trestle, and Ventana. swig, python, python-dev If available, we build the vips7 python binding. Disclaimer No guarantees of performance accompany this software, nor is any responsibility assumed on the part of the authors. Please read the licence agreement. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jcupitt/libvips"	"A fast image processing library with low memory needs. [LGPL]"	"true"
"Image Processing"	"website"	"http://www.vips.ecs.soton.ac.uk/"	"A fast image processing library with low memory needs. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"VipsWiki VIPS From VipsWiki Jump to: navigation, search What is it? nip2-7.36 VIPS is a free image processing system. It includes a range of filters, arithmetic operations, colour processing, histograms, and geometric transforms. It supports ten pixel formats, from 8-bit unsigned int to 128-bit complex. As well as the usual JPEG, TIFF, PNG, SVG, PDF, GIF and WebP images, it also supports scientific formats like FITS, OpenEXR, Matlab, Analyze, PFM, Radiance, OpenSlide and DICOM (via libMagick). Compared to similar libraries, VIPS is fast and does not need much memory, see the Speed and Memory Use page. It comes in two main parts: libvips is the image-processing library and nip2 is the graphical user-interface. libvips has a simple GObject-based API and comes with interfaces for C, C++, the command-line and Python. Other bindings have been made, including Ruby and Go. libvips is used as an image processing engine by sharp (on node.js), carrierwave-vips, mediawiki, photoflow and others. The official VIPS GUI, nip2, aims to be about half-way between Photoshop and Excel. It is very bad at retouching photographs, but very handy for the many other imaging tasks that programs like Photoshop are used for. Both work on Linux/Unix (with convenient packages for most popular distributions, see links), Windows XP and later and MacOS 10.2 and later. License libvips is licensed under the LGPL and nip2 is licensed under the GPL, see http://www.gnu.org. This means you can use libvips in commercial or closed-source software, but that if you distribute a copy of libvips, you must offer a download of the libvips sources on your website somewhere, you need to tell your users that they are using something based in part on free software (perhaps a note in your help system), and if you directly modify the libvips sources in any way, you must release the source to your changes. Download Supported  Download and install the current supported version for Windows, Build_on_OS_X or as source code. Most Unix systems have vips available through their package manager. Homebrew, Fink, and Macports all have packages. See What's New in 8.3 for an introduction to this version. Development  Read about and download the sources for the current development version. VIPS aims for a six-month development cycle. See the Development pages for notes on how to work on the code yourself. Documentation libvips documentation  It includes a detailed description of the whole API, tutorial sections on the command-line, C, C++ and Python interfaces, how to extend libvips and how to write your own binding. Function list  Every libvips operator in a big table you can search, handy for finding a function for a certain task. The vips blog  Has news about vips and posts about using the system. https://github.com/jcupitt/libvips and https://github.com/jcupitt/nip2  All of the sourcecode and the build systems. If you need docs on the old vips7 API, see the vips-7.24 docs area. Here are some quick guides to introduce nip2, the VIPS GUI. These guides are part of the nip2 manual: click Help / Contents (or press F1) to view the guide while using the program. Quick interface tour  Runs quickly though some easy stuff to show how the interface works. Infrared reflectogram mosaic tour  Explains how to use nip2 to build reflectogram mosaics. Nerd tour  Goes into some detail about the insides of nip2 and how to program your own widgets. Please report bugs, ask questions and log feature requests on the libvips issue tracker and the nip2 issue tracker. There's a VIPS mailing list for announcements. Go to this page for subscription details and the list archive. The Contact page has the names and addresses of the maintainers. The Examples page summarises the example workspaces that come with nip2. Several of the HOWTO guides are worked examples. Cite Martinez, K. and Cupitt, J. (2005) VIPS ― a highly tuned image processing software architecture. In Proceedings of IEEE International Conference on Image Processing 2, pp. 574-577, Genova. Cupitt, J. and Martinez, K. (1996) VIPS: An image processing system for large images, Proc. SPIE, vol. 2663, pp. 19--28. Other stuff Contact  Maintainers and the mailing list. Links  Related sites, pages about VIPS, people who use VIPS. What's New in 8.3  We've just released 8.3, a fancy new version. This page explains what's new in headline form. Hello World  Minimal programs using VIPS, handy for testing. HOWTO  Various HOWTO guides, including building on windows. History  How VIPS came to be. libvips  Quick introduction to the library. nip2  Quick overview of the graphical user interface. Benchmarks  Results from the vips im_benchmark command. Retrieved from ""http://www.vips.ecs.soton.ac.uk/index.php?title=VIPS&oldid=4021"" Navigation menu Views Main page Discussion View source History Personal tools Log in sections Home News Screenshots download Documentation Contact wiki Recent changes Random page Help Search   Tools What links here Related changes Special pages Printable version Permanent link Page information This page was last modified on 15 April 2016, at 13:11. Privacy policy About VipsWiki Disclaimers"	"null"	"null"	"A fast image processing library with low memory needs. [LGPL]"	"true"
"Image Processing"	"MagickWnd"	"http://www.imagemagick.org/script/api.php"	"ImageMagick program interfaces for C. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ImageMagick: Application Program Interfaces Home Download Tools Command-line Resources Develop Search Community ImageMagick includes a number of ready-made interfaces. This makes it possible to modify or create images automagically and dynamically utilizing your favorite development platform. Ada G2F implements an Ada 95 binding to a subset of the low-level MagickCore library. C Use MagickWand to convert, compose, and edit images from the C language. There is also the low-level MagickCore library for wizard-level developers. Ch ChMagick is a Ch binding to the MagickCore and MagickWand API. Ch is an embeddable C/C++ interpreter for cross-platform scripting. COM+ Use ImageMagickObject to convert, compose, and edit images from a Windows COM+ compatible component. C++ Magick++ provides an object-oriented C++ interface to ImageMagick. See A Gentle Introduction to Magick++ for an introductory tutorial to Magick++. We include the source if you want to correct, enhance, or expand the tutorial. GO GoImagick is a set of Go bindings to ImageMagick's MagickWand and MagickCore C APIs. Java JMagick provides an object-oriented Java interface to ImageMagick. Im4java is a pure-java interface to the ImageMagick command-line. LabVIEW LVOOP ImageMagick is an object-oriented LabVIEW interface to ImageMagick. Lisp CL-Magick provides a Common Lisp interface to the ImageMagick library. Lua Lua bindings to ImageMagick for LuaJIT using FFI. Neko NMagick is a port of the ImageMagick library to the haXe and Neko platforms. It provides image manipulation capabilities to both web and desktop applications using Neko. .NET Use Magick.NET to convert, compose, and edit images from Windows .NET. ImageMagickApp is a .NET application written in C# that utilizes the ImageMagick command line to allow conversion of multiple image formats to different formats. Pascal PascalMagick a Pascal binding for the MagickWand API and also the low-level MagickCore library. It works with Free Pascal / Lazarus and Delphi. Perl Use PerlMagick to convert, compose, and edit images from the Perl language. PHP MagickWand for PHP a native PHP-extension to the ImageMagick MagickWand API. IMagick is a native PHP extension to create and modify images using the ImageMagick API. Documentation for the extension is available here. phMagick is a wrapper class for ImageMagick, wrapping the most common web image manipulation actions in easy to use functions, but allowing full access to ImageMagick's power by issuing system calls to it's command-line programs. Python Wand is a ctypes-based ImagedMagick binding library for Python. PythonMagick is an object-oriented Python interface to ImageMagick. PythonMagickWand is an object-oriented Python interface to MagickWand based on ctypes. REALbasic The MBS Realbasic ImageMagick is a plugin that utilizes the power of ImageMagick from within the RealBasic environment. Ruby RMagick is an interface between the Ruby programming language and the MagickCore image processing libraries. Get started with RMagick by perusing the documentation. MagickWand for Ruby is an interface between the Ruby programming language and the MagickWand image processing libraries. Get started with MagickWand for PHP by perusing the documentation. MiniMagick is a Ruby wrapper for ImageMagick command line. MiniMagick gives you convenient access to all the command line options ImageMagick supports. QuickMagick is a gem for easily accessing ImageMagick command line tools from Ruby programs. Rust RustWand is a MagickWand bindings for the Rust language. Tcl/Tk TclMagick a native Tcl-extension to the ImageMagick MagickWand API. XML RPC RemoteMagick is an XML-RPC web service that creates image thumbnails. Donate • Sitemap • Related • Security • Architecture Back to top • Public Key • Contact Us © 1999-2016 ImageMagick Studio LLC"	"null"	"null"	"ImageMagick program interfaces for C. [Apache2]"	"true"
"Machine Learning"	"website"	"http://opencv.org/"	"Open Source Computer Vision Library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10268"	"1204"	"8653"	"GitHub - opencv/opencv: Open Source Computer Vision Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,204 Star 10,268 Fork 8,653 opencv/opencv Code Issues 929 Pull requests 62 Wiki Pulse Graphs Open Source Computer Vision Library http://opencv.org 19,337 commits 2 branches 47 releases 585 contributors C++ 84.0% Cuda 5.9% C 3.0% Java 2.4% CMake 2.2% Python 1.5% Other 1.0% C++ Cuda C Java CMake Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.4 master Nothing to show 3.1.0 3.0.0 3.0.0-rc1 3.0.0-beta 3.0.0-alpha 3.0-ocl-tp2 3.0-ocl-tech-preview 2.4.13 2.4.12.3 2.4.12.2 2.4.12.1 2.4.12 2.4.11 2.4.10.4 2.4.10.3 2.4.10.2 2.4.10.1 2.4.10 2.4.9.1 2.4.9 2.4.8.3 2.4.8.2 2.4.8.1 2.4.8 2.4.7.2 2.4.7.1 2.4.7 2.4.7-rc1 2.4.6.2 2.4.6.2r3 2.4.6.2r2 2.4.6.2-rc1 2.4.6.1 2.4.6 2.4.5 2.4.4 2.4.4-beta 2.4.3.2 2.4.3.1 2.4.3 2.4.3-rc 2.4.2 2.4.1 2.4.0 2.3.1 2.3.0 2.2 Nothing to show New pull request Latest commit 69c4e84 Jul 15, 2016 alalek Merge pull request #6918 from jet47:gpu-opengl-sample-build Permalink Failed to load latest commit information. .github Rephrase parts of the templates and use comments Jul 2, 2016 3rdparty Merge pull request #6790 from terfendail:linearresize_accuracy Jul 11, 2016 apps opencv_visualization: check cmdline args Jul 12, 2016 cmake Merge pull request #6779 from alalek:python_dynamic_lookup Jul 15, 2016 data Fix the missing - in file. Feb 18, 2016 doc py_tutorials: fix cv2.findContours return val Jul 10, 2016 include Increasing the dimension of features space in the SVMSGD::train funct… Feb 10, 2016 modules Merge pull request #6803 from alalek:issue_6720 Jul 15, 2016 platforms added suppression for TBB valgrind issue Jul 14, 2016 samples use HAVE_OPENGL instead of WITH_OPENGL for GPU opengl sample Jul 15, 2016 .gitattributes Made changes to OpenCVFindMatlab suggested by SpecLad Sep 14, 2013 .gitignore Improved thrust interop tutorial. Sep 24, 2015 .tgitconfig Add tgit.icon project config Feb 26, 2014 CMakeLists.txt Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms Jul 4, 2016 CONTRIBUTING.md add link to contributing guidelines Sep 17, 2015 LICENSE Update license year range to 2016 Jan 18, 2016 README.md Removed gittip link Feb 8, 2016 README.md OpenCV: Open Source Computer Vision Library Resources Homepage: http://opencv.org Docs: http://docs.opencv.org/master/ Q&A forum: http://answers.opencv.org Issue tracking: https://github.com/Itseez/opencv/issues Contributing Please read before starting work on a pull request: https://github.com/Itseez/opencv/wiki/How_to_contribute Summary of guidelines: One pull request per issue; Choose the right base branch; Include tests and documentation; Clean up ""oops"" commits before submitting; Follow the coding style guide. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Itseez/opencv"	"Open Source Computer Vision Library. [BSD]"	"true"
"Image Processing"	"OpenEXR"	"http://www.openexr.com/"	"Cross-platform library for high dynamic range imaging. [Modified BSDF]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"284"	"84"	"171"	"GitHub - openexr/openexr: OpenEXR is a high dynamic-range (HDR) image file format developed by Industrial Light & Magic for use in computer imaging applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 84 Star 284 Fork 171 openexr/openexr Code Issues 43 Pull requests 38 Wiki Pulse Graphs OpenEXR is a high dynamic-range (HDR) image file format developed by Industrial Light & Magic for use in computer imaging applications http://www.openexr.com/ 1,116 commits 26 branches 25 releases 14 contributors C++ 71.0% C 25.4% Objective-C 3.5% Other 0.1% C++ C Objective-C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ILM_sync OPENEXR_1_0_7_PATCHES cmake-fixes develop export-fixes exrenvmap-cleanup exrmultipart-tiles iif-optimisations incorrect-type-handling item72 item76 lossy master mavericks_port optimisation-bugfix pyimath-jihun-update tiled-branch tiled v1_v2_merge v1.x v2.2fixes vc_cleanup vectorfixes viewers_configfix vs-dev zipped-attribute Nothing to show v2.2.0 v2.1.0 v2.0.1 v2.0.0 v2.0.0.beta.2 v2.0.0.beta.1 v2.0.0.GM v1.7.1 start PHOTOSHOP_1_0 OPENEXR_1_7_0 OPENEXR_1_4_0 OPENEXR_1_4_0a OPENEXR_1_3_2 OPENEXR_1_3_1 OPENEXR_1_3_0 OPENEXR_1_2_2 OPENEXR_1_2_1 OPENEXR_1_1_1 OPENEXR_1_1_0 OPENEXR_1_0_7 OPENEXR_1_0_4 OPENEXR_VIEWERS_1_0_2 ILMBASE_1_0_2 D_EXR_1_0 Nothing to show New pull request Latest commit 9101514 Aug 14, 2014 ehanway-ilm Merge pull request #126 from fnordware/LL_literal … Use LL for 64-bit literals Permalink Failed to load latest commit information. Contrib Additional sync Oct 15, 2013 IlmBase Remove Visual Studio version-specific project and solution files Aug 7, 2014 OpenEXR Change suffixes to ULL because Int64 is unsigned Aug 14, 2014 OpenEXR_Viewers Case-sensitive CMake module name fix. Aug 9, 2014 PyIlmBase CMake support for PyIlmBase Aug 7, 2014 .gitignore Merge branch 'master' into v1_v2_merge. Jul 31, 2012 README Updated AUTHORS and README. Jul 10, 2014 README README  // // OpenEXR //   OpenEXR is a high dynamic-range (HDR) image file format developed by  Industrial Light & Magic (ILM) for use in computer imaging applications.   ILM subsequently released the source code and adjoining material as open  source software.  The distribution has evolved to include support for stereoscopic and deep  images.  Weta Digital, Disney, Sony Pictures Imageworks, Pixar, DreamWorks Animation and other studios have made contributions to the code base. The file format has seen wide adoption in a number of industries.  The library, including all contributions, is released under the modified  BSD license.    OpenEXR's features include:      * Higher dynamic range and color precision than existing 8- and 10-bit        image file formats.     * Support for 16-bit floating-point, 32-bit floating-point, and        32-bit integer pixels. The 16-bit floating-point format, called ""half"",        is compatible with the half data type in NVIDIA's Cg graphics language        and is supported natively on their new GeForce FX and Quadro FX 3D        graphics solutions.     * Multiple image compression algorithms, both lossless and lossy. Some of       the included codecs can achieve 2:1 lossless compression ratios on images       with film grain.  The lossy codecs have been tuned for visual quality and       decoding performance.     * Extensibility. New compression codecs and image types can easily be added       by extending the C++ classes included in the OpenEXR software distribution.       New image attributes (strings, vectors, integers, etc.) can be added to        OpenEXR image headers without affecting backward compatibility with        existing OpenEXR applications.      * Support for sterescopic image workflows and a generalisation to        multi-views.  Added Feature highlights for v2 release      * Flexible support for deep data. Pixels can store a variable-length list of        samples and, thus, it is possible to store multiple values at different        depths for each pixel. Hard surfaces and volumetric data representations       are accomodated.     * Multipart. Ability to encode separate, but related, images in one file.        This allows for access to individual parts without the need to read other       parts in the file.     * Versioning. OpenEXR source allows for user configurable C++       namespaces to provide protection when using multiple versions of the       library in the same process space.          The distribution is divided into the following sub-modules:     * IlmBase     * OpenEXR     * OpenEXR_Viewers     * PyIlmBase     * Contrib      Please see the README files of each of the individual directories for more information.  A collection of OpenEXR images are available from the adjecent repository:  openexr-images  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/openexr/openexr"	"Cross-platform library for high dynamic range imaging. [Modified BSDF]"	"true"
"Image Processing"	"OpenImageIO"	"https://github.com/OpenImageIO/oiio"	"Powerful image and texture wrangling library with support for a wide number of common lossy and RAW formats. [Modified BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"440"	"85"	"214"	"GitHub - OpenImageIO/oiio: OpenImageIO Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 85 Star 440 Fork 214 OpenImageIO/oiio Code Issues 65 Pull requests 16 Wiki Pulse Graphs OpenImageIO http://www.openimageio.org 3,153 commits 19 branches 212 releases 85 contributors C++ 81.0% TeX 12.7% Python 2.8% CMake 2.1% C 1.0% Makefile 0.3% Shell 0.1% C++ TeX Python CMake C Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags RB-0.5 RB-0.6 RB-0.7 RB-0.8 RB-0.9 RB-0.10 RB-1.0 RB-1.1 RB-1.2 RB-1.3 RB-1.4 RB-1.5 RB-1.6 master release spi-Arn3.4.73 spi-spcomp2-release-38 spi-spcomp2-release-39 spi-spcomp2-release-40 Nothing to show spiArn3.5.82.0 spiArn3.5.75.0 spiArn3.5.68.0 spiArn3.5.66.0 spiArn3.5.50.0 spiArn3.5.48.0 spiArn3.5.45.1 spiArn3.5.45.0 spi-v8-Arn3.4.73.6 spi-v7-Arn3.4.73.3 spi-spcomp2-release-40.0 spi-spcomp2-release-39.2 spi-spcomp2-release-39.1 spi-spcomp2-release-38.0 spi-SpComp2-v20 spi-SpComp2-v14 spi-SpComp2-v12 spi-SpComp2-v11 spi-SpComp2-v10.1 spi-SpComp2-v10 spi-SpComp2-v9.2 spi-SpComp2-v9 spi-Arn3.5.93.10 spi-Arn3.5.91.0 spi-Arn3.5.90.0 spi-Arn3.5.82.0 spi-Arn3.5.75.0 spi-Arn3.5.68.0 spi-Arn3.5.66.0 spi-Arn3.5.50.0 spi-Arn3.5.48.0 spi-Arn3.5.45.1 spi-Arn3.5.45.0 spi-Arn3.5.41.0 spi-Arn3.5.37.0 spi-Arn3.5.35.0 spi-Arn3.5.31.0 spi-Arn3.5.28.2 spi-Arn3.5.28.0 spi-Arn3.5.26.0 spi-Arn3.5.25.0 spi-Arn3.5.24.0 spi-Arn3.5.16.0 spi-Arn3.5.14.0 spi-Arn3.5.13.1 spi-Arn3.5.12.0 spi-Arn3.5.11.0 spi-Arn3.5.10.0 spi-Arn3.5.8.0 spi-Arn3.5.5.0 spi-Arn3.5.2.0 spi-Arn3.5.0.0 spi-Arn3.4.73.7 spi-Arn3.4.73.6 spi-Arn3.4.72.0 spi-Arn3.4.71.0 arnold-3.4.71.0 Release-1.7.3dev Release-1.7.2dev Release-1.7.1dev Release-1.7.0dev Release-1.6.15 Release-1.6.14 Release-1.6.13 Release-1.6.12 Release-1.6.11 Release-1.6.10 Release-1.6.9 Release-1.6.8 Release-1.6.8RC2 Release-1.6.7RC1 Release-1.6.6beta Release-1.6.4dev Release-1.6.3dev Release-1.6.2dev Release-1.6.1dev Release-1.5.24 Release-1.5.23 Release-1.5.22 Release-1.5.21 Release-1.5.20 Release-1.5.19 Release-1.5.18 Release-1.5.17 Release-1.5.16 Release-1.5.15 Release-1.5.14 Release-1.5.13 Release-1.5.12 Release-1.5.11 Release-1.5.10 Release-1.5.9RC1 Release-1.5.8beta1 Release-1.5.7dev Release-1.5.6dev Release-1.5.5dev Release-1.5.4dev-pre-SIMD Release-1.5.3dev Release-1.5.2dev Release-1.5.1dev Nothing to show New pull request Latest commit e52719a Jul 15, 2016 lgritz committed on GitHub Strutil & Sysutil odds and ends (#1450) … * Fix utf_to_unicode, should take string_view, not reference  * Sysutil::getenv  * Strutil::base64_encode Permalink Failed to load latest commit information. .github Docs updates Mar 17, 2016 site/spi Minor updates for SPI's spcomp2 library builds Jun 15, 2016 src Strutil & Sysutil odds and ends (#1450) Jul 15, 2016 testsuite Beef up test scripts to handle multiple ref directories. Jul 14, 2016 .gitignore Adjust .gitignore Feb 16, 2016 .travis.yml Add gcc6 to the test matrix (#1439) Jun 22, 2016 CHANGES.md CHANGES Jul 1, 2016 CMakeLists.txt Revert LICENSE.md back to LICENSE. Jul 7, 2016 CONTRIBUTING.md Docs updates Mar 17, 2016 CREDITS.md Change plain text docs to markdown. (#1442) Jun 29, 2016 INSTALL.md Change plain text docs to markdown. (#1442) Jun 29, 2016 LICENSE Revert LICENSE.md back to LICENSE. Jul 7, 2016 Makefile Clear up inconsistencies with USE_LIBCPLUSPLUS vs OIIO_BUILD_USECPLUS… Apr 19, 2016 README.md Change plain text docs to markdown. (#1442) Jun 29, 2016 appveyor.yml Appveyor -- reduce the absurd verbosity of warnings when building Ope… Jun 29, 2016 README.md README for OpenImageIO Introduction The primary target audience for OIIO is VFX studios and developers of tools such as renderers, compositors, viewers, and other image-related software you'd find in a production pipeline. OpenImageIO consists of: Simple but powerful ImageInput and ImageOutput APIs that provide an abstraction for reading and writing image files of nearly any format, without the calling application needing to know any of the details of these file formats, and indeed without the calling application needing to be aware of which formats are available. A library that manages subclasses of ImageInput and ImageOutput that implement I/O from specific file formats, with each file format's implementation stored as a plug-in. Therefore, an application using OpenImageIO's APIs can read and write any image file for which a plugin can be found at runtime. Plugins implementing I/O for several popular image file formats, including TIFF, JPEG/JFIF, OpenEXR, PNG, HDR/RGBE, ICO, BMP, Targa, JPEG-2000, RMan Zfile, FITS, DDS, Softimage PIC, PNM, DPX, Cineon, IFF, Field3D, Ptex, Photoshop PSD, Wavefront RLA, SGI, WebP, GIF, and a variety of ""RAW"" digital camera formats, and a variety of movie formats (readable as individual frames). More are being developed all the time. Several command line image tools based on these classes, including oiiotool (command-line format conversion and image processing), iinfo (print detailed info about images), iconvert (convert among formats, data types, or modify metadata), idiff (compare images), igrep (search images for matching metadata), and iv (an image viewer). Because these tools are based on ImageInput/ImageOutput, they work with any image formats for which ImageIO plugins are available. An ImageCache class that transparently manages a cache so that it can access truly vast amounts of image data (tens of thousands of image files totaling multiple TB) very efficiently using only a tiny amount (tens of megabytes at most) of runtime memory. A TextureSystem class that provides filtered MIP-map texture lookups, atop the nice caching behavior of ImageCache. This is used in commercial renderers and has been used on many large VFX and animated films. ImageBuf and ImageBufAlgo functions -- a simple class for storing and manipulating whole images in memory, and a collection of the most useful computations you might want to do involving those images, including many image processing operations. Python bindings for all of the major APIs. Licensing OpenImageIO is (c) Copyright 2008-2016 by Larry Gritz et al. All Rights Reserved. OpenImageIO is distributed using the modified BSD license (also known as the ""new BSD"" or ""3-clause BSD"" license). Please read the ""LICENSE"" file for the legal wording. The documentation is licensed under the Creative Commons Attribution 3.0 Unported License (http://creativecommons.org/licenses/by/3.0/). The plain English bottom line is that OpenImageIO is free, as well as freely modifiable and redistributable (in both source and binary form). You may use part or all of it in your own applications, whether proprietary or open, free or commercial. Using it in a commercial or proprietary application DOES NOT obligate you to pay us, or to use any particular licensing terms in your own application. Some code and resources are distributed along with OIIO that have highly compatible, though slightly different, licenses (generally MIT or Apache). See the PDF documentation Acknowledgements section for details. Web Resources Main web page: http://www.openimageio.org GitHub page: http://github.com/OpenImageIO/oiio Mail list subscriptions and archives: Developer mail list: http://lists.openimageio.org/listinfo.cgi/oiio-dev-openimageio.org Just release announcements: http://lists.openimageio.org/listinfo.cgi/oiio-announce-openimageio.org Contact info@openimageio.org Building and Installation Please read the ""INSTALL"" file for detailed instructions on how to build and install OpenImageIO. If you build with EMBEDPLUGINS=0, remember that you need to set the environment variable OIIO_LIBRARY_PATH to point to the 'lib' directory where OpenImageIO is installed, or else it will not be able to find the plugins. Documentation The primary user and programmer documentation can be found in src/doc/openimageio.pdf (in a source distribution) or in the doc/openimageio.pdf file of an installed binary distribution. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OpenImageIO/oiio"	"Powerful image and texture wrangling library with support for a wide number of common lossy and RAW formats. [Modified BSD]"	"true"
"Image Processing"	"tesseract-ocr"	"https://code.google.com/p/tesseract-ocr/"	"An OCR engine. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"An OCR engine. [Apache2]"	"true"
"Image Processing"	"Video++"	"https://github.com/matt-42/vpp"	"A C++14 high performance video and image processing library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"223"	"24"	"32"	"GitHub - matt-42/vpp: Video++, a C++14 high performance video and image processing library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 223 Fork 32 matt-42/vpp Code Issues 1 Pull requests 0 Pulse Graphs Video++, a C++14 high performance video and image processing library. http://documentup.com/matt-42/vpp 288 commits 4 branches 2 releases Fetching contributors C++ 97.9% CMake 1.7% Other 0.4% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.2 master miel wip Nothing to show v0.1-alpha 0.2 Nothing to show New pull request Latest commit 1242cff Jun 28, 2016 matt-42 Test imageNd.begin Permalink Failed to load latest commit information. benchmarks Speedup and Benchmark FAST. Jun 1, 2016 examples Update and fix examples. Feb 14, 2015 tests Test imageNd.begin Jun 28, 2016 vpp Merge branch 'master' of github.com:matt-42/vpp Jun 28, 2016 .gitignore Add temporary files in gitignore Apr 24, 2014 CMakeLists.txt Update to the last naming convention of iod. Oct 23, 2014 LICENSE Switch to the MIT licence. Feb 13, 2015 README.md Update Readme. Jun 16, 2016 install_thirdparty.sh Update and fix examples. Feb 14, 2015 README.md Video++ Video++ is a video and image processing library taking advantage of the C++14 standard to ease the writing of fast video and image processing applications. The idea behind Video++ performance is to generate via meta-programming code that the compiler can easily optimize. Its main features are: Generic N-dimensional image containers. A growing set of image processing algorithms. Zero-cost abstractions to easily write image processing algorithms for multicore SIMD processors. An embedded language to evaluate image expressions. Tested compilers: G++ 4.9.1, Clang++ 3.5.0 Dependencies: the iod library Eigen 3 Because Video++ relies on C++14 features, only compilers fully supporting this standard are able to compile the library. Getting Started Video++ is a header-only library, To start coding, include the vpp.hh header to access the core of the library: #include <vpp/vpp.hh> If you use the parallel constructs of Video++ and need to target multiple cores, activate the OpenMP optimizations: g++ -I __path_to_vpp__ main.cc -fopenmp -lgomp Image Containers The generic container imageNd represents a dense N-dimensional rectangle set of pixels with values of type V. For convenience, image1d, image2d, image3d are respectively aliases to imageNd, imageNd, and imageNd. // Allocates a 100 rows x 200 columns 2d image of integers. image2d<int> A(100, 200); These types provide accesses to the pixel buffer and to other piece of information useful to process the image. In contrast to std::vector, assigning an image to the other does not copy the data, but share them so no accidental expensive deep copy happen. image2d<int> B = A; // B now points to A's data. Image options _border and _aligned Image constructors also take special image options. _border (default: 0) set the border surrounding the pixels so filter accessing neighborhood access to valid pixels when traversing image borders. _aligned (default: 16 bytes) set the alignment in bytes of the beginning of the first pixel of each row (border excluded) to enable aligned SIMD memory instructions. // Allocates a 100x100 image with a border of 3 pixels // and rows aligned on 32 bytes (best for 256 bits SIMD // units like AVX2). image2d<int> C(100, 100, _border = 3, _aligned = 32); _data and _pitch To use image buffers allocated by external libraries, the _data and _pitch options respectively pass the pointer to the first pixel of the image and the distance in bytes between the first pixels of two consecutive rows. When setting these options, video++ is not responsible of freeing the data buffer. // Wraps an external images of 100x100 pixels, with a pitch // of 1000 bytes. image2d<int> C(100, 100, _data = my_data_ptr, _pitch = 1000); OpenCV interoperability The header vpp/utils/opencv_bridge.hh (not included by vpp/vpp.hh) provides explicit conversions to and from OpenCV image types. It allows running video++ algorithms on OpenCV images and to run OpenCV algorithms on video++ images, without cloning the pixel buffer. Ownership of the buffer will switch to OpenCV or Video++ depending of the order of the destructor calls. // Load JPG image in a vpp image using OpenCV imread. image2d<vuchar3> img = from_opencv<vuchar3>(cv::imread(""image.jpg""));  // Write a vpp image using OpenCV imwrite. cv::imwrite(""in.jpg"", to_opencv(img)); Note: Since it is not possible to opencv to free video++ images, an OpenCV image must not be the last one to hold a video++ image. Vector Types Video++ vector types are aliases to eigen3 vectors, providing fast linear algebra. The syntax is v{T}{N} such as T is one the following : char, short, int, float, double, uchar, ushort, uint. N is an integer in [0, 4]. For example, the type image2d<vuchar4> can handle an image of RGBA 8-bit. Pixel Wise Kernels The pixel_wise construct allows to easily and efficiently map simple kernel functions on all the pixels of a set of images. It relies on OpenMP to spread the processing on all the available cores, and SIMD-vectorize the processing of rows when possible. If the kernel function returns a value, pixel_wise will return a newly allocated image filled with the results of the kernel. Given A and B two 2d images of integers: // Compute C, the parallel pixel wise sum of A and B. auto C = pixel_wise(A, B) | [] (int& a, int& b) { return a + b; }; while being much shorter, runs as fast as the following OpenMP optimized code: image2d<int> C(A.domain()); int nr = A.nrows(); int nc = A.nrows();  #pragma omp parallel for for (int r = 0; r < nr; r++) {   int* curA = &A(r, 0);   int* curB = &B(r, 0);   int* curC = &C(r, 0);    for (int i = 0; i < nc; i++)     curA[i] = curB[i] + curC[i]; } Kernel arguments Given pixel_wise(I_0, ..., I_N) | my_kernel, pixel_wise will traverse the definition domain and for every pixel location P call my_kernel(I_0(P), ..., I_N(P)) with I_N(P) a reference to the pixel of I_N located at location P. Parallelism and computational dependencies By default, pixel_wise generates a parallel execution of the kernel processing a batch of image row per processor core. However, some recursive pixel wise kernels imply a dependency between the computation of neighbor pixels. The pixel_wise construct let you express these constraints. For example, the following set the _col_backward dependency to integrate pixel values along the columns, from the bottom to the top of the image: pixel_wise(A_nbh)(_col_backward) |   [] (auto& nbh) { nbh(0,0) += nbh(1, 0); } The following are valid options: _row_forward: the computation of the i th pixel of row X depends on the computation of the i-1 th pixel of the same row. _row_backward: the computation of the i-1th pixel of row X depends on the computation of the i th pixel of the same row. _col_forward: the computation of the i th pixel of col X depends on the computation of the i-1 th pixel of the same col. _col_backward: the computation of the i-1th pixel of col X depends on the computation of the i th pixel of the same col. _no_thread: disable the parallelism without specifying a dependency. To take these constraints into account, video++ change the way pixel_wise iterate on images while keeping as much parallelism as possible. For example, if _col_backward is specified, each thread will process a batch of consecutive rows, in order to leverage multiple cores and SIMD instructions. Accessing Neighborhood Video++ provides fast access to rectangular pixel neighbors inside pixel_wise kernels. The speed of access mainly comes from the direct 2d indexing of the neighborhood, and the ability of the compiler to vectorize these accesses using SIMD vector extensions. To stay portable, no explicit SIMD optimization is done by video++. On the other hand, the generated code was designed to be trivial for the compiler to vectorize if the kernel does not contain conditional branching. The accesses are expressed in relative coordinates. For example, nbh(1,1) accesses the bottom right neighbor of the current pixel, and nbh(0,0) refers to the current pixel. // Define a 3x3 neighborhood accessor on image B. // Note that for performance reasons, the boundaries // of the neighborhood are static.  auto BN = box_nbh2d<int, 3, 3>(B);  pixel_wise(S, BN) | [&] (auto& s, auto& b_nbh) {    // Average the pixels in the c4 neighborhood.   s = (b_nbh(-1,0) + b_nbh(0, -1) +       b_nbh(1,0) + b_nbh(0,1)) / 4; }; Block Wise Kernels Theblock_wise construct allows to map a function on every cell of a given grid. This construct is similar to pixel_wise, but instead of processing one pixel, the block_wise kernel processes a given cell. // Given a grid with cell of size 10x10 pixels. block_wise(vint2{10, 10}, A, B, C, A.domain()) |   [] (auto a, auto b, auto c, box2d box)   {      // a, b and c are sub images representing A, B     // and C at the current cell.     // All the algorithms of the library work on sub images.      // The box argument is the cell representation of A.domain() and holds     // the coordinates of the current cell. box.p1() and box.p2() are     // respectively the first and the last pixel of the cell. }; Row Wise and Col Wise Kernels row_wise and col_wise are shortcuts to process the image by row or by column. For example, the following compute row wise sums of a given image: std::vector<int> sums(A.nrows(), 0); row_wise(A, A.domain()) | [] (auto& a, vint2 coord) {   sums[coord[0]] += a; }; 2D Image Expressions Warning: This feature is experimental and is currently very slow to compile. Video++ embeds into C++14 a domain specific language allowing to build image expressions that will be evaluated using eval. While leveraging the power of multi-core SIMD architectures, it enables the developer to shorten tens of lines of code into one line, easy to write and to read. For example, the following expression formulates the an operation on the pixels of two images using the _v accessor: _v(A) + _v(B) * 2 The eval routine actually runs this expression against each pixels of A and B and returns the resulting image such that, given two images A and B with same dimensions and pixels with type pixel_type: auto C = eval(_v(A) + _v(B) * 2); is equivalent to image2d<pixel_type> C(A.domain()); for (int r = 0; r < A.nrows(); r++) for (int c = 0; c < A.ncols(); c++)   C(r, c) = A(r, c) + B(r, c) * 2; Placeholders can also be used to refer to images passed as arguments to eval. Using placeholders, the use of _v to access pixels is not required: auto C = eval(A, B, _1 + _2 * 2); eval generates code spanning one thread per processor core. Depending on your compiler, there is a good chance that the loops will be optimized with SIMD vector instructions. Note that no technical challenge but some time constraints prevented us to implement N-dimensional image expressions. The following explains the different types of valid expressions. Assignments In many cases, creating new images when evaluating an expression is not needed and can affect the performances of an algorithm. To avoid this extra image creation, assignments allows storing the result of an expression in an existing image as in the following. Given A, B and C three images of the same dimensions: // No image allocation here: eval(_v(C) = _v(A) + _v(B) * 2); Conditional branching The language of image expression support conditional branching with a construct similar to the ?: ternary operator of C++: eval(_v(C) = _if(_v(A) > _v(B))                 (_v(A))                 (_v(B))    ); Global expressions Image expressions are not limited to pixel wise operations. Global expressions integrate information over the whole definition domain. Sum Sum an expression over the whole definition domain: int sum = eval(_sum(_v(A) + _v(B))); Min, Max Find the minimum/maximum value of an expression: auto min_value = eval(_min(_v(A) + _v(B))); auto max_value = eval(_max(_v(A) + _v(B))); Argmin, Argmax Find the position (row, column) of the minimum/maximum value of an expression: vint2 argmin = eval(_argmin(_v(A) + _v(B))); vint2 argmax = eval(_argmax(_v(A) + _v(B))); Mixing global expression in pixel wise image expressions In opposition to pixel wise image expressions, global expressions are evaluated only once per expression. However, it is possible to include them in pixel wise image expression without impacting performances. The eval function first traverses the expression abstract syntax tree (AST), replace them with their actual value and then finally launch the pixel wise evaluation. As a result, the global expressions are still evaluated once: // Normalize pixel values and generate an image of float. auto C_normalized = eval(_v(C) * 1.f / _max(C));  // Note: The multiplication with 1.f allows to force conversion from int // pixel to float pixel values. Limitations Because embedded domain specific languages such as image expressions involve heavy C++ meta-programming, compilation time and compiler memory consumption can increase significantly with the use of long and complex image expressions. Contributing Contributions are welcome. Do not hesitate to fill issues, send pull requests, or send me emails at matthieu.garrigues@gmail.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/matt-42/vpp"	"A C++14 high performance video and image processing library. [MIT]"	"true"
"Image Processing"	"VIGRA"	"https://github.com/ukoethe/vigra"	"A generic C++ computer vision library for image analysis. [MIT X11]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"199"	"38"	"123"	"GitHub - ukoethe/vigra: a generic C++ library for image analysis Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 199 Fork 123 ukoethe/vigra Code Issues 48 Pull requests 14 Pulse Graphs a generic C++ library for image analysis http://hci.iwr.uni-heidelberg.de/vigra/ 5,127 commits 30 branches 23 releases 40 contributors C++ 82.1% Jupyter Notebook 13.0% HTML 1.8% Python 1.8% C 0.4% CMake 0.4% Other 0.5% C++ Jupyter Notebook HTML Python C CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags accumulator_problem blocked-iterator bseppke cell-cognition challenge-2013 eigenvalue_fix feature-accumulators feature-axistags feature-canny3d feature-janis feature-kmeans gh-pages graph_new graph gsoc-integration jc-demo kevin_chunked makeBasicImageView_strides master merge_graph mingw no_boost_thread object_features_python parallelization pegasos testUntaggedArrayConstruction thorsten-master travis unique_ptr version-1-11-rc Nothing to show vigra1-1-0 start ilastik-0.5-base Version-1-11-0 Version-1-10-0 Version-1-9-0 Version-1-8-0 Version-1-7-1 Version-1-7-0 Version-1-6-0 Version-1-5-1b Version-1-5-1a Version-1-5-0 Version-1-4-0 Version-1-3-3 Version-1-3-2 Version-1-3-1 Version-1-3-0 Version-1-2-0 Version-1-1-6 Version-1-1-4 Version-1-1-2 Version-1-1-0 Nothing to show New pull request Latest commit 6fcc71f Jul 8, 2016 ukoethe committed on GitHub Merge pull request #380 from ukoethe/eigenvalue_fix … Added missing error message on non-matching strides, generalized color normalization. Permalink Failed to load latest commit information. config cmake: added NAMES_PER_DIR flag when searching for boost_python Mar 23, 2016 docsrc fixed documentation typos Mar 16, 2016 include/vigra fixed signed/unsigned mismatch Jul 8, 2016 src finished hierarchical clustering tutorial Mar 16, 2016 test check promote type if signed Mar 22, 2016 vigranumpy removed unneeded default argument Jul 8, 2016 .gitignore .gitignore all directories starting with build* Sep 17, 2011 .travis.yml travis: Skip updating brew. Feb 24, 2016 CMakeLists.txt suppress warnings from 3rd party modules Mar 8, 2016 LICENSE.txt renamed LICENSE => LICENSE.txt Aug 17, 2006 README.md Upadated URLs in README.md Mar 17, 2016 appveyor.yml disabled VC 14 tests on appveyor (broken compiler release?) Jul 8, 2016 README.md VIGRA Computer Vision Library             Copyright 1998-2013 by Ullrich Koethe  This file is part of the VIGRA computer vision library. You may use, modify, and distribute this software according to the terms stated in the LICENSE.txt file included in the VIGRA distribution.  The VIGRA Website is     http://ukoethe.github.io/vigra/                       Please direct questions, bug reports, and contributions to             ullrich.koethe@iwr.uni-heidelberg.de    or                         vigra@informatik.uni-hamburg.de                                  THIS SOFTWARE IS PROVIDED AS IS AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Installation Installation instructions can be found in the file $VIGRA_PATH/doc/vigra/Installation.html If the documentation has not yet been generated (e.g. when you build from a development snapshot), you find these instructions in $VIGRA_PATH/docsrc/installation.dxx or online at http://ukoethe.github.io/vigra/doc-release/vigra/Installation.html Documentation If you downloaded an official release, the documentation can be found in $VIGRA_PATH/doc/vigra/, the start file is $VIGRA_PATH/doc/vigra/index.html or online at http://ukoethe.github.io/vigra/#documentation. When you use the development version from github, you can generate documentation by make doc. Download VIGRA can be downloaded at http://ukoethe.github.io/vigra/#download. The official development repository is at https://github.com/ukoethe/vigra What is VIGRA VIGRA is a computer vision library that puts its main emphasis on flexible algorithms, because algorithms represent the principal know-how of this field. The library was consequently built using generic programming as introduced by Stepanov and Musser and exemplified in the C++ Standard Template Library. By writing a few adapters (image iterators and accessors) you can use VIGRA's algorithms on top of your data structures, within your environment. Alternatively, you can also use the data structures provided within VIGRA, which can be easily adapted to a wide range of applications. VIGRA's flexibility comes almost for free: Since the design uses compile-time polymorphism (templates), performance of the compiled program approaches that of a traditional, hand tuned, inflexible, solution. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ukoethe/vigra"	"A generic C++ computer vision library for image analysis. [MIT X11]"	"true"
"Image Processing"	"VTK"	"http://www.vtk.org/"	"Open-source, freely available software system for 3D computer graphics, image processing and visualization. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"VTK - The Visualization Toolkit About Overview License VTK in Action Gallery Publications Participants Statistics Features Open Source Platform Agnostic Language Agnostic Data Model Visualization Modeling Imaging 3D Graphics 2D Plots and Charts Interaction InfoVis Parallel Processing Resources Mailing Lists Examples VTK User’s Guide VTK Textbook Webinars Services Documentation Wiki Developer Tools Contributing Code Dashboard Bug Tracker Browse Repository Download Select Page Hundreds of Algorithms VTK applications are constructed by connecting  vtkAlgorithms (aka filters) together. Each filter computes derived data for the filter (or filters) connected to it. Learn More 3D Graphics VTK’s graphics components create surface and volume renderings of scientific datasets.   Learn More Language Agnostic VTK is written in C++ and has bindings to Python, Java, and Tcl. External bindings to Ada and C# are available. Learn More Data Models VTK’s core data model is able to represent almost any real-world problem with which physical scientists are likely to work.     Learn More Modeling VTK’s modeling algorithms can alter the shape of data to help let you manipulate information into a more visually comprehensible format.   Learn More Interaction and GUI Support VTK has an extensive set of 3D widgets with customizable interaction and integrates seamlessly with a variety of windowing systems Learn More InfoVis VTK includes table and graph data structures and associated algorithms and display/interaction classes for Information Visualization.   Learn More Visualize Your Data With VTK The Visualization Toolkit (VTK) is an open-source, freely available software system for 3D computer graphics, image processing, and visualization. It consists of a C++ class library and several interpreted interface layers including Tcl/Tk, Java, and Python. VTK supports a wide variety of visualization algorithms including scalar, vector, tensor, texture, and volumetric methods, as well as advanced modeling techniques such as implicit modeling, polygon reduction, mesh smoothing, cutting, contouring, and Delaunay triangulation. VTK has an extensive information visualization framework and a suite of 3D interaction widgets. The toolkit supports parallel processing and integrates with various databases on GUI toolkits such as Qt and Tk. VTK is cross-platform and runs on Linux, Windows, Mac, and Unix platforms. VTK is part of Kitware’s collection of commercially supported open-source platforms for software development.  Download Latest Release VTK version 7.0.0 is now available for download  Support and Services Kitware offers advanced software R&D solutions and services. Find out how we can help with your next VTK project  Guide and Textbook Purchase the VTK Users Guide or Textbook  Training Courses Attend an upcoming VTK training course  VTK Mailing Lists Join the VTK mailing lists to stay informed on projects. w Request a Feature Tell us what you think about VTK VTK-Enabled Applications ParaView ParaView is a scalable front-end for visualization with VTk. It runs on everything from laptops to the world’s largest super computers. VeloView VeloView is an open source application built on top of ParaView that performs visualization of live or captured 3D LiDAR data from Velodyne’s HDL line of sensors 3D Slicer 3D Slicer is a free, open-source, extensible application for visualization and image analysis, particularly for medical images. Recent Posts VTK and ParaView – now with ray traced surface rendering VTK and ParaView developers who follow the dashboards closely might have noticed this a few weeks ago, but for everyone else I thought I should direct your attention to the … Read More VTK : Improved Polar Axis We have been reworking a bit the vtkPolarAxis and also vtkAxisActor classes in vtk, and the following have been added into it : New Feature for vtkAxisFollower * Offset is … Read More Adding Parametric Surfaces to ParaView Introduction VTK has a collection of parametric surfaces that are both orientable (e.g. Torus) and non-orientable (e.g. Möbius Strip). If you launch ParaView and look in Sources you will see … Read More VTK : The multiple uses of the new ForceTime filter One of our customers asked for visualization of specific temporal geological datasets using ParaView. More specifically, they wanted to compare data between different time steps, and threshold data at any timestep using … Read More Google Summer of Code Applications for Open Chemistry and VTK Last week we submitted Google Summer of Code organization applications for the Open Chemistry and VTK projects. VTK has taken part in previous years, and had a number of successful student … Read More Source: blog.kitware.com Facebook Twitter Google RSS   Website license and management        "	"null"	"null"	"Open-source, freely available software system for 3D computer graphics, image processing and visualization. [BSD]"	"true"
"Internationalization"	"gettext"	"http://www.gnu.org/software/gettext/"	"GNU `gettext'. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"gettext - GNU Project - Free Software Foundation (FSF) Skip to main text Set language The  9th HACKERS MEETING  will be held in Rennes (France) from August 18 to 20. JOIN THE FSF Free Software Supporter GNU Operating System Sponsored by the Free Software Foundation About GNU Philosophy Licenses Education = Software = Documentation Help GNU gettext Introduction to gettext Usually, programs are written and documented in English, and use English at execution time for interacting with users. This is true not only from within GNU, but also in a great deal of proprietary and free software. Using a common language is quite handy for communication between developers, maintainers and users from all countries. On the other hand, most people are less comfortable with English than with their own native language, and would rather be using their mother tongue for day to day's work, as far as possible. Many would simply love seeing their computer screen showing a lot less of English, and far more of their own language. GNU `gettext' is an important step for the GNU Translation Project, as it is an asset on which we may build many other steps. This package offers to programmers, translators, and even users, a well integrated set of tools and documentation. Specifically, the GNU `gettext' utilities are a set of tools that provides a framework to help other GNU packages produce multi-lingual messages. These tools include a set of conventions about how programs should be written to support message catalogs, a directory and file naming organization for the message catalogs themselves, a runtime library supporting the retrieval of translated messages, and a few stand-alone programs to massage in various ways the sets of translatable strings, or already translated strings. A special GNU Emacs mode also helps interested parties in preparing these sets, or bringing them up to date. Documentation Documentation for gettext is available on-line. The Frequently Asked Questions and their answers Downloading gettext The latest release is 0.19.8, which is available from: http://ftp.gnu.org/pub/gnu/gettext/ (via HTTP) and ftp://ftp.gnu.org/pub/gnu/gettext/ (via FTP). Use a mirror for higher bandwidth. For other ways to obtain gettext, please read How to get GNU Software. The latest development sources can be obtained from the savannah project, using Git. Michele Locati kindly provides precompiled binaries for Windows on his site. Maintainer gettext is currently being maintained by Daiki Ueno. Please use the mailing lists for contact. GNU home page FSF home page GNU Art GNU's Who? Free Software Directory Hardware Site map “Our mission is to preserve, protect and promote the freedom to use, study, copy, modify, and redistribute computer software, and to defend the rights of Free Software users.” The Free Software Foundation is the principal organizational sponsor of the GNU Operating System. Support GNU and the FSF by buying manuals and gear, joining the FSF as an associate member, or making a donation, either directly to the FSF or via Flattr. back to top Please send general FSF & GNU inquiries to <gnu@gnu.org>. There are also other ways to contact the FSF. Please send broken links and other corrections or suggestions to <bug-gnu-gettext-antispam@antispam.gnu.org>. Please see the Translations README for information on coordinating and submitting translations of this article. Copyright © 1998, 2010, 2013 Free Software Foundation, Inc. 51 Franklin St, Fifth Floor, Boston, MA 02110, USA Verbatim copying and distribution of this entire article are permitted worldwide, without royalty, in any medium, provided this notice, and the copyright notice, are preserved. Updated: $Date: 2016/07/10 23:43:17 $"	"null"	"null"	"GNU `gettext'. [GPL2]"	"true"
"Internationalization"	"IBM ICU"	"http://site.icu-project.org/"	"A set of C/C++ and Java libraries providing Unicode and Globalization support. [ICU]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ICU - International Components for Unicode ICU - International Components for Unicode Search this site Navigation Unicode About ICU · ICU Home · Download ICU Demos & Tools · ICU4C Demos · ICU Collation Demo · ICU4J Demos · Data Customizer Documents · User Guide · ICU FAQ · ICU4J FAQ · Docs & Papers API References Official Release · ICU4C (57.1) · ICU4J (57.1) Latest Development Version · N/A Data & Charts · Conversion Tables · Feature Comparisons · Performance & Size Development · Project Information · Design Docs · Source Repository · Processes · Members-Only Area Bugs & Contacts · Bugs · Feature Requests · Mailing Lists · Feedback Sitemap ICU-TC Home Page News 2016-05-18: The Unicode® Consortium has announced that it will host development of the ICU libraries. The ICU Project Management Committee is now a Unicode Technical Committee, the ICU-TC. ICU will continue to be released under a similar open source license. For more details, see the Unicode announcement. 2016-03-23: ICU 57.1 is now available. For details about new features and other improvements, see ICU 57 download page. Contents 1 News 2 What is ICU? 3 Why Unicode? 4 Why ICU4C? 5 Why ICU4J? 6 ICU4JNI 7 Who Uses ICU? 7.1 Companies and Organizations using ICU 7.2 Apache Projects 7.3 Products from IBM 7.4 Products from Google 7.5 Products from Apple 7.6 Products from Harman/Becker 7.7 Related Projects Schedule 2016-03-23 57 Release (57.1) 2016-07-01 58 Milestone 1 (tag only) 2016-09-15 58 Release Candidate 2016-10-01 58 Release (58.1) What is ICU? ICU is a mature, widely used set of C/C++ and Java libraries providing Unicode and Globalization support for software applications. ICU is widely portable and gives applications the same results on all platforms and between C/C++ and Java software. ICU is released under a nonrestrictive open source license that is suitable for use with both commercial software and with other open source or free software. Here are a few highlights of the services provided by ICU: Code Page Conversion: Convert text data to or from Unicode and nearly any other character set or encoding. ICU's conversion tables are based on charset data collected by IBM over the course of many decades, and is the most complete available anywhere. Collation: Compare strings according to the conventions and standards of a particular language, region or country. ICU's collation is based on the Unicode Collation Algorithm plus locale-specific comparison rules from the Common Locale Data Repository, a comprehensive source for this type of data. Formatting: Format numbers, dates, times and currency amounts according the conventions of a chosen locale. This includes translating month and day names into the selected language, choosing appropriate abbreviations, ordering fields correctly, etc. This data also comes from the Common Locale Data Repository. Time Calculations: Multiple types of calendars are provided beyond the traditional Gregorian calendar. A thorough set of timezone calculation APIs are provided. Unicode Support: ICU closely tracks the Unicode standard, providing easy access to all of the many Unicode character properties, Unicode Normalization, Case Folding and other fundamental operations as specified by the Unicode Standard. Regular Expression: ICU's regular expressions fully support Unicode while providing very competitive performance. Bidi: support for handling text containing a mixture of left to right (English) and right to left (Arabic or Hebrew) data. Text Boundaries: Locate the positions of words, sentences, paragraphs within a range of text, or identify locations that would be suitable for line wrapping when displaying the text. And much more. Refer to the ICU User Guide for details. Why Unicode? Unicode (and the parallel ISO 10646 standard) defines the character set necessary for efficiently processing text in any language and for maintaining text data integrity. In addition to global character coverage, the Unicode standard is unique among character set standards because it also defines data and algorithms for efficient and consistent text processing. This simplifies high-level processing and ensures that all conformant software produces the same results. The widespread adoption of Unicode over the last decade made text data truly portable and formed a cornerstone of the Internet. Unicode overview What is Unicode? Globalized software, based on Unicode, maximizes market reach and minimizes cost. Globalized software is built and installed once and yet handles text for and from users worldwide and accomodates their cultural conventions. It minimizes cost by eliminating per-language builds, installations, and maintenance updates. Why ICU4C? The C and C++ languages and many operating system environments do not provide full support for Unicode and standards-compliant text handling services. Even though some platforms do provide good Unicode text handling services, portable application code can not make use of them. The ICU4C libraries fills in this gap. ICU4C provides an open, flexible, portable foundation for applications to use for their software globalization requirements. ICU4C closely tracks industry standards, including Unicode and CLDR (Common Locale Data Repository). Why ICU4J? Java provides a very strong foundation for global programs, and IBM and the ICU team played a key role in providing globalization technology into Sun's Java. But because of its long release schedule, Java cannot always keep up-to-date with evolving standards. The ICU team continues to extend Java's Unicode and internationalization support, focusing on improving performance, keeping current with the Unicode standard, and providing richer APIs, while remaining as compatible as possible with the original Java text and internationalization API design. See Why Use ICU4J? ICU4JNI New versions of ICU4JNI are no longer being created. If you need the functionality of ICU4JNI, you should consider migrating to ICU4J. Who Uses ICU? The following is a list of products, companies and organizations reported to be using ICU. If you have any feedback on this list (corrections, additions, or details), please contact us (on icu-support). Companies and Organizations using ICU ABAS Software, Adobe, Amazon (Kindle), Amdocs, Apache, Appian, Apple, Argonne National Laboratory, Avaya, BAE Systems Geospatial eXploitation Products, BEA, BluePhoenix Solutions, BMC Software, Boost, BroadJump, Business Objects, caris, CERN, CouchDB, Debian Linux, Dell, Eclipse, eBay, EMC Corporation, ESRI, Firebird RDBMS, Free BSD, Gentoo Linux, Google, GroundWork Open Source, GTK+, Harman/Becker Automotive Systems GmbH, HP, Hyperion, IBM, Inktomi, Innodata Isogen, Informatica, Intel, Interlogics, IONA, IXOS, Jikes, Library of Congress, Mathworks, Microsoft, Mozilla, Netezza, Node.js, OpenOffice, Oracle (Solaris, Java), Lawson Software, Leica Geosystems GIS & Mapping LLC, Mandrake Linux, OCLC, Progress Software, Python, QNX, Rogue Wave, SAP, SIL, SPSS, Software AG, SuSE, Sybase, Symantec, Teradata (NCR), ToolAware, Trend Micro, Virage, webMethods, Wine, WMS Gaming, XyEnterprise, Yahoo!, Vuo, and many others. Apache Projects Harmony, Lucene search library, Solr search engine server, PDFBox library, Tika metadata toolkits, Xalan XSLT, Xerces XML Products from IBM DB2, Lotus, Websphere, Tivoli, Rational, AIX, i/OS, z/OS Ascential Software, Cloudant, Cognos, PSD Print Architecture, COBOL, Host Access Client, InfoPrint Manager, Informix GLS, Language Analysis Systems, Lotus Notes, Lotus Extended Search, Lotus Workplace, WebSphere Message Broker, NUMA-Q, OTI, OmniFind, Pervasive Computing WECMS, Rational Business Developer and Rational Application Developer, SS&S Websphere Banking Solutions, Tivoli Presentation Services, Tivoli Identity Manager, WBI Adapter/ Connect/Modeler and Monitor/ Solution Technology Development/WBI-Financial TePI, Websphere Application Server/ Studio Workload Simulator/Transcoding Publisher, XML Parser. Products from Google Web Search, Google+, Chrome/Chrome OS, Android, Adwords, Google Finance, Google Maps, Blogger, Google Analytics, Google Groups, and others. Products from Apple Mac OS X (OS & applications), iOS (iPhone, iPad, iPod touch), watchOS & tvOS, Safari for Windows & other Windows applications and related support, Apple Mobile Device Support in iTunes for Windows. Products from Harman/Becker The following car brands are using ICU via the Harman/Becker automotive software: Alfa Romeo, Audi, Bentley, BMW, Buick, more... Related Projects There are also some related projects that wrap the existing functionality of ICU. Subpages (1): Why Use ICU4J? Comments Sign in|Recent Site Activity|Report Abuse|Print Page|Powered By Google Sites"	"null"	"null"	"A set of C/C++ and Java libraries providing Unicode and Globalization support. [ICU]"	"true"
"Internationalization"	"libiconv"	"http://www.gnu.org/software/libiconv/"	"An encoding conversion library between different character encodings. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"libiconv - GNU Project - Free Software Foundation (FSF) libiconv Introduction | Get the Software Introduction to libiconv For historical reasons, international text is often encoded using a language or country dependent character encoding. With the advent of the internet and the frequent exchange of text across countries - even the viewing of a web page from a foreign country is a ""text exchange"" in this context -, conversions between these encodings have become important. They have also become a problem, because many characters which are present in one encoding are absent in many other encodings. To solve this mess, the Unicode encoding has been created. It is a super-encoding of all others and is therefore the default encoding for new text formats like XML. Still, many computers still operate in locale with a traditional (limited) character encoding. Some programs, like mailers and web browsers, must be able to convert between a given text encoding and the user's encoding. Other programs internally store strings in Unicode, to facilitate internal processing, and need to convert between internal string representation (Unicode) and external string representation (a traditional encoding) when they are doing I/O. GNU libiconv is a conversion library for both kinds of applications. Details This library provides an iconv() implementation, for use on systems which don't have one, or whose implementation cannot convert from/to Unicode. It provides support for the encodings: European languages ASCII, ISO-8859-{1,2,3,4,5,7,9,10,13,14,15,16}, KOI8-R, KOI8-U, KOI8-RU, CP{1250,1251,1252,1253,1254,1257}, CP{850,866,1131}, Mac{Roman,CentralEurope,Iceland,Croatian,Romania}, Mac{Cyrillic,Ukraine,Greek,Turkish}, Macintosh Semitic languages ISO-8859-{6,8}, CP{1255,1256}, CP862, Mac{Hebrew,Arabic} Japanese EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP, ISO-2022-JP-2, ISO-2022-JP-1 Chinese EUC-CN, HZ, GBK, CP936, GB18030, EUC-TW, BIG5, CP950, BIG5-HKSCS, BIG5-HKSCS:2004, BIG5-HKSCS:2001, BIG5-HKSCS:1999, ISO-2022-CN, ISO-2022-CN-EXT Korean EUC-KR, CP949, ISO-2022-KR, JOHAB Armenian ARMSCII-8 Georgian Georgian-Academy, Georgian-PS Tajik KOI8-T Kazakh PT154, RK1048 Thai ISO-8859-11, TIS-620, CP874, MacThai Laotian MuleLao-1, CP1133 Vietnamese VISCII, TCVN, CP1258 Platform specifics HP-ROMAN8, NEXTSTEP Full Unicode UTF-8 UCS-2, UCS-2BE, UCS-2LE UCS-4, UCS-4BE, UCS-4LE UTF-16, UTF-16BE, UTF-16LE UTF-32, UTF-32BE, UTF-32LE UTF-7 C99, JAVA Full Unicode, in terms of uint16_t or uint32_t (with machine dependent endianness and alignment) UCS-2-INTERNAL, UCS-4-INTERNAL Locale dependent, in terms of `char' or `wchar_t' (with machine dependent endianness and alignment, and with OS and locale dependent semantics) char, wchar_t The empty encoding name """" is equivalent to ""char"": it denotes the locale dependent character encoding. When configured with the option --enable-extra-encodings, it also provides support for a few extra encodings: European languages CP{437,737,775,852,853,855,857,858,860,861,863,865,869,1125} Semitic languages CP864 Japanese EUC-JISX0213, Shift_JISX0213, ISO-2022-JP-3 Chinese BIG5-2003 (experimental) Turkmen TDS565 Platform specifics ATARIST, RISCOS-LATIN1 It can convert from any of these encodings to any other, through Unicode conversion. It has also some limited support for transliteration, i.e. when a character cannot be represented in the target character set, it can be approximated through one or several similarly looking characters. Transliteration is activated when ""//TRANSLIT"" is appended to the target encoding name. libiconv is for you if your application needs to support multiple character encodings, but that support lacks from your system. Installation As usual for GNU packages: $ ./configure --prefix=/usr/local $ make $ make install  After installing GNU libiconv for the first time, it is recommended to recompile and reinstall GNU gettext, so that it can take advantage of libiconv. On systems other than GNU/Linux, the iconv program will be internationalized only if GNU gettext has been built and installed before GNU libiconv. This means that the first time GNU libiconv is installed, we have a circular dependency between the GNU libiconv and GNU gettext packages, which can be resolved by building and installing either first libiconv, then gettext, then libiconv again, or (on systems supporting shared libraries, excluding AIX) first gettext, then libiconv, then gettext again. Recall that before building a package for the second time, you need to erase the traces of the first build by running ""make distclean"". This library can be built and installed in two variants: The library mode. This works on all systems, and uses a library libiconv.so and a header file <iconv.h>. (Both are installed through ""make install"".) To use it, simply #include <iconv.h> and use the functions. To use it in an autoconfiguring package: If you don't use automake, append m4/iconv.m4 to your aclocal.m4 file. If you do use automake, add m4/iconv.m4 to your m4 macro repository. Add to the link command line of libraries and executables that use the functions the placeholder @LIBICONV@ (or, if using libtool for the link, @LTLIBICONV@). If you use automake, the right place for these additions are the *_LDADD variables. Note that iconv.m4 is also part of the GNU gettext package, which installs it in /usr/local/share/aclocal/iconv.m4. The libc plug/override mode. This works on GNU/Linux, Solaris and OSF/1 systems only. It is a way to get good iconv support without having glibc-2.1. It installs a library preloadable_libiconv.so. This library can be used with LD_PRELOAD, to override the iconv* functions present in the C library. On GNU/Linux and Solaris: $ export LD_PRELOAD=/usr/local/lib/preloadable_libiconv.so On OSF/1: $ export _RLD_LIST=/usr/local/lib/preloadable_libiconv.so:DEFAULT A program's source need not be modified, the program need not even be recompiled. Just set the LD_PRELOAD environment variable, that's it! Copyright The libiconv and libcharset libraries and their header files are under LGPL. The iconv program is under GPL. Downloading libiconv libiconv can be found on in the subdirectory /pub/gnu/libiconv/ on your favorite GNU mirror. For other ways to obtain libiconv, please read How to get GNU Software. The latest release is http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz The latest development sources can be obtained through the savannah project. Documentation Below are the links for the online documentation. The iconv program iconv.1.html The library functions iconv_open.3.html iconv.3.html iconv_close.3.html iconvctl.3.html iconv_open_into.3.html Bug reports Bug reports should be sent to <bug-gnu-libiconv-antispam@antispam.gnu.org>. Return to GNU's home page. Please send general FSF & GNU inquiries to <gnu@gnu.org>. There are also other ways to contact the FSF. Please send broken links and other corrections or suggestions to <bug-gnu-libiconv-antispam@antispam.gnu.org>. Copyright (C) 1998, 2010 Free Software Foundation, Inc. Verbatim copying and distribution of this entire article is permitted in any medium, provided this notice is preserved. Last updated: $Date: 2011/08/07 18:23:36 $ $Author: haible $"	"null"	"null"	"An encoding conversion library between different character encodings. [GPL]"	"true"
"Inter-process communication"	"Apache Thrift"	"https://thrift.apache.org/"	"Efficient cross-language IPC/RPC, works between C++, Java, Python, PHP, C#, and many more other languages. Originally developed by Facebook. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Thrift - Home Apache Thrift ™ Download Documentation Developers Libraries Tutorial Test Suite About Apache Apache Home Apache License v2.0 Donate Thanks Security The Apache Thrift software framework, for scalable cross-language services development, combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi and other languages. Getting Started Download Apache Thrift To get started, download a copy of Thrift. Build and Install the Apache Thrift compiler You will then need to build the Apache Thrift compiler and install it. See the installing Thrift guide for any help with this step. Writing a .thrift file After the Thrift compiler is installed you will need to create a thrift file. This file is an interface definition made up of thrift types and Services. The services you define in this file are implemented by the server and are called by any clients. The Thrift compiler is used to generate your Thrift File into source code which is used by the different client libraries and the server you write. To generate the source from a thrift file run thrift --gen <language> <Thrift filename> The sample tutorial.thrift file used for all the client and server tutorials can be found here. To learn more about Apache Thrift Read the Whitepaper Download Apache Thrift v0.9.3 Download v0.9.3 MD5 | PGP [Other Downloads] Example Apache Thrift allows you to define data types and service interfaces in a simple definition file. Taking that file as input, the compiler generates code to be used to easily build RPC clients and servers that communicate seamlessly across programming languages. Instead of writing a load of boilerplate code to serialize and transport your objects and invoke remote methods, you can get right down to business. The following example is a simple service to store user objects for a web front end. Thrift Definition File Python Client Java Server service Calculator extends shared.SharedService {    /**    * A method definition looks like C code. It has a return type, arguments,    * and optionally a list of exceptions that it may throw. Note that argument    * lists and exception lists are specified using the exact same syntax as    * field lists in struct or exception definitions.    */     void ping(),     i32 add(1:i32 num1, 2:i32 num2),     i32 calculate(1:i32 logid, 2:Work w) throws (1:InvalidOperation ouch),     /**     * This method has a oneway modifier. That means the client only makes     * a request and does not listen for any response at all. Oneway methods     * must be void.     */    oneway void zip()  }  This snippet was generated by Apache Thrift's source tree docs: tutorial/tutorial.thrift def main():     # Make socket     transport = TSocket.TSocket('localhost', 9090)      # Buffering is critical. Raw sockets are very slow     transport = TTransport.TBufferedTransport(transport)      # Wrap in a protocol     protocol = TBinaryProtocol.TBinaryProtocol(transport)      # Create a client to use the protocol encoder     client = Calculator.Client(protocol)      # Connect!     transport.open()      client.ping()     print('ping()')      sum = client.add(1, 1)  This snippet was generated by Apache Thrift's source tree docs: tutorial/py/PythonClient.py Initialize the Server:     try {       TServerTransport serverTransport = new TServerSocket(9090);       TServer server = new TSimpleServer(new Args(serverTransport).processor(processor));        // Use this for a multithreaded server       // TServer server = new TThreadPoolServer(new TThreadPoolServer.Args(serverTransport).processor(processor));        System.out.println(""Starting the simple server..."");       server.serve();     } catch (Exception e) {       e.printStackTrace();     }  This snippet was generated by Apache Thrift's source tree docs: tutorial/java/src/JavaServer.java The CalculatorHandler: public class CalculatorHandler implements Calculator.Iface {    private HashMap<Integer,SharedStruct> log;    public CalculatorHandler() {     log = new HashMap<Integer, SharedStruct>();   }    public void ping() {     System.out.println(""ping()"");   }    public int add(int n1, int n2) {     System.out.println(""add("" + n1 + "","" + n2 + "")"");     return n1 + n2;   }    public int calculate(int logid, Work work) throws InvalidOperation {     System.out.println(""calculate("" + logid + "", {"" + work.op + "","" + work.num1 + "","" + work.num2 + ""})"");     int val = 0;     switch (work.op) {     case ADD:       val = work.num1 + work.num2;       break;     case SUBTRACT:       val = work.num1 - work.num2;       break;     case MULTIPLY:       val = work.num1 * work.num2;       break;     case DIVIDE:       if (work.num2 == 0) {         InvalidOperation io = new InvalidOperation();         io.whatOp = work.op.getValue();         io.why = ""Cannot divide by 0"";         throw io;       }       val = work.num1 / work.num2;       break;     default:       InvalidOperation io = new InvalidOperation();       io.whatOp = work.op.getValue();       io.why = ""Unknown operation"";       throw io;     }      SharedStruct entry = new SharedStruct();     entry.key = logid;     entry.value = Integer.toString(val);     log.put(logid, entry);      return val;   }    public SharedStruct getStruct(int key) {     System.out.println(""getStruct("" + key + "")"");     return log.get(key);   }    public void zip() {     System.out.println(""zip()"");   }  }  This snippet was generated by Apache Thrift's source tree docs: tutorial/java/src/CalculatorHandler.java Links Download Developers Tutorials Sitemap Get Involved Mailing Lists Issue Tracking How To Contribute Copyright 2016 Apache Software Foundation. Licensed under the Apache License v2.0. Apache, Apache Thrift, and the Apache feather logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Efficient cross-language IPC/RPC, works between C++, Java, Python, PHP, C#, and many more other languages. Originally developed by Facebook. [Apache2]"	"true"
"Inter-process communication"	"Cap'n Proto"	"http://kentonv.github.io/capnproto/"	"Fast data interchange format and capability-based RPC system. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Moved to: https://capnproto.org/ (GitHub Pages doesn't support 301 redirects :(.)"	"null"	"null"	"Fast data interchange format and capability-based RPC system. [MIT]"	"true"
"Inter-process communication"	"gRPC"	"https://github.com/grpc/grpc"	"A high performance, open source, general-purpose RPC framework. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5482"	"502"	"1017"	"GitHub - grpc/grpc: The C based gRPC (C++, Node.js, Python, Ruby, Objective-C, PHP, C#) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 502 Star 5,482 Fork 1,017 grpc/grpc Code Issues 547 Pull requests 125 Wiki Pulse Graphs The C based gRPC (C++, Node.js, Python, Ruby, Objective-C, PHP, C#) 17,102 commits 21 branches 27 releases 162 contributors C 46.2% C++ 15.0% C# 10.6% Python 9.5% Makefile 5.3% Ruby 4.8% Other 8.6% C C++ C# Python Makefile Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags debian/backports debian/csharp debian/sid dgquintas-patch-1 gh-pages jcanizales-travis-fail-fast master release-0_5 release-0_6 release-0_9 release-0_10 release-0_11 release-0_12 release-0_13 release-0_14 release-0_15 revert-6488-revert-6214-master revert-6661-throughput_fix sed-f-up-fix tensor-flow-interim-release v1.0.x Nothing to show v0.15.2 v0.15.0 release_test release-0_15_1 release-0_15_0 release-0_14_1 release-0_14_0 release-0_14_0-objectivec-0.14.0 release-0_13_1 release-0_13_0 release-0_13_0-objectivec-0.13.0 release-0_12_0 release-0_12_0-objectivec-0.12.0 release-0_11_1 release-0_11_1-objectivec-0.11.1 release-0_11_0 release-0_10_2 release-0_10_1 release-0_10_1-node-0.10.1 release-0_10_0 release-0_10_0-objectivec-0.6.0 release-0_9_1 release-0_9_1-objectivec-0.5.1 release-0_9_1-node-0.9.2 release-0_9_0 release-0_6_0 release-0_5_0 Nothing to show New pull request Latest commit 69d897d Jul 15, 2016 kpayson64 committed on GitHub Merge pull request #7347 from apolcyn/add_ruby_client_compression_int… … …erop_tests  Add ruby client compression interop tests Permalink Failed to load latest commit information. doc Compression Cookbook Jul 8, 2016 etc Revert ""Refreshing the etc/roots.pem file."" Jan 11, 2016 examples php: fix interop tests breakage Jul 13, 2016 include Merge pull request #7319 from yang-g/wait_async Jul 14, 2016 src Merge pull request #7347 from apolcyn/add_ruby_client_compression_int… Jul 15, 2016 summerofcode Fix typo. Mar 18, 2016 templates php: fix interop tests breakage Jul 14, 2016 test Fix compile error Jul 15, 2016 third_party Bringing 0.15 to protobuf beta 3.3 to satisfy both nodejs and objc. Jul 12, 2016 tools Merge pull request #7347 from apolcyn/add_ruby_client_compression_int… Jul 15, 2016 vsprojects Fix mac build Jul 8, 2016 .clang-format Make clang-format somewhat compatible across versions Jan 21, 2015 .clang_complete Support clang_complete based editor plugins Mar 21, 2016 .editorconfig Adding an editorconfig configuration file. Jan 31, 2015 .gitignore Remove tox Jul 1, 2016 .gitmodules Bump protobuf version to beta-3.3 Jul 1, 2016 .istanbul.yml Moved gRPC node package root to repo root, made it depend on grpc.gyp Oct 1, 2015 .rspec Bundled C core with Ruby library Dec 18, 2015 .travis.yml Set Travis clone depth to 1, to alleviate workload Jul 13, 2016 .yardopts Adding a .yardopts file at the root so rubydocs isn't getting lost. Feb 13, 2016 BUILD Fix mac build Jul 8, 2016 CMakeLists.txt Master is now 1.1.0-dev. Jul 12, 2016 CONTRIBUTING.md added more steps. Jun 27, 2016 Gemfile Bundled C core with Ruby library Dec 18, 2015 INSTALL.md Updated git clone URL Jun 29, 2016 LICENSE Update copyrights Mar 31, 2016 MANIFEST.md Remove tox Jul 1, 2016 Makefile Merge github.com:grpc/grpc into delayed-write Jul 12, 2016 PATENTS Create PATENTS Feb 26, 2015 PYTHON-MANIFEST.in Make Python build standalone on Windows Jul 8, 2016 README.md Update README.md May 19, 2016 Rakefile Ignore unused variables in ruby compilation Jun 22, 2016 binding.gyp Merge pull request #6973 from makdharma/network_status_change Jun 27, 2016 build.yaml Merge github.com:grpc/grpc into delayed-write Jul 12, 2016 composer.json php: fix interop tests breakage Jul 14, 2016 config.m4 Merge pull request #6973 from makdharma/network_status_change Jun 27, 2016 gRPC-Core.podspec Regenerate list of gRPC-Core files Jun 30, 2016 gRPC-ProtoRPC.podspec Bump Protobuf to beta-3.1 Jun 23, 2016 gRPC-RxLibrary.podspec Separate Core, ProtoRuntime, and RxLibrary subspecs Jun 8, 2016 gRPC.podspec gRPC.podspec shouldn't be a template anymore. Jul 12, 2016 grpc.bzl Add copyright notice and documentation to .bzl file. Jul 2, 2015 grpc.def Merge branch 'master' into epoll_changes_merged Jun 21, 2016 grpc.gemspec Resolved merge conflicts with master Jun 27, 2016 package.json Master is now 1.1.0-dev. Jul 12, 2016 package.xml php: prepare for GA release Jul 13, 2016 requirements.txt Add protobuf3 to requirements.txt Apr 8, 2016 setup.cfg post merge Feb 2, 2016 setup.py Merge pull request #7314 from soltanmm/spinning-flags Jul 14, 2016 README.md gRPC - An RPC library and framework Copyright 2015 Google Inc. Documentation You can find more detailed documentation and examples in the doc and examples directories respectively. Installation & Testing See INSTALL for installation instructions for various platforms. See tools/run_tests for more guidance on how to run various test suites (e.g. unit tests, interop tests, benchmarks) Repository Structure & Status This repository contains source code for gRPC libraries for multiple languages written on top of shared C core library src/core. Libraries in different languages are in different states of development. We are seeking contributions for all of these libraries. Language Source Status Shared C [core library] src/core Beta - the surface API is stable C++ src/cpp Beta - the surface API is stable Ruby src/ruby Beta - the surface API is stable NodeJS src/node Beta - the surface API is stable Python src/python Beta - the surface API is stable PHP src/php Beta - the surface API is stable C# src/csharp Beta - the surface API is stable Objective-C src/objective-c Beta - the surface API is stable Java source code is in the grpc-java repository. Go source code is in the grpc-go repository. See MANIFEST.md for a listing of top-level items in the repository. Overview Remote Procedure Calls (RPCs) provide a useful abstraction for building distributed applications and services. The libraries in this repository provide a concrete implementation of the gRPC protocol, layered over HTTP/2. These libraries enable communication between clients and servers using any combination of the supported languages. Interface Developers using gRPC typically start with the description of an RPC service (a collection of methods), and generate client and server side interfaces which they use on the client-side and implement on the server side. By default, gRPC uses Protocol Buffers as the Interface Definition Language (IDL) for describing both the service interface and the structure of the payload messages. It is possible to use other alternatives if desired. Surface API Starting from an interface definition in a .proto file, gRPC provides Protocol Compiler plugins that generate Client- and Server-side APIs. gRPC users typically call into these APIs on the Client side and implement the corresponding API on the server side. Synchronous vs. asynchronous Synchronous RPC calls, that block until a response arrives from the server, are the closest approximation to the abstraction of a procedure call that RPC aspires to. On the other hand, networks are inherently asynchronous and in many scenarios, it is desirable to have the ability to start RPCs without blocking the current thread. The gRPC programming surface in most languages comes in both synchronous and asynchronous flavors. Streaming gRPC supports streaming semantics, where either the client or the server (or both) send a stream of messages on a single RPC call. The most general case is Bidirectional Streaming where a single gRPC call establishes a stream where both the client and the server can send a stream of messages to each other. The streamed messages are delivered in the order they were sent. Protocol The gRPC protocol specifies the abstract requirements for communication between clients and servers. A concrete embedding over HTTP/2 completes the picture by fleshing out the details of each of the required operations. Abstract gRPC protocol A gRPC RPC comprises of a bidirectional stream of messages, initiated by the client. In the client-to-server direction, this stream begins with a mandatory Call Header, followed by optional Initial-Metadata, followed by zero or more Payload Messages. The server-to-client direction contains an optional Initial-Metadata, followed by zero or more Payload Messages terminated with a mandatory Status and optional Status-Metadata (a.k.a.,Trailing-Metadata). Implementation over HTTP/2 The abstract protocol defined above is implemented over HTTP/2. gRPC bidirectional streams are mapped to HTTP/2 streams. The contents of Call Header and Initial Metadata are sent as HTTP/2 headers and subject to HPACK compression. Payload Messages are serialized into a byte stream of length prefixed gRPC frames which are then fragmented into HTTP/2 frames at the sender and reassembled at the receiver. Status and Trailing-Metadata are sent as HTTP/2 trailing headers (a.k.a., trailers). Flow Control gRPC inherits the flow control mechanisms in HTTP/2 and uses them to enable fine-grained control of the amount of memory used for buffering in-flight messages. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/grpc/grpc"	"A high performance, open source, general-purpose RPC framework. [BSD]"	"true"
"Inter-process communication"	"website"	"http://www.grpc.io/"	"A high performance, open source, general-purpose RPC framework. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5482"	"502"	"1017"	"GitHub - grpc/grpc: The C based gRPC (C++, Node.js, Python, Ruby, Objective-C, PHP, C#) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 502 Star 5,482 Fork 1,017 grpc/grpc Code Issues 547 Pull requests 125 Wiki Pulse Graphs The C based gRPC (C++, Node.js, Python, Ruby, Objective-C, PHP, C#) 17,102 commits 21 branches 27 releases 162 contributors C 46.2% C++ 15.0% C# 10.6% Python 9.5% Makefile 5.3% Ruby 4.8% Other 8.6% C C++ C# Python Makefile Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags debian/backports debian/csharp debian/sid dgquintas-patch-1 gh-pages jcanizales-travis-fail-fast master release-0_5 release-0_6 release-0_9 release-0_10 release-0_11 release-0_12 release-0_13 release-0_14 release-0_15 revert-6488-revert-6214-master revert-6661-throughput_fix sed-f-up-fix tensor-flow-interim-release v1.0.x Nothing to show v0.15.2 v0.15.0 release_test release-0_15_1 release-0_15_0 release-0_14_1 release-0_14_0 release-0_14_0-objectivec-0.14.0 release-0_13_1 release-0_13_0 release-0_13_0-objectivec-0.13.0 release-0_12_0 release-0_12_0-objectivec-0.12.0 release-0_11_1 release-0_11_1-objectivec-0.11.1 release-0_11_0 release-0_10_2 release-0_10_1 release-0_10_1-node-0.10.1 release-0_10_0 release-0_10_0-objectivec-0.6.0 release-0_9_1 release-0_9_1-objectivec-0.5.1 release-0_9_1-node-0.9.2 release-0_9_0 release-0_6_0 release-0_5_0 Nothing to show New pull request Latest commit 69d897d Jul 15, 2016 kpayson64 committed on GitHub Merge pull request #7347 from apolcyn/add_ruby_client_compression_int… … …erop_tests  Add ruby client compression interop tests Permalink Failed to load latest commit information. doc Compression Cookbook Jul 8, 2016 etc Revert ""Refreshing the etc/roots.pem file."" Jan 11, 2016 examples php: fix interop tests breakage Jul 13, 2016 include Merge pull request #7319 from yang-g/wait_async Jul 14, 2016 src Merge pull request #7347 from apolcyn/add_ruby_client_compression_int… Jul 15, 2016 summerofcode Fix typo. Mar 18, 2016 templates php: fix interop tests breakage Jul 14, 2016 test Fix compile error Jul 15, 2016 third_party Bringing 0.15 to protobuf beta 3.3 to satisfy both nodejs and objc. Jul 12, 2016 tools Merge pull request #7347 from apolcyn/add_ruby_client_compression_int… Jul 15, 2016 vsprojects Fix mac build Jul 8, 2016 .clang-format Make clang-format somewhat compatible across versions Jan 21, 2015 .clang_complete Support clang_complete based editor plugins Mar 21, 2016 .editorconfig Adding an editorconfig configuration file. Jan 31, 2015 .gitignore Remove tox Jul 1, 2016 .gitmodules Bump protobuf version to beta-3.3 Jul 1, 2016 .istanbul.yml Moved gRPC node package root to repo root, made it depend on grpc.gyp Oct 1, 2015 .rspec Bundled C core with Ruby library Dec 18, 2015 .travis.yml Set Travis clone depth to 1, to alleviate workload Jul 13, 2016 .yardopts Adding a .yardopts file at the root so rubydocs isn't getting lost. Feb 13, 2016 BUILD Fix mac build Jul 8, 2016 CMakeLists.txt Master is now 1.1.0-dev. Jul 12, 2016 CONTRIBUTING.md added more steps. Jun 27, 2016 Gemfile Bundled C core with Ruby library Dec 18, 2015 INSTALL.md Updated git clone URL Jun 29, 2016 LICENSE Update copyrights Mar 31, 2016 MANIFEST.md Remove tox Jul 1, 2016 Makefile Merge github.com:grpc/grpc into delayed-write Jul 12, 2016 PATENTS Create PATENTS Feb 26, 2015 PYTHON-MANIFEST.in Make Python build standalone on Windows Jul 8, 2016 README.md Update README.md May 19, 2016 Rakefile Ignore unused variables in ruby compilation Jun 22, 2016 binding.gyp Merge pull request #6973 from makdharma/network_status_change Jun 27, 2016 build.yaml Merge github.com:grpc/grpc into delayed-write Jul 12, 2016 composer.json php: fix interop tests breakage Jul 14, 2016 config.m4 Merge pull request #6973 from makdharma/network_status_change Jun 27, 2016 gRPC-Core.podspec Regenerate list of gRPC-Core files Jun 30, 2016 gRPC-ProtoRPC.podspec Bump Protobuf to beta-3.1 Jun 23, 2016 gRPC-RxLibrary.podspec Separate Core, ProtoRuntime, and RxLibrary subspecs Jun 8, 2016 gRPC.podspec gRPC.podspec shouldn't be a template anymore. Jul 12, 2016 grpc.bzl Add copyright notice and documentation to .bzl file. Jul 2, 2015 grpc.def Merge branch 'master' into epoll_changes_merged Jun 21, 2016 grpc.gemspec Resolved merge conflicts with master Jun 27, 2016 package.json Master is now 1.1.0-dev. Jul 12, 2016 package.xml php: prepare for GA release Jul 13, 2016 requirements.txt Add protobuf3 to requirements.txt Apr 8, 2016 setup.cfg post merge Feb 2, 2016 setup.py Merge pull request #7314 from soltanmm/spinning-flags Jul 14, 2016 README.md gRPC - An RPC library and framework Copyright 2015 Google Inc. Documentation You can find more detailed documentation and examples in the doc and examples directories respectively. Installation & Testing See INSTALL for installation instructions for various platforms. See tools/run_tests for more guidance on how to run various test suites (e.g. unit tests, interop tests, benchmarks) Repository Structure & Status This repository contains source code for gRPC libraries for multiple languages written on top of shared C core library src/core. Libraries in different languages are in different states of development. We are seeking contributions for all of these libraries. Language Source Status Shared C [core library] src/core Beta - the surface API is stable C++ src/cpp Beta - the surface API is stable Ruby src/ruby Beta - the surface API is stable NodeJS src/node Beta - the surface API is stable Python src/python Beta - the surface API is stable PHP src/php Beta - the surface API is stable C# src/csharp Beta - the surface API is stable Objective-C src/objective-c Beta - the surface API is stable Java source code is in the grpc-java repository. Go source code is in the grpc-go repository. See MANIFEST.md for a listing of top-level items in the repository. Overview Remote Procedure Calls (RPCs) provide a useful abstraction for building distributed applications and services. The libraries in this repository provide a concrete implementation of the gRPC protocol, layered over HTTP/2. These libraries enable communication between clients and servers using any combination of the supported languages. Interface Developers using gRPC typically start with the description of an RPC service (a collection of methods), and generate client and server side interfaces which they use on the client-side and implement on the server side. By default, gRPC uses Protocol Buffers as the Interface Definition Language (IDL) for describing both the service interface and the structure of the payload messages. It is possible to use other alternatives if desired. Surface API Starting from an interface definition in a .proto file, gRPC provides Protocol Compiler plugins that generate Client- and Server-side APIs. gRPC users typically call into these APIs on the Client side and implement the corresponding API on the server side. Synchronous vs. asynchronous Synchronous RPC calls, that block until a response arrives from the server, are the closest approximation to the abstraction of a procedure call that RPC aspires to. On the other hand, networks are inherently asynchronous and in many scenarios, it is desirable to have the ability to start RPCs without blocking the current thread. The gRPC programming surface in most languages comes in both synchronous and asynchronous flavors. Streaming gRPC supports streaming semantics, where either the client or the server (or both) send a stream of messages on a single RPC call. The most general case is Bidirectional Streaming where a single gRPC call establishes a stream where both the client and the server can send a stream of messages to each other. The streamed messages are delivered in the order they were sent. Protocol The gRPC protocol specifies the abstract requirements for communication between clients and servers. A concrete embedding over HTTP/2 completes the picture by fleshing out the details of each of the required operations. Abstract gRPC protocol A gRPC RPC comprises of a bidirectional stream of messages, initiated by the client. In the client-to-server direction, this stream begins with a mandatory Call Header, followed by optional Initial-Metadata, followed by zero or more Payload Messages. The server-to-client direction contains an optional Initial-Metadata, followed by zero or more Payload Messages terminated with a mandatory Status and optional Status-Metadata (a.k.a.,Trailing-Metadata). Implementation over HTTP/2 The abstract protocol defined above is implemented over HTTP/2. gRPC bidirectional streams are mapped to HTTP/2 streams. The contents of Call Header and Initial Metadata are sent as HTTP/2 headers and subject to HPACK compression. Payload Messages are serialized into a byte stream of length prefixed gRPC frames which are then fragmented into HTTP/2 frames at the sender and reassembled at the receiver. Status and Trailing-Metadata are sent as HTTP/2 trailing headers (a.k.a., trailers). Flow Control gRPC inherits the flow control mechanisms in HTTP/2 and uses them to enable fine-grained control of the amount of memory used for buffering in-flight messages. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/grpc/grpc"	"A high performance, open source, general-purpose RPC framework. [BSD]"	"true"
"Inter-process communication"	"libjson-rpc-cpp"	"https://github.com/cinemast/libjson-rpc-cpp"	"JSON-RPC framework for C++ servers and clients. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"207"	"43"	"113"	"GitHub - cinemast/libjson-rpc-cpp: C++ framework for json-rpc (json remote procedure call) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 207 Fork 113 cinemast/libjson-rpc-cpp Code Issues 5 Pull requests 1 Pulse Graphs C++ framework for json-rpc (json remote procedure call) 618 commits 5 branches 11 releases 19 contributors C++ 83.5% CMake 13.9% C 1.2% Other 1.4% C++ CMake C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coverity_scan develop feature/zmqconnector gh-pages master Nothing to show v0.6.0 v0.5.0 v0.4.2 v0.4.1 v0.4 v0.3.2 v0.3.1 v0.3 0.2.1 0.2 0.1 Nothing to show New pull request Latest commit b16ba58 Jun 16, 2016 cinemast Merge branch 'master' of github.com:cinemast/libjson-rpc-cpp Permalink Failed to load latest commit information. cmake Merge pull request #142 from EricLagergren/master Mar 16, 2016 dev fixinig gitignare and added installdeps script Jun 9, 2015 doc updated manpage Apr 7, 2015 docker create a Dockerfile to build libjson-rpc-cpp n Linux/Debian Jun 10, 2015 src set pointer to NULL after deletion Jun 16, 2016 .gitignore fixinig gitignare and added installdeps script Jun 9, 2015 .travis.yml fix build Mar 17, 2016 AUTHORS.md Updated AUTHORS.md Jun 8, 2015 CHANGELOG.md changelog Jun 27, 2015 CMakeLists.txt Fix subproject builds Mar 10, 2016 LICENSE.txt modified licenese Oct 5, 2014 README.md Mention specific debian release and ubuntu (fixes #159) May 24, 2016 README.md libjson-rpc-cpp This framework provides cross platform JSON-RPC (remote procedure call) support for C++. It is fully JSON-RPC 2.0 & 1.0 compatible. 5 good reasons for using libjson-rpc-cpp in your next RPC project Full JSON-RPC 2.0 & 1.0 Client and Server Support. jsonrpcstub - a tool that generates stub-classes for your JSON-RPC client AND server applications. Ready to use HTTP server and client to provide simple interfaces for your JSON-RPC application. Cross platform build support and precompiled binaries for WIN32. Super liberal MIT-License. Other good reasons to use libjson-rpc-cpp Easy to use cmake cross platform build system. Clean and simple architecture, which makes it easy to extend. Tested under MacOS X (10.9), GNU/Linux (Debian 8 64-bit), Windows 7 (MinGW32) and Raspbian Wheezy (armhf). Automated testing using make test. Useful Examples provided. e.g. XBMC Remote using json-rpc client part and stub generator. The stubgenerator currently supports C++ and JavaScript. Overview Install the framework Debian (stretch) and Ubuntu (15.10 or later) sudo apt-get install libjsonrpccpp-dev libjsonrpccpp-tools Arch Linux For Arch Linux there is a PKGBUILD provided in the AUR. sudo aura -A libjson-rpc-cpp Gentoo Linux sudo emerge dev-cpp/libjson-rpc-cpp Mac OS X For OS X a Brew package is available: brew install libjson-rpc-cpp Windows There is a ready to use compiled package here. Just download execute the installer EXE. Build from source Install the dependencies libcurl libmicrohttpd libjsoncpp libargtable cmake UNIX For Debian and Arch GNU/Linux based systems, all dependencies are available via the package manager. For OS X all dependencies are available in Brew Windows Download the precompiled dependencies form here. Extract it into the cloned repository, so that there is a win32-deps folder in the root project directory. Build git clone git://github.com/cinemast/libjson-rpc-cpp.git mkdir -p libjson-rpc-cpp/build cd libjson-rpc-cpp/build cmake .. && make sudo make install sudo ldconfig          #only required for linux That's it! If you are not happy with it, simply uninstall it from your system using (inside the build the directory): sudo make uninstall Build options: Default configuration should be fine for most systems, but here are available compilation flags: -DCOMPILE_TESTS=NO disables unit test suite. -DCOMPILE_STUBGEN=NO disables building the stubgenerator. -DCOMPILE_EXAMPLES=NO disables examples. -DHTTP_SERVER=NO disable the libmicrohttpd webserver. -DHTTP_CLIENT=NO disable the curl client. -DUNIX_DOMAIN_SOCKET_SERVER=NO disable the unix domain socket server connector. -DUNIX_DOMAIN_SOCKET_CLIENT=NO disable the unix domain socket client connector. Using the framework This example will show the most simple way to create a rpc server and client. If you only need the server, ignore step 4. If you only need the client, ignore step 3. You can find all resources of this sample in the src/examples directory of this repository. Step 1: Writing the specification file [     {         ""name"": ""sayHello"",         ""params"": {              ""name"": ""Peter""         },         ""returns"" : ""Hello Peter""     },     {         ""name"" : ""notifyServer""     } ] The type of a return value or parameter is defined by the literal assigned to it. In this example you can see how to specify methods and notifications. Step 2: Generate the stubs for client and server Call jsonrpcstub: jsonrpcstub spec.json --cpp-server=AbstractStubServer --cpp-client=StubClient This generates a serverstub and a clientstub class. Step 3: implement the abstract server stub Extend the abstract server stub and implement all pure virtual (abstract) methods defined in spec.json. #include ""abstractstubserver.h"" #include <jsonrpccpp/server/connectors/httpserver.h>  using namespace jsonrpc; using namespace std;  class MyStubServer : public AbstractStubServer {     public:         MyStubServer(AbstractServerConnector &connector);          virtual void notifyServer();         virtual std::string sayHello(const std::string& name); };  MyStubServer::MyStubServer(AbstractServerConnector &connector) :     AbstractStubServer(connector) { } void MyStubServer::notifyServer() {     cout << ""Server got notified"" << endl; } string MyStubServer::sayHello(const string &name) {     return ""Hello "" + name; }  int main() {     HttpServer httpserver(8383);     MyStubServer s(httpserver);     s.StartListening();     getchar();     s.StopListening();     return 0; } In the main function the concrete server is instantiated and started. That is all for the server. Any JSON-RPC 2.0 compliant client can now connect to your server. Compile the server with: g++ main.cpp -ljsoncpp -lmicrohttpd -ljsonrpccpp-common -ljsonrpccpp-server -o sampleserver Step 4: Create the client application #include <iostream>  #include ""stubclient.h"" #include <jsonrpccpp/client/connectors/httpclient.h>  using namespace jsonrpc; using namespace std;  int main() {     HttpClient httpclient(""http://localhost:8383"");     StubClient c(httpclient);     try     {         cout << c.sayHello(""Peter"") << endl;         c.notifyServer();     }     catch (JsonRpcException e)     {         cerr << e.what() << endl;     } } Compile the client with: g++ main.cpp -ljsoncpp -lcurl -ljsonrpccpp-common -ljsonrpccpp-client -o sampleclient References NASA Ames Research Center: use it to obtain aircraft state information from an aircraft simulator. LaseShark 3D Printer: used to control the firmware of the 3D printer. cpp-ethereum: a distributed computing framework. mage-sdk-cpp: a game engine. bitcodin: a scalable cloud based video transcoding platform. wgslib: A web geostatistics library. bitcoin-api-cpp: a C++ interface to bitcoin. NIT DASH Content Server: Dynamic Adaptive Streaming over HTTP server. If you use this library and find it useful, I would be very pleased if you let me know about it. Developer Information Contributions Contributions of any kind are always very welcome. Here are some suggestions: Bugreports Bugfixes Extending documentation (especially doxygen) Suggestion of new features New features: Adding new connectors. Adding new languages to the stubgenerator. Guidelines / Conventions We do not want to prevent you from contributing by having too strict guidelines. If you have ideas for improvement, just do it your way, rather than doing it not at all. Anyway here is a list of how we would prefer your contributions: Issues: Use the issue tracker on github to report bugs or improvements. Please avoid sending me mails directly, as this is not visible to others. Please close issues on your own if you think a problem has been dealt with. Code contributions: Please raise a pull-request against the develop branch. If you add features, please keep the test-coverage at 100% and document them (doxygen, manpage, etc.). If you fix a bug, please refer the issue in the commit message. Please make sure that the travis-ci build passes (you will get notified if you raise a pull-request). Add yourself to the AUTHORS.md. Use 4 spaces instead of tabs. Mailing list libjsonrpccpp-devel@lists.sourceforge.net Roadmap for next release Generate client stubs for other languages. Extend doxygen documentation. Changelogs Changelogs can be found here. API compatibility We do our best to keep the API/ABI stable, to prevent problems when updating this framework. A compatiblity report can be found here. License This framework is licensed under MIT. All of this libraries dependencies are licensed under MIT compatible licenses. Documentation The documentation for this library can be generated using doxygen. If it is installed on your system, you can simply type: cd build make doc This generates the Latex and HTML documentation into build/doc Run the tests Simply run: make test Testcoverage can be retrieved by invoking the dev/testcoverage.sh script inside the dev folder. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cinemast/libjson-rpc-cpp"	"JSON-RPC framework for C++ servers and clients. [MIT]"	"true"
"Inter-process communication"	"nanomsg"	"https://github.com/nanomsg/nanomsg"	"A simple high-performance implementation of several ""scalability protocols"". [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2926"	"351"	"464"	"GitHub - nanomsg/nanomsg: nanomsg library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 351 Star 2,926 Fork 464 nanomsg/nanomsg Code Issues 37 Pull requests 10 Pulse Graphs nanomsg library 1,531 commits 7 branches 12 releases 77 contributors C 87.6% C++ 10.5% CMake 1.9% C C++ CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master sync tcpmux travis ws ws2 Nothing to show 1.0.0 1.0.0-rc2 1.0.0-rc1 0.9-beta 0.8-beta 0.7-beta 0.6-beta 0.5-beta 0.4-beta 0.3-beta 0.2-alpha 0.1-alpha Nothing to show New pull request Latest commit 7e12a20 Jun 25, 2016 gdamore fixes #770 Please correct the typo in the BUILD section Permalink Failed to load latest commit information. demo fixes #759 Add some demo programs Jun 6, 2016 doc fixes #386 loop prevention code missing Jun 3, 2016 perf fixes #732 performance tests should set max receive size option (fix … May 30, 2016 rfc fixes #604 in-band message type incorrect in sp-ipc-mapping-01.txt Apr 12, 2016 src fixes #768 NN_MAXTTL missed in nn_symbol Jun 25, 2016 tests fixes #763 tcp_shutdown windows races Jun 9, 2016 tools fixes compiler warnings about code paths that could dereference a NUL… May 11, 2016 .appveyor.yml fixes #698 AppVeyor cannot run -j4 May 11, 2016 .gitignore fixes #749 gitignore lists stuff from autotools Jun 3, 2016 .travis.yml fixes #716 No longer need travis deploy. (forgot make dist) May 15, 2016 .version fixes #765 Release 1.0.0 Jun 10, 2016 AUTHORS fixes #734 Update AUTHORS May 26, 2016 CMakeLists.txt fixes #771 reqttl test fail on osx Jun 21, 2016 COPYING Copyright transfer from 250bpm s.r.o. to Martin Sustrik Nov 12, 2014 README fixes #770 Please correct the typo in the BUILD section Jun 25, 2016 README.md fixed README Jan 9, 2013 RELEASING fixes #728 Source archives missing .version == Unknown version May 25, 2016 configure fixes #761 ./configure syntax error with dash Jun 7, 2016 README.md Welcome to nanomsg The nanomsg library is a simple high-performance implementation of several ""scalability protocols"". These scalability protocols are light-weight messaging protocols which can be used to solve a number of very common messaging patterns, such as request/reply, publish/subscribe, surveyor/respondent, and so forth. These protocols can run over a variety of transports such as TCP, UNIX sockets, and even WebSocket. For more information check the website. Prerequisites Windows. Windows Vista or newer (Windows XP and 2003 are NOT supported) Microsoft Visual Studio 2010 (including C++) or newer, or mingw-w64 (Specifically mingw and older Microsoft compilers are *NOT supported) CMake 2.8.7 or newer, available in $PATH as cmake POSIX (Linux, MacOS X, UNIX) ANSI C compiler supporting C89 POSIX pthreads (should be present on all modern POSIX systems) BSD sockets support for both TCP and UNIX domain sockets CMake (http://cmake.org) 2.8.7 or newer, available in $PATH as cmake Documentation (optional) asciidoctor (http://asciidoctor.org/) available as asciidoctor If not present, docs are not formatted, but left in readable ASCII Also available on-line at http://nanomsg.org/documentation Build it with CMake Go to the root directory of the local source repository. To perform an out-of-source build, run: mkdir build cd build cmake .. (You can add -DCMAKE_INSTALL_PREFIX=/usr/local or some other directory.) cmake --build . ctest -C Debug . cmake --build . --target install NB: This may have to be done as a privileged user. (Linux only). ldconfig (As a privileged or root user.) Resources Website: http://nanomsg.org Source code: https://github.com/nanomsg/nanomsg Documentation: http://nanomsg.org/documentation.html Bug tracker: https://github.com/nanomsg/nanomsg/issues Mailing list: nanomsg@freelists.org Gitter Chat: https://gitter.im/nanomsg/nanomsg IRC chatroom: #nanomsg at irc.freenode.net/8001 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nanomsg/nanomsg"	"A simple high-performance implementation of several ""scalability protocols"". [MIT]"	"true"
"Inter-process communication"	"website"	"http://nanomsg.org/"	"A simple high-performance implementation of several ""scalability protocols"". [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"nanomsg Home Download Documentation Development Community nanomsg is a socket library that provides several common communication patterns. It aims to make the networking layer fast, scalable, and easy to use. Implemented in C, it works on a wide range of operating systems with no further dependencies. The communication patterns, also called ""scalability protocols"", are basic blocks for building distributed systems. By combining them you can create a vast array of distributed applications. The following scalability protocols are currently available: PAIR - simple one-to-one communication BUS - simple many-to-many communication REQREP - allows to build clusters of stateless services to process user requests PUBSUB - distributes messages to large sets of interested subscribers PIPELINE - aggregates messages from multiple sources and load balances them among many destinations SURVEY - allows to query state of multiple applications in a single go Scalability protocols are layered on top of the transport layer in the network stack. At the moment, the nanomsg library supports the following transports mechanisms: INPROC - transport within a process (between threads, modules etc.) IPC - transport between processes on a single machine TCP - network transport via TCP The library exposes a BSD-socket-like C API to the applications. It is licensed under MIT/X11 license. ""nanomsg"" is a trademark of Martin Sustrik"	"null"	"null"	"A simple high-performance implementation of several ""scalability protocols"". [MIT]"	"true"
"Inter-process communication"	"simple-rpc-cpp"	"https://github.com/pearu/simple-rpc-cpp"	"A simple RPC wrapper generator to C/C++ functions. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"2"	"4"	"GitHub - pearu/simple-rpc-cpp: Automatically exported from code.google.com/p/simple-rpc-cpp Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 8 Fork 4 pearu/simple-rpc-cpp Code Issues 0 Pull requests 0 Wiki Pulse Graphs Automatically exported from code.google.com/p/simple-rpc-cpp 14 commits 2 branches 0 releases Fetching contributors Python 49.4% C++ 43.5% Makefile 7.1% Python C++ Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master wiki Nothing to show Nothing to show New pull request Latest commit 7e9fa26 Aug 5, 2015 pearu finishGoogleCodeGitHubWikiMigration.sh: Moved ProjectHome.md from wik… … …i branch to README.md in master branch. Permalink Failed to load latest commit information. scripts Implemented RPC wrapper to some stdlib functions [experimental] Sep 3, 2012 simple_rpc Speed up write speed by using buffers for sending all arguments or re… Sep 5, 2012 tests README.md finishGoogleCodeGitHubWikiMigration.sh: Moved ProjectHome.md from wik… Aug 5, 2015 setup.py Implement simple_rpc --include-dir. Sep 5, 2012 README.md This project initiated from the following practical problem. To control experimental equipment via computers, manufactures provide software drivers with SDK written in C/C++. Unfortunately, Windows platform is often the only supported platform or support for other platforms stays years behind. In order to control such equipment from a Linux platform, for instance, Remote Procedure Calling (RPC) techniques can be used. Simple RPC C++ project provides a Python script that generates wrappers to C/C++ functions and RPC server applications so that the wrapped C/C++ functions could be called from an application (local host) but the C/C++ functions are executed on a server application (remote host). The usage of word ""simple"" in the name of this project is due to the following: RPC technology can be simple to use --- editing existing code should be minimal in order to remotely call C/C++ functions. Just changing the name of a header file should be sufficient to adapt an application to use RPC for certain C/C++ functions. Note that existing RPC libraries require RPC specific client applications; the current project aims at requiring minimal modification to client applications so that switching from calling C/C++ functions directly or via RPC, would be straightforward. Simplification can be sufficient for practical applications --- C/C++ functions that can be wrapped for RPC, are assumed to have ""simple"" prototypes, that is, the arguments should have types that Boost serialization library can handle. This includes all standard C/C++ scalar types and standard STL collections. These types can be defined in arguments as is, or as references, or as pointers. Notice that pointer arguments are treated in application program (in local host) as scalars that can be passed to RPC server program where they point to actual memory location of the remote host. Simplicity goes with restrictions --- For instance, wrapping C++ template functions is not supported. In addition, when running an application and RPC server on hosts with different architecture or operating system, special care must be taken to ensure that the data exchange between local and remote host is correct. For instance, the size of standard C/C++ int type may be different on local and remote hosts leading to possible corruption of data. To avoid this, always use scalar types with fixed byte width, for instance, int32_t, uint64_t, etc. Finally, no care is taken when the endian of local and remote hosts differ.. Installation The project assumes availability of Python 2.x. Python 3.x support might require minor modifications in the project source code, patches are welcome. Checkout the project source code, see Source/Checkout for instructions. In the source code directory, run sudo python setup.py install  Windows users should run python setup.py install from command prompt. To verify success, execute   cd tests   make  If the tests pass, you can try out the ""Example"" project below. Example A typical C/C++ project consists of three parts: application source file containing the main function, source file(s) of computational functions, and header file(s) of the corresponding prototypes. All source files are compiled and linked together resulting an application program. When running this application program, the main function calls computational functions and outputs the results. Our aim is that when main function calls computational functions then they are actually executed in remote host. For that we use RPC technique to send function arguments and then receive function results over network. The current project Simple RPC C++ provides a Python script simple_rpc that constructs RPC wrapper functions to computational functions and generates the corresponding RPC source code. By design, modifications to existing source files are minimal. In fact, in a typical usage case only the application source file requires minor editing while no modifications are needed to the rest of source or header files, as will be demonstrated below. To illustrate this, consider the following example project consisting of three files: Source file: example_dot.cpp Header file: example_dot.hpp Application source file: example_dot_app.cpp #include ""example_dot.hpp""      double dot_product(const vector<double> & a,              const vector<double> & b              )   {     double sum = 0;     for (int i = 0; i < a.size(); i++)       sum += a[i] * b[i];     return sum;   }    #ifndef EXAMPLE_DOT_HPP_DEFINED   #define EXAMPLE_DOT_HPP_DEFINED      #include <vector>   using namespace std;      double dot_product(const vector<double> & a,              const vector<double> & b              );      #endif    #include <iostream>      #include ""example_dot.hpp""      main()   {     vector<double> a(3);     a[0] = 1.2; a[1] = 3.4; a[2] = 5.6;     cout << ""dot_product(a,a) -> "";     cout << dot_product(a,a) << endl;   }    The corresponding application can be compiled and executed: $ c++ example_dot.cpp example_dot_app.cpp -o example_dot_app $ ./example_dot_app dot_product(a,a) -> 44.36  In order to call dot_product via RPC server, first, we generate wrapper codes: $ simple_rpc example_dot.hpp Creating RPC wrappers to functions:     double dot_product(const vector<double> & a,                const vector<double> & b               ) creating file example_dot-rpc.hpp creating file example_dot-rpc.cpp creating file example_dot-rpc-server.cpp  Notice that the simple_rpc script takes header files for input and generates three files as shown above. These files will be used to compile and build two executable programs: one for application and one for RPC server. Next, we will modify the application source code as follows. Source file: example_dot.cpp Header file: example_dot.hpp Application source file: example_dot_app.cpp #include ""example_dot.hpp""      double dot_product(const vector<double> & a,              const vector<double> & b              )   {     double sum = 0;     for (int i = 0; i < a.size(); i++)       sum += a[i] * b[i];     return sum;   }    #ifndef EXAMPLE_DOT_HPP_DEFINED   #define EXAMPLE_DOT_HPP_DEFINED      #include <vector>   using namespace std;      double dot_product(const vector<double> & a,              const vector<double> & b              );      #endif    #include <iostream>      #include ""example_dot-rpc.hpp""              // <-- (1)      #ifdef SimpleRPC                            // <-- (2)   using namespace simple_rpc::example_dot;    // <-- (2)   #endif                                      // <-- (2)      main()   {     SIMPLE_RPC_CONNECT(""127.0.0.1"", 2340, 2); // <-- (3)     vector<double> a(3);     a[0] = 1.2; a[1] = 3.4; a[2] = 5.6;     cout << ""dot_product(a,a) -> "";     cout << dot_product(a,a) << endl;   }    The application source code is modified in three places indicated with // <-- (#): The name of the header file is appended with -rpc suffix. The generated header file contains RPC wrapper functions to functions found in the original header file. ifdef SimpleRPC block is inserted. This is done for convenience as it will make easy to disable (use -DDISABLE_SIMPLE_RPC when compiling application code) and enable RPC in the application code. Following using namespace declaration exposes the RPC wrapper of compute_dot function to current namespace. In general, RPC wrappers are defined in namespace simple_rpc::<headerfile name>. SIMPLE_RPC_CONNECT macro is used to specify the RPC server host IP, port number and debug level (0 means no debug messages are shown, increasing this number will increase verbosity). Here we use debug level 2 in order to illustrate the connection between the application code and RPC server, see below. Next, the application and the RPC server programs must be built. In the given example we use RPC server local host (the corresponding host IP is 127.0.0.1) but, in general, the application program must be built on local host while the RPC server program on server host, especially, if these hosts run different operating systems. The following table illustrates the build process: Remote host Local host $ c++ example_dot.cpp example_dot-rpc-server.cpp \      -o example_dot-rpc-server -pthread \      -lboost_system -lboost_serialization \      -I`simple_rpc --include-dir`    $ c++ example_dot-rpc.cpp example_dot_app.cpp \      -o example_dot_app-rpc -pthread \      -lboost_system -lboost_serialization \      -I`simple_rpc --include-dir`    Notice that all source codes of functions must be compiled on remote host while the application source code with RPC wrapper source is compiled on local host. Finally, we run the RPC server in remote host, and subsequently, run the application program: Remote host Local host $ ./example_dot-rpc-server   rpc-server[2] waits connection via port 2340...connected!   rpc-server:read_scalar<j>(a.size) <- 4 bytes   rpc-server:read_vector<d>(a) <- 24 bytes   rpc-server:read_scalar<j>(b.size) <- 4 bytes   rpc-server:read_vector<d>(b) <- 24 bytes   rpc-server:write_buffer_list(dot_product(a, b)) -> 16 bytes   rpc-server[3] waits connection via port 2340...    $ ./example_dot_app-rpc   set_debug_level:write_buffer_list(set_debug_level(debug_level)) -> 4 bytes   dot_product:write_buffer_list(dot_product(a, b)) -> 56 bytes   dot_product:read_scalar<d>(return_value) <- 8 bytes   dot_product(a,a) -> 44.36    Notice that RPC server can run continuously and different application programs can execute functions from the server. This will work only when different application programs will not execute the server functions at the same time. Server will serve the first application and during the time of execution, connections to the server by other applications will be declined. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pearu/simple-rpc-cpp"	"A simple RPC wrapper generator to C/C++ functions. [BSD]"	"true"
"Inter-process communication"	"WAMP"	"http://wamp.ws/"	"Provides RPC and pub/sub messaging patterns. (various implementations, various languages)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"WAMP - Web Application Messaging Protocol The Web Application Messaging Protocol Home Why WAMP? How does it compare? Implementations Specification FAQ WAMP is an open standard WebSocket subprotocol that provides two application messaging patterns in one unified protocol: Remote Procedure Calls + Publish & Subscribe.   Read more Tweet Using WAMP you can build distributed systems out of application components which are loosely coupled and communicate in (soft) real-time. A quick introduction to WAMP: Here is what users do with WAMP: Sony CSL Sony Computer Science Lab is developing Kadecot, a Home Automation product using WAMP which they presented at a recent W3C Workshop on the Web of Things. Genesi is licensing Radix K1, a complete Internet of Things (IoT) solution using WAMP and leveraging Crossbar.io server-side. Communication is fully encrypted (SSL). Kitware is offering solutions for 3D scientific visualization and is using WAMP and Autobahn (a WAMP real-time framework) in its ParaView and VTK products. Record-Evolution offers an advanced Data-Warehouse and Business Intelligence tool built on WAMP, Crossbar.io (an enterprise WAMP router) and Oracle database. The MDS Lab at the University of Messina uses WAMP for its SmartME smart city project, and for the Stack4Things OpenStack-based framework they are developing for this. News WAMP - Web Application Messaging Protocol - 2015/04/29, by Ryan Edge Why AJAX isn't enough (Smashing Magazine) - 2015/01/13, by Alexander Gödde Introduction to WAMP slide deck - 2014/12/26, by Sam & Max. A few words about WAMP - 2014/09/16, by Konstantin Burkalev WAMP language survey results - 2014/07/07, by Alexander Gödde Ready for more? Why WAMP? Get started! Mailing list WAMP™ - The Web Application Messaging Protocol. Copyright © 2012-2014 Tavendo GmbH and contributors. Content licensed under Creative Commons CC-BY-SA and code licensed under Apache 2.0. ""Tavendo"", ""Crossbar.io"", ""WAMP"" and the logo are trademarks of Tavendo GmbH. All rights reserved. All other trademarks are those of their respective companies. Anbieterkennzeichnung nach deutschem Recht."	"null"	"null"	"Provides RPC and pub/sub messaging patterns. (various implementations, various languages)"	"true"
"Inter-process communication"	"xmlrpc-c"	"http://xmlrpc-c.sourceforge.net/"	"A lightweight RPC library based on XML and HTTP. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"XML-RPC for C and C++: Description A lightweight RPC library based on XML and HTTP. User Resources Home Downloading User Documentation Bugs, Questions, etc. Example Code Mailing Lists Other Information XML-RPC Standard XML-RPC Introspection Standard Alternative Software Copyright License (BSD-style) Change History Contributor Resources SourceForge Project Using Subversion Using CVS Related Projects Curl w3c-libwww Libxml2 (Gnome XML C Parser And Toolkit) Abyss Expat Copyright 2001 Eric Kidd. All rights reserved. The contents of this website may be distributed under the same license terms as XML-RPC for C/C++. Funding for the initial releases of XML-RPC for C/C++ was provided in part by First Peer, Inc. Description XML-RPC is a quick-and-easy way to make procedure calls over the Internet. It converts the procedure call into an XML document, sends it to a remote server using HTTP, and gets back the response as XML. This library provides a modular implementation of XML-RPC for C and C++. The library also provides limited facilities for the common variation on XML-RPC that uses HTTPS (SSL encryption). The library also provides a variation on XML-RPC that works better in some cases (but is not standard): packet stream XML-RPC. XML-RPC For C and C++ is designed for Unix and is most tested on unix. As far as we know, it works on any reasonably standard unix. There is also lots of code to make it work on Windows, using Windows native wininet for clients and Windows native http.sys for servers. But the fact is that it probably won't work out-of-the-box on your Windows system. Here is the Windows story. [ Downloading | Example Code | Performance | Alternatives | XML-RPC protocol ] There is a Perl module to interface to XML-RPC for C and C++. Look in CPAN for RPC::Xmlrpc_c. For information on using XML-RPC with other languages, see the XML-RPC Web site and the Linux XML-RPC Howto."	"null"	"null"	"A lightweight RPC library based on XML and HTTP. [BSD]"	"true"
"Inter-process communication"	"ZeroMQ"	"http://zeromq.org/"	"High-speed, modular asynchronous communication library. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Distributed Messaging - zeromq zeromq Create account or Sign in Distributed Messaging ZeroMQ \zero-em-queue\, \ØMQ\:  Ø  Connect your code in any language, on any platform.  Ø  Carries messages across inproc, IPC, TCP, TIPC, multicast.  Ø  Smart patterns like pub-sub, push-pull, and router-dealer.  Ø  High-speed asynchronous I/O engines, in a tiny library.  Ø  Backed by a large and active open source community.  Ø  Supports every modern language and platform.  Ø  Build any architecture: centralized, distributed, small, or large.  Ø  Free software with full commercial support. Learn the Basics Get the Software Solve a Problem Join the Community Paid Support Buy the Book Web site design and content is copyright (c) 2014 iMatix Corporation. Contact us for professional support. Site content licensed under cc-by-sa 3.0 ØMQ is copyright (c) Copyright (c) 2007-2014 iMatix Corporation and Contributors. ØMQ is free software licensed under the LGPL. ØMQ and ZEROMQ are trademarks of iMatix Corporation. Terms of Use — Privacy Policy Click here to edit contents of this page. Click here to toggle editing of individual sections of the page (if possible). Watch headings for an ""edit"" link when available. Append content without editing the whole page source. Check out how this page has evolved in the past. If you want to discuss contents of this page - this is the easiest way to do it. View and manage file attachments for this page. A few useful tools to manage this Site. See pages that link to and include this page. Change the name (also URL address, possibly the category) of the page. View wiki source for this page without editing. View/set parent page (used for creating breadcrumbs and structured layout)."	"null"	"null"	"High-speed, modular asynchronous communication library. [LGPL]"	"true"
"XML"	"Boost.PropertyTree"	"http://www.boost.org/doc/libs/1_55_0/doc/html/property_tree.html"	"A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Chapter 22. Boost.PropertyTree - 1.55.0 Boost C++ Libraries ...one of the most highly regarded and expertly designed C++ library projects in the world. — Herb Sutter and Andrei Alexandrescu, C++ Coding Standards Click here to view the latest version of this page. Chapter 22. Boost.PropertyTree Marcin Kalicinski Copyright © 2008 Marcin Kalicinski Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) Table of Contents What is Property Tree? Five Minute Tutorial Property Tree as a Container Property Tree Synopsis How to Populate a Property Tree XML Parser JSON Parser INI Parser INFO Parser How to Access Data in a Property Tree Appendices Reference Header <boost/property_tree/exceptions.hpp> Header <boost/property_tree/id_translator.hpp> Header <boost/property_tree/info_parser.hpp> Header <boost/property_tree/ini_parser.hpp> Header <boost/property_tree/json_parser.hpp> Header <boost/property_tree/ptree.hpp> Header <boost/property_tree/ptree_fwd.hpp> Header <boost/property_tree/ptree_serialization.hpp> Header <boost/property_tree/stream_translator.hpp> Header <boost/property_tree/string_path.hpp> Header <boost/property_tree/xml_parser.hpp> What is Property Tree? The Property Tree library provides a data structure that stores an arbitrarily deeply nested tree of values, indexed at each level by some key. Each node of the tree stores its own value, plus an ordered list of its subnodes and their keys. The tree allows easy access to any of its nodes by means of a path, which is a concatenation of multiple keys. In addition, the library provides parsers and generators for a number of data formats that can be represented by such a tree, including XML, INI, and JSON. Property trees are versatile data structures, but are particularly suited for holding configuration data. The tree provides its own, tree-specific interface, and each node is also an STL-compatible Sequence for its child nodes. Conceptually, then, a node can be thought of as the following structure: struct ptree {    data_type data;                         // data associated with the node    list< pair<key_type, ptree> > children; // ordered list of named children };  Both key_type and data_type are configurable, but will usually be std::string. Many software projects develop a similar tool at some point of their lifetime, and property tree originated the same way. We hope the library can save many from reinventing the wheel. Last revised: October 28, 2013 at 23:53:56 GMT"	"null"	"null"	"A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost]"	"true"
"JSON"	"frozen"	"https://github.com/cesanta/frozen"	"JSON parser and generator for C/C++. [GPL & GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"144"	"24"	"46"	"GitHub - cesanta/frozen: JSON parser and generator for C/C++ with scanf/printf like interface. Targeting embedded systems. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 144 Fork 46 cesanta/frozen Code Issues 0 Pull requests 0 Pulse Graphs JSON parser and generator for C/C++ with scanf/printf like interface. Targeting embedded systems. 86 commits 1 branch 5 releases 8 contributors C 98.7% Makefile 1.3% C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.5 1.4 1.3 1.2 1.0 Nothing to show New pull request Latest commit e195625 Jul 14, 2016 cpq committed with cesantabot json_parse -> json_walk … PUBLISHED_FROM=595bbd2accccca3b16482ee6963d65cb8d43e2d0 Permalink Failed to load latest commit information. docs json_parse -> json_walk Jul 14, 2016 LICENSE URL fixed Feb 11, 2014 Makefile json_scanf implementation Jul 1, 2016 README.md Update frozen docs Jul 14, 2016 frozen.c json_parse -> json_walk Jul 14, 2016 frozen.h json_parse -> json_walk Jul 14, 2016 unit_test.c json_parse -> json_walk Jul 14, 2016 README.md JSON parser and emitter for C/C++ Documentation Read Frozen documentation online Contributions To submit contributions, sign Cesanta CLA and send GitHub pull request. You retain the copyright on your contributions. Licensing Frozen is released under commercial and GNU GPL v.2 open source licenses. Commercial Projects: Once your project becomes commercialised GPLv2 licensing dictates that you need to either open your source fully or purchase a commercial license. Cesanta offer full, royalty-free commercial licenses without any GPL restrictions. If your needs require a custom license, we’d be happy to work on a solution with you. Contact us for pricing. Prototyping: While your project is still in prototyping stage and not for sale, you can use Frozen’s open source code without license restrictions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cesanta/frozen"	"JSON parser and generator for C/C++. [GPL & GPL2]"	"true"
"JSON"	"Jansson"	"https://github.com/akheron/jansson"	"C library for encoding, decoding and manipulating JSON data. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1121"	"86"	"311"	"GitHub - akheron/jansson: C library for encoding, decoding and manipulating JSON data Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 86 Star 1,121 Fork 311 akheron/jansson Code Issues 19 Pull requests 10 Wiki Pulse Graphs C library for encoding, decoding and manipulating JSON data http://www.digip.org/jansson/ 776 commits 19 branches 23 releases Fetching contributors C 74.3% CMake 19.9% Shell 3.3% Makefile 1.4% M4 1.1% C CMake Shell Makefile M4 Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 1.1 1.2 1.3 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 bignum c++-api isnan-isinf-checks master object-insertion-order pull-126 simplify-snprintf-checks Nothing to show v2.7 v2.6 v2.5 v2.4 v2.3.1 v2.3 v2.2.1 v2.2 v2.1 v2.0.1 v2.0 v1.3 v1.2.1 v1.2 v1.1.3 v1.1.2 v1.1.1 v1.1 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0 Nothing to show New pull request Latest commit 8f06796 Jun 20, 2016 akheron committed on GitHub Merge pull request #290 from Thynix/documentation … Polish API documentation Permalink Failed to load latest commit information. android Fix for issue #282 May 3, 2016 cmake Simplify snprintf and vsnprintf checking for Visual Studio May 30, 2016 doc doc: fix code block formatting Jun 17, 2016 examples examples/README.rst: Fix formatting Dec 30, 2014 src Fix subnormal number parsing on mingw32 May 17, 2016 test Fix for issue #282 May 3, 2016 .gitignore SmartOS build fix Apr 6, 2014 .travis.yml Add support for coverage/coveralls.io in cmake project. Dec 12, 2014 Android.mk Android.mk: Add -DHAVE_STDINT_H to LOCAL_CFLAGS Jul 31, 2014 CHANGES Fix a typo Dec 23, 2015 CMakeLists.txt Simplify snprintf and vsnprintf checking for Visual Studio May 30, 2016 CleanSpec.mk Create Android.mk, preconfigured jansson_config.h and CleanSpec.mk fo… Mar 27, 2013 LICENSE Update copyrights for 2014 Jan 28, 2014 Makefile.am Don't use GNU-make specific export for global AM_CFLAGS Aug 26, 2014 README.rst Change readthedocs domain Apr 28, 2016 appveyor.yml appveyor.yml: Build on all Visual Studio versions Jun 3, 2016 configure.ac Add Makefile.am for examples Dec 30, 2014 jansson.pc.in Add pkg-config support Jan 7, 2010 release.sh Compress bz2 doc tarballs with bzip2 instead of gzip Jan 6, 2013 README.rst Jansson README Jansson is a C library for encoding, decoding and manipulating JSON data. Its main features and design principles are: Simple and intuitive API and data model Comprehensive documentation No dependencies on other libraries Full Unicode support (UTF-8) Extensive test suite Jansson is licensed under the MIT license; see LICENSE in the source distribution for details. Compilation and Installation If you obtained a source tarball, just use the standard autotools commands: $ ./configure $ make $ make install  To run the test suite, invoke: $ make check  If the source has been checked out from a Git repository, the ./configure script has to be generated first. The easiest way is to use autoreconf: $ autoreconf -i  Documentation Documentation is available at http://jansson.readthedocs.io/en/latest/. The documentation source is in the doc/ subdirectory. To generate HTML documentation, invoke: $ make html  Then, point your browser to doc/_build/html/index.html. Sphinx 1.0 or newer is required to generate the documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/akheron/jansson"	"C library for encoding, decoding and manipulating JSON data. [MIT]"	"true"
"JSON"	"jbson"	"https://github.com/chrismanning/jbson"	"jbson is a library for building & iterating BSON data, and JSON documents in C++14. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"3"	"3"	"GitHub - chrismanning/jbson: JSON & BSON parser/writer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 19 Fork 3 chrismanning/jbson Code Issues 2 Pull requests 0 Pulse Graphs JSON & BSON parser/writer http://chrismanning.github.io/jbson 261 commits 3 branches 0 releases Fetching contributors C++ 99.2% CMake 0.8% C++ CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master set_visit_wip Nothing to show Nothing to show New pull request Latest commit 2e5ca71 Dec 20, 2015 chrismanning Remove the remaining using namespace std::experimental Permalink Failed to load latest commit information. doc Update docs CSS May 12, 2014 include/jbson Remove the remaining using namespace std::experimental Dec 20, 2015 test Stop bringing std::experimental into std:: & libstdc++ fixes. Dec 20, 2015 .clang-format Rewrite JsonPath implementation. It's now more complete & reliable. It May 7, 2015 CMakeLists.txt Stop bringing std::experimental into std:: & libstdc++ fixes. Dec 20, 2015 Doxyfile.in Make doxygen output dir configurable with cmake May 1, 2014 LICENSE_1_0.txt Initial BSON reading with iteration Dec 6, 2013 README.md Finally fix basic_element::visit argument order. Apr 26, 2014 README.md jbson is a library for building & iterating BSON data, and JSON documents in C++14. \tableofcontents Features # {#features} Header only. Boost licensed. Depends only on Boost headers & C++14 standard library. note 3 Fully compatible with documented BSON specs. A strict, iterator-based JSON parser. Mostly compliant with JSON standard. note 2 Parses MongoDB extended JSON from UTF-8,16,32 strings. User-defined JSON literals """"_json_set, """"_json_doc, """"_json_arr. An implementation of JSONPath, with some support for filtering with boolean expressions. Usage # {#usage} All types and functions are under the jbson namespace. Elements {#elements} jbson::basic_element is the class through which elements' names & values are accessed and has a template parameter for its data container. Generally, this will be a non-owning range (e.g. boost::iterator_range), but there is an jbson::element alias to jbson::basic_element<std::vector<char>> to enforce data ownership. The names are always copied (may change in the future). Value data may or may not be, depending on the container template parameter. The type of an element can be determined through comparison with the jbson::element_type enum class values. Values can be accessed through the jbson::basic_element::value() member function or the jbson::get() free function.     using jbson::element_type;     jbson::element elem;     //...     if(elem.type() == element_type::string_element) {         auto str = elem.value<std::string>();         //OR         auto str = jbson::get<std::string>(elem);         //OR if container is contiguous         auto str = elem.value<boost::string_ref>();         //OR         auto str = jbson::get<boost::string_ref>(elem);         //OR returns either std::string or boost::string_ref, depending on container         auto str = jbson::get<element_type::string_element>(elem);     } Elements can be modified using the value() member function.     using jbson::element_type;     jbson::element elem;     elem.value(""some string"");     assert(elem.type() == element_type::string_element);     elem.value(123);     assert(elem.type() == element_type::int32_element);     elem.value<bool>(123);     assert(elem.type() == element_type::boolean_element);     elem.value<element_type::boolean_element>(123);     assert(elem.type() == element_type::boolean_element);     elem.value(element_type::boolean_element, 123);     assert(elem.type() == element_type::boolean_element); Elements can also be accessed via the visitor pattern.     using namespace jbson;     element elem;     //...     struct Visitor {         template <typename T>         void operator()(boost::string_ref name, element_type etype, T&& value) const {             // do something         }          void operator()(boost::string_ref name, element_type etype) const {             // for elements whose type cannot have a value             // e.g. null_element, undefined_element         }     };     elem.visit(Visitor{}); Visitors can also return values. It is not necessary to typedef a return_type.     using namespace jbson;     element elem;     //...     struct IsNull {         template <typename T>         bool operator()(boost::string_ref, element_type, T&&) const {             return false;         }         bool operator()(boost::string_ref, element_type) const {             return true;         }     };     bool null = elem.visit(IsNull{}); Building Documents & Arrays {#building} builder & array_builder are simple classes used for building documents & arrays, respectively. These allow for documents & arrays to be built from variables, rather than just literals.     using namespace jbson;     auto str = ""str""s;     int num = 123;     // {     //     ""some string"": ""str"",     //     ""some int"": 123,     //     ""some obj"": {     //         ""child bool"": false     //     }     // }     document doc = builder         (""some string"", element_type::string_element, str)         (""some int"", element_type::int32_element, num)         (""some obj"", element_type::document_element, builder             (""child bool"", element_type::boolean_element, false)         ); While the intent of this is clear, it's a little verbose due to the explicit type. This can be omitted when the type is compatible with a JSON type. The above example becomes:     using namespace jbson;     auto str = ""str""s;     int num = 123;     // {     //     ""some string"": ""str"",     //     ""some int"": 123,     //     ""some obj"": {     //         ""child bool"": false     //     }     // }     document doc = builder         (""some string"", str)         (""some int"", num)         (""some obj"", builder             (""child bool"", false)         ); That's about as good as it's going to get. array_builder is used the same way, apart from the lack of a name parameter, which is an implicitly set integer.     using namespace jbson;     auto str = ""str""s;     int num = 123;     // [""str"", 123, { ""child bool"": false }]     array arr = array_builder         (str)         (num)         (builder             (""child bool"", false)         ); Documents {#docs} The main classes of jbson are the templates jbson::basic_document, jbson::basic_array & jbson::basic_element. These types are parameterised with their underlying container or range. It's generally recommended to use a random-access range. Their default aliases i.e. document & element are parameterised with std::vector<char>. The second template parameter of basic_document defines the parameter of child basic_elements. By default this is defined as a boost::iterator_range to avoid copying data, though care should be taken that this element does not outlive the container/document which owns the data, else it can be copied to its own jbson::element.     jbson::document doc;     //...     for(auto&& element: doc) {         //...     }     std::for_each(doc.begin(), doc.end(), [](auto&& v) { something(v); }); basic_array is implemented using basic_document and the classes can usually be interchanged freely. Of course, basic_document is for documents and basic_array is for arrays and should be used as such. basic_document is simply a constant wrapper around its BSON data container, allowing iteration of elements in the form of a basic_element. It can be used with C++11's range-based for loop, and non-modifying standard algorithms. Iterators retain a copy of elements. This does not mean that an iterator contains a copy of an element's data, however. Document Set {#doc_set} basic_document_set is an alias template to std::set<basic_element,...> which basic_document and basic_array are explicitly convertible to. This can be used to easily modify an existing document, at the cost of copying/converting the entire document into its constituent elements. The type parameter of basic_document_set should be a container not a range, i.e. it should own the data. The default alias document_set is basic_document_set<std::vector<char>> making it a set of basic_element<std::vector<char>>.     jbson::document doc;     //...     jbson::document_set set(doc);     //... modify set     doc = set; // convert back JSON Parsing {#json} JSON documents can be parse with the json_reader class, which parses directly to BSON data and can be implicitly converted to any valid basic_document, basic_array or basic_document_set. It can also be move-converted to a document or array for efficient conversion.     jbson::json_reader reader{};     reader.parse(""{\""some json\"": 123 }"");     reader.parse(R""({""some json"": 123 })""); // C++11 raw string     auto doc = jbson::document(std::move(reader)); json_reader can parse string literals, or any range of UTF-(8, 16 or 32) characters e.g. std::string, boost::string_ref, boost::iterator_range<...>, QByteArray, etc. To parse UTF-16 or UTF-32 documents, json_reader must be passed a range of (or iterators to) char16_t or char32_t, respectively. It is assumed the input code units use the system endian, and a BOM (byte-order mark) at the beginning of input is an error. json_reader may also work with wchar_t, though this usage is non-standard, non-portable and unsupported. For convenience, user-defined literals have been implemented for JSON documents.     using jbson::literal;     auto doc = R""({         ""some json"": 123     })""_json_doc; This is equivalent to the above example. Performance {#performance} Performance of the JSON parser is decent, as measured by json_benchmark, it's 2nd only to rapidjson (or 3rd to QJsonDocument with small input): QJsonDocument.small: 1000 iterations of 500 parsings in 1.04621 to 1.05643 sec based on 2 benchmarks QJsonDocument.large: 1000 iterations of 1 parsings in 58.1027 to 58.1235 sec based on 2 benchmarks jsoncpp.small: 1000 iterations of 500 parsings in 2.4124 to 2.45696 sec based on 2 benchmarks jsoncpp.large: 1000 iterations of 1 parsings in 62.7781 to 62.7823 sec based on 2 benchmarks rapidjson.small: 1000 iterations of 500 parsings in 0.454047 to 0.48559 sec based on 2 benchmarks rapidjson.large: 1000 iterations of 1 parsings in 4.8566 to 4.86322 sec based on 2 benchmarks jbson.small: 1000 iterations of 500 parsings in 1.24328 to 1.27775 sec based on 2 benchmarks jbson.large: 1000 iterations of 1 parsings in 43.0072 to 43.0377 sec based on 2 benchmarks jsoncons.small: 1000 iterations of 500 parsings in 10.2386 to 10.2747 sec based on 2 benchmarks jsoncons.large: 1000 iterations of 1 parsings in 243.634 to 243.796 sec based on 2 benchmarks Some more measurements using https://github.com/sanSS/json-bechmarks. Small Objects Parser Average Time (us) Memory Usage jsoncpp 9411 4,084 K QJsonDocument 7009 3,684 K jbson 5981 1,132 K Medium Objects Parser Average Time (us) Memory Usage jsoncpp 121035 44,224 K QJsonDocument 82839 37,996 K jbson 64800 24,708 K Large Objects Parser Average Time (us) Memory Usage jsoncpp 438745 131,204 K QJsonDocument DNF N/A jbson 190883 70,7748 K Notes {#notes} jbson uses BSON-like terminology. Eg. a document is not only the root object, but also all embedded objects. BSON is incompatible with JSON in that element names cannot contain '\0', making names not fully UTF-8 compliant, which JSON requires. Requires codecvt header (C++11, missing in gcc-4.8 & gcc-4.9 stdlib), various template aliases (C++14), probably more where gcc's stdlib is behind on the standard. Known only to work with an up-to-date libc++ currently. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chrismanning/jbson"	"jbson is a library for building & iterating BSON data, and JSON documents in C++14. [Boost]"	"true"
"JSON"	"JeayeSON"	"https://github.com/jeaye/jeayeson"	"A very sane (header only) C++ JSON library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"79"	"12"	"10"	"GitHub - jeaye/jeayeson: A very sane (header only) C++14 JSON library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 79 Fork 10 jeaye/jeayeson Code Issues 0 Pull requests 0 Pulse Graphs A very sane (header only) C++14 JSON library 235 commits 3 branches 0 releases 6 contributors C++ 92.0% Python 3.8% Makefile 3.1% Shell 1.1% C++ Python Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master nice_things windows Nothing to show Nothing to show New pull request Latest commit 20389e5 Jun 2, 2016 jeaye Update recommended boost version Permalink Failed to load latest commit information. include/jeayeson Add type checking info to the readme Jun 15, 2015 lib Close #13; Add ODR test Mar 25, 2015 test Add value initialization tests Jun 15, 2015 .color_coded Add a basic .color_coded file Jun 12, 2015 .gitignore Added new detail config Aug 17, 2014 .gitmodules Moved unit tests to use jest Jul 29, 2014 .travis.yml Have travis use clang on osx Jun 2, 2016 .ycm_extra_conf.py Moved unit tests to use jest Jul 29, 2014 LICENSE Update license copyright Mar 25, 2015 Makefile.in Add value initialization tests Jun 15, 2015 README.md Update recommended boost version Jun 2, 2016 configure Make clang setup more convenient Dec 14, 2014 do_install Update to 2015 copyright Mar 25, 2015 README.md JeayeSON - a very sane C++14 JSON library JeayeSON was designed out of frustration that there aren't many template-based approaches to handling JSON in modern C++. Given a very limited number of types (that JSON offers), functions can be written in a generic manner to provide the most consistent interface, no matter the type. JeayeSON is a non-validating JSON library; it expects valid JSON all of the time. Header only (easy to add to any project) Small, consistent C++ API Typesafe, C++14 interface Absolutely no macros needed nor used UTF-8 (with UTF-16 transcoding) Extensive test suite (using jest, a ""sane and minimal C++14 unit test framework"") Practice Assuming the JeayeSON headers are in your search path, simply #include <jeayeson/jeayeson.hpp> NOTE: If you're on Windows and symbolic links don't work, use #include <jeayeson/value.hpp> This will give you access to the following types: json_value    /* variant type */ json_map      /* string->json_value map */ json_array    /* contiguous array of json_values */ json_null     /* json_value's default state */ json_int      /* defaults to int64_t */ json_float    /* defaults to double */ json_file     /* aggregate type representing a filename */ json_data     /* aggregate type representing json data as a string */ Building JSON Assume we want to create this JSON: {   ""hello"": ""world"",   ""arr"":   [ 1.1, 2.2, 3.3 ],   ""person"":   {     ""name"": ""Tom"",     ""age"": 36,     ""weapon"": null   } } We can simply do: json_value val // json_value can be any json type; here, it's a json_map {   { ""hello"", ""world"" }, // nested pairs represent key/value   {     ""arr"",     { 1.1, 2.2, 3.3 } // arrays are easy   },   {     ""person"",     {       { ""name"", ""Tom"" },       { ""age"", 36 },       { ""weapon"", nullptr } // can also use json_null     }   } }; Or, if we wanted to build it piece by piece: json_map val; // explicitly make a map this time  val[""hello""] = ""world""; // simple assignments work on all compatible types  val[""arr""] = { 1.1, 2.2, 3.3 }; // implicit array construction  json_map person; // we'll build the person separately, too person[""name""] = ""Tom""; person[""age""] = 36; person[""weapon""] = nullptr;  val[""person""] = person; // now we can just put the person map into val  // we can even dig into nested maps and arrays using op[] val[""person""][""name""] = ""Susan""; Reading a JSON string std::string json; // Acquired/initialized elsewhere json_array arr{ json_data{ json } }; // simple aggregate for type-safety Reading a file json_map map{ json_file{ ""my_file.json"" } }; // simple aggregate for type-safety Writing JSON // maps, arrays, and values can all be used with streams json_map map{ json_file{ ""my_file.json"" } }; std::cout << map << std::endl;  // you can also just write them to a string std::string const json{ map.to_string() }; Feels like the C++ stdlib You'll find all the normal stdlib-like functions, including iterator support. json_array json; json.push_back(""string""); json.push_back(3.14159); json.push_back(false);  for(auto const &j : json) // has begin, end, cbegin, cend, etc { std::cout << j << std::endl; }  // works like an std::vector or std::map json.size(); json.empty(); json.clear(); json.reserve(42); Type checking and casting json_map json {   { ""boolean"", false },   { ""str"", ""..."" } };  // check types with is<T>() json[""boolean""].is<json_value::type::boolean>(); // true json[""str""].is<json_value::type::string>(); // true  // query the type enum auto const type(json[""str""].get_type());  // cast with as<T>() to get the complete type auto const str(json[""str""].as<json_string>()); Installation The ./configure script must be used at least once to automagically generate jeayeson/config.hpp (see Customization). Since JeayeSON is a header-only library, simply copy over the contents of include to your project, or, better yet, add JeayeSON as a submodule and introduce jeayeson/include to your header search paths A full installation can also be achieved by using ./configure && make install. See the ./configure script for prefix options. Dependencies A C++14 compiler (GCC 5.x or Clang 3.8+ recommended) Boost (1.55.0+ recommended) Customization NOTE: All configuration is easily done in jeayeson/config.hpp, which is generated when you run ./configure (and is not overwritten subsequently -- delete it to reset). Customization can be achieved by adjusting the types in the jeayeson::config struct template. A specialization is already provided, which contains the default types used by JeayeSON. Feel free to change the types to any other, still compatible, types. For example, you may want the json integer type to be 32bit instead of the default 64bit. Or, you may want to use std::unordered_map instead of std::map. Building tests NOTE: You don't actually have to build JeayeSON, since it's a header-only library. This build process is only for the tests. In the project directory, run: $ ./configure && make  # Depending on your compiler setup (gcc or clang, linux or osx, etc) # you may need to specify some extra flags. An example case: # (allows clang & libc++ to work on Arch Linux) $ CXX=clang++ CXX_FLAGS=-stdlib=libc++ LD_LIBS=-lc++abi make Once built, you can run the tests: $ make test The tests (in test/src and test/include) can give more examples on how to use JeayeSON. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeaye/jeayeson"	"A very sane (header only) C++ JSON library. [BSD]"	"true"
"JSON"	"json"	"https://github.com/nlohmann/json"	"JSON for Modern C++. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2846"	"191"	"389"	"GitHub - nlohmann/json: JSON for Modern C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 191 Star 2,846 Fork 389 nlohmann/json Code Issues 12 Pull requests 1 Pulse Graphs JSON for Modern C++ https://nlohmann.github.io/json/ 967 commits 9 branches 5 releases 32 contributors C++ 99.5% Other 0.5% C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags coverity_scan develop feature/allocators feature/dump feature/improved_number_parser feature/user_defined_string_to_int feature/userdefined_exceptions gh-pages master Nothing to show v2.0.1 v2.0.0 v1.1.0 v1.0.0 v1.0.0-rc1 Nothing to show New pull request Latest commit 7f4dd5d Jul 15, 2016 nlohmann added header for int64_t and uint64_t (fixes #282) Permalink Failed to load latest commit information. .github cleanup May 29, 2016 benchmarks improved performance for dump() Jun 3, 2015 cmake Create an install target for the project Apr 25, 2016 doc let the makefile choose the correct sed Jul 9, 2016 src added header for int64_t and uint64_t (fixes #282) Jul 15, 2016 test removed std::out output from test cases Jul 1, 2016 .gitignore minor doc changes Jun 19, 2016 .travis.yml updated README Jun 19, 2016 CMakeLists.txt Define CMake/CTest tests May 18, 2016 ChangeLog.md update of ChangeLog Jun 28, 2016 LICENSE.MIT it's 2016 already... Jan 13, 2016 Makefile fixed re2c warnings Jun 23, 2016 README.md fixed indentation Jul 4, 2016 appveyor.yml Define CMake/CTest tests May 18, 2016 README.md Design goals There are myriads of JSON libraries out there, and each may even have its reason to exist. Our class had these design goals: Intuitive syntax. In languages such as Python, JSON feels like a first class data type. We used all the operator magic of modern C++ to achieve the same feeling in your code. Check out the examples below and you know, what I mean. Trivial integration. Our whole code consists of a single header file json.hpp. That's it. No library, no subproject, no dependencies, no complex build system. The class is written in vanilla C++11. All in all, everything should require no adjustment of your compiler flags or project settings. Serious testing. Our class is heavily unit-tested and covers 100% of the code, including all exceptional behavior. Furthermore, we checked with Valgrind that there are no memory leaks. Other aspects were not so important to us: Memory efficiency. Each JSON object has an overhead of one pointer (the maximal size of a union) and one enumeration element (1 byte). The default generalization uses the following C++ data types: std::string for strings, int64_t, uint64_t or double for numbers, std::map for objects, std::vector for arrays, and bool for Booleans. However, you can template the generalized class basic_json to your needs. Speed. We currently implement the parser as naive recursive descent parser with hand coded string handling. It is fast enough, but a LALR-parser with a decent regular expression processor should be even faster (but would consist of more files which makes the integration harder). See the contribution guidelines for more information. Integration The single required source, file json.hpp is in the src directory or released here. All you need to do is add #include ""json.hpp""  // for convenience using json = nlohmann::json; to the files you want to use JSON objects. That's it. Do not forget to set the necessary switches to enable C++11 (e.g., -std=c++11 for GCC and Clang). 🍺 If you are using OS X and Homebrew, just type brew tap nlohmann/json and brew install nlohmann_json and you're set. If you want the bleeding edge rather than the latest release, use brew install nlohmann_json --HEAD. Examples Here are some examples to give you an idea how to use the class. Assume you want to create the JSON object {   ""pi"": 3.141,   ""happy"": true,   ""name"": ""Niels"",   ""nothing"": null,   ""answer"": {     ""everything"": 42   },   ""list"": [1, 0, 2],   ""object"": {     ""currency"": ""USD"",     ""value"": 42.99   } } With the JSON class, you could write: // create an empty structure (null) json j;  // add a number that is stored as double (note the implicit conversion of j to an object) j[""pi""] = 3.141;  // add a Boolean that is stored as bool j[""happy""] = true;  // add a string that is stored as std::string j[""name""] = ""Niels"";  // add another null object by passing nullptr j[""nothing""] = nullptr;  // add an object inside the object j[""answer""][""everything""] = 42;  // add an array that is stored as std::vector (using an initializer list) j[""list""] = { 1, 0, 2 };  // add another object (using an initializer list of pairs) j[""object""] = { {""currency"", ""USD""}, {""value"", 42.99} };  // instead, you could also write (which looks very similar to the JSON above) json j2 = {   {""pi"", 3.141},   {""happy"", true},   {""name"", ""Niels""},   {""nothing"", nullptr},   {""answer"", {     {""everything"", 42}   }},   {""list"", {1, 0, 2}},   {""object"", {     {""currency"", ""USD""},     {""value"", 42.99}   }} }; Note that in all these cases, you never need to ""tell"" the compiler which JSON value you want to use. If you want to be explicit or express some edge cases, the functions json::array and json::object will help: // a way to express the empty array [] json empty_array_explicit = json::array();  // ways to express the empty object {} json empty_object_implicit = json({}); json empty_object_explicit = json::object();  // a way to express an _array_ of key/value pairs [[""currency"", ""USD""], [""value"", 42.99]] json array_not_object = { json::array({""currency"", ""USD""}), json::array({""value"", 42.99}) }; Serialization / Deserialization You can create an object (deserialization) by appending _json to a string literal: // create object from string literal json j = ""{ \""happy\"": true, \""pi\"": 3.141 }""_json;  // or even nicer with a raw string literal auto j2 = R""(   {     ""happy"": true,     ""pi"": 3.141   } )""_json;  // or explicitly auto j3 = json::parse(""{ \""happy\"": true, \""pi\"": 3.141 }""); You can also get a string representation (serialize): // explicit conversion to string std::string s = j.dump();    // {\""happy\"":true,\""pi\"":3.141}  // serialization with pretty printing // pass in the amount of spaces to indent std::cout << j.dump(4) << std::endl; // { //     ""happy"": true, //     ""pi"": 3.141 // } You can also use streams to serialize and deserialize: // deserialize from standard input json j; std::cin >> j;  // serialize to standard output std::cout << j;  // the setw manipulator was overloaded to set the indentation for pretty printing std::cout << std::setw(4) << j << std::endl; These operators work for any subclasses of std::istream or std::ostream. Please note that setting the exception bit for failbit is inappropriate for this use case. It will result in program termination due to the noexcept specifier in use. STL-like access We designed the JSON class to behave just like an STL container. In fact, it satisfies the ReversibleContainer requirement. // create an array using push_back json j; j.push_back(""foo""); j.push_back(1); j.push_back(true);  // iterate the array for (json::iterator it = j.begin(); it != j.end(); ++it) {   std::cout << *it << '\n'; }  // range-based for for (auto& element : j) {   std::cout << element << '\n'; }  // getter/setter const std::string tmp = j[0]; j[1] = 42; bool foo = j.at(2);  // other stuff j.size();     // 3 entries j.empty();    // false j.type();     // json::value_t::array j.clear();    // the array is empty again  // convenience type checkers j.is_null(); j.is_boolean(); j.is_number(); j.is_object(); j.is_array(); j.is_string();  // comparison j == ""[\""foo\"", 1, true]""_json;  // true  // create an object json o; o[""foo""] = 23; o[""bar""] = false; o[""baz""] = 3.141;  // special iterator member functions for objects for (json::iterator it = o.begin(); it != o.end(); ++it) {   std::cout << it.key() << "" : "" << it.value() << ""\n""; }  // find an entry if (o.find(""foo"") != o.end()) {   // there is an entry with key ""foo"" }  // or simpler using count() int foo_present = o.count(""foo""); // 1 int fob_present = o.count(""fob""); // 0  // delete an entry o.erase(""foo""); Conversion from STL containers Any sequence container (std::array, std::vector, std::deque, std::forward_list, std::list) whose values can be used to construct JSON types (e.g., integers, floating point numbers, Booleans, string types, or again STL containers described in this section) can be used to create a JSON array. The same holds for similar associative containers (std::set, std::multiset, std::unordered_set, std::unordered_multiset), but in these cases the order of the elements of the array depends how the elements are ordered in the respective STL container. std::vector<int> c_vector {1, 2, 3, 4}; json j_vec(c_vector); // [1, 2, 3, 4]  std::deque<double> c_deque {1.2, 2.3, 3.4, 5.6}; json j_deque(c_deque); // [1.2, 2.3, 3.4, 5.6]  std::list<bool> c_list {true, true, false, true}; json j_list(c_list); // [true, true, false, true]  std::forward_list<int64_t> c_flist {12345678909876, 23456789098765, 34567890987654, 45678909876543}; json j_flist(c_flist); // [12345678909876, 23456789098765, 34567890987654, 45678909876543]  std::array<unsigned long, 4> c_array {{1, 2, 3, 4}}; json j_array(c_array); // [1, 2, 3, 4]  std::set<std::string> c_set {""one"", ""two"", ""three"", ""four"", ""one""}; json j_set(c_set); // only one entry for ""one"" is used // [""four"", ""one"", ""three"", ""two""]  std::unordered_set<std::string> c_uset {""one"", ""two"", ""three"", ""four"", ""one""}; json j_uset(c_uset); // only one entry for ""one"" is used // maybe [""two"", ""three"", ""four"", ""one""]  std::multiset<std::string> c_mset {""one"", ""two"", ""one"", ""four""}; json j_mset(c_mset); // only one entry for ""one"" is used // maybe [""one"", ""two"", ""four""]  std::unordered_multiset<std::string> c_umset {""one"", ""two"", ""one"", ""four""}; json j_umset(c_umset); // both entries for ""one"" are used // maybe [""one"", ""two"", ""one"", ""four""] Likewise, any associative key-value containers (std::map, std::multimap, std::unordered_map, std::unordered_multimap) whose keys can construct an std::string and whose values can be used to construct JSON types (see examples above) can be used to to create a JSON object. Note that in case of multimaps only one key is used in the JSON object and the value depends on the internal order of the STL container. std::map<std::string, int> c_map { {""one"", 1}, {""two"", 2}, {""three"", 3} }; json j_map(c_map); // {""one"": 1, ""three"": 3, ""two"": 2 }  std::unordered_map<const char*, double> c_umap { {""one"", 1.2}, {""two"", 2.3}, {""three"", 3.4} }; json j_umap(c_umap); // {""one"": 1.2, ""two"": 2.3, ""three"": 3.4}  std::multimap<std::string, bool> c_mmap { {""one"", true}, {""two"", true}, {""three"", false}, {""three"", true} }; json j_mmap(c_mmap); // only one entry for key ""three"" is used // maybe {""one"": true, ""two"": true, ""three"": true}  std::unordered_multimap<std::string, bool> c_ummap { {""one"", true}, {""two"", true}, {""three"", false}, {""three"", true} }; json j_ummap(c_ummap); // only one entry for key ""three"" is used // maybe {""one"": true, ""two"": true, ""three"": true} JSON Pointer and JSON Patch The library supports JSON Pointer (RFC 6901) as alternative means to address structured values. On top of this, JSON Patch (RFC 6902) allows to describe differences between two JSON values - effectively allowing patch and diff operations known from Unix. // a JSON value json j_original = R""({   ""baz"": [""one"", ""two"", ""three""],   ""foo"": ""bar"" })""_json;  // access members with a JSON pointer (RFC 6901) j_original[""/baz/1""_json_pointer]; // ""two""  // a JSON patch (RFC 6902) json j_patch = R""([   { ""op"": ""replace"", ""path"": ""/baz"", ""value"": ""boo"" },   { ""op"": ""add"", ""path"": ""/hello"", ""value"": [""world""] },   { ""op"": ""remove"", ""path"": ""/foo""} ])""_json;  // apply the patch json j_result = j_original.patch(j_patch); // { //    ""baz"": ""boo"", //    ""hello"": [""world""] // }  // calculate a JSON patch from two JSON values json::diff(j_result, j_original); // [ //   { ""op"":"" replace"", ""path"": ""/baz"", ""value"": [""one"", ""two"", ""three""] }, //   { ""op"": ""remove"",""path"": ""/hello"" }, //   { ""op"": ""add"", ""path"": ""/foo"", ""value"": ""bar"" } // ] Implicit conversions The type of the JSON object is determined automatically by the expression to store. Likewise, the stored value is implicitly converted. // strings std::string s1 = ""Hello, world!""; json js = s1; std::string s2 = js;  // Booleans bool b1 = true; json jb = b1; bool b2 = jb;  // numbers int i = 42; json jn = i; double f = jn;  // etc. You can also explicitly ask for the value: std::string vs = js.get<std::string>(); bool vb = jb.get<bool>(); int vi = jn.get<int>();  // etc. Supported compilers Though it's 2016 already, the support for C++11 is still a bit sparse. Currently, the following compilers are known to work: GCC 4.9 - 6.0 (and possibly later) Clang 3.4 - 3.9 (and possibly later) Microsoft Visual C++ 2015 / Build Tools 14.0.25123.0 (and possibly later) I would be happy to learn about other compilers/versions. Please note: GCC 4.8 does not work because of two bugs (55817 and 57824) in the C++11 support. Note there is a pull request to fix some of the issues. Android defaults to using very old compilers and C++ libraries. To fix this, add the following to your Application.mk. This will switch to the LLVM C++ library, the Clang compiler, and enable C++11 and other features disabled by default. APP_STL := c++_shared NDK_TOOLCHAIN_VERSION := clang3.6 APP_CPPFLAGS += -frtti -fexceptions  The code compiles successfully with Android NDK, Revision 9 - 11 (and possibly later) and CrystaX's Android NDK version 10. For GCC running on MinGW or Android SDK, the error 'to_string' is not a member of 'std' (or similarly, for strtod) may occur. Note this is not an issue with the code, but rather with the compiler itself. On Android, see above to build with a newer environment. For MinGW, please refer to this site and this discussion for information on how to fix this bug. For Android NDK using APP_STL := gnustl_static, please refer to this discussion. The following compilers are currently used in continuous integration at Travis and AppVeyor: Compiler Operating System Version String GCC 4.9.3 Ubuntu 14.04.4 LTS g++-4.9 (Ubuntu 4.9.3-8ubuntu2~14.04) 4.9.3 GCC 5.3.0 Ubuntu 14.04.4 LTS g++-5 (Ubuntu 5.3.0-3ubuntu1~14.04) 5.3.0 20151204 GCC 6.1.1 Ubuntu 14.04.4 LTS g++-6 (Ubuntu 6.1.1-3ubuntu11~14.04.1) 6.1.1 20160511 Clang 3.8.0 Ubuntu 14.04.4 LTS clang version 3.8.0 (tags/RELEASE_380/final) Clang Xcode 6.1 Darwin Kernel Version 13.4.0 (OSX 10.9.5) Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM 3.5svn) Clang Xcode 6.2 Darwin Kernel Version 13.4.0 (OSX 10.9.5) Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn) Clang Xcode 6.3 Darwin Kernel Version 14.3.0 (OSX 10.10.3) Apple LLVM version 6.1.0 (clang-602.0.49) (based on LLVM 3.6.0svn) Clang Xcode 6.4 Darwin Kernel Version 14.3.0 (OSX 10.10.3) Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn) Clang Xcode 7.1 Darwin Kernel Version 14.5.0 (OSX 10.10.5) Apple LLVM version 7.0.0 (clang-700.1.76) Clang Xcode 7.2 Darwin Kernel Version 15.0.0 (OSX 10.10.5) Apple LLVM version 7.0.2 (clang-700.1.81) Clang Xcode 7.3 Darwin Kernel Version 15.0.0 (OSX 10.10.5) Apple LLVM version 7.3.0 (clang-703.0.29) Clang Xcode 8.0 Darwin Kernel Version 15.5.0 (OSX 10.11.5) Apple LLVM version 8.0.0 (clang-800.0.24.1) Visual Studio 14 2015 Windows Server 2012 R2 (x64) Microsoft (R) Build Engine version 14.0.25123.0 License The class is licensed under the MIT License: Copyright © 2013-2016 Niels Lohmann Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Thanks I deeply appreciate the help of the following people. Teemperor implemented CMake support and lcov integration, realized escape and Unicode handling in the string parser, and fixed the JSON serialization. elliotgoodrich fixed an issue with double deletion in the iterator classes. kirkshoop made the iterators of the class composable to other libraries. wancw fixed a bug that hindered the class to compile with Clang. Tomas Åblad found a bug in the iterator implementation. Joshua C. Randall fixed a bug in the floating-point serialization. Aaron Burghardt implemented code to parse streams incrementally. Furthermore, he greatly improved the parser class by allowing the definition of a filter function to discard undesired elements while parsing. Daniel Kopeček fixed a bug in the compilation with GCC 5.0. Florian Weber fixed a bug in and improved the performance of the comparison operators. Eric Cornelius pointed out a bug in the handling with NaN and infinity values. He also improved the performance of the string escaping. 易思龙 implemented a conversion from anonymous enums. kepkin patiently pushed forward the support for Microsoft Visual studio. gregmarr simplified the implementation of reverse iterators and helped with numerous hints and improvements. Caio Luppi fixed a bug in the Unicode handling. dariomt fixed some typos in the examples. Daniel Frey cleaned up some pointers and implemented exception-safe memory allocation. Colin Hirsch took care of a small namespace issue. Huu Nguyen correct a variable name in the documentation. Silverweed overloaded parse() to accept an rvalue reference. dariomt fixed a subtlety in MSVC type support and implemented the get_ref() function to get a reference to stored values. ZahlGraf added a workaround that allows compilation using Android NDK. whackashoe replaced a function that was marked as unsafe by Visual Studio. 406345 fixed two small warnings. Glen Fernandes noted a potential portability problem in the has_mapped_type function. Corbin Hughes fixed some typos in the contribution guidelines. twelsby fixed the array subscript operator, an issue that failed the MSVC build, and floating-point parsing/dumping. He further added support for unsigned integer numbers and implemented better roundtrip support for parsed numbers. Volker Diels-Grabsch fixed a link in the README file. msm- added support for american fuzzy lop. Annihil fixed an example in the README file. Themercee noted a wrong URL in the README file. Lv Zheng fixed a namespace issue with int64_t and uint64_t. abc100m analyzed the issues with GCC 4.8 and proposed a partial solution. zewt added useful notes to the README file about Android. Róbert Márki added a fix to use move iterators and improved the integration via CMake. Chris Kitching cleaned up the CMake files. Tom Needham fixed a subtle bug with MSVC 2015 which was also proposed by Michael K.. Mário Feroldi fixed a small typo. duncanwerner found a really embarrassing performance regression in the 2.0.0 release. Damien fixed one of the last conversion warnings. Thanks a lot for helping out! Notes The code contains numerous debug assertions which can be switched off by defining the preprocessor macro NDEBUG, see the documentation of assert. As the exact type of a number is not defined in the JSON specification, this library tries to choose the best fitting C++ number type automatically. As a result, the type double may be used to store numbers which may yield floating-point exceptions in certain rare situations if floating-point exceptions have been unmasked in the calling code. These exceptions are not caused by the library and need to be fixed in the calling code, such as by re-masking the exceptions prior to calling library functions. Execute unit tests To compile and run the tests, you need to execute $ make $ ./json_unit ""*""  =============================================================================== All tests passed (5568718 assertions in 32 test cases) For more information, have a look at the file .travis.yml. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nlohmann/json"	"JSON for Modern C++. [MIT]"	"true"
"JSON"	"JSON++"	"https://github.com/hjiang/jsonxx"	"A JSON parser in C++. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"238"	"35"	"76"	"GitHub - hjiang/jsonxx: A JSON parser in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 238 Fork 76 hjiang/jsonxx Code Issues 17 Pull requests 5 Wiki Pulse Graphs A JSON parser in C++ 141 commits 2 branches 0 releases 12 contributors C++ 99.7% Makefile 0.3% C++ Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags legacy master Nothing to show Nothing to show New pull request Latest commit 55e2515 Dec 10, 2015 hjiang Add pointer to the legacy branch. Permalink Failed to load latest commit information. .gitignore Add build status to README. Dec 10, 2015 .travis.yml Use container for Travis CI. Dec 10, 2015 LICENSE add MIT license text Jan 9, 2010 Makefile Fix parsing when an attr is an empty object. See #1 Aug 4, 2011 README.md Add pointer to the legacy branch. Dec 10, 2015 jsonxx.cc Fix Unicode Character parsing Nov 6, 2014 jsonxx.h Explicitly include cstddef for libc++ systems Jan 30, 2015 jsonxx_test.cc Fix a null conversion warning. Dec 10, 2015 README.md JSON++ Introduction JSON++ is a light-weight JSON parser, writer and reader written in C++. JSON++ can also convert JSON documents into lossless XML documents. Contributors http://github.com/hjiang http://github.com/elanthis http://github.com/r-lyeh If you've made substantial contribution, please add your link here. Why another JSON parser? Perhaps because web service clients are usually written in dynamic languages these days, none of the existing C++ JSON parsers fitted my needs very well, so I wrote one that I used in another project. My goals for JSON++ were: Efficient in both memory and speed. No third party dependencies. JSON++ only depends on the standard C++ library. Cross platform. Robust. Small and convenient API. Most of the time, you only need to call one function and two function templates. Easy to integrate. JSON++ only has one source file and one header file. Just compile the source file and link with your program. Able to construct documents dynamically. JSON writer: write documents in JSON format. Other contributors have sinced added more functionalities: XML writer: convert documents to JSONx format. See http://goo.gl/I3cxs for details. XML writer: convert documents to JXML format. See https://github.com/r-lyeh/JXML for details. XML writer: convert documents to JXMLex format. See https://github.com/r-lyeh/JXMLex for details. XML writer: convert documents to tagged XML format. See https://github.com/hjiang/jsonxx/issues/12 for details. Compiler version You need a modern C++ compiler. For older compilers, please try legacy branch. Configuration Strict/permissive parsing JSONxx can parse JSON documents both in strict or permissive mode. When jsonxx::Settings::Parser is set to Strict, JSONxx parser will accept: Fully conformant JSON documents only. When jsonxx::Settings::Parser is set to Permissive, JSONxx parser will accept: Fully conformant JSON documents Ending commas in arrays and objects: { ""array"": [0,1,2,], } Single quoted strings: ['hello', ""world""] C++ style comments: { ""width"": 320, ""height"": 240 } //Picture details Default value is Permissive. When jsonxx::Settings::UnquotedKeys is set to Enabled, JSONxx parser will accept: Unquoted keys: {name: ""world""} Default value is Disabled. Assertions JSONxx uses internally JSONXX_ASSERT(...) macro that works both in debug and release mode. Set jsonxx::Settings::Assertions value to Disabled to disable assertions. Default value is Enabled. Usage The following snippets are from one of the unit tests. They are quite self-descriptive. using namespace std; using namespace jsonxx;  string teststr(         ""{""         ""  \""foo\"" : 1,""         ""  \""bar\"" : false,""         ""  \""person\"" : {\""name\"" : \""GWB\"", \""age\"" : 60,},""         ""  \""data\"": [\""abcd\"", 42],""         ""}"" );  // Parse string or stream Object o; assert(o.parse(teststr));  // Validation. Checking for JSON types and values as well assert(1 == o.get<Number>(""foo"")); assert(o.has<Boolean>(""bar"")); assert(o.has<Object>(""person"")); assert(o.get<Object>(""person"").has<Number>(""age"")); assert(!o.get<Object>(""person"").has<Boolean>(""old"")); assert(o.get<Object>(""person"").get<Boolean>(""old"", false)); assert(o.has<Array>(""data"")); assert(o.get<Array>(""data"").get<Number>(1) == 42); assert(o.get<Array>(""data"").get<String>(0) == ""abcd""); assert(o.get<Array>(""data"").get<String>(2, ""hello"") == ""hello""); assert(!o.has<Number>(""data"")); cout << o.json() << endl;                     // JSON output cout << o.xml(JSONx) << endl;                 // JSON to XML conversion (JSONx subtype) cout << o.xml(JXML) << endl;                  // JSON to XML conversion (JXML subtype) cout << o.xml(JXMLex) << endl;                // JSON to XML conversion (JXMLex subtype) // Generate JSON document dynamically using namespace std; using namespace jsonxx; Array a; a << 123; a << ""hello world""; a << 3.1415; a << 99.95f; a << 'h'; a << Object(""key"", ""value""); Object o; o << ""key1"" << ""value""; o << ""key2"" << 123; o << ""key3"" << a; cout << o.json() << endl; To do Custom JSON comments (C style /**/) when permissive parsing is enabled. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hjiang/jsonxx"	"A JSON parser in C++. [MIT]"	"true"
"JSON"	"JsonCpp"	"https://github.com/open-source-parsers/jsoncpp"	"A C++ library for interacting with JSON. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1365"	"171"	"704"	"GitHub - open-source-parsers/jsoncpp: A C++ library for interacting with JSON. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 171 Star 1,365 Fork 704 open-source-parsers/jsoncpp Code Issues 43 Pull requests 14 Wiki Pulse Graphs A C++ library for interacting with JSON. 864 commits 11 branches 38 releases 74 contributors C++ 75.0% Python 21.2% CMake 2.7% Other 1.1% C++ Python CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.y.z accept_all_arithmetic_types cma-master cmake-adjustments master moveSemantics private-0.y.z private-null revert-280-pkg-config-fix template thing Nothing to show svn-release-0.6.0-rc2 svn-release-0.6.0-rc1 svn-release-0.5.0 svn-import 1.7.4 1.7.3 1.7.2 1.7.1 1.7.0 1.6.5 1.6.2 1.6.1 1.6.0 1.5.4 1.4.4 1.4.3 1.4.2 1.4.1 1.4.0 1.3.0 1.2.0 1.1.0 1.0.0 0.10.6 0.10.5 0.10.4 0.10.2 0.10.2-p1 0.10.1 0.10.0 0.9.4 0.8.4 0.8.3 0.8.2 0.8.1 0.8.0 0.7.1 0.7.0 Nothing to show New pull request Latest commit 48d2a69 Jul 9, 2016 cdunn2001 1.7.4 <- 1.7.3 Permalink Failed to load latest commit information. devtools normalized some windows VS stuff Aug 9, 2015 doc fix example in docs Mar 5, 2015 include 1.7.4 <- 1.7.3 Jul 9, 2016 makefiles Normalize line endings Aug 9, 2015 pkg-config Fix compilation errors for downstream projects caused by incorrect pk… Jul 8, 2016 scons-tools Add copyright information to .py files Apr 9, 2015 src Use a Myers Singleton for null Jun 26, 2016 test Add copyright information to .py files Apr 10, 2015 .clang-format Enabled PointerBindsToType in clang-format options. Sep 15, 2014 .gitattributes add .gitattributes Aug 9, 2015 .gitignore .gitignore for eclipse Mar 19, 2016 .travis.yml gcc-4.9, clang (3.0) Jul 12, 2015 AUTHORS Stripped carriage return and added eol-style native prop. Jun 14, 2007 CMakeLists.txt 1.7.4 <- 1.7.3 Jul 9, 2016 LICENSE updated license with clearer information Apr 27, 2010 NEWS.txt README.md Jan 24, 2015 README.md Merge pull request #276 from bmyerz/master May 21, 2015 SConstruct README.md Jan 24, 2015 amalgamate.py Exclude allocator.h from amalgamated header Apr 22, 2016 appveyor.yml fix appveyor 32-bit windows build Jul 11, 2015 dev.makefile run valgrind in Travis CI Apr 27, 2015 doxybuild.py fix doxybuild.py for Windows Jun 18, 2015 makerelease.py Add copyright information to .py files Apr 10, 2015 travis.sh -DJSONCPP_USE_SECURE_MEMORY=1 for cmake Mar 19, 2016 version 1.7.4 <- 1.7.3 Jul 9, 2016 version.in generate both version.h and version from CMakelists.txt Mar 5, 2015 README.md Introduction JSON is a lightweight data-interchange format. It can represent numbers, strings, ordered sequences of values, and collections of name/value pairs. JsonCpp is a C++ library that allows manipulating JSON values, including serialization and deserialization to and from strings. It can also preserve existing comment in unserialization/serialization steps, making it a convenient format to store user input files. A note on backward-compatibility 1.y.z is built with C++11. 0.y.z can be used with older compilers. Major versions maintain binary-compatibility. Using JsonCpp in your project The recommended approach to integrating JsonCpp in your project is to include the amalgamated source (a single .cpp file and two .h files) in your project, and compile and build as you would any other source file. This ensures consistency of compilation flags and ABI compatibility, issues which arise when building shared or static libraries. See the next section for instructions. The include/ should be added to your compiler include path. Jsoncpp headers should be included as follow: #include <json/json.h>  If JsonCpp was built as a dynamic library on Windows, then your project needs to define the macro JSON_DLL. Generating amalgamated source and header JsonCpp is provided with a script to generate a single header and a single source file to ease inclusion into an existing project. The amalgamated source can be generated at any time by running the following command from the top-directory (this requires Python 2.6): python amalgamate.py  It is possible to specify header name. See the -h option for detail. By default, the following files are generated: dist/jsoncpp.cpp: source file that needs to be added to your project. dist/json/json.h: corresponding header file for use in your project. It is equivalent to including json/json.h in non-amalgamated source. This header only depends on standard headers. dist/json/json-forwards.h: header that provides forward declaration of all JsonCpp types. The amalgamated sources are generated by concatenating JsonCpp source in the correct order and defining the macro JSON_IS_AMALGAMATION to prevent inclusion of other headers. Contributing to JsonCpp Building and testing with CMake CMake is a C++ Makefiles/Solution generator. It is usually available on most Linux system as package. On Ubuntu: sudo apt-get install cmake  Note that Python is also required to run the JSON reader/writer tests. If missing, the build will skip running those tests. When running CMake, a few parameters are required: a build directory where the makefiles/solution are generated. It is also used to store objects, libraries and executables files. the generator to use: makefiles or Visual Studio solution? What version or Visual Studio, 32 or 64 bits solution? Steps for generating solution/makefiles using cmake-gui: Make ""source code"" point to the source directory. Make ""where to build the binary"" point to the directory to use for the build. Click on the ""Grouped"" check box. Review JsonCpp build options (tick BUILD_SHARED_LIBS to build as a dynamic library). Click the configure button at the bottom, then the generate button. The generated solution/makefiles can be found in the binary directory. Alternatively, from the command-line on Unix in the source directory: mkdir -p build/debug cd build/debug cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G ""Unix Makefiles"" ../.. make  Running cmake -h will display the list of available generators (passed using the -G option). By default CMake hides compilation commands. This can be modified by specifying -DCMAKE_VERBOSE_MAKEFILE=true when generating makefiles. Building and testing with SCons Note: The SCons-based build system is deprecated. Please use CMake; see the section above. JsonCpp can use Scons as a build system. Note that SCons requires Python to be installed. Invoke SCons as follows: scons platform=$PLATFORM [TARGET]  where $PLATFORM may be one of: suncc: Sun C++ (Solaris) vacpp: Visual Age C++ (AIX) mingw msvc6: Microsoft Visual Studio 6 service pack 5-6 msvc70: Microsoft Visual Studio 2002 msvc71: Microsoft Visual Studio 2003 msvc80: Microsoft Visual Studio 2005 msvc90: Microsoft Visual Studio 2008 linux-gcc: Gnu C++ (linux, also reported to work for Mac OS X) If you are building with Microsoft Visual Studio 2008, you need to set up the environment by running vcvars32.bat (e.g. MSVC 2008 command prompt) before running SCons. Running the tests manually You need to run tests manually only if you are troubleshooting an issue. In the instructions below, replace path/to/jsontest with the path of the jsontest executable that was compiled on your platform. cd test # This will run the Reader/Writer tests python runjsontests.py path/to/jsontest  # This will run the Reader/Writer tests, using JSONChecker test suite # (http://www.json.org/JSON_checker/). # Notes: not all tests pass: JsonCpp is too lenient (for example, # it allows an integer to start with '0'). The goal is to improve # strict mode parsing to get all tests to pass. python runjsontests.py --with-json-checker path/to/jsontest  # This will run the unit tests (mostly Value) python rununittests.py path/to/test_lib_json  # You can run the tests using valgrind: python rununittests.py --valgrind path/to/test_lib_json  Running the tests using scons Note that tests can be run using SCons using the check target: scons platform=$PLATFORM check  Building the documentation Run the Python script doxybuild.py from the top directory: python doxybuild.py --doxygen=$(which doxygen) --open --with-dot  See doxybuild.py --help for options. Adding a reader/writer test To add a test, you need to create two files in test/data: a TESTNAME.json file, that contains the input document in JSON format. a TESTNAME.expected file, that contains a flatened representation of the input document. The TESTNAME.expected file format is as follows: each line represents a JSON element of the element tree represented by the input document. each line has two parts: the path to access the element separated from the element value by =. Array and object values are always empty (i.e. represented by either [] or {}). element path: . represents the root element, and is used to separate object members. [N] is used to specify the value of an array element at index N. See the examples test_complex_01.json and test_complex_01.expected to better understand element paths. Understanding reader/writer test output When a test is run, output files are generated beside the input test files. Below is a short description of the content of each file: test_complex_01.json: input JSON document. test_complex_01.expected: flattened JSON element tree used to check if parsing was corrected. test_complex_01.actual: flattened JSON element tree produced by jsontest from reading test_complex_01.json. test_complex_01.rewrite: JSON document written by jsontest using the Json::Value parsed from test_complex_01.json and serialized using Json::StyledWritter. test_complex_01.actual-rewrite: flattened JSON element tree produced by jsontest from reading test_complex_01.rewrite. test_complex_01.process-output: jsontest output, typically useful for understanding parsing errors. License See the LICENSE file for details. In summary, JsonCpp is licensed under the MIT license, or public domain if desired and recognized in your jurisdiction. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/open-source-parsers/jsoncpp"	"A C++ library for interacting with JSON. [MIT]"	"true"
"JSON"	"json-parser"	"https://github.com/udp/json-parser"	"Very low footprint JSON parser written in portable ANSI C. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"639"	"45"	"149"	"GitHub - udp/json-parser: Very low footprint JSON parser written in portable ANSI C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 45 Star 639 Fork 149 udp/json-parser Code Issues 2 Pull requests 7 Pulse Graphs Very low footprint JSON parser written in portable ANSI C 129 commits 2 branches 2 releases 15 contributors C 93.2% Python 6.8% C Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master source-tracking Nothing to show v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 7053321 Dec 1, 2015 udp Merge pull request #50 from hannesgredler/master … make test.py compliant to python3, add .gitignore Permalink Failed to load latest commit information. bindings/python Implement optional support for line and block comments Jan 25, 2014 examples add instructions how to compile example test_json for dynamic linking Sep 26, 2015 tests make test.py compliant to python3, add .gitignore Sep 26, 2015 .gitignore make test_json compile without warnings on 64-Bit platforms Sep 26, 2015 .travis.yml Add .travis.yml Jun 29, 2012 AUTHORS Update AUTHORS (closes #46) Jun 30, 2014 LICENSE Add LICENSE Jul 31, 2013 Makefile.in improve pkgconfig module (close #37) Jun 12, 2014 README.md Update README.md Aug 14, 2014 configure Change version to 1.1.0 Jun 12, 2014 configure.ac improve pkgconfig module (close #37) Jun 12, 2014 json-parser.pc.in improve pkgconfig module (close #37) Jun 12, 2014 json.c Move json_object_entry out of json_value and turn it into a typedef t… Aug 16, 2014 json.h Move json_object_entry out of json_value and turn it into a typedef t… Aug 16, 2014 README.md Very low footprint JSON parser written in portable ANSI C. BSD licensed with no dependencies (i.e. just drop the C file into your project) Never recurses or allocates more memory than it needs Very simple API with operator sugar for C++ Want to serialize? Check out json-builder! Installing There is now a makefile which will produce a libjsonparser static and dynamic library. However, this is not required to build json-parser, and the source files (json.c and json.h) should be happy in any build system you already have in place. API json_value * json_parse (const json_char * json,                          size_t length);  json_value * json_parse_ex (json_settings * settings,                             const json_char * json,                             size_t length,                             char * error);  void json_value_free (json_value *);  The type field of json_value is one of: json_object (see u.object.length, u.object.values[x].name, u.object.values[x].value) json_array (see u.array.length, u.array.values) json_integer (see u.integer) json_double (see u.dbl) json_string (see u.string.ptr, u.string.length) json_boolean (see u.boolean) json_null Compile-Time Options -DJSON_TRACK_SOURCE  Stores the source location (line and column number) inside each json_value. This is useful for application-level error reporting. Runtime Options settings |= json_enable_comments;  Enables C-style // line and /* block */ comments. size_t value_extra  The amount of space (if any) to allocate at the end of each json_value, in order to give the application space to add metadata. void * (* mem_alloc) (size_t, int zero, void * user_data); void (* mem_free) (void *, void * user_data);  Custom allocator routines. If NULL, the default malloc and free will be used. The user_data pointer will be forwarded from json_settings to allow application context to be passed. Changes in version 1.1.0 UTF-8 byte order marks are now skipped if present Allows cross-compilation by honoring --host if given (@wkz) Maximum size for error buffer is now exposed in header (@LB--) GCC warning for static after const fixed (@batrick) Optional support for C-style line and block comments added (@Jin-W-FS) name_length field added to object values It is now possible to retrieve the source line/column number of a parsed json_value when JSON_TRACK_SOURCE is enabled The application may now extend json_value using the value_extra setting Un-ambiguate pow call in the case of C++ overloaded pow (@fcartegnie) Fix null pointer de-reference when a non-existing array is closed and no root value is present Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/udp/json-parser"	"Very low footprint JSON parser written in portable ANSI C. [BSD]"	"true"
"JSON"	"json11"	"https://github.com/dropbox/json11"	"A tiny JSON library for C++11. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1026"	"95"	"198"	"GitHub - dropbox/json11: A tiny JSON library for C++11. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 95 Star 1,026 Fork 198 dropbox/json11 Code Issues 5 Pull requests 5 Pulse Graphs A tiny JSON library for C++11. 62 commits 1 branch 0 releases 13 contributors C++ 98.1% CMake 1.5% Makefile 0.4% C++ CMake Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 913269c Jun 20, 2016 artwyman committed on GitHub Merge pull request #64 from shrikant-dropbox/master … MSVS 2013 compatibility changes. Permalink Failed to load latest commit information. .gitignore Generate pkg-config File & Add Install Apr 16, 2016 CMakeLists.txt Don't assume in-tree builds when installing json11.pc May 5, 2016 LICENSE.txt Add LICENSE.txt; some minor cleanups Oct 1, 2013 Makefile Make test.cpp compilable with GCC. Jun 17, 2015 README.md Initial commit Sep 6, 2013 json11.cpp Merge pull request #55 from Dushistov/parse_not_full_json May 3, 2016 json11.hpp MSVS 2013 compatibility changes. Jun 20, 2016 json11.pc.in Generate pkg-config File & Add Install Apr 16, 2016 test.cpp Make the DR1467 canary test code optional May 18, 2016 README.md json11 json11 is a tiny JSON library for C++11, providing JSON parsing and serialization. The core object provided by the library is json11::Json. A Json object represents any JSON value: null, bool, number (int or double), string (std::string), array (std::vector), or object (std::map). Json objects act like values. They can be assigned, copied, moved, compared for equality or order, and so on. There are also helper methods Json::dump, to serialize a Json to a string, and Json::parse (static) to parse a std::string as a Json object. It's easy to make a JSON object with C++11's new initializer syntax: Json my_json = Json::object {     { ""key1"", ""value1"" },     { ""key2"", false },     { ""key3"", Json::array { 1, 2, 3 } }, }; std::string json_str = my_json.dump();  There are also implicit constructors that allow standard and user-defined types to be automatically converted to JSON. For example: class Point { public:     int x;     int y;     Point (int x, int y) : x(x), y(y) {}     Json to_json() const { return Json::array { x, y }; } };  std::vector<Point> points = { { 1, 2 }, { 10, 20 }, { 100, 200 } }; std::string points_json = Json(points).dump();  JSON values can have their values queried and inspected: Json json = Json::array { Json::object { { ""k"", ""v"" } } }; std::string str = json[0][""k""].string_value();  More documentation is still to come. For now, see json11.hpp. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dropbox/json11"	"A tiny JSON library for C++11. [MIT]"	"true"
"JSON"	"json-voorhees"	"https://github.com/tgockel/json-voorhees"	"JSON library for C++. Support for C++11. No dependencies, fast and dev-friendly. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"95"	"11"	"10"	"GitHub - tgockel/json-voorhees: A killer modern C++ library for interacting with JSON. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 95 Fork 10 tgockel/json-voorhees Code Issues 15 Pull requests 0 Pulse Graphs A killer modern C++ library for interacting with JSON. http://tgockel.github.io/json-voorhees/ 588 commits 2 branches 14 releases Fetching contributors C++ 96.6% CMake 2.1% Shell 1.3% C++ CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.1.1 v1.1.0 v1.0.0 v0.5.1 v0.5.0 v0.4.1 v0.4.0 v0.3.1 v0.3.0 v0.2.2 v0.2.1 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 12988f1 Jun 27, 2016 tgockel committed on GitHub Merge pull request #72 from jimon/patch-1 … Update README.md Permalink Failed to load latest commit information. config TravisCI: Use CMake instead of Make. Feb 17, 2015 debian Debian: Renames dirs and install to proper version. Mar 14, 2015 doc Conversions should be ""C++ DSL"" not ""C++ AST"" Feb 8, 2015 include/jsonv fix stack overflow Jun 17, 2016 installer Packaging: Adds RPM packager. Jan 26, 2016 msvc/vs2015 revert changes for optional.hpp , add those changes to jsonv-tests.vc… Jun 10, 2016 src re-factored to use optional from upstream branch Jun 9, 2016 .gitignore adding boost::optional support Jun 3, 2016 .travis.yml TravisCI: USE_BOOST_OPTIONAL on all GCC 4.8 builds. Jun 9, 2016 AUTHORS Adds sth to AUTHORS file. Mar 21, 2015 CMakeLists.txt CMake: Actually use CXX_STANDARD_DEFAULT. Jun 9, 2016 LICENSE Adds README and LICENSE files. Apr 30, 2014 README.md Update README.md Jun 22, 2016 VERSIONS.md Adds UTF-8 and Mac OSX support notes to VERSIONS. Mar 21, 2015 appveyor.yml AppVeyor: Remove the commented shit from config file. Jan 22, 2016 libjsonv.pc.in Added pkg-config and Debian packaging support Mar 11, 2015 README.md JSON Voorhees Yet another JSON library for C++. This one touts new C++11 features for developer-friendliness, an extremely slow-speed parser and no dependencies beyond a compliant compiler. If you love Doxygen, check out the documentation. Features include (but are not necessarily limited to): Simple A value should not feel terribly different from a C++ Standard Library container Write valid JSON with operator<< Simple JSON parsing with parse Reasonable error messages when parsing fails Full support for Unicode-filled JSON (encoded in UTF-8 in C++) Efficient Minimal overhead to store values (a value is 16 bytes on a 64-bit platform) No-throw move semantics wherever possible Easy Convert a value into a C++ type using extract<T> Encode a C++ type into a value using to_json Safe In the best case, illegal code should fail to compile An illegal action should throw an exception Almost all utility functions have a strong exception guarantee Stable Worry less about upgrading -- the API and ABI will not change out from under you Documented Consumable by human beings Answers questions you might actually ask Compiler support GCC (4.8+) Clang++ (3.3+) Compile and Install JSON Voorhees uses CMake as the automatic configuration software. On Linux or Mac OSX, if you have boost, cmake, g++ and make installed, simply: $> cmake . $> make $> sudo make install  If you want to customize your compilation or installation, see the options in CMakeLists.txt for easy-to-use configuration options. If you are on Windows, you can also use CMake if you want. However, it is probably easier to use the provided Visual Studio project files in msvc/vs2015 to get going. Hitting F5 should perform a NuGet restore, then compile and run all the unit tests. Arch Linux If you use Arch Linux, JSON Voorhees is easily installable via AUR. The ""latest stable"" is called json-voorhees, while there is a ""close to tip"" package called json-voorhees-git. With Arch, installation is as easy as yaourt json-voorhees! Future Future planned features can be found on the issue tracker. License Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Miscellaneous Compiler Support Supported GCC 4.9+ GCC 4.8 (with Boost.Regex) Clang 3.5+ Clang 3.3 - 3.4 (with Boost.Regex) Experimental MSVC 14.0 CTP5+ (Visual C++ 2015) While GCC 4.8 and Clang 3.3 are supported, you must compile them with USE_BOOST_REGEX=1. Early versions will happily compile regular expressions, but will fail at runtime with a regex_error, which is not very useful. However, you can use Boost.Regex as the regular expression engine for compilers with incomplete <regex> implementations. The downside of this is your application must link with the Boost libraries (-lboost_regex -lboost_system). $> cmake -DUSE_BOOST_REGEX=1 .. $> make $> sudo make install  Support for MSVC is deemed as experimental, as this library can only be compiled with MSVC 14.0 CTP5 at the moment. When Visual Studio 2015 is released as a non-beta product, JSON Voorhees will work with it as a fully-supported platform. Versioning Like every software system ever, JSON Voorhees describes versions in 3 part semantic versioning: ${major}.${minor}.${patch}. The version components changing have very specific meanings: major: There are no guarantees whatsoever across major releases. minor: For a given minor release, all code is forward-compatible source-code compliant. That means code written against version 1.1 can be recompiled against version 1.4 and continue to work. No guarantees are made for going backwards (version 1.4 might have added new functions). patch: Code is ABI-compatible across patch. Library A built against JSON Voorhees 1.2.4 should be able to pass a jsonv::value to library B built against JSON Voorhees 1.2.9. Any change to publicly-visible data structures or calling conventions will correspond to a bump in the minor version. The preceding statements are not true if the version is suffixed with -preN. These values are ""pre-release"" and are allowed to do whatever they feel like before a release. When developing code, follow this simple workflow to determine which version components need to change: Will this change force users to change their source code? If yes, bump the major version. Will this change force users to recompile to continue to work? If yes, bump the minor version. Will this change the behavior in any way? If yes, bump the patch version. Did I only change comments or rearrange code positioning (indentation, etc)? If yes, you do not need to update any part of the version. Did I miss something? Yes. Go back to #1 and try again. Character Encoding This library assumes you really love UTF-8. When parsing JSON, this library happily assumes all sequences of bytes from C++ are UTF-8 encoded strings; it assumes you also want UTF-8 encoded strings when converting from JSON in C++ land; and it assumes the non-ASCII contents of a source string should be treated as UTF-8. If you wish to use some other encoding format for your std::string, there is no convenient way to do that beyond conversion at every use site. There is a proposal to potentially address this. On output, the system takes the ""safe"" route of using the numeric encoding for dealing with non-ASCII std::strings. For example, the std::string for ""Travis Göckel"" (""Travis G\xc3\xb6ckel"") will be encoded in JSON as ""Travis G\u00f6ckel"", despite the fact that the character 'ö' is the most basic of the Unicode Basic Multilingual Planes. This is generally considered the most compatible option, as (hopefully) every transport mechanism can gracefully transmit ASCII character sequences without molestation. The drawback to this route is a needlessly lengthened resultant encoding if all components of the pipeline gracefully deal with UTF-8. There is an outstanding issue to address this shortcoming. F.A.Q. What makes JSON Voorhees different from the other C++ JSON libraries? JSON Voorhees was written for a C++ programmer who wants to be productive in this modern world. What does that mean? There are a ton of JSON libraries floating around touting how they are ""modern"" C++ and so on. But who really cares? JSON Voorhees puts the focus more on the resulting C++ than any ""modern"" feature set. This means the library does not skip on string encoding details like having full support for UTF-8. Are there ""modern"" features? Sure, but this library is not meant to be a gallery of them -- a good API should get out of your way and let you work. Another thing JSON Voorhees does not attempt to do is be a lightweight library; in fact, it wants to be the kitchen sink for anything you want to do in JSON in your C++ application. This means it is configurable for your needs. That said, the library does not depend on strange environment settings, so you can still drop the .cpp and .hpp files into your own project if you want. It also includes a powerful serialization framework for converting from JSON into C++ types and back again. There is an extensible Serialization Builder DSL to help you writing your application. The serialization framework was designed with the modern application in mind -- you will like it or your money back! Why are integer and decimal distinct types? The JSON specification only has a number type, whereas this library has kind::integer and kind::decimal. Behavior between the two types should be fairly consistent -- comparisons between two different kinds should behave as you would expect (assuming you expect things like value(1) == value(1.0) and value(2.0) < value(10)). If you wish for behavior more like JavaScript, feel free to only use as_decimal(). The reason integer and decimal are not a single type is because of how people tend to use JSON in C++. If you look at projects that consume JSON, they make a distinction between integer and decimal values. Even in specification land, a distinction between the numeric type is pretty normal (for example: Swagger). To ultimately answer the question: integer and decimal are distinct types for the convenience of users. Why are NaN and INFINITY serialized as a null? The JSON specification does not have support for non-finite floating-point numbers like NaN and infinity. This means the value defined with object({ { ""nan"", std::nan("""") }, { ""infinity"", INFINITY } }) to get serialized as { ""nan"": null, ""infinity"": null }. While this seems to constitute a loss of information, not doing this would lead to the encoder outputting invalid JSON text, which is completely unacceptable (unfortunately, this is a very common mistake in JSON libraries). If you want to check that there will be no information loss when encoding, use the utility funciton validate. Why not throw when encoding? One could imagine the encoder::encode throwing something like an encode_error instead of outputting null to the stream. However, that would make operator<< a potentially-throwing operation, which is extremely uncommon and would be very surprizing (imagine if you tried to log a value and it threw). Why not throw when constructing the value? Instead of waiting for encoding time to do anything about the problem, the library could attack the issue at the source and throw an exception if someone says value(INFINITY). This was not chosen as the behavior, because non-finite values are only an issue in the string representation, which is not a problem if the value is never encoded. You are free to use this JSON library without parse and encode, so it should not prevent an action simply because someone might use encode. Why are there so many corruption checks? If you are looking through the implementation, you will find a ton of places where there are default cases in switch statements that should be impossible to hit without memory corruption. This is because it is unclear what should happen when the library detects something like an invalid kind. The library could assert, but that seems overbearing when there is a reasonable option to fall back to. Alternatively, the library could throw in these cases, but that leads to innocuous-looking operations like x == y being able to throw, which is somewhat disconcerning. This is really helpful! Can I give you money? I would be Flattr-ed! With such a cool name, do you have an equally cool logo? Not really... Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tgockel/json-voorhees"	"JSON library for C++. Support for C++11. No dependencies, fast and dev-friendly. [Apache2]"	"true"
"JSON"	"jute"	"https://github.com/amir-s/jute"	"Very simple C++ JSON Parser. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"2"	"1"	"GitHub - amir-s/jute: Very simple C++ JSON Parser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 8 Fork 1 amir-s/jute Code Issues 0 Pull requests 0 Pulse Graphs Very simple C++ JSON Parser 4 commits 1 branch 0 releases Fetching contributors C++ 100.0% C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 55a490b Aug 3, 2013 amir-s added .size() to array type Permalink Failed to load latest commit information. README.md first commit Mar 24, 2013 data.json added deserialization for as_string() Aug 3, 2013 jute.cpp added .size() to array type Aug 3, 2013 jute.h added .size() to array type Aug 3, 2013 main.cpp added parse_file Aug 3, 2013 README.md Jute :: Very simple JSON parser for c++ data.json: {     ""examples"": [         {             ""tag_name"": ""a"",             ""attr"": [{""key"": ""href"", ""value"": ""http://amir.saboury.net""}, {""key"": ""target"", ""value"": ""_blank""}]         },         {             ""this_is"": [""array"", ""of"", ""strings""],             ""number_array"": [1, 2, 4, 8, 16],             ""pie"": 3.14,             ""boolean"": true,             ""bug"": null,             ""mixed"": [1, 2, {""test1"": -1.2345, ""test2"": false}, null, 0.4, [""nested"", [""array"", true]], ""end of story!""]         },         {             ""done"": true         }     ] }  example main.cpp file: #include <iostream> #include <vector> #include <map> #include <string> #include <sstream> #include <fstream> #include <cstring> #include ""jute.h"" using namespace std;  int main () {     ifstream in(""data.json"");     string str = """";     string tmp;     while (getline(in, tmp)) str += tmp;     jute::jValue v = jute::parser::parse(str);     cout << v.to_string() << endl;     cout << "" ------ "" << endl;     cout << v[""examples""][0][""attr""][0][""value""].as_string() << endl;     if (v[""examples""][1][""mixed""][5][1][1].as_bool()) {         cout << v[""examples""][1][""pie""].as_double() << endl;         cout << v[""examples""][2].to_string() << endl;     }     // You can get type of a jValue by calling its get_type() function     // It returns a jType which can be one of these:      //    {JSTRING, JOBJECT, JARRAY, JBOOLEAN, JNUMBER, JNULL, JUNKNOWN}     //     //    if (v[""examples""][1][""mixed""][5][1][1].get_type() == jute::JBOOLEAN) ...     return 0; }  Note This version is not providing error checking. All functions assume the input string is in valid format of JSON. Also number format checking is poor. Improvments are welcome. Read the source code, it is just about 300 LOC. :) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/amir-s/jute"	"Very simple C++ JSON Parser. [PublicDomain]"	"true"
"JSON"	"libjson"	"https://github.com/vincenthz/libjson"	"A JSON parser and printer library in C. easy to integrate with any model. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"150"	"36"	"58"	"GitHub - vincenthz/libjson: a JSON parser and printer library in C. easy to integrate with any model. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 150 Fork 58 vincenthz/libjson Code Issues 3 Pull requests 1 Wiki Pulse Graphs a JSON parser and printer library in C. easy to integrate with any model. http://projects.snarc.org/libjson/ 81 commits 1 branch 5 releases Fetching contributors C 96.0% Makefile 3.3% Shell 0.7% C Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.8 v0.7 v0.6 v0.5 v0.4 Nothing to show New pull request Latest commit bd0cad8 Apr 19, 2016 vincenthz Merge pull request #21 from dat/patch-1 … Add link to the actual RFC 4627 in README. Permalink Failed to load latest commit information. debian remove old comment lines in debian/rules Apr 10, 2010 tests add failing test cases with basic values on root. Feb 1, 2013 .gitignore add .gitignore May 28, 2015 Makefile compile on osx Dec 21, 2014 README.md Add link to the actual RFC 4627 in README. Sep 16, 2015 documentation.md further fixes for documentatoin May 28, 2015 json.c FIX: as the global variable character_escape is now const, Oct 29, 2013 json.h New data type JSON_BSTRING for binary strings. Jun 23, 2013 jsonlint.c Remove redundant check Nov 14, 2014 libjson.pc.in [pkg-config] Fix the rendering of the .pc file Sep 3, 2010 README.md libjson - simple and efficient json parser and printer in C Introduction libjson is a simple library without any dependancies to parse and pretty print the JSON format (RFC 4627). The JSON format is a concise and structured data format. Features interruptible parser: append data to the state how you want it. No object model integrated Small codebase: handcoded parser and efficient factorisation make the code smalls and perfect for embedding. Fast: use efficient code and small parsing tables for maximum efficiency. Full JSON support. UTF8 validation of the input. No number conversion: user convert data the way they want. Secure: optional limits on nesting level, and on data size. Optional comments: in YAML/python style and C style. Optional user defined allocation functions. libjson parser is an interruptible handcoded state parse. the parser takes character or string as input. Since it's interruptible, it's up to the user to feed the stream to the parser, which permits complete flexibility as to whether the data is coming from a pipe, a network socket, a file on disk, a serial line, or crafted by the user. The parser doesn't create an object tree for you, but each time it comes up with an element in this data, it just callback to the user with the type found and for some type, the data associated with it. It can be compared to the SAX way of XML, hence it's called SAJ (Simple API for JSon). The parser doesn't convert number to any native C format, but instead callback with a string that is a valid JSon number. JSon number can be of any size, so that's up to user to decide whetever or not, the number can map to native C type int32_t, int64_t, or a complex integer type. As well the user has a choice to refuse the integer at the callback stage if the length is not appropriate. The parser optionally allows YAML and/or C comments to be ignored if the config structure is set accordingly, otherwise a JSON_ERROR_COMMENT_NOT_ALLOWED is returned. Embedding & Build system The primary use case of this pieces of code is providing JSON capability to your program or library, without adding an extra build dependency. You can add it to your project directly, and integrate it without any fuss. The \""build system\"" available with the library is just a way to test that everything in the library conforms to specifications and features. It's not necessarily intended as a way to build portable dynamic library (.so or .dll). It should works in simple case of building on Linux and BSDs though. For others use (eg. windows, OS X, obscure unixes), it is much simpler to integrate the library in your program or library directly. Simple build fixes to build on more platforms will be accepted though. Contributing Open a pull request with your new feature, simple code fix, or documentation fixes. Please conform to coding style, and to the spirit of the library: policy is not imposed by the library. The Parser API The parser API is really simple, totaling only 5 API calls: json_parser_init json_parser_char json_parser_string json_parser_is_done json_parser_free json_parser_init initializes a new parser context from a parser config and takes a callback + userdata. This callback function is used everything the parser need to communicate a type and value to the client side of the library. json_parser_char take one character and inject it in the parser. on parsing success it will return a 0 value, but on parsing error it returns a parsing error that represents the type of the error encounters. see JSON_ERROR_* for the full set of return values. json_parser_string is similar to json_parser_char except that it takes a string and a length. it also returns the number of character processed, which is useful when an parser error happened in the stream to pinpoint where. json_parser_is_done permits to test whetever or not the parser is in a terminated state. it involves not beeing into any structure. json_parser_free is the opposite of init, it just free the allocated structure. The Printer API the printer API is simple too: json_printer_init json_printer_free json_printer_pretty json_printer_raw json_printer_init initialise a printing context and takes a callback + userdata that will be called for every character that the printer wants to output. the caller can have the printer callback redirect to anything it wants. json_printer_free is the opposite of init json_printer_raw takes a json type and an optional data and length value depending on the type. it's up to the caller to verify that the order of type are JSON-compliant, otherwise the generated document won't be able to be parsed again. json_printer_pretty works like json_printer_raw but is targetted for human reading by appending newlines and spaces Jsonlint utility program jsonlint utility provided with the library to verify, or reformat json stream. also useful as example on how to use the library. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vincenthz/libjson"	"A JSON parser and printer library in C. easy to integrate with any model. [LGPL]"	"true"
"JSON"	"libjson"	"http://sourceforge.net/projects/libjson/"	"Lightweight JSON library. [?]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"libjson download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse libjson libjson Brought to you by: ninja9578 Summary Files Reviews Support Wiki Mailing Lists Tickets ▾ Bugs Patches Feature Requests Discussion ★ 4.9 Stars (64) 248 Downloads (This Week) Last Update: 2013-06-12 Download libjson_7.6.1.zip Browse All Files Description A JSON reader and writer which is super-effiecient and usually runs circles around other JSON libraries. It's highly customizable to optimize for your particular project, and very lightweight. For Windows, OSX, or Linux. Works in any language. libjson Web Site Categories Features Lazy or aggressive JSON Parsing 100% JSON compliant Language independent C interface C++ interface Test Suite and Example Projects C and Bash style comment support Automated install via make cplusplus.com - style documentation Streaming ability Security to prevent various forms of Denial of Service KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 4.9 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 61 0 1 1 1 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 3 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 3 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ jlettvin 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 MacOS required some corrections and changes. Line 2 of GNU_C.h fixed misspelling of _GUN_ to _GNU_. From within _internal/Sources directory: ln -s ../Dependencies. make; sudo make install Expect warnings: clang: warning: optimization flag '-fexpensive-optimizations' is not supported clang: warning: argument unused during compilation: '-fast' clang: warning: argument unused during compilation: '-fexpensive-optimizations' g++ -o $@ $< -ljson It all compiles, links, and installs. I have not yet tested it extensively, thus the lack of optional rating. Posted 08/17/2015 andrewalamb 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Works as advertised, easy to use. Posted 05/01/2015 jongampark 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Be careful when you are up to choose this libjson. 1. If you need to handle Unicode ( why not. You have to for handling Twitter & Facebook response. ), make sure that your host app uses GNU C++ standard not strict ANSI C++ standard. if using strict ANSI C++ standard, Unicode support in this library should be turned off. Then it can't handle Unicode escape sequence like \uXXXX. At least it should return \uXXXX if it can't handle the Unicode. As some people pointed out, wouldn't it be better to conver it to UTF-8? Unicode escape sequence is not UTF-8. If Unicode option is off, it will return chopped string at \u. (returns only up to \. eg. ""This is \uAC00"" yields ""This \"". 2. Documentation is not clear if it's SOX style or DOM parser style. It turned out that it handles the both, which is good. More accurately speaking, you can achieve SOX-like on by using its iterator. 3. Its build option is also expected to be specified in a header file, JSONOptions.h, which can introduce some odd situation when using this library in your host project. Posted 06/11/2014 elbonds 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 I had to make a change to the make file because of a ""No such file or directory"". After the change, it worked like a charm. The change is in the install_headers: banner section. cp -rv ./$(srcdir)/Dependencies/ $(include_path)/$(libname_hdr)/$(srcdir) was changed to cp -rv ./$(srcdir)/../Dependencies/ $(include_path)/$(libname_hdr)/$(srcdir) Posted 10/14/2013 danieljohnson2 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Thanks for Libjson, it's good! Posted 06/06/2013 Read more reviews Additional Project Details Registered 2010-04-01 Recommended Projects CAJUN - C++ API for JSON cJSON json-cpp C++ JSON parser (Now in GitHub) Deals Top Searches json parser json parser c++ json c++ json c++ portable convert json to csv json convert json lib json reader json to csv Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"Lightweight JSON library. [?]"	"true"
"JSON"	"LIBUCL"	"https://github.com/vstakhov/libucl"	"Universal configuration library parser [?]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"663"	"39"	"55"	"GitHub - vstakhov/libucl: Universal configuration library parser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 663 Fork 55 vstakhov/libucl Code Issues 35 Pull requests 3 Pulse Graphs Universal configuration library parser 815 commits 1 branch 14 releases 15 contributors C 87.9% M4 5.1% C++ 2.2% CMake 1.3% Python 1.0% Makefile 0.9% Other 1.6% C M4 C++ CMake Python Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.8.0 0.7.3 0.7.2 0.7.1 0.6.1 0.5.2 0.5.1 0.4.0 0.3.1 0.2.6 0.2.3 0.2.2 0.2.1 0.2.0 Nothing to show New pull request Latest commit 3354f7f Jun 25, 2016 vstakhov committed on GitHub Merge pull request #142 from denisvm/python3 … python: add support to Python 3 Permalink Failed to load latest commit information. doc Fix Makefile whitespaces. Oct 22, 2015 examples Add a simple C++ example. Apr 16, 2015 haskell Haskell example Jul 7, 2015 include Merge pull request #132 from allanjude/add_file_full Jun 25, 2016 klib Fix kv_concat May 18, 2015 lua Add more consistent API methods Feb 16, 2016 m4 Add coverage support Feb 8, 2016 python python: add support for Python 2.6 tests Jun 25, 2016 src Merge pull request #132 from allanjude/add_file_full Jun 25, 2016 tests Add tests for comments Feb 26, 2016 uthash Move to mum_hash from xxhash May 31, 2016 utils Add more consistent API methods Feb 16, 2016 .gitignore python: add build artefacts to gitignore Apr 7, 2015 .travis.yml Disable trusty: OOM on tests Feb 11, 2016 CMakeLists.txt Switch to mum hash broke your builds! Jun 17, 2016 COPYING Add license. Aug 2, 2014 ChangeLog.md Release 0.8.0 Mar 1, 2016 Makefile.am Exclude unrelevant files from lcov scan Feb 9, 2016 Makefile.unix Fix build with plain makefile Jun 24, 2016 Makefile.w32 Switch to mum hash broke your builds! Jun 17, 2016 README.md Add coveralls badge Feb 8, 2016 autogen.sh Migrate to autotools. Mar 17, 2014 configure.ac Add coverage support Feb 8, 2016 libucl.pc.in Link lua API to build. Jul 21, 2014 stamp-h.in Rework autotools chain. Mar 18, 2014 README.md LIBUCL Table of Contents generated with DocToc Introduction Basic structure Improvements to the json notation General syntax sugar Automatic arrays creation Named keys hierarchy Convenient numbers and booleans General improvements Commments Macros support Variables support Multiline strings Emitter Validation Performance Conclusion Introduction This document describes the main features and principles of the configuration language called UCL - universal configuration language. If you are looking for the libucl API documentation you can find it at this page. Basic structure UCL is heavily infused by nginx configuration as the example of a convenient configuration system. However, UCL is fully compatible with JSON format and is able to parse json files. For example, you can write the same configuration in the following ways: in nginx like: param = value; section {     param = value;     param1 = value1;     flag = true;     number = 10k;     time = 0.2s;     string = ""something"";     subsection {         host = {             host = ""hostname"";              port = 900;         }         host = {             host = ""hostname"";             port = 901;         }     } } or in JSON: {     ""param"": ""value"",     ""param1"": ""value1"",     ""flag"": true,     ""subsection"": {         ""host"": [         {             ""host"": ""hostname"",             ""port"": 900         },         {             ""host"": ""hostname"",             ""port"": 901         }         ]     } } Improvements to the json notation. There are various things that make ucl configuration more convenient for editing than strict json: General syntax sugar Braces are not necessary to enclose a top object: it is automatically treated as an object: ""key"": ""value"" is equal to: {""key"": ""value""} There is no requirement of quotes for strings and keys, moreover, : may be replaced = or even be skipped for objects: key = value; section {     key = value; } is equal to: {     ""key"": ""value"",     ""section"": {         ""key"": ""value""     } } No commas mess: you can safely place a comma or semicolon for the last element in an array or an object: {     ""key1"": ""value"",     ""key2"": ""value"", } Automatic arrays creation Non-unique keys in an object are allowed and are automatically converted to the arrays internally: {     ""key"": ""value1"",     ""key"": ""value2"" } is converted to: {     ""key"": [""value1"", ""value2""] } Named keys hierarchy UCL accepts named keys and organize them into objects hierarchy internally. Here is an example of this process: section ""blah"" {     key = value; } section foo {     key = value; } is converted to the following object: section {     blah {         key = value;     }     foo {         key = value;     } } Plain definitions may be more complex and contain more than a single level of nested objects: section ""blah"" ""foo"" {     key = value; } is presented as: section {     blah {         foo {             key = value;         }     } } Convenient numbers and booleans Numbers can have suffixes to specify standard multipliers: [kKmMgG] - standard 10 base multipliers (so 1k is translated to 1000) [kKmMgG]b - 2 power multipliers (so 1kb is translated to 1024) [s|min|d|w|y] - time multipliers, all time values are translated to float number of seconds, for example 10min is translated to 600.0 and 10ms is translated to 0.01 Hexadecimal integers can be used by 0x prefix, for example key = 0xff. However, floating point values can use decimal base only. Booleans can be specified as true or yes or on and false or no or off. It is still possible to treat numbers and booleans as strings by enclosing them in double quotes. General improvements Commments UCL supports different style of comments: single line: # multiline: /* ... */ Multiline comments may be nested: # Sample single line comment /*   some comment  /* nested comment */  end of comment */ Macros support UCL supports external macros both multiline and single line ones: .macro ""sometext""; .macro {     Some long text     .... }; Moreover, each macro can accept an optional list of arguments in braces. These arguments themselves are the UCL object that is parsed and passed to a macro as options: .macro(param=value) ""something""; .macro(param={key=value}) ""something""; .macro(.include ""params.conf"") ""something""; .macro(#this is multiline macro param = [value1, value2]) ""something""; .macro(key=""()"") ""something""; UCL also provide a convenient include macro to load content from another files to the current UCL object. This macro accepts either path to file: .include ""/full/path.conf"" .include ""./relative/path.conf"" .include ""${CURDIR}/path.conf"" or URL (if ucl is built with url support provided by either libcurl or libfetch): .include ""http://example.com/file.conf""  .include macro supports a set of options: try (default: false) - if this option is true than UCL treats errors on loading of this file as non-fatal. For example, such a file can be absent but it won't stop the parsing of the top-level document. sign (default: false) - if this option is true UCL loads and checks the signature for a file from path named <FILEPATH>.sig. Trusted public keys should be provided for UCL API after parser is created but before any configurations are parsed. glob (default: false) - if this option is true UCL treats the filename as GLOB pattern and load all files that matches the specified pattern (normally the format of patterns is defined in glob manual page for your operating system). This option is meaningless for URL includes. url (default: true) - allow URL includes. path (default: empty) - A UCL_ARRAY of directories to search for the include file. Search ends after the first patch, unless glob is true, then all matches are included. prefix (default false) - Put included contents inside an object, instead of loading them into the root. If no key is provided, one is automatically generated based on each files basename() key (default: ) - Key to load contents of include into. If the key already exists, it must be the correct type target (default: object) - Specify if the prefix key should be an object or an array. priority (default: 0) - specify priority for the include (see below). duplicate (default: 'append') - specify policy of duplicates resolving: append - default strategy, if we have new object of higher priority then it replaces old one, if we have new object with less priority it is ignored completely, and if we have two duplicate objects with the same priority then we have a multi-value key (implicit array) merge - if we have object or array, then new keys are merged inside, if we have a plain object then an implicit array is formed (regardeless of priorities) error - create error on duplicate keys and stop parsing rewrite - always rewrite an old value with new one (ignoring priorities) Priorities are used by UCL parser to manage the policy of objects rewriting during including other files as following: If we have two objects with the same priority then we form an implicit array If a new object has bigger priority then we overwrite an old one If a new object has lower priority then we ignore it By default, the priority of top-level object is set to zero (lowest priority). Currently, you can define up to 16 priorities (from 0 to 15). Includes with bigger priorities will rewrite keys from the objects with lower priorities as specified by the policy. Variables support UCL supports variables in input. Variables are registered by a user of the UCL parser and can be presented in the following forms: ${VARIABLE} $VARIABLE UCL currently does not support nested variables. To escape variables one could use double dollar signs: $${VARIABLE} is converted to ${VARIABLE} $$VARIABLE is converted to $VARIABLE However, if no valid variables are found in a string, no expansion will be performed (and $$ thus remains unchanged). This may be a subject to change in future libucl releases. Multiline strings UCL can handle multiline strings as well as single line ones. It uses shell/perl like notation for such objects: key = <<EOD some text splitted to lines EOD  In this example key will be interpreted as the following string: some text\nsplitted to\nlines. Here are some rules for this syntax: Multiline terminator must start just after << symbols and it must consist of capital letters only (e.g. <<eof or << EOF won't work); Terminator must end with a single newline character (and no spaces are allowed between terminator and newline character); To finish multiline string you need to include a terminator string just after newline and followed by a newline (no spaces or other characters are allowed as well); The initial and the final newlines are not inserted to the resulting string, but you can still specify newlines at the begin and at the end of a value, for example: key <<EOD  some text  EOD  Emitter Each UCL object can be serialized to one of the three supported formats: JSON - canonic json notation (with spaces indented structure); Compacted JSON - compact json notation (without spaces or newlines); Configuration - nginx like notation; YAML - yaml inlined notation. Validation UCL allows validation of objects. It uses the same schema that is used for json: json schema v4. UCL supports the full set of json schema with the exception of remote references. This feature is unlikely useful for configuration objects. Of course, a schema definition can be in UCL format instead of JSON that simplifies schemas writing. Moreover, since UCL supports multiple values for keys in an object it is possible to specify generic integer constraints maxValues and minValues to define the limits of values count in a single key. UCL currently is not absolutely strict about validation schemas themselves, therefore UCL users should supply valid schemas (as it is defined in json-schema draft v4) to ensure that the input objects are validated properly. Performance Are UCL parser and emitter fast enough? Well, there are some numbers. I got a 19Mb file that consist of ~700 thousands lines of json (obtained via http://www.json-generator.com/). Then I checked jansson library that performs json parsing and emitting and compared it with UCL. Here are results: jansson: parsed json in 1.3899 seconds jansson: emitted object in 0.2609 seconds  ucl: parsed input in 0.6649 seconds ucl: emitted config in 0.2423 seconds ucl: emitted json in 0.2329 seconds ucl: emitted compact json in 0.1811 seconds ucl: emitted yaml in 0.2489 seconds  So far, UCL seems to be significantly faster than jansson on parsing and slightly faster on emitting. Moreover, UCL compiled with optimizations (-O3) performs significantly faster: ucl: parsed input in 0.3002 seconds ucl: emitted config in 0.1174 seconds ucl: emitted json in 0.1174 seconds ucl: emitted compact json in 0.0991 seconds ucl: emitted yaml in 0.1354 seconds  You can do your own benchmarks by running make check in libucl top directory. Conclusion UCL has clear design that should be very convenient for reading and writing. At the same time it is compatible with JSON language and therefore can be used as a simple JSON parser. Macroes logic provides an ability to extend configuration language (for example by including some lua code) and comments allows to disable or enable the parts of a configuration quickly. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vstakhov/libucl"	"Universal configuration library parser [?]"	"true"
"JSON"	"PicoJSON"	"https://github.com/kazuho/picojson"	"A header-file-only, JSON parser serializer in C++. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"439"	"42"	"107"	"GitHub - kazuho/picojson: a header-file-only, JSON parser serializer in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 439 Fork 107 kazuho/picojson Code Issues 12 Pull requests 7 Wiki Pulse Graphs a header-file-only, JSON parser serializer in C++ 188 commits 17 branches 6 releases 15 contributors C++ 89.9% C 8.7% Makefile 1.4% C++ C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags kazuho/experiments/int64-on-msvc kazuho/experiments/int64 kazuho/experiments/type-traits kazuho/expr/simple-api kazuho/issues/int64-msvc2008 kazuho/issues/29 kazuho/issues/32 kazuho/issues/36 kazuho/iter-cur-at-pos kazuho/safe-assignment-operator master rel/v1.1.0 rel/v1.1.1 rel/v1.2.0 rel/v1.2.1 rel/v1.3.0 sax Nothing to show v1.3.0 v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit cafb21b Jul 14, 2016 kazuho committed on GitHub Merge pull request #87 from gnaggnoyil/master … Add modification methods Permalink Failed to load latest commit information. examples add license template to the other files under example/ (#41 #42) Jun 25, 2014 picotest Merge commit 'f36a7211a04daca0349429a1db619c5f70bc390a' as 'picotest' Dec 16, 2014 .gitignore Updated .gitignore to ignore test-core* binaries. Dec 16, 2014 .gitmodules remove picotest as submodule Dec 16, 2014 .travis.yml test all branches using travis-ci Jun 12, 2014 Changes oops, version number in the changelog is wrong Feb 25, 2015 LICENSE add LICENSE as separate file, as well as updating the boilerplate to … Jun 5, 2014 Makefile fix treating ((int64_t) 0) as true May 23, 2015 README.mkdn prepare for next Feb 25, 2015 picojson.h add modification methods Jul 14, 2016 test.cc add modification methods Jul 14, 2016 README.mkdn PicoJSON - a C++ JSON parser / serializer Copyright © 2009-2010 Cybozu Labs, Inc. Copyright © 2011-2015 Kazuho Oku Licensed under 2-clause BSD license Version 1.3.1-dev Introduction PicoJSON is a tiny JSON parser / serializer for C++ with following properties: header-file only no external dependencies (only uses standard C++ libraries) STL-frendly (arrays are represented by using std::vector, objects are std::map) provides both pull interface and streaming (event-based) interface Reading JSON using the pull interface There are several ways to use the pull (DOM-like) interface of picojson. The easiest way is to use the two-argument parse function. std::string json = ""[ \""hello JSON\"" ]""; picojson::value v; std::string err = picojson::parse(v, json); if (! err.empty()) {   std:cerr << err << std::endl; }  Four-argument parse function accepts a pair of iterators, and returns the end position of the input. const char* json = ""{\""a\"":1}""; picojson::value v; std::string err; const char* json_end = picojson::parse(v, json, json + strlen(json), &err); if (! err.empty()) {   std::cerr << err << std::endl; }  std::istream_iterator input(std::cin); picojson::value v; std::string err; input = picojson::parse(v, input, std::istream_iterator(), &err); if (! err.empty()) {   std::cerr << err << std::endl; }  It is also possible to use the >> operator to parse the input, however this interface is not thread-safe. picosjon::value v; std::cin >> v; std::string err = picojson::get_last_error();  Accessing the values Values of a JSON object is represented as instances of picojson::value class. namespace picojson {    class value {     ...    public:      typedef std::vector<value> array;     typedef std::map<std::string, value> object;      value();                               // create a null object     explicit value(bool b);                // create a boolean object     explicit value(double n);              // create a number object     explicit value(const std::string& s);  // create a string object     explicit value(const array& a);        // create an array object     explicit value(const object& o);       // create an ""object""      bool is<picojson::null>() const;       // check if the object is ""null""      bool is<bool>() const;                 // check if the object is a boolean     const bool& get<bool>() const;         // const accessor (usable only if the object is a boolean)     bool& get<bool>();                     // non-const accessor (usable only if the object is a boolean)      bool is<double>() const;               // check if the object is a number     const double& get<double>() const;     // const accessor (usable only if the object is a number)     double& get<double>();                 // non-const accessor (usable only if the object is a number)      bool is<std::string>() const;          // check if the object is a string     const std::string& get<std::string>() const;                                            // const accessor (usable only if the object is a string)     std::string& get<std::string>();       // non-const accessor (usable only if the object is a string)      bool is<array>() const;                // check if the object is an array     const array& get<array>() const;       // const accessor (usable only if the object is an array)     array& get<array>();                   // non-const accessor (usable only if the object is an array)      bool is<object>() const;               // check if the object is an ""object""     const object& get<object>() const;     // const accessor (usable only if the object is an object)     object& get<object>();                 // non-const accessor (usable only if the object is an array)      bool evaluate_as_boolean() const;      // evaluates the object as a boolean      std::string serialize() const;         // returns the object in JSON representation     template void serialize(Iter os) const;                                            // serializes the object in JSON representation through an output iterator      std::string to_str() const;            // returns the object in string (for casual use)    };  }  The code below parses a JSON string and prints the contents of the object. picojson::value v;  // parse the input std::cin >> v; std::string err = picojson::get_last_error(); if (! err.empty()) {   std::cerr << err << std::endl;   exit(1); }  // check if the type of the value is ""object"" if (! v.is<picojson::object>()) {   std::cerr << ""JSON is not an object"" << std::endl;   exit(2); }  // obtain a const reference to the map, and print the contents const picojson::value::object& obj = v.get<picojson::object>(); for (picojson::value::object::const_iterator i = obj.begin();      i != obj.end();      ++i) {   std::cout << i->first << ': ' << i->second.to_str() << std::endl; }  Please note that the type check is mandatory; do not forget to check the type of the object by calling is<type>() before accessing the value by calling get<type>(). Reading JSON using the streaming (event-driven) interface Please refer to the implementation of picojson::default_parse_context and picojson::null_parse_context. There is also an example (examples/streaming.cc) . Serializing to JSON Instances of the picojson::value class can be serialized in three ways, to ostream, to std::string, or to an output iterator. picojson::value v; ... std::cout << v;  picojson::value v; ... std::string json = v.serialize();  picojson::value v; ... v.serialize(std::ostream_iterator(std::cout));  Experimental support for int64_t Experimental suport for int64_t becomes available if the code is compiled with preprocessor macro PICOJSON_USE_INT64. Turning on the feature will cause following changes to picojson: new constructor picojson::value(int64_t) is defined is<int64_t>() and get<int64_t>() become available numerics in JSON within the bounds of int64_t and not using . nor e/E are considered as int64 type the values are also avaliable as doubles as well (i.e. all values which are .is<int64_t>() == true are also .is<double>() == true) int64 values are converted to double once get<double>() is called Enabling the feature should not cause compatibility problem with code that do not use the feature. Further reading Examples can be found in the examples directory, and on the Wiki. Please add your favorite examples to the Wiki. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kazuho/picojson"	"A header-file-only, JSON parser serializer in C++. [BSD]"	"true"
"JSON"	"qt-json"	"https://github.com/gaudecker/qt-json"	"A simple class for parsing JSON data into a QVariant hierarchy and vice versa. [GPLv3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"162"	"27"	"59"	"GitHub - gaudecker/qt-json: A simple class for parsing JSON data into a QVariant hierarchy and vice versa. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 162 Fork 59 gaudecker/qt-json Code Issues 4 Pull requests 0 Pulse Graphs A simple class for parsing JSON data into a QVariant hierarchy and vice versa. 83 commits 1 branch 0 releases Fetching contributors C++ 97.6% QMake 2.4% C++ QMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 447113f Apr 18, 2016 gaudecker Merge pull request #39 from george-hopkins/reduce-spaces … Reduces spaces Permalink Failed to load latest commit information. example Add QtJson::Object class usage example (compile-only test) Mar 15, 2016 .gitignore Moved example program into its own directory. Jun 29, 2013 AUTHORS Update AUTHORS file Mar 15, 2016 LICENSE Changed license to GPLv3. Fixed non-uniform indentation and formattin… Jun 29, 2013 README.md Fix README Apr 17, 2016 json.cpp Reduces spaces Apr 17, 2016 json.h Add QtJson::Object class implementation Mar 15, 2016 qt-json.pri .pri added for ease of use within the project Sep 13, 2014 README.md The qt-json project is a simple collection of functions for parsing and serializing JSON data to and from QVariant hierarchies. NOTE: Qt5 introduced a native JSON object class. If you are targeting Qt5, you should use that instead. HOW TO USE Parsing JSON The parser is really easy to use. Let's say we have the following QString of JSON data: {   ""encoding"" : ""UTF-8"",   ""plug-ins"" : [     ""python"",     ""c++"",     ""ruby""   ],   ""indent"" : {     ""length"" : 3,     ""use_space"" : true   } } We would first call the parse-function: #include ""json.h""  bool ok; // json is a QString containing the JSON data QtJson::JsonObject result = QtJson::parse(json, ok).toMap();  if(!ok) {   qFatal(""An error occurred during parsing""); Assuming the parser completed without errors, we can then go through the hierarchy: qDebug() << ""encoding:"" << result[""encoding""].toString(); qDebug() << ""plugins:"";  foreach(QVariant plugin, result[""plug-ins""].toList()) {     qDebug() << ""  -"" << plugin.toString(); }  QtJson::JsonObject nested = result[""indent""].toMap(); qDebug() << ""length:"" << nested[""length""].toInt(); qDebug() << ""use_space:"" << nested[""use_space""].toBool(); The previous code would print out the following: encoding: ""UTF-8"" plugins:   - ""python""   - ""c++""   - ""ruby"" length: 3 use_space: true  Serializing JSON To write JSON data from Qt object is as simple as creating and assigning data to a QVariantMap/JsonObject: QtJson::JsonObject contributor; contributor[""name""] = ""Luis Gustavo""; contributor[""age""] = 22;  QByteArray data = QtJson::serialize(contributor); The byte array 'data' contains valid JSON data: {   ""name"": ""Luis Gustavo"",   ""age"": 22 } After creating the QVariantMap, you can create a QVariantList/JsonArray and append the QVariantMaps. QtJson::JsonObject friend1, friend2, friend3; friend1[""id""] = 1; friend1[""name""] = ""Mackenzie Hamphrey"";  friend2[""id""] = 2; friend2[""name""] = ""Melanie Molligan"";  friend3[""id""] = 3; friend3[""name""] = ""Sydney Calhoun"";  QtJson::JsonArray friends; friends.append(friend1); friends.append(friend2); friends.append(friend3);  QtJson::JsonObject obj; obj[""friends""] = friends; This way you create a nested structure: {     ""friends"": [         {             ""id"": 1,             ""name"": ""MackenzieHamphrey""         },         {             ""id"": 2,             ""name"": ""MelanieMolligan""         },         {             ""id"": 3,             ""name"": ""SydneyCalhoun""         }     ] } If you continue this process recursively, you nest more levels into the JSON structure. 3. CONTRIBUTING Send in a pull request and bug the maintainer until it gets merged and published. Make sure to add yourself to AUTHORS. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gaudecker/qt-json"	"A simple class for parsing JSON data into a QVariant hierarchy and vice versa. [GPLv3]"	"true"
"JSON"	"QJson"	"https://github.com/flavio/qjson"	"A qt-based library that maps JSON data to QVariant objects. [LGPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"135"	"26"	"93"	"GitHub - flavio/qjson: QJson is a qt-based library that maps JSON data to QVariant objects. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 135 Fork 93 flavio/qjson Code Issues 15 Pull requests 2 Pulse Graphs QJson is a qt-based library that maps JSON data to QVariant objects. http://qjson.sourceforge.net 514 commits 4 branches 10 releases 31 contributors C++ 92.4% CMake 3.9% Yacc 3.1% C 0.6% C++ CMake Yacc C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1_0_0 docker issue_25 master Nothing to show 0.8.1 0.8.0 0.7.1 0.7.0 0.6.3 0.6.2 0.6.1 0.6.0 0.5.1 0.5.0 Nothing to show New pull request Latest commit 5e3b9b8 May 31, 2016 flavio Merge pull request #90 from antkudr/issue_qstringbuilder_support … Issue qstringbuilder support Permalink Failed to load latest commit information. doc Release 0.8.1 Nov 27, 2012 include/QJson Added the include directory Aug 12, 2011 src json_parser.cc: create empty string by default ctor Apr 18, 2016 tests TestSerializer: fix build with QStringBuilder May 10, 2016 .gitignore Fixed bug with incomplete QBuffer opening procedure Oct 4, 2014 CMakeLists.txt Enable QStringBuilder for Qt vesrions >= 4.8 May 10, 2016 COPYING.lib Made other fixes to license headers Dec 26, 2010 ChangeLog Update changelog Jan 28, 2013 QJSONConfig.cmake.in Fix Targets.cmake file path for Qt5 build Nov 24, 2015 QJSONConfigVersion.cmake.in Fix the qjson vs QJSON mess introduced in 69676d4. Sep 27, 2011 QJson.pc.in Fix so that Requires: in the pc file reflect the qt version that QJson Aug 13, 2014 README.license Add README.license Nov 20, 2012 README.md Update README the minimum Qt version required, Update CMakeLists the … Mar 18, 2015 cmake_uninstall.cmake.in Move cmake_uninstall.cmake.in to the top-level directory. Aug 24, 2011 README.md QJson JSON (JavaScript Object Notation) is a lightweight data-interchange format. It can represents integer, real number, string, an ordered sequence of value, and a collection of name/value pairs. QJson is a qt-based library that maps JSON data to QVariant objects. JSON arrays will be mapped to QVariantList instances, while JSON's objects will be mapped to QVariantMap. Install QJson requires: Qt 4.5 or greater cmake 2.6 or greater Some possible cmake options: -DCMAKE_BUILD_TYPE=DEBUG: enables some debug output (other than making easier to debug the code) -DQJSON_BUILD_TESTS=yes or -DKDE4_BUILD_TESTS=yes: builds the unit tests -DCMAKE_INSTALL_PREFIX=${HOME}/testinstall: install qjson in a custom directory -DCMAKE_INCLUDE_PATH=${HOME}/testinstall/include: include a custom include directory -DCMAKE_LIBRARY_PATH=${HOME}/testinstall/lib: include a custom library directory -DLIB_DESTINATION=lib64: if you have a 64 bit system with separate libraries for 64 bit libraries -DQJSON_VERBOSE_DEBUG_OUTPUT:BOOL=ON: more debugging statements are generated by the parser. It's useful only if you are trying to fix the bison grammar. For Unix/Linux/Mac: mkdir build cd build cmake -DCMAKE_INSTALL_PREFIX=_preferred_path_ .. make make install /sbin/ldconfig #if necessary  License This library is licensed under the Lesser GNU General Public License version 2.1. See the COPYING.lib file for more information. Resources Website Mailing List Project Lead/Maintainer (2008-current): Flavio Castelli. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/flavio/qjson"	"A qt-based library that maps JSON data to QVariant objects. [LGPL2]"	"true"
"JSON"	"RapidJSON"	"https://github.com/miloyip/rapidjson"	"A fast JSON parser/generator for C++ with both SAX/DOM style API. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3142"	"373"	"904"	"GitHub - miloyip/rapidjson: A fast JSON parser/generator for C++ with both SAX/DOM style API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 373 Star 3,142 Fork 904 miloyip/rapidjson Code Issues 44 Pull requests 4 Wiki Pulse Graphs A fast JSON parser/generator for C++ with both SAX/DOM style API http://rapidjson.org/ 1,703 commits 22 branches 4 releases 56 contributors C++ 95.5% C 2.2% CMake 1.2% Other 1.1% C++ C CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cmake_CMP0054 coverage example_parsebyparts example gh-pages issue158_parsestdstring issue205 issue316_templatedaccessors issue325 issue341_float issue362 issue538_regexzeromin issue552_movingschemadocument issue583_regexcrash issue608_required master optimization pr/651 regex travis vcwarning zh-doc Nothing to show v1.0.2 v1.0.1 v1.0.0 v1.0-beta Nothing to show New pull request Latest commit 369de87 Jul 11, 2016 miloyip committed on GitHub Merge pull request #681 from niukuo/master … fix rapidjson::value::Get<std::string>() may returns wrong data Permalink Failed to load latest commit information. CMakeModules Change googletest search path for cmake Jun 10, 2016 bin Normalize line endings but not JSON files Mar 4, 2016 doc Fix #670 remote schema provider document Jun 29, 2016 docker/debian Add debian docker file for development Mar 2, 2016 example Disable parsebyparts example for clang Jun 13, 2016 include/rapidjson fix rapidjson::value::Get<std::string>() may returns wrong data Jul 11, 2016 test Fix buffer overrun using PutN (closes #672) Jun 30, 2016 thirdparty Update reference to gtest thirdparty module. Jun 8, 2016 .gitattributes Normalize line endings but not JSON files Mar 4, 2016 .gitignore gitignore: ignore Doxyfile.zh-cn Jun 15, 2016 .gitmodules Update reference to gtest thirdparty module. Jun 8, 2016 .travis.yml use included clang on travis Jun 10, 2016 CHANGELOG.md Update changelog Apr 21, 2016 CMakeLists.txt support building with ASAN and UBSAN on Clang and GCC Jun 13, 2016 RapidJSON.pc.in RapidJSON.pc.in: include dir not set Feb 24, 2015 RapidJSONConfig.cmake.in Add initial CMake support Nov 11, 2014 RapidJSONConfigVersion.cmake.in Add initial CMake support Nov 11, 2014 appveyor.yml Add CMAKE verbose for appveyor Mar 31, 2016 include_dirs.js include folder added May 9, 2016 library.json Fix include location Aug 3, 2015 license.txt Normalize line endings but not JSON files Mar 4, 2016 package.json 1.0.4 May 17, 2016 rapidjson.autopkg Usage comment Oct 29, 2015 readme.md Fix filterkeydom link Apr 26, 2016 readme.zh-cn.md Add filterkey and filterkeydom examples Apr 23, 2016 travis-doxygen.sh Temporarily remove git clone single-branch Dec 6, 2015 readme.md A fast JSON parser/generator for C++ with both SAX/DOM style API Tencent is pleased to support the open source community by making RapidJSON available. Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved. RapidJSON GitHub RapidJSON Documentation English 简体中文 GitBook with downloadable PDF/EPUB/MOBI, without API reference. Build status Linux Windows Coveralls Introduction RapidJSON is a JSON parser and generator for C++. It was inspired by RapidXml. RapidJSON is small but complete. It supports both SAX and DOM style API. The SAX parser is only a half thousand lines of code. RapidJSON is fast. Its performance can be comparable to strlen(). It also optionally supports SSE2/SSE4.2 for acceleration. RapidJSON is self-contained and header-only. It does not depend on external libraries such as BOOST. It even does not depend on STL. RapidJSON is memory-friendly. Each JSON value occupies exactly 16/20 bytes for most 32/64-bit machines (excluding text string). By default it uses a fast memory allocator, and the parser allocates memory compactly during parsing. RapidJSON is Unicode-friendly. It supports UTF-8, UTF-16, UTF-32 (LE & BE), and their detection, validation and transcoding internally. For example, you can read a UTF-8 file and let RapidJSON transcode the JSON strings into UTF-16 in the DOM. It also supports surrogates and ""\u0000"" (null character). More features can be read here. JSON(JavaScript Object Notation) is a light-weight data exchange format. RapidJSON should be in fully compliance with RFC7159/ECMA-404. More information about JSON can be obtained at Introducing JSON RFC7159: The JavaScript Object Notation (JSON) Data Interchange Format Standard ECMA-404: The JSON Data Interchange Format Compatibility RapidJSON is cross-platform. Some platform/compiler combinations which have been tested are shown as follows. Visual C++ 2008/2010/2013 on Windows (32/64-bit) GNU C++ 3.8.x on Cygwin Clang 3.4 on Mac OS X (32/64-bit) and iOS Clang 3.4 on Android NDK Users can build and run the unit tests on their platform/compiler. Installation RapidJSON is a header-only C++ library. Just copy the include/rapidjson folder to system or project's include path. RapidJSON uses following software as its dependencies: CMake as a general build tool (optional)Doxygen to build documentation (optional)googletest for unit and performance testing To generate user documentation and run tests please proceed with the steps below: Execute git submodule update --init to get the files of thirdparty submodules (google test). Create directory called build in rapidjson source directory. Change to build directory and run cmake .. command to configure your build. Windows users can do the same with cmake-gui application. On Windows, build the solution found in the build directory. On Linux, run make from the build directory. On successfull build you will find compiled test and example binaries in bin directory. The generated documentation will be available in doc/html directory of the build tree. To run tests after finished build please run make test or ctest from your build tree. You can get detailed output using ctest -V command. It is possible to install library system-wide by running make install command from the build tree with administrative privileges. This will install all files according to system preferences. Once RapidJSON is installed, it is possible to use it from other CMake projects by adding find_package(RapidJSON) line to your CMakeLists.txt. Usage at a glance This simple example parses a JSON string into a document (DOM), make a simple modification of the DOM, and finally stringify the DOM to a JSON string. // rapidjson/example/simpledom/simpledom.cpp` #include ""rapidjson/document.h"" #include ""rapidjson/writer.h"" #include ""rapidjson/stringbuffer.h"" #include <iostream>  using namespace rapidjson;  int main() {     // 1. Parse a JSON string into DOM.     const char* json = ""{\""project\"":\""rapidjson\"",\""stars\"":10}"";     Document d;     d.Parse(json);      // 2. Modify it by DOM.     Value& s = d[""stars""];     s.SetInt(s.GetInt() + 1);      // 3. Stringify the DOM     StringBuffer buffer;     Writer<StringBuffer> writer(buffer);     d.Accept(writer);      // Output {""project"":""rapidjson"",""stars"":11}     std::cout << buffer.GetString() << std::endl;     return 0; } Note that this example did not handle potential errors. The following diagram shows the process. More examples are available: DOM API tutorial: Basic usage of DOM API. SAX API simplereader: Dumps all SAX events while parsing a JSON by Reader. condense: A command line tool to rewrite a JSON, with all whitespaces removed. pretty: A command line tool to rewrite a JSON with indents and newlines by PrettyWriter. capitalize: A command line tool to capitalize strings in JSON. messagereader: Parse a JSON message with SAX API. serialize: Serialize a C++ object into JSON with SAX API. jsonx: Implements a JsonxWriter which stringify SAX events into JSONx (a kind of XML) format. The example is a command line tool which converts input JSON into JSONx format. Schema schemavalidator : A command line tool to validate a JSON with a JSON schema. Advanced prettyauto: A modified version of pretty to automatically handle JSON with any UTF encodings. parsebyparts: Implements an AsyncDocumentParser which can parse JSON in parts, using C++11 thread. filterkey: A command line tool to remove all values with user-specified key. filterkeydom: Same tool as above, but it demonstrates how to use a generator to populate a Document. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/miloyip/rapidjson"	"A fast JSON parser/generator for C++ with both SAX/DOM style API. [MIT]"	"true"
"JSON"	"ujson"	"https://bitbucket.org/awangk/ujson"	"µjson is a a small, C++11, UTF-8, JSON library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"awangk / ujson   — Bitbucket  Bitbucket Features Pricing owner/repository English English 日本語 Sign up Log in ujson Actions Clone Compare Fork Navigation Overview Source Commits Branches Pull requests Issues Downloads Settings HTTPS HTTPS SSH Need help cloning? Learn how to clone a repository. Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. no way ujson Overview Clone in SourceTree Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. HTTPS HTTPS SSH Last updated 2015-04-12 Language C++ Access level Read 1 Branch 0 Tags 2 Forks 16 Watchers µjson About µjson is a a small, C++11, UTF-8, JSON library. Its highlights are: Small library with very simple API Outputs nicely formatted JSON Fast UTF-8 conformant parser Liberal license Dependencies The library uses the double-conversion library from the V8 JavaScript engine for portable conversion between ASCII and floating point numbers. An amalgamation of v1.1.5 of this library is included in the source distribution. Unit tests are written using Catch. Catch is also included in the source distribution. The scanner is generated using re2c. The source distribution includes the generated file, so this tool is only needed if you intend to modify the scanner. Licenses µjson is licensed under the MIT license. See the LICENSE.md file in the source distribution. The dependencies all have liberal software licenses. See LICENSE-3RD-PARTY.md for the details. Installation The library, examples, and unit tests can be built using CMake. The CMake scripts will automatically download re2c. When using the library in another project, rather than using CMake, it may be easier to simply include the four source files, ujson.hpp ujson.cpp double-conversion.h double-conversion.cc,  directly in the project. Tutorial Consider representing books defined using this simple struct as JSON: struct book_t {     std::string title;     std::vector<std::string> authors;     int year; };  The first step is to write a small function for converting a book into a ujson::value: ujson::value to_json(book_t const &b) {     return ujson::object{ { ""title"", b.title },                           { ""authors"", b.authors },                           { ""year"", b.year } }; }  Using the above function an array of books can be converted to JSON as follows: book_t book1{ ""Elements of Programming"",               2009,               { ""Alexander A. Stepanov"", ""Paul McJones"" } }; book_t book2{ ""The C++ Programming Language, 4th Edition"",               2013,               { ""Bjarne Stroustrup"" } }; std::vector<book_t> book_list{ book1, book2 };  ujson::value value{ book_list }; std::string json = to_string(value); std::cout << json << std::endl;  The last line will print: [     {         ""authors"" : [             ""Alexander A. Stepanov"",             ""Paul McJones""         ],         ""title"" : ""Elements of Programming"",         ""year"" : 2009     },     {         ""authors"" : [             ""Bjarne Stroustrup""         ],         ""title"" : ""The C++ Programming Language, 4th Edition"",         ""year"" : 2013     } ]  Reconstructing the list of books is done by first parsing the JSON string into a ujson::value: ujson::value new_value = ujson::parse(json); assert(new_value == value);  Each element in this array is then converted to a book_t: std::vector<ujson::value> array = array_cast(std::move(new_value)); std::vector<book_t> new_book_list; new_book_list.reserve(array.size()); for (auto it = array.begin(); it != array.end(); ++it)     new_book_list.push_back(make_book(std::move(*it))); assert(new_book_list == book_list);  The helper function make_book is implemented as follows: book_t make_book(ujson::value v) {      if (!v.is_object())         throw std::invalid_argument(""object expected for make_book"");      book_t book;     std::vector<std::pair<std::string, ujson::value>> object =         object_cast(std::move(v));      auto it = find(object, ""title"");     if (it == object.end() || !it->second.is_string())         throw std::invalid_argument(""'title' with type string not found"");     book.title = string_cast(std::move(it->second));      it = find(object, ""authors"");     if (it == object.end() || !it->second.is_array())         throw std::invalid_argument(""'authors' with type array not found"");     std::vector<ujson::value> array = array_cast(std::move(it->second));     book.authors.reserve(array.size());     for (auto it = array.begin(); it != array.end(); ++it) {         if (!it->is_string())             throw std::invalid_argument(""'authors' must be array of strings"");         book.authors.push_back(string_cast(std::move(*it)));     }      it = find(object, ""year"");     if (it == object.end() || !it->second.is_number())         throw std::invalid_argument(""'year' with type number not found"");     book.year = int32_cast(it->second);      return book; }  Reference A JSON value must be null, a boolean, a number, a string, an array, or an object (see RFC7159). In µjson the class ujson::value is used to represent all of these six types. The actual type of a value can queried using ujson::value::type or using one of the convenience methods, such as ujson::value::is_null. Values always contain one of the six possible types (ujson::value does not have a special uninitialized state). The class ujson::value is a proper immutable value. Therefore, once a value has been created, it cannot be changed, though of course it can be assigned a new value. Values can be compared for equality and inequality. Casts are used to extract the embedded type again. For instance bool_cast is used to extract the bool from values with boolean types. If the value is cast to a wrong type a bad_cast exception is thrown. Null Default constructed values are null: ujson::value null_value; // null  A constant null value is defined in the ujson namespace. assert(ujson::null == null_value);  Values support stream i/o: std::cout << null_value << std::endl; // prints 'null'  Booleans Values can be initialized with and assigned bools: ujson::value boolean(true); assert(bool_cast(boolean) == true); std::cout << boolean << std::endl; // prints 'true' boolean = false; assert(bool_cast(boolean) == false); std::cout << boolean << std::endl; // prints 'false'  Numbers Inside ujson::values numbers are represented as 64-bit doubles: ujson::value number = M_PI; std::cout << number << std::endl; // prints '3.141592653589793'  The double value can be extracted using a double_cast: double d = double_cast(number); // d == M_PI  The double-conversion library is used instead of the platform specific C runtime library to ensure lossless and portable roundtripping of doubles from ASCII to binary. Beware that only finite numbers are valid in JSON. Infinities and NaNs are not allowed: number = std::numeric_limits<double>::infinity(); // throws bad_number  Numbers can also represent signed 32-bit integers: number = 1024; std::cout << number << std::endl; // prints '1024'  The integer value can be extracted using an int32_cast: std::int32_t i = int32_cast(number); // i == 1024  Unsigned 32-bit integers are also supported. Strings Strings are stored internally as UTF-8: ujson::value value = ""\xC2\xA9 ujson 2014""; // copyright symbol  If the string is not zero-terminated or contains embedded zeros, the length must be passed too: char title[]= { 0xC2, 0xB5, 'j', 's', 'o', 'n' }; // micro sign + json value = ujson::value(title, 6);  Strings passed to to µjson must be valid UTF-8: value = ""\xF5""; // invalid utf-8; throws bad_string  If the string is known to be valid UTF-8, the validation step can be skipped by passing no in the last argument of the constructor: value = ujson::value(""valid"", 5, ujson::validate_utf8::no);  Strings can also be constructed from std::strings: std::string string(""ujson""); value = string; // copy into value  Alternatively, if the original string is no longer needed, the std::string can be moved into the value and the copy avoided: value = std::move(string); // move into value  Strings can be accessed using the two string_cast methods. The first accepts l-values and returns a ujson::string_view object: auto view = string_cast(value); std::cout << view.c_str() << std::endl; // prints 'ujson'  The returned string view object provides read-only access to the contained string. The second string cast method accepts r-values and can be used to move a string out of a value: string = string_cast(std::move(value)); // move string out of value assert(value.is_null());  Moved from values are always null. See the ""Implementation Details"" section for more information on how µjson handles std::strings implemented using reference counting versus short string optimization. Arrays Arrays are represented using ujson::array, which is simply a typedef for std::vector<ujson::value>: auto array = ujson::array{ true, M_PI, ""a string"" }; ujson::value value(array);  Copying the array can be avoided by moving it into the value: value = std::move(array);  Read-only access to the contained array is possible using array_cast: ujson::array const &ref = array_cast(value);  The original array can be recovered by moving the array out of the value: array = array_cast(std::move(value));  As shown in the tutorial it is also possible to use a std::vector<T> of types T implicitly convertable to ujson::value or a vector of types that supply a to_json function. ujson::values are designed to be cheap to copy. Internally, strings, arrays, and objects, are stored using std::shared_ptr<>s, so copying only requires incrementing a reference count. However, this sharing has implications for when it is possible to move: ujson::value value1 = std::move(array); ujson::value value2 = value1; // value2 shares immutable array with value1 auto tmp1 = array_cast(std::move(value1)); // note: copy! auto tmp2 = array_cast(std::move(value2)); // move  In short, moves are only possible if the value has exclusive ownership of the resource. Recall that moved from values are null, so therefore the last move will succeed. Objects Objects are represented using ujson::object, which is simply a typedef for std::vector<std::pair<std::string, ujson::value>>: auto object =     ujson::object{ { ""a null"", ujson::null },                    { ""a bool"", true },                    { ""a number"", M_LN2 },                    { ""a string"", ""Hello, world!"" },                    { ""an array"", ujson::array{ 1, 2, 3 } } }; ujson::value value(object);  As usual, copies can be avoided by moving: value = std::move(object);  Read-only access to the contained object is possible using object_cast: ujson::object const &ref = object_cast(value);  The original object can be recovered by moving the object out of the value: object = object_cast(std::move(value));  For performance reasons objects are implemented using a simple std::vector rather than a std::map. However, objects can still be constructed using a std::map<std::string,T> of types T implicitly convertable to ujson::value or a map of types that supply a to_json function. When an ujson::object is copied or moved into an ujson::value the vector is sorted, so that lookups can be performed using a binary search: auto it = find(object, ""a number""); assert(it->second == M_LN2);  In addition to ujson::find, there is also a ujson::at function which behaves like std::map::at. Beware that names in objects must also be valid UTF-8: object.push_back({ ""invalid utf-8: \xFF"", ujson::null }); value = object; // throws bad_string  Reading JSON Call ujson::parse to parse a buffer with UTF-8 encoded JSON: auto value = ujson::parse(""[ 1.0, 2.0, 3.0 ]"");  If the buffer is not zero-terminated, which is the case with e.g. memory mapped files, the length must also be supplied: const char *mapped_buffer = ..; std::size_t mapped_length = ..; auto value = ujson::parse(mapped_buffer, mapped_length);  Exceptions are thrown on syntax errors: try {     auto value = ujson::parse(""[ 1.0, 2.0, 3.0 ""); // invalid syntax     ... } catch (std::exception const &e) {     std::cout << e.what() << std::endl; // prints 'Invalid syntax on line 1.' }  Apart from syntax errors, the parser will also throw if a number is too large to fit in a double, if a string contains invalid UTF-8, and if the buffer contains trailing junk. Writing JSON ujson::values can be converted to JSON using ujson::to_string: auto array = ujson::array{ true, 1.0, ""Sk\xC3\xA5l! \xF0\x9F\x8D\xBB"" }; auto object =     ujson::object{ { ""a null"", ujson::null },                    { ""a bool"", false },                    { ""a number"", 1.61803398875 },                    { ""a string"", ""R\xC3\xB8""""dgr\xC3\xB8""""d med fl\xC3\xB8""""de."" },                    { ""an array"", array } }; std::cout << to_string(object) << std::endl;  This produces: {     ""a bool"" : false,     ""a null"" : null,     ""a number"" : 1.61803398875,     ""a string"" : ""Rødgrød med fløde."",     ""an array"" : [         true,         1,         ""Skål! 🍻""     ] }  By default µjson indents by four spaces. It's possible change this and also control whether UTF-8 is allowed in the output: ujson::to_string_options compact_ascii; compact_ascii.indent_amount = 0; compact_ascii.encoding = ujson::character_encoding::ascii; std::cout << to_string(object, compact_ascii) << std::endl;  With ASCII output, all non-ASCII characters are escaped and with zero indentation all insignificant white space is elided: {""a bool"":true,""a null"":null,""a number"":1.61803398875,""a string"":""R\u00F8dgr\u00F8d med fl\u00F8de."",""an array"":[true,1,""Sk\u00E5l! \uD83C\uDF7B""]}  Implementation Details ujson::value is implemented using small object optimiziation. This avoids the need for expensive heap allocations for simple types, since the value instead is stored directly inside the object. type heap allocation null no boolean no number no string depends array yes object yes Arrays and objects do require heap allocations, since they are stored internally using a std::shared_ptr (usually just a single allocation is required, since most STL implementations allocate the object and control block together). While this does make construction more expensive, it has the advantage that copying values containing arrays or objects is cheap, since it only amounts to incrementing a reference count. Also, since the reference count used by std::shared_ptr is thread-safe and the pointed to value immutable, passing a ujson::value by value to another thread is free from race conditions: auto value = ujson::parse(...); auto future = std::async(std::launch::async, [value] {     /* do significant work */ });  Strings in the Standard Template Library are implemented using either short string optimization (SSO) or reference counting. Clang's libc++ and Visual Studio uses the former approach while GCC's libstdc++ uses the latter. Briefly, in an implementation using reference counting, a std::string stores a pointer to the string data and a reference count. Copy on write (COW) is used to ensure that a string gets it own unique copy of the string data if modified. In an implementation using SSO, the string object stores a pointer and a small buffer. Short strings are stored in the buffer, thus avoiding the heap allocation, whereas longer strings are stored on the heap. The size of the buffer for short strings is implementation defined. See the 'sso buffer size' column in the following table. platform arch ujson::value std::string sso buffer size clang 3.4 (Xcode 5.1.1) 32-bit 16 bytes 12 bytes 10 bytes clang 3.4 (Xcode 5.1.1) 64-bit 32 bytes 24 bytes 22 bytes gcc 4.8.3 (via brew) 32-bit 12 bytes 4 bytes N/A gcc 4.8.3 (via brew) 64-bit 24 bytes 8 bytes N/A vs2013 update 3 32 bit 24 bytes 28 bytes 15 bytes vs2013 update 3 64 bit 32 bytes 40 bytes 15 bytes vs2013 ctp1 32-bit 24 bytes 28 bytes 15 bytes vs2013 ctp1 64-bit 32 bytes 32 bytes 15 bytes With a COW std::string µjson simply stores the string object inside inside the ujson::value without doing any allocations. Copying is still inexpensive since copying COW strings is cheap. With a SSO std::string short strings are stored directly in the ujson::value object and therefore do not require any heap allocations. Long strings are stored using a std::shared_ptr, so they require a single allocation. Like arrays and objects, copying long strings is therefore cheap. In summary, copy constructing and copy assigning ujson::values is always an inexpensive operation, requiring at most bumping a reference count or copying a small buffer, but never any heap allocations. Unlimited private and public hosted repositories. Free for small teams! Sign up for free Close Recent activity 1 commit Pushed to awangk/ujson 0d6259e Build re2c from source on osx + unix. no way · 1 commit Pushed to awangk/ujson a05e2d7 Fix CMake 3.2.1 warning. no way · 1 commit Pushed to awangk/ujson 6756107 Set folder property. no way · 1 commit Pushed to awangk/ujson 9ef1041 Fix mistake in CMake script and add a few more tests no way · 3 commits Pushed to awangk/ujson e343be1 Make move construct/assign cannibalize RHS instead of clone + assign null. fae5de7 Make fuzz driver accept JSON filename as parameter. 5a454fd Fix bug in regex for parsing numbers. no way · 1 commit Pushed to awangk/ujson 892576d Fix an issue where invalid numbers would be parsed as zero. no way · 1 commit Pushed to awangk/ujson d52d47f Primal scream. no way · awangk/ujson Repository created no way · Blog Support Plans & pricing Documentation API Site status Version info Terms of service Privacy policy English Git 2.7.4.1.g5468f9e Mercurial 3.6.3 Django 1.7.11 Python 2.7.3 b7520e3d05e9 / b7520e3d05e9 @ app-107 JIRA Software Confluence Bamboo SourceTree HipChat Atlassian Help Online help Learn Git Keyboard shortcuts Latest features Bitbucket tutorials Site status Support"	"null"	"null"	"µjson is a a small, C++11, UTF-8, JSON library. [MIT]"	"true"
"JSON"	"YAJL"	"https://github.com/lloyd/yajl"	"A fast streaming JSON parsing library in C. [ISC]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1491"	"77"	"298"	"GitHub - lloyd/yajl: A fast streaming JSON parsing library in C. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 77 Star 1,491 Fork 298 lloyd/yajl Code Issues 52 Pull requests 67 Pulse Graphs A fast streaming JSON parsing library in C. http://lloyd.github.com/yajl 275 commits 9 branches 20 releases 23 contributors C 93.1% CMake 6.0% Shell 0.9% C CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 2.1.0 autotools gh-pages lxrperf_multiple_tables lxrperf_ptrs lxrperf_two_bytes master yajl_reset Nothing to show 2.1.0 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.0.12 1.0.11 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.4.0 Nothing to show New pull request Latest commit 5e3a785 Sep 24, 2015 lloyd Merge pull request #157 from setempler/bugfix-configure … Fixed configure script to accept ""-h"" and ""--prefix"". Permalink Failed to load latest commit information. example update copyright and email Feb 15, 2014 perf update copyright and email Feb 15, 2014 reformatter add generator reset, and ability to verify and reformat streams Mar 14, 2014 src clarifications in yajl_gen_reset()'s documentation Mar 18, 2014 test Allow file argument Feb 15, 2014 verify add generator reset, and ability to verify and reformat streams Mar 14, 2014 .gitignore Ignore .DS_Store files on OSX May 9, 2011 BUILDING implement Vitali's suggestion of a *cmake* var for lib64 support rath… Mar 25, 2010 BUILDING.win32 win32 build documentation improvements (I know, that's subjective. Bu… Oct 12, 2010 CMakeLists.txt bump to 2.1.1 after tagging 2.1.0 Mar 18, 2014 COPYING update copyright and email Feb 15, 2014 ChangeLog changes in 2.1.0 Mar 18, 2014 README Merge pull request #92 from emaste/master Jan 28, 2013 TODO * BREAKING API CHANGE: allow client to specify memory allocation rou… Apr 1, 2009 YAJLDoc.cmake add dummy doc target if doxygen isn't present May 1, 2008 configure echo usage instead of relaunching configure script when PATH is missing Apr 5, 2015 README **********************************************************************         This is YAJL 2.  For the legacy version of YAJL see               https://github.com/lloyd/yajl/tree/1.x **********************************************************************  Welcome to Yet Another JSON Library (YAJL)  ## Why does the world need another C library for parsing JSON?    Good question.  In a review of current C JSON parsing libraries I was  unable to find one that satisfies my requirements.  Those are,  0. written in C 1. portable 2. robust -- as close to ""crash proof"" as possible 3. data representation independent 4. fast 5. generates verbose, useful error messages including context of where    the error occurs in the input text. 6. can parse JSON data off a stream, incrementally 7. simple to use 8. tiny  Numbers 3, 5, 6, and 7 were particularly hard to find, and were what  caused me to ultimately create YAJL.  This document is a tour of some of the more important aspects of YAJL.  ## YAJL is Free.  Permissive licensing means you can use it in open source and commercial products alike without any fees.  My request beyond the licensing is that if you find bugs drop me a email, or better yet, fork and fix.  Porting YAJL should be trivial, the implementation is ANSI C.  If you port to new systems I'd love to hear of it and integrate your patches.  ## YAJL is data representation independent.  BYODR!  Many JSON libraries impose a structure based data representation on you.  This is a benefit in some cases and a drawback in others. YAJL uses callbacks to remain agnostic of the in-memory representation. So if you wish to build up an in-memory representation, you may do so using YAJL, but you must bring the code that defines and populates the in memory structure.  This also means that YAJL can be used by other (higher level) JSON libraries if so desired.  ## YAJL supports stream parsing  This means you do not need to hold the whole JSON representation in textual form in memory.  This makes YAJL ideal for filtering projects, where you're converting YAJL from one form to another (i.e. XML).  The included JSON pretty printer is an example of such a filter program.  ## YAJL is fast  Minimal memory copying is performed.  YAJL, when possible, returns pointers into the client provided text (i.e. for strings that have no embedded escape chars, hopefully the common case).  I've put a lot of effort into profiling and tuning performance, but I have ignored a couple possible performance improvements to keep the interface clean, small, and flexible.  My hope is that YAJL will perform comparably to the fastest JSON parser out there.  YAJL should impose both minimal CPU and memory requirements on your application.  ## YAJL is tiny.  Fat free.  No whip.  enjoy, Lloyd - July, 2007   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lloyd/yajl"	"A fast streaming JSON parsing library in C. [ISC]"	"true"
"Logging"	"Blackhole"	"https://github.com/3Hren/blackhole"	"Header only attribute-based logging framework, which is designed to be fast, modular and highly customizable. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"56"	"5"	"20"	"GitHub - 3Hren/blackhole: Yet another logging library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 56 Fork 20 3Hren/blackhole Code Issues 14 Pull requests 3 Wiki Pulse Graphs Yet another logging library. 2,818 commits 18 branches 22 releases Fetching contributors C++ 98.2% CMake 1.8% C++ CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.0-0beta abi develop feature/metaformat issue/xx/beta issue/xx/file-sink-with-routing issue/xx/perf-json issue/xx/rc issue/xx/syslog-sink-improved issue/xx/unique-string issue/xx/windows issue/126/fix-long-long-upgrade master v0.1 v0.2 v0.3 v0.4 v0.5 Nothing to show v1.0.0-0alpha13 v1.0.0-0alpha12 v1.0.0-0alpha11 v1.0.0-0alpha10 v1.0.0-0alpha9 v1.0.0-0alpha8 v1.0.0-0alpha7 v1.0.0-0alpha6 v1.0.0-0alpha5 v1.0.0-0alpha4 v1.0.0-0alpha3 v0.5.0 v0.4.1 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit f3ec58b Jul 13, 2016 3Hren version: bump - 1.0.0 Permalink Failed to load latest commit information. bench bench: add pattern format severity bench Jul 8, 2016 debian version: bump - 1.0.0 Jul 13, 2016 docker misc: add xenial Dockerfile Jul 8, 2016 examples docs: add an example, more docs Jul 13, 2016 foreign fix(recordbuf): fix segfault May 6, 2016 include/blackhole feat: record is now able to check its state Jul 13, 2016 src refactor: fix or suppress remaining warnings Jul 13, 2016 tests feat: record is now able to check its state Jul 13, 2016 .gitignore refactor(): update ignored file list Feb 25, 2016 .gitmodules feat(tests): add mpsc queue test May 4, 2016 .shippable.yml feat(ci): add shippable CI May 6, 2016 .travis.yml ci: update travis Jun 21, 2016 CHANGELOG.md version: bump - 1.0.0 Jul 13, 2016 CMakeLists.txt docs: add an example, more docs Jul 13, 2016 README.md docs: add an example, more docs Jul 13, 2016 libblackhole1.version feat(): entirely hide rapidjson symbols Feb 9, 2016 README.md Blackhole - eating your logs with pleasure Blackhole is an attribute-based logger with strong focus on gaining maximum performance as possible for such kind of loggers. Features Attributes Attributes is the core feature of Blackhole. Technically speaking it's a key-value pairs escorting every logging record. For example we have HTTP/1.1 server which produces access logs like: [::] - esafronov [10/Oct/2000:13:55:36 -0700] 'GET /porn.png HTTP/1.0' 200 2326 - SUCCESS  It can be splitted into indexes or attributes: message:   SUCCESS host:      [::] user:      esafronov timestamp: 10/Oct/2000:13:55:36 -0700 method:    GET uri:       /porn.png protocol:  HTTP/1.0 status:    200 elapsed:   2326  Blackhole allows to specify any number of attributes you want, providing an ability to work with them before of while you writing them into its final destination. For example, Elasticsearch. Shared library Despite the header-only dark past now Blackhole is developed as a shared library. Such radical change of distributing process was chosen because of many reasons. Mainly, header-only libraries has one big disadvantage: any code change may (or not) result in recompiling all its dependencies, otherwise having weird runtime errors with symbol loading race. The other reason was the personal aim to reduce compile time, because it was fucking huge! Of course there are disadvantages, such as virtual function call cost and closed doors for inlining, but here my personal benchmark-driven development helped to avoid performance degradation. Planning Shared library. Inline namespaces. Optional compile-time inline messages transformation (C++14). Compile-time placeholder type checking. Compile-time placeholder spec checking (?). Python-like formatting (no printf-like formatting support) both inline and result messages. Attributes. Scoped attributes. Wrappers. Custom verbosity. Custom attributes formatting. Optional asynchronous pipelining. Queue with block on overload. Queue with drop on overload (count dropped message). The same but for handlers. Formatters. String by pattern. Optional placeholders. Configurable leftover placeholder. JSON with tree reconstruction. Sinks. Colored terminal output. Files. Syslog. Socket UDP. Socket TCP. Blocking. Non blocking. Scatter-gathered IO (?) Logger builder. Macro with line and filename attributes. Initializer from JSON (filename, string). Inflector. Filter category. Category type. For sinks. For handlers. For loggers. Formatters Formatters in Blackhole are responsible for converting every log record passing into some byte array representation. It can be either human-readable string, JSON tree or even protobuf packed frame. String String formatter provides an ability to configure your logging output using pattern mechanics with powerful customization support. Unlike previous Blackhole versions now string formatter uses python-like syntax for describing patterns with using {} placeholders and format specifications inside. Moreover now you can specify timestamp specification directly inside the general pattern or even format it as an microseconds number since epoch. For example we have the given pattern: [{severity:>7}] [{timestamp:{%Y-%m-%d %H:%M:%S.%f}s}] {scope}: {message}  After applying some log events we expect to receive something like this: [  DEBUG] [2015-11-19 19:02:30.836222] accept: HTTP/1.1 GET - / - 200, 4238 [   INFO] [2015-11-19 19:02:32.106331] config: server has reload its config in 200 ms [WARNING] [2015-11-19 19:03:12.176262] accept: HTTP/1.1 GET - /info - 404, 829 [  ERROR] [2015-11-19 19:03:12.002127] accept: HTTP/1.1 GET - /info - 503, 829  As you may notice the severity field is aligned to the right border (see that >7 spec in pattern), the timestamp is formatted using default representation with a microseconds extension and so on. Because Blackhole is all about attributes you can place and format every custom attribute you want, as we just done with scope attribute. The Blackhole supports several predefined attributes, with convenient specifications: Placeholder Description {severity:s} User provided severity string representation {severity}, {severity:d} Numeric severity value {timestamp:d} Number of microseconds since Unix epoch {timestamp:{spec}s} String representation using strftime specification in UTC {timestamp:{spec}l} String representation using strftime specification in local timezone {timestamp}, {timestamp:s} The same as {timestamp:{%Y-%m-%d %H:%M:%S.%f}s} {process:s} Process name {process}, {process:d} PID {thread}, {thread::x} Thread hex id as an opaque value returned by pthread_self(3) {thread:s} Thread name or unnnamed {message} Logging message {...} All user declared attributes For more information please read the documentation and visit the following links: http://cppformat.github.io/latest/syntax.html - general syntax. http://en.cppreference.com/w/cpp/chrono/c/strftime - timestamp spec extension. Note, that if you need to include a brace character in the literal text, it can be escaped by doubling: {{ and }}. There is a special attribute placeholder - {...} - which means to print all non-reserved attributes in a reverse order they were provided in a key-value manner separated by a comma. These kind of attributes can be configured using special syntax, similar with the timestamp attribute with an optional separator. For example the following placeholder {...:{{name}={value}:p}{\t:x}s} results in tab separated key-value pairs like id=42\tmethod=GET. For pedants there is a full placeholder grammar in EBNF: Grammar     = Ph             | OptPh             | VarPh Ph          = ""{"" Name ""}"" OptPh       = ""{"" Name "":"" Spec? ""}"" VarPh       = ""{...}""             | ""{...:"" Ext? s ""}"" Ext         = Pat             | Sep             | Pat Sep             | Sep Pat Name        = [a-zA-Z0-9_] Spec        = Align? Width? Type Align       = [>^<] Width       = [1-9][0-9]* Type        = [su] Pat         = ""{"" PatSpec "":p}"" Sep         = ""{"" SepLit* "":s}"" (""}"" SepLit* "":s}"")* SepLit      = . ! ("":s"" | ""}"" | ""}}"" | ""{"" | ""{{"")             | LeBrace             | RiBrace LeBrace     = ""{{"" -> ""{"" RiBrace     = ""}}"" -> ""}"" PatSpec     = (AtName | AtValue | PatLit)* AtName      = ""{name}""             | AtNameSpec AtNameSpec  = ""{name:"" AtSpec ""}"" AtSpec      = Align? Width? AtType AtType      = [sd] AtValue     = ""{value}""             | AtValueSpec AtValueSpec = ""{value:"" AtSpec ""}"" PatLit      = . ! (""}"" | ""}}"" | ""{"" | ""{{"")             | LeBrace             | RiBrace  Let's describe it more precisely. Given a complex leftover placeholder, let's parse it manually to see what Blackhole see. Given: {...:{{name}={value}:p}{\t:s}>50s}. Parameter Description ... Reserved placeholder name indicating for Blackhole that this is a leftover placeholder. : Optional spec marker that is placed after placeholder name where you want to apply one of several extensions. There are pattern, separator, prefix, suffix and format extensions. All of them except format should be surrounded in curly braces. {{name}={value}:p} Pattern extension that describes how each attribute should be formatted using typical Blackhole notation. The suffix :p, that is required for extension identification, means pattern. Inside this pattern you can write any pattern you like using two available sub-placeholders for attribute name and value, for each of them a format spec can be applied using cppformat grammar. At last a format spec can be also applied to the entire placeholder, i.e. :>50p for example. {\t:s} Separator extension for configuring each key-value pair separation. Nuff said. {[:r} (Not implemented yet). Prefix extension that is prepended before entire result if it is not empty. {]:u} (Not implemented yet). Suffix extension that is appended after entire result if it is not empty. >50s Entire result format. See cppformat rules for specification. JSON. JSON formatter provides an ability to format a logging record into a structured JSON tree with attribute handling features, like renaming, routing, mutating and much more. Briefly using JSON formatter allows to build fully dynamic JSON trees for its further processing with various external tools, like logstash or rsyslog lefting it, however, in a human-readable manner. Blackhole allows you to control of JSON tree building process using several predefined options. Without options it will produce just a plain tree with zero level depth. For example for a log record with a severity of 3, message ""fatal error, please try again"" and a pair of attributes {""key"": 42, ""ip"": ""[::]""} the result string will look like: {     ""message"": ""fatal error, please try again"",     ""severity"": 3,     ""timestamp"": 1449859055,     ""process"": 12345,     ""thread"": 57005,     ""key"": 42,     ""ip"": ""[::]"" } Using configuration parameters for this formatter you can: Rename parameters. Construct hierarchical tree using a standardized JSON pointer API. For more information please follow \ref https://tools.ietf.org/html/rfc6901. Attributes renaming acts so much transparently as it appears: it just renames the given attribute name using the specified alternative. Attributes routing specifies a location where the listed attributes will be placed at the tree construction. Also you can specify a default location for all attributes, which is ""/"" meaning root otherwise. For example with routing {""/fields"": [""message"", ""severity""]} and ""/"" as a default pointer the mentioned JSON will look like: {     ""fields"": {         ""message"": ""fatal error, please try again"",         ""severity"": 3     },     ""timestamp"": 1449859055,     ""process"": 12345,     ""thread"": 57005,     ""key"": 42,     ""ip"": ""[::]"" } Attribute renaming occurs after routing, so mapping ""message"" => ""#message"" just replaces the old name with its new alternative. To gain maximum speed at the tree construction no filtering occurs, so this formatter by default allows duplicated keys, which means invalid JSON tree (but most of parsers are fine with it). If you are really required to deal with unique keys, you can enable unique option, but it involves heap allocation and may slow down formatting. Also formatter allows to automatically append a newline character at the end of the tree, which is strangely required by some consumers, like logstash. Note, that JSON formatter formats the tree using compact style without excess spaces, tabs etc. For convenient formatter construction a special builder class is implemented allowing to create and configure instances of this class using streaming API. For example: auto formatter = blackhole::formatter::json_t::builder_t()     .route(""/fields"", {""message"", ""severity"", ""timestamp""})     .route(""/other"")     .rename(""message"", ""#message"")     .rename(""timestamp"", ""#timestamp"")     .newline()     .unique()     .build(); This allows to avoid hundreds of constructors and to make a formatter creation to look eye-candy. The full table of options: Option Type Description /route Object of: [string] ""*"" Allows to configure nested tree mapping. Each key must satisfy JSON Pointer specification and sets new attributes location in the tree. Values must be either an array of string, meaning list of attributes that are configured with new place or an ""*"" literal, meaning all other attributes. /mapping Object of: [string] Simple attribute names renaming from key to value. /newline bool If true, a newline will be appended to the end of the result message. The default is false. /unique bool If true removes all backward consecutive duplicate elements from the attribute list range. For example if there are two attributes with name ""name"" and values ""v1"" and ""v2"" inserted, then after filtering there will be only the last inserted, i.e. ""v2"". The default is false. /mutate/timestamp string Replaces the timestamp field with new value by transforming it with the given strftime pattern. /mutate/severity [string] Replaces the severity field with the string value at the current severity value. For example: ""formatter"": {     ""type"": ""json"",     ""newline"": true,     ""unique"": true,     ""mapping"": {         ""message"": ""@message"",         ""timestamp"": ""@timestamp""     },     ""routing"": {         """": [""message"", ""timestamp""],         ""/fields"": ""*""     },     ""mutate"": {         ""timestamp"": ""%Y-%m-%dT%H:%M:%S.%fZ"",         ""severity"": [""D"", ""I"", ""W"", ""E""]     } } Sinks Null Sometimes we need to just drop all logging events no matter what, for example to benchmarking purposes. For these cases there is null output (or sink), which just ignores all records. The common configuration for this sink looks like: ""sinks"": [     {         ""type"": ""null""     } ] Console Represents a console sink which is responsible for writing all incoming log events directly into the terminal using one of the selected standard outputs with an ability to optionally colorize result strings. The sink automatically detects whether the destination stream is a TTY disabling colored output otherwise, which makes possible to redirect standard output to file without escaping codes garbage. Note, that despite of C++ std::cout and std::cerr thread-safety with no undefined behavior its guarantees is insufficiently for safe working with them from multiple threads, leading to result messages intermixing. To avoid this a global mutex is used internally, which is kinda hack. Any other stdout/stderr usage outside from logger will probably results in character mixing, but no undefined behavior will be invoked. The configuration: ""sinks"": [     {         ""type"": ""console""     } ] Note, that currently coloring cannot be configured through dynamic factory (i.e through JSON, YAML etc.), but can be through the builder. enum severity {     debug = 0,     info,     warn,     error };  auto console = blackhole::builder<blackhole::sink::console_t>()     .colorize(severity::debug, blackhole::termcolor_t())     .colorize(severity::info, blackhole::termcolor_t::blue())     .colorize(severity::warn, blackhole::termcolor_t::yellow())     .colorize(severity::error, blackhole::termcolor_t::red())     .stdout()     .build(); File Represents a sink that writes formatted log events to the file or files located at the specified path. The path can contain attribute placeholders, meaning that the real destination name will be deduced at runtime using provided log record (not ready yet). No real file will be opened at construction time. All files are opened by default in append mode meaning seek to the end of stream immediately after open. This sink supports custom flushing policies, allowing to control hardware write load. There are three implemented policies right now: Fully automatic (without configuration), meaning that the sink will decide whether to flush or not after each record consumed. Count of records written - this is the simple counter with meaning of ""flush at least every N records consumed"", but the underlying implementation can decide to do it more often. The value of 1 means that the sink will flush after every logging event, but this results in dramatically performance degradation. By counting of number of bytes written - Blackhole knows about bytes, megabytes, even mibibytes etc. Note, that it's guaranteed that the sink always flush its buffers at destruction time. This guarantee with conjunction of thread-safe logger reassignment allows to implement common SIGHUP files reopening during log rotation. Blackhole won't create intermediate directories, because of potential troubles with ACL. Instead an exception will be thrown, which will be anyway caught by the internal logging system notifying through stdout about it. Note, that associated files will be opened on demand during the first write operation. ""sinks"": [     {         ""type"": ""file"",         ""flush"": ""10Mb"",         ""path"": ""/var/log/blackhole.log""     } ] Blackhole knows about the following marginal binary units: Bytes (B). Kilobytes (kB). Megabytes (MB). Gigabytes (GB). Kibibytes (KiB). Mibibytes (MiB). Gibibytes (GiB). More you can read at https://en.wikipedia.org/wiki/Binary_prefix. Socket The socket sinks category contains sinks that write their output to a remote destination specified by a host and port. Currently the data can be sent over either TCP or UDP. TCP This appender emits formatted logging events using connected TCP socket. Option Type Description host string Required. The name or address of the system that is listening for log events. port u16 Required. The port on the host that is listening for log events. UDP Nuff said. Syslog Option Type Description priorities [i16] Required. Priority mapping from severity number. Configuration Blackhole can be configured mainly in two ways: Using experimental builder. Using abstract factory (GoF, yeah). Builder The first way involves using experimental yet builder. For each library component (formatter, sink, etc.) there should be appropriate builder specialization that is used to create instances of associated component in a flow-way. For example: // Here we are going to configure our string/console handler and to build the logger. auto log = blackhole::experimental::partial_builder<blackhole::root_logger_t>()    // Add the blocking handler.    .handler<blackhole::handler::blocking_t>()        // Configure string formatter.        //        // Pattern syntax behaves like as usual substitution for placeholder. For example if        // the attribute named `severity` has value `2`, then pattern `{severity}` will invoke        // severity mapping function provided and the result will be `W`.        .set<blackhole::formatter::string_t>(""{severity}, [{timestamp}]: {message}"")            .mapping(&sevmap)            .build()        // Configure console sink to write into stdout (also stderr can be configured).        .add<blackhole::sink::console_t>()            .build()        // And build the handler. Multiple handlers can be added to a single logger, but right        // now we confine ourselves with a single handler.        .build()    // Build the logger.    .build(); The result is a std::unique_ptr<C> where C: Component, sorry for my Rust. This is also called static initialization, because you must know the configuration of your logging system at compile time. If this isn't suit for you there is another way. Factory Also called as dynamic initialization, and is the recommended way to configure the Blackhole, because it implements some kind of dependency injection through some external source, like JSON file, XML, or folly::dynamic. Blackhole for now implements only initialization from JSON, but it can be easily extended as a plugin, because all you need is just to implement proper interface to allow tree-like traversing through your config object. Here there is an example how to configure the library from JSON file. // Here we are going to build the logger using registry. The registry's responsibility is to // track registered handlers, formatter and sinks, but for now we're not going to register // anything else, since there are predefined types. auto log = blackhole::registry::configured()     // Specify the concrete builder type we want to use. It may be JSON, XML, YAML or whatever     // else.     ->builder<blackhole::config::json_t>(std::ifstream(argv[1]))         // Build the logger named ""root"".         .build(""root""); The result is a std::unique_ptr<logger_t> object. For more information see blackhole::registry_t class and the include/blackhole/config where all magic happens. If you look for an example how to implement your own factory, please see src/config directory. Facade One can say that the raw logger interface is inconvenient, and this is true, unfortunately, because it must work both in simple cases, where intermediate message formatting is not required, without attributes; and in complex cases, where lazy message formatting occurs, with attributes provided, remaining at the same time as fast as possible, giving a high-performance solution. Let's take a look on the interface: class logger_t { public:     virtual ~logger_t() = 0;     virtual auto log(severity_t severity, const message_t& message) -> void = 0;     virtual auto log(severity_t severity, const message_t& message, attribute_pack& pack) -> void = 0;     virtual auto log(severity_t severity, const lazy_message_t& message, attribute_pack& pack) -> void = 0;      virtual auto manager() -> scope::manager_t& = 0; }; To avoid manually creating all these structures a special extension is provided: facade. In two words it is a thin template adapter over any given logger which extends its interface, providing methods that makes logging convenient again. We describe all these methods by abusing a random HTTP logging event of success file serve. For simple cases there is a thin wrapper that transforms a string into string view and passes it further. logger.log(0, ""GET /static/image.png HTTP/1.1 436 200""); Sometimes we want to provide additional attributes. In these cases they can be passed using initializer list. logger.log(0, ""GET /static/image.png HTTP/1.1 436 200"", {     {""cache"", true},     {""elapsed"", 435.72},     {""user-agent"", ""Mozilla Firefox""} }); Often we want to format a message using predefined pattern, but with arguments obtained at runtime. logger.log(0, ""{} {} HTTP/1.1 {} {}"", ""GET"", ""/static/image.png"", 436, 200); At last, we can combine two previous examples to obtain something really useful. Note that attribute list argument must be the last. logger.log(0, ""{} {} HTTP/1.1 {} {}"", ""GET"", ""/static/image.png"", 436, 200, attribute_list{     {""cache"", true},     {""elapsed"", 435.72},     {""user-agent"", ""Mozilla Firefox""} }); To use it all you need is to create a logger, import the facade definition and wrap the logger with it. We show you an improved example: /// This example demonstrates how to initialize Blackhole from configuration file using JSON /// builder. /// In this case the entire logging pipeline is initialized from file including severity mapping. /// The logging facade is used to allow runtime formatting and attributes provisioning.  #include <fstream> #include <iostream>  #include <blackhole/attribute.hpp> #include <blackhole/attributes.hpp> #include <blackhole/config/json.hpp> #include <blackhole/extensions/facade.hpp> #include <blackhole/extensions/writer.hpp> #include <blackhole/registry.hpp> #include <blackhole/root.hpp>  using namespace blackhole;  /// As always specify severity enumeration. enum severity {     debug   = 0,     info    = 1,     warning = 2,     error   = 3 };  auto main(int argc, char** argv) -> int {     if (argc != 2) {         std::cerr << ""Usage: 3.config PATH"" << std::endl;         return 1;     }      /// Here we are going to build the logger using registry. The registry's responsibility is to     /// track registered handlers, formatter and sinks, but for now we're not going to register     /// anything else, since there are predefined types.     auto inner = blackhole::registry::configured()         /// Specify the concrete builder type we want to use. It may be JSON, XML, YAML or whatever         /// else.         ->builder<blackhole::config::json_t>(std::ifstream(argv[1]))             /// Build the logger named ""root"".             .build(""root"");      /// Wrap the logger with facade to obtain an ability to format messages and provide attributes.     auto log = blackhole::logger_facade<blackhole::root_logger_t>(inner);      log.log(severity::debug, ""{} {} HTTP/1.1 {} {}"", ""GET"", ""/static/image.png"", 404, 347);     log.log(severity::info, ""nginx/1.6 configured"", {         {""elapsed"", 32.5}     });     log.log(severity::warning, ""client stopped connection before send body completed"");     log.log(severity::error, ""file does not exist: {}"", ""/var/www/favicon.ico"", blackhole::attribute_list{         {""Cache"", true},         {""Cache-Duration"", 10},         {""User-Agent"", ""Mozilla Firefox""}     });      return 0; } Runtime Type Information The library can be successfully compiled and used without RTTI (with -fno-rtti flag). Possible bottlenecks Timestamp formatting Using system clock - can be replaces with OS specific clocks. Using gmtime - manual std::tm generation without mutex shit. Temporary buffer - affects, but not so much. Why another logging library? That's the first question I ask myself when see yet another silver-bullet library. First of all, we required a logger with attributes support. Here boost::log was fine, but it didn't compile in our compilers. Sad. After that we've realized that one of our bottlenecks is located in logging part, that's why boost::log and log4cxx weren't fit in our requirements. Thirdly we are developing for stable, but old linux distributives with relatively old compilers that supports only basic part of C++11. At last, but not least, all that libraries has one fatal disadvantage - NIH. So here we are. To be honest, let's describe some popular logging libraries, its advantages and disadvantages as one of them may fit your requirements and you may want to use them instead. It's okay. Boost.LogV2 Developed by another crazy Russian programmer using dark template magic and Vodka (not sure what was first). It's a perfect and powerful library, seriously. Pros: It's a fucking boost! Many people don't want to depend on another library, wishing to just apt get install instead. Have attributes too. Large community, less bugs. Highly configurable. Good documentation. Cons: Sadly, but you are restricted with the latest boost versions. Hard to hack and extend unless you are fine with templates, template of templates and variadic templates of a templated templates with templates. Or you are Andrei Alexandrescu. Relatively poor performance. Higher than log4cxx have, but not enough for us. Requires RTTI. Log4cxx Logging framework for C++ patterned after Apache log4j. Yeah, Java. Pros: Absolutely zero barrier to entry. Really, you just copy-paste the code from tutorial and it works. Amazing! Cons: Leaking. APR. Have no attributes. Really slow performance. Seems like it's not really supported now. Spdlog Extremely ultra bloody fucking fast logging library. At least the documentation says that. Faster than speed of light! But everyone knows that even the light is unable to leave from blackhole. Pros: Really fast, I checked. Header only. Not sure it's an advantage, but for small projects it's fine. Easy to extend, because the code itself is plain, straightforward and magically easy to understand. No dependencies. Nice kitty in author's avatar. Cons: Again no attributes, no custom filtering, no custom verbosity levels. You are restricted to functionality provided by this library, nothing more. Notable changes First of all, the entire library was completely rewritten for performance reasons. No more attribute copying unless it's really required (for asynchronous logging for example). Nested attributes are now organized in flattened range. Dropped boost::format into the Hell. It's hard to find more slower library for formatting both in compilation stage and runtime. Instead, the perfect cppformat library with an own compile-time constexpr extensions is used. There are predefined attributes with fast read access, like message, severity, timestmap etc. With cppformat participation there is new Python-like format syntax using placeholder replacement. Severity mapping from its numeric representation to strings can now be configured from generic configuration source (from file for example). ... Requirements C++11/14/17 compiler (yep, using C++17 opens additional functionalities). Boost.Thread - for TLS. Development Git workflow Each feature and fix is developed in a separate branch. Bugs which are discovered during development of a certain feature, may be fixed in the same branch as their parent issue. This is also true for small features. Branch structure: master: master branch - contains stable, working version of VM code. develop: development branch - all fixes and features are first merged here. issue/<number>/<slug> or issue/<slug>: for issues (both enhancement and bug fixes). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/3Hren/blackhole"	"Header only attribute-based logging framework, which is designed to be fast, modular and highly customizable. [MIT]"	"true"
"Logging"	"Boost.Log"	"http://www.boost.org/doc/libs/1_56_0/libs/log/doc/html/index.html"	"Designed to be very modular and extensible. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Chapter 1. Boost.Log v2 - 1.56.0 Boost C++ Libraries ...one of the most highly regarded and expertly designed C++ library projects in the world. — Herb Sutter and Andrei Alexandrescu, C++ Coding Standards Click here to view the latest version of this page. Chapter 1. Boost.Log v2 Andrey Semashev Copyright © 2007-2014 Andrey Semashev Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt). Table of Contents Motivation How to read the documentation Installation and compatibility Supported compilers and platforms Configuring and building the library Definitions Design overview Tutorial Trivial logging Trivial logging with filters Setting up sinks Creating loggers and writing logs Adding more information to log: Attributes Log record formatting Filtering revisited Wide character logging Detailed features description Core facilities Logging sources Sink frontends Sink backends Lambda expressions Attributes Utilities Extending the library Writing your own sinks Writing your own sources Writing your own attributes Extending library settings support Rationale and FAQ Why string literals as scope names? Why scoped attributes don't override existing attributes? Why log records are weakly ordered in a multithreaded application? Why attributes set with stream manipulators do not participate in filtering? Why not using lazy streaming? Why not using hierarchy of loggers, like in log4j? Why not Boost.Log4j? Etc. Does Boost.Log support process forking? Does Boost.Log support logging at process initialization and termination? Why my application crashes on process termination when file sinks are used? Why my application fails to link with Boost.Log? What's the fuss about library namespaces? Why MSVC 2010 fails to link the library with error LNK1123: failure during conversion to COFF: file invalid or corrupt? Reference Top level headers Core components Attributes Expressions Logging sources Sinks Utilities Other libraries support layer Changelog TODO in future releases Acknowledgments Motivation Today applications grow rapidly, becoming complicated and difficult to test and debug. Most of the time applications run on a remote site, leaving the developer little chance to monitor their execution and figure out the reasons for their failure, once it should happen. Moreover, even the local debugging may become problematic if the application behavior depends heavily on asynchronous side events, such as a device feedback or another process activity. This is where logging can help. The application stores all essential information about its execution to a log, and when something goes wrong this information can be used to analyze the program behavior and make the necessary corrections. There are other very useful applications of logging, such as gathering statistical information and highlighting events (i.e. indicating that some situation has occurred or that the application is experiencing some problems). These tasks have proved to be vital for many real-world industrial applications. This library aims to make logging significantly easier for the application developer. It provides a wide range of out-of-the-box tools along with public interfaces for extending the library. The main goals of the library are: Simplicity. A small example code snippet should be enough to get the feel of the library and be ready to use its basic features. Extensibility. A user should be able to extend functionality of the library for collecting and storing information into logs. Performance. The library should have as little performance impact on the user's application as possible."	"null"	"null"	"Designed to be very modular and extensible. [Boost]"	"true"
"Logging"	"easyloggingpp"	"https://github.com/easylogging/easyloggingpp"	"Single header only C++ logging library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"845"	"102"	"230"	"GitHub - easylogging/easyloggingpp: Single header only C++ logging library. It is extremely light-weight, robust, fast performing, thread and type safe and consists of many built-in features. It provides ability to write logs in your own customized format. It also provide support for logging your classes, third-party libraries, STL and third-party containers etc. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 102 Star 845 Fork 230 easylogging/easyloggingpp Code Issues 80 Pull requests 9 Pulse Graphs Single header only C++ logging library. It is extremely light-weight, robust, fast performing, thread and type safe and consists of many built-in features. It provides ability to write logs in your own customized format. It also provide support for logging your classes, third-party libraries, STL and third-party containers etc. http://easylogging.muflihun.com 1,687 commits 2 branches 98 releases 11 contributors C++ 95.7% C 2.7% Other 1.6% C++ C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v9.82 v9.80 v9.79 v9.78 v9.77 v9.76 v9.75 v9.74 v9.73 v9.72 v9.71 v9.70 v9.69 v9.68 v9.67 v9.66 v9.65 v9.64 v9.63 v9.62 v9.61 v9.60 v9.59 v9.58 v9.57 v9.56 v9.55 v9.54 v9.53 v9.52 v9.51 v9.50 v9.49 v9.48 v9.47 v9.46 v9.45 v9.44 v9.43 v9.42 v9.41 v9.40 v9.39 v9.38 v9.37 v9.36 v9.35 v9.34 v9.33 v9.32 v9.31 v9.30 v9.29 v9.28 v9.27 v9.26 v9.25 v9.24 v9.23 v9.22 v9.21 v9.20 v9.19 v9.18 v9.17 v9.16 v9.15 v9.14 v9.13 v9.12 v9.11 v9.10 v9.09 v9.08 v9.07 v9.06 v9.04 v9.03 v9.02 v9.01 v9.00 v8.91 v8.90 v8.85 v8.83 v8.82 v8.80 v8.76 v8.75 v8.72 v8.71 v8.70 v8.66 v8.65 v8.61 v8.60 v8.59 9.81 Nothing to show New pull request Latest commit e07559f Jul 14, 2016 mkhan3189 v9.82 release Permalink Failed to load latest commit information. cmake Add FindEasyloggingpp.cmake Nov 3, 2015 doc v9.82 release Jul 14, 2016 samples fix travis attempt#1 Jul 13, 2016 src v9.82 release Jul 13, 2016 test igno Jul 13, 2016 tools Release version updated as 'subject to change' Nov 4, 2015 .gitignore more updates Aug 29, 2014 .travis.yml fix travis attempt#1 Jul 12, 2016 CMakeLists.txt Add CMakeLists.txt for the project Oct 7, 2015 LICENCE licence upgrade Jan 8, 2015 README.md v9.82 release Jul 13, 2016 README.md                                    ‫بسم الله الرَّحْمَنِ الرَّحِيمِ  Manual For v9.82 Quick Links Latest Release Release Notes Samples Table of Contents Introduction     Why yet another library     Features at a glance Getting Started     Download     Quick Start     Setting Application Arguments Configuration     Level     Configure         Using Configuration File         Using el::Configurations Class         Using In line Configurations     Default Configurations     Global Configurations     Logging Format Specifiers     Date/Time Format Specifiers     Logging Flags     Application Arguments     Configuration Macros     Reading Configurations Logging     Basic     Conditional Logging     Occasional Logging     printf Like Logging     Verbose Logging         Basic         Conditional and Occasional         Verbose Level         Check If Verbose Logging Is On         VModule     STL Logging         Supported Templates     Registering New Loggers     Unregister Loggers     Populating Existing Logger IDs     Sharing Logging Repository Extra Features     Performance Tracking         Make Use of Performance Tracking Data     Log File Rotating     Crash Handling         Installing Custom Crash Handlers     Stacktrace     Multi-threading     CHECK Macros     Logging perror()     Using Syslog     Qt Logging     Boost Logging     wxWidgets Logging     Extending Library         Logging Your Own Class         Logging Third-party Class     Manually Flushing and Rolling Log Files     Log Dispatch Callback     Asynchronous Logging     Helper Classes Contribution     Submitting Patches     Reporting a Bug     Donation Compatibility Licence Disclaimer  Introduction Easylogging++ is single header only, feature-rich, efficient logging library for C++ applications. It has been written keeping three things in mind; performance, management (setup, configure, logging, simplicity) and portability. Its highly configurable and extremely useful for small to large sized projects. This manual is for Easylogging++ v9.82. For other versions please refer to corresponding release on github. Goto Top Why yet another library If you are working on a small utility or large project in C++, this library can be handy. Its based on single header and does not require linking or installation. You can import into your project as if its part of your project. This library has been designed with various thoughts in mind (i.e, portibility, performance, usability, features and easy to setup). Why yet another library? Well, answer is pretty straight forward, use it as if you wrote it so you can fix issues (if any) as you go or raise them on github. In addition to that, I have not seen any logging library based on single-header with such a design where you can configure on the go and get the same performance. I have seen other single-header logging libraries for C++ but either they use external libraries, e.g, boost, Qt to support certain features like threading, regular expression or date etc. This library has everything built-in to prevent usage of external libraries, not that I don't like those libraries, in fact I love them, but because not all projects use these libraries, I couldn't take risk of depending on them. Goto Top Features at a glance Easylogging++ is feature-rich containing many features that both typical and advanced developer will require while writing a software; Highly configurable Extremely fast Thread and type safe Cross-platform Custom log patterns Conditional and occasional logging Performance tracking Verbose logging Crash handling Helper CHECK macros STL logging Third-party library logging (Qt, boost, wxWidgets etc) Extensible (Logging your own class or third-party class) And many more... Goto Top Getting Started Download Download latest version from Latest Release For other releases, please visit releases page. If you application does not support C++11, please consider using v8.91. This is stable version for C++98 and C++03, just lack some features. Goto Top Quick Start In order to get started with Easylogging++, you can follow three easy steps: Download latest version Include into your project Initialize using single macro... and off you go! #include ""easylogging++.h""  INITIALIZE_EASYLOGGINGPP  int main(int argc, char* argv[]) {    LOG(INFO) << ""My first info log using default logger"";    return 0; } That simple! Please note that INITIALIZE_EASYLOGGINGPP should be used once and once-only otherwise you will end up getting compilation errors. This is definiting several extern variables. This means it can be defined only once per application. Best place to put this initialization statement is in file where int main(int, char**) function is defined, right after last include statement. Goto Top Setting Application Arguments It is always recommended to pass application arguments to Easylogging++. Some features of Easylogging++ require you to set application arguments, e.g, verbose logging to set verbose level or vmodules (explained later). In order to do that you can use helper macro or helper class; int main(int argc, char* argv[]) {    START_EASYLOGGINGPP(argc, argv);    ... } Goto Top Configuration Level In order to start configuring your logging library, you must understand severity levels. Easylogging++ deliberately does not use hierarchical logging in order to fully control what's enabled and what's not. That being said, there is still option to use hierarchical logging using LoggingFlag::HierarchicalLogging. Easylogging++ has following levels (ordered for hierarchical levels) Level Description Global Generic level that represents all levels. Useful when setting global configuration for all levels. Trace Information that can be useful to back-trace certain events - mostly useful than debug logs. Debug Informational events most useful for developers to debug application. Only applicable if NDEBUG is not defined (for non-VC++) or _DEBUG is defined (for VC++). Fatal Very severe error event that will presumably lead the application to abort. Error Error information but will continue application to keep running. Warning Information representing errors in application but application will keep running. Info Mainly useful to represent current progress of application. Verbose Information that can be highly useful and vary with verbose logging level. Verbose logging is not applicable to hierarchical logging. Unknown Only applicable to hierarchical logging and is used to turn off logging completely. Goto Top Configure Easylogging++ is easy to configure. There are three possible ways to do so, Using configuration file Using el::Configurations class Using inline configuration Using Configuration File Configuration can be done by file that is loaded at runtime by Configurations class. This file has following format; * LEVEL:   CONFIGURATION NAME  = ""VALUE"" ## Comment   ANOTHER CONFIG NAME = ""VALUE""  Level name starts with a star (*) and ends with colon (:). It is highly recommended to start your configuration file with Global level so that any configuration not specified in the file will automatically use configuration from Global. For example, if you set Filename in Global and you want all the levels to use same filename, do not set it explicitly for each level, library will use configuration value from Global automatically. Following table contains configurations supported by configuration file. Configuration Name Type Description Enabled bool Determines whether or not corresponding level for logger is enabled. You may disable all logs by using el::Level::Global To_File bool Whether or not to write corresponding log to log file To_Standard_Output bool Whether or not to write logs to standard output e.g, terminal or command prompt Format char* Determines format/pattern of logging for corresponding level and logger. Filename char* Determines log file (full path) to write logs to for corresponding level and logger Milliseconds_Width uint Specifies milliseconds width. Width can be within range (1-6) Performance_Tracking bool Determines whether or not performance tracking is enabled. This does not depend on logger or level. Performance tracking always uses 'performance' logger unless specified Max_Log_File_Size size_t If log file size of corresponding level is >= specified size, log file will be truncated. Log_Flush_Threshold size_t Specifies number of log entries to hold until we flush pending log data Please do not use double-quotes anywhere in comment, you might end up in unexpected behaviour. Sample Configuration File * GLOBAL:    FORMAT               =  ""%datetime %msg""    FILENAME             =  ""/tmp/logs/my.log""    ENABLED              =  true    TO_FILE              =  true    TO_STANDARD_OUTPUT   =  true    MILLISECONDS_WIDTH   =  6    PERFORMANCE_TRACKING =  true    MAX_LOG_FILE_SIZE    =  2097152 ## 2MB - Comment starts with two hashes (##)    LOG_FLUSH_THRESHOLD  =  100 ## Flush after every 100 logs * DEBUG:    FORMAT               = ""%datetime{%d/%M} %func %msg""  Explanation Configuration file contents in above sample is straightforward. We start with GLOBAL level in order to override all the levels. Any explicitly defined subsequent level will override configuration from GLOBAL. For example, all the levels except for DEBUG have the same format, i.e, datetime and log message. For DEBUG level, we have only date (with day and month), source function and log message. The rest of configurations for DEBUG are used from GLOBAL. Also, notice {%d/%M} in DEBUG format above, if you do not specify date format, default format is used. Default values of date/time is %d/%M/%Y %h:%m:%s,%g For more information on these format specifiers, please refer to Date/Time Format Specifier section below Usage #include ""easylogging++.h""  INITIALIZE_EASYLOGGINGPP  int main(int argc, const char** argv) {     // Load configuration from file     el::Configurations conf(""/path/to/my-conf.conf"");     // Reconfigure single logger     el::Loggers::reconfigureLogger(""default"", conf);     // Actually reconfigure all loggers instead     el::Loggers::reconfigureAllLoggers(conf);     // Now all the loggers will use configuration from file } Your configuration file can be converted to el::Configurations object (using constructor) that can be used where ever it is needed (like in above example). Goto Top Using el::Configurations Class You can set configurations or reset configurations; #include ""easylogging++.h""  INITIALIZE_EASYLOGGINGPP  int main(int argc, const char** argv) {    el::Configurations defaultConf;    defaultConf.setToDefault();     // Values are always std::string    defaultConf.set(el::Level::Info,              el::ConfigurationType::Format, ""%datetime %level %msg"");     // default logger uses default configurations     el::Loggers::reconfigureLogger(""default"", defaultConf);     LOG(INFO) << ""Log using default file"";     // To set GLOBAL configurations you may use    defaultConf.setGlobally(             el::ConfigurationType::Format, ""%date %msg"");    el::Loggers::reconfigureLogger(""default"", defaultConf);     return 0; } Configuration just needs to be set once. If you are happy with default configuration, you may use it as well. Goto Top Using In line Configurations Inline configuration means you can set configurations in std::string but make sure you add all the new line characters etc. This is not recommended because it's always messy. el::Configurations c; c.setToDefault(); c.parseFromText(""*GLOBAL:\n FORMAT = %level %msg""); Above code only sets Configurations object, you still need to re-configure logger/s using this configurations. Goto Top Default Configurations If you wish to have a configuration for existing and future loggers, you can use el::Loggers::setDefaultConfigurations(el::Configurations& configurations, bool configureExistingLoggers = false). This is useful when you are working on fairly large scale, or using a third-party library that is already using Easylogging++. Any newly created logger will use default configurations. If you wish to configure existing loggers as well, you can set second argument to true (it defaults to false). Goto Top Global Configurations Level::Global is nothing to do with global configurations, it is concept where you can register configurations for all/or some loggers and even register new loggers using configuration file. Syntax of configuration file is: -- LOGGER ID ## Case sensitive   ## Everything else is same as configuration file   -- ANOTHER LOGGER ID   ## Configuration for this logger  Logger ID starts with two dashes. Once you have written your global configuration file you can configure your all loggers (and register new ones) using single function; int main(void) {    // Registers new and configures it or    // configures existing logger - everything in global.conf    el::Loggers::configureFromGlobal(""global.conf"");    // .. Your prog    return 0; } Please note, it is not possible to register new logger using global configuration without defining its configuration. You must define at least single configuration. Other ways to register loggers are discussed in Logging section below. Goto Top Logging Format Specifiers You can customize format of logging using following specifiers: Specifier Replaced By %logger Logger ID %thread Thread ID - Uses std::thread if available, otherwise GetCurrentThreadId() on windows %level Severity level (Info, Debug, Error, Warning, Fatal, Verbose, Trace) %levshort Severity level (Short version i.e, I for Info and respectively D, E, W, F, V, T) %vlevel Verbosity level (Applicable to verbose logging) %datetime Date and/or time - Pattern is customizable - see Date/Time Format Specifiers below %user User currently running application %host Computer name application is running on %file* File name of source file (Full path) - This feature is subject to availability of __FILE__ macro of compiler %fbase* File name of source file (Only base name) %line* Source line number - This feature is subject to availability of __LINE__ macro of compile %func* Logging function %loc* Source filename and line number of logging (separated by colon) %msg Actual log message % Escape character (e.g, %%level will write %level) Subject to compiler's availability of certain macros, e.g, __LINE__, __FILE__ etc You can also specify your own format specifiers. In order to do that you can use el::Helpers::installCustomFormatSpecifier. A perfect example is %ip_addr for TCP server application; const char* getIp(void) {     return ""192.168.1.1""; }  int main(void) {     el::Helpers::installCustomFormatSpecifier(el::CustomFormatSpecifier(""%ip_addr"", getIp));     el::Loggers::reconfigureAllLoggers(el::ConfigurationType::Format, ""%datetime %level %ip_addr : %msg"");     LOG(INFO) << ""This is request from client"";     return 0; } Goto Top Date/Time Format Specifiers You can customize date/time format using following specifiers Specifier Replaced By %d Day of month (zero-padded) %a Day of the week - short (Mon, Tue, Wed, Thu, Fri, Sat, Sun) %A Day of the week - long (Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday) %M Month (zero-padded) %b Month - short (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec) %B Month - Long (January, February, March, April, May, June, July, August, September, October, November, December) %y Year - Two digit (13, 14 etc) %Y Year - Four digit (2013, 2014 etc) %h Hour (12-hour format) %H Hour (24-hour format) %m Minute (zero-padded) %s Second (zero-padded) %g Milliseconds (width is configured by ConfigurationType::MillisecondsWidth) %F AM/PM designation % Escape character Please note, date/time is limited to 30 characters at most. Goto Top Logging Flags Form some parts of logging you can set logging flags; here are flags supported: Flag Description NewLineForContainer (1) Makes sure we have new line for each container log entry AllowVerboseIfModuleNotSpecified (2) Makes sure if -vmodule is used and does not specifies a module, then verbose logging is allowed via that module. Say param was -vmodule=main*=3 and a verbose log is being written from a file called something.cpp then if this flag is enabled, log will be written otherwise it will be disallowed. Note: having this defeats purpose of -vmodule LogDetailedCrashReason (4) When handling crashes by default, detailed crash reason will be logged as well (Disabled by default) (issue #90) DisableApplicationAbortOnFatalLog (8) Allows to disable application abortion when logged using FATAL level. Note that this does not apply to default crash handlers as application should be aborted after crash signal is handled. (Not added by default) (issue #119) ImmediateFlush (16) Flushes log with every log-entry (performance sensative) - Disabled by default StrictLogFileSizeCheck (32) Makes sure log file size is checked with every log ColoredTerminalOutput (64) Terminal output will be colorful if supported by terminal. MultiLoggerSupport (128) Enables support for using multiple loggers to log single message. (E.g, CLOG(INFO, ""default"", ""network"") << This will be logged using default and network loggers;) DisablePerformanceTrackingCheckpointComparison (256) Disables checkpoint comparison DisableVModules (512) Disables usage of vmodules DisableVModulesExtensions (1024) Disables vmodules extension. This means if you have a vmodule -vmodule=main*=4 it will cover everything starting with main, where as if you do not have this defined you will be covered for any file starting with main and ending with one of the following extensions; .h .c .cpp .cc .cxx .-inl-.h .hxx .hpp. Please note following vmodule is not correct -vmodule=main.=4 with this macro not defined because this will check for main..c, notice double dots. If you want this to be valid, have a look at logging flag above: AllowVerboseIfModuleNotSpecified '?' and '' wildcards are supported HierarchicalLogging (2048) Enables hierarchical logging. This is not applicable to verbose logging. CreateLoggerAutomatically (4096) Creates logger automatically when not available. AutoSpacing (8192) Automatically adds spaces. E.g, LOG(INFO) << ""DODGE"" << ""THIS!""; will output ""DODGE THIS!"" FixedTimeFormat (16384) Applicable to performace tracking only - this prevents formatting time. E.g, 1001 ms will be logged as is, instead of formatting it as 1.01 sec You can set/unset these flags by using static el::Loggers::addFlag and el::Loggers::removeFlag. You can check to see if certain flag is available by using el::Loggers::hasFlag, all these functions take strongly-typed enum el::LoggingFlag You can set these flags by using --logging-flags command line arg. You need to enable this functionality by defining macro ELPP_LOGGING_FLAGS_FROM_ARG (You will need to make sure to use START_EASYLOGGINGPP(argc, argv) to configure arguments). Goto Top Application Arguments Following table will explain all command line arguments that you may use to define certain behaviour; You will need to initialize application arguments by using START_EASYLOGGINGPP(argc, argv) in your main(int, char**) function. Argument Description -v Activates maximum verbosity --v=2 Activates verbosity upto verbose level 2 (valid range: 0-9) --verbose Activates maximum verbosity -vmodule=MODULE_NAME Activates verbosity for files starting with main to level 1, the rest of the files depend on logging flag AllowVerboseIfModuleNotSpecified Please see Logging Flags section above. Two modules can be separated by comma. Please note vmodules are last in order of precedence of checking arguments for verbose logging, e.g, if we have -v in application arguments before vmodules, vmodules will be ignored. --logging-flags=3 Sets logging flag. In example i.e, 3, it sets logging flag to NewLineForContainer and AllowVerboseIfModuleNotSpecified. See logging flags section above for further details and values. See macros section to disable this function. --default-log-file=FILE Sets default log file for existing and future loggers. You may want to consider defining ELPP_NO_DEFAULT_LOG_FILE to prevent creation of default empty log file during pre-processing. See macros section to disable this function. Goto Top Configuration Macros Some of logging options can be set by macros, this is a thoughtful decision, for example if we have ELPP_THREAD_SAFE defined, all the thread-safe functionalities are enabled otherwise disabled (making sure over-head of thread-safety goes with it). To make it easy to remember and prevent possible conflicts, all the macros start with ELPP_ NOTE: All the macros either need to be defined before #include ""easylogging++"" - but this gets hard and unreadable if project is getting bigger so we recommend you define all these macros using -D option of compiler, for example in case of g++ you will do g++ source.cpp ... -DELPP_SYSLOG -DELPP_THREADSAFE ... Macro Name Description ELPP_DEBUG_ASSERT_FAILURE Aborts application on first assertion failure. This assertion is due to invalid input e.g, invalid configuration file etc. ELPP_UNICODE Enables Unicode support when logging. Requires START_EASYLOGGINGPP ELPP_THREAD_SAFE Enables thread-safety - make sure -lpthread linking for linux. ELPP_FORCE_USE_STD_THREAD Forces to use C++ standard library for threading (Only useful when using ELPP_THREAD_SAFE ELPP_STACKTRACE_ON_CRASH Applicable to GCC only. Enables stacktrace on application crash ELPP_DISABLE_DEFAULT_CRASH_HANDLING Disables default crash handling. You can use el::Helpers::setCrashHandler to use your own handler. ELPP_DISABLE_LOGS Disables all logs - (preprocessing) ELPP_DISABLE_DEBUG_LOGS Disables debug logs - (preprocessing) ELPP_DISABLE_INFO_LOGS Disables info logs - (preprocessing) ELPP_DISABLE_WARNING_LOGS Disables warning logs - (preprocessing) ELPP_DISABLE_ERROR_LOGS Disables error logs - (preprocessing) ELPP_DISABLE_FATAL_LOGS Disables fatal logs - (preprocessing) ELPP_DISABLE_VERBOSE_LOGS Disables verbose logs - (preprocessing) ELPP_DISABLE_TRACE_LOGS Disables trace logs - (preprocessing) ELPP_FORCE_ENV_VAR_FROM_BASH If environment variable could not be found, force using alternative bash command to find value, e.g, whoami for username. (DO NOT USE THIS MACRO WITH LD_PRELOAD FOR LIBRARIES THAT ARE ALREADY USING Easylogging++ OR YOU WILL END UP IN STACK OVERFLOW FOR PROCESSES (popen) (see issue #87 for details)) ELPP_DEFAULT_LOG_FILE Full filename where you want initial files to be created. You need to embed value of this macro with quotes, e.g, -DELPP_DEFAULT_LOG_FILE='""logs/el.gtest.log""' Note the double quotes inside single quotes, double quotes are the values for const char* and single quotes specifies value of macro ELPP_NO_DEFAULT_LOG_FILE If you dont want to initialize library with default log file, define this macro. But be sure to configure your logger with propery log filename or you will end up getting heaps of errors when trying to log to file (and TO_FILE is configured to true) ELPP_FRESH_LOG_FILE Never appends log file whenever log file is created (Use with care as it may cause some unexpected result for some users) ELPP_DEBUG_ERRORS If you wish to find out internal errors raised by Easylogging++ that can be because of configuration or something else, you can enable them by defining this macro. You will get your errors on standard output i.e, terminal or command prompt. ELPP_DISABLE_CUSTOM_FORMAT_SPECIFIERS Forcefully disables custom format specifiers ELPP_DISABLE_LOGGING_FLAGS_FROM_ARG Forcefully disables ability to set logging flags using command-line arguments ELPP_DISABLE_LOG_FILE_FROM_ARG Forcefully disables ability to set default log file from command-line arguments ELPP_WINSOCK2 On windows system force to use winsock2.h instead of winsock.h when WIN32_LEAN_AND_MEAN is defined ELPP_CUSTOM_COUT (advanced) Resolves to a value e.g, #define ELPP_CUSTOM_COUT qDebug() or #define ELPP_CUSTOM_COUT std::cerr. This will use the value for standard output (instead of using std::cout ELPP_CUSTOM_COUT_LINE (advanced) Used with ELPP_CUSTOM_COUT to define how to write a log line with custom cout. e.g, #define ELPP_CUSTOM_COUT_LINE(msg) QString::fromStdString(msg).trimmed() Goto Top Reading Configurations If you wish to read configurations of certain logger, you can do so by using typedConfigurations() function in Logger class. el::Logger* l = el::Loggers::getLogger(""default""); bool enabled = l->typedConfigurations()->enabled(el::Level::Info); // Or to read log format/pattern std::string format =          l->typedConfigurations()->logFormat(el::Level::Info).format(); Goto Top Logging Logging in easylogging++ is done using collection of macros. This is to make it easier for user and to prevent them knowing about unnecessary greater details of how things are done. Basic You are provided with two basic macros that you can use in order to write logs: LOG(LEVEL) CLOG(LEVEL, logger ID) LOG uses 'default' logger while in CLOG (Custom LOG) you specify the logger ID. For LEVELs please refer to Configurations - Levels section above. Different loggers might have different configurations depending on your need, you may as well write custom macro to access custom logger. You also have different macros for verbose logging that is explained in section below. Here is very simple example of using these macros after you have initialized easylogging++. LOG(INFO) << ""This is info log""; CLOG(ERROR, ""performance"") << ""This is info log using performance logger""; There is another way to use same macro i.e, LOG (and associated macros). This is that you define macro ELPP_DEFAULT_LOGGER and ELPP_CURR_FILE_PERFORMANCE_LOGGER_ID with logger ID that is already registered, and now when you use LOG macro, it automatically will use specified logger instead of default logger. Please note that this should be defined in source file instead of header file. This is so that when we include header we dont accidently use invalid logger. A quick example is here #ifndef ELPP_DEFAULT_LOGGER #   define ELPP_DEFAULT_LOGGER ""update_manager"" #endif #ifndef ELPP_CURR_FILE_PERFORMANCE_LOGGER_ID #   define ELPP_CURR_FILE_PERFORMANCE_LOGGER_ID ELPP_DEFAULT_LOGGER #endif #include ""easylogging++.h"" UpdateManager::UpdateManager {     _TRACE; // Logs using LOG(TRACE) provided logger is already registered - i.e, update_manager     LOG(INFO) << ""This will log using update_manager logger as well""; } #include ""easylogging++.h"" UpdateManager::UpdateManager {     _TRACE; // Logs using LOG(TRACE) using default logger because no `ELPP_DEFAULT_LOGGER` is defined unless you have it in makefile } You can also write logs by using Logger class directly. This feature is available on compilers that support variadic templates. You can explore more by looking at samples/STL/logger-log-functions.cpp. Goto Top Conditional Logging Easylogging++ provides certain aspects of logging, one these aspects is conditional logging, i.e, log will be written only if certain condition fulfils. This comes very handy in some situations. Helper macros end with _IF; LOG_IF(condition, LEVEL) CLOG_IF(condition, LEVEL, logger ID) Some examples: LOG_IF(condition, INFO) << ""Logged if condition is true"";  LOG_IF(false, WARNING) << ""Never logged""; CLOG_IF(true, INFO, ""performance"") << ""Always logged (performance logger)"" Same macros are available for verbose logging with V in the beginning, i.e, VLOG_IF and CVLOG_IF. see verbose logging section below for further information. You may have as complicated conditions as you want depending on your need. Goto Top Occasional Logging Occasional logging is another useful aspect of logging with Easylogging++. This means a log will be written if it's hit certain times or part of certain times, e.g, every 10th hit or 100th hit or 2nd hit. Helper macros end with _EVERY_N; LOG_EVERY_N(n, LEVEL) CLOG_EVERY_N(n, LEVEL, logger ID) Other Hit Counts Based Logging There are some other ways of logging as well based on hit counts. These useful macros are LOG_AFTER_N(n, LEVEL); Only logs when we have reached hit counts of n LOG_N_TIMES(n, LEVEL); Logs n times Some examples: for (int i = 1; i <= 10; ++i) {    LOG_EVERY_N(2, INFO) << ""Logged every second iter""; } // 5 logs written; 2, 4, 6, 7, 10  for (int i = 1; i <= 10; ++i) {    LOG_AFTER_N(2, INFO) << ""Log after 2 hits; "" << i; } // 8 logs written; 3, 4, 5, 6, 7, 8, 9, 10  for (int i = 1; i <= 100; ++i) {    LOG_N_TIMES(3, INFO) << ""Log only 3 times; "" << i; } // 3 logs writter; 1, 2, 3 Same versions of macros are available for DEBUG only mode, these macros start with D (for debug) followed by the same name. e.g, DLOG to log only in debug mode (i.e, when _DEBUG is defined or NDEBUG is undefined) Goto Top printf Like Logging For compilers that support C++11's variadic templates, ability to log like ""printf"" is available. This is done by using Logger class. This feature is thread and type safe (as we do not use any macros like LOG(INFO) etc) This is done in two steps: Pulling registered logger using el::Loggers::getLogger(<logger_id>); Using one of logging functions The only difference from printf is that logging using these functions require %v for each arg (This is for type-safety); instead of custom format specifiers. You can escape this by %%v Following are various function signatures: info(const char*, const T&, const Args&...) warn(const char*, const T&, const Args&...) error(const char*, const T&, const Args&...) debug(const char*, const T&, const Args&...) fatal(const char*, const T&, const Args&...) trace(const char*, const T&, const Args&...) verbose(int vlevel, const char*, const T&, const Args&...) Simple example: // Use default logger el::Logger* defaultLogger = el::Loggers::getLogger(""default"");  // STL logging (`ELPP_STL_LOGGING` should be defined) std::vector<int> i; i.push_back(1); defaultLogger->warn(""My first ultimate log message %v %v %v"", 123, 222, i);  // Escaping defaultLogger->info(""My first ultimate log message %% %%v %v %v"", 123, 222);  %file, %func %line and %loc format specifiers will not work with printf like logging. Goto Top Verbose Logging Basic Verbose logging is useful in every software to record more information than usual. Very useful for troubleshooting. Following are verbose logging specific macros; VLOG(verbose-level) CVLOG(verbose-level, logger ID) Goto Top Conditional and Occasional Logging Verbose logging also has conditional and occasional logging aspects i.e, VLOG_IF(condition, verbose-level) CVLOG_IF(condition, verbose-level, loggerID) VLOG_EVERY_N(n, verbose-level) CVLOG_EVERY_N(n, verbose-level, loggerID) VLOG_AFTER_N(n, verbose-level) CVLOG_AFTER_N(n, verbose-level, loggerID) VLOG_N_TIMES(n, verbose-level) CVLOG_N_TIMES(n, verbose-level, loggerID) Goto Top Verbose-Level Verbose level is level of verbosity that can have range of 1-9. Verbose level will not be active unless you either set application arguments for it. Please read through Application Arguments section to understand more about verbose logging. In order to change verbose level on the fly, please use Loggers::setVerboseLevel(base::type::VerboseLevel) aka Loggers::setVerboseLevel(int) function. (You can check current verbose level by Loggers::verboseLevel() Goto Top Check If Verbose Logging Is On You can use a macro VLOG_IS_ON(verbose-level) to check to see if certain logging is on for source file for specified verbose level. This returns boolean that you can embed into if condition. if (VLOG_IS_ON(2)) {    // Verbosity level 2 is on for this file } Goto Top VModule VModule is functionality for verbose logging (as mentioned in above table) where you can specify verbosity by modules/source file. Following are some examples with explanation; Any of vmodule below starts with -vmodule= and LoggingFlag::DisableVModulesExtensions flag not set. Vmodule can completely be disabled by adding flag LoggingFlag::DisableVModules Example with LoggingFlag::AllowVerboseIfModuleNotSpecified flag; main=3,parser*=4: A bad example but good enough for explanation; Verbosity for any following file will be allowed; main{.h, .c, .cpp, .cc, .cxx, -inl.h, .hxx, .hpp} parser{.h, .c, .cpp, .cc, .cxx, -inl.h, .hxx, .hpp} No other file will be logged for verbose level Example with no LoggingFlag::AllowVerboseIfModuleNotSpecified flag; main=3,parser*=4: Same explanation but any other file that does not fall under specified modules will have verbose logging enabled. In order to change vmodules on the fly (instead of via command line args) - use Loggers::setVModules(const char*) where const char* represents the modules e.g, main=3,parser*=4 (as per above example) Goto Top STL Logging As mentioned earlier, with easylogging++, you can log your STL templates including most containers. In order to do so you will need to define ELPP_STL_LOGGING macro. This enables including all the necessary headers and defines all necessary functions. For performance, containers are limited to log maximum of 100 entries. This behaviour can be changed by changed header file (base::consts::kMaxLogPerContainer) but not recommended as in order to log, writer has to go through each entry causing potential delays. But if you are not really concerned with performance, you may change this value. Goto Top Supported Templates Following templates are supported as part of STL Logging; note: basic and primitive types e.g, std::string or long are not listed as they is supported anyway, following list only contains non-basic types e.g, containers or bitset etc. * * * * std::vector std::list std::deque std::queue std::stack std::priority_queue std::set std::multiset std::pair std::bitset std::map std::multimap Some C++11 specific templates are supported by further explicit macro definitions; note these also need ELPP_STL_LOGGING Template Macro Needed std::array ELPP_LOG_STD_ARRAY std::unordered_map ELPP_LOG_UNORDERED_MAP std::unordered_multimap ELPP_LOG_UNORDERED_MAP std::unordered_set ELPP_LOG_UNORDERED_SET std::unordered_multiset ELPP_LOG_UNORDERED_SET Standard manipulators are also supported, in addition std::stringstream is also supported. Goto Top Registering New Loggers Loggers are unique in logger repository by ID. You can register new logger the same way as you would get logger. Using getLogger(.., ..) from el::Loggers helper class. This function takes two params, first being ID and second being boolean (optional) to whether or not to register new logger if does not already exist and returns pointer to existing (or newly created) el::Logger class. This second param is optional and defaults to true. If you set it to false and logger does not exist already, it will return nullptr. By default, Easylogging++ registers three loggers (+ an internal logger); Default logger (ID: default) Performance logger (ID: performance) Syslog logger (if ELPP_SYSLOG macro is defined) (ID: syslog) If you wish to register a new logger, say e.g, with ID business el::Logger* businessLogger = el::Loggers::getLogger(""business""); This will register a new logger if it does not already exist otherwise it will get an existing one. But if you have passed in false to the second param and logger does not already exist, businessLogger will be nullptr. When you register a new logger, default configurations are used (see Default Configurations section above). Also worth noticing, logger IDs are case sensitive. Goto Top Unregister Loggers You may unregister loggers; any logger except for default. You should be really careful with this function, only unregister loggers that you have created yourself otherwise you may end up in unexpected errors. For example, you dont want to unregister logger that is used or initialized by a third-party library and it may be using it. To unregister logger, use el::Loggers::unregisterLogger(""logger-id"") Goto Top Populating Existing Logger IDs Although this is a rare situation but if you wish to get list of all the logger IDs currently in repository, you may use el::Loggers::populateAllLoggerIds(std::vector<std::string>&) function to do that. The list passed in is cleared and filled up with all existing logger IDs. Goto Top Sharing Logging Repository For advance logging, you can share your logging repositories to shared or static libraries, or even from library to application. This is rare case but a very good example is as follows; Let's say we have an application that uses easylogging++ and has it's own configuration, now you are importing library that uses easylogging++ and wants to access logging repository of main application. You can do this using two ways; Instead of using INITIALIZE_EASYLOGGINGPP you use SHARE_EASYLOGGINGPP(access-function-to-repository) Instead of using INITIALIZE_EASYLOGGINGPP you use INITIALIZE_NULL_EASYLOGGINGPP and then el::Helpers::setStorage(el::base::type::StoragePointer) Refer this for details After you share repository, you can reconfigure the only repository (i.e, the one that is used by application and library both), and use both to write logs. A very good example is in samples/VC++/DLLSample Goto Top Extra Features Easylogging++ is feature-rich logging library. Apart from features already mentioned above, here are some extra features. If code snippets don't make sense and further sample is needed, there are many samples available at github repository (samples). Feel free to browse around. Performance Tracking One of the most notable features of Easylogging++ is its ability to track performance of your function or block of function. Please note, this is not backward compatible as previously we had macros that user must had defined in order to track performance and I am sure many users had avoided in doing so. (Read v8.91 ReadMe for older way of doing it) The new way of tracking performance is much easier and reliable. All you need to do is use one of two macros from where you want to start tracking. TIMED_FUNC(obj-name) TIMED_SCOPE(obj-name, block-name) TIMED_BLOCK(obj-name, block-name) An example that just uses usleep void performHeavyTask(int iter) {    TIMED_FUNC(timerObj);    // Some initializations    // Some more heavy tasks    usleep(5000);    while (iter-- > 0) {        TIMED_SCOPE(timerBlkObj, ""heavy-iter"");        // Perform some heavy task in each iter        usleep(10000);    } } The result of above execution for iter = 10, is as following 06:22:31,368 INFO Executed [heavy-iter] in [10 ms] 06:22:31,379 INFO Executed [heavy-iter] in [10 ms] 06:22:31,389 INFO Executed [heavy-iter] in [10 ms] 06:22:31,399 INFO Executed [heavy-iter] in [10 ms] 06:22:31,409 INFO Executed [heavy-iter] in [10 ms] 06:22:31,419 INFO Executed [heavy-iter] in [10 ms] 06:22:31,429 INFO Executed [heavy-iter] in [10 ms] 06:22:31,440 INFO Executed [heavy-iter] in [10 ms] 06:22:31,450 INFO Executed [heavy-iter] in [10 ms] 06:22:31,460 INFO Executed [heavy-iter] in [10 ms] 06:22:31,460 INFO Executed [void performHeavyTask(int)] in [106 ms]  In the above example, we have used both the macros. In line-2 we have TIMED_FUNC with object name timerObj and line-7 we have TIMED_SCOPE with object name timerBlkObj and block name heavy-iter. Notice how block name is thrown out to the logs with every hit. (Note: TIMED_FUNC is TIMED_BLOC with block name = function name) You might wonder why do we need object name. Well easylogging++ performance tracking feature takes it further and provides ability to add, what's called checkpoints. Checkpoints have two macros: PERFORMANCE_CHECKPOINT(timed-block-obj-name) PERFORMANCE_CHECKPOINT_WITH_ID(timed-block-obj-name, id) Take a look at following example void performHeavyTask(int iter) {    TIMED_FUNC(timerObj);    // Some initializations    // Some more heavy tasks    usleep(5000);    while (iter-- > 0) {        TIMED_SCOPE(timerBlkObj, ""heavy-iter"");        // Perform some heavy task in each iter        // Notice following sleep varies with each iter        usleep(iter * 1000);        if (iter % 3) {            PERFORMANCE_CHECKPOINT(timerBlkObj);        }    } } Notice macro on line-11 (also note comment on line-8. It's checkpoint for heavy-iter block. Now notice following output 06:33:07,558 INFO Executed [heavy-iter] in [9 ms] 06:33:07,566 INFO Performance checkpoint for block [heavy-iter] : [8 ms] 06:33:07,566 INFO Executed [heavy-iter] in [8 ms] 06:33:07,573 INFO Performance checkpoint for block [heavy-iter] : [7 ms] 06:33:07,573 INFO Executed [heavy-iter] in [7 ms] 06:33:07,579 INFO Executed [heavy-iter] in [6 ms] 06:33:07,584 INFO Performance checkpoint for block [heavy-iter] : [5 ms] 06:33:07,584 INFO Executed [heavy-iter] in [5 ms] 06:33:07,589 INFO Performance checkpoint for block [heavy-iter] : [4 ms] 06:33:07,589 INFO Executed [heavy-iter] in [4 ms] 06:33:07,592 INFO Executed [heavy-iter] in [3 ms] 06:33:07,594 INFO Performance checkpoint for block [heavy-iter] : [2 ms] 06:33:07,594 INFO Executed [heavy-iter] in [2 ms] 06:33:07,595 INFO Performance checkpoint for block [heavy-iter] : [1 ms] 06:33:07,595 INFO Executed [heavy-iter] in [1 ms] 06:33:07,595 INFO Executed [heavy-iter] in [0 ms] 06:33:07,595 INFO Executed [void performHeavyTask(int)] in [51 ms]  You can also compare two checkpoints if they are in sub-blocks e.g, changing from PERFORMANCE_CHECKPOINT(timerBlkObj) to PERFORMANCE_CHECKPOINT(timerObj) will result in following output 06:40:35,522 INFO Performance checkpoint for block [void performHeavyTask(int)] : [51 ms ([1 ms] from last checkpoint)]  If you had used PERFORMANCE_CHECKPOINT_WITH_ID(timerObj, ""mychkpnt""); instead, you will get 06:44:37,979 INFO Performance checkpoint [mychkpnt] for block [void performHeavyTask(int)] : [51 ms ([1 ms] from checkpoint 'mychkpnt')]  Following are some useful macros that you can define to change the behaviour Macro Name Description ELPP_DISABLE_PERFORMANCE_TRACKING Disables performance tracking ELPP_PERFORMANCE_MICROSECONDS Track up-to microseconds (this includes initializing of el::base::PerformanceTracker as well so might time not be 100% accurate) Notes: Performance tracking uses performance logger (INFO level) by default unless el::base::PerformanceTracker is constructed manually (not using macro - not recommended). When configuring other loggers, make sure you configure this one as well. In above examples, timerObj and timerBlkObj is of type el::base::PerformanceTracker and checkpoint() can be accessed by timerObj.checkpoint() but not recommended as this will override behaviour of using macros, behaviour like location of checkpoint. In order to access el::base::PerformanceTracker while in TIMED_BLOCK, you can use timerObj.timer TIMED_BLOCK macro resolves to a single-looped for-loop, so be careful where you define TIMED_BLOCK, if for-loop is allowed in the line where you use it, you should have no errors. You may be interested in python script to parse performance logs Goto Top Make Use of Performance Tracking Data If you wish to capture performance tracking data right after it is finished, you can do so by extending el::PerformanceTrackingCallback. In order to install this handler, use void Helpers::installPerformanceTrackingCallback<T>(const std::string& id). Where T is type of your handler. If you wish to uninstall a callback, you can do so by using Helpers::uninstallPerformanceTrackingCallback<T>(const std::string& id). See samples for details DO NOT TRACK PERFORMANCE IN THIS HANDLER OR YOU WILL END UP IN INFINITE-LOOP Goto Top Log File Rotating Easylogging++ has ability to roll out (or throw away / rotate) log files if they reach certain limit. You can configure this by setting Max_Log_File_Size. See Configuration section above. If you are having failure in log-rollout, you may have failed to add flag i.e, el::LoggingFlags::StrictLogFileSizeCheck. This feature has it's own section in this reference manual because you can do stuffs with the file being thrown away. This is useful, for example if you wish to back this file up etc. This can be done by using el::Helpers::installPreRollOutCallback(const PreRollOutCallback& handler) where PreRollOutCallback is typedef of type std::function<void(const char*, std::size_t)>. Please note following if you are using this feature There is a sample available that you can use as basis. You should not log anything in this function. This is because logger would already be locked in multi-threaded application and you can run into dead lock conditions. If you are sure that you are not going to log to same file and not using same logger, feel free to give it a try. Goto Top Crash Handling Easylogging++ provides ability to handle unexpected crashes for GCC compilers. This is active by default and can be disabled by defining macro ELPP_DISABLE_DEFAULT_CRASH_HANDLING. By doing so you are telling library not to handle any crashes. Later on if you wish to handle crash yourself, you can assign crash handler of type void func(int) where int is signal caught. Following signals are handled; SIGABRT (If ELPP_HANDLE_SIGABRT macro is defined) SIGFPE SIGILL SIGSEGV SIGINT Stacktraces are not printed by default, in order to do so define macro ELPP_STACKTRACE_ON_CRASH. Remember, stack trace is only available for GCC compiler. Default handler and stack trace uses default logger. Following are some useful macros that you can define to change the behaviour Macro Name Description ELPP_DISABLE_DEFAULT_CRASH_HANDLING Disables default crash handling. ELPP_HANDLE_SIGABRT Enables handling SIGABRT. This is disabled by default to prevent annoying CTRL + C behaviour when you wish to abort. Goto Top Installing Custom Crash Handlers You can use your own crash handler by using el::Helpers::setCrashHandler(const el::base::debug::CrashHandler::Handler&);. Make sure to abort application at the end of your crash handler using el::Helpers::crashAbort(int). If you fail to do so, you will get into endless loop of crashes. Here is a good example of your own handler #include ""easylogging++.h""  INITIALIZE_EASYLOGGINGPP  void myCrashHandler(int sig) {     LOG(ERROR) << ""Woops! Crashed!"";          // FOLLOWING LINE IS ABSOLUTELY NEEDED AT THE END IN ORDER TO ABORT APPLICATION     el::Helpers::crashAbort(sig); } int main(void) {     el::Helpers::setCrashHandler(myCrashHandler);      LOG(INFO) << ""My crash handler!"";      int* i;     *i = 0; // Crash!      return 0; } If you wish to log reason for crash you can do so by using el::Helpers::logCrashReason(int, bool, const el::Level&, const char*). Following are default parameters for this function:  bool stackTraceIfAvailable = false  const el::Level& level = el::Level::Fatal  const char* logger = ""default"" Goto Top Stacktrace Easylogging++ supports stack trace printing for GCC compilers. You can print stack trace at anytime by calling el::base::debug::StackTrace(), formatting will be done automatically. Note, if you are using non-GCC compiler, you will end-up getting empty output. Goto Top Multi-threading Easylogging++ is thread-safe. By default thread-safety is disabled. You can enable it by defining ELPP_THREAD_SAFE otherwise you will see unexpected results. This is intentional to make library efficient for single threaded application. Goto Top CHECK Macros Easylogging++ supports CHECK macros, with these macros you can quickly check whether certain condition fulfills or not. If not Easylogging++ writes FATAL log, causing application to stop (unless defined macro to prevent stopping application on fatal). CHECK Name Notes + Example CHECK(condition) Checks for condition e.g, CHECK(isLoggedIn()) << ""Not logged in""; CHECK_EQ(a, b) Equality check e.g, CHECK_EQ(getId(), getLoggedOnId()) << ""Invalid user logged in""; CHECK_NE(a, b) Inequality check e.g, CHECK_NE(isUserBlocked(userId), false) << ""User is blocked""; CHECK_LT(a, b) Less than e.g, CHECK_LT(1, 2) << ""How 1 is not less than 2""; CHECK_GT(a, b) Greater than e.g, CHECK_GT(2, 1) << ""How 2 is not greater than 1?""; CHECK_LE(a, b) Less than or equal e.g, CHECK_LE(1, 1) << ""1 is not equal or less than 1""; CHECK_GE(a, b) Greater than or equal e.g, CHECK_GE(1, 1) << ""1 is not equal or greater than 1""; CHECK_NOTNULL(pointer) Ensures pointer is not null - if OK returns pointer e.g, explicit MyClass(Obj* obj) : m_obj(CHECK_NOT_NULL(obj)) {} CHECK_STREQ(str1, str2) C-string equality (case-sensitive) e.g, CHECK_STREQ(argv[1], ""0"") << ""First arg cannot be 0""; CHECK_STRNE(str1, str2) C-string inequality (case-sensitive) e.g, CHECK_STRNE(username1, username2) << ""Usernames cannot be same""; CHECK_STRCASEEQ(str1, str2) C-string inequality (case-insensitive) e.g, CHECK_CASESTREQ(argv[1], ""Z"") << ""First arg cannot be 'z' or 'Z'""; CHECK_STRCASENE(str1, str2) C-string inequality (case-insensitive) e.g, CHECK_STRCASENE(username1, username2) << ""Same username not allowed""; CHECK_BOUNDS(val, min, max) Checks that val falls under the min and max range e.g, CHECK_BOUNDS(i, 0, list.size() - 1) << ""Index out of bounds""; Same versions of macros are available for DEBUG only mode, these macros start with D (for debug) followed by the same name. e.g, DCHECK to check only in debug mode (i.e, when _DEBUG is defined or NDEBUG is undefined) Goto Top Logging perror() Easylogging++ supports perror() styled logging using PLOG(LEVEL), PLOG_IF(Condition, LEVEL), and PCHECK() using default logger; and for custom logger use CPLOG(LEVEL, LoggerId), CPLOG_IF(Condition, LEVEL, LoggerId). This will append : log-error [errno] in the end of log line. Goto Top Syslog Easylogging++ supports syslog for platforms that have syslog.h header. In order to enable it, you need to define ELPP_SYSLOG. If your platform does not have syslog.h, make sure you do not define this macro or you will end up in errors. Once you are ready to use syslog, you can do so by using one of SYSLOG(LEVEL), SYSLOG_IF(Condition, LEVEL), SYSLOG_EVERY_N(n, LEVEL) and uses logger ID: syslog. If you want to use custom logger you can do so by using CSYSLOG(LEVEL, loggerId) or CSYSLOG_IF(Condition, LEVEL, loggerId) or CSYSLOG_EVERY_N(n, LEVEL, loggerId) Syslog in Easylogging++ supports C++ styled streams logging, following example; #include ""easylogging++.h""  INITIALIZE_EASYLOGGINGPP int main(void) {     ELPP_INITIALIZE_SYSLOG(""my_proc"", LOG_PID | LOG_CONS | LOG_PERROR, LOG_USER) // This is optional, you may not add it if you dont want to specify options     // Alternatively you may do     // el::SysLogInitializer elSyslogInit(""my_proc"", LOG_PID | LOG_CONS | LOG_PERROR, LOG_USER);     SYSLOG(INFO) << ""This is syslog - read it from /var/log/syslog""     return 0; } Syslog support for Easylogging++ only supports following levels; each level is corresponded with syslog priority as following INFO (LOG_INFO) DEBUG (LOG_DEBUG) WARNING (LOG_WARNING) ERROR (LOG_ERR) FATAL (LOG_EMERG) Following levels are not supported and correspond to LOG_NOTICE: TRACE, whereas VERBOSE level is completely not supported Goto Top Qt Logging Easylogging++ has complete logging support for Qt core library. define ELPP_QT_LOGGING macro. This will include all the headers supported Qt logging. Once you did that, you should be good to go. Following Qt classes and containers are supported by Easylogging++ v9.0+ * * * * * * QString QByteArray QLatin QList QVector QQueue QSet QPair QMap QMultiMap QHash QMultiHash QLinkedList QStack QChar q[u]int[64] Similar to STL logging, Qt containers are also limit to log 100 entries per log, you can change this behaviour by changing base::consts::kMaxLogPerContainer from header but this is not recommended as this was done for performance purposes. Also note, if you are logging a container that contains custom class, make sure you have read Extending Library section below. Goto Top Boost Logging Easylogging++ supports some of boost templates. In order to enable boost logging, define macro ELPP_BOOST_LOGGING Following table shows the templates supported. * * boost::container::vector boost::container::stable_vector boost::container::map boost::container::flat_map boost::container::set boost::container::flat_set boost::container::deque boost::container::list boost::container::string Goto Top wxWidgets Logging Easylogging++ supports some of wxWidgets templates. In order to enable wxWidgets logging, define macro ELPP_WXWIDGETS_LOGGING Following table shows the templates supported. * * * * * * wxString wxVector wxList wxString wxHashSet wxHashMap wxWidgets has its own way of declaring and defining some templates e.g, wxList where you use WX_DECLARE_LIST macro to declare a list. In order to setup a container for logging that holds pointers to object, use ELPP_WX_PTR_ENABLED, otherwise if container holds actual object e.g, wxHashSet use ELPP_WX_ENABLED. For containers like wxHashMap because it contains value and pair, use ELPP_WX_HASH_MAP_ENABLED macro. // wxList example WX_DECLARE_LIST(int, MyList); WX_DEFINE_LIST(MyList); // Following line does the trick ELPP_WX_PTR_ENABLED(MyList);  // wxHashSet example WX_DECLARE_HASH_SET(int, wxIntegerHash, wxIntegerEqual, IntHashSet); // Following line does the trick! ELPP_WX_ENABLED(IntHashSet)  // wxHashMap example WX_DECLARE_STRING_HASH_MAP(wxString, MyHashMap); // Following line does the trick ELPP_WX_HASH_MAP_ENABLED(MyHashMap) You may also have a look at wxWidgets sample Goto Top Extending Library Logging Your Own Class You can log your own classes by extending el::Loggable class and implementing pure-virtual function void log(std::ostream& os) const. Following example shows a good way to extend a class. #include ""easylogging++.h""  INITIALIZE_EASYLOGGINGPP class Integer : public el::Loggable { public:     Integer(int i) : m_underlyingInt(i) {     }     Integer& operator=(const Integer& integer) {         m_underlyingInt = integer.m_underlyingInt;         return *this;     }     // Following line does the trick!     // Note: el::base::type::ostream_t is either std::wostream or std::ostream depending on unicode enabled or not     virtual void log(el::base::type::ostream_t& os) const {         os << m_underlyingInt;     } private:     int m_underlyingInt; };  int main(void) {     Integer count = 5;     LOG(INFO) << count;     return 0; } Goto Top Logging Third-party Class Let's say you have third-party class that you don't have access to make changes to, and it's not yet loggable. In order to make it loggable, you can use MAKE_LOGGABLE(ClassType, ClassInstance, OutputStreamInstance) to make it Easylogging++ friendly. Following sample shows a good usage: #include ""easylogging++.h""  INITIALIZE_EASYLOGGINGPP  class Integer { public:     Integer(int i) : m_underlyingInt(i) {     }     Integer& operator=(const Integer& integer) {         m_underlyingInt = integer.m_underlyingInt;         return *this;     }     int getInt(void) const { return m_underlyingInt; } private:     int m_underlyingInt; };  // Following line does the trick! inline MAKE_LOGGABLE(Integer, integer, os) {     os << integer.getInt();     return os; } int main(void) {     Integer count = 5;     LOG(INFO) << count;     return 0; } Another very nice example (to log std::chrono::system_clock::time_point) inline MAKE_LOGGABLE(std::chrono::system_clock::time_point, when, os) {     time_t t = std::chrono::system_clock::to_time_t(when);     auto tm = std::localtime(&t);     char buf[1024];     strftime(buf,sizeof(buf), ""%F %T (%Z)"", tm);     os << buf;     return os; } This may not be practically best implementation but you get the point. Just be careful with this as having a time-consuming overloading of log(el::base::type::ostream_t& os) and MAKE_LOGGABLE, they get called everytime class is being logged. Goto Top Manually Flushing and Rolling Log Files You can manually flush log files using el::Logger::flush() (to flush single logger with all referencing log files) or el::Loggers::flushAll() (to flush all log files for all levels). If you have not set flag LoggingFlag::StrictLogFileSizeCheck for some reason, you can manually check for log files that need rolling; by using el::Helpers::validateFileRolling(el::Logger*, const el::Level&). Goto Top Log Dispatch Callback If you wish to capture log message right after it is dispatched, you can do so by having a class that extends el::LogDispatchCallback and implement the pure-virtual functions, then install it at anytime using el::Helpers::installLogDispatchCallback<T>(const std::string&). If you wish to uninstall a pre-installed handler with same ID, you can do so by using el::Helpers::uninstallLogDispatchCallback<T>(const std::string&) DO NOT LOG ANYTHING IN THIS HANDLER OR YOU WILL END UP IN INFINITE-LOOP Goto Top Asynchronous Logging Asynchronous logging is in experimental stages and they are not widely promoted. You may enable and test this feature by defining macro ELPP_EXPERIMENTAL_ASYNC and if you find some issue with the feature please report in this issue. Reporting issues always help for constant improvements. Please note: Asynchronous will only work with few compilers (it purely uses std::thread) Compiler should support std::this_thread::sleep_for. This restriction may (or may not) be removed in future (stable) version of asynchronous logging. You should not rely on asynchronous logging in production, this is because feature is in experiemental stages. Goto Top Helper Classes There are static helper classes available to make it easy to do stuffs; el::Helpers el::Loggers You can do various cool stuffs using functions in these classes, see this issue for instance. Goto Top Contribution Submitting Patches You can submit patches to develop branch and we will try and merge them. Since it's based on single header, it can be sometimes difficult to merge without having merge conflicts. Goto Top Reporting a Bug If you have found a bug and wish to report it, feel free to do so at github issue tracker. I will try to look at it as soon as possible. Some information should be provided to make it easy to reproduce; Platform (OS, Compiler) Log file location Macros defined (on compilation) OR simple compilation Please assign issue label. Try to provide as much information as possible. Any bug with no clear information will be ignored and closed. Goto Top Donation Easylogging++ is free to use. You can check the details on where do donations go by clicking link below. Goto Top Compatibility Easylogging++ requires a decent C++0x complient compiler. Some compilers known to work with v9.0+ are shown in table below, for older versions please refer to readme on corresponding release at github ***** Compiler/Platform Notes GCC 4.7+ Stack trace logging. Very close to support GCC 4.6 if it had supported strong enum types casting to underlying type. It causes internal compiler error. Clang++ 3.1+ Stack trace logging only with gcc compliant. Intel C++ 13.0+ Workarounds to support: Use if instead of switch on strong enum type. No final keyword etc. Stack trace logging only with gcc compliant Visual C++ 11.0+ Tested with VS2012, VS2013; Use of argument templates instead of variadic templates. CRT warnings control. No stack trace logging. MinGW (gcc version 4.7+) Workarounds to support: Mutex wrapper, no stack trace logging. No thread ID on windows TDM-GCC 4.7.1 Tested with TDM-GCC 4.7.1 32 and 64 bit compilers Cygwin Tested with gcc version 4.8+ Dev C++ 5.4+ Tested with Dev-C++ 5.4.2 using TDM-GCC 4.7.1 32 & 64-bit compilers Operating systems that have been tested are shown in table below. Easylogging++ should work on other major operating systems that are not in the list. ***** Operating System Notes Windows 10 Tested on 64-bit, should also work on 32-bit Windows 8 Tested on 64-bit, should also work on 32-bit Windows 7 Tested on 64-bit, should also work on 32-bit Windows XP Tested on 32-bit, should also work on 64-bit Mac OSX Clang++ 3.1, g++ (You need -std=c++11 -stdlib=libc++ to successfully compile) Scientific Linux 6.2 Tested using Intel C++ 13.1.3 (gcc version 4.4.6 compatibility) Linux Mint 14 64-bit, mainly developed on this machine using all compatible linux compilers Fedora 19 64-bit, using g++ 4.8.1 Ubuntu 13.04 64-bit, using g++ 4.7.3 (libstdc++6-4.7-dev) FreeBSD (from github user) Android Tested with C4droid (g++) on Galaxy Tab 2 RaspberryPi 7.6 Tested with 7.6.2-1.1 (gcc version 4.9.1 (Raspbian 4.9.1-1)) by contributor Solaris i86 Tested by contributor Easylogging++ has also been tested with following C++ libraries; ***** Library Notes Qt Tested with Qt 4.6.2, Qt 5 and Qt 5.5 (with C++0x and C++11) Boost Tested with boost 1.51 wxWidgets Tested with wxWidgets 2.9.4 gtkmm Tested with gtkmm 2.4 Goto Top Licence The MIT License (MIT)  Copyright (c) 2015 muflihun.com  https://github.com/easylogging/easyloggingpp http://easylogging.muflihun.com http://muflihun.com  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  Goto Top Disclaimer Icons used in this manual (in compatibility section) are solely for information readability purposes. I do not own these icons. If anyone has issues with usage of these icon, please feel free to contact me via company's email and I will look for an alternative. Company's email address is required so that I can verify the ownership, any other email address for this purpose will be ignored. ""Pencil +"" icon is Easylogging++ logo and should only be used where giving credit to Easylogging++ library. Goto Top Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/easylogging/easyloggingpp"	"Single header only C++ logging library. [MIT]"	"true"
"Logging"	"website"	"http://easylogging.org/"	"Single header only C++ logging library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Single header only C++ logging library. [MIT]"	"false"
"Logging"	"G3log"	"https://github.com/KjellKod/g3log"	"Asynchronous logger with Dynamic Sinks. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"154"	"28"	"54"	"GitHub - KjellKod/g3log: G3log is  an asynchronous, ""crash safe"", logger that is easy to use with default logging sinks or you can add your own.  G3log is made with plain C++11 with no external libraries (except gtest used for unit tests). G3log is made to be cross-platform, currently running on OSX, Windows and several Linux distros.  See Readme below for details of usage. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 154 Fork 54 KjellKod/g3log Code Issues 6 Pull requests 2 Pulse Graphs G3log is an asynchronous, ""crash safe"", logger that is easy to use with default logging sinks or you can add your own. G3log is made with plain C++11 with no external libraries (except gtest used for unit tests). G3log is made to be cross-platform, currently running on OSX, Windows and several Linux distros. See Readme below for details of usage. http://github.com/KjellKod/g3log 441 commits 6 branches 3 releases 18 contributors C++ 90.0% CMake 9.7% Shell 0.3% C++ CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags API_Documentation Fatal_exit_For_Erronous_Initialization Thread_local gimesketvirtadieni_upstream_time master test_warnings Nothing to show version-1.0 v1.1 1.2 Nothing to show New pull request Latest commit e0d4434 Jun 23, 2016 KjellKod committed on GitHub Update logworker.cpp (#103) Permalink Failed to load latest commit information. 3rdParty/gtest Removed obsolete gtest and Qt project file Sep 11, 2014 example The sigsegv example exited by sigfpe. Fixed! Nov 22, 2015 scripts fixing travis Jul 19, 2015 src Update logworker.cpp (#103) Jun 23, 2016 test_main g2log.hpp is kept as a helper include. It will pull in the most frequ… Jul 16, 2015 test_performance removed false positives as detected by Checkmarx code analysis tool. … Mar 18, 2016 test_unit Workaround for windows testing (#100) Jun 12, 2016 .gitignore Updated for removing temporary cmake files with ""make clean-cmake-files"" Jul 16, 2015 .hgrc_copy Added the .hgrc to easily switch between computer. Oct 10, 2014 .hgtags Added tag version-1.0 for changeset d9a55a4a6154 Oct 17, 2012 .travis.yml sigh... travis needs semi colons Jul 19, 2015 API.markdown added new API for AddDefaultLogger to API Feb 17, 2016 Build.cmake Fixed a bug causing cross-compilers to fail (#101) Jun 22, 2016 CMakeLists.txt start of replacement for: https://github.com/KjellKod/g3log/pull/74/f… Mar 6, 2016 CPackLists.txt fixed user com Mar 6, 2016 CleanAll.cmake g2log.hpp is kept as a helper include. It will pull in the most frequ… Jul 16, 2015 GenerateMacroDefinitionsFile.cmake g2log.hpp is kept as a helper include. It will pull in the most frequ… Jul 16, 2015 LICENSE Added license and license referral to avoid any license confusion. G3… Jul 3, 2014 Options.cmake use the genereated_definitions.hpp Jul 22, 2015 README.markdown fixed typ Nov 23, 2015 sublime.formatting Making it easy for other people to see the formatting style Jul 16, 2015 README.markdown G3log : Asynchronous logger with Dynamic Sinks EXAMPLE USAGE Optional to use either streaming or printf-like syntax LOG(INFO) << ""streaming API is as easy as ABC or "" << 123;  LOGF(WARNING, ""Printf-style syntax is also %s"", ""available"");  Conditional logging int less = 1; int more = 2 LOG_IF(INFO, (less<more)) <<""If [true], then this text will be logged"";  // or with printf-like syntax LOGF_IF(INFO, (less<more), ""if %d<%d then this text will be logged"", less,more);  Design-by-Contract CHECK(false) will trigger a ""fatal"" message. It will be logged, and then the application will exit. CHECK(less != more); // not FATAL CHECK(less > more) << ""CHECK(false) triggers a FATAL message"";  What G3Log is: G3log is the acting name for the third version of g2log and it stands for g3log with dynamic sinks G3log is an asynchronous, ""crash-safe"" logger. You can read more about it here [g2log version] You can choose to use the default log receiver which saves all LOG calls to file, or you can choose to use your own custom made log receiver(s), or both, or as many sinks as you need. Detailed API documentation Please look at API.markdown for detailed API documentation Benefits you get when using G3log Easy to use, clean syntax and a blazing fast logger. All the slow log I/O disk access is done in a background thread. This ensures that the LOG caller can immediately continue with other tasks and do not have to wait for the LOG call to finish. G3log provides logging, Design-by-Contract [#CHECK], and flush of log to file at shutdown. Buffered logs will be written to the sink before the application shuts down. It is thread safe, so using it from multiple threads is completely fine. It is CRASH SAFE. It will save the made logs to the sink before it shuts down. The logger will catch certain fatal events (Linux/OSX: signals, Windows: fatal OS exceptions and signals) , so if your application crashes due to, say a segmentation fault, SIGSEGV, it will log and save the crash and all previously buffered log entries before exiting. It is cross platform. Tested and used by me or by clients on OSX, Windows, Ubuntu, CentOS G3log and G2log is used world wide in commercial products as well as hobby projects. G2log is used since early 2011. The code is given for free as public domain. This gives the option to change, use, and do whatever with it, no strings attached. Two versions of g3log exist that are under active development. This version: g3log : which is made to facilitate easy adding of custom log receivers. Its tested on at least the following platforms with Linux(Clang/gcc), Windows (mingw, visual studio 2013). My recommendation is to go with g3log if you have full C++11 support. g2log: The original. Simple, easy to modify and with the most OS support. Clients use g2log on environments such as OSX/Clang, Ubuntu, CentOS, Windows/mingw, Windows/Visual Studio. The focus on g2log is ""slow to change"" and compiler support. Only well, time tested, features from g3log will make it into g2log. G3log with sinks Sinks are receivers of LOG calls. G3log comes with a default sink (the same as G3log uses) that can be used to save log to file. A sink can be of any class type without restrictions as long as it can either receive a LOG message as a std::string or as a g3::LogMessageMover. The std::string comes pre-formatted. The g3::LogMessageMover is a wrapped struct that contains the raw data for custom handling in your own sink. A sink is owned by the G3log and is added to the logger inside a std::unique_ptr. The sink can be called though its public API through a handler which will asynchronously forward the call to the receiving sink. Silly example to show what is needed to make a custom sink that is using custom log formatting but only using that for adding color to the default log formatting. The sink forwards the colored log to cout // in file Customsink.hpp #pragma once #include <string> #include <iostream> #include <g3log/logmessage.hpp>  struct CustomSink {  // Linux xterm color // http://stackoverflow.com/questions/2616906/how-do-i-output-coloured-text-to-a-linux-terminal   enum FG_Color {YELLOW = 33, RED = 31, GREEN=32, WHITE = 97};    FG_Color GetColor(const LEVELS level) const {      if (level.value == WARNING.value) { return YELLOW; }      if (level.value == DEBUG.value) { return GREEN; }      if (g3::internal::wasFatal(level)) { return RED; }       return WHITE;   }    void ReceiveLogMessage(g3::LogMessageMover logEntry) {      auto level = logEntry.get()._level;      auto color = GetColor(level);       std::cout << ""\033["" << color << ""m""         << logEntry.get().toString() << ""\033[m"" << std::endl;   } };  // in main.cpp, main() function  auto sinkHandle = logworker->addSink(std2::make_unique<CustomSink>(),                                      &CustomSink::ReceiveLogMessage); More sinks can be found in the repository github.com/KjellKod/g3sinks. Code Examples Example usage where a custom sink is added. A function is called though the sink handler to the actual sink object. // main.cpp #include <g3log/g3log.hpp> #include <g3log/logworker.hpp> #include <g3log/std2_make_unique.hpp>  #include ""CustomSink.h""  int main(int argc, char**argv) {    using namespace g3;    std::unique_ptr<LogWorker> logworker{ LogWorker::createLogWorker() };    auto sinkHandle = logworker->addSink(std2::make_unique<CustomSink>(),                                           &CustomSink::ReceiveLogMessage);     // initialize the logger before it can receive LOG calls    initializeLogging(logworker.get());    LOG(WARNING) << ""This log call, may or may not happend before""                 << ""the sinkHandle->call below"";      // You can call in a thread safe manner public functions on your sink    // The call is asynchronously executed on your custom sink.    std::future<void> received = sinkHandle->call(&CustomSink::Foo,                                                   param1, param2);     // If the LogWorker is initialized then at scope exit the g3::shutDownLogging() will be called.     // This is important since it protects from LOG calls from static or other entities that will go out of    // scope at a later time.     //    // It can also be called manually:    g3::shutDownLogging(); }   // some_file.cpp : To show how easy it is to get the logger to work // in other parts of your software  #include <g3log/g3log.hpp>  void SomeFunction() {    ...    LOG(INFO) << ""Hello World""; }  Example usage where a the default file logger is used and a custom sink is added // main.cpp #include <g3log/g3log.hpp> #include <g3log/logworker.hpp> #include <g3log/std2_make_unique.hpp>  #include ""CustomSink.h""  int main(int argc, char**argv) {    using namespace g3;    auto worker = LogWorker::createLogWorker();    auto defaultHandler = worker->addDefaultLogger(argv[0],                                                   path_to_log_file);     // logger is initialized    g3::initializeLogging(worker.get());     LOG(DEBUG) << ""Make log call, then add another sink"";     worker->addSink(std2::make_unique<CustomSink>(),                                   &CustomSink::ReceiveLogMessage);     ... }  BUILDING g3log: The default is to build an example binary 'g3log-FATAL-contract' and 'g3log-FATAL-sigsegv'. I suggest you start with that, run it and view the created log also. If you are interested in the performance or unit tests then you can enable the creation of them in the g3log/CMakeLists.txt file. See that file for more details cd g3log mkdir build cd build  Building on Linux cmake -DCMAKE_BUILD_TYPE=Release .. make   Building on Windows Please use the Visual Studio 12 (2013) command prompt ""Developer command prompt"" cmake -DCMAKE_BUILD_TYPE=Release -G ""Visual Studio 12"" .. msbuild g3log.sln /p:Configuration=Release  Building on *nix with Clang cmake -DCMAKE_CXX_COMPILER=clang++      -DCMAKE_BUILD_TYPE=Release .. make   API description Most of the API that you need for using g3log is described in this readme. For more API documentation and examples please continue to read the API readme. Examples of what you will find here are: Sink creation and utilization Logging levels disable/enabled levels at runtime custom logging levels Fatal handling custom fatal handling pre fatal hook override of signal handling disable fatal handling LOG calls CHECK calls Performance G3log aims to keep all background logging to sinks with as little log overhead as possible to the logging sink and with as small ""worst case latency"" as possible. For this reason g3log is a good logger for many systems that deal with critical tasks. Depending on platform the average logging overhead will differ. On my laptop the average call, when doing extreme performance testing, will be about ~2 us. The worst case latency is kept stabile with no extreme peaks, in spite of any sudden extreme pressure. I have a blog post regarding comparing worst case latency for g3log and other loggers which might be of interest. You can find it here: https://kjellkod.wordpress.com/2015/06/30/the-worlds-fastest-logger-vs-g3log/ Enjoy If you like this logger (or not) it would be nice with some feedback. That way I can improve g3log and g2log and it is also nice to see if someone is using it. If you have ANY questions or problems please do not hesitate in contacting me on my blog http://kjellkod.wordpress.com/2011/11/17/kjellkods-g2log-vs-googles-glog-are-asynchronous-loggers-taking-over or at Hedstrom at KjellKod dot cc Cheers Kjell (a.k.a. KjellKod) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KjellKod/g3log"	"Asynchronous logger with Dynamic Sinks. [PublicDomain]"	"true"
"Logging"	"Log4cpp"	"http://log4cpp.sourceforge.net/"	"A library of C++ classes for flexible logging to files, syslog, IDSA and other destinations. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Log for C++ Project Log for C++ Project  | Log for C++ Project Page on Sourceforge  | Last Published: 2012-11-29  | About log4cpp What is log4cpp? Download License API Documentation FAQ How to use Simple example Properties file example Building   Linux/*nix   Windows Development CVS Repository Releases Status People Other projects What is log4cpp? Log4cpp is library of C++ classes for flexible logging to files, syslog, IDSA and other destinations. It is modeled after the Log4j Java library, staying as close to their API as is reasonable. Download Sources are available from SourceForges download page. We do not supply binaries, because of the numerous incompatible ABIs (e.g. g++ 2.95 vs 2.96 vs 3.0 vs 3.2) and different package formats. A stable but older version of log4cpp is available in Debian stable, see http://packages.debian.org/stable/libs/. FreeBSD users can find log4cpp in the ports collection, see http://www.freebsd.org/ports/devel.html Log4cpp includes support for building RPMs, so building your own from the source tar-ball is as simple as rpm -ta log4cpp-x.y.z.tar.gz ^ Building Log4cpp Autoconf As of version 0.2.0 log4cpp can be build using autoconf on platforms that support it. Simply do: ./configure make make check make install This will install log4cpp under /usr/local. To install in another localation specify --prefix=<location> when running configure. Options for ./configure Besides the usual ./configure options like --prefix a few others are available: --with-idsa Include support for logging to IDSA (http://jade.cs.uct.ac.za/idsa/index.html). This will give you an IdsaAppender Appender class. --with-omnithreads[=<path-to-omniORB>] Enable multi-threading support using omniORB4's omniThreads MT abstraction library (http://www.omniorb.org). configure expects the omnithread header files to reside in <path-to-omniORB>/include and the library in <path-to-omniORB</lib, i.e. not in a platform specific subdirectory. Create symlinks where necessary. NB. omniORB4 is required: omniORB3 will not suffice as it lacks sufficient support for thread specific data. At the moment (August 2002) omniORB4 is in beta, however most parts and specifically the threading library appear to be quite stable. --with-pthreads Enable multi-threading support using the 'pthread' POSIX threads library. This option is mutually exclusive with --with-omnithreads. --enable-doxyen Enables generation of API documentation by Dimitri van Heeschs Doxygen tool (http://www.doxygen.org/). Defaults to yes if doxygen can be found in the search path. --enable-html-docs If doxygen is enabled, have it generate HTML formatted documentation. --enable-latex-docs If doxygen is enabled, have it generate LaTeX formatted documentation. --enable-dot Let Doxygen use the 'dot' tool of GraphViz (http://www.graphviz.org) todraw its graphs. --disable-remote-syslog Exclude RemoteSyslogAppender from build (included by default) --disable-smtp Exclude SmtpAppender from build (included by default) Build notes for specific platforms *nix - g++ compiler Log4cpp should build whitout modification on any decent *nix system with g++ and GNU make. The primary development platform is RedHat Linux 7.3, which has g++ 2.96-rh, but the aim is to be compatible with from g++ 2.95 and up. When g++ 3.x has been widely adopted we may drop support for older g++ versions. Solaris - Sun CC compiler Compilation with Suns CC compiler requires setting some enviroment variables. Also static libraries appear not to work. In short do: CC=CC CXX=CC LD=""CC -KPIC"" ./configure --disable-static Win32 - VS2010 Use the workspace and project files in subdirectory msvc10. (You may need to adjust include/log4cpp/config-win32.h and the project files to your particular needs) Win32 - MSVC++ 6 Use the workspace and project files in subdirectory msvc6. You may need to adjust include/log4cpp/config-win32.h and the project files to your particular needs. Win32 - MSVC++ 5 Building log4cpp with MSVC++ 5 is not supported and will not be, unless someone can find a way to do so without mutilating the source code. Win32 - Borland C++ Builder 5 Use the project and make files in subdirectory bcb5. Win32 - Cygwin Use './configure; make; make install'. Be warned that there have been very few success or failure reports for this platform, so either it works very smoothly or noone actively uses log4cpp with Cygwin :-) OpenVMS Edit include/log4cpp/config-openvms.h if you need different settings. This has been tested on OpenVMS Alpha v7.3 and Compaq C++ V6.3-020 only. 1) Copy the src and include directory (including all its contents and subdirectories) onto your OpenVMS system. 2) Compile each source file (*.CPP and *.C in the src directory) one by one by the following command, cxx /include=(""/a1\$dkb0/user/tony/project/log4cpp/include"") /define=(__USE_STD_IOSTREAM,__OPENVMS__) /repository=a1$dkb0:[user.tony.project.log4cpp.repository] APPENDER.CPP cxx /include=(""/a1\$dkb0/user/tony/project/log4cpp/include"") /define=(__USE_STD_IOSTREAM,__OPENVMS__) /repository=a1$dkb0:[user.tony.project.log4cpp.repository] APPENDERSKELETON.CPP ...etc Please substitute a correct path for your include directory. A unix-style directory name is requied in the /include parameter. In this example, the pathis A1$DKBO:[USER.TONY.PROJECT.LOG4CPP.INCLUDE] A repository directory is also specified here as A1$DKB0:[USER.TONY.PROJECT.LOG4CPP.REPOSITORY]. 3) Create a static library, LOG4CPP.OLB lib/create log4cpp 4) Put all compiled OBJ files into the LOG4CPP.OLB lib/insert log4cpp appender lib/insert log4cpp appenderskeleton ...etc 5) Link a program with log4cpp.olb. e.g: cxx /include=(""/a1\$dkb0/user/tony/project/log4cpp/include"") /define=(__USE_STD_IOSTREAM,__OPENVMS__) testlog4cpp.cxx cxxlink /repository=a1$dkb0:[user.tony.project.log4cpp.repository] testlog4cpp,log4cpp/library ^ License As of version 0.2.1 this library is licensed under the Lesser General Public License instead of the General Public License. No further license changes are planned :-). Log for C++ (short name: log4cpp), a C++ library for flexible logging. Copyright (C) 2000-2002 LifeLine Networks bv Copyright (C) 2000-2002 Bastiaan Bakker Portions Copyright others, see file THANKS and source code. This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA ^ API Documentation API Documentation generated by Doxygen can be found here. The Solaris Developer Connection features an article by Mo Budlon on using log4cpp 0.2.x, called 'Logging and Tracing in C++ Simplified'. Recommended reading if you trying to figure out how to use log4cpp! ^ FAQ 1. GENERAL 1.1. What is Log for C++? Log for C++ is a library of C++ classes for flexible logging to files, syslog and other destinations. It is modeled after the Log for Java library (http://jakarta.apache.org/log4j/), staying as close to their API as is reasonable. 1.2. How is Log for C++ related to Log4j? Is it a straight port? Log for C++ strives to supply a similar interface for logging in C++ as Log4j provides in Java. However the implementation is not a translation of the Java code. So in that sense it is not a 'port' of Log4j. Of course Log for C++ does owe many of its concepts to log4j. 1.3. What is the name of this project, 'Log for C++' or 'log4cpp'? The 'official' long name of the project is 'Log for C++', but in practice, the short name, 'log4cpp' has proven more convinient. 1.4. Under which license is Log for C++ available? As of version 0.2.1 Log for C++ is released under the GNU Lesser General Public License (LGPL). Versions before that have been released under the GPL. See the license discussion on the forum at SourceForge for the motivations behind switching from GPL to LGPL. 1.5. Our legal department doesn't like the LGPL, can you release Log for C++ under license XYZ? No. Long answer: Technically it may be possible if every contributor agrees, which due to their growing number has become increasingly difficult. But even if that could be overcome it will not happen. Of course the LGPL does grant you the opportunity to choose the GPL instead of the LGPL, but I bet XYZ != GPL. 2. COMPILATION AND INSTALLATION See building 3. USAGE 3.1. I've succesfully compiled log4cpp, now how do I use this stuff? Have a glance at Simple example and Properties file example. For some small examples using log4cpp, see the 'tests' subdirectory. Also see the documentation section for a pointer for API documentation and more usage information. 3.2. Is log4cpp thread-safe? The same instance of the log4cpp::Category object (a logger) can be used from different threads simultaneously without explicit synchronization. Concurrent access to the appenders will be prevented by the logger object itself. It will lock internal mutex each time when it comes to writing into appenders. So, it is safe, for example, to write from the multiple threads to the same logger which appends to the same file. Although, log4cpp is configured in such a way that two different loggers append to the same appender (it may be a file), then there will be no way for the logging framework to arrange proper addition and things can get mixed up. So this way of configuration is not recommended. 3.3. What are possible format characters for the custom log message? PatternLayout supports following set of format characters: %% - a single percent sign %c - the category %d - the date\n Date format: The date format character may be followed by a date format specifier enclosed between braces. For example, %d{%H:%M:%S,%l} or %d{%d %m %Y %H:%M:%S,%l}. If no date format specifier is given then the following format is used: ""Wed Jan 02 02:03:55 1980"". The date format specifier admits the same syntax as the ANSI C function strftime, with 1 addition. The addition is the specifier %l for milliseconds, padded with zeros to make 3 digits. %m - the message %n - the platform specific line separator %p - the priority %r - milliseconds since this layout was created. %R - seconds since Jan 1, 1970 %u - clock ticks since process start %x - the NDC %t - thread name By default, ConversionPattern for PatternLayout is set to ""%m%n"". 4. PROBLEMS AND ERROR MESSAGES 4.1. I get 'Naming collision for 'ERROR' detected. Please read the FAQ for a workaround.' This is caused by the rudeness of some platforms, which mutilate the namespace with some blunt #defines. To be more precise, the Win32 API includes #defines of 'ERROR' and 'DEBUG'. Since the preprocessor is unaware of C++ naming scopes this results in reserving the words ERROR and DEBUG litterally everywhere. In particular this conflicts with log4cpp::Prioritiy::ERROR and log4cpp::Priority::DEBUG. These latter two names come from log4j, so they are not something we made up ourselves. They Win32 authors should not have rudelessly claimed these generic names through the preprocessor. There are much better alternatives: If they use it as an integer constant, declare it using a language construct. Either 'enum {ERROR=1};' or 'static const int ERROR=1;' would do fine. Use a less generic name like WIN32API_ERROR to make naming conflicts less likely In case they use it as a flag for conditional compilation, use '#define DEBUG DEBUG' and '#if defined(DEBUG)'. In that case the preprocessor would simply replace all occurrences of 'DEBUG' in the source code with 'DEBUG', in effect leaving everything intact. Of course the proper solution would be if the offending party would use one of the above methods, but we could have to wait some time for this to actually happen. As an alternative log4cpp can workaround these #defines. The workaround code is enabled by doing #define LOG4CPP_FIX_ERROR_COLLISION 1 before #including any log4cpp header files and after #including all platform headers. For Win32 platforms this #define has already been included in log4cpp/config-win32.h. Once log4cpp has been updated to the log4j 1.2 API we can get rid of this problem by adopting the new names for log levels. 4.2. I am trying to compile/link the log4cpp package using the SunWorkshop compiler (CC) on a Solaris 7 machine. The library builds, but the testmain code fails to link properly. A proper solution for this problem has not been found yet (suggestions are welcome), but James Emery reported success with the following workaround: Disable building of the static library Change the linker from /usr/ucb/ld to CC and enable 'place independent code' (pic). In short, configure with: export LD=""CC -Kpic"" && ./configure --disable-static 4.3. ./configure fails to detect 'snprintf()' on platform XYZ. ./configure does not just check for the presence of a snprintf() function but for C99 compliancy as well. In particular, snprintf() should strictly honour the 'string size' parameter to avoid potential buffer overflow problems. log4cpp falls back to an alternative snprintf() implementation if the OS does not provide a correct one. ^ Simple example Sample main.cpp file that logs onto console and into file program.log. Loggers and appenders are created and configured manually. Example makes use of both function-style logging and stream-style logging.  // main.cpp  #include ""log4cpp/Category.hh"" #include ""log4cpp/Appender.hh"" #include ""log4cpp/FileAppender.hh"" #include ""log4cpp/OstreamAppender.hh"" #include ""log4cpp/Layout.hh"" #include ""log4cpp/BasicLayout.hh"" #include ""log4cpp/Priority.hh""  int main(int argc, char** argv) { 	log4cpp::Appender *appender1 = new log4cpp::OstreamAppender(""console"", &std::cout); 	appender1->setLayout(new log4cpp::BasicLayout());  	log4cpp::Appender *appender2 = new log4cpp::FileAppender(""default"", ""program.log""); 	appender2->setLayout(new log4cpp::BasicLayout());  	log4cpp::Category& root = log4cpp::Category::getRoot(); 	root.setPriority(log4cpp::Priority::WARN); 	root.addAppender(appender1);  	log4cpp::Category& sub1 = log4cpp::Category::getInstance(std::string(""sub1"")); 	sub1.addAppender(appender2);  	// use of functions for logging messages 	root.error(""root error""); 	root.info(""root info""); 	sub1.error(""sub1 error""); 	sub1.warn(""sub1 warn"");  	// printf-style for logging variables 	root.warn(""%d + %d == %s ?"", 1, 1, ""two"");  	// use of streams for logging messages 	root << log4cpp::Priority::ERROR << ""Streamed root error""; 	root << log4cpp::Priority::INFO << ""Streamed root info""; 	sub1 << log4cpp::Priority::ERROR << ""Streamed sub1 error""; 	sub1 << log4cpp::Priority::WARN << ""Streamed sub1 warn"";  	// or this way: 	root.errorStream() << ""Another streamed error"";  	return 0; }  Console output for that example  1352973121 ERROR  : root error 1352973121 ERROR sub1 : sub1 error 1352973121 WARN sub1 : sub1 warn 1352973121 WARN  : 1 + 1 == two ? 1352973121 ERROR  : Streamed root error 1352973121 ERROR sub1 : Streamed sub1 error 1352973121 WARN sub1 : Streamed sub1 warn 1352973121 ERROR  : Another streamed error ^ Properties file example Sample main.cpp file that makes use of logging configuration file log4cpp.properties  // main.cpp  #include <log4cpp/Category.hh> #include <log4cpp/PropertyConfigurator.hh>  int main(int argc, char* argv[]) { 	std::string initFileName = ""log4cpp.properties""; 	log4cpp::PropertyConfigurator::configure(initFileName);  	log4cpp::Category& root = log4cpp::Category::getRoot();  	log4cpp::Category& sub1 =  		log4cpp::Category::getInstance(std::string(""sub1""));  	log4cpp::Category& sub2 =  		log4cpp::Category::getInstance(std::string(""sub1.sub2""));  	root.warn(""Storm is coming"");  	sub1.debug(""Received storm warning""); 	sub1.info(""Closing all hatches"");  	sub2.debug(""Hiding solar panels""); 	sub2.error(""Solar panels are blocked""); 	sub2.debug(""Applying protective shield""); 	sub2.warn(""Unfolding protective shield""); 	sub2.info(""Solar panels are shielded"");  	sub1.info(""All hatches closed"");  	root.info(""Ready for storm."");  	log4cpp::Category::shutdown();  	return 0; }  Configuration file for use with that code  # log4cpp.properties  log4cpp.rootCategory=DEBUG, rootAppender log4cpp.category.sub1=DEBUG, A1, A2 log4cpp.category.sub1.sub2=DEBUG, A3  log4cpp.appender.rootAppender=ConsoleAppender log4cpp.appender.rootAppender.layout=PatternLayout log4cpp.appender.rootAppender.layout.ConversionPattern=%d [%p] %m%n   log4cpp.appender.A1=FileAppender log4cpp.appender.A1.fileName=A1.log log4cpp.appender.A1.layout=BasicLayout  log4cpp.appender.A2=FileAppender log4cpp.appender.A2.threshold=WARN log4cpp.appender.A2.fileName=A2.log log4cpp.appender.A2.layout=PatternLayout log4cpp.appender.A2.layout.ConversionPattern=%d [%p] %m%n   log4cpp.appender.A3=RollingFileAppender log4cpp.appender.A3.fileName=A3.log log4cpp.appender.A3.maxFileSize=200 log4cpp.appender.A3.maxBackupIndex=1 log4cpp.appender.A3.layout=PatternLayout log4cpp.appender.A3.layout.ConversionPattern=%d [%p] %m%n   Console output for that example  2012-11-14 18:44:58,163 [WARN] Storm is coming 2012-11-14 18:44:58,166 [DEBUG] Received storm warning 2012-11-14 18:44:58,170 [INFO] Closing all hatches 2012-11-14 18:44:58,172 [DEBUG] Hiding solar panels 2012-11-14 18:44:58,175 [ERROR] Solar panels are blocked A3.log.1 2012-11-14 18:44:58,179 [DEBUG] Applying protective shield 2012-11-14 18:44:58,183 [WARN] Unfolding protective shield 2012-11-14 18:44:58,186 [INFO] Solar panels are shielded 2012-11-14 18:44:58,190 [INFO] All hatches closed 2012-11-14 18:44:58,192 [INFO] Ready for storm.  There are three loggers (including root) and three appenders. Root logger redirects all its own input and input of its descendant onto console. Descendant sub1 writes into two files, filtering output by message priority for second of them. Descendant sub1.sub2 writes also into rolling file. Log file A3.log is rolled over as soon as it reaches limit of 200 bytes, 1 backup log file is kept. ^ CVS Repository Log4cpp is also available directly through CVS, see the SourceForge CVS page for instructions. CVS currently has two branches: MAIN for log4cpp development BRANCH_MAINT_0_2 for maintainance of log4cpp-stable (0.2.x) Each release will receive a tag named REL_x_y_z. To start working with a freshly checked out log4cpp revision, run ./autogen.sh first. This will create ./configure and the necessary Makefile.in's. You'll need at least autoconf 2.50, automake 1.6.0 and libtool 1.4. ^ Releases WARNING: releases from the development branch are a 'work in progress' and may fail to build, crash or redecorate your desktop. 1.1.2rc1 - master branch (04 April 2015) Small fixes, DailyRollingFile appender, tests, options to disable support for smtp and syslog 1.1.1 - stable branch (26 November 2013) Small code and project file fixes. 1.1rc3 - development branch (18 October 2012) Created build projects for MSVC10 (VS2010). Small code fixes. 0.3.4 - development branch (28 October 2002) Fixed builds for MSVC6 and MSVC7. Removed Log4cppCleanup. 0.3.3 - development branch (26 October 2002) Fixed #628211: build failure on MSVC 6.0. Fixed #625811: log facility in RemoteSyslogAppender. Possibly fixed #415160: crashes with dynamic library on Solaris 2.6. Replaced PatternLayout with a new, faster and more complete implementation. 0.3.2 - development branch (5 October 2002) Fixed #614903: compilation problem on Sun CC 5.3. Added missing MSVC6 .dsp files. Fixed log facility in RemoteSyslogAppender. Fixed relocatability of log4cpp-devel RPM. 0.3.2rc5 - development branch (5 October 2002) Merged #604991: support for setting additivy in PropertyConfig. Merged #605143: support for compilation in QNX Neutrino. 0.3.2rc4 - development branch (16 August 2002) Fixed last minute goof ups which prevented compilation on both *nix and Win32 platforms. 0.3.2rc2 - development branch (12 August 2002) Added support for POSIX threads. Added PropertyConfigurator. Rearranged documentation. Fixed various bugs. 0.3.2rc1 - development branch (19 June 2002) Support for Win32 threads added. Added NTEventLogAppender. Added Win32DebugAppender. Fixed NDC context problem if depth > 2. Added aclocal support. 0.3.1 - development branch (4 April 2002) Added RollingFileAppender class. Fixed bug #572467: invalidated iterator usage. Fixed bug #527475: format string bug. Fixed bug #530332: missing 'std::' specifiers. Handled feature requests #536668, #527760, #527381. 0.3.0 - development branch (18 Februari 2002) Added experimental support for multi threaded applications. This implementation uses omniORB4s threading library. Other threading libraries, such as Boosts, may be used as well, but this has not been implemented yet. 0.2.7 - stable branch (27 Januari 2002) Support for multiple Appenders per Category added (feature request #501360). Fixed variable scope bug in SyslogAppender (bug #499315) Fixed memory leak in SyslogAppender and RemoteSyslogAppender (bug #499524) Fixed compile problem in Filter (bug #) Fixed config file parse problem in SimpleConfigurator (bug #500766) Added methods for logging at FATAL level (bug #504314) Fixed Win32 compile problem (bug #506907) 0.2.6 (11 December 2001) Preliminary support for OpenVMS added. PatternLayout, SimpleConfigurator and RemoteSyslogAppender added. 0.2.5 (11 June 2001) Inclusion of support for Borland C++ Builder. Library version 1.0.0: this release is not binary compatible with previous ones. (Version update should have been done in 0.2.4). 0.2.2 (04 March 2001) Inclusion of Win32 platform (MSVC++ 6.0) 0.2.1 (15 Februari 2001) license change to LGPL. 0.2.0 (10 December 2000) log4cpp now uses autoconf and automake. ^ Status The latest stable release is 1.1.1 log4cpp is moved to git since version 1.1.1, cvs is stale since then As of version 0.3.0 log4cpp has a separate 'stable' and 'development' branches. Releases x.y.z where y is even are considered stable and those where y is odd are experimental (which means that some or all features may be broken). Releases of 0.2.x are for bug fixes only, new features will go into 0.3.x and eventually 0.4.x. ^ People Coding on Log4cpp was initiated by me (Bastiaan Bakker) late 2000. Since then other people have joined the project or contributed code: Cedric Le Goater <cedric(at)legoater.com> autoconf setup, various improvements Marc Welz <marc(at)jade.cs.uct.ac.za> IdsaAppender Lynn Owen <opl(at)agoby.com> MSVC++ support Steve Ostlind <s.ostlind(at)pentasafe.com> MSVC++ support, various fixes Marcel Harkema <marcel(at)debian.org> Debian packaging Uwe Jäger <jaeger(at)varial.de> Borland C++ Builder support Walter Stroebel <walter.stroebel(at)lifeline.nl> RemoteSyslogAppender Glen Scott <glen_s(at)yahoo.com> PatternLayout, SimpleConfigurator Tony Cheung <dragonman(at)asiayeah.com> OpenVMS support Alex Tapaccos <ATapaccos(at)redfig.com> DailyRollingFileAppender Brendan B. Boerner <bboerner(at)texas.net> Multiple Appender support for Categories Paulo Pizarro <paulo.pizarro(at)digitro.com.br> RollingFileAppender David Resnick <dresnick(at)mobilespear.com> NTEventAppender, integration work Aaron Ingram <ai8(at)yahoo.com> MSThreads support Alan Anderson <alan(at)rushmore.com> Win32DebugAppender, PropertyConfigurator Emiliano Martin <emilianomc(at)terra.es> PThreads support Alexander Perepelkin <sanchouss_(at)users.sf.net> Project maintenance, improvements, fixes ^ Project Pages Log4cpp is hosted on SourceForge at http://sourceforge.net/projects/log4cpp/. ^ Other projects Log4cpp is one of many ports/implementations of the Log4j API. Here's an incomplete list: log4c An implementation in C by Cedric Legoater log4cplus An indepent C++ implementation by Tad Smith. Worth checking out if you don't like Log4cpp for some reason. ^"	"null"	"null"	"A library of C++ classes for flexible logging to files, syslog, IDSA and other destinations. [LGPL]"	"true"
"Logging"	"log4cplus"	"https://github.com/log4cplus/log4cplus"	"A simple to use C++ logging API providing thread-safe, flexible, and arbitrarily granular control over log management and configuration. [BSD & Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"248"	"50"	"158"	"GitHub - log4cplus/log4cplus: log4cplus is a simple to use C++ logging API providing thread-safe, flexible, and arbitrarily granular control over log management and configuration. It is modelled after the Java log4j API. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 248 Fork 158 log4cplus/log4cplus Code Issues 5 Pull requests 3 Pulse Graphs log4cplus is a simple to use C++ logging API providing thread-safe, flexible, and arbitrarily granular control over log management and configuration. It is modelled after the Java log4j API. https://sourceforge.net/projects/log4cplus/ 2,057 commits 11 branches 50 releases 9 contributors C++ 39.0% Shell 29.0% Makefile 18.3% CMake 6.4% M4 6.3% Perl 0.4% Other 0.6% C++ Shell Makefile CMake M4 Perl Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.x 1.0.4.1 1.1.x 1.1 1.2.x keep-file-closed master-autotest master-mkdir master-win32-accept-fix master-work-backup master Nothing to show REL_1_2_0 REL_1_2_0-RC6 REL_1_2_0-RC5 REL_1_2_0-RC4 REL_1_2_0-RC3 REL_1_2_0-RC2 REL_1_1_3-RC6 REL_1_1_3-RC5 REL_1_1_3-RC4 REL_1_1_3-RC3 REL_1_1_3-RC2 REL_1_1_3-RC1 REL_1_1_2 REL_1_1_2-RC3 REL_1_1_2-RC2 REL_1_1_2-RC1 REL_1_1_1 REL_1_1_1-RC4 REL_1_1_1-RC3 REL_1_1_1-RC2 REL_1_1_1-RC1 REL_1_1_0 REL_1_1_0-RC10 REL_1_1_0-RC9 REL_1_1_0-RC8 REL_1_1_0-RC7 REL_1_1_0-RC6 REL_1_1_0-RC5 REL_1_1_0-RC4 REL_1_1_0-RC3 REL_1_1_0-RC2 REL_1_1_0-RC1 REL_1_0_4_3 REL_1_0_4_2 REL_1_0_4_2b REL_1_0_4_2-RC1 REL_1_0_4_1 REL_1_0_4_1-RC2 REL_1_0_4_1-RC1 REL_1_0_4 REL_1_0_4-RC11 REL_1_0_4-RC10 REL_1_0_4-RC9 REL_1_0_4-RC8 REL_1_0_3-RC5 REL_1_0_3-RC4 REL_1_0_3-RC3 REL_1_0_3-RC2 REL_1_0_3-RC1 REL_1_0_2 Nothing to show New pull request Latest commit cd4e588 Apr 9, 2016 wilx Merge pull request #172 from wilx/master … Merge. Permalink Failed to load latest commit information. android Update Android CMake support to revision Jan 14, 2015 catch @ c984fc3 Fix broken build. Mar 29, 2016 cygport Update Cygport patch. Jan 20, 2015 docs Tweak Pandoc command used in release procedure. Mar 29, 2016 iOS Add missing backslash in iOS/scripts/cmake_ios_armv7.sh. Nov 11, 2015 include Add minimal error handling to `tls_init()`. Mar 17, 2016 jenkins jenkins/build.xml: Add FreeBSD and DragonflyBSD. Dec 22, 2014 m4 Update to libtool 2.4.6. Feb 16, 2015 msvc14 Normalize EOLs. Dec 7, 2015 qt4debugappender Update copyright years to include 2015. Jan 3, 2015 qt5debugappender Update copyright years to include 2015. Jan 3, 2015 scripts Documentation improvements. Mar 22, 2016 simpleserver Allow binding to speicifc IP address for ServerSocket. Mar 15, 2016 src Use `FlsAlloc()` instead of `TlsAlloc()`. Mar 16, 2016 swig Normalize line endings. Nov 18, 2015 tests Merge branch 'master' of github.com:wilx/log4cplus Mar 18, 2016 threadpool @ dda9e3d Update ThreadPool. Jan 17, 2015 .dir-locals.el Fix possibly broken format of .dir-locals.el. Dec 18, 2015 .gitattributes Add .gitattributes. Nov 18, 2015 .gitignore Ignore all .opensdf files. Dec 16, 2014 .gitmodules Fix broken build. Mar 29, 2016 .travis.yml .travis.yml: Invoke recursive submodules initialization. Nov 9, 2015 AUTHORS AUTHORS: Add Prabhat Ranjan Kanth for IPv6 patch. Aug 6, 2015 CMakeLists.txt Fix cmake_minimum_required to be 2.8.12 Apr 7, 2016 COPYING Merge revisions 901-1000 from 1.1 branch. Apr 11, 2010 ChangeLog Start new ChangeLog for 2.0. Jun 29, 2014 ConfigureChecks.cmake Silence CMake CMP0054 policy warning. Mar 18, 2016 INSTALL Update with Automake 1.13.2. May 15, 2013 LICENSE LICENSE: Add Threadpool license text. Jan 6, 2015 Log4CPlusCPack.cmake Log4CPlusCPack.cmake: Add README.md to packages. Nov 9, 2015 Log4CPlusUtils.cmake CMakeLists.txt: Parse log4cplus version out of version.h. Mar 14, 2013 Makefile.am Makefile.am: Tighten the white space. Feb 10, 2015 Makefile.am.def Revert ""Add include/ directory to Makefile.am, lost in previous change."" Feb 10, 2015 Makefile.am.tpl Makefile.am.tpl: Use (set!) to re-set files variable after (sort!). Feb 11, 2015 Makefile.in Actually add callbackappender.cxx to Automake. Jul 8, 2015 NEWS NEWS: Point at web pages and ChangeLog file. Jul 12, 2012 README.md Documentation improvements. Mar 22, 2016 TODO TODO: Update. Jul 22, 2013 acinclude.m4 Remove check for C++11 threading and atomics support. They are assume… Jan 20, 2015 aclocal.m4 Update to Automake 1.15. Jan 6, 2015 appveyor.yml - Added AppVeyor-CI for log4cplus Mar 17, 2016 ar-lib Update to Automake 1.15. Jan 6, 2015 compile Update to Automake 1.15. Jan 6, 2015 config.guess Update to libtool 2.4.4. Nov 29, 2014 config.sub Update to Automake 1.15. Jan 6, 2015 configure Remove configure script --with-ipv6. Aug 6, 2015 configure.ac Remove configure script --with-ipv6. Aug 6, 2015 depcomp Update to Automake 1.15. Jan 6, 2015 install-sh Update to libtool 2.4.3. Oct 28, 2014 log4cplus.pc.in log4cplus.pc.in: New file, pkg-config for log4cplus.pc.in Mar 8, 2011 log4cplus.spec Set version to 2.0.0. Mar 11, 2014 ltmain.sh Update to libtool 2.4.6. Feb 16, 2015 mingw-log4cplus.spec Set version to 2.0.0. Mar 11, 2014 missing Update to Automake 1.15. Jan 6, 2015 mkinstalldirs Update with Autoconf 2.69, Automake 1.12 and Libtool 2.4.2. Apr 26, 2012 py-compile Update to Automake 1.15. Jan 6, 2015 README.md % log4cplus README Short Description log4cplus is a simple to use C++ logging API providing thread--safe, flexible, and arbitrarily granular control over log management and configuration. It is modeled after the Java log4j API. Latest Project Information The latest up-to-date information for this project can be found at log4cplus SourceForge project pages or log4cplus wiki on SourceForge. Please submit bugs, patches, feature requests, etc., there. Mission statement The aim of this project is to develop log4j--like logging framework for use in (primarily) C++. One of the major design goals is to avoid huge dependencies (like Boost) in the core functionality and to use standard C++ facilities instead. Where possible, the project takes inspiration from other logging libraries, beside from log4j (e.g., from log4net, log4cxx, log4cpp). Platform support log4cplus version 2.0 and beyond require C++11. log4cplus has been ported to and tested on the following platforms: Linux/AMD64 with GCC version 4.9.1 (Ubuntu 4.9.1-16ubuntu6) Linux/AMD64 with Clang version 3.5.0-4ubuntu2 (tags/RELEASE_350/final) (based on LLVM 3.5.0) Linux/AMD64 with Intel Parallel Studio XE 2015, ICPC version 15.0.1 Windows/AMD64 with GCC version 4.8.2 (x86_64-posix-seh-rev3, Built by MinGW-W64 project) using CMake build system Windows/AMD64 with GCC version 4.9.2 (tdm64-1) using CMake build system Windows 7 with MS Visual Studio 2015[^msvc] OpenBSD 5.6/AMD64 with GCC version 4.9.0 FreeBSD 10.1/i386 with Clang version 3.4.1 (tags/RELEASE_34/dot1-final 208032) NetBSD 6.1.5/AMD64 with GCC version 4.9.1 DragonflyBSD 4.0.1/AMD64 with GCC version 4.9.3 20141126 (prerelease) (FreeBSD Ports Collection) Minix 3.3.0/i386 with Clang version 3.4 (branches/release_34) with --disable-threads The testing on the above listed platforms has been done at some point in time with some version of source. Continuous testing is done only on Linux platform offered by Travis CI service. The oldest Windows version that is supported by 2.x releases is Windows Vista. The following platforms were supported by the 1.x series of log4cplus. They either do not have a reasonable C++11 capable compiler or have not been checked with log4cplus 2.x, yet: OpenSolaris with -library=stlport4 Solaris with -library=stlport4 and with -library=Cstd. Solaris 5.10/Sparc MacOS X 10.8 MacOS X 11.4.2 HP-UX (hppa2.0w-hp-hpux11.11) Haiku R1 Alpha 4.1 AIX 5.3 with IBM XL C/C++ for AIX [^msvc]: Visual Studio 2015 Preview version was used for the test. Configure script options --enable-debugging This option is disabled by default. This option mainly affects GCC builds but it also has some limited effect on non-GCC builds. It turns on debugging information generation, undefines NDEBUG symbol and adds -fstack-check (GCC). --enable-warnings This option is enabled by default. It adds platform / compiler dependent warning options to compiler command line. --enable-so-version This option is enabled by default. It enables SO version decoration on resulting library file, e.g., the .2.0.0 in liblog4cplus-1.2.so.2.0.0. --enable-release-version This option is enabled by default. It enables release version decoration on the resulting library file, e.g., the -1.2 in liblog4cplus-1.2.so.2.0.0. --enable-symbols-visibility-options This option is enabled by default. It enables use of compiler and platform specific option for symbols visibility. See also the Visibility page on GCC Wiki. --enable-profiling This option is disabled by default. This option adds profiling information generation compiler option -pg to GCC and Sun CC / Solaris Studio builds. --enable-threads This option is enabled by default. It turns on detection of necessary compiler and linker flags that enable POSIX threading support. While this detection usually works well, some platforms still need help with configuration by supplying additional flags to the configure script. One of the know deficiencies is Solaris Studio on Linux. See one of the later note for details. --with-wchar_t-support This option is enabled by default. When enabled, additional binaries will be built, marked with U suffix in file name and compiled with -DUNICODE=1 flag. In effect, these binaries assume that log4cplus::tchar is wchar_t. --with-working-locale This is one of three locale and wchar_t↔char conversion related options. It is disabled by default. It is know to work well with GCC on Linux. Other platforms generally have lesser locale support in their implementations of the C++ standard library. It is known not to work well on any BSDs. See also docs/unicode.txt. --with-working-c-locale This is second of wchar_t↔char conversion related options. It is disabled by default. It is known to work well on most Unix--like platforms, including recent Cygwin. --with-iconv This is third of wchar_t↔char conversion related options. It is disabled by default. The conversion using iconv() function always uses ""UTF-8"" and ""WCHAR_T"" as source/target encoding. It is known to work well on platforms with GNU iconv. Different implementations of iconv() might not support ""WCHAR_T"" encoding selector. Either system provided iconv() or library provided libiconv() are detected and accepted. Also both SUSv3 and GNU iconv() function signatures are accepted. --with-qt This option is disabled by default. It enables compilation of a separate shared library (liblog4cplusqt4debugappender) that implements Qt4DebugAppender. It requires Qt4 and pkg-config to be installed. --enable-unit-tests This option is disabled by default. It enables compilation of unit tests along their units. These unit tests then can be executed through unit_tests test executable that is built during compilation. Notes Compilation On Unix--like platforms, log4cplus can be compiled using either autotools based build system or using CMake build system. The autotools based build system is considered to be primary for Unix--like platforms. On Windows, the primary build system is Visual Studio 2010 solution and projects (msvc14/log4cplus.sln). This solution and associated project files should update just fine to Visual Studio 2012 out of the box. See also scripts/msvc14_to_msvc11.cmd and scripts/msvc14_to_msvc12.cmd helper scripts that create msvc11/log4cplus.sln and msvc12/log4cplus.sln respectively when invoked on msvc14/log4cplus.sln from source root directory. MinGW is supported by autotools based build system. CMake build system is supported as well and it should be used to compile log4cplus with older versions of Visual Studio or with less common compiler suites (e.g., Embarcadero, Code::Blocks, etc.). Cygwin/MinGW Some version of GCC (3.4.x and probably some of 4.x series too) on Windows (both MinGW and Cygwin) produces lots of warnings of the form: warning: inline function 'void foo()' is declared as dllimport: attribute ignored  This can be worked around by adding -Wno-attributes option to GCC command. Unfortunately, not all affected version of GCC have this option. MinGW and MSVCRT version log4cplus can use functions like _vsnprintf_s() (Microsoft's secure version of vsnprintf()). MinGW tool--chains (by default) link to the system MSVCRT.DLL. Unfortunately, older systems, like Windows XP, ship with MSVCRT.DLL that lacks these functions. It is possible to compile log4cplus with MinGW tool--chains but without using Microsoft's secure functions by defining __MSVCRT_VERSION__ to value less than 0x900 and vice versa. $ ../configure CPPFLAGS=""-D__MSVCRT_VERSION__=0x700""  Windows and Visual Studio log4cplus uses C++11 thread and synchronization facilities. The synchronization facilities are implemented in Visual Studio C++ standard library in a way that utilizes global variables. Therefore it is impossible (due to ""static initialization order fiasco"") to use them outside main(). This issue manifests as a deadlock on exit during destruction of log4cplus' thread pool. To overcome this limitation, always use log4cplus::Initializer initializer; as the first thing in main(); never try to log from static/global objects constructors; never try to log from static/global object destructors. Defining the log4cplus::Initializer instance as the first thing in main() ensures that log4cplus is initialized. More importantly, it ensures that log4cplus shuts down before the execution leaves the main() function. Windows and rolling file Appenders On Windows, the standard C++ file streams open files in way that underlying Win32 file HANDLE is not open with FILE_SHARE_DELETE flag. This flag, beside shared delete, allows renaming files that have handles open to them. This issue manifests as error code 13 when the file needs to be rolled over and it is still open by another process. This is also bug #167 on SourceForge. Windows and TLS log4cplus uses thread--local storage (TLS) for NDC, MDC and to optimize use of some temporary objects. On Windows there are two ways to get TLS: using TlsAlloc(), etc., functions using __declspec(thread) While method (2) generates faster code, it has some limitations prior to Windows Vista. If log4cplus.dll is loaded at run time using LoadLibrary() (or as a dependency of such loaded library), then accessing __declspec(thread) variables can cause general protection fault (GPF) errors. This is because Windows prior to Windows Vista do not extend the TLS for libraries loaded at run time using LoadLibrary(). To allow using the best available method, log4cplus enables the method (2) by checking _WIN32_WINNT >= 0x0600 condition, when compiling log4cplus targeted to Windows Vista or later. Android, TLS and CMake log4cplus uses thread--local storage (TLS, see ""Windows and TLS"" for details). On the Android platform, when log4cplus is being compiled using the android/android.toolchain.cmake, you might get errors featuring the __emutls symbol: global-init.cxx:268:46: error: log4cplus::internal::__emutls_t._ZN9log4cplus8internal3ptdE causes a section type conflict with log4cplus::internal::ptd  To work around this issue, invoke CMake with -DANDROID_FUNCTION_LEVEL_LINKING:BOOL=OFF option. Threads and signals log4cplus is not safe to be used from asynchronous signals' handlers. This is a property of most threaded programmes in general. If you are going to use log4cplus in threaded application and if you want to use log4cplus from signal handlers then your only option is to block signals in all threads but one that will handle all signals. On POSIX platforms, this is possible using the sigwait() call. log4cplus enables this approach by blocking all signals in any threads created through its threads helpers. IBM's XL C/C++ compiler IBM's XL C/C++ compiler executable has many variants. To compile log4cplus with threading support specify one of the compiler variants that support threading using the CXX variable on configure script command line. E.g.: $ ../configure --enable-threads CXX=xlC_r  AIX reentrancy problem There appears to be a reentracy problem with AIX 5.3 and xlC 8 which can result into a deadlock condition in some circumstances. It is unknown whether the problem manifests with other versions of either the OS or the compiler, too. The problem was initially reported in a bug report #103. The core of the problem is that IBM's/xlC's standard C++ IOStreams implementation uses global non recursive lock to protect some of its state. The application in the bug report was trying to do logging using log4cplus from inside overflow() member function of a class derived from std::streambuf class. log4cplus itself uses std::ostringstream. This resulted into an attempt to recursively lock the global non recursive lock and a deadlock. Solaris / SunOS Some older version of this operating system might have problems linking log4cplus due to missing __tls_get_addr in their unpatched state. Solaris Studio Solaris Studio compilers' default standard C++ library is very non-standard. It seems that it is not conforming enough in, e.g., Sun C++ 5.12 Linux_i386 2011/11/16 (missing std::time_t, etc.), but it works well enough on Solaris with Sun C++ 5.8 2005/10/13. Thus log4cplus adds -library=stlport4 to the CXXFLAGS environment variable, unless a switch matching -library=(stlport4|stdcxx4|Cstd) is already present there. If you want to override the default supplied by log4cplus, just set it into CXXFLAGS on configure script command line. Solaris Studio supports the __func__ symbol which can be used by log4cplus to record function name in logged events. To enable this feature, add -features=extensions switch to CXXFLAGS for configure script. Subsequently, you will have to add this switch to your application's build flags as well. Solaris Studio on GNU/Linux The autotools and our configure.ac combo does not handle Solaris Studio compiler on Linux well enough and needs a little help with configuration of POSIX threads: $ COMMON_FLAGS=""-L/lib/x86_64-linux-gnu/ \ -L/usr/lib/x86_64-linux-gnu/ -mt=yes -O""  $ ../configure --enable-threads=yes \ CC=/opt/solarisstudio12.3/bin/cc \ CXX=/opt/solarisstudio12.3/bin/CC \ CFLAGS=""$COMMON_FLAGS"" \ CXXFLAGS=""$COMMON_FLAGS"" \ LDFLAGS=""-lpthread"" HP-UX with aCC It is necessary to turn on C++98 mode of aCC by providing the -AA flag: $ ../configure --enable-threads=yes CXXFLAGS=""-AA""  HP-UX with aCC on IA64 There is a problem on IA64 HP-UX with aCC (HP C/aC++ B3910B A.06.20). The problem manifests as unsatisfied symbols during linking of loggingserver: ld: Unsatisfied symbol ""virtual table of loggingserver::ClientThread"" in file loggingserver.o  The problem appears to be a deficiency in aCC and its support of __declspec(dllexport). To work around this issue, add --disable-symbols-visibility-options to configure script command line: $ ../configure --disable-symbols-visibility-options \ --enable-threads=yes CXXFLAGS=""-AA""  Haiku Haiku is supported with GCC 4+. The default GCC version in Haiku is set to version 2 (based on GCC 2.95.x). To change the default GCC version to version 4, please run setgcc gcc4 command. This is to avoid linking errors like this: main.cpp:(.text.startup+0x54a): undefined reference to `_Unwind_Resume'  Running the command switches the current GCC version to version 4. This change is permanent and global. See also Haiku ticket #8368. Qt4 / Win32 / MSVC In order to use log4cplus in Qt4 programs it is necessary to set following option: Treat WChar_t As Built in Type: No (/Zc:wchar_t-) Set this option for log4cplus project and Qt4DebugAppender project in MS Visual Studio. Remember to use Unicode versions of log4cplus libraries with Qt. It is also necessary to make clear distinction between debug and release builds of Qt project and log4cplus. Do not use log4cplus release library with debug version of Qt program and vice versa. For registering Qt4DebugAppender library at runtime, call this function: log4cplus::Qt4DebugAppender::registerAppender() Add these lines to qmake project file for using log4cplus and Qt4DebugAppender: INCLUDEPATH += C:\log4cplus\include win32 {     CONFIG(debug, debug|release) {         LIBS += -LC:\log4cplus\msvc14\Win32\bin.Debug_Unicode -llog4cplusUD         LIBS += -LC:\log4cplus\msvc14\Win32\bin.Debug_Unicode -llog4cplus-Qt4DebugAppender     } else {         LIBS += -LC:\log4cplus\msvc14\Win32\bin.Release_Unicode -llog4cplusU         LIBS += -LC:\log4cplus\msvc14\Win32\bin.Release_Unicode -llog4cplus-Qt4DebugAppender     } }  Qt / GCC You might encounter the following error during compilation with --with-qt option: qglobal.h:943: error: ISO C++ does not support 'long long'  This is caused by -pedantic option that log4cplus adds to CXXFLAGS when compiling with GCC. To work around this issue, add -Wno-long-long GCC option to CXXFLAGS. OpenBSD OpenBSD 5.2 and earlier have a bug in wcsftime() function in handling of %% and %N where N is not a supported formatter. This is fixed in OpenBSD 5.3 and later. This shows as failing timeformat_test when log4cplus is compiled with -DUNICODE in CXXFLAGS. iOS support iOS support is based on CMake build. Use the scripts in iOS directory. The iOS.cmake toolchain file was originally taken from ios-cmake project. To build the library for iOS, being in current folder, perform the steps below. For ARMv7 architecture: $ ./scripts/cmake_ios_armv7.sh $ cmake --build ./build_armv7 --config ""Release"" $ cmake --build ./build_armv7 --config ""Debug""  For i386 architecture: $ ./scripts/cmake_ios_i386.sh $ cmake --build ./build_i386 --config ""Release"" $ cmake --build ./build_i386 --config ""Debug""  Some versions of the iOS and/or its SDK have problems with thread-local storage (TLS) and getting through CMake's environment detection phase. To work around these issues, make these changes: Edit the iOS.cmake file and add these two lines. set (CMAKE_CXX_COMPILER_WORKS TRUE) set (CMAKE_C_COMPILER_WORKS TRUE)  Add these lines. Customize them accordingly: set(MACOSX_BUNDLE_GUI_IDENTIFIER com.example) set(CMAKE_MACOSX_BUNDLE YES) set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY ""iPhone Developer"") set(IPHONEOS_ARCHS arm64)  If you have issues with TLS, also comment out these lines: set(LOG4CPLUS_HAVE_TLS_SUPPORT 1) set(LOG4CPLUS_THREAD_LOCAL_VAR ""__thread"")  LOG4CPLUS_*_FMT() and UNICODE Beware, the %s specifier does not work the same way on Unix--like platforms as it does on Windows with Visual Studio. With Visual Studio the %s specifier changes its meaning conveniently by printing wchar_t string when used with wprintf() and char strings when used with printf(). On the other hand, Unix--like platforms keeps the meaning of printing char strings when used with both wprintf() and printf(). It is necessary to use %ls (C99) specifier or %S (SUSv2) specifier to print wchar_t strings on Unix--like platforms. The common ground for both platforms appears to be use of %ls and wchar_t string to print strings with unmodified formatting string argument on both Unix--like platforms and Windows. The conversion of wchar_t back to char then depends on C locale. Unsupported compilers and platforms log4cplus does not support too old or broken C++ compilers. Since log4cplus version 2.0.0, it means it does not support any platform or compiler without decent C++11 support. Visual Studio prior to 2015 GCC prior to 4.8 Bug reporting instructions For successful resolution of reported bugs, it is necessary to provide enough information: log4cplus What is the exact release version or Git branch and revision? What is the build system that you are building log4cplus with (Autotools, Visual Studio solution and its version, CMake). Autotools -- Provide configure script parameters and environment variables, attach generated config.log and defines.hxx files. CMake -- Provide build configuration (Release, Debug, RelWithDebInfo) and non--default CMAKE_* variables values. Visual Studio -- Provide project configuration (Release, Release_Unicode, Debug, Debug_Unicode) and Visual Studio version. Provide target OS and CPU. In case of MinGW, provide its exact compiler distribution -- TDM? Nuwen? Other? log4cplus client application Are you using shared library log4cplus or as static library log4cplus? Is log4cplus linked into an executable or into a shared library (DLL or SO)? If log4cplus is linked into a shared library, is this library loaded dynamically or not? What library file you are linking your application with -- log4cplus.lib, log4cplusUSD.lib, liblog4cplus.dll.a, etc., on Windows? Is your application is using Unicode/wchar_t or not? Provide any error messages. Provide stack trace. Provide log4cplus properties/configuration files. Provide a self--contained test case, if possible. License This library is licensed under the Apache Public License 2.0 and two clause BSD license. Please read the included LICENSE file for details. Contributions log4cplus is hosted on SourceForge, except for log4cplus source, which is hosted on GitHub. This allows the project to integrate with Travis CI service offered by GitHub. Patches Anybody can contribute to log4cplus development. If you are contributing a source code change, use a reasonable form: a merge request of a Git branch or a patch file attached to a ticket in Bugs tracker or sent to log4cplus-devel mailing list. Unless it is obvious, always state what branch or release tarball is your patch based upon. Formatting Please use common sense. Follow the style of surrounding code. You can use the following Emacs style that is based on Microsoft's style as a guide line: ;; Custom MS like indentation style. (c-add-style ""microsoft""              '(""stroustrup""                (c-offsets-alist                 (innamespace . -)                 (inline-open . 0)                 (inher-cont . c-lineup-multi-inher)                 (arglist-cont-nonempty . +)                 (template-args-cont . +))))  Tools Build system log4cplus supports multiple build systems (GNU Autoconf/Automake/Libtool aka Autotools, CMake and Visual Studio solution and project files). Autotools is considered the primary build system on Unix--like platforms. However, CMake should still be usable on Unix--like platforms as well. On Windows, it depends on compiler and tool-chain that you want to use. When using Visual Studio, use Visual Studio solution and project files. However, CMake build system should still work and produce useful results. When using some form of MinGW64 tool-chain, the CMake build system is considered primary and the Autotools based build system is unsupported. Use the MinGW Makefiles option and build with mingw-make (or similar). The MSYS Makefiles option is untested and unsupported. Autotools The Makefile.am files for this build systems are hand written. Some of them, however, are generated from Makefile.am.tpl and Makefile.am.def by GNU Autogen. This is to make adding new files to the source easier. To regenerate Makefile.am files, configure script, testsuite script or any other part of the Autotools build system, use the scripts/doautoreconf.sh script from source root directory. It will invoke all the necessary tools in the correct order. log4cplus closely follows Autoconf's, Automake's and Libtool's development and its master branch files are always generated using the latest available version of the tools. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/log4cplus/log4cplus"	"A simple to use C++ logging API providing thread-safe, flexible, and arbitrarily granular control over log management and configuration. [BSD & Apache2]"	"true"
"Logging"	"plog"	"https://github.com/SergiusTheBest/plog"	"Portable and simple C++ logging library. [MPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"155"	"20"	"30"	"GitHub - SergiusTheBest/plog: Portable, simple and extensible C++ logging library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 155 Fork 30 SergiusTheBest/plog Code Issues 2 Pull requests 3 Pulse Graphs Portable, simple and extensible C++ logging library 325 commits 2 branches 15 releases 4 contributors C++ 100.0% C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags capture-file master Nothing to show 1.0.1 1.0.0 0.6.2 0.6.1 0.6.0 0.5.9 0.5.8 0.5.7 0.5.6 0.5.5 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 Nothing to show New pull request Latest commit 003f3c6 May 24, 2016 SergiusTheBest Merge pull request #24 from christophschlosser/master … Cleanup trailing whitespaces Permalink Failed to load latest commit information. include/plog Remove trailing whitespace from Util.h May 24, 2016 pom/include Bumped version to 1.0.0. May 17, 2015 samples Fix warning C4566 on Windows if the codepage is not Cyrillic. Mar 21, 2016 .gitignore Added ignores. Mar 14, 2015 .travis.yml Fix Travis CI build. Mar 15, 2016 LICENSE Update LICENSE May 8, 2015 README.md Add AppVeyor badge. Mar 21, 2016 appveyor.yml Add more environments to the build matrix. Mar 21, 2016 README.md Plog - portable and simple log for C++ Pretty powerful log in less than 1000 lines of code Introduction Hello log! Features Usage Step 1: Adding includes Step 2: Initialization Step 3: Logging Basic logging macros Conditional logging macros Logger severity checker Advanced usage Changing severity at runtime Custom initialization Multiple appenders Multiple loggers Chained loggers Architecture Overview Logger Record Formatter TxtFormatter CsvFormatter FuncMessageFormatter Converter UTF8Converter Appender RollingFileAppender ConsoleAppender ColorConsoleAppender AndroidAppender Miscellaneous notes Lazy stream evaluation Stream improvements over std::ostream Automatic 'this' pointer capture Headers to include Unicode Performance Extending Custom data type Custom appender Custom formatter Custom converter Samples References Competing C++ log libraries Tools and useful info License Version history Introduction Hello log! Plog is a C++ logging library that is designed to be as simple, small and flexible as possible. It is created as an alternative to existing large libraries and provides some unique features as CSV log format and automatic 'this' pointer capture. Here is a minimal hello log sample: #include <plog/Log.h> // Step1: include the header.  int main() {     plog::init(plog::debug, ""Hello.txt""); // Step2: initialize the logger.      // Step3: write log messages using a special macro.      // There are several log macros, use the macro you liked the most.      LOGD << ""Hello log!""; // short macro     LOG_DEBUG << ""Hello log!""; // long macro     LOG(plog::debug) << ""Hello log!""; // function-style macro      return 0; } And its output: 2015-05-18 23:12:43.921 DEBUG [21428] [main@13] Hello log! 2015-05-18 23:12:43.968 DEBUG [21428] [main@14] Hello log! 2015-05-18 23:12:43.968 DEBUG [21428] [main@15] Hello log!  Features Very small (less than 1000 LOC) Easy to use Headers only No 3rd-party dependencies Cross-platform: Windows, Linux, Mac OS X, Android (gcc, clang, msvc, mingw, mingw-w64) Thread and type safe Formatters: TXT, CSV, FuncMessage Appenders: RollingFile, Console, ColorConsole, Android Automatic 'this' pointer capture (supported only on msvc) Lazy stream evaluation Unicode aware, files are stored in UTF8 Doesn't require C++11 Extendable Usage To start using plog you need to make 3 simple steps. Step 1: Adding includes At first your project needs to know about plog. For that you have to: Add plog/inlcude to the project include paths Add #include <plog/Log.h> into your cpp/h files (if you have precompiled headers it is a good place to add this include there) Step 2: Initialization The next step is to initialize the Logger. This is done by the following plog::init function: Logger& init(Severity maxSeverity, const char/wchar_t* fileName, size_t maxFileSize = 0, int maxFiles = 0); maxSeverity is the logger severity upper limit. All log messages have its own severity and if it is higher than the limit those messages are dropped. Plog defines the following severity levels: enum Severity {     none = 0,     fatal = 1,     error = 2,     warning = 3,     info = 4,     debug = 5,     verbose = 6 }; The log format is determined automatically by fileName file extension: .csv => CSV format anyting else => TXT format The rolling behavior is controlled by maxFileSize and maxFiles parameters: maxFileSize - the maximum log file size in bytes maxFiles - a number of log files to keep If one of them is zero then log rolling is disabled. Sample: plog::init(plog::warning, ""c:\\logs\\log.csv"", 1000000, 5); Here the logger is initialized to write all messages with up to warning severity to a file in csv format. Maximum log file size is set to 1'000'000 bytes and 5 log files are kept. Note: see Custom initialization for advanced usage. Step 3: Logging Logging is performed with the help of special macros. A log message is constructed using stream output operators <<. Thus it is type-safe and extendable in contrast to a format string output. Basic logging macros This is the most used type of logging macros. They do unconditional logging. Long macros: LOG_VERBOSE << ""verbose""; LOG_DEBUG << ""debug""; LOG_INFO << ""info""; LOG_WARNING << ""warning""; LOG_ERROR << ""error""; LOG_FATAL << ""fatal""; Short macros: LOGV << ""verbose""; LOGD << ""debug""; LOGI << ""info""; LOGW << ""warning""; LOGE << ""error""; LOGF << ""fatal""; Function-style macros: LOG(severity) << ""msg""; Conditional logging macros These macros are used to do a conditional logging. They accept a condition as a parameter and perform logging if the condition is true. Long macros: LOG_VERBOSE_IF(cond) << ""verbose""; LOG_DEBUG_IF(cond) << ""debug""; LOG_INFO_IF(cond) << ""info""; LOG_WARNING_IF(cond) << ""warning""; LOG_ERROR_IF(cond) << ""error""; LOG_FATAL_IF(cond) << ""fatal""; Short macros: LOGV_IF(cond) << ""verbose""; LOGD_IF(cond) << ""debug""; LOGI_IF(cond) << ""info""; LOGW_IF(cond) << ""warning""; LOGE_IF(cond) << ""error""; LOGF_IF(cond) << ""fatal""; Function-style macros: LOG_IF(severity, cond) << ""msg""; Logger severity checker In some cases there is a need to perform a group of actions depending on the current logger severity level. There is a special macro for that. It helps to minimize performance penalty when the logger is inactive. IF_LOG(severity) Sample: IF_LOG(plog::debug) // we want to execute the following statements only at debug severity (and higher) {     for (int i = 0; i < vec.size(); ++i)     {         LOGD << ""vec["" << i << ""]: "" << vec[i];     } } Advanced usage Changing severity at runtime It is possible to set the maximum severity not only at the logger initialization time but at any time later. There are special accessor methods: Severity Logger::getMaxSeverity() const; Logger::setMaxSeverity(Severity severity); To get the logger use plog::get function: Logger* get(); Sample: plog::get()->setMaxSeverity(plog::debug); Custom initialization Non-typical log cases require the use of custom initialization. It is done by the following plog::init function: Logger& init(Severity maxSeverity = none, IAppender* appender = NULL); You have to construct an Appender parameterized with a Formatter and pass it to the plog::init function. Note: a lifetime of the appender should be static! Sample: static plog::ConsoleAppender<plog::TxtFormatter> consoleAppender; plog::init(plog::debug, &consoleAppender); Multiple appenders It is possible to have multiple Appenders within a single Logger. In such case log message will be written to all of them. Use the following method to accomplish that: Logger& Logger::addAppender(IAppender* appender); Sample: static plog::RollingFileAppender<plog::CsvFormatter> fileAppender(""MultiAppender.csv"", 8000, 3); // Create the 1st appender. static plog::ConsoleAppender<plog::TxtFormatter> consoleAppender; // Create the 2nd appender. plog::init(plog::debug, &fileAppender).addAppender(&consoleAppender); // Initialize the logger with the both appenders. Here the logger is initialized in the way when log messages are written to both a file and a console. Refer to MultiAppender for a complete sample. Multiple loggers Multiple Loggers can be used simultaneously each with their own separate configuration. The Loggers differ by their instance number (that is implemented as a template parameter). The default instance is zero. Initialization is done by the appropriate template plog::init functions: Logger<instance>& init<instance>(...); To get a logger use plog::get function (returns NULL if the logger is not initialized): Logger<instance>* get<instance>(); All logging macros have their special versions that accept an instance parameter. These kind of macros have an underscore at the end: LOGD_(instance) << ""debug""; LOGD_IF_(instance, condition) << ""conditional debug""; IF_LOG_(instance, severity) Sample: enum // Define log instances. Default is 0 and is omitted from this enum. {     SecondLog = 1 };  int main() {     plog::init(plog::debug, ""MultiInstance-default.txt""); // Initialize the default logger instance.     plog::init<SecondLog>(plog::debug, ""MultiInstance-second.txt""); // Initialize the 2nd logger instance.      // Write some messages to the default log.     LOGD << ""Hello default log!"";      // Write some messages to the 2nd log.     LOGD_(SecondLog) << ""Hello second log!"";      return 0; } Refer to MultiInstance for a complete sample. Chained loggers A Logger can work as an Appender for another Logger. So you can chain several loggers together. This is useful for streaming log messages from a shared library to the main application binary. Sample: // shared library  // Function that initializes the logger in the shared library.  extern ""C"" void EXPORT initialize(plog::Severity severity, plog::IAppender* appender) {     plog::init(severity, appender); // Initialize the shared library logger. }  // Function that produces a log message. extern ""C"" void EXPORT foo() {     LOGI << ""Hello from shared lib!""; } // main app  // Functions imported form the shared library. extern ""C"" void initialize(plog::Severity severity, plog::IAppender* appender); extern ""C"" void foo();  int main() {     plog::init(plog::debug, ""ChainedApp.txt""); // Initialize the main logger.      LOGD << ""Hello from app!""; // Write a log message.      initialize(plog::debug, plog::get()); // Initialize the logger in the shared library. Note that it has its own severity.     foo(); // Call a function from the shared library that produces a log message.      return 0; } Refer to Chained for a complete sample. Architecture Overview Plog is designed to be small but flexible, so it prefers templates to interface inheritance. All main entities are shown on the following UML diagram: There are 5 functional parts: Logger - the main object, implemented as singleton Record - keeps log data: time, message, etc Appender - represents a log data destination: file, console, etc Formatter - formats log data into a string Converter - converts formatter output into a raw buffer The log data flow is shown below: Logger Logger is a center object of the whole logging system. It is a singleton and thus it forms a known single entry point for configuration and processing log data. Logger can act as Appender for another Logger because it implements IAppender interface. Also there can be several independent loggers that are parameterized by an integer instance number. The default instance is 0. template<int instance> class Logger : public util::Singleton<Logger<instance> >, public IAppender { public:     Logger(Severity maxSeverity = none);      Logger& addAppender(IAppender* appender);      Severity getMaxSeverity() const;     void setMaxSeverity(Severity severity);     bool checkSeverity(Severity severity) const;      virtual void write(const Record& record);     void operator+=(const Record& record); }; Record Record stores all log data. It includes: time severity thread id 'this' pointer (if a log message is written from within an object) source line function name message Also Record has a number of overloaded stream output operators to construct a message. class Record { public:     Record(Severity severity, const char* func, size_t line, const void* object);      //////////////////////////////////////////////////////////////////////////     // Stream output operators      Record& operator<<(char data);     Record& operator<<(wchar_t data);      template<typename T>     Record& operator<<(const T& data);      //////////////////////////////////////////////////////////////////////////     // Getters      const util::Time& getTime() const;     Severity getSeverity() const;     unsigned int getTid() const;     const void* getObject() const;     size_t getLine() const;     const util::nstring getMessage() const;     std::string getFunc() const; }; See Stream improvements over std::ostream. Refer to Demo sample to see what can be written to the log stream. Formatter Formatter is responsible for formatting log data from Record into various string representations (binary forms can be used too). There is no base class for formatters, they are implemented as classes with static functions format and header: class Formatter { public:     static util::nstring header();     static util::nstring format(const Record& record); }; See How to implement a custom formatter. TxtFormatter This is a classic log format available in almost any log library. It is good for console output and it is easy to read without any tools. 2014-11-11 00:29:06.245 FATAL [4460] [main@22] fatal 2014-11-11 00:29:06.261 ERROR [4460] [main@23] error 2014-11-11 00:29:06.261 INFO  [4460] [main@24] info 2014-11-11 00:29:06.261 WARN  [4460] [main@25] warning 2014-11-11 00:29:06.261 DEBUG [4460] [main@26] debug 2014-11-11 00:29:06.261 INFO  [4460] [main@32] This is a message with ""quotes""! 2014-11-11 00:29:06.261 DEBUG [4460] [Object::Object@8]  2014-11-11 00:29:06.261 DEBUG [4460] [Object::~Object@13]   CsvFormatter This is the most powerful log format. It can be easily read without any tools (but slighlty harder than TXT format) and can be heavily analyzed if it is opened with a CSV-aware tool (like Excel). One rows can be highlighted according to their cell values, another rows can be hidden, columns can be manipulated and you can even run SQL queries on log data! This is a recommended format if logs are big and require heavy analysis. Also 'this' pointer is shown so object instances can be told apart. Date;Time;Severity;TID;This;Function;Message 2014/11/14;15:22:25.033;FATAL;4188;00000000;main@22;""fatal"" 2014/11/14;15:22:25.033;ERROR;4188;00000000;main@23;""error"" 2014/11/14;15:22:25.033;INFO;4188;00000000;main@24;""info"" 2014/11/14;15:22:25.033;WARN;4188;00000000;main@25;""warning"" 2014/11/14;15:22:25.048;DEBUG;4188;00000000;main@26;""debug"" 2014/11/14;15:22:25.048;INFO;4188;00000000;main@32;""This is a message with """"quotes""""!"" 2014/11/14;15:22:25.048;DEBUG;4188;002EF4E3;Object::Object@8; 2014/11/14;15:22:25.048;DEBUG;4188;002EF4E3;Object::~Object@13;  Note: message size is limited to 32000 chars. FuncMessageFormatter This format is designed to be used with appenders that provide their own timestamps (like AndroidAppender or linux syslog facility). main@22: fatal main@23: error main@24: info main@25: warning main@26: debug main@32: This is a message with ""quotes""! Object::Object@8:  Object::~Object@13:   Converter Converter is responsible for conversion of Formatter output data to a raw buffer (represented as std::string). It is used by RollingFileAppender to perform a conversion before writing to a file. There is no base class for converters, they are implemented as classes with static functions convert and header: class Converter { public:     static std::string header(const util::nstring& str);     static std::string convert(const util::nstring& str); }; See How to implement a custom converter. UTF8Converter UTF8Converter is the only converter available in plog out of the box. It converts string data to UTF-8 with BOM. Appender Appender uses Formatter and Converter to get a desired representation of log data and outputs (appends) it to a file/console/etc. All appenders must implement IAppender interface (the only interface in plog): class IAppender { public:     virtual ~IAppender();     virtual void write(const Record& record) = 0; }; See How to implement a custom appender. RollingFileAppender This appender outputs log data to a file with rolling behaviour. As template parameters it accepts both Formatter and Converter. RollingFileAppender<Formatter, Converter>::RollingFileAppender(const util::nchar* fileName, size_t maxFileSize = 0, int maxFiles = 0); fileName - a log file name maxFileSize - the maximum log file size in bytes maxFiles - a number of log files to keep If maxFileSize or maxFiles is 0 then rolling behaviour is turned off. The sample file names produced by this appender: mylog.log <== current log file (size < maxFileSize) mylog.1.log <== previous log file (size >= maxFileSize) mylog.2.log <== previous log file (size >= maxFileSize) Note: the lowest maxFileSize is 1000 bytes. Note: a log file is created on the first log message. ConsoleAppender This appender outputs log data to stdout. As a template parameter it accepts Formatter. ConsoleAppender<Formatter>::ConsoleAppender(); ColorConsoleAppender This appender outputs log data to stdout using colors that depends on a log message severity level. As a template parameter it accepts Formatter. ColorConsoleAppender<Formatter>::ColorConsoleAppender(); AndroidAppender AndroidAppender uses Android logging system to output log data. It can be viewed with logcat or in a log window of Android IDEs. As a template parameter this appender accepts Formatter (usually FuncMessageFormatter). AndroidAppender<Formatter>::AndroidAppender(const char* tag); Miscellaneous notes Lazy stream evaluation Log messages are constructed using lazy stream evaluation. It means that if a log message will be dropped (because of its severity) then stream output operators are not executed. Thus performance penalty of unprinted log messages is negligible. LOGD << /* the following statements will be executed only when the logger severity is debug or higher */ ... Stream improvements over std::ostream Stream output in plog has several improvements over the standard std::ostream: handles wide chars/strings: wchar_t, wchar_t*, std::wstring handles NULL values for C-strings: char* and wchar_t* implicitly casts objects to: std::string and std::wstring (if they have an appropriate cast operator) Automatic 'this' pointer capture 'This' pointer is captured automatically to log data and can be printed by CsvFormatter. Unfortunately this feature is supported only on msvc 2010 and higher. Headers to include The core plog functionality is provided by inclusion of plog/Log.h file. Extra components require inclusion of corresponding extra headers after plog/Log.h. Unicode Plog is unicode aware and wide string friendly. All messages are converted to a system native char type: wchar_t - on Windows char - on all other systems Also char is treated as: active code page - on Windows UTF-8 - on all other systems Internally plog uses nstring, nstringstream and nchar ('n' for native) that are defined as: #ifdef _WIN32     typedef std::wstring nstring;     typedef std::wstringstream nstringstream;     typedef wchar_t nchar; #else     typedef std::string nstring;     typedef std::stringstream nstringstream;     typedef char nchar; #endif By default all log files are stored in UTF-8 with BOM thanks to UTF8Converter. Note: on Android wide string support in plog is disabled. Performance Plog is not using any asynchronous techniques so it may slow down your application on large volumes of log messages. Producing a single log message takes the following amount of time: CPU OS Time per a log call, microsec AMD Phenom II 1055T @3.5GHz Windows 2008 R2 12 AMD Phenom II 1055T @3.5GHz Linux Mint 17.1 8 Intel Core i3-3120M @2.5GHz Windows 2012 R2 25 Intel Core i5-2500K @4.2GHz Windows 2008 R2 8 Intel Atom N270 @1.6GHz Windows 2003 68 Assume 20 microsec per a log call then 500 log calls per a second will slow down an application by 1%. It is acceptable for the most use cases. Refer to Performance for a complete sample. Extending Plog can be easily extended to support new: custom data type custom appender custom formatter custom converter Custom data type To output a custom data type to a log message implement the following function: namespace plog {     Record& operator<<(Record& record, const MyType& t); } Refer to CustomType for a complete sample. Custom appender A custom appender must implement IAppender interface. Also it may accept Formatter and Converter as template parameters however this is optional. namespace plog {     template<class Formatter>     class MyAppender : public IAppender     {     public:         virtual void write(const Record& record);     }; } Refer to CustomAppender for a complete sample. Custom formatter A formatter that is compatible with existing appenders must be a class with 2 static methods: header - returns a header for a new log format - formats Record to a string namespace plog {     class MyFormatter     {     public:         static util::nstring header();         static util::nstring format(const Record& record);     }; } Refer to CustomFormatter for a complete sample. Custom converter A converter must be a class with 2 static methods: header - converts a header for a new log convert - converts log messages namespace plog {     class MyConverter     {     public:         static std::string header(const util::nstring& str);         static std::string convert(const util::nstring& str);     }; } Refer to CustomConverter for a complete sample. Samples There are a number of samples that demonstrate various aspects of using plog. They can be found in the samples folder: Sample Description Android Shows how to use the android-specific appender. Chained Shows how to chain a logger in a shared library with the main logger (route messages). Library Shows plog usage in static libraries. Hello A minimal introduction sample, shows the basic 3 steps to start using plog. MultiAppender Shows how to use multiple appenders with the same logger. MultiInstance Shows how to use multiple logger instances, each instance has its own independent configuration. ObjectiveC Shows that plog can be used in ObjectiveC++. Demo Demonstrates log stream abilities, prints various types of messages. ColorConsole Shows how to use a color console appender. CustomAppender Shows how to implement a custom appender that stores log messages in memory. CustomFormatter Shows how to implement a custom formatter. CustomConverter Shows how to implement a custom converter that encrypts log messages. CustomType Shows how to print a custom type to the log stream. Facilities Shows how to use logging per facilities via multiple logger instances (useful for big projects). Performance Measures time per a log call. References Competing C++ log libraries Boost::Log EasyLogging++ g2log glog Log4cplus Log4cpp Log4cxx Pantheios spdlog reckless Tools and useful info __if_exists Statement Controlling Symbol Visibility Gravizo PlantUML DocToc CMake License Plog is licensed under the MPL version 2.0. You can freely use it in your commercial or opensource software. Version history Version 1.0.1 (01 Nov 2015) New: Added ColorConsoleAppender Fixed #6: Compatibility with Mingw-w64 Fixed #7: Log file not created if file name contains Unicode characters in Windows Fixed #4: Flush stdout Fixed #3: IntelliSense error: expected an identifier Version 1.0.0 (19 May 2015) Initial public release Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SergiusTheBest/plog"	"Portable and simple C++ logging library. [MPL2]"	"true"
"Logging"	"reckless"	"https://github.com/mattiasflodin/reckless"	"Low-latency, high-throughput, asynchronous logging library for C++. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"111"	"9"	"15"	"GitHub - mattiasflodin/reckless: Reckless logging. Low-latency, high-throughput, asynchronous logging library for C++. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 111 Fork 15 mattiasflodin/reckless Code Issues 1 Pull requests 0 Pulse Graphs Reckless logging. Low-latency, high-throughput, asynchronous logging library for C++. 36 commits 4 branches 3 releases Fetching contributors C++ 98.9% Python 1.1% C++ Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags initial_work master next wip/windows Nothing to show v2.1.0 v2.0.0 v1.0.0 Nothing to show New pull request Latest commit c623d55 May 22, 2016 mattiasflodin Allow public access to the internal worker-thread object Permalink Failed to load latest commit information. benchmarks Remove trailing whitespace May 8, 2016 boost/boost_1_56_0 Initial commit May 10, 2015 doc Allow public access to the internal worker-thread object May 22, 2016 examples Add license to all source files May 22, 2016 performance_log Add license to all source files May 22, 2016 reckless Allow public access to the internal worker-thread object May 22, 2016 scripts Add license to all source files May 22, 2016 tests Add license to all source files May 22, 2016 LICENSE.txt Add license to all source files May 22, 2016 Makefile Initial commit May 10, 2015 README.md Documentation with more details and information about error handling May 3, 2016 Tuprules.tup Add RECKLESS_DEBUG to catch more errors Apr 30, 2016 tup.config.template Template for tup.config Apr 30, 2016 README.md Introduction Reckless is an extremely low-latency, high-throughput logging library. It was created because I needed to perform extensive diagnostic logging without worrying about performance. Other logging libraries boast the ability to throw log messages away very quickly. Reckless boasts the ability to keep them all, without worrying about the performance impact. Filtering can and should wait until you want to read the log, or need to clean up disk space. How it works By low latency I mean that the time from calling the library and returning to the caller is as short as I could make it. The code generated at the call site consists of Pushing the arguments on a thread-local queue. This has the same cost as pushing the arguments on the stack for a normal function call. Call to Boost.Lockless (NB: this is bundled with the library, not an external dependency) to register the write request on a shared lockless queue. The actual message formatting and writing is performed asynchronously by a separate thread. This removes or hides several costs: No transition to the kernel at the call site. The kernel is an easily overlooked but important cost, not only because the transition costs time, but because it pollutes the CPU cache. In other words, avoiding this makes your non-logging code run faster than if you were using a library that has to enter the kernel to perform its work. No locks need to be taken for synchronization between threads (unless the queue fills up; see the performance article for more information about the implications of this). It doesn't have to wait for the actual I/O operation to complete. If there are bursts of log calls, multiple items on the queue can be batched into a single I/O operation, improving throughput without sacrificing write latency. For a more detailed performance discussion and statistics, see the performance article. What's the catch? As all string formatting and I/O is done asynchronously and in a single thread, there are a few caveats you need to be aware of: If you choose to pass log arguments by reference or pointer, then you must ensure that the referenced data remains valid at least until the log has been flushed or closed (unless you're only interested in logging the value of the pointer itself). The best option for dynamically allocated data is typically std::string, std::shared_ptr or std::unique_ptr. You must take special care to handle crashes if you want to make sure that all log data prior to the crash is saved. This is not unique to asynchronous logging—for example fprintf will buffer data until you flush it—but asynchronous logging arguably makes the issue worse. The library provides convenience functions to aid with this. As all string formatting is done in a single thread, it could theoretically limit the scalability of your application if the formatting is very expensive. Performance becomes somewhat less predictable and harder to measure. Rather than putting the cost of the logging on the thread that calls the logging library, the OS may suspend some other thread to make room for the logging thread to run. Basic use #include <reckless/severity_log.hpp> #include <reckless/file_writer.hpp>  // It is possible to build custom loggers for various ways of formatting the // log. The severity log is a stock policy-based logger that allows you to // configure fields that should be put on each line, including a severity // marker for debug/info/warning/error. using log_t = reckless::severity_log<     reckless::indent<4>,       // 4 spaces of indent     ' ',                       // Field separator     reckless::severity_field,  // Show severity marker (D/I/W/E) first     reckless::timestamp_field  // Then timestamp field     >;  reckless::file_writer writer(""log.txt""); log_t g_log(&writer);  int main() {     std::string s(""Hello World!"");      // You can use ordinary printf-style syntax, but unlike stdio this     // is type-safe and extensible.     g_log.debug(""Pointer: %p"", s.c_str());     g_log.info(""Info line: %s"", s);      for(int i=0; i!=4; ++i) {         reckless::scoped_indent indent;  // The indent object causes the lines         g_log.warn(""Warning: %d"", i);    // within this scope to be indented.     }      g_log.error(""Error: %f"", 3.14);      return 0; } This would give the following output: D 2015-03-29 13:23:35.288  Pointer: 0x1e18218 I 2015-03-29 13:23:35.288  Info line: Hello World! W 2015-03-29 13:23:35.288      Warning: 0 W 2015-03-29 13:23:35.288      Warning: 1 W 2015-03-29 13:23:35.288      Warning: 2 W 2015-03-29 13:23:35.288      Warning: 3 E 2015-03-29 13:23:35.288  Error: 3.140000  Platforms The library currently works only on Linux. Windows and BSD are on the roadmap. I don't own any Apple computers, so OS X won't happen unless someone sends me a patch or buys me hardware. Building To build the library, clone the git repository and run make. To build a program against the library, given the variable RECKLESS pointing to the reckless root directory, use: g++ -std=c++11 myprogram.cpp -I$(RECKLESS)/reckless/include -L$(RECKLESS)/reckless/lib -lreckless More information For more details, see the manual. Alternatives Two other logging libraries with a similar, asynchronous design are spdlog and g2log. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mattiasflodin/reckless"	"Low-latency, high-throughput, asynchronous logging library for C++. [MIT]"	"true"
"Logging"	"spdlog"	"https://github.com/gabime/spdlog"	"Super fast, header only, C++ logging library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1211"	"141"	"285"	"GitHub - gabime/spdlog: Super fast C++ logging library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 141 Star 1,211 Fork 285 gabime/spdlog Code Issues 19 Pull requests 2 Wiki Pulse Graphs Super fast C++ logging library. 948 commits 5 branches 0 releases 35 contributors C++ 97.6% CMake 1.1% Other 1.3% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master no-exceptions revert-204-cmake-improvements sink_level_support Nothing to show Nothing to show New pull request Latest commit 01601ce Jul 15, 2016 gabime fixed tests warnings Permalink Failed to load latest commit information. bench no streams Jul 8, 2016 cmake no streams Jul 8, 2016 example fixed tests warnings Jul 15, 2016 include/spdlog Updated fmt lib to version 0d5ef5c2a66026409b0cfbafa1d2f46cdc5aa4d0 Jul 15, 2016 tests fixed tests warnings Jul 15, 2016 .gitignore fixed tests warnings Jul 15, 2016 .travis.yml Update .travis.yml Jun 18, 2016 CMakeLists.txt Update CMakeLists.txt Jul 10, 2016 INSTALL no streams Jul 8, 2016 LICENSE no streams Jul 8, 2016 README.md Update README.md Jul 11, 2016 astyle.sh astyle Dec 21, 2014 README.md spdlog Very fast, header only, C++ logging library.   Install Just copy the source folder to your build tree and use a C++11 compiler Platforms Linux (gcc 4.8.1+, clang 3.5+) Windows (visual studio 2013+, cygwin/mingw with g++ 4.9.1+) Mac OSX (clang 3.5+) Features Very fast - performance is the primary goal (see benchmarks below). Headers only. No dependencies - just copy and use. Feature rich call style using the excellent fmt library. Extremely fast asynchronous mode (optional) - using lockfree queues and other tricks to reach millions of calls/sec. Custom formatting. Multi/Single threaded loggers. Various log targets: Rotating log files. Daily log files. Console logging (colors supported). Linux syslog. Easily extendable with custom log targets (just implement a single function in the sink interface). Severity based filtering - threshold levels can be modified in runtime as well as in compile time. Benchmarks Below are some benchmarks comparing popular log libraries under Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz Synchronous mode Time needed to log 1,000,000 lines in synchronous mode (in seconds, the best of 3 runs): threads boost log 1.54 glog easylogging spdlog 1 4.169s 1.066s 0.975s 0.302s 10 6.180s 3.032s 2.857s 0.968s 100 5.981s 1.139s 4.512s 0.497s Asynchronous mode Time needed to log 1,000,000 lines in asynchronous mode, i.e. the time it takes to put them in the async queue (in seconds, the best of 3 runs): threads g2log async logger spdlog async mode 1 1.850s 0.216s 10 0.943s 0.173s 100 0.959s 0.202s Usage Example #include <iostream> #include ""spdlog/spdlog.h""  int main(int, char* []) {     namespace spd = spdlog;     try     {         // console logger (multithreaded and with color)         auto console = spd::stdout_logger_mt(""console"", true);         console->info(""Welcome to spdlog!"") ;         console->info(""An info message example {}.."", 1);                  //Formatting examples         console->info(""Easy padding in numbers like {:08d}"", 12);         console->info(""Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}"", 42);         console->info(""Support for floats {:03.2f}"", 1.23456);         console->info(""Positional args are {1} {0}.."", ""too"", ""supported"");          console->info(""{:<30}"", ""left aligned"");         console->info(""{:>30}"", ""right aligned"");         console->info(""{:^30}"", ""centered"");          //         // Runtime log levels         //         spd::set_level(spd::level::info); //Set global log level to info         console->debug(""This message shold not be displayed!"");         console->set_level(spd::level::debug); // Set specific logger's log level         console->debug(""Now it should.."");          //         // Create a basic multithreaded file logger (or ""basic_logger_st"" for single threaded logger)         //         auto my_logger = spd::basic_logger_mt(""basic_logger"", ""logs/basic.txt"");         my_logger->info(""Some log message"");          //         // Create a file rotating logger with 5mb size max and 3 rotated files         //         auto rotating_logger = spd::rotating_logger_mt(""some_logger_name"", ""logs/mylogfile"", 1048576 * 5, 3);         for(int i = 0; i < 10; ++i)               rotating_logger->info(""{} * {} equals {:>10}"", i, i, i*i);          //         // Create a daily logger - a new file is created every day on 2:30am         //         auto daily_logger = spd::daily_logger_mt(""daily_logger"", ""logs/daily"", 2, 30);          //         // Customize msg format for all messages         //         spd::set_pattern(""*** [%H:%M:%S %z] [thread %t] %v ***"");         rotating_logger->info(""This is another message with custom format"");          spd::get(""console"")->info(""loggers can be retrieved from a global registry using the spdlog::get(logger_name) function"");          //         // Compile time debug or trace macros.         // Enabled #ifdef SPDLOG_DEBUG_ON or #ifdef SPDLOG_TRACE_ON         //         SPDLOG_TRACE(console, ""Enabled only #ifdef SPDLOG_TRACE_ON..{} ,{}"", 1, 3.23);         SPDLOG_DEBUG(console, ""Enabled only #ifdef SPDLOG_DEBUG_ON.. {} ,{}"", 1, 3.23);          //         // Asynchronous logging is very fast..         // Just call spdlog::set_async_mode(q_size) and all created loggers from now on will be asynchronous..         //         size_t q_size = 8192; //queue size must be power of 2         spdlog::set_async_mode(q_size);         auto async_file= spd::daily_logger_st(""async_file_logger"", ""logs/async_log.txt"");         async_file->info(""This is async log..Should be very fast!"");          //         // syslog example. linux only..         //         #ifdef __linux__         std::string ident = ""spdlog-example"";         auto syslog_logger = spd::syslog_logger(""syslog"", ident, LOG_PID);         syslog_logger->warn(""This is warning that will end up in syslog. This is Linux only!"");         #endif      }     catch (const spd::spdlog_ex& ex)     {         std::cout << ""Log failed: "" << ex.what() << std::endl;     } }   Documentation Documentation can be found in the wiki pages. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gabime/spdlog"	"Super fast, header only, C++ logging library."	"true"
"Logging"	"templog"	"http://www.templog.org/"	"A very small and lightweight C++ library which you can use to add logging to your C++ applications. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The templog library About this site This is the home of the templog library, a very small and lightweight C++ library which you can use to add logging to your C++ applications. It heavily relies on expression templates and inlining to minimize run-time overhead caused by logging. The templog library was mainly designed and implemented by Hendrik Schober, who has given thought to logging in C++ for about 15 years and during that time implemented half a dozen logging libraries. License This library comes with full source code and is licensed under the boost 1.0 license. This license is rather simple and (besides the usual disclaimer) basically says that you can do what you want with the code. Where to go from here Get up and going using the templog library Download the library from sourceforge.net Read the design rationale so you knwo why things are the way they are Have a look at the Full-blown documentation (created by doxygen) Look at the list of suggested features and improvements Current Code I haven't found much time to work on this in the last months (that's why there haven't been any new releases). However, I did indeed work on it somewhat. The latest development is on a branch, which did not yet get merged into the trunk. If you don't want to wait for a new release you can have a look at the current code through sourceforge's ViewVC. You can also check out (or export) the code using SVN with this https://templog.svn.sourceforge.net/viewvc/templog/code/branches/experiments/formatting_policy_lists URL. Contact You can use SourceForge for reporting bugs etc., but if you would like to contact me I'm hendrik at this domain. (You'll probably have guessed it: The name of the library stems from the fact that it implements logging using templates. Hence ""templog"".)"	"null"	"null"	"A very small and lightweight C++ library which you can use to add logging to your C++ applications. [Boost]"	"true"
"Machine Learning"	"Caffe"	"https://github.com/BVLC/caffe"	"A fast framework for neural networks. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11290"	"1471"	"6802"	"GitHub - BVLC/caffe: Caffe: a fast open framework for deep learning. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,471 Star 11,290 Fork 6,802 BVLC/caffe Code Issues 464 Pull requests 245 Wiki Pulse Graphs Caffe: a fast open framework for deep learning. http://caffe.berkeleyvision.org/ 3,735 commits 7 branches 11 releases 199 contributors C++ 79.8% Python 8.3% Cuda 5.6% CMake 2.8% Protocol Buffer 1.6% Matlab 0.9% Other 1.0% C++ Python Cuda CMake Protocol Buffer Matlab Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags device-abstraction gh-pages master opencl parallel tutorial windows Nothing to show v0.9999 v0.999 v0.99 v0.9 v0.1 rcnn-release rc3 rc2 rc bsd acm-mm-oss Nothing to show New pull request Latest commit 50c9a0f Jul 14, 2016 longjon committed on GitHub Merge pull request #4459 from lukeyeager/bvlc/example-scripts … Add ""set -e"" and $@ to example scripts Permalink Failed to load latest commit information. cmake - doc and cmake update MKL related Mar 1, 2016 data Merge pull request #4455 from ShaggO/spaceSupportILSVRC12MNIST Jul 14, 2016 docker Update Dockerfile to cuDNN v5 May 16, 2016 docs Update supported cuDNN version in the documentation May 16, 2016 examples Add ""set -e"" and $@ to example scripts Jul 13, 2016 include/caffe Add level and stages to Net constructor Jun 3, 2016 matlab show Caffe's version from MatCaffe Jan 23, 2016 models [examples] switch examples + models to Input layers Feb 25, 2016 python Merge pull request #4343 from nitnelave/python/top_names Jul 13, 2016 scripts Cache protobuf3 build in TravisCI Jun 1, 2016 src Merge pull request #4359 from ibmsoe/fix-EmbedLayerTest Jul 11, 2016 tools Update parse_log.py Jul 11, 2016 .Doxyfile update doxygen config to stop warnings Sep 3, 2014 .gitignore Update example bash scripts to expect .h5, new extensions in .gitignore Aug 7, 2015 .travis.yml Cache protobuf3 build in TravisCI Jun 1, 2016 CMakeLists.txt [build] (CMake) customisable Caffe version/soversion May 10, 2016 CONTRIBUTING.md [docs] add CONTRIBUTING.md which will appear on GitHub new Issue/PR p… Jul 29, 2015 CONTRIBUTORS.md clarify the license and copyright terms of the project Aug 6, 2014 INSTALL.md installation questions -> caffe-users Oct 19, 2015 LICENSE copyright 2015 Jun 23, 2015 Makefile Fix Makefile CUDA_VERSION extraction on OSX Yosemite May 13, 2016 Makefile.config.example [build] note that `make clean` clears build and distribute dirs May 4, 2016 README.md add badge for travis build and license Oct 1, 2015 caffe.cloc [fix] stop cloc complaint about cu type Sep 4, 2014 README.md Caffe Caffe is a deep learning framework made with expression, speed, and modularity in mind. It is developed by the Berkeley Vision and Learning Center (BVLC) and community contributors. Check out the project site for all the details like DIY Deep Learning for Vision with Caffe Tutorial Documentation BVLC reference models and the community model zoo Installation instructions and step-by-step examples. Please join the caffe-users group or gitter chat to ask questions and talk about methods and models. Framework development discussions and thorough bug reports are collected on Issues. Happy brewing! License and Citation Caffe is released under the BSD 2-Clause license. The BVLC reference models are released for unrestricted use. Please cite Caffe in your publications if it helps your research: @article{jia2014caffe,   Author = {Jia, Yangqing and Shelhamer, Evan and Donahue, Jeff and Karayev, Sergey and Long, Jonathan and Girshick, Ross and Guadarrama, Sergio and Darrell, Trevor},   Journal = {arXiv preprint arXiv:1408.5093},   Title = {Caffe: Convolutional Architecture for Fast Feature Embedding},   Year = {2014} }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BVLC/caffe"	"A fast framework for neural networks. [BSD]"	"true"
"Machine Learning"	"CCV"	"https://github.com/liuliu/ccv"	"C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5313"	"366"	"1292"	"GitHub - liuliu/ccv: C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 366 Star 5,313 Fork 1,292 liuliu/ccv Code Issues 49 Pull requests 16 Wiki Pulse Graphs C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library http://libccv.org 903 commits 11 branches 0 releases 5 contributors C 71.0% Cuda 12.6% HTML 10.6% Ruby 1.5% C++ 1.1% Ragel in Ruby Host 1.1% Other 2.1% C Cuda HTML Ruby C++ Ragel in Ruby Host Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: stable Switch branches/tags Branches Tags gh-pages r0.1-rc1 r0.2-rc1 r0.3-rc1 r0.4-rc1 r0.5-rc1 r0.6-rc1 r0.7-rc1 r0.7-rc2 stable unstable Nothing to show Nothing to show New pull request Latest commit 07fc691 Apr 12, 2016 liuliu A better fix. Permalink Failed to load latest commit information. bin Added new post Dec 24, 2014 doc updated documents, added vgg-d model, about ready for the big release Dec 23, 2014 js changed ccv_unserialize/ccv_serialize to a more sensible name Mar 14, 2012 lib A better fix. Apr 12, 2016 samples Correct download logic Mar 6, 2016 serve updated documents, added vgg-d model, about ready for the big release Dec 23, 2014 site Added new post Dec 24, 2014 test Fix unittest on Mac OSX due to different libpng versions Dec 24, 2014 .doxygen.conf added a script to generate markdown doc from xml of Doxygen, haven't … Dec 21, 2014 .gitignore add libccv.org site source file to the tree Mar 1, 2014 .travis.yml try libatlas-base-dev Dec 12, 2014 COPYING fix typo. change license for files included in ./doc ./samples, ./sit… Mar 6, 2014 README.md portability => portable Dec 17, 2014 THANKS added THANKS Jan 12, 2014 README.md Build Status Travis CI VM: Raspberry Pi: FreeBSD x64: Linux x64: Mac OSX: Backstory I set to build ccv with a minimalism inspiration. That was back in 2010, out of the frustration with the computer vision library then I was using, ccv was meant to be a much easier to deploy, simpler organized code with a bit caution with dependency hygiene. The simplicity and minimalistic nature at then, made it much easier to integrate into any server-side deployment environments. Portable and Embeddable Fast forward to now, the world is quite different from then, but ccv adapts pretty well in this new, mobile-first environment. It now runs on Mac OSX, Linux, FreeBSD, Windows*, iPhone, iPad, Android, Raspberry Pi. In fact, anything that has a proper C compiler probably can run ccv. The majority (with notable exception of convolutional networks, which requires a BLAS library) of ccv will just work with no compilation flags or dependencies. Modern Computer Vision Algorithms One core concept of ccv development is application driven. Thus, ccv ends up implementing a handful state-of-art algorithms. It includes a close to state-of-the-art image classifier, a state-of-the-art frontal face detector, reasonable collection of object detectors for pedestrians and cars, a useful text detection algorithm, a long-term general object tracking algorithm, and the long-standing feature point extraction algorithm. Clean Interface with Cached Image Preprocessing Many computer vision tasks nowadays consist of quite a few preprocessing layers: image pyramid generation, color space conversion etc. These potentially redundant operations cannot be easily eliminated within a mature API. ccv provides a built-in cache mechanism that, while maintains a clean function interface, effectively does transparent cache for you. For computer vision community, there is no shortage of good algorithms, good implementation is what it lacks of. After years, we stuck in between either the high-performance, battle-tested but old algorithm implementations, or the new, shining but Matlab algorithms. ccv is my take on this problem, hope you enjoy it. License ccv source code is distributed under BSD 3-clause License. ccv's data models and documentations are distributed under Creative Commons Attribution 4.0 International License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/liuliu/ccv"	"C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library. [BSD]"	"true"
"Machine Learning"	"Fido"	"https://github.com/FidoProject/Fido"	"A highly-modular C++ machine learning library for embedded electronics and robotics. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"282"	"34"	"49"	"GitHub - FidoProject/Fido: A lightweight C++ machine learning library for embedded electronics and robotics. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 282 Fork 49 FidoProject/Fido Code Issues 12 Pull requests 0 Wiki Pulse Graphs A lightweight C++ machine learning library for embedded electronics and robotics. http://fidoproject.github.io/ 979 commits 4 branches 4 releases Fetching contributors C++ 97.2% Makefile 1.6% Other 1.2% C++ Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coveralls master simulator storage Nothing to show v0.0.2 v0.0.1 0.0.4 0.0.3 Nothing to show New pull request Latest commit 4b53155 Jun 23, 2016 truell20 committed on GitHub Take out valgrind Permalink Failed to load latest commit information. docs Rm example doxygen Apr 28, 2016 examples For loop corrections Jun 4, 2016 include Correct typos Jun 9, 2016 src For loop corrections Jun 4, 2016 tests Make reinforcement test more stable Jun 9, 2016 .gitattributes Ignore tests, docs, and travis on release May 10, 2016 .gitignore Remove doxygen config Apr 28, 2016 .travis.yml Take out valgrind Jun 23, 2016 LICENSE Update LICENSE Jun 8, 2016 Makefile Revert ""Take out untested windows install file"" Apr 27, 2016 README.md Update README.md Jun 21, 2016 install.bat Revert ""Take out untested windows install file"" Apr 28, 2016 runtests.sh Better test building Apr 28, 2016 README.md Fido Fido is a lightweight, highly modular C++ machine learning library for embedded electronics and robotics. Fido is especially suited for robotic and embedded contexts, as it is written in C++ with minimal use of the standard library and provides an easy interface in which to write robotic drivers. Check out the project site and documentation for more information. The library was adapted from a universal robot control system. Contributing Send us a pull request. If you are looking for things to do, check out the repo's open issues. If you find a bug or have any trouble with the library, please open an issue. We are happy to help you out. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FidoProject/Fido"	"A highly-modular C++ machine learning library for embedded electronics and robotics. [MIT]"	"true"
"Machine Learning"	"website"	"http://fidoproject.github.io/"	"A highly-modular C++ machine learning library for embedded electronics and robotics. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Fido Project about start examples who research docs github The Fido Project An open source C++ machine learning library targeted towards embedded electronics and robotics. about fido Fido is a light-weight, open-source, and highly modular C++ machine learning library. The library is targeted towards embedded electronics and robotics. Fido includes implementations of trainable neural networks, reinforcement learning methods, genetic algorithms, and a full-fledged robotic simulator. Fido also comes packaged with a human-trainable robot control system as described in Truell and Gruenstein. getting started Download and unzip the latest release. Navigate to the Fido directory and run: $ sudo make install And you're done! To use Fido, just include Fido/Fido.h in your C++ code and link /usr/local/lib/fido.a. For more information please visit the docs. quick examples neural networks Here is a quick example of training a neural network using backpropagation. We will train the network to perform linear regression. net::NeuralNet neuralNetwork = net::NeuralNet(1, 1, 2, 4, ""sigmoid""); neuralNetwork.setOutputActivationFunction(""simpleLinear"");  std::vector< std::vector<double> > input = { {1}, {2}, {5}, {6} }; std::vector< std::vector<double> > correctOutput = { {2}, {4}, {10}, {12} };  net::Backpropagation backprop = net::Backpropagation(); backprop.train(&neuralNetwork, input, correctOutput);  genetic algorithms Here is a quick example of generating neural networks using genetic algorithms. We will train the network to perform linear regression. #include ""Fido/GeneticAlgo.h"" #include <math.h>  std::vector<double> getPopulationFitness(const std::vector<net::NeuralNet> &population) {   std::vector<double> fitnesses;    for(net::NeuralNet network : population) {     double totalError = 0;     for(double input = 1; input < 4; input++) {       totalError += pow(input*2 - network.getOutput({input})[0], 2);     }     fitnesses.push_back(1/totalError);   }    return fitnesses; }  int main() {   srand(time(NULL));   gen::GeneticAlgo geneticAlgo = gen::GeneticAlgo(20, 0.4, 0.5, 10, getPopulationFitness);   net::NeuralNet modelNetwork = net::NeuralNet(1, 1, 1, 4, ""simpleLinear"");   net::NeuralNet bestNetwork = geneticAlgo.getBestNeuralNetwork(600, modelNetwork); }   simulator Move a robot in a circle in Fido's robotic simulator. Simlink simulator; while(true) {   simulator.setMotors(10, 5, 10, 10);   std::this_thread::sleep_for(std::chrono::milliseconds(10)); } While the simulator is not in the most recent release (as it is currently undocumented), it can be found for experimentation on the simulator branch. reinforcement learning Here is a quick example of using the Fido library to train a robot in our simulator to perform line following using reinforcement learning. rl::FidoControlSystem learner = rl::FidoControlSystem(1, 2, {-1, -1}, {1, 1}, 3); Simlink simulator; int goodIterations = 0;  while(goodIterations < 5) {   rl::Action action = learner.chooseBoltzmanAction({ simulator.isLeftOfLine() }, 0.2);    double originalDistance = simulator.distanceFromLine();    sf::Vector2f displacement =  sf::Vector2f(action[0], action[1]);   sf::Vector2f newPosition = simulator.robot.getPosition() + displacement;   simulator.robot.setPosition(newPosition);    double newDistance = simulator.distanceFromLine();   double rewardValue = (fabs(originalDistance) - fabs(newDistance - originalDistance)) / sqrt(2);   learner.applyReinforcementToLastAction(rewardValue, { simulator.isLeftOfLine() });    if(simulator.distanceFromLine() < 80) goodIterations++;   else goodIterations = 0; } who is fido Fido was created by programmers Joshua Gruenstein and Michael Truell from the Horace Mann School. The project was started as a universal robot control system using limited feedback, which can be read about here. Fido still continues to be developed in this direction. Fido is open source licensed under the MIT License."	"null"	"null"	"A highly-modular C++ machine learning library for embedded electronics and robotics. [MIT]"	"true"
"Machine Learning"	"MeTA"	"https://github.com/meta-toolkit/meta"	"A modern C++ data sciences toolkit. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"235"	"36"	"110"	"GitHub - meta-toolkit/meta: A Modern C++ Data Sciences Toolkit Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 235 Fork 110 meta-toolkit/meta Code Issues 16 Pull requests 1 Pulse Graphs A Modern C++ Data Sciences Toolkit https://meta-toolkit.org 2,135 commits 7 branches 16 releases 7 contributors C++ 97.8% CMake 1.4% Other 0.8% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master mph-language-model travis trec_corpus window-lda Nothing to show v2.2.0 v2.1.0 v2.0.1 v2.0.0 v1.3.8 v1.3.7 v1.3.6 v1.3.5 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3 v1.2 v1.1 v1.0 Nothing to show New pull request Latest commit 5d726cf Apr 8, 2016 skystrife Merge branch 'develop' for MeTA v2.2.0 Permalink Failed to load latest commit information. contrib Allow ycm_extra_conf.py to find compile flags for not-yet-configured … Apr 8, 2015 data Ensure ICU >= 56.1 via ExternalProject_Add. Nov 24, 2015 deps Update cpptoml version. Apr 8, 2016 include/meta Consolidate pagerank and personalized pagerank and parallelize. Apr 8, 2016 src Consolidate pagerank and personalized pagerank and parallelize. Apr 8, 2016 tests fix directed_graph bug directed_graph (wrong incoming nodes stored) a… Mar 31, 2016 travis Remove unused patch file for travis. Mar 3, 2016 .appveyor.yml Switch to using ./unit-test without ctest on Travis/Appveyor. Feb 12, 2016 .clang-format Update .clang-format with new options from clang 3.5. Sep 19, 2014 .gitignore add housing dataset to .gitignore Jan 26, 2016 .gitmodules Extract reusable CMake components into a separate repo. Mar 13, 2016 .travis.yml Switch to using ./unit-test without ctest on Travis/Appveyor. Feb 12, 2016 CHANGELOG.md Add index thread limiting to CHANGELOG. Apr 8, 2016 CMakeLists.txt Extract reusable CMake components into a separate repo. Mar 13, 2016 CONTRIBUTING.md add CONTRIBUTING.md Jan 26, 2016 LICENSE.mit update LICENSE years and MeTA URL Jan 30, 2016 LICENSE.ncsa update LICENSE years and MeTA URL Jan 30, 2016 README.md Nitpick style in Ubuntu 15.10 setup guide. Apr 7, 2016 STYLE.md add file naming to STYLE.md Nov 20, 2015 config.toml Add embeddings section to example config.toml. Apr 6, 2016 meta.doxygen.in Remove custom doxygen css. Mar 3, 2015 README.md MeTA: ModErn Text Analysis Please visit our web page for information and tutorials about MeTA! Build Status (by branch) master: develop: Outline Intro Documentation Tutorials Project Setup Mac OS X Ubuntu Arch Linux Fedora CentOS EWS/EngrIT (this is UIUC-specific) Windows Generic Setup Notes Intro MeTA is a modern C++ data sciences toolkit featuring text tokenization, including deep semantic features like parse trees inverted and forward indexes with compression and various caching strategies a collection of ranking functions for searching the indexes topic models classification algorithms graph algorithms language models CRF implementation (POS-tagging, shallow parsing) wrappers for liblinear and libsvm (including libsvm dataset parsers) UTF8 support for analysis on various languages multithreaded algorithms Documentation Doxygen documentation can be found here. Tutorials We have walkthroughs for a few different parts of MeTA on the MeTA homepage. Project setup Mac OS X Build Guide Mac OS X 10.6 or higher is required. You may have success with 10.5, but this is not tested. You will need to have homebrew installed, as well as the Command Line Tools for Xcode (homebrew requires these as well, and it will prompt for them during install, or you can install them with xcode-select --install on recent versions of OS X). Once you have homebrew installed, run the following commands to get the dependencies for MeTA: brew update brew install cmake jemalloc lzlib icu4c To get started, run the following commands: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project CXX=clang++ cmake ../ -DCMAKE_BUILD_TYPE=Release -DICU_ROOT=/usr/local/opt/icu4c make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Ubuntu Build Guide The directions here depend greatly on your installed version of Ubuntu. To check what version you are on, run the following command: cat /etc/issue Based on what you see, you should proceed with one of the following guides: Ubuntu 12.04 LTS Build Guide Ubuntu 14.04 LTS Build Guide Ubuntu 15.10 Build Guide If your version is less than 12.04 LTS, your operating system is not supported (even by your vendor!) and you should upgrade to at least 12.04 LTS (or 14.04 LTS, if possible). Ubuntu 12.04 LTS Build Guide Building on Ubuntu 12.04 LTS requires more work than its more up-to-date 14.04 sister, but it can be done relatively easily. You will, however, need to install a newer C++ compiler from a ppa, and switch to it in order to build meta. We will also need to install a newer CMake version than is natively available. Start by running the following commands to get the dependencies that we will need for building MeTA. # this might take a while sudo apt-get update sudo apt-get install python-software-properties  # add the ppa that contains an updated g++ sudo add-apt-repository ppa:ubuntu-toolchain-r/test sudo apt-get update  # this will probably take a while sudo apt-get install g++ g++-4.8 git make wget libjemalloc-dev zlib1g-dev  wget http://www.cmake.org/files/v3.2/cmake-3.2.0-Linux-x86_64.sh sudo sh cmake-3.2.0-Linux-x86_64.sh --prefix=/usr/local During CMake installation, you should agree to the license and then say ""n"" to including the subdirectory. You should be able to run the following commands and see the following output: g++-4.8 --version should print g++-4.8 (Ubuntu 4.8.1-2ubuntu1~12.04) 4.8.1 Copyright (C) 2013 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and /usr/local/bin/cmake --version should print cmake version 3.2.0  CMake suite maintained and supported by Kitware (kitware.com/cmake).  Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project CXX=g++-4.8 /usr/local/bin/cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Ubuntu 14.04 LTS Build Guide Ubuntu 14.04 has a recent enough GCC for building MeTA, but we'll need to add a ppa for a more recent version of CMake. Start by running the following commands to install the dependencies for MeTA. # this might take a while sudo apt-get update sudo apt-get install software-properties-common  # add the ppa for cmake sudo add-apt-repository ppa:george-edison55/cmake-3.x sudo apt-get update  # install dependencies sudo apt-get install g++ cmake libicu-dev git libjemalloc-dev zlib1g-dev Once the dependencies are all installed, you should double check your versions by running the following commands. g++ --version should output g++ (Ubuntu 4.8.2-19ubuntu1) 4.8.2 Copyright (C) 2013 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and cmake --version should output cmake version 3.2.2  CMake suite maintained and supported by Kitware (kitware.com/cmake).  Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Ubuntu 15.10 Build Guide Ubuntu's non-LTS desktop offering in 15.10 has enough modern software in its repositories to build MeTA without much trouble. To install the dependencies, run the following commands. apt update apt install g++ git cmake make libjemalloc-dev zlib1g-dev Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Arch Linux Build Guide Arch Linux consistently has the most up to date packages due to its rolling release setup, so it's often the easiest platform to get set up on. To install the dependencies, run the following commands. sudo pacman -Sy sudo pacman -S clang cmake git icu libc++ make jemalloc zlib Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project CXX=clang++ cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Fedora Build Guide This has been tested with Fedora 22+ (the oldest currently supported Fedora as of the time of writing). You may have success with earlier versions, but this is not tested. (If you're on an older version of Fedora, use yum instead of dnf for the commands given below.) To get started, install some dependencies: # These may be already installed sudo dnf install make git wget gcc-c++ jemalloc-devel cmake zlib-devel You should be able to run the following commands and see the following output: g++ --version should print g++ (GCC) 5.3.1 20151207 (Red Hat 5.3.1-2) Copyright (C) 2015 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and cmake --version should print cmake version 3.3.2  CMake suite maintained and supported by Kitware (kitware.com/cmake).  Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system with the following command: ./unit-test --reporter=spec CentOS Build Guide MeTA can be built in CentOS 7 and above. CentOS 7 comes with a recent enough compiler (GCC 4.8.5), but too old a version of CMake. We'll thus install the compiler and related libraries from the package manager and install our own more recent cmake ourselves. # install build dependencies (this will probably take a while) sudo yum install gcc gcc-c++ git make wget zlib-devel epel-release sudo yum install jemalloc-devel  wget http://www.cmake.org/files/v3.2/cmake-3.2.0-Linux-x86_64.sh sudo sh cmake-3.2.0-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir You should be able to run the following commands and see the following output: g++ --version should print g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4) Copyright (C) 2015 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and /usr/local/bin/cmake --version should print cmake version 3.2.0  CMake suite maintained and supported by Kitware (kitware.com/cmake).  Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project /usr/local/bin/cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. EWS/EngrIT Build Guide If you are on a machine managed by Engineering IT at UIUC, you should follow this guide. These systems have software that is much too old for building MeTA, but EngrIT has been kind enough to package updated versions of research software as modules. The modules provided for GCC and CMake are recent enough to build MeTA, so it is actually mostly straightforward. To set up your dependencies (you will need to do this every time you log back in to the system), run the following commands: module load gcc module load cmake/3.5.0 Once you have done this, double check your versions by running the following commands. g++ --version should output g++ (GCC) 4.8.2 Copyright (C) 2013 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and cmake --version should output cmake version 3.5.0  CMake suite maintained and supported by Kitware (kitware.com/cmake).  If your versions are correct, you should be ready to build. To get started, run the following commands: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project CXX=`which g++` CC=`which gcc` cmake ../ -DICU_ROOT=/class/cs225/builds/icu make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Windows Build Guide MeTA can be built on Windows using the MinGW-w64 toolchain with gcc. We strongly recommend using MSYS2 as this makes fetching the compiler and related libraries significantly easier than it would be otherwise, and it tends to have very up-to-date packages relative to other similar MinGW distributions. To start, download the installer for MSYS2 from the linked website and follow the instructions on that page. Once you've got it installed, you should use the MinGW shell to start a new terminal, in which you should run the following commands to download dependencies and related software needed for building: pacman -Syu git make mingw-w64-x86_64-{gcc,cmake,icu,jemalloc,zlib} Then, exit the shell and launch the ""MinGW-w64 Win64"" shell. You can obtain the toolkit and get started with: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project cmake .. -G ""MSYS Makefiles"" -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Generic Setup Notes There are rules for clean, tidy, and doc. After you run the cmake command once, you will be able to just run make as usual when you're developing---it'll detect when the CMakeLists.txt file has changed and rebuild Makefiles if it needs to. To compile in debug mode, just replace Release with Debug in the appropriate cmake command for your OS above and rebuild using make after. Don't hesitate to reach out on the forum if you encounter problems getting set up. We routinely build with a wide variety of compilers and operating systems through our continuous integration setups (travis-ci for Linux and OS X and Appveyor for Windows), so we can be fairly certain that things should build on nearly all major platforms. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/meta-toolkit/meta"	"A modern C++ data sciences toolkit. [MIT]"	"true"
"Machine Learning"	"website"	"https://meta-toolkit.org/"	"A modern C++ data sciences toolkit. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"235"	"36"	"110"	"GitHub - meta-toolkit/meta: A Modern C++ Data Sciences Toolkit Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 235 Fork 110 meta-toolkit/meta Code Issues 16 Pull requests 1 Pulse Graphs A Modern C++ Data Sciences Toolkit https://meta-toolkit.org 2,135 commits 7 branches 16 releases 7 contributors C++ 97.8% CMake 1.4% Other 0.8% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master mph-language-model travis trec_corpus window-lda Nothing to show v2.2.0 v2.1.0 v2.0.1 v2.0.0 v1.3.8 v1.3.7 v1.3.6 v1.3.5 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3 v1.2 v1.1 v1.0 Nothing to show New pull request Latest commit 5d726cf Apr 8, 2016 skystrife Merge branch 'develop' for MeTA v2.2.0 Permalink Failed to load latest commit information. contrib Allow ycm_extra_conf.py to find compile flags for not-yet-configured … Apr 8, 2015 data Ensure ICU >= 56.1 via ExternalProject_Add. Nov 24, 2015 deps Update cpptoml version. Apr 8, 2016 include/meta Consolidate pagerank and personalized pagerank and parallelize. Apr 8, 2016 src Consolidate pagerank and personalized pagerank and parallelize. Apr 8, 2016 tests fix directed_graph bug directed_graph (wrong incoming nodes stored) a… Mar 31, 2016 travis Remove unused patch file for travis. Mar 3, 2016 .appveyor.yml Switch to using ./unit-test without ctest on Travis/Appveyor. Feb 12, 2016 .clang-format Update .clang-format with new options from clang 3.5. Sep 19, 2014 .gitignore add housing dataset to .gitignore Jan 26, 2016 .gitmodules Extract reusable CMake components into a separate repo. Mar 13, 2016 .travis.yml Switch to using ./unit-test without ctest on Travis/Appveyor. Feb 12, 2016 CHANGELOG.md Add index thread limiting to CHANGELOG. Apr 8, 2016 CMakeLists.txt Extract reusable CMake components into a separate repo. Mar 13, 2016 CONTRIBUTING.md add CONTRIBUTING.md Jan 26, 2016 LICENSE.mit update LICENSE years and MeTA URL Jan 30, 2016 LICENSE.ncsa update LICENSE years and MeTA URL Jan 30, 2016 README.md Nitpick style in Ubuntu 15.10 setup guide. Apr 7, 2016 STYLE.md add file naming to STYLE.md Nov 20, 2015 config.toml Add embeddings section to example config.toml. Apr 6, 2016 meta.doxygen.in Remove custom doxygen css. Mar 3, 2015 README.md MeTA: ModErn Text Analysis Please visit our web page for information and tutorials about MeTA! Build Status (by branch) master: develop: Outline Intro Documentation Tutorials Project Setup Mac OS X Ubuntu Arch Linux Fedora CentOS EWS/EngrIT (this is UIUC-specific) Windows Generic Setup Notes Intro MeTA is a modern C++ data sciences toolkit featuring text tokenization, including deep semantic features like parse trees inverted and forward indexes with compression and various caching strategies a collection of ranking functions for searching the indexes topic models classification algorithms graph algorithms language models CRF implementation (POS-tagging, shallow parsing) wrappers for liblinear and libsvm (including libsvm dataset parsers) UTF8 support for analysis on various languages multithreaded algorithms Documentation Doxygen documentation can be found here. Tutorials We have walkthroughs for a few different parts of MeTA on the MeTA homepage. Project setup Mac OS X Build Guide Mac OS X 10.6 or higher is required. You may have success with 10.5, but this is not tested. You will need to have homebrew installed, as well as the Command Line Tools for Xcode (homebrew requires these as well, and it will prompt for them during install, or you can install them with xcode-select --install on recent versions of OS X). Once you have homebrew installed, run the following commands to get the dependencies for MeTA: brew update brew install cmake jemalloc lzlib icu4c To get started, run the following commands: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project CXX=clang++ cmake ../ -DCMAKE_BUILD_TYPE=Release -DICU_ROOT=/usr/local/opt/icu4c make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Ubuntu Build Guide The directions here depend greatly on your installed version of Ubuntu. To check what version you are on, run the following command: cat /etc/issue Based on what you see, you should proceed with one of the following guides: Ubuntu 12.04 LTS Build Guide Ubuntu 14.04 LTS Build Guide Ubuntu 15.10 Build Guide If your version is less than 12.04 LTS, your operating system is not supported (even by your vendor!) and you should upgrade to at least 12.04 LTS (or 14.04 LTS, if possible). Ubuntu 12.04 LTS Build Guide Building on Ubuntu 12.04 LTS requires more work than its more up-to-date 14.04 sister, but it can be done relatively easily. You will, however, need to install a newer C++ compiler from a ppa, and switch to it in order to build meta. We will also need to install a newer CMake version than is natively available. Start by running the following commands to get the dependencies that we will need for building MeTA. # this might take a while sudo apt-get update sudo apt-get install python-software-properties  # add the ppa that contains an updated g++ sudo add-apt-repository ppa:ubuntu-toolchain-r/test sudo apt-get update  # this will probably take a while sudo apt-get install g++ g++-4.8 git make wget libjemalloc-dev zlib1g-dev  wget http://www.cmake.org/files/v3.2/cmake-3.2.0-Linux-x86_64.sh sudo sh cmake-3.2.0-Linux-x86_64.sh --prefix=/usr/local During CMake installation, you should agree to the license and then say ""n"" to including the subdirectory. You should be able to run the following commands and see the following output: g++-4.8 --version should print g++-4.8 (Ubuntu 4.8.1-2ubuntu1~12.04) 4.8.1 Copyright (C) 2013 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and /usr/local/bin/cmake --version should print cmake version 3.2.0  CMake suite maintained and supported by Kitware (kitware.com/cmake).  Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project CXX=g++-4.8 /usr/local/bin/cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Ubuntu 14.04 LTS Build Guide Ubuntu 14.04 has a recent enough GCC for building MeTA, but we'll need to add a ppa for a more recent version of CMake. Start by running the following commands to install the dependencies for MeTA. # this might take a while sudo apt-get update sudo apt-get install software-properties-common  # add the ppa for cmake sudo add-apt-repository ppa:george-edison55/cmake-3.x sudo apt-get update  # install dependencies sudo apt-get install g++ cmake libicu-dev git libjemalloc-dev zlib1g-dev Once the dependencies are all installed, you should double check your versions by running the following commands. g++ --version should output g++ (Ubuntu 4.8.2-19ubuntu1) 4.8.2 Copyright (C) 2013 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and cmake --version should output cmake version 3.2.2  CMake suite maintained and supported by Kitware (kitware.com/cmake).  Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Ubuntu 15.10 Build Guide Ubuntu's non-LTS desktop offering in 15.10 has enough modern software in its repositories to build MeTA without much trouble. To install the dependencies, run the following commands. apt update apt install g++ git cmake make libjemalloc-dev zlib1g-dev Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Arch Linux Build Guide Arch Linux consistently has the most up to date packages due to its rolling release setup, so it's often the easiest platform to get set up on. To install the dependencies, run the following commands. sudo pacman -Sy sudo pacman -S clang cmake git icu libc++ make jemalloc zlib Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project CXX=clang++ cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Fedora Build Guide This has been tested with Fedora 22+ (the oldest currently supported Fedora as of the time of writing). You may have success with earlier versions, but this is not tested. (If you're on an older version of Fedora, use yum instead of dnf for the commands given below.) To get started, install some dependencies: # These may be already installed sudo dnf install make git wget gcc-c++ jemalloc-devel cmake zlib-devel You should be able to run the following commands and see the following output: g++ --version should print g++ (GCC) 5.3.1 20151207 (Red Hat 5.3.1-2) Copyright (C) 2015 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and cmake --version should print cmake version 3.3.2  CMake suite maintained and supported by Kitware (kitware.com/cmake).  Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system with the following command: ./unit-test --reporter=spec CentOS Build Guide MeTA can be built in CentOS 7 and above. CentOS 7 comes with a recent enough compiler (GCC 4.8.5), but too old a version of CMake. We'll thus install the compiler and related libraries from the package manager and install our own more recent cmake ourselves. # install build dependencies (this will probably take a while) sudo yum install gcc gcc-c++ git make wget zlib-devel epel-release sudo yum install jemalloc-devel  wget http://www.cmake.org/files/v3.2/cmake-3.2.0-Linux-x86_64.sh sudo sh cmake-3.2.0-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir You should be able to run the following commands and see the following output: g++ --version should print g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4) Copyright (C) 2015 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and /usr/local/bin/cmake --version should print cmake version 3.2.0  CMake suite maintained and supported by Kitware (kitware.com/cmake).  Once the dependencies are all installed, you should be ready to build. Run the following commands to get started: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project /usr/local/bin/cmake ../ -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. EWS/EngrIT Build Guide If you are on a machine managed by Engineering IT at UIUC, you should follow this guide. These systems have software that is much too old for building MeTA, but EngrIT has been kind enough to package updated versions of research software as modules. The modules provided for GCC and CMake are recent enough to build MeTA, so it is actually mostly straightforward. To set up your dependencies (you will need to do this every time you log back in to the system), run the following commands: module load gcc module load cmake/3.5.0 Once you have done this, double check your versions by running the following commands. g++ --version should output g++ (GCC) 4.8.2 Copyright (C) 2013 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  and cmake --version should output cmake version 3.5.0  CMake suite maintained and supported by Kitware (kitware.com/cmake).  If your versions are correct, you should be ready to build. To get started, run the following commands: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project CXX=`which g++` CC=`which gcc` cmake ../ -DICU_ROOT=/class/cs225/builds/icu make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Windows Build Guide MeTA can be built on Windows using the MinGW-w64 toolchain with gcc. We strongly recommend using MSYS2 as this makes fetching the compiler and related libraries significantly easier than it would be otherwise, and it tends to have very up-to-date packages relative to other similar MinGW distributions. To start, download the installer for MSYS2 from the linked website and follow the instructions on that page. Once you've got it installed, you should use the MinGW shell to start a new terminal, in which you should run the following commands to download dependencies and related software needed for building: pacman -Syu git make mingw-w64-x86_64-{gcc,cmake,icu,jemalloc,zlib} Then, exit the shell and launch the ""MinGW-w64 Win64"" shell. You can obtain the toolkit and get started with: # clone the project git clone https://github.com/meta-toolkit/meta.git cd meta  # set up submodules git submodule update --init --recursive  # set up a build directory mkdir build cd build cp ../config.toml .  # configure and build the project cmake .. -G ""MSYS Makefiles"" -DCMAKE_BUILD_TYPE=Release make You can now test the system by running the following command: ./unit-test --reporter=spec If everything passes, congratulations! MeTA seems to be working on your system. Generic Setup Notes There are rules for clean, tidy, and doc. After you run the cmake command once, you will be able to just run make as usual when you're developing---it'll detect when the CMakeLists.txt file has changed and rebuild Makefiles if it needs to. To compile in debug mode, just replace Release with Debug in the appropriate cmake command for your OS above and rebuild using make after. Don't hesitate to reach out on the forum if you encounter problems getting set up. We routinely build with a wide variety of compilers and operating systems through our continuous integration setups (travis-ci for Linux and OS X and Appveyor for Windows), so we can be fairly certain that things should build on nearly all major platforms. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/meta-toolkit/meta"	"A modern C++ data sciences toolkit. [MIT]"	"true"
"Machine Learning"	"Minerva"	"https://github.com/dmlc/minerva"	"A fast and flexible system for deep learning. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"553"	"103"	"150"	"GitHub - dmlc/minerva: Minerva: a fast and flexible tool for deep learning on multi-GPU. It provides ndarray programming interface, just like Numpy. Python bindings and C++ bindings are both available. The resulting code can be run on CPU or GPU. Multi-GPU support is very easy. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 103 Star 553 Fork 150 dmlc/minerva Code Issues 9 Pull requests 3 Wiki Pulse Graphs Minerva: a fast and flexible tool for deep learning on multi-GPU. It provides ndarray programming interface, just like Numpy. Python bindings and C++ bindings are both available. The resulting code can be run on CPU or GPU. Multi-GPU support is very easy. 1,307 commits 10 branches 0 releases Fetching contributors C++ 49.6% Python 37.1% Protocol Buffer 5.6% Cuda 5.3% CMake 1.9% Shell 0.4% C 0.1% C++ Python Protocol Buffer Cuda CMake Shell C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags allreduce batchnorm cudnnv3_prefetch cudnnv3 gh-pages io lstm-dev-selective-sub lstm-dev master selection Nothing to show Nothing to show New pull request Latest commit 7d21ed2 Aug 4, 2015 sneakerkg Merge pull request #44 from dmlc/dimension-fix … [dimension-fix] dimension order (refer #43) Permalink Failed to load latest commit information. VS_BUILD clean up the port project Jun 29, 2015 apps fix problem when compiling without CUDA Jun 9, 2015 cmake [master] Merge branch 'athena-cython' May 20, 2015 doc [athena-cython] integrate third_party build into cmake May 16, 2015 minerva [dimension-fix] dimension order (refer #43) Jul 29, 2015 owl fix bug in xavier FC initialization, and README about SYNC_FREQ Jun 28, 2015 scripts modify README about SYNC_FREQ Jun 28, 2015 tests [athena-cython] remove Finalize calls May 20, 2015 third_party clean up the port project Jun 29, 2015 .gitignore [athena-cython] integrate third_party build into cmake May 16, 2015 .ycm_extra_conf.py [athena-cython] inclued third-party, somewhat hardcoded May 20, 2015 CMakeLists.txt enable ps Jun 3, 2015 LICENSE add license Dec 11, 2014 README.md remind user use latest protobuf Jul 12, 2015 build.sh [master] more commands in clean Jun 11, 2015 configure.in.example [caffe-proto-fix] replace deprecated V1 caffe definition with the lat… Jun 24, 2015 owl_environ.sh [master] fix owl_environ.sh May 21, 2015 run_owl_shell.sh [master] run_owl_shell could run without ipython Apr 18, 2015 setup.py [master] hide libowl.so Jun 22, 2015 README.md Minerva: a fast and flexible system for deep learning Latest News We've cleared quite a lot of Minerva's dependencies and made it easier to build. Basically, almost all needed are: ./build.sh Please see the wiki page for more information. Minerva's Tutorial and API documents are released! Minerva had migrated to dmlc, where you could find many awesome machine learning repositories! Minerva now evolves to use cudnn_v2. Please download and use the new library. Minerva now supports the latest version of Caffe's network configuration protobuf format. If you are using older version, error may occur. Please use the tool to upgrade the configure file. Overview Minerva is a fast and flexible tool for deep learning. It provides NDarray programming interface, just like Numpy. Python bindings and C++ bindings are both available. The resulting code can be run on CPU or GPU. Multi-GPU support is very easy. Please refer to the examples to see how multi-GPU setting is used.Minerva is a fast and flexible tool for deep learning. It provides NDarray programming interface, just like Numpy. Python bindings and C++ bindings are both available. The resulting code can be run on CPU or GPU. Multi-GPU support is very easy. Please refer to the examples to see how multi-GPU setting is used. Quick try After building and installing Minerva and Owl package (python binding) as in Install Minerva. Try run ./run_owl_shell.sh in Minerva's root directory. And enter: >>> x = owl.ones([10, 5]) >>> y = owl.ones([10, 5]) >>> z = x + y >>> z.to_numpy() The result will be a 10x5 array filled by value 2. Minerva supports many numpy style ndarray operations. Please see the API document for more information. Features N-D array programming interface and easy integration with numpy >>> import numpy as np >>> x = np.array([1, 2, 3]) >>> y = owl.from_numpy(x) >>> y += 1 >>> y.to_numpy() array([ 2., 3., 4., ], dtype=float32) More is in the API cheatsheet Automatically parallel execution >>> x = owl.zeros([256, 128]) >>> y = owl.randn([1024, 32], 0.0, 0.01) The above x and y will be executed concurrently. How is this achieved? See Feature Highlight: Data-flow and lazy evaluation Multi-GPU, multi-CPU support: >>> owl.set_device(gpu0) >>> x = owl.zeros([256, 128]) >>> owl.set_device(gpu1) >>> y = owl.randn([1024, 32], 0.0, 0.01) The above x and y will be executed on two cards simultaneously. How is this achieved? See Feature Highlight: Multi GPU Training Tutorial and Documents Tutorials and high-level concepts could be found in our wiki page A step-by-step walk through on MNIST example could be found here We also built a tool to directly read Caffe's configure file and train. See document. API documents could be found here Performance We will keep updating the latest performance we could achieve in this section. Training speed Training speed (images/second) AlexNet VGGNet GoogLeNet 1 card 189.63 14.37 82.47 2 cards 371.01 29.58 160.53 4 cards 632.09 50.26 309.27 The performance is measured on a machine with 4 GTX Titan cards. On each card, we load minibatch size of 256, 24, 120 for AlexNet, VGGNet and GoogLeNet respectively. Therefore, the total minibatch size will increase as the number of cards grows (for example, training AlexNet on 4 cards will use 1024 minibatch size). An end-to-end training We also provide some end-to-end training codes in owl package, which could load Caffe's model file and perform training. Note that, Minerva is not the same tool as Caffe. We are not focusing on this part of logic. In fact, we implement these just to play with the Minerva's powerful and flexible programming interface (we could implement a Caffe-like network trainer in around 700~800 lines of python codes). Here is the training error with time compared with Caffe. Note that Minerva could finish GoogleNet training in less than four days with four GPU cards. Testing error rate We trained several models using Minerva from scratch to show the correctness. The following table shows the error rate of different network under different testing settings. Testing error rate AlexNet VGGNet GoogLeNet single view top-1 41.6% 31.6% 32.7% multi view top-1 39.7% 30.1% 31.3% single view top-5 18.8% 11.4% 11.8% multi view top-5 17.5% 10.8% 11.0% AlexNet is trained with the solver except that we didn't use multi-group convolution. GoogLeNet is trained with the quick_solver. We didn't train VGGNet from scratch. We just transform the model into Minerva format and testing. The models can be found in the following link: AlexNet GoogLeNet VGGNet You can download the trained models and try them on your own machine using net_tester script. Next Plan Get rid of boost library dependency by using Cython. (DONE) Large scale LSTM example using Minerva. Easy support for user-defined new operations. License and support Minerva is provided in the Apache V2 open source license. You can use the ""issues"" tab in github to report bugs. For non-bug issues, please send up an email at minerva-support@googlegroups.com. You can subscribe to the discussion group: https://groups.google.com/forum/#!forum/minerva-support. Wiki For more information on how to install, use or contribute to Minerva, please visit our wiki page: https://github.com/minerva-developers/minerva/wiki Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dmlc/minerva"	"A fast and flexible system for deep learning. [Apache2]"	"true"
"Machine Learning"	"mlpack"	"http://www.mlpack.org/"	"A scalable c++ machine learning library. [LGPLv3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1072"	"124"	"375"	"GitHub - mlpack/mlpack: mlpack: a scalable C++ machine learning library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 124 Star 1,072 Fork 375 mlpack/mlpack Code Issues 54 Pull requests 15 Wiki Pulse Graphs mlpack: a scalable C++ machine learning library 14,893 commits 5 branches 16 releases 59 contributors C++ 96.6% CMake 2.8% Other 0.6% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master mlpack-1.x mlpack-1.0.x mlpack-2.x mlpack-2.0.x Nothing to show mlpack-2.0.2 mlpack-2.0.1 mlpack-2.0.0 mlpack-1.0.12 mlpack-1.0.11 mlpack-1.0.10 mlpack-1.0.9 mlpack-1.0.8 mlpack-1.0.7 mlpack-1.0.6 mlpack-1.0.5 mlpack-1.0.4 mlpack-1.0.3 mlpack-1.0.2 mlpack-1.0.1 mlpack-1.0.0 Nothing to show New pull request Latest commit ccc6ff0 Jul 15, 2016 zoq Input sample can be represented by more than one slice. Permalink Failed to load latest commit information. .travis travis: try ARMA_64BIT_WORD Feb 14, 2015 CMake Add a few more required C++11 features. Jun 5, 2016 doc Update references to newest version. Jul 6, 2016 src/mlpack Input sample can be represented by more than one slice. Jul 15, 2016 .appveyor.yml Specify the nuget boost package version. Jun 14, 2016 .gitignore Prune down .gitignore: remove editor-specific ignores. Jun 15, 2016 .travis.yml Wait for long tests with no output. Dec 23, 2015 CMakeLists.txt Remove unused HAS_OPENMP CMake variable (not the compiler definition). Jul 8, 2016 COPYRIGHT.txt Add new contributor. Jul 1, 2016 Doxyfile Hiding scope names has a bug: https://bugzilla.gnome.org/show_bug.cgi… Aug 21, 2015 HISTORY.md Document that we have OpenMP support now. Jul 8, 2016 LICENSE.txt Update license information to note other licenses. Jun 20, 2016 README.md Update references to newest version. Jul 6, 2016 UPDATING.txt Outline the versioning policy. (This can change, of course, but I thi… Dec 23, 2015 README.md mlpack: a scalable C++ machine learning library mlpack is an intuitive, fast, scalable C++ machine learning library, meant to be a machine learning analog to LAPACK. It aims to implement a wide array of machine learning methods and functions as a ""swiss army knife"" for machine learning researchers. Download current stable version (2.0.2). 0. Contents Introduction Citation details Dependencies Building mlpack from source Running mlpack programs Further documentation Bug reporting 1. Introduction The mlpack website can be found at http://www.mlpack.org and contains numerous tutorials and extensive documentation. This README serves as a guide for what mlpack is, how to install it, how to run it, and where to find more documentation. The website should be consulted for further information: mlpack homepage Tutorials Development Site (Github) API documentation 2. Citation details If you use mlpack in your research or software, please cite mlpack using the citation below (given in BiBTeX format): @article{mlpack2013,   title     = {{mlpack}: A Scalable {C++} Machine Learning Library},   author    = {Curtin, Ryan R. and Cline, James R. and Slagle, Neil P. and                March, William B. and Ram, P. and Mehta, Nishant A. and Gray,                Alexander G.},   journal   = {Journal of Machine Learning Research},   volume    = {14},   pages     = {801--805},   year      = {2013} }  Citations are beneficial for the growth and improvement of mlpack. 3. Dependencies mlpack has the following dependencies:   Armadillo     >= 4.100.0   Boost (program_options, math_c99, unit_test_framework, serialization)   CMake         >= 2.8.5  All of those should be available in your distribution's package manager. If not, you will have to compile each of them by hand. See the documentation for each of those packages for more information. If you are compiling Armadillo by hand, ensure that LAPACK and BLAS are enabled. 4. Building mlpack from source (see also Building mlpack From Source) mlpack uses CMake as a build system and allows several flexible build configuration options. One can consult any of numerous CMake tutorials for further documentation, but this tutorial should be enough to get mlpack built and installed. First, unpack the mlpack source and change into the unpacked directory. Here we use mlpack-x.y.z where x.y.z is the version. $ tar -xzf mlpack-x.y.z.tar.gz $ cd mlpack-x.y.z  Then, make a build directory. The directory can have any name, not just 'build', but 'build' is sufficient. $ mkdir build $ cd build  The next step is to run CMake to configure the project. Running CMake is the equivalent to running ./configure with autotools. If you run CMake with no options, it will configure the project to build with no debugging symbols and no profiling information: $ cmake ../  You can specify options to compile with debugging information and profiling information: $ cmake -D DEBUG=ON -D PROFILE=ON ../  Options are specified with the -D flag. A list of options allowed: DEBUG=(ON/OFF): compile with debugging symbols PROFILE=(ON/OFF): compile with profiling symbols ARMA_EXTRA_DEBUG=(ON/OFF): compile with extra Armadillo debugging symbols BOOST_ROOT=(/path/to/boost/): path to root of boost installation ARMADILLO_INCLUDE_DIR=(/path/to/armadillo/include/): path to Armadillo headers ARMADILLO_LIBRARY=(/path/to/armadillo/libarmadillo.so): Armadillo library  Other tools can also be used to configure CMake, but those are not documented here. Once CMake is configured, building the library is as simple as typing 'make'. This will build all library components as well as 'mlpack_test'. $ make  You can specify individual components which you want to build, if you do not want to build everything in the library: $ make mlpack_pca mlpack_knn mlpack_kfn  If the build fails and you cannot figure out why, register an account on Github and submit an issue; the mlpack developers will quickly help you figure it out: mlpack on Github Alternately, mlpack help can be found in IRC at #mlpack on irc.freenode.net. If you wish to install mlpack to /usr/local/include/mlpack/ and /usr/local/lib/ and /usr/local/bin/, once it has built, make sure you have root privileges (or write permissions to those three directories), and simply type $ make install  You can now run the executables by name; you can link against mlpack with -lmlpack and the mlpack headers are found in /usr/local/include/mlpack/. If running the programs (i.e. $ mlpack_knn -h) gives an error of the form error while loading shared libraries: libmlpack.so.2: cannot open shared object file: No such file or directory  then be sure that the runtime linker is searching the directory where libmlpack.so was installed (probably /usr/local/lib/ unless you set it manually). One way to do this, on Linux, is to ensure that the LD_LIBRARY_PATH environment variable has the directory that contains libmlpack.so. Using bash, this can be set easily: export LD_LIBRARY_PATH=/usr/local/lib/  (or whatever directory libmlpack.so is installed in.) 5. Running mlpack programs After building mlpack, the executables will reside in build/bin/. You can call them from there, or you can install the library and (depending on system settings) they should be added to your PATH and you can call them directly. The documentation below assumes the executables are in your PATH. Consider the 'mlpack_knn' program, which finds the k nearest neighbors in a reference dataset of all the points in a query set. That is, we have a query and a reference dataset. For each point in the query dataset, we wish to know the k points in the reference dataset which are closest to the given query point. Alternately, if the query and reference datasets are the same, the problem can be stated more simply: for each point in the dataset, we wish to know the k nearest points to that point. Each mlpack program has extensive help documentation which details what the method does, what each of the parameters are, and how to use them: $ mlpack_knn --help  Running mlpack_knn on one dataset (that is, the query and reference datasets are the same) and finding the 5 nearest neighbors is very simple: $ mlpack_knn -r dataset.csv -n neighbors_out.csv -d distances_out.csv -k 5 -v  The -v (--verbose) flag is optional; it gives informational output. It is not unique to mlpack_knn but is available in all mlpack programs. Verbose output also gives timing output at the end of the program, which can be very useful. 6. Further documentation The documentation given here is only a fraction of the available documentation for mlpack. If doxygen is installed, you can type make doc to build the documentation locally. Alternately, up-to-date documentation is available for older versions of mlpack: mlpack homepage Tutorials Development Site (Github) API documentation 7. Bug reporting (see also mlpack help) If you find a bug in mlpack or have any problems, numerous routes are available for help. Github is used for bug tracking, and can be found at https://github.com/mlpack/mlpack/. It is easy to register an account and file a bug there, and the mlpack development team will try to quickly resolve your issue. In addition, mailing lists are available. The mlpack discussion list is available at mlpack discussion list and the git commit list is available at commit list Lastly, the IRC channel #mlpack on Freenode can be used to get help. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mlpack/mlpack"	"A scalable c++ machine learning library. [LGPLv3]"	"true"
"Machine Learning"	"OpenCV"	"https://github.com/Itseez/opencv"	"Open Source Computer Vision Library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10268"	"1204"	"8653"	"GitHub - opencv/opencv: Open Source Computer Vision Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,204 Star 10,268 Fork 8,653 opencv/opencv Code Issues 929 Pull requests 62 Wiki Pulse Graphs Open Source Computer Vision Library http://opencv.org 19,337 commits 2 branches 47 releases 585 contributors C++ 84.0% Cuda 5.9% C 3.0% Java 2.4% CMake 2.2% Python 1.5% Other 1.0% C++ Cuda C Java CMake Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.4 master Nothing to show 3.1.0 3.0.0 3.0.0-rc1 3.0.0-beta 3.0.0-alpha 3.0-ocl-tp2 3.0-ocl-tech-preview 2.4.13 2.4.12.3 2.4.12.2 2.4.12.1 2.4.12 2.4.11 2.4.10.4 2.4.10.3 2.4.10.2 2.4.10.1 2.4.10 2.4.9.1 2.4.9 2.4.8.3 2.4.8.2 2.4.8.1 2.4.8 2.4.7.2 2.4.7.1 2.4.7 2.4.7-rc1 2.4.6.2 2.4.6.2r3 2.4.6.2r2 2.4.6.2-rc1 2.4.6.1 2.4.6 2.4.5 2.4.4 2.4.4-beta 2.4.3.2 2.4.3.1 2.4.3 2.4.3-rc 2.4.2 2.4.1 2.4.0 2.3.1 2.3.0 2.2 Nothing to show New pull request Latest commit 69c4e84 Jul 15, 2016 alalek Merge pull request #6918 from jet47:gpu-opengl-sample-build Permalink Failed to load latest commit information. .github Rephrase parts of the templates and use comments Jul 2, 2016 3rdparty Merge pull request #6790 from terfendail:linearresize_accuracy Jul 11, 2016 apps opencv_visualization: check cmdline args Jul 12, 2016 cmake Merge pull request #6779 from alalek:python_dynamic_lookup Jul 15, 2016 data Fix the missing - in file. Feb 18, 2016 doc py_tutorials: fix cv2.findContours return val Jul 10, 2016 include Increasing the dimension of features space in the SVMSGD::train funct… Feb 10, 2016 modules Merge pull request #6803 from alalek:issue_6720 Jul 15, 2016 platforms added suppression for TBB valgrind issue Jul 14, 2016 samples use HAVE_OPENGL instead of WITH_OPENGL for GPU opengl sample Jul 15, 2016 .gitattributes Made changes to OpenCVFindMatlab suggested by SpecLad Sep 14, 2013 .gitignore Improved thrust interop tutorial. Sep 24, 2015 .tgitconfig Add tgit.icon project config Feb 26, 2014 CMakeLists.txt Add Carotene - NVIDIA Hardware-Abstraction-Layer for ARM platforms Jul 4, 2016 CONTRIBUTING.md add link to contributing guidelines Sep 17, 2015 LICENSE Update license year range to 2016 Jan 18, 2016 README.md Removed gittip link Feb 8, 2016 README.md OpenCV: Open Source Computer Vision Library Resources Homepage: http://opencv.org Docs: http://docs.opencv.org/master/ Q&A forum: http://answers.opencv.org Issue tracking: https://github.com/Itseez/opencv/issues Contributing Please read before starting work on a pull request: https://github.com/Itseez/opencv/wiki/How_to_contribute Summary of guidelines: One pull request per issue; Choose the right base branch; Include tests and documentation; Clean up ""oops"" commits before submitting; Follow the coding style guide. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Itseez/opencv"	"Open Source Computer Vision Library. [BSD]"	"true"
"Machine Learning"	"Recommender"	"https://github.com/GHamrouni/Recommender"	"C library for product recommendations/suggestions using collaborative filtering (CF). [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"94"	"21"	"30"	"GitHub - GHamrouni/Recommender: A C library for product recommendations/suggestions using collaborative filtering (CF) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 94 Fork 30 GHamrouni/Recommender Code Issues 2 Pull requests 0 Pulse Graphs A C library for product recommendations/suggestions using collaborative filtering (CF) 175 commits 3 branches 0 releases Fetching contributors C 98.2% Other 1.8% C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev_jemalloc gh-pages master Nothing to show Nothing to show New pull request Latest commit 1e5b872 May 30, 2013 Ghassen Hamrouni Add an authors file Permalink Failed to load latest commit information. msvc FIX WARNINGS May 13, 2013 src fix warnings May 13, 2013 test Reorganize the source code Mar 6, 2013 test_suite KNN+MF Mar 28, 2013 tools fix warnings May 13, 2013 .gitignore social regularization Apr 30, 2013 .travis.yml add a testing script Feb 1, 2012 AUTHORS Add an authors file May 30, 2013 INSTALL Add an install notice Jan 11, 2012 Makefile delete unused directories Mar 11, 2013 README.md Switch to clang instead of gcc on linux Jan 25, 2012 test_suite.sh Reorganize the source code Mar 6, 2013 README.md Recommender A C library for product recommendations/suggestions using collaborative filtering (CF). Recommender analyzes the the feedback of some users (implicit and explicit) and their preferences for some items. It learns patterns and predicts the most suitable products for a particular user. Features Collaborative Filtering User and Item based recommenders No external dependencies Fast running time ~ 81 seconds for 10 million ratings (on MovieLens Data Sets) Memory footprint under 160 MB for 10 million ratings Webpage http://ghamrouni.github.com/Recommender/ Building To compile Recommender: make  The compilation will produce libRecommender.a To compile an example: gcc test/test.c libRecommender.a -lm -o test/t1  Alternatively you can use clang clang test/test.c libRecommender.a -lm -o test/t1  Keywords Collaborative filtering, recommender system References http://en.wikipedia.org/wiki/Recommendation_system http://public.research.att.com/~volinsky/netflix/kdd08koren.pdf http://research.yahoo.com/files/ieeecomputer.pdf Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GHamrouni/Recommender"	"C library for product recommendations/suggestions using collaborative filtering (CF). [BSD]"	"true"
"Machine Learning"	"SHOGUN"	"https://github.com/shogun-toolbox/shogun"	"The Shogun Machine Learning Toolbox. [GPLv3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1101"	"164"	"598"	"GitHub - shogun-toolbox/shogun: The Shogun Machine Learning Toolbox (Source Code) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 164 Star 1,101 Fork 598 shogun-toolbox/shogun Code Issues 406 Pull requests 38 Wiki Pulse Graphs The Shogun Machine Learning Toolbox (Source Code) http://www.shogun-toolbox.org 14,935 commits 18 branches 45 releases Fetching contributors C++ 92.4% Python 3.5% CMake 1.8% C 0.8% Matlab 0.5% R 0.4% Other 0.6% C++ Python CMake C Matlab R Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags config develop diffusion_kernel feature/UnifiedEigenSolvers feature/atlas feature/bigtest feature/cereal feature/kernel_exp_family feature/linalg_refactor feature/linalg_second_take feature/meta_vector_matrix feature/mmd feature/nmatrix feature/tags feature/translational_invariant_kernel master narrow_interface openmp Nothing to show unlabeled-1.1.2 shogun_4.1.0 shogun_4.0.0 shogun_3.2.1 shogun_3.2.0 shogun_3.1.1 shogun_3.1.0 shogun_3.0.0 shogun_2.1.0 shogun_1.0.0 shogun_0.10.0 shogun_0.9.3 shogun_0.9.2 shogun_0.9.1 shogun_0.9.0 shogun_0.8.0 shogun_0.7.3 shogun_0.7.2 shogun_0.7.1 shogun_0.7.0 shogun_0.6.7 shogun_0.6.6 shogun_0.6.5 shogun_0.6.4 shogun_0.6.3 shogun_0.6.2 shogun_0.6.1 shogun_0.6.0 shogun_0.5.1 shogun_0.5.0 shogun_0.4.4 shogun_0.4.3 shogun_0.4.2 shogun_0.4.1 shogun_0.4.0 shogun_0.3.2 shogun_0.3.1 shogun_0.3.0 shogun_0.2.1 shogun_0.1.3-alpha shogun_0.1.2 shogun_0.1.1 shogun_0.1.0 genefinder_0_1_0 genefinder_0_1 Nothing to show New pull request Latest commit 2a48c50 Jul 13, 2016 lisitsyn committed on GitHub Merge pull request #3368 from shogun-toolbox/feature/tags … Support basic tag-based parameters Permalink Failed to load latest commit information. applications Remove obsolete tarballs Sep 12, 2015 benchmarks squashed - remove HAVE_EIGEN3 flags Mar 23, 2016 cmake add cmake guard for mkl regression cookbook Jul 12, 2016 configs Merge pull request #3138 from Saurabh7/omp_memcheck_fix Jun 7, 2016 data @ 20f360a add cookbook for nn regression Jul 10, 2016 doc lmnn cookbook Jul 13, 2016 examples lmnn cookbook Jul 13, 2016 scripts whitespace cleanup Apr 30, 2015 src Merge pull request #3368 from shogun-toolbox/feature/tags Jul 13, 2016 tests Merge pull request #3368 from shogun-toolbox/feature/tags Jul 13, 2016 .clang_complete move clang complete to new root dir Aug 14, 2013 .gitignore improve gitignore-rules, so contributors do not accidently add unneed… Mar 4, 2016 .gitmodules Merge tag 'shogun_4.1.0' Feb 10, 2016 .travis.yml Squashed commit of the following: Mar 12, 2016 CMakeLists.txt added openmp set num threads in CParallel May 31, 2016 COPYING add GPLv3 text for distro-packaging Dec 22, 2014 CTestConfig.cmake Add CTestConfig and add Release, Debug and Distribution CFLAGS Aug 9, 2013 NEWS parallel xval with clone Jun 2, 2016 README.md Upgrade README.md Jul 13, 2016 setup.py Update setup.py Jul 12, 2016 README.md The SHOGUN machine learning toolbox Develop branch build status: Buildbot: http://buildbot.shogun-toolbox.org/waterfall. Quick links to this file: Quickstart Introduction Interfaces Platforms Contents Applications License Download References Other links that may be useful: See INSTALL for first steps on installation and running SHOGUN. See README.developer for the developer documentation. See README.data for how to download example data sets accompanying SHOGUN. See README.cmake for setting particular build options with SHOGUN and cmake. Introduction The Shogun Machine learning toolbox provides a wide range of unified and efficient Machine Learning (ML) methods. The toolbox seamlessly allows to easily combine multiple data representations, algorithm classes, and general purpose tools. This enables both rapid prototyping of data pipelines and extensibility in terms of new algorithms. We combine modern software architecture in C++ with both efficient low-level computing backends and cutting edge algorithm implementations to solve large-scale Machine Learning problems (yet) on single machines. One of Shogun's most exciting features is that you can use the toolbox through a unified interface from C++, Python, Octave, R, Java, Lua, C#, etc. This not just means that we are independent of trends in computing languages, but it also lets you use Shogun as a vehicle to expose your algorithm to multiple communities. We use SWIG to enable bidirectional communication between C++ and target languages. Shogun runs under Linux/Unix, MacOS, Windows. Originally focussing on large-scale kernel methods and bioinformatics (for a list of scientific papers mentioning Shogun, see here), the toolbox saw massive extensions to other fields in recent years. It now offers features that span the whole space of Machine Learning methods, including many classical methods in classification, regression, dimensionality reduction, clustering, but also more advanced algorithm classes such as metric, multi-task, structured output, and online learning, as well as feature hashing, ensemble methods, and optimization, just to name a few. Shogun in addition contains a number of exclusive state-of-the art algorithms such as a wealth of efficient SVM implementations, Multiple Kernel Learning, kernel hypothesis testing, Krylov methods, etc. All algorithms are supported by a collection of general purpose methods for evaluation, parameter tuning, preprocessing, serialisation & I/O, etc; the resulting combinatorial possibilities are huge. See our feature list for more details. The wealth of ML open-source software allows us to offer bindings to other sophisticated libraries including: LibSVM/LibLinear, SVMLight, LibOCAS, libqp, VowpalWabbit, Tapkee, SLEP, GPML and more. See our list of integrated external libraries. Shogun got initiated in 1999 by Soeren Sonnenburg and Gunnar Raetsch (that's where the name ShoGun originates from). It is now developed by a much larger Team cf. website and AUTHORS, and would not have been possible without the patches and bug reports by various people. See CONTRIBUTIONS for a detailed list. Statistics on Shogun's development activity can be found on ohloh. Interfaces SHOGUN is implemented in C++ and interfaces to Matlab(tm), R, Octave, Java, C#, Ruby, Lua and Python. The following table depicts the status of each interface available in SHOGUN: Interface Status python_modular mature (no known problems) octave_modular mature (no known problems) java_modular stable (no known problems; not all examples are ported) ruby_modular stable (no known problems; only few examples ported) csharp_modular stable (no known problems; not all examples are ported) lua_modular alpha (some examples work, string typemaps are unstable perl_modular pre-alpha (work in progress quality) r_modular pre-alpha (SWIG does not properly handle reference counting and thus only for the brave, --disable-reference-counting to get it to work, but beware that it will leak memory; disabled by default) octave_static mature (no known problems) matlab_static mature (no known problems) python_static mature (no known problems) r_static mature (no known problems) libshogun_static mature (no known problems) cmdline_static stable (but some data types incomplete) elwms_static this is the eierlegendewollmilchsau interface, a chimera that in one file interfaces with python, octave, r, matlab and provides the run_python command to run code in python using the in octave,r,matlab available variables, etc) Visit http://www.shogun-toolbox.org/doc/en/current for further information. Platforms Debian GNU/Linux, Mac OSX and WIN32/CYGWIN are supported platforms (see the INSTALL file for generic and platform specific installation instructions). Contents The following directories are found in the source distribution. src - source code. data - data sets (required for some examples / applications - these need to be downloaded separately via the download site or git submodule update --init from the root of the git checkout. doc - documentation (to be built using doxygen), ipython notebooks, and the PDF tutorial. examples - example files for all interfaces. applications - applications of SHOGUN. benchmarks - speed benchmarks. tests - unit and integration tests. cmake - cmake build scripts Applications We have successfully used this toolbox to tackle the following sequence analysis problems: Protein Super Family classification, Splice Site Prediction, Interpreting the SVM Classifier, Splice Form Prediction, Alternative Splicing and Promotor Prediction. Some of them come with no less than 10 million training examples, others with 7 billion test examples. License Except for the files classifier/svm/Optimizer.{cpp,h}, classifier/svm/SVM_light.{cpp,h}, regression/svr/SVR_light.{cpp,h} and the kernel caching functions in kernel/Kernel.{cpp,h} which are (C) Torsten Joachims and follow a different licensing scheme (cf. LICENSE_SVMlight) SHOGUN is generally licensed under the GPL version 3 or any later version (cf. LICENSE) with code borrowed from various GPL compatible libraries from various places (cf. CONTRIBUTIONS). See also LICENSE_msufsort and LICENSE_tapkee. Download SHOGUN can be downloaded from http://www.shogun-toolbox.org and GitHub at https://github.com/shogun-toolbox/shogun. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/shogun-toolbox/shogun"	"The Shogun Machine Learning Toolbox. [GPLv3]"	"true"
"Machine Learning"	"sofia-ml"	"https://code.google.com/p/sofia-ml/"	"The suite of fast incremental algorithms for machine learning. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"The suite of fast incremental algorithms for machine learning. [Apache2]"	"true"
"Math"	"Apophenia"	"https://github.com/b-k/apophenia"	"A C library for statistical and scientific computing [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"92"	"12"	"13"	"GitHub - b-k/apophenia: A C library for statistical and scientific computing Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 92 Fork 13 b-k/apophenia Code Issues 2 Pull requests 1 Wiki Pulse Graphs A C library for statistical and scientific computing http://apophenia.info 387 commits 5 branches 6 releases Fetching contributors C 96.9% M4 2.4% Other 0.7% C M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master old_from_sf pkg v1 Nothing to show v1.0 v0.999e 0.999 0.999c 0.999b 0.999a Nothing to show New pull request Latest commit 5352ff1 Apr 25, 2016 Ben Doc update for Homebrew Permalink Failed to load latest commit information. cmd Update histogram plotting Mar 17, 2016 docs Doc update for Homebrew Apr 25, 2016 eg Help faithful.c find its data set. Mar 1, 2016 install Hash names in the apop_name struct Feb 24, 2016 model Fix bug when <predict> is not used Nov 25, 2015 tests Revamp mixture models Feb 18, 2016 transform Update constrained model scale iff parameters change Mar 8, 2016 ChangeLog By popular demand, rename apop_model_stack to apop_model_cross Oct 24, 2014 README V1.0 Nov 25, 2015 apop.m4.h Update constrained model scale iff parameters change Mar 8, 2016 apop_arms.c Have OLS estimation store error variance, for use by likelihood Nov 12, 2015 apop_asst.m4.c Fix warnings from clang Jul 6, 2015 apop_bootstrap.m4.c Deprecate the <Bootstrapped statistics> page, as promised Dec 8, 2015 apop_conversions.m4.c Add libgen header, for POSIX compliance. Mar 8, 2016 apop_data.m4.c Tweaks turned up in testing Jul 1, 2015 apop_db.m4.c apop_opts.db_name_column is now a pointer-to-char, not char[300] Jun 30, 2015 apop_db_mysql.c apop_opts.db_name_column is now a pointer-to-char, not char[300] Jun 30, 2015 apop_db_sqlite.c apop_opts.db_name_column is now a pointer-to-char, not char[300] Jun 30, 2015 apop_fexact.c apop_vector_correlation handles weights Jun 11, 2015 apop_hist.m4.c Weights are a vector. Nov 25, 2015 apop_internal.h Update apop_internal.h Apr 11, 2015 apop_linear_algebra.m4.c Revise narrative documentation Jun 29, 2015 apop_linear_constraint.m4.c Move testing discussion from brief intro to longer outline Jun 23, 2015 apop_mapply.m4.c Revise narrative documentation Jun 29, 2015 apop_mcmc.m4.c Apply J Benoit's patch for MCMC Aug 30, 2015 apop_missing_data.m4.c Update more docmentation Jun 10, 2015 apop_mle.m4.c Revamp mixture models Feb 18, 2016 apop_model.m4.c rm apop_ml_imputation Jul 3, 2015 apop_name.m4.c Hash names in the apop_name struct Feb 24, 2016 apop_output.m4.c Revert ""Tweak printing of column headers"" Jul 1, 2015 apop_rake.m4.c Tweaks turned up in testing Jul 1, 2015 apop_regression.m4.c Handle addition of elements to copied-in factor lists Jul 1, 2015 apop_settings.c apop_vector_correlation handles weights Jun 11, 2015 apop_sort.m4.c Address Issue #30 Feb 29, 2016 apop_stats.m4.c Revamp KL divergence and its test Feb 10, 2016 apop_tests.m4.c Fix bug in apop_test for checking distribtion type Jun 30, 2015 apop_update.m4.c Revise uses of apop_rng_get_thread Jun 16, 2015 apop_vtables.c Start fixing doxygen groups May 10, 2015 asprintf.c logit fixes; asprintf check Jan 7, 2013 configure V1.0 Nov 25, 2015 README Apophenia is an open statistical library for working with data sets and statistical or simulation models. It provides functions on the same level as those of the typical stats package (such as OLS, probit, or singular value decomposition) but gives the user more flexibility to be creative in model-building. Being in C, it is often an order of magnitude faster when searching for optima or running MCMC chains. The core functions are written in C, but experience has shown them to be easy to bind to Python/Julia/Perl/Ruby/&c.  http://apophenia.info/gentle.html provides an overview of the basics of using the library. If you want to know more about the package, see the web site, http://apophenia.info, or have a look at the textbook from Princeton University Press that coevolved with Apophenia, downloadable from http://modelingwithdata.org .   The quick summary for installation:  ∙ The library depends on the GNU Scientific Library and SQLite3. If you are using a system with a package manager of some sort, there is certainly a package for them. Be sure to include both the main package and the lib-, -dev, or -devel package. Sample package manager calls:      sudo apt-get install make gcc libgsl0-dev libsqlite3-dev  or      sudo yum install make gcc gsl-devel libsqlite3x-devel or      sudo pacman -S make gcc gsl sqlite   ∙ The prebuilt package, that has only basic prerequisites (no Autotools or m4) can be downloaded from another Git branch:      #Download the zip file, via wget or your preferred downloading method:     wget https://github.com/b-k/Apophenia/archive/pkg.zip      #unzip and build     unzip pkg.zip     cd Apophenia-pkg     ./configure     make     sudo make install  Or check out the branch via git:      git clone https://github.com/b-k/Apophenia.git     cd Apophenia     git checkout pkg     ./configure     make     sudo make install  ∙ This master branch of the git repository requires Autotools, so it can build the package. Try (apt-get || yum install) autoconf automake libtool. If you have Autotools installed, then from this branch you can run:      ./configure     cd apophenia-1.0     make      sudo make install  ∙ Find detailed setup instructions and some troubleshooting notes at http://apophenia.info/setup.html .   Thanks for your interest. I do hope that Apophenia helps you learn more from your data.  --BK  PS: Lawyers, please note that a file named COPYING in the install/ directory describes how this package is licensed under GPLv2.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/b-k/apophenia"	"A C library for statistical and scientific computing [GPL2]"	"true"
"Math"	"Armadillo"	"http://arma.sourceforge.net/"	"A high quality C++ linear algebra library, aiming towards a good balance between speed and ease of use. The syntax (API) is deliberately similar to Matlab. [MPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Armadillo: C++ linear algebra library Armadillo C++ linear algebra library     About     Support     Questions     Documentation     Speed     Contact     Download    Armadillo is a high quality linear algebra library (matrix maths) for the C++ language, aiming towards a good balance between speed and ease of use   Provides high-level syntax (API) deliberately similar to Matlab   Useful for algorithm development directly in C++, or quick conversion of research code into production environments (eg. software & hardware products)   Can be used for machine learning, pattern recognition, computer vision, signal processing, bioinformatics, statistics, econometrics, etc   Provides efficient classes for vectors, matrices and cubes, as well as 200+ associated functions; integer, floating point and complex numbers are supported   Various matrix decompositions are provided through integration with LAPACK, or one of its high performance drop-in replacements (eg. multi-threaded Intel MKL, or AMD ACML, or OpenBLAS)   A sophisticated expression evaluator (based on template meta-programming) automatically combines several operations to increase speed and efficiency   Commercial license (with technical support) is available for purchase   Primarily developed by Conrad Sanderson at Data61 (Australia)   download latest version  |  browse documentation          "	"null"	"null"	"A high quality C++ linear algebra library, aiming towards a good balance between speed and ease of use. The syntax (API) is deliberately similar to Matlab. [MPL2]"	"true"
"Math"	"blaze"	"https://code.google.com/p/blaze-lib/"	"high-performance C++ math library for dense and sparse arithmetic. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Project Hosting  My favorites ▼ | Sign in Project has moved What happened? Project ""blaze-lib"" has moved to another location on the Internet. Your options: View the project at: https://bitbucket.org/blaze-lib/blaze Search the web for pages about ""blaze-lib"". If you are the project's administrator, you can update the new project URL here. Terms - Privacy - Project Hosting Help Powered by Google Project Hosting"	"null"	"null"	"high-performance C++ math library for dense and sparse arithmetic. [BSD]"	"true"
"Math"	"Boost.Multiprecision"	"http://www.boost.org/doc/libs/master/libs/multiprecision/doc/html/index.html"	"provides higher-range/precision integer, rational and floating-point types in C++, header-only or with GMP/MPFR/LibTomMath backends. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Chapter 1. Boost.Multiprecision - master Boost C++ Libraries ...one of the most highly regarded and expertly designed C++ library projects in the world. — Herb Sutter and Andrei Alexandrescu, C++ Coding Standards This is the documentation for a development version of boost Chapter 1. Boost.Multiprecision John Maddock Christopher Kormanyos Copyright © 2002-2013 John Maddock and Christopher Kormanyos Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) Table of Contents Introduction Tutorial Integer Types cpp_int gmp_int tom_int Examples Factorials Bit Operations floating-point Numbers cpp_bin_float cpp_dec_float gmp_float mpfr_float float128 Examples Area of Circle Defining a Special Function. Calculating a Derivative Calculating an Integral Polynomial Evaluation Interval Number Types mpfi_float Rational Number Types cpp_rational gmp_rational tommath_rational Use With Boost.Rational rational_adaptor Miscellaneous Number Types. logged_adaptor debug_adaptor Visual C++ Debugger Visualizers Constructing and Interconverting Between Number Types Generating Random Numbers Primality Testing Literal Types and constexpr Support Importing and Exporting Data to and from cpp_int and cpp_bin_float Rounding Rules for Conversions Mixed Precision Arithmetic Generic Integer Operations Boost.Serialization Support Numeric Limits std::numeric_limits<> constants std::numeric_limits<> functions Numeric limits for 32-bit platform How to Determine the Kind of a Number From std::numeric_limits Input Output Reference number cpp_int gmp_int tom_int gmp_float mpfr_float_backend cpp_bin_float cpp_dec_float Internal Support Code Backend Requirements Header File Structure Performance Comparison The Overhead in the Number Class Wrapper Floating-Point Real World Tests Integer Real World Tests Float Algorithm Performance Integer Algorithm Performance Rational Type Performance Roadmap History TODO FAQ Acknowledgements Indexes Function Index Class Index Typedef Index Index Last revised: July 15, 2016 at 01:32:58 GMT"	"null"	"null"	"provides higher-range/precision integer, rational and floating-point types in C++, header-only or with GMP/MPFR/LibTomMath backends. [Boost]"	"true"
"Math"	"ceres-solver"	"http://ceres-solver.org/"	"C++ library for modeling and solving large complicated nonlinear least squares problems from google. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"181"	"23"	"73"	"GitHub - ceres-solver/ceres-solver: A large scale non-linear optimization library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 181 Fork 73 ceres-solver/ceres-solver Code Issues 25 Pull requests 0 Pulse Graphs A large scale non-linear optimization library http://ceres-solver.org/ 1,051 commits 1 branch 23 releases 35 contributors C++ 94.6% CMake 4.3% Other 1.1% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.11.0 1.11.0rc4 1.11.0rc3 1.11.0rc2 1.11.0rc1 1.10.0 1.10.0rc2 1.10.0rc1 1.9.0 1.9.0rc1 1.8.0 1.8.0rc2 1.8.0rc1 1.7.0 1.6.0 1.5.0 1.4.0 1.3.0 1.2.3 1.1.1 1.1.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit a04490b Jul 14, 2016 mvitus Add readme for the sampled_function example. … Change-Id: I9468b6a7b9f2ffdd2bf9f0dd1f4e1d5f894e540c Permalink Failed to load latest commit information. cmake Report Ceres compile options as components in find_package(). Apr 10, 2016 config/ceres/internal Lint cleanup from Jim Roseborough Aug 5, 2015 data Remove Protocol Buffers support. Jun 24, 2013 docs Fix typos in users.rst Apr 24, 2016 examples Add readme for the sampled_function example. Jul 14, 2016 include/ceres Use _j[0,1,n]() Bessel functions on MSVC to avoid deprecation errors. Jun 29, 2016 internal/ceres Fix: Copy minimizer option 'is_silent' to LinSearchDirection::Options Apr 25, 2016 jni Add trust_region_step_evaluator.cc to Application.mk Feb 4, 2016 scripts make_docs: Pass the file encoding to open() Mar 2, 2016 .gitignore Problem::Evaluate implementation. Feb 24, 2013 CMakeLists.txt Remove use of -Werror when compiling Ceres. Apr 18, 2016 LICENSE Update copyright headers with new year and URL Mar 18, 2015 README.md Update title in README.md Mar 7, 2016 README.md Ceres Solver Ceres Solver is an open source C++ library for modeling and solving large, complicated optimization problems. It is a feature rich, mature and performant library which has been used in production at Google since 2010. Ceres Solver can solve two kinds of problems. Non-linear Least Squares problems with bounds constraints. General unconstrained optimization problems. Please see ceres-solver.org for more information. WARNING - Do not make GitHub pull requests! Ceres development happens on Gerrit, including both repository hosting and code reviews. The GitHub Repository is a continuously updated mirror which is primarily meant for issue tracking. Please see our Contributing to Ceres Guide for more details. The upstream Gerrit repository is https://ceres-solver.googlesource.com/ceres-solver  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ceres-solver/ceres-solver"	"C++ library for modeling and solving large complicated nonlinear least squares problems from google. [BSD]"	"true"
"Math"	"CGal"	"http://www.cgal.org/"	"Collection of efficient and reliable geometric algorithms. [LGPL&GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Computational Geometry Algorithms Library Project Download Documentation Packages Arithmetic and Algebra Combinatorial Algorithms Geometry Kernels Convex Hull Algorithms Polygons Cell Complexes and Polyhedra Arrangements Triangulations Voronoi Diagrams Meshing Shape Reconstruction Geometry Processing Spatial Searching Geometric Optimization Interpolation Kinetic Data Structures SupportLibrary Visualization Support More The Computational Geometry Algorithms Library Mesh Segmentation CGAL::sdf_values(surface_mesh); Surface Reconstruction CGAL::Mesh_3 tet_mesh = CGAL::make_mesh_3(); Voronoi Diagram VD = CGAL::make_voronoi(points); Axis Aligned Bounding Box Tree CGAL::AABB_tree tree(faces(surface_mesh)); 1 2 3 4 CGAL is a software project that provides easy access to efficient and reliable geometric algorithms in the form of a C++ library. CGAL is used in various areas needing geometric computation, such as geographic information systems, computer aided design, molecular biology, medical imaging, computer graphics, and robotics. The library offers data structures and algorithms like triangulations, Voronoi diagrams, Boolean operations on polygons and polyhedra, point set processing, arrangements of curves, surface and volume mesh generation, geometry processing, alpha shapes, convex hull algorithms, shape analysis, AABB and KD trees... Learn more about CGAL by browsing through the Package Overview. Latest News July 2016 Siggraph 2016: Visit our booth on the exhibition floor and the 1.5h CGAL course June 2016 CGAL 4.8.1: CGAL 4.8.1 released April 2016 CGAL 4.8: CGAL 4.8 released April 2016 CGAL Flash Mob at Siggraph: Let's have a good time at Siggraph 2016 Older news and announcements... © 1995-2016 The CGAL Project. All rights reserved."	"null"	"null"	"Collection of efficient and reliable geometric algorithms. [LGPL&GPL]"	"true"
"Math"	"cml"	"http://cmldev.net/"	"free C++ math library for games and graphics. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CML CML Configurable Math Library Announcement: Home The CML (Configurable Math Library) is a free C++ math library for games and graphics. Read more about the CML here, see a feature list here, or see the sidebar for links to full documentation and other information about the library. About Features Documentation Design Notes Future Work Forums License Contact Download Register Log in Search © 2016 Jesse Krebs | Powered by WordPress | Barthelme theme by Scott | Valid XHTML & CSS"	"null"	"null"	"free C++ math library for games and graphics. [Boost]"	"true"
"Math"	"Eigen"	"http://eigen.tuxfamily.org/"	"A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms. [MPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Eigen Main Page From Eigen Jump to: navigation, search Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms. Contents 1 Overview 2 Documentation 3 Requirements 4 License 5 Compiler support 6 Get support 7 Bug reports 8 Mailing list 9 IRC Channel 10 Contributing to Eigen 11 Projects using Eigen 12 Credits Announcements Eigen 3.2.8 released! (16.02.2016) Eigen 3.2.8 has been released on February 16, 2016. This is a maintenance release with few bug fixes and backports since the release of 3.2.7 three months ago. For more details, look at the Changelog. The source archive is at http://bitbucket.org/eigen/eigen/get/3.2.8.tar.bz2 . Eigen3.3-beta1 released! (16.12.2015) Eigen 3.3-beta1 has been released on December 16, 2015. The source archive is at: http://bitbucket.org/eigen/eigen/get/3.3-beta1.tar.bz2 Since the previous 3.3-alpha1 release, this beta version introduces several fixes, as well as some novel features such as new array functions (rsqrt, sign, lgamma, erf, erfc), row/column-wise lpNorm, LU::transpose()/adjoint() API, support for matrix-free iterative solvers, improved sparse matrix filling and products, and more. If you missed the major novelties introduced in the 3.3-alpha1 version, here is a brief summary of the most exciting ones: novel expression template engine, fast divide and conquer SVD, support for AVX and VSX vector instructions, more OpenMP parallelism, a LS-CG solver. Check the page dedicated to the 3.3 release for a comprehensive review of all the novelties and improvements introduced in the 3.3 branch. As for any beta release, everybody is highly encouraged to test this release on their own basecode and report any compilation issue or performance regression on the bugtracker. Complete changelog since 3.3-alpha1. Eigen 3.2.7 released! (05.11.2015) Eigen 3.2.7 has been released on November 5, 2015. This is a maintenance release with few bug fixes and backports since the release of 3.2.6 one months ago. For more details, look at the Changelog. The source archive is at http://bitbucket.org/eigen/eigen/get/3.2.7.tar.bz2 . Eigen 3.2.6 released! (01.10.2015) Eigen 3.2.6 has been released on October 1, 2015. This is a maintenance release with few bug fixes since the release of 3.2.5 three months ago. For more details, look at the Changelog. The source archive is at http://bitbucket.org/eigen/eigen/get/3.2.6.tar.bz2 . Eigen 3.3-alpha1 released! (04.09.2015) Eigen 3.3-alpha1 has been released on September 4, 2015. The source archive is at: http://bitbucket.org/eigen/eigen/get/3.3-alpha1.tar.bz2 This alpha version introduces a novel evaluation mechanism of expressions, as well as numerous exciting features such as fast divide and conquer SVD, support for AVX and VSX vector instructions, more OpenMP parallelism, a LS-CG solver, and more. Check the page dedicated on the 3.3 release for a comprehensive review of the novelties and improvements. As for any alpha and beta release, everybody is invited to test this release on their own basecode and report any compilation issue or performance regression on the bugtracker. Complete changelog. Get it The latest stable release is Eigen 3.2.8. Get it here: tar.bz2, tar.gz, zip. Changelog. The latest development release is Eigen 3.3-beta1. Get it here: tar.bz2, tar.gz, zip. Changelog. The unstable source code from the development branch is there: tar.bz2, tar.gz, zip. To check out the Eigen repository using Mercurial, also known as ""hg"", do: hg clone https://bitbucket.org/eigen/eigen/  Looking for the outdated Eigen2 version? Check it here. [ other downloads ] [ browse the source code ] Overview Eigen is versatile. It supports all matrix sizes, from small fixed-size matrices to arbitrarily large dense matrices, and even sparse matrices. It supports all standard numeric types, including std::complex, integers, and is easily extensible to custom numeric types. It supports various matrix decompositions and geometry features. Its ecosystem of unsupported modules provides many specialized features such as non-linear optimization, matrix functions, a polynomial solver, FFT, and much more. Eigen is fast. Expression templates allow to intelligently remove temporaries and enable lazy evaluation, when that is appropriate. Explicit vectorization is performed for SSE 2/3/4, ARM NEON (32-bit and 64-bit), PowerPC AltiVec/VSX (32-bit and 64-bit) instruction sets, and now S390x SIMD (ZVector) with graceful fallback to non-vectorized code. Fixed-size matrices are fully optimized: dynamic memory allocation is avoided, and the loops are unrolled when that makes sense. For large matrices, special attention is paid to cache-friendliness. Eigen is reliable. Algorithms are carefully selected for reliability. Reliability trade-offs are clearly documented and extremely safe decompositions are available. Eigen is thoroughly tested through its own test suite (over 500 executables), the standard BLAS test suite, and parts of the LAPACK test suite. Eigen is elegant. The API is extremely clean and expressive while feeling natural to C++ programmers, thanks to expression templates. Implementing an algorithm on top of Eigen feels like just copying pseudocode. Eigen has good compiler support as we run our test suite against many compilers to guarantee reliability and work around any compiler bugs. Eigen also is standard C++98 and maintains very reasonable compilation times. Documentation Eigen 3 documentation: this includes a getting started guide, a long tutorial, a quick reference, and page about porting from Eigen 2 to Eigen 3. Eigen development branch documentation Eigen 2 documentation (old): this includes the Eigen 2 Tutorial. FAQ (Frequently asked questions) Presentations and talks Requirements Eigen doesn't have any dependencies other than the C++ standard library. We use the CMake build system, but only to build the documentation and unit-tests, and to automate installation. If you just want to use Eigen, you can use the header files right away. There is no binary library to link to, and no configured header file. Eigen is a pure template library defined in the headers. License Eigen is Free Software. Starting from the 3.1.1 version, it is licensed under the MPL2, which is a simple weak copyleft license. Common questions about the MPL2 are answered in the official MPL2 FAQ. Earlier versions were licensed under the LGPL3+. Note that currently, a few features rely on third-party code licensed under the LGPL: SimplicialCholesky, AMD ordering, and constrained_cg. Such features can be explicitly disabled by compiling with the EIGEN_MPL2_ONLY preprocessor symbol defined. Furthermore, Eigen provides interface classes for various third-party libraries (usually recognizable by the <Eigen/*Support> header name). Of course you have to mind the license of the so-included library when using them. Virtually any software may use Eigen. For example, closed-source software may use Eigen without having to disclose its own source code. Many proprietary and closed-source software projects are using Eigen right now, as well as many BSD-licensed projects. See the MPL2 FAQ for more information, and do not hesitate to contact us if you have any questions. Compiler support Eigen is standard C++98 and so should theoretically be compatible with any compliant compiler. Whenever we use some non-standard feature, that is optional and can be disabled. Eigen is being successfully used with the following compilers: GCC, version 4.4 and newer. MSVC (Visual Studio), 2008 and newer. (the old 2.x versions of Eigen support MSVC 2005, but without vectorization). Intel C++ compiler. Enabling the -inline-forceinline option is highly recommended. LLVM/CLang++, version 3.4 and newer. (The 2.8 version used to work fine, but it is not tested with up-to-date versions of Eigen) XCode 4 and newer. Based on LLVM/CLang. MinGW, recent versions. Based on GCC. QNX's QCC compiler. Regarding performance, Eigen performs best with compilers based on GCC or LLVM/Clang. Get support Need help using Eigen? Try this: The Users Forum is your best resource. You can always try our IRC channel. Want to discuss something with the developers? Use our mailing list. Bug reports For bug reports and feature requests, please use the issue tracker. To file a new bug, go there. See this page for some instructions. Mailing list Address: eigen@lists.tuxfamily.org To subscribe, send a mail with subject subscribe to eigen-request@lists.tuxfamily.org To unsubscribe, send a mail with subject unsubscribe to eigen-request@lists.tuxfamily.org The Eigen mailing list can be used for discussing general Eigen development topics. End-user questions are often better asked on the Users Forum. Development of specific features is best tracked and discussed on our Bugzilla. See this page. This mailing list is public and has public archives. The archives are mirrored by gmane.org. Important: You must subscribe before you may post. Sorry, this is our only way to prevent spam. Important: After you sent your subscription request, you will receive a confirmation e-mail. Check your spam folder, as these confirmation e-mails are often filtered as spam! There is also a private mailing list which should only be used if you want to write privately to a few core developers (it is read by Benoît, Gaël and Jitse). The address is eigen-core-team at the same lists server as for the Eigen mailing list. You do not need to subscribe (actually, subscription is closed). For all Eigen development discussion, use the public mailing list or Bugzilla instead. IRC Channel Our IRC channel is #eigen on irc.freenode.net. Everybody's welcome to discuss Eigen-related topics or just chat. Some quick Eigen development chat happens over IRC, but the main place for Eigen development discussion remains the Eigen mailing list. Some user support also happens over IRC, but the main place for Eigen user support is the Users Forum. Contributing to Eigen Eigen is written and maintained by volunteers. You can contribute in many ways to help: give support to new users, write and improve documentation, helping with bugs and other issues in bugzilla, discussing the design and the API, running tests and writing code. See our page on Contributing to Eigen for pointers to get you started. Projects using Eigen Feel free to add yourself! If you don't have access to the wiki or if you are not sure about the relevance of your project, ask at the #Mailing list. Extensions, numerical computation and bindings Google's TensorFlow is an Open Source Software Library for Machine Intelligence Google's Ceres solver is a portable C++ library that allows for modeling and solving large complicated nonlinear least squares problems. The Manifold ToolKit MTK provides easy mechanisms to enable arbitrary algorithms to operate on manifolds. It also provides a Sparse Least Squares Solver (SLoM) and an Unscented Kalman Filter (UKFoM). CppNumericalSolvers is a lightweight header-only library for non-linear optimization including various solvers: CG, L-BGFS-B, CMAes, Nelder-Mead. GTSAM is a library implementing smoothing and mapping (SAM) in robotics and vision, using factor graphs and Bayes networks. g2o is an open-source C++ framework for optimizing graph-based nonlinear least-square problems. minieigen is small boost::python wrapper for Eigen's core classes (dense fixed and dynamic-sized vectors, matrices, aligned boxes, quaternions; with integer, floating and complex scalars) including operators and subset of Eigen's API methods. Eigency is a Cython interface between the numpy arrays and the Matrix/Array classes of the Eigen C++ library. redsvd is a RandomizED Singular Value Decomposition library for sparse or very large dense matrices. The RcppEigen package provides bindings and more for R. trustOptim is a trust-region based non linear solver supporting sparse Hessians (C++ implementation with R binding). sparray: a python binding of the Sparse module - alpha stage. Shogun: a large scale machine learning toolbox. Stan: a statistical package based on Eigen that includes a reverse-mode automatic differentiation implementation. jeigen, a Java wrapper for Eigen. Eigen4AutoIt, a wrapper for the AutoIt scripting language. Ceemple is a scientific programming environment allowing to rapidly prototype applications C++ as in MatLab or Python. EigenLab is a header only library to parse and evaluate expressions working on Eigen matrices. SpaFEDte a C++ library for discontinuous Galerkin discretizations on general meshes. biicode a C and C++ dependency manager that #includes the most popular and useful C/C++ libs and frameworks. CERTH's AKSDA: a GPU-accelerated dimensionality reduction and classification method for high-dimensional data. Science The ATLAS experiment at the LHC (Large Hadron Collider) at CERN is using Eigen, as reported in this article, noting ""Eigen was chosen since it offered the largest performance improvements for ATLAS use cases of the options investigated."" The Large Survey Synoptic Telescope (website; trac) is a project to build a 3.2Mpixel camera on an 8.4m telescope and survey the entire visible sky every three days. Gnu Data Language, a GPL interpretor of IDL syntax codes. The Space Trajectory Analysis project at the European Space Agency. They even have an announcement on using Eigen. Avogadro, an opensource advanced molecular editor. The 3D astronomical visualization application Celestia is now using Eigen for all orbital and geometric calculation. Yade, platform for dynamic particle models, uses Eigen for geometric computations (switched from the WildMagic package) SLangTNG, an application suite for numerical analysis, linear algebra, advanced statistics, FEM, structural dynamics, data visualization, etc. Clip, an opensource program for the orientation of Laue exposures. Multiprecision Computing Toolbox for MATLAB uses Eigen as core library for matrix computations. Pteros, a C++ library for molecular modeling. Cufflinks, a tool for transcript assembly, differential expression, and differential regulation for RNA-Sequences. Vortexje: a GPL library for simulation implementing the source-doublet panel method. Woo(dem), particle dynamics software (DEM, FEM); Eigen wrapped using minieigen in Python. NIMBLE, a system for programming statistical algorithms such as Markov chain Monte Carlo from R. NIMBLE includes a compiler for a subset of R to C++ that uses Eigen. Robotics and engineering The Yujin Robot company uses Eigen for the navigation and arm control of their next gen robots. (switched from blitz, ublas and tvmet) The Robotic Operating System (ROS) developed by Willow Garage. openAHRS Open Source IMU / AHRS The Darmstadt Dribblers autonomous Humanoid Robot Soccer Team and Darmstadt Rescue Robot Team use Eigen for navigation and world modeling. The Mobile Robot Programming Toolkit (MRPT), a set of libraries for SLAM, localization and computer vision, moved to Eigen (switched from home made math classes). RBDL: a C++ library for rigid body dynamics. RL a self-contained C++ library for robot kinematics, motion planning and control. BTK is a Biomechanical ToolKit, licensed under BSD whose primary goal is to propose a set of tools for the analysis of the human body motion which is independent of any acquisition system. It proposes bindings for Matlab/Octave and Python, and a GUI software called Mokka to visualize/analyze 3D/2D motion capture data. libpointmatcher is a ""Iterative Closest Point"" library for 3D mapping in robotics. RobOptim is a modern, Open-Source, C++ library for numerical optimization applied to robotics. Computer Graphics Computational Geometry Algorithms Library (CGAL), a collaborative effort to develop a robust, easy to use, and efficient C++ software library of geometric data structures and algorithms. Point Cloud Library (PCL), a large scale, BSD licensed, open project for point cloud processing. Uses Eigen as their math backend. VcgLib, an opensource C++ template library for the manipulation and processing of triangle and tetrahedral meshes. (switched from home made math classes) MeshLab, an opensource software for the processing and editing of unstructured 3D triangular meshes and point cloud. (switched from vcglib's math classes) Theia, an opensource C++ structure from motion library tailored for researchers, BSD licensed. libmv, an opensource structure from motion library. (switched from FLENS) openMVG, a simple library for multiple view geometry. metronome , a simple metric storage/graphing engine using Eigen for SVD least squares interpolation & data consolidation piccante, a C++ imaging library designed for High Dynamic Range (HDR) processing. libigl is a simple C++ geometry processing library with wide functionality. ApproxMVBB is a small library to compute fast approximate oriented bounding boxes of 3D point clouds. Mobile apps Layar, an augmented reality application for IPhone and Android. Red Sword Studios, maker of the iPhone games Gradient, Fortress Luna, Stimulus, and Lustre, uses Eigen extensively. Why roll your own matrix/vector/transformation code when there's Eigen? iPerfectPutt, an iPhone game, uses Eigen for 3D geometry calculations. WhirlyGlobe-Maply an open source geospatial display toolkit for iOS and Android. It implements both a 3D interactive globe and a 2D (slippy) map KDE (our origins!) Step, an educational physics simulator. Koffice2 (KDE's office suite), in particular Krita, the painting and image editing module. Eigen is also used a bit by KSpread, the spreadsheet module, for matrix functions such as MINVERSE, MMULT, MDETERM. Kalzium uses Eigen indirectly through the aforementioned Avogadro library. the Mandelbrot wallpaper plugin, some screensavers, kgllib, solidkreator, etc. If you are aware of some interesting projects using Eigen, please send us a message or directly edit this wiki page ! Credits The Eigen project was started by Benoît Jacob (founder) and Gaël Guennebaud (guru). Many other people have since contributed their talents to help make Eigen successful. Here's an alphabetical list: (note to contributors: do add yourself!) Philip Avery Fix bug and add functionality to AutoDiff module Abraham Bachrach Added functions for cwise min/max with a scalar Sebastien Barthelemy Fix EIGEN_INITIALIZE_MATRICES_BY_NAN Carlos Becker Wrote some of the pages of the tutorial David Benjamin Artwork: the owls Cyrille Berger Fix error in logic of installation script Armin Berres Lots of fixes (compilation warnings and errors) Jose Luis Blanco Build fixes for MSVC and AMD64, correction in docs Mark Borgerding FFT module Romain Bossart Updates to Sparse solvers Kolja Brix Added docs to Householder module, fixes for ARPACK wrapper, KroneckerProduct and GMRES Gauthier Brun Making a start with a divide-and-conquer SVD implementation Philipp Büttgenbach Bug fix when differentiating a one-dimensional spline Thomas Capricelli Migration to mercurial, Non-linear optimization and numerical differentiation, cron-job to update the online dox Nicolas Carre Making a start with a divide-and-conquer SVD implementation Jean Ceccato Making a start with a divide-and-conquer SVD implementation Vladimir Chalupecky CMake fix Benjamin Chrétien Bug fix for PolynomialSolver (linear polynomials), various typos Andrew Coles Fixes (including a compilation error) Jeff ""complexzeros"" Spline interpolation with derivatives Marton Danoczy MSVC compilation fix, support for ARM NEON with Clang 3.0 and LLVM-GCC Jeff Dean Fix in vectorized square root for small arguments Georg Drenkhahn CMake and STL fixes Christian Ehrlicher MSVC compilation fix Martinho Fernandes Make our aligned allocator support C++11 Daniel Gomez Ferro Improvements in Sparse and in matrix product Rohit Garg Vectorized quaternion and cross products, improved integer product Mathieu Gautier QuaternionMap and related improvements Anton Gladky Visual Studio 2008 and GCC 4.6 compilation fixes Stuart Glaser Prevent allocations in LU decomposition Marc Glisse C++11 compilation issues (suffices for literals) Frederic Gosselin Improve filter for hidden files in CMake Gaël Guennebaud Core developer Philippe Hamelin Allow CMake project to be included in another project Marcus D. Hanwell CMake improvements. Marcus is a developer at Kitware! David Harmon Arpack support module Chen-Pang He Many improvements to MatrixFunctions and KroneckerProduct modules Hauke Heibel Extended matrix functions, STL compatibility, Splines, CMake improvements, and more ... Christoph Hertzberg Quaternions, shifts for Cholmod, bug fixes, lots of user support on forums and IRC Pavel Holoborodko Multi-precision support with MPFR C++, bug fixes for non-standard scalar types Tim Holy Improvements to tutorial, LDLT update and downdate Intel Back-end to Intel Math Kernel Library (MKL) Trevor Irons Square root for complex numbers, fix compile errors and mistake in docs Benoît Jacob Core developer Bram de Jong Improvement to benchmark suite Kibeom Kim Implement *= /= * / operations for VectorwiseOp Moritz Klammler Avoid memory leak when constructor of user-defined type throws exception Claas Köhler Improvements to Fortran and FFTW in CMake Alexey Korepanov Add RealQZ class Igor Krivenko Properly cast constants when using non-standard scalars Marijn Kruisselbrink CMake fixes Abhijit Kundu Fix compilation errors in OpenGL demos Moritz Lenz Allow solving transposed problem with SuperLU Bo Li Fix bugs in Spline constructor Sebastian Lipponer MSVC compilation support Daniel Lowenberg Add SparseView class David J. Luitz Bug fix for sparse * dense matrix product Naumov Maks Bug fix in polynomial solver test Angelos Mantzaflaris Fix to allow IncompleteLUT to be used with MPFR D J Marcin Fix operator& precedence bug Konstantinos A. Margaritis AltiVec/VSX, ARM NEON (32-bit/64-bit) and S390x SIMD (ZVector) vectorization Roger Martin Component-wise arc tangent function Ricard Marxer Reverse, redux improvements, the count() method, some dox Vincenzo Di Massa CMake fix Christian Mayer Early code review and input in technical/design discussions Frank Meier-Dörnberg MSVC compatibility fixes Keir Mierle LDLT decomposition and other improvements, help with MPL relicensing Laurent Montel CMake improvements. Laurent is (with Alexander) one of the CMake gurus at KDE! Eamon Nerbonne Compilation fixes for win32 Alexander Neundorf CMake improvements. Alexander is (with Laurent) one of the CMake gurus at KDE! Jason Newton Componentwise tangent functions Jitse Niesen Matrix functions, large improvements in the Eigenvalues module and in the docs, and more ... Desire Nuentsa Many improvements to Sparse module: SparseLU, SparseQR, ILUT, PaStiXSupport, … Jan Oberländer Compatibility with termios.h Jos van den Oever Compilation fix Michael Olbrich Early patches, including the initial loop meta-unroller Simon Pilgrim Optimizations for NEON Bjorn Piltz Visual C compilation fix Benjamin Piwowarski Add conservativeResize() for sparse matrices Zach Ploskey Copy-editing of tutorial Giacomo Po MINRES iterative solver Sergey Popov Fix bug in SelfAdjointEigenSolver Manoj Rajagopalan Introduce middleRows() / middleCols(), bug fix for nonstandard numeric types Stjepan Rajko MSVC compatibility fix Jure Repinc CMake fixes Kenneth Frank Riddile Lots of Windows/MSVC compatibility fixes, handling of alignment issues Richard Roberts Bug fix in selection of MKL Householder QR Adolfo Rodriguez Prevent allocations in matrix decompositions Peter Román Support for SuperLU's ILU factorization Oliver Ruepp Bug fix in sparse matrix product with row-major matrices Radu Bogdan Rusu Fix compilation warning Guillaume Saupin Skyline matrices Olivier Saut Typo in documentation Benjamin Schindler gdb pretty printers Michael Schmidt Fix in assembly when identifying CPU, Compilation fix connected to min/max Dennis Schridde New typedefs like AlignedBox3f Jakob Schwendner Test for unaligned quaternions, Benchmark for Geometry module Christian Seiler The Tensor module Martin Senst Bug fix for empty matrices Sameer Sheorey Fix gdb pretty printer for variable-size matrices Andy Somerville Functions to get intersection between two ParametrizedLines Alex Stapleton Help with tough C++ questions Benoit Steiner Faster matrix multiplication, Tensor module, CUDA Sven Strothoff Add intersects() method to AlignedBox Leszek Swirski Fix oversight in installation scripts Adam Szalkowski Bug fix in MatrixBase::makeHouseholder() Silvio Traversaro Fix for FindEigen3.cmake Piotr Trojanek QCC compilation fixes Anthony Truchet Bugfix in QTransform and QMatrix support Adolfo Rodriguez Tsourouksdissian Version of JacobiSVD that pre-allocates its resources James Richard Tyrer CMake fix Rhys Ulerich Pkg-config support, improved GDB pretty-printer Henry de Valence Typo in documentation Ingmar Vanhassel CMake fix Michiel Van Dyck Multi-threading documentation bug fix Scott Wheeler Documentation improvements Freddie Witherden CMake fixes, allow LevenbergMarquardt to work with non-standard types Urs Wolfer Fixed a serious warning Manuel Yguel Bug fixes, work on inverse-with-check, the Polynomial module Pierre Zoppitelli Making a start with a divide-and-conquer SVD implementation Jonas Adler Bugfixes for CUDA support Eigen is also using code that we copied from other sources. They are acknowledged in our sources and in the Mercurial history, but let's also mention them here: Intel Corporation SSE code for 4x4 matrix inversion taken from here. Tim Davis AMD reordering simplicial sparse Cholesky factorization adapted from SuiteSparse Julien Pommier SSE implementation of exp,log,cos,sin math functions from GMM++ Yousef Saad IncompleteLUT preconditioner coming from ITSOL Minpack authors Algorithms for non linear optimization. Special thanks to Tuxfamily for the wonderful quality of their services, and the GCC Compile Farm Project that gives us access to many various systems including ARM NEON. If you are looking for a BibTeX entry to use to cite Eigen in academic papers, see the BibTeX page. Retrieved from ""http://eigen.tuxfamily.org/index.php?title=Main_Page&oldid=2050"" Navigation menu Personal tools Log in Namespaces Page Discussion Variants Views Read View source View history Actions Search Navigation Main page Forum Bugs & feature requests FAQ Contributing Benchmark Publications Recent changes Documentation Eigen 3 Dev branch Tools What links here Related changes Special pages Printable version Permanent link Page information This page was last modified on 10 June 2016, at 07:00. This page has been accessed 3,957,239 times. Content is available under GNU Free Documentation License 1.2 unless otherwise noted. Privacy policy About Eigen Disclaimers"	"null"	"null"	"A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms. [MPL2]"	"true"
"Math"	"GLM"	"https://github.com/g-truc/glm"	"Header-only C++ math library that matches and inter-operates with OpenGL's GLSL math. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1158"	"155"	"324"	"GitHub - g-truc/glm: OpenGL Mathematics (GLM) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 155 Star 1,158 Fork 324 g-truc/glm forked from Groovounet/glm-deprecated Code Issues 39 Pull requests 1 Pulse Graphs OpenGL Mathematics (GLM) https://glm.g-truc.net 2,880 commits 28 branches 54 releases Fetching contributors C++ 96.5% Objective-C 1.8% CMake 1.5% C 0.2% C++ Objective-C CMake C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.8.4 0.9.0 0.9.1 0.9.2 0.9.3 0.9.4 0.9.5-broken 0.9.5 0.9.6 0.9.7 GTC_integer GTC_type_aligned amp angle bitfield cmake cxx11 float_normalize gtx_area hash master revert-264-fast_trigonometry simd static-const trivial type_trait union vectorize Nothing to show release-closed preview1 precision-closed packing-closed nohalf-closed io-closed bug-214-closed 0.9.7.5 0.9.7.4 0.9.7.3 0.9.7.2 0.9.7.1 0.9.7.0 0.9.6.3 0.9.6.2 0.9.6.1 0.9.6.0 0.9.5.4 0.9.5.3 0.9.5.2 0.9.5.1 0.9.5.0 0.9.4.6 0.9.4.5 0.9.4.4 0.9.4.3 0.9.4.2 0.9.4.1 0.9.4.0 0.9.3.4 0.9.3.3 0.9.3.2 0.9.3.1 0.9.3.0 0.9.2.7 0.9.2.6 0.9.2.5 0.9.2.4 0.9.2.3 0.9.2.2 0.9.2.1 0.9.2.0 0.9.1.3 0.9.1.2 0.9.1.1 0.9.1.0 0.9.0.7 0.9.0.6 0.9.0.5 0.9.0.4 0.9.0.3 0.9.0.2 0.9.0.1 0.9.0.0 Nothing to show New pull request Pull request Compare This branch is 1713 commits ahead of Groovounet:master. Latest commit 166099e Jul 14, 2016 Groovounet Added generic quaternion SIMD optimizations Permalink Failed to load latest commit information. cmake Moved glm.pc.in into cmake directory #509 May 31, 2016 doc Updated SIMD documentation May 31, 2016 glm Added generic quaternion SIMD optimizations Jul 14, 2016 test Fixed matrix functions using SIMD code on unaligned types #518 Jul 14, 2016 util Removed obsolete FindGLM Mar 30, 2015 .gitignore added: pattern for local build directories Oct 29, 2015 CMakeLists.txt Moved glm.pc.in into cmake directory #509 May 30, 2016 copying.txt Updated copyright date Apr 29, 2016 readme.md Merged 0.9.7 Jul 14, 2016 readme.md OpenGL Mathematics (GLM) is a header only C++ mathematics library for graphics software based on the OpenGL Shading Language (GLSL) specifications. GLM provides classes and functions designed and implemented with the same naming conventions and functionalities than GLSL so that anyone who knows GLSL, can use GLM as well in C++. This project isn't limited to GLSL features. An extension system, based on the GLSL extension conventions, provides extended capabilities: matrix transformations, quaternions, data packing, random numbers, noise, etc... This library works perfectly with OpenGL but it also ensures interoperability with other third party libraries and SDK. It is a good candidate for software rendering (raytracing / rasterisation), image processing, physic simulations and any development context that requires a simple and convenient mathematics library. GLM is written in C++98 but can take advantage of C++11 when supported by the compiler. It is a platform independent library with no dependence and it officially supports the following compilers: Apple Clang 4.0 and higher GCC 4.2 and higher Intel C++ Composer XE 2013 and higher LLVM 3.0 and higher Visual C++ 2010 and higher CUDA 4.0 and higher (experimental) Any conform C++98 or C++11 compiler For more information about GLM, please have a look at the manual and the API reference documentation. The source code and the documentation are licensed under the Happy Bunny License (Modified MIT) or the MIT License. Thanks for contributing to the project by submitting issues for bug reports and feature requests. Any feedback is welcome at glm@g-truc.net. #include <glm/vec3.hpp> // glm::vec3 #include <glm/vec4.hpp> // glm::vec4 #include <glm/mat4x4.hpp> // glm::mat4 #include <glm/gtc/matrix_transform.hpp> // glm::translate, glm::rotate, glm::scale, glm::perspective #include <glm/gtc/constants.hpp> // glm::pi  glm::mat4 camera(float Translate, glm::vec2 const & Rotate) {     glm::mat4 Projection = glm::perspective(glm::pi<float>() * 0.25f, 4.0f / 3.0f, 0.1f, 100.f);     glm::mat4 View = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, -Translate));     View = glm::rotate(View, Rotate.y, glm::vec3(-1.0f, 0.0f, 0.0f));     View = glm::rotate(View, Rotate.x, glm::vec3(0.0f, 1.0f, 0.0f));     glm::mat4 Model = glm::scale(glm::mat4(1.0f), glm::vec3(0.5f));     return Projection * View * Model; } Project Health Service System Compiler Status Drone Linux 64 bits GCC 4.6.3 Lastest release Release notes GLM 0.9.8.0 - 2016-XX-XX Features: Added right and left handed projection and clip control support #447 #415 #119 Added compNormalize and compScale functions to GTX_component_wise Added packF3x9_E1x5 and unpackF3x9_E1x5 to GTC_packing for RGB9E5 #416 Added (un)packHalf to GTC_packing Added (un)packUnorm and (un)packSnorm to GTC_packing Added 16bit pack and unpack to GTC_packing Added 8bit pack and unpack to GTC_packing Added missing bvec* && and || operators Added iround and uround to GTC_integer, fast round on positive values Added raw SIMD API Added 'aligned' qualifiers Added GTC_type_aligned with aligned vec types Added GTC_functions extension Improvements: Improved SIMD and swizzle operators interactions with GCC and Clang #474 Improved GTC_random linearRand documentation Improved GTC_reciprocal documentation Improved GLM_FORCE_EXPLICIT_CTOR coverage #481 Improved OpenMP support detection for Clang, GCC, ICC and VC Added constexpr for vec, mat, quat and dual_quat types #493 Added NEON instruction set detection Added MIPS CPUs detection Added PowerPC CPUs detection Use Cuda built-in function for abs function implementation with Cuda compiler Fixes: Fixed GTX_extended_min_max filename typo #386 Fixed intersectRayTriangle to not do any unintentional backface culling Fixed long long warnings when using C++98 on GCC and Clang #482 Fixed sign with signed integer function on non-x86 architecture Fixed strict aliasing warnings #473 Fixed missing vec1 overload to length2 and distance2 functions #431 Deprecation: Removed GLM_FORCE_SIZE_FUNC define Deprecated GLM_GTX_simd_vec4 extension Deprecated GLM_GTX_simd_mat4 extension Deprecated GLM_GTX_simd_quat extension GLM 0.9.7.6 - 2016-0X-XX Improvements: Added pkg-config file #509 Fixes: Fixed STL for C++11 detection on ICC #510 Fixed missing vec1 overload to length2 and distance2 functions #431 Fixed long long warnings when using C++98 on GCC and Clang #482 GLM 0.9.7.5 - 2016-05-24 Improvements: Added Visual C++ Clang toolset detection Fixes: Fixed uaddCarry warning #497 Fixed roundPowerOfTwo and floorPowerOfTwo #503 Fixed Visual C++ SIMD instruction set automatic detection in 64 bits Fixed to_string when used with GLM_FORCE_INLINE #506 Fixed GLM_FORCE_INLINE with binary vec4 operators Fixed GTX_extended_min_max filename typo #386 Fixed intersectRayTriangle to not do any unintentional backface culling GLM 0.9.7.4 - 2016-03-19 Fixes: Fixed asinh and atanh warning with C++98 STL #484 Fixed polar coordinates function latitude #485 Fixed outerProduct defintions and operator signatures for mat2x4 and vec4 #475 Fixed eulerAngles precision error, returns NaN #451 Fixed undefined reference errors #489 Fixed missing GLM_PLATFORM_CYGWIN declaration #495 Fixed various undefined reference errors #490 GLM 0.9.7.3 - 2016-02-21 Improvements: Added AVX512 detection Fixes: Fixed CMake policy warning Fixed GCC 6.0 detection #477 Fixed Clang build on Windows #479 Fixed 64 bits constants warnings on GCC #463 GLM 0.9.7.2 - 2016-01-03 Fixes: Fixed GTC_round floorMultiple/ceilMultiple #412 Fixed GTC_packing unpackUnorm3x10_1x2 #414 Fixed GTC_matrix_inverse affineInverse #192 Fixed ICC on Linux build errors #449 Fixed ldexp and frexp compilation errors Fixed ""Declaration shadows a field"" warning #468 Fixed 'GLM_COMPILER_VC2005 is not defined' warning #468 Fixed various 'X is not defined' warnings #468 Fixed missing unary + operator #435 Fixed Cygwin build errors when using C++11 #405 GLM 0.9.7.1 - 2015-09-07 Improvements: Improved constexpr for constant functions coverage #198 Added to_string for quat and dual_quat in GTX_string_cast #375 Improved overall execution time of unit tests #396 Fixes: Fixed strict alignment warnings #235 #370 Fixed link errors on compilers not supported default function #377 Fixed compilation warnings in vec4 Fixed non-identity quaternions for equal vectors #234 Fixed excessive GTX_fast_trigonometry execution time #396 Fixed Visual Studio 2015 'hides class member' warnings #394 Fixed builtin bitscan never being used #392 Removed unused func_noise.* files #398 GLM 0.9.7.0 - 2015-08-02 Features: Added GTC_color_space: convertLinearToSRGB and convertSRGBToLinear functions Added 'fmod' overload to GTX_common with tests #308 Left handed perspective and lookAt functions #314 Added functions eulerAngleXYZ and extractEulerAngleXYZ #311 Added to perform std::hash on GLM types #320 #367 Added for texcoord wrapping Added static components and precision members to all vector and quat types #350 Added .gitignore #349 Added support of defaulted functions to GLM types, to use them in unions #366 Improvements: Changed usage of __has_include to support Intel compiler #307 Specialized integer implementation of YCoCg-R #310 Don't show status message in 'FindGLM' if 'QUIET' option is set. #317 Added master branch continuous integration service on Linux 64 #332 Clarified manual regarding angle unit in GLM, added FAQ 11 #326 Updated list of compiler versions Fixes: Fixed default precision for quat and dual_quat type #312 Fixed (u)int64 MSB/LSB handling on BE archs #306 Fixed multi-line comment warning in g++. #315 Fixed specifier removal by 'std::make_pair<>' #333 Fixed perspective fovy argument documentation #327 Removed -m64 causing build issues on Linux 32 #331 Fixed isfinite with C++98 compilers #343 Fixed Intel compiler build error on Linux #354 Fixed use of libstdc++ with Clang #351 Fixed quaternion pow #346 Fixed decompose warnings #373 Fixed matrix conversions #371 Deprecation: Removed integer specification for 'mod' in GTC_integer #308 Removed GTX_multiple, replaced by GTC_round GLM 0.9.6.3 - 2015-02-15 Fixed Android doesn't have C++ 11 STL #284 GLM 0.9.6.2 - 2015-02-15 Features: Added display of GLM version with other GLM_MESSAGES Added ARM instruction set detection Improvements: Removed assert for perspective with zFar < zNear #298 Added Visual Studio natvis support for vec1, quat and dualqual types Cleaned up C++11 feature detections Clarify GLM licensing Fixes: Fixed faceforward build #289 Fixed conflict with Xlib #define True 1 #293 Fixed decompose function VS2010 templating issues #294 Fixed mat4x3 = mat2x3 * mat4x2 operator #297 Fixed warnings in F2x11_1x10 packing function in GTC_packing #295 Fixed Visual Studio natvis support for vec4 #288 Fixed GTC_packing packnormx build and added tests #292 Disabled GTX_scalar_multiplication for GCC, failing to build tests #242 Fixed Visual C++ 2015 constexpr errors: Disabled only partial support Fixed functions not inlined with Clang #302 Fixed memory corruption (undefined behaviour) #303 GLM 0.9.6.1 - 2014-12-10 Features: Added GLM_LANG_CXX14_FLAG and GLM_LANG_CXX1Z_FLAG language feature flags Added C++14 detection Improvements: Clean up GLM_MESSAGES compilation log to report only detected capabilities Fixes: Fixed scalar uaddCarry build error with Cuda #276 Fixed C++11 explicit conversion operators detection #282 Fixed missing explicit conversion when using integer log2 with *vec1 types Fixed 64 bits integer GTX_string_cast to_string on VC 32 bit compiler Fixed Android build issue, STL C++11 is not supported by the NDK #284 Fixed unsupported _BitScanForward64 and _BitScanReverse64 in VC10 Fixed Visual C++ 32 bit build #283 Fixed GLM_FORCE_SIZE_FUNC pragma message Fixed C++98 only build Fixed conflict between GTX_compatibility and GTC_quaternion #286 Fixed C++ language restriction using GLM_FORCE_CXX** GLM 0.9.6.0 - 2014-11-30 Features: Exposed template vector and matrix types in 'glm' namespace #239, #244 Added GTX_scalar_multiplication for C++ 11 compiler only #242 Added GTX_range for C++ 11 compiler only #240 Added closestPointOnLine function for tvec2 to GTX_closest_point #238 Added GTC_vec1 extension, vec1 support to *vec types Updated GTX_associated_min_max with vec1 support Added support of precision and integers to linearRand #230 Added Integer types support to GTX_string_cast #249 Added vec3 slerp #237 Added GTX_common with isdenomal #223 Added GLM_FORCE_SIZE_FUNC to replace .length() by .size() #245 Added GLM_FORCE_NO_CTOR_INIT Added 'uninitialize' to explicitly not initialize a GLM type Added GTC_bitfield extension, promoted GTX_bit Added GTC_integer extension, promoted GTX_bit and GTX_integer Added GTC_round extension, promoted GTX_bit Added GLM_FORCE_EXPLICIT_CTOR to require explicit type conversions #269 Added GTX_type_aligned for aligned vector, matrix and quaternion types Improvements: Rely on C++11 to implement isinf and isnan Removed GLM_FORCE_CUDA, Cuda is implicitly detected Separated Apple Clang and LLVM compiler detection Used pragma once Undetected C++ compiler automatically compile with GLM_FORCE_CXX98 and GLM_FORCE_PURE Added not function (from GLSL specification) on VC12 Optimized bitfieldReverse and bitCount functions Optimized findLSB and findMSB functions. Optimized matrix-vector multiple performance with Cuda #257, #258 Reduced integer type redifinitions #233 Rewrited of GTX_fast_trigonometry #264 #265 Made types trivially copyable #263 Removed in GLM tests Used std features within GLM without redeclaring Optimized cot function #272 Optimized sign function #272 Added explicit cast from quat to mat3 and mat4 #275 Fixes: Fixed std::nextafter not supported with C++11 on Android #217 Fixed missing value_type for dual quaternion Fixed return type of dual quaternion length Fixed infinite loop in isfinite function with GCC #221 Fixed Visual Studio 14 compiler warnings Fixed implicit conversion from another tvec2 type to another tvec2 #241 Fixed lack of consistency of quat and dualquat constructors Fixed uaddCarray #253 Fixed float comparison warnings #270 Deprecation: Removed degrees for function parameters Removed GLM_FORCE_RADIANS, active by default Removed VC 2005 / 8 and 2008 / 9 support Removed GCC 3.4 to 4.3 support Removed LLVM GCC support Removed LLVM 2.6 to 3.1 support Removed CUDA 3.0 to 3.2 support GLM 0.9.5.4 - 2014-06-21 Fixed non-utf8 character #196 Added FindGLM install for CMake #189 Fixed GTX_color_space - saturation #195 Fixed glm::isinf and glm::isnan for with Android NDK 9d #191 Fixed builtin GLM_ARCH_SSE4 #204 Optimized Quaternion vector rotation #205 Fixed missing doxygen @endcond tag #211 Fixed instruction set detection with Clang #158 Fixed orientate3 function #207 Fixed lerp when cosTheta is close to 1 in quaternion slerp #210 Added GTX_io for io with #144 Fixed fastDistance ambiguity #215 Fixed tweakedInfinitePerspective #208 and added user-defined epsilon to tweakedInfinitePerspective Fixed std::copy and std::vector with GLM types #214 Fixed strict aliasing issues #212, #152 Fixed std::nextafter not supported with C++11 on Android #213 Fixed corner cases in exp and log functions for quaternions #199 GLM 0.9.5.3 - 2014-04-02 Added instruction set auto detection with Visual C++ using _M_IX86_FP - /arch compiler argument Fixed GTX_raw_data code dependency Fixed GCC instruction set detection Added GLM_GTX_matrix_transform_2d extension (#178, #176) Fixed CUDA issues (#169, #168, #183, #182) Added support for all extensions but GTX_string_cast to CUDA Fixed strict aliasing warnings in GCC 4.8.1 / Android NDK 9c (#152) Fixed missing bitfieldInterleave definisions Fixed usubBorrow (#171) Fixed eulerAngle*** not consistent for right-handed coordinate system (#173) Added full tests for eulerAngle*** functions (#173) Added workaround for a CUDA compiler bug (#186, #185) GLM 0.9.5.2 - 2014-02-08 Fixed initializer list ambiguity (#159, #160) Fixed warnings with the Android NDK 9c Fixed non power of two matrix products Fixed mix function link error Fixed SSE code included in GLM tests on ""pure"" platforms Fixed undefined reference to fastInverseSqrt (#161) Fixed GLM_FORCE_RADIANS with build error (#165) Fix dot product clamp range for vector angle functions. (#163) Tentative fix for strict aliasing warning in GCC 4.8.1 / Android NDK 9c (#152) Fixed GLM_GTC_constants description brief (#162) GLM 0.9.5.1 - 2014-01-11 Fixed angle and orientedAngle that sometimes return NaN values (#145) Deprecated degrees for function parameters and display a message Added possible static_cast conversion of GLM types (#72) Fixed error 'inverse' is not a member of 'glm' from glm::unProject (#146) Fixed mismatch between some declarations and definitions Fixed inverse link error when using namespace glm; (#147) Optimized matrix inverse and division code (#149) Added intersectRayPlane function (#153) Fixed outerProduct return type (#155) GLM 0.9.5.0 - 2013-12-25 Added forward declarations (glm/fwd.hpp) for faster compilations Added per feature headers Minimized GLM internal dependencies Improved Intel Compiler detection Added bitfieldInterleave and _mm_bit_interleave_si128 functions Added GTX_scalar_relational Added GTX_dual_quaternion Added rotation function to GTX_quaternion (#22) Added precision variation of each type Added quaternion comparison functions Fixed GTX_multiple for negative value Removed GTX_ocl_type extension Fixed post increment and decrement operators Fixed perspective with zNear == 0 (#71) Removed l-value swizzle operators Cleaned up compiler detection code for unsupported compilers Replaced C cast by C++ casts Fixed .length() that should return a int and not a size_t Added GLM_FORCE_SIZE_T_LENGTH and glm::length_t Removed unnecessary conversions Optimized packing and unpacking functions Removed the normalization of the up argument of lookAt function (#114) Added low precision specializations of inversesqrt Fixed ldexp and frexp implementations Increased assert coverage Increased static_assert coverage Replaced GLM traits by STL traits when possible Allowed including individual core feature Increased unit tests completness Added creating of a quaternion from two vectors Added C++11 initializer lists Fixed umulExtended and imulExtended implementations for vector types (#76) Fixed CUDA coverage for GTC extensions Added GTX_io extension Improved GLM messages enabled when defining GLM_MESSAGES Hidden matrix _inverse function implementation detail into private section GLM 0.9.4.6 - 2013-09-20 Fixed detection to select the last known compiler if newer version #106 Fixed is_int and is_uint code duplication with GCC and C++11 #107 Fixed test suite build while using Clang in C++11 mode Added c++1y mode support in CMake test suite Removed ms extension mode to CMake when no using Visual C++ Added pedantic mode to CMake test suite for Clang and GCC Added use of GCC frontend on Unix for ICC and Visual C++ fronted on Windows for ICC Added compilation errors for unsupported compiler versions Fixed glm::orientation with GLM_FORCE_RADIANS defined #112 Fixed const ref issue on assignment operator taking a scalar parameter #116 Fixed glm::eulerAngleY implementation #117 GLM 0.9.4.5 - 2013-08-12 Fixed CUDA support Fixed inclusion of intrinsics in ""pure"" mode #92 Fixed language detection on GCC when the C++0x mode isn't enabled #95 Fixed issue #97: register is deprecated in C++11 Fixed issue #96: CUDA issues Added Windows CE detection #92 Added missing value_ptr for quaternions #99 GLM 0.9.4.4 - 2013-05-29 Fixed slerp when costheta is close to 1 #65 Fixed mat4x2 value_type constructor #70 Fixed glm.natvis for Visual C++ 12 #82 Added assert in inversesqrt to detect division by zero #61 Fixed missing swizzle operators #86 Fixed CUDA warnings #86 Fixed GLM natvis for VC11 #82 Fixed GLM_GTX_multiple with negative values #79 Fixed glm::perspective when zNear is zero #71 GLM 0.9.4.3 - 2013-03-20 Detected qualifier for Clang Fixed C++11 mode for GCC, couldn't be enabled without MS extensions Fixed squad, intermediate and exp quaternion functions Fixed GTX_polar_coordinates euclidean function, takes a vec2 instead of a vec3 Clarify the license applying on the manual Added a docx copy of the manual Fixed GLM_GTX_matrix_interpolation Fixed isnan and isinf on Android with Clang Autodetected C++ version using __cplusplus value Fixed mix for bool and bvec* third parameter GLM 0.9.4.2 - 2013-02-14 Fixed compAdd from GTX_component_wise Fixed SIMD support for Intel compiler on Windows Fixed isnan and isinf for CUDA compiler Fixed GLM_FORCE_RADIANS on glm::perspective Fixed GCC warnings Fixed packDouble2x32 on Xcode Fixed mix for vec4 SSE implementation Fixed 0x2013 dash character in comments that cause issue in Windows Japanese mode Fixed documentation warnings Fixed CUDA warnings GLM 0.9.4.1 - 2012-12-22 Improved half support: -0.0 case and implicit conversions Fixed Intel Composer Compiler support on Linux Fixed interaction between quaternion and euler angles Fixed GTC_constants build Fixed GTX_multiple Fixed quat slerp using mix function when cosTheta close to 1 Improved fvec4SIMD and fmat4x4SIMD implementations Fixed assert messages Added slerp and lerp quaternion functions and tests GLM 0.9.4.0 - 2012-11-18 Added Intel Composer Compiler support Promoted GTC_espilon extension Promoted GTC_ulp extension Removed GLM website from the source repository Added GLM_FORCE_RADIANS so that all functions takes radians for arguments Fixed detection of Clang and LLVM GCC on MacOS X Added debugger visualizers for Visual C++ 2012 GLM 0.9.3.4 - 2012-06-30 Added SSE4 and AVX2 detection. Removed VIRTREV_xstream and the incompatibility generated with GCC Fixed C++11 compiler option for GCC Removed MS language extension option for GCC (not fonctionnal) Fixed bitfieldExtract for vector types Fixed warnings Fixed SSE includes GLM 0.9.3.3 - 2012-05-10 Fixed isinf and isnan Improved compatibility with Intel compiler Added CMake test build options: SIMD, C++11, fast math and MS land ext Fixed SIMD mat4 test on GCC Fixed perspectiveFov implementation Fixed matrixCompMult for none-square matrices Fixed namespace issue on stream operators Fixed various warnings Added VC11 support GLM 0.9.3.2 - 2012-03-15 Fixed doxygen documentation Fixed Clang version detection Fixed simd mat4 /= operator GLM 0.9.3.1 - 2012-01-25 Fixed platform detection Fixed warnings Removed detail code from Doxygen doc GLM 0.9.3.0 - 2012-01-09 Added CPP Check project Fixed conflict with Windows headers Fixed isinf implementation Fixed Boost conflict Fixed warnings GLM 0.9.3.B - 2011-12-12 Added support for Chrone Native Client Added epsilon constant Removed value_size function from vector types Fixed roundEven on GCC Improved API documentation Fixed modf implementation Fixed step function accuracy Fixed outerProduct GLM 0.9.3.A - 2011-11-11 Improved doxygen documentation Added new swizzle operators for C++11 compilers Added new swizzle operators declared as functions Added GLSL 4.20 length for vector and matrix types Promoted GLM_GTC_noise extension: simplex, perlin, periodic noise functions Promoted GLM_GTC_random extension: linear, gaussian and various random number generation distribution Added GLM_GTX_constants: provides useful constants Added extension versioning Removed many unused namespaces Fixed half based type contructors Added GLSL core noise functions GLM 0.9.2.7 - 2011-10-24 Added more swizzling constructors Added missing none-squared matrix products GLM 0.9.2.6 - 2011-10-01 Fixed half based type build on old GCC Fixed /W4 warnings on Visual C++ Fixed some missing l-value swizzle operators GLM 0.9.2.5 - 2011-09-20 Fixed floatBitToXint functions Fixed pack and unpack functions Fixed round functions GLM 0.9.2.4 - 2011-09-03 Fixed extensions bugs GLM 0.9.2.3 - 2011-06-08 Fixed build issues GLM 0.9.2.2 - 2011-06-02 Expend matrix constructors flexibility Improved quaternion implementation Fixed many warnings across platforms and compilers GLM 0.9.2.1 - 2011-05-24 Automatically detect CUDA support Improved compiler detection Fixed errors and warnings in VC with C++ extensions disabled Fixed and tested GLM_GTX_vector_angle Fixed and tested GLM_GTX_rotate_vector GLM 0.9.2.0 - 2011-05-09 Added CUDA support Added CTest test suite Added GLM_GTX_ulp extension Added GLM_GTX_noise extension Added GLM_GTX_matrix_interpolation extension Updated quaternion slerp interpolation GLM 0.9.1.3 - 2011-05-07 Fixed bugs GLM 0.9.1.2 - 2011-04-15 Fixed bugs GLM 0.9.1.1 - 2011-03-17 Fixed bugs GLM 0.9.1.0 - 2011-03-03 Fixed bugs GLM 0.9.1.B - 2011-02-13 Updated API documentation Improved SIMD implementation Fixed Linux build GLM 0.9.0.8 - 2011-02-13 Added quaternion product operator. Clarify that GLM is a header only library. GLM 0.9.1.A - 2011-01-31 Added SIMD support Added new swizzle functions Improved static assert error message with C++0x static_assert New setup system Reduced branching Fixed trunc implementation GLM 0.9.0.7 - 2011-01-30 Added GLSL 4.10 packing functions Added == and != operators for every types. GLM 0.9.0.6 - 2010-12-21 Many matrices bugs fixed GLM 0.9.0.5 - 2010-11-01 Improved Clang support Fixed bugs GLM 0.9.0.4 - 2010-10-04 Added autoexp for GLM Fixed bugs GLM 0.9.0.3 - 2010-08-26 Fixed non-squared matrix operators GLM 0.9.0.2 - 2010-07-08 Added GLM_GTX_int_10_10_10_2 Fixed bugs GLM 0.9.0.1 - 2010-06-21 Fixed extensions errors GLM 0.9.0.0 - 2010-05-25 Objective-C support Fixed warnings Updated documentation GLM 0.9.B.2 - 2010-04-30 Git transition Removed experimental code from releases Fixed bugs GLM 0.9.B.1 - 2010-04-03 Based on GLSL 4.00 specification Added the new core functions Added some implicit conversion support GLM 0.9.A.2 - 2010-02-20 Improved some possible errors messages Improved declarations and definitions match GLM 0.9.A.1 - 2010-02-09 Removed deprecated features Internal redesign GLM 0.8.4.4 final - 2010-01-25 Fixed warnings GLM 0.8.4.3 final - 2009-11-16 Fixed Half float arithmetic Fixed setup defines GLM 0.8.4.2 final - 2009-10-19 Fixed Half float adds GLM 0.8.4.1 final - 2009-10-05 Updated documentation Fixed MacOS X build GLM 0.8.4.0 final - 2009-09-16 Added GCC 4.4 and VC2010 support Added matrix optimizations GLM 0.8.3.5 final - 2009-08-11 Fixed bugs GLM 0.8.3.4 final - 2009-08-10 Updated GLM according GLSL 1.5 spec Fixed bugs GLM 0.8.3.3 final - 2009-06-25 Fixed bugs GLM 0.8.3.2 final - 2009-06-04 Added GLM_GTC_quaternion Added GLM_GTC_type_precision GLM 0.8.3.1 final - 2009-05-21 Fixed old extension system. GLM 0.8.3.0 final - 2009-05-06 Added stable extensions. Added new extension system. GLM 0.8.2.3 final - 2009-04-01 Fixed bugs. GLM 0.8.2.2 final - 2009-02-24 Fixed bugs. GLM 0.8.2.1 final - 2009-02-13 Fixed bugs. GLM 0.8.2 final - 2009-01-21 Fixed bugs. GLM 0.8.1 final - 2008-10-30 Fixed bugs. GLM 0.8.0 final - 2008-10-23 New method to use extension. GLM 0.8.0 beta3 - 2008-10-10 Added CMake support for GLM tests. GLM 0.8.0 beta2 - 2008-10-04 Improved half scalars and vectors support. GLM 0.8.0 beta1 - 2008-09-26 Improved GLSL conformance Added GLSL 1.30 support Improved API documentation GLM 0.7.6 final - 2008-08-08 Improved C++ standard comformance Added Static assert for types checking GLM 0.7.5 final - 2008-07-05 Added build message system with Visual Studio Pedantic build with GCC GLM 0.7.4 final - 2008-06-01 Added external dependencies system. GLM 0.7.3 final - 2008-05-24 Fixed bugs Added new extension group GLM 0.7.2 final - 2008-04-27 Updated documentation Added preprocessor options GLM 0.7.1 final - 2008-03-24 Disabled half on GCC Fixed extensions GLM 0.7.0 final - 2008-03-22 Changed to MIT license Added new documentation GLM 0.6.4 - 2007-12-10 Fixed swizzle operators GLM 0.6.3 - 2007-11-05 Fixed type data accesses Fixed 3DSMax sdk conflict GLM 0.6.2 - 2007-10-08 Fixed extension GLM 0.6.1 - 2007-10-07 Fixed a namespace error Added extensions GLM 0.6.0 : 2007-09-16 Added new extension namespace mecanium Added Automatic compiler detection GLM 0.5.1 - 2007-02-19 Fixed swizzle operators GLM 0.5.0 - 2007-01-06 Upgrated to GLSL 1.2 Added swizzle operators Added setup settings GLM 0.4.1 - 2006-05-22 Added OpenGL examples GLM 0.4.0 - 2006-05-17 Added missing operators to vec* and mat* Added first GLSL 1.2 features Fixed windows.h before glm.h when windows.h required GLM 0.3.2 - 2006-04-21 Fixed texcoord components access. Fixed mat4 and imat4 division operators. GLM 0.3.1 - 2006-03-28 Added GCC 4.0 support under MacOS X. Added GCC 4.0 and 4.1 support under Linux. Added code optimisations. GLM 0.3 - 2006-02-19 Improved GLSL type conversion and construction compliance. Added experimental extensions. Added Doxygen Documentation. Added code optimisations. Fixed bugs. GLM 0.2 - 2005-05-05 Improve adaptative from GLSL. Add experimental extensions based on OpenGL extension process. Fixe bugs. GLM 0.1 - 2005-02-21 Add vec2, vec3, vec4 GLSL types Add ivec2, ivec3, ivec4 GLSL types Add bvec2, bvec3, bvec4 GLSL types Add mat2, mat3, mat4 GLSL types Add almost all functions Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/g-truc/glm"	"Header-only C++ math library that matches and inter-operates with OpenGL's GLSL math. [MIT]"	"true"
"Math"	"GMTL"	"http://ggt.sourceforge.net/"	"Graphics Math Template Library is a collection of tools implementing Graphics primitives in generalized ways. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Generic Graphics Toolkit Generic Graphics Toolkit GGT is a collection of tools implementing Graphics primitives in generalized ways. Using modern C++ template metaprogramming and generic programming paradigms, GGT is a fast and flexible base for any modern graphics project. Project info, Downloads, Mailing Lists, Bugs... Generic programming tools provided by the GGT: Graphics Math Template Library (GMTL) Programmer's Guide [PDF | HTML] An in-depth guide to GMTL. Teaches you the philosophy and thinking behind GMTL so you can understand how to use it. After reading this, read the reference manual for API specifics. Reference Manual [html-notree | html-tree | PDF] A quick reference for class and function prototypes. Use this after understanding the Programmer's Guide. We generated this document directly from the GMTL header files with the doxygen tool. Browse Source Code [SVN] Curious how we implemented something, but don't want to check out the code? Need to track down which revision a bug happened? Here's the source for your reading pleasure."	"null"	"null"	"Graphics Math Template Library is a collection of tools implementing Graphics primitives in generalized ways. [GPL2]"	"true"
"Math"	"GMP"	"https://gmplib.org/"	"A C/C++ library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers. [LGPL3 & GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The GNU MP Bignum Library GMP «Arithmetic without limitations» The GNU Multiple Precision Arithmetic Library Last modified: 2016-07-03 Documentation: 6.1.1 HTML | 6.1.1 PDF Download: gmp-6.1.1.tar.lz | Release notes   NEW 2016-06-20 Development: Developers' corner GMPbench: Results | Download benchmark sources Fun: Compute billions of digits of π using GMP! Security: GMP server security policy Page contents: What is GMP? Function categories Download Reporting bugs Mailing lists Current release status Future releases This site does not use cookies I agree!  What is GMP? GMP is a free library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers. There is no practical limit to the precision except the ones implied by the available memory in the machine GMP runs on. GMP has a rich set of functions, and the functions have a regular interface. The main target applications for GMP are cryptography applications and research, Internet security applications, algebra systems, computational algebra research, etc. GMP is carefully designed to be as fast as possible, both for small operands and for huge operands. The speed is achieved by using fullwords as the basic arithmetic type, by using fast algorithms, with highly optimised assembly code for the most common inner loops for a lot of CPUs, and by a general emphasis on speed. The first GMP release was made in 1991. It is continually developed and maintained, with a new release about once a year. Since version 6, GMP is distributed under the dual licenses, GNU LGPL v3 and GNU GPL v2. These licenses make the library free to use, share, and improve, and allow you to pass on the result. The GNU licenses give freedoms, but also set firm restrictions on the use with non-free programs. GMP is part of the GNU project. For more information about the GNU project, please see the official GNU web site. GMP's main target platforms are Unix-type systems, such as GNU/Linux, Solaris, HP-UX, Mac OS X/Darwin, BSD, AIX, etc. It also is known to work on Windows in both 32-bit and 64-bit mode. GMP is brought to you by a team listed in the manual. GMP is carefully developed and maintained, both technically and legally. We of course inspect and test contributed code carefully, but equally importantly we make sure we have the legal right to distribute the contributions, meaning users can safely use GMP. To achieve this, we will ask contributors to sign paperwork where they allow us to distribute their work. GMP function categories There are several categories of functions in GMP: High-level signed integer arithmetic functions (mpz). There are about 150 arithmetic and logic functions in this category. High-level rational arithmetic functions (mpq). This category consists of about 35 functions, but all signed integer arithmetic functions can be used too, by applying them to the numerator and denominator separately. High-level floating-point arithmetic functions (mpf). This is the GMP function category to use if the C type `double' doesn't give enough precision for an application. There are about 70 functions in this category. New projects should strongly consider using the much more complete GMP extension library mpfr instead of mpf. C++ class based interface to all of the above. (The C functions and types can of course be used directly from C++ too.) Low-level positive-integer, hard-to-use, very low overhead functions are found in the mpn category. No memory management is performed; the caller must ensure enough space is available for the results. The set of functions is not always regular, nor is the calling interface. These functions accept input arguments in the form of pairs consisting of a pointer to the least significant word, and an integral size telling how many limbs (= words) there are in that argument. The functions in the other categories call mpn for almost all their calculations. Of these functions about 60 are public. Download the latest release of GMP GMP 6.1.1 lz, 1936768 bytes xz, 1943164 bytes bz2, 2384919 bytes Main site, gmplib.org gmp-6.1.1.tar.lz gmp-6.1.1.tar.xz gmp-6.1.1.tar.bz2 USA, ftp.gnu.org gmp-6.1.1.tar.lz gmp-6.1.1.tar.xz gmp-6.1.1.tar.bz2 To try to verify that the file you have downloaded has not been tampered with, you can check that the GnuPG signature matches the contents of the file. Use your GnuPG software or a key server directly to get the key that was used for creating the signature. Starting from the repackaging of gmp-5.1.0 as gmp-5.1.0a.tar.* the following key is used to sign GMP releases: Key ID: 0x28C67298 Key type: 2560 bit RSA Fingerprint: 343C 2FF0 FBEE 5EC2 EDBE F399 F359 9FF8 28C6 7298 GnuPG signatures: gmp-6.1.1.tar.lz.sig   gmp-6.1.1.tar.xz.sig   gmp-6.1.1.tar.bz2.sig Instead of using a release, you may also get the latest code from the GMP repositories. This will require some more work compared to using a release. Reporting bugs in GMP Please first see the manual on how to report bugs. The proper address for bug reports is gmp-bugs at gmplib.org. Most problems with GMP these days are due to problems not in GMP, but with the compiler used for compiling the GMP sources. This is a major concern to the GMP project, since an incorrect computation is an incorrect computation, whether caused by a GMP bug or a compiler bug. We fight this by making the GMP testsuite have great coverage, so that it should catch every possible miscompilation. GMP mailing lists List Subscribe URL Archive URL Purpose gmp-bugs gmplib.org/mailman/listinfo/gmp-bugs gmplib.org/list-archives/gmp-bugs/ Bug reports (not questions!). See manual. gmp-announce gmplib.org/mailman/listinfo/gmp-announce gmplib.org/list-archives/gmp-announce/ Announcements from the developers (very little traffic) gmp-discuss gmplib.org/mailman/listinfo/gmp-discuss gmplib.org/list-archives/gmp-discuss/ Questions, Help, Discussions gmp-devel gmplib.org/mailman/listinfo/gmp-devel gmplib.org/list-archives/gmp-devel/ Technical discussions between developers gmp-commit gmplib.org/mailman/listinfo/gmp-commit gmplib.org/list-archives/gmp-commit/ Commit messages Note that we perform spam and virus filtering of these lists. The lists have been 100% spam-free during the last years. You cannot subscribe an AOL address to any GMP mailing list, since AOL blocks our mail server until we register with them as a ""bulk mailer"", something we will certainly never do. We're blocking all mail from PR China, since 99% of the spam arriving to the GMP moderators emanates from PR China. If you are affected but have a legitimate reason to send mail to the GMP project, e.g., if you work at a university or corporation with an interest in GMP, please let us know; we will open access for you. Status of the current release The current stable release is 6.1.1, released 2016-06-18. Issues with GMP 6.1.1: [No issues found yet.] Issues with GMP 6.1.0: An assembly file which is used for Intel Broadwell and Intel Skylake (except crippled Pentiums and Celerons without BMI2) will not work correctly for Windoze. Patch. Issues with GMP 6.0.0: [No issues found yet.] Issues with GMP 5.1.3: The documentation of mpn_set_str is incorrect and incomplete wrt allocation requirements. Patch. Issues with GMP 5.1.2: The functions mpn_sbpi1_div_qr_sec and mpn_sbpi1_div_r_sec compute incorrect results for some operands. With uniformly distributed random operands, the error is very hard to trigger, and for the intended use of these functions, operands can be expected to appear as such random operands from these functions' perspective. Patch. The internal function mpn_divrem_2 on Itanium clobbers two callee-saves registers. This can lead to miscomputations or crashes in the callers. Patch. See also issues for subsequent releases above. Issues with GMP 5.1.1: Windows only: A 64-bit build for AMD Bulldozer and Piledriver chips, or a fat 64-bit build running on these chips, will not work correctly. Patch. The function mpz_powm_ui computes garbage if the base argument is over 15000 decimal or the mod argument is at least 7500 decimal digits. No other GMP powm function is affected. Patch. See also issues for subsequent releases above. Issues with GMP 5.1.0: The mini-gmp.c file, which implements a subset of mpn and mpz, was not properly tested and contained a number of bugs. Please do not use the 5.1.0 version of mini-gmp.c. Note that these bugs do not affect GMP itself. The included top-level Makefile.in has an automake-generated distcheck target which creates a world-writable directory. This target is not used in the GMP release process, but it is a potential security problem affecting users who invoke this make target. This problem (and no other) is corrected in the gmp-5.1.0a.tar.* set of files. See also issues for subsequent releases above. For patches to older GMP versions, please see the Info on older GMP releases. Future releases Please see the GMPng page for information on what we're working on. Please send comments about this page to gmp-discuss at gmplib.org Copyright 2000–2016 Free Software Foundation Verbatim copying and distribution of this entire article is permitted in any medium, provided this notice is preserved."	"null"	"null"	"A C/C++ library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers. [LGPL3 & GPL2]"	"true"
"Math"	"MIRACL"	"https://github.com/CertiVox/MIRACL"	"A Multiprecision Integer and Rational Arithmetic Cryptographic Library. [AGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"104"	"50"	"50"	"GitHub - miracl/MIRACL: MIRACL Cryptographic SDK: Multiprecision Integer and Rational Arithmetic Cryptographic Library is a C software library that is widely regarded by developers as the gold standard open source SDK for elliptic curve cryptography (ECC). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 104 Fork 50 miracl/MIRACL Code Issues 9 Pull requests 9 Wiki Pulse Graphs MIRACL Cryptographic SDK: Multiprecision Integer and Rational Arithmetic Cryptographic Library is a C software library that is widely regarded by developers as the gold standard open source SDK for elliptic curve cryptography (ECC). http://miracl.com 35 commits 2 branches 0 releases Fetching contributors C 52.5% C++ 44.8% Smarty 1.6% Batchfile 0.9% Makefile 0.2% Assembly 0.0% C C++ Smarty Batchfile Makefile Assembly Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fixmac master Nothing to show Nothing to show New pull request Latest commit 31bfa87 Jul 13, 2016 mcarrickscott Fixed Spill/Restore bug in high level pairing code Permalink Failed to load latest commit information. exe New version 7.0.0 Jun 26, 2013 free New version 7.0.0 Jun 26, 2013 include Some fixes for high level pairing code Jul 5, 2016 lib Some fixes for high level pairing code Jul 5, 2016 source Fixed Spill/Restore bug in high level pairing code Jul 13, 2016 README.md Update README.md Aug 6, 2014 aesgcm.txt Initial commit Nov 6, 2012 amd64.txt Updated amd64.txt file Mar 20, 2014 arm.txt Initial commit Nov 6, 2012 blackfin.txt Initial commit Nov 6, 2012 borland.txt Initial commit Nov 6, 2012 config.c changed IOM to UK Aug 19, 2013 cpp.txt Initial commit Nov 6, 2012 cygwin.txt Initial commit Nov 6, 2012 devcpp.txt Initial commit Nov 6, 2012 doubig.txt Initial commit Nov 6, 2012 double.txt Initial commit Nov 6, 2012 edwards.txt Initial commit Nov 6, 2012 fastgf2m.txt Initial commit Nov 6, 2012 first.txt New version 7.0.0 Jun 26, 2013 float.txt Initial commit Nov 6, 2012 fpe.pdf New version 7.0.0 Jun 26, 2013 itanium.txt Initial commit Nov 6, 2012 kcmcomba.txt Initial commit Nov 6, 2012 linux.txt Initial commit Nov 6, 2012 mac.txt Initial commit Nov 6, 2012 makemcs.txt Initial commit Nov 6, 2012 managed.txt Initial commit Nov 6, 2012 manual.doc Update M.Scott 12th December Dec 12, 2012 mex.c changed IOM to UK Aug 19, 2013 msvisual.txt Initial commit Nov 6, 2012 pic32.txt Initial commit Nov 6, 2012 powerpc.txt Initial commit Nov 6, 2012 problems.txt New version 7.0.0 Jun 26, 2013 readme.txt Some fixes for high level pairing code Jul 5, 2016 smartmip.txt Initial commit Nov 6, 2012 sparc.txt Initial commit Nov 6, 2012 sse2.txt Initial commit Nov 6, 2012 st22.txt Initial commit Nov 6, 2012 texasdsp.txt New example program testecc.c Jul 4, 2013 update.txt New example program testecc.c Jul 4, 2013 vc2005.txt Initial commit Nov 6, 2012 win64.txt Initial commit Nov 6, 2012 README.md MIRACL What is MIRACL? Multiprecision Integer and Rational Arithmetic Cryptographic Library – the MIRACL Crypto SDK – is a C software library that is widely regarded by developers as the gold standard open source SDK for elliptic curve cryptography (ECC). Why is it different? While many other cryptographic SDKs are focused on PC use, MIRACL also enables developers to build security into highly constrained environments, including embedded, mobile apps and SCADA. MIRACL enables Reduced program code Greatly simplified program development Developer-designed APIs Rapid implementation, using inline code wrappers, example programs and other innovations These unique qualities are the reason MIRACL, and the solutions and services built using it, are in use in hundreds of organizations across the world, including BAE Systems, Hitachi, Intel, Panasonic, Toyota and many others. Features and Benefits: why MIRACL is the right choice MIRACL delivers a wide and unique range of benefits, enabling developers to secure even the most constrained environments quickly, easily and effectively. It features, amongst others: An inline C++ wrapper – greatly simplifying program development Over 25 example programs in C and C++, covering a wide range of applications, to give development a head start Optimization of both embedded processors and RAM, to help developers overcome device and memory constraints Compatibility with industry security technologies including AES encryption, RSA public key cryptography, Diffie-Hellman key exchange, DSA digital signature, and others A set of tools that enable any new number-theoretic technique to be implemented quickly The MIRACL library consists of well over 100 routines that cover all aspects of multi-precision arithmetic. Two new data-types are defined - big for large integers and flash (short for floating-slash) for large rational numbers. The large integer routines are based on Knuth’s algorithms, described in Chapter 4 of his classic work ‘The Art of Computer Programming’. Floating-slash arithmetic, which works with rounded fractions, was originally proposed by D. Matula and P. Kornerup. All routines have been thoroughly optimised for speed and efficiency, while at the same time remaining standard, portable C. However optional fast assembly language alternatives for certain time-critical routines are also included, particularly for the popular Intel 80x86 range of processors. A C++ interface is also provided. Full source code is included. Bug Tracker CertiVox uses JIRA for bug and feature tracking which is integrated with our development system.   If you find a bug, you should report bugs into the CertiVox bug tracker .  You can check that the bug hasn't already been reported by searching for it. If you find the bug already reported, you can add a comment of your own about it, or change its status to ""Confirmed"". If the bug hasn't been reported, you can file a new bug report. Community CertiVox is most of all a community of like-minded information security professionals who believe that cryptography is a necessary tool to advance individual freedom and safeguard privacy. CertiVox acts on that belief by providing tools that can be used to secure information, guard privacy and advance individual freedom. Anyone who uses CertiVox code or services is part of this global community, and we invite you to help shape CertiVox to better meet your needs. To make it yours! Keep track of development and community news. Find out more about our Developer Community here: http://certivox.org Follow @CertiVox on https://twitter.com/CertiVox Read and subscribe to Planet CertiVox   for the latest news first Have a question that's not a feature request or bug report? Ask on the mailing list. Contributing: CertiVox provides an Open Source suite of solutions for data security.  The CertiVox team firmly believes that our solutions and the organizations and users who benefit by them all derive value from active contributions from the community. You can contribute to help shape and improve our CertiVox products.  If you have ideas and suggestions on new features and improvements that you would like to see and help bring to CertiVox, please fork the public available code on GitHub, or find out more about contributing here. Authors: CertiVox http://www.certivox.com/ http://certivox.org https://github.com/CertiVox https://twitter.com/CertiVox https://www.facebook.com/CertiVox http://www.linkedin.com/company/certivox Copyright and License: © 2014 CertiVox UK Ltd., All Rights Reserved. MIRACL provides developers with an extensive and efficient set of cryptographic functions. For further information about its features and functionalities please refer to http://www.certivox.com. MIRACL is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. MIRACL is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You can be released from the requirements of the license by purchasing a commercial license. Buying such a license is mandatory as soon as you develop commercial activities involving MIRACL without disclosing the source code of your own applications, or shipping MIRACL with a closed source product. For full details regarding our CertiVox terms of service please refer to the following links: Our Terms and Conditions Our Security and Privacy Our Statement of Position and Our Promise on Software Patents Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CertiVox/MIRACL"	"A Multiprecision Integer and Rational Arithmetic Cryptographic Library. [AGPL]"	"true"
"Math"	"NT2"	"https://github.com/jfalcou/nt2"	"A SIMD-optimized numerical template library that provides an interface with MATLAB-like syntax. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"233"	"50"	"46"	"GitHub - jfalcou/nt2: The Numerical Template Toolbox - C++ Scientific Computing Made Easy Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 233 Fork 46 jfalcou/nt2 Code Issues 91 Pull requests 19 Wiki Pulse Graphs The Numerical Template Toolbox - C++ Scientific Computing Made Easy http://nt2.numscale.com/doc 14,603 commits 45 branches 4 releases Fetching contributors C++ 98.0% CMake 1.5% Shell 0.2% Python 0.1% C 0.1% CSS 0.1% C++ CMake Shell Python C CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 164-shape_in_generator arch_ext arm_time bench_max_cpu_freq bench_script_alternative biquad_filter bitwise_slide buffer_rework cost_models dasip_demo enforce_semantics fast_logs feature/fix_extent_computation fft filter fix_broadcast fusion_hierarchy fusion_logical interp_1D interp_2D issue_267 issue_291-sse1_support issue_342 issue_411 issue_574-dispatch_doc issue_953 lattice_boltzmann master new_ext_namespace opencl pack_as_child_ref release-3.0b1 release-3.0b2 release-3.0 release-3.1 release resize_rename scalar_noexpr settings_cleanup shuffle_test simd_algorithm submatrix_copy tbb_async_with_std_futures test_tile_with_plasma test_tile Nothing to show 3.1.0 3.0.0 3.0.0-beta.2 3.0.0-beta.1 Nothing to show New pull request Latest commit 9b3849f Jul 15, 2016 jfalcou committed on GitHub Update to README Permalink Failed to load latest commit information. cmake only try to install backends if it exists Apr 5, 2016 demo added cuda demo Dec 21, 2015 doc Add more doc on share and release Apr 29, 2016 modules Add missing <memory> for std::unitialized_copy (in dynarray) Feb 15, 2016 profile Added reference compile-time profile targets Dec 5, 2012 script replace 'unknown_<H>...' by just '...' without template variadics at … Nov 25, 2014 tools Adapts views for external kernel Apr 29, 2016 .gitignore add sublime project file with the correct settings for NT2 development Oct 29, 2012 CMakeLists.txt make program configuration for external projects Sep 7, 2015 CONTRIBUTING.md forgotten ::type in CONTRIBUTING Nov 14, 2012 CTestConfig.cmake add warning exception for large powerpc vectors Mar 6, 2014 LICENSE Added BOOST License text May 26, 2010 README.rst Update to README Jul 15, 2016 nt2.sublime-project add default line endings to sublime project Jun 13, 2014 valgrind.supp valgrind suppressions for openmp still reachable memory Nov 16, 2012 version.hpp.in Copyright change in version.hpp.in Feb 10, 2015 README.rst The Numerical Template Toolbox Index The Numerical Template Toolbox About NT2 So What is This About? About NT2 DISCLAIMER NT2 was a research project that spanned 10 years. It produced more than a dozen of research papers and sprout a lot of novel ideas based on the research work of Joel Falcou, Jean-Thierry Lapresté, Pierre Estérie, Antoine Tran Tan and Ian Masliah. It is however slowly shifted to new projects: If you use it for the old Boost.SIMD implementation which is soon to be deprecated, you may want to start migrating to the new version at https://github.com/NumScale/boost.simd If you use it for its actual Matlab like syntax, feel free to use it and report issues. The Numerical Template Toolbox (NT2) is an Open Source C++ library aimed at simplifying the development, debugging and optimization of high-performance computing applications by providing a Matlab like syntax that eases the transition between prototype and actual application. So What is This About? Did you ever want to use your multi-core machines to their fullest extent or to take advantage of your processor's SIMD extensions but never did because of the steep learning curve? By pushing the limits of the C++ language, NT2 uses template meta-programming to its fullest and automatizes these tasks. Reaping the reward of parallelism has never been so easy and straightforward. Performance of NT2 code is on the par with hand-written, optimized C code while keeping a high level of abstraction. Mailing List: nt2-dev IRC: #nt2 at irc.freenode.net Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jfalcou/nt2"	"A SIMD-optimized numerical template library that provides an interface with MATLAB-like syntax. [Boost]"	"true"
"Math"	"LibTomMath"	"https://github.com/libtom/libtommath"	"A free open source portable number theoretic multiple-precision integer library written entirely in C. [PublicDomain & WTFPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"144"	"31"	"57"	"GitHub - libtom/libtommath: LibTomMath is a free open source portable number theoretic multiple-precision integer library written entirely in C. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 144 Fork 57 libtom/libtommath Code Issues 11 Pull requests 10 Pulse Graphs LibTomMath is a free open source portable number theoretic multiple-precision integer library written entirely in C. http://www.libtom.net 249 commits 7 branches 48 releases Fetching contributors C 86.7% TeX 9.3% Perl 1.9% Makefile 1.2% Shell 0.7% Assembly 0.1% Other 0.1% C TeX Perl Makefile Shell Assembly Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop feature/doc feature/mp_sqrtmod_prime fix/balance_mul fix/mingw64 fix/56 master Nothing to show v1.0.0-rc0 v1.0 v1.0-rc2 v1.0-rc1 v0.43.0-rc0 v0.42.0 semver 0.41 0.40 0.39 0.38 0.37 0.36 0.35 0.34 0.33 0.32 0.31 0.30 0.29 0.28 0.27 0.26 0.25 0.24 0.23 0.22 0.21 0.20 0.19 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.10 0.09 0.08 0.07 0.06 0.05 0.04 0.03 0.02 0.01 Nothing to show New pull request Latest commit 2e1446f Jun 2, 2016 sjaeckel Add testcase for mp_add_d('0',...) … This closes #65 Permalink Failed to load latest commit information. demo Add testcase for mp_add_d('0',...) Jun 2, 2016 etc Remove all traces of ulong64 as per comment by Karel M Feb 3, 2016 logs added libtommath-0.36 Jul 15, 2010 mtest mtest vs. test: add possibility to exit testing Oct 18, 2014 pics added libtommath-0.30 Jul 15, 2010 pre_gen trim trailing spaces Oct 14, 2014 tombc added libtommath-0.35 Jul 15, 2010 .gitignore update gitignore Jan 9, 2016 .travis.yml mtest takes a while... don't let travis kill it Apr 24, 2016 LICENSE after multiple objections of libtom users [1], we decided to change l… Jan 19, 2011 README.md show master build state on main pagein readme Apr 24, 2016 bn.tex consistent version numbers Feb 3, 2016 bn_error.c provide tommath_private.h Nov 12, 2015 bn_fast_mp_invmod.c provide tommath_private.h Nov 12, 2015 bn_fast_mp_montgomery_reduce.c remove register Dec 2, 2015 bn_fast_s_mp_mul_digs.c remove register Dec 2, 2015 bn_fast_s_mp_mul_high_digs.c remove register Dec 2, 2015 bn_fast_s_mp_sqr.c add parentheses for explicit operator association Dec 2, 2015 bn_mp_2expt.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_abs.c provide tommath_private.h Nov 12, 2015 bn_mp_add.c provide tommath_private.h Nov 12, 2015 bn_mp_add_d.c Fix mp_add_d() Jun 2, 2016 bn_mp_addmod.c provide tommath_private.h Nov 12, 2015 bn_mp_and.c provide tommath_private.h Nov 12, 2015 bn_mp_clamp.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_clear.c provide tommath_private.h Nov 12, 2015 bn_mp_clear_multi.c provide tommath_private.h Nov 12, 2015 bn_mp_cmp.c provide tommath_private.h Nov 12, 2015 bn_mp_cmp_d.c provide tommath_private.h Nov 12, 2015 bn_mp_cmp_mag.c provide tommath_private.h Nov 12, 2015 bn_mp_cnt_lsb.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_copy.c remove register Dec 2, 2015 bn_mp_count_bits.c provide tommath_private.h Nov 12, 2015 bn_mp_div.c add parentheses for explicit operator association Dec 2, 2015 bn_mp_div_2.c remove register Dec 2, 2015 bn_mp_div_2d.c remove register Dec 2, 2015 bn_mp_div_3.c provide tommath_private.h Nov 12, 2015 bn_mp_div_d.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_dr_is_modulus.c provide tommath_private.h Nov 12, 2015 bn_mp_dr_reduce.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_dr_setup.c provide tommath_private.h Nov 12, 2015 bn_mp_exch.c provide tommath_private.h Nov 12, 2015 bn_mp_export.c add parentheses for explicit operator association Dec 2, 2015 bn_mp_expt_d.c provide tommath_private.h Nov 12, 2015 bn_mp_expt_d_ex.c provide tommath_private.h Nov 12, 2015 bn_mp_exptmod.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_exptmod_fast.c Improve readability of mp_exptmod_fast() May 16, 2016 bn_mp_exteuclid.c provide tommath_private.h Nov 12, 2015 bn_mp_fread.c provide tommath_private.h Nov 12, 2015 bn_mp_fwrite.c provide tommath_private.h Nov 12, 2015 bn_mp_gcd.c provide tommath_private.h Nov 12, 2015 bn_mp_get_int.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_get_long.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_get_long_long.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_grow.c provide tommath_private.h Nov 12, 2015 bn_mp_import.c add parentheses for explicit operator association Dec 2, 2015 bn_mp_init.c provide tommath_private.h Nov 12, 2015 bn_mp_init_copy.c fix memory leak in mp_init_copy() May 16, 2016 bn_mp_init_multi.c provide tommath_private.h Nov 12, 2015 bn_mp_init_set.c provide tommath_private.h Nov 12, 2015 bn_mp_init_set_int.c provide tommath_private.h Nov 12, 2015 bn_mp_init_size.c provide tommath_private.h Nov 12, 2015 bn_mp_invmod.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_invmod_slow.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_is_square.c provide tommath_private.h Nov 12, 2015 bn_mp_jacobi.c mp_jacobi: error-out until #44 is fixed Jan 12, 2016 bn_mp_karatsuba_mul.c remove register Dec 2, 2015 bn_mp_karatsuba_sqr.c remove register Dec 2, 2015 bn_mp_lcm.c provide tommath_private.h Nov 12, 2015 bn_mp_lshd.c remove register Dec 2, 2015 bn_mp_mod.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_mod_2d.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_mod_d.c provide tommath_private.h Nov 12, 2015 bn_mp_montgomery_calc_normalization.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_montgomery_reduce.c remove register Dec 2, 2015 bn_mp_montgomery_setup.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_mul.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_mul_2.c remove register Dec 2, 2015 bn_mp_mul_2d.c remove register Dec 2, 2015 bn_mp_mul_d.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_mulmod.c provide tommath_private.h Nov 12, 2015 bn_mp_n_root.c provide tommath_private.h Nov 12, 2015 bn_mp_n_root_ex.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_neg.c provide tommath_private.h Nov 12, 2015 bn_mp_or.c provide tommath_private.h Nov 12, 2015 bn_mp_prime_fermat.c provide tommath_private.h Nov 12, 2015 bn_mp_prime_is_divisible.c provide tommath_private.h Nov 12, 2015 bn_mp_prime_is_prime.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_prime_miller_rabin.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_prime_next_prime.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_prime_rabin_miller_trials.c provide tommath_private.h Nov 12, 2015 bn_mp_prime_random_ex.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_radix_size.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_radix_smap.c provide tommath_private.h Nov 12, 2015 bn_mp_rand.c provide tommath_private.h Nov 12, 2015 bn_mp_read_radix.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_read_signed_bin.c provide tommath_private.h Nov 12, 2015 bn_mp_read_unsigned_bin.c provide tommath_private.h Nov 12, 2015 bn_mp_reduce.c provide tommath_private.h Nov 12, 2015 bn_mp_reduce_2k.c provide tommath_private.h Nov 12, 2015 bn_mp_reduce_2k_l.c provide tommath_private.h Nov 12, 2015 bn_mp_reduce_2k_setup.c provide tommath_private.h Nov 12, 2015 bn_mp_reduce_2k_setup_l.c provide tommath_private.h Nov 12, 2015 bn_mp_reduce_is_2k.c provide tommath_private.h Nov 12, 2015 bn_mp_reduce_is_2k_l.c provide tommath_private.h Nov 12, 2015 bn_mp_reduce_setup.c provide tommath_private.h Nov 12, 2015 bn_mp_rshd.c remove register Dec 2, 2015 bn_mp_set.c provide tommath_private.h Nov 12, 2015 bn_mp_set_int.c provide tommath_private.h Nov 12, 2015 bn_mp_set_long.c provide tommath_private.h Nov 12, 2015 bn_mp_set_long_long.c provide tommath_private.h Nov 12, 2015 bn_mp_shrink.c provide tommath_private.h Nov 12, 2015 bn_mp_signed_bin_size.c provide tommath_private.h Nov 12, 2015 bn_mp_sqr.c add parentheses for explicit operator association Dec 2, 2015 bn_mp_sqrmod.c provide tommath_private.h Nov 12, 2015 bn_mp_sqrt.c provide tommath_private.h Nov 12, 2015 bn_mp_sqrtmod_prime.c handle the return value of function Dec 2, 2015 bn_mp_sub.c provide tommath_private.h Nov 12, 2015 bn_mp_sub_d.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_submod.c provide tommath_private.h Nov 12, 2015 bn_mp_to_signed_bin.c provide tommath_private.h Nov 12, 2015 bn_mp_to_signed_bin_n.c provide tommath_private.h Nov 12, 2015 bn_mp_to_unsigned_bin.c provide tommath_private.h Nov 12, 2015 bn_mp_to_unsigned_bin_n.c provide tommath_private.h Nov 12, 2015 bn_mp_toom_mul.c provide tommath_private.h Nov 12, 2015 bn_mp_toom_sqr.c provide tommath_private.h Nov 12, 2015 bn_mp_toradix.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_toradix_n.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_unsigned_bin_size.c add parentheses for explicit operator precedence Dec 2, 2015 bn_mp_xor.c provide tommath_private.h Nov 12, 2015 bn_mp_zero.c provide tommath_private.h Nov 12, 2015 bn_prime_tab.c provide tommath_private.h Nov 12, 2015 bn_reverse.c provide tommath_private.h Nov 12, 2015 bn_s_mp_add.c remove register Dec 2, 2015 bn_s_mp_exptmod.c add parentheses for explicit operator precedence Dec 2, 2015 bn_s_mp_mul_digs.c add parentheses for explicit operator precedence Dec 2, 2015 bn_s_mp_mul_high_digs.c add parentheses for explicit operator precedence Dec 2, 2015 bn_s_mp_sqr.c add parentheses for explicit operator precedence Dec 2, 2015 bn_s_mp_sub.c remove register Dec 2, 2015 bncore.c provide tommath_private.h Nov 12, 2015 booker.pl Small fixes Dec 12, 2015 callgraph.txt Merge branch 'feature/mp_sqrtmod_prime' into develop Oct 30, 2015 changes.txt consistent version numbers Feb 3, 2016 dep.pl dep.pl: add new type mp_min_u32 Sep 28, 2014 filter.pl add ""updatemakes"" from libtomcrypt Oct 13, 2014 gen.pl trim trailing spaces Oct 14, 2014 genlist.sh add ""updatemakes"" from libtomcrypt Oct 13, 2014 libtommath.dsp added libtommath-0.41 Jul 15, 2010 libtommath_VS2005.sln Added project and solution files for Visual Studio 2005 and Visual St… Jul 15, 2010 libtommath_VS2005.vcproj update makefiles Nov 24, 2013 libtommath_VS2008.sln Added project and solution files for Visual Studio 2005 and Visual St… Jul 15, 2010 libtommath_VS2008.vcproj update makefiles Nov 24, 2013 makefile mtest takes a while... don't let travis kill it Apr 24, 2016 makefile.bcc update makefiles etc. Oct 30, 2015 makefile.cygwin_dll update makefiles etc. Oct 30, 2015 makefile.icc update makefiles etc. Oct 30, 2015 makefile.include Simplify versioning to drop patch level Feb 2, 2016 makefile.msvc update makefiles etc. Oct 30, 2015 makefile.shared Simplify versioning to drop patch level Feb 2, 2016 mess.sh added libtommath-0.36 Jul 15, 2010 parsenames.pl add ""updatemakes"" from libtomcrypt Oct 13, 2014 poster.tex added libtommath-0.28 Jul 15, 2010 pretty.build added libtommath-0.31 Jul 15, 2010 testme.sh Small fixes Dec 12, 2015 tommath.h Remove all traces of ulong64 as per comment by Karel M Feb 3, 2016 tommath.src Fix some tommath.src errors Dec 25, 2015 tommath_class.h update makefiles etc. Oct 30, 2015 tommath_private.h use unsigned literal Dec 2, 2015 tommath_superclass.h added libtommath-0.36 Jul 15, 2010 updatemakes.sh add ""updatemakes"" from libtomcrypt Oct 13, 2014 README.md This is the git repository for LibTomMath, a free open source portable number theoretic multiple-precision integer (MPI) library written entirely in C. The develop branch contains the in-development version. Stable releases are tagged. Documentation is built from the LaTeX file bn.tex. There is also limited documentation in tommath.h. There is also a document, tommath.pdf, which describes the goals of the project and many of the algorithms used. The project can be build by using make. Along with the usual make, make clean and make install, there are several other build targets, see the makefile for details. There are also makefiles for certain specific platforms. Tests are located in demo/ and can be built in two flavors. make test creates a test binary that is intended to be run against mtest. mtest can be built with make mtest and test execution is done like ./mtest/mtest | ./test. mtest is creating test vectors using an alternative MPI library and test is consuming these vectors to verify correct behavior of ltm make test_standalone creates a stand-alone test binary that executes several test routines. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libtom/libtommath"	"A free open source portable number theoretic multiple-precision integer library written entirely in C. [PublicDomain & WTFPL]"	"true"
"Math"	"website"	"http://www.libtom.net/"	"A free open source portable number theoretic multiple-precision integer library written entirely in C. [PublicDomain & WTFPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"www.libtom.net <body BGCOLOR='#FFFFFF'> This page requires that your browser supports frames. <BR>You can access the page without frames with this <a href='http://libtom.github.io'>link</A>. </body>"	"null"	"null"	"A free open source portable number theoretic multiple-precision integer library written entirely in C. [PublicDomain & WTFPL]"	"true"
"Math"	"QuantLib"	"https://github.com/lballabio/quantlib"	"A free/open-source library for quantitative finance. [Modified BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"218"	"63"	"193"	"GitHub - lballabio/QuantLib: The QuantLib C++ library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 63 Star 218 Fork 193 lballabio/QuantLib Code Issues 12 Pull requests 28 Pulse Graphs The QuantLib C++ library 11,232 commits 13 branches 15 releases 35 contributors C++ 98.9% C 0.5% Makefile 0.5% M4 0.1% HTML 0.0% Shell 0.0% C++ C Makefile M4 HTML Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master old-pull-request-83 old-pull-request-95 old-pull-request-162 old-pull-request-201 old-pull-request-248 old-pull-request-280 old-pull-request-290 old-pull-request-303 old-pull-request-341 tenorbasis v1.7.x v1.8.x Nothing to show QuantLib-v1.8 QuantLib-v1.7.1 QuantLib-v1.7 QuantLib-v1.6.2 QuantLib-v1.6.1 QuantLib-v1.6 QuantLib-v1.5 QuantLib-v1.4.1 QuantLib-v1.4 QuantLib-v1.3 QuantLib-v1.2.1 QuantLib-v1.2 QuantLib-v1.1 QuantLib-v1.0.1 QuantLib-v1.0 Nothing to show New pull request Latest commit 8fdcda2 Jul 14, 2016 lballabio Merge fix from 1.8.x branch. Permalink Failed to load latest commit information. Docs Add a few more holidays for South Korea. Apr 29, 2016 Examples Add missing CMakeLists to distribution. Jul 14, 2016 config Removed obsolete .cvsignore files Mar 30, 2007 m4 Support for new libtool features Feb 11, 2009 man Add new files to distribution. Apr 27, 2016 ql Correctly report irregular last period in schedule. Jun 14, 2016 test-suite Correctly report irregular last period in schedule. Jun 14, 2016 tools Update list of copyright owners. Apr 11, 2016 .gitignore Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 Announce.txt Increase version number to 1.9. May 18, 2016 Authors.txt Update changes and contributors. Jun 4, 2015 Bugs.txt merged changeset up to Rev16952 from branches/R01000x-branch to trunk Dec 30, 2009 CMakeLists.txt Add Boost directory to CMake include path. Mar 16, 2016 ChangeLog.txt Update ChangeLog. Apr 29, 2016 Contributors.txt Update ChangeLog, news and contributor list. Apr 19, 2016 LICENSE.TXT Update list of copyright owners. Apr 11, 2016 Makefile.am Merge pull request #32. Feb 23, 2016 News.txt Add a few more holidays for South Korea. Apr 29, 2016 QuantLib.dev Merge latest changes from master. Mar 9, 2016 QuantLib.props Add support for VC++ 2015 (VC14). Jul 7, 2015 QuantLib.spec.in Require Boost 1.43 as minimum version. Apr 6, 2016 QuantLib.vcxproj Merge latest changes from master. Mar 9, 2016 QuantLib.vcxproj.filters Merge latest changes from master. Mar 9, 2016 QuantLib_vc10.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc11.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc12.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc14.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc8.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc8.vcproj Merge latest changes from master. Mar 9, 2016 QuantLib_vc9.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc9.vcproj Merge latest changes from master. Mar 9, 2016 README.md Revamp Readme. Jan 7, 2016 Readme.txt Revamp Readme. Jan 7, 2016 acinclude.m4 Require Boost 1.43 as minimum version. Apr 6, 2016 autogen.sh Merged 0.3.8 branch Dec 8, 2004 configure.ac Increase version number to 1.9. May 18, 2016 quantlib-config.in added a clean implementation of the thread-safe observer Oct 7, 2015 quantlib.el fix warning during build Aug 31, 2013 quantlib.m4 Fixed m4 macro for QuantLib detection. Apr 21, 2010 quantlib.pc.in Add missing compilation and linking flags. Feb 23, 2016 README.md QuantLib: the free/open-source library for quantitative finance The QuantLib project (http://quantlib.org) is aimed at providing a comprehensive software framework for quantitative finance. QuantLib is a free/open-source library for modeling, trading, and risk management in real-life. QuantLib is Non-Copylefted Free Software and OSI Certified Open Source Software. Download and usage QuantLib can be downloaded from http://quantlib.org/download.shtml; installation instructions are available at http://quantlib.org/install.shtml for most platforms. Documentation for the usage and the design of the QuantLib library is available from http://quantlib.org/docs.shtml. A list of changes for each past versions of the library can be browsed at http://quantlib.org/reference/history.html. Questions and feedback Bugs can be reported as a GitHub issue at https://github.com/lballabio/QuantLib/issues; if you have a patch available, you can open a pull request instead (see ""Contributing"" below). You can also use the quantlib-users and quantlib-dev mailing lists for feedback, questions, etc. More information and instructions for subscribing are at http://quantlib.org/mailinglists.shtml. Contributing The easiest way to contribute is through pull requests on GitHub. Get a GitHub account if you don't have it already and clone the repository at https://github.com/lballabio/QuantLib with the ""Fork"" button in the top right corner of the page. Check out your clone to your machine, code away, push your changes to your clone and submit a pull request; instructions are available at https://help.github.com/articles/fork-a-repo. (In case you need them, more detailed instructions for creating pull requests are at https://help.github.com/articles/using-pull-requests, and a basic guide to GitHub is at https://guides.github.com/activities/hello-world/. It's likely that we won't merge your code right away, and we'll ask for some changes instead. Don't be discouraged! That's normal; the library is complex, and thus it might take some time to become familiar with it and to use it in an idiomatic way. We're looking forward to your contributions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lballabio/quantlib"	"A free/open-source library for quantitative finance. [Modified BSD]"	"true"
"Math"	"website"	"http://quantlib.org/"	"A free/open-source library for quantitative finance. [Modified BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"218"	"63"	"193"	"GitHub - lballabio/QuantLib: The QuantLib C++ library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 63 Star 218 Fork 193 lballabio/QuantLib Code Issues 12 Pull requests 28 Pulse Graphs The QuantLib C++ library 11,232 commits 13 branches 15 releases 35 contributors C++ 98.9% C 0.5% Makefile 0.5% M4 0.1% HTML 0.0% Shell 0.0% C++ C Makefile M4 HTML Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master old-pull-request-83 old-pull-request-95 old-pull-request-162 old-pull-request-201 old-pull-request-248 old-pull-request-280 old-pull-request-290 old-pull-request-303 old-pull-request-341 tenorbasis v1.7.x v1.8.x Nothing to show QuantLib-v1.8 QuantLib-v1.7.1 QuantLib-v1.7 QuantLib-v1.6.2 QuantLib-v1.6.1 QuantLib-v1.6 QuantLib-v1.5 QuantLib-v1.4.1 QuantLib-v1.4 QuantLib-v1.3 QuantLib-v1.2.1 QuantLib-v1.2 QuantLib-v1.1 QuantLib-v1.0.1 QuantLib-v1.0 Nothing to show New pull request Latest commit 8fdcda2 Jul 14, 2016 lballabio Merge fix from 1.8.x branch. Permalink Failed to load latest commit information. Docs Add a few more holidays for South Korea. Apr 29, 2016 Examples Add missing CMakeLists to distribution. Jul 14, 2016 config Removed obsolete .cvsignore files Mar 30, 2007 m4 Support for new libtool features Feb 11, 2009 man Add new files to distribution. Apr 27, 2016 ql Correctly report irregular last period in schedule. Jun 14, 2016 test-suite Correctly report irregular last period in schedule. Jun 14, 2016 tools Update list of copyright owners. Apr 11, 2016 .gitignore Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 Announce.txt Increase version number to 1.9. May 18, 2016 Authors.txt Update changes and contributors. Jun 4, 2015 Bugs.txt merged changeset up to Rev16952 from branches/R01000x-branch to trunk Dec 30, 2009 CMakeLists.txt Add Boost directory to CMake include path. Mar 16, 2016 ChangeLog.txt Update ChangeLog. Apr 29, 2016 Contributors.txt Update ChangeLog, news and contributor list. Apr 19, 2016 LICENSE.TXT Update list of copyright owners. Apr 11, 2016 Makefile.am Merge pull request #32. Feb 23, 2016 News.txt Add a few more holidays for South Korea. Apr 29, 2016 QuantLib.dev Merge latest changes from master. Mar 9, 2016 QuantLib.props Add support for VC++ 2015 (VC14). Jul 7, 2015 QuantLib.spec.in Require Boost 1.43 as minimum version. Apr 6, 2016 QuantLib.vcxproj Merge latest changes from master. Mar 9, 2016 QuantLib.vcxproj.filters Merge latest changes from master. Mar 9, 2016 QuantLib_vc10.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc11.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc12.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc14.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc8.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc8.vcproj Merge latest changes from master. Mar 9, 2016 QuantLib_vc9.sln Add VC++ and Dev-C++ projects for new example. Mar 2, 2016 QuantLib_vc9.vcproj Merge latest changes from master. Mar 9, 2016 README.md Revamp Readme. Jan 7, 2016 Readme.txt Revamp Readme. Jan 7, 2016 acinclude.m4 Require Boost 1.43 as minimum version. Apr 6, 2016 autogen.sh Merged 0.3.8 branch Dec 8, 2004 configure.ac Increase version number to 1.9. May 18, 2016 quantlib-config.in added a clean implementation of the thread-safe observer Oct 7, 2015 quantlib.el fix warning during build Aug 31, 2013 quantlib.m4 Fixed m4 macro for QuantLib detection. Apr 21, 2010 quantlib.pc.in Add missing compilation and linking flags. Feb 23, 2016 README.md QuantLib: the free/open-source library for quantitative finance The QuantLib project (http://quantlib.org) is aimed at providing a comprehensive software framework for quantitative finance. QuantLib is a free/open-source library for modeling, trading, and risk management in real-life. QuantLib is Non-Copylefted Free Software and OSI Certified Open Source Software. Download and usage QuantLib can be downloaded from http://quantlib.org/download.shtml; installation instructions are available at http://quantlib.org/install.shtml for most platforms. Documentation for the usage and the design of the QuantLib library is available from http://quantlib.org/docs.shtml. A list of changes for each past versions of the library can be browsed at http://quantlib.org/reference/history.html. Questions and feedback Bugs can be reported as a GitHub issue at https://github.com/lballabio/QuantLib/issues; if you have a patch available, you can open a pull request instead (see ""Contributing"" below). You can also use the quantlib-users and quantlib-dev mailing lists for feedback, questions, etc. More information and instructions for subscribing are at http://quantlib.org/mailinglists.shtml. Contributing The easiest way to contribute is through pull requests on GitHub. Get a GitHub account if you don't have it already and clone the repository at https://github.com/lballabio/QuantLib with the ""Fork"" button in the top right corner of the page. Check out your clone to your machine, code away, push your changes to your clone and submit a pull request; instructions are available at https://help.github.com/articles/fork-a-repo. (In case you need them, more detailed instructions for creating pull requests are at https://help.github.com/articles/using-pull-requests, and a basic guide to GitHub is at https://guides.github.com/activities/hello-world/. It's likely that we won't merge your code right away, and we'll ask for some changes instead. Don't be discouraged! That's normal; the library is complex, and thus it might take some time to become familiar with it and to use it in an idiomatic way. We're looking forward to your contributions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lballabio/quantlib"	"A free/open-source library for quantitative finance. [Modified BSD]"	"true"
"Math"	"Versor"	"http://versor.mat.ucsb.edu/"	"A (fast) Generic C++ library for Geometric Algebras, including Euclidean, Projective, Conformal, Spacetime (etc)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Versor (libvsr) A (fast) Generic C++ library for Geometric Algebras, including Euclidean, Projective, Conformal, Spacetime (etc). Currently tested on Linux and Mac OS X Homepage (versor.mat.ucsb.edu) Documentation Combinatorics Cheat Sheet Bibtex (for referencing this work in your paper) Versor is a C++ Library for Geometric Algebra, sometimes called Clifford Algebra, a system for encoding geometric concepts numerically. The headers generate optimized code at compile-time through template metaprogramming. The core of the library is under 150kb, and supports arbitrary dimensions and metrics (limited by your compiler…). The library can be used as a math-only, or as an application with built-in graphics. Both OpenGL and OpeGLES draw routines are supported. Lead Developer: Pablo Colapinto gmail: wolftype CONTENTS: Recent Changes Compilation Introduction Generators What the Point is Basics Gui Operators Elements Recent Changes Some major revisions have been enacted that change the API. namespaces are used to distinguish between algebras: vsr::nga:: is the namespace for generic n-dimensional functions vsr::cga:: is the namespace for 3D Conformal Geometric Algebra For example vsr::nga::Round:: calls the generic implementation of n-D round elements whereas vsr::cga::Round:: calls the 3D CGA specification all static function structs (Round::, Flat::, Tangent::) are written in full (as opposed to Ro::, Fl:: and Ta::). We note these are Capitalized, since earlier versions of the devel branch used lowercase namespaces. Construct:: is now used to construct useful objects within a particular namespace example: Construct::point(0,1,0) constructs a point at coordinate (0,1,0) header folders /detail /space /form /draw and /util organize the various files LINKS: Mailing List | AlloSphere Research Group PUBS: See also my page at Academia.edu My disseration, Articulating Space, introduces geometric algebra and explores applications to parametric design. My Master’s Thesis before it, serves as an introduction as well. At C++ Now in Aspen I gave a Presentation on Metaprogramming Implementation Details As long as algebra and geometry have been separated, their progress have been slow and their uses limited; but when these two sciences have been united, they have lent each mutual forces, and have marched together towards perfection.   -Joseph Louis Lagrange  No attention should be paid to the fact that algebra and geometry are different in appearance. -Omar Khayyám  L’algèbre n’est qu’une géométrie écrite; la géométrie n’est qu’une algèbre figurée. -Sophie Germain  If you want to see, learn how to act -Heinz von Foerster   OTHER NICE SOFTWARE: Cinderella Standalone GA interface GAViewer Standalone GA interface Gaigen An Implementation Generator CluCalc/CluViz Standalone and Library Gaalop A precompiler to optimize CluScripts Gaalet An expression template library whose backend is somewhat similar to Versor’s versor.js A javascript port of this library COMPILATION For this version you need C++11 support (gcc 4.7 or higher or clang 3.2 or higher) and for graphics support you’ll want glew. See the Troubleshooting section below for instructions on installing glew. git clone git://github.com/wolftype/versor.git   You’ll need to initialize the submodules to build any graphics examples: cd versor git submodule init git submodule update  To build all examples ./buildAll.sh  To build library only ./build.sh  Use Cases 1. A math library: #include ""vsr.h""  using Vec = vsr::euclidean_vec<3,float>;        //<-- A 3 dimensional euclidean vector defined over floats using Biv = vsr::euclidean_bivector<3,float>;   //<-- A 3 dimensional bivector or ""directed area element""  int main(){      auto v = Vec(1,2,3);                    //<-- A 3D vector at coordinates 1,2,3;      v.rotate( Biv::xy * .25 ).print();      //<-- Rotate the vector in the xy plane and print result      return 0; };  2. A stand-alone application (with window and gui) While fully enabling arbitrary metric spaces, Versor has a lot of built-in functionality for specifically working with Conformal Geometric Algebra of 3D space, which is THE way to model all Euclidean transformations: Point p = Round::point(0,0,0);  auto tp = p.translate(x, y, z);  auto rp = p.rotate( Biv::xy * theta)  TROUBLESHOOTING — You may need to install Glew on newer macs. Best way to do this is with brew: brew install glew You’ll need C++11 support on your compiler (See makefile notes below). For C++11 you’ll want clang 3.2 (mac) or above or gcc 4.7 or above (linux). Alternatively an earlier version of Versor is available at github.com/wolftype/versor_1.0.git This older version runs just as fast, but is strictly 3D CGA (i.e. R4,1 metric) since I generated headers ahead of time. INTRODUCTION Versor provides operations and draw routines for Euclidean and Conformal Geometric Algebras, a relatively new spatial computing model used by physicists, engineers, and artists. Versor is designed to make graphical experimentation of geometric algebra within a C++ environment easier. You can use this library to draw geometrical things, explore spherical and hyperbolic spaces, transformations, design robots, etc. I am using it for my PhD on bio-inspired engineering. I first developed Versor while reading “Geometric Algebra for Computer Science” by Leo Dorst, Daniel Fontijne, and Stephen Mann. It’s a fantastic book and if you’re reading this you should also consider reading that. License Built to aid in my modelling of organic forms, the initial development was partially funded by the Olivia Long Converse Fellowship for Botanic research, courtesy of the Graduate Division at the University of California in Santa Barbara. Currently it is supported by the Robert W. Deutsch Foundation, and under a UC Regents General Public License. Feel free to use and distribute for noncommercial use as long as copyrights and credits are maintained. For commercial use, a licensing agreement may be necessary. One quick word: clifford algebras and the spatial relationships they embody can often feel abstract and daunting. But it’s a twisty, boosty ride, full of weird discoveries. You’re bound to make some, so have fun! BACKGROUND The homogenous 5D CGA model used here was initially proposed by David Hestenes, Hongbo Li, and Alan Rockwood in 2001, and given full form and weight through the excellent and careful work of Leo Dorst, Joan and Anthony Lasenby, and Eduardo Bayro-Corrochano, and others. These researchers’ writings have helped me quite a bit. CGA is particular breed of Clifford Algebras (also known as Geometric Algebras), which operate upon combinatoric hypercomplex vector spaces that emerged from William Clifford’s attempt to fuse Hamilton’s quaternions with Grassmans’ extension algebras. Thus transformations were married with a system of abstraction. For more information, take a look at the links to the sites at the bottom of this page. For instance, for practical applications in robotics and “Geometric Cybernetics”, see Eduardo Bayro-Corrochano’s work. For some very helpful algorithms in rigid body dynamics and gravitational physics see the variety of publications by Joan and Anthony Lasenby. To get at the beginning of it all, read David Hestenes’ New Foundations for Classical Mechanics. SPEED Typical matrix operation libraries have templated inlined functions for Vector and Matrix multiplication. Versor is similar, but on steroids, where vectors and sparse matrices of various sizes are all just called multivectors and represent geometric elements beyond just xyz directions and transformation matrices. Circles, lines, spheres, planes, points are all algebraic elements, as are operators that spin, twist, dilate, and bend those variables. Both these elements and operators are multivectors which multiply together in many many many different ways. What’s new? Versor compiles much faster than before, and without any silly predetermined list of allowable operations or types. Most notably, arbitrary metrics are now possible. For example, the xRoots.cpp example calculates all the Euclidean 4D reflections of a couple of point groups (F4 and D4, namely). So you can hypercube and polychoron away (8D cubes no problem!). Number of dimensions allowed are somewhat limited by your compiler infrastructure – let me know if you have a need that is not being met! As for CGA, all the Pnt, Vec, Dll notation remains as before, but i’ve started adding utility functions since it helps people out. auto pa = Round::point( 1,0,0 );  auto pb = Round::point( 0,1,0 );  auto pc = Round::point(-1,0,0 );  auto circle = pa ^ pb ^ pc;  Draw(c);   How does it work? If you like functional template metaprogramming, take a look at the code and please let me know what you think. If you don’t, then I wouldn’t … But if you have ideas or questions please do not hesitate to contact me. WHAT THE POINT IS GA combines many other maths (matrix, tensor, vector, and lie algebras). It is holistic. CGA uses a particular mapping (a conformal one) of 3D Euclidean space to a 4D sphere. Operations on that hypersphere are then projected back down to 3D. That how it works in a nutshell. A fuller treatment of this question (er, the question of why we do this) can be found in my Master’s thesis on the subject. But basically, Geometic Algebra offers a particular richness of spatial expression. Imagine needing glasses and not knowing you needed glasses. Then, when you do get glasses, the world changes unexpectedly. GA is like glasses for the inside of your brain. Conformal Geometric Algebra, especially the 5D variety enlisted here, are like x-ray glasses. One point of clarification that occurs are disambiguations of previously collapsed concepts. For instance, the main disambiguation, is that between a Point in space and a Vector in space. A Point has no magnitude, but a Vector does. A Point has no direction, but a Vector does. Points are null Vectors. We can make them by writing Vec( 1,0,0 ).null();  Points are null Vectors Points square to 0 The dot (inner) product of two Points returns their squared distance The wedge (outer) product of two Points returns a Point Pair More on that last point later … there are various binary operators defined (mainly three). We can introduce one right now, which is the dot or inner product. In mathematics, the inner product of two points pa and pb is written \(p_{a} \rfloor p_{b}\). In Versor we use the <= operator: Point pa = Vec(1,0,0).null(); Point pb = Vec(-1,0,0).null(); Scalar squaredDist = ( pa <= pb ) * -2;  which in this case would return a Scalar value of 4. The -2 is there since the inner product really returns half the negative squared distance. We can extract the Scalar into a c++ double like so: double squaredDist = ( pa <= pb )[0] * -2;  Points thought of as Spheres (really, Dual Spheres, more on Duality later): they are Spheres of zero radius. As such they are a type of Round element. We can also build points this way: Round::null( 1,0,0 );  or you can pass in another element Round::null( Vec(1,0,0) );  or use the built-in method Point pa = Vec(1,0,0).null();  Points can also be made with the macro PT Point pa = PT(1,0,0);  which is just “syntactic sugar” for Vec(1,0,0).null() Speaking of Spheres, we can also make spheres with a radius this way: DualSphere dls = Round::dls( Vec( 1,0,0 ).null(), 1 );  or DualSphere dls = Round::dls( Vec( 1,0,0 ), 1 );  or, specifying the radius first and then the coordinate: DualSphere dls = Round::dls( 1 /* <--radius */ , 1,0,0 )  all of which give a dual sphere of radius 1 at coordinate 1,0,0; BASICS Versor is named after the one of the basic category of elements of geometric algebra. A versor is a type of multivector which can be used to compose geometric transformations, namely reflections, translations, rotations, twists, dilations, and transversions (special conformal transformations). More on all of those transformations later. In Versor, a Vector (or Vec) is a typical Euclidean 3D element. It can be built in the normal way: Vec v(1,2,3);  Some built-in Vectors exist: Vec::x x; //<-- X Direction Unit Vector Vec(1,0,0) Vec::y y; //<-- Y Direction Unit Vector Vec(0,1,0) Vec::z z; //<-- Z Direction Unit Vector Vec(0,0,1)  A Vector can be spun around using a Rotor, which is exactly like a quaternion. However, whereas quaternions are often built by specifying an axis and an angle, rotors are built by specifying the plane of rotation. Eventually this will make much more sense to you: in general planes are what we will be using to transform things. For instance, a reflection is a reflection in a plane. As we will see, planes can become hyperplanes which will allow for more extraordinary transformations. The first completely new element to introduce is the Bivector, which is the plane we will use to generate our Rotor. Bivectors represent directed areas and are dual to the cross product: the cross product of two vectors in typical vector algebra returns a vector normal to the plane they define. So it is not completely new, but just sort of new. Bivectors are also just three elements long, and are built the same way Vectors are. Biv b(1,2,3);  Some built-in Bivectors exist: Biv::xy xy; //<-- XY Counterclockwise Unit Area Biv(1,0,0) Biv::xz xy; //<-- XZ Counterclockwise Unit Area Biv(0,1,0) Biv::yz xy; //<-- YZ Counterclockwise Unit Area Biv(0,0,1)  While it is perfectly valid to write Vector, Bivector and Rotor, you’ll notice I’ve truncated them to their three letter nicknames, Vec and Rot. That’s up to you: Both long-name and nick-name versions are valid in libvsr (they are typedef’ed to each other). Biv b = Biv::xy; double theta = PIOVERTWO; Vec v1 = Vec::x.rot( b * theta )  You can also generate rotors using Gen::rot( <some bivector> ) In fact, all transformations can be generated this way, and then later applied to arbitrary elements. For instance, Motors can be generated which translate and rotate an element at the same time. This is also called a twist. Motor m = Gen::mot(<some dual line>);   //<-- Makes A Twisting Motor around Some Dual Line Point p = Vec(0,0,0).null().sp(m);      //<-- Applies above motor to a Point  You’ll notice there are dual versions of elements: as in a DualLine (or Dll for short). That’s because in the real world of abstract geometry, there are usually two ways of defining an element. For instance, we can build a direct Line on the Y-axis by wedging two points together, along with infinity: Line lin = Vec(0,0,0).null() ^ Vec(0,1,0).null() ^ Inf(1);  Or we can define a line by the bivector plane that it is normal to, and a support vector that determines how far away the line is from the origin. To convert the above line into its dual representation, we just call the dual() method: Dll dll = lin.dual();  For those who are interested, this dual representation is isomorphic to the Plücker coordinates, which are used in screw theory to twist things around. Here, too, we can use dual lines to generate transformations which twist things around them. Gui The examples/*.cpp files include bindings to the GLV framework for windowing and user interface controls. This provides the minumum necessary glue to get started quickly building your own GA based graphics applications. The interface has a built in gui, mouse info, and keyboard info stored. //... a member of your App  Circle circle; //...in App::setup()  objectController.attach(&circle);  Putting the above code inside your application will enable you to click and modify geometric elements by hitting the “T”, “R” and “S” keys (for translate, rotate, and scale) Hit any other key to deselect all elements. [BUILT-IN INTERFACE] Key Response ~ Toggle full screen. SHIFT + Mouse or Arrow Keys Translate the camera in x and z directions. CTRL+ Mouse or Arrow Keys Rotate the camera ALT +Arrow Keys Rotate the model view around. T Translate an Element R Rotate an Element S Scale an Element Tab Switch from navigation mode (default) to object manipulation mode Any other key Release all Elements OPERATORS The elements of the algebra are geometric entities (circles, planes, spheres, etc) and operators (rotations, translations, twists, etc) which act on the elements of the algebra. All are known as multivectors since they are more than just your typical vectors. Multivector elements are most often combined using three overloaded binary operators: The Geometric Product of elements A and B: A * B  multiplies two multivector elements together. This is most useful when multiplying one by the inverse of another (see ! operator, below). The Outer Product of elements A and B: A ^ B  “wedges” two multivectors together. Its from Grassman’s algebra of extensions, and can be thought of as a way of creating higher dimensions from smaller ones. For instance, wedging two Vectors (directed magnitudes) together returns a Bivector (a directed Area). Wedging two Points together returns a PointPair. Wedging three Points together returns a Circle. The Inner Product of elements A and B: A<=B  There is also a Commutator product (differential) A%B  And a few overloaded operations, including, The Inverse: !A  returns \(A^{-1}\) The Reverse: ~A  returns \(\tilde{A}\) And finally, since I ran out of overloadable operators, some basic methods A.conj()   which returns \(\bar{A}\) A.inv()    which returns \(\hat{A}\) In summary: Versor Math Description A * B \(AB\) Multiplies two elements together (and, in the case of A * !B finds ratios between elements). A ^ B \(A \wedge B\) Wedges two elements together (builds up higher dimensional elements). A <= B \(A \rfloor B\) or \(\boldsymbol{a} \cdot B\) Contracts A out of B (returns the part of B “least like A”, sort of). A % B \(A \times B\) Commutator, equal to \(\frac{1}{2}(AB-BA)\) !A \(A^{-1}\) The Inverse of A. ~A \(\tilde{A}\) The Reverse of A. A.conj() \(\bar{A}\) Conjugation. A.inv() \(\hat{A}\) Involution. ELEMENTS To make the process of writing code faster, all elements of the algebra are represented by types 3 letters long. Alternatively, you can also use the long-form name. BASIC ELEMENTS Type Long Form Descrription Euclidean Sca Scalar A real number Vec Vector A Directed Magnitude, or 3D Vector, typical cartesian stuff Biv Bivector A Directed Area. Use them to make Rotors: Gen::Rot( Biv b ) Tri Trivector A Directed Volume Element Round Pnt Point A Null Vector: Pnt a = Vec(1,0,0).null() Par PointPair A 0-Sphere (Sphere on a Line): Par par = Pnt a ^ Pnt b Cir Circle A 1-Sphere: Cir cir = Pnt a ^ Pnt b ^ Pnt c Sph Sphere A 2-Sphere: Sph sph = Pnt a ^ Pnt b ^ Pnt c ^ Pnt d Dls DualSphere Typedef’ed as a point: typedef Pnt Dls Flat Lin Line A Direct Line: e.g. Lin lin = Par par ^ Inf(1) Dll DualLine A Dual Line: e.g. Dll dll = lin.dual() Pln Plane A Direct Plane: e.g. Pln pln = Cir cir ^ Inf(1) Dlp DualPlane A Dual Plane: e.g. Dlp dlp = Flp FlatPoint Versors Rot Rotor Spins an Element (as a Quaternion would) Trs Translator Translates an Element Dil Dilator Dilates an Element Mot Motor Twists an Element along an axis Trv Transversor Bends an Element about the Origin Bst Booster Bends an Element around an “Orbit” Abstract Mnk MinkowskiPlane Pss Pseudoscalar Inf Infinity There are others as well (for instance, affine planes, lines, and points) but the above are more than sufficient to start with. There are also built in macros, for instance EP | Sphere At the Origin. EM | Imaginary Sphere at the Origin. PT(x,y,z) | A null Point at x,y,z EP and EM can be invoked instead of Inf to work in non-Euclidean metrics ( Spherical and Hyperbolic, respectively) Many Euclidean elements can be drawn by invoking Draw::Render(). Some can’t (yet) either because it wasn’t obvious how to draw them (e.g the scalar) or because I just didn’t figure out how to do it or because I forgot or was lazy. If you want something to be drawable, let me know and I’ll add it in. Or try adding it in yourself and send a pull request via github. All elements can be dualized by invoking their dual() method All elements can be reflected over spinors with the sp(<spinor>) method All elements can be reflected over versors with the re(<versor>) method The versors are constructed by the geometric entities, typically by using the Gen:: routines. Operators can also be acted on by operators – you can rotate a translation, or twist a boost. COMMON CONFORMAL FUNCTIONS vsr_generic_op.h and vsr_cga3D_op.h contain the bulk of the functions for generating elements from other elements. Some guidelines: Gen:: methods generate or otherwise operate on versors roond:: methods create or otherwise operate on Round elements (Points, Point Pairs, Circles, Spheres) Flat:: methods create or otherwise operate on Flat elements (Lines, Dual Lines, Planes, Dual Planes, or Flat Points) Tangent:: methods create or otherwise operate on Tangent elements (Tangent Vectors, Tangent Bivectors, Tangent Trivectors) GENERATORS Returns Function Description Rot Gen::rot( const Biv& b ); //<– Generate a Rotor from a Bivector Trs Gen::trs( const Drv& v); //<– Generate a Translator from a Direction Vector Mot Gen::mot( const Dll& d); //<– Generate a Motor from a Dual Line Dil Gen::dil( const Pnt& p, double amt ); //<– Generate a Dilator from a Point and an amount Trv Gen::trv( cont Tnv& v); //<– Generate a Transveror from a Tangent Vector Bst Gen::bst( const Par& p); //<– Generate a Booster from a Point Pair REFLECTIONS In addition to the above “even” spinors, we can also reflect. Reflections (in a sphere, circle, or point pair, or over a line or plane ) can be calculated by writing Pnt p = PT(1,0,0); Pnt r = p.re( CXY(1) ); //Reflection of a point in a circle r = r / r[3];               //Renormalization of a point  The re() method calculates v.re(C) as C*v.inv()*~C where inv() is an involution. With a versor C and an element v you might also try C * v * !C. Inversion in a circle or a sphere may change the weight of the element (for a Point at x, it will change it by x^2) LINKS Some Video Demos of Versor The Good Book: Geometric Algebra for Computer Science GA Bookmarks on Delicious GA Google Group David Hestenes’ Geometric Calculus Page University of Amsterdam Intelligent Systems Lab Eduardo Bayro-Corrochano’s Robotics Lab Cambridge University Geometric Algebra Research Group Cognitive Systems at Christian-Albrechts-Universität zu Kiel PAPERS 2011 Versor: Spatial Computing With Conformal Geometric Algebra 2012 Boosted Surfaces: Synthesis of Meshes using Point Pair Generators in the Conformal Model"	"null"	"null"	"A (fast) Generic C++ library for Geometric Algebras, including Euclidean, Projective, Conformal, Spacetime (etc)."	"true"
"Multimedia"	"GStreamer"	"http://gstreamer.freedesktop.org/"	"A library for constructing graphs of media-handling components. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GStreamer: open source multimedia framework Home Features News Annual Conference Planet (Blogs) Download Applications Developers Documentation Mailing Lists File a Bug Bug Lists Artwork Follow @gstreamer on Twitter News - GStreamer Core, Plugins, RTSP Server, Editing Services, Python, Validate 1.9.1 unstable release (binaries) Pre-built binary images of the 1.9.1 unstable release of GStreamer are now available for Windows 32/64-bit, iOS and Mac OS X and Android. The builds are available for download from: Android, iOS, Mac OS X and Windows. 2016-07-12 7:00 Recent older news: GStreamer Core, Plugins, RTSP Server, Editing Services, Python, Validate, VAAPI, OMX 1.9.1 unstable release 2016-07-06 12:00 GStreamer Core, Plugins, RTSP Server, Editing Services, Validate 1.8.2 stable release (binaries) 2016-06-17 14:00 Click for even older news... News feeds: [RSS 1.0] Release feeds: [RSS 1.0][RSS 2.0][iCal] What is GStreamer? GStreamer is a library for constructing graphs of media-handling components. The applications it supports range from simple Ogg/Vorbis playback, audio/video streaming to complex audio (mixing) and video (non-linear editing) processing. Applications can take advantage of advances in codec and filter technology transparently. Developers can add new codecs and filters by writing a simple plugin with a clean, generic interface. Read more ... GStreamer is released under the LGPL. The 1.x series is API and ABI stable and supersedes the previous stable 0.10 series. Both can be installed in parallel. Report a problem on this page."	"null"	"null"	"A library for constructing graphs of media-handling components. [LGPL]"	"true"
"Multimedia"	"LIVE555 Streaming Media"	"http://www.live555.com/liveMedia/"	"Multimedia streaming library using open standard protocols (RTP/RTCP, RTSP, SIP). [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LIVE555 Streaming Media LIVE555 Streaming Media This code forms a set of C++ libraries for multimedia streaming, using open standard protocols (RTP/RTCP, RTSP, SIP). These libraries - which can be compiled for Unix (including Linux and Mac OS X), Windows, and QNX (and other POSIX-compliant systems) - can be used to build streaming applications. The libraries are already being used to implement applications such as the ""LIVE555 Media Server"" and ""LIVE555 Proxy Server"" (RTSP server applications), and ""vobStreamer"" (for streaming DVD content using RTP/RTCP/RTSP). The libraries can also be used to stream, receive, and process MPEG, H.265, H.264, H.263+, DV or JPEG video, and several audio codecs. They can easily be extended to support additional (audio and/or video) codecs, and can also be used to build basic RTSP or SIP clients and servers, and have been used to add streaming support to existing media player applications, such as ""VLC"" and ""MPlayer"". (For some specific examples of how these libraries can be used, see the test programs below.) Source code The project source code is available - as a "".tar.gz"" file - here. See below for instructions on how to build it. (Note: To use this software, you must be aware of how it is licensed, and your obligations under this license.) Mailing list There is a developers' mailing list: ""live-devel@lists.live555.com"". Users (or prospective users) of the libraries are encouraged to join this (low-volume) mailing list, and/or to review the mailing list's archives. (You can also search these archives using Google, by adding ""site:lists.live555.com"" to your search query.) Before posting to the mailing list for the first time, please read the FAQ, to check if your question has already been answered. Support The primary means of support for these libraries is the ""live-devel@lists.live555.com"" mailing list described above. (Note that you must first subscribe to the mailing list before you can post to it.) Are you planning to implement RTP (and/or RTSP)? Instead of writing your own implementation from scratch, consider using these libraries. They have already been used in many real-world RTP-based applications, and are well-suited for use within embedded systems. The code includes an implementation of RTCP, and can easily be extended (via subclassing) to support new RTP payload types. Help support improvements and extensions to the ""LIVE555 Streaming Media"" software: LIVE555 Funded Projects. Description (including test programs) How to configure and build the code on Unix (including Linux, Mac OS X, QNX, and other Posix-compliant systems) How to configure and build the code on Windows Frequently Asked Questions (FAQ). (Please read this before posting questions to the mailing list.) Source code license To do... Some third-party applications Description The code includes the following libraries, each with its own subdirectory: UsageEnvironment The ""UsageEnvironment"" and ""TaskScheduler"" classes are used for scheduling deferred events, for assigning handlers for asynchronous read events, and for outputting error/warning messages. Also, the ""HashTable"" class defines the interface to a generic hash table, used by the rest of the code. These are all abstract base classes; they must be subclassed for use in an implementation. These subclasses can exploit the particular properties of the environment in which the program will run - e.g., its GUI and/or scripting environment. groupsock The classes in this library encapsulate network interfaces and sockets. In particular, the ""Groupsock"" class encapsulates a socket for sending (and/or receiving) multicast datagrams. liveMedia This library defines a class hierarchy - rooted in the ""Medium"" class - for a variety of streaming media types and codecs. BasicUsageEnvironment This library defines one concrete implementation (i.e., subclasses) of the ""UsageEnvironment"" classes, for use in simple, console applications. Read events and delayed operations are handled using a select() loop. testProgs This directory implements some simple programs that use ""BasicUsageEnvironment"" to demonstrate how to develop applications using these libraries. RTSP client testRTSPClient is a command-line program that shows you how to open and receive media streams that are specified by a RTSP URL - i.e., an URL that begins with rtsp:// In this demonstration application, nothing is done with the received audio/video data. You could, however, use and adapt this code in your own application to (for example) decode and play the received data. openRTSP is similar to ""testRTSPClient"", but has many more features. It is a command-line program that - unlike ""testRTSPClient"" - is intended to be used as a complete, full-featured application (rather than having its code used within other applications). For more information about ""openRTSP"" - including its many command-line options - see the online documentation. RTSP server testOnDemandRTSPServer creates a RTSP server that can stream, via RTP unicast, from various types of media file, on demand. (Supported media types include: MPEG-1 or 2 audio or video (elementary stream), including MP3 audio; MPEG-4 video (elementary stream); H.264 video (elementary stream); H.265 video (elementary stream); MPEG Program or Transport streams, including VOB files; DV video; AMR audio; WAV (PCM) audio.) The server can also stream from a Matroska or WebM file (by demultiplexing and streaming the tracks within the file). MPEG Transport Streams can also be streamed over raw UDP, if requested - e.g., by a set-top box. This server application also demonstrates how to deliver - via RTSP - a MPEG Transport Stream that arrived at the server as a UDP (raw-UDP or RTP/UDP) multicast or unicast stream. In particular, it is set up, by default, to accept input from the ""testMPEG2TransportStreamer"" demo application. SIP client playSIP is a command-line program (similar to ""openRTSP"") that makes a call to a SIP session (using a sip: URL), and then (optionally) records the incoming media stream into a file. MP3 audio test programs testMP3Streamer repeatedly reads from a MP3 audio file (named ""test.mp3""), and streams it, using RTP, to the multicast group 239.255.42.42, port 6666 (with RTCP using port 6667). This program also has an (optional) built-in RTSP server. testMP3Receiver does the reverse: It reads a MP3/RTP stream (from the same multicast group/port), and outputs the reconstituted MP3 stream to ""stdout"". It also sends RTCP Reception Reports. Alternatively, the MP3/RTP stream could be played using one of these tools. MPEG video test programs testMPEG1or2VideoStreamer repeatedly reads from a MPEG-1 or 2 video file (named ""test.mpg""), and streams it, using RTP, to the multicast group 239.255.42.42, port 8888 (with RTCP using port 8889). This program also has an (optional) built-in RTSP server. By default, the input file is assumed to be a MPEG Video Elementary Stream. If, however, it is a MPEG Program Stream, then you can also insert a demultiplexing filter to extract the Video Elementary Stream. (See ""testMPEG1or2VideoStreamer.cpp"" for details.) Apple's ""QuickTime Player"" can be used to receive and view this streamed video (provided that it's MPEG-1, not MPEG-2). To use this, have QuickTime Player open the file ""testMPEG1or2Video.sdp"". (If ""testMPEG1or2VideoStreamer's"" RTSP server has been enabled, then QuickTime Player can also play the stream using a ""rtsp://"" URL.) The Open Source ""VLC"" and ""MPlayer"" media players can also be used. RealNetworks' ""RealPlayer"" can also be used to play the stream. (A recent version is recommended.) testMPEG1or2VideoReceiver does the reverse: It reads a MPEG Video/RTP stream (from the same multicast group/port), and outputs the reconstituted MPEG video (elementary) stream to ""stdout"". It also sends RTCP Reception Reports. testMPEG4VideoStreamer repeatedly reads from a MPEG-4 Elementary Stream video file (named ""test.m4e""), and streams it using RTP multicast. This program also has a built-in RTSP server. Apple's ""QuickTime Player"" can be used to receive and play this audio stream. To use this, have the player open the session's ""rtsp://"" URL (which the program prints out as it starts streaming). The Open Source ""VLC"" and ""MPlayer"" media players can also be used. testH264VideoStreamer repeatedly reads from a H.264 Elementary Stream video file (named ""test.264""), and streams it using RTP multicast. This program also has a built-in RTSP server. Apple's ""QuickTime Player"" can be used to receive and play this audio stream. To use this, have the player open the session's ""rtsp://"" URL (which the program prints out as it starts streaming). The Open Source ""VLC"" and ""MPlayer"" media players can also be used. testH265VideoStreamer repeatedly reads from a H.265 Elementary Stream video file (named ""test.265""), and streams it using RTP multicast. This program also has a built-in RTSP server. MPEG audio+video (Program Stream) test programs testMPEG1or2AudioVideoStreamer reads a MPEG-1 or 2 Program Stream file (named ""test.mpg""), extracts from this an audio and a video Elementary Stream, and streams these, using RTP, to the multicast group 239.255.42.42, port 6666/6667 (for the audio stream) and 8888/8889 (for the video stream). This program also has an (optional) built-in RTSP server. Apple's ""QuickTime Player"" can be used to receive and view this streamed video (provided that it's MPEG-1, not MPEG-2). To use this, have QuickTime Player open the file ""testMPEG1or2AudioVideo.sdp"". (If ""testMPEG1or2VideoStreamer's"" RTSP server has been enabled, then QuickTime Player can also play the stream using a ""rtsp://"" URL.) The Open Source ""VLC"" and ""MPlayer"" media players can also be used. testMPEG1or2Splitter reads a MPEG-1 or 2 Program Stream file (named ""in.mpg""), and extracts from this an audio and a video Elementary Stream. These two Elementary Streams are written into files named ""out_audio.mpg"" and ""out_video.mpg"" respectively. MPEG audio+video (Transport Stream) test programs testMPEG2TransportStreamer reads a MPEG Transport Stream file (named ""test.ts""), and streams it, using RTP, to the multicast group 239.255.42.42, port 1234 (with RTCP using port 1235). This program also has an (optional) built-in RTSP server. The Open Source ""VLC"" media player can be used to play this stream. testMPEG2TransportReceiver does the reverse: It reads a MPEG Transport/RTP stream (from the same multicast group/port), and outputs the reconstituted MPEG Transport Stream stream to ""stdout"". It also sends RTCP Reception Reports. testMPEG1or2ProgramToTransportStream reads a MPEG-1 or 2 Program Stream file (named ""in.mpg""), and converts it to an equivalent MPEG Transport Stream file, named ""out.ts"". testH264VideoToTransportStream reads a H.264 Video Elementary Stream file (named ""in.264""), and converts it to an equivalent MPEG Transport Stream file, named ""out.ts"". testH265VideoToTransportStream reads a H.265 Video Elementary Stream file (named ""in.265""), and converts it to an equivalent MPEG Transport Stream file, named ""out.ts"". PCM audio test program testWAVAudioStreamer reads from a WAV-format audio file (named ""test.wav""), and streams the enclosed PCM audio stream via IP multicast, using a built-in RTSP server. The program supports 8 or 16-bit PCM streams, mono or stereo, at any sampling frequency. Apple's ""QuickTime Player"" can be used to receive and play this audio stream. To use this, have the player open the session's ""rtsp://"" URL (which the program prints out as it starts streaming). Optionally, 16-bit PCM streams can be converted to 8-bit u-law format prior to streaming. (See ""testWAVAudioStreamer.cpp"" for instructions on how to do this.) The Open Source ""VLC"" and ""MPlayer"" media players can also be used. AMR audio test program testAMRAudioStreamer reads from a AMR-format audio file (named ""test.amr"") - as defined in RFC 3267, section 5 - and streams the enclosed audio stream via IP multicast, using a built-in RTSP server. Apple's ""QuickTime Player"" can be used to receive and play this audio stream. To use this, have the player open the session's ""rtsp://"" URL (which the program prints out as it starts streaming). DV video test program testDVVideoStreamer reads from a DV video file (named ""test.dv""), and streams it via IP multicast, using a built-in RTSP server. At present, we know of no widely-available media player client that can play this stream. Matroska (or 'Webm') streaming test program testMKVStreamer reads from a 'Matroska' (or 'Webm') file (named ""test.mkv""), and streams it via IP multicast, using a built-in RTSP server. VOB (DVD) streaming test program vobStreamer reads one or more "".vob"" files (e.g., from a DVD), extracts the audio and video streams, and transmits them using RTP multicast. Support for server 'trick play' operations on MPEG Transport Stream files The applications MPEG2TransportStreamIndexer and testMPEG2TransportStreamTrickPlay Miscellaneous test programs testRelay repeatedly reads from a UDP multicast socket, and retransmits ('relays') each packet's payload to a new (multicast or unicast) address and port. testReplicator is similar to testRelay, except that it replicates the input stream - using the ""FrameReplicator"" class - and retransmits one replica stream to another (multicast or unicast) address and port, while writing the other replica stream to a file. sapWatch reads and prints SDP/SAP announcements made on the default SDP/SAP directory (224.2.127.254/9875) registerRTSPStream sends a custom RTSP ""REGISTER"" command to a given RTSP client (or proxy server), asking it to stream from a given ""rtsp://"" URL. WindowsAudioInputDevice This is an implementation of the ""liveMedia"" library's ""AudioInputDevice"" abstract class. This can be used by a Windows application to read PCM audio samples from an input device. (This project builds two libraries: ""libWindowsAudioInputDevice_mixer.lib"", which uses Windows' built-in mixer, and ""libWindowsAudioInputDevice_noMixer.lib"", which doesn't.) How to configure and build the code on Unix (including Linux, Mac OS X, QNX, and other Posix-compliant systems) The source code package can be found (as a "".tar.gz"" file) here. Use ""tar -x"" and ""gunzip"" (or ""tar -xz"", if available) to extract the package; then cd to the ""live"" directory. Then run      ./genMakefiles <os-platform>  where <os-platform> is your target platform - e.g., ""linux"" or ""solaris"" - defined by a ""config.<os-platform>"" file. This will generate a Makefile in the ""live"" directory and each subdirectory. Then run ""make"". If the ""make"" fails, you may need to make small modifications to the appropriate ""config.<os-platform>"" file, and then re-run ""genMakefiles <os-platform>"". (E.g., you may need to add another ""-I<dir>"" flag to the COMPILE_OPTS definition.) Some people (in particular, FreeBSD users) have reported that the GNU version of ""make"" - often called ""gmake"" - works better than their default, pre-installed version of ""make"". (In particular, you should try using ""gmake"" if you encounter linking problems with the ""ar"" command.) If you're using ""gcc"" version 3.0 or greater: You may also wish to add the -Wno-deprecated flag to CPLUSPLUS_FLAGS. If no ""config.<os-platform>"" file exists for your target platform, then try using one of the existing files as a template. If you wish, you can also 'install' the headers, libraries, and applications by running ""make install"". How to configure and build the code on Windows Unpack and extract the '.tar.gz' file (using an application such as ""WinZip""). If the 'tools' directory on your Windows machine is something other than ""c:\Program Files\DevStudio\Vc"", change the ""TOOLS32 ="" line in the file ""win32config"". In a command shell, 'cd' to the ""live"" directory, and run      genWindowsMakefiles  This will generate - in each subdirectory - a ""*.mak"" makefile suitable for use by (e.g.) Microsoft Visual Studio. Alternatively, if you're starting from a Unix machine, you can generate the Windows Makefiles by running      ./genWindowsMakefiles  (after - if necessary - changing the ""TOOLS32 ="" line in the file ""win32config"", as noted above). Then, copy the ""live"" directories and its subdirectories (in ASCII mode) to a Windows machine. To use these Makefiles from within Visual Studio, use the ""Open Workspace"" menu command, then (in the file selection dialog) for ""Files of type"", choose ""Makefiles (.mak)"". Visual Studio should then prompt you, asking if you want to use this Makefile to set up a new project. Say ""OK"". Note that you will need to build each of the ""UsageEnvironment"", ""groupsock"", ""liveMedia"", and ""BasicUsageEnvironment"" projects first, before building ""testProgs"". If you wish, you can build the ""WindowsAudioInputDevice"" project also. Doug Kosovic notes: Visual C++ 2003 no longer comes with the old I/O Streams headers iostreams.h et al, or the corresponding library msvcirt.lib. So anybody trying to build the LIVE555 code with VC++ 2003 might find the following useful: A non-sourcecode modification workaround for VC++ 2003 is to copy the missing headers and msvcirt.lib from VC++ 2002. In file 'win32config' add an extra -I switch to COMPILE_OPTS to find the old headers and a -LIBPATH: switch to LINK_OPTS_0 to find msvcirt.lib. If you're using the Borland C++ compiler The instructions above assume that you use Microsoft Visual Studio (version 5 or greater) as your C++ development environment. If, however, you are using Borland's development tools, then the instructions above are amended as follows: Before running the ""genWindowsMakefiles.cmd"" script, edit it to replace each occurrence of ""win32config"" with ""win32config.Borland"". After running ""genWindowsMakefiles"", edit each of the new Makefiles by following these instructions. Frequently Asked Questions (FAQ) (Please read this before posting questions to the mailing list.) Source code license This code is ""open source"", and is released under the LGPL. This allows you to use these libraries (via linking) inside closed-source products. It also allows you to make closed-source binary extensions to these libraries - for instance, to support proprietary media codecs that subclass the existing ""liveMedia"" class hierarchy. Nonetheless, we hope that subclass extensions of these libraries will also be developed under the LGPL, and contributed for inclusion here. We encourage developers to contribute to the development and enhancement of these libraries. To do... Extend the ""liveMedia"" library to support even more media types and/or codecs. Supply additional ""UsageEnvironment"" subclassed implementations - e.g., for use with scripted environments, such as Tcl, Python, or Perl. Expand the RTCP implementation to support more SDES items (other than just CNAME), and to more completely handle incoming RTCP packets. In places the code uses data types such as ""unsigned"", where instead specific lengths (e.g., 32 bits) are required. The data types should be changed in each such case. Fix the ""groupsock"" implementation so that it could use IPv6 instead of IPv4. (At present, 4-byte addresses are hard-wired into the code in several places.) Switch to using ISO-conformant C++ headers (but in such a way that the code can remain portable across both Unix (using gcc) and Windows (using Visual C++)). Implement network sockets (""groupsock""s) as ""liveMedia"" 'sources'. This will make the code for RTP sources more consistent with the rest of the ""liveMedia"" library, allowing them to be ""FramedFilters"". (This will make it possible to use synthetic network sockets - e.g., for debugging or simulation.) Add support for SRTP ('secure' RTP), and perhaps also RTSP-over-TLS. Some third-party applications Several third-party devices and applications have made use of the LIVE555 Streaming Media Software. Here is a list of some of them: Hardware ""RaspberrIPCam"" - a full HD IP Camera based on Raspberry Pi Network-enabled, RTP-streaming Security Cameras, from RVision The ""LMLM4"" MPEG-4 audio/video hardware encoder PCI board, from Linux Media Labs. WIS Technologies media encoders. (The ""wis-streamer"" server application - for Linux - can be used to stream from many of these encoders.) Elphel Network Video Cameras (with optional JPEG streaming over RTP). The ""Cam.ly"" wireless security camera system uses ""openRTSP"" to archive recorded video. Software The ""VLC"" media player (uses the ""LIVE555 Streaming Media"" libraries for its RTSP client implementation). The ""MPlayer media player. Ralf Globisch's ""Video Processing Project"" - a RTSP client DirectShow Filter ""Morgan RTP DirectShowTM Filters"", from Morgan Multimedia ""Omnimeeting"" - a videoconferencing application ""Network-Integrated Multimedia Middleware (NMM)"", from Saarland University ""ivrworx"" - a SIP IVR application - uses ""LIVE555 Streaming Media"" code for RTP mixing ""LiveMediaStreamer"" - an open source multimedia framework If you would like your product (or project) added to this list, please send email to the developers' mailing list. Live Networks, Inc. (LIVE555.COM)"	"null"	"null"	"Multimedia streaming library using open standard protocols (RTP/RTCP, RTSP, SIP). [LGPL]"	"true"
"Multimedia"	"libVLC"	"https://wiki.videolan.org/LibVLC"	"libVLC (VLC SDK) media framework. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"libVLC - VideoLAN Wiki libVLC From VideoLAN Wiki Jump to: navigation, search The libVLC (VLC SDK) media framework can be embedded into an application to get multimedia capabilities. Since VLC is based on libVLC, one should be able to have the same features that VLC media player has. The libVLC media framework is already used by several applications; see who uses libVLC? Contents 1 Documentation 2 Compiling 3 Examples 3.1 Playback 3.2 Rendering and streaming 3.3 More complex examples 3.4 libVLC on Android 3.5 VLCKit for Cocoa (iOS/MacOS) 3.5.1 Mac OS X 3.5.2 iOS 3.6 Outdated samples 4 Language & platform bindings Documentation Please refer to the Doxygen documentation, which is the reference documentation. Make sure that the documentation matches the LibVLC version. (if not, you can build it from the source code) Some further topics are covered here: LibVLC Memory Management explained: covers the basics on the _new(), _retain(), _release(). LibVLC Media List Management explained: covers the basics on setting up a playlist. Generate a .lib for using libVLC on Windows (before libVLC 2.1.0) Compiling To build LibVLC you need VLC source code and follow VLC compilation instructions since LibVLC it is directly shipped in VLC source code. You will find headers in vlc-src/include/vlc and libvlc.so binaries in the hidden folder vlc-src/lib/.libs. When using your custom LibVLC build you will need to define the environment variable VLC_PLUGIN_PATH pointing to VLC modules located in vlc-src/modules. Examples Playback Current version (1.1.x and later) Gtk Player: doc/libvlc/gtk_player.c Qt Player: doc/libvlc/QtPlayer WxWidgets Player: doc/libvlc/wx_player.cpp Rendering and streaming Use LibVLC in an SDL application Stream into a memory zone Generate thumbnails using LibVLC: doc/libvlc/vlc-thumb.c Quick DVD ripper: doc/libvlc/libvlc_DVD_ripper.c More complex examples MediaInfo clone Webcam / Cheese clone libVLC on Android LibVLC on Android sample VLCKit for Cocoa (iOS/MacOS) You can find details on features and implementation on a designated page. Mac OS X Simple playlist player for Mac OS X. iPod Converter for Mac OS X. Flash Video Downloader for Mac OS X. iOS Simple player for iOS. Drop-in player for integration in iOS apps. Outdated samples Versions 0.9.x and 1.0.x Version 0.8.6 Visual C++ (uses ""old"" legacy API) VCL component for Delphi (out-of-date) Language & platform bindings LibVLC is a C library. It has bindings to the following languages and frameworks: C++, using the libVLCpp library The Web plugin for ActiveX (e.g. MSIE) and NPAPI (e.g. Firefox) WebChimera browser plugin with NW.js support WebChimera.js - another way to bind libvlc to node.js/io.js/NW.js/Electron Objective-C for iOS and Mac OS Python Phonon (Qt/KDE) in C++ Java bindings libVLC android Java GO QmlVlc - Qt 5 QML binding VLC-Qt - Qt bindings wxWidgets MediaCtrl backend also in C++ Using libvlc with Delphi Pascal/Delphi .Net / CIL ActiveX with the built-in VLC browser plugin for MSIE (obsolete) Retrieved from ""https://wiki.videolan.org/index.php?title=LibVLC&oldid=30124"" Category: LibVLC Personal tools Create account Log in Login with OpenID Namespaces Page Discussion Variants Views Read View source View history Actions Search Help / Documentation Documentation VLC Support Guide Forum Knowledge Base Development Developers Corner x264 development Join the project VideoLAN wiki Main Page About VideoLAN VLC media player Recent changes Rules Sandbox Toolbox What links here Related changes Special pages Permanent link This page was last modified on 30 June 2015, at 16:52. This page has been accessed 387,214 times. Privacy policy About VideoLAN Wiki Disclaimers"	"null"	"null"	"libVLC (VLC SDK) media framework. [GPL]"	"true"
"Multimedia"	"QtAv"	"https://github.com/wang-bin/QtAV"	"A multimedia playback framework based on Qt and FFmpeg to write a player easily. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"837"	"146"	"482"	"GitHub - wang-bin/QtAV: A cross-platform multimedia framework based on Qt and FFmpeg. High performance. User & developer friendly. Supports Android, iOS, Windows store and desktops. 基于Qt和FFmpeg的跨平台高性能音视频播放框架 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 146 Star 837 Fork 482 wang-bin/QtAV Code Issues 131 Pull requests 0 Wiki Pulse Graphs A cross-platform multimedia framework based on Qt and FFmpeg. High performance. User & developer friendly. Supports Android, iOS, Windows store and desktops. 基于Qt和FFmpeg的跨平台高性能音视频播放框架 http://qtav.org 3,228 commits 23 branches 41 releases 18 contributors C++ 79.1% C 16.3% QMake 2.6% QML 0.6% Shell 0.4% Objective-C 0.3% Other 0.7% C++ C QMake QML Shell Objective-C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.2 1.3 1.4 1.5 1.6 1.7 1.8 appveyor color cuda_d3d cuda custom_shader dev dll filter_thread gh-pages gl gpuframe master omx prelease ringbuf travis Nothing to show v1.11.0 v1.10.0 v1.9.0 v1.8.0 v1.7.0 v1.6.0 v1.5.0 v1.4.2 v1.4.1 v1.4.0 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.11 v1.1.10 v1.1.9 v1.1.8 v1.1.7 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.1 rm resizeok no-audio lgpl help dmovie-2.2 compiletest 1.2.4 Nothing to show New pull request Latest commit 3dbd444 Jul 15, 2016 wang-bin workaround for step backward does not work at some points Permalink Failed to load latest commit information. config.tests let mingw build d3d11 decoder Apr 10, 2016 contrib oal: fix crash if load failed Jun 11, 2016 debian version 1.11.0 Jun 20, 2016 doc version 1.11.0 Jun 20, 2016 examples fix playback restart after stop() in repeat mode #670 Jul 6, 2016 qml qml: always encode none local/qrc file #618 Jul 10, 2016 qtc_packaging version 1.11.0 Jun 20, 2016 src workaround for step backward does not work at some points Jul 15, 2016 tests copyright update Jun 19, 2016 tools add qtav app pro template Jul 3, 2016 widgets gl: fix devicePixelRatio in qt5.0 Jul 5, 2016 .gitignore deploy: set runtime environment in script Sep 10, 2014 .gitmodules use uchardet Nov 2, 2015 .qmake.conf version 1.11.0 Jun 20, 2016 .travis.yml ci: use trusty for travis. add gcc Dec 9, 2015 Changelog version 1.11.0 Jun 20, 2016 QtAV.pro let mingw build d3d11 decoder Apr 10, 2016 README.md unix line ending #573 Feb 9, 2016 appveyor.yml ci: use upgrade qt for appveyor Jun 29, 2016 common.pri qmake: fix osx strip path Jun 18, 2016 configure.pri qmake: detect multi-arch build, sse4_1, enable openal for ios Feb 28, 2016 deploy.pri deb: add players Sep 25, 2014 gpl-3.0.txt misc. copyright, format .etc Nov 1, 2012 lgpl-2.1.txt License change to LGPL v2.1 Feb 4, 2013 pack.pri fix make deb error. value in control can not have empty lines Mar 17, 2014 root.pri qmake: detect multi-arch build, sse4_1, enable openal for ios Feb 28, 2016 README.md QtAV QtAV is a multimedia playback library based on Qt and FFmpeg. It can help you to write a player with less effort than ever before. QtAV has been added to FFmpeg projects page http://ffmpeg.org/projects.html QtAV is free software licensed under the term of LGPL v2.1. The player example is licensed under GPL v3. If you use QtAV or its constituent libraries, you must adhere to the terms of the license in question. Home page Features QtAV can meet your most demands Hardware decoding suppprt: DXVA2, VAAPI, VDA/VideoToolbox, CedarX, CUDA(the 1st player support CUDA on linux?) OpenGL and ES2 support for almost all formats including Hi10P videos (The 1st player/library support 10bit in ES2? VLC, XBMC, mplayer does not support now) Real time preview Video capture in rgb and yuv format OSD and custom filters Filters in libavfilter, for example stero3d, blur Subtitle track select. Dynamic change FFmpeg and libass engine Play frame by frame Playback speed control Variant streams: locale file, http, rtsp etc. and your custom streams Audio channel, tracks and external audio tracks Dynamically change render engine when playing. Dynamically change video decoder Multiple video outputs for 1 player Video eq(software and OpenGL): brightness, contrast, saturation, hue QML support. Most playback APIs are compatible with QtMultimedia module Compatiblity: QtAV can be built with both Qt4 and Qt5, FFmpeg(>=1.0) and Libav (>=9.0). Latest FFmpeg release is recommended. Extensible Framework Some components in QtAV are designed to be extensible. For example, you can write your decoder, audio output for particular platform. Here is a very good example to add cedar hardware accelerated decoder for A13-OLinuXino For Developers Requirements The required development files to build QtAV can be found in sourceforge page: depends Build See the wiki Build QtAV and QtAV Build Configurations How To Write a Player Write a media player using QtAV is quite easy. GLWidgetRenderer2 renderer; renderer.show(); AVPlayer player; player.setRenderer(&renderer); player.play(""test.avi"");  For more detail to using QtAV, see the wiki Use QtAV In Your Project or examples. QtAV can also be used in Qml import QtQuick 2.0 import QtAV 1.6 Item {     Video {         id: video         source: ""test.mp4""     }     MouseArea {         anchors.fill: parent         onClicked: video.play()     } }  How To Contribute Fork QtAV project on github and make a branch. Commit in that branch, and push, then create a pull request to be reviewed and merged. Create an issue if you have any problem when using QtAV or you find a bug, etc. What you can do: translation, write document, wiki, find or fix bugs, give your idea for this project etc. Contributors Wang Bin(Lucas Wang): creator, maintainer Gianluigi Tiesi(sherpya): avdevice input support Stefan Ladage: QIODevice support. Wiki about build QtAV for iOS. Let OpenAL work on OSX and iOS Miroslav Bendik: Cedarv support. Better qmlvideofx appearance theoribeiro: initial QML support Vito Covito: interrupt callback Alexander, Marius Wachtler, Petar Koretić, Sandro Cavazzoni(skaman), Dimitri E. Prado, karlox ... For End Users Player Commandline Options Run player -h Default Shortcuts Double click: fullscreen switch Ctrl+O: open a file Space: pause/continue F: fullscreen on/off T: stays on top on/off N/B: show the next/previous frame. Continue the playing by pressing ""Space"" O: OSD P: replay Q/ESC: quit S: stop A: switch aspect ratio R: rotate 90 M: mute on/off Up / Down: volume + / - Ctrl+Up/Down: speed + / - -> / <-: seek forward / backward Crtl+Wheel: zoom in/out Drag and drop a media file to player Screenshots Use QtAV in QML with OpenGL shaders(example is from qtmultimedia. But qtmultimedia is replaced by QtAV) Donate 捐赠 Copyright © Wang Bin wbsecg1@gmail.com Shanghai University->S3 Graphics->Deepin, Shanghai, China 2013-01-21 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wang-bin/QtAV"	"A multimedia playback framework based on Qt and FFmpeg to write a player easily. [LGPL]"	"true"
"Multimedia"	"website"	"http://wang-bin.github.io/QtAV/"	"A multimedia playback framework based on Qt and FFmpeg to write a player easily. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"837"	"146"	"482"	"GitHub - wang-bin/QtAV: A cross-platform multimedia framework based on Qt and FFmpeg. High performance. User & developer friendly. Supports Android, iOS, Windows store and desktops. 基于Qt和FFmpeg的跨平台高性能音视频播放框架 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 146 Star 837 Fork 482 wang-bin/QtAV Code Issues 131 Pull requests 0 Wiki Pulse Graphs A cross-platform multimedia framework based on Qt and FFmpeg. High performance. User & developer friendly. Supports Android, iOS, Windows store and desktops. 基于Qt和FFmpeg的跨平台高性能音视频播放框架 http://qtav.org 3,228 commits 23 branches 41 releases 18 contributors C++ 79.1% C 16.3% QMake 2.6% QML 0.6% Shell 0.4% Objective-C 0.3% Other 0.7% C++ C QMake QML Shell Objective-C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.2 1.3 1.4 1.5 1.6 1.7 1.8 appveyor color cuda_d3d cuda custom_shader dev dll filter_thread gh-pages gl gpuframe master omx prelease ringbuf travis Nothing to show v1.11.0 v1.10.0 v1.9.0 v1.8.0 v1.7.0 v1.6.0 v1.5.0 v1.4.2 v1.4.1 v1.4.0 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.11 v1.1.10 v1.1.9 v1.1.8 v1.1.7 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.1 rm resizeok no-audio lgpl help dmovie-2.2 compiletest 1.2.4 Nothing to show New pull request Latest commit 3dbd444 Jul 15, 2016 wang-bin workaround for step backward does not work at some points Permalink Failed to load latest commit information. config.tests let mingw build d3d11 decoder Apr 10, 2016 contrib oal: fix crash if load failed Jun 11, 2016 debian version 1.11.0 Jun 20, 2016 doc version 1.11.0 Jun 20, 2016 examples fix playback restart after stop() in repeat mode #670 Jul 6, 2016 qml qml: always encode none local/qrc file #618 Jul 10, 2016 qtc_packaging version 1.11.0 Jun 20, 2016 src workaround for step backward does not work at some points Jul 15, 2016 tests copyright update Jun 19, 2016 tools add qtav app pro template Jul 3, 2016 widgets gl: fix devicePixelRatio in qt5.0 Jul 5, 2016 .gitignore deploy: set runtime environment in script Sep 10, 2014 .gitmodules use uchardet Nov 2, 2015 .qmake.conf version 1.11.0 Jun 20, 2016 .travis.yml ci: use trusty for travis. add gcc Dec 9, 2015 Changelog version 1.11.0 Jun 20, 2016 QtAV.pro let mingw build d3d11 decoder Apr 10, 2016 README.md unix line ending #573 Feb 9, 2016 appveyor.yml ci: use upgrade qt for appveyor Jun 29, 2016 common.pri qmake: fix osx strip path Jun 18, 2016 configure.pri qmake: detect multi-arch build, sse4_1, enable openal for ios Feb 28, 2016 deploy.pri deb: add players Sep 25, 2014 gpl-3.0.txt misc. copyright, format .etc Nov 1, 2012 lgpl-2.1.txt License change to LGPL v2.1 Feb 4, 2013 pack.pri fix make deb error. value in control can not have empty lines Mar 17, 2014 root.pri qmake: detect multi-arch build, sse4_1, enable openal for ios Feb 28, 2016 README.md QtAV QtAV is a multimedia playback library based on Qt and FFmpeg. It can help you to write a player with less effort than ever before. QtAV has been added to FFmpeg projects page http://ffmpeg.org/projects.html QtAV is free software licensed under the term of LGPL v2.1. The player example is licensed under GPL v3. If you use QtAV or its constituent libraries, you must adhere to the terms of the license in question. Home page Features QtAV can meet your most demands Hardware decoding suppprt: DXVA2, VAAPI, VDA/VideoToolbox, CedarX, CUDA(the 1st player support CUDA on linux?) OpenGL and ES2 support for almost all formats including Hi10P videos (The 1st player/library support 10bit in ES2? VLC, XBMC, mplayer does not support now) Real time preview Video capture in rgb and yuv format OSD and custom filters Filters in libavfilter, for example stero3d, blur Subtitle track select. Dynamic change FFmpeg and libass engine Play frame by frame Playback speed control Variant streams: locale file, http, rtsp etc. and your custom streams Audio channel, tracks and external audio tracks Dynamically change render engine when playing. Dynamically change video decoder Multiple video outputs for 1 player Video eq(software and OpenGL): brightness, contrast, saturation, hue QML support. Most playback APIs are compatible with QtMultimedia module Compatiblity: QtAV can be built with both Qt4 and Qt5, FFmpeg(>=1.0) and Libav (>=9.0). Latest FFmpeg release is recommended. Extensible Framework Some components in QtAV are designed to be extensible. For example, you can write your decoder, audio output for particular platform. Here is a very good example to add cedar hardware accelerated decoder for A13-OLinuXino For Developers Requirements The required development files to build QtAV can be found in sourceforge page: depends Build See the wiki Build QtAV and QtAV Build Configurations How To Write a Player Write a media player using QtAV is quite easy. GLWidgetRenderer2 renderer; renderer.show(); AVPlayer player; player.setRenderer(&renderer); player.play(""test.avi"");  For more detail to using QtAV, see the wiki Use QtAV In Your Project or examples. QtAV can also be used in Qml import QtQuick 2.0 import QtAV 1.6 Item {     Video {         id: video         source: ""test.mp4""     }     MouseArea {         anchors.fill: parent         onClicked: video.play()     } }  How To Contribute Fork QtAV project on github and make a branch. Commit in that branch, and push, then create a pull request to be reviewed and merged. Create an issue if you have any problem when using QtAV or you find a bug, etc. What you can do: translation, write document, wiki, find or fix bugs, give your idea for this project etc. Contributors Wang Bin(Lucas Wang): creator, maintainer Gianluigi Tiesi(sherpya): avdevice input support Stefan Ladage: QIODevice support. Wiki about build QtAV for iOS. Let OpenAL work on OSX and iOS Miroslav Bendik: Cedarv support. Better qmlvideofx appearance theoribeiro: initial QML support Vito Covito: interrupt callback Alexander, Marius Wachtler, Petar Koretić, Sandro Cavazzoni(skaman), Dimitri E. Prado, karlox ... For End Users Player Commandline Options Run player -h Default Shortcuts Double click: fullscreen switch Ctrl+O: open a file Space: pause/continue F: fullscreen on/off T: stays on top on/off N/B: show the next/previous frame. Continue the playing by pressing ""Space"" O: OSD P: replay Q/ESC: quit S: stop A: switch aspect ratio R: rotate 90 M: mute on/off Up / Down: volume + / - Ctrl+Up/Down: speed + / - -> / <-: seek forward / backward Crtl+Wheel: zoom in/out Drag and drop a media file to player Screenshots Use QtAV in QML with OpenGL shaders(example is from qtmultimedia. But qtmultimedia is replaced by QtAV) Donate 捐赠 Copyright © Wang Bin wbsecg1@gmail.com Shanghai University->S3 Graphics->Deepin, Shanghai, China 2013-01-21 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wang-bin/QtAV"	"A multimedia playback framework based on Qt and FFmpeg to write a player easily. [LGPL]"	"true"
"Multimedia"	"SDL"	"http://www.libsdl.org/"	"Simple DirectMedia Layer. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Simple DirectMedia Layer - Homepage Get the current stable SDL version 2.0.4 Main About Bugs   Licensing Credits Feedback Documentation Wiki   Forums   Mailing Lists Download SDL 2.0 SDL 1.2 SDL Mercurial Bindings About SDL Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D. It is used by video playback software, emulators, and popular games including Valve's award winning catalog and many Humble Bundle games. SDL officially supports Windows, Mac OS X, Linux, iOS, and Android. Support for other platforms may be found in the source code. SDL is written in C, works natively with C++, and there are bindings available for several other languages, including C# and Python. SDL 2.0 is distributed under the zlib license. This license allows you to use SDL freely in any software. Made with SDL: Awesomenauts Made with SDL: SolForge Light Theme Dark Theme"	"null"	"null"	"Simple DirectMedia Layer. [zlib]"	"true"
"Multimedia"	"SFML"	"http://www.sfml-dev.org/"	"Simple and Fast Multimedia Library. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SFML Learn Download Community Development Home Français Donate Flattr Simple and Fast Multimedia Library SFML is multi-media SFML provides a simple interface to the various components of your PC, to ease the development of games and multimedia applications. It is composed of five modules: system, window, graphics, audio and network. Discover their features more in detail in the tutorials and the API documentation. SFML is multi-platform With SFML, your application can compile and run out of the box on the most common operating systems: Windows, Linux, Mac OS X and soon Android & iOS. Pre-compiled SDKs for your favorite OS are available on the download page. SFML is multi-language SFML has official bindings for the C and .Net languages. And thanks to its active community, it is also available in many other languages such as Java, Ruby, Python, Go, and more. Learn more about them on the bindings page. SFML is licensed under the terms and conditions of the zlib/png license. Copyright © Laurent Gomila"	"null"	"null"	"Simple and Fast Multimedia Library. [zlib]"	"true"
"Networking"	"ACE"	"http://www.cs.wustl.edu/~schmidt/ACE.html"	"An OO Network Programming Toolkit in C++. [?MIT?]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The ADAPTIVE Communication Environment (ACE) The ADAPTIVE Communication Environment (ACE(TM)) ACE Site Map An OO Network Programming Toolkit in C++ I'm teaching a free online course on patterns and frameworks for concurrent and networked software for Coursera. Introductory video to my Coursera course on patterns and frameworks for concurrent and networked software ACE Overview Obtaining ACE Building ACE ACE Documents ACE Copyright TAO Overview ZEN Overview Java ACE Overview JAWS Overview ACE team members Who is Using ACE Commercial support ACE Developers Forums ACE Sponsors Back to Douglas C. Schmidt's home page. Last modified 13:34:07 CST 12 January 2013"	"null"	"null"	"An OO Network Programming Toolkit in C++. [?MIT?]"	"true"
"Networking"	"C++ REST SDK"	"https://github.com/Microsoft/cpprestsdk"	"C++ REST SDK (previously named Casablanca). [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"791"	"129"	"218"	"GitHub - Microsoft/cpprestsdk: The C++ REST SDK is a Microsoft project for cloud-based client-server communication in native code using a modern asynchronous C++ API design. This project aims to help C++ developers connect to and interact with services. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 129 Star 791 Fork 218 Microsoft/cpprestsdk Code Issues 78 Pull requests 8 Wiki Pulse Graphs The C++ REST SDK is a Microsoft project for cloud-based client-server communication in native code using a modern asynchronous C++ API design. This project aims to help C++ developers connect to and interact with services. 1,564 commits 11 branches 16 releases 37 contributors C++ 96.3% C 1.4% Python 0.8% CMake 0.8% HTML 0.2% Shell 0.2% Other 0.3% C++ C Python CMake HTML Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cmake-nuget dev/roschuma/host_based_connection_pool development feature-threadpool-configure gh-pages json-utf8-3.0 master prerelease-3.0.0 roschuma/oauth2-rewrite staging testing Nothing to show v2.8.0 v2.7.0 v2.6.0 v2.5.0 v2.4.0 v2.3.0 v2.2.0 v2.1.0 v2.0.1 v2.0.0 v1.4.0 v1.3.1 v1.3.0 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 3070ca2 Feb 25, 2016 ras0219-msft committed with Danimoth Adapt configure.sh to the new way that the OpenSSL-for-iPhone project… … … produces openssl binaries  Signed-off-by: Alexander Karatarakis <alkarata@microsoft.com> Permalink Failed to load latest commit information. Build Bump version number for 2.8 release Feb 22, 2016 Build_android Replace codeplex links with github links Nov 18, 2015 Build_iOS Adapt configure.sh to the new way that the OpenSSL-for-iPhone project… Feb 25, 2016 Release Bump version number for 2.8 release Feb 22, 2016 .gitignore Adding test runner for iOS simulator. Nov 18, 2014 CONTRIBUTORS.txt Merge branch 'deeringc-master' into development Jan 6, 2016 README.md Modify README.md for github (links, issues etc) Nov 5, 2015 ThirdPartyNotices.txt Updating 3rd party notices file to include Boost which was missing. Mar 9, 2015 build.root Initial checkin of Casablanca sources Feb 20, 2013 cpprestsdk120.sln Fixing incorrect Boost version NuGet package number, and removing unn… May 5, 2015 cpprestsdk140.sln merge with origin Nov 27, 2015 license.txt Sync to TFS for 2.0 Mar 18, 2014 setup_ps_env_VS2013.ps1 Updating powershell scripts for VS2015 RC. May 6, 2015 setup_ps_env_VS2015.ps1 Removing unnecessary code from 2015 powershell script. May 15, 2015 README.md Welcome! The C++ REST SDK is a Microsoft project for cloud-based client-server communication in native code using a modern asynchronous C++ API design. This project aims to help C++ developers connect to and interact with services. Getting Started Are you new to the C++ Rest SDK? To get going we recommend you start by taking a look at our tutorial to use the http_client. It walks through how to setup a project to use the C++ Rest SDK and make a basic Http request. Other important information, like how to build the C++ Rest SDK from source, can be located on the documentation page. What's in the SDK: Features - HTTP client/server, JSON, URI, asynchronous streams, WebSockets client, oAuth PPL Tasks - A powerful model for composing asynchronous operations based on C++ 11 features Platforms - Windows desktop, Windows Store, Windows Phone, Ubuntu, OS X, iOS, and Android Support for Visual Studio 2012, 2013, and 2015 with debugger visualizers NuGet package with binaries for Windows and Android platforms Contribute Back! Is there a feature missing that you'd like to see, or found a bug that you have a fix for? Or do you have an idea or just interest in helping out in building the library? Let us know and we'd love to work with you. For a good starting point on where we are headed and feature ideas, take a look at our requested features and bugs. Big or small we'd like to take your contributions back to help improve the C++ Rest SDK for everyone. If interested contact us askcasablanca at Microsoft dot com. Having Trouble? We'd love to get your review score, whether good or bad, but even more than that, we want to fix your problem. If you submit your issue as a Review, we won't be able to respond to your problem and ask any follow-up questions that may be necessary. The most efficient way to do that is to open a an issue in our issue tracker. Quick Links FAQ Documentation Issue Tracker Directly contact us: askcasablanca@microsoft.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/cpprestsdk"	"C++ REST SDK (previously named Casablanca). [Apache2]"	"true"
"Networking"	"Restbed"	"https://github.com/corvusoft/restbed"	"C++11 Asynchronous RESTful framework. [AGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"260"	"32"	"52"	"GitHub - Corvusoft/restbed: Corvusoft's Restbed framework brings asynchronous RESTful functionality to C++11 applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 260 Fork 52 Corvusoft/restbed Code Issues 22 Pull requests 1 Pulse Graphs Corvusoft's Restbed framework brings asynchronous RESTful functionality to C++11 applications. http://www.corvusoft.co.uk 981 commits 1 branch 6 releases 13 contributors C++ 68.8% C 25.5% CMake 5.5% Other 0.2% C++ C CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 4.0 3.5 3.0 2.5 2.0 1.0 Nothing to show New pull request Latest commit 6643e7f Jul 14, 2016 ben-crowhurst Updated CPL terms. Permalink Failed to load latest commit information. cmake Resolved install issue. Jul 13, 2016 dependency Revert ""Update to OpenSSL."" Mar 17, 2016 documentation Updated UML documentation. Jun 22, 2016 example Default session error handler. Jun 27, 2016 legal Updated CPL terms. Jul 14, 2016 source Service uptime status functionality. Jul 13, 2016 test Service uptime status functionality. Jul 13, 2016 tool altered astyle options Aug 21, 2015 .gitattributes HTTPS client with peer verification; resolved #41. Dec 31, 2015 .gitignore brought source inline with company standards. Jun 13, 2015 .gitmodules Revert ""Switched OpenSSL branch."" Mar 17, 2016 .travis.yml Continuous integration setup. Nov 23, 2015 CMakeLists.txt Minor improvements pre-release. Mar 4, 2016 LICENSE Simplified licensing model. Mar 10, 2016 README.md Updated roadmap and start WebSocket development. Jul 6, 2016 README.md Restbed Restbed is a comprehensive and consistent programming model for building applications that require seamless and secure communication over HTTP, with the ability to model a range of business processes, designed to target mobile, tablet, desktop and embedded production environments. It's akin to embedding NGINX into your companies own product line. -- Solutions Architect, Bellrock Technology Features Feature Description Comet Long polling model to allow long-held HTTP requests for pushing data from the server to client. SSL/TLS Secure over the wire communication allowing you to transmit private data online. Session Management Create custom HTTP session persistence and management logic. Path Parameters Annotate URIs with custom path parameters such as resource keys, revisions, etc... Query Parameters Automated query parameter parsing. Header Filters Filter incoming HTTP requests by headers. Logging Customise how and where log entries are created. Multi-Path Resources Give a resource multiple paths for improved readability. Customisable Methods Add your own custom HTTP methods. Compression Adaptability to address any form of compression GZip, Deflate, etc... Encoding Adaptability to address any form of encoding UTF-32, ASCII, etc... Rules Engine Reduce complexity by processing incoming requests with readable units of code. HTTP/HTTPS Built in client capabilities with optional SSL peer certificate verification. IPv4/IPv6 Internet Protocol Version 4/6 Network Support. Architecture Asynchronous single or multi-threaded architecture, capable of addressing the C10K problem. Converters Built-in Path, Query, and Header conversions for string, int, long, and float data types. Authentication Seperate Service and/or Resource level authentication. Error Handling Seperate Service and/or Resource level error handling. Address Binding Bind HTTP and/or HTTPS services to separate IP addresses. Signal Handling Capture OS generated process signals. Compliance Flexibility to address HTTP 1.0/1.1+ compliance. Mature Secure, Stable, and extensively tested since 2013. Community Active, vibrant and energetic open source community. Support Commercial support is available from Corvusoft. Example #include <memory> #include <cstdlib> #include <restbed>  using namespace std; using namespace restbed;  void post_method_handler( const shared_ptr< Session > session ) {     const auto request = session->get_request( );      int content_length = 0;     request->get_header( ""Content-Length"", content_length );      session->fetch( content_length, [ ]( const shared_ptr< Session > session, const Bytes & body )     {         fprintf( stdout, ""%.*s\n"", ( int ) body.size( ), body.data( ) );         session->close( OK, ""Hello, World!"", { { ""Content-Length"", ""13"" } } );     } ); }  int main( const int, const char** ) {     auto resource = make_shared< Resource >( );     resource->set_path( ""/resource"" );     resource->set_method_handler( ""POST"", post_method_handler );      auto settings = make_shared< Settings >( );     settings->set_port( 1984 );     settings->set_default_header( ""Connection"", ""close"" );      Service service;     service.publish( resource );     service.start( settings );      return EXIT_SUCCESS; } More in-depth examples can be found here. To see Restbed used in anger, please visit Corvusoft's RestQ project. License © 2013-2016 Corvusoft Limited, United Kingdom. All rights reserved. The Restbed framework is dual licensed; See LICENSE for full details. Support Please contact sales@corvusoft.co.uk, for support and licensing options including bespoke software development, testing, design consultation, training, mentoring and code review. Build git clone --recursive https://github.com/corvusoft/restbed.git mkdir restbed/build cd restbed/build cmake [-DBUILD_TESTS=YES] [-DBUILD_EXAMPLES=YES] [-DBUILD_SSL=NO] [-DBUILD_SHARED=YES] [-DCMAKE_INSTALL_PREFIX=/output-directory] .. make [-j CPU_CORES+1] install make test You will now find all required components installed in the distribution folder. Please submit all enhancements, proposals, and defects via the issue tracker; Alternatively ask a question on StackOverflow tagged #restbed. For Microsoft Visual Studio instructions please see feature #17. Documentation This codebase is intented to be as self documenting as possible. We have supplied many examples and test suites to help aid developers. We are currently working on textual API documentation here, however they are subject to eratice and frequent alteration; be warned. Minimum Requirements Resource Requirement Compiler C++11 compliant or above OS BSD, Linux, Mac OSX, Solaris, Windows, Raspbian Road Map Milestone Feature Status 0.0 Asynchrounous HTTP Service complete 1.0 HTTP 1.0 Compliance complete 2.0 HTTP 1.1 Compliance complete 2.5 Secure Socket Layer complete 2.5 Simultaneous Network Ports (HTTP/HTTPS) complete 3.0 Rules Engine complete 3.5 Schedule Tasks on Service run-loop complete 3.5 Multi-Threaded service capability complete 3.5 Bind Service to specific Address complete 3.5 Session Management complete 4.0 HTTP Client complete 4.0 Signal Handling complete 4.5 API Documentation development 4.5 Web Sockets development 4.5 Client-side SSL certificates pending 4.5 Resource Caching pending 4.5 Runtime Modifications pending 5.0 HTTP 2 compliance pending 5.0 Refactor, Reduce, Reuse pending Contact Method Description Twitter Tweet us your questions & feature requests. support@corvusoft.co.uk Support related queries. sales@corvusoft.co.uk Sale related queries. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/corvusoft/restbed"	"C++11 Asynchronous RESTful framework. [AGPL]"	"true"
"Networking"	"cpp-netlib"	"http://cpp-netlib.org/"	"A collection of open-source libraries for high level network programming. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1065"	"147"	"396"	"GitHub - cpp-netlib/cpp-netlib: The C++ Network Library Project -- cross-platform, standards compliant networking library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 147 Star 1,065 Fork 396 cpp-netlib/cpp-netlib forked from glynos/cpp-netlib Code Issues 87 Pull requests 2 Wiki Pulse Graphs The C++ Network Library Project -- cross-platform, standards compliant networking library. http://cpp-netlib.org/ 1,306 commits 16 branches 34 releases 64 contributors C++ 55.4% HTML 34.3% JavaScript 5.4% CSS 1.6% CMake 1.4% Python 1.3% Other 0.6% C++ HTML JavaScript CSS CMake Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.5-devel 0.6-devel 0.7.1-doc-fixes 0.8-devel 0.9-devel 0.10-devel 0.11-devel 0.11-test 0.12-devel 0.12-release 0.13-release 1.0-devel fork-integration master-deprecated master stable Nothing to show cpp-netlib-cf505122d72d7ca3376d2a2a160105cffbf64bcf cpp-netlib-0.12.0-rc2 cpp-netlib-0.12.0-rc1 cpp-netlib-0.12.0-rc0 cpp-netlib-0.12.0-final cpp-netlib-0.11.2-rc0 cpp-netlib-0.11.2-final cpp-netlib-0.11.1RC2 cpp-netlib-0.11.1RC1 cpp-netlib-0.11.1RC0 cpp-netlib-0.11.1-final cpp-netlib-0.11.0-rc4 cpp-netlib-0.11.0-rc3 cpp-netlib-0.11.0-rc2 cpp-netlib-0.11.0-rc1 cpp-netlib-0.11.0-rc0 cpp-netlib-0.11.0-final cpp-netlib-0.10.1 cpp-netlib-0.10.0 cpp-netlib-0.9.5-rc0 cpp-netlib-0.9.4 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.9-beta 0.8.1 0.8 0.8-beta 0.7 0.6.1 0.6 0.5 Nothing to show New pull request Pull request Compare This branch is 5 commits ahead of glynos:master. Latest commit 87c9042 Jul 15, 2016 deanberris committed on GitHub Merge pull request #671 from hlovdal/contrib_rpm_spec … Add RPM spec file in contrib directory. Permalink Failed to load latest commit information. boost Boost is back, baby! Jun 12, 2016 contrib Add RPM spec file in contrib directory. Jul 15, 2016 deps Added URI for MSVC after validating that it compiles and runs correct… May 18, 2016 libs Fixed bug in hello world async server example. Jun 12, 2016 .clang-format Always break template decls Sep 6, 2014 .gitignore Always ignore vim swap files Mar 30, 2016 .gitmodules Added cpp-netlib/uri as a submodule. May 16, 2016 .travis.yml Applied fixes to disable URI tests, examples, and docs on Travis. May 16, 2016 .ycm_extra_conf.py Support standalone asio Feb 8, 2016 CMakeLists.txt Boost is back, baby! Jun 12, 2016 Doxyfile Doxygen+Sphinx+Breathe = Inline Documentation Jan 10, 2016 LICENSE_1_0.txt Initial import. May 20, 2007 RATIONALE.txt Improvements as mentioned on the mailing list, cleanup Dec 22, 2009 README.rst Added image to the license in README.rst. Apr 4, 2016 build.sh Applied fixes to disable URI tests, examples, and docs on Travis. May 16, 2016 code_of_conduct.md Added e-mail addresses in Enforcement paragraph. Feb 25, 2016 cppnetlibConfig.cmake.in Removed trailing white spaces. Apr 4, 2015 cppnetlibConfigVersion.cmake.in add CMake package configuration file Sep 19, 2013 index.html Minor restructuring of docs; added html docs so that it can be viewed… Jan 20, 2010 install-boost.sh Revert ""Updated build scripts so that we don't build boost."" Feb 9, 2016 package.sh Use git-archive-all for packagine Mar 30, 2016 README.rst C++ Network Library Modern C++ network programming libraries. Join us on Slack: http://slack.cpp-netlib.org/ Subscribe to the mailing list: https://groups.google.com/forum/#!forum/cpp-netlib Downloading cpp-netlib You can find official release packages of the library at: http://github.com/cpp-netlib/cpp-netlib/downloads  If you want the latest code from the master branch of the project, you can follow these instructions for cloning the project repository: $ git clone https://github.com/cpp-netlib/cpp-netlib $ cd cpp-netlib $ git submodule init $ git submodule update  Introduction cpp-netlib is a collection of network related routines/implementations geared towards providing a robust cross-platform networking library. cpp-netlib offers the following implementations: Common Message Type -- A generic message type which can be used to encapsulate and store message related information, used by all network implementations as the primary means of data exchange. Network protocol message parsers -- A collection of parsers which generate message objects from strings. Adapters and Wrappers -- A collection of Adapters and wrappers aimed towards making the message type STL friendly. Network protocol client and server implementations -- A collection of network protocol implementations that include embeddable client and server types. This library is released under the Boost Software License (please see http://boost.org/LICENSE_1_0.txt or the accompanying LICENSE_1_0.txt file for the full text. Building and Installing To build the libraries you will need to have CMake version 2.8 or higher installed appropriately in your system. $ cmake --version cmake version 2.8.1  It is recommended that you build cpp-netlib outside of the source directory, to avoid having issues with CMake generated files polluting the source directory: $ mkdir ~/cpp-netlib-build $ cd ~/cpp-netlib-build $ cmake -DCMAKE_BUILD_TYPE=Debug     \ >       -DCMAKE_C_COMPILER=clang     \ >       -DCMAKE_CXX_COMPILER=clang++ \ >       $HOME/cpp-netlib    # we're assuming this is where cpp-netlib is.  Once CMake is done with generating the Makefiles and configuring the project, you can now build the tests and run them: $ cd ~/cpp-netlib-build $ make $ make test  If for some reason some of the tests fail, you can send the files in Testing/Temporary/ as attachments to the cpp-netlib developers mailing list. Running Tests If you want to run the tests that come with cpp-netlib, there are a few things you will need. These are: A compiler (GCC 4.x, Clang 3.6, MSVC 2008) A build tool (CMake is required) OpenSSL headers (optional) Note This assumes that you have cpp-netlib at the top-level of your home directory. Hacking on cpp-netlib cpp-netlib uses git for tracking work, and is hosted on GitHub. cpp-netlib is hosted on GitHub following the GitHub recommended practice of forking the repository and submitting pull requests to the source repository. You can read more about the forking process and submitting pull requests if you're not familiar with either process yet. cpp-netib follows the GitHub pull request model for accepting patches. You can read more about the process at http://cpp-netlib.org/process.html#pull-requests. Because cpp-netlib is released under the Boost Software License it is recommended that any file you make changes to bear your copyright notice alongside the original authors' copyright notices on the file. Typically the copyright notices are at the top of each file in the project. You can read about the cpp-netlib style guide at http://cpp-netlib.org/style-guide.html. The main ""upstream"" repository is at http://github.com/cpp-netlib/cpp-netlib. Contact and Support In case you have any questions or would like to make feature requests, you can contact the development team through the developers mailing list or by filing issues at http://github.com/cpp-netlib/cpp-netlib/issues. Join us on Slack: http://slack.cpp-netlib.org/ You can reach the maintainers of the project through: Dean Michael Berris (dberris@google.com)  Glyn Matthews (glyn.matthews@gmail.com)  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cpp-netlib/cpp-netlib"	"A collection of open-source libraries for high level network programming. [Boost]"	"true"
"Networking"	"cpr"	"https://github.com/whoshuu/cpr"	"A modern C++ HTTP requests library with a simple but powerful interface. Modeled after the Python Requests module. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"573"	"53"	"73"	"GitHub - whoshuu/cpr: C++ Requests: Curl for People, a spiritual port of Python Requests Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 53 Star 573 Fork 73 whoshuu/cpr Code Issues 24 Pull requests 6 Pulse Graphs C++ Requests: Curl for People, a spiritual port of Python Requests http://whoshuu.github.io/cpr/ 459 commits 5 branches 10 releases Fetching contributors C++ 95.5% CMake 4.1% Other 0.4% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/curl-7.47.0-upgrade feature/fix-llvm-3.8 feature/fix-server-lock gh-pages master Nothing to show 1.2.0 1.2.0-docs 1.1 1.1-docs 1.0 1.0b 1.0b-docs 1.0a 1.0a-docs 1.0-docs Nothing to show New pull request Latest commit 567c7ca Jun 1, 2016 whoshuu Merge pull request #92 from bobjansen/fix-91 … Set CUSTOMREQUEST to NULL for each GET  Fixes #91 Permalink Failed to load latest commit information. cpr Merge pull request #92 from bobjansen/fix-91 Jun 1, 2016 include/cpr Use downcast on response code Apr 27, 2016 opt Update curl fork to 7.47.0 Jan 27, 2016 test Merge pull request #92 from bobjansen/fix-91 Jun 1, 2016 .clang-format Remove unused clang-format style options Sep 25, 2015 .gitignore Add ignore entry for vim autocompleter Sep 25, 2015 .gitmodules Get rid of cmake-modules Apr 4, 2015 .travis.yml Try to fixup travis May 15, 2016 AUTHORS Add Guo Xiao to AUTHORS list May 26, 2016 CMakeLists.txt Add CMAKE_USE_OPENSSL as a cpr_option so it gets propagated correctly Jan 27, 2016 LICENSE Use MIT license to be consistent with the libcurl license Apr 22, 2015 README.md Fix typo in README.md Mar 3, 2016 VERSION Update VERSION file to 1.2 Mar 4, 2016 appveyor.yml Set CMAKE_USE_OPENSSL to OFF for appveyor build Jan 27, 2016 cpr-config.cmake First full implementation of cpr-config for upstream projects Aug 7, 2015 format-check.sh Add format-check script Sep 25, 2015 README.md C++ Requests: Curl for People C++ Requests is a simple wrapper around libcurl inspired by the excellent Python Requests project. Despite its name, libcurl's easy interface is anything but, and making mistakes misusing it is a common source of error and frustration. Using the more expressive language facilities of C++11, this library captures the essence of making network calls into a few concise idioms. Here's a quick GET request: #include <cpr/cpr.h>  int main(int argc, char** argv) {     auto r = cpr::Get(cpr::Url{""https://api.github.com/repos/whoshuu/cpr/contributors""},                       cpr::Authentication{""user"", ""pass""},                       cpr::Parameters{{""anon"", ""true""}, {""key"", ""value""}});     r.status_code;                  // 200     r.header[""content-type""];       // application/json; charset=utf-8     r.text;                         // JSON text string } And here's less functional, more complicated code, without cpr. Documentation You can find the latest documentation here. It's a work in progress, but it should give you a better idea of how to use the library than the tests currently do. Features C++ Requests currently supports: Custom headers Url encoded parameters Url encoded POST values Multipart form POST upload File POST upload Basic authentication Digest authentication Timeout specification Asynchronous requests 🍪 support! Proxy support Callback interface PUT methods DELETE methods HEAD methods OPTIONS methods PATCH methods Planned Support for the following will be forthcoming (in rough order of implementation priority): Streamed requests OpenSSL support and much more! Usage For just getting this library up and running, I highly recommend forking the example project. It's configured with the minimum CMake magic and boilerplate needed to start playing around with networked applications. If you already have a project you need to integrate C++ Requests with, the primary way is to use git submodules. Add this repository as a submodule of your root repository: git submodule add git@github.com:whoshuu/cpr.git git submodule update --init --recursive Next, add this subdirectory to your CMakeLists.txt before declaring any targets that might use it: add_subdirectory(cpr) This will produce two important CMake variables, CPR_INCLUDE_DIRS and CPR_LIBRARIES, which you'll use in the typical way: include_directories(${CPR_INCLUDE_DIRS}) target_link_libraries(your_target_name ${CPR_LIBRARIES}) and that should do it! Using the submodule method of integrating C++ Requests, there's no need to handle libcurl yourself, all of those dependencies are taken care of for you. Requirements The only explicit requirements are: a C++11 compatible compiler such as Clang or GCC. The minimum required version of GCC is unknown, so if anyone has trouble building this library with a specific version of GCC, do let me know curl and its development libraries Contributing Please fork this repository and contribute back using pull requests. Features can be requested using issues. All code, comments, and critiques are greatly appreciated. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/whoshuu/cpr"	"A modern C++ HTTP requests library with a simple but powerful interface. Modeled after the Python Requests module. [MIT]"	"true"
"Networking"	"website"	"https://whoshuu.github.io/cpr/"	"A modern C++ HTTP requests library with a simple but powerful interface. Modeled after the Python Requests module. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"cpr - C++ Requests cpr - C++ Requests cpr is a modern HTTP library for C++, built for people. User Guide Introduction Design GET Requests POST Requests Authentication Advanced Usage Response Objects Request Headers Session Objects Asynchronous Requests Asynchronous Callbacks Setting a Timeout Using Proxies Sending Cookies PUT and PATCH Requests Other Request Methods This project is maintained by whoshuu Curl for People C++ Requests is a simple wrapper around libcurl inspired by the excellent Python Requests project. Despite its name, libcurl's easy interface is anything but, and making mistakes misusing it is a common source of error and frustration. Using the more expressive language facilities of C++11, this library captures the essence of making network calls into a few concise idioms. Here's a quick GET request: #include <cpr/cpr.h>  int main(int argc, char** argv) {     auto r = cpr::Get(cpr::Url{""https://api.github.com/repos/whoshuu/cpr/contributors""},                       cpr::Authentication{""user"", ""pass""},                       cpr::Parameters{{""anon"", ""true""}, {""key"", ""value""}});     r.status_code;                  // 200     r.headers[""content-type""];      // application/json; charset=utf-8     r.text;                         // JSON text string }  And here's less functional, more complicated code, without cpr. Features C++ Requests currently supports: Custom headers Url encoded parameters Url encoded POST values Raw POST upload Multipart form POST upload File POST upload Basic authentication Digest authentication Timeout specification Asynchronous requests support! Proxy support Callback interface PUT methods DELETE methods HEAD methods OPTIONS methods PATCH methods Planned Support for the following will be forthcoming (in rough order of implementation priority): Streamed requests OpenSSL support and much more! Usage For just getting this library up and running, I highly recommend forking the example project. It's configured with the minimum CMake magic and boilerplate needed to start playing around with networked applications. If you already have a project you need to integrate C++ Requests with, the primary way is to use git submodules. Add this repository as a submodule of your root repository: git submodule add git@github.com:whoshuu/cpr.git git submodule update --init --recursive  Next, add this subdirectory to your CMakeLists.txt before declaring any targets that might use it: add_subdirectory(cpr)  This will produce two important CMake variables, CPR_INCLUDE_DIRS and CPR_LIBRARIES, which you'll use in the typical way: include_directories(${CPR_INCLUDE_DIRS}) target_link_libraries(your_target_name ${CPR_LIBRARIES})  and that should do it! Using the submodule method of integrating C++ Requests, there's no need to handle libcurl yourself, all of those dependencies are taken care of for you. Requirements The only explicit requirements are: a C++11 compatible compiler such as Clang or GCC. The minimum required version of GCC is unknown, so if anyone has trouble building this library with a specific version of GCC, do let me know curl and its development libraries Contributing Please fork this repository and contribute back using pull requests. Features can be requested using issues. All code, comments, and critiques are greatly appreciated."	"null"	"null"	"A modern C++ HTTP requests library with a simple but powerful interface. Modeled after the Python Requests module. [MIT]"	"true"
"Networking"	"Dyad.c"	"https://github.com/rxi/dyad"	"Asynchronous networking for C. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"784"	"45"	"76"	"GitHub - rxi/dyad: Asynchronous networking for C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 45 Star 784 Fork 76 rxi/dyad Code Issues 1 Pull requests 1 Pulse Graphs Asynchronous networking for C 64 commits 1 branch 0 releases 2 contributors C 96.3% Python 3.7% C Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 8c63322 Jun 11, 2016 rxi committed on GitHub Merge pull request #12 from dansgithubuser/warning-removal … warning removal Permalink Failed to load latest commit information. doc Updated docs for dyad_Socket changes Aug 9, 2015 example Comment typo in daytime.c example Aug 9, 2015 src warning removal Apr 11, 2016 LICENSE Initial commit Aug 2, 2014 README.md Changed server in README.md client example and daytime.c Aug 9, 2015 README.md Overview Dyad.c is an asynchronous networking library which aims to be lightweight, portable and easy to use. It can be used both to create small standalone servers and to provide network support to existing projects. Getting started The dyad.c and dyad.h files can be dropped into an existing project; if you're using Windows you will also have to link to ws2_32. An overview of the API can be found at doc/api.md. Usage examples can be found at example/. Server example A simple server which listens on port 8000 and echoes whatever is sent to it: #include <stdlib.h> #include ""dyad.h""  static void onData(dyad_Event *e) {   dyad_write(e->stream, e->data, e->size); }  static void onAccept(dyad_Event *e) {   dyad_addListener(e->remote, DYAD_EVENT_DATA, onData, NULL);   dyad_writef(e->remote, ""Echo server\r\n""); }  int main(void) {   dyad_init();    dyad_Stream *serv = dyad_newStream();   dyad_addListener(serv, DYAD_EVENT_ACCEPT, onAccept, NULL);   dyad_listen(serv, 8000);    while (dyad_getStreamCount() > 0) {     dyad_update();   }    dyad_shutdown();   return 0; } Client example A simple example program which connects to a daytime server and prints the response: #include <stdio.h> #include ""dyad.h""  static void onConnect(dyad_Event *e) {   printf(""connected: %s\n"", e->msg); }  static void onData(dyad_Event *e) {   printf(""%s"", e->data); }  int main(void) {   dyad_init();    dyad_Stream *s = dyad_newStream();   dyad_addListener(s, DYAD_EVENT_CONNECT, onConnect, NULL);   dyad_addListener(s, DYAD_EVENT_DATA,    onData,    NULL);   dyad_connect(s, ""time-nw.nist.gov"", 13);    while (dyad_getStreamCount() > 0) {     dyad_update();   }    dyad_shutdown();   return 0; } License This library is free software; you can redistribute it and/or modify it under the terms of the MIT license. See LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rxi/dyad"	"Asynchronous networking for C. [MIT]"	"true"
"Networking"	"libcurl"	"http://curl.haxx.se/libcurl/"	"Multiprotocol file transfer library. [MIT/X derivate license]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"libcurl - the multiprotocol file transfer library libcurl index ABI API Bindings Competitors Examples Features Mailing List Related Libs Using libcurl Tutorial Testimonials cURL / libcurl overview libcurl - the multiprotocol file transfer library libcurl is a free and easy-to-use client-side URL transfer library, supporting DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP. libcurl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, Kerberos), file transfer resume, http proxy tunneling and more! libcurl is highly portable, it builds and works identically on numerous platforms, including Solaris, NetBSD, FreeBSD, OpenBSD, Darwin, HPUX, IRIX, AIX, Tru64, Linux, UnixWare, HURD, Windows, Amiga, OS/2, BeOs, Mac OS X, Ultrix, QNX, OpenVMS, RISC OS, Novell NetWare, DOS and more... libcurl is free, thread-safe, IPv6 compatible, feature rich, well supported, fast, thoroughly documented and is already used by many known, big and successful companies and numerous applications. Download Go to the regular curl download page and get the latest curl package, or one of the specific libcurl packages listed. API You use libcurl with the provided C API or one of the over 40 available bindings. The cURL team works hard to keep the API and ABI stable. Howto Check out our using libcurl page for general hints and advice, the free HTTP client library comparison. or read the comparisons against libwww and WinInet. libcurl is most probably the most portable, most powerful and most often used C-based multi-platform file transfer library on this planet - be it open source or commercial."	"null"	"null"	"Multiprotocol file transfer library. [MIT/X derivate license]"	"true"
"Networking"	"libjingle"	"https://code.google.com/p/libjingle/"	"Google talk voice and P2P interoperability library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Issues -   webrtc -  Web-based real-time communication -   Monorail  Project: webrtc ▼ Issues People Development process History Sign in New issue Search Search within:  All issues  Open issues  New issues  Issues to verify ----  FixIt bugs for Advanced search Search tips ListGrid 1 - 100 of 958 Next › Columns: Loading...   ID ▼ Pri ▼ Mstone ▼ ReleaseBlock ▼ Component ▼ Status ▼ Owner ▼ Summary + Labels ▼ ...   161 3 ---- ---- SignalProcessing Assigned tina.legrand@webrtc.org Use ""vtable"" struct for platform specialization EngTriaged IceBox     163 2 ---- ---- Build, Internals Available ---- Should we enable Chrome clang plugins fixit     261 3 ---- ---- Build Available ---- We're Getting Warning 4373:s on Windows     296 3 ---- ---- PeerConnection Assigned pthatcher@webrtc.org device name and id EngTriaged IceBox     323 2 ---- ---- Render Assigned xians@webrtc.org audio_device.h InitPlayout() and InitRecording() not working on Mac. Mic EngTriaged IceBox     363 2 ---- ---- SignalProcessing Assigned henrik.lundin@webrtc.org Extend audioproc automated fileset to include real calls EngTriaged IceBox     415 2 ---- ---- SignalProcessing Started henrik.lundin@webrtc.org Audio packet loss rate with VAD/DTX EngTriaged IceBox     494 2 ---- ---- ---- Assigned sjlee@webrtc.org High CPU usage with ALSA Mic     497 3 ---- ---- Audio Assigned minyue@webrtc.org Remove unneeded callbacks (and classes) from AudioConferenceMixer EngTriaged IceBox     501 2 ---- ---- Audio ---- ---- GetDelayEstimate reports over 100ms audio delay in loopback call Performance EngTriaged IceBox     524 2 ---- ---- Webcam Assigned mflodman@webrtc.org vie_auto_test ViEStandardIntegrationTest.RunsFileTestWithoutErrors fails on Mac Pro EngTriaged     569 ---- ---- ---- PeerConnection Available ---- Allow remote render size to be communicated to sender EngTriaged IceBox     603 3 ---- ---- Internals Assigned hta@webrtc.org Sleep() should be an abstracted function instead of being #ifdef'ed at each point of use.     661 2 ---- ---- SignalProcessing Assigned tina.legrand@webrtc.org Add iSAC-fixed point to common tests EngTriaged IceBox     722 2 ---- ---- GetUserMedia Assigned tommi@webrtc.org audio_device should advertise the maximum sample rate it can provide EngTriaged     753 3 ---- ---- SignalProcessing Assigned minyue@webrtc.org There is noise when L16+FEC is applied. EngTriaged IceBox     773 3 ---- ---- SignalProcessing Assigned henrik.lundin@webrtc.org Re-enable support for clock drift compensation on Windows EngTriaged IceBox     834 2 ---- ---- PeerConnection Available ---- Consider to change SessionDescriptionInterface to be ref counted EngTriaged IceBox     868 2 ---- ---- Render Available ---- Chrome- Make sure creating multiple audio tracks with getUserMedia behaves sensible. Mic     898 2 ---- ---- ---- Available ---- ProcessRecordedData passes uninitialized data to Media Process Mic     951 2 ---- ---- Network Started danilchap@webrtc.org confused arguments to TMMBRReceived() EngTriaged IceBox     1019 2 ---- ---- Audio Assigned henrik.lundin@webrtc.org Control the ALSA volume control even when using PulseAudio EngTriaged IceBox     1027 3 ---- ---- Internals Available ---- Fix webrtc copyright boilerplate     1028 2 ---- ---- Network Available ---- UdpTransport::IsIpAddressValid() issues EngTriaged IceBox     1056 2 ---- ---- ---- Assigned xians@webrtc.org audio_device_test_api fails Asan on Mac Mic     1111 2 ---- ---- SignalProcessing Assigned tina.legrand@webrtc.org Functions in signal processing library need saturation control EngTriaged IceBox     1117 2 ---- ---- ---- Unconfirmed xians@webrtc.org Can only capture from a single microphone at a time Mic     1118 2 ---- ---- GetUserMedia Unconfirmed xians@webrtc.org Using indexes to identify RecordingDevices/etc is error-prone     1175 3 ---- ---- SampleApps Unconfirmed juberti@webrtc.org ""Stop call"" takes ~3 seconds on Android     1181 ---- ---- ---- Audio, SignalProcessing Started henrik.lundin@webrtc.org Use internal PLC in Opus EngTriaged IceBox     1225 1 50 ---- PeerConnection Assigned pthatcher@webrtc.org Thread->Clear() will crash when there is a pending Send call on this thread. EngTriaged     1246 2 ---- ---- Video Available stefan@webrtc.org RPSI/SLI mechanism breaks     1251 2 ---- ---- Webcam Unconfirmed mflodman@webrtc.org split video with Logitech QuickCam Pro 9000     1288 2 ---- ---- Video Unconfirmed sprang@webrtc.org Client needs to throttle Key Frame requests.     1348 2 ---- ---- Build Available ---- Fix size_t to int truncations     1361 3 ---- ---- Audio Available henrik.lundin@webrtc.org Remove constraints due to legacy bit-exactness EngTriaged neteq IceBox     1404 2 ---- ---- PeerConnection Available pthatcher@webrtc.org ICE candidates on re-negotiation are not reflected in SDP Answer for the new stream EngTriaged     1437 2 ---- ---- Desktop Assigned hclam@chromium.org Disable typing detection in screen sharing mode TabCapture     1503 2 ---- ---- SignalProcessing Unconfirmed p...@webrtc.org Data Race on access to cftmdl_wk1r EngTriaged IceBox     1504 2 ---- ---- SignalProcessing Unconfirmed p...@webrtc.org Data Race on access to cft1st_128 EngTriaged     1545 3 ---- ---- SignalProcessing Assigned henrik.lundin@webrtc.org Verify correct DTMF operation in NetEq4 EngTriaged IceBox     1547 2 ---- ---- Build Assigned hta@webrtc.org tools/valgrind-webrtc/webrtc_tests.sh not working as expected.     1572 3 ---- ---- Internals Assigned niklas.enbom@webrtc.org Windows bug in webrtc/system_wrappers/interface/tick_util.h     1651 2 ---- ---- Desktop Assigned hclam@chromium.org Screencast capturer should disable frame dropper TabCapture     1656 2 ---- ---- Internals Unconfirmed mflodman@webrtc.org EventPosix::Wait() susceptible to spurious wakeups     1661 2 ---- ---- Render, Video Available sprang@webrtc.org NTP based render timestamps at the receiver EngTriaged     1683 2 ---- ---- GetUserMedia Assigned magjed@webrtc.org Make sure MediaStreamTrack::readyState is set to ended when a USB camera is unplugged on Windows EngTriaged     1684 2 ---- ---- GetUserMedia Assigned magjed@webrtc.org Make sure MediaStreamTrack::readyState is set to ended when a USB camera is unplugged on Mac EngTriaged     1685 2 ---- ---- GetUserMedia Assigned hbos@webrtc.org Make sure MediaStreamTrack::readyState is set to ended when a USB headset is unplugged EngTriaged     1692 2 ---- ---- PeerConnection Assigned pthatcher@webrtc.org If media profile is not SAVPF on the offer, Chrome does not start ICE EngTriaged     1702 2 ---- ---- Render Assigned hclam@chromium.org Need a trace counter to measure time drift TabCapture     1753 2 ---- ---- Internals Assigned mflodman@webrtc.org Clock drift between Chrome and WebRTC's clock implementation on Windows Timestamps     1757 2 ---- ---- GetUserMedia Assigned juberti@webrtc.org Enable screen capture support in getUserMedia by default. EngTriaged     1772 2 ---- ---- PeerConnection Available hta@webrtc.org Support for un-announced SSRCs EngTriaged     1815 2 ---- ---- PeerConnection Unconfirmed pthatcher@google.com Accounting error when Pseudo TCP receives an acknowledgement for a partial segment. EngTriaged IceBox     1817 2 ---- ---- PeerConnection Unconfirmed pthatcher@webrtc.org Reapplying local SDP with different SSRC for video halts video packet transmission EngTriaged IceBox     1836 2 ---- ---- ---- Unconfirmed ---- PeerConnection::SetLocalDescription Giving Exception after receving offer on android     1873 2 ---- ---- PeerConnection Available juberti@webrtc.org ICE gathering state does not get changed at the right time EngTriaged IceBox     1883 2 ---- ---- PeerConnection Available juberti@webrtc.org Chromium tab crash, only in debug mode (p2ptransportchannel.cc(663): ASSERT FAILED) EngTriaged IceBox     1886 2 ---- ---- Video Assigned stefan@webrtc.org Reset video delay after the jitter buffer has been flushed due to being full. EngTriaged IceBox TabCapture     1901 2 ---- ---- Build Unconfirmed niklas.enbom@webrtc.org [patch] prevent use of getchar macro overriding local vars in spreadsort     1919 2 ---- ---- PeerConnection Available ---- Improvement on Turnport for debugging EngTriaged IceBox     1928 2 ---- ---- PeerConnection Assigned juberti@webrtc.org Support Suite B cryptosuites for SRTP EngTriaged IceBox fixit     1938 2 ---- ---- Desktop Assigned sergeyu@chromium.org MouseCursorShapeTest.MatchCursors fails on some machines.     1953 2 ---- ---- PeerConnection Assigned deadbeef@webrtc.org Refine the test criteria for P2PTransportChannelTest EngTriaged IceBox     1979 2 ---- ---- GetUserMedia Available hbos@webrtc.org WebRTC shouldn't use built-in laptop cameras when the lid is closed EngTriaged     1994 2 52 ---- Video Assigned danilchap@webrtc.org Refactor RTP header extensions. EngTriaged     2022 2 ---- ---- Desktop Assigned sergeyu@chromium.org webrtc::XServerPixelBuffer is not thread-safe.     2031 2 52 ---- PeerConnection Started hta@webrtc.org getStats() does not accept a mediaStreamTrack as a first argument EngTriaged     2037 2 ---- ---- Audio Assigned henrik.lundin@webrtc.org Unit tests failing on Android EngTriaged IceBox fixit     2063 2 ---- ---- PeerConnection Assigned pthatcher@webrtc.org sdp version on o= line ignored by .setLocalDescription and .setRemoteDescription sdp EngTriaged IceBox     2072 2 ---- ---- Audio Assigned tina.legrand@webrtc.org provide a way to run subjective audio NACK tests EngTriaged IceBox     2073 2 ---- ---- Audio Available tina.legrand@webrtc.org Ideas for more automated audio NACK tests EngTriaged IceBox     2077 2 ---- ---- ---- Unconfirmed ---- Libjingle login fails in Windows 8.1 evaluation Build 9431     2101 3 ---- ---- Audio Assigned tina.legrand@webrtc.org ACMDTMFDetection::Detect called with wrong sample rate EngTriaged IceBox     2102 2 ---- ---- Network Assigned juberti@webrtc.org Resume the sequence number between StopSend() and StartSend() EngTriaged     2103 2 ---- ---- ---- Assigned xians@webrtc.org SIGSEGV in AudioDeviceBuffer::SetRecordedBuffer on Linux/Pulse Mic     2111 2 ---- ---- Audio Unconfirmed ---- Removed the sequence number workaround after RtpRtcpModule fixes the problem EngTriaged voe IceBox     2123 2 ---- ---- PeerConnection Available ---- PeerConnectionTest.java & RTCPeerConnection.mm should be written using callbacks instead of serializing waits EngTriaged IceBox     2131 2 51 ---- PeerConnection Assigned pthatcher@webrtc.org I would like the ability to switch audio and the camera during a WebRTC call. EngTriaged     2134 2 ---- ---- GetUserMedia Unconfirmed tommi@webrtc.org Correct the AGC and interface problems on the new OnDataAvailable interface.     2165 2 ---- ---- ---- Assigned andrew@webrtc.org Fix and hook up TestSort.cc     2209 2 ---- ---- GetUserMedia Unconfirmed ---- MediaStream.addTrack(track) generates a new MediaStreamTrack     2226 2 ---- ---- Webcam Unconfirmed ---- VideoCaptureAndroid::SetAndroidObjects     2237 2 ---- ---- ---- Unconfirmed ---- gclient runhooks error     2241 2 ---- ---- Video Assigned stefan@webrtc.org Initially skipping to a complete key frame is broken when decoding with errors. EngTriaged IceBox     2264 ---- 52 ---- PeerConnection Assigned hta@webrtc.org Serialize createOffer/createAnswer/setLocalDescription/setRemoteDescription EngTriaged     2276 2 ---- ---- PeerConnection Assigned pthatcher@webrtc.org Support sending blob over datachannel SCTP EngTriaged     2281 2 ---- ---- Audio Available tina.legrand@webrtc.org Provide a way for CrOS to signal that there is no input analog gain EngTriaged IceBox     2305 2 ---- ---- PeerConnection Assigned pthatcher@google.com Patch for reducing vtable count in sigslot EngTriaged IceBox     2320 2 ---- ---- PeerConnection Available pthatcher@webrtc.org EWOULDBLOCK and error 10035 on ICE TCP connection EngTriaged     2323 2 ---- ---- Desktop Assigned sergeyu@chromium.org modules_unittests (window_capturer_win.cc) fails DrMemory on Windows     2326 2 ---- ---- Network Assigned pthatcher@webrtc.org DtmfSenderTest.InsertDtmfTwice fails Win32 Debug. EngTriaged     2327 2 ---- ---- Network Available pthatcher@webrtc.org libjingle_p2p_unittest failed on Linux Tsan EngTriaged     2328 2 ---- ---- Audio Assigned turaj@webrtc.org modules_tests (dual_stream_unittest.cc) fails when run under TSan on Windows     2333 3 ---- ---- Network Assigned zhaoqin@google.com udp_socket_manager_unittest.cc fails DrMemory on Windows EngTriaged     2337 2 ---- ---- PeerConnection Assigned pthatcher@webrtc.org Compile warning C6255 in file win32.h / stack overflow exception EngTriaged IceBox     2344 3 ---- ---- Internals Assigned jansson@webrtc.org Implement support for jitter simulation to Dummynet wrapper script EngTriaged IceBox     2358 2 ---- ---- PeerConnection Available pthatcher@webrtc.org CriticalSectionWrapper should have an AssertAcquired() method EngTriaged     2359 2 ---- ---- PeerConnection Available juberti@webrtc.org Imageattr header ignored by Chrome EngTriaged IceBox   1 - 100 of 958 Next › Sort Up Sort Down Hide Column Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column 1 2 3 50 51 52 Audio Build Desktop GetUserMedia Internals Network PeerConnection Render SampleApps SignalProcessing Video Webcam Assigned Available Started Unconfirmed andrew@webrtc.org danilchap@webrtc.org deadbeef@webrtc.org hbos@webrtc.org hclam@chromium.org henrik.lundin@webrtc.org hta@webrtc.org jansson@webrtc.org juberti@webrtc.org magjed@webrtc.org mflodman@webrtc.org minyue@webrtc.org niklas.enbom@webrtc.org p...@webrtc.org pthatcher@google.com pthatcher@webrtc.org sergeyu@chromium.org sjlee@webrtc.org sprang@webrtc.org stefan@webrtc.org tina.legrand@webrtc.org tommi@webrtc.org turaj@webrtc.org xians@webrtc.org zhaoqin@google.com EngTriaged IceBox Mic Performance SCTP TabCapture Timestamps fixit neteq sdp voe Show columns:  ♦ ID  ♦ Pri  ♦ Mstone  ♦ ReleaseBlock  ♦ Component  ♦ Status  ♦ Owner  ♦ Summary     Action     Attachments     Blocked     BlockedOn     Blocking     Breaks     Cc     Closed     Dev     Hotlist     Merge     MergedInto     Modified     OS     Opened     Project     Reporter     Review     Spec     Stars     Type     size     Edit column spec... About Monorail Feedback on Monorail Terms Privacy"	"null"	"null"	"Google talk voice and P2P interoperability library. [BSD]"	"true"
"Networking"	"Mongoose"	"https://github.com/cesanta/mongoose"	"Extremely lightweight webserver. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2844"	"327"	"916"	"GitHub - cesanta/mongoose: Mongoose Embedded Web Server Library  - Mongoose is more than an embedded webserver. It is a multi-protocol embedded networking library with functions including TCP, HTTP client and server, WebSocket, JSON-RPC client and server and much more. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 327 Star 2,844 Fork 916 cesanta/mongoose Code Issues 36 Pull requests 11 Pulse Graphs Mongoose Embedded Web Server Library - Mongoose is more than an embedded webserver. It is a multi-protocol embedded networking library with functions including TCP, HTTP client and server, WebSocket, JSON-RPC client and server and much more. https://www.cesanta.com 2,177 commits 1 branch 23 releases 75 contributors C 99.9% Makefile 0.1% C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 6.5 6.4 6.3 6.2 6.1 6.0 5.6 5.5_20140120 5.5 5.4 5.3 5.2 5.1 5.0 4.1 4.0 3.8 3.7 3.6 3.5 3.4 3.3 3.2 Nothing to show New pull request Latest commit 256aa02 Jul 15, 2016 rojer committed with cesantabot Fix compilation for non-MGIOT projects … That don't have CONSOLE_UART defined  PUBLISHED_FROM=7930bb639baf81cff8ce53c6f81e9739668aae08 Permalink Failed to load latest commit information. docs Fix SSL stuff Jul 14, 2016 examples Fix led toggline in CC3200 sensor demo Jul 13, 2016 jni !): Fix for compile error in Android. Jul 6, 2016 CONTRIBUTING.md Add contribution files Feb 15, 2016 LICENSE Add LICENSE file to F&C, update dates Feb 13, 2016 README.md Ditch JSON-RPC from mongoose Jul 1, 2016 mongoose.c Fix compilation for non-MGIOT projects Jul 15, 2016 mongoose.h Fix SSL stuff Jul 14, 2016 README.md Mongoose - Embedded Web Server / Embedded Networking Library Mongoose is ideal for embedded environments. It has been designed for connecting devices and bringing them online. On the market since 2004, used by vast number of open source and commercial products - it even runs on space stations! Mongoose makes embedded network programming fast, robust, and easy. If you're looking for a pre-compiled Windows or Mac binary, Download pre-compiled Mongoose web server binary Alternatively, Download Mongoose Source Code here Check our latest releases Read User Guide and API reference Study mongoose example code If you are looking for a complete solution with firmware and cloud components, check out Mongoose IoT Platform. Support Support Forum - Ask your technical questions here Chat - Visit www.cesanta.com for our live chat Commercial one-to-one support - Available to all commercial license holders Features Cross-platform: works on Linux/UNIX, MacOS, QNX, eCos, Windows, Android, iPhone, FreeRTOS (TI CC3200, ESP8266), etc Single-threaded, asynchronous, non-blocking core with simple event-based API Native support for PicoTCP embedded TCP/IP stack, LWIP embedded TCP/IP stack Builtin protocols: plain TCP, plain UDP, SSL/TLS (over TCP, one-way or two-way) HTTP client, HTTP server WebSocket client, WebSocket server MQTT client, MQTT broker CoAP client, CoAP server DNS client, DNS server, async DNS resolver Tiny static and run-time footprint Source code is both ISO C and ISO C++ compliant Very easy to integrate: just copy mongoose.c and mongoose.h files to your build tree Licensing Mongoose is released under commercial and GNU GPL v.2 open source licenses. Commercial Projects: Once your project becomes commercialised GPLv2 licensing dictates that you need to either open your source fully or purchase a commercial license. Cesanta offer full, royalty-free commercial licenses without any GPL restrictions. If your needs require a custom license, we’d be happy to work on a solution with you. Contact us for pricing. Prototyping: While your project is still in prototyping stage and not for sale, you can use Mongoose’s open source code without license restrictions. Dashboard Example Mongoose is often used to implement device dashboards and real-time data exchange over Websocket. Here is a dashboard example that illustrates the functionality: Developing a new product? Contact us today to discuss how Mongoose can help Contributions To submit contributions, sign Cesanta CLA and send GitHub pull request. You retain the copyright on your contributions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cesanta/mongoose"	"Extremely lightweight webserver. [GPL2]"	"true"
"Networking"	"Muduo"	"https://github.com/chenshuo/muduo"	"A C++ non-blocking network library for multi-threaded server in Linux. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2434"	"487"	"1482"	"GitHub - chenshuo/muduo: A C++ non-blocking network library for multi-threaded server in Linux Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 487 Star 2,434 Fork 1,482 chenshuo/muduo Code Issues 3 Pull requests 6 Wiki Pulse Graphs A C++ non-blocking network library for multi-threaded server in Linux http://code.google.com/p/muduo 681 commits 6 branches 52 releases 27 contributors C++ 95.1% CMake 3.5% Lua 0.8% Protocol Buffer 0.3% Python 0.2% Shell 0.1% C++ CMake Lua Protocol Buffer Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags backport cpp11 experiment gh-pages mac master Nothing to show v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0-rc2 v1.0.0-rc1 v0.9.8 v0.9.7 v0.9.6 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.2 v0.8.1 v0.8.0 v0.7.0 v0.6.0 v0.5.0 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.9 v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit d79b42f Jun 26, 2016 chenshuo committed on GitHub Merge pull request #209 from ManitoYu/patch-1 … fix HttpRequest.h, add the swap of version Permalink Failed to load latest commit information. contrib preliminary support of IPv6 Nov 13, 2015 examples preliminary support of IPv6 Nov 13, 2015 muduo fix HttpRequest.h, add the swap of version Jun 26, 2016 .gitignore Inspector May 8, 2010 CMakeLists.txt move thrift from examples/ to contrib/. Nov 10, 2015 ChangeLog v1.0.8 Feb 11, 2016 Doxyfile Build both types. Mar 13, 2010 License better wording. Mar 13, 2014 MacOSX.diff fix 'endian.h' file not found Jul 28, 2015 README slowsink.py now acts as client too. Jan 11, 2013 TODO Add asychronous DNS resolver based on c-ares library. Mar 9, 2012 armlinux.diff update armlinux.diff Mar 6, 2013 backport.diff Fix for 32-bit Aug 3, 2013 build.sh Add enable_testing() to CMakeLists.txt. Sep 12, 2014 clang.diff fix for clang 3.4 Mar 7, 2014 premake4.lua add debug symbols for premake builds. Oct 8, 2013 README Muduo is a multithreaded C++ network library based on the reactor pattern. It runs on Linux with kernel version >= 2.6.28. http://code.google.com/p/muduo/  Copyright (c) 2010, Shuo Chen.  All rights reserved.  Use of this source code is governed by a BSD-style license that can be found in the License file.    __  __           _  |  \/  |         | |  | \  / |_   _  __| |_   _  ___  | |\/| | | | |/ _` | | | |/ _ \  | |  | | |_| | (_| | |_| | (_) |  |_|  |_|\__,_|\__,_|\__,_|\___/   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chenshuo/muduo"	"A C++ non-blocking network library for multi-threaded server in Linux. [BSD]"	"true"
"Networking"	"net_skeleton"	"https://github.com/cesanta/fossa"	"TCP client/server library for C/C++. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"275"	"53"	"114"	"GitHub - cesanta/fossa: Async non-blocking multi-protocol networking library for C/C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 53 Star 275 Fork 114 cesanta/fossa Code Issues 20 Pull requests 0 Pulse Graphs Async non-blocking multi-protocol networking library for C/C++ http://cesanta.com 808 commits 5 branches 4 releases 12 contributors C 87.2% C++ 12.7% Other 0.1% C C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags buffer_limit cc3000_restful_client freebsd master no_ssl_unused_var_warning Nothing to show 2.1 2.0 1.1 1.0 Nothing to show New pull request Latest commit 03b7e56 Sep 28, 2015 cpq Update README.md Permalink Failed to load latest commit information. apps Disable outdated crypto, enable DH params Jun 19, 2015 examples Add multithreaded example for fossa Sep 7, 2015 platforms Fix choose_backend() logic Apr 16, 2015 src Add multithreaded example for fossa Sep 7, 2015 test Add multithreaded example for fossa Sep 7, 2015 LICENSE Update URLs Aug 11, 2015 Makefile Simplify public repo May 6, 2015 README.md Update README.md Sep 28, 2015 ReleaseNotes.md Make LB overwrite redirects May 8, 2015 fossa.c Add multithreaded example for fossa Sep 7, 2015 fossa.h Add multithreaded example for fossa Sep 7, 2015 README.md Fossa: Multi-Protocol Networking Library Note: As of September 21st 2015, Fossa project has been merged back into Mongoose project Fossa is a multi-protocol networking library written in C. It provides easy to use event-driven interface that allows to implement network protocols or scalable network applications with little effort. Fossa helps developers to manage the complexity of network programming and let them concentrate on the logic, saving time and money. Fossa has built-in support for several protocols, like HTTP, Websocket, MQTT, mDNS. Example applications include Websocket-based chat server, JSON-RPC server, database server with RESTful API, MQTT broker, netcat with SSL and hexdump, Raspberry PI camera video feed + led control, and more. Fossa is ideal for the embedded environments, it has been designed as an open source platform for connecting devices and bringing them online. Features Cross-platform: works on Linux/UNIX, QNX, eCos, Windows, Android, iPhone, etc Single-threaded, asynchronous, non-blocking core with simple event-based API Builtin protocols: plain TCP, plain UDP, SSL/TLS (over TCP, one-way or two-way) HTTP client, HTTP server Websocket client, Websocket server JSON-RPC client, JSON-RPC server MQTT client, MQTT broker CoAP client, CoAP server DNS client, DNS server, async DNS resolver Tiny static and run-time footprint Source code is both ISO C and ISO C++ compliant Very easy to integrate: just copy fossa.c and fossa.h files to your build tree Extensively tested and production-ready, trusted by many blue chip businesses Examples & Documentation User Guide - Detailed User Guide and API reference examples - Collection of well-commented examples. To build any example, go into respective directory and type make Contributions People who have agreed to the Cesanta CLA can make contributions. Note that the CLA isn't a copyright assigment but rather a copyright license. You retain the copyright on your contributions. License Fossa is released under GNU GPL v.2. Businesses have an option to get non-restrictive, royalty-free commercial license and professional support from Cesanta. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cesanta/fossa"	"TCP client/server library for C/C++. [GPL2]"	"true"
"Networking"	"nope.c"	"https://github.com/riolet/nope.c"	"A C language-based ultra-light software platform for scalable server-side and networking applications. Think node.js for C programmers. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"614"	"55"	"59"	"GitHub - riolet/WAFer: WAFer is a C language-based software platform for scalable server-side and networking applications. Think node.js for C programmers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 614 Fork 59 riolet/WAFer Code Issues 20 Pull requests 1 Pulse Graphs WAFer is a C language-based software platform for scalable server-side and networking applications. Think node.js for C programmers. 140 commits 1 branch 1 release Fetching contributors C 92.3% C++ 5.5% Makefile 2.1% Shell 0.1% C C++ Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.0.4-alpha Nothing to show New pull request Latest commit 45a4b19 Jun 26, 2016 rrezel Fix segfault bug Permalink Failed to load latest commit information. .gitignore First Draft Jul 8, 2014 .travis.yml Enabling travis Aug 12, 2014 LICENSE Initial commit Jul 8, 2014 Makefile Updating Readme Jan 9, 2016 README.md Pointing travis to the right place Jan 9, 2016 example.c Updating Readme Jan 10, 2016 run.sh Fixes after Valgrind Jul 24, 2014 server.c Updating Readme Jan 10, 2016 wafer.c Fix segfault bug Jun 26, 2016 wafer.h Fix segfault bug Jun 27, 2016 waferapi.c Fix segfault bug Jun 27, 2016 waferapi.h Updating Readme Jan 10, 2016 README.md WAFer WAFer is a C language-based ultra-light scalable server-side web applications framework. Think node.js for C programmers. Because it's written in C for the C eco system, WAFer is wafer-thins with a memory footprint that is only a fraction of that of node.js and other bulky frameworks. Just copy server.c (say, as myserver.c), put your code inside the function void server(Request request) in myserver.c and, make with make SERVER=myserver, and you are good to go. WAFer can operate in many different configurations, all selected at compile time. They include: Single-threaded (Default) or multi-threaded (make with THREADS=n where n>0) Select(Default) or epoll (make with LOOP=epoll) based event loop C10K mode (make with LOOP=epoll MAX_CON_CONS=n where n>10,000) Default port is 4242. Set environment variable 'PORT' to change it. That's really it. The source comes with a simple example example.c to get you started. Note to Contributors Thank you for making this a wonderful project! Here's our preferred formatting style: find . \( -name '*.c' -o -name '*.h' \) -exec indent --no-tabs --linux-style --line-length 90 --indent-level 4 -bli0 \{\} \; Acknowledgements J. David Blackstone and Feng Shen, whose web servers have been repurposed to build this platform. Mark Karpeles for the incredible number of bug fixes! Fine folks at /r/programming for the honest and constructive feedback. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/riolet/nope.c"	"A C language-based ultra-light software platform for scalable server-side and networking applications. Think node.js for C programmers. [GPL2]"	"true"
"Networking"	"Onion"	"https://github.com/davidmoreno/onion"	"HTTP server library in C designed to be lightweight and easy to use. [Apache2/GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1058"	"72"	"127"	"GitHub - davidmoreno/onion: C library to create simple HTTP servers and Web Applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 1,058 Fork 127 davidmoreno/onion Code Issues 18 Pull requests 0 Wiki Pulse Graphs C library to create simple HTTP servers and Web Applications. http://www.coralbits.com/libonion/ 1,085 commits 13 branches 11 releases 23 contributors C 74.2% C++ 19.8% CMake 3.6% Scilab 1.2% Other 1.2% C C++ CMake Scilab Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bstarynk-master darwin docs fixtimeouts freebsd manpages master nomalloc onion-0-8 parser-ng python stable timerpoller Nothing to show v0.8 v0.7 v0.5 v0.4 v0.3 v0.2 0.7 0.5 0.4 0.3 0.2 Nothing to show New pull request Latest commit 5026256 Jun 23, 2016 davidmoreno Fix #186. Do not declare variable at for statement. Permalink Failed to load latest commit information. debian Updated debian package version to 0.8. May 4, 2016 examples add closing button to websocket example Jun 10, 2016 gentoo Add Redis support to the gentoo ebuild. Dec 31, 2015 manpages Wording fixes. Apr 24, 2016 src indent with tabs rather than spaces Jun 22, 2016 tests Fix #186. Do not declare variable at for statement. Jun 23, 2016 toolchain refreshed gentoo ebuild, cosmetics in bin, lib, include install dirs Feb 5, 2014 tools Fix a memory leak found in otemplate. Mar 15, 2016 .gitignore Updated gitignore Apr 16, 2016 .travis.yml removing dist:trusty from travis.yml Jun 15, 2016 AGPL.txt License changed for the library to LGPL. Examples and tests remain AGPL. Jul 4, 2011 APACHE2.txt Updated license on the library source code to Apache2 + GPLv2+. Examp… Feb 9, 2014 CMakeLists.txt Added -D_ISOC99_SOURCE to allow use of clock_gettime on older browsers. May 28, 2016 CPackConfig.cmake Fixed build, changed README.rst to README.md at cpack. Dec 27, 2014 Doxyfile Added doxygen groups for documentation. Only document C bindings. Apr 29, 2016 GPLv2.txt Update C++ bindings, adding easy way to compose urls, just using the … Feb 19, 2014 LICENSE.txt Fixed where documentation says its only GPLv2, as it is GPLv2+. May 15, 2014 README.md Removed analytics from README. May 4, 2016 git-version-gen Git version gen looks for all tags, not just annotated May 4, 2016 README.md Onion http server library Travis status Coverity status Onion is a C library to create simple HTTP servers and Web Applications. master the development branch. Current stable branch is onion-0-8. Introduction The use case is an existing application, or a new one, that needs some HTTP interconnection with the world. It uses the library to add some handlers for specific URLs and generate and serve the dynamic data as needed. It also has security goals (SSL support) so that you just concentrate on what you want to serve, and serve it. Its not a web server per se, as it is not an executable. If you want to compare to a web server, a web server would use a module or plugin to add some functionality. With libonion you have the functionality and add the webserver as a plugin. There is a wiki available at https://github.com/davidmoreno/onion/wiki, with useful information on how to get started using Onion and it's internal workings. API documentation is at http://coralbits.com/static/onion/. There is a mailing list at https://groups.google.com/a/coralbits.com/forum/?fromgroups=#!forum/onion-dev Collaborate! You can, and are encouraged, to branch at github, download and tweak onion to use it in your projects. The library is dual licensed under the Apache2 license and GPLv2+, so you can make almost anything with it, use it in your commercial and free software programs, and modify it to your needs. Please join the mailing list at https://groups.google.com/a/coralbits.com/group/onion-dev/topics, to ask your questions and comment on your success using onion. There is also a blog to keep everybody informed about news on onion at http://blog.coralbits.com/. Download There are third party packages available: RPM based: http://software.opensuse.org/download.html?project=home%3Admoreno&package=onion Raspberry pi: http://packages.aisoy.com/debian/pool/unstable/libo/libonion/ Arch Linux: https://aur.archlinux.org/packages/libonion-git/ If you know of any other packaged version, please send me a note. As always they may be outdated, if you want the latest and greatest, do a manual compile and install. Thanks to Ruediger Meier for helping for so long with the RPM packages. Compile and Install Manual compile and install:      $ git clone git@github.com:davidmoreno/onion.git      $ cd onion      $ mkdir build      $ cd build      $ cmake ..      $ make      $ sudo make install To compile with debugging enabled, use     $ cmake -DCMAKE_BUILD_TYPE=Debug .. To run with some debug messages, set the ONION_DEBUG and/or ONION_DEBUG0 environment variable containing some source file names, e.g.     $ export ONION_DEBUG0='request.c url.c' Dependencies Required: C compiler cmake make This compilers and minimum versions are known to work: Linux: GCC 4.4 clang 3.0 For the C++ bindings a C++11 compiler is needed: Linux: GCC 4.8 clang 3.7 Optional; Onion will compile but some functionality will not be available: gnutls and gcrypt (SSL support) pthreads (threading support) libxml2 (WebDAV support) libpam (HTTP Basic Auth support using PAM) C++ compiler Systemd (support for listening on systemd sockets) sqlite3 (sqlite3 session backend) hiredis (Redis session backend) Optional for examples: cairo libpng2 boehm gc libjpeg Semantic versioning. Starting with Onion 0.8.0, we use semantic versioning, making the following promises: Version format is [MAJOR].[MINOR].[PATCH]. Only make API and ABI changes at major versions. Can add functionalities at minor releases. Only remove API functions at major versions. No changes in semantics never. Minor versions are always ABI back-compatible. This means that if you compiled with a previous minor version and same major version, it will still compile and work. Only add API functions at minor versions. Only fix patches a patch revisions. Patch revisions are is a non sequential number, so after 0.8.0 is not 0.8.1, but maybe 0.8.23. It will always increase. Check onion/version.h for more information on version control. SSL Support If at compile time the build script finds the gnutls libraries, SSL support will be compiled in. It can be deactivated anyway at ./CMakeLists.txt. To use it you have to set the certificates, and you can check if its on, checking the flag O_SSL_ACTIVATED. If support is not compiled in, then the library will not use SSL, but for the user of the library the interface is the same; it will only change that when trying to set the certificates it will fail. Anwyay for clients its just to use the interface and they dont care at all if suport is in or not. No more than being able to use SSL. This is not mandatory because there may be moments when the program's users do not want to support SSL for whatever reasons, for example speed. Threads support Currently there are two threading modes. It can be set so the server is created as threaded (O_THREADED), and it will create a new thread per connection. There is no data protection as on the listen phase there should not be any change to onion structures. Nevertheless if new handlers are created they must set their own threading support as neccesary. It can be deactivated at CMakeLists.txt. If no pthreads lib is found on the system, it is not compiled in. Also when thread support is on, onion server can be set to work on another (non-main) thread. This is independant from O_THREADED operation; it can have one thread with your normal application and another thread that listens and processes web-requests. Its set with the O_DETACH_LISTEN flag. This is very useful when adding an extra web server to your application so it can be added without changes to the flow of your application, but you will need to thread protect your data if you access to it from the web server. Finally there is a pool mode. Users can set a default number of threads (onion_set_max_threads), and using epoll the data is given to the threads. This is the highest performant method, with up to 30k web-requests served on a Intel(R) Core(TM)2 Duo CPU T6500 @2.10GHz. Customizing low-level allocation and threads Sometimes it may be needed to customize memory allocation and/or threads operation. This could be useful when using an alternative malloc, or if you wanted to use Hans Boehm's conservative garbage collector from http://www.hboehm.info/gc/ e.g. if you use GNU guile. Then you need to define your own memory routines and pass them to onion_low_initialize_memory_allocation before any other calls to onion. Likewise, to customize threads operations, call onion_low_initialize_threads. See comments in header file low.h. A program using Onion and Boehm's GC should first define a memory failure routine which should never return:     /* the memory failure routine should never return! */     static void memory_failure(const char*msg) {       perror(msg);       exit(EXIT_FAILURE);     }; Then, your program (using both onion and Boehm's GC) should initialize both memory routines and threads, like:     onion_low_initialize_memory_allocation       (GC_malloc,  GC_malloc_atomic,  GC_calloc,        GC_realloc, GC_strdup, GC_free,        memory_failure);     onion_low_initialize_threads       (GC_pthread_create, GC_pthread_join,        GC_pthread_cancel, GC_pthread_detach,        GC_pthread_exit, GC_pthread_sigmask); You might need to define your GC_calloc using GC_malloc and memset if your version of Boehm's GC don't provide it. After these low-level initialization you can use Onion as usual. You could also want to call just onion_low_initialize_threads if you wanted to name threads created by the onion library (using pthread_setname_np on Linux) and/or change their priority (using pthread_setschedprio), etc. ARM Support It can be cross compiled for ARM directly from cmake. Just do:     $ mkdir arm     $ cd arm     $ cmake .. -DCMAKE_TOOLCHAIN_FILE=../toolchain/arm.txt     $ make It needs the current system opack and otemplate to compile some examples, so if you want to use the examples on your instalation, compile and install libonion for the current system first. Tested on ubuntu 10.10, with gcc-4.5-arm-linux-gnueabi and g++-4.5-arm-linux-gnueabi installed. Templating support Starting on 0.3.0 development onion has templating support via otemplate. It is a template system similar to django templates (http://docs.djangoproject.com/en/dev/topics/templates/). Check more information on how to use them at tools/otemplate/README.rst. I18N There is I18N support. Check wiki for details or fileserver_otemplate example. Systemd Systemd is integrated. If want to use it, just pass the flag O_SYSTEMD to the onion_new(). Oterm has example socket and service files for oterm support. FreeBSD/Darwin Since september 2013 there is support for FreeBSD using libev or libevent. This work is not as tested as the Linux version, but if some compilation error arises, please send the bug report and we will fix it ASAP. OSX/Darwin support is also available on the darwin branch. Once this work stabilizes it will be merged back to master. Environment variables You can set the following environment variables -e.g. with the export builtin of bash- to modify runtime behaviour of onion: ONION_LOG noinfo -- Disables all info output to the console, to achieve faster results nocolor -- Disable color use by the log nodebug -- Do not show debug lines syslog -- Log to syslog. Can be changed programatically too, with the onion_log global function. ONION_DEBUG0 -- Set the filename of a c source file, and DEBUG0 log messages are written. This is normally very verbose. ONION_SENDFILE -- Set to 0 do disable sendfile. Under some file systems it does not work. Until a detection code is in place, it can be disabled with this. Binary compatibility breaks We try hard to keep binary compatibility, but sometimes its hard. Here is a list of ABI breaks: 0.4.0 Onion object private flags have moved. If on your code you rely on them, must recompile. If dont rely on them, everything should keep working. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/davidmoreno/onion"	"HTTP server library in C designed to be lightweight and easy to use. [Apache2/GPL2]"	"true"
"Networking"	"POCO"	"https://github.com/pocoproject"	"C++ class libraries and frameworks for building network- and internet-based applications that run on desktop, server, mobile and embedded systems. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"POCO C++ Libraries · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization POCO C++ Libraries http://pocoproject.org Repositories People 9 Filters Sources Forks C 1,566 591 poco POCO C++ Libraries - Cross-platform C++ libraries with a network/internet focus. Updated Jul 15, 2016 Makefile 4 1 distro POCO Distribution Updated May 10, 2016 13 5 poco-addons Additional libraries that are not part of the core release. Updated Jun 22, 2014 C++ 11 13 sandbox Repository for new and experimental code Updated Mar 24, 2013 9 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pocoproject"	"C++ class libraries and frameworks for building network- and internet-based applications that run on desktop, server, mobile and embedded systems. [Boost]"	"true"
"Networking"	"website"	"http://pocoproject.org/"	"C++ class libraries and frameworks for building network- and internet-based applications that run on desktop, server, mobile and embedded systems. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"POCO C++ Libraries · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization POCO C++ Libraries http://pocoproject.org Repositories People 9 Filters Sources Forks C 1,566 591 poco POCO C++ Libraries - Cross-platform C++ libraries with a network/internet focus. Updated Jul 15, 2016 Makefile 4 1 distro POCO Distribution Updated May 10, 2016 13 5 poco-addons Additional libraries that are not part of the core release. Updated Jun 22, 2014 C++ 11 13 sandbox Repository for new and experimental code Updated Mar 24, 2013 9 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pocoproject/"	"C++ class libraries and frameworks for building network- and internet-based applications that run on desktop, server, mobile and embedded systems. [Boost]"	"true"
"Networking"	"Proxygen"	"https://github.com/facebook/proxygen"	"Facebook's collection of C++ HTTP libraries including an easy to use HTTP server. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4063"	"514"	"793"	"GitHub - facebook/proxygen: A collection of C++ HTTP libraries including an easy to use HTTP server. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 514 Star 4,063 Fork 793 facebook/proxygen Code Issues 8 Pull requests 1 Wiki Pulse Graphs A collection of C++ HTTP libraries including an easy to use HTTP server. 703 commits 1 branch 14 releases 45 contributors C++ 97.1% M4 1.5% Other 1.4% C++ M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.32.0 v0.30.0 v0.29.0 v0.28.0 v0.27.0 v0.26.0 v0.25.0 v0.24.0 v0.23.0 v0.22.0 v0.21.0 v0.20.0 v0.19.0 v0.18.0 Nothing to show New pull request Latest commit a674e99 Jul 15, 2016 mzlee committed with Facebook Github Bot 2 Include string for getDateTimeStr. … Summary: Added std::string, but didn't include the header.  Reviewed By: francis-ma  Differential Revision: D3570574  fbshipit-source-id: cb7bc75b3784233a9ab7543528b2471911ec5cd3 Permalink Failed to load latest commit information. proxygen Include string for getDateTimeStr. Jul 15, 2016 .gitignore Ignore generated files Apr 29, 2015 .travis.yml For Travis just build Docker image. Jul 14, 2016 CONTRIBUTING.md Initial code import Nov 5, 2014 CoreProxygenArchitecture.png Initial code import Nov 5, 2014 Dockerfile Cleanup Dockerfile: Use less commands. Jul 14, 2016 Doxyfile Initial code import Nov 5, 2014 LICENSE Updated License, Copyright notice. Mar 25, 2015 PATENTS Update Patent Grant Apr 29, 2015 README.md Bring improved documentation. Jun 30, 2016 README.md Proxygen: Facebook's C++ HTTP Libraries This project comprises the core C++ HTTP abstractions used at Facebook. Internally, it is used as the basis for building many HTTP servers, proxies, and clients. This release focuses on the common HTTP abstractions and our simple HTTPServer framework. Future releases will provide simple client APIs as well. The framework supports HTTP/1.1, SPDY/3, and SPDY/3.1. HTTP/2 support is in progress. The goal is to provide a simple, performant, and modern C++ HTTP library. We have a Google group for general discussions at https://groups.google.com/d/forum/facebook-proxygen. The original blog post also has more background on the project. Installing Note that currently this project has only been tested on Ubuntu 14.04, although it likely works on many other platforms. Support for Mac OSX is incomplete. You will need at least 2 GiB of memory to compile proxygen and its dependencies. Easy Install Just run ./deps.sh from the proxygen/ directory to get and build all the dependencies and proxygen. It will also run all the tests. Then run ./reinstall.sh to install it. You can run ./deps.sh && ./reinstall.sh whenever to rebase the dependencies, and then rebuild and reinstall proxygen. A note on compatibility: this project relies on system installed folly. If you rebase proxygen and make starts to fail, you likely need to update to the latest version of folly. Running ./deps.sh && ./reinstall.sh will do this for you. We are still working on a solution to manage depencies more predictably. Other Platforms If you are running on another platform, you may need to install several packages first. Proxygen and folly are all autotools based projects. Introduction Directory structure and contents: Directory Purpose proxygen/external/ Contains non-installed 3rd-party code proxygen depends on. proxygen/lib/ Core networking abstractions. proxygen/lib/http/ HTTP specific code. proxygen/lib/services/ Connection management and server code. proxygen/lib/utils/ Miscellaneous helper code. proxygen/httpserver/ Contains code wrapping proxygen/lib/ for building simple C++ http servers. We recommend building on top of these APIs. Architecture The central abstractions to understand in proxygen/lib are the session, codec, transaction, and handler. These are the lowest level abstractions, and we don't generally recommend building off of these directly. When bytes are read off the wire, the HTTPCodec stored inside HTTPSession parses these into higher level objects and associates with it a transaction identifier. The codec then calls into HTTPSession which is responsible for maintaining the mapping between transaction identifier and HTTPTransaction objects. Each HTTP request/response pair has a separate HTTPTransaction object. Finally, HTTPTransaction forwards the call to a handler object which implements HTTPTransaction::Handler. The handler is responsible for implementing business logic for the request or response. The handler then calls back into the transaction to generate egress (whether the egress is a request or response). The call flows from the transaction back to the session, which uses the codec to convert the higher level semantics of the particular call into the appropriate bytes to send on the wire. The same handler and transaction interfaces are used to both create requests and handle responses. The API is generic enough to allow both. HTTPSession is specialized slightly differently depending on whether you are using the connection to issue or respond to HTTP requests. Moving into higher levels of abstraction, proxygen/httpserver has a simpler set of APIs and is the recommended way to interface with proxygen when acting as a server if you don't need the full control of the lower level abstractions. The basic components here are HTTPServer, RequestHandlerFactory, and RequestHandler. An HTTPServer takes some configuration and is given a RequestHandlerFactory. Once the server is started, the installed RequestHandlerFactory spawns a RequestHandler for each HTTP request. RequestHandler is a simple interface users of the library implement. Subclasses of RequestHandler should use the inherited protected member ResponseHandler* downstream_ to send the response. Using it Proxygen is a library. After installing it, you can build your own C++ server. Try cding to the directory containing the echo server at proxygen/httpserver/samples/echo/. You can then build it with this one liner: g++ -std=c++11 -o my_echo EchoServer.cpp EchoHandler.cpp -lproxygenhttpserver -lfolly -lglog -lgflags -pthread After running ./my_echo, we can verify it works using curl in a different terminal: $ curl -v http://localhost:11000/ *   Trying 127.0.0.1... * Connected to localhost (127.0.0.1) port 11000 (#0) > GET / HTTP/1.1 > User-Agent: curl/7.35.0 > Host: localhost:11000 > Accept: */* > < HTTP/1.1 200 OK < Request-Number: 1 < Date: Thu, 30 Oct 2014 17:07:36 GMT < Connection: keep-alive < Content-Length: 0 < * Connection #0 to host localhost left intact Documentation We use Doxygen for Proxygen's internal documentation. You can generate a copy of these docs by running doxygen Doxyfile from the project root. You'll want to look at html/namespaceproxygen.html to start. This will also generate folly documentation. Contributing Contribututions to Proxygen are more than welcome. Read the guidelines in CONTRIBUTING.md. Make sure you've signed the CLA before sending in a pull request. Whitehat Facebook has a bounty program for the safe disclosure of security bugs. If you find a vulnerability, please go through the process outlined on that page and do not file a public issue. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/facebook/proxygen"	"Facebook's collection of C++ HTTP libraries including an easy to use HTTP server. [BSD]"	"true"
"Networking"	"RakNet"	"https://github.com/OculusVR/RakNet"	"A cross platform, open source, C++ networking engine for game programmers. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1836"	"411"	"541"	"GitHub - OculusVR/RakNet: RakNet is a cross platform, open source, C++ networking engine for game programmers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 411 Star 1,836 Fork 541 OculusVR/RakNet Code Issues 37 Pull requests 41 Pulse Graphs RakNet is a cross platform, open source, C++ networking engine for game programmers. 18 commits 1 branch 0 releases 8 contributors HTML 38.8% C 33.5% C++ 21.6% Shell 2.8% C# 2.8% Assembly 0.2% Other 0.3% HTML C C++ Shell C# Assembly Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 1a16989 Feb 27, 2015 alliekins Merge pull request #48 from Rovanion/patch-1 … Removed the unsetting of ${libPortAudioCpp} Permalink Failed to load latest commit information. CmakeIncludes Removed the unsetting of ${libPortAudioCpp} Feb 10, 2015 DependentExtensions Fix mismatching allocation/deallocation in AutoPatcher/CreatePatch.cpp Jul 8, 2014 Help Header and html clean-up Jun 4, 2014 Lib fix gitignore Jun 4, 2014 RakNet_IOS_XCode initial commit Jun 4, 2014 Samples Fix buffer overflow in chat server example Jul 8, 2014 Source Fix DOS vulnerabilities reported by ""8ARTEK0V0"" Sep 15, 2014 .gitignore fix gitignore Jun 5, 2014 3.x_to_4.x_upgrade.txt initial commit Jun 5, 2014 CMakeLists.txt initial commit Jun 5, 2014 LICENSE initial commit Jun 5, 2014 PATENTS initial commit Jun 5, 2014 README.md Remove references to deleted projects in README Jul 11, 2014 RakNet_NativeClient_VS2010.sln initial commit Jun 5, 2014 RakNet_VS2008.sln initial commit Jun 5, 2014 RakNet_WinPhone8_VS2012.sln initial commit Jun 5, 2014 RakNet_WindowsStore8_VS2012.sln initial commit Jun 5, 2014 README.md RakNet 4.081 Copyright (c) 2014, Oculus VR, Inc. Package notes The Help directory contains index.html, which is full help documentation in HTML format The Source directory contain all files required for the core of Raknet and is used if you want to use the source in your program or create your own dll The Samples directory contains code samples and one game using an older version of Raknet. The code samples each demonstrate one feature of Raknet. The game samples cover several features. The lib directory contains libs for debug and release versions of RakNet and RakVoice There is a make file for linux users in the root directory. Windows users can use projects under Samples\Project Samples C# support See Help\swigtutorial.html Upgrading from version 3 See 3.x_to_4.x_upgrade.txt Windows users (Visual Studio 2008 and 2010) Load RakNet_VS2008.sln and convert if necessary. After the project conversion, if you encounter error MSB4006, follow the steps below to fix it: Open project properties Click on ""Common Properties"" Click on ""Framework and References"" Look under ""Build Properties"" Change the ""Copy Local"" flag from ""True"" to ""False"" For other compiler issues, please see Help/compilersetup.html Windows users (VC6) Not supported, but you can get by if you directly include the source. CYGWIN users Copy Include, Source, and whatever you want to run in the home directory. Then type g++ ../../lib/w32api/libws2_32.a *.cpp You can run a.exe. You might have to copy *.dll from cygwin\bin as well. Linux users Use cmake, or g++ -lpthread -g *.cpp in the /Source directory. With libcat, use g++ -pthread -g -I./../DependentExtensions *.cpp in the /Source directory. 64 bit use -m64 command line Sometimes you need -pthread instead of -lpthread Command to build 64 bit chat example server from the /Source directory: g++ -m64 -g -lpthread -I./ ""../Samples/Chat Example/Chat Example Server.cpp"" *.cpp  Command to build NATCompleteServer from the Samples/NATCompleteServer directory: g++ -g -lpthread -I./ -I./../../Source main.cpp -I./../CloudServer ./../../Source/*.cpp ./../CloudServer/CloudServerHelper.cpp  Command to build autopatcher server from /Source directory: g++ -lpthread -lpq -lssl -lbz2 -lssl -lcrypto -L/opt/PostgreSQL/9.0/lib -L../DependentExtensions/bzip2-1.0.6 -I/opt/PostgreSQL/9.0/include -I../DependentExtensions/bzip2-1.0.6 -I./ -I../DependentExtensions/Autopatcher -I../DependentExtensions/Autopatcher/AutopatcherPostgreRepository -I../DependentExtensions/PostgreSQLInterface -g *.cpp ../DependentExtensions/Autopatcher/AutopatcherServer.cpp ../DependentExtensions/Autopatcher/CreatePatch.cpp ../DependentExtensions/Autopatcher/MemoryCompressor.cpp ../DependentExtensions/Autopatcher/AutopatcherPostgreRepository/AutopatcherPostgreRepository.cpp ../DependentExtensions/PostgreSQLInterface/PostgreSQLInterface.cpp ../Samples/AutopatcherServer/AutopatcherServerTest.cpp  Command to build NATCompleteServer from /Source directory: g++ -lpthread -I./ -I../Samples/CloudServer ../Samples/CloudServer/CloudServerHelper.cpp ../Samples/NATCompleteServer/main.cpp *.cpp  Command to build BigPacketTest from /Source directory: g++ -lpthread -I./ ../Samples/BigPacketTest/BigPacketTest.cpp *.cpp  Or with debugging info on: g++ -g -lpthread -I./ ../Samples/BigPacketTest/BigPacketTest.cpp *.cpp  If you get /usr/local/lib/libraknet.so: undefined reference to `__sync_fetch_and_add_4 then build with -march=i686 To debug: http://www.unknownroad.com/rtfm/gdbtut/gdbstack.html http://cs.baylor.edu/~donahoo/tools/gdb/tutorial.html http://linux.bytesex.org/gdb.html http://www.delorie.com/gnu/docs/gdb/gdb_29.html gdb ./a.out  Set breakpoint: b file:line  Disable a breakpoint: disable <breakpointNumber>  Delete a breakpoint: delete <breakpointNumber>  Get a list of breakpoints: info breakpoints  St breakpoint to be ignored that number of times ignore <breakpointNumber> <count> run  Other useful commands: info stack info locals delete (Clears all breakpoints) step (step into) next (step over) finish (step out) continue to keep going after step or next p <variableName> For example: p users.orderedList.listArray[0].guid  Command to install g++ sudo apt-get install gcc-c++ sudo apt-get install build-essential  Or: yum install gcc-c++  Or: sudo apt-get update sudo apt-get install g++  Command to install gdb sudo apt-get install gdb  Command to install wget, used to download files from webpages sudo apt-get install wget Series of commands for a new server: sudo apt-get install wget sudo apt-get update sudo apt-get install --fix-missing g++ sudo apt-get install gdb cd RakNet_Install_Directory\Source g++ -m64 -g -pthread -I./ ""../Samples/Chat Example/Chat Example Server.cpp"" *.cpp ./a.out Mac Users Open a Terminal window and type: cd ~/Desktop/RakNet/Source g++ -c -DNDEBUG -I -isysroot /Developer/SDKs/MacOSX10.5u.sdk/ -arch i386 *.cpp  Use whichever SDK you have. However, the 10.4 SDK is bugged and will not compile unless you use GCC 4.0 from inside XCODE The sources should build cleanly. This gives you a bunch of PowerPC binaries, compiled against the 10.3.9 SDK which is a good thing. Give the following command: libtool -static -o raknetppc.a *.o  This will stitch together a static library for the PowerPC architecture. There may be warnings that some .o files do not have any symbols. If you want to be prudent, remove the named files (the .o files, not the .cpp files!) and re-run the libtool command. Now, we build the source files for Intel: gcc -c -I ../Include -isysroot /Developer/SDKs/MacOSX10.4u.sdk/ -arch i386 *.cpp  ..and stitch it into a i386 library: libtool -static -o rakneti386.a *.o  Now, type: ls *.a  which should list the two .a files. Now, we make them into a universal binary: lipo -create *.a -o libraknet.a  You now have a file named libraknet.a. This is the RakNet library, built to run on both PowerPC and Intel Macs. Enjoy! ;-) IPod Depending on what version you target, you may have to change two defines to not use 64 bit integers and floats or doubles. Android You will need the latest CYWGIN and the android SDK to build native code on the android. Under CYWGIN, you will need to run ndk-build on a directory for RakNet. Under cygwin, create the RakNet directory somewhere, such as under samples. For example, if you create the path \cygwin\home\Kevin\android-ndk-r4b\samples\RakNet I copied the Android.Manifest.xml and other files from another sample Under jni, you will need the following Android.mk LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS) LOCAL_MODULE := RakNet MY_PREFIX := $(LOCAL_PATH)/RakNetSources/ MY_SOURCES := $(wildcard $(MY_PREFIX)*.cpp) LOCAL_SRC_FILES += $(MY_SOURCES:$(MY_PREFIX)%=RakNetSources/%) include $(BUILD_SHARED_LIBRARY) This version of Android.mk assumes there is a directory called RakNetSources, for example cygwin/home/Kevin/android-ndk-r4b/samples/RakNet/jni/RakNetSources Under RakNetSources should be the /Source directory to RakNet. Rather than copy the files I used junction.exe http://technet.microsoft.com/en-us/sysinternals/bb896768.aspx The command I used to create the junction was: D:/cygwin/home/Kevin/android-ndk-r4b/samples/RakNet/jni/junction.exe -s D:/cygwin/home/Kevin/android-ndk-r4b/samples/RakNet/jni/RakNetSources D:/RakNet4/Source  To unjunction I used: D:/cygwin/home/Kevin/android-ndk-r4b/samples/RakNet/jni/junction.exe -d D:/cygwin/home/Kevin/android-ndk-r4b/samples/RakNet/jni/RakNetSources  From within the CYWGIN enviroment, navigate to home/Kevin/android-ndk-r4b/samples/RakNet. Then type ../../ndk-build  Everything should build and you should end up with a .so file. You should then be able to create a project in eclipse, and import cygwin/home/Kevin/android-ndk-r4b/samples/RakNet Native client Solution: RakNet_NativeClient_VS2010. See Samples\nacl_sdk\RakNet_NativeClient_VS2010\HowToSetup.txt for detailed instructions on setup. Windows Phone 8 Example solution: RakNet_WinPhone8_VS2012. Add to your project DependentExtensions\WinPhone8\ThreadEmulation.cpp Add DependentExtensions\WinPhone8\ to your include paths Define _CRT_SECURE_NO_WARNINGS and WINDOWS_PHONE_8 Windows Store 8 Example solution: RakNet_WindowsStore8_VS2012.sln Add to your project DependentExtensions\WinPhone8\ThreadEmulation.cpp Add DependentExtensions\WinPhone8\ and DependentExtensions\WinRT to your include paths TCP is not supported, only UDP (RakPeer). IPV4 only (not hard to also add IPV6 upon request). Define: _CRT_SECURE_NO_WARNINGS WINDOWS_STORE_RT _RAKNET_SUPPORT_TCPInterface=0 _RAKNET_SUPPORT_PacketizedTCP=0 _RAKNET_SUPPORT_EmailSender=0 _RAKNET_SUPPORT_HTTPConnection=0 _RAKNET_SUPPORT_HTTPConnection2=0 _RAKNET_SUPPORT_TelnetTransport=0 _RAKNET_SUPPORT_NatTypeDetectionServer=0 _RAKNET_SUPPORT_UDPProxyServer=0 _RAKNET_SUPPORT_UDPProxyCoordinator=0 _RAKNET_SUPPORT_UDPForwarder=0 Unreal engine See https://udn.epicgames.com/lists/showpost.php?list=unprog3&id=37697&lessthan=&show=20 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OculusVR/RakNet"	"A cross platform, open source, C++ networking engine for game programmers. [BSD]"	"true"
"Networking"	"Silicon"	"http://siliconframework.org/"	"A high performance, middleware oriented C++14 http web framework. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1139"	"71"	"71"	"GitHub - matt-42/silicon: A high performance, middleware oriented C++14 http web framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 71 Star 1,139 Fork 71 matt-42/silicon Code Issues 4 Pull requests 1 Pulse Graphs A high performance, middleware oriented C++14 http web framework http://siliconframework.org 201 commits 5 branches 1 release Fetching contributors C++ 94.7% CMake 2.5% JavaScript 2.3% Shell 0.5% C++ CMake JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 biicode gh-pages master new_apis Nothing to show v0.1 Nothing to show New pull request Latest commit 73dac7f May 18, 2016 matt-42 Fix compilation with the new GCC and CLANG compilers. Permalink Failed to load latest commit information. client_templates Update the javascript client to handle url, get, post parameters. Mar 5, 2016 cmake Fix websocket javascript client. Add FindIod.cmake Mar 20, 2016 examples Fix compilation of ws_broadcast_server. Mar 28, 2016 silicon Fix compilation with the new GCC and CLANG compilers. May 18, 2016 tests Fix compilation with the new GCC and CLANG compilers. May 18, 2016 .gitignore Initial commit Oct 31, 2014 CMakeLists.txt Remove cmake packages. Mar 17, 2016 LICENSE Initial commit Oct 31, 2014 README.md Update Readme. Feb 16, 2015 SiliconConfig.cmake.in Update readme. Add cmake config file. Jan 18, 2015 SiliconConfigVersion.cmake.in Update readme. Add cmake config file. Jan 18, 2015 install.sh Fix compilation with g++. chmod install.sh Feb 16, 2016 README.md The Silicon Web Framework Documentation is hosted on http://siliconframework.org Contributing Contributions are welcome. Silicon can be easily extended with New middlewares New backends (websockets, other non-http protocols) New message formats (messagepack, protobuf, ...) Do not hesitate to fill issues, send pull requests, or contact me at matthieu.garrigues@gmail.com. Donate If you find this project helpful, please consider donating. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/matt-42/silicon"	"A high performance, middleware oriented C++14 http web framework. [MIT]"	"true"
"Networking"	"Tufão"	"https://github.com/vinipsmaker/tufao"	"An asynchronous web framework for C++ built on top of Qt. [LGPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"260"	"60"	"65"	"GitHub - vinipsmaker/tufao: An asynchronous web framework for C++ built on top of Qt Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 260 Fork 65 vinipsmaker/tufao Code Issues 25 Pull requests 1 Wiki Pulse Graphs An asynchronous web framework for C++ built on top of Qt http://vinipsmaker.github.io/tufao/ 635 commits 6 branches 47 releases 11 contributors C++ 78.2% C 19.1% CMake 2.5% Shell 0.2% C++ C CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.x Switch branches/tags Branches Tags 0.x 1.x gh-pages master parse_form_data_uploaded_files threads Nothing to show 1.3.8 1.3.7 1.3.6 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.4 1.2.3 1.2.2 1.2.1 1.2 1.1 1.0.2 1.0.1 1.0 0.8.10 0.8.9 0.8.8 0.8.7 0.8.6 0.8.5 0.8.4 0.8.3 0.8.2 0.8.1 0.8 0.7 0.6.1 0.6 0.5.1 0.5 0.4.2 0.4.1 0.4 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3 0.2.2 0.2.1 0.2 0.1 Nothing to show New pull request Latest commit 3a549f3 Jun 10, 2016 vinipsmaker version 1.3.8 Permalink Failed to load latest commit information. cmake Revert ""removing unused cmake file"" Apr 12, 2015 doc Add logo to generated documentation Mar 21, 2013 examples fix example: different parent in threads-with-router Oct 20, 2014 include Initial implementation on ClassHandler Dec 12, 2013 pkg chore/prf: fix usage of debug version Apr 22, 2016 scripts removed unused script: execute-tests.sh Apr 11, 2013 src fix usage of closed streams in file server Jun 10, 2016 .gitignore Initial implementation on ClassHandler Dec 12, 2013 CMakeLists.txt version 1.3.8 Jun 10, 2016 COPYING Following FSF recommendation to include a copy of the GPL license. Mar 19, 2014 COPYING.LESSER Changed license from LGPLv3 to LGPLv2.1 May 8, 2012 CTestConfig.cmake Integration with CDash. May 21, 2013 HACKING.md HACKING.md: Preparing a release Oct 1, 2013 README.md update README.md Jun 10, 2016 TufaoConfig.cmake.in cmake: use package configuration file instead of find module Mar 28, 2015 tufao_logo.svg Tufão's logo license info added Mar 25, 2013 README.md Tufão - an asynchronous web framework for C++ built on top of Qt Tufão is a web framework for C++ that makes use of Qt's object communication system (signals & slots). It features: High performance standalone server Cross-plataform support Good documentation Support modern HTTP features Persistent streams Chunked entities 100-continue status WebSocket HTTPS support Flexible request router Static file server with support for conditional requests, partial download and automatic mime detection Plugin-based server to allow change the running code without restart the application Flexible and secure session support QtCreator's plugin to allow create new applications rapidly Lots of tests Timeout support C++11 It uses Ryan Dahl's HTTP parser to provide good performance. You can generate documentation from the source code using Doxygen. The documentation will be put on the doc folder in the html and tex formats. There is also experimental support for Qt compressed help files. LICENSE The library is under the LGPLv2 and public header files, documentation and examples are under MIT license. The Tufão logo is licensed under Creative Commons Attribution 3.0 Unported. The library is dynamic linked against Qt and include code from Ryan Dahl's HTTP parser. Qt library is licensed under LGPL and Ryan Dahl's HTTP parser is licensed under MIT license. So, you can create commercial applications (the only restriction is that if you do any modifications to Tufão, these modifications must be redistributed). BUILD Make sure you have Qt and CMake installed and with the PATH to its executables set, then create a folder for the build and, from there, run: $ cmake OPTIONS path_to_source_dir $ make MAKEOPTIONS  OPTIONS can be null or have a combination of the following values: -DCMAKE_INSTALL_PREFIX=${INSTALLDIR} sets the directory where to install Tufão. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_BUILD_TYPE=MinSizeRel -DLIB_SUFFIX=${LIB_SUFFIX} set the suffix for the install destination. If you are compiling Tufão under a 64 bit system using a 32 bit ""environment"", maybe you want to set this variable to 32, then Tufão libs will be installed under ""${INSTALLDIR}/lib32"". This setting is highly dependent on your operating system conventions and I do not try to put any auto magic detection. -DGENERATE_DOC=YES generate documentation using Doxygen -DENABLE_TESTS=YES generate and run tests OPTIONS available on Windows: -G""MinGW Makefiles"" to generate Makefiles for use with MinGW environment -G""Visual Studio 10"" to generate project files for Visual Studio 10 MAKEOPTIONS can be null or have a combination of the following values: install installs Tufão DESTDIR=${PKGDIR} sets the directory where to install Tufão. This options should be used if you intend to package Tufão to set the package directory. To choose another installation directory, see options in OPTIONS, above. Example: $ cmake -DCMAKE_INSTALL_PREFIX=/usr $ make DESTDIR=pkg install  NOTE: Qt 5.0 or later is required for 1.x series. Qt 4.7 or later is required to 0.x series. NOTE: If you intend to create a CPack-based installer, just run: # To create a binary distribution: cpack -C CPackConfig.cmake  # To create a source distribution: cpack -C CPackSourceConfig.cmake  # To create a Windows NSIS-based installer: cpack -GNSIS  Documentation To generate the documentation, just run doxygen using Doxyfile as configuration file and the documentation will be generated in the folder doc. The documentation is available in the following formats: HTML: Always generated. It should be in the doc/html folder. latex: You can use this format to generate a pdf. Just run make inside the doc/latex folder. Qt Compressed Help file: If you have qhelpgenerator binary tool in the system PATH, then the file is generated when you run doxygen and should be in doc/qch/tufao.qch. If you have qhelpgenerator tool installed, but not configured in the system PATH, but still want to generate the documentation in this format, just run the tool using doc/html/index.qhp as input file. Tests Tufão also have a lot of code to test its correctness. These codes are based on QTestLib and generate self-contained executables. There is also some CTest rules and integration with the CMake build. To run the tests, just execute: make tests  Or, if you don't want to use Makefiles: ctest  In Visual Studio, the target RUN_TESTS is created. CTest integrates with CDash to allow developers to centralize the tests result. You can send the results to CDash running the Experimental target: make Experimental  You can see the Tufão testing log at Tufao CDash project's page. INSTALL The default install prefix is /usr/local, if you don't intend to change it, just run, after build: # make install  To install to a different prefix, run: $ cmake -DCMAKE_INSTALL_PREFIX=${DESTDIR} $ make install  NOTE: You may need to run ldconfig after installation depending on your system. USAGE To use Tufão in your Qt projects, just edit your .pro file and add the line: CONFIG += C++11 TUFAO1  You can find some examples in the examples folder. If you're planning to use OS X, then the following line is also required, as reported by some users: QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.7  Tufão has PKG-CONFIG support also. Its module name is 'tufao1'. If you want use Tufão in other build system, just add the compiler option -ltufao1. You can also see Tufão documentation integrated in QtAssistant. NEWS Version 1.3 Added canHandleRequest to HttpFileServer Version 1.2 New class to handle REST api introduced (thanks to Timothy Reaves) The class has its own plugin system, partly incompatible with Tufão's default Tufão's plugin system improved to better track files deletion. It requires no code changes, but you still need to do a one-line change to the config file, because I was worried about backwards compatibility. See HttpPluginServer::setConfig for details Version 1.1 Add ability to ignore a set of SSL errors in WebSocket Documentation updates Bugfix in AbstractHttpServerRequestHandler (thanks to Benjamin Zeller) Updated Ryan Dahl's HTTP parser to version 2.2.1 Version 1.0 The project finally have a logo (made by me in Inkscape) Deprecated API was removed Url and QueryString removed in favor of QUrl Headers refactored to inherit from QMultiHash instead of QMultiMap HttpServerResponse Constructor's options argument is optional now setOptions method added Constructor takes a reference to a QIODevice instead a pointer HttpServerRequest Constructor takes a reference to a QAbstractSocket instead a pointer socket method returns a reference instead a pointer url returns a QUrl data signal was changed and you must use readBody method to access body's content. the upgrade's head data is accessed from the request body from now on now the object auto-disconnects slots from data and end signals right before emit ready setCustomData and customData methods added Now HttpServerRequestRouter use these methods to pass the list of captured texts HttpServer uses reference instead of pointers in several places AbstractHttpServerRequestRouter refactored to explore lambdas features. Tufão's plugin system fully refactored It's using JSON files as configuration AbstractHttpServerRequestHandler::handleRequest It uses references instead pointers It receives 2 arguments instead of 3 One more abstraction to sessions created to explore lambdas WebSocket startServerHandshake is taking references instead pointers LESS POINTERS and MORE REFERENCES This change exposes a model more predictive and natural I'm caring less about Qt style and more about C++ style But don't worry, I'll maintain a balance Using scoped enums HttpFileServer uses/sends mime info Interfaces don't inherit from QObject anymore, so you can use multiple inheritance to make the same class implement many interfaces HttpUpgradeRouter introduced HttpServer::setUpgradeHandler also Updated QtCreator plugin to work with QtCreator 2.7.0 and Qt 5 Version 0.6: HttpServerRequest setUrl added UrlRewriterHandler added HttpUpgradeRouter added headers can be ""streamed"" to QDebug objects Version 0.5: WebSocket peerAddress() method added peerSocket() method added Version 0.4: Using CMake build system Changes to allow parallel Tufão installations (if major versions differs) Added PKGCONFIG support Session support Better documentation Version 0.3 More application templates in QtCreator Tufão's plugin Class to serve static files with support for conditional requests and byte-range requests Robust request router added HTTP plugin server added Using newer version of Ryan Dahl's HTTP parser Changed license from public headers to MIT MSVC support Some minor improvements Version 0.2: Code is more stable Documentation improved HttpServerResponse is easier to use WebSocket support TUFAO_VERSION_MAJOR and TUFAO_VERSION_MINOR macros added QtCreator plugin New examples ROADMAP Here is a small roadmap for Tufão: 1.4: RPC support Service discovery and description support 1.5: Forms and file uploads Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vinipsmaker/tufao"	"An asynchronous web framework for C++ built on top of Qt. [LGPL2]"	"true"
"Networking"	"WebSocket++"	"https://github.com/zaphoyd/websocketpp"	"C++/Boost Asio based websocket client/server library. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1298"	"186"	"473"	"GitHub - zaphoyd/websocketpp: C++ websocket client/server library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 186 Star 1,298 Fork 473 zaphoyd/websocketpp Code Issues 102 Pull requests 23 Wiki Pulse Graphs C++ websocket client/server library http://www.zaphoyd.com/websocketpp 1,603 commits 13 branches 13 releases Fetching contributors C++ 96.1% Python 2.2% CMake 1.7% C++ Python CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.2.x develop experimental flow_control2 legacy master network-streaming permessage-deflate policy-refactor pr/456 processor_logging revert-485-patch-1 tutorials Nothing to show v0.2.2dev 0.7.0 0.6.0 0.6.0-permessage-deflate 0.5.1 0.5.0 0.4.0 0.3.0 0.3.0-alpha4 0.3.0-alpha3 0.3.0-alpha2 0.3.0-alpha1 0.2.3-dev Nothing to show New pull request Latest commit 378437a Feb 22, 2016 Peter Thorson Merge branch 'develop' Permalink Failed to load latest commit information. cmake Fix a few other misc test related things Jan 12, 2016 docs Add FAQ entry Feb 22, 2016 examples Add echo_client example Feb 18, 2016 test update tls version used in tls timer tests Feb 21, 2016 tutorials Initial work on utility_server tutorial Jan 19, 2016 websocketpp Set version flags for release Feb 22, 2016 .gitattributes Fix typo in .gitattributes, fixes #280 Jul 27, 2013 .gitignore Fix a few other misc test related things Jan 12, 2016 .travis.yml more travis updates Dec 17, 2015 CMakeLists.txt Fix a few other misc test related things Jan 12, 2016 COPYING normalize copyright dates and prep release version Nov 4, 2014 Doxyfile Set version flags for release Feb 22, 2016 SConstruct Add echo_client example Feb 18, 2016 changelog.md Set version flags for release Feb 22, 2016 readme.md Set version flags for release Feb 22, 2016 roadmap.md normalize copyright dates and prep release version Nov 4, 2014 websocketpp-config.cmake.in Add websocketpp_found variable May 20, 2013 websocketpp-configVersion.cmake.in Needs to be uppercase Version for case-sensitive systems May 20, 2013 readme.md WebSocket++ (0.7.0) WebSocket++ is a header only C++ library that implements RFC6455 The WebSocket Protocol. It allows integrating WebSocket client and server functionality into C++ programs. It uses interchangeable network transport modules including one based on raw char buffers, one based on C++ iostreams, and one based on Asio (either via Boost or standalone). End users can write additional transport policies to support other networking or event libraries as needed. Major Features Full support for RFC6455 Partial support for Hixie 76 / Hybi 00, 07-17 draft specs (server only) Message/event based interface Supports secure WebSockets (TLS), IPv6, and explicit proxies. Flexible dependency management (C++11 Standard Library or Boost) Interchangeable network transport modules (raw, iostream, Asio, or custom) Portable/cross platform (Posix/Windows, 32/64bit, Intel/ARM/PPC) Thread-safe Get Involved Project Website http://www.zaphoyd.com/websocketpp/ User Manual http://www.zaphoyd.com/websocketpp/manual/ GitHub Repository https://github.com/zaphoyd/websocketpp/ GitHub pull requests should be submitted to the develop branch. Announcements Mailing List http://groups.google.com/group/websocketpp-announcements/ IRC Channel #websocketpp (freenode) Discussion / Development / Support Mailing List / Forum http://groups.google.com/group/websocketpp/ Author Peter Thorson - websocketpp@zaphoyd.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zaphoyd/websocketpp"	"C++/Boost Asio based websocket client/server library. [BSD]"	"true"
"Physics"	"Box2D"	"https://github.com/erincatto/Box2D"	"A 2D physics engine for games. [BSD-like]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1059"	"154"	"249"	"GitHub - erincatto/Box2D: Box2D is a 2D physics engine for games Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 154 Star 1,059 Fork 249 erincatto/Box2D Code Issues 20 Pull requests 2 Wiki Pulse Graphs Box2D is a 2D physics engine for games http://box2d.org 1,125 commits 1 branch 2 releases 4 contributors C 64.4% C++ 32.6% Objective-C 1.5% Objective-C++ 0.5% C# 0.3% CMake 0.3% Other 0.4% C C++ Objective-C Objective-C++ C# CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.3.1 v2.3.0 Nothing to show New pull request Latest commit 374664b Jun 19, 2016 erincatto Win32 build fix Permalink Failed to load latest commit information. Box2D Win32 build fix Jun 19, 2016 Contributions Merge branch 'master' of https://github.com/erincatto/Box2D Apr 9, 2016 .gitignore Fix for issue 407. Reverted a previous bad fix. Also ran Visual Studi… May 11, 2016 README.md Update README.md May 10, 2016 README.md About Box2D is a 2D physics engine for games. For help with Box2D, please visit http://www.box2d.org. There is a forum there where you may post your questions. Please see Building.txt to learn how to build Box2D and run the testbed. To run the demos, set ""Testbed"" as your startup project and press F5. Some test bed commands are: 'r' to reset the current test SPACE to launch a bomb arrow keys to pan 'x' and 'z' to zoom in/out use the mouse to click and drag objects Please do not submit pull requests with new features. Instead, please file an issue first for discussion. For bugs, I prefer detailed bug reports over pull requests. Erin Catto http://www.box2d.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/erincatto/Box2D"	"A 2D physics engine for games. [BSD-like]"	"true"
"Physics"	"Bullet"	"https://github.com/bulletphysics/bullet3"	"A 3D physics engine for games. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1793"	"296"	"544"	"GitHub - bulletphysics/bullet3: Bullet 2.x official repository with optional experimental Bullet 3 GPU rigid body pipeline Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 296 Star 1,793 Fork 544 bulletphysics/bullet3 Code Issues 224 Pull requests 28 Wiki Pulse Graphs Bullet 2.x official repository with optional experimental Bullet 3 GPU rigid body pipeline http://bulletphysics.org 3,951 commits 2 branches 6 releases 47 contributors C++ 90.1% C 7.6% Lua 0.7% CMake 0.7% Objective-C 0.4% Python 0.3% Other 0.2% C++ C Lua CMake Objective-C Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master old_demos Nothing to show 2.83.7 2.83.6 2.83.5 2.83.4 2.83 2.82 Nothing to show New pull request Latest commit 4cbc741 Jul 14, 2016 erwincoumans committed on GitHub Merge pull request #693 from hujiajie/master … [WIP] Suppress compiler warnings. Permalink Failed to load latest commit information. Extras shrink down cube size of BasicDemo 10 times (it looked ginormous in V… Jul 9, 2016 build3 [WIP] Suppress compiler warnings. Jul 12, 2016 data Add kiva_shelf to prepare for picking/grasping task Jul 14, 2016 docs add Bullet logos in the docs/logo folder Aug 12, 2015 examples Merge pull request #698 from matpalm/linkIdFix Jul 14, 2016 src Merge pull request #689 from erwincoumans/master Jul 11, 2016 test prepare robotics learning examples, see examples/RoboticsLearning/b3R… Jul 11, 2016 .travis.yml more travis/python testing fun Jun 21, 2016 AUTHORS.txt added LICENSE.txt and AUTHORS.txt file Apr 23, 2015 BulletConfig.cmake.in Add the old Bullet 2.x obsolete demos, and CMake buildsystem files, a… Dec 19, 2013 CMakeLists.txt [WIP] Suppress compiler warnings. Jul 12, 2016 Doxyfile add Doxyfile May 1, 2015 LICENSE.txt add latex source of Bullet 2.82 quickstart guide, todo: update to cur… Apr 29, 2015 README.md Typos in readme Jun 15, 2016 UseBullet.cmake fix make install, when using CMake Mar 6, 2014 VERSION First draft of btMultiBody serialization, including optional names fo… Jul 9, 2015 appveyor.yml more appveyor fun Nov 24, 2015 build_and_run_cmake.sh move PD control from PhysicsServerCommandProcessor into btMultiBodyJo… Jun 24, 2016 build_and_run_premake.sh move some easy-to-use build files for Mac OSX, Linux and Windows May 21, 2016 build_visual_studio.bat Allow to build PhysicsServer in VR mode, to see the URDF/SDF robots i… Jul 2, 2016 bullet.pc.cmake pkg-config: Fixing regression introduced by e46b7b2 Jun 30, 2016 xcode.command move some easy-to-use build files for Mac OSX, Linux and Windows May 21, 2016 README.md Bullet 2.x including experimental Bullet 3 OpenCL. This is the official repository of Bullet 2.x, moved from http://bullet.googlecode.com It includes the optional work-in-progress Bullet 3 GPU pipeline. The Bullet 2 API will stay default and up-to-date while slowly moving to Bullet 3. The steps towards Bullet 3 are in a nutshell: The old Bullet2 demos are being merged into the examples/ExampleBrowser A new Bullet 3 API is created All Bullet2 functionality is added to Bullet 3. The OpenCL examples in the ExampleBrowser can be enabled using --enable_experimental_opencl You can still use svn or svn externals using the github git repository: use svn co https://github.com/bulletphysics/bullet3/trunk Requirements for Bullet 2 A C++ compiler for C++ 2003. The library is tested on Windows, Linux, Mac OSX, iOS, Android, but should likely work on any platform with C++ compiler. Some optional demos require OpenGL 2 or OpenGL 3, there are some non-graphical demos and unit tests too. Contributors and Coding Style information https://docs.google.com/document/d/1u9vyzPtrVoVhYqQOGNWUgjRbfwfCdIts_NzmvgiJ144/edit Requirements for Bullet 3 The entire collision detection and rigid body dynamics is executed on the GPU. A high-end desktop GPU, such as an AMD Radeon 7970 or NVIDIA GTX 680 or better. We succesfully tested the software under Windows, Linux and Mac OSX. The software currently doesn't work on OpenCL CPU devices. It might run on a laptop GPU but performance will not likely be very good. Note that often an OpenCL drivers fails to compile a kernel. Some unit tests exist to track down the issue, but more work is required to cover all OpenCL kernels. License All source code files are licensed under the permissive zlib license (http://opensource.org/licenses/Zlib) unless marked differently in a particular folder/file. Build instructions for Bullet using premake. You can also use cmake instead. Windows Click on build3/vs2010.bat and open build3/vs2010/0MySolution.sln Linux and Mac OSX gnu make In a terminal type: cd build3  Depending on your system (Linux 32bit, 64bit or Mac OSX) use one of the following lines ./premake4_linux gmake ./premake4_linux64 gmake ./premake4_osx gmake  Then cd gmake make  Mac OSX Xcode Click on build3/xcode4.command or in a terminal window execute ./premake_osx xcode4  Usage The App_ExampleBrowser executables will be located in the bin folder. You can just run it though a terminal/command prompt, or by clicking it. [--start_demo_name=""Demo Name""]     Start with a selected demo   [--enable_experimental_opencl]      Enable some experimental OpenCL examples [--mp4=moviename.mp4]               Create a mp4 movie of the window, requires ffmpeg installed [--mouse_move_multiplier=0.400000]  Set the mouse move sensitivity [--mouse_wheel_multiplier=0.01]     Set the mouse wheel sensitivity [--background_color_red= 0.9]       Set the red component for background color. Same for green and blue. [--fixed_timestep= 0.0]             Use either a real-time delta time (0.0) or a fixed step size (0.016666)  You can use mouse picking to grab objects. When holding the ALT or CONTROL key, you have Maya style camera mouse controls. Press F1 to create a series of screenshots. Hit ESCAPE to exit the demo app. See docs folder for further information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bulletphysics/bullet3"	"A 3D physics engine for games. [zlib]"	"true"
"Physics"	"website"	"http://bulletphysics.org/"	"A 3D physics engine for games. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1793"	"296"	"544"	"GitHub - bulletphysics/bullet3: Bullet 2.x official repository with optional experimental Bullet 3 GPU rigid body pipeline Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 296 Star 1,793 Fork 544 bulletphysics/bullet3 Code Issues 224 Pull requests 28 Wiki Pulse Graphs Bullet 2.x official repository with optional experimental Bullet 3 GPU rigid body pipeline http://bulletphysics.org 3,951 commits 2 branches 6 releases 47 contributors C++ 90.1% C 7.6% Lua 0.7% CMake 0.7% Objective-C 0.4% Python 0.3% Other 0.2% C++ C Lua CMake Objective-C Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master old_demos Nothing to show 2.83.7 2.83.6 2.83.5 2.83.4 2.83 2.82 Nothing to show New pull request Latest commit 4cbc741 Jul 14, 2016 erwincoumans committed on GitHub Merge pull request #693 from hujiajie/master … [WIP] Suppress compiler warnings. Permalink Failed to load latest commit information. Extras shrink down cube size of BasicDemo 10 times (it looked ginormous in V… Jul 9, 2016 build3 [WIP] Suppress compiler warnings. Jul 12, 2016 data Add kiva_shelf to prepare for picking/grasping task Jul 14, 2016 docs add Bullet logos in the docs/logo folder Aug 12, 2015 examples Merge pull request #698 from matpalm/linkIdFix Jul 14, 2016 src Merge pull request #689 from erwincoumans/master Jul 11, 2016 test prepare robotics learning examples, see examples/RoboticsLearning/b3R… Jul 11, 2016 .travis.yml more travis/python testing fun Jun 21, 2016 AUTHORS.txt added LICENSE.txt and AUTHORS.txt file Apr 23, 2015 BulletConfig.cmake.in Add the old Bullet 2.x obsolete demos, and CMake buildsystem files, a… Dec 19, 2013 CMakeLists.txt [WIP] Suppress compiler warnings. Jul 12, 2016 Doxyfile add Doxyfile May 1, 2015 LICENSE.txt add latex source of Bullet 2.82 quickstart guide, todo: update to cur… Apr 29, 2015 README.md Typos in readme Jun 15, 2016 UseBullet.cmake fix make install, when using CMake Mar 6, 2014 VERSION First draft of btMultiBody serialization, including optional names fo… Jul 9, 2015 appveyor.yml more appveyor fun Nov 24, 2015 build_and_run_cmake.sh move PD control from PhysicsServerCommandProcessor into btMultiBodyJo… Jun 24, 2016 build_and_run_premake.sh move some easy-to-use build files for Mac OSX, Linux and Windows May 21, 2016 build_visual_studio.bat Allow to build PhysicsServer in VR mode, to see the URDF/SDF robots i… Jul 2, 2016 bullet.pc.cmake pkg-config: Fixing regression introduced by e46b7b2 Jun 30, 2016 xcode.command move some easy-to-use build files for Mac OSX, Linux and Windows May 21, 2016 README.md Bullet 2.x including experimental Bullet 3 OpenCL. This is the official repository of Bullet 2.x, moved from http://bullet.googlecode.com It includes the optional work-in-progress Bullet 3 GPU pipeline. The Bullet 2 API will stay default and up-to-date while slowly moving to Bullet 3. The steps towards Bullet 3 are in a nutshell: The old Bullet2 demos are being merged into the examples/ExampleBrowser A new Bullet 3 API is created All Bullet2 functionality is added to Bullet 3. The OpenCL examples in the ExampleBrowser can be enabled using --enable_experimental_opencl You can still use svn or svn externals using the github git repository: use svn co https://github.com/bulletphysics/bullet3/trunk Requirements for Bullet 2 A C++ compiler for C++ 2003. The library is tested on Windows, Linux, Mac OSX, iOS, Android, but should likely work on any platform with C++ compiler. Some optional demos require OpenGL 2 or OpenGL 3, there are some non-graphical demos and unit tests too. Contributors and Coding Style information https://docs.google.com/document/d/1u9vyzPtrVoVhYqQOGNWUgjRbfwfCdIts_NzmvgiJ144/edit Requirements for Bullet 3 The entire collision detection and rigid body dynamics is executed on the GPU. A high-end desktop GPU, such as an AMD Radeon 7970 or NVIDIA GTX 680 or better. We succesfully tested the software under Windows, Linux and Mac OSX. The software currently doesn't work on OpenCL CPU devices. It might run on a laptop GPU but performance will not likely be very good. Note that often an OpenCL drivers fails to compile a kernel. Some unit tests exist to track down the issue, but more work is required to cover all OpenCL kernels. License All source code files are licensed under the permissive zlib license (http://opensource.org/licenses/Zlib) unless marked differently in a particular folder/file. Build instructions for Bullet using premake. You can also use cmake instead. Windows Click on build3/vs2010.bat and open build3/vs2010/0MySolution.sln Linux and Mac OSX gnu make In a terminal type: cd build3  Depending on your system (Linux 32bit, 64bit or Mac OSX) use one of the following lines ./premake4_linux gmake ./premake4_linux64 gmake ./premake4_osx gmake  Then cd gmake make  Mac OSX Xcode Click on build3/xcode4.command or in a terminal window execute ./premake_osx xcode4  Usage The App_ExampleBrowser executables will be located in the bin folder. You can just run it though a terminal/command prompt, or by clicking it. [--start_demo_name=""Demo Name""]     Start with a selected demo   [--enable_experimental_opencl]      Enable some experimental OpenCL examples [--mp4=moviename.mp4]               Create a mp4 movie of the window, requires ffmpeg installed [--mouse_move_multiplier=0.400000]  Set the mouse move sensitivity [--mouse_wheel_multiplier=0.01]     Set the mouse wheel sensitivity [--background_color_red= 0.9]       Set the red component for background color. Same for green and blue. [--fixed_timestep= 0.0]             Use either a real-time delta time (0.0) or a fixed step size (0.016666)  You can use mouse picking to grab objects. When holding the ALT or CONTROL key, you have Maya style camera mouse controls. Press F1 to create a series of screenshots. Hit ESCAPE to exit the demo app. See docs folder for further information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bulletphysics/bullet3"	"A 3D physics engine for games. [zlib]"	"true"
"Physics"	"Chipmunk"	"https://github.com/slembcke/Chipmunk2D"	"A fast and lightweight 2D game physics library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"839"	"95"	"185"	"GitHub - slembcke/Chipmunk2D: A fast and lightweight 2D game physics library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 95 Star 839 Fork 185 slembcke/Chipmunk2D Code Issues 19 Pull requests 7 Wiki Pulse Graphs A fast and lightweight 2D game physics library. http://chipmunk2d.net 1,351 commits 7 branches 16 releases 31 contributors C 87.8% Objective-C 7.3% C++ 4.0% Ruby 0.6% CMake 0.2% Makefile 0.1% C Objective-C C++ Ruby CMake Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 6.1.x 6.2.x UnityTemp custom-contact master speculative surfacev Nothing to show Cocos2D-3.0 Chipmunk-7.0.1 Chipmunk-7.0.0 Chipmunk-6.2.2 Chipmunk-6.2.1 Chipmunk-6.2.0 Chipmunk-6.1.5 Chipmunk-6.1.4 Chipmunk-6.1.3 Chipmunk-6.1.2 Chipmunk-6.1.1 Chipmunk-6.1 Chipmunk-6.0.3 Chipmunk-6.0.2 Chipmunk-6.0.1 Chipmunk-6.0.0 Nothing to show New pull request Latest commit dbc983e May 7, 2016 slembcke Merge branch 'master' of github.com:slembcke/Chipmunk2D Permalink Failed to load latest commit information. android Adding an Android ""prebuilt"" Makefile as an example/template/reuse so… Aug 7, 2013 codeblocks Add Code::blocks project file (cbp) for Chipmunk 7, 2 fixes for Apr 25, 2014 demo Enables Chipmunk2D to compile with VS 2015 Dec 11, 2015 doc-src Version numbers. Jul 1, 2015 doc Fix some obsolete example code. May 7, 2016 include/chipmunk Misc refactoring. Oct 29, 2015 msvc Enables Chipmunk2D to compile with VS 2015 Dec 11, 2015 objectivec CP_ALLOW_PRIVATE_ACCESS Oct 28, 2015 scripts Finish the build scripts. Jan 13, 2015 src Misc refactoring. Oct 29, 2015 xcode Adding tvOS Target Mar 28, 2016 .gitignore Enables Chipmunk2D to compile with VS 2015 Dec 11, 2015 CMakeLists.txt Check for an Apple system when defining Mac specific policies Jan 9, 2016 LICENSE.txt Update readme and other text documents. Jun 22, 2015 README.textile Correct the spelling of Xcode in README Feb 16, 2016 TODO.txt Update readme and other text documents. Jun 22, 2015 VERSION.txt Updating version notes. Jul 2, 2015 README.textile NEW IN CHIPMUNK 7 Chipmunk 7 is complete and now includes the ARM NEON optimizations, the autogeometry code, and the mulithreaded solver. The latest programming guide is available. ABOUT: Chipmunk2D is a simple, lightweight, fast and portable 2D rigid body physics library written in C. It’s licensed under the unrestrictive, OSI approved MIT license. My aim is to give 2D developers access to the same quality of physics you find in newer 3D games. I hope you enjoy using Chipmunk2D! FEATURES: Designed specifically for 2D video games. Circle, convex polygon, and beveled line segment collision primitives. Multiple collision primitives can be attached to a single rigid body. Fast broad phase collision detection by using a bounding box tree with great temporal coherence or a spatial hash. Extremely fast impulse solving by utilizing Erin Catto’s contact persistence algorithm. Supports sleeping objects that have come to rest to reduce the CPU load. Support for collision event callbacks based on user definable object types types. Flexible collision filtering system with layers, exclusion groups and callbacks. Can be used to create all sorts of effects like one way platforms or buoyancy areas. (Examples included) Supports nearest point, segment (raycasting), shape and bounding box queries to the collision detection system. Collision impulses amounts can be retrieved for gameplay effects, sound effects, etc. Large variety of joints – easily make vehicles, ragdolls, and more. Joint callbacks. Can be used to easily implement breakable or animated joints. (Examples included) Maintains a contact graph of all colliding objects. Lightweight C99 implementation with no external dependencies outside of the Std. C library. Many language bindings available. Simple, read the documentation and see! Unrestrictive MIT license CONTRACTING: Howling Moon Software (my company) is available for contracting if you want to make the physics in your game really stand out. Given our unique experience with the library, we can help you use Chipmunk to its fullest potential. Feel free to contact us through our webpage: http://howlingmoonsoftware.com/ BUILDING: Mac OS X: There is an included Xcode project file for building the static library and demo application. Alternatively you could use the CMake files or the macstatic.command script inside the xcode/ directory to build a static lib and package up the headers for you. iPhone: A native Objective-C API is included. The Xcode project can build a static library with all the proper compiler settings. Alternatively, you can just run iphonestatic.command in the xcode/ directory. It will build you a fat library compiled as release for the device and debug for the simulator. After running it, you can simply drop the Chipmunk-iOS directory into your iPhone project! UNIXes: A forum user was kind enough to make a set of CMake files for Chipmunk. This will require you to have CMake installed. To build run ‘cmake .’ then ‘make’. This should build a dynamic library, a static library, and the demo application. A number of people have had build errors on Ubuntu due to not having GLUT or libxmu installed. Windows: Visual Studio projects are included in the msvc/ directory. While I try to make sure the MSVC 10 project is up to date, I don’t have MSVC 9 to keep that project updated regularly. It may not work. I’d appreciate a hand fixing it if that’s the case. GET UP TO DATE: If you got the source from a point release download, you might want to consider getting the latest source from GitHub. Bugs are fixed and new features are added regularly. Big changes are done in branches and tested before merging them in it’s rare for the point release downloads to be better or more bug free than the latest code. Head on over to GitHub and experience the future TODAY! (Okay, so maybe it’s not that exciting.) GETTING STARTED: First of all, you can find the C API documentation in the doc/ directory. A good starting point is to take a look at the included Demo application. The demos all just set up a Chipmunk simulation space and the demo app draws the graphics directly out of that. This makes it easy to see how the Chipmunk API works without worrying about the graphics code. You are free to use the demo drawing routines in your own projects, though it is certainly not the recommended way of drawing Chipmunk objects as it pokes around at the undocumented/private APIs of Chipmunk. SUPPORT: The best way to get support is to visit the Chipmunk Forums. There are plenty of people around using Chipmunk on the just about every platform I’ve ever heard of. If you are working on a commercial project and want some more direct help, Howling Moon Software is also available for contracting. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slembcke/Chipmunk2D"	"A fast and lightweight 2D game physics library. [MIT]"	"true"
"Physics"	"website"	"https://chipmunk-physics.net/"	"A fast and lightweight 2D game physics library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Chipmunk2D Physics Chipmunk2D Physics About Chipmunk Downloads Source Documentation Forum Games Contact Chipmunk2D Chipmunk Pro is now free and open source and included in Chipmunk 7! Penguin in a Shopping Cart uses Chipmunk2D to bring smooth and fun motion to his journey. (Video) Reassembly's destructive combat and huge interactive world is driven by Chipmunk2D. Chipmunk2D is the official physics engine of Cocos2d, featuring full Objective-C integration! We have many Cocos2d tutorials both for free and Pro Chipmunk2D. Pentumble creates a physically interactive world in their cross-platform game driven with Chipmunk2D. Chipmunk2D has been used in hundreds of games and on many platforms. and it's awesome Waking Mars brings a lush world to life with the help of Chipmunk2D. Creatures are procedurally animated using joints. Chipmunk2D powers the rigid body dynamics of Feed Me Oil, which reached top spot on the App Store. Quick Links Downloads Chipmunk2D Pro (great for iOS!) Tutorials and Examples Bindings and Ports Games using Chipmunk2D Chipmunk2D Pro Chipmunk2D Pro can save weeks of development time, with flexible licensing options for organizations of any size. Learn how Chipmunk2D Pro can help you. Also, by purchasing Pro, you help us to afford the time that we spend improving Chipmunk2D. Features Chipmunk2D outperforms the competition. Loads of tutorials and examples. Get the code on Github! The Chipmunk2D C library is free and MIT Licensed. Active community with many language bindings available. Community Chipmunk2D has an active community of thousands of users making games for many different platforms. Highly active support forums Bindings for many languages With Chipmunk2D's large collection of examples, you'll be developing games faster and more easily than ever before. Snap! Physics is one completed game example that uses our Objective Chipmunk2D binding. Videos: Chipmunk2D Promo Video Chipmunk2D Physics on Youtube More Logos: Want to throw a logo on your splash screen to show how much you appreciate Chipmunk2D? Frank Condello was gracious enough to make a logo for me. A couple variations are available here. Acknowledgments: Erin Catto: Erin Catto's Box2D code was the most useful reference that I used when creating Chipmunk. His contact persistence algorithm is the main reason why Chipmunk2D is so fast. Optimized Spatial Hashing for Collision Detection of Deformable Objects The best article I could find on spatial hashing. Their hash function seems to perform very well. Nonconvex Rigid Bodies with Stacking My previous implementation was based on this paper. I only implemented part of the algorithm before deciding that something simpler would be better suited for real time. I do use the split elastic solving pass in newer versions of Chipmunk2D however. Physics for Game Developers This book is a good reference for a lot of the math you'll need, but is far from a good reference on implementing a physics engine. Logo by Frank Condello, Chipmunk sillouette by Kelvin Nishikawa Protip: When using Chipmunk, always turn it up to 11. Howling Moon Software © 2013  |  Legal Stuff"	"null"	"null"	"A fast and lightweight 2D game physics library. [MIT]"	"true"
"Physics"	"LiquidFun"	"https://github.com/google/liquidfun"	"A 2D physics engine for games. [BSD-like]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2539"	"240"	"352"	"GitHub - google/liquidfun: 2D physics engine for games Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 240 Star 2,539 Fork 352 google/liquidfun Code Issues 32 Pull requests 4 Pulse Graphs 2D physics engine for games http://google.github.io/liquidfun 2,926 commits 2 branches 3 releases 16 contributors C++ 56.2% C 20.3% JavaScript 13.6% Python 3.2% Shell 1.9% HTML 1.7% Other 3.1% C++ C JavaScript Python Shell HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.1.0 v1.0.0 v0.9.0 Nothing to show New pull request Latest commit 0708ce1 Apr 1, 2015 jsanmiya Merge liquidfun Permalink Failed to load latest commit information. freeglut Merge liquidfun Jul 11, 2014 googletest Defined _VARIADIC_MAX for Windows builds of googletest. Nov 8, 2013 liquidfun Move test to correct location. Apr 1, 2015 Readme.md Fix logo link in Readme.md. Sep 4, 2014 Readme.md LiquidFun Version 1.1.0 Welcome to LiquidFun! LiquidFun is a 2D physics engine for games. Go to our landing page to browse our documentation and see some examples. LiquidFun is an extension of Box2D. It adds a particle based fluid and soft body simulation to the rigid body functionality of Box2D. LiquidFun can be built for many different systems, including Android, iOS, Windows, OS X, Linux, and JavaScript. Please see Box2D/Documentation/Building/ for details. Discuss LiquidFun with other developers and users on the LiquidFun Google Group. File issues on the LiquidFun Issues Tracker or post your questions to stackoverflow.com with a mention of liquidfun. Please see Box2D/Documentation/Building/ to learn how to build LiquidFun and run the testbed. LiquidFun has a logo that you can use, in your splash screens or documentation, for example. Please see the Programmer's Guide for the graphics and further details. For applications on Google Play that integrate this tool, usage is tracked. This tracking is done automatically using the embedded version string (b2_liquidFunVersionString), and helps us continue to optimize it. Aside from consuming a few extra bytes in your application binary, it shouldn't affect your application at all. We use this information to let us know if LiquidFun is useful and if we should continue to invest in it. Since this is open source, you are free to remove the version string but we would appreciate if you would leave it in. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/liquidfun"	"A 2D physics engine for games. [BSD-like]"	"true"
"Physics"	"Newton Dynamics"	"https://github.com/MADEAPPS/newton-dynamics"	"An integrated solution for real time simulation of physics environments. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"182"	"39"	"64"	"GitHub - MADEAPPS/newton-dynamics: Newton Dynamics is an integrated solution for real time simulation of physics environments. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 182 Fork 64 MADEAPPS/newton-dynamics Code Issues 9 Pull requests 0 Wiki Pulse Graphs Newton Dynamics is an integrated solution for real time simulation of physics environments. http://www.newtondynamics.com 2,937 commits 1 branch 2 releases 4 contributors C++ 64.5% C 20.7% HTML 8.5% Groff 1.8% Shell 1.5% Makefile 1.4% Other 1.6% C++ C HTML Groff Shell Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show newton-3.13 newton-3.12 Nothing to show New pull request Latest commit b0c71ec Jun 24, 2016 JulioJerez made global allocator a static local variable … static global variable may have problem with static libraries initializing then out of order.  This happened with the C# plugin for unity Permalink Failed to load latest commit information. CMake refactor cmake build system Aug 25, 2014 applications renamed dotproduct to dotp Jun 18, 2016 coreLibrary_300 made global allocator a static local variable Jun 24, 2016 packages fixed syntax error in cross product Jun 22, 2016 .gitignore fix duplicate function and extensions May 24, 2016 AUTHORS ADDED: Authors file Aug 26, 2014 CMakeLists.txt Improve CMake for timeTracker Mar 26, 2016 LICENSE ADDED: License file Jul 9, 2014 README.md improve readme Apr 12, 2016 autoexp.dat fixed some linux GCC warnings Jun 1, 2015 README.md Newton dynamics is a realistic, cross-platform physics simulation library. It can easily be integrated into games and game engines and provides top of it's class performance and simulation stability. Ongoing developement and a permissive license makes Newton Dynamics a top choice for all kinds of projects from scientific projects to game engines. Links to demos, tutorial, FAQ, etc: https://github.com/MADEAPPS/newton-dynamics/wiki Main project page: http://newtondynamics.com Forums and public discussion: http://newtondynamics.com/forum/index.php Compiling Newton Windows and OSX Project files for Visual Studio and XCode are provided, mainly Newton Core: coreLibrary_300/projects/ packages: packages/projects/ demo sandbox: applications/demosSandbox/projects/ Linux There are Unix makefiles in the project folders mentioned above, but it is highly recommended to use CMake indstead. Newton Core does not have any third party dependencies. For building the demo sandbox the following packages need to be installed: wxWidgets 2.8 or 2.9 Freetype OpenGL GLEW OpenAL TinyXML All of these should be available on any major Linux distribution (with associated -dev or -devel packages). Alternatively they can be found in the folder packages/thirdParty/ and built from source. License Newton Dynamics is licensed under the zlib open source license, with little if any practical difference between them. See LICENSE for the full content of the licenses. Authors Newton Dynamics is a project of Julio Jerez and Alain Suero. See AUTHORS for a full list of contributors. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MADEAPPS/newton-dynamics"	"An integrated solution for real time simulation of physics environments. [zlib]"	"true"
"Physics"	"ODE"	"http://www.ode.org/"	"Open Dynamics Engine - An open source, high performance library for simulating rigid body dynamics. [BSD&LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Open Dynamics Engine - home Copyright © 2000-2006 Russell Smith. Last modified Monday May 28 2007. ODE is an open source, high performance library for simulating rigid body dynamics. It is fully featured, stable, mature and platform independent with an easy to use C/C++ API. It has advanced joint types and integrated collision detection with friction. ODE is useful for simulating vehicles, objects in virtual reality environments and virtual creatures. It is currently used in many computer games, 3D authoring tools and simulation tools. Russell Smith is the original author of ODE. Go to the Wiki The ODE Wiki is now the primary source of information about ODE, as ode.org is infrequently updated. Consult the wiki for the latest documentation. Get the source code here. See the list of applications that are using ODE. Here are the Instructions for building and using ODE. If you don't know what rigid body dynamics is, check out What is a Physics SDK?."	"null"	"null"	"Open Dynamics Engine - An open source, high performance library for simulating rigid body dynamics. [BSD&LGPL]"	"true"
"Physics"	"ofxBox2d"	"https://github.com/vanderlin/ofxBox2d"	"openFrameworks wrapper for Box2D. [BSD-like]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"212"	"28"	"84"	"GitHub - vanderlin/ofxBox2d: Openframework wrapper for box2d Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 212 Fork 84 vanderlin/ofxBox2d Code Issues 18 Pull requests 3 Wiki Pulse Graphs Openframework wrapper for box2d 213 commits 3 branches 0 releases Fetching contributors C++ 97.7% C 1.7% Other 0.6% C++ C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master mouseJoints Nothing to show Nothing to show New pull request Latest commit 4ff6400 Apr 17, 2016 kylemcdonald Merge pull request #105 from danomatika/master … updates for latest OF & a few bug fixes Permalink Failed to load latest commit information. example-Bodies small whitespace fix Apr 5, 2016 example-ComplexPolygon updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-ContactListener updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-CustomData updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-EdgeShape updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-Edges updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-Forces updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-Joint updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-Performance updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-ShapeTexturing updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-Simple updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-TwoWorlds updated all examples: renamed testApp to ofApp, deprecation fixes for… Apr 5, 2016 example-iOS whitespace formatting fix Apr 5, 2016 libs merged, removed static_assert Apr 12, 2015 src added body getWorldPosition(), fixes #99 Apr 5, 2016 .gitignore reorganzied/renamed folder structure to follow ofxAddonTemplate, ofxB… Aug 12, 2012 License.txt Required License and Updated Readme Jul 10, 2013 README.md small readme formatting updates Apr 5, 2016 addon_config.mk don't need explicit ios libs include Apr 5, 2016 ofxaddons_thumbnail.png added (temporary) ofxaddons.com thumbnail for upcoming v2 Aug 13, 2013 README.md ofxBox2d Introduction This is a simple wrapper for Box2d using Openframeworks. The examples below are still in progress, but should be stable for the most part. Please open up a issue if you have suggestions or find bugs. The wrapper is using Box2d version 2.3. Thanks, Todd Instructions When making a vector of objects you need to be careful. You either need to make a vector of pointers of use the shared_ptr object. Everytime you push into the vector circles the object is destroyed and the created. This causing issues for the b2dBody body object owned by Box2d. Incorrect way to store objects. vector <ofxBox2dCircle> circles; ofxBox2dCircle circle; circles.push_back(circle);  Here is the how to create a vector of Box2d objects. // in your header files vector <shared_ptr<ofxBox2dCircle> > circles;  // now add a circle to the vector shared_ptr<ofxBox2dCircle> circle = shared_ptr<ofxBox2dCircle>(new ofxBox2dCircle);  // to grab the pointer you use the get() function of shared_ptr (std::shared_ptr) circle.get()->setPhysics(3.0, 0.53, 0.1); circle.get()->setup(box2d.getWorld(), 100, 100, 10); circles.push_back(circle);  Installation Place ofxBox2d within a folder in the apps folder of the OF dir tree: openframeworks/addons/ofxBox2d  Compatibility The master branch is compatible with the current release of openFrameworks, and the develop branch tries to stay up to date with openFrameworks on GitHub. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vanderlin/ofxBox2d"	"openFrameworks wrapper for Box2D. [BSD-like]"	"true"
"Physics"	"Simbody"	"https://github.com/simbody/simbody"	"High-performance C++ multibody dynamics/physics library for simulating articulated biomechanical and mechanical systems like vehicles, robots, and the human skeleton. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"581"	"111"	"194"	"GitHub - simbody/simbody: High-performance C++ multibody dynamics/physics library for simulating articulated biomechanical and mechanical systems like vehicles, robots, and the human skeleton. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 111 Star 581 Fork 194 simbody/simbody Code Issues 76 Pull requests 11 Wiki Pulse Graphs High-performance C++ multibody dynamics/physics library for simulating articulated biomechanical and mechanical systems like vehicles, robots, and the human skeleton. https://simtk.org/home/simbody 4,548 commits 9 branches 19 releases 30 contributors C++ 88.2% C 11.2% Other 0.6% C++ C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Rotation_xml_serialization_and_recursive_helper appveyor-mingw cmaes-feature develop-4.0 feature_state_serialization_sfinae_fix feature_state_serialization master simbody-3.4 simbody-3.5 Nothing to show Simbody-3.5.3 Simbody-3.5.2 Simbody-3.5.1 Simbody-3.5 Simbody-3.4.1 Simbody-3.4 Simbody-3.3.1 Simbody-3.3 Simbody-3.1 Simbody-3.0.1 Simbody-3.0 Simbody-2.3 Simbody-2.2 SimTKCore-2.1 SimTKCore-2.0 SimTKCore-1.5 SimTKCore-1.0 IVMfinal-0.1 IVMbaseline-0.0 Nothing to show New pull request Latest commit 54c79a7 Jun 7, 2016 sherm1 Add DRC/OSRF Task Space report … The UR10 and Atlas task space control examples were developed as part of a DARPA Robotics Challenge/Open Source Robotics Foundation subcontract. This adds the writeup from that subcontract which provides extensive documentation for the examples. Permalink Failed to load latest commit information. Platform [master] Fixed a bug detecting if file is DLL Nov 5, 2015 SimTKcommon This is a workaround to an apparent optimization bug introduced in 32… Apr 18, 2016 SimTKmath Remove old debug code. Apr 5, 2016 Simbody Merge pull request #508 from chrisdembia/fix_ground_inertia Jun 7, 2016 cmake Clean up the removal of link_libraries. Nov 3, 2015 doc Cleaned up environment variables. Apr 9, 2016 examples Add DRC/OSRF Task Space report Jun 7, 2016 .gitattributes Normalize line endings. Aug 15, 2013 .gitignore Fix comments in gitignore. Feb 2, 2016 .travis.yml Revert ""try not installing lapack (for 14.04 install couldn't find la… Jan 24, 2016 ApiDoxygen.cmake Descreamify cmake commands. Jun 17, 2015 CHANGELOG.md Updated CHANGELOG.md to reflect the compiler and OS evolution number Apr 19, 2016 CMakeLists.txt Updated the required version number for GCC in main CMakeLists.txt Apr 19, 2016 CONTRIBUTING.md [master] Updated the table of contributors with @Gjacquenot Oct 26, 2015 Doxyfile.in Add some missing exclusions to doxygen. Apr 25, 2016 LICENSE.txt Add a "".txt"" suffix to the LICENSE file so that scripts will have an … Dec 7, 2014 README.md Updated documentation : gave details on how to pull a specific release May 22, 2016 SimbodyAPI.html Clean up install doxygen: Dec 15, 2014 SimbodyMainpage.h Reorganize and update Simbody's Doxygen ""main page"". Dec 14, 2014 appveyor.yml Removed test code. Apr 9, 2016 README.md Simbody Simbody is a high-performance, open-source toolkit for science- and engineering-quality simulation of articulated mechanisms, including biomechanical structures such as human and animal skeletons, mechanical systems like robots, vehicles, and machines, and anything else that can be described as a set of rigid bodies interconnected by joints, influenced by forces and motions, and restricted by constraints. Simbody includes a multibody dynamics library for modeling motion in generalized/internal coordinates in O(n) time. This is sometimes called a Featherstone-style physics engine. Simbody provides a C++ API that is used to build domain-specific applications; it is not a standalone application itself. For example, it is used by biomechanists in OpenSim, by roboticists in Gazebo, and for biomolecular research in MacroMoleculeBuilder (MMB). Here's an artful simulation of several RNA molecules containing thousands of bodies, performed with MMB by Samuel Flores: Read more about Simbody at the Simbody homepage. Simple example: a double pendulum Here's some code to simulate and visualize a 2-link chain: #include ""Simbody.h"" using namespace SimTK; int main() {     // Define the system.     MultibodySystem system;     SimbodyMatterSubsystem matter(system);     GeneralForceSubsystem forces(system);     Force::Gravity gravity(forces, matter, -YAxis, 9.8);      // Describe mass and visualization properties for a generic body.     Body::Rigid bodyInfo(MassProperties(1.0, Vec3(0), UnitInertia(1)));     bodyInfo.addDecoration(Transform(), DecorativeSphere(0.1));      // Create the moving (mobilized) bodies of the pendulum.     MobilizedBody::Pin pendulum1(matter.Ground(), Transform(Vec3(0)),             bodyInfo, Transform(Vec3(0, 1, 0)));     MobilizedBody::Pin pendulum2(pendulum1, Transform(Vec3(0)),             bodyInfo, Transform(Vec3(0, 1, 0)));      // Set up visualization.     Visualizer viz(system);     system.addEventReporter(new Visualizer::Reporter(viz, 0.01));      // Initialize the system and state.     State state = system.realizeTopology();     pendulum2.setRate(state, 5.0);      // Simulate for 20 seconds.     RungeKuttaMersonIntegrator integ(system);     TimeStepper ts(system, integ);     ts.initialize(state);     ts.stepTo(20.0); } See Simbody's User Guide for a step-by-step explanation of this example. Features Wide variety of joint, constraint, and force types; easily user-extended. Forward, inverse, and mixed dynamics. Motion driven by forces or prescribed motion. Contact (Hertz, Hunt and Crossley models). Gradient descent, interior point, and global (CMA) optimizers. A variety of numerical integrators with error control. Visualizer, using OpenGL You want to... install Simbody. use Simbody in your own program. view API documentation. learn the theory behind Simbody. extend Simbody. get support at the Simbody Forum. report a bug or suggest a feature. Dependencies Simbody depends on the following: cross-platform building: CMake 2.8.10 or later (3.1.3 or later for Visual Studio). compiler: Visual Studio 2015 (Windows only), gcc 4.9.0 or later (typically on Linux), or Clang 3.4 or later (typically on Mac, possibly through Xcode) linear algebra: LAPACK and BLAS visualization (optional): FreeGLUT, Xi and Xmu API documentation (optional): Doxygen 1.8.6 or later; we recommend at least 1.8.8. Using Simbody Creating your own Simbody-using project with CMake To get started with your own Simbody-using project, check out the cmake/SampleCMakeLists.txt file. Installing Simbody works on Windows, Mac, and Linux. For Windows, you must build from source. For Mac and Linux, you can use a package manager or build from source. In this file, we provide instructions for 5 different ways of installing Simbody: Windows: build from source using Microsoft Visual Studio. Linux or Mac (make): build from source using gcc or Clang with make. Mac (Homebrew): automated build/install with Homebrew. Ubuntu/Debian: install pre-built binaries with apt-get. Windows using MinGW: build from source using MinGW. These are not the only ways to install Simbody, however. For example, on a Mac, you could use CMake and Xcode. C++11 and gcc/Clang Simbody 3.6 and later uses C++11 features (the -std=c++11 flag). Simbody 3.3 and earlier use only C++03 features, and Simbody 3.4 and 3.5 can use either C++03 or C++11; see the SIMBODY_STANDARD_11 CMake variable in these versions. Note that if you want to use the C++11 flag in your own project, Simbody must have been compiled with the C++11 flag as well. Windows using Visual Studio Get the dependencies All needed library dependencies are provided with the Simbody installation on Windows, including linear algebra and visualization dependencies. Download and install Microsoft Visual Studio, version 2015. The Community edition is free and sufficient. By default, Visual Studio 2015 does not provide C++ support; when installing, be sure to select Custom, and check Programming Languages > Visual C++ > Common Tools for Visual C++ 2015. If you have already installed Visual Studio without C++ support, simply re-run the installer and select Modify. Download and install CMake, version 3.1.3 or higher. (optional) If you want to build API documentation, download and install Doxygen, version 1.8.8 or higher. Download the Simbody source code Method 1: Download the source code from https://github.com/simbody/simbody/releases. Look for the highest-numbered release, click on the .zip button, and unzip it on your computer. We'll assume you unzipped the source code into C:/Simbody-source. Method 2: Clone the git repository. Get git. There are many options: Git for Windows(most advanced), TortoiseGit (intermediate; good for TortoiseSVN users), GitHub for Windows (easiest). Clone the github repository into C:/Simbody-source. Run the following in a Git Bash / Git Shell, or find a way to run the equivalent commands in a GUI client: $ git clone https://github.com/simbody/simbody.git C:/Simbody-source $ git checkout Simbody-3.5.3  In the last line above, we assumed you want to build a released version. Feel free to change the version you want to build. If you want to build the latest development version (""bleeding edge"") of Simbody off the master branch, you can omit the checkout line. To see the set of releases and checkout a specific version, you can use the following commands: $ git tag $ git checkout Simbody-X.Y.Z  Configure and generate project files Open CMake. In the field Where is the source code, specify C:/Simbody-source. In the field Where to build the binaries, specify something like C:/Simbody-build, just not inside your source directory. This is not where we will install Simbody; see below. Click the Configure button. When prompted to select a generator, choose either Visual Studio 14 2015 (to build 32-bit binaries) or Visual Studio 14 2015 Win64 (to build 64-bit binaries). Click Finish. Where do you want to install Simbody on your computer? Set this by changing the CMAKE_INSTALL_PREFIX variable. We'll assume you set it to C:/Simbody. If you choose a different installation location, make sure to use yours where we use C:/Simbody below. Play around with the other build options: BUILD_EXAMPLES to see what Simbody can do. On by default. BUILD_TESTING to ensure your Simbody works correctly. On by default. BUILD_VISUALIZER to be able to watch your system move about! If building remotely, you could turn this off. On by default. BUILD_STATIC_LIBRARIES builds the three libraries as static libraries, whose names will end with _static. Off by default. BUILD_TESTS_AND_EXAMPLES_STATIC if static libraries, and tests or examples are being built, creates statically-linked tests/examples. Can take a while to build, and it is unlikely you'll use the statically-linked libraries. BUILD_TESTS_AND_EXAMPLES_SHARED if tests or examples are being built, creates dynamically-linked tests/examples. Unless you know what you're doing, leave this one on. Click the Configure button again. Then, click Generate to make Visual Studio project files. Build and install Open C:/Simbody-build/Simbody.sln in Visual Studio. Select your desired Solution configuration from the drop-down at the top. Debug: debugger symbols; no optimizations (more than 10x slower). Library and visualizer names end with _d. RelWithDebInfo: debugger symbols; optimized. This is the configuration we recommend. Release: no debugger symbols; optimized. Generated libraries and executables are smaller but not faster than RelWithDebInfo. MinSizeRel: minimum size; optimized. May be slower than RelWithDebInfo or Release. You at least want optimized libraries (all configurations but Debug are optimized), but you can have Debug libraries coexist with them. To do this, go through the full installation process twice, once for each configuration. Build the project ALL_BUILD by right-clicking it and selecting Build. Run the tests by right-clicking RUN_TESTS and selecting Build. Make sure all tests pass. You can use RUN_TESTS_PARALLEL for a faster test run if you have multiple cores. (Optional) Build the project doxygen to get API documentation generated from your Simbody source. You will get some warnings if your doxygen version is earlier than Doxygen 1.8.8; upgrade if you can. Install Simbody by right-clicking INSTALL and selecting Build. Play around with examples Within your build in Visual Studio (not the installation): Make sure your configuration is set to a release configuration (e.g., RelWithDebInfo). Right click on one of the targets whose name begins with Example - and select Select as Startup Project. Type Ctrl-F5 to start the program. Set environment variables and test the installation If you are only building Simbody to use it with OpenSim, you can skip this section. Allow executables to find Simbody libraries (.dll's) by adding the Simbody bin/ directory to your PATH environment variable. In the Start menu (Windows 7) or screen (Windows 8), search environment. Select Edit the system environment variables. Click Environment Variables.... Under System variables, click Path, then click Edit. Add C:/Simbody/bin; to the front of the text field. Don't forget the semicolon! Allow Simbody and other projects (e.g., OpenSim) to find Simbody. In the same Environment Variables window: Under User variables for..., click New.... For Variable name, type SIMBODY_HOME. For Variable value, type C:/Simbody. Changes only take effect in newly-opened windows. Close any Windows Explorer or Command Prompt windows. Test your installation by navigating to C:/Simbody/examples/bin and running SimbodyInstallTest.exe or SimbodyInstallTestNoViz.exe. Note: Example binaries are not installed for Debug configurations. They are present in the build environment, however, so you can run them from there. They will run very slowly! Layout of installation How is your Simbody installation organized? bin/ the visualizer and shared libraries (.dll's, used at runtime). doc/ a few manuals, as well as API docs (SimbodyAPI.html). examples/ src/ the source code for the examples. bin/ the examples, compiled into executables; run them! (Not installed for Debug builds.) include/ the header (.h) files; necessary for projects that use Simbody. lib/ ""import"" libraries, used during linking. cmake/ CMake files that are useful for projects that use Simbody. Linux or Mac using make These instructions are for building Simbody from source on either a Mac or on Ubuntu. Check the compiler version Simbody uses recent C++ features, that require a modern compiler. Before installing Simbody, check your compiler version with commands like that: g++ --version clang++ --version In case your compiler is not supported, you can upgrade your compiler. Here are some instructions to upgrade GCC on a Ubuntu 14.04 distribution. $ sudo add-apt-repository ppa:ubuntu-toolchain-r/test $ sudo apt-get update $ sudo apt-get install gcc-4.9 g++-4.9  If one wants to set gcc-4.9 and g++-4.9 as the default compilers, run the following command $ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9  Remember that when having several compilers, CMake flags CMAKE_C_COMPILER and CMAKE_CXX_COMPILER can be used to select the ones desired. For example, Simbody can be configured with the following flags: $ cmake -DCMAKE_C_COMPILER=gcc-4.9 -DCMAKE_CXX_COMPILER=g++-4.9  Get dependencies On a Mac, the Xcode developer package gives LAPACK and BLAS to you via the Accelerate framework. Mac's come with the visualization dependencies. On Ubuntu, we need to get the dependencies ourselves. Open a terminal and run the following commands. Get the necessary dependencies: $ sudo apt-get install cmake liblapack-dev. If you want to use the CMake GUI, install cmake-qt-gui. For visualization (optional): $ sudo apt-get install freeglut3-dev libxi-dev libxmu-dev. For API documentation (optional): $ sudo apt-get install doxygen. Get the Simbody source code There are two ways to get the source code. Method 1: Download the source code from https://github.com/simbody/simbody/releases. Look for the highest-numbered release, click on the .zip button, and unzip it on your computer. We'll assume you unzipped the source code into ~/simbody-source. Method 2: Clone the git repository. Get git. Mac: You might have it already, especially if you have Xcode, which is free in the App Store. If not, one method is to install Homebrew and run brew install git in a terminal. Ubuntu: run sudo apt-get install git in a terminal. Clone the github repository into ~/simbody-source. $ git clone https://github.com/simbody/simbody.git ~/simbody-source $ git checkout Simbody-3.5.3  In the last line above, we assumed you want to build a released version. Feel free to change the version you want to build. If you want to build the latest development version (""bleeding edge"") of Simbody off the master branch, you can omit the checkout line. To see the set of releases and checkout a specific version, you can use the following commands: $ git tag $ git checkout Simbody-X.Y.Z  Configure and generate Makefiles Create a directory in which we'll build Simbody. We'll assume you choose ~/simbody-build. Don't choose a location inside ~/simbody-source. $ mkdir ~/simbody-build $ cd ~/simbody-build  Configure your Simbody build with CMake. We'll use the cmake command but you could also use the interactive tools ccmake or cmake-gui. You have a few configuration options to play with here. If you don't want to fuss with any options, run: $ cmake ~/simbody-source  Where do you want to install Simbody? By default, it is installed to /usr/local/. That's a great default option, especially if you think you'll only use one version of Simbody at a time. You can change this via the CMAKE_INSTALL_PREFIX variable. Let's choose ~/simbody: $ cmake ~/simbody-source -DCMAKE_INSTALL_PREFIX=~/simbody  Do you want the libraries to be optimized for speed, or to contain debugger symbols? You can change this via the CMAKE_BUILD_TYPE variable. There are 4 options: Debug: debugger symbols; no optimizations (more than 10x slower). Library and visualizer names end with _d. RelWithDebInfo: debugger symbols; optimized. This is the configuration we recommend. Release: no debugger symbols; optimized. Generated libraries and executables are smaller but not faster than RelWithDebInfo. MinSizeRel: minimum size; optimized. May be slower than RelWithDebInfo or Release. You at least want optimized libraries (all configurations but Debug are optimized), but you can have Debug libraries coexist with them. To do this, go through the full installation process twice, once for each configuration. It is typical to use a different build directory for each build type (e.g., ~/simbody-build-debug and ~/simbody-build-release). There are a few other variables you might want to play with: BUILD_EXAMPLES to see what Simbody can do. On by default. BUILD_TESTING to ensure your Simbody works correctly. On by default. BUILD_VISUALIZER to be able to watch your system move about! If building on a cluster, you could turn this off. On by default. BUILD_STATIC_LIBRARIES builds the three libraries as static libraries, whose names will end with _static. BUILD_TESTS_AND_EXAMPLES_STATIC if tests or examples are being built, creates statically-linked tests/examples. Can take a while to build, and it is unlikely you'll use the statically-linked libraries. BUILD_TESTS_AND_EXAMPLES_SHARED if tests or examples are being built, creates dynamically-linked tests/examples. Unless you know what you're doing, leave this one on. You can combine all these options. Here's another example: $ cmake ~/simbody-source -DCMAKE_INSTALL_PREFIX=~/simbody -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_VISUALIZER=off  Build and install Build the API documentation. This is optional, and you can only do this if you have Doxygen. You will get warnings if your doxygen installation is a version older than Doxygen 1.8.8. $ make doxygen  Compile. Use the -jn flag to build using n processor cores. For example: $ make -j8  Run the tests. $ ctest -j8  Install. If you chose CMAKE_INSTALL_PREFIX to be a location which requires sudo access to write to (like /usr/local/, prepend this command with a sudo. $ make -j8 install  Just so you know, you can also uninstall (delete all files that CMake placed into CMAKE_INSTALL_PREFIX) if you're in ~/simbody-build. $ make uninstall  Play around with examples From your build directory, you can run Simbody's example programs. For instance, try:     $ ./ExamplePendulum  Set environment variables and test the installation If you are only building Simbody to use it with OpenSim, you can skip this section. Allow executables to find Simbody libraries (.dylib's or so's) by adding the Simbody lib directory to your linker path. On Mac, most users can skip this step. If your CMAKE_INSTALL_PREFIX is /usr/local/, run: $ sudo ldconfig  If your CMAKE_INSTALL_PREFIX is neither /usr/ nor /usr/local/ (e.g., ~/simbody'): Mac: $ echo 'export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:~/simbody/lib' >> ~/.bash_profile  Ubuntu: $ echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/simbody/lib/x86_64-linux-gnu' >> ~/.bashrc  These commands add a line to a configuration file that is loaded every time you open a new terminal. If using Ubuntu, you may need to replace x86_64-linux-gnu with the appropriate directory on your computer. Allow Simbody and other projects (e.g., OpenSim) to find Simbody. Make sure to replace ~/simbody with your CMAKE_INSTALL_PREFIX. Mac: $ echo 'export SIMBODY_HOME=~/simbody' >> ~/.bash_profile  Ubuntu: $ echo 'export SIMBODY_HOME=~/simbody' >> ~/.bashrc  Open a new terminal. Test your installation: $ cd ~/simbody/share/doc/simbody/examples/bin $ ./SimbodyInstallTest # or ./SimbodyInstallTestNoViz  Layout of installation The installation creates the following directories in CMAKE_INSTALL_PREFIX. The directory [x86_64-linux-gnu] only exists if you did NOT install to /usr/local/ and varies by platform. Even in that case, the name of your directory may be different. include/simbody/ the header (.h) files; necessary for projects that use Simbody. lib/[x86_64-linux-gnu]/ shared libraries (.dylib's or .so's). cmake/simbody/ CMake files that are useful for projects that use Simbody. pkgconfig/ pkg-config files useful for projects that use Simbody. simbody/examples/ the examples, compiled into executables; run them! (Not installed for Debug builds.) libexec/simbody/ the simbody-visualizer executable. share/doc/simbody/ a few manuals, as well as API docs (SimbodyAPI.html). examples/src source code for the examples. examples/bin symbolic link to the runnable examples. Mac and Homebrew If using a Mac and Homebrew, the dependencies are taken care of for you. Install Install Homebrew. Open a terminal. Add the Open Source Robotics Foundation's list of repositories to Homebrew: $ brew tap osrf/simulation  Install the latest release of Simbody. $ brew install simbody  To install from the master branch instead, append --HEAD to the command above. Where is Simbody installed? Simbody is now installed to /usr/local/Cellar/simbody/<version>/, where <version> is either the version number (e.g., 3.5.3), or HEAD if you specified --HEAD above. Some directories are symlinked (symbolically linked) to /usr/local/, which is where your system typically expects to find executables, shared libraries (.dylib's), headers (.h's), etc. The following directories from the Simbody installation are symlinked: include/simbody -> /usr/local/include/simbody lib -> /usr/local/lib share/doc/simbody -> /usr/local/share/doc/simbody Layout of installation What's in the /usr/local/Cellar/simbody/<version>/ directory? include/simbody/ the header (.h) files; necessary for projects that use Simbody. lib/ shared libraries (.dylib's), used at runtime. cmake/simbody/ CMake files that are useful for projects that use Simbody. pkgconfig/ pkg-config files useful for projects that use Simbody. simbody/examples/ the examples, compiled into executables; run them! (Not installed for Debug builds.) libexec/simbody/ the simbody-visualizer executable. share/doc/simbody/ a few manuals, as well as API docs (SimbodyAPI.html). examples/src source code for the examples. examples/bin symbolic link to executable examples. Ubuntu and apt-get Starting with Ubuntu 15.04, Simbody is available in the Ubuntu (and Debian) repositories. You can see a list of all simbody packages for all Ubuntu versions at the Ubuntu Packages website. The latest version of Simbody is usually not available in the Ubuntu repositories; the process for getting a new version of Simbody into the Ubuntu repositories could take up to a year. Install Open a terminal and run the following command: $ sudo apt-get install libsimbody-dev libsimbody-doc  Layout of installation Simbody is installed into the usr/ directory. The directory [x86_64-linux-gnu] varies by platform. usr/include/simbody/ the header (.h) files; necessary for projects that use Simbody. usr/lib/[x86_64-linux-gnu] shared libraries (.so's). cmake/simbody/ CMake files that are useful for projects that use Simbody. pkgconfig/ pkg-config files useful for projects that use Simbody. usr/libexec/simbody/ the simbody-visualizer executable. usr/share/doc/simbody/ a few manuals, as well as API docs (SimbodyAPI.html). examples/src source code for the examples. examples/bin symbolic link to executable examples. Windows using MinGW Warning: The MinGW generation and build is experimental! This build is still experimental, because of : the various MinGW versions available (Thread model, exception mechanism) the compiled libraries Simbody depends on (Blas, Lapack and optionnaly glut). Below are three sections that gives a list of supported versions, command line instructions, and reasons why is it not so obvious to use MinGW. Supported MinGW versions If you do not want to go into details, you need a MinGW version with : a Posix thread model and Dwarf exception mechanism on a 32 bit computer a Posix thread model and SJLJ exception mechanism on a 64 bit computer Other versions are supported with additional configurations. The table below lists the various versions of MinGW versions tested: OS Thread Exception Comment URL 1 64 Bits Posix SJLJ All features supported, all binary included (Recommended version) MinGW64 project GCC 5.2.0 2 64 Bits Posix SEH Needs to be linked against user's Blas and Lapack MinGW64 project GCC 5.2.0 3 32 Bits Posix Dwarf No visualization, all binary included MinGW64 project GCC 5.2.0 4 32 Bits Posix SJLJ No visualization, needs to be linked against user's Blas and Lapack MinGW64 project GCC 5.2.0 We recommend to use the first configuration where all features are supported and does not need additional libraries to compile and run. The URL allows to download directly this version. The second version needs to be linked against user's Blas and Lapack (A CLI example is given below). Blas and Lapack sources can be downloaded from netlib. For the 3rd and 4th versions that run that target a 32 bit behaviour, visualization is not possible for the time being. (It is due to a compile and link problem with glut). Moreover for the 4th one, one needs to provide Blas and Lapack libraries. Please note that only Posix version of MinGW are supported. If your version is not supported, CMake will detect it while configuring and stops. Instructions Below are some examples of command line instructions for various cases. It is assumed you are running commands from a build directory, that can access Simbody source with a command cd ..\simbody. It is recommended to specify with the installation directory with flag CMAKE_INSTALL_PREFIX (e.g. -DCMAKE_INSTALL_PREFIX=""C:\Program Files\Simbody""). If not used, the installation directory will be C:\Program Files (x86)\Simbody on a 64 bit computer. This might be confusing since it is the 32 bit installation location. Example of instructions where one uses Blas and Lapack libraries provided (to be used in a Windows terminal, where MinGW is in the PATH): rem CMake configuration cmake ..\simbody -G ""MinGW Makefiles"" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=""C:\Program Files\Simbody"" rem Compilation mingw32-make rem Test mingw32-make test rem Installation mingw32-make install  Example of instructions where one uses Blas and Lapack libraries provided (to be used in a Windows terminal, where MinGW is NOT in the PATH): rem Variable and path definition set CMAKE=""C:\Program Files\CMake\bin\cmake.exe"" set MinGWDir=C:\Program Files\mingw-w64\i686-5.2.0-posix-sjlj-rt_v4-rev0\mingw32 set PATH=%MinGWDir%\bin;%MinGWDir%\i686-w64-mingw32\lib rem CMake configuration %CMAKE% ..\simbody -G""MinGW Makefiles"" -DCMAKE_BUILD_TYPE=Release ^  -DCMAKE_INSTALL_PREFIX=""C:\Program Files\Simbody"" ^  -DCMAKE_C_COMPILER:PATH=""%MinGWDir%\bin\gcc.exe"" ^  -DCMAKE_CXX_COMPILER:PATH=""%MinGWDir%\bin\g++.exe"" ^  -DCMAKE_MAKE_PROGRAM:PATH=""%MinGWDir%\bin\mingw32-make.exe"" rem Compilation mingw32-make rem Test mingw32-make test rem Installation mingw32-make install  Example of instructions where one uses Blas and Lapack libraries provided (to be used in a MSYS terminal with MinGW in the PATH): # CMake configuration cmake ../simbody -G ""MSYS Makefiles"" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=""C:\Program Files\Simbody"" # Compilation make # Test make test # Installation make install  Example of instructions where one provides our own Blas and Lapack libraries (to be used in a MSYS terminal with MinGW in the PATH): # CMake configuration cmake ../simbody -G""MSYS Makefiles"" -DCMAKE_BUILD_TYPE=Release \ -DCMAKE_INSTALL_PREFIX=""C:\Program Files\Simbody"" \ -DCMAKE_C_COMPILER:PATH=""C:\Program Files\mingw-w64\i686-5.2.0-posix-sjlj-rt_v4-rev0\mingw32\bin\gcc.exe"" \ -DCMAKE_CXX_COMPILER:PATH=""C:\Program Files\mingw-w64\i686-5.2.0-posix-sjlj-rt_v4-rev0\mingw32\bin\g++.exe"" \ -DBUILD_USING_OTHER_LAPACK:PATH=""C:\Program Files\lapack-3.5.0\bin\liblapack.dll;C:\Program Files\lapack-3.5.0\bin\libblas.dll"" make # Test make test # Installation make install  MinGW details This paragraph explains the reason why one can not use any MinGW version. MinGW is available with two thread models : Win32 thread model Posix thread model One has to use the Posix thread model, since all thread functionalities (e.g. std:mutex) are not implemented. To ease building on Windows, Simbody provides compiled libraries for Blas and Lapack : On Windows 32 Bits, these were compiled with a Dwarf exception mechanism, On Windows 64 Bits, these were compiled with a SJLJ exception mechanism. If one chooses a MinGW compilation, we need to respect this exception mechanism. A program can not rely on both mechanisms. This means that if we want to use the compiled libraries, our MinGW installation should have the same exception mechanism. Otherwise, we need to provide our own Blas and Lapack libraries. To see which exception mechanism is used, user can look at dlls located in the bin directory of MinGW. The name of mechanism is present in the file libgcc_XXXX.dll, where XXXX can be dw, seh or sjlj. For some MinGW versions, this information is also available by looking at the result of gcc --version. CMake will check the version of your MinGW, and if the exception mechanism is different, then the configuration stops because of this difference. If one provides Blas and Lapack libraries with the CMake variable BUILD_USING_OTHER_LAPACK, compilation with MinGW is always possible. Acknowledgments We are grateful for past and continuing support for Simbody's development in Stanford's Bioengineering department through the following grants: NIH U54 GM072970 (Simulation of Biological Structures) NIH U54 EB020405 (Mobilize Center) NIH R24 HD065690 (Simulation in Rehabilitation Research) OSRF subcontract 12-006 to DARPA HR0011-12-C-0111 (Robotics Challenge) Prof. Scott Delp is the Principal Investigator on these grants and Simbody is used extensively in Scott's Neuromuscular Biomechanics Lab as the basis for the OpenSim biomechanical simulation software application for medical research. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/simbody/simbody"	"High-performance C++ multibody dynamics/physics library for simulating articulated biomechanical and mechanical systems like vehicles, robots, and the human skeleton. [Apache2]"	"true"
"Robotics"	"MOOS-IvP"	"http://moos-ivp.org/"	"A set of open source C++ modules for providing autonomy on robotic platforms, in particular autonomous marine vehicles."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"null"	"null"	"A set of open source C++ modules for providing autonomy on robotic platforms, in particular autonomous marine vehicles."	"true"
"Robotics"	"MRPT"	"http://www.mrpt.org/"	"Mobile Robot Programming Toolkit. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"198"	"55"	"176"	"GitHub - MRPT/mrpt: The Mobile Robot Programming Toolkit (MRPT) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 198 Fork 176 MRPT/mrpt Code Issues 17 Pull requests 0 Wiki Pulse Graphs 🔧 The Mobile Robot Programming Toolkit (MRPT) http://www.mrpt.org/ 3,516 commits 4 branches 18 releases 36 contributors C++ 71.7% C 26.0% CMake 1.0% Shell 0.6% Makefile 0.6% Objective-C 0.1% C++ C CMake Shell Makefile Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0-devel master nav-devel ptg-holo-fix-Tramp Nothing to show 1.4.0 1.3.2 1.3.1 1.3.0 1.2.2 1.2.1 1.2.0 1.1.0 1.0.2 1.0.1 1.0.0 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 Nothing to show New pull request Latest commit f0cd650 Jul 15, 2016 jlblancoc committed on GitHub Merge pull request #293 from bergercookie/mrpt_var_fixes … Add *_IMPEXP for Windows support Permalink Failed to load latest commit information. .github Create PULL_REQUEST_TEMPLATE.md Mar 10, 2016 apps Move COutputLogger.* to their respective libs/base/utils directories Jul 14, 2016 cmakemodules Merge branch 'master' into ptg-refactor-dev Jun 17, 2016 doc Add recursive mutex class (and used where it makes sense) Jul 12, 2016 libs Add *_IMPEXP for Windows support Jul 15, 2016 mex Build dates now follow SOURCE_DATE_EPOCH specs Feb 6, 2016 otherlibs simplify CMake notation (Closes #254) Jun 5, 2016 packaging update changelog debian 1.4.0-3 Jul 10, 2016 parse-files simplify CMake notation (Closes #254) Jun 5, 2016 python Update bindings.h May 17, 2016 samples Merge branch 'master' into ptg-refactor-dev Jun 17, 2016 scripts Progress with holo PTG; further refactoring of common PTG methods Jun 20, 2016 share refactor of reactivenav parameters loading, unifying 2D/3D reactive c… Jul 6, 2016 tests fix warnings and unit tests Jun 27, 2016 .gitignore fix navlog generation & loading Jun 15, 2016 .travis.sh travis sh typo May 30, 2016 .travis.yml install gdb in travis tests May 29, 2016 AUTHORS Update AUTHORS Jun 8, 2016 CMakeLists.txt re-enabled /Zm flag for VS2012 (sigh) Jul 6, 2016 README.md Update README.md Mar 3, 2016 kinect-win32-driver.txt Simplification of the root directory. Mar 11, 2014 package.xml add explanation about the file package.xml May 12, 2016 version_prefix.txt Mark next version as 1.5.0 (for ABI & API changes) May 2, 2016 README.md The MRPT project 1. Introduction Mobile Robot Programming Toolkit (MRPT) provides C++ libraries aimed at researchers in mobile robotics and computer vision. Libraries include SLAM solutions, 3D(6D) geometry, SE(2)/SE(3) Lie groups, probability density functions (pdfs) over points, landmarks, poses and maps, Bayesian inference (Kalman filters, particle filters), image processing, obstacle avoidance, etc. MRPT also provides GUI apps for Stereo camera calibration, dataset inspection, and much more. 2. Resources Download the latest unstable code with: git clone https://github.com/MRPT/mrpt.git --depth 1 Ask questions at: this Google group or at stackoverflow (please, use the tag mrpt!) Main project website, including sources and Windows installer downloads C++ API reference Bindings documentation (Python, Matlab) Source code for dozens of examples Example configuration files for MRPT applications can be found at: MRPT/share/mrpt/config_files Some sample datasets are stored in: MRPT/share/mrpt/datasets. A more complete dataset repository is available online. How to contribute with your code for new feaures, bug fixes, etc. 3. Compiling 3.1 FIVE SECONDS INSTRUCTIONS Invoke cmake-gui and select: Where source is --> MRPT source root directory Where to build binaries --> Pick a new, empty directory. If your platform doesn't support cmake-gui, open a console, chdir to a new empty directory and execute: $ ccmake <PATH_TO_MRPT_SOURCES>  Within cmake-gui (or ccmake), set all the build options as you desire, then press ""Configure"" and ""Generate"". To build the examples, enable BUILD_SAMPLES. Build with the IDE / compiler you selected from CMake (Visual Studio, GNU Make,...) 3.2. Further details (RECOMMENDED!) Read the compiling instructions. 4. License MRPT is released under the new BSD license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MRPT/mrpt"	"Mobile Robot Programming Toolkit. [BSD]"	"true"
"Robotics"	"PCL"	"https://github.com/PointCloudLibrary/pcl"	"Point Cloud Library is a standalone, large scale, open project for 2D/3D image and point cloud processing [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1200"	"273"	"1342"	"GitHub - PointCloudLibrary/pcl: Point Cloud Library (PCL) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 273 Star 1,200 Fork 1,342 PointCloudLibrary/pcl Code Issues 177 Pull requests 68 Wiki Pulse Graphs Point Cloud Library (PCL) http://www.pointclouds.org 9,933 commits 1 branch 28 releases 237 contributors C++ 92.5% Cuda 4.4% CMake 2.1% C 0.9% Python 0.1% Shell 0.0% C++ Cuda CMake C Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show pcl-ros-1.0 pcl-1.8.0 pcl-1.8.0rc2 pcl-1.8.0rc1 pcl-1.7.2 pcl-1.7.2rc2.1 pcl-1.7.2rc2 pcl-1.7.2rc1.1 pcl-1.7.2rc1 pcl-1.7.1 pcl-1.7.0 pcl-1.7.0rc2.1 pcl-1.7.0rc2 pcl-1.7.0rc1 pcl-1.6.0 pcl-1.6.0rc1 pcl-1.5.1 pcl-1.5.0 pcl-1.4.0 pcl-1.3.1 pcl-1.3.0 pcl-1.2 pcl-1.1.2 pcl-1.1.1 pcl-1.1.0 pcl-1.1.0-rc pcl-1.0.1 pcl-1.0.0 Nothing to show New pull request Latest commit 62600ee Jun 30, 2016 SergioRAgostinho committed on GitHub Merge pull request #1580 from morrisf/master … speeding up saving to .obj and .ply Permalink Failed to load latest commit information. .github Add issue template Jun 19, 2016 2d Fix include in 'keypoint.hpp' (2d module) Aug 2, 2014 apps Fix VTK preprocessor directives for newer releases Jan 15, 2016 cmake Merge pull request #1630 from UnaNancyOwen/fix_boost Jun 30, 2016 common Fix geometry::distance + geometry::squaredDistance Mar 3, 2016 cuda Check WITH_* variables instead of *_FOUND and BUILD_* everywhere in C… Aug 23, 2015 doc Updated remove_outliers tutorial Jun 1, 2016 examples fix for Visual Studio 2013 compiler (keyword 'not' does not exist, ui… Feb 16, 2016 features NormalEstimation[OMP] and FPFHEstimation[OMP] were instantiated for d… Jun 29, 2016 filters BugFix: Filters used applyFilter twice. Mar 30, 2016 geometry Jan 29, 2015 gpu Fix compilation on Mac OSX Apr 7, 2016 io Merge pull request #1580 from morrisf/master Jun 30, 2016 kdtree Various doxygen fixes Apr 29, 2014 keypoints brisk_2d does not use the SSE4.1 intrinsic instructions Feb 6, 2016 ml preincrement iterators to avoid the temporary Jan 20, 2015 octree Add missing this-> to OctreePointCloudOccupancy. Dec 3, 2015 outofcore Conditionally compile code that uses vtkVertexBufferObjectMapper Feb 13, 2016 people Check WITH_* variables instead of *_FOUND and BUILD_* everywhere in C… Aug 23, 2015 recognition fixed linemod func memory leak issue Mar 24, 2015 registration Use aligned allocator in vectors of MatchingCandidate Feb 24, 2016 sample_consensus Remove depreciation warning from sample_size_pairs Nov 9, 2015 search Remove deprecated 'register' storage class specifier Nov 17, 2015 segmentation An output parameter was incorrectly marked as an input parameter. Nov 20, 2015 simulation Warning fixes Mar 28, 2015 stereo Fix warnings in stereo/digital_elevation_map.h Jan 18, 2015 surface Adds MLS instantiation for input type PointXYZRGBNormal Feb 20, 2016 test Add test for common::geometry Mar 3, 2016 tools Fix error in print info of transform point cloud. May 10, 2016 tracking Fix occasional seg fault with KLDAdaptiveParticleFilterOMPTracker Oct 20, 2015 visualization Fix compile error C2440 of pcl_visualization on MSVC Jun 16, 2016 .travis.sh Improve Travis script Aug 25, 2015 .travis.yml Add dvipng package to generate math formulas in tutorials Aug 28, 2015 AUTHORS.txt Improve README.md and AUTHORS.txt Feb 16, 2016 CHANGES.md Update changes for 1.8.0 Jun 14, 2016 CMakeLists.txt Add CMake variable and C++ macro VTK_RENDERING_BACKEND_OPENGL_VERSION Feb 13, 2016 CONTRIBUTING.md Add ""License"" section to CONTRIBUTING.md Mar 9, 2014 LICENSE.txt changed base license to point to OP Jun 22, 2012 PCLConfig.cmake.in Merge pull request #1630 from UnaNancyOwen/fix_boost Jun 30, 2016 PCLConfigVersion.cmake.in replacing PCL_(FIND_)VERSION with PACKAGE_(FIND)_VERSION May 27, 2011 README.md Improve README.md and AUTHORS.txt Feb 15, 2016 pcl_config.h.in Add CMake variable and C++ macro VTK_RENDERING_BACKEND_OPENGL_VERSION Feb 13, 2016 README.md Point Cloud Library Continuous integration Description The Point Cloud Library (PCL) is a standalone, large scale, open project for 2D/3D image and point cloud processing. PCL is released under the terms of the BSD license, and thus free for commercial and research use. We are financially supported by a consortium of commercial companies, with our own non-profit organization, Open Perception. We would also like to thank individual donors and contributors that have been helping the project. Compiling Please refer to the platform specific tutorials: Linux Mac OS X Microsoft Windows Documentation Tutorials PCL trunk documentation (generated 2 times a week) Contributing Please read CONTRIBUTING.md. Issues For general questions on how to use the PCL, please use the pcl-users mailing list (do not forget to subscribe before posting). To report issues, please read CONTRIBUTING.md#bug-reports. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PointCloudLibrary/pcl"	"Point Cloud Library is a standalone, large scale, open project for 2D/3D image and point cloud processing [BSD]"	"true"
"Robotics"	"website"	"http://www.pointclouds.org/"	"Point Cloud Library is a standalone, large scale, open project for 2D/3D image and point cloud processing [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PCL - Point Cloud Library (PCL) Point Cloud Library About News Blog Downloads Media Jobs Documentation Contact GSoC'14 What is it? The Point Cloud Library (PCL) is a standalone, large scale, open project for 2D/3D image and point cloud processing. PCL is released under the terms of the BSD license, and thus free for commercial and research use. We are financially supported by a consortium of commercial companies, with our own non-profit organization, Open Perception. We would also like to thank individual donors and contributors that have been helping the project. Quick Links Users: API Documentation / Users forum Developers: Dev Zone / Bug Tracker / Developers forum Latest News Articles NavVis digitizes Deutsches Museum's shipping section, Oct 20, 2014 Deutsches Museum and NavVis present new digitization technology: visitors from around the world can experience museum’s shipping section in 3D. PCL Tutorial and 3DRP-PCL Workshop at IAS 2014, Apr 03, 2014 PCL Tutorial and 3DRP-PCL Workshop at IAS 2014. New Ocular Robotics PCL code sprint, Feb 11, 2014 We are happy to announce a new Ocular Robotics and Open Perception PCL code sprint! PCL-1.7.1 released, Oct 07, 2013 New PCL release 1.7.1 Occipital launches Structure, Sep 26, 2013 Occipital launches Structure, a depth sensor for mobile devices Read more articles Active Code Sprints The list of undergoing code sprints is shown below. See all sprints Latest Job Postings Computer Vision Engineer @ Alces Technology Computer Vision Engineer @ Oculus VR Research Associate in Geomatic Engineering @ University College London, United Kingdom Image Processing Engineer @ NASA Ames Research Center See all jobs Our Youtube channel Google+ Facebook Follow us on Twitter Site map Except where otherwise noted, the PointClouds.org web pages are licensed under Creative Commons Attribution 3.0."	"null"	"null"	"Point Cloud Library is a standalone, large scale, open project for 2D/3D image and point cloud processing [BSD]"	"true"
"Robotics"	"Robotics Library (RL)"	"http://www.roboticslibrary.org/"	"A self-contained C++ library for robot kinematics, motion planning and control. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Robotics Library Home Download API Tutorials FAQ Visualize complex scenarios and synchronize with kinematics and sensor data. C++ library for robotics The Robotics Library (RL) is a self-contained C++ library for robot kinematics, motion planning and control. It covers mathematics, kinematics and dynamics, hardware abstraction, motion planning, collision detection, and visualization. It is being used by several research projects (e.g., JAHIR, JAMES, JAST, SMErobotics) and in education, available under a BSD license, and free for use in commercial applications. RL can be run on all machines from real-time patched Linux to Windows desktop PCs. It uses CMake as a build system, may be compiled with GCC and Visual Studio. Test for collisions and solve complex path planning queries. Getting started Windows installation is now easily done with an installer that also includes binaries of external dependencies. Ubuntu package installation is by far the most convenient way to try out RL. You can add the Launchpad respository, install the latest version within your package manager and run the examples. Follow the tutorials and learn how to develop with RL once it is installed. Calculate kinematics and dynamics with support for tree-like structures. Further reading Watch a video of a simple path planning example and a video of a robot workspace research scenario Have a look at the API documentation and the frequently asked questions (FAQ). Build RL from source on your system by downloading the latest source files from SourceForge and following the building instructions for Windows or Ubuntu. Home Download API Tutorials FAQ RL on GitHub RL on Launchpad RL on SourceForge RL on Twitter RL on YouTube First Steps with RL on Linux First Steps with RL on Windows Install RL on Ubuntu Install RL on Windows License Documentation Bugtracker Contact"	"null"	"null"	"A self-contained C++ library for robot kinematics, motion planning and control. [BSD]"	"true"
"Robotics"	"RobWork"	"http://www.robwork.dk/jrobwork/"	"A collection of C++ libraries for simulation and control of robot systems. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A collection of C++ libraries for simulation and control of robot systems. [Apache2]"	"false"
"Robotics"	"ROS"	"http://wiki.ros.org/"	"Robot Operating System provides libraries and tools to help software developers create robot applications. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Documentation - ROS Wiki About | Support | Status | answers.ros.org Search: Documentation Wiki Distributions ROS/Installation ROS/Tutorials RecentChanges Documentation Page Immutable Page Comments Info Attachments More Actions: Raw Text Print View Render as Docbook Delete Cache ------------------------ Check Spelling Like Pages Local Site Map ------------------------ Rename Page Copy Page Delete Page ------------------------ My Pages Subscribe User ------------------------ Remove Spam Revert to this revision Package Pages Sync Pages ------------------------ CreatePdfDocument Load RawFile Save SlideShow User Login ROS (Robot Operating System) provides libraries and tools to help software developers create robot applications. It provides hardware abstraction, device drivers, libraries, visualizers, message-passing, package management, and more. ROS is licensed under an open source, BSD license. Available Translations: German | Spanish | French | Italian | Japanese | Korean | Brazilian Portuguese | Portuguese | Русский (Russian) | Thai | Turkish | Chinese (Simplified) ROS: Install Install ROS on your machine. Getting Started Learn about various concepts, client libraries, and technical overview of ROS. Tutorials Step-by-step instructions for learning ROS hands-on Contribute How to get involved with the ROS community, such as submitting your own repository. Support What to do if something doesn't work as expected. Software: Distributions View the different release Distributions for ROS. Packages Search the 2000+ software libraries available for ROS. Core Libraries APIs by language and topic. Common Tools Common tools for developing and debugging ROS software. Robots/Hardware: Robots Robots that you can use with ROS. Sensors Sensor drivers for ROS. Publications, Courses, and Events: Papers Published papers with open source implementations available. Books Published books with documentation and tutorials with open source code available. Courses Courses using or teaching ROS. Events Past events and materials based on ROS. There are several mirrors of this wiki for use around the world Wiki: Documentation (last edited 2016-01-11 15:58:47 by IsaacSaito) Except where otherwise noted, the ROS wiki is licensed under the Creative Commons Attribution 3.0 | Find us on Google+"	"null"	"null"	"Robot Operating System provides libraries and tools to help software developers create robot applications. [BSD]"	"true"
"Scientific Computing"	"FFTW"	"http://www.fftw.org/"	"A C library for computing the DFT in one or more dimensions. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"643"	"97"	"197"	"GitHub - FFTW/fftw3: This is the official repository for the FFTW Fourier transform library, version 3.x Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 97 Star 643 Fork 197 FFTW/fftw3 Code Issues 16 Pull requests 3 Wiki Pulse Graphs This is the official repository for the FFTW Fourier transform library, version 3.x 2,984 commits 2 branches 11 releases 8 contributors C 73.6% OCaml 13.6% C++ 4.7% Makefile 3.3% M4 3.2% Perl 0.9% Shell 0.7% C OCaml C++ Makefile M4 Perl Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags experimental-simd master Nothing to show fftw-3.3.4 fftw-3.3.3 fftw-3.3.2 fftw-3.3.1 fftw-3.3 fftw-3.2.1 fftw-3.2 fftw-3.1.1 fftw-3.1 fftw-3.0.1 fftw-3.0 Nothing to show New pull request Latest commit 2ed010c Jun 5, 2016 matteo-frigo Clean up some int<->size_t confusion Permalink Failed to load latest commit information. api Clean up some int<->size_t confusion Jun 5, 2016 dft Cast Police Jun 4, 2016 doc Clarify ambiguous/wrong documentation of halfcomplex output format. Mar 13, 2016 genfft Cleanup Jan 20, 2016 kernel Integral Type Police Jun 4, 2016 libbench2 Integral Type Police Jun 5, 2016 m4 Added Power8 VSX SIMD support Mar 28, 2015 mpi Integral Type Police Jun 5, 2016 rdft Integral Type Police Jun 5, 2016 reodft copyright year update Mar 4, 2014 simd-support Clean up some int<->size_t confusion Jun 5, 2016 simd git rm *~ Jun 28, 2014 support In maintainer mode, detect whether 'indent' is available and is GNU i… Apr 13, 2015 tests Integral Type Police Jun 5, 2016 threads rm hooks api's, add fftw_make_planner_thread_safe() api May 25, 2015 tools fix #29 Jan 30, 2015 .gitignore Make 128/256 bit generic simd separate options Apr 8, 2015 AUTHORS fix typo Sep 20, 2013 CONVENTIONS added K Mar 1, 2003 COPYING Store GPLv2 in darcs because automake installs GPLv3 these days. Nov 5, 2008 COPYRIGHT copyright year update Mar 4, 2014 Makefile.am Turn AVX-128 into AMD-specific AVX-128-FMA May 26, 2015 NEWS Added Power8 VSX SIMD support Mar 28, 2015 README Clarify how to bootstrap fftw from the git repository Sep 8, 2015 README.md add README.md for github's convenience Mar 17, 2013 TODO Add TODO's May 25, 2015 bootstrap.sh Use ocamlbuild for building genfft May 8, 2011 commercialize.sh note that these scripts are not meant for normal users Mar 17, 2013 configure.ac Enable SSE2 automatically with AVX,AVX2, or AVX512. May 26, 2015 fftw.pc.in make -lm a private library in fftw.pc.in Dec 4, 2012 mkdist.sh note that these scripts are not meant for normal users Mar 17, 2013 README.md This is the official git repository for the FFTW library for computing Fourier transforms (version 3.x). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FFTW/fftw3"	"A C library for computing the DFT in one or more dimensions. [GPL]"	"true"
"Scientific Computing"	"GSL"	"http://www.gnu.org/software/gsl/"	"GNU scientific library. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GSL - GNU Scientific Library - GNU Project - Free Software Foundation Skip to main text Set language English [en] The  9th HACKERS MEETING  will be held in Rennes (France) from August 18 to 20. JOIN THE FSF Free Software Supporter GNU Operating System Sponsored by the Free Software Foundation About GNU Philosophy Licenses Education = Software = Documentation Help GNU GSL - GNU Scientific Library Introduction The GNU Scientific Library (GSL) is a numerical library for C and C++ programmers. It is free software under the GNU General Public License. The library provides a wide range of mathematical routines such as random number generators, special functions and least-squares fitting. There are over 1000 functions in total with an extensive test suite. The complete range of subject areas covered by the library includes, Complex Numbers Roots of Polynomials Special Functions Vectors and Matrices Permutations Sorting BLAS Support Linear Algebra Eigensystems Fast Fourier Transforms Quadrature Random Numbers Quasi-Random Sequences Random Distributions Statistics Histograms N-Tuples Monte Carlo Integration Simulated Annealing Differential Equations Interpolation Numerical Differentiation Chebyshev Approximation Series Acceleration Discrete Hankel Transforms Root-Finding Minimization Least-Squares Fitting Physical Constants IEEE Floating-Point Discrete Wavelet Transforms Basis splines Running Statistics Sparse Matrices and Linear Algebra Unlike the licenses of proprietary numerical libraries the license of GSL does not restrict scientific cooperation. It allows you to share your programs freely with others. Downloading GSL The current stable version is GSL-2.1. It was released on 11 November 2015. Details of recent changes can be found in the NEWS file. GSL can be found in the gsl subdirectory on your nearest GNU mirror http://ftpmirror.gnu.org/gsl/. Main GNU ftp site: ftp://ftp.gnu.org/gnu/gsl/ For other ways to obtain GSL, please read How to get GNU Software Installation instructions can be found in the included README and INSTALL files. Precompiled binary packages are included in most GNU/Linux distributions. A compiled version of GSL is available as part of Cygwin on Windows (but we recommend using GSL on a free operating system, such as GNU/Linux). Verifying GSL Signature To verify the signature of the GSL tarball, please download both the gsl-X.Y.tar.gz and gsl-X.Y.tar.gz.sig files. The key used to sign the official releases can be found here. The signature can be verified with the following steps:  gpg --import gsl_key.txt gpg --verify gsl-X.Y.tar.gz.sig  Documentation GSL includes a 500 page reference manual in Texinfo format. You can print the manual in postscript or read it on your system using the shell command info gsl-ref (if the library is installed). The GSL Reference Manual is available online, GSL Reference Manual - HTML GSL Reference Manual - PDF GSL Reference Manual - Gzipped Postscript The manual has been published as a printed book (under the GNU Free Documentation License), the latest edition is GNU Scientific Library Reference Manual - Third Edition (January 2009), M. Galassi et al, ISBN 0954612078 (paperback) RRP $39.95. See www.network-theory.co.uk for ordering information. A Japanese translation is also available online (may not be the most recent version). GSL Reference Manual - Japanese Translation (by Daisuke Tominaga, AIST Computational Biology Research Center) A Portuguese translation is also available online. GSL Reference Manual - Portuguese Translation (by Jorge Barros de Abreu) Supported Platforms GSL is developed on the following platform, GNU/Linux with gcc It has been reported to compile on the following other platforms, SunOS 4.1.3 & Solaris 2.x (Sparc) Alpha GNU/Linux, gcc HP-UX 9/10/11, PA-RISC, gcc/cc IRIX 6.5, gcc m68k NeXTSTEP, gcc Compaq Alpha Tru64 Unix, gcc FreeBSD, OpenBSD & NetBSD, gcc Cygwin Apple Darwin 5.4 Hitachi SR8000 Super Technical Server, cc We require that GSL should build on any UNIX-like system with an ANSI C compiler, so if doesn't, that's a bug and we would love a patch! The complete library should also pass ""make check"". If you have found a bug, please report it to bug-gsl@gnu.org. Previously submitted bug reports can be found in the bug-gsl mailing list archives and the GSL bug database. Mailing Lists Follow the links to the individual mailing lists below to subscribe or view the list archives: Bug-gsl <bug-gsl@gnu.org> mailing list -- bug reports for the GNU Scientific Library should be sent here Help-gsl <help-gsl@gnu.org> users mailing list -- for questions about installation, how GSL works and how it is used, or general questions concerning GSL. Info-gsl <info-gsl@gnu.org> mailing list -- announcements of new releases are made here. You can also follow announcements via the Savannah GSL RSS feed. Motivation Here are some of the main benefits of using a free scientific library under the GNU General Public License, allows easier collaboration, library is freely available to everyone. software using the library can be released publicly as source-code. you can adapt the source code to your needs. respects your privacy - does not impose any conditions on ""in-house"" use. you can contribute back improvements to the user community. Special Features The library uses an object-oriented design. Different algorithms can be plugged-in easily or changed at run-time without recompiling the program. It is intended for ordinary scientific users. Anyone who knows some C programming will be able to start using the library straight-away. The interface was designed to be simple to link into very high-level languages, such as GNU Guile or Python The library is thread-safe. Where possible the routines have been based on reliable public-domain Fortran packages such as FFTPACK and QUADPACK, which the developers of GSL have reimplemented in C with modern coding conventions. The library is easy to compile and does not have any dependencies on other packages. Licensing GSL is distributed under the terms of the GNU General Public License (GPL). The reasons why the GNU Project uses the GPL are described in the following articles: Copyleft: Pragmatic Idealism by Richard Stallman Why you should not use the Lesser GPL for your next library by Richard Stallman Additional information for researchers is available in the following article: Releasing Free Software if you work at a University by Richard Stallman Some answers to common questions about the license: If I write an application which uses GSL, am I forced to distribute that application? No. The license gives you the option to distribute your application if you want to. You do not have to exercise this option in the license. If I wanted to distribute an application which uses GSL, what license would I need to use? The GNU General Public License (GPL). The bottom line for commercial users: GSL can be used internally (""in-house"") without restriction, but only redistributed in other software that is under the GNU GPL. More Information If you would like to refer to the GNU Scientific Library in a journal article, the recommended way is to cite the reference manual, e.g. M. Galassi et al, GNU Scientific Library Reference Manual (3rd Ed.), ISBN 0954612078. If you want to give a url, use ""http://www.gnu.org/software/gsl/"". Related Packages GSL requires a BLAS library for vector and matrix operations. The default CBLAS library supplied with GSL can be replaced by the tuned ATLAS library for better performance, ATLAS - a portable self-optimising BLAS library with CBLAS interface ATLAS is free software and its license is compatible with the GNU GPL. Other packages that are useful for scientific computing are: GLPK - GNU Linear Programming Kit FFTW - Large-scale Fast Fourier Transforms NLopt - nonlinear optimization with unconstrained, bound-constrained, and general nonlinear inequality constraints All these packages are free software (GNU GPL/LGPL). Development GSL development is hosted on Savannah.gnu.org at http://savannah.gnu.org/projects/gsl The repository is available via 'git' with  git clone git://git.savannah.gnu.org/gsl.git  Note: if you use git, you will need automake, autoconf, libtool, GNU m4, GNU make, and GNU Texinfo (makeinfo). To begin the build process from a checkout, start with: ./autogen.sh which will prepare the package for compilation. You can then use ./configure --enable-maintainer-mode and make in the usual way. Commit notifications are available through the git repository news feed. In addition to the GSL Reference Manual, anyone wanting to work on the library should read the GSL design document, GSL Design Document - HTML GSL is a mature library with a stable API. The main emphasis is on ensuring the stability of the existing functions, tidying up and fixing any bugs that are reported, and adding new, useful algorithms which have been well tested and documented. Potential contributors are encouraged to gain familiarity with the library by investigating and fixing known problems in the BUGS database. The project is always looking to introduce new capabilities and expand or improve existing functionality. To maintain stability, any new functionality is encouraged as packages, built on top of GSL and maintained independently by their authors, as in other free software projects. The design of GSL permits extensions to be used alongside the existing library easily by simple linking. Once a new extension is proven useful and stable, it can be incorporated into the main GSL repository. Discussions about the development of the library take place on the gsl-discuss@sourceware.org mailing list. Any comments from experts in numerical analysis are welcome. You can subscribe to gsl-discuss here. GSL is part of the GNU Project and so follows the GNU Coding Standards. Extensions/Applications The following third-party packages provide extensions to GSL. If you want to add a feature to GSL we recommend that you make it an extension first. We will list it here so that people can try it out. Extensions can be incorporated after they have been tested in real use (see ""How to help"" for more information). quasimontecarlo - quasi-Monte Carlo integration routines (David Zaslavsky) ISVD - Incremental Singular Value Decomposition (Attila Axt) Marray and Tensor - extensions for multidimensional arrays and tensors (Jordi Burguet Castell) ndlinear - simpler interface for N-dimensional least squares fits (Patrick Alken) Annealing - reworking of simulating annealing with new API (alpha - Marco Maggi) jacobi-0.9 - Jacobi polynomials and operations related to Gauss-jacobi quadrature (integration, derivatives and interpolation) (Paulo Jabardo) Ziggurat Gaussian - faster gaussian generator using Ziggurat method (Jochen Voss) -- now incorporated in GSL 1.8 wigner.c - alternative Wigner coefficient calculations (large j) (J. Underwood) adaptint.c - adaptive multidimensional integration, similar to cubpack (Steven G. Johnson) jsqrng - higher dimensional quasi-random sequences (J. Scott) qrngextra - extended dimensionality QRNGs (Philipp Baecker) CQP - solves convex quadratic problems (Ewgenij Hübner) Bundle - powerful bundle minimisation algorithm (needs CQP) (Ewgenij Hübner - upgraded to v1.2, Oct 2006) Geczy - additional minimisation algorithms (Peter Geczy) Quartic - quartic polynomial solver (Andrew Steiner) Fresnel - sine and cosine fresnel integrals (Aleksey Dmitriev) SimplexImproved - alternative simplex minimiser (Ivo Alxneit) TAMUANOVA - the TAMU ANOVA package, provides single and two factor ANOVA. OOL - the ""Open Optimization Library"", provides GSL-compatible constrained optimization methods (under development). rngextra-0.2 - additional random number generators (Brian Gough, example package) Other packages: Dieharder - extensive random number test suite for GSL based on Marsaglia's Diehard tests and the NIST Statistical Test Suite (Robert G. Brown) VFGEN - generates C source code for GSL ODE systems from a user-supplied specification of a vector field (Warren Weckesser) Some applications using GSL that we know of: GSL Shell (Lua) - interface to GSL routines using the Lua scripting language. NEMO -N-body stellar dynamics toolbox, a unix-like toolset of libraries and programs, also has tools to operate on ascii tables and other types of data LUSH - Lisp Universal Shell, an object-oriented programming language with full interfaces to GSL, LAPACK, and BLAS. NumExp - interactive graphical exploration of numerical functions and algorithms (uses Gtk) LabPlot - software for data analysis and visualisation Qumax - a Quantum Monte Carlo Software for Atoms, Molecules and Solids ORSA - Orbit Reconstruction, Simulation and Analysis. QtiPlot - scientific plotting and data analysis application Rlabplus - libraries for Rlab, a high-level language for numerics Blahut - computes information theoretic rate-distortion and channel capacity Wrappers for Other Languages (not necessarily complete): JavaCPP - Java wrappers for GSL Math::GSL - Perl interface to GSL VALA - VALA bindings for GSL GSLL - Common Lisp interface to GSL FGSL - Fortran interface to GSL (under development) PyGSL - Python Bindings for GSL PyrexGsl - Pyrex interface to GSL (Pyrex is a version of Python which allows mixing of Python and C datatypes) ctypesGsl - Python ctypes-style interface to GSL (under development) Ruby/GSL - Ruby Bindings for GSL PDL::GSL - Perl Data Language interface to GSL Random Numbers (included in the main PDL distribution) R gsl - package, bindings for GSL special functions in GNU R S-lang/GSL - bindings for GSL and S-Lang Zoom - C++ wrappers for GSL special functions OCAML GSL - bindings for the OCAML functional language O2scl - a numerical C++ class library which is compatible with GSL datatypes (A.Steiner) Textbooks: ""Numerische Physik"" by Harald Wiedemann (ISBN 3-540-40774-X, Published by Springer (2004), 297 pages, in German) A textbook on numerical physics, covering classical mechanics, electrodynamics, optics, statistical physics and quantum mechanics. The example programs in the book use the GNU Scientific Library and are free software (the source code is included on a CDROM with the book). Further information about this book is available from the publisher at Springer.de. Project Background The project was conceived in 1996 by Dr M. Galassi and Dr J. Theiler of Los Alamos National Laboratory. They were joined by other physicists who also felt that the licenses of existing libraries were hindering scientific cooperation. Most of the library has been written by a relatively small number of people with backgrounds in computational physics in order to provide a consistent and reasonably-designed framework. Overall development of the library and the design and implementation of the major modules was carried out by Dr G. Jungman and Dr B. Gough. Modules were also written by Dr J. Davies, R. Priedhorsky, Dr M. Booth, and Dr F. Rossi, along with many useful contributions from others in the user community. Debian packages for the library are maintained by Dr D. Eddelbuettel. Release History gsl-2.1 was released in November 2015. gsl-2.0 was released in October 2015. gsl-1.16 was released in July 2013. gsl-1.15 was released in May 2011. gsl-1.14 was released in March 2010. gsl-1.13 was released in September 2009. gsl-1.12 was released in December 2008. gsl-1.11 was released in March 2008. gsl-1.10 was released in September 2007. gsl-1.9 was released in February 2007. gsl-1.8 was released in April 2006. gsl-1.7 was released in September 2005. gsl-1.6 was released in December 2004. gsl-1.5 was released in June 2004. gsl-1.4 was released in August 2003. gsl-1.3 was released in December 2002. gsl-1.2 was released in July 2002. gsl-1.1.1 was released in March 2002. gsl-1.1 was released in February 2002. gsl-1.0 was released in November 2001. gsl-0.9.4 was released in October 2001 (fifth beta-test release). gsl-0.9.3 was released in September 2001 (fourth beta-test release). gsl-0.9.2 was released in September 2001 (third beta-test release). gsl-0.9.1 was released in August 2001 (second beta-test release). gsl-0.9 was released in July 2001 (first beta-test release). gsl-0.8 was released in May 2001. gsl-0.7 was released in October 2000. gsl-0.6 was released in June 2000. gsl-0.5 was released in December 1999. gsl-0.4.1 was released in February 1999. gsl-0.4 was released in August 1998. gsl-0.3f was released in May 1998. gsl-0.3b was released in February 1998. gsl-0.2 was released in October 1996. gsl-0.1 was released in sometime in 1996. gsl-0.0 was released in sometime in 1996. The gsl project was started in May 1996 (earliest recorded changelog entry). GNU home page FSF home page GNU Art GNU's Who? Free Software Directory Hardware Site map “Our mission is to preserve, protect and promote the freedom to use, study, copy, modify, and redistribute computer software, and to defend the rights of Free Software users.” The Free Software Foundation is the principal organizational sponsor of the GNU Operating System. Support GNU and the FSF by buying manuals and gear, joining the FSF as an associate member, or making a donation, either directly to the FSF or via Flattr. back to top Please send general FSF & GNU inquiries to <gnu@gnu.org>. There are also other ways to contact the FSF. Broken links and other corrections or suggestions can be sent to <bug-gsl@gnu.org>. Please see the Translations README for information on coordinating and submitting translations of this article. Copyright © 2009 Free Software Foundation, Inc. This page is licensed under a Creative Commons Attribution-NoDerivatives 4.0 International License. Copyright Infringement Notification Updated: $Date: 2016/05/16 20:59:26 $"	"null"	"null"	"GNU scientific library. [GPL]"	"true"
"Scripting"	"ChaiScript"	"https://github.com/ChaiScript/ChaiScript/"	"An easy to use embedded scripting language for C++. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"609"	"55"	"98"	"GitHub - ChaiScript/ChaiScript: Embedded Scripting Language Designed for C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 609 Fork 98 ChaiScript/ChaiScript Code Issues 27 Pull requests 4 Wiki Pulse Graphs Embedded Scripting Language Designed for C++ http://chaiscript.com 1,745 commits 14 branches 56 releases 24 contributors C++ 96.8% CMake 1.7% Other 1.5% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags Workaround_Thread_Local_MinGW add_clang_analyze add_ranged_for attempt_global_object_caching attempt_register_function_simplification cleanups_and_reworkds coverity_scan develop master release-4.x release-5.x typed_function_ordering typed_reworks value_types Nothing to show v5.8.3 v5.8.2 v5.8.1 v5.8.0 v5.7.1 v5.7.0 v5.6.0 v5.5.1 v5.5.0 v5.4.0 v5.3.1 v5.2.0 v5.1.0 v5.0.0 v4.3.1 v4.3.0 v4.2.0 v4.1.1 v4.1.0 v4.0.0 v3.1.0 v3.0.0 v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.2.0 v2.1.0 v2.0.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 Test_Release Release-5.3.0 Release-5.2.0 Release-5.1.0 Release-5.0.0 Release-4.3.0 Release-4.2.0 Release-4.1.1 Release-4.1.0 Release-4.0.0 Release-3.1.0 Release-3.0.0 Release-2.3.3 Release-2.3.2 Release-2.3.1 Release-2.3.0 Release-2.2.0 Release-2.1.0 Release-2.0.0 Release-1.3.0 Release-1.2.0 Release-1.1.0 Release-1.0.0 Nothing to show New pull request Latest commit 176d608 Jun 29, 2016 lefticus committed on GitHub Merge pull request #276 from ELynx/develop … Add UTF-8 escape notation to parser Permalink Failed to load latest commit information. .github Create CONTRIBUTING.md Feb 23, 2016 contrib Add fuzzy testing notes Mar 25, 2016 include/chaiscript More standard compliant, use converter only where available Jun 27, 2016 performance_tests Add some cpp<->chai performance tests Feb 5, 2016 samples Fix for: samples/example.cpp crashes #269 May 14, 2016 src Pass Module by reference instead of shared ptr Apr 9, 2016 unittests Fix unittest Jun 27, 2016 .decent_ci-Linux.yaml Remove g++ 4.8 from builds Mar 10, 2016 .decent_ci-MacOS.yaml Move debug over to windows build Mar 5, 2016 .decent_ci-Windows.yaml Merge branch 'develop' into update_travis_toolchain Mar 5, 2016 .decent_ci.yaml Fix results location Sep 13, 2014 .travis.yml Remove g++ 4.8 from builds Mar 10, 2016 CMakeLists.txt Update reference to prelude Mar 13, 2016 DesignGoals.md Create DesignGoals.md Jun 28, 2016 Doxyfile.in Fix Doxygen configuration Jan 6, 2015 LICENSE Update copyrights Feb 14, 2016 appveyor.yml Add gitter appveyor webhook Mar 5, 2016 biicode.conf Update biicode and get master updated to v5.6.0 Mar 19, 2015 cheatsheet.md Add ability to take non-const & shared_ptr params Mar 27, 2016 description.txt Get cpack working for source and deb distribtions. Still need to chec… Mar 29, 2010 license.txt Update copyrights Feb 15, 2016 readme.md Update docs to reflect C++14 closes #268 May 12, 2016 releasenotes.md Update to 5.8.2 release notes Mar 30, 2016 supporters.md Create supporters.md Mar 5, 2016 readme.md Master Status: Develop Status: ChaiScript http://www.chaiscript.com (c) 2009-2012 Jonathan Turner (c) 2009-2016 Jason Turner Release under the BSD license, see ""license.txt"" for details. Introduction ChaiScript is one of the only embedded scripting language designed from the ground up to directly target C++ and take advantage of modern C++ development techniques, working with the developer like he expects it to work. Being a native C++ application, it has some advantages over existing embedded scripting languages: It uses a header-only approach, which makes it easy to integrate with existing projects. It maintains type safety between your C++ application and the user scripts. It supports a variety of C++ techniques including callbacks, overloaded functions, class methods, and stl containers. Requirements ChaiScript requires a C++14 compiler to build with support for variadic templates. It has been tested with gcc 4.9 and clang 3.6 (with libcxx). For more information see the build dashboard. Usage Add the ChaiScript include directory to your project's header search path Add #include <chaiscript/chaiscript.hpp> to your source file Instantiate the ChaiScript engine in your application. For example, create a new engine with the name chai like so: chaiscript::ChaiScript chai The default behavior is to load the ChaiScript standard library from a loadable module. A second option is to compile the library into your code, see below for an example. Once instantiated, the engine is ready to start running ChaiScript source. You have two main options for processing ChaiScript source: a line at a time using chai.eval(string) and a file at a time using chai.eval_file(fname) To make functions in your C++ code visible to scripts, they must be registered with the scripting engine. To do so, call add: chai.add(chaiscript::fun(&my_function), ""my_function_name"");  Once registered the function will be visible to scripts as ""my_function_name"" Examples ChaiScript is similar to ECMAScript (aka JavaScript(tm)), but with some modifications to make it easier to use. For usage examples see the ""samples"" directory, and for more in-depth look at the language, the unit tests in the ""unittests"" directory cover the most ground. For examples of how to register parts of your C++ application, see ""example.cpp"" in the ""src"" directory. Example.cpp is verbose and shows every possible way of working with the library. For further documentation generate the doxygen documentation in the build folder or see the website http://www.chaiscript.com. The shortest complete example possible follows: /// main.cpp  #include <chaiscript/chaiscript.hpp>  double function(int i, double j) {   return i * j; }  int main() {   chaiscript::ChaiScript chai;   chai.add(chaiscript::fun(&function), ""function"");    double d = chai.eval<double>(""function(3, 4.75);""); }  Or, if you want to compile the std lib into your code, which reduces runtime requirements. /// main.cpp  #include <chaiscript/chaiscript.hpp> #include <chaiscript/chaiscript_stdlib.hpp>  double function(int i, double j) {   return i * j; }  int main() {   chaiscript::ChaiScript chai(chaiscript::Std_Lib::library());   chai.add(chaiscript::fun(&function), ""function"");    double d = chai.eval<double>(""function(3, 4.75);""); }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ChaiScript/ChaiScript/"	"An easy to use embedded scripting language for C++. [BSD]"	"true"
"Scripting"	"website"	"http://chaiscript.com/"	"An easy to use embedded scripting language for C++. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"609"	"55"	"98"	"GitHub - ChaiScript/ChaiScript: Embedded Scripting Language Designed for C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 609 Fork 98 ChaiScript/ChaiScript Code Issues 27 Pull requests 4 Wiki Pulse Graphs Embedded Scripting Language Designed for C++ http://chaiscript.com 1,745 commits 14 branches 56 releases 24 contributors C++ 96.8% CMake 1.7% Other 1.5% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags Workaround_Thread_Local_MinGW add_clang_analyze add_ranged_for attempt_global_object_caching attempt_register_function_simplification cleanups_and_reworkds coverity_scan develop master release-4.x release-5.x typed_function_ordering typed_reworks value_types Nothing to show v5.8.3 v5.8.2 v5.8.1 v5.8.0 v5.7.1 v5.7.0 v5.6.0 v5.5.1 v5.5.0 v5.4.0 v5.3.1 v5.2.0 v5.1.0 v5.0.0 v4.3.1 v4.3.0 v4.2.0 v4.1.1 v4.1.0 v4.0.0 v3.1.0 v3.0.0 v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.2.0 v2.1.0 v2.0.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 Test_Release Release-5.3.0 Release-5.2.0 Release-5.1.0 Release-5.0.0 Release-4.3.0 Release-4.2.0 Release-4.1.1 Release-4.1.0 Release-4.0.0 Release-3.1.0 Release-3.0.0 Release-2.3.3 Release-2.3.2 Release-2.3.1 Release-2.3.0 Release-2.2.0 Release-2.1.0 Release-2.0.0 Release-1.3.0 Release-1.2.0 Release-1.1.0 Release-1.0.0 Nothing to show New pull request Latest commit 176d608 Jun 29, 2016 lefticus committed on GitHub Merge pull request #276 from ELynx/develop … Add UTF-8 escape notation to parser Permalink Failed to load latest commit information. .github Create CONTRIBUTING.md Feb 23, 2016 contrib Add fuzzy testing notes Mar 25, 2016 include/chaiscript More standard compliant, use converter only where available Jun 27, 2016 performance_tests Add some cpp<->chai performance tests Feb 5, 2016 samples Fix for: samples/example.cpp crashes #269 May 14, 2016 src Pass Module by reference instead of shared ptr Apr 9, 2016 unittests Fix unittest Jun 27, 2016 .decent_ci-Linux.yaml Remove g++ 4.8 from builds Mar 10, 2016 .decent_ci-MacOS.yaml Move debug over to windows build Mar 5, 2016 .decent_ci-Windows.yaml Merge branch 'develop' into update_travis_toolchain Mar 5, 2016 .decent_ci.yaml Fix results location Sep 13, 2014 .travis.yml Remove g++ 4.8 from builds Mar 10, 2016 CMakeLists.txt Update reference to prelude Mar 13, 2016 DesignGoals.md Create DesignGoals.md Jun 28, 2016 Doxyfile.in Fix Doxygen configuration Jan 6, 2015 LICENSE Update copyrights Feb 14, 2016 appveyor.yml Add gitter appveyor webhook Mar 5, 2016 biicode.conf Update biicode and get master updated to v5.6.0 Mar 19, 2015 cheatsheet.md Add ability to take non-const & shared_ptr params Mar 27, 2016 description.txt Get cpack working for source and deb distribtions. Still need to chec… Mar 29, 2010 license.txt Update copyrights Feb 15, 2016 readme.md Update docs to reflect C++14 closes #268 May 12, 2016 releasenotes.md Update to 5.8.2 release notes Mar 30, 2016 supporters.md Create supporters.md Mar 5, 2016 readme.md Master Status: Develop Status: ChaiScript http://www.chaiscript.com (c) 2009-2012 Jonathan Turner (c) 2009-2016 Jason Turner Release under the BSD license, see ""license.txt"" for details. Introduction ChaiScript is one of the only embedded scripting language designed from the ground up to directly target C++ and take advantage of modern C++ development techniques, working with the developer like he expects it to work. Being a native C++ application, it has some advantages over existing embedded scripting languages: It uses a header-only approach, which makes it easy to integrate with existing projects. It maintains type safety between your C++ application and the user scripts. It supports a variety of C++ techniques including callbacks, overloaded functions, class methods, and stl containers. Requirements ChaiScript requires a C++14 compiler to build with support for variadic templates. It has been tested with gcc 4.9 and clang 3.6 (with libcxx). For more information see the build dashboard. Usage Add the ChaiScript include directory to your project's header search path Add #include <chaiscript/chaiscript.hpp> to your source file Instantiate the ChaiScript engine in your application. For example, create a new engine with the name chai like so: chaiscript::ChaiScript chai The default behavior is to load the ChaiScript standard library from a loadable module. A second option is to compile the library into your code, see below for an example. Once instantiated, the engine is ready to start running ChaiScript source. You have two main options for processing ChaiScript source: a line at a time using chai.eval(string) and a file at a time using chai.eval_file(fname) To make functions in your C++ code visible to scripts, they must be registered with the scripting engine. To do so, call add: chai.add(chaiscript::fun(&my_function), ""my_function_name"");  Once registered the function will be visible to scripts as ""my_function_name"" Examples ChaiScript is similar to ECMAScript (aka JavaScript(tm)), but with some modifications to make it easier to use. For usage examples see the ""samples"" directory, and for more in-depth look at the language, the unit tests in the ""unittests"" directory cover the most ground. For examples of how to register parts of your C++ application, see ""example.cpp"" in the ""src"" directory. Example.cpp is verbose and shows every possible way of working with the library. For further documentation generate the doxygen documentation in the build folder or see the website http://www.chaiscript.com. The shortest complete example possible follows: /// main.cpp  #include <chaiscript/chaiscript.hpp>  double function(int i, double j) {   return i * j; }  int main() {   chaiscript::ChaiScript chai;   chai.add(chaiscript::fun(&function), ""function"");    double d = chai.eval<double>(""function(3, 4.75);""); }  Or, if you want to compile the std lib into your code, which reduces runtime requirements. /// main.cpp  #include <chaiscript/chaiscript.hpp> #include <chaiscript/chaiscript_stdlib.hpp>  double function(int i, double j) {   return i * j; }  int main() {   chaiscript::ChaiScript chai(chaiscript::Std_Lib::library());   chai.add(chaiscript::fun(&function), ""function"");    double d = chai.eval<double>(""function(3, 4.75);""); }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ChaiScript/ChaiScript"	"An easy to use embedded scripting language for C++. [BSD]"	"true"
"Scripting"	"Lua"	"http://www.lua.org/"	"A minimal and fast scripting engine for configuration files and basic application scripting. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Programming Language Lua about news get started download documentation community contact site map português Lua 5.3.3 released Programando em Lua published Lua Workshop 2016 to be held in San Francisco"	"null"	"null"	"A minimal and fast scripting engine for configuration files and basic application scripting. [MIT]"	"true"
"Scripting"	"luacxx"	"https://github.com/dafrito/luacxx"	"C++11 API for creating Lua bindings. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"64"	"14"	"11"	"GitHub - dafrito/luacxx: C++11 API for creating Lua bindings Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 64 Fork 11 dafrito/luacxx Code Issues 1 Pull requests 0 Pulse Graphs C++11 API for creating Lua bindings 826 commits 1 branch 0 releases Fetching contributors C++ 95.5% Lua 4.4% Shell 0.1% C++ Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit e5ba2a1 Sep 19, 2014 dafrito Fix Makefile syntax errors Permalink Failed to load latest commit information. m4 Qt is now optional May 13, 2014 src Fix Makefile syntax errors Sep 19, 2014 .gitignore Ignore a new autotools artifact Aug 3, 2013 .scafrc Lua-cxx 3.0 reorganization May 5, 2014 LICENSE Readded license, just for clarity Sep 14, 2014 Makefile.am Moved acme to demo, for better clarity Sep 17, 2014 README Added README symlink for github May 28, 2014 configure.ac Change version to 1.1 Sep 15, 2014 luacxx.pc.in Renamed project back to Luacxx Jul 2, 2014 luacxx.spec.in minor doc Jul 2, 2014 README =head1 NAME  luacxx - C++11 binding and modules for Lua  =head1 SYNOPSIS      // Create a new Lua environment to play with.     auto env = lua::create();      // Introduce a global into Lua     env[""foo""] = ""No time"";      // Run some Lua code directly     lua::run_string(""assert(foo == 'No time')"");      // Retrieve a global     auto value = env[""foo""].get<std::string>();     assert(value == ""No time"");  =head1 DESCRIPTION  Luacxx is a C++ library that helps you write Lua bindings for C++ and C code. It also contains complete bindings for several major C and C++ libraries.  B<Luacxx plays well with others.> Luacxx does not try to cover up Lua's C API or its stack-based model. In fact, Luacxx and Lua C API's can and must be mixed freely, and Luacxx works transparently over Lua's stack, so you can work using either one. There is absolutely no harm in mixing the two together.  B<Luacxx is fast>. A binding's overhead of calling into C and converting arguments can be significant for simple methods. Luacxx has been built specifically for efficiency, so it has avoided much of the overhead that plagues other bindings (and older versions of Luacxx!).  Luacxx's overhead is around that of an extra function call, which means that a C++ binding will be faster than equivalent Lua code for all but the most trivial of cases. For instance, this math-intensive benchmark has the QQuaternion binding performing ~150% faster than an API-indentical quaternion written in Lua:      quat = QQuaternion:new(2, 3, 7, 5);     for i=1, MAX do         -- Do some CPU-intensive matrix math, as well as creating a temporary.         quat = quat * QQuaternion:new(2, 2, 2, 2);         quat:normalize();     end      // My numbers     Benchmark Runs: 10000     C++:      0.824ms ( 1.00 relative to C++)     Lua:     21.514ms (26.10 relative to C++)     Luacxx:  13.579ms (16.47 relative to C++)  B<Luacxx is frugal>. Luacxx takes advantage of C++'s memory efficiency. Objects pushed on the Lua stack are instantiated directly on new Lua userdata, and with only 4 bytes of Luacxx-specific metadata appended to the end. lua_touserdata works out-of-the-box, and the returned value can be cast directly to the intended C++ type.  B<Luacxx is open-ended>. Much of Luacxx is built using class templates. This allows you to add new support for your own types without needing to recompile Luacxx. Once a new template specialization for your type is found, all of Luacxx's APIs will be able to use it.  B<Luacxx is comprehensive>. Luacxx includes bindings for over 150 Qt classes, as well as automatic introspection support for QObjects. It also has preliminary support for Gtk's introspection system, allowing any project with GObject introspection support to work with Luacxx.  B<Luacxx is not a generator>. Luacxx doesn't write header files or extra boilerplate. Everything can be done using just a C++11 compiler.  =head2 OVERVIEW  This library is designed to work in tandem with Lua's existing C API, so it does not provide a complete facade. On the contrary, I find Lua's C API to be amazingly well-designed, so I've tried to ensure that Luacxx can be intermixed freely with Lua's C API. In fact, most of the Lua C API has no analog in Luacxx - I just use the original, like in the following example:      // Add all arguments     int add_several(lua_State* const state)     {         // Get each argument         int sum = 0;         for (int i = 1; i <= lua_gettop(state); ++i) {             sum += lua::get<int>(state, i);         }          // Return the value         lua::push(state, sum);         lua_replace(state, 1);         return 1;     }  That being said, there are several places where Luacxx greatly simplify common tasks. For instance, Lua has a number of lua_push* functions that can be replaced with Luacxx's lua::push template and appropriate specializations. You can extend this specialization with your own types, and Luacxx's other features will immediately support them.  C++11 also adds support for variadic templates, which can be used to provide a way to push a function of any arity into Lua without needing to write the marshalling code yourself or running a preprocessor:      // Standard C API is, of course, supported     int create_foo(lua_State* const);     lua::push(state, create_foo);      // Fundamental types work, too     int sum(int a, int b);     lua::push(state, sum);      // As do pointers to userdata and conversions to C++ strings.     void changeTitle(QWindow* window, const std::string& title);     lua::push(state, changeTitle);      // Even lambdas work too, with a bit of help     lua::push_function< int(int, int) >(state, [](int first, int second) {         return first + second;     });  =head1 STYLE  STL conventions are used for naming and case, though not slavishly, to infer that a template-heavy C++ dialect is used. However, adherance to Lua's conventions is preferred over that of C++.  =head1 BUILDING     git clone https://github.com/dafrito/luacxx.git    cd luacxx      autoreconf -i      mkdir build     cd build      ../configure --prefix=$HOME      make  =head1 REQUIRED DEPENDENCIES  =head2 C++11 compiler  Luacxx depends heavily on C++11 features for its operation. It would be a large undertaking to remove the use of these new features, and not without a significant loss in the expressiveness of the code.  Luacxx has been built successfully using the following compilers:      gcc version 4.8.3 20140624 (Red Hat 4.8.3-1) (GCC)     clang version 3.4 (tags/RELEASE_34/final)  =head2 Lua 5.2  Luacxx uses Lua as its underlying foundation. It would not be possible to remove it without rewriting the project, though support for older Lua versions be added.  Luacxx has been built successfully using the following versions:      Lua 5.2.2  Copyright (C) 1994-2013 Lua.org, PUC-Rio  =head1 OPTIONAL DEPENDENCIES  =head2 Linux kernel  If available, bindings for the Linux kernel headers will be compiled.      yum install kernel-headers  This binding is minimal; see linux/* for what is available.  =head2 Qt 5 - http://qt-project.org/doc/qt-5/index.html  This binding is mostly complete for Qt5Core, Qt5Gui, and Qt5Network; see Qt5Core/*, Qt5Gui/*, et all for what is supported.  =head2 libevdev  If available, bindings for the evdev input library will be compiled.      yum install libevdev-devel  This binding is complete; see libevdev.hpp for information.  =head2 gobject-introspection  If available, Gtk's GObject introspection model will be available to Lua.      yum install gobject-introspection-devel  This binding is functional, but not complete. See search/GIRepository.cpp for more details.  =head2 libinput - http://wayland.freedesktop.org/libinput/doc/latest/index.html  If available, bindings for the libinput input handling library will be compiled.      yum install mtdev-devel systemd-devel  This binding is complete; see libinput.hpp for more information.  =head2 ncurses - http://invisible-island.net/ncurses/ncurses.html  If available, bindings for the ncurses terminal library will be compiled.      yum install ncurses-devel  This binding is complete; see ncurses.hpp for more information.  =head2 gbm - http://www.mesa3d.org/  If available, bindings for Mesa's generic buffer management will be compiled.      yum install mesa-libgbm-devel  This binding is complete; see gbm.hpp for more information.  =head2 nanomsg - http://nanomsg.org/  If available, bindings for the nanomsg IPC library will be compiled.      yum install nanomsg-devel  This binding is complete; see nanomsg.hpp for further information.  =head2 DRM - http://dri.freedesktop.org/wiki/  If available, bindings for the direct rendering manager will be compiled.      yum install libdrm-devel  This binding is partially complete; see xf86drmMode.hpp for information.  =head2 EGL - https://www.khronos.org/registry/egl/  If available, bindings for the EGL graphics standard will be compiled.      yum install mesa-libEGL-devel  This binding is complete; see egl.hpp for further information.  =head1 BUILD PROCESS  Compile this file with autoreconf, producing a ./configure script      autoreconf -i;  If this command fails, you've likely found a bug in the project. Please report it, even if it's just dropping by via IRC.  Create a build directory (optional, but assumed here)      mkdir build;     cd build;  Run the output of this file, creating this project's Makefiles.     ../configure --prefix=$HOME;  If this command fails, you have a missing dependency.  Look at this file for a detailed listing of the prerequisites.  =head1 BUILD CONFIGURATION FILES  =head2 configure.ac  This is the Autoconf file for Luacxx and its underlying projects. It provides the configuration for how to compile Luacxx itself. The language this file is written is likely unfamiliar unless you have worked with the Autotools, but the syntax is simple: it's little more than a macro language to write shell scripts.  =head2 Makefile.am  This file contains the commands to implement Makefile targets like check and run. It also included the src/Makefile.am.  This file can be updated to add new build targets (e.g. for new executables or for other build processes).  =head2 src/Makefile.am  This file contains the listing of source files for each library and executable produced by this project including the unit tests.  This file must be updated whenever source files are added or removed from the project.  =head2 MAKE TARGETS  =head4 make lua  Runs a Lua interpreter with package.path and package.cpath set up to use this repository's bindings and sources files.  =head4 make run  Runs the Luacxx demo.  =head4 make debug  Runs the Luacxx demo under gdb. When you are ready to run the application, you will need to pass the location of the demo source code, like so:      (gdb) r ../src/demo.lua  =head4 make valgrind  Runs the Luacxx demo under valgrind. This is useful for debugging memory leaks and segfaults.  =head4 make check  Runs Luacxx's test suite.  =head4 make checkvalgrind  Runs Luacxx's test suite under valgrind.  =head4 make install  Installs Luacxx's executables and libraries to configure's --prefix.  For an install limited to your own home directory, ./configure --prefix=$HOME would be sufficient. Note that pkg-config must be configured to include other home-installed packages: on Fedora, appending the following to ~/.bashrc would work:      export PKG_CONFIG_PATH=$HOME/lib/pkgconfig  Followed by the build process      ./configure --prefix=$HOME     make     make install  For a system-wide install on Fedora, ./configure --prefix=/usr would be sufficient:      ./configure --prefix=/usr     make     make install  If you wish to examine the files that will be installed, DESTDIR is a better option than --prefix. DESTDIR will relocate files under a subtree without affecting the paths used by Makefile variables. This target produces an identical tree as what would be done without DESTDIR, but DESTDIR ensures that the creation can take place at a safe location:      # Same as a system-wide install     ./configure --prefix=/usr     make      # ...but install to a temporary directory     mkdir -p ~/tmp/luacxx     make install DESTDIR=$HOME/tmp/luacxx  =head1 OPERATING SYSTEM SUPPORT  =head2 OSes that can build Luacxx without needing manually installed dependencies  Luacxx has been built using the following operating systems:      Fedora 20 (Linux 3.14.8-200.fc20.x86_64 #1 SMP Mon Jun 16 21:57:53 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux)  =head2 OSes that can build Luacxx with manually installed dependencies  None yet known.  =head2 OSes that can build Luacxx only with emulation  =head3 Microsoft Windows  Luacxx can be built using MinGW (and likely with Cygwin, though I haven't tried).  =head1 GETTING IN TOUCH  Send quick questions and comments to #luacxx on irc.freenode.net. For longer questions or concerns, please email me at dafrito@gmail.com. I will answer these as quickly as practical.  =head1 LICENSE  By default, this project uses the GNU General Public License, version 2, for all code. Licensing exceptions are noted in each file where they occur  =head1 SEE ALSO  Lua 5.2 - http://www.lua.org/manual/5.2/manual.html      Lua is an extension programming language designed to support general     procedural programming with data description facilities.  Qt - http://qt-project.org/doc/qt-5/modules-cpp.html      Qt is a cross-platform application and UI framework for developers.  =head1 ALTERNATIVES  LuaJIT - http://luajit.org/index.html      LuaJIT is a Just-In-Time Compiler (JIT) for the Lua programming language.  tolua++ - http://www.codenix.com/~tolua/      tolua++ is an extended version of tolua, a tool to integrate C/C++ code     with Lua.  tolua - http://www.tecgraf.puc-rio.br/~celes/tolua/      tolua is a tool that greatly simplifies the integration of C/C++ code with Lua.     Based on a cleaned header file, tolua automatically generates the binding code     to access C/C++ features from Lua.  Luabind - http://www.rasterbar.com/products/luabind.html      Luabind is a library that helps you create bindings between C++ and Lua. It     has the ability to expose functions and classes, written in C++, to Lua. It     will also supply the functionality to define classes in lua and let them     derive from other lua classes or C++ classes. Lua classes can override     virtual functions from their C++ baseclasses.  lqt - https://github.com/mkottman/lqt      lqt is a Lua binding to the Qt framework. It is an automated binding     generated from the Qt headers, and covers almost all classes and methods     from supported Qt modules.  QtLua - http://www.nongnu.org/libqtlua/      The QtLua library aims to make Qt4/Qt5 applications scriptable using the     Lua scripting language. It is an alternative to the QtScript module.  LGI - https://github.com/pavouk/lgi      LGI is gobject-introspection based dynamic Lua binding to GObject based     libraries. It allows using GObject-based libraries directly from Lua.  =head1 LICENSE  This project uses the MIT license unless otherwise noted. See LICENSE for exact wording.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dafrito/luacxx"	"C++11 API for creating Lua bindings. [MIT]"	"true"
"Scripting"	"SWIG"	"http://www.swig.org/"	"A wrapper/interface Generator that let you link your c++ code to Javascript, Perl, PHP, Python, Tcl and Ruby. [GPL/Output not licensed]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Simplified Wrapper and Interface Generator   Home Github Development Mailing Lists Bugs and Patches Information What is SWIG? Compatibility Features Tutorial Documentation News The Bleeding Edge History Guilty Parties Projects Legal Department Links Download SwigWiki Donate Affiliations Our Generous Host Exits AllegroCL C# - Mono C# - MS .NET CFFI CHICKEN CLISP D Go language Guile Java Javascript - Node.js Javascript - V8 Javascript - WebKit Lua MzScheme/Racket Ocaml Octave Perl PHP Python R Ruby Scilab Tcl/Tk Welcome to SWIG [ Chinese ] SWIG is a software development tool that connects programs written in C and C++ with a variety of high-level programming languages. SWIG is used with different types of target languages including common scripting languages such as Javascript, Perl, PHP, Python, Tcl and Ruby. The list of supported languages also includes non-scripting languages such as C#, Common Lisp (CLISP, Allegro CL, CFFI, UFFI), D, Go language, Java including Android, Lua, Modula-3, OCAML, Octave, Scilab and R. Also several interpreted and compiled Scheme implementations (Guile, MzScheme/Racket, Chicken) are supported. SWIG is most commonly used to create high-level interpreted or compiled programming environments, user interfaces, and as a tool for testing and prototyping C/C++ software. SWIG is typically used to parse C/C++ interfaces and generate the 'glue code' required for the above target languages to call into the C/C++ code. SWIG can also export its parse tree in the form of XML and Lisp s-expressions. SWIG is free software and the code that SWIG generates is compatible with both commercial and non-commercial projects. Download the latest version. Documentation, papers, and presentations Features. Mailing Lists Bug tracking SwigWiki! Recent News 2016/06/12 - SWIG-3.0.10 released This release fixes a couple of important regressions in SWIG-3.0.9 for smart pointers and importing Python modules. 2016/05/29 - SWIG-3.0.9 released Summary of changes in SWIG-3.0.9 Add support for Python's implicit namespace packages. Fixes to support Go 1.6. C++11 std::array support added for Java. Improved C++ multiple inheritance support for Java/C# wrappers. Various other minor fixes and improvements for C#, D, Go, Java, Javascript, Lua, Python, R, Ruby, Scilab. 2015/12/31 - SWIG-3.0.8 released SWIG-3.0.8 summary: - pdf documentation enhancements. - Various Python 3.5 issues fixed. - std::array support added for Ruby and Python. - shared_ptr support added for Ruby. - Minor improvements for CFFI, Go, Java, Perl, Python, Ruby. 2015/08/03 - SWIG-3.0.7 released SWIG-3.0.7 release summary: Add support for Octave-4.0.0. Remove potential Android security exploit in generated Java classes. * Minor new features and bug fixes. 2015/07/05 - SWIG-3.0.6 released SWIG-3.0.6 is mostly a stability release. Release summary: - Stability and regression fixes. - Fixed parsing of C++ corner cases. - Language improvements and bug fixes for C#, Go, Java, Lua, Python, R. 2015/03/07 - Defending the GPL SWIG is a proud member of the Software Freedom Conservancy who has recently announced that they will be supporting a lawsuit to defend an alleged violation of the GNU General Public License (GPL). Ensuring this software license, the same one that protects the SWIG source code, is not abused and is actively defended in a court of law is important for everyone using the license. Conservancy is supporting Christoph Hellwig's lawsuit against VMware over GPL violations on Linux. VMware have stated that they would not comply with the GPL after many patient years of negotiations by Christoph and the Conservancy. More information is in the Conservancy's FAQ on the lawsuit. If you have benefited or enjoyed the fruits of SWIG, it is because the SWIG developer's chose to use a software license to ensure it remains freely available. Please consider supporting Christoph and Conservancy including their fund raising appeal to defend our license. William Fulton SWIG lead maintainer 2015/02/01 - SWIG-3.0.5 released We are pleased to announce SWIG-3.0.5 has been released with the addition of support for Scilab. This version also contains: An important Python fix for a regression in SWIG-3.0.3 when wrapping C++ default arguments. Minor improvements for C#, Go, Octave, PHP and Python. SWIG-3.0.4 was also released recently and contained part of the Python fix for the regression mentioned above. Python users should definitely rather use 3.0.5. 2014/12/31 - SWIG-3.0.3 released SWIG-3.0.3 release summary: - Add support for C++11 strongly typed enumerations. - Numerous bug fixes and minor enhancements for C#, D, Go, Java, Javascript, PHP, Perl and Python wrappers. More detailed release notes can be seen at http://swig.org/release.html 2014/06/04 - SWIG-3.0.2 released This release has been made to fix a bug during installation, but it also includes a couple of other rather minor changes. 2014/05/27 - SWIG-3.0.1 released SWIG-3.0.1 is another milestone release as it is the first version to contain support for Javascript. Release summary: Javascript module added. This supports JavascriptCore (Safari/Webkit), v8 (Chromium) and node.js currently. A few notable regressions introduced in 3.0.0 have been fixed - in Lua, nested classes and parsing of operator <<. The usual round of bug fixes and minor improvements for C#, GCJ, Go, Java, Lua, PHP and Python. More news Feedback and questions concerning this site should be posted to the swig-devel mailing list. Last modified : Sun May 29 15:22:36 2016"	"null"	"null"	"A wrapper/interface Generator that let you link your c++ code to Javascript, Perl, PHP, Python, Tcl and Ruby. [GPL/Output not licensed]"	"true"
"Scripting"	"V7"	"https://github.com/cesanta/v7"	"An embedded JavaScript engine. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"738"	"67"	"98"	"GitHub - cesanta/v7: Embedded JavaScript engine for C/C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 738 Fork 98 cesanta/v7 Code Issues 39 Pull requests 0 Pulse Graphs Embedded JavaScript engine for C/C++ 1,781 commits 6 branches 3 releases 15 contributors C 97.7% JavaScript 2.2% Makefile 0.1% C JavaScript Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags enable_coverage fix_win_math master math2 ubsan work Nothing to show 3.0 2.0 1.0 Nothing to show New pull request Latest commit f6a5db8 Jul 14, 2016 rojer committed with cesantabot Remove UBJSON from V7 … Leave the libraries around for later inclusion into Frozen.  PUBLISHED_FROM=d83d1a0c295c3521f1163d36a37971b4d38439d7 Permalink Failed to load latest commit information. docs Add target argument to C getOwnPropDesc callback Jul 13, 2016 examples Mass-fix header guards Jun 20, 2016 tests Remove UBJSON from V7 Jul 14, 2016 CONTRIBUTING.md Add contribution files Feb 15, 2016 LICENSE Update URLs Aug 11, 2015 Makefile Fix unit test runner Jan 15, 2016 README.md Update V7 readme Jun 16, 2016 ReleaseNotes.md Update URLs Aug 11, 2015 v7.c Remove UBJSON from V7 Jul 14, 2016 v7.h Add target argument to C getOwnPropDesc callback Jul 13, 2016 README.md V7: Embedded JavaScript engine V7 is the smallest JavaScript engine written in C. V7 features are: Cross-platform: works on anything, starting from Arduino to MS Windows Small size. Compiled static size is in 40k - 120k range, RAM footprint on initialization is about 800 bytes with freeze feature, 15k without freeze feature Simple and intuitive C/C++ API. It is easy to export existing C/C++ functions into JavaScript environment Standard: V7 implements JavaScript 5.1 Usable out-of-the-box: V7 provides an auxiliary library with Hardware (SPI, UART, etc), File, Crypto, Network API Source code is both ISO C and ISO C++ compliant Very easy to integrate: simply copy two files: v7.h and v7.c into your project V7 makes it possible to program Internet of Things (IoT) embedded devices in JavaScript. V7 is a part of the full stack Mongoose IoT Platform. Examples & Documentation Developer Centre - User Guide and API reference Examples - Collection of well-commented examples Support Forum - Ask questions on our support forum Contributions To submit contributions, sign Cesanta CLA and send GitHub pull request. You retain the copyright on your contributions. Licensing V7 is released under commercial and GNU GPL v.2 open source licenses. Commercial Projects: Once your project becomes commercialised GPLv2 licensing dictates that you need to either open your source fully or purchase a commercial license. Cesanta offer full, royalty-free commercial licenses without any GPL restrictions. If your needs require a custom license, we’d be happy to work on a solution with you. Contact us for pricing. Prototyping: While your project is still in prototyping stage and not for sale, you can use V7’s open source code without license restrictions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cesanta/v7"	"An embedded JavaScript engine. [GPL2]"	"true"
"Scripting"	"V8"	"http://code.google.com/p/v8/"	"A fast JavaScript engine by Google that can be embedded into any C++ application. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Issues -   v8 -  V8 JavaScript Engine -   Monorail  Monorail Project: v8 ▼ Issues People Development process History Sign in New issue Search Search within:  All issues  Open issues  New issues  Issues to verify for Advanced search Search tips ListGrid 1 - 100 of 801 Next › Columns: Loading...   ID ▼ Type ▼ Status ▼ Priority ▼ Owner ▼ Summary + Labels ▼ HW ▼ OS ▼ Component ▼ Stars ▼ ...   161 FeatureRequest Available Medium ---- Irregexp: Coalesce adjacent identical dispatches Irregexp ---- ---- Runtime 15     178 FeatureRequest Assigned Low yangguo@chromium.org Break points in functions defined through the API ---- ---- ---- 11     200 Bug Available Low dslomov@chromium.org Format control characters should be stripped before evaluating ES5 ---- ---- Language 19     360 FeatureRequest Available Low ---- Reduce size of comments in relocation info ---- ---- ---- 9     361 Bug Assigned Medium mvstan...@chromium.org ThreadSanitizer reports dubious practices in V8 ---- ---- ---- 13     368 FeatureRequest Assigned Low antonm@chromium.org Consider compiling the whole lookup chain in LoadStubCompiler::CompileLoadInterceptor ---- ---- ---- 10     445 FeatureRequest Available Low ---- Keyed load is much slower than property load. ---- ---- ---- 13     504 Bug Assigned Medium yu...@chromium.org Use a common way to bypass JSGlobalProxy ---- ---- ---- 13     569 FeatureRequest Assigned Low yangguo@chromium.org Extend native string compare code to support two byte strings ---- ---- ---- 10     592 Bug Assigned Medium yangguo@chromium.org Runtime function to throw RegExp stack overflow ---- ---- ---- 10     595 FeatureRequest Assigned Medium vitalyr@chromium.org API doesn't allow a function template to inherit from a built in object ---- ---- ---- 13     598 Bug Available Medium ---- Genesis::InstallExtensions is not reentrant. ---- ---- ---- 9     608 FeatureRequest Available Low ---- js2c looses significant spaces in regexps ---- ---- API, Build 12     635 FeatureRequest Assigned Medium kozyatin...@chromium.org Add LiveEdit feature implementation ---- ---- ---- 11     642 FeatureRequest Assigned Medium antonm@chromium.org Implement CallStubCompiler::CompileArrayPopCall for ARM ---- ---- ---- 6     663 FeatureRequest Assigned Medium podivilov@chromium.org Port ApiGetterEntryStub to other platforms ---- ---- ---- 5     674 Bug Assigned Medium antonm@chromium.org Consider porting fast identical objects comparison to ARM ---- ---- ---- 10     690 Bug Assigned Medium kasperl@chromium.org Splay benchmark spends too much time converting numbers to strings ---- ---- ---- 11     735 Bug Assigned Medium lasserei...@gmail.com MemCopy routine address should be registered so that profiler can understand it. ---- ---- ---- 9     762 Bug Available Medium ---- Evaluating LeftHandSideExpressions reference first in with statements ---- ---- Language 11     767 Bug Available Medium ---- Create tests for undetectable objects on builtins ---- ---- ---- 11     808 Bug Assigned Medium kaznacheev@chromium.org ASSERT failure with NormalizedMapCache, tricky underlying problem All All ---- 10     817 ---- Assigned ---- erik.co...@gmail.com ARM VFP: small issues in assembler and disassembler ---- ---- ---- 5     834 Bug Available Medium ---- Disassembler on IA-32 sometimes shows CPU registers instead of XMM registers ---- ---- ---- 10     896 ---- Available Medium dslomov@chromium.org Invalid reg exp not reported as an early error. ES5 ---- ---- Language 17     903 ---- Assigned ---- yangguo@chromium.org Array Concat with Non-Array Param Performance Issue ---- ---- ---- 9     905 Bug Assigned Medium sgjesse@chromium.org Runtime_DebugGetPropertyDetails should handle exceptions thrown by getters on elements. ---- ---- ---- 8     908 FeatureRequest Assigned Medium jsc...@chromium.org Replace constant splitting with constant cookies. ---- ---- ---- 6     913 Bug Assigned Medium mikhail....@gmail.com CPU Profiler should support multiple VM threads ---- ---- ---- 8     925 FeatureRequest Assigned Medium jsc...@chromium.org Add the ability to limit executable memory size ---- ---- ---- 6     942 Bug New Medium ---- Profiler: simplify platform-specific code by using pthreads ---- ---- ---- 11     945 FeatureRequest Assigned Low jkummerow@chromium.org Tests using Socket cannot be run in parallel ---- ---- ---- 14     953 Bug Assigned Medium yangguo@chromium.org WebKit regexp layout test timeout (fast/regex/pcre-test-1.html) ---- ---- ---- 9     961 Cleanup Assigned Medium vitalyr@chromium.org CLEANUP: merge atomics provided by platform-*.cc and ones in atomics.h ---- ---- ---- 5     999 Bug Assigned Medium sgjesse@chromium.org Port instanceof optimization to x64 x64 All ---- 8     1008 Bug Assigned Medium sgjesse@chromium.org v8 loads and unloads debugger for each debugger statement if no debugger is attached ---- ---- ---- 7     1042 Bug Assigned Low jkummerow@chromium.org Remove fixed register allocation in the ChunkBuilder for DoDiv ---- ---- ---- 7     1054 FeatureRequest Available Low ---- GDBJIT: GDB is not notified about code deserialized from snapshot HelpWanted ---- ---- ---- 8     1056 Bug Assigned Low kbr@chromium.org Improve performance of Typed Array intrinsics on non-SSE2 processors ---- ---- ---- 9     1065 FeatureRequest Assigned Medium kmillikin@chromium.org try catch incurs an unexpected performance penalty ---- ---- ---- 20     1071 Bug Assigned Medium kmillikin@chromium.org Crash / assertion failure in v8::internal::JSObject::LocalLookup ---- ---- ---- 8     1075 Bug Assigned Medium sgjesse@chromium.org ARM: Some deserialization tests fails ARM ---- ---- 12     1142 FeatureRequest Assigned Medium sgjesse@chromium.org Better coverage of inlining with --stress-opt ---- ---- ---- 7     1159 Bug Assigned Low whesse@chromium.org Clean up safepoint saved registers code HelpWanted All ---- ---- 10     1164 FeatureRequest Assigned Medium kmillikin@chromium.org Refactor control flow in Crankshaft All ---- ---- 6     1168 ---- Assigned ---- danno@chromium.org Test failures on some Mozilla strict mode tests ES5 ---- ---- ---- 11     1183 Bug Assigned Medium sgjesse@chromium.org Exception ""Object 44 has no method 'round'"" on http://dropzap.appspot.com ---- ---- ---- 11     1212 Bug Assigned Medium vitalyr@chromium.org Speedup invocation of methods on primitive string values. ---- ---- ---- 10     1221 ---- Assigned ---- mikhail....@gmail.com Setters and getters are reported as plain ""name"" in the profiler ---- ---- ---- 6     1274 FeatureRequest Assigned Low fschneider@chromium.org Represent dependencies between checks and instructions explicitly instead of using GVN flags ---- ---- ---- 5     1282 FeatureRequest Assigned Medium kozyatin...@chromium.org LiveEdit: Provide a user-friendly result message ---- ---- ---- 4     1283 Bug Assigned Medium kozyatin...@chromium.org Add prefix/suffis length parameter to ScriptOrigin ---- ---- ---- 8     1297 FeatureRequest Assigned Medium danno@chromium.org CpuProfiler should be multi-isolate aware ---- ---- ---- 6     1303 Bug Available Low ---- Stracktraces collected during logging does not cover inlinied functions ---- ---- ---- 5     1306 Bug Available Low ---- use mkstemp in http://code.google.com/p/v8/source/browse/trunk/tools/disasm.py ---- ---- ---- 7     1308 FeatureRequest Assigned Medium kozyatin...@chromium.org Debugger: provide sub-step operations ---- ---- ---- 6     1318 Bug Assigned Medium sgjesse@chromium.org Exception location incorrect when using ? : within exception constructor argument list ---- ---- ---- 5     1319 FeatureRequest Assigned Low sgjesse@chromium.org Consider reintroducing IntegerModStub code on ARM ---- ---- ---- 6     1320 Bug Assigned Medium kozyatin...@chromium.org LiveEdit: text differencer fails with out of memory on large files ---- ---- ---- 8     1328 Bug Assigned Medium vitalyr@chromium.org Avoid code duplication between HType and TypeInfo ---- ---- ---- 6     1340 Bug Assigned Medium vitalyr@chromium.org Extend CompareIC to cover strings ---- ---- ---- 8     1348 FeatureRequest Available Low ---- Implement NewInstance method for Object in the API ---- ---- API 6     1367 FeatureRequest Available Low ---- Debugger protocol: Document inlineRefs argument Documentation ---- ---- Runtime 5     1392 Bug Assigned Medium danno@chromium.org CanvasPixelArrays should round properly ---- ---- ---- 7     1394 Bug Available Medium ---- JSLinux bootup is slow. Performance ---- ---- Runtime 57     1401 Bug Assigned Medium sgjesse@chromium.org ARM: Wrong value returned from keyed property assignemnt ARM ---- ---- 6     1414 Bug Assigned Medium sgjesse@chromium.org Remove ENABLE_LOGGING_AND_PROFILING? ---- ---- ---- 5     1431 ---- Assigned ---- sgjesse@chromium.org Debugger::EnableAgent shouldn't fail if the port is already in use ---- ---- ---- 5     1432 ---- Assigned ---- yangguo@chromium.org Isolate memory leak? ---- ---- ---- 12     1444 ---- Assigned Low jkummerow@chromium.org v8 trunk fails to build on Windows with msvcltcg=off ---- ---- ---- 5     1449 Bug Assigned Medium mikhail....@gmail.com Revise current isolate checking in the Debugger class ---- ---- ---- 7     1464 Bug Assigned Low erik.co...@gmail.com NewGC: Optimize array shift during incremental marking. newGC ---- ---- ---- 7     1492 Bug Assigned Medium mikhail....@gmail.com Line ends array storage scheme isn't very effective ---- ---- ---- 8     1502 Bug Assigned Medium mstarzinger@chromium.org Weak callbacks can break assumptions in optimized code ---- ---- ---- 6     1506 FeatureRequest Available Low ---- Optimization for arguments.length ---- ---- Compiler 9     1517 Bug Assigned Medium kmillikin@chromium.org DISABLED TEST: regress-1119 + strangeness in getters/setters ---- ---- ---- 6     1519 Bug Assigned Medium kmillikin@chromium.org FLAKY TEST: mozilla js1_5/Regress/regress-167658 ARM ---- ---- 5     1524 Bug Assigned Medium mikhail....@gmail.com Assigning per-isolate log files names that contain isolate address isn't a good practice. ---- ---- ---- 6     1542 FeatureRequest Assigned Medium fschneider@chromium.org Improve GVN for integer conversions ---- ---- ---- 6     1557 Bug Assigned Medium mikhail....@gmail.com JSMin incorrectly deals with existing single-letter variables ---- ---- ---- 4     1569 FeatureRequest Assigned Medium adamk@chromium.org Implement Harmony Modules Harmony ---- ---- ---- 324     1575 Bug Assigned Medium fschneider@chromium.org x64 test-log LogCallbacks crashing sometimes ---- ---- ---- 5     1588 ---- Assigned ---- sgjesse@chromium.org IC generates bad code for certain ARM variants ---- ---- ---- 4     1589 Bug Assigned Medium kozyatin...@chromium.org [Debugger] properties of a host object (HTML5 localStorage) are incorrecly enumerated ---- ---- ---- 5     1590 ---- Available Low ---- Module liveobjectlist is broken since the addition of isolates, and must be removed or fixed. ---- ---- ---- 4     1601 Bug Assigned Medium jkummerow@chromium.org Convert isolate members to smart pointers ---- ---- Runtime 5     1607 Bug Assigned Low erik.co...@gmail.com NewGC: Check that MarkBit is effeciently handled by compilers on all supported platforms newGC ---- ---- ---- 6     1627 ---- Assigned ---- floitsc...@gmail.com Okay, so we got a gnarly Math.PI.toString(33).match(/[a-z]+/g)[29]. Excessive Number#toString decimal digits ---- ---- ---- 14     1629 Bug Assigned Medium whesse@chromium.org InspectorDebugger fails in stepOver - missing HandleScope ---- ---- ---- 4     1630 ---- Assigned ---- fschneider@chromium.org Compiled raytrace code is very slow ---- ---- ---- 15     1641 Bug Assigned Low mstarzinger@chromium.org Multiple equal script objects per isolate ---- ---- ---- 6     1646 Bug Available Low ---- Segmentation fault in v8::internal::Logger::is_logging ---- ---- ---- 5     1656 ---- Assigned Low yangguo@chromium.org Reconsider naming scheme of String::IsAsciiRepresentation and String::IsAsciiRepresentationUnderneath ---- ---- ---- 3     1658 ---- Assigned ---- mikhail....@gmail.com Heap snapshots internal and JSON representation is too big ---- ---- ---- 6     1661 Bug Assigned Medium u...@chromium.org External (typed) FP arrays should treats signalling NaNs like silent ones ---- ---- ---- 5     1665 ---- Assigned ---- yangguo@chromium.org Writing a cons string with v8::String::Utf8Write is inefficient ---- ---- ---- 5     1667 Bug Assigned Medium kozyatin...@chromium.org Scripts compiled during live-edit should be compiled in the original context, not the current one All All ---- 3     1675 Bug Assigned Medium kmillikin@chromium.org Crashes on mail.live.com ---- ---- ---- 2     1680 Bug Available Low ---- qwebirc heap takes up a lot of space ---- ---- ---- 4     1690 Bug Assigned Medium yangguo@chromium.org Disable dropping into the debugger while already being inside the debugger. ---- ---- Runtime 2   1 - 100 of 801 Next › Sort Up Sort Down Hide Column Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Sort Up Sort Down Show only ► Hide Column Group Rows Bug Cleanup FeatureRequest Assigned Available New Low Medium adamk@chromium.org antonm@chromium.org danno@chromium.org dslomov@chromium.org erik.co...@gmail.com floitsc...@gmail.com fschneider@chromium.org jkummerow@chromium.org jsc...@chromium.org kasperl@chromium.org kaznacheev@chromium.org kbr@chromium.org kmillikin@chromium.org kozyatin...@chromium.org lasserei...@gmail.com mikhail....@gmail.com mstarzinger@chromium.org mvstan...@chromium.org podivilov@chromium.org sgjesse@chromium.org u...@chromium.org vitalyr@chromium.org whesse@chromium.org yangguo@chromium.org yu...@chromium.org Documentation ES5 Harmony HelpWanted Irregexp Performance newGC ARM All x64 All API Build Compiler Language Runtime 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 19 20 57 324 Show columns:  ♦ ID  ♦ Type  ♦ Status  ♦ Priority  ♦ Owner  ♦ Summary  ♦ HW  ♦ OS  ♦ Component  ♦ Stars     Attachments     Blocked     BlockedOn     Blocking     Cc     Closed     Hotlist     MergedInto     Modified     Opened     Project     ReleaseBlock     Reporter     SpecViolation     Edit column spec... About Monorail Feedback on Monorail Terms Privacy"	"null"	"null"	"A fast JavaScript engine by Google that can be embedded into any C++ application. [BSD]"	"true"
"Scripting"	"ChakraCore"	"https://github.com/Microsoft/ChakraCore"	"A JavaScript engine by Microsoft that can be embedded into nodejs. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5344"	"357"	"598"	"GitHub - Microsoft/ChakraCore: ChakraCore is the core part of the Chakra Javascript engine that powers Microsoft Edge Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 357 Star 5,344 Fork 598 Microsoft/ChakraCore Code Issues 135 Pull requests 19 Wiki Pulse Graphs ChakraCore is the core part of the Chakra Javascript engine that powers Microsoft Edge 1,920 commits 8 branches 0 releases 61 contributors JavaScript 51.0% C++ 41.9% C 6.6% Assembly 0.2% Batchfile 0.1% CMake 0.1% Other 0.1% JavaScript C++ C Assembly Batchfile CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags JsRTDebugging TimeTravelDebugging WebAssembly linux-ci linux master release/1.1 release/1.2 Nothing to show Nothing to show New pull request Latest commit 50767f9 Jul 14, 2016 Yongqu [MERGE #1254 @Yongqu] JSRT module api … Merge pull request #1254 from Yongqu:bugfix  Add module support in chakracore by adding related JSRT APIs. This set of APIs are in chakracore.dll only, not in chakra.dll as we are using different binding for edge browser. The host is responsible for asynchronously fetch dependent modules and handle error conditions.  The overall loading sequences:  ```    host                                chakacore.dll 1. Load top level script 2.                             ---->   JsInitializeModuleRecord // for root module 3.                             ---->   JsParseModuleSource      // parse root module 4. FetchImportedModuleCallback <----                            // optional for imported module 5.                             ----->  JsInitializeModuleRecord // for nested module 6. load additional script 7.                             ----->  JsParseModuleSource      // for nested module 8. NotifyModuleReadyCallback   <----- 9.                             ----->  JsModuleEvaluation       // for root module ```  step 4 to step 7 could be happening in a loop, and step 5 should happen asynchronously like in a Promise. Step 9 will also evaluate all the nested modules.  Port some existing test cases to ch. We need to support test262 hook in later checkin. Permalink Failed to load latest commit information. Build [1.2>master] [MERGE #1186 @dilijev] MicroBuild v2: Set the ObjectDire… Jul 13, 2016 bin fix earlier merge conflict resolution error Jul 14, 2016 jenkins A native application for running native unittests Jul 6, 2016 lib [MERGE #1254 @Yongqu] JSRT module api Jul 14, 2016 pal cross-platform: Compile into module blocks Jul 12, 2016 test Merge branch 'master' into bugfix Jul 14, 2016 .gitattributes Fix .gitattributes to ignore line ending conversions for *.js files c… May 13, 2016 .gitignore Merge from Time-Travel Debugging with history squash. Jun 21, 2016 CMakeLists.txt cross platform: ch runs on OSX and passes 1198 tests Jul 5, 2016 CODE_OF_CONDUCT.md [MERGE #67] Fix typo in CoC Jan 13, 2016 CONTRIBUTING.md Add a copy of the security notice to CONTRIBUTING.md. Mar 7, 2016 LICENSE.txt Initial commit Jan 5, 2016 README.md Add Linux test config and static configs to README. Jul 6, 2016 THIRD-PARTY-NOTICES.txt A native application for running native unittests Jul 6, 2016 build.sh xplat: support disabling experimental features Jul 1, 2016 netci.groovy Add static binary build to linux jobs. Jun 29, 2016 result.txt cross-platform: DateTime Implementation May 26, 2016 README.md ChakraCore ChakraCore is the core part of Chakra, the high-performance JavaScript engine that powers Microsoft Edge and Windows applications written in HTML/CSS/JS. ChakraCore supports Just-in-time (JIT) compilation of JavaScript for x86/x64/ARM, garbage collection, and a wide range of the latest JavaScript features. ChakraCore also supports the JavaScript Runtime (JSRT) APIs, which allows you to easily embed ChakraCore in your applications. You can stay up-to-date on progress by following the MSEdge developer blog. Build Status Debug Test Release x86 x64 arm linux linux (static) If you see badges reading ""Build: Unknown"" it is likely because a build was skipped due to changes being only in files known not to affect the health of the build. Above is a table of our rolling build status. We run additional builds on a daily basis. See Build Status for the status of all builds. Security If you believe you have found a security issue in ChakraCore, please share it with us privately following the guidance at the Microsoft Security TechCenter. Reporting it via this channel helps minimize risk to projects built with ChakraCore. Documentation ChakraCore Architecture Quickstart Embedding ChakraCore JSRT Reference Contribution guidelines Blogs, talks and other resources Building ChakraCore You can build ChakraCore on Windows 7 SP1 or above, and Windows Server 2008 R2 or above, with either Visual Studio 2013 or 2015 with C++ support installed. Once you have Visual Studio installed: Clone ChakraCore through git clone https://github.com/Microsoft/ChakraCore.git Open Build\Chakra.Core.sln in Visual Studio Build Solution More details in Building ChakraCore. Using ChakraCore Once built, you have a few options for how you can use ChakraCore: The most basic is to test the engine is running correctly with the ch.exe binary. This app is a lightweight hosting of JSRT that you can use to run small applications. After building, you can find this binary in: Build\VcBuild\bin\${platform}_${configuration} (e.g. Build\VcBuild\bin\x64_debug) You can embed ChakraCore in your applications - see documentation and samples. Finally, you can also use ChakraCore as the JavaScript engine in Node. You can learn more by reading how to use Chakra as Node's JS engine A note about using ChakraCore: ChakraCore is the foundational JavaScript engine, but it does not include the external APIs that make up the modern JavaScript development experience. For example, DOM APIs like document.write() are additional APIs that are not available by default and would need to be provided. For debugging, you may instead want to use print(). Contribute Contributions to ChakraCore are welcome. Here is how you can contribute to ChakraCore: Submit bugs and help us verify fixes Submit pull requests for bug fixes and features and discuss existing proposals Chat about @ChakraCore on Twitter Please refer to Contribution guidelines and the Code of Conduct for more details. License Code licensed under the MIT License. Roadmap For details on our planned features and future direction please refer to our roadmap. Contact us For questions about ChakraCore, you can reach us on Gitter or open an issue and prefix the issue title with [Question]. See Question tag for already-opened questions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/ChakraCore"	"A JavaScript engine by Microsoft that can be embedded into nodejs. [MIT]"	"true"
"Serialization"	"cereal"	"https://github.com/USCiLab/cereal"	"A C++11 library for serialization. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"810"	"96"	"171"	"GitHub - USCiLab/cereal: A C++11 library for serialization Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 96 Star 810 Fork 171 USCiLab/cereal Code Issues 70 Pull requests 14 Wiki Pulse Graphs A C++11 library for serialization 718 commits 4 branches 7 releases Fetching contributors C++ 98.4% CMake 1.3% Shell 0.3% C++ CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages-develop gh-pages master Nothing to show v1.2.0 v1.1.2 v1.1.1 v1.1.0 v1.0.0 v0.9.1 v0.9.0 Nothing to show New pull request Latest commit 42a45b6 Jun 30, 2016 AzothAmmo Merge branch 'develop' for 1.2 release Permalink Failed to load latest commit information. doc Comment level doc for #205 Jul 17, 2015 include/cereal cleanup related to #291 Jun 29, 2016 sandbox Updates RapidJSON to 1.0.2, nests in namespace Apr 19, 2016 scripts fix update scripts to apply to develop Jan 19, 2015 unittests fix uninit valgrind error for base ctor in diamond inheritance Jun 30, 2016 vs2013 Use /W4 in all but performance. Jun 12, 2016 .gitignore Split lookup and exists check in PolymorphicCasters into two functions. Jun 29, 2016 .travis.yml Update .travis.yml Aug 18, 2014 CMakeLists.txt Include Boost as system library Jan 22, 2016 LICENSE Update copyright 2013 -> 2014 Mar 20, 2014 README.md Update README.md May 2, 2014 README.md cereal - A C++11 library for serialization cereal is a header-only C++11 serialization library. cereal takes arbitrary data types and reversibly turns them into different representations, such as compact binary encodings, XML, or JSON. cereal was designed to be fast, light-weight, and easy to extend - it has no external dependencies and can be easily bundled with other code or used standalone. cereal has great documentation Looking for more information on how cereal works and its documentation? Visit cereal's web page to get the latest information. cereal is easy to use Installation and use of of cereal is fully documented on the main web page, but this is a quick and dirty version: Download cereal and place the headers somewhere your code can see them Write serialization functions for your custom types or use the built in support for the standard library cereal provides Use the serialization archives to load and save data #include <cereal/types/unordered_map.hpp> #include <cereal/types/memory.hpp> #include <cereal/archives/binary.hpp> #include <fstream>  struct MyRecord {   uint8_t x, y;   float z;    template <class Archive>   void serialize( Archive & ar )   {     ar( x, y, z );   } };  struct SomeData {   int32_t id;   std::shared_ptr<std::unordered_map<uint32_t, MyRecord>> data;    template <class Archive>   void save( Archive & ar ) const   {     ar( data );   }    template <class Archive>   void load( Archive & ar )   {     static int32_t idGen = 0;     id = idGen++;     ar( data );   } };  int main() {   std::ofstream os(""out.cereal"", std::ios::binary);   cereal::BinaryOutputArchive archive( os );    SomeData myData;   archive( myData );    return 0; } cereal has a mailing list Either get in touch over email or on the web. cereal has a permissive license cereal is licensed under the BSD license. cereal build status develop : Were you looking for the Haskell cereal? Go here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/USCiLab/cereal"	"A C++11 library for serialization. [BSD]"	"true"
"Serialization"	"cppcodec"	"https://github.com/tplgy/cppcodec"	"Header-only C++11 library to encode/decode base64, base32 and hex with consistent, flexible API. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"6"	"5"	"GitHub - tplgy/cppcodec: Header-only C++11 library to encode/decode base64, base64url, base32, base32hex and hex (a.k.a. base16) as specified in RFC 4648, plus Crockford's base32. MIT licensed with consistent, flexible API. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 15 Fork 5 tplgy/cppcodec Code Issues 9 Pull requests 0 Pulse Graphs Header-only C++11 library to encode/decode base64, base64url, base32, base32hex and hex (a.k.a. base16) as specified in RFC 4648, plus Crockford's base32. MIT licensed with consistent, flexible API. 53 commits 1 branch 0 releases Fetching contributors C++ 98.3% CMake 1.7% C++ CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 91273c6 Jul 4, 2016 thrimbor committed with jpetso Change return type of direct_data_access_result_state::size to size_t (… … …#21) Permalink Failed to load latest commit information. cppcodec Change return type of direct_data_access_result_state::size to size_t (… Jul 4, 2016 test Add base32_hex codec variant, a.k.a. base32hex from RFC 4648. Jan 30, 2016 tool Make the Hello World example from README.md actually work. Dec 24, 2015 .gitignore Add .gitignore. Jan 4, 2016 .gitmodules Add test framework and a set of tests for base32_crockford. Dec 27, 2015 .travis.yml Build with Travis CI. Jan 18, 2016 CMakeLists.txt Set language to C++ otherwise CMake complains Apr 10, 2016 LICENSE.txt Initial commit of cppcodec. Dec 22, 2015 README.md Add base32_hex codec variant, a.k.a. base32hex from RFC 4648. Jan 30, 2016 TODO.md Remove some items from TODO.md that I've added as GitHub issues. Jan 17, 2016 README.md cppcodec Header-only C++11 library to encode/decode base64, base64url, base32, base32hex and hex (a.k.a. base16) as specified in RFC 4648, plus Crockford's base32. MIT licensed with consistent, flexible API. Supports raw pointers, std::string and (templated) character vectors without unnecessary allocations. Usage Import cppcodec into your project (copy, git submodule, etc.) Add the cppcodec root directory to your build system's list of include directories Include headers and start using the API. Since cppcodec is a header-only library, no extra build step is needed. Alternatively, you can install the headers and build extra tools/tests with CMake. Variants A number of codec variants exist for base64 and base32, defining different alphabets or specifying the use of padding and line breaks in different ways. cppcodec is designed to let you make a conscious choice about which one you're using, but assumes you will mostly stick to a single one. cppcodec's approach is to implement encoding/decoding algorithms in different namespaces (e.g. cppcodec::base64_rfc4648) and in addition to the natural headers, also offer convenience headers to define a shorthand alias (e.g. base64) for one of the variants. Here is an expected standard use of cppcodec: #include <cppcodec/base32_default_crockford.hpp> #include <cppcodec/base64_default_rfc4648.hpp> #include <iostream>  int main() {    std::vector<uint8_t> decoded = base64::decode(""YW55IGNhcm5hbCBwbGVhc3VyZQ=="");    std::cout << ""decoded size (\""any carnal pleasure\""): "" << decoded.size() << '\n';    std::cout << base32::encode(decoded) << std::endl; // ""C5Q7J833C5S6WRBC41R6RSB1EDTQ4S8""    return 0; } If possible, avoid including ""default"" headers in other header files. Non-aliasing headers omit the ""default"" part, e.g. <cppcodec/base64_rfc4648.hpp> or <cppcodec/hex_lower.hpp>. Currently supported variants are: base64 base64_rfc4648 uses the PEM/MIME/UTF-7 alphabet, that is (in order) A-Z, a-z, 0-9 plus characters '+' and '/'. This is what's usually considered the ""standard base64"" that you see everywhere and requires padding ('=') but no line breaks. Whitespace and other out-of-alphabet symbols are regarded as a parse error. base64_url is the same as base64_rfc4648 (and defined in the same RFC) but uses '-' (minus) and '_' (underscore) as special characters instead of '+' and '/'. This is safe to use for URLs and file names. Padding with '=' is still required, look for a future base64_url_unpadded variant if you want to do without. base32 All base32 variants encode 5 bits as one (8-bit) character, which results in an encoded length of roughly 160% (= 8/5). Their selling point is mainly case-insensitive decoding, no special characters and alphabets that can be communicated via phone. base32_rfc4648 implements the popular, standardized variant defined in RFC 4648. It uses the full upper-case alphabet A-Z for the first 26 values and the digit characters 2-7 for the last ten. Padding with '=' is required and makes the encoded string a multiple of 8 characters. The codec accepts no invalid symbols, so if you want to let the user enter base32 data then consider replacing numbers '0', '1' and '8' with 'O', 'I' and 'B' on input. base32_crockford implements Crockford base32. It's less widely used than the RFC 4648 alphabet, but offers a more carefully picked alphabet and also defines decoding similar characters 'I', 'i', 'L' 'l' as '1' plus 'O' and 'o' as '0' so no care is required for user input. Crockford base32 does not use '=' padding. Checksums are not implemented. Note that the specification is ambiguous about whether to pad bit quintets to the left or to the right, i.e. whether the codec is a place-based single number encoding system or a concatenative iterative stream encoder. This codec variant picks the streaming interpretation and thus zero-pads on the right. (See http://merrigrove.blogspot.ca/2014/04/what-heck-is-base64-encoding-really.html for a detailed discussion of the issue.) base32_hex is the logical extension of the hexadecimal alphabet, and also specified in RFC 4648. It uses the digit characters 0-9 for the first 10 values and the upper-case letters A-V for the remaining ones. The alphabet is conceptually simple, but contains all of the ambiguous number/letter pairs that the other variants try to avoid. It is also less suitable for verbal transmission. Padding with '=' is required and makes the encoded string a multiple of 8 characters. hex hex_upper outputs upper-case letters and accepts lower-case as well. This is an octet-streaming codec variant and for decoding, requires an even number of input symbols. In other words, don't try to decode (0x)""F"", (0x)""10F"" etc. with this variant, use a place-based single number codec instead if you want to do this. Also, you are expected to prepend and remove a ""0x"" prefix externally as it won't be generated when encoding / will be rejected when decoding. hex_lower outputs lower-case letters and accepts upper-case as well. Similar to hex_upper, it's stream-based (no odd symbol lengths) and does not deal with ""0x"" prefixes. API All codecs expose the same API. In the below documentation, replace <codec> with a default alias such as base64, base32 or hex, or with the full namespace such as cppcodec::base64_rfc4648 or cppcodec::base32_crockford. For templated parameters T and Result, you can use e.g. std::vector<uint8_t>, std::string or anything that supports: .data() and .size() for T (read-only) template parameters, for Result template parameters, also .reserve(size_t), .resize(size_t) and .push_back([uint8_t|char]). It's possible to support types lacking these functions, consult the code directly if you need this. Encoding // Convenient version, returns an std::string. std::string <codec>::encode(const [uint8_t|char]* binary, size_t binary_size); std::string <codec>::encode(const T& binary);  // Convenient version with templated result type. Result <codec>::encode<Result>(const [uint8_t|char]* binary, size_t binary_size); Result <codec>::encode<Result>(const T& binary);  // Reused result container version. Resizes encoded_result before writing to it. void <codec>::encode(Result& encoded_result, const [uint8_t|char]* binary, size_t binary_size); void <codec>::encode(Result& encoded_result, const T& binary); Encode binary data into an encoded (base64/base32/hex) string. Won't throw by itself, but the result type might throw on .resize(). size_t <codec>::encode(char* encoded_result, size_t encoded_buffer_size, const [uint8_t|char]* binary, size_t binary_size) noexcept; size_t <codec>::encode(char* encoded_result, size_t encoded_buffer_size, const T& binary) noexcept; Encode binary data into pre-allocated memory with a buffer size of <codec>::encoded_size(binary_size) or larger. Returns the byte size of the encoded string excluding null termination, which is equal to <codec>::encoded_size(binary_size). If encoded_buffer_size is larger than required, a single null termination character ('\0') is written after the last encoded character. The encoded_size() function ensures that the required buffer size is large enough to hold the padding required for the respective codec variant. Provide a buffer of size encoded_size() + 1 to make it a null-terminated C string. Calls abort() if encoded_buffer_size is insufficient. (That way, the function can remain noexcept rather than throwing on an entirely avoidable error condition.) size_t <codec>::encoded_size(size_t binary_size) noexcept; Calculate the (exact) length of the encoded string based on binary size, excluding null termination but including padding (if specified by the codec variant). Decoding // Convenient version, returns an std::vector<uint8_t>. std::vector<uint8_t> <codec>::decode(const char* encoded, size_t encoded_size); std::vector<uint8_t> <codec>::decode(const T& encoded);  // Convenient version with templated result type. Result <codec>::decode<Result>(const char* encoded, size_t encoded_size); Result <codec>::decode<Result>(const T& encoded);  // Reused result container version. Resizes binary_result before writing to it. void <codec>::decode(Result& binary_result, const char* encoded, size_t encoded_size); void <codec>::decode(Result& binary_result, const T& encoded); Decode an encoded (base64/base32/hex) string into a binary buffer. Throws a cppcodec::parse_error exception (inheriting from std::domain_error) if the input data does not conform to the codec variant specification. Also, the result type might throw on .resize(). size_t <codec>::decode([uint8_t|char]* binary_result, size_t binary_buffer_size, const char* encoded, size_t encoded_size); size_t <codec>::decode([uint8_t|char]* binary_result, size_t binary_buffer_size, const T& encoded); Decode an encoded string into pre-allocated memory with a buffer size of <codec>::decoded_max_size(encoded_size) or larger. Returns the byte size of the decoded binary data, which is less or equal to <codec>::decoded_max_size(encoded_size). Calls abort() if binary_buffer_size is insufficient, for consistency with encode(). Throws a cppcodec::parse_error exception (inheriting from std::domain_error) if the input data does not conform to the codec variant specification. size_t <codec>::decoded_max_size(size_t encoded_size) noexcept; Calculate the maximum size of the decoded binary buffer based on the encoded string length. If the codec variant does not allow padding or whitespace / line breaks, the maximum decoded size will be the exact decoded size. If the codec variant allows padding or whitespace / line breaks, the actual decoded size might be smaller. If you're using the pre-allocated memory result call, make sure to take its return value (the actual decoded size) into account. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tplgy/cppcodec"	"Header-only C++11 library to encode/decode base64, base32 and hex with consistent, flexible API. [MIT]"	"true"
"Serialization"	"FlatBuffers"	"https://github.com/google/flatbuffers"	"A Memory efficient serialization library. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6139"	"431"	"869"	"GitHub - google/flatbuffers: Memory Efficient Serialization Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 431 Star 6,139 Fork 869 google/flatbuffers Code Issues 95 Pull requests 26 Pulse Graphs Memory Efficient Serialization Library http://google.github.io/flatbuffers/ 792 commits 4 branches 7 releases 95 contributors C++ 46.9% C# 11.6% Python 8.6% PHP 8.5% Go 7.4% Java 6.2% Other 10.8% C++ C# Python PHP Go Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags benchmarks fix-277 gh-pages master Nothing to show v1.3.0 v1.2.0 v1.1.0 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit b22db6e Jul 14, 2016 gwvo committed on GitHub Merge pull request #3905 from bog-dan-ro/master … Verifier computes the buffersize, useful when streaming multiple flatbuffers Permalink Failed to load latest commit information. CMake Add env var for flatc schema compiler cmake module Jun 10, 2016 android Merge ""Removed reference to deprecated NDK toolchain version."" into u… May 23, 2016 biicode Made .sh files all have same comment formatting. May 23, 2016 build_ide Added missing util.cpp to VS project Apr 4, 2016 docs Fixed typo Jul 1, 2016 go Fix heap allocation when reading a string. Apr 23, 2016 grpc Added GRPC code generator to flatc. Jun 29, 2016 include/flatbuffers Verify everything in one shot Jul 14, 2016 java Fix some error Jul 1, 2016 js Fix #3773: Generated JS now avoids the flatbuffers object Feb 25, 2016 net/FlatBuffers Removed BOM marker from some files. May 23, 2016 php Implement __vector_as_bytes and methods to get [ubyte] efficiently Mar 29, 2016 python Added missing licenses to some sh/cs/py files. May 23, 2016 reflection Made .sh files all have same comment formatting. May 23, 2016 samples Verify everything in one shot Jul 14, 2016 src Merge pull request #3905 from bog-dan-ro/master Jul 14, 2016 tests Merge pull request #3905 from bog-dan-ro/master Jul 14, 2016 .gitattributes Initial commit of the FlatBuffers code. Jun 10, 2014 .gitignore Added Visual Studio transient files to .gitignore Jan 18, 2016 .travis.yml Disabled broken biicode builds on Travis for the moment. Feb 22, 2016 CMakeLists.txt Fix some error Jul 1, 2016 CONTRIBUTING.md Rename CONTRIBUTING to CONTRIBUTING.md Jul 13, 2016 LICENSE.txt Fix Visual Studio 2012 build warning. Sep 11, 2015 biicode.conf added .travis.yml file (build with original and biicode building); Apr 15, 2015 composer.json (PHP) add experimental support for PHP language. Nov 18, 2015 readme.md Add C support in README, minor updates in other C doc Mar 26, 2016 readme.md FlatBuffers FlatBuffers is an efficient cross platform serialization library for games and other memory constrained apps. It allows you to directly access serialized data without unpacking/parsing it first, while still having great forwards/backwards compatibility. Go to our landing page to browse our documentation. Supported operating systems Android Windows MacOS X Linux Supported programming languages C++ C# C Go Java JavaScript PHP Python and many more in progress... Contribution FlatBuffers Google Group to discuss FlatBuffers with other developers and users. FlatBuffers Issues Tracker to submit an issue. stackoverflow.com with flatbuffers tag for any questions regarding FlatBuffers. To contribute to this project, see CONTRIBUTING. Integration For applications on Google Play that integrate this tool, usage is tracked. This tracking is done automatically using the embedded version string (flatbuffer_version_string), and helps us continue to optimize it. Aside from consuming a few extra bytes in your application binary, it shouldn't affect your application at all. We use this information to let us know if FlatBuffers is useful and if we should continue to invest in it. Since this is open source, you are free to remove the version string but we would appreciate if you would leave it in. Licensing Flatbuffers is licensed under the Apache License, Version 2.0. See LICENSE for the full license text. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/flatbuffers"	"A Memory efficient serialization library. [Apache2]"	"true"
"Serialization"	"MessagePack"	"https://github.com/msgpack/msgpack-c"	"Efficient binary serialization format ""like JSON"" for C/C++. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"770"	"98"	"326"	"GitHub - msgpack/msgpack-c: MessagePack implementation for C and C++ / msgpack.org[C/C++] Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 98 Star 770 Fork 326 msgpack/msgpack-c Code Issues 24 Pull requests 5 Wiki Pulse Graphs MessagePack implementation for C and C++ / msgpack.org[C/C++] 2,057 commits 7 branches 31 releases 70 contributors C++ 92.8% C 5.6% Other 1.6% C++ C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cpp-0.5 cpp-1.0 cpp-1.2 cpp-1.4 gh-pages master poc/0.6 Nothing to show cpp-2.0.0 cpp-1.4.2 cpp-1.4.1 cpp-1.4.0 cpp-1.3.0 cpp-1.2.0 cpp-1.1.0 cpp-1.0.1 cpp-1.0.0 cpp-0.5.9 cpp-0.5.8 cpp-0.5.6 cpp-0.5.5 cpp-0.5.4 cpp-0.5.3 cpp-0.5.2 cpp-0.5.1 cpp-0.5.0 cpp-0.4.3 cpp-0.4.2 cpp-0.4.1 cpp-0.4.0 cpp-0.3.8 cpp-0.3.7 cpp-0.3.6 cpp-0.3.5 cpp-0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 Nothing to show New pull request Latest commit f573fd6 Jul 10, 2016 redboltz committed on GitHub Merge pull request #499 from redboltz/fix_498 … Fixed #498. Permalink Failed to load latest commit information. ci Removed autotools and msvc files. Jun 5, 2016 erb/v1 Added size_equal_only support for C++03 msgpack::type::tuple. Jun 20, 2016 example Add missing platform detection in examples/test Jun 18, 2016 external/boost Updated boost predef and preprocessor from 1.58.0 to 1.61.0 May 30, 2016 include Fixed #498. Jul 6, 2016 src Removed autotools and msvc files. Jun 5, 2016 test Added size_equal_only support for C++03 msgpack::type::tuple. Jun 20, 2016 .gitignore Add a list of contributors in README.md and remove AUTHORS file Feb 15, 2015 .gitmodules Added Boost.Preprocessor as a submodule. Aug 11, 2015 .travis.yml Removed autotools and msvc files. Jun 5, 2016 CHANGELOG.md Appended CHANGELOG. Updated version. Jun 25, 2016 CMakeLists.txt Added CMAKE_VERSION checking. Jun 22, 2016 COPYING Version 1.3.0. Nov 21, 2015 Doxyfile reorganized tree Jan 3, 2013 Files.cmake Fixed #390. Jun 20, 2016 LICENSE_1_0.txt Version 1.3.0. Nov 21, 2015 NOTICE Version 1.3.0. Nov 21, 2015 QUICKSTART-C.md Fixed #395 Jan 14, 2016 QUICKSTART-CPP.md Removed obsolete APIs form v2. Mar 25, 2016 README.md Appended CHANGELOG. Updated version. Jun 25, 2016 appveyor.yml Appended CHANGELOG. Updated version. Jun 25, 2016 make_file_list.sh Removed autotools and msvc files. Jun 5, 2016 makedist.sh Appended CHANGELOG. Updated version. Jun 25, 2016 msgpack.pc.in Fixed #395 Jan 13, 2016 msgpack_vc8.sln Add msvc project back Jun 7, 2016 msgpack_vc8.vcproj Add msvc project back Jun 7, 2016 preprocess Re-organized tree to prepare for version 2.0.0. Jan 31, 2016 README.md msgpack for C/C++ Version 2.0.0 (under development) It's like JSON but small and fast. Overview MessagePack is an efficient binary serialization format, which lets you exchange data among multiple languages like JSON, except that it's faster and smaller. Small integers are encoded into a single byte while typical short strings require only one extra byte in addition to the strings themselves. Example In C: #include <msgpack.h> #include <stdio.h>  int main(void) {     /* msgpack::sbuffer is a simple buffer implementation. */     msgpack_sbuffer sbuf;     msgpack_sbuffer_init(&sbuf);      /* serialize values into the buffer using msgpack_sbuffer_write callback function. */     msgpack_packer pk;     msgpack_packer_init(&pk, &sbuf, msgpack_sbuffer_write);      msgpack_pack_array(&pk, 3);     msgpack_pack_int(&pk, 1);     msgpack_pack_true(&pk);     msgpack_pack_str(&pk, 7);     msgpack_pack_str_body(&pk, ""example"", 7);      /* deserialize the buffer into msgpack_object instance. */     /* deserialized object is valid during the msgpack_zone instance alive. */     msgpack_zone mempool;     msgpack_zone_init(&mempool, 2048);      msgpack_object deserialized;     msgpack_unpack(sbuf.data, sbuf.size, NULL, &mempool, &deserialized);      /* print the deserialized object. */     msgpack_object_print(stdout, deserialized);     puts("""");      msgpack_zone_destroy(&mempool);     msgpack_sbuffer_destroy(&sbuf);      return 0; } See QUICKSTART-C.md for more details. In C++: #include <msgpack.hpp> #include <string> #include <iostream> #include <sstream>  int main(void) {     msgpack::type::tuple<int, bool, std::string> src(1, true, ""example"");      // serialize the object into the buffer.     // any classes that implements write(const char*,size_t) can be a buffer.     std::stringstream buffer;     msgpack::pack(buffer, src);      // send the buffer ...     buffer.seekg(0);      // deserialize the buffer into msgpack::object instance.     std::string str(buffer.str());      msgpack::object_handle oh =         msgpack::unpack(str.data(), str.size());      // deserialized object is valid during the msgpack::object_handle instance is alive.     msgpack::object deserialized = oh.get();      // msgpack::object supports ostream.     std::cout << deserialized << std::endl;      // convert msgpack::object instance into the original type.     // if the type is mismatched, it throws msgpack::type_error exception.     msgpack::type::tuple<int, bool, std::string> dst;     deserialized.convert(dst);      return 0; } See QUICKSTART-CPP.md for more details. Usage C++ Header Only Library When you use msgpack on C++03 and C++11, you can just add msgpack-c/include to your include path: g++ -I msgpack-c/include your_source_file.cpp  If you want to use C version of msgpack, you need to build it. You can also install the C and C++ versions of msgpack. Building and Installing Install from git repository Using autotools You will need: gcc >= 4.1.0 or clang >= 3.3.0 autoconf >= 2.60 automake >= 1.10 libtool >= 2.2.4 The build steps below are for C and C++03. If compiling for C++11, add -std=c++11 to the environmental variable CXXFLAGS with export CXXFLAGS=""$CXXFLAGS -std=c++11"" prior to following the directions below. $ git clone https://github.com/msgpack/msgpack-c $ cd msgpack-c $ ./bootstrap $ ./configure $ make You can install the resulting library like this: $ sudo make install Using cmake Using the Terminal (CLI) You will need: gcc >= 4.1.0 cmake >= 2.8.0 C and C++03: $ git clone https://github.com/msgpack/msgpack-c.git $ cd msgpack-c $ cmake . $ make $ sudo make install  If you want to setup C++11 version of msgpack instead, execute the following commands: $ git clone https://github.com/msgpack/msgpack-c.git $ cd msgpack-c $ cmake -DMSGPACK_CXX11=ON . $ sudo make install  GUI on Windows Clone msgpack-c git repository. $ git clone https://github.com/msgpack/msgpack-c.git  or using GUI git client. e.g.) tortoise git https://code.google.com/p/tortoisegit/ Launch cmake GUI client. Set 'Where is the source code:' text box and 'Where to build the binaries:' text box. Click 'Configure' button. Choose your Visual Studio version. Click 'Generate' button. Open the created msgpack.sln on Visual Studio. Build all. Documentation You can get addtional information on the wiki. Contributing msgpack-c is developed on GitHub at msgpack/msgpack-c. To report an issue or send a pull request, use the issue tracker. Here's the list of great contributors. License msgpack-c is licensed under the Boost Software License, Version 1.0. See the LICENSE_1_0.txt file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/msgpack/msgpack-c"	"Efficient binary serialization format ""like JSON"" for C/C++. [Apache2]"	"true"
"Serialization"	"website"	"http://msgpack.org/"	"Efficient binary serialization format ""like JSON"" for C/C++. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"MessagePack · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization MessagePack http://msgpack.org/ Repositories People 28 Filters Sources Forks HTML 29 14 website http://msgpack.org/ Updated Jul 14, 2016 Go 73 13 msgpack-go Updated Jul 13, 2016 C++ 770 325 msgpack-c MessagePack implementation for C and C++ / msgpack.org[C/C++] Updated Jul 12, 2016 C# 356 82 msgpack-cli MessagePack implementation for Common Language Infrastructure / msgpack.org[C#] Updated Jul 10, 2016 Java 612 174 msgpack-java MessagePack serializer implementation for Java / msgpack.org[Java] Updated Jul 9, 2016 C 423 72 msgpack-ruby MessagePack implementation for Ruby / msgpack.org[Ruby] Updated Jul 8, 2016 PHP 392 86 msgpack-php msgpack.org[PHP] Updated Jul 4, 2016 Haskell 81 57 msgpack-haskell Haskell implementation of MessagePack / msgpack.org[Haskell] Updated Jun 29, 2016 D 85 24 msgpack-d MessagePack for D / msgpack.org[D] Updated Jun 17, 2016 Perl 38 7 msgpack-perl MessagePack serializer implementation for Perl / msgpack.org[Perl] Updated Jun 15, 2016 Python 610 100 msgpack-python MessagePack serializer implementation for Python msgpack.org[Python] Updated Jun 13, 2016 Smalltalk 11 0 msgpack-smalltalk MessagePack serialization library for various Smalltalk dialects / msgpack.org[Smalltalk] Updated Jun 4, 2016 OCaml 22 9 msgpack-ocaml MwssagePack implementation for OCaml / msgpack.org[OCaml] Updated May 23, 2016 JavaScript 168 43 msgpack-node MessagePack implementation for Node.js Updated May 20, 2016 Erlang 154 54 msgpack-erlang MessagePack (de)serializer implementation for Erlang / msgpack.org[Erlang] Updated May 19, 2016 C 271 44 msgpack-objectivec MessagePack serializer implementation for Objective-C / msgpack.org[Objective-C] Updated Feb 24, 2016 2,997 276 msgpack MessagePack is an extremely efficient object serialization library. It's like JSON, but very fast and small. Updated Dec 22, 2015 Scala 68 21 msgpack-scala MessagePack serializer implementation for Scala / msgpack.org[Scala] Updated Aug 28, 2015 JavaScript 393 58 msgpack-javascript MessagePack serializer implementation for JavaScript / msgpack.org[JavaScript] Updated Aug 23, 2015 Scala 6 1 pickling-msgpack Msgpack support for Scala pickling object serialization framework. Updated Feb 18, 2014 Previous 1 2 Next 28 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/msgpack/"	"Efficient binary serialization format ""like JSON"" for C/C++. [Apache2]"	"true"
"Serialization"	"protobuf"	"https://github.com/google/protobuf"	"Protocol Buffers - Google's data interchange format. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10090"	"1052"	"3050"	"GitHub - google/protobuf: Protocol Buffers - Google's data interchange format Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,052 Star 10,090 Fork 3,050 google/protobuf Code Issues 345 Pull requests 99 Wiki Pulse Graphs Protocol Buffers - Google's data interchange format https://developers.google.com/protocol-buffers/ 3,658 commits 12 branches 20 releases 169 contributors C++ 40.4% Java 17.2% Objective-C 12.1% C# 9.4% Protocol Buffer 7.2% C 5.2% Other 8.5% C++ Java Objective-C C# Protocol Buffer C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0.0-beta-3 3.0.0-beta-4 3.0.0-pre benchmarks gh-pages integrate_base integrate javalite master objc-framework-fix package-json rubypackagecap Nothing to show v3.0.0-beta-3.3 v3.0.0-beta-3.2 v3.0.0-beta-3.1 v3.0.0-beta-3 v3.0.0-beta-3-pre-1 v3.0.0-beta-2 v3.0.0-beta-1.1 v3.0.0-beta-1 v3.0.0-beta-1-bzl-fix v3.0.0-alpha-4.1 v3.0.0-alpha-4 v3.0.0-alpha-3.1 v3.0.0-alpha-3 v3.0.0-alpha-2 v3.0.0-alpha-1 v2.6.1 v2.6.1rc1 v2.6.0 v2.5.0 v2.4.1 Nothing to show New pull request Latest commit f6d1d1a Jul 15, 2016 sergiocampama committed with thomasvl Uses head version of rvm to avoid shell_update_session not found error ( … #1791)  Uses head version of rvm to avoid shell_update_session not found error  Fixes #1786 Permalink Failed to load latest commit information. benchmarks Add the missing maintiner-clean entry for benchmarks May 6, 2016 cmake Fix a bad variable dereference causing <package>_FIND_VERSION_PRERELE… Jul 12, 2016 conformance Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 csharp Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 docs Add https://github.com/os72/protobuf-dynamic May 31, 2016 editors down-integrate internal changes May 21, 2015 examples Use ExternalProject_Add to build the examples in a stand-alone fashion. Jun 6, 2016 java Fix spelling in strings and comments Jul 3, 2016 javanano Fix spelling in strings and comments Jul 3, 2016 jenkins Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 js Fixed failing JS tests Jul 6, 2016 m4 Merge pull request #789 from motahan/solaris64_fix Jan 20, 2016 more_tests Add makefile for extended tests to be run before release. Jan 12, 2010 objectivec Drop the performace baselines. Jul 8, 2016 php Fix spelling in strings and comments Jul 3, 2016 protoc-artifacts Merge pull request #1559 from google/beta-3 May 18, 2016 python Fix spelling in strings and comments Jul 3, 2016 ruby Fix spelling in strings and comments Jul 3, 2016 src Merge pull request #1735 from jskeet/attribute-placement Jul 7, 2016 util/python Remove hack for building Python support with Bazel. Feb 25, 2016 .gitignore Expand the OS X/Xcode gitignores May 19, 2016 .travis.yml Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 BUILD Bazel build: Keep generated sources and Python runtime in the same di… May 25, 2016 CHANGES.txt Update changes for lite May 16, 2016 CONTRIBUTORS.txt Add nano proto authors and update LICENSE file to include Android.mk. Nov 20, 2014 LICENSE Add support for POWER Linux Nov 3, 2015 Makefile.am Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 Protobuf.podspec Don't #import the .m files. Jul 7, 2016 README.md Fix typos in README.md Jan 25, 2016 WORKSPACE add java/util support based on java/util/pom.xml Mar 11, 2016 appveyor.bat Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 appveyor.yml Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 autogen.sh Add support for arguments. Oct 13, 2015 configure.ac Update the list of places where the version is stored. May 28, 2016 generate_descriptor_proto.sh Merge branch 'master' of github.com:google/protobuf Mar 30, 2016 gmock.BUILD Fix headers for gmock.BUILD Dec 1, 2015 post_process_dist.sh Add js to post_process_dist.sh. Dec 28, 2015 protobuf-lite.pc.in Uncomment conflict fields from pkg-config files. May 12, 2015 protobuf.bzl Bazel build: Keep generated sources and Python runtime in the same di… May 26, 2016 protobuf.pc.in Uncomment conflict fields from pkg-config files. May 12, 2015 six.BUILD Add srcs_version = ""PY2AND3"" in BUILD files Dec 3, 2015 tests.sh Uses head version of rvm to avoid shell_update_session not found error ( Jul 15, 2016 update_file_lists.sh Fix bugs on windows Aug 25, 2015 README.md Protocol Buffers - Google's data interchange format Copyright 2008 Google Inc. https://developers.google.com/protocol-buffers/ Overview Protocol Buffers (a.k.a., protobuf) are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data. You can find protobuf's documentation on the Google Developers site. This README file contains protobuf installation instructions. To install protobuf, you need to install the protocol compiler (used to compile .proto files) and the protobuf runtime for your chosen programming language. Protocol Compiler Installation The protocol compiler is written in C++. If you are using C++, please follow the C++ Installation Instructions to install protoc along with the C++ runtime. For non-C++ users, the simplest way to install the protocol compiler is to download a pre-built binary from our release page: https://github.com/google/protobuf/releases In the downloads section of each release, you can find pre-built binaries in zip packages: protoc-$VERSION-$PLATFORM.zip. It contains the protoc binary as well as a set of standard .proto files distributed along with protobuf. If you are looking for an old version that is not available in the release page, check out the maven repo here: http://repo1.maven.org/maven2/com/google/protobuf/protoc/ These pre-built binaries are only provided for released versions. If you want to use the github master version at HEAD, or you need to modify protobuf code, or you are using C++, it's recommended to build your own protoc binary from source. If you would like to build protoc binary from source, see the C++ Installation Instructions. Protobuf Runtime Installation Protobuf supports several different programming languages. For each programming language, you can find instructions in the corresponding source directory about how to install protobuf runtime for that specific language: Language Source C++ (include C++ runtime and protoc) src Java java Python python Objective-C objectivec C# csharp JavaNano javanano JavaScript js Ruby ruby Go golang/protobuf PHP TBD Usage The complete documentation for Protocol Buffers is available via the web at: https://developers.google.com/protocol-buffers/  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/protobuf"	"Protocol Buffers - Google's data interchange format. [BSD]"	"true"
"Serialization"	"protobuf-c"	"https://github.com/protobuf-c/protobuf-c"	"Protocol Buffers implementation in C. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"500"	"86"	"180"	"GitHub - protobuf-c/protobuf-c: Protocol Buffers implementation in C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 86 Star 500 Fork 180 protobuf-c/protobuf-c Code Issues 13 Pull requests 0 Wiki Pulse Graphs Protocol Buffers implementation in C 467 commits 3 branches 9 releases 13 contributors C++ 50.4% C 45.6% Protocol Buffer 2.8% Other 1.2% C++ C Protocol Buffer Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master next Nothing to show v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.2 v1.0.1 v1.0.0 v1.0.0-rc2 v1.0.0-rc1 Nothing to show New pull request Latest commit 006d69b Feb 2, 2016 edmonds ChangeLog: 1.2.1 Permalink Failed to load latest commit information. build-cmake Bump version to 1.2.1 Feb 2, 2016 m4 switch to a more automake-ish method of generating the html doxygen d… Jun 3, 2014 protobuf-c Bump version to 1.2.1 Feb 2, 2016 protoc-c Fix union initialization Feb 2, 2016 t t: Add coverage Dec 12, 2015 .commit_docs.sh .commit_docs.sh: initial version of the documentation update script Nov 15, 2014 .gitignore switch to a more automake-ish method of generating the html doxygen d… Jun 3, 2014 .travis.yml .travis.yml: Add sanitizer checks Dec 12, 2015 ChangeLog ChangeLog: 1.2.1 Feb 2, 2016 Doxyfile.in Doxyfile.in: enable MACRO_EXPANSION Jun 3, 2014 DoxygenLayout.xml DoxygenLayout.xml: initial customizations Jun 3, 2014 LICENSE LICENSE: 2016 Jan 29, 2016 Makefile.am skip protoc-c tests on cross-compiling Jan 29, 2016 README.md Update link to Autotools Mythbuster to canonical site Jan 9, 2016 TODO TODO: Remove items that have been completed Feb 14, 2015 autogen.sh new build system Nov 16, 2013 configure.ac Bump version to 1.2.1 Feb 2, 2016 README.md Overview This is protobuf-c, a C implementation of the Google Protocol Buffers data serialization format. It includes libprotobuf-c, a pure C library that implements protobuf encoding and decoding, and protoc-c, a code generator that converts Protocol Buffer .proto files to C descriptor code, based on the original protoc. protobuf-c formerly included an RPC implementation; that code has been split out into the protobuf-c-rpc project. protobuf-c was originally written by Dave Benson and maintained by him through version 0.15 but is now being maintained by a new team. Thanks, Dave! Mailing list protobuf-c's mailing list is hosted on a Google Groups forum. Subscribe by sending an email to protobuf-c+subscribe@googlegroups.com. Building protobuf-c requires a C compiler, a C++ compiler, protobuf, and pkg-config to be installed. ./configure && make && make install  If building from a git checkout, the autotools (autoconf, automake, libtool) must also be installed, and the build system must be generated by running the autogen.sh script. ./autogen.sh && ./configure && make && make install  Documentation See the online Doxygen documentation here or the Wiki for a detailed reference. The Doxygen documentation can be built from the source tree by running: make html  Synopsis Use the protoc-c command to generate .pb-c.c and .pb-c.h output files from your .proto input file. protoc-c --c_out=. example.proto  Include the .pb-c.h file from your C source code. #include ""example.pb-c.h""  Compile your C source code together with the .pb-c.c file. Add the output of the following command to your compile flags. pkg-config --cflags 'libprotobuf-c >= 1.0.0'  Link against the libprotobuf-c support library. Add the output of the following command to your link flags. pkg-config --libs 'libprotobuf-c >= 1.0.0'  If using autotools, the PKG_CHECK_MODULES macro can be used to detect the presence of libprotobuf-c. Add the following line to your configure.ac file: PKG_CHECK_MODULES([PROTOBUF_C], [libprotobuf-c >= 1.0.0])  This will place compiler flags in the PROTOBUF_C_CFLAGS variable and linker flags in the PROTOBUF_C_LDFLAGS variable. Read more information here about the PKG_CHECK_MODULES macro. Versioning protobuf-c follows the Semantic Versioning Specification as of version 1.0.0. Note that as of version of 1.0.0, the header files generated by the protoc-c compiler contain version guards to prevent incompatibilities due to version skew between the .pb-c.h files generated by protoc-c and the public protobuf-c.h include file supplied by the libprotobuf-c support library. While we will try not to make changes to protobuf-c that will require triggering the version guard often, such as releasing a new major version of protobuf-c, this cannot be guaranteed. Thus, it's a good idea to recompile your .pb-c.c and .pb-c.h files from their source .proto files with protoc-c as part of your build system, with proper source file dependency tracking, rather than shipping potentially stale .pb-c.c and .pb-c.h files that may not be compatible with the libprotobuf-c headers installed on the system in project artifacts like repositories and release tarballs. (Note that the output of the protoc-c code generator is not standalone, as the output of some other tools that generate C code is, such as flex and bison.) Major API/ABI changes may occur between major version releases, by definition. It is not recommended to export the symbols in the code generated by protoc-c in a stable library interface, as this will embed the protobuf-c ABI into your library's ABI. Nor is it recommended to install generated .pb-c.h files into a public header file include path as part of a library API, as this will tie clients of your library's API to particular versions of libprotobuf-c. Contributing Please send patches to the protobuf-c mailing list or by opening a GitHub pull request. The most recently released protobuf-c version is kept on the master branch, while the next branch is used for commits targeted at the next release. Please base patches and pull requests against the next branch, not the master branch. Copyright to all contributions are retained by the original author, but must be licensed under the terms of the BSD-2-Clause license. Please add a Signed-off-by header to your commit message (git commit -s) to indicate that you are licensing your contribution under these terms. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/protobuf-c/protobuf-c"	"Protocol Buffers implementation in C. [BSD]"	"true"
"Serialization"	"SimpleBinaryEncoding"	"https://github.com/real-logic/simple-binary-encoding"	"encoding and decoding application messages in binary format for low-latency applications. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"861"	"143"	"159"	"GitHub - real-logic/simple-binary-encoding: Simple Binary Encoding (SBE) - High Performance Message Codec Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 143 Star 861 Fork 159 real-logic/simple-binary-encoding Code Issues 11 Pull requests 1 Wiki Pulse Graphs Simple Binary Encoding (SBE) - High Performance Message Codec 1,448 commits 1 branch 18 releases 25 contributors Java 70.2% C++ 28.9% Other 0.9% Java C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.4.2-RC4 1.4.1-RC4 1.4.0-RC4 1.3.5-RC3 1.3.4-RC3 1.3.3-RC3 1.3.2-RC3 1.3.1-RC3 1.3-RC3 1.1.7-RC2 1.1.6-RC2 1.1.5-RC2 1.1.4-RC2 1.1.3-RC2 1.1.2-RC2 1.1.1-RC2 1.1-RC2 1.0.3-RC2 Nothing to show New pull request Latest commit 960b9ec Jul 15, 2016 mjpt777 [Java] Depend on Agrona 0.5.3-SNAPSHOT. Permalink Failed to load latest commit information. config [Java] Improve Java code generation style. Apr 13, 2016 cppbuild [C++]: add VS2015 build script and make it build and run unit tests. Jan 2, 2016 gradle/wrapper [Java] Upgrade to Gradle 2.14. Jun 14, 2016 sbe-benchmarks/src/main [Java] Update to sbe.xsd 1.0 final. Jul 15, 2016 sbe-samples/src/main [Java] Update to sbe.xsd 1.0 final. Jul 15, 2016 sbe-tool/src [Java] Update to sbe.xsd 1.0 final. Jul 15, 2016 .gitignore rework directory layout, gradle build, and C++ build to modularize. Dec 1, 2015 CHANGELOG.md bump to 1.0.2-RC2-SNAPSHOT Jun 17, 2014 CMakeLists.txt 1.4.0-RC4 released Apr 22, 2016 LICENSE Initial commit Sep 3, 2013 README.md [Java] Update to sbe.xsd 1.0 final. Jul 15, 2016 build.gradle [Java] Depend on Agrona 0.5.3-SNAPSHOT. Jul 15, 2016 gradlew [Java] Upgrade to Gradle 2.13. May 4, 2016 gradlew.bat [Java] Upgrade to Gradle 2.13. May 4, 2016 settings.gradle rework directory layout, gradle build, and C++ build to modularize. Dec 1, 2015 README.md Simple Binary Encoding (SBE) SBE is an OSI layer 6 presentation for encoding and decoding binary application messages for low-latency financial applications. This repository contains the reference implementations in Java and C++. Further details on the background and usage of SBE can be found on the Wiki. An XSD for SBE specs can be found here For the latest version information and changes see the Change Log with downloads at Maven Central. This SBE implementation is designed with work very efficiently with the Aeron messaging system for low-latency and high-throughput communications. SBE has a dependency on Agrona for its buffer implementations. License (See LICENSE file for full license) Copyright 2014 - 2016 Real Logic Limited Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Binaries Binaries and dependency information for Maven, Ivy, Gradle, and others can be found at http://search.maven.org. Example for Maven: <dependency>     <groupId>uk.co.real-logic</groupId>     <artifactId>sbe-all</artifactId>     <version>1.4.2-RC4</version> </dependency> Directory Layout Main source code sbe-tool/src/main  Unit tests sbe-tool/src/test  Samples of usage sbe-samples/src/main  Build The project is built with Gradle using this build.gradle file. Full clean build: $ ./gradlew  Run the Java examples $ ./gradlew runJavaExamples  Distribution Jars for the executable, source, and javadoc for the various modules can be found in <module>/build/libs  C++ Build using CMake NOTE: Linux, Mac OS, and Windows only for the moment. See FAQ. Windows builds have been tested with Visual Studio Express 12. First build using gradle to generate the SBE jar. $ ./gradlew  For convenience, a script is provided that does a full clean, build, and test of all targets as a Release build. $ ./cppbuild/cppbuild  If you are comfortable with using CMake, then a full clean, build, and test looks like: $ mkdir -p cppbuild/Debug $ cd cppbuild/Debug $ cmake ../.. $ cmake --build . --clean-first $ ctest  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/real-logic/simple-binary-encoding"	"encoding and decoding application messages in binary format for low-latency applications. [Apache2]"	"true"
"Video"	"libvpx"	"http://www.webmproject.org/code/"	"VP8/VP9 Codec SDK. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"184"	"47"	"97"	"GitHub - webmproject/libvpx: Mirror only. Please do not send pull requests. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 184 Fork 97 webmproject/libvpx mirrored from https://chromium.googlesource.com/webm/libvpx Code Pull requests 0 Pulse Graphs Mirror only. Please do not send pull requests. http://www.webmproject.org/code/ 15,840 commits 48 branches 13 releases 80 contributors C 71.1% Assembly 12.1% C++ 9.2% Objective-C 3.2% Makefile 1.6% Shell 1.3% Other 1.5% C Assembly C++ Objective-C Makefile Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aylesbury bali cayuga dixie eider experimental forest frame_parallel highbitdepth indianrunnerduck javanwhistlingduck khakicampbell m29-baseline m31-baseline m49-2623 m52-2743 master mcw mcw2 nextgen nextgenv2 pcs-2013 playground sandbox/Jingning/experimental sandbox/Jingning/transcode sandbox/Jingning/vpx sandbox/aconverse@google.com/ansbench sandbox/atna/dec_sem_sync sandbox/awatry/initial_opencl_implementation sandbox/debargha/playground sandbox/hkuang/frame_parallel sandbox/hkuang@google.com/decode sandbox/hlundin/error-concealment sandbox/holmer/error-concealment sandbox/jimbankoski@google.com/proposed-aom sandbox/jingning@google.com/decoder_test_suite sandbox/jingning@google.com/experimental sandbox/jkoleszar/cached-multibit sandbox/jkoleszar/experimental-knobs sandbox/jkoleszar/new-rate-control sandbox/jkoleszar/new-rtcd sandbox/jkoleszar/reuse-modemv sandbox/jkoleszar/use-memcpy sandbox/jzern@google.com/test sandbox/luoyi@google.com/convolve sandbox/slavarnway/test stable-vp9-decoder vp9-preview Nothing to show v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 v0.9.7 v0.9.7-p1 v0.9.6 v0.9.5 v0.9.2 v0.9.1 v0.9.0 Nothing to show New pull request Latest commit 302e425 Jul 15, 2016 jimbankoski committed with Gerrit Code Review Merge ""postproc : fix function parameters for noise functions."" Permalink Failed to load latest commit information. build configure: remove x86inc.asm distinction Jun 30, 2016 examples Fix Visual Studio build warning Jul 7, 2016 test Merge ""postproc : fix function parameters for noise functions."" Jul 15, 2016 third_party gtest-all.cc: quiet an unused variable warning Jul 13, 2016 tools Strip redundant entries from .mailmap Dec 7, 2015 vp8 postproc : fix function parameters for noise functions. Jul 15, 2016 vp9 postproc : fix function parameters for noise functions. Jul 15, 2016 vpx remove visual studio < 2010 workarounds Jun 28, 2016 vpx_dsp postproc : fix function parameters for noise functions. Jul 15, 2016 vpx_mem vpx_mem.c: remove unused macro Feb 2, 2016 vpx_ports remove visual studio < 2010 workarounds Jun 29, 2016 vpx_scale remove vp10 Jun 17, 2016 vpx_util vpx_thread: use CreateThread for windows phone Jul 1, 2016 .gitattributes Initial WebM release May 18, 2010 .gitignore update gitignore Aug 28, 2015 .mailmap Strip redundant entries from .mailmap Dec 7, 2015 AUTHORS Release v1.5.0 Nov 9, 2015 CHANGELOG vp9: set kf_max_dist to a reasonable default (128) Feb 25, 2016 LICENSE Update LICENSE to reflect WebM authors Nov 11, 2011 PATENTS PATENTS: fix a typo: constitutes -> constitute Apr 24, 2015 README configure: remove old visual studio support (<2010) Jun 28, 2016 args.c Don't #define snprintf in VS 2015 or higher. May 27, 2015 args.h args.h: add arg_parse_enum prototype Oct 11, 2014 codereview.settings Add a codereview.setting file so that `git cl upload` works. Aug 7, 2015 configure configure: remove x86inc.asm distinction Jun 30, 2016 docs.mk configure: remove php test May 12, 2014 examples.mk Modify the name of vp9cx_set_ref example Jul 6, 2016 ivfdec.c ivfdec: tolerate invalid framerates (2) Jun 3, 2016 ivfdec.h Adding video reader/writer APIs. Feb 5, 2014 ivfenc.c Changing ivf_write_frame_header() function signature. Jan 29, 2014 ivfenc.h Changing ivf_write_frame_header() function signature. Jan 30, 2014 keywords.dox Initial WebM release May 18, 2010 libs.doxy_template Fix obvious misses in doxygen mainpage Jan 15, 2015 libs.mk remove vp10 Jun 18, 2016 mainpage.dox Fix obvious misses in doxygen mainpage Jan 15, 2015 md5_utils.c md5_utils,MD5Transform: don't check for unsigned overflow May 4, 2016 md5_utils.h top-level: add extern ""C"" to headers Jan 23, 2014 rate_hist.c Prevent dividing by 0 when target-bitrate is 0. Jun 8, 2015 rate_hist.h vpxenc: Relocate rate/quantizer histogram code. Jan 29, 2014 solution.mk Remove asm offset dependencies Nov 6, 2014 tools_common.c remove vp10 Jun 18, 2016 tools_common.h remove vp10 Jun 18, 2016 usage.dox usage.dox: fix encoder/decoder subpage list indent Mar 13, 2015 usage_cx.dox usage.dox: fix encoder/decoder subpage list indent Mar 14, 2015 usage_dx.dox Initial WebM release May 18, 2010 video_common.h Adding video reader/writer APIs. Feb 6, 2014 video_reader.c Reusing mem_get_le{16, 32} defined in vpx_ports/mem_opts.h. Feb 26, 2014 video_reader.h Adding video reader/writer APIs. Feb 6, 2014 video_writer.c Adding video reader/writer APIs. Feb 6, 2014 video_writer.h Adding video reader/writer APIs. Feb 6, 2014 vpxdec.c remove vp10 Jun 18, 2016 vpxenc.c remove vp10 Jun 18, 2016 vpxenc.h Adds support of 440 content. Oct 1, 2014 vpxstats.c Remove unused POSIX_MMAP references Dec 17, 2015 vpxstats.h Adding sse_to_psnr function to tools_common.{h, c}. Feb 27, 2014 warnings.c add_warning(): remove dead store Feb 8, 2014 warnings.h top-level: add extern ""C"" to headers Jan 24, 2014 webmdec.cc remove vp10 Jun 18, 2016 webmdec.h Merge ""TODO cleanup: Remove unused buffer_size"" Apr 27, 2016 webmenc.cc remove vp10 Jun 18, 2016 webmenc.h TODO cleanup: s/EbmlGlobal/WebmOutputContext/ Apr 25, 2016 y4menc.c Use custom mkstemp() to fix Win issue in y4m_test Jul 18, 2014 y4menc.h Adds support for reading and writing 10/12-bit y4m Jul 5, 2014 y4minput.c Revert ""Change the y4m buffer allocation size"" Oct 8, 2014 y4minput.h Adds support for reading and writing 10/12-bit y4m Jul 5, 2014 README README - 23 March 2015  Welcome to the WebM VP8/VP9 Codec SDK!  COMPILING THE APPLICATIONS/LIBRARIES:   The build system used is similar to autotools. Building generally consists of   ""configuring"" with your desired build options, then using GNU make to build   the application.    1. Prerequisites      * All x86 targets require the Yasm[1] assembler be installed.     * All Windows builds require that Cygwin[2] be installed.     * Building the documentation requires Doxygen[3]. If you do not       have this package, the install-docs option will be disabled.     * Downloading the data for the unit tests requires curl[4] and sha1sum.       sha1sum is provided via the GNU coreutils, installed by default on       many *nix platforms, as well as MinGW and Cygwin. If coreutils is not       available, a compatible version of sha1sum can be built from       source[5]. These requirements are optional if not running the unit       tests.      [1]: http://www.tortall.net/projects/yasm     [2]: http://www.cygwin.com     [3]: http://www.doxygen.org     [4]: http://curl.haxx.se     [5]: http://www.microbrew.org/tools/md5sha1sum/    2. Out-of-tree builds   Out of tree builds are a supported method of building the application. For   an out of tree build, the source tree is kept separate from the object   files produced during compilation. For instance:      $ mkdir build     $ cd build     $ ../libvpx/configure <options>     $ make    3. Configuration options   The 'configure' script supports a number of options. The --help option can be   used to get a list of supported options:     $ ../libvpx/configure --help    4. Cross development   For cross development, the most notable option is the --target option. The   most up-to-date list of supported targets can be found at the bottom of the   --help output of the configure script. As of this writing, the list of   available targets is:      armv6-linux-rvct     armv6-linux-gcc     armv6-none-rvct     arm64-darwin-gcc     armv7-android-gcc     armv7-darwin-gcc     armv7-linux-rvct     armv7-linux-gcc     armv7-none-rvct     armv7-win32-vs11     armv7-win32-vs12     armv7-win32-vs14     armv7s-darwin-gcc     mips32-linux-gcc     mips64-linux-gcc     sparc-solaris-gcc     x86-android-gcc     x86-darwin8-gcc     x86-darwin8-icc     x86-darwin9-gcc     x86-darwin9-icc     x86-darwin10-gcc     x86-darwin11-gcc     x86-darwin12-gcc     x86-darwin13-gcc     x86-darwin14-gcc     x86-iphonesimulator-gcc     x86-linux-gcc     x86-linux-icc     x86-os2-gcc     x86-solaris-gcc     x86-win32-gcc     x86-win32-vs10     x86-win32-vs11     x86-win32-vs12     x86-win32-vs14     x86_64-android-gcc     x86_64-darwin9-gcc     x86_64-darwin10-gcc     x86_64-darwin11-gcc     x86_64-darwin12-gcc     x86_64-darwin13-gcc     x86_64-darwin14-gcc     x86_64-iphonesimulator-gcc     x86_64-linux-gcc     x86_64-linux-icc     x86_64-solaris-gcc     x86_64-win64-gcc     x86_64-win64-vs10     x86_64-win64-vs11     x86_64-win64-vs12     x86_64-win64-vs14     generic-gnu    The generic-gnu target, in conjunction with the CROSS environment variable,   can be used to cross compile architectures that aren't explicitly listed, if   the toolchain is a cross GNU (gcc/binutils) toolchain. Other POSIX toolchains   will likely work as well. For instance, to build using the mipsel-linux-uclibc   toolchain, the following command could be used (note, POSIX SH syntax, adapt   to your shell as necessary):      $ CROSS=mipsel-linux-uclibc- ../libvpx/configure    In addition, the executables to be invoked can be overridden by specifying the   environment variables: CC, AR, LD, AS, STRIP, NM. Additional flags can be   passed to these executables with CFLAGS, LDFLAGS, and ASFLAGS.    5. Configuration errors   If the configuration step fails, the first step is to look in the error log.   This defaults to config.log. This should give a good indication of what went   wrong. If not, contact us for support.  VP8/VP9 TEST VECTORS:   The test vectors can be downloaded and verified using the build system after   running configure. To specify an alternate directory the   LIBVPX_TEST_DATA_PATH environment variable can be used.    $ ./configure --enable-unit-tests   $ LIBVPX_TEST_DATA_PATH=../libvpx-test-data make testdata  SUPPORT   This library is an open source project supported by its community. Please   please email webm-discuss@webmproject.org for help.   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/webmproject/libvpx"	"VP8/VP9 Codec SDK. [BSD]"	"true"
"Video"	"FFmpeg"	"https://www.ffmpeg.org/"	"A complete, cross-platform solution to record, convert and stream audio and video. [LGPL2/GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"FFmpeg FFmpeg About News Download Documentation Community Mailing Lists IRC Forums Bug Reports Wiki Developers Source Code Contribute FATE Code Coverage More Donate Hire Developers Contact Security Legal FFmpeg A complete, cross-platform solution to record, convert and stream audio and video. Download Converting video and audio has never been so easy. $ ffmpeg -i input.mp4 output.avi Discover more       News July 10th, 2016, ffserver program being dropped After thorough deliberation, we're announcing that we're about to drop the ffserver program from the project starting with the next release. ffserver has been a problematic program to maintain due to its use of internal APIs, which complicated the recent cleanups to the libavformat library, and block further cleanups and improvements which are desired by API users and will be easier to maintain. Furthermore the program has been hard for users to deploy and run due to reliability issues, lack of knowledgable people to help and confusing configuration file syntax. Current users and members of the community are invited to write a replacement program to fill the same niche that ffserver did using the new APIs and to contact us so we may point users to test and contribute to its development. July 1st, 2016, FFmpeg 3.1.1 ""Laplace"" FFmpeg 3.1.1, a new point release from the 3.1 release branch, is now available! It mainly deals with a few ABI issues introduced in the previous release. We strongly recommend users, distributors, and system integrators, especially those who experienced issues upgrading from 3.0, to upgrade unless they use current git master. June 27th, 2016, FFmpeg 3.1 ""Laplace"" FFmpeg 3.1 ""Laplace"", a new major release, is now available! Some of the highlights: DXVA2-accelerated HEVC Main10 decoding fieldhint filter loop video filter and aloop audio filter Bob Weaver deinterlacing filter firequalizer filter datascope filter bench and abench filters ciescope filter protocol blacklisting API MediaCodec H264 decoding VC-2 HQ RTP payload format (draft v1) depacketizer and packetizer VP9 RTP payload format (draft v2) packetizer AudioToolbox audio decoders AudioToolbox audio encoders coreimage filter (GPU based image filtering on OSX) libdcadec removed bitstream filter for extracting DTS core ADPCM IMA DAT4 decoder musx demuxer aix demuxer remap filter hash and framehash muxers colorspace filter hdcd filter readvitc filter VAAPI-accelerated format conversion and scaling libnpp/CUDA-accelerated format conversion and scaling Duck TrueMotion 2.0 Real Time decoder Wideband Single-bit Data (WSD) demuxer VAAPI-accelerated H.264/HEVC/MJPEG encoding DTS Express (LBR) decoder Generic OpenMAX IL encoder with support for Raspberry Pi IFF ANIM demuxer & decoder Direct Stream Transfer (DST) decoder loudnorm filter MTAF demuxer and decoder MagicYUV decoder OpenExr improvements (tile data and B44/B44A support) BitJazz SheerVideo decoder CUDA CUVID H264/HEVC decoder 10-bit depth support in native utvideo decoder libutvideo wrapper removed YUY2 Lossless Codec decoder VideoToolbox H.264 encoder We strongly recommend users, distributors, and system integrators to upgrade unless they use current git master. March 16th, 2016, Google Summer of Code FFmpeg has been accepted as a Google Summer of Code open source organization. If you wish to participate as a student see our project ideas page. You can already get in contact with mentors and start working on qualification tasks as well as register at google and submit your project proposal draft. Good luck! February 15th, 2016, FFmpeg 3.0 ""Einstein"" FFmpeg 3.0 ""Einstein"", a new major release, is now available! Some of the highlights: The native FFmpeg AAC encoder has seen extensive improvements and is no longer considered experimental Removed support for libvo-aacenc and libaacplus Over 30 new filters have been added Many ASM optimizations VP9 Hardware Acceleration (DXVA2 and VA-API) Cineform HD decoder New DCA decoder based on libdcadec with full support for DTS-HD extensions As with all major releases expect major backward incompatible API/ABI changes See the Changelog for a list of more updates We strongly recommend users, distributors, and system integrators to upgrade unless they use current git master. January 30, 2016, Removing support for two external AAC encoders We have just removed support for VisualOn AAC encoder (libvo-aacenc) and libaacplus in FFmpeg master. Even before marking our internal AAC encoder as stable, it was known that libvo-aacenc was of an inferior quality compared to our native one for most samples. However, the VisualOn encoder was used extensively by the Android Open Source Project, and we would like to have a tested-and-true stable option in our code base. When first committed in 2011, libaacplus filled in the gap of encoding High Efficiency AAC formats (HE-AAC and HE-AACv2), which was not supported by any of the encoders in FFmpeg at that time. The circumstances for both have changed. After the work spearheaded by Rostislav Pehlivanov and Claudio Freire, the now-stable FFmpeg native AAC encoder is ready to compete with much more mature encoders. The Fraunhofer FDK AAC Codec Library for Android was added in 2012 as the fourth supported external AAC encoder, and the one with the best quality and the most features supported, including HE-AAC and HE-AACv2. Therefore, we have decided that it is time to remove libvo-aacenc and libaacplus. If you are currently using libvo-aacenc, prepare to transition to the native encoder (aac) when updating to the next version of FFmpeg. In most cases it is as simple as merely swapping the encoder name. If you are currently using libaacplus, start using FDK AAC (libfdk_aac) with an appropriate profile option to select the exact AAC profile that fits your needs. In both cases, you will enjoy an audible quality improvement and as well as fewer licensing headaches. Enjoy! January 16, 2016, FFmpeg 2.8.5, 2.7.5, 2.6.7, 2.5.10 We have made several new point releases (2.8.5, 2.7.5, 2.6.7, 2.5.10). They fix various bugs, as well as CVE-2016-1897 and CVE-2016-1898. Please see the changelog for each release for more details. We recommend users, distributors and system integrators to upgrade unless they use current git master. December 5th, 2015, The native FFmpeg AAC encoder is now stable! After seven years the native FFmpeg AAC encoder has had its experimental flag removed and declared as ready for general use. The encoder is transparent at 128kbps for most samples tested with artifacts only appearing in extreme cases. Subjective quality tests put the encoder to be of equal or greater quality than most of the other encoders available to the public. Licensing has always been an issue with encoding AAC audio as most of the encoders have had a license making FFmpeg unredistributable if compiled with support for them. The fact that there now exists a fully open and truly free AAC encoder integrated directly within the project means a lot to those who wish to use accepted and widespread standards. The majority of the work done to bring the encoder up to quality was started during this year's GSoC by developer Claudio Freire and Rostislav Pehlivanov. Both continued to work on the encoder with the latter joining as a developer and mainainer, working on other parts of the project as well. Also, thanks to Kamedo2 who does comparisons and tests, the original authors and all past and current contributors to the encoder. Users are suggested and encouraged to use the encoder and provide feedback or breakage reports through our bug tracker. October 13th, 2015, Telepoint & MediaHub are now supporting our project A big thank you note goes to our newest supporters: MediaHub and Telepoint. Both companies have donated a dedicated server with free of charge internet connectivity. Here is a little bit about them in their own words: Telepoint is the biggest carrier-neutral data center in Bulgaria. Located in the heart of Sofia on a cross-road of many Bulgarian and International networks, the facility is a fully featured Tier 3 data center that provides flexible customer-oriented colocation solutions (ranging from a server to a private collocation hall) and a high level of security. MediaHub Ltd. is a Bulgarian IPTV platform and services provider which uses FFmpeg heavily since it started operating a year ago. ""Donating to help keep FFmpeg online is our way of giving back to the community"" . Thanks Telepoint and MediaHub for their support! September 29th, 2015, GSoC 2015 results FFmpeg participated to the latest edition of the Google Summer of Code Project. FFmpeg got a total of 8 assigned projects, and 7 of them were successful. We want to thank Google, the participating students, and especially the mentors who joined this effort. We're looking forward to participating in the next GSoC edition! Below you can find a brief description of the final outcome of each single project. Basic servers for network protocols, mentee: Stephan Holljes, mentor: Nicolas George Stephan Holljes's project for this session of Google Summer of Code was to implement basic HTTP server features for libavformat, to complement the already present HTTP client and RTMP and RTSP server code. The first part of the project was to make the HTTP code capable of accepting a single client; it was completed partly during the qualification period and partly during the first week of the summer. Thanks to this work, it is now possible to make a simple HTTP stream using the following commands:      ffmpeg -i /dev/video0 -listen 1 -f matroska \     -c:v libx264 -preset fast -tune zerolatency http://:8080     ffplay http://localhost:8080/   The next part of the project was to extend the code to be able to accept several clients, simultaneously or consecutively. Since libavformat did not have an API for that kind of task, it was necessary to design one. This part was mostly completed before the midterm and applied shortly afterwards. Since the ffmpeg command-line tool is not ready to serve several clients, the test ground for that new API is an example program serving hard-coded content. The last and most ambitious part of the project was to update ffserver to make use of the new API. It would prove that the API is usable to implement real HTTP servers, and expose the points where more control was needed. By the end of the summer, a first working patch series was undergoing code review. Browsing content on the server, mentee: Mariusz Szczepańczyk, mentor: Lukasz Marek Mariusz finished an API prepared by the FFmpeg community and implemented Samba directory listing as qualification task. During the program he extended the API with the possibility to remove and rename files on remote servers. He completed the implementation of these features for file, Samba, SFTP, and FTP protocols. At the end of the program, Mariusz provided a sketch of an implementation for HTTP directory listening. Directshow digital video capture, mentee: Mate Sebok, mentor: Roger Pack Mate was working on directshow input from digital video sources. He got working input from ATSC input sources, with specifiable tuner. The code has not been committed, but a patch of it was sent to the ffmpeg-devel mailing list for future use. The mentor plans on cleaning it up and committing it, at least for the ATSC side of things. Mate and the mentor are still working trying to finally figure out how to get DVB working. Implementing full support for 3GPP Timed Text Subtitles, mentee: Niklesh Lalwani, mentor: Philip Langdale Niklesh's project was to expand our support for 3GPP Timed Text subtitles. This is the native subtitle format for mp4 containers, and is interesting because it's usually the only subtitle format supported by the stock playback applications on iOS and Android devices. ffmpeg already had basic support for these subtitles which ignored all formatting information - it just provided basic plain-text support. Niklesh did work to add support on both the encode and decode side for text formatting capabilities, such as font size/colour and effects like bold/italics, highlighting, etc. The main challenge here is that Timed Text handles formatting in a very different way from most common subtitle formats. It uses a binary encoding (based on mp4 boxes, naturally) and stores information separately from the text itself. This requires additional work to track which parts of the text formatting applies to, and explicitly dealing with overlapping formatting (which other formats support but Timed Text does not) so it requires breaking the overlapping sections into separate non-overlapping ones with different formatting. Finally, Niklesh had to be careful about not trusting any size information in the subtitles - and that's no joke: the now infamous Android stagefright bug was in code for parsing Timed Text subtitles. All of Niklesh's work is committed and was released in ffmpeg 2.8. libswscale refactoring, mentee: Pedro Arthur, mentors: Michael Niedermayer, Ramiro Polla Pedro Arthur has modularized the vertical and horizontal scalers. To do this he designed and implemented a generic filter framework and moved the existing scaler code into it. These changes now allow easily adding removing, splitting or merging processing steps. The implementation was benchmarked and several alternatives were tried to avoid speed loss. He also added gamma corrected scaling support. An example to use gamma corrected scaling would be:      ffmpeg -i input -vf scale=512:384:gamma=1 output   Pedro has done impressive work considering the short time available, and he is a FFmpeg committer now. He continues to contribute to FFmpeg, and has fixed some bugs in libswscale after GSoC has ended. AAC Encoder Improvements, mentee: Rostislav Pehlivanov, mentor: Claudio Freire Rostislav Pehlivanov has implemented PNS, TNS, I/S coding and main prediction on the native AAC encoder. Of all those extensions, only TNS was left in a less-than-usable state, but the implementation has been pushed (disabled) anyway since it's a good basis for further improvements. PNS replaces noisy bands with a single scalefactor representing the energy of that band, gaining in coding efficiency considerably, and the quality improvements on low bitrates are impressive for such a simple feature. TNS still needs some polishing, but has the potential to reduce coding artifacts by applying noise shaping in the temporal domain (something that is a source of annoying, notable distortion on low-entropy bands). Intensity Stereo coding (I/S) can double coding efficiency by exploiting strong correlation between stereo channels, most effective on pop-style tracks that employ panned mixing. The technique is not as effective on classic X-Y recordings though. Finally, main prediction improves coding efficiency by exploiting correlation among successive frames. While the gains have not been huge at this point, Rostislav has remained active even after the GSoC, and is polishing both TNS and main prediction, as well as looking for further improvements to make. In the process, the MIPS port of the encoder was broken a few times, something he's also working to fix. Animated Portable Network Graphics (APNG), mentee: Donny Yang, mentor: Paul B Mahol Donny Yang implemented basic keyframe only APNG encoder as the qualification task. Later he wrote interframe compression via various blend modes. The current implementation tries all blend modes and picks one which takes the smallest amount of memory. Special care was taken to make sure that the decoder plays correctly all files found in the wild and that the encoder produces files that can be played in browsers that support APNG. During his work he was tasked to fix any encountered bug in the decoder due to the fact that it doesn't match APNG specifications. Thanks to this work, a long standing bug in the PNG decoder has been fixed. For latter work he plans to continue working on the encoder, making it possible to select which blend modes will be used in the encoding process. This could speed up encoding of APNG files. September 9th, 2015, FFmpeg 2.8 We published release 2.8 as new major version. It contains all features and bug fixes of the git master branch from September 8th. Please see the changelog for a list of the most important changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. August 1st, 2015, A message from the FFmpeg project Dear multimedia community, The resignation of Michael Niedermayer as leader of FFmpeg yesterday has come by surprise. He has worked tirelessly on the FFmpeg project for many years and we must thank him for the work that he has done. We hope that in the future he will continue to contribute to the project. In the coming weeks, the FFmpeg project will be managed by the active contributors. The last four years have not been easy for our multimedia community - both contributors and users. We should now look to the future, try to find solutions to these issues, and to have reconciliation between the forks, which have split the community for so long. Unfortunately, much of the disagreement has taken place in inappropriate venues so far, which has made finding common ground and solutions difficult. We aim to discuss this in our communities online over the coming weeks, and in person at the VideoLAN Developer Days in Paris in September: a neutral venue for the entire open source multimedia community. The FFmpeg project. July 4th, 2015, FFmpeg needs a new host UPDATE: We have received more than 7 offers for hosting and servers, thanks a lot to everyone! After graciously hosting our projects (FFmpeg, MPlayer and rtmpdump) for 4 years, Arpi (our hoster) has informed us that we have to secure a new host somewhere else immediately. If you want to host an open source project, please let us know, either on ffmpeg-devel mailing list or irc.freenode.net #ffmpeg-devel. We use about 4TB of storage and at least 4TB of bandwidth / month for various mailing lists, trac, samples repo, svn, etc. March 16, 2015, FFmpeg 2.6.1 We have made a new major release (2.6) and now one week afterward 2.6.1. It contains all features and bugfixes of the git master branch from the 6th March. Please see the Release Notes for a list of note-worthy changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. March 4, 2015, Google Summer of Code FFmpeg has been accepted as a Google Summer of Code Project. If you wish to participate as a student see our project ideas page. You can already get in contact with mentors and start working on qualification tasks. Registration at Google for students will open March 16th. Good luck! March 1, 2015, Chemnitzer Linux-Tage We happily announce that FFmpeg will be represented at Chemnitzer Linux-Tage (CLT) in Chemnitz, Germany. The event will take place on 21st and 22nd of March. More information can be found here We demonstrate usage of FFmpeg, answer your questions and listen to your problems and wishes. If you have media files that cannot be processed correctly with FFmpeg, be sure to have a sample with you so we can have a look! For the first time in our CLT history, there will be an FFmpeg workshop! You can read the details here. The workshop is targeted at FFmpeg beginners. First the basics of multimedia will be covered. Thereafter you will learn how to use that knowledge and the FFmpeg CLI tools to analyse and process media files. The workshop is in German language only and prior registration is necessary. The workshop will be on Saturday starting at 10 o'clock. We are looking forward to meet you (again)! December 5, 2014, FFmpeg 2.5 We have made a new major release (2.5) It contains all features and bugfixes of the git master branch from the 4th December. Please see the Release Notes for a list of note-worthy changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. October 10, 2014, FFmpeg is in Debian unstable again We wanted you to know there are FFmpeg packages in Debian unstable again. A big thank-you to Andreas Cadhalpun and all the people that made it possible. It has been anything but simple. Unfortunately that was already the easy part of this news. The bad news is the packages probably won't migrate to Debian testing to be in the upcoming release codenamed jessie. Read the argumentation over at Debian. However things will come out in the end, we hope for your continued remarkable support! October 8, 2014, FFmpeg secured a place in OPW! Thanks to a generous 6K USD donation by Samsung (Open Source Group), FFmpeg will be welcoming at least 1 ""Outreach Program for Women"" intern to work with our community for an initial period starting December 2014 (through March 2015). We all know FFmpeg is used by the industry, but even while there are countless products building on our code, it is not at all common for companies to step up and help us out when needed. So a big thank-you to Samsung and the OPW program committee! If you are thinking on participating in OPW as an intern, please take a look at our OPW wiki page for some initial guidelines. The page is still a work in progress, but there should be enough information there to get you started. If you, on the other hand, are thinking on sponsoring work on FFmpeg through the OPW program, please get in touch with us at opw@ffmpeg.org. With your help, we might be able to secure some extra intern spots for this round! September 15, 2014, FFmpeg 2.4 We have made a new major release (2.4) It contains all features and bugfixes of the git master branch from the 14th September. Please see the Release Notes for a list of note-worthy changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. August 20, 2014, FFmpeg 2.3.3, 2.2.7, 1.2.8 We have made several new point releases (2.3.3, 2.2.7, 1.2.8). They fix various bugs, as well as CVE-2014-5271 and CVE-2014-5272. Please see the changelog for more details. We recommend users, distributors and system integrators to upgrade unless they use current git master. July 29, 2014, Help us out securing our spot in OPW Following our previous post regarding our participation on this year's OPW (Outreach Program for Women), we are now reaching out to our users (both individuals and companies) to help us gather the needed money to secure our spot in the program. We need to put together 6K USD as a minimum but securing more funds would help us towards getting more than one intern. You can donate by credit card using Click&Pledge and selecting the ""OPW"" option. If you would like to donate by money transfer or by check, please get in touch by e-mail and we will get back to you with instructions. Thanks! July 20, 2014, New website The FFmpeg project is proud to announce a brand new version of the website made by db0. While this was initially motivated by the need for a larger menu, the whole website ended up being redesigned, and most pages got reworked to ease navigation. We hope you'll enjoy browsing it. July 17, 2014, FFmpeg 2.3 We have made a new major release (2.3) It contains all features and bugfixes of the git master branch from the 16th July. Please see the Release Notes for a list of note-worthy changes. We recommend users, distributors and system integrators to upgrade unless they use current git master. July 3, 2014, FFmpeg and the Outreach Program For Women FFmpeg has started the process to become an OPW includer organization for the next round of the program, with internships starting December 9. The OPW aims to ""Help women (cis and trans) and genderqueer to get involved in free and open source software"". Part of the process requires securing funds to support at least one internship (6K USD), so if you were holding on your donation to FFmpeg, this is a great chance for you to come forward, get in touch and help both the project and a great initiative! We have set up an email address you can use to contact us about donations and general inquires regarding our participation in the program. Hope to hear from you soon! June 29, 2014, FFmpeg 2.2.4, 2.1.5, 2.0.5, 1.2.7, 1.1.12, 0.10.14 We have made several new point releases (2.2.4, 2.1.5, 2.0.5, 1.2.7, 1.1.12, 0.10.14). They fix a security issue in the LZO implementation, as well as several other bugs. See the git log for details. We recommend users, distributors and system integrators to upgrade unless they use current git master. May 1, 2014, LinuxTag Once again FFmpeg will be represented at LinuxTag in Berlin, Germany. The event will take place from 8th to 10th of May. Please note that this year's LinuxTag is at a different location closer to the city center. We will have a shared booth with XBMC and VideoLAN. If you have media files that cannot be processed correctly with FFmpeg, be sure to have a sample with you so we can have a look! More information about LinuxTag can be found here We are looking forward to see you in Berlin! April 18, 2014, OpenSSL Heartbeat bug Our server hosting the Trac issue tracker was vulnerable to the attack against OpenSSL known as ""heartbleed"". The OpenSSL software library was updated on 7th of April, shortly after the vulnerability was publicly disclosed. We have changed the private keys (and certificates) for all FFmpeg servers. The details were sent to the mailing lists by Alexander Strasser, who is part of the project server team. Here is a link to the user mailing list archive . We encourage you to read up on ""OpenSSL heartbleed"". It is possible that login data for the issue tracker was exposed to people exploiting this security hole. You might want to change your password in the tracker and everywhere else you used that same password. April 11, 2014, FFmpeg 2.2.1 We have made a new point releases (2.2.1). It contains bug fixes for Tickets #2893, #3432, #3469, #3486, #3495 and #3540 as well as several other fixes. See the git log for details. March 24, 2014, FFmpeg 2.2 We have made a new major release (2.2) It contains all features and bugfixes of the git master branch from 1st March. A partial list of new stuff is below:      - HNM version 4 demuxer and video decoder     - Live HDS muxer     - setsar/setdar filters now support variables in ratio expressions     - elbg filter     - string validation in ffprobe     - support for decoding through VDPAU in ffmpeg (the -hwaccel option)     - complete Voxware MetaSound decoder     - remove mp3_header_compress bitstream filter     - Windows resource files for shared libraries     - aeval filter     - stereoscopic 3d metadata handling     - WebP encoding via libwebp     - ATRAC3+ decoder     - VP8 in Ogg demuxing     - side & metadata support in NUT     - framepack filter     - XYZ12 rawvideo support in NUT     - Exif metadata support in WebP decoder     - OpenGL device     - Use metadata_header_padding to control padding in ID3 tags (currently used in     MP3, AIFF, and OMA files), FLAC header, and the AVI ""junk"" block.     - Mirillis FIC video decoder     - Support DNx444     - libx265 encoder     - dejudder filter     - Autodetect VDA like all other hardware accelerations   We recommend users, distributors and system integrators to upgrade unless they use current git master. February 3, 2014, Chemnitzer Linux-Tage We happily announce that FFmpeg will be represented at `Chemnitzer Linux-Tage' in Chemnitz, Germany. The event will take place on 15th and 16th of March. More information can be found here We invite you to visit us at our booth located in the Linux-Live area! There we will demonstrate usage of FFmpeg, answer your questions and listen to your problems and wishes. If you have media files that cannot be processed correctly with FFmpeg, be sure to have a sample with you so we can have a look! We are looking forward to meet you (again)! February 9, 2014, trac.ffmpeg.org / trac.mplayerhq.hu Security Breach The server on which FFmpeg and MPlayer Trac issue trackers were installed was compromised. The affected server was taken offline and has been replaced and all software reinstalled. FFmpeg Git, releases, FATE, web and mailinglists are on other servers and were not affected. We believe that the original compromise happened to a server, unrelated to FFmpeg and MPlayer, several months ago. That server was used as a source to clone the VM that we recently moved Trac to. It is not known if anyone used the backdoor that was found. We recommend all users to change their passwords. Especially users who use a password on Trac that they also use elsewhere, should change that password at least elsewhere. November 12, 2013, FFmpeg RFP in Debian Since the splitting of Libav the Debian/Ubuntu maintainers have followed the Libav fork. Many people have requested the packaging of ffmpeg in Debian, as it is more feature-complete and in many cases less buggy. Rogério Brito, a Debian developer, has proposed a Request For Package (RFP) in the Debian bug tracking system. Please let the Debian and Ubuntu developers know that you support packaging of the real FFmpeg! See Debian ticket #729203 for more details. October 28, 2013, FFmpeg 2.1 We have made a new major release (2.1) It contains all features and bugfixes of the git master branch from 28th October. A partial list of new stuff is below:      - aecho filter     - perspective filter ported from libmpcodecs     - ffprobe -show_programs option     - compand filter     - RTMP seek support     - when transcoding with ffmpeg (i.e. not streamcopying), -ss is now accurate     even when used as an input option. Previous behavior can be restored with     the -noaccurate_seek option.     - ffmpeg -t option can now be used for inputs, to limit the duration of     data read from an input file     - incomplete Voxware MetaSound decoder     - read EXIF metadata from JPEG     - DVB teletext decoder     - phase filter ported from libmpcodecs     - w3fdif filter     - Opus support in Matroska     - FFV1 version 1.3 is stable and no longer experimental     - FFV1: YUVA(444,422,420) 9, 10 and 16 bit support     - changed DTS stream id in lavf mpeg ps muxer from 0x8a to 0x88, to be     more consistent with other muxers.     - adelay filter     - pullup filter ported from libmpcodecs     - ffprobe -read_intervals option     - Lossless and alpha support for WebP decoder     - Error Resilient AAC syntax (ER AAC LC) decoding     - Low Delay AAC (ER AAC LD) decoding     - mux chapters in ASF files     - SFTP protocol (via libssh)     - libx264: add ability to encode in YUVJ422P and YUVJ444P     - Fraps: use BT.709 colorspace by default for yuv, as reference fraps decoder does     - make decoding alpha optional for prores, ffv1 and vp6 by setting     the skip_alpha flag.     - ladspa wrapper filter     - native VP9 decoder     - dpx parser     - max_error_rate parameter in ffmpeg     - PulseAudio output device     - ReplayGain scanner     - Enhanced Low Delay AAC (ER AAC ELD) decoding (no LD SBR support)     - Linux framebuffer output device     - HEVC decoder, raw HEVC demuxer, HEVC demuxing in TS, Matroska and MP4     - mergeplanes filter   We recommend users, distributors and system integrators to upgrade unless they use current git master. Past news"	"null"	"null"	"A complete, cross-platform solution to record, convert and stream audio and video. [LGPL2/GPL2]"	"true"
"Video"	"libde265"	"https://github.com/strukturag/libde265"	"Open h.265 video codec implementation. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"449"	"110"	"159"	"GitHub - strukturag/libde265: Open h.265 video codec implementation. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 110 Star 449 Fork 159 strukturag/libde265 Code Issues 7 Pull requests 1 Wiki Pulse Graphs Open h.265 video codec implementation. 1,990 commits 12 branches 13 releases 8 contributors C++ 92.8% C 4.2% Assembly 2.0% Python 0.4% CMake 0.3% Shell 0.2% Batchfile 0.1% C++ C Assembly Python CMake Shell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags RExt SHVC api2-develop api2 codingdata-access develop frame-parallel main10 master release-0.10 release-1.0.x release Nothing to show v1.0.2 v1.0.1 v1.0.0 v0.10 v0.9 v0.8 v0.7 v0.6 v0.5 v0.4 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit 503af19 Oct 26, 2015 farindk check for pictures without VPS Permalink Failed to load latest commit information. acceleration-speed add header files to sources Jul 15, 2015 dec265 fix stride computations for >8 bit outputs (SDL and YUV) Oct 13, 2015 enc265 add missing header to Makefile Oct 26, 2015 extra increase version number to v1.0.2 Jul 14, 2015 libde265 check for pictures without VPS Oct 26, 2015 m4 Merge branch 'master' into encoder Oct 20, 2014 scripts Add missing license headers and check headers in Travis. Jul 3, 2015 sherlock265 RGB 4:4:4 output for sherlock265 Oct 1, 2015 tools moved acceleration-speed tool into its own directory and split source… Jul 15, 2015 .gitignore Generate header file containing information from configure, added API… Feb 15, 2014 .travis.yml Merge branch 'master' into encoder Sep 30, 2015 AUTHORS Add myself to AUTHORS. May 27, 2014 CMakeLists.txt Need cmake 2.8.8 for OBJECT type. Sep 25, 2015 COPYING Clarify which parts are LGPL and which are GPL. Jul 30, 2014 ChangeLog Add some content to required files. May 27, 2014 Makefile.am moved acceleration-speed tool into its own directory and split source… Jul 15, 2015 Makefile.vc7 Support building encoder on Windows. Jun 17, 2015 NEWS Add some content to required files. May 27, 2014 README Added basic README as required by automake. Jan 24, 2014 README.md Also show AppVeyor build status. Aug 19, 2015 appveyor.yml Added configuration for AppVeyor CI. Aug 18, 2015 autogen.sh Add missing license headers and check headers in Travis. Jul 3, 2015 build.bat Support building encoder on Windows. Jun 17, 2015 configure.ac Merge branch 'master' into encoder Sep 23, 2015 libde265.pc.in Specify private libraries required for static linking. Jun 6, 2014 libde265.png Added libed265 logo. Jan 24, 2014 README.md libde265 - open h.265 codec implementation libde265 is an open source implementation of the h.265 video codec. It is written from scratch and has a plain C API to enable a simple integration into other software. libde265 supports WPP and tile-based multithreading and includes SSE optimizations. The decoder includes all features of the Main profile and correctly decodes almost all conformance streams (see [wiki page]). A list of supported features are available in the wiki. For latest news check our website at http://www.libde265.org The library comes with two example programs: dec265, a simple player for raw h.265 bitstreams. It serves nicely as an example program how to use libde265. sherlock265, a Qt-based video player with the additional capability to overlay some graphical representations of the h.265 bitstream (like CU-trees, intra-prediction modes). Example bitstreams can be found, e.g., at this site: ftp://ftp.kw.bbc.co.uk/hevc/hm-10.1-anchors/bitstreams/ra_main/ Approximate performance for WPP, non-tiles streams (measured using the timehevc tool from the GStreamer plugin). The tool plays a Matroska movie to the GStreamer fakesink and measures the average framerate. Resolution avg. fps CPU usage 720p 284 fps 39 % 1080p 150 fps 45 % 4K 36 fps 56 % Environment: Intel(R) Core(TM) i7-2700K CPU @ 3.50GHz (4 physical CPU cores) Ubuntu 12.04, 64bit GStreamer 0.10.36 Building If you got libde265 from the git repository, you will first need to run the included autogen.sh script to generate the configure script. libde265 has no dependencies on other libraries, but both optional example programs have dependencies on: SDL (optional for dec265's YUV overlay output), Qt (required for sherlock265), libswscale (required for sherlock265 if libvideogfx is not available). libvideogfx (required for sherlock265 if libswscale is not available, optional for dec265). Libvideogfx can be obtained from http://www.dirk-farin.net/software/libvideogfx/index.html or http://github.com/farindk/libvideogfx You can disable building of the example programs by running ./configure with   --disable-dec265        Do not build the dec265 decoder program.   --disable-sherlock265   Do not build the sherlock265 visual inspection program.  Additional logging information can be turned on and off using these ./configure flags:   --enable-log-error      turn on logging at error level (default=yes)   --enable-log-info       turn on logging at info level (default=no)   --enable-log-trace      turn on logging at trace level (default=no)  Build using cmake cmake scripts to build libde265 and the sample scripts dec265 and enc265 are included and can be compiled using these commands: mkdir build cd build cmake .. make  See the cmake documentation for further information on using cmake on other platforms. Prebuilt binaries Binary packages can be obtained from this launchpad site. Software using libde265 Libde265 has been integrated into these applications: gstreamer plugin, source, binary packages. VLC plugin source, binary packages. Windows DirectShow filters, https://github.com/strukturag/LAVFilters/releases ffmpeg fork, https://github.com/farindk/ffmpeg ffmpeg decoder source libde265.js JavaScript decoder source, demo. License The library libde265 is distributed under the terms of the GNU Lesser General Public License. The sample applications are distributed under the terms of the GNU General Public License. See COPYING for more details. Copyright (c) 2013-2014 Struktur AG Contact: Dirk Farin farin@struktur.de Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/strukturag/libde265"	"Open h.265 video codec implementation. [LGPL]"	"true"
"Video"	"website"	"http://www.libde265.org/"	"Open h.265 video codec implementation. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"449"	"110"	"159"	"GitHub - strukturag/libde265: Open h.265 video codec implementation. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 110 Star 449 Fork 159 strukturag/libde265 Code Issues 7 Pull requests 1 Wiki Pulse Graphs Open h.265 video codec implementation. 1,990 commits 12 branches 13 releases 8 contributors C++ 92.8% C 4.2% Assembly 2.0% Python 0.4% CMake 0.3% Shell 0.2% Batchfile 0.1% C++ C Assembly Python CMake Shell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags RExt SHVC api2-develop api2 codingdata-access develop frame-parallel main10 master release-0.10 release-1.0.x release Nothing to show v1.0.2 v1.0.1 v1.0.0 v0.10 v0.9 v0.8 v0.7 v0.6 v0.5 v0.4 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit 503af19 Oct 26, 2015 farindk check for pictures without VPS Permalink Failed to load latest commit information. acceleration-speed add header files to sources Jul 15, 2015 dec265 fix stride computations for >8 bit outputs (SDL and YUV) Oct 13, 2015 enc265 add missing header to Makefile Oct 26, 2015 extra increase version number to v1.0.2 Jul 14, 2015 libde265 check for pictures without VPS Oct 26, 2015 m4 Merge branch 'master' into encoder Oct 20, 2014 scripts Add missing license headers and check headers in Travis. Jul 3, 2015 sherlock265 RGB 4:4:4 output for sherlock265 Oct 1, 2015 tools moved acceleration-speed tool into its own directory and split source… Jul 15, 2015 .gitignore Generate header file containing information from configure, added API… Feb 15, 2014 .travis.yml Merge branch 'master' into encoder Sep 30, 2015 AUTHORS Add myself to AUTHORS. May 27, 2014 CMakeLists.txt Need cmake 2.8.8 for OBJECT type. Sep 25, 2015 COPYING Clarify which parts are LGPL and which are GPL. Jul 30, 2014 ChangeLog Add some content to required files. May 27, 2014 Makefile.am moved acceleration-speed tool into its own directory and split source… Jul 15, 2015 Makefile.vc7 Support building encoder on Windows. Jun 17, 2015 NEWS Add some content to required files. May 27, 2014 README Added basic README as required by automake. Jan 24, 2014 README.md Also show AppVeyor build status. Aug 19, 2015 appveyor.yml Added configuration for AppVeyor CI. Aug 18, 2015 autogen.sh Add missing license headers and check headers in Travis. Jul 3, 2015 build.bat Support building encoder on Windows. Jun 17, 2015 configure.ac Merge branch 'master' into encoder Sep 23, 2015 libde265.pc.in Specify private libraries required for static linking. Jun 6, 2014 libde265.png Added libed265 logo. Jan 24, 2014 README.md libde265 - open h.265 codec implementation libde265 is an open source implementation of the h.265 video codec. It is written from scratch and has a plain C API to enable a simple integration into other software. libde265 supports WPP and tile-based multithreading and includes SSE optimizations. The decoder includes all features of the Main profile and correctly decodes almost all conformance streams (see [wiki page]). A list of supported features are available in the wiki. For latest news check our website at http://www.libde265.org The library comes with two example programs: dec265, a simple player for raw h.265 bitstreams. It serves nicely as an example program how to use libde265. sherlock265, a Qt-based video player with the additional capability to overlay some graphical representations of the h.265 bitstream (like CU-trees, intra-prediction modes). Example bitstreams can be found, e.g., at this site: ftp://ftp.kw.bbc.co.uk/hevc/hm-10.1-anchors/bitstreams/ra_main/ Approximate performance for WPP, non-tiles streams (measured using the timehevc tool from the GStreamer plugin). The tool plays a Matroska movie to the GStreamer fakesink and measures the average framerate. Resolution avg. fps CPU usage 720p 284 fps 39 % 1080p 150 fps 45 % 4K 36 fps 56 % Environment: Intel(R) Core(TM) i7-2700K CPU @ 3.50GHz (4 physical CPU cores) Ubuntu 12.04, 64bit GStreamer 0.10.36 Building If you got libde265 from the git repository, you will first need to run the included autogen.sh script to generate the configure script. libde265 has no dependencies on other libraries, but both optional example programs have dependencies on: SDL (optional for dec265's YUV overlay output), Qt (required for sherlock265), libswscale (required for sherlock265 if libvideogfx is not available). libvideogfx (required for sherlock265 if libswscale is not available, optional for dec265). Libvideogfx can be obtained from http://www.dirk-farin.net/software/libvideogfx/index.html or http://github.com/farindk/libvideogfx You can disable building of the example programs by running ./configure with   --disable-dec265        Do not build the dec265 decoder program.   --disable-sherlock265   Do not build the sherlock265 visual inspection program.  Additional logging information can be turned on and off using these ./configure flags:   --enable-log-error      turn on logging at error level (default=yes)   --enable-log-info       turn on logging at info level (default=no)   --enable-log-trace      turn on logging at trace level (default=no)  Build using cmake cmake scripts to build libde265 and the sample scripts dec265 and enc265 are included and can be compiled using these commands: mkdir build cd build cmake .. make  See the cmake documentation for further information on using cmake on other platforms. Prebuilt binaries Binary packages can be obtained from this launchpad site. Software using libde265 Libde265 has been integrated into these applications: gstreamer plugin, source, binary packages. VLC plugin source, binary packages. Windows DirectShow filters, https://github.com/strukturag/LAVFilters/releases ffmpeg fork, https://github.com/farindk/ffmpeg ffmpeg decoder source libde265.js JavaScript decoder source, demo. License The library libde265 is distributed under the terms of the GNU Lesser General Public License. The sample applications are distributed under the terms of the GNU General Public License. See COPYING for more details. Copyright (c) 2013-2014 Struktur AG Contact: Dirk Farin farin@struktur.de Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/strukturag/libde265"	"Open h.265 video codec implementation. [LGPL]"	"true"
"Video"	"OpenH264"	"https://github.com/cisco/openh264"	"Open Source H.264 Codec. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2233"	"303"	"786"	"GitHub - cisco/openh264: Open Source H.264 Codec Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 303 Star 2,233 Fork 786 cisco/openh264 Code Issues 54 Pull requests 1 Wiki Pulse Graphs Open Source H.264 Codec 4,328 commits 23 branches 9 releases 60 contributors C++ 69.3% Assembly 24.4% Shell 1.9% C 1.6% Makefile 0.8% Objective-C 0.8% Other 1.2% C++ Assembly Shell C Makefile Objective-C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cj-build1 gh-pages master openh264v1.0 openh264v1.1 openh264v1.1.1 openh264v1.2 openh264v1.3 openh264v1.4 openh264v1.4.1 openh264v1.5 openh264v1.5.1 openh264v1.6 v1.1-Firefox32 v1.1-Firefox33 v1.1-Firefox34 v1.3-Firefox36 v1.4-Firefox38 v1.5-Firefox39 v1.5.1-Firefox39 v1.5.2-Firefox39 v1.5.3-Firefox39 v1.6-Firefox39 Nothing to show v1.6.0 v1.5.0 v1.4.0 v1.3.1 v1.3 v1.2 v1.1 v1.0.0 v1.0 Nothing to show New pull request Latest commit 8980731 Jul 13, 2016 HaiboZhu committed on GitHub Merge pull request #2527 from ruil2/init … init samplebuffer Permalink Failed to load latest commit information. autotest update scripts Dec 18, 2015 build Use assert.h instead of cassert Jun 15, 2016 codec Merge pull request #2527 from ruil2/init Jul 13, 2016 docs 1.doxgen documentation format for comments in api/*.h 2. comments to … Nov 21, 2014 module Make sure the output resolution of encoder doesn't exceed the Openh26… Jun 30, 2016 res Merge pull request #1657 from mstorsjo/clip-bitrate Dec 21, 2014 test [UT] Allow for different output depending on downsample average order Jun 16, 2016 testbin modify configure file comments Jun 6, 2016 .gitignore Update .gitignore Apr 4, 2016 .reviewboardrc ReviewBoard .rc file for rbt. Jan 6, 2014 .travis.yml Use dist: trusty with travis Jan 19, 2016 CODING_STYLE Rerun astyle on the C++ source files Jan 5, 2014 CONTRIBUTORS Added support for ""video signal type present"" information. Feb 23, 2016 LICENSE Initial commit Oct 27, 2013 Makefile Update the SharedLibVersion to make the compatibilty Jul 11, 2016 README.md Update the wrong description in README.md Jul 8, 2016 RELEASES Update the binary files location for openh264 release 1.6.0 Jul 8, 2016 code-coverage.sh remove trailing white spaces Mar 13, 2014 gmpopenh264.info change output interface Dec 2, 2015 openh264.def Convert tabs to spaces in .def files May 14, 2015 openh264.pc.in Include private dependencies in the Libs line in pkg-config if only i… Jan 2, 2015 openh264.rc change API for slicing part for easier usage (the UseLoadBalancing fl… Nov 10, 2015 openh264.rc.template Update openh264.rc when updating the version number Apr 20, 2015 run_Test.sh Build using -Werror in travis unit tests Jan 16, 2015 ut.def Convert tabs to spaces in .def files May 14, 2015 README.md OpenH264 OpenH264 is a codec library which supports H.264 encoding and decoding. It is suitable for use in real time applications such as WebRTC. See http://www.openh264.org/ for more details. Encoder Features Constrained Baseline Profile up to Level 5.2 (Max frame size is 36864 macro-blocks) Arbitrary resolution, not constrained to multiples of 16x16 Rate control with adaptive quantization, or constant quantization Slice options: 1 slice per frame, N slices per frame, N macroblocks per slice, or N bytes per slice Multiple threads automatically used for multiple slices Temporal scalability up to 4 layers in a dyadic hierarchy Simulcast AVC up to 4 resolutions from a single input Spatial simulcast up to 4 resolutions from a single input Long Term Reference (LTR) frames Memory Management Control Operation (MMCO) Reference picture list modification Single reference frame for inter prediction Multiple reference frames when using LTR and/or 3-4 temporal layers Periodic and on-demand Instantaneous Decoder Refresh (IDR) frame insertion Dynamic changes to bit rate, frame rate, and resolution Annex B byte stream output YUV 4:2:0 planar input Decoder Features Constrained Baseline Profile up to Level 5.2 (Max frame size is 36864 macro-blocks) Arbitrary resolution, not constrained to multiples of 16x16 Single thread for all slices Long Term Reference (LTR) frames Memory Management Control Operation (MMCO) Reference picture list modification Multiple reference frames when specified in Sequence Parameter Set (SPS) Annex B byte stream input YUV 4:2:0 planar output OS Support Windows 64-bit and 32-bit Mac OS X 64-bit and 32-bit Linux 64-bit and 32-bit Android 64-bit and 32-bit iOS 64-bit and 32-bit Windows Phone 32-bit Processor Support Intel x86 optionally with MMX/SSE (no AVX yet, help is welcome) ARMv7 optionally with NEON, AArch64 optionally with NEON Any architecture using C/C++ fallback functions Building the Library NASM needed to be installed for assembly code: workable version 2.10.06 or above, nasm can downloaded from http://www.nasm.us/ For Mac OSX 64-bit NASM needed to be below version 2.11.08 as nasm 2.11.08 will introduce error when using RIP-relative addresses in Mac OSX 64-bit To build the arm assembly for Windows Phone, gas-preprocessor is required. It can be downloaded from git://git.libav.org/gas-preprocessor.git For Android Builds To build for android platform, You need to install android sdk and ndk. You also need to export **ANDROID_SDK**/tools to PATH. On Linux, this can be done by export PATH=**ANDROID_SDK**/tools:$PATH  The codec and demo can be built by make OS=android NDKROOT=**ANDROID_NDK** TARGET=**ANDROID_TARGET**  Valid **ANDROID_TARGET** can be found in **ANDROID_SDK**/platforms, such as android-12. You can also set ARCH, NDKLEVEL according to your device and NDK version. ARCH specifies the architecture of android device. Currently arm, arm64, x86 and x86_64 are supported, the default is arm. (mips and mips64 can also be used, but there's no specific optimization for those architectures.) NDKLEVEL specifies android api level, the default is 12. Available possibilities can be found in **ANDROID_NDK**/platforms, such as android-21 (strip away the android- prefix). By default these commands build for the armeabi-v7a ABI. To build for the other android ABIs, add ARCH=arm64, ARCH=x86, ARCH=x86_64, ARCH=mips or ARCH=mips64. To build for the older armeabi ABI (which has armv5te as baseline), add APP_ABI=armeabi (ARCH=arm is implicit). To build for 64-bit ABI, such as arm64, explicitly set NDKLEVEL to 21 or higher. For iOS Builds You can build the libraries and demo applications using xcode project files located in codec/build/iOS/dec and codec/build/iOS/enc. You can also build the libraries (but not the demo applications) using the make based build system from the command line. Build with make OS=ios ARCH=**ARCH**  Valid values for **ARCH** are the normal iOS architecture names such as armv7, armv7s, arm64, and i386 and x86_64 for the simulator. Another settable iOS specific parameter is SDK_MIN, specifying the minimum deployment target for the built library. For other details on building using make on the command line, see 'For All Platforms' below. For Windows Builds Our Windows builds use MinGW which can be found here - http://www.mingw.org/ To build with gcc, add the MinGW bin directory (e.g. /c/MinGW/bin) to your path and follow the 'For All Platforms' instructions below. To build with Visual Studio you will need to set up your path to run cl.exe. The easiest way is to start MSYS from a developer command line session - http://msdn.microsoft.com/en-us/library/ms229859(v=vs.110).aspx If you need to do it by hand here is an example from a Windows 64bit install of VS2012: export PATH=""$PATH:/c/Program Files (x86)/Microsoft Visual Studio 11.0/VC/bin:/c/Program Files (x86)/Microsoft Visual Studio 11.0/Common7/IDE""  You will also need to set your INCLUDE and LIB paths to point to your VS and SDK installs. Something like this, again from Win64 with VS2012 (note the use of Windows-style paths here). export INCLUDE=""C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\include;C:\Program Files (x86)\Windows Kits\8.0\Include\um;C:\Program Files (x86)\Windows Kits\8.0\Include\shared"" export LIB=""C:\Program Files (x86)\Windows Kits\8.0\Lib\Win8\um\x86;C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\lib""  Then add OS=msvc to the make line of the 'For All Platforms' instructions. For Windows Phone builds Follow the instructions above for normal Windows builds, but use OS=msvc-wp instead of OS=msvc. You will also need gas-preprocessor (as mentioned below ""Building the Library""). If building for Windows Phone with MSVC 2013, there's no included bat file that sets the lib paths to the Windows Phone kit, but that can be done with a command like this: export LIB=""c:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\lib\store\arm;c:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\lib\arm;c:\Program Files (x86)\Windows Phone Kits\8.1\lib\arm""  This is only necessary for building the DLL; the static library can be built without setting this. For All Platforms From the main project directory: make for automatically detecting architecture and building accordingly make ARCH=i386 for x86 32bit builds make ARCH=x86_64 for x86 64bit builds make V=No for a silent build (not showing the actual compiler commands) make DEBUGSYMBOLS=True for two libraries, one is normal libraries, another one is removed the debugging symbol table entries (those created by the -g option ) The command line programs h264enc and h264dec will appear in the main project directory. A shell script to run the command-line apps is in testbin/CmdLineExample.sh Usage information can be found in testbin/CmdLineReadMe Using the Source codec - encoder, decoder, console (test app), build (makefile, vcproj) build - scripts for Makefile build system. test - GTest unittest files. testbin - autobuild scripts, test app config files res - yuv and bitstream test files Known Issues See the issue tracker on https://github.com/cisco/openh264/issues Encoder errors when resolution exceeds 3840x2160 Encoder errors when compressed frame size exceeds half uncompressed size Decoder errors when compressed frame size exceeds 1MB Encoder RC requires frame skipping to be enabled to hit the target bitrate, if frame skipping is disabled the target bitrate may be exceeded License BSD, see LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cisco/openh264"	"Open Source H.264 Codec. [BSD]"	"true"
"Video"	"website"	"http://www.openh264.org/"	"Open Source H.264 Codec. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2233"	"303"	"786"	"GitHub - cisco/openh264: Open Source H.264 Codec Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 303 Star 2,233 Fork 786 cisco/openh264 Code Issues 54 Pull requests 1 Wiki Pulse Graphs Open Source H.264 Codec 4,328 commits 23 branches 9 releases 60 contributors C++ 69.3% Assembly 24.4% Shell 1.9% C 1.6% Makefile 0.8% Objective-C 0.8% Other 1.2% C++ Assembly Shell C Makefile Objective-C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cj-build1 gh-pages master openh264v1.0 openh264v1.1 openh264v1.1.1 openh264v1.2 openh264v1.3 openh264v1.4 openh264v1.4.1 openh264v1.5 openh264v1.5.1 openh264v1.6 v1.1-Firefox32 v1.1-Firefox33 v1.1-Firefox34 v1.3-Firefox36 v1.4-Firefox38 v1.5-Firefox39 v1.5.1-Firefox39 v1.5.2-Firefox39 v1.5.3-Firefox39 v1.6-Firefox39 Nothing to show v1.6.0 v1.5.0 v1.4.0 v1.3.1 v1.3 v1.2 v1.1 v1.0.0 v1.0 Nothing to show New pull request Latest commit 8980731 Jul 13, 2016 HaiboZhu committed on GitHub Merge pull request #2527 from ruil2/init … init samplebuffer Permalink Failed to load latest commit information. autotest update scripts Dec 18, 2015 build Use assert.h instead of cassert Jun 15, 2016 codec Merge pull request #2527 from ruil2/init Jul 13, 2016 docs 1.doxgen documentation format for comments in api/*.h 2. comments to … Nov 21, 2014 module Make sure the output resolution of encoder doesn't exceed the Openh26… Jun 30, 2016 res Merge pull request #1657 from mstorsjo/clip-bitrate Dec 21, 2014 test [UT] Allow for different output depending on downsample average order Jun 16, 2016 testbin modify configure file comments Jun 6, 2016 .gitignore Update .gitignore Apr 4, 2016 .reviewboardrc ReviewBoard .rc file for rbt. Jan 6, 2014 .travis.yml Use dist: trusty with travis Jan 19, 2016 CODING_STYLE Rerun astyle on the C++ source files Jan 5, 2014 CONTRIBUTORS Added support for ""video signal type present"" information. Feb 23, 2016 LICENSE Initial commit Oct 27, 2013 Makefile Update the SharedLibVersion to make the compatibilty Jul 11, 2016 README.md Update the wrong description in README.md Jul 8, 2016 RELEASES Update the binary files location for openh264 release 1.6.0 Jul 8, 2016 code-coverage.sh remove trailing white spaces Mar 13, 2014 gmpopenh264.info change output interface Dec 2, 2015 openh264.def Convert tabs to spaces in .def files May 14, 2015 openh264.pc.in Include private dependencies in the Libs line in pkg-config if only i… Jan 2, 2015 openh264.rc change API for slicing part for easier usage (the UseLoadBalancing fl… Nov 10, 2015 openh264.rc.template Update openh264.rc when updating the version number Apr 20, 2015 run_Test.sh Build using -Werror in travis unit tests Jan 16, 2015 ut.def Convert tabs to spaces in .def files May 14, 2015 README.md OpenH264 OpenH264 is a codec library which supports H.264 encoding and decoding. It is suitable for use in real time applications such as WebRTC. See http://www.openh264.org/ for more details. Encoder Features Constrained Baseline Profile up to Level 5.2 (Max frame size is 36864 macro-blocks) Arbitrary resolution, not constrained to multiples of 16x16 Rate control with adaptive quantization, or constant quantization Slice options: 1 slice per frame, N slices per frame, N macroblocks per slice, or N bytes per slice Multiple threads automatically used for multiple slices Temporal scalability up to 4 layers in a dyadic hierarchy Simulcast AVC up to 4 resolutions from a single input Spatial simulcast up to 4 resolutions from a single input Long Term Reference (LTR) frames Memory Management Control Operation (MMCO) Reference picture list modification Single reference frame for inter prediction Multiple reference frames when using LTR and/or 3-4 temporal layers Periodic and on-demand Instantaneous Decoder Refresh (IDR) frame insertion Dynamic changes to bit rate, frame rate, and resolution Annex B byte stream output YUV 4:2:0 planar input Decoder Features Constrained Baseline Profile up to Level 5.2 (Max frame size is 36864 macro-blocks) Arbitrary resolution, not constrained to multiples of 16x16 Single thread for all slices Long Term Reference (LTR) frames Memory Management Control Operation (MMCO) Reference picture list modification Multiple reference frames when specified in Sequence Parameter Set (SPS) Annex B byte stream input YUV 4:2:0 planar output OS Support Windows 64-bit and 32-bit Mac OS X 64-bit and 32-bit Linux 64-bit and 32-bit Android 64-bit and 32-bit iOS 64-bit and 32-bit Windows Phone 32-bit Processor Support Intel x86 optionally with MMX/SSE (no AVX yet, help is welcome) ARMv7 optionally with NEON, AArch64 optionally with NEON Any architecture using C/C++ fallback functions Building the Library NASM needed to be installed for assembly code: workable version 2.10.06 or above, nasm can downloaded from http://www.nasm.us/ For Mac OSX 64-bit NASM needed to be below version 2.11.08 as nasm 2.11.08 will introduce error when using RIP-relative addresses in Mac OSX 64-bit To build the arm assembly for Windows Phone, gas-preprocessor is required. It can be downloaded from git://git.libav.org/gas-preprocessor.git For Android Builds To build for android platform, You need to install android sdk and ndk. You also need to export **ANDROID_SDK**/tools to PATH. On Linux, this can be done by export PATH=**ANDROID_SDK**/tools:$PATH  The codec and demo can be built by make OS=android NDKROOT=**ANDROID_NDK** TARGET=**ANDROID_TARGET**  Valid **ANDROID_TARGET** can be found in **ANDROID_SDK**/platforms, such as android-12. You can also set ARCH, NDKLEVEL according to your device and NDK version. ARCH specifies the architecture of android device. Currently arm, arm64, x86 and x86_64 are supported, the default is arm. (mips and mips64 can also be used, but there's no specific optimization for those architectures.) NDKLEVEL specifies android api level, the default is 12. Available possibilities can be found in **ANDROID_NDK**/platforms, such as android-21 (strip away the android- prefix). By default these commands build for the armeabi-v7a ABI. To build for the other android ABIs, add ARCH=arm64, ARCH=x86, ARCH=x86_64, ARCH=mips or ARCH=mips64. To build for the older armeabi ABI (which has armv5te as baseline), add APP_ABI=armeabi (ARCH=arm is implicit). To build for 64-bit ABI, such as arm64, explicitly set NDKLEVEL to 21 or higher. For iOS Builds You can build the libraries and demo applications using xcode project files located in codec/build/iOS/dec and codec/build/iOS/enc. You can also build the libraries (but not the demo applications) using the make based build system from the command line. Build with make OS=ios ARCH=**ARCH**  Valid values for **ARCH** are the normal iOS architecture names such as armv7, armv7s, arm64, and i386 and x86_64 for the simulator. Another settable iOS specific parameter is SDK_MIN, specifying the minimum deployment target for the built library. For other details on building using make on the command line, see 'For All Platforms' below. For Windows Builds Our Windows builds use MinGW which can be found here - http://www.mingw.org/ To build with gcc, add the MinGW bin directory (e.g. /c/MinGW/bin) to your path and follow the 'For All Platforms' instructions below. To build with Visual Studio you will need to set up your path to run cl.exe. The easiest way is to start MSYS from a developer command line session - http://msdn.microsoft.com/en-us/library/ms229859(v=vs.110).aspx If you need to do it by hand here is an example from a Windows 64bit install of VS2012: export PATH=""$PATH:/c/Program Files (x86)/Microsoft Visual Studio 11.0/VC/bin:/c/Program Files (x86)/Microsoft Visual Studio 11.0/Common7/IDE""  You will also need to set your INCLUDE and LIB paths to point to your VS and SDK installs. Something like this, again from Win64 with VS2012 (note the use of Windows-style paths here). export INCLUDE=""C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\include;C:\Program Files (x86)\Windows Kits\8.0\Include\um;C:\Program Files (x86)\Windows Kits\8.0\Include\shared"" export LIB=""C:\Program Files (x86)\Windows Kits\8.0\Lib\Win8\um\x86;C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\lib""  Then add OS=msvc to the make line of the 'For All Platforms' instructions. For Windows Phone builds Follow the instructions above for normal Windows builds, but use OS=msvc-wp instead of OS=msvc. You will also need gas-preprocessor (as mentioned below ""Building the Library""). If building for Windows Phone with MSVC 2013, there's no included bat file that sets the lib paths to the Windows Phone kit, but that can be done with a command like this: export LIB=""c:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\lib\store\arm;c:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\lib\arm;c:\Program Files (x86)\Windows Phone Kits\8.1\lib\arm""  This is only necessary for building the DLL; the static library can be built without setting this. For All Platforms From the main project directory: make for automatically detecting architecture and building accordingly make ARCH=i386 for x86 32bit builds make ARCH=x86_64 for x86 64bit builds make V=No for a silent build (not showing the actual compiler commands) make DEBUGSYMBOLS=True for two libraries, one is normal libraries, another one is removed the debugging symbol table entries (those created by the -g option ) The command line programs h264enc and h264dec will appear in the main project directory. A shell script to run the command-line apps is in testbin/CmdLineExample.sh Usage information can be found in testbin/CmdLineReadMe Using the Source codec - encoder, decoder, console (test app), build (makefile, vcproj) build - scripts for Makefile build system. test - GTest unittest files. testbin - autobuild scripts, test app config files res - yuv and bitstream test files Known Issues See the issue tracker on https://github.com/cisco/openh264/issues Encoder errors when resolution exceeds 3840x2160 Encoder errors when compressed frame size exceeds half uncompressed size Decoder errors when compressed frame size exceeds 1MB Encoder RC requires frame skipping to be enabled to hit the target bitrate, if frame skipping is disabled the target bitrate may be exceeded License BSD, see LICENSE file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cisco/openh264"	"Open Source H.264 Codec. [BSD]"	"true"
"Video"	"Theora"	"http://www.theora.org/"	"A free and open video compression format. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Theora.org :: main - Theora, video for everyone Xiph.org Opus FLAC Icecast Vorbis Daala Theora Speex XSPF About News FAQ Benefits Discuss Downloads Documentation Content Support us Theora video compression Theora is a free and open video compression format from the Xiph.org Foundation. Like all our multimedia technology it can be used to distribute film and video online and on disc without the licensing and royalty fees or vendor lock-in associated with other formats. Theora scales from postage stamp to HD resolution, and is considered particularly competitive at low bitrates. It is in the same class as MPEG-4/DiVX, and like the Vorbis audio codec it has lots of room for improvement as encoder technology develops. Theora is in full public release as of November 3, 2008. The bitstream format for Theora I was frozen Thursday, 2004 July 1. All bitstreams encoded since that date will remain compatible with future releases. The Xiph Fish Logo and its theora.org variant are trademarks (™) of Xiph.Org. These pages © 1994 - 2011 Xiph.Org. All rights reserved. Last Modified:"	"null"	"null"	"A free and open video compression format. [BSD]"	"true"
"Virtual Machines"	"CarpVM"	"https://github.com/tekknolagi/carp"	"""interesting"" VM in C. Let's see how this goes. [GPLv3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"883"	"66"	"78"	"GitHub - tekknolagi/carp: ""interesting"" VM in C. Let's see how this goes. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 66 Star 883 Fork 78 tekknolagi/carp Code Issues 6 Pull requests 0 Pulse Graphs ""interesting"" VM in C. Let's see how this goes. 472 commits 3 branches 2 releases Fetching contributors C 88.7% C++ 5.4% Makefile 3.8% Emacs Lisp 2.1% C C++ Makefile Emacs Lisp Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master new_tokenizer_impl Nothing to show v0.1.1 v0.1 Nothing to show New pull request Latest commit 44eb812 Mar 28, 2016 tekknolagi Add notice about move to RabbitVM Permalink Failed to load latest commit information. examples Add another Carp example. Dec 7, 2014 extras Minor cleanups from flycheck suggestions for carp-mode.el Dec 3, 2014 fuzz Add fuzz test for halting with value other than 0 Dec 7, 2014 src gperf hashtables for register names and instruction names Jan 1, 2015 tests Use proper const strings in carp_tokenizer.c and tests/ht.c Dec 3, 2014 .gitignore Fix .gitignore to not ignore the carp directory under examples Dec 4, 2014 .gitmodules syntax not the same Aug 14, 2014 .travis.yml Add make test to .travis.yml Dec 3, 2014 LICENSE.txt gplv3! Aug 3, 2014 Makefile the great renaming Jan 1, 2015 README.md Add notice about move to RabbitVM Mar 28, 2016 SYNTAX.md use tabs like the original Dec 14, 2014 TODO.md Add NUL terminator to allocated memory. Dec 3, 2014 README.md THIS PROJECT IS UNSTABLE AND DEPRECATED I have since started slow work on a more stable, better thought-out project called RabbitVM. It doesn't quite have the same level of documentation but it should work much better. CarpVM This is a project I've been slowly working on for about half a year now. The goal is to try and build a small (and decently reliable) VM from the ground up, learning more and more C as I go. Right now there are instructions, registers, a stack, data memory, and calls. Not sure if recursion works... it should in theory. Haven't tested. CONSIDER THIS PRE-ALPHA SOFTWARE. Things change more than they do in Rust!     Installation Getting Carp If you already have a local copy (cloned before submodule was added) git fetch git rebase git submodule init git submodule update If you don't already have a local copy git clone --recursive NOTE: If git submodule status doesn't return a SHA1 hash and repository name, you have a problem. NOTE: Recursive clone is for testing library. If not included, tests will not build. Building Carp make make test (optional) make install make clean (optional) Tested Machines Arch (bit) OS (with version, name) Compiler (with version) 64-bit Ubuntu 12.04 (precise) gcc 4.6.3 64-bit Ubuntu 14.04 (trusty) gcc 4.8.2 32-bit Ubuntu 14.04 (trusty) gcc 4.8.2 64-bit OS X 10.9.4 (Mavericks) clang 3.2 32-bit OS X 10.9.4 (Mavericks) gcc 4.2.1 64-bit Arch Linux 3.13.6-1 clang 3.4.2 64-bit? Arch Linux 3.13.6-1 gcc 4.9.0 20140604 Use NOTE: See carp -h for help with command-line options. Interpreter Write a Carp file - see SYNTAX.md. More formal spec coming. Run ./carp.out -f your_file.carp. API Include carp/carp_machine.h in your program. Run gcc program.c /usr/local/lib/libcarp.a -o program.out. Instruction set Opcode Arguments Description HALT exit code Sets ext to given code, halts, and attempts to clean up stack, data memory, and label memory. NOP Does nothing. Seriously. LOADR reg, val Loads given integer value into given register. LOAD diff Loads value at location fp + diff in the stack. STORE diff, val Stores value at location fp + diff. MOV dst, src Copies contents of src register into dst register. ADD Pops the top two integers from the stack and pushes their sum. SUB Pops the top two integers from the stack and pushes the difference (lower minus upper). MUL Pops the top two integers from the stack and pushes their product. MOD Pops the top two integers from the stack and pushes lower % upper. SHR Pops the top two integers from the stack and pushes lower >> upper. SHL Pops the top two integers from the stack and pushes lower << upper. NOT Pops top integer from stack and pushes bitwise NOT of that integer. XOR Pops the top two integers from the stack and pushes bitwise XOR.. OR Pops the top two integers from the stack and pushes bitwise OR. AND Pops the top two integers from the stack and pushes bitwise AND. INCR reg Increments value in given register. DECR reg Decrements value in given register. INC Increments the value at the top of the stack. DEC Decrements the value at the top of the stack. PUSHR reg Pushes value in given register. PUSH val Pushes given value. POP reg Pops an integer from the stack and dumps it into given register. CMP Pops the top two integers from the stack and checks if equal. 0 means equal. Pushes result. LT Pops the top two integers from the stack and checks if lower < upper. Pushes result. GT Pops the top two integers from the stack and checks if lower > upper. Pushes result. JZ addr Jumps to given absolute address if top of the stack is 0. RJZ diff Adds differential to ip (relative jump) if top of the stack is 0. JNZ addr Jumps to given absolute address if top of the stack is not 0. RJNZ diff Adds differential to ip (relative jump) if top of the stack is not 0. JMP addr Jumps to given absolute address unconditionally. RJMP diff Adds differential to ip (relative jump) unconditionally. CALL key/addr Save state and set IP to value in data memory at key. Function may return value in ax. RET Put top of the stack into ax and load previous state. PREG reg Prints contents of given register. PTOP Peeks top of stack and prints top value. Registers Name Purpose r0 ... r9 General purpose. ax Return value for user-defined function. bx, cx, dx, rx ... something in the future. Just taking up space for now. ip Instruction pointer. Used for keeping place in code, gotos, calling, etc. sp Stack pointer. fp Frame pointer. Used to keep state for function calls. gbg Garbage register mainly used for popping. run Boolean - is machine running? ext Exit code. How to contribute One way: Check out the TODO.md file to see if anything needs doing. Write some code (following existing implicit style) and submit a pull request. Another way: Write some code for a feature you want to exist and submit a pull request. License GPLv3. See LICENSE.txt. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tekknolagi/carp"	"""interesting"" VM in C. Let's see how this goes. [GPLv3]"	"true"
"Virtual Machines"	"MicroPython"	"https://github.com/micropython/micropython"	"Aims to put an implementation of Python 3.x on a microcontroller. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3417"	"462"	"715"	"GitHub - micropython/micropython: MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 462 Star 3,417 Fork 715 micropython/micropython Code Issues 216 Pull requests 52 Wiki Pulse Graphs MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems 6,222 commits 11 branches 32 releases 119 contributors C 95.1% C++ 1.7% Python 1.5% Objective-C 1.1% HTML 0.2% Makefile 0.2% Other 0.2% C C++ Python Objective-C HTML Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cross dynamic-native-modules esp-extra-scripts iabdalkader-cc3k-update master parse-bytecode reentrant-gc travis-clang travis-esp8266 travis-stackless travis-testing Nothing to show v1.8.2 v1.8.1 v1.8 v1.7 v1.6 v1.5.2 v1.5.1 v1.5 v1.4.6 v1.4.5 v1.4.4 v1.4.3 v1.4.2 v1.4.1 v1.4 v1.3.10 v1.3.9 v1.3.8 v1.3.7 v1.3.6 v1.3.5 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3 v1.2 v1.1.1 v1.1 v1.0.1 v1.0 v1.0-rc1 Nothing to show New pull request Latest commit 780114e Jul 15, 2016 pfalcon extmod/modussl_axtls: Add dummy setblocking() method. … Accepts only value of True. Permalink Failed to load latest commit information. bare-arm lib/utils/pyexec: Condition-out GC calls from pyexec. Apr 19, 2016 cc3200 cc3200: Remove obsolete singleton heart-beat object. Jun 28, 2016 docs docs: Bump version to 1.8.2. Jul 10, 2016 drivers drivers/wiznet5k: Fix indentation so it's not misleading. Jul 11, 2016 esp8266 esp8266: Select axTLS for SSL implementation, following recent refactor. Jul 13, 2016 examples examples/http_server*: Update for buffered-like streams (read line by… Jul 10, 2016 extmod extmod/modussl_axtls: Add dummy setblocking() method. Jul 15, 2016 lib lib/axtls: Update, fixes esp8266 build. Jul 11, 2016 logo logo: Change line endings in FONT-LICENSE.txt from CRLF to LF. Apr 16, 2015 minimal minimal: For frozen bytecode generation, add dependency of qstr file. Apr 16, 2016 mpy-cross mpy-cross: Fix Makefile to handle gc-sections linker flags on OS X. Jul 11, 2016 pic16bit py: Add MP_STATE_THREAD to hold state specific to a given thread. Jun 28, 2016 py py/stream: Implement 2- and 3-arg write() method as an extension to C… Jul 14, 2016 qemu-arm qemu-arm: Enable gcc LTO option for nlrthumb.c Jul 11, 2016 stmhal stmhal: Enable SD card on L4 MCUs. Jun 29, 2016 teensy teensy: Update the README with OSX specific information and tips. Jun 6, 2016 tests tests: Add test for extended arguments to stream .write() method. Jul 14, 2016 tools tools: Upgrade upip to 0.7. May 28, 2016 unix extmod/modussl_axtls: Further changes to allow alternative SSL modules. Jul 13, 2016 windows windows/msvc: Include machine_pinbase.c in build and enable umachine … Jun 25, 2016 .gitattributes Add .gitattributes file to force text line endings to LF. Apr 16, 2015 .gitignore msvc: Allow overriding of build options with custom file Apr 30, 2015 .gitmodules lib/berkeley-db-1.xx: Add Berkeley DB 1.85 as a submodule. Jun 14, 2016 .travis.yml travis: Run unix thread tests. Jul 9, 2016 ACKNOWLEDGEMENTS ACKNOWLEDGEMENTS: Add list of 842 backers from the ESP8266 campaign. Apr 21, 2016 CODECONVENTIONS.md CODECONVENTIONS.md: Describe git commit messages conventions. May 7, 2016 CONTRIBUTING.md CONTRIBUTING.md: Link to contrib guidelines and code conventions. May 3, 2015 LICENSE Add license header to (almost) all files. May 3, 2014 README.md README: ""quick build"": Use ""make axtls"" after all. May 28, 2016 README.md The MicroPython project This is the MicroPython project, which aims to put an implementation of Python 3.x on microcontrollers and small embedded systems. You can find the official website at micropython.org. WARNING: this project is in beta stage and is subject to changes of the code-base, including project-wide name changes and API changes. MicroPython implements the entire Python 3.4 syntax (including exceptions, ""with"", ""yield from"", etc., and additionally ""async"" keyword from Python 3.5). The following core datatypes are provided: str (including basic Unicode support), bytes, bytearray, tuple, list, dict, set, frozenset, array.array, collections.namedtuple, classes and instances. Builtin modules include sys, time, and struct. Note that only subset of Python 3.4 functionality implemented for the data types and modules. See the repository www.github.com/micropython/pyboard for the Micro Python board, the officially supported reference electronic circuit board. Major components in this repository: py/ -- the core Python implementation, including compiler, runtime, and core library. unix/ -- a version of MicroPython that runs on Unix. stmhal/ -- a version of MicroPython that runs on the MicroPython board with an STM32F405RG (using ST's Cube HAL drivers). minimal/ -- a minimal MicroPython port. Start with this if you want to port MicroPython to another microcontroller. tests/ -- test framework and test scripts. docs/ -- user documentation in Sphinx reStructuredText format. Additional components: bare-arm/ -- a bare minimum version of MicroPython for ARM MCUs. Used mostly to control code size. teensy/ -- a version of MicroPython that runs on the Teensy 3.1 (preliminary but functional). pic16bit/ -- a version of MicroPython for 16-bit PIC microcontrollers. cc3200/ -- a version of MicroPython that runs on the CC3200 from TI. esp8266/ -- an experimental port for ESP8266 WiFi modules. tools/ -- various tools, including the pyboard.py module. examples/ -- a few example Python scripts. The subdirectories above may include READMEs with additional info. ""make"" is used to build the components, or ""gmake"" on BSD-based systems. You will also need bash and Python (at least 2.7 or 3.3). The Unix version The ""unix"" port requires a standard Unix environment with gcc and GNU make. x86 and x64 architectures are supported (i.e. x86 32- and 64-bit), as well as ARM and MIPS. Making full-featured port to another architecture requires writing some assembly code for the exception handling and garbage collection. Alternatively, fallback implementation based on setjmp/longjmp can be used. To build (see section below for required dependencies): $ cd unix $ make axtls $ make  Then to give it a try: $ ./micropython >>> list(5 * x + y for x in range(10) for y in [4, 2, 1])  Use CTRL-D (i.e. EOF) to exit the shell. Learn about command-line options (in particular, how to increase heap size which may be needed for larger applications): $ ./micropython --help  Run complete testsuite: $ make test  Unix version comes with a builtin package manager called upip, e.g.: $ ./micropython -m upip install micropython-pystone $ ./micropython -m pystone  Browse available modules on PyPI. Standard library modules come from micropython-lib project. External dependencies Building Unix version requires some dependencies installed. For Debian/Ubuntu/Mint derivative Linux distros, install build-essential (includes toolchain and make), libffi-dev, and pkg-config packages. Other dependencies can be built together with MicroPython. Oftentimes, you need to do this to enable extra features or capabilities. To build these additional dependencies, first fetch git submodules for them: $ git submodule update --init  Use this same command to get the latest versions of dependencies, as they are updated from time to time. After that, in unix/ dir, execute: $ make deplibs  This will build all available dependencies (regardless whether they are used or not). If you intend to build MicroPython with additional options (like cross-compiling), the same set of options should be passed to make deplibs. To actually enabled use of dependencies, edit unix/mpconfigport.mk file, which has inline descriptions of the options. For example, to build SSL module (required for upip tool described above), set MICROPY_PY_USSL to 1. In unix/mpconfigport.mk, you can also disable some dependencies enabled by default, like FFI support, which requires libffi development files to be installed. The STM version The ""stmhal"" port requires an ARM compiler, arm-none-eabi-gcc, and associated bin-utils. For those using Arch Linux, you need arm-none-eabi-binutils and arm-none-eabi-gcc packages. Otherwise, try here: https://launchpad.net/gcc-arm-embedded To build: $ cd stmhal $ make  You then need to get your board into DFU mode. On the pyboard, connect the 3V3 pin to the P1/DFU pin with a wire (on PYBv1.0 they are next to each other on the bottom left of the board, second row from the bottom). Then to flash the code via USB DFU to your device: $ make deploy  This will use the included tools/pydfu.py script. If flashing the firmware does not work it may be because you don't have the correct permissions, and need to use sudo make deploy. See the README.md file in the stmhal/ directory for further details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/micropython/micropython"	"Aims to put an implementation of Python 3.x on a microcontroller. [MIT]"	"true"
"Virtual Machines"	"TinyVM"	"https://github.com/jakogut/tinyvm"	"A small, fast, lightweight virtual machine written in pure ANSI C. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1010"	"66"	"105"	"GitHub - jakogut/tinyvm: TinyVM is a small, fast, lightweight virtual machine written in pure ANSI C. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 66 Star 1,010 Fork 105 jakogut/tinyvm Code Issues 0 Pull requests 0 Pulse Graphs TinyVM is a small, fast, lightweight virtual machine written in pure ANSI C. 206 commits 1 branch 1 release Fetching contributors C 92.9% Makefile 4.9% Assembly 2.2% C Makefile Assembly Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0 Nothing to show New pull request Latest commit a4c540f Feb 21, 2015 jakogut Merge pull request #30 from ryanpcmcquen/patch-1 … Remove trailing slash from INSTALL_PREFIX Permalink Failed to load latest commit information. bin Updated .gitignore Sep 4, 2011 include/tvm Changed default CC to Clang Jun 8, 2014 lib Updated .gitignore Sep 4, 2011 libtvm no need for gotos... Aug 1, 2014 programs Substitute defines with their strings. Jan 12, 2014 src Created src directory Nov 15, 2011 tdb Patch tdb to compile with the new Makefile and gcc 4.6.3 Jan 28, 2013 .gitignore Updated .gitignore Sep 4, 2011 GNUmakefile Remove trailing slash from INSTALL_PREFIX Feb 21, 2015 LICENSE Create LICENSE Jan 15, 2013 README Added contact information to README Mar 24, 2014 SYNTAX Add preprocessor directives to the SYNTAX file. Jan 13, 2014 TODO Merge branch 'master' of https://github.com/jakogut/tinyvm Jun 8, 2014 README TinyVM is a virtual machine with the goal of having a small footprint. Low memory usage, a small amount of code, and a small binary.  Building can be accomplished on UNIX-like systems with make and GCC.  There are no external dependencies, save the C standard library.  Building can be accomplished using ""make,"" or ""make rebuild"".  To build a debug version, add ""DEBUG=yes"" after ""make"". To build a binary with profiling enabled, add ""PROFILE=yes"" after ""make"".  I can be reached at ""joseph.kogut(at)gmail.com""  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jakogut/tinyvm"	"A small, fast, lightweight virtual machine written in pure ANSI C. [MIT]"	"true"
"Web Application Framework"	"Civetweb"	"https://github.com/civetweb/civetweb"	"Provides easy to use, powerful, C/C++ embeddable web server with optional CGI, SSL and Lua support. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"393"	"55"	"223"	"GitHub - civetweb/civetweb: Embedded C/C++ web server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 393 Fork 223 civetweb/civetweb Code Issues 21 Pull requests 1 Pulse Graphs Embedded C/C++ web server 3,072 commits 1 branch 8 releases 86 contributors C 74.1% Lua 5.3% Batchfile 5.1% CMake 4.5% HTML 3.2% C++ 3.2% Other 4.6% C Lua Batchfile CMake HTML C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.8 v1.7 v1.6 v1.5 v1.4 v1.3 v1.2 v1.1 Nothing to show New pull request Latest commit a7f49cc Jul 15, 2016 bel2125 Use OS independent atomic function instead of Windows specific Permalink Failed to load latest commit information. Qt Enable IPV6 and WEBSOCKET in Qt build Dec 8, 2015 VisualStudio Correct debug/release setting in VisualStudio build May 30, 2016 ci move travis tests to ci/ from test/ci_tests May 2, 2015 cmake Update libcheck to 0.10.0, and add a patch for osx Mar 27, 2016 contrib/buildroot Update version number May 29, 2016 distribution/arch Update repository link: bel2125/civetweb --> civetweb/civetweb Aug 11, 2015 docs Update UserManual.md May 29, 2016 examples Remove windows specific code from example Jun 24, 2016 include Update version number May 29, 2016 resources Add a helper script to test MinGW builds locally (to help debugging t… Apr 16, 2016 src Use OS independent atomic function instead of Windows specific Jul 15, 2016 test Use CMAKE_BUILD_TYPE instead of hard coded ""Release"" Jun 25, 2016 .clang-format Modify clang-format according to #207 (see comment) Oct 5, 2015 .gitattributes Add manual language settings for github syntax highlighting Mar 24, 2016 .gitignore Ignore cscope and ctags 'database' files Mar 23, 2016 .travis.yml Add travis build for making the OS X package May 29, 2016 CMakeLists.txt Merge pull request #298 from c-mauderer/no-timegm May 5, 2016 CREDITS.md Add some replacement functions for WinCE Jun 5, 2016 LICENSE.md Experimental support for duktape (Step 2/?) Sep 21, 2015 Makefile Change to option for building without caching. May 2, 2016 Makefile.deprecated Update Lua to 5.2.3 Jul 30, 2014 Makefile.osx Change OS X package from dmg to zip file to fix hdiutil errors in Travis May 29, 2016 README.md The AppVeyor build for CivetWeb works now May 27, 2016 RELEASE_NOTES.md Update version number May 29, 2016 appveyor.yml try to fix a curious appveyor build failure that suddenly occured wit… Jun 24, 2016 build Build script for Unix systems Jul 9, 2015 build.cmd Fix up log_append in MinGW download script Jul 14, 2015 format.bat Alternative to mg_upload (Step 5/?) Jan 10, 2016 mingw.cmd Add powershell output to MinGW script log Jul 14, 2015 README.md CivetWeb The official home of CivetWeb is https://github.com/civetweb/civetweb Continuous integration for Linux and OSX (Travis CI): Continuous integration for Windows (AppVeyor): Test coverage check (coveralls) (currently in a setup phase): Static source code analysis (Coverity): Project Mission Project mission is to provide easy to use, powerful, C/C++ embeddable web server with optional CGI, SSL and Lua support. CivetWeb has a MIT license so you can innovate without restrictions. CivetWeb can be used by developers as a library, to add web server functionality to an existing application. It can also be used by end users as a stand-alone web server. It is available as single executable, no installation is required. Where to find the official version? End users can download CivetWeb at SourceForge https://sourceforge.net/projects/civetweb/ Developers can contribute to CivetWeb via GitHub https://github.com/civetweb/civetweb Trouble tickets should be filed on GitHub https://github.com/civetweb/civetweb/issues Discussion/support group and announcements are at Google Groups https://groups.google.com/d/forum/civetweb Quick start documentation docs/Installing.md - Install Guide (for end users using pre-built binaries) docs/UserManual.md - End User Guide docs/Building.md - Building the Server (quick start guide) docs/Embedding.md - Embedding (how to add HTTP support to an existing application) docs/OpenSSL.md - Adding HTTPS (SSL/TLS) support using OpenSSL. RELEASE_NOTES.md - Release Notes LICENSE.md - Copyright License Overview CivetWeb keeps the balance between functionality and simplicity by a carefully selected list of features: Liberal, commercial-friendly, permissive, MIT license Free from copy-left licenses, like GPL, because you should innovate without restrictions. Forked from Mongoose in 2013, before it changed the licence from MIT to commercial + GPL. A lot of enchancements have been added since that time, see RELEASE_NOTES.md. Works on Windows, Mac, Linux, UNIX, iPhone, Android, Buildroot, and many other platforms. Scripting and database support (Lua scipts, Lua Server Pages, CGI + SQLite database, Server side javascript). This provides a ready to go, powerful web development platform in a one single-click executable with no dependencies. Support for CGI, HTTPS (SSL/TLS), SSI, HTTP digest (MD5) authorization, Websocket, WEbDAV. Optional support for authentication using client side X.509 certificates. Resumed download, URL rewrite, file blacklist, IP-based ACL, Windows service. Download speed limit based on client subnet or URI pattern. Simple and clean embedding API. The source is in single file to make things easy. Embedding examples included. HTTP client capable of sending arbitrary HTTP/HTTPS requests. Websocket client functionality available (WS/WSS). Optionally included software Support This project is very easy to install and use. Please read the documentation and have a look at the examples. More information may be found on the mailing list. Contributions Contributions are welcome provided all contributions carry the MIT license. DO NOT APPLY fixes copied from Mongoose to this project to prevent GPL tainting. Since 2013 CivetWeb and Mongoose are developed independently. By now the code base differs, so patches cannot be safely transfered in either direction. Some guidelines can be found in docs/Contribution.md. Authors CivetWeb is based on the Mongoose project. The original author of Mongoose was Sergey Lyubka (Copyright (c) 2004-2013 Sergey Lyubka, MIT license). However, in August 16, 2013, the license of Mongoose has been changed after writing and distributing the original code this project is based on. The license change used to be described on the Mongoose Wikipedia page as well, but it's getting deleted there regularly. CivetWeb has been forked from the last MIT version of Mongoose. Since 2013, CivetWeb has seen many improvements from various authors (Copyright (c) 2013-2016 the CivetWeb developers, MIT license). A list of authors can be found in CREDITS.md. Using the CivetWeb project ensures the MIT licenses terms are applied and GPL cannot be imposed on any of this code as long as it is sourced from here. This code will remain free with the MIT license protection. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/civetweb/civetweb"	"Provides easy to use, powerful, C/C++ embeddable web server with optional CGI, SSL and Lua support. [MIT]"	"true"
"Web Application Framework"	"CppCMS"	"http://cppcms.com/"	"A Free High Performance Web Development Framework (not a CMS). [LGPLv3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CppCMS — High Performance C++  Web Framework CppCMS — The C++ Web Development Framework Main  /  Edit  /  History  /   /  Users Area CppCMS — High Performance C++ Web Framework What is CppCMS? CppCMS is a Free High Performance Web Development Framework (not a CMS) aimed at Rapid Web Application Development. It differs from most other web development frameworks like: Python Django, Java Servlets in the following ways: It is designed and tuned to handle extremely high loads. It uses modern C++ as the primary development language in order to achieve the first goal. It is designed for developing both Web Sites and Web Services. It is available under open source LGPLv3 license and alternative Commercial License for users who needs an alternative license for proprietary software development. See ""Rationale"" for further explanations. General FAQ Rationale Behind CppCMS Case Study: CppCMS Benchmarks Developers When to Use Who Uses CppCMS Road Map to Future Secure Programming with CppCMS Downloads Repositories How to Contribute Project Logo Framework Documentation CppCMS 1.x.x - Stable CppCMS 0.0.x - Old Stable (deprecated) About the CppCMS versioning scheme SQL Connectivity SQL Connectivity CppCMS Based Applications Wikipp - High Performance Wiki Engine CppBlog - High Performance Blog Engine About CppCMS is a web development framework for performance demanding applications. Commercial CppCMS is available under Open Source and Commercial Licenses. For more details, visit our website: commercial.cppcms.com Support This Project Navigation Index Changes Main Page English Русский עברית Project SF Project Page Development Blog Downloads Browse Mailing List Join Mailing List Bugs Browse SVN Using this Wiki Editing Pages SandBox Translations עברית Русский Valid CSS | Valid XHTML 1.0 The content of this wiki is available under GFDL | Template design based on Contented Designs Contact"	"null"	"null"	"A Free High Performance Web Development Framework (not a CMS). [LGPLv3]"	"true"
"Web Application Framework"	"Crow"	"https://github.com/ipkn/crow"	"Crow is C++ micro web framework (inspired by Python Flask). [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2296"	"191"	"239"	"GitHub - ipkn/crow: Crow is very fast and easy to use C++ micro web framework (inspired by Python Flask) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 191 Star 2,296 Fork 239 ipkn/crow Code Issues 49 Pull requests 10 Wiki Pulse Graphs Crow is very fast and easy to use C++ micro web framework (inspired by Python Flask) 237 commits 1 branch 0 releases 20 contributors C++ 85.3% C 13.5% Other 1.2% C++ C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit da4bb3a May 23, 2016 ipkn update amalgamate Permalink Failed to load latest commit information. amalgamate update amalgamate May 23, 2016 cmake tcmalloc linking added Aug 14, 2014 examples implement HTTPS support Sep 20, 2015 include fix warning (initializing order of bind_addr_) May 23, 2016 tests Bind to interface support: fixed unittest Mar 19, 2016 .gitignore Added support to bind to a specific interface Mar 14, 2016 .gitmodules Removed http-parser submodule Oct 15, 2014 .travis.yml Use the new travis container architecture Sep 4, 2015 CMakeLists.txt Add working example for VS2013 and update CMakeList.txt Feb 21, 2015 LICENSE Update LICENSE Apr 20, 2014 README.md Update README.md Dec 16, 2015 README.md Crow is C++ microframework for web. (inspired by Python Flask) #include ""crow.h""  int main() {     crow::SimpleApp app;      CROW_ROUTE(app, ""/"")([](){         return ""Hello world"";     });      app.port(18080).multithreaded().run(); } Features Easy routing Similiar to Flask Type-safe Handlers (see Example) Very Fast More data on crow-benchmark Fast built-in JSON parser (crow::json) Mustache based templating library (crow::mustache) Header only Provide an amalgamated header file `crow_all.h' with every features Middleware support Still in development Built-in ORM Check sqlpp11 if you want one. Examples JSON Response CROW_ROUTE(app, ""/json"") ([]{     crow::json::wvalue x;     x[""message""] = ""Hello, World!"";     return x; }); Arguments CROW_ROUTE(app,""/hello/<int>"") ([](int count){     if (count > 100)         return crow::response(400);     std::ostringstream os;     os << count << "" bottles of beer!"";     return crow::response(os.str()); }); Handler arguments type check at compile time // Compile error with message ""Handler type is mismatched with URL paramters"" CROW_ROUTE(app,""/another/<int>"") ([](int a, int b){     return crow::response(500); }); Handling JSON Requests CROW_ROUTE(app, ""/add_json"") .methods(""POST""_method) ([](const crow::request& req){     auto x = crow::json::load(req.body);     if (!x)         return crow::response(400);     int sum = x[""a""].i()+x[""b""].i();     std::ostringstream os;     os << sum;     return crow::response{os.str()}; }); How to Build If you just want to use crow, copy amalgamate/crow_all.h and include it. Requirements C++ compiler with good C++11 support (tested with g++>=4.8) boost library CMake for build examples Linking with tcmalloc/jemalloc is recommended for speed. Now supporting VS2013 with limited functionality (only run-time check for url is available.) Building (Tests, Examples) Out-of-source build with CMake is recommended. mkdir build cd build cmake .. make  You can run tests with following commands: ctest  Installing missing dependencies Ubuntu sudo apt-get install build-essential libtcmalloc-minimal4 && sudo ln -s /usr/lib/libtcmalloc_minimal.so.4 /usr/lib/libtcmalloc_minimal.so  OSX brew install boost google-perftools  Attributions Crow uses the following libraries. qs_parse  https://github.com/bartgrantham/qs_parse  Copyright (c) 2010 Bart Grantham Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ipkn/crow"	"Crow is C++ micro web framework (inspired by Python Flask). [BSD]"	"true"
"Web Application Framework"	"Kore"	"https://kore.io/"	"ultra fast and flexible web server / framework for web applications developed in C. [ISC]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"KORE.io - An easy to use web application framework for C Toggle navigation About Downloads License Documentation Kore is an easy to use web application framework for writing scalable web APIs in C. Its main goals are security, scalability and allowing rapid development and deployment of such APIs. Because of this Kore is an ideal candidate for building robust, scalable and secure web things. Get the source View features Getting started Kore makes it easy to get started without having to fiddle with build frameworks such as make. Using the builtin commands you can create, compile and run Kore applications. However if you prefer building Makefiles and linking the libraries together yourself, go for it. $ kore create myapp $ cd myapp $ kore run compiling myapp.c myapp built succesfully! [parent]: running on https://127.0.0.1:8888 [parent]: kore is starting up [wrk 0]: worker 0 started (cpu#0)  Hello world Kore exposes an easy to use API to build your applications. Below is an example of how simple it is to get going with writing web applications in C. The code will respond to all requests with an ""Hello world"" response. #include <kore/kore.h> #include <kore/http.h>  int	page(struct http_request *);  int page(struct http_request *req) {     http_response(req, 200, ""Hello world"", 11);     return (KORE_RESULT_OK); } View documentation Copyright © 2013-2016 Joris Vink"	"null"	"null"	"ultra fast and flexible web server / framework for web applications developed in C. [ISC]"	"true"
"Web Application Framework"	"libOnion"	"http://www.coralbits.com/libonion/"	"lightweight library to help you create webservers in C programming language. [LGPLv3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1058"	"72"	"127"	"GitHub - davidmoreno/onion: C library to create simple HTTP servers and Web Applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 1,058 Fork 127 davidmoreno/onion Code Issues 18 Pull requests 0 Wiki Pulse Graphs C library to create simple HTTP servers and Web Applications. http://www.coralbits.com/libonion/ 1,085 commits 13 branches 11 releases 23 contributors C 74.2% C++ 19.8% CMake 3.6% Scilab 1.2% Other 1.2% C C++ CMake Scilab Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bstarynk-master darwin docs fixtimeouts freebsd manpages master nomalloc onion-0-8 parser-ng python stable timerpoller Nothing to show v0.8 v0.7 v0.5 v0.4 v0.3 v0.2 0.7 0.5 0.4 0.3 0.2 Nothing to show New pull request Latest commit 5026256 Jun 23, 2016 davidmoreno Fix #186. Do not declare variable at for statement. Permalink Failed to load latest commit information. debian Updated debian package version to 0.8. May 4, 2016 examples add closing button to websocket example Jun 10, 2016 gentoo Add Redis support to the gentoo ebuild. Dec 31, 2015 manpages Wording fixes. Apr 24, 2016 src indent with tabs rather than spaces Jun 22, 2016 tests Fix #186. Do not declare variable at for statement. Jun 23, 2016 toolchain refreshed gentoo ebuild, cosmetics in bin, lib, include install dirs Feb 5, 2014 tools Fix a memory leak found in otemplate. Mar 15, 2016 .gitignore Updated gitignore Apr 16, 2016 .travis.yml removing dist:trusty from travis.yml Jun 15, 2016 AGPL.txt License changed for the library to LGPL. Examples and tests remain AGPL. Jul 4, 2011 APACHE2.txt Updated license on the library source code to Apache2 + GPLv2+. Examp… Feb 9, 2014 CMakeLists.txt Added -D_ISOC99_SOURCE to allow use of clock_gettime on older browsers. May 28, 2016 CPackConfig.cmake Fixed build, changed README.rst to README.md at cpack. Dec 27, 2014 Doxyfile Added doxygen groups for documentation. Only document C bindings. Apr 29, 2016 GPLv2.txt Update C++ bindings, adding easy way to compose urls, just using the … Feb 19, 2014 LICENSE.txt Fixed where documentation says its only GPLv2, as it is GPLv2+. May 15, 2014 README.md Removed analytics from README. May 4, 2016 git-version-gen Git version gen looks for all tags, not just annotated May 4, 2016 README.md Onion http server library Travis status Coverity status Onion is a C library to create simple HTTP servers and Web Applications. master the development branch. Current stable branch is onion-0-8. Introduction The use case is an existing application, or a new one, that needs some HTTP interconnection with the world. It uses the library to add some handlers for specific URLs and generate and serve the dynamic data as needed. It also has security goals (SSL support) so that you just concentrate on what you want to serve, and serve it. Its not a web server per se, as it is not an executable. If you want to compare to a web server, a web server would use a module or plugin to add some functionality. With libonion you have the functionality and add the webserver as a plugin. There is a wiki available at https://github.com/davidmoreno/onion/wiki, with useful information on how to get started using Onion and it's internal workings. API documentation is at http://coralbits.com/static/onion/. There is a mailing list at https://groups.google.com/a/coralbits.com/forum/?fromgroups=#!forum/onion-dev Collaborate! You can, and are encouraged, to branch at github, download and tweak onion to use it in your projects. The library is dual licensed under the Apache2 license and GPLv2+, so you can make almost anything with it, use it in your commercial and free software programs, and modify it to your needs. Please join the mailing list at https://groups.google.com/a/coralbits.com/group/onion-dev/topics, to ask your questions and comment on your success using onion. There is also a blog to keep everybody informed about news on onion at http://blog.coralbits.com/. Download There are third party packages available: RPM based: http://software.opensuse.org/download.html?project=home%3Admoreno&package=onion Raspberry pi: http://packages.aisoy.com/debian/pool/unstable/libo/libonion/ Arch Linux: https://aur.archlinux.org/packages/libonion-git/ If you know of any other packaged version, please send me a note. As always they may be outdated, if you want the latest and greatest, do a manual compile and install. Thanks to Ruediger Meier for helping for so long with the RPM packages. Compile and Install Manual compile and install:      $ git clone git@github.com:davidmoreno/onion.git      $ cd onion      $ mkdir build      $ cd build      $ cmake ..      $ make      $ sudo make install To compile with debugging enabled, use     $ cmake -DCMAKE_BUILD_TYPE=Debug .. To run with some debug messages, set the ONION_DEBUG and/or ONION_DEBUG0 environment variable containing some source file names, e.g.     $ export ONION_DEBUG0='request.c url.c' Dependencies Required: C compiler cmake make This compilers and minimum versions are known to work: Linux: GCC 4.4 clang 3.0 For the C++ bindings a C++11 compiler is needed: Linux: GCC 4.8 clang 3.7 Optional; Onion will compile but some functionality will not be available: gnutls and gcrypt (SSL support) pthreads (threading support) libxml2 (WebDAV support) libpam (HTTP Basic Auth support using PAM) C++ compiler Systemd (support for listening on systemd sockets) sqlite3 (sqlite3 session backend) hiredis (Redis session backend) Optional for examples: cairo libpng2 boehm gc libjpeg Semantic versioning. Starting with Onion 0.8.0, we use semantic versioning, making the following promises: Version format is [MAJOR].[MINOR].[PATCH]. Only make API and ABI changes at major versions. Can add functionalities at minor releases. Only remove API functions at major versions. No changes in semantics never. Minor versions are always ABI back-compatible. This means that if you compiled with a previous minor version and same major version, it will still compile and work. Only add API functions at minor versions. Only fix patches a patch revisions. Patch revisions are is a non sequential number, so after 0.8.0 is not 0.8.1, but maybe 0.8.23. It will always increase. Check onion/version.h for more information on version control. SSL Support If at compile time the build script finds the gnutls libraries, SSL support will be compiled in. It can be deactivated anyway at ./CMakeLists.txt. To use it you have to set the certificates, and you can check if its on, checking the flag O_SSL_ACTIVATED. If support is not compiled in, then the library will not use SSL, but for the user of the library the interface is the same; it will only change that when trying to set the certificates it will fail. Anwyay for clients its just to use the interface and they dont care at all if suport is in or not. No more than being able to use SSL. This is not mandatory because there may be moments when the program's users do not want to support SSL for whatever reasons, for example speed. Threads support Currently there are two threading modes. It can be set so the server is created as threaded (O_THREADED), and it will create a new thread per connection. There is no data protection as on the listen phase there should not be any change to onion structures. Nevertheless if new handlers are created they must set their own threading support as neccesary. It can be deactivated at CMakeLists.txt. If no pthreads lib is found on the system, it is not compiled in. Also when thread support is on, onion server can be set to work on another (non-main) thread. This is independant from O_THREADED operation; it can have one thread with your normal application and another thread that listens and processes web-requests. Its set with the O_DETACH_LISTEN flag. This is very useful when adding an extra web server to your application so it can be added without changes to the flow of your application, but you will need to thread protect your data if you access to it from the web server. Finally there is a pool mode. Users can set a default number of threads (onion_set_max_threads), and using epoll the data is given to the threads. This is the highest performant method, with up to 30k web-requests served on a Intel(R) Core(TM)2 Duo CPU T6500 @2.10GHz. Customizing low-level allocation and threads Sometimes it may be needed to customize memory allocation and/or threads operation. This could be useful when using an alternative malloc, or if you wanted to use Hans Boehm's conservative garbage collector from http://www.hboehm.info/gc/ e.g. if you use GNU guile. Then you need to define your own memory routines and pass them to onion_low_initialize_memory_allocation before any other calls to onion. Likewise, to customize threads operations, call onion_low_initialize_threads. See comments in header file low.h. A program using Onion and Boehm's GC should first define a memory failure routine which should never return:     /* the memory failure routine should never return! */     static void memory_failure(const char*msg) {       perror(msg);       exit(EXIT_FAILURE);     }; Then, your program (using both onion and Boehm's GC) should initialize both memory routines and threads, like:     onion_low_initialize_memory_allocation       (GC_malloc,  GC_malloc_atomic,  GC_calloc,        GC_realloc, GC_strdup, GC_free,        memory_failure);     onion_low_initialize_threads       (GC_pthread_create, GC_pthread_join,        GC_pthread_cancel, GC_pthread_detach,        GC_pthread_exit, GC_pthread_sigmask); You might need to define your GC_calloc using GC_malloc and memset if your version of Boehm's GC don't provide it. After these low-level initialization you can use Onion as usual. You could also want to call just onion_low_initialize_threads if you wanted to name threads created by the onion library (using pthread_setname_np on Linux) and/or change their priority (using pthread_setschedprio), etc. ARM Support It can be cross compiled for ARM directly from cmake. Just do:     $ mkdir arm     $ cd arm     $ cmake .. -DCMAKE_TOOLCHAIN_FILE=../toolchain/arm.txt     $ make It needs the current system opack and otemplate to compile some examples, so if you want to use the examples on your instalation, compile and install libonion for the current system first. Tested on ubuntu 10.10, with gcc-4.5-arm-linux-gnueabi and g++-4.5-arm-linux-gnueabi installed. Templating support Starting on 0.3.0 development onion has templating support via otemplate. It is a template system similar to django templates (http://docs.djangoproject.com/en/dev/topics/templates/). Check more information on how to use them at tools/otemplate/README.rst. I18N There is I18N support. Check wiki for details or fileserver_otemplate example. Systemd Systemd is integrated. If want to use it, just pass the flag O_SYSTEMD to the onion_new(). Oterm has example socket and service files for oterm support. FreeBSD/Darwin Since september 2013 there is support for FreeBSD using libev or libevent. This work is not as tested as the Linux version, but if some compilation error arises, please send the bug report and we will fix it ASAP. OSX/Darwin support is also available on the darwin branch. Once this work stabilizes it will be merged back to master. Environment variables You can set the following environment variables -e.g. with the export builtin of bash- to modify runtime behaviour of onion: ONION_LOG noinfo -- Disables all info output to the console, to achieve faster results nocolor -- Disable color use by the log nodebug -- Do not show debug lines syslog -- Log to syslog. Can be changed programatically too, with the onion_log global function. ONION_DEBUG0 -- Set the filename of a c source file, and DEBUG0 log messages are written. This is normally very verbose. ONION_SENDFILE -- Set to 0 do disable sendfile. Under some file systems it does not work. Until a detection code is in place, it can be disabled with this. Binary compatibility breaks We try hard to keep binary compatibility, but sometimes its hard. Here is a list of ABI breaks: 0.4.0 Onion object private flags have moved. If on your code you rely on them, must recompile. If dont rely on them, everything should keep working. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/davidmoreno/onion"	"lightweight library to help you create webservers in C programming language. [LGPLv3]"	"true"
"Web Application Framework"	"QDjango"	"https://github.com/jlaine/qdjango/"	"A web framework written in C++ and built on top of the Qt library. Where possible it tries to follow django's API, hence its name. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"99"	"22"	"42"	"GitHub - jlaine/qdjango: QDjango, a Qt-based C++ web framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 99 Fork 42 jlaine/qdjango Code Issues 8 Pull requests 8 Pulse Graphs QDjango, a Qt-based C++ web framework 444 commits 1 branch 9 releases 3 contributors C++ 97.7% QMake 1.7% Shell 0.3% C 0.3% HTML 0.0% CSS 0.0% C++ QMake Shell C HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.6.2 v0.6.1 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.6 v0.2.5 v0.2.0 Nothing to show New pull request Latest commit 127dba9 Jun 21, 2016 jlaine committed on GitHub Merge pull request #53 from mwallnoefer/master … Move Q_DECLARE_METATYPE to fix build failure Permalink Failed to load latest commit information. doc Remove support for QtScript (closes #44) Aug 12, 2015 examples Remove support for QtScript (closes #44) Aug 12, 2015 src make sure HTTP dates are handled using C locale Oct 22, 2015 tests tst_qdjangocompiler.cpp - QDjangoWhere not registered to Qt's meta-ob… May 10, 2016 .travis.yml enable APT cache for travis Sep 13, 2014 AUTHORS Initial code import. Mar 23, 2012 ChangeLog bump version to 0.6.2 Oct 22, 2015 LICENSE.LGPL add LICENSE.LGPL and convert README to markdown Nov 13, 2013 README.md Remove support for QtScript (closes #44) Aug 12, 2015 qdjango.pri bump version to 0.6.2 Oct 22, 2015 qdjango.pro don't install html docs on android Sep 14, 2012 README.md QDjango - a Qt-based C++ web framework Copyright (c) 2010-2015 Jeremy Lainé About QDjango is a web framework written in C++ and built on top of the Qt library. Where possible it tries to follow django's API, hence its name. It is released under the terms of the GNU Lesser General Public License, version 2.1 or later. To learn more about QDjango, please read the online documentation. Requirements QDjango builds and is auto-tested both with Qt 4 and Qt 5. Qt 4 on Debian: sudo apt-get install libqt4-dev  Qt 5 on Debian: sudo apt-get install qtbase5-dev  Qt 4 on Mac OS X: sudo port install qt4-mac  Building QDjango mkdir build cd build qmake .. make  You can pass the following arguments to qmake: PREFIX=<prefix>                 to change the install prefix                                 default:                                     unix:  /usr/local on unix                                     other: $$[QT_INSTALL_PREFIX] QDJANGO_LIBRARY_TYPE=staticlib  to build a static version of QDjango  Mailing list If you wish to discuss QDjango, you are welcome to join the QDjango group. Notes MSSQL Fast forward cursors are used by default. This greatly improves performance, and has the added benefit of implicitly converting to a static cursor when it needs to. Unfortunately, this also means that these cursors can block a connection to the server. In order to deal properly with this situation, there are a few requirements: Connection pooling must be enabled in your ODBC manager You must enable Multiple Active Result Sets in the QODBC driver using ""MARS_Connection=Yes"" in the connection string You must enable connection pooling in the QODBC driver using the ""SQL_ATTR_CONNECTION_POOLING"" attribute Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jlaine/qdjango/"	"A web framework written in C++ and built on top of the Qt library. Where possible it tries to follow django's API, hence its name. [LGPL]"	"true"
"Web Application Framework"	"Wt"	"http://www.webtoolkit.eu/wt"	"A C++ library for developing web applications. [GPL/Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Wt, C++ Web Toolkit English- 中文 (Chinese)- Русский (Russian) Introduction Blog Features Documentation Examples Download Support !C++ Wt: an introduction Wt (pronounced as witty) is a C++ library for developing web applications. The API is widget-centric and uses well-tested patterns of desktop GUI development tailored to the web. To the developer, it offers abstraction of many web-specific implementation details, including client-server protocols (HTTP, Ajax, WebSockets), and frees the developer from tedious JavaScript manipulations of HTML and dealing with cross-browser issues. Instead, with Wt, you can focus on actual functionality with a rich set of feature-complete widgets. Unlike old-school page-based frameworks or current-day single-page JavaScript ""frameworks"", Wt allows you to create stateful applications that are at the same time highly interactive (using WebSockets and Ajax for everything) but still support plain HTML browsers or web crawlers using automatic graceful degradation or progressive enhancement. Things that are natural and simple with Wt would require an impractical amount of development effort otherwise: switching widgets using animations, while retaining clean URLs and browser navigation functions, or having a persistent chat widget open throughout the entire application, that even works in legacy browsers like Microsoft Internet Explorer 6. The library comes with an application server that acts as a stand-alone Http(s)/WebSocket server or integrates through FastCGI with other web servers. Feature rich Layout using HTML templates or intelligent layout managers and themable look-and-feel, including support for Twitter Bootstrap versions 2 or 3. Create and maintain complexity by using and building reusable and self-contained widgets. Comes with a large set of feature-rich widgets that include form widgets, table and tree views, dialogs, popup menu's, etc... Unified graphics APIs, 2D (SVG, HTML5 Canvas, VML, PNG, and PDF) & 3D (client side WebGL and server-side OpenGL). Feature rich HTML to PDF renderer for dynamic report generation. Elegant template-based C++ Database abstraction layer (Wt::Dbo) Built-in security against common vulnerabiliets such as XSS(Cross-Site-Scripting) or CSRF (Cross-Site Request Forgery) Typical use scenarios: High performance, complex web applications which are fully personalized (and thus cannot benefit from caching), fully Ajax enabled and at the same time entirely accessible and Search Engine Optimized. Web-based GUIs for embedded systems benefit from the low footprint of a C++ web application server. Web-based GUIs that require integration with (existing) C++ libraries, for example for scientific or engineering applications, or existing C++ desktop applications. Solutions for web-based systems www.emweb.be Home | Contact"	"null"	"null"	"A C++ library for developing web applications. [GPL/Commercial]"	"true"
"XML"	"Expat"	"http://www.libexpat.org/"	"An XML parser library written in C. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Expat XML Parser The Expat XML Parser Expat is an XML parser library written in C. It is a stream-oriented parser in which an application registers handlers for things the parser might find in the XML document (like start tags). An introductory article on using Expat is available on xml.com. Expat project page (includes downloads) Mailing lists 3rd-party wrappers (SAX, DOM, other language bindings) CVS repository (browse online) Bug reports Notes for Expat maintainers This project aims to maintain Expat for both current and future users while improving the API to allow more reliable and robust access from ""scripting"" languages such as Python and Perl. We invite the community to participate on the mailing lists to help shape the future of Expat. News 24 March 2012, Expat 2.1.0 released. Release 2.1.0 includes security & other bug fixes, new features, and updated build support. Security fixes Memory leak in poolGrow (CVE-2012-1148) Resource leak in readfilemap.c (CVE-2012-1147) Hash DOS attack (CVE-2012-0876) Buffer over-read and crash in big2_toUtf8 (CVE-2009-3560) Parser crash with special UTF-8 sequences (CVE-2009-3270) New features Added function XML_SetHashSalt that allows setting an initial value (salt) for hash calculations (part of the fix for bug 3496608). When compiled with XML_ATTR_INFO defined, adds new API member XML_GetAttributeInfo() that allows retrieving the byte offsets for attribute names and values (patch 3446384). Added CMake build system (bug 2990652, patch 3312568). Added run-benchmark target to Makefile.in - relies on testdata module present in the same relative location as in the repository. Bug fixes Harmful XML_ParserCreateNS suggestion (1742315) CVE-2012-1147 - Resource leak in readfilemap.c (2895533) Expat build fails on linux-amd64 with gcc version>=4.1 -O3 (1785430) Build modifications using autoreconf instead of buildconf.sh (1983953, 2517952, 2517962, 2649838) OBJEXT and EXEEXT support while building (2815947, 2884086) CVE-2009-3720 - Parser crash with special UTF-8 sequences (1990430) xmlwf should return non-zero exit status if not well-formed (2517938) Wrong statement about XMLDecl in xmlwf.1 and xmlwf.sgml (2517946) Dangling positionPtr after error (2855609) CVE-2009-3560 - Buffer over-read and crash in big2_toUtf8() (2894085) CVE-2012-1148 - Memory leak in poolGrow (2958794) UNEXPECTED_STATE with a trailing ""%"" in entity value (3010819) Unitialized memory returned from XML_Parse (3206497) make check fails on mingw-w64 (87849) 5 June 2007, Expat 2.0.1 released. Release 2.0.1 of the Expat XML parser is a bugfix release resolving both code and build related issues. Changes include: Fixed: The character data handler's calling of XML_StopParser() was not handled properly; if the parser was stopped and the handler set to NULL, the parser would segfault. Fixed: Expat failed on EBCDIC systems as it assumed some character constants to be ASCII encoded. Minor cleanups of the test harness. Minor fixes for xmlwf and example programs. Fixes and improvements for the Windows platform. New Windows directory structure. Build fixes for various platforms: HP-UX, Tru64, Solaris 9. Build fixes for Unix: - Refreshed config.sub/config.guess. - Support both, DESTDIR and INSTALL_ROOT, without relying on GNU-Make specific features. - Patched configure.in to work better with Intel compiler. - Fixes to Makefile.in to have make check work correctly. Added Open Watcom support. 11 January 2006, Expat 2.0.0 released. Release 2.0.0 of the Expat XML parser is the end point of the 1.95.X series of releases. The goal was to solidify and stabilize the implementation of the given API, to add desirable features as long as they fit with the API, and to keep the API backwards compatible if extensions were required. Changes include: Fixed headers for use from C++. XML_GetCurrentLineNumber() and XML_GetCurrentColumnNumber() now return unsigned integers. Added XML_LARGE_SIZE switch to enable 64-bit integers for byte indexes and line/column numbers. Added support for AmigaOS. Some mostly minor bug fixes. SF issues include: 1006708, 1021776, 1023646, 1114960, 1156398, 1221160, 1271642. Old news archive References & 3rd-party Wrappers If you know of any additional articles or resources which should be linked to from this page, please send email to Fred Drake (fdrake@acm.org). We're especially interested in links to tutorial information and open source interfaces to Expat from languages other than C. James Clark's original Expat page, for Expat 1.2 and earlier Introductory article on using Expat on xml.com LuaExpat is a wrapper around Expat for the Lua programming language. The LuaSOAP library is a SOAP implementation built on top of LuaExpat. Perl's XML::Parser module is a wrapper built around a binding to Expat in the XML::Parser::Expat module. Documentation for the Python interface to Expat, part of the standard documentation for Python. SAXExpat.NET, a .NET wrapper for Expat, conforming to the SAX for .NET specifications. The Simple C Expat Wrapper is a wrapper around Expat that provides a light-weight object model somewhat like a DOM. C++ Wrappers for the Expat XML Parser, an article by Tim Smith providing object-oriented wrappers for Expat. The wrappers use some MFC-biased naming, but look interesting. Arabica -- an XML Parser toolkit for C++ programmers, with SAX2 implementations based on several parsers, including Expat. ExpatMM -- C++ interface to Expat SAX2 Wrapper for using Expat in Delphi, based on ""SAX for Pascal"" interface specs The TclXML project includes a Tcl binding for Expat tDOM is an alternate package providing XML support for Tcl, based in part on Expat. Article on using Expat from PHP on <?PHPBuilder?> (broken into lots of tiny pieces) Objective-C interface to Expat OCaml Expat is a wrapper around Expat for the Objective Caml language. Ruby interface to Expat XML Tools 2 is an AppleScript scripting addition that allows AppleScript applications to work with XML data; it is based on Expat. Simkin is an open source scripting language available under the GNU LGPL. It can be embedded in XML and supports a DOM-like API backed by Expat. EasySoap is a C++ SOAP implementation which uses Expat. A discussion of another way to manage stateful callbacks, using Expat as a sample library. The GOBO project is working on an Eiffel binding for Expat. Development is active and the package is fully supported in GOBO 3.0 and 3.1, though there isn't much status information about the Expat bindings on the website. (Most activity is reportedly on the relevant mailing lists.) Expat4D is a plug-in for the 4th Dimension application framework."	"null"	"null"	"An XML parser library written in C. [MIT]"	"true"
"XML"	"Libxml2"	"http://xmlsoft.org/"	"The XML C parser and toolkit of Gnome. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The XML C parser and toolkit of Gnome The XML C parser and toolkit of Gnome libxml Main Menu Home Reference Manual Introduction FAQ Developer Menu Reporting bugs and getting help How to help Downloads Releases XML XSLT Validation & DTDs Encodings support Catalog support Namespaces Contributions Code Examples API Menu XML Guidelines Recent Changes Related links Mail archive XSLT libxslt DOM gdome2 XML-DSig xmlsec FTP Windows binaries Solaris binaries MacOsX binaries lxml Python bindings Perl bindings C++ bindings PHP bindings Pascal bindings Ruby bindings Tcl bindings Bug Tracker ""Programming with libxml2 is like the thrilling embrace of an exotic stranger."" Mark Pilgrim Libxml2 is the XML C parser and toolkit developed for the Gnome project (but usable outside of the Gnome platform), it is free software available under the MIT License. XML itself is a metalanguage to design markup languages, i.e. text language where semantic and structure are added to the content using extra ""markup"" information enclosed between angle brackets. HTML is the most well-known markup language. Though the library is written in C a variety of language bindings make it available in other environments. Libxml2 is known to be very portable, the library should build and work without serious troubles on a variety of systems (Linux, Unix, Windows, CygWin, MacOS, MacOS X, RISC Os, OS/2, VMS, QNX, MVS, VxWorks, ...) Libxml2 implements a number of existing standards related to markup languages: the XML standard: http://www.w3.org/TR/REC-xml Namespaces in XML: http://www.w3.org/TR/REC-xml-names/ XML Base: http://www.w3.org/TR/xmlbase/ RFC 2396 : Uniform Resource Identifiers http://www.ietf.org/rfc/rfc2396.txt XML Path Language (XPath) 1.0: http://www.w3.org/TR/xpath HTML4 parser: http://www.w3.org/TR/html401/ XML Pointer Language (XPointer) Version 1.0: http://www.w3.org/TR/xptr XML Inclusions (XInclude) Version 1.0: http://www.w3.org/TR/xinclude/ ISO-8859-x encodings, as well as rfc2044 [UTF-8] and rfc2781 [UTF-16] Unicode encodings, and more if using iconv support part of SGML Open Technical Resolution TR9401:1997 XML Catalogs Working Draft 06 August 2001: http://www.oasis-open.org/committees/entity/spec-2001-08-06.html Canonical XML Version 1.0: http://www.w3.org/TR/xml-c14n and the Exclusive XML Canonicalization CR draft http://www.w3.org/TR/xml-exc-c14n Relax NG, ISO/IEC 19757-2:2003, http://www.oasis-open.org/committees/relax-ng/spec-20011203.html W3C XML Schemas Part 2: Datatypes REC 02 May 2001 W3C xml:id Working Draft 7 April 2004 In most cases libxml2 tries to implement the specifications in a relatively strictly compliant way. As of release 2.4.16, libxml2 passed all 1800+ tests from the OASIS XML Tests Suite. To some extent libxml2 provides support for the following additional specifications but doesn't claim to implement them completely: Document Object Model (DOM) http://www.w3.org/TR/DOM-Level-2-Core/ the document model, but it doesn't implement the API itself, gdome2 does this on top of libxml2 RFC 959 : libxml2 implements a basic FTP client code RFC 1945 : HTTP/1.0, again a basic HTTP client code SAX: a SAX2 like interface and a minimal SAX1 implementation compatible with early expat versions A partial implementation of XML Schemas Part 1: Structure is being worked on but it would be far too early to make any conformance statement about it at the moment. Separate documents: the libxslt page providing an implementation of XSLT 1.0 and common extensions like EXSLT for libxml2 the gdome2 page : a standard DOM2 implementation for libxml2 the XMLSec page: an implementation of W3C XML Digital Signature for libxml2 also check the related links section for more related and active projects. Hosting sponsored by Open Source CMS services from AOE media. Logo designed by Marc Liyanage. Daniel Veillard"	"null"	"null"	"The XML C parser and toolkit of Gnome. [MIT]"	"true"
"XML"	"libxml++"	"http://libxmlplusplus.sourceforge.net/"	"An XML Parser for C++. [LGPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"libxml++ libxml++ Introduction libxml++ is a C++ wrapper for the libxml XML parser library. License Libxml++ is released under the LGPL version 2 or above Download You can download libxml++ from here. Required Libraries libxml2 glibmm-2.4 (or a subset of it containing at least Glib::ustring) Documentation The short manual gives an overview of the libxml++ API. You can also browse online the reference documentation. Development Libxml++ uses the GNOME git repository. Bugs and patches are tracked in GNOME's bugzilla. Here is a list of open bugs. Add new bugs here. Contact Please use the libxmlplusplus-list mailing list or bugzilla. Please do not just email the developers directly."	"null"	"null"	"An XML Parser for C++. [LGPL2]"	"true"
"XML"	"PugiXML"	"http://pugixml.org/"	"A light-weight, simple and fast XML parser for C++ with XPath support. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"697"	"89"	"133"	"GitHub - zeux/pugixml: Light-weight, simple and fast XML parser for C++ with XPath support Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 89 Star 697 Fork 133 zeux/pugixml Code Issues 10 Pull requests 0 Pulse Graphs Light-weight, simple and fast XML parser for C++ with XPath support http://pugixml.org/ 1,248 commits 3 branches 9 releases Fetching contributors C++ 98.6% Makefile 0.3% Lua 0.2% CMake 0.2% PowerShell 0.2% Ruby 0.2% Other 0.3% C++ Makefile Lua CMake PowerShell Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags embed-pcdata gh-pages master Nothing to show v1.7 v1.6 v1.5 v1.4 v1.2 v1.0 v0.9 v0.5 latest Nothing to show New pull request Latest commit 1d3befe Jul 10, 2016 zeux Makefile: Add -Wcast-qual … It is probably redundant given that we have -Wold-style-cast, but it's better to warn about casts like this in case we ever need to remove the latter flag. Permalink Failed to load latest commit information. contrib contrib: Fix foreach.hpp for Boost 1.56.0 Sep 27, 2014 docs docs: Add documentation for long setters Feb 2, 2016 scripts Merge pull request #90 from jippeholwerda/master Jun 10, 2016 src Adjust XML allocation pages to have the exact specified size Apr 14, 2016 tests Remove extra space in an empty tag for format_raw Apr 14, 2016 .gitignore Add .gitignore Oct 10, 2015 .travis.yml Specify std=c++11 explicitly in Travis configurations Jan 26, 2016 CMakeLists.txt Only enable cxx_long_long_type if it is in the list of features Jun 18, 2016 Makefile Makefile: Add -Wcast-qual Jul 10, 2016 README.md Update all license/copyright texts to 2016 Dec 31, 2015 appveyor.yml Switch to regular AppVeyor image Jun 10, 2016 readme.txt Update all license/copyright texts to 2016 Dec 31, 2015 README.md pugixml pugixml is a C++ XML processing library, which consists of a DOM-like interface with rich traversal/modification capabilities, an extremely fast XML parser which constructs the DOM tree from an XML file/buffer, and an XPath 1.0 implementation for complex data-driven tree queries. Full Unicode support is also available, with Unicode interface variants and conversions between different Unicode encodings (which happen automatically during parsing/saving). pugixml is used by a lot of projects, both open-source and proprietary, for performance and easy-to-use interface. Documentation Documentation for the current release of pugixml is available on-line as two separate documents: Quick-start guide, that aims to provide enough information to start using the library; Complete reference manual, that describes all features of the library in detail. You’re advised to start with the quick-start guide; however, many important library features are either not described in it at all or only mentioned briefly; if you require more information you should read the complete manual. License This library is available to anybody free of charge, under the terms of MIT License: Copyright (c) 2006-2016 Arseny Kapoulkine Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zeux/pugixml"	"A light-weight, simple and fast XML parser for C++ with XPath support. [MIT]"	"true"
"XML"	"RapidXml"	"http://rapidxml.sourceforge.net/"	"An attempt to create the fastest XML parser possible, while retaining useability, portability and reasonable W3C compatibility. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"RapidXml Home | Manual | License | Downloads RapidXml is an attempt to create the fastest XML parser possible, while retaining useability, portability and reasonable W3C compatibility. It is an in-situ parser written in modern C++, with parsing speed approaching that of strlen function executed on the same data. RapidXml has been around since 2006, and is being used by lots of people. HTC uses it in some of its mobile phones. If you are looking for a stable and fast parser, look no further. Integration with your project will be trivial, because entire library is contained in a single header file, and requires no building or configuration. Current version is RapidXml 1.13. Also available is its online Manual with a full and detailed reference. You may also like to check Boost.PropertyTree library, which presents a higher level interface, and uses RapidXml as its default XML parser. The author of RapidXml is Marcin Kalicinski. Copyright � 2006, 2009 Marcin Kalicinski (kalita at poczta dot onet dot pl)"	"null"	"null"	"An attempt to create the fastest XML parser possible, while retaining useability, portability and reasonable W3C compatibility. [Boost]"	"true"
"XML"	"TinyXML"	"http://sourceforge.net/projects/tinyxml/"	"A simple, small, minimal, C++ XML parser that can be easily integrating into other programs. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"TinyXML download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse Development Software Development TinyXML TinyXML Brought to you by: leethomason Summary Files Reviews Support Wiki Tickets ▾ Patches Bugs Feature Requests News Discussion Git CVS ★ 4.7 Stars (64) 1,407 Downloads (This Week) Last Update: 2015-03-23 Download tinyxml_2_6_2.zip Browse All Files BSD Windows Linux Description TinyXML is a simple, small, minimal, C++ XML parser that can be easily integrating into other programs. It reads XML and creates C++ objects representing the XML document. The objects can be manipulated, changed, and saved again as XML. *Please Note* that TinyXML development has stopped and all development has moved to TinyXML-2. TinyXML-2 is available at https://github.com/leethomason/tinyxml2 TinyXML Web Site Categories Software Development License zlib/libpng License KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 4.7 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 59 1 0 0 4 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 0 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ panel_c 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 easy to learn, for windows, you must translate from and to UTF-8 Posted 07/11/2014 shaul_ei 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Very useful tool to write XML files. Professionally designed and implemented. Documentation is OK but improvement and more examples are required since the number of similar functions is quite vast. The inclusion of handles is a smart move. Use them as much as you can, at least for scanning the DOM. Using std::string is also a good decision. UNICODE will be a welcome addition. Thank you guys for this good product! Posted 06/11/2013 jarvismorris 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Easy install and setup! works great. Posted 05/27/2013 <REDACTED> 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Thanks for great project! Simply the best.Good,good,good.+1 Posted 05/19/2013 <REDACTED> 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 very good project, thanks!Good,good,good.+1 Posted 05/18/2013 Read more reviews Additional Project Details Languages English Intended Audience Developers Programming Language C++ Registered 2000-10-26 Recommended Projects Premake On GitHub now! RapidXml TinyXPath : tiny C++ XPath Deals Top Searches 3d graphics editor c++ boost c xml c++ c++ xml c++ console cad lib in c# call graph cegui irrlicht convert latex to word Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"A simple, small, minimal, C++ XML parser that can be easily integrating into other programs. [zlib]"	"true"
"XML"	"TinyXML2"	"https://github.com/leethomason/tinyxml2"	"A simple, small, efficient, C++ XML parser that can be easily integrating into other programs. [zlib]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1223"	"162"	"554"	"GitHub - leethomason/tinyxml2: TinyXML2 is a simple, small, efficient, C++ XML parser that can be easily integrating into other programs. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 162 Star 1,223 Fork 554 leethomason/tinyxml2 Code Issues 36 Pull requests 3 Pulse Graphs TinyXML2 is a simple, small, efficient, C++ XML parser that can be easily integrating into other programs. 678 commits 6 branches 5 releases 46 contributors C++ 95.3% CMake 3.0% Python 1.6% Makefile 0.1% C++ CMake Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2003 format_changes int64support master mikemayer67-master whitespace Nothing to show 3.0.0 2.2.0 2.1.0 2.0.2 2.0.1 Nothing to show New pull request Latest commit d7e5f47 Jun 23, 2016 leethomason committed on GitHub Merge pull request #445 from kurylo/master … Add INCLUDE_DIRECTORIES on the targets for supported cmake versions. Permalink Failed to load latest commit information. contrib add biicode support Mar 16, 2015 resources Fixed: LoadFile() returns XML_NO_ERROR for empty documents. Apr 20, 2013 tinyxml2 one successful return type. simplify build on vs2015 Jun 4, 2016 .gitignore add *.o to .gitignore Aug 6, 2015 .travis.yml TravisCI: support osx build Oct 2, 2015 CMakeLists.txt Add INCLUDE_DIRECTORIES on the targets for supported cmake versions. Jun 22, 2016 Makefile Standardized static library output name Jun 8, 2016 TinyXML2_small.png lossless optimization on logo Jan 10, 2015 appveyor.yml Add appveyor.yml Oct 2, 2015 biicode.conf add biicode support Mar 16, 2015 cmake_uninstall.cmake.in add in support for sudo make uninstall Aug 15, 2015 dox setting the version to 3.0.0 Mar 17, 2015 readme.md Correct the capitalization of Xcode in README Feb 17, 2016 setversion.py setting the version to 2.2.0 Sep 14, 2014 tinyxml2.cpp one successful return type. simplify build on vs2015 Jun 5, 2016 tinyxml2.h ps3 support Jun 4, 2016 tinyxml2.pc.in Add pkgconfig file May 23, 2012 xmltest.cpp one successful return type. simplify build on vs2015 Jun 5, 2016 readme.md TinyXML-2 TinyXML-2 is a simple, small, efficient, C++ XML parser that can be easily integrated into other programs. The master is hosted on github: https://github.com/leethomason/tinyxml2 The online HTML version of these docs: http://grinninglizard.com/tinyxml2docs/index.html Examples are in the ""related pages"" tab of the HTML docs. What it does. In brief, TinyXML-2 parses an XML document, and builds from that a Document Object Model (DOM) that can be read, modified, and saved. XML stands for ""eXtensible Markup Language."" It is a general purpose human and machine readable markup language to describe arbitrary data. All those random file formats created to store application data can all be replaced with XML. One parser for everything. http://en.wikipedia.org/wiki/XML There are different ways to access and interact with XML data. TinyXML-2 uses a Document Object Model (DOM), meaning the XML data is parsed into a C++ objects that can be browsed and manipulated, and then written to disk or another output stream. You can also construct an XML document from scratch with C++ objects and write this to disk or another output stream. You can even use TinyXML-2 to stream XML programmatically from code without creating a document first. TinyXML-2 is designed to be easy and fast to learn. It is one header and one cpp file. Simply add these to your project and off you go. There is an example file - xmltest.cpp - to get you started. TinyXML-2 is released under the ZLib license, so you can use it in open source or commercial code. The details of the license are at the top of every source file. TinyXML-2 attempts to be a flexible parser, but with truly correct and compliant XML output. TinyXML-2 should compile on any reasonably C++ compliant system. It does not rely on exceptions, RTTI, or the STL. What it doesn't do. TinyXML-2 doesn't parse or use DTDs (Document Type Definitions) or XSLs (eXtensible Stylesheet Language.) There are other parsers out there that are much more fully featured. But they are also much bigger, take longer to set up in your project, have a higher learning curve, and often have a more restrictive license. If you are working with browsers or have more complete XML needs, TinyXML-2 is not the parser for you. TinyXML-1 vs. TinyXML-2 TinyXML-2 is now the focus of all development, well tested, and your best choice unless you have a requirement to maintain TinyXML-1 code. TinyXML-2 uses a similar API to TinyXML-1 and the same rich test cases. But the implementation of the parser is completely re-written to make it more appropriate for use in a game. It uses less memory, is faster, and uses far fewer memory allocations. TinyXML-2 has no requirement for STL, but has also dropped all STL support. All strings are query and set as 'const char*'. This allows the use of internal allocators, and keeps the code much simpler. Both parsers: Simple to use with similar APIs. DOM based parser. UTF-8 Unicode support. http://en.wikipedia.org/wiki/UTF-8 Advantages of TinyXML-2 The focus of all future dev. Many fewer memory allocation (1/10th to 1/100th), uses less memory (about 40% of TinyXML-1), and faster. No STL requirement. More modern C++, including a proper namespace. Proper and useful handling of whitespace Advantages of TinyXML-1 Can report the location of parsing errors. Support for some C++ STL conventions: streams and strings Very mature and well debugged code base. Features Memory Model An XMLDocument is a C++ object like any other, that can be on the stack, or new'd and deleted on the heap. However, any sub-node of the Document, XMLElement, XMLText, etc, can only be created by calling the appropriate XMLDocument::NewElement, NewText, etc. method. Although you have pointers to these objects, they are still owned by the Document. When the Document is deleted, so are all the nodes it contains. White Space Whitespace Preservation (default) Microsoft has an excellent article on white space: http://msdn.microsoft.com/en-us/library/ms256097.aspx By default, TinyXML-2 preserves white space in a (hopefully) sane way that is almost complient with the spec. (TinyXML-1 used a completely different model, much more similar to 'collapse', below.) As a first step, all newlines / carriage-returns / line-feeds are normalized to a line-feed character, as required by the XML spec. White space in text is preserved. For example: <element> Hello,  World</element>  The leading space before the ""Hello"" and the double space after the comma are preserved. Line-feeds are preserved, as in this example: <element> Hello again,             World</element>  However, white space between elements is not preserved. Although not strictly compliant, tracking and reporting inter-element space is awkward, and not normally valuable. TinyXML-2 sees these as the same XML: <document>     <data>1</data>     <data>2</data>     <data>3</data> </document>  <document><data>1</data><data>2</data><data>3</data></document>  Whitespace Collapse For some applications, it is preferable to collapse whitespace. Collapsing whitespace gives you ""HTML-like"" behavior, which is sometimes more suitable for hand typed documents. TinyXML-2 supports this with the 'whitespace' parameter to the XMLDocument constructor. (The default is to preserve whitespace, as described above.) However, you may also use COLLAPSE_WHITESPACE, which will: Remove leading and trailing whitespace Convert newlines and line-feeds into a space character Collapse a run of any number of space characters into a single space character Note that (currently) there is a performance impact for using COLLAPSE_WHITESPACE. It essentially causes the XML to be parsed twice. Entities TinyXML-2 recognizes the pre-defined ""character entities"", meaning special characters. Namely: &amp;   & &lt;    < &gt;    > &quot;  "" &apos;  '  These are recognized when the XML document is read, and translated to their UTF-8 equivalents. For instance, text with the XML of: Far &amp; Away  will have the Value() of ""Far & Away"" when queried from the XMLText object, and will be written back to the XML stream/file as an ampersand. Additionally, any character can be specified by its Unicode code point: The syntax &#xA0; or &#160; are both to the non-breaking space character. This is called a 'numeric character reference'. Any numeric character reference that isn't one of the special entities above, will be read, but written as a regular code point. The output is correct, but the entity syntax isn't preserved. Printing Print to file You can directly use the convenience function: XMLDocument doc; ... doc.SaveFile( ""foo.xml"" );  Or the XMLPrinter class: XMLPrinter printer( fp ); doc.Print( &printer );  Print to memory Printing to memory is supported by the XMLPrinter. XMLPrinter printer; doc.Print( &printer ); // printer.CStr() has a const char* to the XML  Print without an XMLDocument When loading, an XML parser is very useful. However, sometimes when saving, it just gets in the way. The code is often set up for streaming, and constructing the DOM is just overhead. The Printer supports the streaming case. The following code prints out a trivially simple XML file without ever creating an XML document. XMLPrinter printer( fp ); printer.OpenElement( ""foo"" ); printer.PushAttribute( ""foo"", ""bar"" ); printer.CloseElement();  Examples Load and parse an XML file. /* ------ Example 1: Load and parse an XML file. ---- */     {     XMLDocument doc;     doc.LoadFile( ""dream.xml"" ); }  Lookup information. /* ------ Example 2: Lookup information. ---- */     {     XMLDocument doc;     doc.LoadFile( ""dream.xml"" );      // Structure of the XML file:     // - Element ""PLAY""      the root Element, which is the      //                       FirstChildElement of the Document     // - - Element ""TITLE""   child of the root PLAY Element     // - - - Text            child of the TITLE Element      // Navigate to the title, using the convenience function,     // with a dangerous lack of error checking.     const char* title = doc.FirstChildElement( ""PLAY"" )->FirstChildElement( ""TITLE"" )->GetText();     printf( ""Name of play (1): %s\n"", title );      // Text is just another Node to TinyXML-2. The more     // general way to get to the XMLText:     XMLText* textNode = doc.FirstChildElement( ""PLAY"" )->FirstChildElement( ""TITLE"" )->FirstChild()->ToText();     title = textNode->Value();     printf( ""Name of play (2): %s\n"", title ); }  Using and Installing There are 2 files in TinyXML-2: tinyxml2.cpp tinyxml2.h And additionally a test file: xmltest.cpp Simply compile and run. There is a visual studio 2010 project included, a simple Makefile, an Xcode project, a Code::Blocks project, and a cmake CMakeLists.txt included to help you. The top of tinyxml.h even has a simple g++ command line if you are are *nix and don't want to use a build system. Versioning TinyXML-2 uses semantic versioning. http://semver.org/ Releases are now tagged in github. Note that the major version will (probably) change fairly rapidly. API changes are fairly common. Documentation The documentation is build with Doxygen, using the 'dox' configuration file. License TinyXML-2 is released under the zlib license: This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. This notice may not be removed or altered from any source distribution. Contributors Thanks very much to everyone who sends suggestions, bugs, ideas, and encouragement. It all helps, and makes this project fun. The original TinyXML-1 has many contributors, who all deserve thanks in shaping what is a very successful library. Extra thanks to Yves Berquin and Andrew Ellerton who were key contributors. TinyXML-2 grew from that effort. Lee Thomason is the original author of TinyXML-2 (and TinyXML-1) but TinyXML-2 has been and is being improved by many contributors. Thanks to John Mackay at http://john.mackay.rosalilastudio.com for the TinyXML-2 logo! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leethomason/tinyxml2"	"A simple, small, efficient, C++ XML parser that can be easily integrating into other programs. [zlib]"	"true"
"XML"	"TinyXML++"	"https://github.com/rjpcomputing/ticpp"	"A completely new interface to TinyXML that uses MANY of the C++ strengths. Templates, exceptions, and much better error handling. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16"	"8"	"8"	"GitHub - rjpcomputing/ticpp: 'TiCPP' is short for the official name TinyXML++. It is a completely new interface to TinyXML (http://www.grinninglizard.com/tinyxml/) that uses MANY of the C++ strengths. Templates, exceptions, and much better error handling. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 16 Fork 8 rjpcomputing/ticpp Code Issues 40 Pull requests 1 Wiki Pulse Graphs 'TiCPP' is short for the official name TinyXML++. It is a completely new interface to TinyXML (http://www.grinninglizard.com/tinyxml/) that uses MANY of the C++ strengths. Templates, exceptions, and much better error handling. 69 commits 4 branches 0 releases 1 contributor C++ 95.6% Lua 4.4% C++ Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags docs master matt.trentini wiki Nothing to show Nothing to show New pull request Latest commit 8c7e691 Mar 17, 2015 rjpcomputing Update and rename readme.txt to README.md … Changed to a simple Readme Permalink Failed to load latest commit information. tests/mocks Updated mocks Apr 13, 2011 README.md Update and rename readme.txt to README.md Mar 17, 2015 build_instructions.txt Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 changes.txt Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 dox Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 premake.lua updated copyrights Feb 9, 2008 premake4.lua Added Premake4 files. These are just temporary. Jan 23, 2009 ticpp.cpp Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 ticpp.h Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 ticpp.lua Added dll-interface declarations to support using DLLs built via VS20… Oct 18, 2012 ticpp4.lua Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 ticppapi.h Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 ticpprc.h Added dll-interface declarations to support using DLLs built via VS20… Oct 18, 2012 tinystr.cpp updated to tinyxml 2.5.3 Oct 2, 2007 tinystr.h Added dll-interface declarations to support using DLLs built via VS20… Oct 18, 2012 tinyxml.cpp Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 tinyxml.h Added dll-interface declarations to support using DLLs built via VS20… Oct 18, 2012 tinyxmlerror.cpp Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 tinyxmlparser.cpp Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 tutorial_gettingStarted.txt Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 tutorial_ticpp.txt Removed including windows.h in a header file. That is to forceful and… Mar 17, 2015 README.md 'TiCPP' is short for the official name TinyXML++. It is a completely new interface to TinyXML (http://www.grinninglizard.com/tinyxml/) that uses MANY of the C++ strengths. Templates, exceptions, and much better error handling. It is also fully documented in doxygen. It is really cool because this version let's you interface tiny the exact same way as before or you can choose to use the new 'ticpp' classes. All you need to do is define TIXML_USE_TICPP. It has been tested in VC 6.0, VC 7.0, VC 7.1, VC 8.0, MinGW gcc 3.4.5, and in Linux GNU gcc 3+. Get Help: TinyXML++ Discussion Group Documentation: Online Download Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rjpcomputing/ticpp"	"A completely new interface to TinyXML that uses MANY of the C++ strengths. Templates, exceptions, and much better error handling. [MIT]"	"true"
"XML"	"Xerces-C++"	"http://xerces.apache.org/xerces-c/"	"A validating XML parser written in a portable subset of C++. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Xerces-C++ XML Parser Xerces-C++ Version 3.1.4   Xerces-C++ is a validating XML parser written in a portable subset of C++. Xerces-C++ makes it easy to give your application the ability to read and write XML data. A shared library is provided for parsing, generating, manipulating, and validating XML documents using the DOM, SAX, and SAX2 APIs. For an introduction to programming with Xerces-C++ refer to the Programming Guide. Xerces-C++ is faithful to the XML 1.0 recommendation and many associated standards (see Features below). The parser provides high performance, modularity, and scalability. Source code, samples and API documentation are provided with the parser. For portability, care has been taken to make minimal use of templates, no RTTI, and minimal use of #ifdefs. Applications of the Xerces Parser   Xerces has rich generating and validating capabilities. The parser is used for: Building XML-savvy Web servers Building next generation of vertical applications that use XML as their data format On-the-fly validation for creating XML editors Ensuring the integrity of e-business data expressed in XML Building truly internationalized XML applications Features   Conforms to XML 1.0 (Third Edition), W3C Recommendation XML 1.1 (First Edition), W3C Recommendation (Note: section 2.13 Normalization Checking has not been implemented) DOM Level 1 Specification, W3C Recommendation of October 1, 1998 DOM Level 2 Core Specification, W3C Recommendation of November 13, 2000 DOM Level 2 Traversal and Range Specification, W3C Recommendation of November 13, 2000 SAX 1.0 and SAX 2.0 Namespaces in XML, W3C Recommendation of January 14, 1999 Namespaces in XML 1.1, W3C Recommendation XML Schema Part 1: Structure, W3C Recommendation 2 May 2001 XML Schema Part 2: Datatypes, W3C Recommendation 2 May 2001 DOM Level 3.0 Core Specification, W3C Recommendation 7 April 2004 DOM Level 3.0 Load and Save Specification, W3C Recommendation 7 April 2004 See DOM Level 3 Support for detail. XML Inclusions (XInclude) 1.0 (Second Edition), W3C Recommendation 15 November 2006 Element Traversal Specification, W3C Recommendation 22 December 2008 Source code, samples, and documentation are provided Programmatic generation and validation of XML Pluggable catalogs, validators and encodings High performance Customizable error handling License Information   The Xerces-C++ Version 3.1.4 is available in both source distribution and binary distribution. Xerces-C++ is made available under the Apache Software License, Version 2.0. A Note About Xerces 2.x   If you're looking for information regarding the old Xerces 2.x library, please be advised that Xerces 2.8.0 and all earlier releases are 100% unsupported and should no longer be used by applications. Copyright © 1999-2015 The Apache Software Foundation. All Rights Reserved."	"null"	"null"	"A validating XML parser written in a portable subset of C++. [Apache2]"	"true"
"Miscellaneous"	"access_profiler"	"https://github.com/arvidn/access_profiler"	"A tool to count accesses to member variables in c++ programs. [GPL3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"44"	"6"	"3"	"GitHub - arvidn/access_profiler: a tool to count accesses to member variables in c++ programs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 44 Fork 3 arvidn/access_profiler Code Issues 0 Pull requests 0 Pulse Graphs a tool to count accesses to member variables in c++ programs 5 commits 1 branch 0 releases Fetching contributors C++ 100.0% C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 98ca932 Dec 8, 2013 arvidn update README Permalink Failed to load latest commit information. .gitignore Initial commit Dec 7, 2013 Jamfile LICENSE initial commit Dec 7, 2013 README.rst update README Dec 8, 2013 access_profiler.cpp update README Dec 9, 2013 access_profiler.hpp initial commit Dec 7, 2013 project-root.jam initial commit Dec 7, 2013 test.cpp add examples to README Dec 7, 2013 README.rst access_profiler access_profiler is a heavy-weight class field access profiler, implemented as C++ library. to use this profiler, include ""access_profiler.hpp"" and make the types you want to instrument derive from access_profiler::instrument_type< your-type > (i.e. you need to specify your type as the template argument). in you Jamfile, add a dependency to the access_profiler library. When you terminate your program, the access counters for your types fields will be printed to ""access_profile.out"" in current working directory. This file lists all instrumented types and the access counters for offsets into those types. To combine this information with the debug information for more user-friendly output, use the struct_layout tool and use the profile as input. Note access_profiler is currently not compatible with std::make_shared or similar functions, since those won't invoke the new operator. To profile such types, convert them to regular std::shared_ptr constructor which still allocates the object with new. output format Each instrumented type has its fully qualified name printed on a single line preceded by a blank line (even the first type). After each instrumented type follows a list of offsets into that type, colon, and the number of times that offset was accessed. The counter does not distinguish between reads and writes. These lines are indented by at least 3 spaces, but the offset is right adjusted and may contain some leading spaces too. The general outline looks like this: <blank line> <fully qualified name of instrumented type>    <offset>:<hit count>    <offset>:<hit count>  example usage #include ""access_profiler.hpp"" #include <stdio.h>  struct test : access_profiler::instrument_type<test> {         test() : a(0), b(0) {}         char array[50];         int a;         int b; };  int main(int argc, char* argv[]) {         test* t1 = new test;          for (int i = 0; i < 10; ++i)         {                 ++t1->a;                 t1->b += t1->a;         }          printf(""%d\n"", t1->b);          delete t1; }  example output output from a debug build: test      52: 31      56: 22  output from a release build: test      52: 1  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/arvidn/access_profiler"	"A tool to count accesses to member variables in c++ programs. [GPL3]"	"true"
"Miscellaneous"	"American fuzzy lop"	"http://lcamtuf.coredump.cx/afl/"	"a.k.a. afl-fuzz - Crazy fuzzing tool that automatically discovers bugs given time and minimal example input. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"194"	"21"	"36"	"GitHub - ivanfratric/winafl: A fork of AFL for fuzzing Windows binaries Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 194 Fork 36 ivanfratric/winafl Code Issues 0 Pull requests 0 Pulse Graphs A fork of AFL for fuzzing Windows binaries 4 commits 1 branch 0 releases 2 contributors C 98.2% C++ 1.4% Other 0.4% C C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit a8108e8 Jul 8, 2016 ivanfratric committed on GitHub Update README Permalink Failed to load latest commit information. afl_docs First commit Jul 7, 2016 bin32 First commit Jul 7, 2016 bin64 First commit Jul 7, 2016 testcases First commit Jul 7, 2016 CMakeLists.txt First commit Jul 7, 2016 LICENSE First commit Jul 7, 2016 README Update README Jul 8, 2016 afl-fuzz.c First commit Jul 7, 2016 alloc-inl.h First commit Jul 7, 2016 config.h First commit Jul 7, 2016 debug.h First commit Jul 7, 2016 gdiplus.cpp First commit Jul 7, 2016 hash.h First commit Jul 7, 2016 modules.c First commit Jul 7, 2016 modules.h First commit Jul 7, 2016 test.cpp First commit Jul 7, 2016 types.h First commit Jul 7, 2016 utils.h First commit Jul 7, 2016 winafl.c First commit Jul 7, 2016 README ====== WinAFL ======     Original AFL code written by Michal Zalewski <lcamtuf@google.com>     Windows fork written and maintained by Ivan Fratric <ifratric@google.com>     Copyright 2016 Google Inc. All Rights Reserved.     Licensed under the Apache License, Version 2.0 (the ""License"");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at         http://www.apache.org/licenses/LICENSE-2.0     Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an ""AS IS"" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.   1) Background -------------  AFL is a popular fuzzing tool for coverage-guided fuzzing. The tool combines fast target execution with clever heuristics to find new execution paths in the target binary. It has been successfully used to find a large number of vulnerabilities in real products. For more info about the original project, please refer to the original documentation at  http://lcamtuf.coredump.cx/afl/  Unfortunately, the original AFL does not work on Windows due to very *nix-specific design (e.g. instrumentation, forkserver etc). This project is a fork of AFL that uses different instrumentation approach which works on Windows even for black box binary fuzzing.  2) The WinAFL approach ----------------------  Instead of instrumenting the code at compilation time, WinAFL relies on dynamic instrumentation using DynamoRIO (http://dynamorio.org/) to measure and extract target coverage. This approach has been found to introduce an overhead about 2x compared to the native execution speed, which is comparable to the original AFL in binary instrumentation mode.  To improve the process startup time, WinAFL relies heavily on persistant fuzzing mode, that is, executing multiple input samples without restarting the target process. This is accomplished by selecting a target function (that the user wants to fuzz) and instrumenting it so that it runs in a loop.  3) Building WinAFL ------------------  1. Download and build DynamoRio sources or download DynamoRio Windows binary package from https://github.com/DynamoRIO/dynamorio/wiki/Downloads   2. Open Visual Studio Command Prompt (or Visual Studio x64 Win64 Command Prompt if you want a 64-bit build). Note that you need a 64-bit winafl.dll build if you are fuzzing 64-bit targets and vice versa.  3. Go to the directory containing the source  4. Type the following commands. Modify the -DDynamoRIO_DIR flag to point to the location of your DynamoRIO cmake files (relative to the source directory).  For a 32-bit build:  mkdir build32 cd build32 cmake .. -DDynamoRIO_DIR=..\path\to\DynamoRIO\cmake cmake --build . --config Release  For a 64-bit build:  mkdir build64 cd build64 cmake -G""Visual Studio 10 Win64"" .. -DDynamoRIO_DIR=..\path\to\DynamoRIO\cmake cmake --build . --config Release  4) Using WinAFL ---------------  Note: If you are using pre-built binaries you'll need to download DynamoRIO release 6.1.1-3 from https://github.com/DynamoRIO/dynamorio/wiki/Downloads. If you built WinAFL from source, you can use whatever version of DynamoRIO you used to build WinAFL.  The command line for afl-fuzz on Windows is different than on Linux. Instead of  %s [ afl options ] -- [instrumentation options] --   it now looks like this  afl-fuzz [afl options] -- [instrumentation options] -- target_cmd_line  The followin afl-fuzz options are supported:    -i dir        - input directory with test cases   -o dir        - output directory for fuzzer findings   -D dir        - directory containing DynamoRIO binaries (drrun, drconfig)   -t msec       - timeout for each run   -f file       - location read by the fuzzed program   -M \\ -S id   - distributed mode   -x dir        - optional fuzzer dictionary  Please refer to the original AFL documentation for more info on these flags.  The following instrumentation options are used    -covtype         - the type of coverage being recorded. Supported options are                      bb (basic block) or edge (default).    -coverage_module - module for which to record coverage. Multiple module flags                      are supported.    -target_module   - module which contains the target function to be fuzzed.                      Either -target_method or -target_offset need to be                      specified together with this option.    -target_method   - name of the method to fuzz in persistent mode. A symbol                      for the method needs to be exported for this to work.                      Otherwise use -target_offset instead.    -target_offset   - offset of the method to fuzz from the start of the module.    -fuzz_iterations - Maximum nuber of iterations for the target function to run                      before restarting the target process.    -nargs           - Number of arguments the fuzzed method takes. This is used                      to save/restore the arguments between runs.    -debug           - Debug mode. Does not try to connect to the server. Outputs                      a log file containing loaded modules, opened files and                      coverage infrormation.    -logdir          - specifies in which directory the log file will be written                      (only to be used with -debug).  In general, you should perform the following steps when fuzzing a new target:  0. Make sure your target is running correctly without instrumentations.  1. Open the target binary in WinDbg and locate the function you want to fuzz. Note the offset of the function from the start of the module. For example, if you want to fuzz the main function and happen to have symbols around, you can use the following windbg command:  x test!main  2. Make sure that the target is running correctly under DynamoRIO. For this purpose you can use the standalone debug mode of WinAFL client which does not require connecting to afl-fuzz. Make sure you use the drrun.exe and winafl.dll version which corresponds to your target (32 vs. 64 bit).  Example command line  path\to\DynamoRIO\bin64\drrun.exe -c winafl.dll -debug -target_module test_gdiplus.exe -target_offset 0x1270 -fuzz_iterations 10 -nargs 2 -- test_gdiplus.exe input.bmp  You should see the output corresponding to your target function being run 10 times after which the target executable will exit. A .log file should be created in the current directory. The log file contains useful information such as the files and modules loaded by the target as well as the dump of AFL coverage map. You should see your input file being opened at least 10 times (or more), as afl-fuzz requires that the file is opened for each fuzzing iteration. Note the list of loaded modules for setting the -coverage_module flag. Note that you must use the same values for module names as seen in the log file (case sensitive).  3. Now you should be ready to fuzz the target. First, make sure that both afl-fuzz.exe and winafl.dll are in the current directory. As stated earlier, the command line for afl-fuzz on Windows is  afl-fuzz [afl options] -- [instrumentation options] -- target_cmd_line  Please refer above for the list of supported AFL and instrumentation options.  In AFL options, you must specify the DynamoRIO binaries directory via the new -D option. You need to match the DynamoRIO and winafl.dll build (32 vs. 64 bit) to the target binary. -t (timeout) option is mandatory for winafl as execution time can vary significantly under instrumentation so it’s not a good idea to rely on the auto-determined values.  You can use the same winafl options as in step 2 but remember to exclude the -debug flag and you'll probably want to increase the iteration count.  As in afl-fuzz on Linux you can replace the input file param of the target binary with @@  An example command line would look like  afl-fuzz.exe -i in -o out -D C:\work\winafl\DynamoRIO\bin64 -t 20000 -- -coverage_module gdiplus.dll -coverage_module WindowsCodecs.dll -fuzz_iterations 5000 -target_module test_gdiplus.exe -target_offset 0x1270 -nargs 2 -- test_gdiplus.exe @@  That’s it. Happy fuzzing! Let me know if you find any bugs.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ivanfratric/winafl"	"a.k.a. afl-fuzz - Crazy fuzzing tool that automatically discovers bugs given time and minimal example input. [Apache2]"	"true"
"Miscellaneous"	"Better Enums"	"https://github.com/aantron/better-enums"	"Reflective enums (to string, iteration). Single header. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"233"	"26"	"24"	"GitHub - aantron/better-enums: Compile-time enum to string, iteration, in a single header file. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 233 Fork 24 aantron/better-enums Code Issues 8 Pull requests 2 Pulse Graphs Compile-time enum to string, iteration, in a single header file. http://aantron.github.io/better-enums 95 commits 5 branches 6 releases Fetching contributors C++ 86.8% CMake 4.8% Python 4.5% Makefile 3.9% C++ CMake Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cmake-tests gh-pages master traits vs2015-constexpr Nothing to show 0.11.1 0.11.0 0.10.1 0.10.0 0.9.0 0.8.0 Nothing to show New pull request Latest commit f520b39 Jul 8, 2016 cheparukhin committed on GitHub Merge pull request #22 from cheparukhin/master … Fix name resolution errors Permalink Failed to load latest commit information. doc Simplified README. Mar 15, 2016 example Incorporated errata. Dec 10, 2015 extra/better-enums Removed double underscores from macro names. Feb 24, 2016 script Removed double underscores from macro names. Feb 24, 2016 test Add test for ostream operator Jul 8, 2016 .gitignore Switched to CMake for building tests. Jul 1, 2015 .travis.yml Disabled constexpr testing on MSVC. Nov 17, 2015 README.md Simplified README. Mar 15, 2016 appveyor.yml Updated AppVeyor configuration. Aug 23, 2015 enum.h Resolve clashing global and nested namespace names Jun 22, 2016 README.md Better Enums   Reflective compile-time enum library with clean syntax, in a single header file, and without dependencies. In C++11, everything can be used at compile time. You can convert your enums, loop over them, find their max, statically enforce conventions, and pass along the results as template arguments or to constexpr functions. All the reflection is available for your metaprogramming needs. The interface is the same for C++98 — you just have to use most of it at run time only. This library does provide scoped and sized enums, something not built into C++98. See the project page for full documentation. Installation Simply add enum.h to your project. Additional features Uses only standard C++, though, for C++98, variadic macro support is required (major compilers have it). Supported and tested on clang, gcc, and msvc. Fast compilation. You have to declare a few dozen enums to slow down your compiler as much as only including iostream does. Use any initializers and sparse ranges, just like with a built-in enum. Control over size and alignment — you choose the representation type. Stream operators. Does not use the heap and can be compiled with exceptions disabled, for use in minimal freestanding environments. Limitations The biggest limitation is that the BETTER_ENUM macro can't be used inside a class. This seems difficult to remove. There is a workaround with typedef (or C++11 using): BETTER_ENUM(SomePrefix_Color, uint8_t, Red, Green, Blue)  struct triplet {     typedef SomePrefix_Color    Color;     Color                       r, g, b; };  triplet::Color  color;  You can, however, use BETTER_ENUM inside a namespace. The macro has a soft limit of 64 declared constants. You can extend it by following these instructions. Ultimately, the number of constants is limited by your compiler's maximum macro argument count. In some cases, it is necessary to prefix constants such as Channel::Red with a + to explicitly promote them to type Channel. For example, if you are doing a comparison: channel == +Channel::Red  Contact and development Don't hesitate to contact me about features or bugs: antonbachin@yahoo.com, or open an issue on GitHub. If you'd like to help develop Better Enums, see CONTRIBUTING. One area that could use fresh ideas is finding a compile-time data structure that both compiles quickly and allows lookup in sub-linear time. License and history Better Enums is released under the BSD 2-clause license. See LICENSE. The original version of the library was developed by the author in the winter of 2012-2013 at Hudson River Trading, as a replacement for an older generator called BETTER_ENUM. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aantron/better-enums"	"Reflective enums (to string, iteration). Single header. [BSD]"	"true"
"Miscellaneous"	"website"	"http://aantron.github.io/better-enums/"	"Reflective enums (to string, iteration). Single header. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"233"	"26"	"24"	"GitHub - aantron/better-enums: Compile-time enum to string, iteration, in a single header file. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 233 Fork 24 aantron/better-enums Code Issues 8 Pull requests 2 Pulse Graphs Compile-time enum to string, iteration, in a single header file. http://aantron.github.io/better-enums 95 commits 5 branches 6 releases Fetching contributors C++ 86.8% CMake 4.8% Python 4.5% Makefile 3.9% C++ CMake Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cmake-tests gh-pages master traits vs2015-constexpr Nothing to show 0.11.1 0.11.0 0.10.1 0.10.0 0.9.0 0.8.0 Nothing to show New pull request Latest commit f520b39 Jul 8, 2016 cheparukhin committed on GitHub Merge pull request #22 from cheparukhin/master … Fix name resolution errors Permalink Failed to load latest commit information. doc Simplified README. Mar 15, 2016 example Incorporated errata. Dec 10, 2015 extra/better-enums Removed double underscores from macro names. Feb 24, 2016 script Removed double underscores from macro names. Feb 24, 2016 test Add test for ostream operator Jul 8, 2016 .gitignore Switched to CMake for building tests. Jul 1, 2015 .travis.yml Disabled constexpr testing on MSVC. Nov 17, 2015 README.md Simplified README. Mar 15, 2016 appveyor.yml Updated AppVeyor configuration. Aug 23, 2015 enum.h Resolve clashing global and nested namespace names Jun 22, 2016 README.md Better Enums   Reflective compile-time enum library with clean syntax, in a single header file, and without dependencies. In C++11, everything can be used at compile time. You can convert your enums, loop over them, find their max, statically enforce conventions, and pass along the results as template arguments or to constexpr functions. All the reflection is available for your metaprogramming needs. The interface is the same for C++98 — you just have to use most of it at run time only. This library does provide scoped and sized enums, something not built into C++98. See the project page for full documentation. Installation Simply add enum.h to your project. Additional features Uses only standard C++, though, for C++98, variadic macro support is required (major compilers have it). Supported and tested on clang, gcc, and msvc. Fast compilation. You have to declare a few dozen enums to slow down your compiler as much as only including iostream does. Use any initializers and sparse ranges, just like with a built-in enum. Control over size and alignment — you choose the representation type. Stream operators. Does not use the heap and can be compiled with exceptions disabled, for use in minimal freestanding environments. Limitations The biggest limitation is that the BETTER_ENUM macro can't be used inside a class. This seems difficult to remove. There is a workaround with typedef (or C++11 using): BETTER_ENUM(SomePrefix_Color, uint8_t, Red, Green, Blue)  struct triplet {     typedef SomePrefix_Color    Color;     Color                       r, g, b; };  triplet::Color  color;  You can, however, use BETTER_ENUM inside a namespace. The macro has a soft limit of 64 declared constants. You can extend it by following these instructions. Ultimately, the number of constants is limited by your compiler's maximum macro argument count. In some cases, it is necessary to prefix constants such as Channel::Red with a + to explicitly promote them to type Channel. For example, if you are doing a comparison: channel == +Channel::Red  Contact and development Don't hesitate to contact me about features or bugs: antonbachin@yahoo.com, or open an issue on GitHub. If you'd like to help develop Better Enums, see CONTRIBUTING. One area that could use fresh ideas is finding a compile-time data structure that both compiles quickly and allows lookup in sub-linear time. License and history Better Enums is released under the BSD 2-clause license. See LICENSE. The original version of the library was developed by the author in the winter of 2012-2013 at Hudson River Trading, as a replacement for an older generator called BETTER_ENUM. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aantron/better-enums"	"Reflective enums (to string, iteration). Single header. [BSD]"	"true"
"Miscellaneous"	"Better String"	"http://bstring.sourceforge.net/"	"An alternative to the string library for C which is more functional and does not have buffer overflow overrun problems. Also includes a C++ wrapper. [BSD, GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Better String Library The Better String Library by Paul Hsieh GIT - src 08/27/2015 GIT - zip 08/27/2015 EXAMPLES 09/28/2006 Documentation bstring.txt Security Statement security.txt Porting Guide porting.txt Frequently Asked Questions Bstrlib FAQ Comparisons Comparison Table Usage Licenses BSD license GPL license Discussion Developer Forum Contact email Paul Hsieh Introduction The Better String Library is an abstraction of a string data type which is superior to the C library char buffer string type, or C++'s std::string. Among the features achieved are: Substantial mitigation of buffer overflow/overrun problems and other failures that result from erroneous usage of the common C string library functions Significantly simplified string manipulation High performance interoperability with other source/libraries which expect '\0' terminated char buffers Improved overall performance of common string operations Functional equivalency with other more modern languages The library is totally stand alone, portable (known to work with gcc/g++, MSVC++, Intel C++, WATCOM C/C++, Turbo C, Borland C++, IBM's native CC compiler on Windows, Linux and Mac OS X), high performance, easy to use and is not part of some other collection of data structures. Even the file I/O functions are totally abstracted (so that other stream-like mechanisms, like sockets, can be used.) Nevertheless, it is adequate as a complete replacement of the C string library for string manipulation in any C program. The library includes a robust C++ wrapper that uses overloaded operators, rich constructors, exceptions, stream I/O and STL to make the CBString struct a natural and powerful string abstraction with more functionality and higher performance than std::string. Bstrlib is stable, well tested and suitable for any software production environment."	"null"	"null"	"An alternative to the string library for C which is more functional and does not have buffer overflow overrun problems. Also includes a C++ wrapper. [BSD, GPL2]"	"true"
"Miscellaneous"	"Boost.Signals"	"http://www.boost.org/doc/libs/1_56_0/doc/html/signals.html"	"An implementation of a managed signals and slots system. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Chapter 28. Boost.Signals - 1.56.0 Boost C++ Libraries ...one of the most highly regarded and expertly designed C++ library projects in the world. — Herb Sutter and Andrei Alexandrescu, C++ Coding Standards Click here to view the latest version of this page. Chapter 28. Boost.Signals Douglas Gregor Copyright © 2001-2004 Douglas Gregor Use, modification and distribution is subject to the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) Table of Contents Introduction Tutorial How to Read this Tutorial Compatibility Note Hello, World! (Beginner) Calling multiple slots Passing values to and from slots Connection Management Example: Document-View Linking against the Signals library Reference Header <boost/signal.hpp> Header <boost/signals/slot.hpp> Header <boost/signals/trackable.hpp> Header <boost/signals/connection.hpp> Header <boost/visit_each.hpp> Header <boost/last_value.hpp> Frequently Asked Questions Design Overview Type Erasure connection class Slot Call Iterator visit_each function template Design Rationale Choice of Slot Definitions User-level Connection Management Combiner Interface Connection Interfaces: += operator trackable rationale Comparison with other Signal/Slot implementations Testsuite Acceptance tests Introduction Note Boost.Signals is no longer being actively maintained. Do not use Boost.Signals for new development (use Boost.Signals2 instead). If you have existing Boost.Signals-based code, it will continue to work, but consider moving to Boost.Signals2. There is a porting guide in the Signals2 documentation. The Boost.Signals library is an implementation of a managed signals and slots system. Signals represent callbacks with multiple targets, and are also called publishers or events in similar systems. Signals are connected to some set of slots, which are callback receivers (also called event targets or subscribers), which are called when the signal is ""emitted."" Signals and slots are managed, in that signals and slots (or, more properly, objects that occur as part of the slots) track all connections and are capable of automatically disconnecting signal/slot connections when either is destroyed. This enables the user to make signal/slot connections without expending a great effort to manage the lifetimes of those connections with regard to the lifetimes of all objects involved. When signals are connected to multiple slots, there is a question regarding the relationship between the return values of the slots and the return value of the signals. Boost.Signals allows the user to specify the manner in which multiple return values are combined."	"null"	"null"	"An implementation of a managed signals and slots system. [Boost]"	"true"
"Miscellaneous"	"C++ Format"	"https://github.com/cppformat/cppformat"	"Small, safe and fast formatting library for C++. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1809"	"124"	"221"	"GitHub - fmtlib/fmt: Small, safe and fast formatting library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 124 Star 1,809 Fork 221 fmtlib/fmt Code Issues 12 Pull requests 2 Pulse Graphs Small, safe and fast formatting library http://fmtlib.net 2,200 commits 4 branches 12 releases 38 contributors C++ 97.4% Python 1.7% CMake 0.9% HTML 0.0% Batchfile 0.0% Makefile 0.0% C++ Python CMake HTML Batchfile Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coverity master print-colored string Nothing to show v0.11.0 3.0.0 2.1.1 2.1.0 2.0.1 2.0.0 1.1.0 1.0.0 0.12.0 0.10.0 0.9.0 0.8.0 Nothing to show New pull request Latest commit 0d5ef5c Jul 12, 2016 vitaut Fix inclusion of printf.h in the header-only config (#354) Permalink Failed to load latest commit information. cppformat Add compatibility headers Apr 24, 2016 doc Update documentation build instructions Jun 22, 2016 fmt Fix inclusion of printf.h in the header-only config (#354) Jul 12, 2016 support Remove unused scripts Jun 22, 2016 test check -> const_check to avoid a conflict with AssertMacros.h (#350) Jul 12, 2016 .gitignore Fix building source package May 8, 2016 .travis.yml Simplify build config and enable C++11 by default Feb 9, 2016 Android.mk Update Android config Apr 24, 2016 CMakeLists.txt Bump version Jun 14, 2016 ChangeLog.rst Fix formatting May 8, 2016 LICENSE.rst Update copyright (#314) May 4, 2016 README.rst Update README.rst Jun 3, 2016 README.rst {fmt} fmt is an open-source formatting library for C++. It can be used as a safe alternative to printf or as a fast alternative to IOStreams. Documentation Features Two APIs: faster concatenation-based write API and slower, but still very fast, replacement-based format API with positional arguments for localization. Write API similar to the one used by IOStreams but stateless allowing faster implementation. Format API with format string syntax similar to the one used by str.format in Python. Safe printf implementation including the POSIX extension for positional arguments. Support for user-defined types. High speed: performance of the format API is close to that of glibc's printf and better than the performance of IOStreams. See Speed tests and Fast integer to string conversion in C++. Small code size both in terms of source code (the core library consists of a single header file and a single source file) and compiled code. See Compile time and code bloat. Reliability: the library has an extensive set of unit tests. Safety: the library is fully type safe, errors in format strings are reported using exceptions, automatic memory management prevents buffer overflow errors. Ease of use: small self-contained code base, no external dependencies, permissive BSD license Portability with consistent output across platforms and support for older compilers. Clean warning-free codebase even on high warning levels (-Wall -Wextra -pedantic). Support for wide strings. Optional header-only configuration enabled with the FMT_HEADER_ONLY macro. See the documentation for more details. Examples This prints Hello, world! to stdout: fmt::print(""Hello, {}!"", ""world"");  // uses Python-like format string syntax fmt::printf(""Hello, %s!"", ""world""); // uses printf format string syntax Arguments can be accessed by position and arguments' indices can be repeated: std::string s = fmt::format(""{0}{1}{0}"", ""abra"", ""cad""); // s == ""abracadabra"" fmt can be used as a safe portable replacement for itoa: fmt::MemoryWriter w; w << 42;           // replaces itoa(42, buffer, 10) w << fmt::hex(42); // replaces itoa(42, buffer, 16) // access the string using w.str() or w.c_str() An object of any user-defined type for which there is an overloaded std::ostream insertion operator (operator<<) can be formatted: class Date {   int year_, month_, day_;  public:   Date(int year, int month, int day) : year_(year), month_(month), day_(day) {}    friend std::ostream &operator<<(std::ostream &os, const Date &d) {     return os << d.year_ << '-' << d.month_ << '-' << d.day_;   } };  std::string s = fmt::format(""The date is {}"", Date(2012, 12, 9)); // s == ""The date is 2012-12-9"" You can use the FMT_VARIADIC macro to create your own functions similar to format and print which take arbitrary arguments: // Prints formatted error message. void report_error(const char *format, fmt::ArgList args) {   fmt::print(""Error: "");   fmt::print(format, args); } FMT_VARIADIC(void, report_error, const char *)  report_error(""file not found: {}"", path); Note that you only need to define one function that takes fmt::ArgList argument. FMT_VARIADIC automatically defines necessary wrappers that accept variable number of arguments. Projects using this library 0 A.D.: A free, open-source, cross-platform real-time strategy game AMPL/MP: An open-source library for mathematical programming HarpyWar/pvpgn: Player vs Player Gaming Network with tweaks KBEngine: An open-source MMOG server engine Keypirinha: A semantic launcher for Windows Lifeline: A 2D game MongoDB Smasher: A small tool to generate randomized datasets PenUltima Online (POL): An MMO server, compatible with most Ultima Online clients quasardb: A distributed, high-performance, associative database readpe: Read Portable Executable redis-cerberus: A Redis cluster proxy Saddy: Small crossplatform 2D graphic engine Salesforce Analytics Cloud: Business intelligence software spdlog: Super fast C++ logging library Stellar: Financial platform Touch Surgery: Surgery simulator TrinityCore: Open-source MMORPG framework More... If you are aware of other projects using this library, please let me know by email or by submitting an issue. Motivation So why yet another formatting library? There are plenty of methods for doing this task, from standard ones like the printf family of function and IOStreams to Boost Format library and FastFormat. The reason for creating a new library is that every existing solution that I found either had serious issues or didn't provide all the features I needed. Printf The good thing about printf is that it is pretty fast and readily available being a part of the C standard library. The main drawback is that it doesn't support user-defined types. Printf also has safety issues although they are mostly solved with __attribute__ ((format (printf, ...)) in GCC. There is a POSIX extension that adds positional arguments required for i18n to printf but it is not a part of C99 and may not be available on some platforms. IOStreams The main issue with IOStreams is best illustrated with an example: std::cout << std::setprecision(2) << std::fixed << 1.23456 << ""\n""; which is a lot of typing compared to printf: printf(""%.2f\n"", 1.23456); Matthew Wilson, the author of FastFormat, referred to this situation with IOStreams as ""chevron hell"". IOStreams doesn't support positional arguments by design. The good part is that IOStreams supports user-defined types and is safe although error reporting is awkward. Boost Format library This is a very powerful library which supports both printf-like format strings and positional arguments. The main its drawback is performance. According to various benchmarks it is much slower than other methods considered here. Boost Format also has excessive build times and severe code bloat issues (see Benchmarks). FastFormat This is an interesting library which is fast, safe and has positional arguments. However it has significant limitations, citing its author: Three features that have no hope of being accommodated within the current design are: Leading zeros (or any other non-space padding) Octal/hexadecimal encoding Runtime width/alignment specification It is also quite big and has a heavy dependency, STLSoft, which might be too restrictive for using it in some projects. Loki SafeFormat SafeFormat is a formatting library which uses printf-like format strings and is type safe. It doesn't support user-defined types or positional arguments. It makes unconventional use of operator() for passing format arguments. Tinyformat This library supports printf-like format strings and is very small and fast. Unfortunately it doesn't support positional arguments and wrapping it in C++98 is somewhat difficult. Also its performance and code compactness are limited by IOStreams. Boost Spirit.Karma This is not really a formatting library but I decided to include it here for completeness. As IOStreams it suffers from the problem of mixing verbatim text with arguments. The library is pretty fast, but slower on integer formatting than fmt::Writer on Karma's own benchmark, see Fast integer to string conversion in C++. Benchmarks Speed tests The following speed tests results were generated by building tinyformat_test.cpp on Ubuntu GNU/Linux 14.04.1 with g++-4.8.2 -O3 -DSPEED_TEST -DHAVE_FORMAT, and taking the best of three runs. In the test, the format string ""%0.10f:%04d:%+g:%s:%p:%c:%%\n"" or equivalent is filled 2000000 times with output sent to /dev/null; for further details see the source. Library Method Run Time, s EGLIBC 2.19 printf 1.30 libstdc++ 4.8.2 std::ostream 1.85 fmt 1.0 fmt::print 1.42 tinyformat 2.0.1 tfm::printf 2.25 Boost Format 1.54 boost::format 9.94 As you can see boost::format is much slower than the alternative methods; this is confirmed by other tests. Tinyformat is quite good coming close to IOStreams. Unfortunately tinyformat cannot be faster than the IOStreams because it uses them internally. Performance of fmt is close to that of printf, being faster than printf on integer formatting, but slower on floating-point formatting which dominates this benchmark. Compile time and code bloat The script bloat-test.py from format-benchmark tests compile time and code bloat for nontrivial projects. It generates 100 translation units and uses printf() or its alternative five times in each to simulate a medium sized project. The resulting executable size and compile time (g++-4.8.1, Ubuntu GNU/Linux 13.10, best of three) is shown in the following tables. Optimized build (-O3) Method Compile Time, s Executable size, KiB Stripped size, KiB printf 2.6 41 30 IOStreams 19.4 92 70 fmt 46.8 46 34 tinyformat 64.6 418 386 Boost Format 222.8 990 923 As you can see, fmt has two times less overhead in terms of resulting code size compared to IOStreams and comes pretty close to printf. Boost Format has by far the largest overheads. Non-optimized build Method Compile Time, s Executable size, KiB Stripped size, KiB printf 2.1 41 30 IOStreams 19.7 86 62 fmt 47.9 108 86 tinyformat 27.7 234 190 Boost Format 122.6 884 763 libc, libstdc++ and libfmt are all linked as shared libraries to compare formatting function overhead only. Boost Format and tinyformat are header-only libraries so they don't provide any linkage options. Running the tests Please refer to Building the library for the instructions on how to build the library and run the unit tests. Benchmarks reside in a separate repository, format-benchmarks, so to run the benchmarks you first need to clone this repository and generate Makefiles with CMake: $ git clone --recursive https://github.com/fmtlib/format-benchmark.git $ cd format-benchmark $ cmake .  Then you can run the speed test: $ make speed-test  or the bloat test: $ make bloat-test  License fmt is distributed under the BSD license. The Format String Syntax section in the documentation is based on the one from Python string module documentation adapted for the current library. For this reason the documentation is distributed under the Python Software Foundation license available in doc/python-license.txt. It only applies if you distribute the documentation of fmt. Acknowledgments The benchmark section of this readme file and the performance tests are taken from the excellent tinyformat library written by Chris Foster. Boost Format library is acknowledged transitively since it had some influence on tinyformat. Some ideas used in the implementation are borrowed from Loki SafeFormat and Diagnostic API in Clang. Format string syntax and the documentation are based on Python's str.format. Thanks Doug Turnbull for his valuable comments and contribution to the design of the type-safe API and Gregory Czajkowski for implementing binary formatting. Thanks Ruslan Baratov for comprehensive comparison of integer formatting algorithms and useful comments regarding performance, Boris Kaul for C++ counting digits benchmark. Thanks to CarterLi for contributing various improvements to the code. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cppformat/cppformat"	"Small, safe and fast formatting library for C++. [BSD]"	"true"
"Miscellaneous"	"FastFormat"	"http://www.fastformat.org/"	"Fast, Safe C++ Formatting inspired by log4j and Pantheios [Simplified BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"FastFormat - The fastest, most robust C++ formatting library FastFormat fast:         -  firm against attack; impregnable; strong; not loose, unstable, or easily moved; not easily disturbed or broken         -  swift; rapid; quick in motion Links Home Download SourceForge Project Website Blog Documentation Help Forum Request FastFormat training Donate Performance Memory Guessing Game STLSoft Pantheios   Ultimate robustness! 100% type-safe Unlimited flexibility! infinitely extensible Unbeatable performance! 5 - 17 times faster than Boost.Format 1.5 - 5.5 times faster than Loki.SafeFormat The History 15 years of dissatisfaction (with the IOStreams) and wondering (whether there is a better alternative to fprintf()). 2 giants (log4j and Pantheios) on whose inspirational shoulders to stand. 1 powerful concept (Shim) married to 1 persuasive pattern (Type Tunnel) 1 weekend to prove the concept Almost 2 years faffing around with work, and Pantheios, and Extended STL, and Monolith*, and so on before getting my act together and releasing it. The rest of my C++ programming life to enjoy fast, extensible, localised and 100% type-safe text formatting/output. The Alternative Are you dissatisfied with the usability, performance, lack of type-safety, and lack of / difficulty with extensibility of the printf()-family, Boost.Format and the IOStreams? Do you value speed, robustness and internationalisation support? If the answer to these questions is yes, meet FastFormat, the best C++ output/formatting library you'll ever use. It has: Very high robustness, including 100% type-safety. It is more robust than: C's Streams, C++'s IOStreams, Boost.Format and Loki.SafeFormat. Indeed, with the FastFormat.Write API it is impossible to write defective client code! Very high efficiency. It is faster than: C++'s IOStreams (by ~100-900%), Boost.Format (by ~400-1600%) and Loki.SafeFormat (by ~35-450%). Verify the performance claims for yourself: just type ""make test.performance""! Infinite extensibility. You can extend it to work with any argument type, any output/destination type, and with any format type I18N/L10N capabilities. The FastFormat.Format API is a replacement-based API (like the printf()-family, Boost.Format and Loki.SafeFormat), and supports the runtime specification of format strings which facilitates L10N Simple syntax. There are no overloaded operators, no weird insertion operators/operations, and no need to prep your arguments. Just write simple, clear, transparent code, without sacrificing expressiveness for flexibility. Atomic operation. It doesn't write out statement elements one at a time, like the IOStreams, so has no atomicity issues Thread safety. Each statement operates independently from all others, and it works successfully in single and/or multithreaded scenarios Highly portable. It will work with all good modern C++ compilers; it even works with Visual C++ 6! And it does all of this without macros, operator overloading or template meta-programming tricks. News 22nd June 2010   FastFormat 0.6.1 (alpha 1) is released. Version 0.6.1 (alpha 1) incorporates performance optimisations in the application layer templates for all statements, and to the conversion of default-formatted integers. More details ... June 2010   Dr. Dobb's has published the article C++ and format_iterator, which describes the design and implmentation of a flexible, expressive and type-safe output iterator component, which can be used in preference to std::ostream_iterator. 13th April 2010   FastFormat 0.5.6 is released. Version 0.5.6 adds support for '#' fill character, as well as providing greater detection (and rejecton) of defective format specifications. More details ... June 2009   The June issue of the ACCU's Overload magazine contains An Introduction to FastFormat, part 3: Solving Real Problems, Quickly. This is the third in a series of three articles about FastFormat that examine the current alternatives in C++ formatting, and demonstrate how FastFormat provides an optimal mix of robustness, efficiency, flexibility, expressiveness and other software quality measures. 1st May 2009   FastFormat 0.3.5 is released. Version 0.3.5 is a full (non-alpha, non-beta) release, and provides full compatibility with GCC, Visual C++, and several other popular compilers on 32- and 64-bit Mac OS-X, UNIX, and Windows. April 2009   The April issue of the ACCU's Overload magazine contains An Introduction to FastFormat, part 2: Custom Argument and Sink Types. This is the second in a series of three articles about FastFormat that examine the current alternatives in C++ formatting, and demonstrate how FastFormat provides an optimal mix of robustness, efficiency, flexibility, expressiveness and other software quality measures. February 2009   The February issue of the ACCU's Overload magazine contains An Introduction to FastFormat, part 1: The State of the Art. This is the first in a series of three articles about FastFormat that examine the current alternatives in C++ formatting, and demonstrate how FastFormat provides an optimal mix of robustness, efficiency, flexibility, expressiveness and other software quality measures. There're a couple of typos in Table 4, which are corrected here. 13th February 2009   FastFormat 0.3.1 beta 3 is released. Version 0.3 includes the ability to specify min-width and/or max-width and/or alignment; beta 3 provides full compatibility with Borland 6.1 28th December 2008   FastFormat 0.2.1 beta 6 is released. It now contains comparisons - favourable ones, as you'd expect - with Loki's SafeFormat, to accompany those with Boost, C's Streams and C++'s IOStreams 3rd September 2008   FastFormat 0.2.1 (alpha 1) is released.    * Availability of FastFormat was been held up by the world of work, and by preparation phase of the book Breaking Up The Monolith: Advanced C++ Design Without Compromise, which should be completed before end of Q2 2010. Monolith discusses various concepts, patterns, practices and principles which, when applied, may be used to create high-quality libraries such as FastFormat and Pantheios   "	"null"	"null"	"Fast, Safe C++ Formatting inspired by log4j and Pantheios [Simplified BSD]"	"true"
"Miscellaneous"	"casacore"	"https://code.google.com/p/casacore/"	"A set of c++ core libraries derived from aips++. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"A set of c++ core libraries derived from aips++. [LGPL]"	"true"
"Miscellaneous"	"CppVerbalExpressions"	"https://github.com/VerbalExpressions/CppVerbalExpressions"	"C++ regular expressions made easy. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"184"	"34"	"23"	"GitHub - VerbalExpressions/CppVerbalExpressions: C++ regular expressions made easy Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 184 Fork 23 VerbalExpressions/CppVerbalExpressions Code Issues 0 Pull requests 0 Pulse Graphs C++ regular expressions made easy 46 commits 3 branches 0 releases Fetching contributors C++ 94.7% CMake 5.3% C++ CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cmake master refactor Nothing to show Nothing to show New pull request Latest commit e6b3175 Jul 15, 2015 whackashoe Merge pull request #6 from VerbalExpressions/refactor … Refactor Permalink Failed to load latest commit information. .gitignore Merge branch 'master' of https://github.com/VerbalExpressions/CppVerb… Jul 15, 2015 CMakeLists.txt Added CMakeLists.txt Aug 6, 2013 LICENSE initial commit Jul 27, 2013 README.md make range take a vector of pairs Jul 15, 2015 example.cpp have example write match / doesn't match Jul 15, 2015 verbalexpressions.hpp whitespace Jul 15, 2015 README.md CppVerbalExpressions C++ Regular Expressions made easy VerbalExpressions is a C++11 Header library that helps to construct difficult regular expressions. This C++ lib is based off of the (original) Javascript VerbalExpressions library by jehna. Other Implementations You can see an up to date list of all ports on VerbalExpressions.github.io. Javascript Ruby C# Python Java PHP How to get started In case you do not have C++11 compliant standard library you can still use boost.regex. Examples Here's a couple of simple examples to give an idea of how VerbalExpressions works: Testing if we have a valid URL // Create an example of how to test for correctly formed URLs verex expr = verex()             .search_one_line()             .start_of_line()             .then( ""http"" )             .maybe( ""s"" )             .then( ""://"" )             .maybe( ""www."" )             .anything_but( "" "" )             .end_of_line();  // Use verex's test() function to find if it matches std::cout << expr.test(""https://www.google.com"") << std::endl;  // Ouputs the actual expression used: ^(?:http)(?:s)?(?:://)(?:www.)?(?:[^ ]*)$ std::cout << expr << std::endl; Replacing strings // Create a test string std::string replaceMe = ""Replace bird with a duck""; // Create an expression that seeks for word ""bird"" verex expr2 = verex().find(""bird""); // Execute the expression std::cout << expr2.replace(replaceMe, ""duck"") << std::endl; Shorthand for string replace: std::cout << verex().find( ""red"" ).replace( ""We have a red house"", ""blue"" ) << std::endl; Here you can find the API documentation for Verbal Expressions Basic usage Basic usage of Verbal Expressions starts from the expression verex(). You can chain methods afterwards. Those are described under the ""terms"" section. auto expr = verex(); API Terms .anything() .anything_but( const std::string & value ) .something() .something_but(const std::string & value) .end_of_line() .find( const std::string & value ) .maybe( const std::string & value ) .start_of_line() .then( const std::string & value ) Special characters and groups .any( const std::string & value ) .any_of( const std::string & value ) .br() .linebreak() .range( const std::vector> & args ) .range( const std::std::string & a, const & std::string b ) .tab() .word() Modifiers .with_any_case() .search_one_line() .search_global() Functions .replace( const std::string & source, const std::string & value ) .test() Other .add( expression ) .multiple( const std::string & value ) .alt() Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/VerbalExpressions/CppVerbalExpressions"	"C++ regular expressions made easy. [MIT]"	"true"
"Miscellaneous"	"QtVerbalExpressions"	"https://github.com/VerbalExpressions/QtVerbalExpressions"	"This Qt lib is based off of the C++ VerbalExpressions library. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18"	"22"	"4"	"GitHub - VerbalExpressions/QtVerbalExpressions Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 18 Fork 4 VerbalExpressions/QtVerbalExpressions Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 15 commits 1 branch 0 releases Fetching contributors C++ 100.0% C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ae41a7d Feb 8, 2015 skhaz Merge pull request #4 from cybercatalyst/master … Updated to latest qt-pods. Permalink Failed to load latest commit information. example LICENSE QVerbalExpressions.cpp Add Tests.cpp and fixed another typo Sep 10, 2013 QVerbalExpressions.h README.md qtverbalexpressions.pri Updated to latest qt-pods. Feb 7, 2015 qtverbalexpressions.pro README.md QtVerbalExpressions Qt Regular Expressions made easy This Qt lib is based off of the C++ VerbalExpressions library by whackashoe. Testing if we have a valid URL auto expression = QVerbalExpressions()   .searchOneLine()   .startOfLine()   .then(""http"")   .maybe(""s"")   .then(""://"")   .maybe(""www."")   .anythingBut("" "")   .endOfLine();  qDebug()   << expression // ^(?:http)(?:s)?(?:://)(?:www.)?(?:[^ ]*)$   << expression.test(""https://www.google.com""); // true API Terms .anything() .anythingBut(const QString& value) .something() .somethingBut(const QString& value) .endOfLine() .find(const QString& value) .maybe(const QString& value) .startOfLine() .then(const QString& value) Special characters and groups .any(const QString& value) .anyOf(const QString& value) .br() .lineBreak() .range(const std::initializer_list& args) .tab() .word() Modifiers .withAnyCase() .searchOneLine() .searchGlobal() Functions .replace(const QString& source, const QString& value) .test() Other .add(expression) .multiple(const QString& value) .alt() Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/VerbalExpressions/QtVerbalExpressions"	"This Qt lib is based off of the C++ VerbalExpressions library. [MIT]"	"true"
"Miscellaneous"	"c-smart-pointers"	"https://github.com/Snaipe/libcsptr"	"Smart pointers for the (GNU) C programming language. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"556"	"38"	"35"	"GitHub - Snaipe/libcsptr: Smart pointers for the (GNU) C programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 556 Fork 35 Snaipe/libcsptr Code Issues 1 Pull requests 0 Pulse Graphs Smart pointers for the (GNU) C programming language http://snaipe.me/c/c-smart-pointers/ 143 commits 2 branches 10 releases Fetching contributors CMake 67.5% C 23.3% Shell 9.2% CMake C Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags criterion-tests master Nothing to show v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.0 v0.3.1 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit 0de5889 Jan 1, 2016 Snaipe We're in 2016. Permalink Failed to load latest commit information. .cmake Removed generation of empty libcsptr deb package Nov 28, 2015 check Switched build system to CMake Jul 31, 2015 doc [v2.0.0] Stable release Mar 18, 2015 include/csptr We're in 2016. Jan 6, 2016 src We're in 2016. Jan 6, 2016 .gitignore Added project compilation instructions. Nov 8, 2015 .travis.yml Manually added coveralls repo token in travis environment Jul 31, 2015 CMakeLists.txt Removed generation of empty libcsptr deb package Nov 28, 2015 ChangeLog Changed smalloc prototype to used named parameters Mar 21, 2015 HEADER We're in 2016. Jan 6, 2016 INSTALL.md Added project compilation instructions. Nov 8, 2015 LICENSE We're in 2016. Jan 6, 2016 README.md Fixed formatting for deb installation block in README Nov 28, 2015 debian.copyright Fixed placeholder project url in debian.copyright Nov 28, 2015 description.txt Added missing debian files Nov 28, 2015 README.md C Smart Pointers What this is This project is a tentative attempt to bring smart pointer constructs to the (GNU) C programming language. Features unique_ptr, shared_ptr macros, and smart type attribute Destructor support for cleanup Custom variable metadata on allocation Cross-platform: tested under linux 3.18.6-1, Mac OS X Yosemite 10.10, and Windows 7 (with MinGW and the Cygwin port of GCC) Installing With a package manager Mac OS X: brew install snaipe/soft/libcsptr AUR: yaourt -S libcsptr Ubuntu: $ sudo add-apt-repository ppa:snaipewastaken/ppa $ sudo apt-get update $ sudo apt-get install libcsptr-dev Building from source Prerequisites To compile the library, GCC 4.6+ is needed. Installation Clone this repository run mkdir build && cd $_ && cmake -DCMAKE_INSTALL_PREFIX=$HOME .. && make && make install from the project root for a local install, or run mkdir build && cd $_ && cmake -DCMAKE_INSTALL_PREFIX=/usr .. && make && sudo make install for a global install. Examples Simple unique_ptr: simple1.c: #include <stdio.h> #include <csptr/smart_ptr.h>  int main(void) {     // some_int is an unique_ptr to an int with a value of 1.     smart int *some_int = unique_ptr(int, 1);      printf(""%p = %d\n"", some_int, *some_int);      // some_int is destroyed here     return 0; } Shell session: $ gcc -std=c99 -o simple1 simple1.c -lcsptr $ valgrind ./simple1 ==3407== Memcheck, a memory error detector ==3407== Copyright (C) 2002-2013, and GNU GPL\'d, by Julian Seward et al. ==3407== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info ==3407== Command: ./test1 ==3407== 0x53db068 = 1 ==3407== ==3407== HEAP SUMMARY: ==3407==     in use at exit: 0 bytes in 0 blocks ==3407==   total heap usage: 1 allocs, 1 frees, 48 bytes allocated ==3407== ==3407== All heap blocks were freed -- no leaks are possible ==3407== ==3407== For counts of detected and suppressed errors, rerun with: -v ==3407== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) Simple unique_ptr with destructor: #include <unistd.h> #include <fcntl.h> #include <csptr/smart_ptr.h>  struct log_file {     int fd;     // ... };  void cleanup_log_file(void *ptr, void *meta) {     (void) meta;     close(((struct log_file *) ptr)->fd); }  int main(void) {     smart struct log_file *log = unique_ptr(struct log_file, {             .fd = open(""/dev/null"", O_WRONLY | O_APPEND),             // ...         }, cleanup_log_file);      write(log->fd, ""Hello"", 5);      // cleanup_log_file is called, then log is freed     return 0; } Allocating a smart array and printing its contents before destruction: #include <stdio.h> #include <csptr/smart_ptr.h> #include <csptr/array.h>  void print_int(void *ptr, void *meta) {     (void) meta;     // ptr points to the current element     // meta points to the array metadata (global to the array), if any.     printf(""%d\n"", *(int*) ptr); }  int main(void) {     // Destructors for array types are run on every element of the     // array before destruction.     smart int *ints = unique_ptr(int[5], {5, 4, 3, 2, 1}, print_int);     // ints == {5, 4, 3, 2, 1}      // Smart arrays are length-aware     for (size_t i = 0; i < array_length(ints); ++i) {         ints[i] = i + 1;     }     // ints == {1, 2, 3, 4, 5}      return 0; } More examples Using a different memory allocator (although most will replace malloc/free): #include <csptr/smart_ptr.h>  void *some_allocator(size_t); void some_deallocator(void *);  int main(void) {     smalloc_allocator = (s_allocator) {some_allocator, some_deallocator};     // ...     return 0; } Automatic cleanup on error cases: #include <unistd.h> #include <fcntl.h> #include <csptr/smart_ptr.h>  struct log_file {     int fd;     // ... };  static void close_log(void *ptr, void *meta) {     (void) meta;     struct log_file *log = ptr;     if (log->fd != -1)         close(log->fd); }  struct log_file *open_log(const char *path) {     smart struct log_file *log = shared_ptr(struct log_file, {0}, close_log);     if (!log) // failure to allocate         return NULL; // nothing happens, destructor is not called      log->fd = open(path, O_WRONLY | O_APPEND | O_CREAT, 0644);     if (log->fd == -1) // failure to open         return NULL; // log gets destroyed, file descriptor is not closed since fd == -1.      return sref(log); // a new reference on log is returned, it does not get destoyed }  int main(void) {     smart struct log_file *log = open_log(""/dev/null"");     // ...     return 0; // file descriptor is closed, log is freed } Using named parameters: #include <csptr/smart_ptr.h>  void nothing(void *ptr, void *meta) {}  int main(void) {     struct { int a; } m = { 1 };      smart int *i = unique_ptr(int,             .dtor = nothing,             .value = 42,             .meta = { &m, sizeof (m) }         );      return 0; } FAQ Q. Why didn't you use C++ you moron ? A. Because when I first started this, I was working on a C project. Also, because it's fun. Q. Can I use this on a serious project ? A. Yes, but as this project has not been widely used, there might be some bugs. Beware! Q. How did you make this ? A. Here's a link to my blog post on the matter. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Snaipe/libcsptr"	"Smart pointers for the (GNU) C programming language. [MIT]"	"true"
"Miscellaneous"	"cxx-prettyprint"	"https://github.com/louisdx/cxx-prettyprint"	"A pretty printing library for C++ containers. [Boost]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"221"	"15"	"39"	"GitHub - louisdx/cxx-prettyprint: A header-only library for C++(0x) that allows automagic pretty-printing of any container. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 221 Fork 39 louisdx/cxx-prettyprint Code Issues 5 Pull requests 0 Pulse Graphs A header-only library for C++(0x) that allows automagic pretty-printing of any container. http://louisdx.github.com/cxx-prettyprint/ 31 commits 2 branches 0 releases 3 contributors C++ 84.4% TeX 15.6% C++ TeX Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 9ab26d2 Apr 30, 2016 louisdx Merge pull request #21 from toroidal-code/msvc14-fix … Add missing `typename` disambiguator Permalink Failed to load latest commit information. LICENSE_1_0.txt Added license (Boost License) Aug 27, 2012 README Added mention of license to README Sep 8, 2012 ppdemo.cpp Fixed empty tuple handling Aug 12, 2014 ppdemo98.cpp Fix warnings (shadow and unused), update copyright. Aug 11, 2014 prettyprint.hpp Fix build errors for MSVC 14.0 Apr 26, 2016 prettyprint.tex Added credits. Jul 11, 2011 prettyprint98.hpp More shadowing fixes. Use unique_ptr in prettyprint.hpp. Aug 11, 2014 README cxx-prettyprint ===============  A pretty printing library for C++ containers.  Synopsis:   Simply by including this header-only library in your source file,   you can say ""std::cout << x"" for any container object x. Sensible   defaults are provided, but the behaviour (i.e. the delimiters) are   compile-time customizable to a great extent via partial specializiation.  Usage:   Just add ""#include ""prettyprint.hpp"" to your source file and make sure   that prettyprint.hpp is findable.  Language requirements: C++0x for prettyprint.hpp, C++98/03 for prettyprint98.hpp  Example:   Some usage examples are provided by ppdemo.cpp.    Using GCC, compile with     g++ -W -Wall -pedantic -O2 -s ppdemo.cpp -o ppdemo -std=c++0x      g++ -W -Wall -pedantic -O2 -s ppdemo98.cpp -o ppdemo98  For the C++98/03-version, define ""NO_TR1"" to prevent any inclusion of TR1 headers and to disable std::tr1::tuple support.  For details, please see the website (http://louisdx.github.com/cxx-prettyprint/).  License: Boost Software License, Version 1.0. See http://www.boost.org/LICENSE_1_0.txt.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/louisdx/cxx-prettyprint"	"A pretty printing library for C++ containers. [Boost]"	"true"
"Miscellaneous"	"DynaPDF"	"http://www.dynaforms.com/"	"An easy-to-use PDF generation library. [Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DynaPDF - More than just a PDF library This page requires Javascript. Please enable Javascript in your browser settings. Deutsch Home Features FAQ Versioning Operating Systems Examples Download Order New License Upgrade from DynaPDF 2.x Change / Renew DynaPDF License Plugin for Xojo & Real Studio Plugin for FileMaker Contact Disclaimer Customer Area Customer Area Register 13 Years DynaPDF The journey goes on. The focus of development was this time the PDF/A conversion and support of the ZUGFeRD format. On ZUGFeRD leads in Germany surely no way around, so the format was fully integrated into DynaPDF. Operating Systems If you develop your applications for more than just one operating system, then the PDF Library has to support the required operating systems too. Who wants to develop the PDF output for every platform again? Exactly, no one... More Conversion from CMYK U.S. Web Coated to sRGB with Color Management. Conversion von CMYK U.S. Web Coated to sRGB without Color Management. Color Management DynaPDF is one of the few libraries that supports color management from the creation till to the view, including soft proof! With the right tool, color management is quite simple... More   Anyone who needs to edit or create PDF files on client / server systems, requires a PDF library that can deal with current PDF files in the future. The PDF format was greatly extended in recent years and the development does never end. A PDF library must keep pace with this development but it is almost impossible to implement all new features immediately after the publication of a new version of PDF. Therefore, a PDF library should ensure that new features do not lead to errors or even data loss. In DynaPDF this is of course the case. The PDF import is version independent and therefore supports features that do not even exist today. As long as the PDF syntax will not be changed, any PDF file can be imported correctly and saved without data loss. Due to the variety of applications which can create PDF files today, the error handling and repair capabilities for damaged files play also an increasingly important role. The repair capabilities must be at least as good as the ones in common PDF viewers to avoid unnecessary support requests. Therefore, we take care that also heavily damaged files can still be opened with DynaPDF. Not all damages must necessarily be repaired, that would be an almost impossible task, but the intact parts of a PDF file should still be accessible. Of course, DynaPDF leaves file errors not in the dark. Almost all repairs and found errors are stored in an error log. For problems, the error source can therefore be determined quite quickly. Since practically all errors are logged, DynaPDF must of course itself produce very clean files. DynaPDF 4.0 What is new? Programming Languages Operating Systems Backward Compatibility Rendering Engine Color Management Tables PHP Extension PDF/A Extension ZUGFeRD invoices Licensing License Calculator Online Demos © Copyright 2003-2016 Jens Boschulte, DynaForms GmbH. All Rights Reserved."	"null"	"null"	"An easy-to-use PDF generation library. [Commercial]"	"true"
"Miscellaneous"	"gcc-poison"	"https://github.com/leafsr/gcc-poison"	"A simple header file for developers to ban unsafe C/C++ functions from applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"109"	"12"	"15"	"GitHub - leafsr/gcc-poison: gcc-poison Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 109 Fork 15 leafsr/gcc-poison Code Issues 3 Pull requests 1 Pulse Graphs gcc-poison 6 commits 2 branches 0 releases Fetching contributors Objective-C 100.0% Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags akesterson-master master Nothing to show Nothing to show New pull request Latest commit fb90b9f Dec 3, 2013 Chris manual patch add from akesterson Permalink Failed to load latest commit information. README.md manual patch add from akesterson Dec 3, 2013 poison.h Fix tabs Nov 29, 2013 README.md gcc-poison gcc-poison is a simple header file for developers to ban unsafe C/C++ functions from applications. It uses the #pragma GCC poison directive to define a number of identifiers (function names) as unsafe. Compilation will fail if these are present in your code. Please see http://blog.leafsr.com/2013/12/gcc-poison.html for more information http://leafsr.com Example usage #include <stdio.h> #include <string.h> #include ""gcc-poison.h""  int main(int argc, char *argv[]) {    char buf[10];    strcpy(buf, argv[1]);    return 0; }  $ gcc -o 2 2.c 1.c: In function ‘main’: 1.c:8:2: error: attempt to use poisoned ""strcpy""  Excluding specific functions from poisoning As pointed out in the GCC documentation (http://gcc.gnu.org/onlinedocs/cpp/Pragmas.html), ""If a poisoned identifier appears as part of the expansion of a macro which was defined before the identifier was poisoned, it will not cause an error. This lets you poison an identifier without worrying about system headers defining macros that use it."" Here is an example of how to use gcc-poison.h but continue to allow the usage of the 'strcat' function, via a macro: #define _unsafe_strcat strcat #include ""gcc-poison.h""  int main(void) {     char x[512];     /* this will raise an error */     strcat((char *)&x, ""lol"");     /* ... while this will NOT raise an error */     _unsafe_strcat((char *)&x, ""lol""); }  Note that you must define any such macros BEFORE you include gcc-poison.h. This can be a handy way to allow developers to continue to use certain functions for which libc has no safe alternative, while forcing them to acknowledge that they are doing so unsafely. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leafsr/gcc-poison"	"A simple header file for developers to ban unsafe C/C++ functions from applications."	"true"
"Miscellaneous"	"HTTP Parser"	"https://github.com/nodejs/http-parser"	"A http request/response parser for C. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2736"	"256"	"746"	"GitHub - nodejs/http-parser: http request/response parser for c Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 256 Star 2,736 Fork 746 nodejs/http-parser Code Issues 22 Pull requests 18 Pulse Graphs http request/response parser for c 393 commits 5 branches 18 releases 68 contributors C 96.5% Makefile 2.2% Python 1.3% C Makefile Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags event_stream master v0.6 v0.10 version0.2 Nothing to show v2.7.0 v2.6.2 v2.6.1 v2.6.0 v2.5.0 v2.5 v2.4.2 v2.4.1 v2.4 v2.3 v2.2.1 v2.2 v2.1 v2.0 v1.0 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit b2cc8e4 Apr 22, 2016 guoxiao committed with indutny test: remove ‘nread’, which is not used … PR-URL: #300 Reviewed-By: Fedor Indutny <fedor@indutny.com> Permalink Failed to load latest commit information. contrib src: introduce `http_parser_url_init` Oct 27, 2015 .gitignore header: treat Wine like MinGW Jul 22, 2015 .mailmap Bump version to 2.4.0 Jan 14, 2015 .travis.yml send travis irc notifications to #node-ci Nov 3, 2014 AUTHORS src: support LINK/UNLINK (RFC 2068, draft-snell-link-method) Oct 26, 2015 LICENSE-MIT It was pointed out we're missing attribution to NGINX May 15, 2011 Makefile Bump version to 2.6.0 Apr 19, 2016 README.md readme: improve format, fix code syntax May 31, 2016 bench.c bench: add chunked bytes Dec 5, 2014 http_parser.c src: put `assert()` after var declarations Apr 25, 2016 http_parser.gyp build: add default build flags to gyp script Oct 14, 2012 http_parser.h Bump version to 2.6.0 Apr 19, 2016 test.c test: remove ‘nread’, which is not used Jun 22, 2016 README.md HTTP Parser This is a parser for HTTP messages written in C. It parses both requests and responses. The parser is designed to be used in performance HTTP applications. It does not make any syscalls nor allocations, it does not buffer data, it can be interrupted at anytime. Depending on your architecture, it only requires about 40 bytes of data per message stream (in a web server that is per connection). Features: No dependencies Handles persistent streams (keep-alive). Decodes chunked encoding. Upgrade support Defends against buffer overflow attacks. The parser extracts the following information from HTTP messages: Header fields and values Content-Length Request method Response status code Transfer-Encoding HTTP version Request URL Message body Usage One http_parser object is used per TCP connection. Initialize the struct using http_parser_init() and set the callbacks. That might look something like this for a request parser: http_parser_settings settings; settings.on_url = my_url_callback; settings.on_header_field = my_header_field_callback; /* ... */  http_parser *parser = malloc(sizeof(http_parser)); http_parser_init(parser, HTTP_REQUEST); parser->data = my_socket; When data is received on the socket execute the parser and check for errors. size_t len = 80*1024, nparsed; char buf[len]; ssize_t recved;  recved = recv(fd, buf, len, 0);  if (recved < 0) {   /* Handle error. */ }  /* Start up / continue the parser.  * Note we pass recved==0 to signal that EOF has been received.  */ nparsed = http_parser_execute(parser, &settings, buf, recved);  if (parser->upgrade) {   /* handle new protocol */ } else if (nparsed != recved) {   /* Handle error. Usually just close the connection. */ } HTTP needs to know where the end of the stream is. For example, sometimes servers send responses without Content-Length and expect the client to consume input (for the body) until EOF. To tell http_parser about EOF, give 0 as the fourth parameter to http_parser_execute(). Callbacks and errors can still be encountered during an EOF, so one must still be prepared to receive them. Scalar valued message information such as status_code, method, and the HTTP version are stored in the parser structure. This data is only temporally stored in http_parser and gets reset on each new message. If this information is needed later, copy it out of the structure during the headers_complete callback. The parser decodes the transfer-encoding for both requests and responses transparently. That is, a chunked encoding is decoded before being sent to the on_body callback. The Special Problem of Upgrade HTTP supports upgrading the connection to a different protocol. An increasingly common example of this is the WebSocket protocol which sends a request like     GET /demo HTTP/1.1     Upgrade: WebSocket     Connection: Upgrade     Host: example.com     Origin: http://example.com     WebSocket-Protocol: sample  followed by non-HTTP data. (See RFC6455 for more information the WebSocket protocol.) To support this, the parser will treat this as a normal HTTP message without a body, issuing both on_headers_complete and on_message_complete callbacks. However http_parser_execute() will stop parsing at the end of the headers and return. The user is expected to check if parser->upgrade has been set to 1 after http_parser_execute() returns. Non-HTTP data begins at the buffer supplied offset by the return value of http_parser_execute(). Callbacks During the http_parser_execute() call, the callbacks set in http_parser_settings will be executed. The parser maintains state and never looks behind, so buffering the data is not necessary. If you need to save certain data for later usage, you can do that from the callbacks. There are two types of callbacks: notification typedef int (*http_cb) (http_parser*); Callbacks: on_message_begin, on_headers_complete, on_message_complete. data typedef int (*http_data_cb) (http_parser*, const char *at, size_t length); Callbacks: (requests only) on_url, (common) on_header_field, on_header_value, on_body; Callbacks must return 0 on success. Returning a non-zero value indicates error to the parser, making it exit immediately. For cases where it is necessary to pass local information to/from a callback, the http_parser object's data field can be used. An example of such a case is when using threads to handle a socket connection, parse a request, and then give a response over that socket. By instantiation of a thread-local struct containing relevant data (e.g. accepted socket, allocated memory for callbacks to write into, etc), a parser's callbacks are able to communicate data between the scope of the thread and the scope of the callback in a threadsafe manner. This allows http-parser to be used in multi-threaded contexts. Example:  typedef struct {   socket_t sock;   void* buffer;   int buf_len;  } custom_data_t;   int my_url_callback(http_parser* parser, const char *at, size_t length) {   /* access to thread local custom_data_t struct.   Use this access save parsed data for later use into thread local   buffer, or communicate over socket   */   parser->data;   ...   return 0; }  ...  void http_parser_thread(socket_t sock) {  int nparsed = 0;  /* allocate memory for user data */  custom_data_t *my_data = malloc(sizeof(custom_data_t));   /* some information for use by callbacks.  * achieves thread -> callback information flow */  my_data->sock = sock;   /* instantiate a thread-local parser */  http_parser *parser = malloc(sizeof(http_parser));  http_parser_init(parser, HTTP_REQUEST); /* initialise parser */  /* this custom data reference is accessible through the reference to the  parser supplied to callback functions */  parser->data = my_data;   http_parser_settings settings; /* set up callbacks */  settings.on_url = my_url_callback;   /* execute parser */  nparsed = http_parser_execute(parser, &settings, buf, recved);   ...  /* parsed information copied from callback.  can now perform action on data copied into thread-local memory from callbacks.  achieves callback -> thread information flow */  my_data->buffer;  ... }  In case you parse HTTP message in chunks (i.e. read() request line from socket, parse, read half headers, parse, etc) your data callbacks may be called more than once. Http-parser guarantees that data pointer is only valid for the lifetime of callback. You can also read() into a heap allocated buffer to avoid copying memory around if this fits your application. Reading headers may be a tricky task if you read/parse headers partially. Basically, you need to remember whether last header callback was field or value and apply the following logic: (on_header_field and on_header_value shortened to on_h_*)  ------------------------ ------------ -------------------------------------------- | State (prev. callback) | Callback   | Description/action                         |  ------------------------ ------------ -------------------------------------------- | nothing (first call)   | on_h_field | Allocate new buffer and copy callback data | |                        |            | into it                                    |  ------------------------ ------------ -------------------------------------------- | value                  | on_h_field | New header started.                        | |                        |            | Copy current name,value buffers to headers | |                        |            | list and allocate new buffer for new name  |  ------------------------ ------------ -------------------------------------------- | field                  | on_h_field | Previous name continues. Reallocate name   | |                        |            | buffer and append callback data to it      |  ------------------------ ------------ -------------------------------------------- | field                  | on_h_value | Value for current header started. Allocate | |                        |            | new buffer and copy callback data to it    |  ------------------------ ------------ -------------------------------------------- | value                  | on_h_value | Value continues. Reallocate value buffer   | |                        |            | and append callback data to it             |  ------------------------ ------------ --------------------------------------------  Parsing URLs A simplistic zero-copy URL parser is provided as http_parser_parse_url(). Users of this library may wish to use it to parse URLs constructed from consecutive on_url callbacks. See examples of reading in headers: partial example in C from http-parser tests in C from Node library in Javascript Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nodejs/http-parser"	"A http request/response parser for C. [MIT]"	"true"
"Miscellaneous"	"Klib"	"https://github.com/attractivechaos/klib"	"Small and lightweight implementations of common algorithms and data structures. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1420"	"139"	"167"	"GitHub - attractivechaos/klib: A standalone and lightweight C library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 139 Star 1,420 Fork 167 attractivechaos/klib Code Issues 14 Pull requests 17 Wiki Pulse Graphs A standalone and lightweight C library http://attractivechaos.github.io/klib/ 317 commits 3 branches 2 releases 15 contributors C 80.0% C++ 12.0% Lua 7.5% Makefile 0.5% C C++ Lua Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages ksw-reduce8 master Nothing to show spawn-final ksprintf-final Nothing to show New pull request Latest commit 325683f Dec 30, 2015 lh3 Merge branch 'master' of github.com:attractivechaos/klib Permalink Failed to load latest commit information. lua change to 0 indexed array Jun 3, 2011 test added Sep 29, 2015 .gitignore Add kputw() and kputl() tests Jul 22, 2013 README.md erh... wrong link in the last commit Nov 30, 2014 bgzf.c minor changes Oct 28, 2011 bgzf.h improved backward compatibility Oct 28, 2011 kbit.h some basic bit operations Apr 8, 2012 kbtree.h added Sep 29, 2015 kexpr.c fixed a bug and a portability issue May 22, 2015 kexpr.h set user-defined functions May 22, 2015 kgraph.h Graph related routines. Unfinished. DON'T USE! Dec 28, 2011 khash.h fix spelling mistake Oct 23, 2015 khmm.c Added the khmm library Jan 13, 2011 khmm.h Added the khmm library Jan 13, 2011 klist.h Prevent unused function warnings in khash.h, klist.h Jul 23, 2015 kmath.c draw a random number from Gaussian N(0,1) Dec 30, 2015 kmath.h draw a random number from Gaussian N(0,1) Dec 30, 2015 knetfile.c Don't call freeaddrinfo() when getaddrinfo() fails Jul 23, 2015 knetfile.h Added the knetfile library Jan 13, 2011 knhx.c Fixed output bug where branch length is not printed on branches to le… Jun 26, 2015 knhx.h print tree in the Newick format Dec 18, 2012 kopen.c Don't call freeaddrinfo() when getaddrinfo() fails Jul 23, 2015 ksa.c Constructing suffix array for multi-sentinel str. Aug 19, 2011 kseq.h Fix ks_getuntil2() extra empty record at EOF bug Nov 13, 2014 kson.c kson_query() -> kson_by_path() for clarity Nov 30, 2014 kson.h kson_query() -> kson_by_path() for clarity Nov 30, 2014 ksort.h Update ksort.h Nov 29, 2013 kstring.c Add kgetline() to kstring.c/.h Jul 23, 2015 kstring.h Add kgetline() to kstring.c/.h Jul 23, 2015 ksw.c bugfix: point address changes Feb 20, 2013 ksw.h added NW and SW-extension; backported from bwa Feb 12, 2013 kthread.c removed kt_spawn(); added kt_pipeline() Nov 30, 2014 kurl.c default to following redirect & no SSL certificate Nov 28, 2014 kurl.h allow to feed change key/secret/id-file Nov 21, 2013 kvec.h Two bugs reported by istreeter and wanghc78 Jan 26, 2013 README.md Klib: a Generic Library in C Overview Klib is a standalone and lightweight C library distributed under MIT/X11 license. Most components are independent of external libraries, except the standard C library, and independent of each other. To use a component of this library, you only need to copy a couple of files to your source code tree without worrying about library dependencies. Klib strives for efficiency and a small memory footprint. Some components, such as khash.h, kbtree.h, ksort.h and kvec.h, are among the most efficient implementations of similar algorithms or data structures in all programming languages, in terms of both speed and memory use. A new documentation is available here which includes most information in this README file. Common components khash.h: generic hash table based on double hashing. kbtree.h: generic search tree based on B-tree. ksort.h: generic sort, including introsort, merge sort, heap sort, comb sort, Knuth shuffle and the k-small algorithm. kseq.h: generic stream buffer and a FASTA/FASTQ format parser. kvec.h: generic dynamic array. klist.h: generic single-linked list and memory pool. kstring.{h,c}: basic string library. kmath.{h,c}: numerical routines including MT19937-64 pseudorandom generator, basic nonlinear programming and a few special math functions. Components for more specific use cases ksa.c: constructing suffix arrays for strings with multiple sentinels, based on a revised SAIS algorithm. knetfile.{h,c}: random access to remote files on HTTP or FTP. kopen.c: smart stream opening. khmm.{h,c}: basic HMM library. ksw.(h,c}: Striped Smith-Waterman algorithm. knhx.{h,c}: Newick tree format parser. Methodology For the implementation of generic containers, klib extensively uses C macros. To use these data structures, we usually need to instantiate methods by expanding a long macro. This makes the source code look unusual or even ugly and adds difficulty to debugging. Unfortunately, for efficient generic programming in C that lacks template, using macros is the only solution. Only with macros, we can write a generic container which, once instantiated, compete with a type-specific container in efficiency. Some generic libraries in C, such as Glib, use the void* type to implement containers. These implementations are usually slower and use more memory than klib (see this benchmark). To effectively use klib, it is important to understand how it achieves generic programming. We will use the hash table library as an example: #include ""khash.h"" KHASH_MAP_INIT_INT(m32, char)        // instantiate structs and methods int main() {     int ret, is_missing;     khint_t k;     khash_t(m32) *h = kh_init(m32);  // allocate a hash table     k = kh_put(m32, h, 5, &ret);     // insert a key to the hash table     if (!ret) kh_del(m32, h, k);     kh_value(h, k) = 10;             // set the value     k = kh_get(m32, h, 10);          // query the hash table     is_missing = (k == kh_end(h));   // test if the key is present     k = kh_get(m32, h, 5);     kh_del(m32, h, k);               // remove a key-value pair     for (k = kh_begin(h); k != kh_end(h); ++k)  // traverse         if (kh_exist(h, k))          // test if a bucket contains data             kh_value(h, k) = 1;     kh_destroy(m32, h);              // deallocate the hash table     return 0; }  In this example, the second line instantiates a hash table with unsigned as the key type and char as the value type. m32 names such a type of hash table. All types and functions associated with this name are macros, which will be explained later. Macro kh_init() initiates a hash table and kh_destroy() frees it. kh_put() inserts a key and returns the iterator (or the position) in the hash table. kh_get() and kh_del() get a key and delete an element, respectively. Macro kh_exist() tests if an iterator (or a position) is filled with data. An immediate question is this piece of code does not look like a valid C program (e.g. lacking semicolon, assignment to an apparent function call and apparent undefined m32 'variable'). To understand why the code is correct, let's go a bit further into the source code of khash.h, whose skeleton looks like: #define KHASH_INIT(name, SCOPE, key_t, val_t, is_map, _hashf, _hasheq) \   typedef struct { \     int n_buckets, size, n_occupied, upper_bound; \     unsigned *flags; \     key_t *keys; \     val_t *vals; \   } kh_##name##_t; \   SCOPE inline kh_##name##_t *init_##name() { \     return (kh_##name##_t*)calloc(1, sizeof(kh_##name##_t)); \   } \   SCOPE inline int get_##name(kh_##name##_t *h, key_t k) \   ... \   SCOPE inline void destroy_##name(kh_##name##_t *h) { \     if (h) { \       free(h->keys); free(h->flags); free(h->vals); free(h); \     } \   }  #define _int_hf(key) (unsigned)(key) #define _int_heq(a, b) (a == b) #define khash_t(name) kh_##name##_t #define kh_value(h, k) ((h)->vals[k]) #define kh_begin(h, k) 0 #define kh_end(h) ((h)->n_buckets) #define kh_init(name) init_##name() #define kh_get(name, h, k) get_##name(h, k) #define kh_destroy(name, h) destroy_##name(h) ... #define KHASH_MAP_INIT_INT(name, val_t) \     KHASH_INIT(name, static, unsigned, val_t, is_map, _int_hf, _int_heq)  KHASH_INIT() is a huge macro defining all the structs and methods. When this macro is called, all the code inside it will be inserted by the C preprocess to the place where it is called. If the macro is called multiple times, multiple copies of the code will be inserted. To avoid naming conflict of hash tables with different key-value types, the library uses token concatenation, which is a preprocessor feature whereby we can substitute part of a symbol based on the parameter of the macro. In the end, the C preprocessor will generate the following code and feed it to the compiler (macro kh_exist(h,k) is a little complex and not expanded for simplicity): typedef struct {   int n_buckets, size, n_occupied, upper_bound;   unsigned *flags;   unsigned *keys;   char *vals; } kh_m32_t; static inline kh_m32_t *init_m32() {   return (kh_m32_t*)calloc(1, sizeof(kh_m32_t)); } static inline int get_m32(kh_m32_t *h, unsigned k) ... static inline void destroy_m32(kh_m32_t *h) {   if (h) {     free(h->keys); free(h->flags); free(h->vals); free(h);   } }  int main() {     int ret, is_missing;     khint_t k;     kh_m32_t *h = init_m32();     k = put_m32(h, 5, &ret);     if (!ret) del_m32(h, k);     h->vals[k] = 10;     k = get_m32(h, 10);     is_missing = (k == h->n_buckets);     k = get_m32(h, 5);     del_m32(h, k);     for (k = 0; k != h->n_buckets; ++k)         if (kh_exist(h, k)) h->vals[k] = 1;     destroy_m32(h);     return 0; }  This is the C program we know. From this example, we can see that macros and the C preprocessor plays a key role in klib. Klib is fast partly because the compiler knows the key-value type at the compile time and is able to optimize the code to the same level as type-specific code. A generic library written with void* will not get such performance boost. Massively inserting code upon instantiation may remind us of C++'s slow compiling speed and huge binary size when STL/boost is in use. Klib is much better in this respect due to its small code size and component independency. Inserting several hundreds lines of code won't make compiling obviously slower. Resources Library documentation, if present, is available in the header files. Examples can be found in the test/ directory. Obsolete documentation of the hash table library can be found at SourceForge. This README is partly adapted from the old documentation. Blog post describing the hash table library. Blog post on why using void* for generic programming may be inefficient. Blog post on the generic stream buffer. Blog post evaluating the performance of kvec.h. Blog post arguing B-tree may be a better data structure than a binary search tree. Blog post evaluating the performance of khash.h and kbtree.h among many other implementations. An older version of the benchmark is also available. Blog post benchmarking internal sorting algorithms and implementations. Blog post on the k-small algorithm. Blog post on the Hooke-Jeeve's algorithm for nonlinear programming. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/attractivechaos/klib"	"Small and lightweight implementations of common algorithms and data structures. [MIT]"	"true"
"Miscellaneous"	"libsigc++"	"http://libsigc.sourceforge.net/"	"A typesafe callback system for standard C++. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"libsigc++ -- The Typesafe Callback Framework for C++ Main Features License Documentation Download Mailing List Patches Git Links Callback Framework for C++ About libsigc++ implements a typesafe callback system for standard C++. It allows you to define signals and to connect those signals to any callback function, either global or a member function, regardless of whether it is static or virtual. It also contains adaptor classes for connection of dissimilar callbacks and has an ease of use unmatched by other C++ callback libraries. Libsigc++ is licensed under the GNU Library General Public License, LGPL. Features Compile time typesafe callbacks (faster than run time checks) Typesafety violations report line number correctly with template names (no tracing template failures into headers) No compiler extensions or meta compilers required Proper handling of dynamic objects and signals (deleted objects will not cause seg faults) Extendable API at any level: signal, slot, connection and trackable Extensions do not require alteration of basic components User definable accumulators A variety of adaptors to change the callback signature: bind, hide, retype, compose Most C++ compilers can be used. libsigc++ version 2.5.1 and later require a compiler with C++11 support News See the NEWS file in git. Developers The original library was composed by Tero Pulkkinen for the gtkmm system, a C++ wrapper for the Gtk+ widget set. The revised library was written and mantained by Karl Nelson. Special thanks to Esa Pulkkinen for development tips. The 1.2 phase was maintained by Murray Cumming after Karl provided the initial 1.2 code. A long 1.9 phase led to the major release 2.0, previously maintained by Martin Schulze, and then maintained by Murray Cumming and Kjell Ahlstedt. Then libsigc++ was rewritten for C++14 using variadic templates, for major release 3.0, currently maintained by Murray Cumming and Kjell Ahlstedt. libsigc++ mailing list | website source |  "	"null"	"null"	"A typesafe callback system for standard C++. [LGPL]"	"true"
"Miscellaneous"	"libcpuid"	"https://github.com/anrieff/libcpuid"	"A small C library for x86 CPU detection and feature extraction. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"58"	"12"	"18"	"GitHub - anrieff/libcpuid: a small C library for x86 CPU detection and feature extraction Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 58 Fork 18 anrieff/libcpuid Code Issues 1 Pull requests 0 Pulse Graphs a small C library for x86 CPU detection and feature extraction 289 commits 1 branch 3 releases 7 contributors C 91.1% Python 3.1% C++ 2.2% Assembly 2.0% Other 1.6% C Python C++ Assembly Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.0 v0.2.2 v0.2.1 Nothing to show New pull request Latest commit 2a11739 Jul 10, 2016 anrieff Update the release date for 0.3.0 in the ChangeLog. Permalink Failed to load latest commit information. contrib/MSR Driver Added support for reading MSRs through dedicated driver on Win32 Sep 30, 2009 cpuid_tool Update .am files about the vc9->vc10 file change. Jul 10, 2016 debian Address lintian warnings/errors. Fixes issue #16. Apr 21, 2015 libcpuid Add libcpuid_internal.h, intel_code_t.h and amd_code_t.h to Makefile.am. Jul 10, 2016 tests Add a test with L4 cache (courtesy of @phprus). Jul 7, 2016 .gitignore Fix a typo. Jul 10, 2016 AUTHORS Moving the repository one level deeper Nov 6, 2008 COPYING Moving the repository one level deeper Nov 6, 2008 ChangeLog Update the release date for 0.3.0 in the ChangeLog. Jul 10, 2016 Makefile.am Update .am files about the vc9->vc10 file change. Jul 10, 2016 NEWS Moving the repository one level deeper Nov 6, 2008 README Convert README to markdown. Nov 4, 2015 Readme.md Update Readme.md with documentation links. May 22, 2016 configure.ac Merge pull request #48 from X0rg/master Jun 5, 2016 libcpuid.dsw Ported to Microsoft Visual C 6.0 Aug 25, 2012 libcpuid.pc.in Incorrect path in .pc file - fixed; Clarified documentation a bit Nov 28, 2008 libcpuid_vc10.sln Replace VC9 project files with improved ones for VC10. Jul 10, 2016 libcpuid_vc71.sln Added project files for Visual Studio 2003 (VC 71), added an option t… Aug 19, 2009 Readme.md libcpuid libcpuid provides CPU identification for the x86 (and x86_64). For details about the programming API, you might want to take a look at the project's website on sourceforge (http://libcpuid.sourceforge.net/). There you'd find a short tutorial, as well as the full API reference. Configuring after checkout Under linux, where you download the sources, there's no configure script to run. This is because it isn't a good practice to keep such scripts in a source control system. To create it, you need to run the following commands once, after you checkout the libcpuid sources from github:     1. run ""libtoolize""     2. run ""autoreconf --install""  You need to have autoconf, automake and libtool installed. After that you can run ./configure and make - this will build the library. make dist will create a tarball (with ""configure"" inside) with the sources. Testing After any change to the detection routines or match tables, it's always a good idea to run make test. If some test fails, and you're confident that the test is wrong and needs fixing, run make fix-tests. You can also add a new test (which is basically a file containing the raw CPUID data and the expected decoded items) by using tests/create_test.py. The workflow there is as follows: Run ""cpuid_tool"" with no arguments. It will tell you that it has written a pair of files, raw.txt and report.txt. Ensure that report.txt contains meaningful data. Run ""tests/create_test.py raw.txt report.txt > «my-cpu».test"" Use a proper descriptive name for the test (look into tests/amd and tests/intel to get an idea) and copy your test file to an appropriate place within the tests directory hierarchy. For non-developers, who still want to contribute tests for the project, use this page to report misdetections or new CPUs that libcpuid doesn't handle well yet. Users So far, I'm aware of the following projects which utilize libcpuid: CPU-X (https://github.com/X0rg/CPU-X) fre:ac (https://www.freac.org/) ucbench (http://anrieff.net/ucbench) We'd love to hear from you if you are also using libcpuid and want your project listed above. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/anrieff/libcpuid"	"A small C library for x86 CPU detection and feature extraction. [BSD]"	"true"
"Miscellaneous"	"libevil"	"https://github.com/avati/libevil"	"The Evil License Manager. [GPLv3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"2"	"7"	"GitHub - avati/libevil: The Evil License Manager Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 6 Fork 7 avati/libevil Code Issues 0 Pull requests 0 Pulse Graphs The Evil License Manager 66 commits 1 branch 0 releases 2 contributors C 98.4% Shell 1.6% C Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 0ae9450 Jan 17, 2012 avati gluster-lic-uninstall: mechanism to disable libevil Permalink Failed to load latest commit information. COPYING Initial commit Jan 23, 2011 INSTALL Initial commit Jan 24, 2011 Makefile.am gluster-lic-uninstall: mechanism to disable libevil Jan 20, 2012 README Initial commit Jan 24, 2011 autogen.sh disable autoheader Feb 4, 2011 build-static-gpg.sh infrastructure to upgrade via permit files Aug 6, 2011 configure.ac gluster-lic-uninstall: mechanism to disable libevil Jan 20, 2012 gluster-lic-info.in gluster-lic-info: updated messaging May 15, 2011 gluster-lic-install.in gluster-lic-{req,install}: permit licensing of a single server May 30, 2011 gluster-lic-register.in gluster-lic-register: clean up litter Aug 8, 2011 gluster-lic-request.in gluster-lic-{req,install}: permit licensing of a single server May 30, 2011 gluster-lic-setup.in 32/64bit compatibility fixes Aug 18, 2011 gluster-lic-sign.in Fixed - Bug 2428 - help shows unnecessary double quote Feb 15, 2011 gluster-lic-uninstall.c gluster-lic-uninstall: mechanism to disable libevil Jan 20, 2012 gluster-lic.sh.in gluster-lic.sh: an /etc/profile.d to display licensing information up… Feb 7, 2011 gluster-lic.spec.in gluster-lic-uninstall: mechanism to disable libevil Jan 20, 2012 libevil.c libevil: spare ld.so from our evil clutches Aug 18, 2011 libevil.h libevil: default timeouts overrideable with num of secs in /.default May 12, 2011 md5.c Framework code to implement protection of license files Feb 4, 2011 md5.h Framework code to implement protection of license files Feb 4, 2011 permits-create.sh.in 32-bit compat fixes Aug 8, 2011 permits-install.sh.in pubring.gpg: ship it with the package Aug 8, 2011 pubring.gpg pubring.gpg: ship it with the package Aug 8, 2011 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/avati/libevil"	"The Evil License Manager. [GPLv3]"	"true"
"Miscellaneous"	"libnih"	"https://github.com/keybuk/libnih"	"A lightweight library of C functions and structures. [GPL2.1]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"28"	"11"	"18"	"GitHub - keybuk/libnih: NIH Utility Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 28 Fork 18 keybuk/libnih Code Issues 2 Pull requests 6 Pulse Graphs NIH Utility Library 1,092 commits 1 branch 29 releases Fetching contributors C 99.8% Other 0.2% C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show upstart-0.6.3 upstart-0.6.2 upstart-0.6.1 upstart-0.6.0 upstart-0.5.2 upstart-0.5.1 upstart-0.5.0 upstart-0.3.9 upstart-0.3.8 upstart-0.3.7 upstart-0.3.5 upstart-0.3.2 upstart-0.3.0 upstart-0.2.7 upstart-0.2.6 upstart-0.2.5 upstart-0.2.1 upstart-0.2.0 upstart-0.1.1 upstart-0.1.0 1.0.3 1.0.2 1.0.1 1.0.0 0.3.2 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit ecf8f37 Dec 9, 2013 keybuk Merge pull request #12 from xnox/subdir-objects … Enable automake's subdif-objects option. Permalink Failed to load latest commit information. m4 * m4/libnih.m4 (NIH_WITH_LOCAL_LIBNIH): Add macro cribbed from the Apr 24, 2010 nih-dbus-tool nih-dbus libnih-dbus requires dbus-1 Nov 20, 2013 nih Fix formatting as per review. Oct 31, 2013 po * NEWS: Release 1.0.3 Dec 23, 2010 .gitignore AUTHORS * AUTHORS: Mention the ChangeLog file. Sep 7, 2006 COPYING * COPYING: Change licence to version 2 of the GNU GPL. Jun 23, 2009 ChangeLog Fallback to lstat, if the non-portable dirent.d_type is not available. Oct 31, 2013 HACKING * configure.ac (AC_PRERQ): Update to 2.62 Nov 21, 2009 Makefile.am * Makefile.am: Always build libnih-dbus and nih-dbus-tool Nov 21, 2009 NEWS * configure.ac: Bump version to 1.0.4 Dec 23, 2010 README * README: Remove the usage instructions, since this is going to Nov 21, 2009 TODO * TODO: Update. Nov 28, 2009 configure.ac README libnih is a light-weight ""standard library"" of C functions to ease the development of other libraries and applications.  Its goals are:   * despite its name, to _not_ reimplement anything found in the    standard C library or any library normally found in /lib;   * use standard C types and conventions where appropriate;   * have a simple and consistent programming interface;   * be useful to library developers without needing to be exposed in    the library's API;   * not hide implementation details or structure contents, we're all    adults after all.   Dependencies ------------  The D-Bus messaging system is required to build the libnih-dbus library and nih-dbus-tool utility.  In order to query the availability of the external library, the pkg-config tool is used; and in order to parse D-Bus introspection data, the expat XML parsing library will be used.  The recommended versions are:  	* pkg-config 0.22 	* D-Bus 1.2.16 	* expat 2.0.0  These should all be available from the current release of any modern Linux distribution.  For detailed compilation and installation instructions see the INSTALL file.  If you've checked libnih out from revision control, or want to hack on libnih, see the HACKING file.   Cross-compiling ---------------  libnih uses the nih-dbus-tool utility it builds during its own build process to generate further sources to be built.  When cross-compiling this will fail because the built nih-dbus-tool will most likely not be able to run on the build architecture.  This can be solved by building and installing nih-dbus-tool for the build architecture first, then when performing the cross-compile, the installed copy will be used instead.  If installed into a common system directory, this is automatic; if not, you can pass the path of the nih-dbus-tool binary to the configure script, e.g.:  	./configure --build=i486-linux-gnu --host=gnueabi-linux-arm \ 		NIH_DBUS_TOOL=/cross/bin/nih-dbus-tool  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/keybuk/libnih"	"A lightweight library of C functions and structures. [GPL2.1]"	"true"
"Miscellaneous"	"libusb"	"http://www.libusb.org/"	"A universal USB library which allows for portable access to USB devices. [LGPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A universal USB library which allows for portable access to USB devices. [LGPL2]"	"false"
"Miscellaneous"	"Mach7"	"https://github.com/solodon4/Mach7"	"A Pattern-matching library for C++. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"719"	"49"	"59"	"GitHub - solodon4/Mach7: Pattern-matching library for C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 719 Fork 59 solodon4/Mach7 Code Issues 27 Pull requests 1 Wiki Pulse Graphs Pattern-matching library for C++ 526 commits 1 branch 0 releases 4 contributors C++ 43.8% TeX 33.2% HTML 19.2% Makefile 1.5% Batchfile 1.2% Haskell 0.3% Other 0.8% C++ TeX HTML Makefile Batchfile Haskell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2e90301 Jun 28, 2016 solodon4 Added function subject() to explicitly mark subjects as RHS and force… … … their evaluation when they are LazyExpression. This was causing a SIGSERV under -O2 both in Clang and GCC - subject of issue #60 Permalink Failed to load latest commit information. code Added function subject() to explicitly mark subjects as RHS and force… Jun 28, 2016 media Added slides from C++ Now 2014 talk Sep 17, 2014 .gitignore Changes to direct users to post issues with questions instead of email Jun 20, 2016 .travis.yml Trying if it builds with Clang 3.4 now that unary bug is fixed Mar 19, 2016 LICENSE Minor fixes to not use markup in external licelse file Apr 8, 2015 README.md Added function subject() to explicitly mark subjects as RHS and force… Jun 28, 2016 appveyor.yml Fixing problem with environment variables. Trying to fix artifacts up… Apr 27, 2016 README.md Mach7: Pattern Matching for C++ by Yuriy Solodkyy, Gabriel Dos Reis, Bjarne Stroustrup Abstract Pattern matching is an abstraction mechanism that can greatly simplify source code. Commonly, pattern matching is built into a language to provide better syntax, faster code, correctness guarantees and improved diagnostics. Mach7 is a library solution to pattern matching in C++ that maintains many of these features. All the patterns in Mach7 are user-definable, can be stored in variables, passed among functions, and allow the use of open class hierarchies. Mach7 by Example Fibonacci numbers demonstrates the use of patterns with built-in types in Mach7: // Fibonacci numbers int fib(int n) {     var<int> m;      Match(n)     {       Case(1)     return 1;       Case(2)     return 1;       Case(2*m)   return sqr(fib(m+1)) - sqr(fib(m-1));       Case(2*m+1) return sqr(fib(m+1)) + sqr(fib(m));     }     EndMatch } Lambda calculator demonstrates use of pattern matching to decompose objects and nested patterns: // Declare C++ equivalent of an Algebraic Data Type Term and its 3 variants:  struct Term       { virtual ~Term() {}     }; struct Var : Term { std::string name;      }; struct Abs : Term { Var&  var;  Term& body;}; struct App : Term { Term& func; Term& arg; };  // Tell Mach7 library which members should be bound in which binding positions namespace mch {     template <> struct bindings<Var> { Members(Var::name); };     template <> struct bindings<Abs> { Members(Abs::var , Abs::body); };     template <> struct bindings<App> { Members(App::func, App::arg);  }; }  // Implement fully-functional lambda-calculator Term* eval(Term* t) {     var<const Var&> v;      var<const Term&> b,a;      Match(*t)     {       Case(C<Var>())               return &match0;       Case(C<Abs>())               return &match0;       Case(C<App>(C<Abs>(v,b),a))  return eval(subs(b,v,a));       Otherwise() cerr << ""error""; return nullptr ;     }      EndMatch } It can also be used to demonstrate relational matching on several arguments: bool operator==(const Term& left, const Term& right) {     var<std::string> s;     var<const Term&> v,t,f;      Match(left,right)     {       Case(C<Var>(s),     C<Var>(+s)     ) return true;       Case(C<Abs>(&v,&t), C<Abs>(&+v,&+t)) return true;       Case(C<App>(&f,&t), C<App>(&+f,&+t)) return true;       Otherwise()                          return false;     }     EndMatch      return false; // To prevent all control path warning } Next example demonstrates that the library can deal efficiently and in a type-safe manner with non-polymorphic classes like boost::variant as well. void print(const boost::variant<double,float,int>& v) {     var<double> d; var<float> f; var<int> n;      Match(v)     {       Case(C<double>(d)) cout << ""double "" << d << endl; break;       Case(C<float> (f)) cout << ""float  "" << f << endl; break;       Case(C<int>   (n)) cout << ""int    "" << n << endl; break;     }     EndMatch } Breve syntax is not the only thing Mach7 has to offer - the generated code is faster than Visitors! For a more detailed set of examples, have a look at the code that was prepared for CppCon 2014 presentation, and implemented using visitors as well as pattern matching. These are simple enough to help you get started on your own Mach7 project. Continuous Integration We use Travis CI and AppVeyor for continuous integration and currently have all check-ins validated in the following configurations: G++ Clang Linux 4.8 3.4 OSX 4.8 3.5 Building sources If you haven't done so yet, get a copy of this Git repo locally by executing: git clone https://github.com/solodon4/Mach7.git  The library itself is header only and does not require building. To build unit and timing tests we've accumulated over time several scripts, which we don't completely abandon in favor of newer ones as they maintain the flags the original experiments on the library were built with. Using CMake (3.2 or later) CMake support is the most recent and is still very experimental at this point. To build with cmake, perform the following commands from within Mach7 folder: cd code/test mkdir build cd build cmake .. cmake --build .  Version 3.2 is needed in order to be able to have support of target_compile_features for AppleClang Using Makefiles for GCC (4.4 or later) or Clang (3.3 or later) Top-level Makefile synopisis: make         - build all library tests make all     - same as above right now make unit    - build all unit tests make time    - build all timing tests make cmpl    - build all tests for timing the compilation times of the library make clean   - clean all built targets and intermediaries make test    - run all the built tests make check   - run those tests for which there are correct_output/*.out files and check that the output is the same make doc     - build Mach7 documentation (requires doxygen) make includes.png - build graph representation of header inclusions (requires graphviz dot)  To see a list of more specific targets supported by other makefiles, see comments inside them. To build a particular file, say test/unit/example05.cpp, build a target with the same filename and extension .exe instead of .cpp (even on Unix family OS). For example:  cd $MACH7_ROOT/code/test/unit  make example05.exe  Lower-level makefiles support most of the phony targets of the top-level makefile, to which the top-level makefile forwards the corresponding calls. For example: To build and run just the unit tests:  cd $MACH7_ROOT/code/test/unit  make  make check  make test  Similarly, to build and run all the timing tests:  cd $MACH7_ROOT/code/test/time  make  make test  Using Visual C++ (2010 or later) Mach7 uses its own build.bat script to build all the examples and unit tests that come with it. The script assumes each .cpp file to be a standalone program. You can find the most up-to-date list of supported commands by running: build.bat /?  Syntax: build [ pgo | repro | tmp | <ver> ] [ filemask*.cpp ... ] build [ syntax | timing | cmp | doc | clean | test | check ]  Commands supported so far: build [ pgo | repro | tmp | <ver> | <arch> ] [ filemask*.cpp ... ] - build given C++ files build        - Build all examples using the most recent MS Visual C++ compiler installed build unit   - Build all unit tests build syntax - Build all supported library options combination for syntax variations build timing - Build all supported library options combination for timing variations build cmp    - Build all executables for comparison with other languages build doc    - Build Mach7 documentation build clean  - Clean all built examples build test   - Run all built examples build check  - Run those examples for which there are correct_output/*.out files and                 check that output is the same  Modifiers:        pgo   - Perform Profile-Guided Optimization on produced executables        repro - In case of error, create and compile a pre-processed repro        tmp   - Keep temporaries       <ver>  - Use a specific version of Visual C++ to compiler the source                 code. <ver> can be one of the following:                 - 2016 - Visual C++ 15.0                 - 2015 - Visual C++ 14.0                 - 2013 - Visual C++ 12.0                 - 2012 - Visual C++ 11.0                 - 2010 - Visual C++ 10.0                 - 2008 - Visual C++  9.0                 - 2005 - Visual C++  8.0                 - 2003 - Visual C++  7.1                   0000 - Do not use any VS to set up the environment, I will set it up by myself       <arch> - Target architecture. Can be one of the following: x86, x64, arm  Talks ""Accept No Visitors"". CppCon 2014. September 12, 2014. Bellevue, WA. [slides, video] ""Mach7: The Design and Evolution of a Pattern Matching Library for C++"". C++ Now 2014. May 14, 2014. Aspen, CO. [slides, video] Publications Y.Solodkyy, G.Dos Reis, B.Stroustrup. ""Open Pattern Matching for C++: Extended Abstract"" In Proceedings of the 2013 companion publication for conference on Systems, programming, & applications: software for humanity (SPLASH '13). ACM, New York, NY, USA, pp. 97-98. pdf, slides, notes, poster, project Y.Solodkyy, G.Dos Reis, B.Stroustrup. ""Open Pattern Matching for C++"" In Proceedings of the 12th international conference on Generative programming: concepts & experiences (GPCE '13). ACM, New York, NY, USA, pp. 33-42. pdf, slides, notes, poster, project Y.Solodkyy. ""Simplifying the Analysis of C++ Programs"" Ph.D. Thesis. Texas A&M University. August 2013. pdf, slides Y.Solodkyy, G.Dos Reis, B.Stroustrup. ""Open and Efficient Type Switch for C++"" In Proceedings of the ACM international conference on Object Oriented Programming Systems Languages and Applications (OOPSLA '12). ACM, New York, NY, USA, pp. 963-982. pdf, slides, notes, poster, extras, project] License Mach7 is licensed under the BSD License. Support If you have any question about Mach7 or have trouble using it, the best way to get answers is to post an issue and label it as Question. This will contribute to our poor man's FAQ and hopefully help others with a similar question. I get notifications about new issues and usually respond within the same day. If you prefer not to discuss your question on GitHub, feel free to send me a private email (note there is a + in the email address). Call for Help We are looking for contributors to the project. If you are a student taking a programming languages class or any other class that would require you to write a small compiler or interpreter, we would love you try Mach7 for the job. We promise to help with any issues you might have with the library. Known bugs and limitations Right now, there are several experimental headers that one would need to include to enable one or the other syntax to work. This is a work in progress, so before you start working with a particular syntax, check examples with that syntax and make note of which of headers they include. We will clear this eventually leaving only one header, but at the moment it is a mess, and the most intuitive match.hpp is probably not the header you want as it represents older experiments. The most recent experimentation and the header you are prpobably looking for is mach7/type_switchN-patterns-xtl.hpp. The library is not yet suitable for multi-threaded environment. Lock-free version of vtbl-map is in the works. Please refrain from using solution or project files checked in here. They are not in sync with most recent changes to directory structure and are difficult to maintain. They will ultimately be replaced with a less verbose system (likely CMake), and in the meantime please use build.bat to build tests on Windows. The following files crash GCC 4.4.5 on my Fedora 13 box: extractor.cpp, shape2.cpp, shape4.cpp, shape5.cpp, shape6.cpp, shape.cpp, numbers.cpp, category.cpp, exp.cpp If they do on yours too, just delete them, they are all test cases anyways. For the most up-to-date list of known issues see Mach7 Issues. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/solodon4/Mach7"	"A Pattern-matching library for C++. [BSD]"	"true"
"Miscellaneous"	"PCRE"	"http://pcre.org/"	"A regular expression C library inspired by the regular expression capabilities in Perl. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PCRE - Perl Compatible Regular Expressions PCRE - Perl Compatible Regular Expressions The PCRE library is a set of functions that implement regular expression pattern matching using the same syntax and semantics as Perl 5. PCRE has its own native API, as well as a set of wrapper functions that correspond to the POSIX regular expression API. The PCRE library is free, even for building proprietary software. PCRE was originally written for the Exim MTA, but is now used by many high-profile open source projects, including Apache, PHP, KDE, Postfix, Analog, and Nmap. PCRE has also found its way into some well known commercial products, like Apple Safari. Some other interesting projects using PCRE include Chicken, Ferite, Onyx, Hypermail, Leafnode, Askemos, Wenlin, and 8th. Versions There are two major versions of the PCRE library. The newest version, PCRE2, was released in 2015 and is at version 10.21. The original, very widely deployed PCRE library, originally released in 1997, is at version 8.39, and the API and feature set are stable—future releases will be for bugfixes only. All new future features will be to PCRE2, not the original PCRE 8.x series. Download You can download the current releases of the PCRE and PCRE2 libraries from their official home via anonymous FTP: ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/ You can also download via HTTPS from the mirror at SourceForge: https://sourceforge.net/projects/pcre/files/ You can check out the PCRE2 source code via Subversion (or browse PCRE2 source code on-line): svn co svn://vcs.exim.org/pcre2/code/trunk pcre Or, to check out the older PCRE source code can via Subversion (or browse older PCRE source code on-line): svn co svn://vcs.exim.org/pcre/code/trunk pcre Contributed Ports A precompiled Windows port of PCRE, which may be a few versions behind, is available courtesy the GnuWin32 project. http://gnuwin32.sourceforge.net/packages/pcre.htm If you just need the command-line PCRE or PCRE2 tools on Windows, more up to date precompiled binary versions are available here: http://www.rexegg.com/pcregrep-pcretest.html A PCRE port for z/OS, a mainframe operating system which uses EBCDIC as its default character encoding, can be found here: http://www.cbttape.org/ (File 882) Documentation You can read PCRE2 HTML documentation, or the text version of the PCRE2 man pages. For Perl 5 regular expression syntax, read the Perl regular expressions man page. The distribution itself also contains a README and the BSD LICENCE. If you are upgrading, read the NEWS and ChangeLog files. You can also browse the older PCRE HTML documentation, text version of the older PCRE man pages, and the original README or and the original ChangeLog files. Details on PCRE, and, in particular, comparisons to Perl's regular expression semantics, can also be found in the community authored Wikipedia entry on PCRE. You can find a curated summary of changes with each PCRE release, copies of documentation from older releases, and other useful information from the third party authored RexEgg PCRE Documentation and Change Log page. Contact To report a problem with the PCRE library, or to make a feature request, please file a bug in the PCRE bug repository. You may want to browse currently open PCRE bugs first. Please don't use the SourceForge bug tracking system, as it is not normally monitored. There is a mailing list for active PCRE developers at pcre-dev@exim.org, and you can browse the mailing list archives on-line. The PCRE library was written by Philip Hazel: E-mail local part:  ph10 E-mail domain:  cam.ac.uk Please note that neither this website nor the SourceForge download repositories are maintained by Philip. Please report website or SourceForge PCRE project problems to webmaster@pcre.org. Last modified - webmaster@pcre.org"	"null"	"null"	"A regular expression C library inspired by the regular expression capabilities in Perl. [BSD]"	"true"
"Miscellaneous"	"RE2"	"https://github.com/google/re2"	"A software library for regular expressions via a finite-state machine using automata theory."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1057"	"91"	"171"	"GitHub - google/re2: RE2 is a fast, safe, thread-friendly alternative to backtracking regular expression engines like those used in PCRE, Perl, and Python. It is a C++ library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 91 Star 1,057 Fork 171 google/re2 Code Issues 0 Pull requests 0 Wiki Pulse Graphs RE2 is a fast, safe, thread-friendly alternative to backtracking regular expression engines like those used in PCRE, Perl, and Python. It is a C++ library. 347 commits 1 branch 12 releases 26 contributors C++ 76.8% C 20.0% Python 1.6% Makefile 0.8% Perl 0.4% CMake 0.2% Shell 0.2% C++ C Python Makefile Perl CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 2016-07-01 2016-06-01 2016-05-01 2016-04-01 2016-03-01 2016-02-01 2015-11-01 2015-10-01 2015-08-01 2015-07-01 2015-06-01 2015-05-01 Nothing to show New pull request Latest commit fb36443 Jul 15, 2016 junyer Improve the bytemap computation one more time. … Change-Id: Id157eef2a18d02c1e4d0ad689d090826f13a8cc0 Reviewed-on: https://code-review.googlesource.com/5252 Reviewed-by: Paul Wankadia <junyer@google.com> Permalink Failed to load latest commit information. benchlog benchlog: Add gnuplot support Jul 17, 2015 doc Update Unicode data to 8.0.0. Jan 31, 2016 lib/git Cleanup: Remove hg codereview extension. Apr 9, 2015 re2 Improve the bytemap computation one more time. Jul 15, 2016 util Improve the bytemap computation some more. Jul 15, 2016 .gitignore re2: exclude benchlog results in .gitignore Jul 10, 2015 AUTHORS re2: make tables const Jan 9, 2014 BUILD Factor out the bitmap code into a Bitmap256 class. Jul 12, 2016 CMakeLists.txt Note that building a DLL is not currently supported. Mar 29, 2016 CONTRIBUTING.md re2: more Gerrit+GitHub integration Nov 20, 2014 CONTRIBUTORS Remove comparisons of this with NULL. Jun 26, 2014 LICENSE initial release Mar 2, 2010 Makefile Factor out the bitmap code into a Bitmap256 class. Jul 12, 2016 README Update link to Ruby wrapper Apr 26, 2016 WORKSPACE Add a workspace name based on Bazel guidelines Jul 1, 2016 libre2.symbols Add symbols for FilteredRE2 and flags. Apr 28, 2015 libre2.symbols.darwin Try to fix the operator<< symbol on Darwin yet again. Jul 15, 2015 re2.pc Plumb more variables from Makefile to re2.pc. May 9, 2016 re2_test.bzl Remove includes attributes that will break the build. Apr 14, 2016 runtests initial release Mar 3, 2010 testinstall.cc re2: fixes for darwin Jan 9, 2014 ucs2.diff add ucs2.diff, showing old UCS-2 support Feb 7, 2012 README This is the source code repository for RE2, a regular expression library.  For documentation about how to install and use RE2, visit https://github.com/google/re2/.  The short version is:  make make test make install make testinstall  There is a fair amount of documentation (including code snippets) in the re2.h header file.  More information can be found on the wiki: https://github.com/google/re2/wiki  Issue tracker: https://github.com/google/re2/issues  Mailing list: https://groups.google.com/group/re2-dev  Unless otherwise noted, the RE2 source files are distributed under the BSD-style license found in the LICENSE file.  RE2's native language is C++.  A C wrapper is at https://github.com/marcomaggi/cre2/. An Erlang wrapper is at https://github.com/tuncer/re2/. An Inferno wrapper is at https://github.com/powerman/inferno-re2/. A Node.js wrapper is at https://github.com/uhop/node-re2/ and on NPM. An OCaml wrapper is at https://github.com/janestreet/re2/ and on OPAM. A Perl wrapper is at https://github.com/dgl/re-engine-RE2/ and on CPAN. A Python wrapper is at https://github.com/facebook/pyre2/. A Ruby wrapper is at https://github.com/mudge/re2/.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/re2"	"A software library for regular expressions via a finite-state machine using automata theory."	"true"
"Miscellaneous"	"PHP-CPP"	"https://github.com/CopernicaMarketingSoftware/PHP-CPP"	"A library to build PHP extensions with C++. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"687"	"99"	"166"	"GitHub - CopernicaMarketingSoftware/PHP-CPP: Library to build PHP extensions with C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 99 Star 687 Fork 166 CopernicaMarketingSoftware/PHP-CPP Code Issues 13 Pull requests 12 Pulse Graphs Library to build PHP extensions with C++ http://www.php-cpp.com/ 798 commits 2 branches 19 releases 21 contributors C++ 98.0% Makefile 1.3% C 0.7% C++ Makefile C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master streams Nothing to show v1.5.3 v1.5.2 v1.5.1 v1.5 v1.4 v1.3.2 v1.3.1 v1.3 v1.2.2 v1.2.1 v1.2 v1.1.1 v1.1 v1.0 v0.9.2 v0.9.1 v0.9 v0.2 v0.1 Nothing to show New pull request Latest commit 9ba1b8b Jul 1, 2016 martijnotto PHP 7 does not need the extra byte for the ini name, fixes issue #252 Permalink Failed to load latest commit information. Examples Updated examples to show the new PHP-CPP API Jun 6, 2016 common Static methods should be reported as static to the zend engine. Fixes… Jun 20, 2016 documentation Corrected syntax error in documentation code fragment... Aug 8, 2015 include Static methods should be reported as static to the zend engine. Fixes… Jun 20, 2016 zend PHP 7 does not need the extra byte for the ini name, fixes issue #252 Jul 1, 2016 .clang_complete Allocate the zend_object_iterator on the heap because the silly zend Jun 16, 2016 .gitignore added ""sudo ldconfig"" to Makefile to force that shared library cache … Jun 10, 2015 LICENSE Initial commit Aug 23, 2013 Makefile Added mkdir for lib folder and uninstall option in make. Jun 20, 2016 README.md Update README.md Jun 10, 2016 phpcpp.h Made the output streams thread_local so they work correctly in a Jun 13, 2016 README.md PHP-CPP The PHP-CPP library is a C++ library for developing PHP extensions. It offers a collection of well documented and easy-to-use classes that can be used and extended to build native extensions for PHP. The full documentation can be found on http://www.php-cpp.com. Watch out: PHP 7 only! This library has been updated to work with PHP versions 7.0 and up. If you wish to create extensions for older PHP versions, use the PHP-CPP-LEGACY library instead. The PHP-CPP and PHP-CPP-LEGACY library have (almost) identical API's, so you can easily port extensions for PHP 5.* to PHP 7 and the other war around. ABOUT PHP-CPP is created and maintained by Copernica (www.copernica.com). We write our code mostly in PHP and C++ and needed an effective way to combine these two languages. That's where PHP-CPP comes in. Do you appreciate our work and are you looking for other high quality solutions? Then check out our other solutions: PHP-JS (www.php-js.com) Copernica Marketing Suite (www.copernica.com) MailerQ MTA (www.mailerq.com) Responsive Email web service (www.responsiveemail.com) The power of PHP-CPP Unlike regular PHP extensions - which are really hard to implement and require a deep knowledge of the Zend engine and pointer manipulation - extensions built with PHP-CPP are not difficult to develop at all. In fact, the only thing you need to do is write a function in C++, and the PHP-CPP library uses all the power offered by C++11 to convert the parameters and return values from your functions to/and from PHP: Php::Value hello_world() {     return ""hello world!""; } The function above is a native C++ function. With PHP-CPP you can export this function to PHP with only one single C++ method call: extension.add(""hello_world"", hello_world); Working with parameters and return values is just as easy: Php::Value my_plus(Php::Parameters &params) {     return params[0] + params[1]; } The method call to export the above C++ function: extension.add(""my_plus"", my_plus, {     Php::ByVal(""a"", Php::numericType),     Php::ByVal(""b"", Php::numericType) }); The PHP-CPP library ensures that the variables from PHP (which internally are complicated C structures), are automatically converted into integers, passed to your function, and that the return value of your ""my_plus"" function is also converted back into a PHP variable. Type conversion between native C/C++ types and PHP variables is handled by PHP-CPP, using features from the C++11 language. It does not matter if your functions accept strings, integers, booleans or other native parameters: PHP-CPP takes care of the conversion. The return value of your function is also transformed by PHP-CPP into PHP. More complicated structures can be handled by PHP-CPP as well. If you would like to return a nested associative array from your function, you can do so too: Php::Value get_complex_array() {     Php::Value r;     r[""a""] = 123;     r[""b""] = 456;     r[""c""][0] = ""nested value"";     r[""c""][1] = ""example"";     return r; } The C++ function above is equivalent to the following function in PHP: function get_complex_array() {     return array(         ""a"" => 123,         ""b"" => 456,         ""c"" => array(""nested_value"",""example"")     ); } More information and more examples are available on the official website: http://www.php-cpp.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CopernicaMarketingSoftware/PHP-CPP"	"A library to build PHP extensions with C++. [Apache2]"	"true"
"Miscellaneous"	"website"	"http://www.php-cpp.com/"	"A library to build PHP extensions with C++. [Apache2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"687"	"99"	"166"	"GitHub - CopernicaMarketingSoftware/PHP-CPP: Library to build PHP extensions with C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 99 Star 687 Fork 166 CopernicaMarketingSoftware/PHP-CPP Code Issues 13 Pull requests 12 Pulse Graphs Library to build PHP extensions with C++ http://www.php-cpp.com/ 798 commits 2 branches 19 releases 21 contributors C++ 98.0% Makefile 1.3% C 0.7% C++ Makefile C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master streams Nothing to show v1.5.3 v1.5.2 v1.5.1 v1.5 v1.4 v1.3.2 v1.3.1 v1.3 v1.2.2 v1.2.1 v1.2 v1.1.1 v1.1 v1.0 v0.9.2 v0.9.1 v0.9 v0.2 v0.1 Nothing to show New pull request Latest commit 9ba1b8b Jul 1, 2016 martijnotto PHP 7 does not need the extra byte for the ini name, fixes issue #252 Permalink Failed to load latest commit information. Examples Updated examples to show the new PHP-CPP API Jun 6, 2016 common Static methods should be reported as static to the zend engine. Fixes… Jun 20, 2016 documentation Corrected syntax error in documentation code fragment... Aug 8, 2015 include Static methods should be reported as static to the zend engine. Fixes… Jun 20, 2016 zend PHP 7 does not need the extra byte for the ini name, fixes issue #252 Jul 1, 2016 .clang_complete Allocate the zend_object_iterator on the heap because the silly zend Jun 16, 2016 .gitignore added ""sudo ldconfig"" to Makefile to force that shared library cache … Jun 10, 2015 LICENSE Initial commit Aug 23, 2013 Makefile Added mkdir for lib folder and uninstall option in make. Jun 20, 2016 README.md Update README.md Jun 10, 2016 phpcpp.h Made the output streams thread_local so they work correctly in a Jun 13, 2016 README.md PHP-CPP The PHP-CPP library is a C++ library for developing PHP extensions. It offers a collection of well documented and easy-to-use classes that can be used and extended to build native extensions for PHP. The full documentation can be found on http://www.php-cpp.com. Watch out: PHP 7 only! This library has been updated to work with PHP versions 7.0 and up. If you wish to create extensions for older PHP versions, use the PHP-CPP-LEGACY library instead. The PHP-CPP and PHP-CPP-LEGACY library have (almost) identical API's, so you can easily port extensions for PHP 5.* to PHP 7 and the other war around. ABOUT PHP-CPP is created and maintained by Copernica (www.copernica.com). We write our code mostly in PHP and C++ and needed an effective way to combine these two languages. That's where PHP-CPP comes in. Do you appreciate our work and are you looking for other high quality solutions? Then check out our other solutions: PHP-JS (www.php-js.com) Copernica Marketing Suite (www.copernica.com) MailerQ MTA (www.mailerq.com) Responsive Email web service (www.responsiveemail.com) The power of PHP-CPP Unlike regular PHP extensions - which are really hard to implement and require a deep knowledge of the Zend engine and pointer manipulation - extensions built with PHP-CPP are not difficult to develop at all. In fact, the only thing you need to do is write a function in C++, and the PHP-CPP library uses all the power offered by C++11 to convert the parameters and return values from your functions to/and from PHP: Php::Value hello_world() {     return ""hello world!""; } The function above is a native C++ function. With PHP-CPP you can export this function to PHP with only one single C++ method call: extension.add(""hello_world"", hello_world); Working with parameters and return values is just as easy: Php::Value my_plus(Php::Parameters &params) {     return params[0] + params[1]; } The method call to export the above C++ function: extension.add(""my_plus"", my_plus, {     Php::ByVal(""a"", Php::numericType),     Php::ByVal(""b"", Php::numericType) }); The PHP-CPP library ensures that the variables from PHP (which internally are complicated C structures), are automatically converted into integers, passed to your function, and that the return value of your ""my_plus"" function is also converted back into a PHP variable. Type conversion between native C/C++ types and PHP variables is handled by PHP-CPP, using features from the C++11 language. It does not matter if your functions accept strings, integers, booleans or other native parameters: PHP-CPP takes care of the conversion. The return value of your function is also transformed by PHP-CPP into PHP. More complicated structures can be handled by PHP-CPP as well. If you would like to return a nested associative array from your function, you can do so too: Php::Value get_complex_array() {     Php::Value r;     r[""a""] = 123;     r[""b""] = 456;     r[""c""][0] = ""nested value"";     r[""c""][1] = ""example"";     return r; } The C++ function above is equivalent to the following function in PHP: function get_complex_array() {     return array(         ""a"" => 123,         ""b"" => 456,         ""c"" => array(""nested_value"",""example"")     ); } More information and more examples are available on the official website: http://www.php-cpp.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CopernicaMarketingSoftware/PHP-CPP"	"A library to build PHP extensions with C++. [Apache2]"	"true"
"Miscellaneous"	"Remote Call Framework"	"http://www.deltavsoft.com/"	"Inter-process communication framework for C++. [GPL2/Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"RCF - Remote Call Framework by Delta V Software Delta V Software Home RCF RCFProto Buy Support Company Contact RCF - Remote Call Framework Remote Call Framework (RCF) is a IPC/RPC framework tailored for C++ applications. Wide range of IPC and RPC techniques. Seamless integration with C++ applications. Portable, efficient and scalable. Used in major software applications around the world. Available under dual licensing model - GPL licensing or closed source commercial licensing. Who's using RCF? RCFProto RCFProto is an RPC implementation for Google Protocol Buffers, based on the RCF networking library. RCFProto supports 4 languages (C#, Java, Python and C++), on multiple platforms (including Windows, Linux and OS X). RCFProto combines fast and scalable networking from RCF, with efficient, portable and automatically versioned messages from Protocol Buffers. RCFProto 1.0 is now available, under the same dual licensing model as RCF. © 2013 Delta V Software"	"null"	"null"	"Inter-process communication framework for C++. [GPL2/Commercial]"	"true"
"Miscellaneous"	"Scintilla"	"http://scintilla.org/"	"A free source code editing component. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Scintilla and SciTE      A free source code editing component for Win32, GTK+, and OS X Release version 3.6.6 Site last modified May 24 2016     Version 3.6.6 enables C++11 <regex> by default. Version 3.6.5 adds a JSON lexer and removes the font cache on GTK+. Version 3.6.4 avoids some folding bugs by automatically unfolding and improves clipboard robustness on Win32. Version 3.6.3 supports idle-time styling. Version 3.6.2 fixes crashes and other bugs, particularly on Cocoa. Version 3.6.1 adds minor features and fixes bugs. Version 3.6.0 implements more multiple selection operations. Type definitions Sci_Position, Sci_PositionU, and Sci_PositionCR allow client code to prepare for a future change allowing larger than 2 GB documents. Screenshot Download Documentation Bugs SciTE History Related Privacy I am on vacaction until mid-August. Some mails and issues may be answered when I have connectivity but I will be without internet for up to 10 days at a time. Scintilla is a free source code editing component. It comes with complete source code and a license that permits use in any free project or commercial product. As well as features found in standard text editing components, Scintilla includes features especially useful when editing and debugging source code. These include support for syntax styling, error indicators, code completion and call tips. The selection margin can contain markers like those used in debuggers to indicate breakpoints and the current line. Styling choices are more open than with many editors, allowing the use of proportional fonts, bold and italics, multiple foreground and background colours and multiple fonts. SciTE is a SCIntilla based Text Editor. Originally built to demonstrate Scintilla, it has grown to be a generally useful editor with facilities for building and running programs. It is best used for jobs with simple configurations - I use it for building test and demonstration programs as well as SciTE and Scintilla, themselves. Development of Scintilla started as an effort to improve the text editor in PythonWin. After being frustrated by problems in the Richedit control used by PythonWin, it looked like the best way forward was to write a new edit control. The biggest problem with Richedit and other similar controls is that they treat styling changes as important persistent changes to the document so they are saved into the undo stack and set the document's dirty flag. For source code, styling should not be persisted as it can be mechanically recreated. Scintilla and SciTE are currently available for Intel Win32, OS X, and Linux compatible operating systems with GTK+. They have been run on Windows XP, Windows 7, OS X 10.6+, and on Ubuntu 10.10 with GTK+ 2.20. Here is a screenshot of SciTE. You can download Scintilla. The source code can be downloaded via Mercurial at the Source Forge Scintilla project page. Related sites. Bugs and To Do list. History and contribution credits. Icons that can be used with Scintilla. Questions and comments about Scintilla should be directed to the scintilla-interest mailing list, which is for discussion of Scintilla and related projects, their bugs and future features. This is a low traffic list, averaging less than 20 messages per week. To avoid spam, only list members can write to the list. New versions of Scintilla are announced on scintilla-interest and may also be received by SourceForge members by clicking on the Monitor column icon for ""scintilla"" on the downloads page. Messages sent to my personal email address that could have been sent to the list may receive no response. There is a Scintilla project page hosted on"	"null"	"null"	"A free source code editing component. [MIT]"	"true"
"Miscellaneous"	"SDS"	"https://github.com/antirez/sds"	"Simple Dynamic Strings library for C. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1656"	"94"	"169"	"GitHub - antirez/sds: Simple Dynamic Strings library for C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 94 Star 1,656 Fork 169 antirez/sds Code Issues 15 Pull requests 42 Pulse Graphs Simple Dynamic Strings library for C 45 commits 1 branch 2 releases 6 contributors C 99.6% Makefile 0.4% C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 2.0.0 1.0.0 Nothing to show New pull request Latest commit 3892c0e Jan 9, 2016 antirez Merge pull request #62 from gavinwahl/patch-1 … I think this is supposed to represent a single string Permalink Failed to load latest commit information. .gitignore .gitignore file added. Feb 2, 2014 Changelog SDS version 2.0.0. Jul 25, 2015 LICENSE LICENSE file added. Feb 3, 2014 Makefile .gitignore file added. Feb 2, 2014 README.md I think this is supposed to represent a single string Jan 8, 2016 sds.c Export API to use the allocator SDS is using. Nov 16, 2015 sds.h Export API to use the allocator SDS is using. Nov 16, 2015 sdsalloc.h sdsalloc.h copyright notice updated as well. Jul 25, 2015 testhelp.h Test fixed to work with new sdsrange() API. Feb 2, 2014 README.md Simple Dynamic Strings Notes about verison 2: this is an updated version of SDS in an attempt to finally unify Redis, Disque, Hiredis, and the stand alone SDS versions. This version is NOT* binary compatible with SDS verison 1, but the API is 99% compatible so switching to the new lib should be trivial. Note that this version of SDS may be a slower with certain workloads, but uses less memory compared to V1 since header size is dynamic and depends to the string to alloc. Moreover it includes a few more API functions, notably sdscatfmt which is a faster version of sdscatprintf that can be used for the simpler cases in order to avoid the libc printf family functions performance penalty. How SDS strings work SDS is a string library for C designed to augment the limited libc string handling functionalities by adding heap allocated strings that are: Simpler to use. Binary safe. Computationally more efficient. But yet... Compatible with normal C string functions. This is achieved using an alternative design in which instead of using a C structure to represent a string, we use a binary prefix that is stored before the actual pointer to the string that is returned by SDS to the user. +--------+-------------------------------+-----------+ | Header | Binary safe C alike string... | Null term | +--------+-------------------------------+-----------+          |          `-> Pointer returned to the user.  Because of meta data stored before the actual returned pointer as a prefix, and because of every SDS string implicitly adding a null term at the end of the string regardless of the actual content of the string, SDS strings work well together with C strings and the user is free to use them interchangeably with other std C string functions that access the string in read-only. SDS was a C string I developed in the past for my everyday C programming needs, later it was moved into Redis where it is used extensively and where it was modified in order to be suitable for high performance operations. Now it was extracted from Redis and forked as a stand alone project. Because of its many years life inside Redis, SDS provides both higher level functions for easy strings manipulation in C, but also a set of low level functions that make it possible to write high performance code without paying a penalty for using an higher level string library. Advantages and disadvantages of SDS Normally dynamic string libraries for C are implemented using a structure that defines the string. The structure has a pointer field that is managed by the string function, so it looks like this: struct yourAverageStringLibrary {     char *buf;     size_t len;     ... possibly more fields here ... }; SDS strings as already mentioned don't follow this schema, and are instead a single allocation with a prefix that lives before the address actually returned for the string. There are advantages and disadvantages with this approach over the traditional approach: Disadvantage #1: many functions return the new string as value, since sometimes SDS requires to create a new string with more space, so the most SDS API calls look like this: s = sdscat(s,""Some more data""); As you can see s is used as input for sdscat but is also set to the value returned by the SDS API call, since we are not sure if the call modified the SDS string we passed or allocated a new one. Not remembering to assign back the return value of sdscat or similar functions to the variable holding the SDS string will result in a bug. Disadvantage #2: if an SDS string is shared in different places in your program you have to modify all the references when you modify the string. However most of the times when you need to share SDS strings it is much better to encapsulate them into structures with a reference count otherwise it is too easy to incur into memory leaks. Advantage #1: you can pass SDS strings to functions designed for C functions without accessing a struct member or calling a function, like this: printf(""%s\n"", sds_string); In most other libraries this will be something like: printf(""%s\n"", string->buf); Or: printf(""%s\n"", getStringPointer(string)); Advantage #2: accessing individual chars is straightforward. C is a low level language so this is an important operation in many programs. With SDS strings accessing individual chars is very natural: printf(""%c %c\n"", s[0], s[1]); With other libraries your best chance is to assign string->buf (or call the function to get the string pointer) to a char pointer and work with this. However since the other libraries may reallocate the buffer implicitly every time you call a function that may modify the string you have to get a reference to the buffer again. Advantage #3: single allocation has better cache locality. Usually when you access a string created by a string library using a structure, you have two different allocations for the structure representing the string, and the actual buffer holding the string. Over the time the buffer is reallocated, and it is likely that it ends in a totally different part of memory compared to the structure itself. Since modern programs performances are often dominated by cache misses, SDS may perform better in many workloads. SDS basics The type of SDS strings is just the char pointer char *. However SDS defines an sds type as alias of char * in its header file: you should use the sds type in order to make sure you remember that a given variable in your program holds an SDS string and not a C string, however this is not mandatory. This is the simplest SDS program you can write that does something: sds mystring = sdsnew(""Hello World!""); printf(""%s\n"", mystring); sdsfree(mystring);  output> Hello World! The above small program already shows a few important things about SDS: SDS strings are created, and heap allocated, via the sdsnew() function, or other similar functions that we'll see in a moment. SDS strings can be passed to printf() like any other C string. SDS strings require to be freed with sdsfree(), since they are heap allocated. Creating SDS strings sds sdsnewlen(const void *init, size_t initlen); sds sdsnew(const char *init); sds sdsempty(void); sds sdsdup(const sds s); There are many ways to create SDS strings: The sdsnew function creates an SDS string starting from a C null terminated string. We already saw how it works in the above example. The sdsnewlen function is similar to sdsnew but instead of creating the string assuming that the input string is null terminated, it gets an additional length parameter. This way you can create a string using binary data: char buf[3]; sds mystring;  buf[0] = 'A'; buf[1] = 'B'; buf[2] = 'C'; mystring = sdsnewlen(buf,3); printf(""%s of len %d\n"", mystring, (int) sdslen(mystring));  output> ABC of len 3 Note: sdslen return value is casted to int because it returns a size_t type. You can use the right printf specifier instead of casting. The sdsempty() function creates an empty zero-length string: sds mystring = sdsempty(); printf(""%d\n"", (int) sdslen(mystring));  output> 0 The sdsdup() function duplicates an already existing SDS string: sds s1, s2;  s1 = sdsnew(""Hello""); s2 = sdsdup(s1); printf(""%s %s\n"", s1, s2);  output> Hello Hello Obtaining the string length size_t sdslen(const sds s); In the examples above we already used the sdslen function in order to get the length of the string. This function works like strlen of the libc except that: It runs in constant time since the length is stored in the prefix of SDS strings, so calling sdslen is not expensive even when called with very large strings. The function is binary safe like any other SDS string function, so the length is the true length of the string regardless of the content, there is no problem if the string includes null term characters in the middle. As an example of the binary safeness of SDS strings, we can run the following code: sds s = sdsnewlen(""A\0\0B"",4); printf(""%d\n"", (int) sdslen(s));  output> 4 Note that SDS strings are always null terminated at the end, so even in that case s[4] will be a null term, however printing the string with printf would result in just ""A"" to be printed since libc will treat the SDS string like a normal C string. Destroying strings void sdsfree(sds s); The destroy an SDS string there is just to call sdsfree with the string pointer. Note that even empty strings created with sdsempty need to be destroyed as well otherwise they'll result into a memory leak. The function sdsfree does not perform any operation if instead of an SDS string pointer, NULL is passed, so you don't need to check for NULL explicitly before calling it: if (string) sdsfree(string); /* Not needed. */ sdsfree(string); /* Same effect but simpler. */ Concatenating strings Concatenating strings to other strings is likely the operation you will end using the most with a dynamic C string library. SDS provides different functions to concatenate strings to existing strings. sds sdscatlen(sds s, const void *t, size_t len); sds sdscat(sds s, const char *t); The main string concatenation functions are sdscatlen and sdscat that are identical, the only difference being that sdscat does not have an explicit length argument since it expects a null terminated string. sds s = sdsempty(); s = sdscat(s, ""Hello ""); s = sdscat(s, ""World!""); printf(""%s\n"", s);  output> Hello World! Sometimes you want to cat an SDS string to another SDS string, so you don't need to specify the length, but at the same time the string does not need to be null terminated but can contain any binary data. For this there is a special function: sds sdscatsds(sds s, const sds t); Usage is straightforward: sds s1 = sdsnew(""aaa""); sds s2 = sdsnew(""bbb""); s1 = sdscatsds(s1,s2); sdsfree(s2); printf(""%s\n"", s1);  output> aaabbb Sometimes you don't want to append any special data to the string, but you want to make sure that there are at least a given number of bytes composing the whole string. sds sdsgrowzero(sds s, size_t len); The sdsgrowzero function will do nothing if the current string length is already len bytes, otherwise it will enlarge the string to len just padding it with zero bytes. sds s = sdsnew(""Hello""); s = sdsgrowzero(s,6); s[5] = '!'; /* We are sure this is safe because of sdsgrowzero() */ printf(""%s\n', s);  output> Hello! Formatting strings There is a special string concatenation function that accepts a printf alike format specifier and cats the formatted string to the specified string. sds sdscatprintf(sds s, const char *fmt, ...) { Example: sds s; int a = 10, b = 20; s = sdsnew(""The sum is: ""); s = sdscatprintf(s,""%d+%d = %d"",a,b,a+b); Often you need to create SDS string directly from printf format specifiers. Because sdscatprintf is actually a function that concatenates strings, all you need is to concatenate your string to an empty string: char *name = ""Anna""; int loc = 2500; sds s; s = sdscatprintf(sdsempty(), ""%s wrote %d lines of LISP\n"", name, loc); You can use sdscatprintf in order to convert numbers into SDS strings: int some_integer = 100; sds num = sdscatprintf(sdsempty(),""%d\n"", some_integer); However this is slow and we have a special function to make it efficient. Fast number to string operations Creating an SDS string from an integer may be a common operation in certain kind of programs, and while you may do this with sdscatprintf the performance hit is big, so SDS provides a specialized function. sds sdsfromlonglong(long long value); Use it like this: sds s = sdsfromlonglong(10000); printf(""%d\n"", (int) sdslen(s));  output> 5 Trimming strings and getting ranges String trimming is a common operation where a set of characters are removed from the left and the right of the string. Another useful operation regarding strings is the ability to just take a range out of a larger string. void sdstrim(sds s, const char *cset); void sdsrange(sds s, int start, int end); SDS provides both the operations with the sdstrim and sdsrange functions. However note that both functions work differently than most functions modifying SDS strings since the return value is void: basically those functions always destructively modify the passed SDS string, never allocating a new one, because both trimming and ranges will never need more room: the operations can only remove characters from the original string. Because of this behavior, both functions are fast and don't involve reallocation. This is an example of string trimming where newlines and spaces are removed from an SDS strings: sds s = sdsnew(""         my string\n\n  ""); sdstrim(s,"" \n""); printf(""-%s-\n"",s);  output> -my string- Basically sdstrim takes the SDS string to trim as first argument, and a null terminated set of characters to remove from left and right of the string. The characters are removed as long as they are not interrupted by a character that is not in the list of characters to trim: this is why the space between ""my"" and ""string"" was preserved in the above example. Taking ranges is similar, but instead to take a set of characters, it takes to indexes, representing the start and the end as specified by zero-based indexes inside the string, to obtain the range that will be retained. sds s = sdsnew(""Hello World!""); sdsrange(s,1,4); printf(""-%s-\n"");  output> -ello- Indexes can be negative to specify a position starting from the end of the string, so that -1 means the last character, -2 the penultimate, and so forth: sds s = sdsnew(""Hello World!""); sdsrange(s,6,-1); printf(""-%s-\n""); sdsrange(s,0,-2); printf(""-%s-\n"");  output> -World!- output> -World- sdsrange is very useful when implementing networking servers processing a protocol or sending messages. For example the following code is used implementing the write handler of the Redis Cluster message bus between nodes: void clusterWriteHandler(..., int fd, void *privdata, ...) {     clusterLink *link = (clusterLink*) privdata;     ssize_t nwritten = write(fd, link->sndbuf, sdslen(link->sndbuf));     if (nwritten <= 0) {         /* Error handling... */     }     sdsrange(link->sndbuf,nwritten,-1);     ... more code here ... } Every time the socket of the node we want to send the message to is writable we attempt to write as much bytes as possible, and we use sdsrange in order to remove from the buffer what was already sent. The function to queue new messages to send to some node in the cluster will simply use sdscatlen in order to put more data in the send buffer. Note that the Redis Cluster bus implements a binary protocol, but since SDS is binary safe this is not a problem, so the goal of SDS is not just to provide an high level string API for the C programmer but also dynamically allocated buffers that are easy to manage. String copying The most dangerous and infamus function of the standard C library is probably strcpy, so perhaps it is funny how in the context of better designed dynamic string libraries the concept of copying strings is almost irrelevant. Usually what you do is to create strings with the content you want, or concatenating more content as needed. However SDS features a string copy function that is useful in performance critical code sections, however I guess its practical usefulness is limited as the function never managed to get called in the context of the 50k lines of code composing the Redis code base. sds sdscpylen(sds s, const char *t, size_t len); sds sdscpy(sds s, const char *t); The string copy function of SDS is called sdscpylen and works like that: s = sdsnew(""Hello World!""); s = sdscpylen(s,""Hello Superman!"",15); As you can see the function receives as input the SDS string s, but also returns an SDS string. This is common to many SDS functions that modify the string: this way the returned SDS string may be the original one modified or a newly allocated one (for example if there was not enough room in the old SDS string). The sdscpylen will simply replace what was in the old SDS string with the new data you pass using the pointer and length argument. There is a similar function called sdscpy that does not need a length but expects a null terminated string instead. You may wonder why it makes sense to have a string copy function in the SDS library, since you can simply create a new SDS string from scratch with the new value instead of copying the value in an existing SDS string. The reason is efficiency: sdsnewlen will always allocate a new string while sdscpylen will try to reuse the existing string if there is enough room to old the new content specified by the user, and will allocate a new one only if needed. Quoting strings In order to provide consistent output to the program user, or for debugging purposes, it is often important to turn a string that may contain binary data or special characters into a quoted string. Here for quoted string we mean the common format for String literals in programming source code. However today this format is also part of the well known serialization formats like JSON and CSV, so it definitely escaped the simple goal of representing literals strings in the source code of programs. An example of quoted string literal is the following: ""\x00Hello World\n"" The first byte is a zero byte while the last byte is a newline, so there are two non alphanumerical characters inside the string. SDS uses a concatenation function for this goal, that concatenates to an existing string the quoted string representation of the input string. sds sdscatrepr(sds s, const char *p, size_t len); The scscatrepr (where repr means representation) follows the usualy SDS string function rules accepting a char pointer and a length, so you can use it with SDS strings, normal C strings by using strlen() as len argument, or binary data. The following is an example usage: sds s1 = sdsnew(""abcd""); sds s2 = sdsempty(); s[1] = 1; s[2] = 2; s[3] = '\n'; s2 = sdscatrepr(s2,s1,sdslen(s1)); printf(""%s\n"", s2);  output> ""a\x01\x02\n"" This is the rules sdscatrepr uses for conversion: \ and "" are quoted with a backslash. It quotes special characters '\n', '\r', '\t', '\a' and '\b'. All the other non printable characters not passing the isprint test are quoted in \x.. form, that is: backslash followed by x followed by two digit hex number representing the character byte value. The function always adds initial and final double quotes characters. There is an SDS function that is able to perform the reverse conversion and is documented in the Tokenization section below. Tokenization Tokenization is the process of splitting a larger string into smaller strings. In this specific case, the split is performed specifying another string that acts as separator. For example in the following string there are two substrings that are separated by the |-| separator: foo|-|bar|-|zap  A more common separator that consists of a single character is the comma: foo,bar,zap  In many progrems it is useful to process a line in order to obtain the sub strings it is composed of, so SDS provides a function that returns an array of SDS strings given a string and a separator. sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count); void sdsfreesplitres(sds *tokens, int count); As usually the function can work with both SDS strings or normal C strings. The first two arguments s and len specify the string to tokenize, and the other two arguments sep and seplen the separator to use during the tokenization. The final argument count is a pointer to an integer that will be set to the number of tokens (sub strings) returned. The return value is a heap allocated array of SDS strings. sds *tokens; int count, j;  sds line = sdsnew(""Hello World!""); tokens = sdssplitlen(line,sdslen(line),"" "",1,&count);  for (j = 0; j < count; j++)     printf(""%s\n"", tokens[j]); sdsfreesplitres(tokens,count);  output> Hello output> World! The returned array is heap allocated, and the single elements of the array are normal SDS strings. You can free everything calling sdsfreesplitres as in the example. Alternativey you are free to release the array yourself using the free function and use and/or free the individual SDS strings as usually. A valid approach is to set the array elements you reused in some way to NULL, and use sdsfreesplitres to free all the rest. Command line oriented tokenization Splitting by a separator is a useful operation, but usually it is not enough to perform one of the most common tasks involving some non trivial string manipulation, that is, implementing a Command Line Interface for a program. This is why SDS also provides an additional function that allows you to split arguments provided by the user via the keyboard in an interactive manner, or via a file, network, or any other mean, into tokens. sds *sdssplitargs(const char *line, int *argc); The sdssplitargs function returns an array of SDS strings exactly like sdssplitlen. The function to free the result is also identical, and is sdsfreesplitres. The difference is in the way the tokenization is performed. For example if the input is the following line: call ""Sabrina""    and ""Mark Smith\n""  The function will return the following tokens: ""call"" ""Sabrina"" ""and"" ""Mark Smith\n"" Basically different tokens need to be separated by one or more spaces, and every single token can also be a quoted string in the same format that sdscatrepr is able to emit. String joining There are two functions doing the reverse of tokenization by joining strings into a single one. sds sdsjoin(char **argv, int argc, char *sep, size_t seplen); sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen); The two functions take as input an array of strings of length argc and a separator and its length, and produce as output an SDS string consisting of all the specified strings separated by the specified separator. The difference between sdsjoin and sdsjoinsds is that the former accept C null terminated strings as input while the latter requires all the strings in the array to be SDS strings. However because of this only sdsjoinsds is able to deal with binary data. char *tokens[3] = {""foo"",""bar"",""zap""}; sds s = sdsjoin(tokens,3,""|"",1); printf(""%s\n"", s);  output> foo|bar|zap Error handling All the SDS functions that return an SDS pointer may also return NULL on out of memory, this is basically the only check you need to perform. However many modern C programs handle out of memory simply aborting the program so you may want to do this as well by wrapping malloc and other related memory allocation calls directly. SDS internals and advanced usage At the very beginning of this documentation it was explained how SDS strings are allocated, however the prefix stored before the pointer returned to the user was classified as an header without further details. For an advanced usage it is better to dig more into the internals of SDS and show the structure implementing it: struct sdshdr {     int len;     int free;     char buf[]; }; As you can see, the structure may resemble the one of a conventional string library, however the buf field of the structure is different since it is not a pointer but an array without any length declared, so buf actually points at the first byte just after the free integer. So in order to create an SDS string we just allocate a piece of memory that is as large as the sdshdr structure plus the length of our string, plus an additional byte for the mandatory null term that every SDS string has. The len field of the structure is quite obvious, and is the current length of the SDS string, always computed every time the string is modified via SDS function calls. The free field instead represents the amount of free memory in the current allocation that can be used to store more characters. So the actual SDS layout is this one: +------------+------------------------+-----------+---------------\ | Len | Free | H E L L O W O R L D \n | Null term |  Free space   \ +------------+------------------------+-----------+---------------\              |              `-> Pointer returned to the user.  You may wonder why there is some free space at the end of the string, it looks like a waste. Actually after a new SDS string is created, there is no free space at the end at all: the allocation will be as small as possible to just hold the header, string, and null term. However other access patterns will create extra free space at the end, like in the following program: s = sdsempty(); s = sdscat(s,""foo""); s = sdscat(s,""bar""); s = sdscat(s,""123""); Since SDS tries to be efficient it can't afford to reallocate the string every time new data is appended, since this would be very inefficient, so it uses the preallocation of some free space every time you enlarge the string. The preallocation algorithm used is the following: every time the string is reallocated in order to hold more bytes, the actual allocation size performed is two times the minimum required. So for instance if the string currently is holding 30 bytes, and we concatenate 2 more bytes, instead of allocating 32 bytes in total SDS will allocate 64 bytes. However there is an hard limit to the allocation it can perform ahead, and is defined by SDS_MAX_PREALLOC. SDS will never allocate more than 1MB of additional space (by default, you can change this default). Shrinking strings sds sdsRemoveFreeSpace(sds s); size_t sdsAllocSize(sds s); Sometimes there are class of programs that require to use very little memory. After strings concatenations, trimming, ranges, the string may end having a non trivial amount of additional space at the end. It is possible to resize a string back to its minimal size in order to hold the current content by using the function sdsRemoveFreeSpace. s = sdsRemoveFreeSpace(s); There is also a function that can be used in order to get the size of the total allocation for a given string, and is called sdsAllocSize. sds s = sdsnew(""Ladies and gentlemen""); s = sdscat(s,""... welcome to the C language.""); printf(""%d\n"", (int) sdsAllocSize(s)); s = sdsRemoveFreeSpace(s); printf(""%d\n"", (int) sdsAllocSize(s));  output> 109 output> 59 NOTE: SDS Low level API use cammelCase in order to warn you that you are playing with the fire. Manual modifications of SDS strings void sdsupdatelen(sds s);  Sometimes you may want to hack with an SDS string manually, without using SDS functions. In the following example we implicitly change the length of the string, however we want the logical length to reflect the null terminated C string. The function sdsupdatelen does just that, updating the internal length information for the specified string to the length obtained via strlen. sds s = sdsnew(""foobar""); s[2] = '\0'; printf(""%d\n"", sdslen(s)); sdsupdatelen(s); printf(""%d\n"", sdslen(s));  output> 6 output> 2 Sharing SDS strings If you are writing a program in which it is advantageous to share the same SDS string across different data structures, it is absolutely advised to encapsulate SDS strings into structures that remember the number of references of the string, with functions to increment and decrement the number of references. This approach is a memory management technique called reference counting and in the context of SDS has two advantages: It is less likely that you'll create memory leaks or bugs due to non freeing SDS strings or freeing already freed strings. You'll not need to update every reference to an SDS string when you modify it (since the new SDS string may point to a different memory location). While this is definitely a very common programming technique I'll outline the basic ideas here. You create a structure like that: struct mySharedString {     int refcount;     sds string; } When new strings are created, the structure is allocated and returned with refcount set to 1. The you have two functions to change the reference count of the shared string: incrementStringRefCount will simply increment refcount of 1 in the structure. It will be called every time you add a reference to the string on some new data structure, variable, or whatever. decrementStringRefCount is used when you remove a reference. This function is however special since when the refcount drops to zero, it automatically frees the SDS string, and the mySharedString structure as well. Interactions with heap checkers Because SDS returns pointers into the middle of memory chunks allocated with malloc, heap checkers may have issues, however: The popular Valgrind program will detect SDS strings are possibly lost memory and never as definitely lost, so it is easy to tell if there is a leak or not. I used Valgrind with Redis for years and every real leak was consistently detected as ""definitely lost"". OSX instrumentation tools don't detect SDS strings as leaks but are able to correctly handle pointers pointing to the middle of memory chunks. Zero copy append from syscalls At this point you should have all the tools to dig more inside the SDS library by reading the source code, however there is an interesting pattern you can mount using the low level API exported, that is used inside Redis in order to improve performances of the networking code. Using sdsIncrLen() and sdsMakeRoomFor() it is possible to mount the following schema, to cat bytes coming from the kernel to the end of an sds string without copying into an intermediate buffer: oldlen = sdslen(s); s = sdsMakeRoomFor(s, BUFFER_SIZE); nread = read(fd, s+oldlen, BUFFER_SIZE); ... check for nread <= 0 and handle it ... sdsIncrLen(s, nread); sdsIncrLen is documented inside the source code of sds.c. Embedding SDS into your project This is as simple as copying the following files inside your project: sds.c sds.h sdsalloc.h The source code is small and every C99 compiler should deal with it without issues. Using a different allocator for SDS Internally sds.c uses the allocator defined into sdsalloc.h. This header file just defines macros for malloc, realloc and free, and by default libc malloc(), realloc() and free() are used. Just edit this file in order to change the name of the allocation functions. The program using SDS can call the SDS allocator in order to manipulate SDS pointers (usually not needed but sometimes the program may want to do advanced things) by using the API exported by SDS in order to call the allocator used. This is especially useful when the program linked to SDS is using a different allocator compared to what SDS is using. The API to access the allocator used by SDS is composed of three functions: sds_malloc(), sds_realloc() and sds_free(). Credits and license SDS was created by Salvatore Sanfilippo and is released under the BDS two clause license. See the LICENSE file in this source distribution for more information. Oran Agra improved SDS version 2 by adding dynamic sized headers in order to save memory for small strings and allow strings greater than 4GB. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/antirez/sds"	"Simple Dynamic Strings library for C. [BSD]"	"true"
"Miscellaneous"	"semver.c"	"https://github.com/h2non/semver.c"	"A semver parser and render in ANSI C. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"75"	"6"	"4"	"GitHub - h2non/semver.c: semver parser written in ANSI C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 75 Fork 4 h2non/semver.c Code Issues 2 Pull requests 0 Pulse Graphs semver parser written in ANSI C 88 commits 1 branch 5 releases Fetching contributors C 99.1% Makefile 0.9% C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 8009c76 Mar 1, 2016 h2non refactor(docs): remove beta notice Permalink Failed to load latest commit information. .editorconfig feat: first commit Aug 16, 2015 .gitignore feat: first commit Aug 16, 2015 .travis.yml refactor(travis): valgrind command Aug 25, 2015 LICENSE feat(#3): free Aug 22, 2015 Makefile fix(#6) Aug 24, 2015 README.md refactor(docs): remove beta notice Mar 1, 2016 package.json semver.c refactor: parse metadata Oct 13, 2015 semver.h feat: numeric render for sorting Sep 24, 2015 semver_test.c README.md semver.c Semantic version v2.0 parser and render written in ANSI C with zero dependencies. Features Version metadata parsing Version prerelease parsing Version comparison Comparison helpers Comparison operators Version render Version bump Version sanitizer 100% coverage No regex (actually ANSI C doesn't support it) Numeric conversion for sorting/filtering Range characters Fuzz testing Usage Basic comparison: #include <stdio.h> #include <semver.h>  char current[] = ""1.5.10""; char compare[] = ""2.3.0"";  int main(int argc, char *argv[]) {     semver_t current_version = {};     semver_t compare_version = {};      if (semver_parse(current, &current_version)       || semver_parse(compare, &compare_version)) {       fprintf(stderr,""Invalid semver string\n"");       return -1;     }      int resolution = semver_compare(compare_version, current_version);      if (resolution == 0) {       printf(""Versions %s is equal to: %s\n"", compare, current);     }     else if (resolution == -1) {       printf(""Version %s is lower than: %s\n"", compare, current);     }     else {       printf(""Version %s is higher than: %s\n"", compare, current);     }      // Free allocated memory when we're done     semver_free(&current_version);     semver_free(&compare_version);     return 0; } Satisfies version: #include <stdio.h> #include <semver.h>  semver_t current = {}; semver_t compare = {};  int main(int argc, char *argv[]) {     semver_parse(""1.3.10"", &current);     semver_parse(""1.5.2"", &compare);      // Use caret operator for the comparison     char operator[] = ""^"";      if (semver_satisfies(current, compare, operator)) {       printf(""Version %s can be satisfied by %s"", ""1.3.10"", ""1.5.2"");     }      // Free allocated memory when we're done     semver_free(&current);     semver_free(&compare);     return 0; } Installation Clone this repository: $ git clone https://github.com/h2non/semver.c Or install with clib: $ clib install h2non/semver.c API struct semver_t { int major, int minor, int patch, char * prerelease, char * metadata } semver base struct. semver_parse(const char *str, semver_t *ver) => int Parses a string as semver expression. Returns: -1 - In case of invalid semver or parsing error. 0 - All was fine! semver_compare(semver_t a, semver_t b) => int Compare versions a with b. Returns: -1 in case of lower version. 0 in case of equal versions. 1 in case of higher version. semver_satisfies(semver_t a, semver_t b, char *operator) => int Checks if both versions can be satisfied based on the given comparison operator. Allowed operators: = - Equality >= - Higher or equal to <= - Lower or equal to < - Lower than > - Higher than ^ - Caret operator comparison (more info) ~ - Tilde operator comparison (more info) Returns: 1 - Can be satisfied 0 - Cannot be satisfied semver_satisfies_caret(semver_t a, semver_t b) => int Checks if version x can be satisfied by y performing a comparison with caret operator. See: https://docs.npmjs.com/misc/semver#caret-ranges-1-2-3-0-2-5-0-0-4 Returns: 1 - Can be satisfied 0 - Cannot be satisfied semver_satisfies_patch(semver_t a, semver_t b) => int Checks if version x can be satisfied by y performing a comparison with tilde operator. See: https://docs.npmjs.com/misc/semver#tilde-ranges-1-2-3-1-2-1 Returns: 1 - Can be satisfied 0 - Cannot be satisfied semver_eq(semver_t a, semver_t b) => int Equality comparison. semver_ne(semver_t a, semver_t b) => int Non equal comparison. semver_gt(semver_t a, semver_t b) => int Greater than comparison. semver_lt(semver_t a, semver_t b) => int Lower than comparison. semver_gte(semver_t a, semver_t b) => int Greater than or equal comparison. semver_lte(semver_t a, semver_t b) => int Lower than or equal comparison. semver_render(semver_t *v, char *dest) => void Render as string. semver_numeric(semver_t *v) => int Render as numeric value. Useful for ordering and filtering. semver_bump(semver_t *a) => void Bump major version. semver_bump_minor(semver_t *a) => void Bump minor version. semver_bump_patch(semver_t *a) => void Bump patch version. semver_free(semver_t *a) => void Helper to free allocated memory from heap. semver_is_valid(char *str) => int Checks if the given string is a valid semver expression. semver_clean(const char *str, char *dest) => int Removes invalid semver characters in a given string. License MIT - Tomas Aparicio Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/h2non/semver.c"	"A semver parser and render in ANSI C. [MIT]"	"true"
"Miscellaneous"	"Serial Communication Library"	"https://github.com/wjwwood/serial"	"Cross-platform, Serial Port library written in C++. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"249"	"37"	"151"	"GitHub - wjwwood/serial: Cross-platform, Serial Port library written in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 249 Fork 151 wjwwood/serial Code Issues 11 Pull requests 7 Pulse Graphs Cross-platform, Serial Port library written in C++ http://wjwwood.github.com/serial/ 354 commits 2 branches 17 releases Fetching contributors C++ 94.3% CMake 2.1% C 2.1% Makefile 1.3% Python 0.2% C++ CMake C Makefile Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.0.1 v1.0 v0.2 v0.1 new_api fuerte boostless 1.2.1 1.2.0 1.1.7 1.1.6 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 Nothing to show New pull request Latest commit 2d416f1 Dec 2, 2015 wjwwood Merge pull request #118 from Rimco/patch-1 … Updated serial.cc for FreeBSD 9 compatibility. Permalink Failed to load latest commit information. doc Releasing version 1.1.0 of serial Oct 24, 2012 examples Changed the serial::PortDescription struct. Apr 24, 2014 include/serial [doc] fixup/clarify some throws documentation Apr 21, 2015 src Updated serial.cc for FreeBSD 9 compatibility. Nov 26, 2015 tests Add unix timer tests, clarify tests are only on unix at present, move… Nov 18, 2013 visual_studio Can use the toolsets from Visual Studio 2010, 2012, 2013, 2015 Sep 22, 2015 .gitignore Add VS related ignore files to .gitignore Jul 19, 2014 .travis.yml trying different travis osx settings Dec 29, 2014 CHANGELOG.rst 1.2.1 Apr 21, 2015 CMakeLists.txt support for mxe Aug 16, 2014 Makefile travis: fixup os x dep install Mar 9, 2015 README.md Add CI status to README.md Dec 29, 2014 changes.txt Releasing version 1.1.0 of serial Oct 24, 2012 package.xml 1.2.1 Apr 22, 2015 serial.sublime-project [style] whitespace and configs Apr 21, 2015 README.md Serial Communication Library (Linux and OS X) (Windows) This is a cross-platform library for interfacing with rs-232 serial like ports written in C++. It provides a modern C++ interface with a workflow designed to look and feel like PySerial, but with the speed and control provided by C++. This library is in use in several robotics related projects and can be built and installed to the OS like most unix libraries with make and then sudo make install, but because it is a catkin project it can also be built along side other catkin projects in a catkin workspace. Serial is a class that provides the basic interface common to serial libraries (open, close, read, write, etc..) and requires no extra dependencies. It also provides tight control over timeouts and control over handshaking lines. Documentation Website: http://wjwwood.github.com/serial/ API Documentation: http://wjwwood.github.com/serial/doc/1.1.0/index.html Dependencies catkin - cmake and Python based buildsystem cmake - buildsystem Python - scripting language empy - Python templating library catkin_pkg - Runtime Python library for catkin Install Get the code: git clone https://github.com/wjwwood/serial.git  Build: make  Build and run the tests: make test  Build the documentation: make docs  Install: make install  Uninstall: make uninstall  License The MIT License Copyright (c) 2012 William Woodall, John Harrison Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Authors William Woodall wjwwood@gmail.com John Harrison ash.gti@gmail.com Contact William Woodall william@osrfoundation.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wjwwood/serial"	"Cross-platform, Serial Port library written in C++. [MIT]"	"true"
"Miscellaneous"	"sigslot"	"http://sigslot.sourceforge.net/"	"C++ Signal/Slot Library. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"sigslot - C++ Signal/Slot Library sigslot - C++ Signal/Slot Library Written by Sarah Thompson - sarah@telergy.com You can find the latest version of this documentation at http://sigslot.sourceforge.net/ For downloads, mailing lists, bug reports, help and support, or anything similar, go to http://sourceforge.net/projects/sigslot The author's personal web site is at http://www.findatlantis.com/ Contents Introduction Downloading the sigslot library Documentation Reporting Bugs License Information Introduction The C++ programming language is an amazingly capable beast. However, it is no panacea for all ills - it is just as possible to write spaghetti in this language as it is in any other (arguably easier than some). C++ is usually described as an object-oriented language. Its claim to object orientation is generally appropriate, but unlike some other languages, C++ doesn't actually enforce good practice. Whether or not you think this is a good thing or a bad thing is up to you, I'm not interested in starting a religious war here, so I'll neatly sidestep the issue by changing the subject for a moment. Flame me, flame me not Before you lock & load your rocket launchers, folks, I'm using the MFC by way of example only. The signal/slot library is ISO C++ compliant (at least where possible) and will work on pretty much anything. All you need is a reasonable C++ compiler that supports templates. You don't need partial template specialisation support, so VC6 and VC.NET are both fine. The Microsoft Foundation Classes (MFC) are a nightmarish mess. I'll say it again - the MFC is a programmer's nightmare. At one point it almost inspired me to give up programming and take up something less irritating, like becoming a professional 'nut the javelin' player or move to Outer Patagonia and become a cat wrangler. Nevertheless, the MFC is capable of supporting most things that you might want to do with the Windows platform, at the price of a little slice of one's sanity. There are two reasons why the MFC is so painful. Firstly, it too-often seems to require an uphill struggle in order to get the simplest things to work. Secondly, it is very difficult and/or evilly messy trying to get disparate classes within an MFC application to talk to each other. The former problem is down to the design of the MFC itself - only deep experience using it can really get around this. The second problem is a consequence of the MFC being quite a thin wrapper around the underlying Windows SDK - getting one window to talk to another window often requires resorting to oldfashioned Windows 3.1 techniques like ::SendMessage() or ::PostMessage() with custom Windows messages. Yuck. That kind of code is difficult to write, difficult to debug, hard to maintain and generally speaking a Bad Idea. Take a simple example. Imagine we want to create a dialog box, with a number displayed on it, and a couple of buttons which let you increment or decrement the number: If you're going to program the MFC way, you'd slap in that dialog to the dialog editor in Visual Studio, then add message handlers for the 'Increment' and 'Decrement' buttons that use the MFC's DDX mechanism to update the number in the edit box. Easy enough you might think, but where's the reusability? I signed up to the card-carring object orientation movement on the basis that it was supposed to make it easier to reuse my code, or to use components written by other people with a minimum of pain. The MFC way of working might as well be Visual Basic, requiring cut-and-paste code reuse. Evil, nasty, bad. What, in circumstances like this, I'd really like to be able to do is turn the numeric edit control and the increment/decrement buttons into genuinely reusable components in their own right. By component, I don't mean COM object or Active-X control, just a simple, lightwight, reusable C++ class. The MFC way of doing this, reasonably enough, would be to inherit from the basic controls (CEdit and CButton in this example), then give those classes a common interface of some kind. You might, sensibly enough, add a couple of entry points to your numeric edit class, 'CMyEdit::Increment()' and 'CMyEdit::Decrement()', say, then in your CIncrementButton and CDecrementButton classes hold a pointer to a CMyEdit so that they can implement OnOK() handlers that call the relevant member functons in CMyEdit. This is fractionally better, but still not at all nice. What I'd like is to be able to create a general purpose button, that, er, well, 'clicks' when you click it, and an edit box that can be directed to do a variety of things remotely, such as increment, decrement, copy to clipboard, go back to zero, etc. The edit box shouldn't need to care what is calling it. Just as importantly, buttons shouldn't have to care what they are calling either, so the same, unmodified button class can be used to increment, decrement or clear the control this afternoon, and next week end up wired to my internet compliant remote garage door opener. Or whatever. But the important thing is that only the user of the classes should need to know (or care) how they are wired up - the classes themselves, to be genuinely reusable, should be above that kind of thing. Speaking as an ex-hardware designer, I'd like software components to have pins around their edges, like ICs, so they can be 'wired up', but otherwise should be well behaved. To design a board with, say, an 8 bit microcontroller on it is made much easier by knowing that pin 34 is always Chip Enable (or something). I don't want to know how that pin is wired internally - I just want to know that it will work when I send a signal into it. Credit where credit's due: Qt The Qt library (see http://www.troll.no/ for further information) was the first attempt I personally ever saw at extending C++ by adding a 'signal-slot' metaphor to the language's existing repertoire of programming techniques. Qt was a revelation to me when I started using it, which must be something like three years ago at the time of writing. For once, I could write code relatively quickly, with a reasonable chance of it actually working the way I intended it without the days of pushing water uphill with a fork that was usually required to breathe life into MFC applications. The thing that impressed me most about Qt was its signal/slot metaphor. Qt uses a preprocessor, moc, to preprocess an extended C++ syntax. Put briefly, any Qt class can possess one or more signals, and one or more slots. A slot is very much like an ordinary member function. Indeed, slots can be called directly as member functions, with the only syntactic difference being the need for the slots keyword in the class header file. A signal in Qt is declared much like a member function, except that it has no local implementation - it just appears like a member function prototype in the header file. Signals can be connected, using the connect function, with any number of slots in any other C++ objects. When a signal is emitted, using the new keyword emit, all connected slots get called. In principle, signals and slots are a bit like pointers, where a signal can be 'wired up' after the fact to the slots that need to be informed whenever it is emitted. Using pointers, be they function pointers, pointers to classes or pointers to class member functions, does have its own risks, of course. There are no guarantees, given such a pointer, that using it is safe - it is always necessary for the programmer to know, given the context of its use, that it is safe. Most programmers get this right nearly all of the time, of course. But when we get it wrong, our code goes horrendously bang, usually five minutes before a demo to the visiting CEO of your biggest client. I always tend to favour situations where the programming language picks up automatically on that kind of thing. Signals and slots, in my opinion, have three major advantages over pointers: Syntactically Neater. Signals & slots make for very readable code. You define your signals. You define your slots. You wire them up. That's it, and no surprises. Inherently Robust. This is the neat part: when either end of a signal/slot connection is destroyed, the connection is automatically removed. It is therefore impossible to emit a signal and have it arrive at a class that has already been deleted. Best of all, you don't need to write any explicit cleanup code - if the caller goes out of scope, no problem. If the callee goes out of scope, no problem either. Easier code reuse. Since the thing that has to type-agree is the signal and the slot, not the whole class interface, it is much easier to plug together disparate classes that had never initially been intended to work in that way. (Take it from me - I've done this in anger, and it really does make a difference) I really like Qt. I think the people at TrollTech in Norway have done a brilliant job - their class library is far and away the best GUI library I've ever used (though the .NET framework actually comes remarkably close, but enough flame bait for one article). More credit where more credit's due: Boost, GTK and James Slaughter When I was working at Trayport in London, a coworker there, James Slaughter, got me interested in the Boost libraries, and was largely responsible for reawakening my interest in C++ as a programming language with real promise. Thank you James, if you're reading this. (As an aside, I was previously getting very interested in Objective CaML, but that's for another article at another time). When I evangelised Qt within James' earshot, he opined that Qt was pretty good, but he wasn't keen on the moc preprocessor. Rightly enough, moc has a rather bad rep for mangling attempts to use templates in Qt-enabled classes, and it's always irritating to need to hack build scripts to preprocess code. James did mention that type safe signal/slot functionality was possible in C++. I'd kind of thought about it myself, but hadn't initially realised that it really was possible to do without something like moc. I did a bit of a net search, and it seemed that a couple of people had put together C++ signal/slot libraries. One was in the pipeline for adoption by Boost (still is, at the time of writing). Another is due to the GTK bunch, as part of the GTK's C++ wrapper. Both were a little heavyweight for my needs (writing MFC code whilst staying at least a bit sane), and neither looked like good candidates for a straightforward Windows port. I chose to write my own instead. The rest is history. Downloading the sigslot library You can download sigslot from the project downloads page. Documentation Detailed documentation for sigslot is currently in LaTeX format. I haven't yet decided whether to convert this to HTML and post it here, or to laboriously glomm it into the documentation system at SourceForge. For the moment, you can get the PDF version from the link below. If you want the LaTeX source, or are feeling kind and generous and would like to contribute by doing this conversion, please email me. PDF Documentation (sigslot.pdf, 73kb) Reporting Bugs So far, sigslot has been tested on VC++ 6.0 on Win32, VC++ 7.0 (Unmanaged) on Win32, gcc under Cygwin and Intel C++ on Win32. It has also been used in some real code without problems. However, it is relatively new, so tread carefully and please make sure to report any bugs, fixes or feature requests to the project team. By preference, please do this through the bug tracking system at SourceForge. License The sigslot library has been placed in the public domain. This means that you are free to use it however you like. The author takes no responsibility or liability of any kind for any use that you may make of this library. If you screw up, it's your fault. If the library screws up, you got it for free, so you should have tested it better - it's still your responsibility."	"null"	"null"	"C++ Signal/Slot Library. [PublicDomain]"	"true"
"Miscellaneous"	"SLDR"	"https://github.com/cesanta/sldr"	"Super Light DNS Resolver. [GPL2/Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"https://github.com/cesanta/sldr"	"Super Light DNS Resolver. [GPL2/Commercial]"	"false"
"Miscellaneous"	"SLRE"	"https://github.com/cesanta/slre"	"Super Light Regexp engine for C/C++. [GPL2/Commercial]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"283"	"39"	"61"	"GitHub - cesanta/slre: Super Light Regexp engine for C/C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 283 Fork 61 cesanta/slre Code Issues 9 Pull requests 0 Pulse Graphs Super Light Regexp engine for C/C++ 80 commits 1 branch 3 releases 5 contributors C 100.0% C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.3 1.2 1.1 Nothing to show New pull request Latest commit 1ac661a Jun 20, 2016 rojer committed with cesantabot Mass-fix header guards … PUBLISHED_FROM=7e5fc4da88069a6193d911660f522b43ed1a5d40 Permalink Failed to load latest commit information. docs SLRE docs - README references real docs Jun 7, 2016 LICENSE URL fixed Feb 11, 2014 README.md Simplify Contributions section in readmes Jun 10, 2016 slre.c Bit test fix in match_set() Jul 17, 2015 slre.h Mass-fix header guards Jun 20, 2016 unit_test.c Update unit_test.c Mar 10, 2016 README.md SLRE: Super Light Regular Expression library Documentation and API reference are at docs.cesanta.com/slre Contributions To submit contributions, sign Cesanta CLA and send GitHub pull request. You retain the copyright on your contributions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cesanta/slre"	"Super Light Regexp engine for C/C++. [GPL2/Commercial]"	"true"
"Miscellaneous"	"Stage"	"https://github.com/rtv/Stage"	"Mobile robot simulator. [GPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"126"	"21"	"71"	"GitHub - rtv/Stage: Mobile robot simulator Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 126 Fork 71 rtv/Stage Code Issues 20 Pull requests 2 Wiki Pulse Graphs Mobile robot simulator http://rtv.github.com/Stage 2,236 commits 3 branches 4 releases 8 contributors C++ 79.5% TeX 5.2% Perl 4.5% SourcePawn 3.7% C 2.6% CMake 2.4% Other 2.1% C++ TeX Perl SourcePawn C CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags accel gh-pages master Nothing to show v4.1.1 v4.1.0 v4.0.1 v4.0.0 Nothing to show New pull request Latest commit 21d3bcd May 6, 2016 rtv Merge pull request #44 from jpgr87/bumper2 … Bumper model with Player interface Permalink Failed to load latest commit information. assets working on much more elaborate fasr2 demo Feb 19, 2010 avonstage trying to fix STL build problem on older gccs Feb 15, 2011 cmake/internal Install project libraries to libdir/PROJECT_NAME-APIVERSION to match Jun 20, 2010 docsrc docs Dec 29, 2011 examples squished all compiler warnings May 6, 2016 libstage Merge pull request #44 from jpgr87/bumper2 May 6, 2016 libstageplugin Add the rest of the bumper patch. Feb 16, 2014 replace removed dirname from replace.h as a temporary measure - most platform… Oct 20, 2009 tests/worldfile Merge remote branch 'upstream/master' Jun 18, 2010 worlds Merge pull request #44 from jpgr87/bumper2 May 7, 2016 .gitignore hiding built docs from git Jan 11, 2012 AUTHORS.txt preparing package for release 4.0.0 Nov 25, 2010 CMakeLists.txt fixed most compiler warnings May 6, 2016 COPYING.txt Changed extensions Jul 11, 2008 DESCRIPTION.txt Changed extensions Jul 11, 2008 INSTALL.txt preparing version 4.1.0 release Dec 28, 2011 README.txt preparing version 4.1.0 release Dec 29, 2011 RELEASE.txt bugfix release 4.1.1 Jan 11, 2012 config.h.in Added build system patches for the following: Jun 20, 2010 stage-config-version.cmake.in Fix pkgconfig file and add CMake module files Mar 28, 2015 stage-config.cmake.in Fix pkgconfig file and add CMake module files Mar 29, 2015 stage.pc.in Fix pkgconfig file and add CMake module files Mar 29, 2015 todo.txt testing Nov 5, 2011 README.txt Stage README.txt ================  This is the Stage README file, containing an introduction, license and citation information.  For release notes see RELEASE.txt For installation notes see INSTALL.txt  Copyright Richard Vaughan and contributors 1998-2011 Part of the Player Project (http://playerstage.org)  License ------- This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  A copy of the license is included with the sourcecode in the file 'COPYING"". Copying and redistribution is permitted only under the terms of the license.   Introduction ------------ Stage is a robot simulator. It provides a virtual world populated by mobile robots and sensors, along with various objects for the robots to sense and manipulate.  There are three ways to use Stage:   1. The ""stage"" program: a standalone robot simulation program that loads your robot control program from a library that you provide.  2. The Stage plugin for Player (libstageplugin) - provides a population of virtual robots for the popular Player networked robot interface system.  3. Write your own simulator: the ""libstage"" C++ library makes it easy to create, run and customize a Stage simulation from inside your own programs.   Models ------ Stage provides several sensor and actuator models, including sonar or infrared rangers, scanning laser rangefinder, color-blob tracking, fiducial tracking, bumpers, grippers and mobile robot bases with odometric or global localization.   Design ------ Stage was designed with multi-agent systems in mind, so it provides fairly simple, computationally cheap models of lots of devices rather than attempting to emulate any device with great fidelity. This design is intended to be useful compromise between conventional high-fidelity robot simulations, the minimal simulations described by Jakobi [4], and the grid-world simulations common in artificial life research [5]. We intend Stage to be just realistic enough to enable users to move controllers between Stage robots and real robots, while still being fast enough to simulate large populations. We also intend Stage to be comprehensible to undergraduate students, yet sophisticated enough for professional reseachers.    Player also contains several useful 'virtual devices'; including some sensor pre-processing or sensor-integration algorithms that help you to rapidly build powerful robot controllers. These are easy to use with Stage.   Citations --------- If you use Stage in your work, we'd appreciate a citation. At the time  of writing, the most suitable reference is either:  Richard Vaughan. ""Massively Multiple Robot Simulations in Stage"", Swarm Intelligence 2(2-4):189-208, 2008. Springer.  Or, if you are using Player/Stage:  Brian Gerkey, Richard T. Vaughan and Andrew Howard. ""The Player/Stage  Project: Tools for Multi-Robot and Distributed Sensor Systems""  Proceedings of the 11th International Conference on Advanced Robotics, pages 317-323, Coimbra, Portugal, June 2003 (ICAR'03)   http://www.isr.uc.pt/icar03/ .    [gzipped postscript](http://robotics.stanford.edu/~gerkey/research/final_papers/icar03-player.ps.gz),  [pdf](http://robotics.stanford.edu/~gerkey/research/final_papers/icar03-player.pdf)  Please help us keep track of what's being used out there by correctly naming the Player/Stage components you use. Player used on its own is called ""Player"". Player and Stage used together are referred to as ""the Player/Stage system"" or just ""Player/Stage"". When Stage is used without Player, it's just called ""Stage"". When the Stage library is used to create your own custom simulator, it's called ""libstage"" or ""the Stage library"". When Player is used with its 3D ODE-based simulation backend, Gazebo, it's called Player/Gazebo. Gazebo without Player is just ""Gazebo"". All this software is part of the ""Player Project"".  Support ------- Funding for Stage has been provided in part by:  - DARPA (USA) - NASA (USA) - NSERC (Canada) - DRDC Suffield (Canada) - NSF (USA) - Simon Fraser University (Canada)  Names ----- The names ""Player"" and ""Stage"" were inspired by the lines:      ""All the world's a stage,        And all the men and women merely players""    from ""As You Like It"" by William Shakespeare.   References ---------- [4] Nick Jakobi (1997) ""Evolutionary Robotics and the Radical Envelope of Noise Hypothesis"", Adaptive Behavior Volume 6, Issue 2. pp.325 - 368.   [5] Stuart Wilson (1985) ""Knowledge Growth in an Artificial Animal"", Proceedings of the First International Conference on Genetic Agorithms and Their Applications.  Hillsdale, New Jersey. pp.16-23.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rtv/Stage"	"Mobile robot simulator. [GPL2]"	"true"
"Miscellaneous"	"stb"	"https://github.com/nothings/stb"	"A range of single-file libraries for C/C++. [PublicDomain]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3828"	"350"	"455"	"GitHub - nothings/stb: stb single-file public domain libraries for C/C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 350 Star 3,828 Fork 455 nothings/stb Code Issues 40 Pull requests 21 Pulse Graphs stb single-file public domain libraries for C/C++ 1,103 commits 1 branch 0 releases 71 contributors C 98.4% C++ 1.6% C C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit c9ead07 May 14, 2016 nothings Update other_libs.md Permalink Failed to load latest commit information. data change map image formats to workaround stb_image bug Apr 16, 2016 deprecated Merge branch 'headerify' Jun 3, 2014 docs Update other_libs.md May 14, 2016 tests stbcc 0.94 Apr 17, 2016 tools stb_connected_components added Apr 15, 2016 README.md stbcc 0.94 Apr 17, 2016 release_notes.md clarify Apr 2, 2016 stb.h update version numbers, documentation, and contributors Apr 2, 2016 stb_c_lexer.h Slightly modify the public domain license to keep it in the public do… Feb 25, 2016 stb_connected_components.h stbcc 0.94 Apr 17, 2016 stb_divide.h Slightly modify the public domain license to keep it in the public do… Feb 25, 2016 stb_dxt.h Slightly modify the public domain license to keep it in the public do… Feb 25, 2016 stb_easy_font.h Slightly modify the public domain license to keep it in the public do… Feb 25, 2016 stb_herringbone_wang_tile.h Slightly modify the public domain license to keep it in the public do… Feb 25, 2016 stb_image.h fix crash in 2.11 Apr 2, 2016 stb_image_resize.h update version numbers, documentation, and contributors Apr 2, 2016 stb_image_write.h update version numbers, documentation, and contributors Apr 2, 2016 stb_leakcheck.h Merge branch 'patch-1' of https://github.com/looki/stb Apr 2, 2016 stb_perlin.h Slightly modify the public domain license to keep it in the public do… Feb 25, 2016 stb_rect_pack.h Slightly modify the public domain license to keep it in the public do… Feb 25, 2016 stb_textedit.h update version numbers, documentation, and contributors Apr 2, 2016 stb_tilemap_editor.h Slightly modify the public domain license to keep it in the public do… Feb 25, 2016 stb_truetype.h fix unused variable warning Apr 2, 2016 stb_vorbis.c back out previous change to stb_vorbis (truncation of last frame in c… Apr 4, 2016 stb_voxel_render.h update version numbers, documentation, and contributors Apr 2, 2016 stretchy_buffer.h remove claims of supporting C++ in stretchy_buffer Apr 2, 2016 README.md stb single-file public domain libraries for C/C++ library lastest version category LoC description stb_vorbis.c 1.09 audio 5397 decode ogg vorbis files from file/memory to float/16-bit signed output stb_image.h 2.12 graphics 6755 image loading/decoding from file/memory: JPG, PNG, TGA, BMP, PSD, GIF, HDR, PIC stb_truetype.h 1.11 graphics 3267 parse, decode, and rasterize characters from truetype fonts stb_image_write.h 1.02 graphics 1048 image writing to disk: PNG, TGA, BMP stb_image_resize.h 0.91 graphics 2578 resize images larger/smaller with good quality stb_rect_pack.h 0.08 graphics 572 simple 2D rectangle packer with decent quality stretchy_buffer.h 1.02 utility 216 typesafe dynamic array for C (i.e. approximation to vector<>), doesn't compile as C++ stb_textedit.h 1.8 user interface 1304 guts of a text editor for games etc implementing them from scratch stb_voxel_render.h 0.84 3D graphics 3752 Minecraft-esque voxel rendering ""engine"" with many more features stb_dxt.h 1.04 3D graphics 630 Fabian ""ryg"" Giesen's real-time DXT compressor stb_perlin.h 0.2 3D graphics 182 revised Perlin noise (3D input, 1D output) stb_easy_font.h 0.7 3D graphics 258 quick-and-dirty easy-to-deploy bitmap font for printing frame rate, etc stb_tilemap_editor.h 0.37 game dev 4131 embeddable tilemap editor stb_herringbone_wa... 0.6 game dev 1220 herringbone Wang tile map generator stb_c_lexer.h 0.07 parsing 816 simplify writing parsers for C-like languages stb_divide.h 0.91 math 379 more useful 32-bit modulus e.g. ""euclidean divide"" stb_connected_comp... 0.94 misc 1000 incrementally compute reachability on grids stb.h 2.27 misc 14185 helper functions for C, mostly redundant in C++; basically author's personal stuff stb_leakcheck.h 0.2 misc 124 quick-and-dirty malloc/free leak-checking Total libraries: 19 Total lines of C code: 47814 FAQ What's the license? These libraries are in the public domain (or the equivalent where that is not possible). You can do anything you want with them. You have no legal obligation to do anything else, although I appreciate attribution. Are there other single-file public-domain/open source libraries with minimal dependencies out there? Yes. If I wrap an stb library in a new library, does the new library have to be public domain? No. Some of these libraries seem redundant to existing open source libraries. Are they better somehow? Generally they're only better in that they're easier to integrate, easier to use, and easier to release (single file; good API; no attribution requirement). They may be less featureful, slower, and/or use more memory. If you're already using an equivalent library, there's probably no good reason to switch. Can I link directly to the table of stb libraries? You can use this URL to link directly to that list. Why do you list ""lines of code""? It's a terrible metric. Just to give you some idea of the internal complexity of the library, to help you manage your expectations, or to let you know what you're getting into. While not all the libraries are written in the same style, they're certainly similar styles, and so comparisons between the libraries are probably still meaningful. Note though that the lines do include both the implementation, the part that corresponds to a header file, and the documentation. Why single-file headers? Windows doesn't have standard directories where libraries live. That makes deploying libraries in Windows a lot more painful than open source developers on Unix-derivates generally realize. (It also makes library dependencies a lot worse in Windows.) There's also a common problem in Windows where a library was built against a different version of the runtime library, which causes link conflicts and confusion. Shipping the libs as headers means you normally just compile them straight into your project without making libraries, thus sidestepping that problem. Making them a single file makes it very easy to just drop them into a project that needs them. (Of course you can still put them in a proper shared library tree if you want.) Why not two files, one a header and one an implementation? The difference between 10 files and 9 files is not a big deal, but the difference between 2 files and 1 file is a big deal. You don't need to zip or tar the files up, you don't have to remember to attach two files, etc. Why ""stb""? Is this something to do with Set-Top Boxes? No, they are just the initials for my name, Sean T. Barrett. This was not chosen out of egomania, but as a moderately sane way of namespacing the filenames and source function names. Will you add more image types to stb_image.h? If people submit them, I generally add them, but the goal of stb_image is less for applications like image viewer apps (which need to support every type of image under the sun) and more for things like games which can choose what images to use, so I may decline to add them if they're too rare or if the size of implementation vs. apparent benefit is too low. Do you have any advice on how to create my own single-file library? Yes. https://github.com/nothings/stb/blob/master/docs/stb_howto.txt Why public domain? I prefer it over GPL, LGPL, BSD, zlib, etc. for many reasons. Some of them are listed here: https://github.com/nothings/stb/blob/master/docs/why_public_domain.md Why C? Primarily, because I use C, not C++. But it does also make it easier for other people to use them from other languages. Why not C99? stdint.h, declare-anywhere, etc. I still use MSVC 6 (1998) as my IDE because it has better human factors for me than later versions of MSVC. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nothings/stb"	"A range of single-file libraries for C/C++. [PublicDomain]"	"true"
"Miscellaneous"	"ub-canaries"	"https://github.com/regehr/ub-canaries"	"A collection of C/C++ programs that try to get compilers to exploit undefined behavior."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"73"	"8"	"10"	"GitHub - regehr/ub-canaries: collection of C/C++ programs that try to get compilers to exploit undefined behavior Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 73 Fork 10 regehr/ub-canaries Code Issues 1 Pull requests 1 Pulse Graphs collection of C/C++ programs that try to get compilers to exploit undefined behavior 50 commits 2 branches 0 releases Fetching contributors C 95.7% Perl 4.3% C Perl Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags blog-post master Nothing to show Nothing to show New pull request Latest commit 29bc6c0 Mar 30, 2016 regehr Merge pull request #6 from 4tXJ7f/master … Add floating-point conversion canary Permalink Failed to load latest commit information. addr-null uniform formatting of C code Apr 20, 2015 array-oob new canary exposing exploitation by gcc-4.8 and 4.9 Apr 25, 2015 dangling-pointer new dangling pointer test Apr 21, 2015 int-min-mod-minus-1 fix this branch too Apr 22, 2015 invalid-fp-conversion Add floating-point conversion canary Mar 30, 2016 memcpy-overlap formatting, and fix strict aliasing Apr 21, 2015 modify-string-literal add canary about modifying string literals Apr 21, 2015 pointer-casts uniform formatting of C code Apr 21, 2015 shift-by-bitwidth formatting, and fix strict aliasing Apr 21, 2015 signed-integer-overflow uniform formatting of C code Apr 21, 2015 signed-left-shift uniform formatting of C code Apr 21, 2015 strict-aliasing formatting, and fix strict aliasing Apr 21, 2015 uninitialized-variable 2 new canaries Apr 27, 2015 .gitignore Initial commit Apr 9, 2015 LICENSE Initial commit Apr 9, 2015 README fix README bug Apr 21, 2015 TODO update todos Apr 21, 2015 run-canaries quit if any compiler invocation fails Apr 21, 2015 README -------------------------------------------------------------------------------  UB Canaries: A collection of C/C++ programs that detect undefined behavior exploitation by compilers.  -------------------------------------------------------------------------------  To run all tests, type:    run-canaries  For a complete list of command line options:    run-canaries --help  -------------------------------------------------------------------------------  Each directory documents and tests an expectation: something a developer might -- perhaps unreasonably! -- expect the compiler to do when faced with undefined behavior. For example, the ""uninitialized-variable"" directory tests the expectation that an uninitialized scalar variable will consistently return some value that is legal for the variable's type.  If any test program in a directory does not display the expected behavior (for a given compiler version + flags), then that compiler is considered to violate that expectation.  The toplevel script run-canaries tests the expectations for a specified collection of compilers and compiler flags. For now, you need to edit that file to change the set of compilers and flags.  The output of run-canaries is, for each compiler / flag / canary combination, a bit that tells us whether that compiler has been observed to exploit that particular UB (in other words, whether it has been observed violating the expectation). So here, for example, clang has been seen to exploit signed integer overflows and uninitialized variables, but not signed left shifts:  clang -O3 signed-left-shift 0 clang -O3 signed-integer-overflow 1 clang -O3 uninitialized-variable 1  -------------------------------------------------------------------------------  Guidelines for writing tests:  - Each test program should be entirely contained (except for standard header   files) in a single compilation unit.  - An expectation should only be tested by looking at a program's stdout, never   by looking at its assembly code or observing its memory usage or execution   time.  - A test program foo.c may have one or more outputs corresponding to the   ""expected"" case where the compiler does not exploit that UB. If there is one   such file it should be called foo.output. If there are multiple files they   should be called foo.output1, foo.output2, etc. If the actual output does not   match any of these files, the compiler is assumed to have exploited the UB.  - Every test program must test only a single UB. In other words, each test   program is written in a dialect of C that is completely standard except that a   single behavior (signed integer overflow or whatever) is actually defined   instead of undefined.  - Reliance on implementation-defined behavior is unavoidable, but please avoid   gratuitous reliance such as assuming a particular size for int or long. It is   OK to use the fixed-width types such as int32_t.  - A tricky issue to how much to expose to the optimizer and how much to hide.   There are no particular good rules of thumb that I am aware of, you just have   to try different things.  - An easier issue is *how* to hide from the optimizer. I suggest introducing a   dependency on argc or on the value loaded from a volatile. Tests may assume   that argc == 1.  -------------------------------------------------------------------------------  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/regehr/ub-canaries"	"A collection of C/C++ programs that try to get compilers to exploit undefined behavior."	"true"
"Miscellaneous"	"VarTypes"	"https://code.google.com/p/vartypes/"	"A feature-rich, object-oriented framework for managing variables in C++ / Qt4. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"A feature-rich, object-oriented framework for managing variables in C++ / Qt4. [LGPL]"	"true"
"Miscellaneous"	"ZBar"	"http://zbar.sourceforge.net/"	"A barcode scanner library, which allows to scan photos/images/video streams for barcodes and return their value. [LGPL2]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ZBar bar code reader ZBar bar code reader home about download support iPhone wiki community Download Now! zbar version 0.10 ZBar is an open source software suite for reading bar codes from various sources, such as video streams, image files and raw intensity sensors. It supports many popular symbologies (types of bar codes) including EAN-13/UPC-A, UPC-E, EAN-8, Code 128, Code 39, Interleaved 2 of 5 and QR Code. The flexible, layered implementation facilitates bar code scanning and decoding for any application: use it stand-alone with the included GUI and command line programs, easily integrate a bar code scanning widget into your Qt, GTK+ or PyGTK GUI application, leverage one of the script or programming interfaces (Python, Perl, C++) ...all the way down to a streamlined C library suitable for embedded use. ZBar is licensed under the GNU LGPL 2.1 to enable development of both open source and commercial projects. Applications Retail Automated document processing Inventory tracking Mobile applications Features cross platform - Linux/Unix, Windows, iPhone®, embedded... high speed - real time scanning from video streams small memory footprint small code size - the core scanner and EAN decoder represent under 1K lines of C code not limited to images no floating point operations suitable for embedded applications using inexpensive processors/hardware modular components can be used together or separately spadix@users.sourceforge.net Copyright 2007-2010 (c) Jeff Brown - All Rights Reserved. Verbatim copying and distribution of this entire article are permitted worldwide, without royalty, in any medium, provided this notice, and the copyright notice, are preserved. Apple and the Apple Logo are trademarks of Apple Inc., registered in the U.S. and other countries. iPhone is a trademark of Apple Inc. Last modified: Fri Jul 15 11:18:10 PDT 2011"	"null"	"null"	"A barcode scanner library, which allows to scan photos/images/video streams for barcodes and return their value. [LGPL2]"	"true"
"Miscellaneous"	"ZXing"	"https://github.com/zxing/zxing/"	"An open-source, multi-format 1D/2D barcode image processing library implemented in Java, with ports to other languages. [Apache]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9614"	"1152"	"5237"	"GitHub - zxing/zxing: Official ZXing (""Zebra Crossing"") project home Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,152 Star 9,614 Fork 5,237 zxing/zxing Code Issues 13 Pull requests 2 Wiki Pulse Graphs Official ZXing (""Zebra Crossing"") project home 3,250 commits 3 branches 19 releases 57 contributors Java 96.1% HTML 3.8% CSS 0.1% Java HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coverity_scan gh-pages master Nothing to show zxing-3.2.1 zxing-3.2.0 zxing-3.1.0 zxing-3.0.1 zxing-3.0.0 zxing-2.3.0 ZXingTest-1.4.1 BSGlass-0.2.1 BSGlass-0.2.0 BS-4.7.5 BS-4.7.4 BS-4.7.3 BS-4.7.0 BS-4.6.4 BS-4.6.3 BS-4.6.2 BS-4.6.1 BS-4.6.0 BS-4.5.1 Nothing to show New pull request Latest commit d3dd182 Jul 8, 2016 srowen Don't interpret very long strings.with.dots.like.this to be interpret… … …ed as URIs Permalink Failed to load latest commit information. .github Add issue template and move supported files to .github Mar 2, 2016 android-core [maven-release-plugin] prepare for next development iteration Aug 19, 2015 android-integration Remove unneeded .gitignore, and unneeded libs copy step for Android t… Jun 8, 2016 android Implement more style checks around whitespace Jun 24, 2016 androidtest Skip javadoc for Android apps, always Jun 22, 2016 core Don't interpret very long strings.with.dots.like.this to be interpret… Jul 8, 2016 glass Skip javadoc for Android apps, always Jun 22, 2016 javase Implement more style checks around whitespace Jun 24, 2016 src Implement more style checks around whitespace Jun 24, 2016 zxing.appspot.com Crush some PNGs that could benefit from it Jul 2, 2016 zxingorg Skip javadoc for Android apps, always Jun 22, 2016 .gitattributes Added .gitattributes to define how git handles the line endings Jul 17, 2014 .gitignore Remove Thumbs.db from gitignore Mar 6, 2014 .travis.yml Allow building of Android apps on Travis Jun 24, 2016 AUTHORS Added a Code 93 encoder Oct 18, 2015 CHANGES Update to target Android 23; brief 3.2.1 release note Aug 19, 2015 LICENSE Update jai-imageio license; remove unneeded gwt-servlet dep; update c… Sep 25, 2015 NOTICE Use JCommander for CommandLineRunner args May 3, 2015 README.md Use HTTPS for all zxing.org / zxing.appspot.com links Jun 20, 2016 pom.xml Don't interpret very long strings.with.dots.like.this to be interpret… Jul 8, 2016 README.md Get Started Developing To get started, please visit: https://github.com/zxing/zxing/wiki/Getting-Started-Developing ZXing (""zebra crossing"") is an open-source, multi-format 1D/2D barcode image processing library implemented in Java, with ports to other languages. Supported Formats 1D product 1D industrial 2D UPC-A Code 39 QR Code UPC-E Code 93 Data Matrix EAN-8 Code 128 Aztec (beta) EAN-13 Codabar PDF 417 (beta) ITF RSS-14 RSS-Expanded Components Active Module Description core The core image decoding library, and test code javase JavaSE-specific client code android Android client Barcode Scanner androidtest Android test app, ZXing Test android-integration Supports integration with Barcode Scanner via Intent android-core Android-related code shared among android, androidtest, glass glass Simple Google Glass application zxingorg The source behind zxing.org zxing.appspot.com The source behind web-based barcode generator at zxing.appspot.com Available in previous releases Module Description cpp C++ port iphone iPhone client objc Objective C port actionscript Partial ActionScript port jruby JRuby wrapper ZXing-based third-party open source projects Module Description QZXing port to Qt framework zxing-cpp port to C++ (forked from the deprecated official C++ port) zxing_cpp.rb bindings for Ruby (not just JRuby), powered by zxing-cpp python-zxing bindings for Python ZXing .NET port to .NET and C#, and related Windows platform php-qrcode-detector-decoder port to PHP Other related third-party open source projects Module Description Barcode4J Generator library in Java ZBar Reader library in C99 OkapiBarcode Links Online Decoder QR Code Generator Javadoc Documentation Site Contacting Post to the discussion forum or tag a question with zxing on StackOverflow. Etcetera QR code is trademarked by Denso Wave, inc. Thanks to Haase & Martin OHG for contributing the logo. Optimized with Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zxing/zxing/"	"An open-source, multi-format 1D/2D barcode image processing library implemented in Java, with ports to other languages. [Apache]"	"true"
"Compiler"	"8cc"	"https://github.com/rui314/8cc"	"A Small C Compiler."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2271"	"165"	"218"	"GitHub - rui314/8cc: A Small C Compiler Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 165 Star 2,271 Fork 218 rui314/8cc Code Issues 17 Pull requests 5 Wiki Pulse Graphs A Small C Compiler 747 commits 2 branches 0 releases 6 contributors C 95.4% Python 2.6% Shell 1.5% Makefile 0.5% C Python Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master new-backend Nothing to show Nothing to show New pull request Latest commit 04bbd36 Apr 23, 2015 proudzhu committed with rui314 Specify python version in test/negative.py … As many linux distrobutions use python3 as the default python interperter, this script may encounter an error. Permalink Failed to load latest commit information. include Update copyright notice. Mar 28, 2015 test Specify python version in test/negative.py Apr 23, 2015 .gitignore .gitignore: remove obsolete entries and sort the lines. Nov 30, 2014 8cc.h Preprocessor: Print accurate error locations. Mar 29, 2015 HACKING.md Add HACKING.md. Dec 17, 2014 LICENSE Rename COPYING -> LICENSE. Mar 28, 2015 Makefile Move test.sh to test directory. Mar 26, 2015 README.md Add a comment on the draft versions of the C standards. Mar 22, 2015 buffer.c Update copyright notice. Mar 28, 2015 cpp.c Simplify. Apr 5, 2015 debug.c Update copyright notice. Mar 28, 2015 dict.c Update copyright notice. Mar 28, 2015 encoding.c Update copyright notice. Mar 28, 2015 error.c Preprocessor: Print accurate error locations. Mar 29, 2015 file.c Preprocessor: Print accurate error locations. Mar 29, 2015 gen.c Update copyright notice. Mar 28, 2015 keyword.inc Update copyright notice. Mar 28, 2015 lex.c Allow universal-character-name in identifiers. Apr 5, 2015 main.c Update copyright notice. Mar 28, 2015 map.c Update copyright notice. Mar 28, 2015 parse.c Preprocessor: Print accurate error locations. Mar 29, 2015 path.c Update copyright notice. Mar 28, 2015 set.c Update copyright notice. Mar 28, 2015 utiltest.c Update copyright notice. Mar 28, 2015 vector.c Update copyright notice. Mar 28, 2015 README.md 8cc C Compiler 8cc is a compiler for the C programming language. It's intended to support all C11 language features while keeping the code as small and simple as possible. The compiler is able to compile itself. You can see its code both as an implementation of the C language and as an example of what this compiler is able to compile. 8cc's source code is carefully written to be as concise and easy-to-read as possible, so that the source code becomes good study material to learn about various techniques used in compilers. You may find the lexer, the preprocessor and the parser are already useful to learn how C source code is processed at each stage. It's not an optimizing compiler. Generated code is usually 2x or more slower than GCC. I plan to implement a reasonable level of optimization in the future. 8cc supports x86-64 Linux only. I have no plan to make it portable until I fix all known miscompilations and implement an optimization pass. As of 2015, I'm using Ubuntu 14 as my development platform. It should work on other x86-64 Linux distributions though. Note: Do not have high expectations on this compiler. If you try to compile a program other than the compiler itself, there's a good chance to see compile errors or miscompilations. This is basically a one-man project, and I have spent only a few months of my spare time so far. Build Run make to build: make  8cc comes with unit tests. To run the tests, give ""test"" as an argument: make test  The following target builds 8cc three times to verify that stage1 compiler can build stage2, and stage2 can build stage3. It then compares stage2 and stage3 binaries byte-by-byte to verify that we reach a fixed point. make fulltest  Author Rui Ueyama rui314@gmail.com Links for C compiler development Besides popular books about compiler, such as the Dragon Book, I found the following books/documents are very useful to develop a C compiler. Note that the standard draft versions are very close to the ratified versions. You can practically use them as the standard documents. LCC: A Retargetable C Compiler: Design and Implementation http://www.amazon.com/dp/0805316701, https://github.com/drh/lcc TCC: Tiny C Compiler http://bellard.org/tcc/, http://repo.or.cz/w/tinycc.git/tree C99 standard final draft http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf C11 standard final draft http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf Dave Prosser's C Preprocessing Algorithm http://www.spinellis.gr/blog/20060626/ The x86-64 ABI http://www.x86-64.org/documentation/abi.pdf Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rui314/8cc"	"A Small C Compiler."	"true"
"Compiler"	"c"	"https://github.com/ryanmjacobs/c"	"Compile and execute C ""scripts"" in one go! [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1361"	"67"	"100"	"GitHub - ryanmjacobs/c: Compile and execute C ""scripts"" in one go! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 1,361 Fork 100 ryanmjacobs/c Code Issues 3 Pull requests 0 Pulse Graphs Compile and execute C ""scripts"" in one go! 134 commits 2 branches 10 releases Fetching contributors Shell 80.0% C 12.6% C++ 5.3% Ruby 2.1% Shell C C++ Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.10 v0.09 v0.08 v0.07 v0.06 v0.05 v0.04 v0.03 v0.02 v0.01 Nothing to show New pull request Latest commit f4511eb Jun 27, 2016 Uladox committed with ryanmjacobs Removes bug with c library linking with shebang. (#32) … * Fixes bug where library comes before source file.  Before when compiling with a shebang like ""#!/usr/bin/c -lsomelib --"" it would run as ""cc -lsomelib source.c"" instead of the proper ""cc source.c -lsomelib"" with the only workaround being ""cc -- -lsomelib --"" which was a workaround.  * Removes comment of old code I forgot to last time.  Should have done it last commit. Permalink Failed to load latest commit information. examples s/NO_ADDRESS/NO_DATA/g Feb 8, 2016 tests tests: remove github_commits.c b/c of library dependencies Feb 8, 2016 .travis.yml add tests! Mar 2, 2015 LICENSE Move license out of README. Jan 3, 2016 README.md fix permissions, and move instead of copying May 28, 2016 c Removes bug with c library linking with shebang. (#32) Jun 28, 2016 c.rb Add brew formula Jun 11, 2015 package.json Fix bpkg. Mar 10, 2015 README.md c ""There isn't much that's special about C. That's one of the reasons why it's fast."" I love C for its raw speed (although it does have its drawbacks). We should all write more C. With this shell script, you can compile and execute C ""scripts"" in one go! (Oh yeah, and it works for C++ too.) Here's a simple example: #include <stdio.h>  int main(void) {     printf(""Hello World!\n"");     return 0; } Run it by typing: $ c hello.c Hello World! Or, call it from the shebang! #!/usr/bin/c #include <stdio.h>  int main(void) {     printf(""Hello World!\n"");     return 0; } $ chmod +x hello.c $ ./hello.c Hello World! Hooked? Here's how to install it: Use a package manager? Check here. For all users: $ wget https://raw.githubusercontent.com/ryanmjacobs/c/master/c $ sudo install -Dm 755 c /usr/bin/c Just for a local user: $ wget https://raw.githubusercontent.com/ryanmjacobs/c/master/c $ sudo install -Dm 755 c ~/.bin/c $ echo 'PATH=$PATH:$HOME/.bin' >> ~/.bashrc Note: if you install it somewhere other than /usr/bin/c, then your shebang will be different. For example it may be something more similar to #!/home/ryan/.bin/c. Okay, how do I use it? c will use whatever $CC is set to. You can change this with: $ export CC=clang $ export CC=tcc $ # etc... CLI Multiple Files - CLI Anything you want passed to the compiler, put in quotes as the first argument. Whether they're flags (-Wall, -O2, etc.) or file names (file.c, main.c, etc.). $ c ""main.c other.c"" arg1 arg2 $ c ""main.c other.c -O3 -Wall -lncurses"" arg1 arg2 Single File - CLI With only one file, omit the quotes: $ c hello.c $ c main.c arg1 arg2 Shebang! After adding a shebang, just set the file to executable and it's ready to run. $ chmod +x file.c $ ./file.c Single File - Shebang Add this to the top of your C file: #!/usr/bin/c Multiple Files - Shebang Just tack on any extra flags, options, or files you want passed to the compiler. Then be sure to add the terminating -- characters. #!/usr/bin/c file1.c file2.c -lncurses -lm -- Compiling from stdin $ cat hello.c | c # ...or... $ c < hello.c $ c """" arg1 arg2 < hello.c $ c ""other.c -lncurses"" arg1 arg2 < hello.c Caching The default cache size is set to 5 MB. You can change this with: $ export C_CACHE_SIZE=$((10*1024)) # 10 MB The default cache path is set to $TMPDIR/c.cache. You can change this with: $ export C_CACHE_PATH=""/tmp/the_cache"" Contributing Feel free to submit any ideas, questions, or problems by reporting an issue. Or, if you're feeling bit brave, submit a pull request. 😬 Just hack away and make sure that all the tests pass. $ cd tests $ ./test.sh Why? First of all, I want to clarify why this is not the same as tcc -run. TCC is a compiler. We all know that. TCC will perform its own set of optimizations, just as GCC will perform its own and Clang will perform its own. The purpose of this script is to give a simple front-end to your favorite compiler. Whether it's GCC, Clang, or something else entirely, you get to choose your compiler. Second reason: it's simply satisfying to type c hello.c and see it run instantly. Third reason: I'm a fan of speed, and C definitely offers it. Being able to write a small, fast, and portable C ""script"" is great. You can pass around a C ""script"" just like you would a BASH script. zsh If you're using zsh, then you can take advantage of zsh's suffix aliases: $ alias -s c='c' $ alias -s cc='c' $ alias -s cpp='c' Then you can run files with ./file.c without chmod +x. Packages Use a package manager? You've come to the right place. AUR: https://aur.archlinux.org/packages/c/ bpkg: bpkg install ryanmjacobs/c brew: brew install https://raw.githubusercontent.com/ryanmjacobs/c/master/c.rb (shebang will be #!/usr/local/bin/c) Todo Maybe later we can implement caching. Done! License MIT License. Basically, you can do whatever you want provided that you include the LICENSE notice in any copy of the source. Also, I am not liable if the script breaks anything. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ryanmjacobs/c"	"Compile and execute C ""scripts"" in one go! [MIT]"	"true"
"Compiler"	"Clang"	"http://clang.llvm.org/"	"A C compiler for LLVM. Supports C++11/14/1z C11. Developed by LLVM Team. [NCSA]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"""clang"" C Language Family Frontend for LLVM LLVM Home Clang Info Download About Features Comparisons Related Projects User's Manual Language Compatibility Language Extensions C++ Status Clang Development Get Started Get Involved Open Projects Clang Internals Hacking on Clang Clang Tools Automatic Bug-Finding Writing Clang Tools Communication cfe-users List cfe-dev List cfe-commits List Bug Reports Planet Clang IRC: irc.oftc.net#llvm The Code Check Out SVN Browse SVN Browse ViewVC doxygen Quick Links Testing Coverage Clang Events October 2009 November 2010 LLVM events clang: a C language family frontend for LLVM The goal of the Clang project is to create a new C, C++, Objective C and Objective C++ front-end for the LLVM compiler. You can get and build the source today. Features and Goals Some of the goals for the project include the following: End-User Features: Fast compiles and low memory use Expressive diagnostics (examples) GCC compatibility Utility and Applications: Modular library based architecture Support diverse clients (refactoring, static analysis, code generation, etc.) Allow tight integration with IDEs Use the LLVM 'BSD' License Internal Design and Implementation: A real-world, production quality compiler A simple and hackable code base A single unified parser for C, Objective C, C++, and Objective C++ Conformance with C/C++/ObjC and their variants Of course this is only a rough outline of the goals and features of Clang. To get a true sense of what it is all about, see the Features section, which breaks each of these down and explains them in more detail. Why? Development of the new front-end was started out of a need for a compiler that allows better diagnostics, better integration with IDEs, a license that is compatible with commercial products, and a nimble compiler that is easy to develop and maintain. All of these were motivations for starting work on a new front-end that could meet these needs. A good (but quite dated) introduction to Clang can be found in the following video lectures: Clang Introduction (May 2007) Features and Performance of Clang (July 2007) For a more detailed comparison between Clang and other compilers, please see the clang comparison page. Current Status Clang is considered to be a production quality C, Objective-C, C++ and Objective-C++ compiler when targeting X86-32, X86-64, and ARM (other targets may have caveats, but are usually easy to fix). If you are looking for source analysis or source-to-source transformation tools, Clang is probably a great solution for you. Clang supports C++11, please see the C++ status page for more information. Get it and get involved! Start by getting the code, building it, and playing with it. This will show you the sorts of things we can do today and will let you have the ""Clang experience"" first hand: hopefully it will ""resonate"" with you. :) Once you've done that, please consider getting involved in the clang community. The Clang developers include numerous volunteer contributors with a variety of backgrounds. If you're interested in following the development of Clang, signing up for a mailing list is a good way to learn about how the project works."	"null"	"null"	"A C compiler for LLVM. Supports C++11/14/1z C11. Developed by LLVM Team. [NCSA]"	"true"
"Compiler"	"GCC"	"https://gcc.gnu.org/"	"GNU Compiler Collection. Supports C++11/14/1z C11 and OpenMP. [GNU GPL3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF) GCC, the GNU Compiler Collection The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Java, Ada, and Go, as well as libraries for these languages (libstdc++, libgcj,...). GCC was originally written as the compiler for the GNU operating system. The GNU system was developed to be 100% free software, free in the sense that it respects the user's freedom. We strive to provide regular, high quality releases, which we want to work well on a variety of native and cross targets (including GNU/Linux), and encourage everyone to contribute changes or help testing GCC. Our sources are readily and freely available via SVN and weekly snapshots. Major decisions about GCC are made by the steering committee, guided by the mission statement. News GCC 5.4 released [2016-06-03] 2015 ACM Software System Award [2016-04-29] GCC 6.1 released [2016-04-27] Heterogeneous Systems Architecture support [2016-01-27] Heterogeneous Systems Architecture 1.0 support was added to GCC, contributed by Martin Jambor, Martin Liška and Michael Matz from SUSE. GCC 5.3 released [2015-12-04] GCC 5.2 released [2015-07-16] GCC 4.9.3 released [2015-06-26] GCC 4.8.5 released [2015-06-23] GCC 5.1 released [2015-04-22] MIPS Release 6 architecture support [2015-01-20] Support for MIPS Release 6 (r6) has been contributed by Imagination Technologies. OpenMP 4.0 offloading support in GCC [2015-01-14] OpenMP 4.0 offloading support was added to GCC. Contributed by Jakub Jelinek (Red Hat), Bernd Schmidt and Thomas Schwinge (CodeSourcery), Andrey Turetskiy, Ilya Verbin and Kirill Yukhin (Intel). Older news | Nick's Blog | More news? Let gerald@pfeifer.com know! Releases GCC 6.1 (changes) Status: 2016-04-27 (regression fixes & docs only). Serious regressions. All regressions. GCC 5.4 (changes) Status: 2016-06-03 (regression fixes & docs only). Serious regressions. All regressions. GCC 4.9.3 (changes) Status: 2015-06-26 (regression fixes & docs only). Serious regressions. All regressions. Development: GCC 7.0 (release criteria) Status: 2016-04-15 (general development, stage 1). Serious regressions. All regressions. Search our site Match: All words Any word Boolean expression Sort by: Newest Best Match There is also a detailed search form. Get our announcements About GCC Mission Statement Releases Snapshots Mailing lists Contributors Steering Committee @gnutools gnutools Documentation Installation · Platforms Manual FAQ Wiki Pointers Download Mirrors Binaries Sources SVN read access SVN write access Git read access Rsync Development Development Plan · Timeline Contributing Why contribute? Open projects Front ends Back ends Extensions Benchmarks Build Robot Translations Bugs Known bugs How to report Bug tracker · Management For questions related to the use of GCC, please consult these web pages and the GCC manuals. If that fails, the gcc-help@gcc.gnu.org mailing list might help. Comments on these web pages and the development of GCC are welcome on our developer list at gcc@gcc.gnu.org. All of our lists have public archives. Copyright (C) Free Software Foundation, Inc. Verbatim copying and distribution of this entire article is permitted in any medium, provided this notice is preserved. These pages are maintained by the GCC team. Last modified 2016-06-05."	"null"	"null"	"GNU Compiler Collection. Supports C++11/14/1z C11 and OpenMP. [GNU GPL3]"	"true"
"Compiler"	"PCC"	"http://pcc.ludd.ltu.se/"	"A very old C compiler. Supports C99."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"pcc - pcc portable c compiler pcc Welcome to pcc, the Portable C Compiler. This website is a wiki. Please join and help improve the website and pcc. The compiler is based on the original Portable C Compiler by S. C. Johnson, written in the late 70's. About 50% of the frontend code and 80% of the backend code has been modified. See the PCC History wiki page for details. PCC 1.1.0 is out as of 2014-12-10! News Downloads Mailing Lists Documentation PCC C Language Internals Books Bugs and issue tracking. TODO Standards and Regression Testing Useful links The project goal is to write a C99 compiler while still keeping it small, simple, fast and understandable. PCC is not affiliated with any other project, but the compiler has been imported into the OpenBSD and NetBSD base systems. The project is maintained by me (ragge). This product includes software developed or owned by Caldera International, Inc. (See Licenses.) Edit RecentChanges History Preferences Discussion Last edited Wed Dec 10 18:13:08 CET 2014"	"null"	"null"	"A very old C compiler. Supports C99."	"true"
"Compiler"	"Intel C++ Compiler"	"https://software.intel.com/en-us/c-compilers"	"Developed by Intel."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Intel® C++ Compilers | Intel® Software Jump to navigation Developer Zone Join today Log in Development OS Android* Chrome* HTML5 Windows* Device 2-in-1 & Ultrabook™ Business Client Embedded Systems IoT Server, Workstation, HPC Technology Big Data Dual Screen Game Dev Intel® RealSense™ ISA Extensions Machine Learning Modern Code Networking Open Source Storage Tools Developer Type Embedded Systems Game Dev Media Technical, Enterprise, HPC Web OS All Tools Android* HTML5 Linux* OS X* Windows* Resources Code Samples Contact Support Documentation Free Software Intel Registration Center Product Forums SDKs Resources Partner with Intel Academic Program Partner Spotlight Black Belt Developer Innovator Program Success Stories Learn Blog Business Tips Events Videos Support Contact Support Developer Evangelists FAQs Forums Search form Search Intel® C++ Compilers Intel® C++ Compilers Leadership Application Performance Boost C++ application performance Future-proof code by making code that scales Plugs right into your development environment If you are here, you are looking for ways to make your application run faster.  Boost performance by augmenting your development process with the Intel® C++ Compiler. The Intel C++ Compiler plugs right into popular development environments like Visual Studio*, Eclipse*, XCode*, and Android Studio*; The Intel C++ Compiler is compatible with popular compilers including Visual C++* (Windows*) and GCC (Linux*, OS X* and Android*).  The Intel C++ Compiler is available in four products based on your application development needs: Intel® C++ Compiler in Intel® Parallel Studio XE Learn more and get support › C++/Fortran performance suite for technical computing, enterprise and HPC on Windows*, Linux* and OS X*. Intel® C++ Compiler in Intel® System Studio Learn more and get support › Embedded and mobile device C++ suite on Windows, Android* and Linux Intel® C++ Compilers in Intel® INDE (support only) Get support ›   Intel® Bi-Endian Compiler   Learn more and get support › C++ compiler that enables using one code base for both big-endian and little-endian architectures. Find more information about supported platforms and compiler features. For more complete information about compiler optimizations, see our Optimization Notice. Support Terms of Use *Trademarks Privacy Cookies Publications Intel® Developer Zone Newsletter Intel® Parallel Universe Magazine Look for us on: Facebook Twitter Google+ LinkedIn YouTube English 简体中文 Français Русский Español Português Deutsch Rate Us"	"null"	"null"	"Developed by Intel."	"true"
"Compiler"	"LLVM"	"http://llvm.org/"	"Collection of modular and reusable compiler and toolchain technologies."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The LLVM Compiler Infrastructure Project The LLVM Compiler Infrastructure Site Map: Overview Features Documentation Command Guide FAQ Publications LLVM Projects Open Projects LLVM Users Bug Database LLVM Logo Blog Meetings LLVM Foundation Download! Download now: LLVM 3.8.1 All Releases APT Packages Win Installer View the open-source license Search this Site Useful Links Mailing Lists: LLVM-announce LLVM-dev LLVM-bugs LLVM-commits LLVM-branch-commits LLVM-testresults IRC Channel: irc.oftc.net #llvm Dev. Resources: doxygen ViewVC Blog Bugzilla Buildbot LNT Coverage Scan-build Release Emails 3.8.0: Mar 2016 3.7.1: Jan 2016 3.7.0: Sep 2015 3.6.2: Jul 2015 3.6.1: May 2015 3.5.2: Apr 2015 3.6: Feb 2015 3.5.1: Jan 2015 3.5: Sep 2014 3.4.2: June 2014 3.4.1: May 2014 3.4: Jan 2014 3.3: Jun 2013 3.2: Dec 2012 3.1: May 2012 3.0: Dec 2011 2.9: Apr 2011 2.8: Oct 2010 2.7: Apr 2010 2.6: Oct 2009 2.5: Mar 2009 2.4: Nov 2008 2.3: Jun 2008 2.2: Feb 2008 2.1: Sep 2007 2.0: May 2007 Older News Maintained by: Chris Lattner LLVM Overview The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Despite its name, LLVM has little to do with traditional virtual machines, though it does provide helpful libraries that can be used to build them. The name ""LLVM"" itself is not an acronym; it is the full name of the project. LLVM began as a research project at the University of Illinois, with the goal of providing a modern, SSA-based compilation strategy capable of supporting both static and dynamic compilation of arbitrary programming languages. Since then, LLVM has grown to be an umbrella project consisting of a number of subprojects, many of which are being used in production by a wide variety of commercial and open source projects as well as being widely used in academic research. Code in the LLVM project is licensed under the ""UIUC"" BSD-Style license. The primary sub-projects of LLVM are: The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs (as well as some less common ones!) These libraries are built around a well specified code representation known as the LLVM intermediate representation (""LLVM IR""). The LLVM Core libraries are well documented, and it is particularly easy to invent your own language (or port an existing compiler) to use LLVM as an optimizer and code generator. Clang is an ""LLVM native"" C/C++/Objective-C compiler, which aims to deliver amazingly fast compiles (e.g. about 3x faster than GCC when compiling Objective-C code in a debug configuration), extremely useful error and warning messages and to provide a platform for building great source level tools. The Clang Static Analyzer is a tool that automatically finds bugs in your code, and is a great example of the sort of tool that can be built using the Clang frontend as a library to parse C/C++ code. dragonegg integrates the LLVM optimizers and code generator with the GCC parsers. This allows LLVM to compile Ada, Fortran, and other languages supported by the GCC compiler frontends, and access to C features not supported by Clang. The LLDB project builds on libraries provided by LLVM and Clang to provide a great native debugger. It uses the Clang ASTs and expression parser, LLVM JIT, LLVM disassembler, etc so that it provides an experience that ""just works"". It is also blazing fast and much more memory efficient than GDB at loading symbols. The libc++ and libc++ ABI projects provide a standard conformant and high-performance implementation of the C++ Standard Library, including full support for C++11. The compiler-rt project provides highly tuned implementations of the low-level code generator support routines like ""__fixunsdfdi"" and other calls generated when a target doesn't have a short sequence of native instructions to implement a core IR operation. It also provides implementations of run-time libraries for dynamic testing tools such as AddressSanitizer, ThreadSanitizer, MemorySanitizer, and DataFlowSanitizer. The OpenMP subproject provides an OpenMP runtime for use with the OpenMP implementation in Clang. The vmkit project is an implementation of the Java and .NET Virtual Machines that is built on LLVM technologies. The polly project implements a suite of cache-locality optimizations as well as auto-parallelism and vectorization using a polyhedral model. The libclc project aims to implement the OpenCL standard library. The klee project implements a ""symbolic virtual machine"" which uses a theorem prover to try to evaluate all dynamic paths through a program in an effort to find bugs and to prove properties of functions. A major feature of klee is that it can produce a testcase in the event that it detects a bug. The SAFECode project is a memory safety compiler for C/C++ programs. It instruments code with run-time checks to detect memory safety errors (e.g., buffer overflows) at run-time. It can be used to protect software from security attacks and can also be used as a memory safety error debugging tool like Valgrind. The lld project aims to be the built-in linker for clang/llvm. Currently, clang must invoke the system linker to produce executables. In addition to official subprojects of LLVM, there are a broad variety of other projects that use components of LLVM for various tasks. Through these external projects you can use LLVM to compile Ruby, Python, Haskell, Java, D, PHP, Pure, Lua, and a number of other languages. A major strength of LLVM is its versatility, flexibility, and reusability, which is why it is being used for such a wide variety of different tasks: everything from doing light-weight JIT compiles of embedded languages like Lua to compiling Fortran code for massive super computers. As much as everything else, LLVM has a broad and friendly community of people who are interested in building great low-level tools. If you are interested in getting involved, a good first place is to skim the LLVM Blog and to sign up for the LLVM Developer mailing list. For information on how to send in a patch, get commit access, and copyright and license topics, please see the LLVM Developer Policy. Latest LLVM Release! 11 July 2016: LLVM 3.8.1 is now available for download! LLVM is publicly available under an open source License. Also, you might want to check out the new features in SVN that will appear in the next LLVM release. If you want them early, download LLVM through anonymous SVN. ACM Software System Award! LLVM has been awarded the 2012 ACM Software System Award! This award is given by ACM to one software system worldwide every year. LLVM is in highly distinguished company! Click on any of the individual recipients' names on that page for the detailed citation describing the award. Upcoming Releases LLVM Release Schedule: 3.9.0: 18 July 2016: Branch. RC1 shipped soon after. 1 August: Tag RC2. 22 August: Final tag. Release ships soon after. Developer Meetings Upcoming: November 3-4, 2016 Proceedings from past meetings: March 17-18, 2016 October 29-30, 2015 April 13-14, 2015 October 28-29, 2014 April 7-8, 2014 Nov 6-7, 2013 April 29-30, 2013 November 7-8, 2012 April 12, 2012 November 18, 2011 September 2011 November 2010 October 2009 August 2008 May 2007 This web site is hosted by the Computer Science Department at the University of Illinois at Urbana-Champaign."	"null"	"null"	"Collection of modular and reusable compiler and toolchain technologies."	"true"
"Compiler"	"Microsoft Visual C++"	"https://msdn.microsoft.com/en-us/vstudio/hh386302.aspx"	"MSVC, developed by Microsoft."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Development Tools and Languages Developer Network Developer Network Developer Sign in MSDN subscriptions Get tools Technologies App Development Cloud Web Data Gaming Internet of Things Downloads Visual Studio MSDN subscription access SDKs Trial software Free downloads Office resources SharePoint Server 2013 resources SQL Server 2014 Express resources Windows Server 2012 resources Programs MSDN subscriptions Overview Benefits Administrators Students Microsoft Imagine Microsoft Student Partners Architects Overview Case studies Blueprints Blog Forums ISV Startups TechRewards Events Community Magazine Forums Blogs Tech Advisors Channel 9 Documentation APIs and reference Dev centers Samples We’re sorry. The content you requested has been removed. You’ll be auto redirected in 1 second. MSDN Library MSDN Library Development Tools and Languages Development Tools and Languages Development Tools and Languages Design Tools Development Tools and Languages Visual Studio 2015 Visual Studio 2013 Visual Studio 2012 Visual Studio 2010 Visual Studio 2008 Visual Studio 2005 Visual Studio .NET Office and SharePoint Development in Visual Studio Visual Studio Tools for Applications (VSTA) SQL Server Data Tools Data-tier Application Framework (DACFx) XNA Game Studio Microsoft Solver Foundation 3.1 Visual Studio 6.0 Visual FoxPro Internationalization Kinect for Windows SDK 1.8 Kinect for Windows SDK 2.0 Lumia Microsoft Robotics Windows SDK App and Service Distribution Mobile and Embedded Development .NET Development Office development Online Services Open Specifications patterns & practices Servers and Enterprise Development Speech Technologies Web Development Windows Desktop App Development TOC The document is archived and information here might be outdated Development Tools and Languages Visual Studio 2015 Visual Studio 2013 Visual Studio 2012 Visual Studio 2010 Visual Studio 2008 Visual Studio 2005 Visual Studio .NET Office and SharePoint Development in Visual Studio Visual Studio Tools for Applications (VSTA) SQL Server Data Tools Data-tier Application Framework (DACFx) XNA Game Studio Microsoft Solver Foundation 3.1 Visual Studio 6.0 Visual FoxPro Internationalization Kinect for Windows SDK 1.8 Kinect for Windows SDK 2.0 Lumia Microsoft Robotics Windows SDK App and Service Distribution Print Export (0) Print Export (0) Share IN THIS ARTICLE Is this page helpful? Yes No Additional feedback? 1500 characters remaining Submit Skip this Thank you! We appreciate your feedback. Dev centers Windows Office Visual Studio Microsoft Azure More... Learning resources Microsoft Virtual Academy Channel 9 MSDN Magazine Community Forums Blogs Codeplex Support Self support Programs BizSpark (for startups) DreamSpark Imagine Cup United States (English) Newsletter Privacy & cookies Terms of use Trademarks © 2016 Microsoft © 2016 Microsoft Third party scripts and code linked to or referenced from this website are licensed to you by the parties that own such code, not by Microsoft. See ASP.NET Ajax CDN Terms of Use – http://www.asp.net/ajaxlibrary/CDN.ashx. WebTrends view model not available or IncludeLegacyWebTrendsScriptInGlobal feature flag is off"	"null"	"null"	"MSVC, developed by Microsoft."	"true"
"Compiler"	"Open WatCom"	"http://www.openwatcom.org/index.php/Main_Page"	"Watcom C, C++, and Fortran cross compilers and tools. [Sybase Open Watcom Public License]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Open Watcom Dot Org Open Watcom Compiler suite for DOS, Windows, OS/2 now ECS, and Linux. NOTE: The website and application servers will undergo extended maintenance and will be offline during the first week of June, begining Monday 2016-05-30. We apologize for the inconvenience. Thank you for your interest and support. Our current release is version 1.90 dated 2010-05-25. The installation packages and manuals are available for download. Review the readme and license for assistance with the installation. Open Watcom 2016-05-30"	"null"	"null"	"Watcom C, C++, and Fortran cross compilers and tools. [Sybase Open Watcom Public License]"	"true"
"Compiler"	"Oracle Solaris Studio"	"http://www.oracle.com/technetwork/server-storage/solarisstudio/overview/index.html"	"C, C++ and Fortran compiler for SPARC and x86. Supports C++11. Available on Linux and Solaris. [OTN Developer License]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Oracle Developer Studio     Oracle Country Country Communities I am a... I want to... Welcome Account Sign Out Sign In/Register Help Products Solutions Downloads Store Support Training Partners About OTN Oracle Technology Network Server and Storage Systems Developer Studio Overview All-Flash Storage Corente Cloud Services Exchange Developer Studio Engineered Systems Ksplice NAS Storage Netra Systems Networking and Data Center Fabric Products OpenStack Oracle Linux Oracle Optimized Solutions Oracle VM Oracle VM VirtualBox Oracle x86 Servers Private Cloud Appliance SAN Storage Secure Global Desktop Server Management Tools Software in Silicon Software in Silicon Cloud Solaris 10 Solaris 11 Solaris Cluster SPARC Servers StorageTek Tape Storage Sun Blade 6000 Modular Systems Sun Desktops & Peripherals Sun Flash Storage Sun Storage Software Sun Ray Products Virtual Desktop Infrastructure Overview Downloads Features Documentation Community Training         Oracle Developer Studio Write Higher Quality Code, In Less Time Advanced C, C++, Fortran and Java development platform Powerful performance, memory and thread analysis tools Netbeans-based IDE optimized for enterprise applications Available for Oracle Solaris, Linux, and includes remote development capabilities Datasheet     Access all Videos   Latest News and Announcements Oracle Developer Studio 12.5 is Now Available for Download! Announcing Oracle Developer Studio 12.5 Oracle Developer Studio Overview (2:17) Gain a Competitive Edge with Oracle Developer Studio (6:08) Experience the SPARC M7 chip in the Software in Silicon Cloud Mixed-Language Development C, C++ Compilers Advanced code generation technology optimizes applications across Oracle SPARC and x86 systems Fortran Compiler Optimizes compute-intensive application performance Debugger Ensures application stability with event handling and multi-thread support Performance Library Maximizes compute-intensive application performance using advanced numerical solver libraries Application Analytics Performance Analyzer Provides deep insight into C, C++, Java, Scala, and Fortran application performance, allowing you to easily identify bottlenecks and tune for optimal performance Code Analyzer Protects your application from security vulnerabilities, and includes SPARC M7 Software in Silicon support to secure your application at record speeds Thread Analyzer Detects hard to pinpoint race and deadlock conditions in multi-threaded applications IDE Oracle Developer Studio IDE Increases efficiency with unique capabilities for C, C++ and mixed C++/Java enterprise applications     E-mail this page     Printer View   Oracle Cloud Learn About Oracle Cloud Computing Get a Free Trial Learn About DaaS Learn About SaaS Learn About PaaS Learn About IaaS Learn About Private Cloud Learn About Managed Cloud Java Learn About Java Download Java for Consumers Download Java for Developers Java Resources for Developers Java Cloud Service Java Magazine Customers and Events Explore and Read Customer Stories All Oracle Events Oracle OpenWorld JavaOne Email Subscriptions Subscribe to Oracle Communications Subscription Center Communities Blogs Discussion Forums Wikis Oracle ACEs User Groups Social Media Channels Services and Store Log In to My Oracle Support Training and Certification Become a Partner Find a Partner Solution Purchase from the Oracle Store Contact and Chat US Sales: +1.800.633.0738 Global Contacts Oracle Support Partner Support   Integrated Cloud Applications and Platform Services © Oracle Subscribe Careers Contact Us Site Maps Legal Notices Terms of Use Privacy   Ad Choices Oracle Mobile Facebook LinkedIn Twitter Google+ YouTube Oracle RSS Feed"	"null"	"null"	"C, C++ and Fortran compiler for SPARC and x86. Supports C++11. Available on Linux and Solaris. [OTN Developer License]"	"true"
"Compiler"	"TCC"	"http://bellard.org/tcc/"	"Tiny C Compiler. [LGPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"TCC : Tiny C Compiler Tiny C Compiler News [Note: I am no longer working on TCC. Check the mailing list to get up to date information.] (Feb 15, 2013) TCC version 0.9.26 is out thanks to Thomas Preud'homme (Changelog). Summary of the changes: Support for C99 VLA Generation of make dependencies (-MD/-MF) Support improved for various architectures (x86-64, arm, OSX, WinCE, kFreeBSD, Hurd) A bunch of bug fixes (May 20, 2009) TCC version 0.9.25 is out thanks to Grischka (Changelog). TCC version 0.9.25 is the first that supports the x86-64 target. Thanks to Shinichiro Hamaji for this. (Apr 1, 2008) TCC version 0.9.24 is out thanks to Grischka (Changelog). TCC now supports compilation from standard input and the arm eabi. (Jun 17, 2005) TCC version 0.9.23 is out (Changelog). This is the first version with support for the Windows target. (Nov 8, 2004) TCC version 0.9.22 is out (Changelog). Linux kernel compilation is 30% faster (10 seconds on a 2.4 GHz Pentium 4). (Oct 25, 2004) TCC version 0.9.21 is out (Changelog). This version is the first one able to build a bootable Linux kernel with only a few patches to the kernel sources. As a demonstration, you can try the TCCBOOT boot loader. It is able to compile and boot a Linux kernel directly from its source code. NOTE: if you want to compile the Linux kernel with TCC, you must use a custom build script as in TCCBOOT . I never tried to compile the Linux kernel with TinyCC and the standard Linux Makefiles. Features SMALL! You can compile and execute C code everywhere, for example on rescue disks (about 100KB for x86 TCC executable, including C preprocessor, C compiler, assembler and linker). FAST! tcc generates x86 code. No byte code overhead. Compile, assemble and link several times faster than GCC. UNLIMITED! Any C dynamic library can be used directly. TCC is heading torward full ISOC99 compliance. TCC can of course compile itself. SAFE! tcc includes an optional memory and bound checker. Bound checked code can be mixed freely with standard code. Compile and execute C source directly. No linking or assembly necessary. Full C preprocessor and GNU-like assembler included. C script supported : just add '#!/usr/local/bin/tcc -run' at the first line of your C source, and execute it directly from the command line. With libtcc, you can use TCC as a backend for dynamic code generation. Download Compilation Speed Links Browser project9 times Compilation speed for the . There are 76936 lines (including headers). 1950947 lines (67.2 MBytes) are compiled because the same headers are included in many files. TinyCC is about faster than GCC. Compiler Time(s) lines/second MBytes/second TinyCC 0.9.22 2.27 859000 29.6 GCC 3.2 -O0 20.0 98000 3.4 Measures were done on a 2.4 GHz Pentium 4. Real time is measured. Compilation time includes compilation, assembly and linking. More up to date tests are available: 1, 2, 3, 4. Online Documentation You want to help ? Here are some suggestions: Report bugs to the mailing list (and eventually fix them). Links TinyCC mailing list Savannah project page and git repository OTCC - The smallest self compiling pseudo C compiler FFASN1 - My small but powerful ASN.1 compiler. TinyCC fork by Rob Landley LLVM Compiler Infrastructure SmartEiffel - With TCC you can compile your Eiffel code faster The GNU C Compiler The LCC Compiler The Small Device C Compiler Cyclone, A Safe Dialect of C The D language Programming in C The Scriptometer evaluates various scripting languages (including TCC). License TCC is distributed under the GNU Lesser General Public License. Copyright (c) 2001-2009 Fabrice Bellard Fabrice Bellard - http://bellard.org/ - http://www.tinycc.org/"	"null"	"null"	"Tiny C Compiler. [LGPL]"	"true"
"Online Compiler"	"codepad"	"http://codepad.org/"	"An online compiler/interpreter, and a simple collaboration tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"7"	"8"	"GitHub - ruediger/emacs-codepad: Emacs integration for codepad.org Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 36 Fork 8 ruediger/emacs-codepad Code Issues 3 Pull requests 0 Pulse Graphs Emacs integration for codepad.org 43 commits 1 branch 0 releases Fetching contributors Emacs Lisp 100.0% Emacs Lisp Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. .gitignore Makefile README.org codepad.el README.org #-*- mode:org; mode:visual-line; coding:utf-8; -*- codepad.el — Emacs integration for codepad.org. See http://codepad.org. Codepad is a pastebin where you can paste code and share it on a chat or via email. Codepad also provides an online compiler/interpreter and can run your programs online. emacs-codepad provides an Emacs integration for Codepad. Currently you can use it to paste your code to and fetch code from Codepad. Contributors are welcome! codepad.el is based on gist.el which was written by Christian Neukirchen and others. codepad.el is written by Rüdiger Sonderfeld. You can contact me via E-Mail: ruediger@c-plusplus.de. Thanks to Thomas Weidner <thomas001le@gmail.com> for his patches and help. Thanks to Lorenzo Villani <lvillani@binaryhelix.net> for fixing the “error in process filter: Symbol’s value as variable is void: url-max-redirections” issue. Installation Codepad was developed for Emacs 23.1+. codepad.el has problems with older versions of Emacs (url.el)! If codepad.el won’t work please upgrade your Emacs. Installation is straight forward: Add the following lines to your ~/.emacs: (add-to-list 'load-path ""PATH"") ;; replace PATH with the path to codepad.el (autoload 'codepad-paste-region ""codepad"" ""Paste region to codepad.org."" t) (autoload 'codepad-paste-buffer ""codepad"" ""Paste buffer to codepad.org."" t) (autoload 'codepad-fetch-code ""codepad"" ""Fetch code from codepad.org."" t) Restart Emacs (or evaluate those lines) and you can use codepad.el by calling M-x codepad-paste-region to paste the current selected region or M-x codepad-paste-buffer to paste the current selected buffer. You can configure codepad.el by calling M-x customize-group codepad. Codepad.el is also available via el-get and it is currently part of Gentoo’s Emacs Overlays. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ruediger/emacs-codepad"	"An online compiler/interpreter, and a simple collaboration tool."	"true"
"Online Compiler"	"CodeTwist"	"http://codetwist.com/"	"A simple online compiler/interpreter, where you can paste your C, C++ or Java code and execute it online and see results."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CodeTwist : Simple C, C++ and Java Online Interpreter And Compiler about | privacy CodeTwist is a simple online compiler/interpreter, where you can paste your C, C++ or Java code and execute it online and see results. Paste your code below, and CodeTwist will run the code and will give the output. Language: C C++ Java Enter your input, if required in your code (stdin) CodeTwist is personal project of Divyang Patel & Gaurang Patel. Follow them @divyang_patel and @gaurangjp. Share: Tweet © CodeTwist.com . All Rights Reserved. CodeTwist uses Ideone API © by Sphere Research Labs Partner : ViaWebDesk.com"	"null"	"null"	"A simple online compiler/interpreter, where you can paste your C, C++ or Java code and execute it online and see results."	"true"
"Online Compiler"	"coliru"	"http://coliru.stacked-crooked.com/"	"Online compiler/shell with support for various C++ compilers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Coliru"	"null"	"null"	"Online compiler/shell with support for various C++ compilers."	"true"
"Online Compiler"	"Compiler Explorer"	"http://gcc.godbolt.org/"	"An interactive compiler with assembly output available."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Compiler Explorer Compiler Explorer - Donate ChangeTip.Me Share Tweet About Google+ page About Matt Contact Matt Source: Name: Load Save Save as... Full link Short link g++ Binary Unused labels Directives Comment-only lines Intel syntax Colourise Code editor // Type your code here, or load an example. Assembly output Awaiting Compiler output — × Save as... Filename: Cancel Save // Type your code here, or load an example. int square(int num) { return num * num; } // Type your code here, or load an example. pub fn square(num: i32) -> i32 { num * num } // Type your code here, or load an example. // Your function name should start with a capital letter. package main func Square(x int) int { return x * x } func main() {} // Type your code here, or load an example. int square(int num) { return num * num; }"	"null"	"null"	"An interactive compiler with assembly output available."	"true"
"Online Compiler"	"CompileOnline"	"http://www.tutorialspoint.com/codingground.htm"	"Compile and Execute C++ online on Linux."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Free Online IDE and Terminal We are hiring Home Tutorials Library Coding Ground Tutor Connect Send18 Tools Search Code in almost all popular languages using Coding Ground. Edit, compile, execute and share your projects, 100% cloud. < Coding Ground > Online Terminals CentOS Ipython Lua Memcached Mongo DB MySQL Node.JS Numpy Oracle Octave PowerShell PHP R Programming Redis Ruby Scipy Sympy Online IDEs Ada (Gnat) Algol-68 Angular JS Assembly AsciiDoc Awk Bash Shell Befunge Bootstrap Brainf**k C CSS-3 Chipmunk BASIC Clojure Cobol CoffeeScript ColdFusion C99 Strict C++ C++ 0x C++ 11 C# Dart D Language Embedded C Erlang Factor Fantom Falcon Fortran-95 Forth F# Free Basic Groovy GO Haxe Haskell HTML ilasm Intercal ICON Java Java 8 Java MySQL Javascript JSP Jquery julia Ksh Shell Latex Lisp LOLCODE Lua Matlab/Octave Malbolge Markdown MathML Mozart-OZ Nimrod Node.JS Objective-C OCaml Pascal PARI/GP Pawn Perl Perl MySQL PHP PHP MySQL Web View Pike Processing.js P5.js Prolog Python Python-3 Python MySQL Rexx reStructure Ruby Rust R Programming Scala Scheme Smalltalk SML/NJ Simula SQLite SQL Tcl Tex Unlambda VB.NET Verilog Whitespace Ya Basic SELECTED READING Extras Mobile First About us Company Our Team Careers Privacy Policy Terms of use Extra Links Articles Dev Tools File Conversion Shared Tutorials NetMeeting Whiteboard Contact Us Address: 3rd Floor, Jyoti Celestia, Madhapur, Hyderabad, Telangana 500033 Email: Click Here Website: www.tutorialspoint.com Facebook Google+ Twitter Linkedin RSS Write for us FAQ's Helping Contact © Copyright 2016. All Rights Reserved. go"	"null"	"null"	"Compile and Execute C++ online on Linux."	"true"
"Online Compiler"	"Ideone"	"http://ideone.com/"	"An online compiler and debugging tool which allows you to compile source code and execute it online in more than 60 programming languages."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Ideone.com - Online Compiler and IDE >> C/C++, Java, PHP, Python, Perl and 40+ other compilers and interpreters Ideone.com requires JavaScript to work. new code samples recent codes sign in New user? Sign up Sign in Can't sign in? Log in with Facebook enter your source code or insert template or sample or your template clear /* package whatever; // don't place package name! */  import java.util.*; import java.lang.*; import java.io.*;  /* Name of the class has to be ""Main"" only if the class is public. */ class Ideone { 	public static void main (String[] args) throws java.lang.Exception 	{ 		// your code goes here 	} } enter input (stdin) clear syntax highlight time limit: 5s 15s enter your note clear Java popular Bash Pascal (fpc) C Pascal (gpc) C# Perl C++ 5.1 PHP C++14 Python Haskell Python 3 Java Ruby Java7 SQL Objective-C VB.NET others Ada CoffeeScript Icon Pike Assembler Common Lisp (clisp) Intercal Prolog (gnu) Assembler D JavaScript (rhino) Prolog (swi) AWK (gawk) D JavaScript (spidermonkey) Python (Pypy) AWK (mawk) D (dmd) Lua R bc Elixir Nemerle Rust Brainf**k Erlang Nice Scala C F# Nim Scheme (chicken) C++ Factor Node.js Scheme (guile) C++ 4.3.2 Falcon Objective-C Smalltalk C99 strict Fantom Ocaml Tcl CLIPS Forth Octave Text Clojure Fortran Oz Unlambda COBOL Go Perl 6 Whitespace COBOL 85 Groovy PicoLisp stdin more options fewer options Run What is Ideone? Ideone is an online compiler and debugging tool which allows you to compile source code and execute it online in more than 60 programming languages. How to use Ideone? Choose a programming language, enter the source code with optional input data... and you are ready to go! Having problems? Check the samples to see how to write code which works correctly. To find out more visit our FAQ section. Sphere Engine™ We are proud to present our Sphere Engine™ technology, which allows you to execute programs on a remote server in a secure way within a complete runtime environment. Visit the Sphere Engine™ website to find out more. Follow us @ideone OK Sphere Research Labs. Ideone is powered by Sphere Engine™ Home Terms of use API Language FAQ Credits Feedback & Bugs desktop mobile 8, 0.01s, 0.04s × Report bug / make suggestion Close submit × Choose your language English Hindi Hungarian Mongolian Polish Russian Spanish Traditional Chinese Close"	"null"	"null"	"An online compiler and debugging tool which allows you to compile source code and execute it online in more than 60 programming languages."	"true"
"Online Compiler"	"Rextester"	"http://rextester.com/runcode"	"Online compiler which provides several compilers(Clang, GCC, MSVC) and several editors."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"compile c# online   Run Code  | Code Wall  | Users  | Misc  | Feedback  | About  | Login  compile c# online Language:Assembly C# C++ (gcc) C++ (clang) C++ (vc++) C (gcc) C (clang) C (vc) Common Lisp D F# Go Haskell Java Javascript Lua MySql Node.js Octave Objective-C Pascal Perl Php Prolog Python Python 3 R Ruby Scala Scheme Sql Server Tcl Visual Basic Editor:CodeMirror EditArea Simple //Rextester.Program.Main is the entry point for your code. Don't change it. //Compiler version 4.0.30319.17929 for Microsoft (R) .NET Framework 4.5  using System; using System.Collections.Generic; using System.Linq; using System.Text.RegularExpressions;  namespace Rextester {     public class Program     {         public static void Main(string[] args)         {             //Your code goes here             Console.WriteLine(""Hello, world!"");         }     } } Show compiler warnings [ + ] Show input  "	"null"	"null"	"Online compiler which provides several compilers(Clang, GCC, MSVC) and several editors."	"true"
"Online Compiler"	"Rise4Fun"	"http://webcompiler.cloudapp.net/"	"Online Visual C++ compiler."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Visual C++ Compiler Online  Visual C++ Compiler version: 19.00.23720.0 (x86). Last updated: Jan 20, 2016 Additional compiler flags (some args like pch ones are not supported): Run executable after compilation Args to main.exe:   Found a bug? Let us know. The WebCompiler is a recent development build of the Visual C++ toolset (compiler and libraries), but it's inherently limited. For the full experience of editing/compiling/debugging in a powerful IDE, download the Community Edition of Visual Studio 2015. rise4fun © 2014 Microsoft Corporation - terms of use - privacy & cookies - code of conduct  #include <iostream>  using namespace std;  int main() {    cout << ""Hello World"" << endl;  }"	"null"	"null"	"Online Visual C++ compiler."	"true"
"Online Compiler"	"Wandbox"	"http://melpon.org/wandbox/"	"An online Clang/GCC compiler with Boost available."	"null"	"null"	"null"	"Comparison of debuggers"	"https://en.wikipedia.org/wiki/Comparison_of_debuggers"	"null"	"null"	"243"	"27"	"16"	"GitHub - melpon/wandbox: Social Compilation Service Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 243 Fork 16 melpon/wandbox Code Issues 31 Pull requests 0 Wiki Pulse Graphs Social Compilation Service http://melpon.org/wandbox/ 578 commits 6 branches 0 releases Fetching contributors C++ 35.0% Makefile 18.2% Python 17.8% Shell 13.2% JavaScript 11.8% CSS 2.0% Other 2.0% C++ Makefile Python Shell JavaScript CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ajax cppcms master pty stdin terms-of-use Nothing to show Nothing to show New pull request Latest commit 11d03e2 Jun 12, 2016 melpon fix Permalink Failed to load latest commit information. cattleshed fix Jun 12, 2016 kennel2 Use the localStorage instead of the cookie. (#174) Feb 2, 2016 submodules Merge pull request #146 from fetus-hina/feature-ansi-escape Sep 24, 2015 .gitmodules 標準出力や標準エラー出力へのANSIエスケープコード付きの出力に対応 Sep 3, 2015 LICENSE Add license Jul 19, 2012 README.rst Update README.rst for Boost.MSM-lite, DI Mar 9, 2016 ghwebhook.sh use syslog Apr 12, 2015 README.rst Wandbox Wandbox is a social compilation service. URL to this service is http://melpon.org/wandbox You can also access via API: https://github.com/melpon/wandbox/blob/master/kennel2/API.rst These programs are licensed by Boost Software License 1.0. Wandbox on Your Editor You can use Wandbox on your editor. Vim https://github.com/rhysd/wandbox-vim Emacs https://github.com/kosh04/emacs-wandbox xyzzy https://gist.github.com/kikairoya/7544234 Wandbox as a Background Infrastructure You can use Wandbox API from another services (that is, Wandbox API's HTTP response header has Access-Control-Allow-Origin: *). Following services are using Wandbox on background. jBatch jBatch developer, Boris Schaeling says jBatch comes with a wandbox command to access the API more easily. To compile and run a Python program with Wandbox and append the program's output to a webpage, use: <script type=""text/jbatch"">   wandbox run --compiler python-2.7.3 --code 'print(""Hello, world!"")' | appendTo body </script>  See CodePen for Wandbox with jBatch in action. Boost.MSM-lite Boost.MSM-lite document is using Wandbox on background Boost.DI Boost.DI document is also using Wandbox on background. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/melpon/wandbox"	"An online Clang/GCC compiler with Boost available."	"true"
"Debugger"	"GDB"	"https://www.gnu.org/software/gdb/"	"GNU Debugger."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GDB: The GNU Project Debugger GDB: The GNU Project Debugger [bugs] [GDB Maintainers] [contributing] [current git] [documentation] [download] [home] [irc] [links] [mailing lists] [news] [schedule] [song] [wiki] GDB: The GNU Project Debugger What is GDB? GDB, the GNU Project debugger, allows you to see what is going on `inside' another program while it executes -- or what another program was doing at the moment it crashed. GDB can do four main kinds of things (plus other things in support of these) to help you catch bugs in the act: Start your program, specifying anything that might affect its behavior. Make your program stop on specified conditions. Examine what has happened, when your program has stopped. Change things in your program, so you can experiment with correcting the effects of one bug and go on to learn about another. The program being debugged can be written in Ada, C, C++, Objective-C, Pascal (and many other languages). Those programs might be executing on the same machine as GDB (native) or on another machine (remote). GDB can run on most popular UNIX and Microsoft Windows variants. GDB version 7.11.1 Version 7.11.1 of GDB, the GNU Debugger, is now available for download. See the ANNOUNCEMENT for details including changes in this release. An errata list (PROBLEMS) and documentation are also available. News May 31st, 2016: GDB 7.11.1 Released! The latest version of GDB, version 7.11.1, is available for download. This is a minor corrective release over GDB 7.11, fixing the following issues: PR remote/19863 (7.10 regression: gdb remote.c due to ""setfs"" with gdbserver < 7.7) PR gdb/19829 (gdb crashes with PT and reverse next) PR gdb/19676 (gdb fails with assert error if /proc is not mounted) PR gdb/19828 (7.11 regression: non-stop gdb -p : internal error) PR remote/19840 (gdb crashes on reverse-stepi) PR gdb/19858 (GDB doesn't register the JIT libraries on attach) PR gdb/19958 (Breakpoints/watchpoints broken on MIPS Linux <= 4.5) PR build/20029 (symfile.c ambiguous else warning) PR python/20037 (GDB use-after-free error) PR gdb/20039 (Using MI/all-stop, can't interrupt multi-threaded program after continue) February 24th, 2016: GDB 7.11 Released! The latest version of GDB, version 7.11, is available for download. Changes in this release include: Per-inferior thread numbers. Breakpoint ""explicit locations"" (via CLI and GDB/MI). New convenience variables ($_gthread, $_inferior). Record btrace now supports non-stop mode. Various improvements on AArch64 GNU/Linux: Multi-architecture debugging support. displaced stepping. tracepoint support added in GDBserver. kernel-based threads support on FreeBSD. Support for reading/writing memory and extracting values on architectures whose memory is addressable in units of any integral multiple of 8 bits. In Ada, the overloads selection menu provides the parameter types and return types for the matching overloaded subprograms. Various remote protocol improvements, including several new packets which can be used to support features such as follow-exec-mode, exec catchpoints, syscall catchpoints, etc. Some minor improvements in the Python API for extending GDB. Support for various ROM monitors has been removed: target dbug dBUG ROM monitor for Motorola ColdFire target picobug Motorola picobug monitor target dink32 DINK32 ROM monitor for PowerPC target m32r Renesas M32R/D ROM monitor target mon2000 mon2000 ROM monitor target ppcbug PPCBUG ROM monitor for PowerPC See the NEWS file for a more complete and detailed list of what this release includes. Feb 10th, 2016: GDB 7.11 branch created The GDB 7.11 branch (gdb-7.11-branch) has been created. To check out a copy of the branch use:  git clone --branch gdb-7.11-branch ssh://sourceware.org/git/binutils-gdb.git  September 30, 2011: Release Mistakes in GDB Versions 6.0 - 7.3 A mistake has been detected in the release tar files for all GDB releases from version 6.0 to version 7.3 (included). The mistake has been corrected, and the FSF issued the following announcements: Making up for a release mistake in GDB versions 6.0 - 6.6 Making up for a release mistake in GDB versions 6.7 - 7.3 Nov 28, 2006: Reversible Debugging The GDB maintainers are looking for contributors interested in reversible debugging. Late breaking information, such as recently added features, can be found in the NEWS file in the gdb source tree. Old announcements are in the news archive. [bugs] [GDB Maintainers] [contributing] [current git] [documentation] [download] [home] [irc] [links] [mailing lists] [news] [schedule] [song] [wiki] Please send FSF & GNU inquiries & questions to gnu@gnu.org. There are also other ways to contact the FSF. This page is maintained by the GDB developers. Copyright Free Software Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA. Verbatim copying and distribution of this entire article is permitted in any medium, provided this notice is preserved. Last modified 2016-05-31."	"null"	"null"	"GNU Debugger."	"true"
"Debugger"	"LLDB"	"http://lldb.llvm.org/"	"The LLDB Debugger."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LLDB Homepage The LLDB Debugger Goals and Status About Blog Goals Features Status Use and Extension Tutorial GDB and LLDB command examples Frame and Thread Formatting Symbolication Variable Formatting Python Reference Python Example Symbols on Mac OS X Remote debugging Troubleshooting Architecture Mailing Lists lldb-dev lldb-commits Resources Download Python API Documentation C++ API Documentation Source Build Test Coding Conventions SB API Coding Rules Bug Reports Browse SVN Browse ViewVC What is LLDB? LLDB is a next generation, high-performance debugger. It is built as a set of reusable components which highly leverage existing libraries in the larger LLVM Project, such as the Clang expression parser and LLVM disassembler. LLDB is the default debugger in Xcode on Mac OS X and supports debugging C, Objective-C and C++ on the desktop and iOS devices and simulator. All of the code in the LLDB project is available under the standard LLVM License, an open source ""BSD-style"" license. Why a new debugger? In order to achieve our goals we decided to start with a fresh architecture that would support modern multi-threaded programs, handle debugging symbols in an efficient manner, use compiler based code knowledge and have plug-in support for functionality and extensions. Additionally we want the debugger capabilities to be available to other analysis tools, be they scripts or compiled programs, without requiring them to be GPL. Compiler Integration Benefits LLDB currently converts debug information into clang types so that it can leverage the clang compiler infrastructure. This allows LLDB to support the latest C, C++, Objective C and Objective C++ language features and runtimes in expressions without having to reimplement any of this functionality. It also leverages the compiler to take care of all ABI details when making functions calls for expressions, when disassembling instructions and extracting instruction details, and much more. The major benefits include: Up to date language support for C, C++, Objective C Multi-line expressions that can declare local variables and types Utilize the JIT for expressions when supported Evaluate expression Intermediate Representation (IR) when JIT can't be used Reusability The LLDB debugger APIs are exposed as a C++ object oriented interface in a shared library. The lldb command line tool links to, and uses this public API. On Mac OS X the shared library is exposed as a framework named LLDB.framework, and unix systems expose it as lldb.so. The entire API is also then exposed through Python script bindings which allow the API to be used within the LLDB embedded script interpreter, and also in any python script that loads the lldb.py module in standard python script files. See the Python Reference page for more details on how and where Python can be used with the LLDB API. Sharing the LLDB API allows LLDB to not only be used for debugging, but also for symbolication, disassembly, object and symbol file introspection, and much more. Platform Support LLDB is known to work on the following platforms, but ports to new platforms are welcome: Mac OS X desktop user space debugging for i386 and x86-64 iOS simulator debugging on i386 iOS device debugging on ARM Linux local user-space debugging for i386 and x86-64 FreeBSD local user-space debugging for i386 and x86-64 Windows local user-space debugging for i386 (*) (*) Support for Windows is under active development. Basic functionality is expected to work, with functionality improving rapidly. Get it and get involved! To check out the code, use: svn co http://llvm.org/svn/llvm-project/lldb/trunk lldb Note that LLDB generally builds from top-of-trunk On Mac OS X with Xcode On Linux and FreeBSD (with clang and libstdc++/libc++) On NetBSD (with GCC and clang and libstdc++/libc++) On Windows with VS 2012 or higher using CMake See the LLDB Build Page for platform-specific build instructions. Discussions about LLDB should go to the lldb-dev mailing list. Commit messages for the lldb SVN module are automatically sent to the lldb-commits mailing list, and this is also the preferred mailing list for patch submissions."	"null"	"null"	"The LLDB Debugger."	"true"
"Debugger"	"Metashell"	"https://metashell.readthedocs.org/"	"An interactive template metaprogramming shell which includes the MDB metadebugger."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Metashell Metashell Home Metashell Motivation License Getting Metashell Supported platforms Binary installers Building Metashell User manual Getting started The environment in Metashell Troubleshooting Embedding Metashell How to... Reference The pragmas MDB commands The built-in headers Developer guide Demo server Rationales About Demo Community Changelog   Metashell Docs » Home Edit on GitHub Metashell The goal of this project is to provide an interactive template metaprogramming shell. Motivation When one starts learning a new programming language such as Haskell, Python or Erlang an interactive shell (python for Python, ghci for Haskell, erl for Erlang) is available for experimenting with the language. Later, after getting familiar with the language, this shell becomes a tool to try code out, verify test results or learn more about the problem during debugging. When one starts learning C++ template metaprogramming, he has to use a C++ compiler which was designed to compile code and not to play with template tricks. People new to template metaprogramming have to learn how to make the compiler show them the result of simple metaprograms. This makes it more difficult to get started with template metaprogramming. Later, after getting familiar with template metaprogramming, developers have to use the compiler for testing and debugging. Understanding what is going on in a template metaprogram during debugging is difficult, since the compiler needs to be forced to present the result of a metaprogram (or a part of it) - and compilers are not prepared for this. This extra difficulty in debugging makes simple problems look difficult. Metashell provides an interactive shell similar to the Python, Haskell and Erlang shells for template metaprogramming. It uses Clang to evaluate the metaprograms. License Metashell is published under the GNU General Public License, version 3. Next Built with MkDocs using a theme provided by Read the Docs. Read the Docs"	"null"	"null"	"An interactive template metaprogramming shell which includes the MDB metadebugger."	"true"
"Debugger"	"Valgrind"	"http://valgrind.org/"	"A tool for memory debugging, memory leak detection, and profiling."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Valgrind Home Information About News Tool Suite Supported Platforms The Developers Source Code Current Releases Release Archive Variants / Patches Code Repository Valkyrie / GUIs Documentation Table of Contents Quick Start FAQ User Manual Download Manual Research Papers Books Contact Mailing Lists and IRC Bug Reports Feature Requests Contact Summary Commercial Support How to Help Contributing Project Suggestions Gallery Projects / Users Press / Media Awards Surveys Artwork / Clothing Current release: valgrind-3.11.0   Valgrind is an instrumentation framework for building dynamic analysis tools. There are Valgrind tools that can automatically detect many memory management and threading bugs, and profile your programs in detail. You can also use Valgrind to build new tools. The Valgrind distribution currently includes six production-quality tools: a memory error detector, two thread error detectors, a cache and branch-prediction profiler, a call-graph generating cache and branch-prediction profiler, and a heap profiler. It also includes three experimental tools: a stack/global array overrun detector, a second heap profiler that examines how heap blocks are used, and a SimPoint basic block vector generator. It runs on the following platforms: X86/Linux, AMD64/Linux, ARM/Linux, ARM64/Linux, PPC32/Linux, PPC64/Linux, PPC64LE/Linux, S390X/Linux, MIPS32/Linux, MIPS64/Linux, TILEGX/Linux, X86/Solaris, AMD64/Solaris, ARM/Android (2.3.x and later), ARM64/Android, X86/Android (4.0 and later), MIPS32/Android, X86/Darwin and AMD64/Darwin (Mac OS X 10.10, with initial support for 10.11). Valgrind is Open Source / Free Software, and is freely available under the GNU General Public License, version 2. Recent News 22 September 2015: valgrind-3.11.0, is available. This release supports: X86/Linux, AMD64/Linux, ARM/Linux, ARM64/Linux, PPC32/Linux, PPC64/Linux, PPC64LE/Linux, S390X/Linux, MIPS32/Linux, MIPS64/Linux, TILEGX/Linux, X86/Solaris, AMD64/Solaris, ARM/Android (2.3.x and later), ARM64/Android, X86/Android (4.0 and later), MIPS32/Android, X86/Darwin and AMD64/Darwin (Mac OS X 10.10, with initial support for 10.11). (release notes). 21 October 2010: Valkyrie-2.0.0, a Qt4-based GUI for the Memcheck and Helgrind tools in Valgrind-3.6.0, is now available. May 5 2010: Valgrind t-shirts are available for purchase at FreeWear.org. For each t-shirt sold, € 3 will be donated to the Valgrind project. Copyright © 2000-2015 Valgrind™ Developers Hosting kindly donated by Mythic Beasts Best Viewed With A(ny) Browser"	"null"	"null"	"A tool for memory debugging, memory leak detection, and profiling."	"true"
"Debugger"	"x64_dbg"	"http://x64dbg.com/"	"An open-source x64/x32 debugger for windows."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"22"	"11"	"6"	"GitHub - x64dbg/XEDParse: XEDParse: A MASM-like, single-line plaintext assembler Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 22 Fork 6 x64dbg/XEDParse Code Issues 4 Pull requests 0 Pulse Graphs XEDParse: A MASM-like, single-line plaintext assembler 162 commits 1 branch 12 releases Fetching contributors C++ 81.8% C 17.9% Other 0.3% C++ C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0 V0004 V0003 V0002 V0001 1.0.26 1.0.24 1.0.22 1.0.20 1.0.18 1.0.16 1.0.14 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. XEDParseTest bindings hooks src xed2 .gitignore AStyle.dll AStyleWhore.exe LICENSE README.md XEDParse.sln XEDParse.vcxproj XEDParse.vcxproj.filters XEDParse.vcxproj.user install.bat release.bat README.md XEDParse XEDParse is a library to parse MASM-like plaintext instructions to the XED instruction format. The library is meant to have quick access to assembly in certain low-level programs (such as debuggers). Currently finished: Parsing instructions to an internal data structure Translate the instruction base to XED2 Translate registers to XED2 Encode the translated structure Translate values Translate memory arguments Todo: Handle instructions with more than two operands correctly Currently the parser can be considered reasonably fast, parsing about 200,000 instructions in 1.5 seconds. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/x64dbg/XEDParse"	"An open-source x64/x32 debugger for windows."	"true"
"Integrated Development Environment"	"Anjuta DevStudio"	"http://anjuta.org/"	"The GNOME IDE. [GPL3]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Anjuta DevStudio Anjuta DevStudio GNOME Integrated Development Environment Menu Home Features Development Projects Team Home Latest Releases Download Anjuta 3.18 Download Anjuta Extras 3.10 Documentation Anjuta Manual Anjuta FAQ Anjuta Build Tutorial Anjuta core API docs Anjuta Architecture Creating project templates New plugins tutorial Anjuta DevStudio is a versatile software development studio featuring a number of advanced programming facilities including project management, application wizard, interactive debugger, source editor, version control, GUI designer, profiler and many more tools. It focuses on providing simple and usable user interface, yet powerful for efficient development.   Simple user interface Anjuta UI is designed to be simple to operate, yet provides powerful tools. Project wizards and templates Easy wizards and project templates for getting started with new projects. Many supported languages Anjuta supports programming languages C, C++, Java, Javascript, Python, Vala Integrated Glade Full Glade integration for WYSIWYG UI development for GTK+/GNOME applications Integrated GDB Fully integrated GDB for onboard debugging Integrated DevHelp DevHelp integration for context sensitive help   Learn More Anjuta News Developer Experience Hackfest Report I have been at the Developer Experience Hackfest representing Anjuta with Carl-Anton.... Anjuta 3.6.0 released Anjuta 3.6.0 (September 26, 2012) — James Liggett This is a new stable version of Anj... Anjuta 3.2.2 released There is a new stable release of anjuta in the 3.2 branch fixing some important bugs.... More News Development Resources Anjuta wiki Bugzilla product Git: git clone git://git.gnome.org/anjuta Browse source code Tarballs Future Roadmap Building Anjuta Old Roadmap Web site Admin Development Getting in Touch IRC channel Mailing list File a bug Copyright 2014 Anjuta Team"	"null"	"null"	"The GNOME IDE. [GPL3]"	"true"
"Integrated Development Environment"	"AppCode"	"http://www.jetbrains.com/objc/"	"an IDE for Objective-C, C, C++, and JavaScript development built on JetBrains’ IntelliJ IDEA platform."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JetBrains AppCode: Swift Execution of Your Bright Ideas All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search AppCode Early Access Program is Open What's New Features Docs & Demos Buy Download Smart IDE for iOS/OS X development Get free 30-day trial Why AppCode Swift execution of your bright ideas Intelligent development environment Thanks to an in-depth understanding of your code structure, AppCode takes care of your routine tasks and saves you from extra typing. Efficient project navigation Jump to any file, class, or symbol in your project in no time, use hierarchical and structure views to get through your project structure. Smart completion AppCode offers two kinds of code completion: basic as-you-type completion, and more advanced SmartType completion for more precise filtering of suggestions. Reliable refactorings Modify and improve your code any time with safe, accurate and reliable refactorings. Thorough code analysis AppCode is constantly monitoring the quality of your code. It warns you of errors and smells and suggests quick-fixes to resolve them automatically. AppCode provides over 60 code inspections just for Objective-C, C and C++, and a number of code inspections for other supported languages. All code inspections are run on the fly. Productive unit testing Out of the box, AppCode supports XCTest, Google Test and Kiwi testing frameworks. Code generation action to get unit tests’ methods makes you more productive. Use Cmd+N to get test methods according to the context. Watch demo Many languages, one IDE AppCode natively supports Objective-C, Swift, C and C++ (including C++11, libc++ and Boost), as well as JavaScript, XML, HTML, CSS and XPath. Objective-C Swift C++ Rename refactoring Rename variables, constants, functions, type names and classes and rest assured that AppCode will update all the usages across the entire code base for you. Override/Implement Cut down on the routine when implementing or overriding methods - AppCode creates a stub with some default code for you. Objective-C Swift C++ The complete experience AppCode is 100% compatible and interoperable with Xcode, with no additional configuration required, and seamlessly integrates with CocoaPods, Reveal application, most popular version control systems and a number of issue trackers. discover all features New Features What’s New in AppCode Swift 2.2 support Write your Swift code faster with accurate parsing, resolve and completion for Swift 2.2 code constructs. Swift code folding Use code folding for Swift declarations and focus on the most important parts of your code. C++ support AppCode brings support of variadic templates, lots of fixes in code resolve and analysis, improved auto-imports for STL symbols, and more detailed Quick Documentation for C++. see what's new Testimonials What our customers say AppCode is a constant for me. There are a lot of things that it does much better than Xcode that save me a lot of time programming. It’s Awesome. Orta Therox CocoaPods, Artsy Anyone who’s not using AppCode is wasting precious time every day. I save hours every week, and feel impeded whenever I'm editing Objective-C outside of AppCode. Chris Eidhof, objc.io Paweł Dudek, Mobile Academy For me this is the best thing about AppCode – ability to quickly change and generate code. Radoslaw Holewa, CTO of Miquido The only iOS/OSX IDE where refactoring actually works. Jon Reid, qualitycoding.org With AppCode, it feels like code flies from my head to the screen. AppCode is fantastic! Not only is it more stable than Xcode, but it provides the familiar power and efficiency that I've grown accustomed to with JetBrains products. Micah Martin 8th Light Inc Join Our Customers Worldwide Teams all over the world use AppCode. Join them! Get free 30-day trial Tell me about new product features as they come out Thanks for your request! @appcode on twitter Bug and issue tracker Community forum AppCode blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"an IDE for Objective-C, C, C++, and JavaScript development built on JetBrains’ IntelliJ IDEA platform."	"true"
"Integrated Development Environment"	"Cevelop"	"https://www.cevelop.com/"	"Cross-platform C/C++ IDE based on Eclipse CDT with additional plug-ins."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cevelop Toggle navigation Cevelop Home News Download Features FAQ The C++ IDE for professional developers Get it now! Latest News: Eclipse Neon Update – 06 Jul 2016 IDE++ Cevelop extends Eclipse CDT with many additional features: CUTE unit testing with Test Driven Development support, new refactorings and quick fixes, and much more. And it's free! View Details » One Download Cevelop is a one-stop download that includes all the plug-ins that you need to develop modern C++ code. Because it's based on Eclipse, you can still install your favorite plug-ins. Download Now » Upgrade Your Code Cevelop comes with many tools to upgrade your code to C++11/14. For example, automatic quick-fixes can convert variable declarations and initializations to the new uniform initialization syntax. Learn More » CUTE: Green Bar for C++ CUTE, short for C++ Unit Testing Easier, is a C++ unit testing framework mandatory for every C++ project. The CUTE plug-in support easy development and management of CUTE unit tests for your software. Features like red/green-bar result visualization, automatic test registration and code coverage alleviate every-day tasks of a software developer. The plug-in also encourages test driven development through various code generation mechanisms, reducing development time significantly. Cevelop also comes with Seams and Mock support powered by Mockator. Template Visualization Visually explore function- and class-templates: The Template Information View displays detailed template information and lets you easily browse through instantiation levels. The Template Information View can be openend in Cevelop via Window → Show View → Others... → C/C++ → Template Information Recursive calls to a variadic template function, visualized in Cevelop 1.5. More Refactorings and Quick-Assists Eclipse CDT comes with some basic automated refactorings. Cevelop builds on these foundations and gives you many more. Namespace refactorings to quality unqualified names and inline and extract using directives and declarations. Macros should not be used in modern C++. Cevelop assists you in replacing object- and function-like macros with proper C++ constexprs and functions. C++11 and C++14 make writing C++ code much more pleasant. Cevelop helps you to upgrade your code to automatically take advantage of new features such as initializer lists, smart pointers, and more. Include Analysis and OptimizationComing Soon Dependencies among C++ header files can become quite complex and get out of control. Includator analyzes the depenceny hierarchy in C++ projects and optimzes them if necessary. Such cleanup keeps C++ header files tidy and reduces compile time. Cevelop provides exclusive access to Includator, which otherwise has to be purchased separately! Developed within the REPARA project, co-funded by the European Commission within the Seventh Framework Programme Cevelop on Twitter © 2015 Institute for Software – Contact Us – Bug Reports – License – About"	"null"	"null"	"Cross-platform C/C++ IDE based on Eclipse CDT with additional plug-ins."	"true"
"Integrated Development Environment"	"CLion"	"http://www.jetbrains.com/clion/"	"Cross-platform C/C++ IDE from JetBrains."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A cross-platform IDE for C and C++ :: JetBrains CLion All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search CLion Early Access Program is Open What's New Features Docs & Demos Buy Download A cross-platform IDE for C and C++ Get free 30 day trial Take a tour Why CLion A power tool for A power language Smart C and C++ editor Thanks to native C and C++ support, including C++11 standard, libc++ and Boost, CLion knows your code through and through and takes care of the routine while you focus on the important things. Navigation Instantly navigate to a symbol's declaration or context usages, find your way through the code base with structure and hierarchical views. Code generation Add class members, override/implement functions, wrap a block of code with a statement, or generate a declaration from actual usage - all via simple keyboard shortcuts. Refactoring Rename symbols, move members up/down the hierarchy, change function signature, and be sure CLion’s automated refactorings will accurately propagate the appropriate changes throughout your code. Watch demo On-the-fly code analysis With CLion, you can create code that's beautiful and correct at the same time. Potential code issues are identified instantly... ...and fixed as you type! Be sure all the proper changes are handled automatically by CLion. CLion also performs Data Flow analysis to find out all the cases of the unreachable code, infinite recursion and more. Integrated debugger Investigate and solve problems with ease through CLion's friendly debugger user interface with GDB or LLDB (on OS X) available as a backend. Inline variable view Get the complete view of your project with variable values shown right in the editor as you debug. Watches and variables view Inspect the state of all the variable for a chosen function in the stack frame, or monitor variable/expression changes during the debug session. Watch demo Evaluate expression Evaluate result of a function call or some complicated expression when stop at some execution point in the debug session. Fully Integrated C/C++ Development Environment CMake Using CMake as a project model, CLion handles your changes in CMake files automatically, using all the information from there during code editing and refactorings. Embedded terminal Run any command without leaving the IDE: locally or remotely using the SSH protocol. Depending on your platform, you can work with a command line prompt, Far, powershell, bash, or other tools. The complete experience Popular VCS supported out of the box include Subversion, Git, GitHub, Mercurial, CVS, Perforce (via plugin), and TFS. CLion also seamlessly integrates with Google Test framework. Keyboard-centric approach To help you focus on code and raise your productivity, CLion has keyboard shortcuts for nearly all its features, actions and commands. Vim fans are welcome to install the Vim-emulation plugin. Discover all features New Features What’s New in CLion 2016.1 Use Modern C++: variadic templates Support of the variadic templates brings lots of fixes in code resolve and analysis, making it possible now to handle correctly Qt C++11 connect calls usages. Code quicker: more generation actions CLion brings new generate action - generate definitions, together with the possibility to generate in-place. Unveil your potential with the updated generate menu. Debug with ease: attach to local process CLion now allows you to debug processes running locally on your machine. Benefit from the built-in debugger features you are already familiar with. See What's new Testimonials What our customers say Prof. Dr. Rodriguez-Losada, biicode CTO CLion is fantastic, finally the C++ high quality cross-platform IDE with CMake as first class build system we were waiting for. A product that was impressive during the EAP versions. I’m looking forward to seeing where JetBrains will take it from here. Considering the quality of their other products the sky is the limit. Tommy Andersen Schilling A/S @alex_braidwood I would like to take this moment to say, CLion has quickly become my favorite IDE for C/C++. It just works. #jetbrains #CLion Really liking @clion_ide for a new C++ project: lightweight, responsive, useful, good integrations. And most important, great vi emulation. Jonathan Dursi @ljdursi Companies worldwide trust JetBrains IDEs. Join the club! Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free 30-day trial C++ Tools Check out other C/C++ tools from JetBrains Pick up the right tool for C and C++ development depending on your preferred toolchains and other requirements: ReSharper C++ Visual Studio Extension for C++ Developers CLion Cross-platform IDE for C and C++ developers AppCode IDE for iOS/OS X development Learn More Tell me about new product features as they come out Thanks for your request! @clion_ide on twitter Bug and issue tracker Community forum CLion blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"Cross-platform C/C++ IDE from JetBrains."	"true"
"Integrated Development Environment"	"Code::Blocks"	"http://www.codeblocks.org/"	"A free C, C++ and Fortran IDE."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Code::Blocks Code::Blocks - The IDE with all the features you need, having a consistent look, feel and operation across platforms. Home Features Downloads Forums Wiki Main Home Features Screenshots Downloads Plugins User manual Licensing Donations Quick links FAQ Wiki Forums Forums (mobile) Nightlies Ticket System Browse SVN Browse SVN log The open source, cross platform, free C, C++ and Fortran IDE. Code::Blocks is a free C, C++ and Fortran IDE built to meet the most demanding needs of its users. It is designed to be very extensible and fully configurable. Finally, an IDE with all the features you need, having a consistent look, feel and operation across platforms. Built around a plugin framework, Code::Blocks can be extended with plugins. Any kind of functionality can be added by installing/coding a plugin. For instance, compiling and debugging functionality is already provided by plugins! Special credits go to darmar for his great work on the FortranProject plugin, bundled since release 13.12. We hope you enjoy using Code::Blocks! The Code::Blocks Team   Code::Blocks 16.01 is here! Written by MortenMacFly    Thursday, 28 January 2016 10:21 Many, many improvements, new plugins and features, more stable and major code completion enhancement, the new Code::Blocks release has finally arrived. Get it from the downloads section! A changelog summarises new features and fixes. We provide binaries for the major platforms supported by Code::Blocks, with more to come in the next time. Last Updated on Thursday, 28 January 2016 21:13   15.12 release is close to be released - try RC1! Written by MortenMacFly    Monday, 07 December 2015 19:07 We are close to release the next version of Code::Blocks. Please try version 15.12 RC1 now an report back!   Moved to new server Written by Yiannis Mandravellos    Friday, 18 September 2015 12:43 After struggling with the hardware issues we had with the old server, we finally took the plunge and moved to a new (and hopefully better) server! Services are still being enabled and configured on the new server but most user-critical services should be up and running. These include the main web site and the forums. In the coming hours, all services should be accessible again, just like they were before the move. Thank you all for your patience. For those interested, the old server has been serving us since Feb 1st of 2008 and did that well over all these years. We can only hope the new server will last as long as the old one, if not longer! Last Updated on Saturday, 23 January 2016 16:05   Don't miss the nightlies! Written by MortenMacFly    Wednesday, 26 August 2015 15:20 We are well alive and kicking! Please remember, that while waiting for the next release, you can try new features by using the ""nightlies"" that we provide here (downloads are on SourceForge, as usual). We also provide nightly ""setups"" for windows for those, who like and/or need installer. Last Updated on Sunday, 30 August 2015 08:16   Server problems Written by Yiannis Mandravellos    Friday, 18 September 2015 08:23 We 've been facing some hardware problems with our main server and they 've only gotten worse during the last few days. We apologize about that. We 're actively handling the issue. Hopefully it will be resolved soon, even if it means moving to a new server. Please bear with us and stay tuned :) Last Updated on Saturday, 23 January 2016 16:05   Bug&Patch Tracker now at SourceForge Written by MortenMacFly    Friday, 16 May 2014 04:58 Due to the fact that BerliOS will close its services we have created a ticket system at SourceForge and closed the bug and patch tracker at BerliOS. Last Updated on Wednesday, 26 August 2015 15:28   Build system Code::Blocks implements a custom build system with very important features: ultra-fast dependencies generation, build queues and parallel builds are the most important ones to mention. Debugging The debugging subsystem has been greatly enhanced in the latest version. Automatic/manual watches, code/data breakpoints, call stack, disassembly listing and memory dumps are only few of its features."	"null"	"null"	"A free C, C++ and Fortran IDE."	"true"
"Integrated Development Environment"	"CodeLite"	"http://codelite.org/"	"Another cross-plaform, free C/C++ IDE. [GPL2 with an exception for plugins]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"638"	"83"	"187"	"GitHub - eranif/codelite: CodeLite, a cross platform C/C++/PHP and Node.js IDE written in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 83 Star 638 Fork 187 eranif/codelite Code Issues 124 Pull requests 2 Pulse Graphs CodeLite, a cross platform C/C++/PHP and Node.js IDE written in C++ http://codelite.org 9,146 commits 1 branch 19 releases 30 contributors C++ 65.7% C 27.3% PHP 5.3% CMake 0.4% Lex 0.3% HTML 0.3% Other 0.7% C++ C PHP CMake Lex HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v5.0.6213 v4.1.5770 v4.0.5589 v3.5.0.5375 9.2 9.1 9.0 8.1 8.0 8.0-1 7.0 6.1.1 6.1 6.0.1 6.0 5.4 5.3 5.2 5.1 Nothing to show New pull request Latest commit 3a74a35 Jul 13, 2016 eranif Updated Windows resource file to 9.2.0 … Updated OSX Info.plist to 9.2.0 Permalink Failed to load latest commit information. CMakePlugin Fixed: The default Setting of Cmake plugin has a mistake in windows Jul 6, 2016 CallGraph Added new logging API in addition to the old C-Style printf like macr… May 4, 2016 ClangOutputParser - clang cc: added a yacc based parser to parse clang cc output (bette… Jun 22, 2011 CodeCompletionsTests Make boost::shared_ptr and boost::scoped_ptr code completion work wit… Mar 18, 2016 CodeDesigner Merge pull request #774 from jcowgill/duplicate-rpath May 15, 2015 CodeFormatter Fixed: the generated package (from the CMakeLists.txt) is now using l… Jun 9, 2016 CodeLite Really fix: ""completion of *.php5 contents"" Jul 5, 2016 CodeLiteDiff Preparing the code base to support codelite-lldb on Windows Apr 3, 2016 CommentParser added support for project level environment variables + project level… Sep 18, 2010 ContinuousBuild Changed the ""Builder"" interface to support custom user arguments to p… Apr 16, 2016 Copyright Fixed: replace in files panel: disable the replace-all button while a… Dec 4, 2015 CxxParser Fixed: assertion in Open Resource dialgot due to wx3.1 changes Apr 23, 2015 DatabaseExplorer No (intentional) real changes; just fixes to multiple files for wx3.1… May 18, 2016 Debugger Fixed build error on Windows 32 bit Jul 12, 2016 ExternalTools Windows: use native wxAuiToolBar theme Mar 14, 2016 File2Hex Changing branch scintilla 2.0 into trunk Sep 3, 2009 FileCrawler/trunk Fixed: when ""crawling"" to header files from an #include statement, ke… Jun 19, 2014 FileGrep git-svn-id: https://codelite.svn.sourceforge.net/svnroot/codelite/tru… Jun 18, 2011 Gizmos Fixed: Remember ""#pragma once"" setting in ""New Class""-Dialog Jan 21, 2016 HelpPlugin Preparing the code base to support codelite-lldb on Windows Apr 3, 2016 InnoSetup Don't package LLDB on Windows 32 bit Jul 13, 2016 Interfaces Changed gdb defaults: Apr 18, 2016 LLDBDebugger Fixed: the generated package (from the CMakeLists.txt) is now using l… Jun 9, 2016 LiteEditor Updated Windows resource file to 9.2.0 Jul 13, 2016 MacBundler Fixed: replace in files panel: disable the replace-all button while a… Dec 4, 2015 MemCheck Fixed: replace in files panel: disable the replace-all button while a… Dec 4, 2015 Outline Truly fix: Window postition not restored correctly (#1099) Feb 23, 2016 PCH Fixed: replace in files panel: disable the replace-all button while a… Dec 4, 2015 Plugin Fixed: handle ""php5"" file extension as a PHP file Jun 28, 2016 PreProcessor - regenerated PP files using the correct yacc Jul 2, 2011 QmakePlugin No (intentional) real changes; just fixes to multiple files for wx3.1… May 18, 2016 Runtime Updated Windows resource file to 9.2.0 Jul 13, 2016 SFTP Fixed: XML: highlight tags that contain ""-"" Apr 18, 2016 ScopeOptimizer C++ Code Completion: suggest code completion for C++11 lambda functio… Apr 8, 2015 SnipWiz Preparing the code base to support codelite-lldb on Windows Apr 3, 2016 SpellChecker Windows: use native wxAuiToolBar theme Mar 14, 2016 Subversion2 Added tooltip to the source control field in the status bar Jun 6, 2016 TestDir Fixed: build error on Windows due to cppcheck source files update Apr 3, 2015 Tweaks Fixed: replace in files panel: disable the replace-all button while a… Dec 4, 2015 UnitTest++ Added more CMake files Feb 7, 2013 UnitTestCPP Fixed: replace in files panel: disable the replace-all button while a… Dec 4, 2015 WebTools Fixed: HTML close tag auto completion issue - adds extra characters Jul 4, 2016 WordCompletion Fixed: Word Completion Plugin: no word completion for words surrounde… Jul 6, 2016 ZoomNavigator Truly fix: Window postition not restored correctly (#1099) Feb 23, 2016 abbreviation Mass spelling fixes Feb 7, 2016 art Updated CodeLite splash screen to 2016 + new Logo Dec 31, 2015 bitmaps Updated the status bar warning/error images Jun 6, 2016 cmake/Modules updated icon.icns Dec 4, 2015 codelite-icons-dark Removed obsolete icons Nov 4, 2015 codelite-icons-fresh-farm Removed obsolete icons Nov 4, 2015 codelite-icons Removed obsolete icons Nov 4, 2015 codelite_echo Fixed: build error on Windows due to cppcheck source files update Apr 3, 2015 codelite_launcher Mass spelling fixes Feb 7, 2016 codelite_make fixed codelite-make to support the new builder changes Apr 16, 2016 codelite_terminal Mass spelling fixes Feb 7, 2016 codelite_utils make-weekly script now also builds the Windows weekly (64 bit) Feb 3, 2016 codelitegcc Remove RPATH settings from plugin CMakeLists May 14, 2015 codelitephp Added ""*.php5"" to the default php5 view Jul 3, 2016 cppchecker No (intentional) real changes; just fixes to multiple files for wx3.1… May 18, 2016 cscope Fixed crash on MSW debug build Jun 8, 2016 formbuilder Fixed: don't use tree-book control for the code completion dialog May 7, 2016 gdbparser GDB: Fixed: Problem with breakpoints in C++ function templates Sep 2, 2015 git cscope: display the matches in a layout similar to the ""find-in-files"" Jun 8, 2016 icons Removed obsolte file Jun 9, 2016 le_exec Fixed: build error on Windows due to cppcheck source files update Apr 3, 2015 lib/gcc_lib added dummy .gitignore file to so the folder lib/gcc_lib is kept in git Feb 24, 2015 patches When creating new project of type 'wxCrafter' prompt the user if the … Dec 6, 2012 sdk Clang code completion: updated libclang64 to the latest clang (64 bit… Apr 4, 2016 sqlite3 Removed obsolete files Apr 3, 2015 svgs Updated the status bar warning/error images Jun 6, 2016 translations updated following files for translate2chinese: Feb 26, 2016 wxformbuilder Fixed: replace in files panel: disable the replace-all button while a… Dec 4, 2015 .drone.yml Continuous Integration: Configure Tea CI. May 27, 2016 AUTHORS updated todo list Sep 7, 2013 BuildInfo.txt Renamed project 'LiteEditor' to 'CodeLiteIDE' Nov 26, 2014 CMakeLists.txt Updated version to 9.2.0 Jul 3, 2016 COPYING Updated COPYING license file Apr 15, 2014 DESC Linux: generate a more standard deb packages using cmake (Part III) Sep 14, 2015 LICENSE cmake: added support for 'install' target Feb 9, 2013 LiteEditor.workspace CMake plugin: support windows resource files Jun 20, 2016 README.md README.md: apt-get install libwxbase3.0-dev libsqlite3-dev libwxsqlit… Apr 10, 2016 TODO.TXT Fixed: #1135 Feb 8, 2016 about.html Changing branch scintilla 2.0 into trunk Sep 3, 2009 codelite.spec - Changed version number from 2.3 to 2.5 as preparation for the new c… Mar 29, 2010 codelite.xml - Applied patch to register .project / .workspace mime types as codel… Jan 9, 2011 codelite_prefix.h Updated CodeLite copyrights header file Dec 2, 2015 compilers.json Startup wizard: fetch the compilers suggestion list to install from t… Jul 27, 2015 mac-build.sh added exec permissions Aug 11, 2013 make-weekly 7-zip the Windows binaries before uploading it May 19, 2016 make_repo.txt added post install step to .deb file Mar 24, 2008 make_src_targz.sh Produce a Linux .xz tarball as well as the current .tar.gz Jul 20, 2013 pack-icons-all.bat Added new icons packaging script Mar 31, 2013 README.md What is CodeLite? CodeLite is an open source, free, cross platform IDE for the C/C++ programming languages which runs on all major Platforms ( OSX, Windows and Linux ) You can download pre-built binaries for Windows / OSX and Linux from our main Download Page More information can be found here: Official Website Wiki Download Page Building CodeLite on Linux To build CodeLite on your computer you will need these packages: wxWidgets 3.0 or later The gtk development package: often called libgtk2.0-dev or wxGTK-devel or similar pkg-config (which usually comes with the gtk dev package) The build-essential package (or the relevant bit of it: g++, make etc) git cmake You should have wxWidgets 3.0 or later built on your machine. If you don't know how to build (or you're just lazy ...) you can download it install wxWidgets from CodeLite's repository On Ubuntu / Debian you can install all of the above (except for wxWidgets 3.0) by typing: sudo apt-get install libgtk2.0-dev pkg-config build-essential git cmake libssh-dev libwxbase3.0-dev libsqlite3-dev libwxsqlite3-3.0-dev  Git clone the sources: git clone https://github.com/eranif/codelite.git  Run cmake and build codelite: cd codelite mkdir build-release cd build-release cmake -G ""Unix Makefiles"" -DCMAKE_BUILD_TYPE=Release .. make -j4 sudo make install  Building CodeLite on OS X Prerequisites: wxWidgets 3.x CMake HomeBrew git XCode XCode command-line tools Preparation: (Optional) Make a separate folder for building if you want to get rid of all except the .app file after building Install XCode from Mac App Store Install XCode command-line tools xcode-select --install Install HomeBrew :  ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""  Update HomeBrew : brew update (Optional) Upgrade HomeBrew packages : brew upgrade Install git : brew install git Install CMake : brew install cmake Install wxWidgets : brew install wxmac --dev --use-llvm Clone the repo (lets assume that you have a folder /Users/YOU/src)   cd /Users/YOU/src   git clone https://github.com/eranif/codelite.git the above will create the folder /Users/YOU/codelite To build CodeLite:   cd /Users/YOU/codelite   mkdir build-release   cd build-release   cmake .. -DCMAKE_BUILD_TYPE=Release   make -j4   make install You should now have an app bundle /Users/YOU/codelite/build-release/codelite.app To launch CodeLite: open /Users/YOU/codelite/build-release/codelite.app Building CodeLite on Windows Git clone the sources git clone https://github.com/eranif/codelite.git  Download codelite installer for Windows from our Download Page Download wxWidgets 3.0 installer. Also from our Download Page Open the workspace LiteEditor.workspace (located in the codelite folder) Make sure that the project CodeLiteIDE is selected (the active project uses bold font) Select the Win_x64_Release or Win_x86_Release (depending if you want to build a 32 or 64 bit version of CodeLite) and hit F7 When the compilation is over, close the workspace Next, locate the workspace codelite_utils/codelite_utils.workspce and open it Select the Win_x64_Release or Win_x86_Release (depending if you want to build a 32 or 64 bit version of CodeLite) hit F7 and wait for the compilation to end Close CodeLite To update your installation with the new codelite, close codelite and from a CMD.EXE window navigate to codelite-sources/Runtime/ and run the file update.bat OR update64.bat (again, depending on your selected arch) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/eranif/codelite"	"Another cross-plaform, free C/C++ IDE. [GPL2 with an exception for plugins]"	"true"
"Integrated Development Environment"	"color_coded"	"https://github.com/jeaye/color_coded"	"A vim plugin for libclang-based highlighting. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"499"	"26"	"22"	"GitHub - jeaye/color_coded: A vim plugin for libclang-based highlighting in C, C++, ObjC Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 499 Fork 22 jeaye/color_coded Code Issues 26 Pull requests 2 Pulse Graphs A vim plugin for libclang-based highlighting in C, C++, ObjC 481 commits 12 branches 0 releases 10 contributors C++ 97.9% C 1.6% CMake 0.3% VimL 0.2% Python 0.0% Shell 0.0% C++ C CMake VimL Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.1 clang-3.7.0 clang clang_36 cmake colorscheme debian master matches revamp splits unstable Nothing to show Nothing to show New pull request Latest commit 6bd62f9 Jul 3, 2016 jeaye Add libpthreads dep; close #133 Permalink Failed to load latest commit information. after/syntax Yellow is too bright; use the RGB for DarkYellow Apr 23, 2015 autoload Provide more info on clang errors; close #127 Jun 5, 2016 cmake Generated headers now always appear in the source directory Apr 26, 2016 colors Add missing colorscheme name Nov 18, 2015 include Provide more info on clang errors; close #127 Jun 6, 2016 lib Use -isystem for sys headers Apr 26, 2016 pics Add pics to the repo Dec 15, 2015 plugin Add a check against nvim on start Oct 16, 2015 src Provide more info on clang errors; close #127 Jun 6, 2016 test Fix path in config file test Jan 2, 2016 .color_coded Provide defaults based on file type Oct 16, 2015 .gitignore Add rudimentary support for system clang usage Apr 12, 2015 .gitmodules Cleanup some unit test work Apr 18, 2015 .travis.yml Disable travis clang build while llvm's ppa's down Jun 6, 2016 .ycm_extra_conf.py Cleanup some unit test work Apr 18, 2015 CMakeLists.txt Download LLVM on Travis (as done so originally) Apr 20, 2016 LICENSE Update copyright year Jan 8, 2016 README.md Add libpthreads dep; close #133 Jul 3, 2016 README.md color_coded: semantic highlighting with vim color_coded is a vim plugin that provides realtime (fast), tagless code highlighting for C++, C, and Objective C using libclang. Environmentally friendly Lua binding for VimL -> C++ Exhaustive customization possibilities Unintrusive highlighting; self-contained Utilizes self-contained clang 3.8.0 Before color_coded After color_coded Installation OS X Before installing color_coded on OS X, please read the following. The vim that ships with (even the latest) OS X is not new enough to support color_coded. Furthermore, the default macvim from homebrew doesn't have lua enabled. To ensure you have a valid macvim install on OS X, please do the following: brew update brew install macvim --with-lua --with-override-system-vim brew linkapps macvim brew install xz cmake # Spawn a new shell to use the new system vim To get proper highlighting, you'll also want the Xcode command line tools, which will give you the appropriate system headers: xcode-select --install Ubuntu/Debian First, install all required dependencies. [sudo] apt-get install build-essential libclang-3.8-dev libncurses-dev libz-dev cmake xz-utils libpthreads-workqueue-dev For lua, you must install the version that your version of vim is compiled for. vim --version | grep lua Find your version number -llua5.x and use it to install the correct version. [sudo] apt-get install liblua5.x-dev lua5.x You also need to ensure you have GCC 4.9 (or higher). If you don't, you can try the following (tested on Ubuntu 14.04). # Install GCC 4.9 [sudo] add-apt-repository ppa:ubuntu-toolchain-r/test [sudo] apt-get update [sudo] apt-get install g++-4.9  # Prefer 4.9 to other versions [sudo] update-alternatives --remove-all g++ [sudo] update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 50 FreeBSD / PCBSD (Tested in FreeBSD 10.1) $ [sudo] pkg install clang36 llvm36 cmake $ cd ~/.vim/bundle/color_coded $ mkdir build && cd build $ cmake -DCUSTOM_CLANG=1 -DLLVM_ROOT_PATH=/usr/local/llvm36  .. $ make && make install Vundle and Pathogen Installation has been tested using vundle, but should also be compatible with pathogen. To install using vundle (add the line to your ~/.vimrc, restart vim, run :PluginInstall): Plugin 'jeaye/color_coded' NeoBundle Installation with NeoBundle supports automatically building and lazy-loading the plugin: NeoBundleLazy 'jeaye/color_coded', {   \ 'build': {     \   'unix': 'cmake . && make && make install',   \ },   \ 'autoload': { 'filetypes' : ['c', 'cpp', 'objc', 'objcpp'] },   \ 'build_commands' : ['cmake', 'make'] \} All Since color_coded has a compiled component, you'll need to manually compile when installing and updating (unless your vim package manager does it for you). Compilation works as follows, assuming usage of vundle (see the dependencies section to ensure you can make properly): cd ~/.vim/bundle/color_coded mkdir build && cd build cmake .. make && make install # Compiling with GCC is preferred, ironically # Clang works on OS X, but has mixed success on Linux and the BSDs  # Cleanup afterward; frees several hundred megabytes make clean && make clean_clang For various compatibility reasons, color_coded will attempt to download a known version of clang. This may add time to your configuration process, but it offers more stability across multiple platforms. Avoiding this is not officially supported, but documented here. ANOTHER NOTE: color_coded doesn't reliably support luajit. More informatively, luajit doesn't reliably support being embedded in shared libraries. Usage Once color_coded is installed and compiled, it will automatically begin working the next time you start vim. In order for color_coded to know how your code must be compiled, you may need to create a file describing the required compiler options. Note, color_coded assumes sane defaults and tries to allow for immediate usage. That said, in any non-trivial case, you'll find yourself needing to supply a .color_coded file for your project. For each file, color_coded will search from the file's directory all the way up to the root of the filesystem looking for a .color_coded file or a .color_coded_foo file (where foo is the filetype; i.e. c, cpp, etc). This makes it possible for you to have one in your home directory, for example, and then in each of your projects' directories. If you don't specify one in a project directory, the one in your home directory is used. It also makes it possible to provide different flags for differen file types (C, C++, etc) and also work in subprojects with different flags. Again, if no such files are found, sane defaults will be applied. color_coded will try its hardest to highlight your code for you, even if there are errors in the translation unit. This allows for better highlighting while typing and highlighting of valid code when color_coded doesn't know everything about your project. .color_coded file contents The contents of a .color_coded or .color_coded_foo file is simply a line-separated list of compiler options. For example, the .color_coded file for color_coded is (color_coded puts the rest in by default when it detects C or C++ files): -Iinclude -Ilib/jest/include  The .color_coded file can be automatically generated using YCM-Generator. NOTE: Out of simplicity, no other data is permitted in the .color_coded file. That is to say, comments are not supported. Options g:color_coded_enabled This option controls whether or not color_coded will function. Invoking the :CCtoggle command will modify this option to achieve its results. You may also specify it as 0 in your ~/.vimrc to globally disable color_coded. Default: let g:color_coded_enabled = 1 g:color_coded_filetypes This option controls the filetypes which color_coded will try to compile. Default: let g:color_coded_filetypes = ['c', 'cpp', 'objc'] Highlighting There are many new highlighting groups which color_coded adds. They are designed to follow libclang's internals as closely as possible. To tie things together, some wrapper groups have been created that will allow more sweeping changes. The clang groups, by default, are mapped to use these, along with vim's normal groups (Function, Macro, Number, etc). Generic groups "" To get full highlighting, specify these in your colorscheme. "" See colors/twilighted.vim for example usage  hi Member "" Any non-static member variable hi Variable "" Any non-member variable hi Namespace hi EnumConstant Example of clang groups hi link StructDecl Type hi link UnionDecl Type hi link ClassDecl Type hi link EnumDecl Type Sample colorscheme color_coded ships with a sample color scheme demonstrating support for the extended groups. To use it, invoke :colorscheme twilighted. As the name may suggest, the colorscheme is forked from vim's own twilight theme and has been appropriately punned into that which you'll see in the repo. To examine the implementation, visit colors/twilighted.vim. Note that color_coded can work with any colorscheme; this is just a sample. For more information on all of the supported groups, see after/syntax/color_coded.vim and the clang documentation. Commands :CCerror This command outputs the last compilation error message from libclang. If your highlighting is not working properly, you may have a misconfigured .color_coded file or you may have syntax errors in your source. When in doubt, check here first. :CCtoggle This command enables color_coded, if it's currently disabled, or disables it, if it's currently enabled. This enable/disabling is done via the g:color_coded_enabled option. Dependencies Compilation of color_coded requires: GCC ≥ 4.9 Lua ≥ 5.1.x (using the version with which vim was compiled) Usage of color_coded requires vim: Version: 7.4p330+ Compiled with Lua support (+lua) Troubleshooting/FAQ As I type, the highlighting becomes messed up color_coded tries to compile your coded as you type it. Due to how vim works, color_coded can only update the highlighting once you do something (move the cursor, make a change, etc). When you're done typing and the highlighting has not finished updating, assuming your .color_coded file is sufficient, moving the cursor (or causing events some other way) will allow color_coded to finish. Note, there is a hold event in vim which triggers after you stop typing and after some delay. color_coded also hooks into this and will use it to apply highlighting if possible. Some bits aren't highlighted or are highlighted incorrectly Yup. Believe it or not, these are almost certainly libclang bugs. I've been sorting out a few of them and I'm maintaining my own fork of libclang. If you would like to report such an issue, check out this ticket. The highlighting isn't refreshed in a new buffer until I move the cursor This is intentional. The first time you open a buffer, color_coded doesn't know if it's going to compile properly and it doesn't want you to wait while it tries to figure this out. color_coded will always compile in the background and events like moving the cursor or changing text will poll for updates. Note, however, that, once a buffer has highlighting, leaving that buffer and coming back to it will synchronously apply the previous highlighting. ""color_coded unavailable: you need to compile it"" When you install color_coded, you need to manually compile it before you can successfully use it. See Installation for instructions. ""color_coded has been updated: you need to recompile it"" Assuming you've updated a working installation of color_coded, you'll get this error if the update requires you to recompile color_coded (i.e. there have been changes to the native API). To recompile, follow the same exact steps you took to compile initially. Does color_coded work with neovim? I doubt it. color_coded has not been tested on neovim and there has been significant work to the plugin API and the lua interface. For now, at least, color_coded is not supporting neovim. color_coded crashes on startup?!?! You're likely using luajit, which doesn't embed well in shared libraries. If you aren't sure, see if this turns up anything: vim --version | grep jit More information is here.. How can I disable color_coded in diff mode? You can use this in your .vimrc: "" Disable color_coded in diff mode if &diff   let g:color_coded_enabled = 0 endif How can I use a custom LLVM/Clang setup? You may specify DOWNLOAD_CLANG=0 to cmake. Depending on your platform, you may also need to specify the path to your llvm-config binary using LLVM_CONFIG=. This can also allow you to use different versions of Clang/LLVM. Example: cmake . -DDOWNLOAD_CLANG=0 ""no version information available (required by gvim)"" You may run into this on Debian-based systems. The solution has been to install liblua-5.x-0-dbg. ""E315: ml_get: invalid lnum: 32"" This is caused by a bug in vim; you can work around it by using a vim with at least patch 1691. See this issue for details. How can I get support? Feel free to make an issue on Github or email me or catch me on IRC: Freenode @ #color_coded Donate Feel free to shoot Bitcoins my way: 1HaMvpDjy7QJBDkcZALJr3s26FxLpv5WtJ For more information regarding how I use donations, see here. License color_coded is under the MIT open-source license. See the LICENSE file or http://opensource.org/licenses/MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeaye/color_coded"	"A vim plugin for libclang-based highlighting. [MIT]"	"true"
"Integrated Development Environment"	"Dev-C++"	"http://sourceforge.net/projects/orwelldevcpp/"	"A portable C/C++/C++11 IDE."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Dev-C++ download | SourceForge.net SourceForge Browse Enterprise Blog Deals Help Create Log In or Join Solution Centers Go Parallel Resources Newsletters Cloud Storage Providers Business VoIP Providers Call Center Providers Home Browse Development Integrated Development Environments (IDE) Dev-C++ Dev-C++ A free, portable, fast and simple C/C++ IDE Brought to you by: orwelldevcpp Summary Files Reviews Support External Link ▾ Blog Wiki Reddit Tracker Code Forums ★ 4.7 Stars (129) 39,557 Downloads (This Week) Last Update: 2015-06-14 Download Dev-Cpp 5.11 TDM-GCC 4.9.2 Setup.exe Browse All Files Windows BSD Screenshots Description A new and improved fork of Bloodshed Dev-C++ Dev-C++ Web Site Categories Integrated Development Environments (IDE), Software Development License GNU General Public License version 3.0 (GPLv3) Features TDM-GCC 4.9.2 32/64bit Syntax highlighting Code completion Code insight Editable shortcuts GPROF profiling GDB debugging AStyle code formatting Devpak IDE extensions External tools KEEP ME UPDATED By clicking on ""Follow"" below, you are agreeing to the Terms of Use and the Privacy Policy. Get notifications on updates for this project. Get newsletters with site news, white paper/events resources, and sponsored content from our partners. Invalid email address. Please try again. Sent to None. Follow You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. User Ratings 4.7 out of 5 stars ★★★★★ ★★★★ ★★★ ★★ ★ 109 12 0 0 8 ease 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 features 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 3 / 5 design 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 3 / 5 support 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 4 / 5 Write a Review User Reviews Filter All All ★★★★★ ★★★★ ★★★ ★★ ★ atuldo 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Best IDE Posted 06/06/2016 aandrewww 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Warning! AVG free antivir detects Trojan Generic36.BZED. A simple *empty* win console app compiles to 128kbyte with trojan inside. Is there somewhere trojan-free dev-c++ install package? Posted 04/27/2016 aubacke 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 virustotal.com/de/file/faad96bbcc51f115c9edd691785d1309e7663b67dcfcf7c11515c3d28c9c0f1f/analysis/ Zillya detects malware named Adware.MegaSearch.Win32.18250 Posted 03/27/2016 lan1967 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 Nice project. Posted 02/20/2016 brothereye 1 of 5 2 of 5 3 of 5 4 of 5 5 of 5 UI needs changing for better Posted 12/13/2015 Read more reviews Additional Project Details Languages Croatian, Romanian, Korean, French, Ukrainian, Dutch, Polish, Slovene, Latvian, Czech, Italian, Catalan, Greek, English, Portuguese, Slovak, Chinese (Traditional), Estonian, Galician, Bulgarian, Swedish, Turkish, Norwegian, Chinese (Simplified), Danish, German, Spanish, Russian, Hungarian Intended Audience Advanced End Users, Developers, End Users/Desktop User Interface Win32 (MS Windows), Windows Aero Programming Language C++, C, Delphi/Kylix, AutoIt Registered 2011-10-15 Recommended Projects Code::Blocks A free C, C++ and Fortran IDE Dev-C++ This project superseded by http://sf.net/projects/orwelldevcpp/ DeSmuME: Nintendo DS emulator DeSmuME is a Nintendo DS emulator Deals Top Searches dev c++ dev dev-c++ c++ dev c borland turbo c++ 4.5 borland c++ orwell dev c++ dev c ++ devc++ Report inappropriate content Thanks for helping keep SourceForge clean. Screenshot instructions: Windows Mac Red Hat Linux   Ubuntu Click URL instructions: Right-click on ad, choose ""Copy Link"", then paste here → (This may not be possible with some types of ads) More information about our ad policies X You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. Briefly describe the problem (required): Upload screenshot of ad (required): Select a file, or drag & drop file here. ✔ ✘ Please provide the ad click URL, if possible: SourceForge About Site Status @sfnet_ops Find and Develop Software Create a Project Software Directory Top Downloaded Projects Community Blog @sourceforge Resources Help Site Documentation Support Request © 2016 Slashdot Media. All Rights Reserved. Terms Privacy Opt Out Choices Advertise Get latest updates about Open Source Projects, Conferences and News. Sign up for the SourceForge newsletter: I agree to receive quotes, newsletters and other information from sourceforge.net and its partners regarding IT services and products. I understand that I can withdraw my consent at any time. Please refer to our Privacy Policy or Contact Us for more details You seem to have CSS turned off. Please don't fill out this field. You seem to have CSS turned off. Please don't fill out this field. No, thanks Screenshots can attract more users to your project. Features can attract more users to your project."	"null"	"null"	"A portable C/C++/C++11 IDE."	"true"
"Integrated Development Environment"	"Eclipse CDT"	"http://www.eclipse.org/cdt/"	"A fully functional C and C++ IDE based on the Eclipse platform."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Eclipse CDT  Eclipse Marketplace  Eclipse YouTube Channel  Bugzilla  Eclipse Forums  Planet Eclipse  Eclipse Wiki My Foundation Portal Eclipse CDT Download Documentation Support Developers About Primary Links Eclipse C/C++ IDE Distribution, Software Install Site Tutorials, Examples, Videos, Reference Documentation Bug Tracker, Newsgroup Git, Workspace Setup, Wiki, Committers Eclipse CDT (C/C++ Development Tooling) The CDT Project provides a fully functional C and C++ Integrated Development Environment based on the Eclipse platform. Features include: support for project creation and managed build for various toolchains, standard make build, source navigation, various source knowledge tools, such as type hierarchy, call graph, include browser, macro definition browser, code editor with syntax highlighting, folding and hyperlink navigation, source code refactoring and code generation, visual debugging tools, including memory, registers, and disassembly viewers. Current Status Development is underway for the CDT 9.1.0 due September, 2016. CDT 9.0.1 Now Available July 15, 2016 - CDT 9.0.1 for Eclipse Neon. This is a bug fix release for CDT 9.0. Check the Download link on how to get yours. CDT 9.0.0 Now Available June 22, 2016 - CDT 9.0.0 for Eclipse Neon. Check the Download link on how to get yours. CDT 8.8.1 Now Available February 26, 2016 - CDT 8.8.1 for Eclipse Mars.2. Check the Download link on how to get yours.   Home Privacy Policy Terms of Use Copyright Agent Legal Contact Us Copyright © 2016 The Eclipse Foundation. All Rights Reserved."	"null"	"null"	"A fully functional C and C++ IDE based on the Eclipse platform."	"true"
"Integrated Development Environment"	"Geany"	"http://www.geany.org/"	"Small, fast, cross-platform IDE. [GPL]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Geany : Home Page  Geany Search: View | History | Print Geany HomePage About Screenshots Authors / Thanks Reviews Download Releases Third Party Packages Git / Nightly Extras Documentation Manual / Wiki FAQ Release Notes ChangeLog ToDo Hacking Geany Support Plugins / Wishlist Mailing lists / IRC Bugs and Features Building from Source Running on Windows Contribute Developers Translators Documentation Support Login  Main»Home Page Home Page Welcome! Geany is a text editor using the GTK+ toolkit with basic features of an integrated development environment. It was developed to provide a small and fast IDE, which has only a few dependencies from other packages. It supports many filetypes and has some nice features. For more details see About. Latest version is: 1.28 News: Geany-Plugins 1.28 released! Posted on Jul. 10, 2016 at 01:55 PM Permanent link We are happy to announce a new version of the combined Geany-Plugins release -- right after Geany 1.28, Geany-Plugins 1.28 has been released. Here are some of the most prominent news. Improve GTK3 for several plugins (Quentin Glidic). Rename plugin GeanySendMail to SendMail (Frank Lanitz). Update translations: de, fr, pt, tr. Improve listing tasks containing comments (Quentin Glidic). Fix a crash in the PairTagHighlighter plugin when the tag name is missing (Colomban Wendling). Fix several memory leaks in the PrettyPrinter plugin (Colomban Wendling). Include Scope plugin in the Windows installer (Colomban Wendling). A more complete list of changes can be found in the NEWS file As usual, you can find source tarballs and Windows installer for the new release on plugins.geany.org. A huge thanks to everybody contributing to this great release. Geany 1.28 is out! Posted on Jul. 10, 2016 at 01:49 PM Permanent link We are happy to announce a new release of Geany! For a comprehensive list of changes please see Release Notes. A very detailed and complete list of changes can be found in the ChangeLog. Some highlights: Improve support for GTK 3.20. Fix type name coloring when types change (Jiří Techet). Fix undo of line end type change (Jiří Techet). Update Scintilla to version 3.6.6. Improve Goto Symbol popup contents (Jiří Techet). Treat .h headers as C++ by default (Jiří Techet). Improve symbols for Ruby. Update translations: ca, de, el, es, fr, it, ja, lt, pt, ru, sk, tr, zh_CN. We want to thank all developers, translators and everyone who contributed to this release with patches, feedback, bug reports and so on. Thank you! As usual, all downloads can be found on Releases. Geany-Plugins 1.27 released! Posted on Mar. 13, 2016 at 02:32 PM Permanent link We are happy to announce a new version of the combined Geany-Plugins release -- right after Geany 1.27, Geany-Plugins 1.27 has been released. There have been a lot of changes, but here are some of the most prominent or noteworthy ones. Dropped build support via Waf -- please use Autotools instead Improve building on Windows a lot and so ship more plugins with installer for Windows New plugin LineOperations Debugger: Fix many memory leaks and potential crashes Debugger: Fix handling of non-ASCII characters in file names Debugger: Speed up stack trace display on large traces Debugger: Report the signal name when the process received one GeanyPy: Add keybinding support for Python plugins GeniusPaste: Make pastebins configurable via configuration files, adding support for user-defined pastebins GeniusPaste: Add configurations for fpaste.org and paste.debian.net ProjectOrganizer: Use the term ""symbol"" instead of ""tag"" Spellcheck: Improve detection of English contractions and other use of single quotes i18n/l10n: Update of translations for de, fr, pt, ru A more complete list of changes can be found in the NEWS file. As usual, you can find source tarballs and Windows installer for the new release on plugins.geany.org. (news archive) Page History Page last modified on January 31, 2016, at 04:16 PM Recent Changes (All) | Admin Contents Copyright 2006-2012 Enrico Tröger, Matthew Brush, Colomban Wendling, Frank Lanitz, Nick Treleaven and Dominic Hopf Powered by PmWiki running the ""Light"" skin."	"null"	"null"	"Small, fast, cross-platform IDE. [GPL]"	"true"
"Integrated Development Environment"	"IBM VisualAge"	"http://www-03.ibm.com/software/products/en/visgen"	"A family of computer integrated development environments from IBM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IBM -  			VisualAge Generator  		 IBM® Site map IBM IBM Software Products DevOps Application lifecyle management VisualAge Generator A rapid application development environment for e-business Provides a fast path to creating scalable e-busienss systems based on WebSphere Application Server Speeds the deployment of B2B (Business to Business) applications based on MQSeries Integrates fully with VisualAge for Java to provide a Java-based development and test environment for the creation of Java GUIs, applets and servlets, as well as new transactional server programs Delivers Enterprise Java Bean support by allowing VA Generator server programs to be invoked from Java clients via an Enterprise Java Bean component (session bean) Generates Java server code for Windows2000 and WindowsNT Speeds the development of systems accessing legacy systems data on DL/1, VSAM, and OS/400 files IBM VisualAge Generator is a powerful high-end, rapid application development environment for building and deploying e-business applications. VisualAge Generator delivers high-volume transaction processing in multi-tier, multi-platform e-business environments, masking the complexity of data and communications connections. Developers with little or no Java expertise can implement end-to-end Java e-business systems. Object-Oriented and Java developers can implement systems running on traditional transactional platforms, accessing legacy data, with no need to become mainframe experts. DevOps Application lifecyle management IBM Application Delivery Foundation for z Systems IBM Mobile Development Lifecycle Solution Rational Application Developer for WebSphere Software Rational Collaborative Lifecycle Management Rational Developer for AIX and Linux AIX COBOL Edition Rational Developer for i Rational Developer for z Systems Rational DOORS Rational Lifecycle Integration Adapters Rational Quality Manager Rational Software Architect Designer Extension for Deployment Planning Rational Software Architect Designer Extension for Integrated Architecture Frameworks Rational Software Architect Designer Extension for SOA and WebSphere Rational Software Architect Designer for WebSphere Software Rational Team Concert Not in United States? Select your country from the list below to go to that country's IBM Web site Select another country. Afghanistan - English Algeria - French Anguilla - English Antigua and Barbuda - English Argentina - English Argentina - Spanish Aruba - English Australia - English Austria - German Bahamas - English Bahrain - English Bangladesh - English Barbados - English Belgium - English Bermuda - English Bolivia - English Bolivia - Spanish Botswana - English Brazil - Portuguese British Virgin Islands - English Brunei - English Bulgaria - Bulgarian Cambodia - English Cameroon - English Canada - English Canada - French Cayman Islands - English Chile - English Chile - Spanish China - Chinese China - English Colombia - English Colombia - Spanish Costa Rica - Spanish Croatia - Croatian Croatia - English Curaçao - English Cyprus - English Czech Republic - Czech Denmark - Danish Denmark - English Dominica - English Ecuador - English Ecuador - Spanish Egypt - English Estonia - Estonian Ethiopia - English Finland - English Finland - Finnish France - English France - French Germany - German Ghana - English Greece - English Grenada - English Guyana - English Hong Kong - English Hungary - Hungarian India - English Indonesia - English Iraq - English Ireland - English Italy - English Italy - Italian Jamaica - English Japan - English Japan - Japanese Jordan - English Kenya - English Kuwait - English Latvia - Latvian Lebanon - English Libya - English Lithuania - Lithuanian Malawi - English Malaysia - English Mauritius - English Mexico - English Mexico - Spanish Montserrat - English Morocco - French Namibia - English Nepal - English Netherlands - Dutch Netherlands - English New Zealand - English Nigeria - English Norway - English Norway - Norwegian Oman - English Pakistan - English Paraguay - English Paraguay - Spanish Peru - English Peru - Spanish Philippines - English Poland - English Poland - Polish Portugal - Portuguese Qatar - English Romania - Romanian Russia - Russian Saint Kitts And Nevis - English Saint Lucia - English Saint Vincent And The Grenadines - English Saudi Arabia - English Serbia - Serbian Seychelles - English Sierra Leone - English Singapore - English Slovakia - Slovak Slovenia - English Slovenia - Slovenian South Africa - English South Korea - English South Korea - Korean Spain - Spanish Sri Lanka - English Suriname - English Sweden - English Sweden - Swedish Switzerland - French Switzerland - German Taiwan - Chinese Tanzania - English Thailand - English Trinidad and Tobago - English Tunisia - French Turkey - Turkish Turks And Caicos Islands - English Uganda - English United Arab Emirates - English United Kingdom - English United States - English Uruguay - English Uruguay - Spanish Venezuela - English Venezuela - Spanish Vietnam - English Yemen - English Zambia - English Zimbabwe - English Contact IBM Considering a purchase? Email IBM Or call us at: 1-844-95-CLOUD1-844-95-CLOUD Priority code: Cloud Product support VisualAge Generator Product support Related products       Footer links Contact Privacy Terms of use Accessibility"	"null"	"null"	"A family of computer integrated development environments from IBM."	"true"
"Integrated Development Environment"	"Irony-mode"	"https://github.com/Sarcasm/irony-mode"	"A C/C++ minor mode for Emacs powered by libclang."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"455"	"47"	"67"	"GitHub - Sarcasm/irony-mode: A C/C++ minor mode for Emacs powered by libclang Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 455 Fork 67 Sarcasm/irony-mode Code Issues 65 Pull requests 11 Wiki Pulse Graphs A C/C++ minor mode for Emacs powered by libclang 368 commits 1 branch 5 releases 22 contributors Emacs Lisp 73.5% C++ 20.1% CMake 6.4% Emacs Lisp C++ CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2.0 v0.1.2 v0.1.1 v0.1.0 v0.0.1-alpha Nothing to show New pull request Latest commit 6e0a3f0 Jul 13, 2016 Sarcasm FindLibClang.cmake: add support for 3.8.1 release Permalink Failed to load latest commit information. screenshots move bundled ac plugin in standalone repository, bump docs Apr 21, 2014 server FindLibClang.cmake: add support for 3.8.1 release Jul 13, 2016 .dir-locals.el .dir-locals.el: syntax change Apr 27, 2014 .gitignore move elisp files in top directory and the server in its own directory Apr 21, 2014 .travis.yml CMake: better use of CTest for testing Jul 8, 2015 CONTRIBUTING.md small documentation cleanup Jun 5, 2014 COPYING Add a small GPL header. Nov 4, 2011 README.md Fix a typo in README Mar 3, 2016 irony-cdb-clang-complete.el CDB: put the compilation database in its own file Nov 29, 2014 irony-cdb-json.el irony-cdb-json: fix compiler flags when using ccache May 31, 2016 irony-cdb-libclang.el irony-cdb-libclang: ignore compiler warnings on cl functions Aug 5, 2015 irony-cdb.el handle ccache when parsing compile option Jan 23, 2016 irony-completion.el irony-completion: remove `irony-completion-mode' variable Aug 10, 2015 irony-diagnostics.el irony-server: add get-type command Jan 23, 2016 irony-snippet.el irony-snippet: irony-snippet-available-p nil if yas-minor-mode is nil Aug 24, 2015 irony.el irony: synchronous requests now check irony-server exists (#255) Jun 28, 2016 README.md Irony-Mode A C/C++ minor mode powered by libclang irony-mode is an Emacs minor-mode that aims at improving the editing experience for the C, C++ and Objective-C languages. It works by using a combination of an Emacs package and a C++ program (irony-server) that uses libclang. Features: Code completion: With Emacs' built-in completion-at-point-functions With company-mode's backend: company-irony With auto-complete' source: ac-irony Diagnostic reporting: With flycheck's checker: flycheck-irony Integration with eldoc-mode: irony-eldoc Dependencies Elisp dependencies These dependencies will be installed automatically when using the standard installation procedure described below. Package Comment cl-lib Built-in since Emacs 24.3 json Built-in since Emacs 23.1 YASnippet Optional. May be used to provide post-completion expansion of function arguments Irony-Server prerequisites irony-server provides the libclang interface to irony-mode. It uses a simple protocol based on S-expression. This server, written in C++ and requires the following packages to be installed on your system: CMake >= 2.8.3 libclang Installation The recommended way to install irony-mode and its dependencies is to use a package manager. Using MELPA M-x package-install RET irony RET  Using el-get M-x el-get-install RET irony-mode RET  Configuration (add-hook 'c++-mode-hook 'irony-mode) (add-hook 'c-mode-hook 'irony-mode) (add-hook 'objc-mode-hook 'irony-mode)  ;; replace the `completion-at-point' and `complete-symbol' bindings in ;; irony-mode's buffers by irony-mode's function (defun my-irony-mode-hook ()   (define-key irony-mode-map [remap completion-at-point]     'irony-completion-at-point-async)   (define-key irony-mode-map [remap complete-symbol]     'irony-completion-at-point-async)) (add-hook 'irony-mode-hook 'my-irony-mode-hook) (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options) Windows considerations irony-mode should work fine on Windows but there are some things to take care of first. libclang.dll is expected to be available in the PATH or in Emacs' exec-path. Emacs >= 24.4 is required. A bug in previous versions makes irony unuseable (Emacs bug #18420). w32-pipe-read-delay default value of 50 should be changed. This should not cause any issue on today's version of Windows. The default value of 50 may be lowered in mainline Emacs in future versions, until then please add the following to your irony-mode configuration: (setq w32-pipe-read-delay 0)  Usage On the first run, irony-mode will ask you to build and install irony-server. To do so, type M-x irony-install-server RET. To tune irony-mode, use customize: M-x customize-group RET irony RET  In order to provide context sensitive and accurate information, irony-mode needs to know about the compiler flags used to parse the current buffer. The best way to achieve this is to use a Compilation Database. Compilation Database In order to work correctly, irony-mode needs to know the compile flags. irony-cdb aims to provide as automatic as possible compile flags discovery, with minimal user input. Please refer to irony-cdb-autosetup-compile-options and irony-cdb-compilation-databases. Right now irony-cdb supports the following compilation databases: JSON Compilation Database - A JSON formatted file generated by various build tools. The file is named compile_commands.json, it lists the compile options associated to each file in the project. CMake >= 2.8.5 will generate a compilation database in the build directory when issuing the following command cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON <...>. ninja >= 1.2 will generate a JSON Compilation Database when using the compdb tool. Bear generates a JSON Compilation Database file by ""monitoring"" the build of a project. The typical usage for a make-based project will be bear -- make -B. .clang_complete - A file at the root of your project containing the compilation flags, one per line. This is compatible with the with plugin Rip-Rip/clang_complete. If you want to generate the .clang_complete automatically, take a look at the cc_args.py documentation. FAQ It's slow, why? A bug in old version of Clang (at least '3.1-8') caused the completion to fail on the standard library types. To eliminate this bug an optimisation has been disabled in the parsing of a translation unit. This result in a slower parsing. This only affect old versions of Clang (< 3.2), it is suggested to update your libclang installation if you want to take advantage of the optimizations. libclang.so: cannot open shared object file... Compiling irony-server succeed but you have the following message when you try to run the irony-server executable: 'irony-server: error while loading shared libraries: libclang.so: cannot open shared object file: No such file or directory  When libclang is installed in a non-standard location (one that is missing from the path list of the dynamic loader, see ld.so.conf) you can tell CMake to use the rpath when installing the target irony-server. To enable rpath in CMake use the following command: cmake -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON <args...>  If you're running OS X, you can also use install_name_tool to explicitly tell irony-server where an appropriate version of libclang.dylib lives. For example, Homebrew (with brew install llvm --with-clang) will install a libclang.dylib library at /usr/local/opt/llvm/lib/libclang.dylib; you can instruct irony-server to use this with something like: install_name_tool -change @rpath/libclang.dylib /usr/local/opt/llvm/lib/libclang.dylib irony-server  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Sarcasm/irony-mode"	"A C/C++ minor mode for Emacs powered by libclang."	"true"
"Integrated Development Environment"	"juCi++"	"https://github.com/cppit/jucipp"	"Cross-platform, lightweight C++ IDE with libclang integration. [MIT]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"435"	"60"	"48"	"GitHub - cppit/jucipp: juCi++: a lightweight, cross-platform C++-IDE  supporting C++11, C++14, and experimental C++17 features Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 435 Fork 48 cppit/jucipp Code Issues 12 Pull requests 2 Pulse Graphs juCi++: a lightweight, cross-platform C++-IDE supporting C++11, C++14, and experimental C++17 features 1,680 commits 3 branches 8 releases 14 contributors C++ 97.0% CMake 2.3% Shell 0.7% C++ CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ci- master python-refactor Nothing to show v1.2.1 v1.2.0 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 5adfaae Jul 12, 2016 eidheim Minor cleanup: removed Directories::on_row_activated Permalink Failed to load latest commit information. ci Git integration through libgit2 (#244) Jun 22, 2016 cmake_modules Changed the libclang search order for FreeBSD. Related to #253 Jul 11, 2016 debian Added CPack to CMakeLists.txt, which can be used to build jucipp pack… Jul 8, 2016 docs Added CPack to CMakeLists.txt, which can be used to build jucipp pack… Jul 8, 2016 libclangmm @ ca2021d libclangmm cleanup Jul 6, 2016 share Fixes to the .desktop file. Nov 18, 2015 src Minor cleanup: removed Directories::on_row_activated Jul 12, 2016 tests Minor cleanups: replaced iterating pending events with C++ functions,… Jul 12, 2016 tiny-process-library @ a5ac909 Updated submodules Jun 28, 2016 .gitignore Remove unused files May 5, 2016 .gitmodules Updated tiny-process-library submodule May 24, 2016 .travis.yml Make sure tests displays errors on windows, fix some bad practise in … Jun 1, 2016 CMakeLists.txt Cleanup of the CMakeLists.txt files Jul 11, 2016 LICENSE Update LICENSE Jan 7, 2016 README.md Added CPack to CMakeLists.txt, which can be used to build jucipp pack… Jul 8, 2016 appveyor.yml fix source directory path for appveyor Jun 1, 2016 README.md juCi++ a lightweight, platform independent C++-IDE with support for C++11, C++14, and experimental C++17 features depending on libclang version. About Current IDEs struggle with C++ support due to the complexity of the programming language. juCI++, however, is designed especially towards libclang with speed, stability, and ease of use in mind. Features Platform independent Fast, responsive and stable (written extensively using C++11/14 features) Syntax highlighting for more than 100 different file types C++ warnings and errors on the fly C++ Fix-its Debug integration, both local and remote, through lldb Automated CMake processing, including support for external libraries Git support through libgit2 Fast C++ autocompletion Keyword and buffer autocompletion for other file types Tooltips showing type information and doxygen documentation (C++) Rename refactoring across files (C++) Highlighting of similar types (C++) Automated documentation search (C++) Go to declaration, implementation, methods and usages (C++) Find symbol through Ctags Spell checking depending on file context Run shell commands within JuCi++ Regex search and replace Smart paste, keys and indentation Auto-indentation of C++ file buffers through clang-format Source minimap Split view Full UTF-8 support Wayland supported with GTK+ 3.20 or newer See enhancements for planned features. Screenshots Dependencies boost-filesystem gtkmm-3.0 gtksourceviewmm-3.0 aspell libclang lldb libgit2 libclangmm (downloaded directly with git --recursive, no need to install) tiny-process-library (downloaded directly with git --recursive, no need to install) Installation See installation guide. Documentation See how to build the API doc. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cppit/jucipp"	"Cross-platform, lightweight C++ IDE with libclang integration. [MIT]"	"true"
"Integrated Development Environment"	"KDevelop"	"https://www.kdevelop.org/"	"A free, open source IDE."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome to KDevelop.org | KDevelop Welcome to KDevelop.org   KDevelop is a free, open source IDE (Integrated Development Environment) for Linux, Solaris, FreeBSD, Mac OS X and other Unix flavors. It is a feature-full, plugin extensible IDE for C/C++ and other programming languages. It is based on KDevPlatform, and the KDE and Qt libraries and is under development since 1998. KDevPlatform is a free, open source set of libraries that can be used as a foundation for IDE-like programs. It is programing-language independent, and is planned to be used by programs like: KDevelop, Quanta, Kile, KTechLab ... etc. News KDevelop 4.7.3 Release Hello! I have the pleasure to announce the new stable release of KDevelop 4.7.3. This is a bug fix release increasing the stability of our KDE 4 based branch. Please update to this version if you are currently using 4.7.2 or older. You can download the sources from the KDE mirrors at: http://download.kde.org/stable/kdevelop/4.7.3/src/ Many thanks to everyone involved in this new release! Comments: 9 Add new comment KDevelop 5.0 Beta 2 Release Three months after the first KDevelop 5.0 Beta release, I have the pleasure to announce our second beta release! We have worked hard on improving the stability and performance of our new KDevelop 5.0 based on Qt 5 and KDE Frameworks 5. We also continued to port many features from our old C++ language support to the new Clang-based C/C++ plugin, which is still an ongoing effort. Comments: 28 Add new comment kdev-python 1.7.3-py3 released Due to a regression in kdev-python 1.7.2-py3 related to module search paths, I have prepared a new release which fixes this issue. All users of the 1.7-py3 series, especially the 1.7.2-py3 version are urged to upgrade as soon as possible. The issue only affects the Python 3 series, for Python 2 kdev-python 1.7.2 is still the recommended and up-to-date release. Download You can download the tarball from http://download.kde.org/stable/kdevelop/kdev-python/1.7.3/src/kdev-python-v1.7.3-py3.tar.xz.mirrorlist. Comments: 6 Add new comment First Beta release of KDevelop 5.0.0 available After more than a year of continuous work by our community, I'm very pleased to finally announce the first beta release of KDevelop 5.0.0. This release is made up of hundreds of commits, and marks a huge step forward: We have ported our huge code base to Qt 5 and KDE frameworks 5 (KF5). We replaced our legacy C++ parser and semantic analysis plugin with a much more powerful one that is based on Clang from the LLVM project. We removed the hand-written CMake interpreter and now leverage meta data provided by upstream CMake itself. We finally integrated semantic language support for QML and JavaScript, as well as a project manager for QMake. Finally, we cleaned up many areas of our code base and improved the performance of some work flows significantly. Comments: 20 Add new comment KDevelop 4.7.2 Released Hey all, I'm happy to announce the availability of KDevelop 4.7.2. This is a bug fix release increasing the stability of our KDE 4 based branch. Please update to this version if you are currently using 4.7.1 or older. Download from: http://download.kde.org/stable/kdevelop/4.7.2/src/ SHA sums: SHA256Sum: 5801a38a9abfebead18b74c0a0f5a6d68118b297c96ef1e2f75c8bfae3463b19 kdevelop-4.7.2.tar.xz SHA256Sum: 2dff2f54f631296c87007be84a0dc439d328d473717577c0d1450a9fc7e6e828 kdevelop-php-docs-1.7.2.tar.xz Comments: 6 Add new comment KDevelop 4.7.1 Released Hello all! it's my pleasure to announce the immediate availability of KDevelop 4.7.1. This release contains many improvements and bug fixes - everyone is urged to upgrade. Distributions should already provide updated packages, otherwise you can download via: kdevplatform 1.7.1 kdevelop 4.7.1 kdev-python 1.7.1-py3 kdev-python 1.7.1-py2 kdev-php 1.7.1 kdev-php-docs 1.7.1 Thanks to all contributors, users and bug reporters for making this release possible! Add new comment KDevelop 4.7.0 Released Today, the KDevelop team is proud to announce the final release of KDevelop 4.7.0. It is, again, a huge step forwards compared to the last release in terms of stability, performance and polishedness. This release is special, as it marks the end of the KDE4 era for us. As such, KDevelop 4.7.0 comes with a long-term stability guarantee. We will continue to improve it over the coming years, but will refrain from adding new features. For that, we have the upcoming KDevelop 5, based on KDE frameworks 5 and Qt 5, which our team is currently busy working on. See below for more on that topic. Important KDevelop 4.7.0 Changes This new release of KDevelop comes with many important changes that should ensure it will stay usable for the foreseeable future. The CMake support was improved and extended to ensure that all idioms needed for KF5 development are available. The unit test support UI was polished and several bugs fixed. In the same direction, some noteworthy issues with the QtHelp integration were addressed. KDevelop's PHP language support now handles namespaces better and can understand traits aliases. Furthermore, some first fruits of the Google summer of code projects are included in this release. These changes pave the path toward better support for cross compile toolchains. Feature-wise, KDevelop now officially supports the Bazaar (bzr) version control system. On the performance front, it was possible to greatly reduce the memory footprint when loading large projects with several thousand files in KDevelop. Additionally, the startup should now be much faster. Comments: 14 Add new comment KDevelop master now depends on KDE Frameworks 5! Good news everyone! Our master branches are now officially depending on KDE Frameworks 5 and thus also Qt 5. People who build KDevelop regularly from the git master branches are suggested to switch to the stable 4.7/1.7 branches for the short term. The release of the final KDevelop 4.7.0 will be announced in the next days. This will be the last KDE4 based feature release of KDevelop. All future development will be targeted at the new Qt5 version. Add new comment KDevelop 4.7.0 Beta 1 Released Finally, after months of work, the KDevelop team is happy to release a first beta of the 4.7 version. It comes packed with new features, lots of bug fixes as well as many performance improvements. Comments: 1 Add new comment KDevelop 4.6.0 Final Released We are happy to announce the immediate availability of KDevelop 4.6.0! It adds more than a thousand commits worth of bug fixes, performance improvements and new features. KDevelop aims to create an IDE which doesn't get into your way and nevertheless provides a powerful and versatile set of tools for software development. Support for C++ and CMake are KDevelop's most prominent and widely used features, but the 4.6.0 release -- among other things -- also continues to improve the language support for PHP and Python. Comments: 16 Add new comment Developer Blogs Randa sprint wrap-up and considerations on packaging complex applications with AppImage by Sven Brauch on 06/20/2016 - 23:22 On Sunday, this year’s KDE sprint in Randa, Switzerland came to an end and I am now back home. It was a productive and fun week, as always when meeting the other KDE folks. Navigation widget in KDevelop with proper spacing and margins I spent a lot of time on polishing things and fixing small issues mostly in KDevelop, such as: reduce flickering of the completion widget in kdevelop fix various cases where KDevelop’s navigation widget (see above) would have weirdly large spacing in between or at the end fix kdev-... KDevelop 5.0 standalone executable for Linux by Sven Brauch on 06/16/2016 - 16:58 I am currently at the KDE sprint in Randa, Switzerland. There are about 40 nice people here, working on making KDE software awesome. This year’s focus is on deploying our software more nicely — on Windows and OS X, but on Linux as well. The landscape around our sprint location Especially for user-faced applications like KDevelop, it really makes a big difference whether you use today’s version, or the one from two years ago. Many people run quite old Linux distributions, which do not provide up-to-date packages for KDevelop. Another situation where it can be... Working on KDevelop and KDE on Windows in Randa by Kevin Funk on 06/13/2016 - 19:30 Right now, around 40 developers are working together on bringing KDE to other platforms in Randa (Switzerland) for an entire week. I just arrived Sunday evening, and we immediately started with discussions around KDE on different platforms. Not much coding has happened yesterday evening yet, but I at least managed to work-around a compiler bug of GCC 4.8 showing up in the KDevelop code base. My plans for this week are as follows: Preparing the KDevelop 5.0 release (fixing... Sitemap   If there are any problems with the website, please contact the webmaster. Donate Support us with a donation: € Donate The money is used to fund our annual development sprints and travel costs to conferences. More information and other ways to donate Download Latest release: KDevelop 4.7.3 Jan 31, 2016 (KDE 4.7 or higher) Experimental release: KDevelop 5.0 Beta 2 Jan 31, 2016 (Qt 5.4 and KF 5.3 or higher) Legacy releases: KDevelop 4.4.1 Aug 11, 2012 (KDE 4.5)KDevelop 4.1.2 Jan 14, 2011 (KDE 4.4) More: Latest sources from Git Support Learn to use KDevelop: User Manual F.A.Q., Tips & Tricks Ask Questions: Forum, Mailing Lists Report Bugs: Bugs & Wishes Contribute Programming Join Us! Translating translate KDevelop & plugins Documentation write documentation Recent Commits KDevelop 15 Jul 17:32 - Improve gdb plugin unit tests by 7437103@gmail.com (Peifeng Yu) 14 Jul 22:18 - Cleanup MIDebugger output signals by 7437103@gmail.com (Peifeng Yu) 14 Jul 20:16 - Make compile by kfunk@kde.org (Kevin Funk) 14 Jul 18:34 - support -iframework and -F header search path options by rjvbertin@gmail.com (René J.V. Bertin) 13 Jul 19:06 - Merge remote-tracking branch 'origin/5.0' by kfunk@kde.org (Kevin Funk) 13 Jul 18:49 - test_files: Fix dynamicObjectProperties.2.qml test by kfunk@kde.org (Kevin Funk) KDevPlatform 14 Jul 17:50 - KDevPlatform changes for supporting the -iframework and -F header search path by rjvbertin@gmail.com (René J.V. Bertin) 14 Jul 11:22 - removes a link command from the toplevel CMakeLists.txt that was by rjvbertin@gmail.com (René J.V. Bertin) 14 Jul 11:07 - [OS X] Show job progress in the Dock tile. by rjvbertin@gmail.com (René J.V. Bertin) 13 Jul 19:06 - Merge remote-tracking branch 'origin/5.0' by kfunk@kde.org (Kevin Funk) Documentation User Manual FAQ Tips and Tricks Wiki Development Development Portal KDevelop Source Code How to Compile Contribute Community Credits Mailing Lists KDevelop KDE Development Environment Search this site: News Screenshots"	"null"	"null"	"A free, open source IDE."	"true"
"Integrated Development Environment"	"Microsoft Visual Studio"	"https://www.visualstudio.com/"	"An IDE from Microsoft."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Visual Studio - Microsoft Developer Tools https://www.visualstudio.com MSDN Subscriptions Sign in Products Top Products Visual Studio 2015 Products Visual Studio Enterprise Visual Studio Professional Visual Studio Community Visual Studio Code Visual Studio Team Services Team Foundation Server Other Products Visual Studio Test Professional Team Explorer Everywhere Application Insights MSDN Platforms HockeyApp Visual Studio Express How to Buy Visual Studio Visual Studio Team Services Compare Compare Visual Studio 2015 Offerings Visual Studio Team Services Feature Matrix Features Application Development Mobile Web Cloud Windows Office Tools Games Node.js Visual C++ Python .NET Lifecycle Management DevOps and ALM Agile Software Development Version Control Tools for Java teams Release Management Reporting Cloud-Based Load Testing Continuous Integration Testing Tools Extend and Integrate Visual Studio Visual Studio Team Services Visual Studio Code Downloads Top Downloads Visual Studio Enterprise Visual Studio Community Visual Studio Code Team Foundation Server Extensions and Integrations Visual Studio Tools for Apache Cordova Visual Studio Tools for Unity Node.js Tools for Visual Studio Python Tools for Visual Studio .NET Nuget Packages Visual Studio Gallery Visual Studio Team Services Integrations All Downloads News Support Marketplace Documentation Visual Studio on MSDN Visual Studio Team Services Visual Studio Code Free Visual Studio Tools for every developer and every app Visual Studio A rich, integrated development environment for creating stunning applications for Windows, Android, and iOS, as well as modern web applications and cloud services. Learn about Visual Studio Download Community 2015 Compare 2015 product editions Visual Studio Team Services Cloud-based collaboration services for version control, agile planning, continuous delivery, and application analytics — for Visual Studio, Eclipse, Xcode or any other IDE or code editor. Learn about Team Services Get started for free Host it yourself with Team Foundation Server Visual Studio Code Code editing redefined. Build and debug modern web and cloud applications. Code is free and available on your favorite platform — Windows, Mac OS X, or Linux. Learn about Visual Studio Code Download Code for Windows Download for Mac OS X   Linux By using VS Code, you agree to its license and privacy statement.   Now with Xamarin Deliver native Android, iOS, and Windows apps, using existing skills, teams, and code. Learn more   Visual Studio Dev Essentials Everything you need to build and deploy your app on any platform – for FREE. Learn more about the program  Join now Sign in to access your benefits >   Visual Studio Enterprise 2015 Enterprise-grade solutions with advanced capabilities for teams working on projects of any size and complexity. Learn about Enterprise Compare Visual Studio 2015 product editions Download Enterprise 2015 Visual Studio Team Services Share code, track work, and ship software. Learn about Team Services Host it yourself with Team Foundation Server Get started for free   Visual Studio Code Code editing redefined. Learn about Code Download Code for Windows Visual Studio Code is available on Mac OS X, Linux, and Windows. By using VS Code, you agree to its license and privacy statement. Visual Studio Community 2015 Free full-featured IDE to build rich apps for Android, iOS, Windows, the web, and cloud services. Learn about Community Download Community 2015 Free for students, open-source contributors, and small teams Customer stories Jet E-commerce challenger eyes the top spot, runs on the Microsoft cloud. Read the story > Shell Shell migrates to Visual Studio Team Services to reduce costs while at the same time improving their development team's productivity. Watch the video > Read the story > Gojo The GOJO SMARTLINK engineering team built their patient saving IoT system faster with Team Services as the core of their Agile process. Watch the video >                                     Is this page helpful? Your feedback about this content is important. Let us know what you think. Yes No Additional feedback? 1500 characters remaining Submit Skip this Thank you! We appreciate your feedback. Visual Studio My Visual Studio Manage Visual Studio Marketplace Integrate Related Sites Visual Studio documentation MSDN Home Channel 9 Azure Visual Studio Blog Products Visual Studio Visual Studio Team Services Visual Studio Code Download Compare How to Buy Support Get Support Submit a Bug Submit an Idea Forums United States (English) Contact us Jobs Privacy Terms of use Trademarks © 2016 Microsoft Third party scripts and code linked to or referenced from this website are licensed to you by the parties that own such code, not by Microsoft. See ASP.NET Ajax CDN Terms of Use – http://www.asp.net/ajaxlibrary/CDN.ashx."	"null"	"null"	"An IDE from Microsoft."	"true"
"Integrated Development Environment"	"NetBeans"	"https://netbeans.org/"	"An IDE for developing primarily with Java, but also with other languages, in particular PHP, C/C++, and HTML5."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome to NetBeans Choose page language Albanian Arabic Brazilian Portuguese Czech Dutch Finnish French Georgian German Greek Hebrew Hungarian Indonesian Italian Japanese Korean Persian Polish Portuguese Romanian Russian Simplified Chinese Slovak Spanish Swedish Traditional Chinese Turkish Vietnamese NetBeans IDE NetBeans Platform Enterprise Plugins Docs & Support Community NetBeans IDE Fits the Pieces Together Quickly and easily develop desktop, mobile and web applications with Java, JavaScript, HTML5, PHP, C/C++ and more. NetBeans IDE is FREE, open source, and has a worldwide community of users and developers. See All News Featured News: Help Us Stabilize NetBeans IDE 8.2 - Join NetCAT 8.2! Join the Free OTN Summit on July 12, 2016! Hybrid Mobile Development with Cordova and Oracle JET Trip Report: NetBeans Day India 31 May 2016: NetBeans Day in London Build with NetBeans IDE, Deploy to Oracle Java Cloud Service Best Support for Latest Java Technologies More Fast & Smart Code Editing More New: Darcula Look & Feel Theme More Easy & Efficient Project Management More Rapid User Interface Development More Write Bug Free Code More Powerful Tools for JavaScript, HTML5, and CSS3 More Cross Platform Support More Support for Multiple Languages More Rich Set of Community Provided Plugins More SiteMap About Us Contact Legal & Licences By use of this website, you agree to the NetBeans Policies and Terms of Use. © 2016, Oracle Corporation and/or its affiliates. Sponsored by"	"null"	"null"	"An IDE for developing primarily with Java, but also with other languages, in particular PHP, C/C++, and HTML5."	"true"
"Integrated Development Environment"	"Qt Creator"	"http://www.qt.io/developers/"	"A cross-platform C++, JavaScript and QML IDE which is part of the SDK for Qt."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Qt - Developers We bake cookies in your browser for a better experience. Using this site means that you consent. Read More Menu Blog Partners Company Investors Sign in Search Download Create Applications Build Devices Developers EN CN RU Sign in Build Your World Discover how Qt helps you create connected devices, UIs & applications that run anywhere on any device, on any operating system at any time.Download Qt 5.7 Documentation ›Training ›Blog ›Wiki ›Forum › QtCon 2016 › QtCon Call for Papers Join us at QtCon and present your idea to the Qt developers. Submit idea Application Development Build powerful cross-platform applications with a modular C++ class library & professional IDE. Design UIs with C++ Qt Widgets or our declarative CSS & JavaScript-like UI language. Device Creation Create embedded devices with stunning UIs & native performance that run on all major embedded operating systems and configurable for a variety of HW architectures. Developer Story Panasonic Avionics: Inflight Entertainment Systems Gary Towsend, Software Manager at Panasonic Avionics, describes how the company uses Qt to develop Inflight Entertainment systems that are experienced by over 5 million passengers every day. By using Qt (with C++ and QML), the developers at Panasonic Avionics are able to focus on the design and the usability of the interactive. View Qt in use 578955c766d8e"" frameborder=""0""> Getting Started Tools Videos Professional support Services & consultancy Partner network Qt World Summit 2016 Contribute to Qt Qt is developed as open source software, and you can help by contributing to Qt. The Qt project welcomes your contributions. Contribution guidelines Bug reporting Code review Have an app you want to showcase? Visit the Qt Showroom. Newsletter Sign up for Qt news and keep yourself updated with the latest release information, events, resources and the like. Sign up Download Qt for Device Creation Qt for Application Development Buy Qt Terms & Conditions Licensing Build with Qt Device Creation Application Development Automotive UIs Resource Center Built with Qt Services Qt Training Partner Directory Consultancy Services Qt for Educational Use Developers Documentation Development Tools Wiki Forums Contribute to Qt Company About Us Events News Careers Contact Us Qt Merchandise Sign In Feedback © 2016 The Qt Company Follow @qtproject"	"null"	"null"	"A cross-platform C++, JavaScript and QML IDE which is part of the SDK for Qt."	"true"
"Integrated Development Environment"	"rtags"	"https://github.com/Andersbakken/rtags"	"A c/c++ client/server indexer with for integration with emacs based on clang."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"636"	"72"	"123"	"GitHub - Andersbakken/rtags: A c/c++ client/server indexer for c/c++/objc[++] with integration for Emacs based on clang. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 636 Fork 123 Andersbakken/rtags Code Issues 79 Pull requests 0 Pulse Graphs A c/c++ client/server indexer for c/c++/objc[++] with integration for Emacs based on clang. http://www.rtags.net 6,377 commits 26 branches 8 releases 58 contributors C++ 66.3% Emacs Lisp 17.0% CMake 14.1% Shell 1.7% C 0.3% Python 0.3% Other 0.3% C++ Emacs Lisp CMake Shell C Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags argumentwip child-diagnostics clangthread completionflags debugging_403 debuggingdelay develop doc expanded-symbols instancelocation issue445 jsoncompletions jsondump luabindings master modified_642 mutexstack pch sandbox-root-2 sandbox-root symboltovaluewip templatework valuewip wip wip423 wipelisp Nothing to show v2.3 v2.2 v2.1 v2.0 v1.2 v1.1 v1.0 1.0rc Nothing to show New pull request Latest commit 2e676e1 Jul 15, 2016 Andersbakken Use current location. Permalink Failed to load latest commit information. automated_tests Partly fix travis Mar 23, 2016 bin REWORK: Fix shell-check warnings. Nov 18, 2015 cmake Add support for cpack packaging and git-dervied version stamps. May 16, 2016 man/man7 Update man-pages using help2man. Mar 25, 2015 scripts Fix the brew argument. It seems that it should be --without-assertions Jul 8, 2016 src Use current location. Jul 15, 2016 tests heh Feb 5, 2015 web/youtube youtube screenshots Mar 24, 2013 .dir-locals.el Oops. 4 indent. Nov 14, 2015 .gitignore Add rlex. A toy for parsing c++. Jun 12, 2016 .gitmodules Start work on lua bindings. Apr 22, 2016 .travis.yml Travis clean-up; Add lua support to travis May 11, 2016 CMakeLists.txt Bump database version because of last fix. Bump minor version since it's Jul 12, 2016 LICENSE.txt Fix some bugs May 20, 2016 README.org Fixed load ""rtags.el"" command Jun 17, 2016 clang.sup Fix pch Mar 22, 2012 README.org Introduction RTags is a client/server application that indexes C/C++ code and keeps a persistent file-based database of references, declarations, definitions, symbolnames etc. There’s also limited support for ObjC/ObjC++. It allows you to find symbols by name (including nested class and namespace scope). Most importantly we give you proper follow-symbol and find-references support. We also have neat little things like rename-symbol, integration with clang’s “fixits” (http://clang.llvm.org/diagnostics.html). We also integrate with flymake using clang’s vastly superior errors and warnings. Since RTags constantly will reindex “dirty” files you get live updates of compiler errors and warnings. Since we already know how to compile your sources we have a way to quickly bring up the preprocessed output of the current source file in a buffer. While existing taggers like gnu global, cscope, etags, ctags etc do a decent job for C they often fall a little bit short for C++. With its incredible lexical complexity, parsing C++ is an incredibly hard task and we make no bones about the fact that the only reason we are able to improve on the current tools is because of clang (http://clang.llvm.org/). RTags is named RTags in recognition of Roberto Raggi on whose C++ parser we intended to base this project but he assured us clang was the way to go. The name stuck though. TLDR Quickstart Build RTags git clone --recursive https://github.com/Andersbakken/rtags.git cd rtags cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 . make Start the RTags daemon (rdm) ./bin/rdm & Index the RTags project, and wait until rdm is silent ./bin/rc -J . Open source file in emacs emacs +41:34 src/rdm.cpp Load rtags.el M-: (load-file ""rtags.el"") RET  Call rtags-find-symbol-at-point M-x rtags-find-symbol-at-point RET  Your location is now on the definition of Server::instance() Installing RTags Prerequisites There are a few prerequisites you need to have in order to build RTags LLVM/Clang >= 3.3 On Linux you may be able to use your distribution package manager to install this. On OS X you can use homebrew or possibly other package managers, though see below for details if you plan to tag projects that use C++11 features (such as RTags itself). Alternatively you can grab the sources from llvm.org and build it yourself. GCC/Clang >= 4.7/3.2 A modern compiler to build RTags. RTags makes extensive use of C++11 features such as variadic templates and threading utility classes from the C++ standard library. cmake >= 2.8 The meta-built system used by RTags. emacs >= 24.3 is recommended RTags might very well work with much older emacs versions but the oldest version we have tested with is 23.4.1. There’s no particular effort made to support older versions, but patches that make it work are welcome. Having said that, completion (ac, company) as well as Flycheck integration only works, and has been tested with emacs >= 24.3. NOTE: Emacs is no real prerequisite. That implies you can compile RTags without emacs installed. This may be of interest to you, if you want use RTags as back-end for a different editor like vim, see section Support for other editors. You explicitly can tell cmake to ignore the elisp files by passing -DRTAGS_NO_ELISP_FILES=1 to cmake. Optional pkg-config and bash-completion RTags comes with bash completion support. If you want the bash completion files to be installed, you either have to make sure that pkg-config and bash-completion package is installed or you can manually force the installation by setting the variable FORCE_BASH_COMPLETION_INSTALLATION to TRUE or ON. The default installation path is CMAKE_INSTALL_PREFIX/share/bash-completion/completions. You can adjust the path with the cmake variable BASH_COMPLETION_COMPLATIONSDIR variable. However, if the bash completions files are not installed in the default completion path, i.e. /usr/share/bash-completion/completions on GNU/Linux, you have to make sure the RTags bash completion file gets sourced to get completion support. lua version >= 5.3 TODO(Andersbakken): Add some notes why we optionally require Lua, whats the purpose of it. If your system does not provide a suitable version you can download Lua from here. We recommend downloading the pre-built binaries. If you have compiled Lua from scratch (the build will only create an archive liblua.a and no shared library) or you have installed the headers/library to a non standard place you need to tell cmake where the headers/library is located. E.g. cmake -DLUA_INCLUDE_DIR=/opt/lua/include -DLUA_LIBRARY=/opt/lua/lib/liblua.a # or liblua53.so or liblua53.a if you have downloaded, e.g. lua-5.3.2 binaries cmake -DLUA_INCLUDE_DIR=/opt/lua/include -DLUA_LIBRARY=/opt/lua/lib/liblua53.so     ZLIB OpenSSL C++11 on OS X If you plan to tag projects using C++11 features on OS X then you’ll need a libclang linked with LLVM’s libc++. For LLVM 3.6 the following works: brew install llvm --with-libcxx --with-clang --without-assertions --with-rtti or you can install clang and llvm from mac ports sudo port install clang-3.5 Building RTags Get the code To build RTags, you need to checkout RTags and the repository’s sub-modules, this can be done in one step. After that, you need to run cmake, make and make install, in that order. git clone --recursive https://github.com/Andersbakken/rtags.git     You can also download the sources from here: http://andersbakken.github.io/rtags-releases/rtags.tar.bz2 or http://andersbakken.github.io/rtags-releases/rtags.tar.gz Building RTags We recommend building in a separate directory to keep the build files separate from the source, but you can run cmake in the source tree if you prefer. cd rtags mkdir build cd build cmake .. make make install     TIP: You can run ccmake (CMake with an ncurses UI) instead of cmake to interactively configure the RTags build. Finding clang RTags needs three pieces of information about libclang. All of these can be provided to cmake by way of an environment variable or a cmake variable. If not provided we will try to find llvm-config and interrogate it for the information. You can tell RTags which llvm-config to use like this: LIBCLANG_LLVM_CONFIG_EXECUTABLE=/path/to/llvm-config cmake . or cmake -DLIBCLANG_LLVM_CONFIG_EXECUTABLE=/path/to/llvm-config . If you don’t, we will look for variations of the llvm-config executable name in your $PATH. If llvm is installed at a different place, you could set the cmake variable CMAKE_PREFIX_PATH to the install prefix path of llvm. The three things we need are: LIBCLANG_CXXFLAGS Usually something like this: $ llvm-config --cxxflags # Max OS X -I/usr/local/Cellar/llvm36/3.6.0/lib/llvm-3.6/include  -DNDEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -O3  -std=c++11 -fvisibility-inlines-hidden -fno-exceptions -fno-common -Woverloaded-virtual -Wcast-qual # Fedora 23 64 bit -I/usr/include -DNDEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -O3  -std=c++11 -fvisibility-inlines-hidden -fno-exceptions -fno-common -Woverloaded-virtual -Wcast-qual     LIBCLANG_LIBDIR Usually something like this: $ llvm-config --libdir # Mac OS X /usr/local/Cellar/llvm36/3.6.0/lib/llvm-3.6/lib # Fedora 23 64 bit /usr/lib64/llvm     We need this to locate clang’s system headers, and we will assume that they are located in: ${LIBCLANG_LIBDIR}/clang/CLANG_VERSION_STRING/include (/usr/local/Cellar/llvm36/3.6.0/lib/llvm-3.6/lib/clang/3.6.0/include). There should be headers like stdarg.h and limits.h in this directory. LIBCLANG_LIBRARIES Usually something like this: # Mac OS X /usr/local/Cellar/llvm36/3.6.0/lib/llvm-3.6/lib/libclang.so # Fedora 23 64 bit /usr/lib64/llvm/libclang.so     Unless otherwise specified, we will try to find the clang library using cmake’s find_library feature and/or assuming that they there will be a libclang.(so|dylib) in ${LIBCLANG_LIBDIR} Like with LIBCLANG_LLVM_CONFIG_EXECUTABLE these variables can be overwritten as a cmake variable (cmake -DLIBCLANG_LIBDIR =...) or an environment variable (LIBCLANG_LIBDIR =... cmake) RTags uses C++11 features, and requires a relatively new compiler. GCC version >= 4.8 or clang >= 3.2 should work. Setup rdm runs in the background and monitors all your indexed files for changes, and reindexes when a source file or one of its dependencies is modified. Since clang is a fully compliant compiler it needs specific information about how your sources are compiled to be able to properly index them. This is done through telling rdm about the compile line like this: rc -c gcc -I... -fsomeflag -c foobar.c rc -J /path/to/a/directory/containing/compile_commands.json You can generate a compile_commands.json with various different tools, one might fit better than the other, depending on your project build system. ninja ninja -t compdb cxx cc > compile_commands.json rc -J     With ninja it’s also possible to pipe the commands directly to rc. ninja -t commands | rc -c - # Parse commands for a specific target only ninja -t commands rdm | rc -c -     cmake cmake can generate a compile_commands.json file as well. cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 . rc -J     Bear For other projects you can use bear to generate a compile_commands.json file. However, if you are cross-compiling you probably need to adjust the command entries in the compile_commands.json file to match the correct compiler. Furthermore, make sure you clean your project before invoking bear. make clean bear make rc -J # Parse commands for a specific target only make clean bear make rdm rc -J     make You can ask make to only print the recipes without actually doing something. This way may be perfectly fine for not too complex Makefiles. make clean make -nk | rc -c -     There are very likely similar things you can do with other build systems that we’re unfamiliar with, please let us know if you do. A different approach to get your files indexed is the man-in-the-middle This can be done like this: ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/gcc ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/c++ ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/cc ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/g++     E.g. $ which -a gcc | xargs file /home/abakken/bin/gcc: symbolic link to `/home/abakken/dev/rtags/bin/gcc-rtags-wrapper.sh' /usr/bin/gcc:         symbolic link to `gcc-4.7'     Now every time you compile a file with which gcc rc will get its grubby hands all over your command line and make sure RTags knows about it. RTags will group source files into projects based on some heuristics. Essentially it will look for certain files/dirs (like configure/CMakeLists.txt/scons.1/.git) etc to try to determine the likely project root for each source file. For generated source files that end up in the build directory we try to find the source root based on similar heuristics around config.status/CMakeCache.txt etc. Usually this works out reasonably well. If it doesn’t for you, you can pass --project-root /path/to/the/project/root to rc. RTags only gives you information about current project when you ask for things by name. You can explicitly change the current project using: rc -w foobar We try to do it automatically for you by passing along information about the current buffer when we call rc from elisp so that rdm can update its current project on demand. RTags keeps a cache of indexed data so you don’t have to reindex everything if you restart it. The location of this data is by default ~/.rtags but can be overridden by passing --data-dir /other/dir to rdm or putting something like this in your ~/.rdmrc: $ cat ~/.rdmrc --data-dir=/other/dir  Integration with launchd (Mac OS X) On Mac OS X, you can set rdm can be run on demand, on your behalf, by launchd, and have it exit cleanly after a period of inactivity. This isn’t quite plug-and-play, but should be worth the small amount of effort. Create a file, e.g., in emacs, with the following contents: <?xml version=""1.0"" encoding=""UTF-8""?> <!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd""> <plist version=""1.0"">   <dict>     <key>Label</key>     <string>com.andersbakken.rtags.agent</string>     <key>ProgramArguments</key>     <array>       <string>sh</string>       <string>-c</string>       <string>$RDM -v --launchd --inactivity-timeout 300 --log-file ~/Library/Logs/rtags.launchd.log</string>     </array>     <key>Sockets</key>     <dict>       <key>Listener</key>       <dict>     <key>SockPathName</key>     <string>$HOME/.rdm</string>       </dict>     </dict>   </dict> </plist>     Replace $HOME with the absolute path to your home folder. Replace $RDM with the path to your copy of rdm, and add any command line parameters you might usually use. (The SockPathName entry relates to the name of the domain socket that rdm uses. The settings above are for the default value; if your command line options direct it to use some other name, please modify it to suit. Unfortunately launchd’s configuration files are a bit naff, so you’ll have to repeat yourself.) Save the result as ~/Library/LaunchAgents/com.andersbakken.rtags.agent.plist. Run the following command from the terminal: launchctl load ~/Library/LaunchAgents/com.andersbakken.rtags.agent.plist     (This will happen automatically next time you log back in.) Try using RTags, and you should find rdm will spring into life! Notes rdm will automatically quit after 5 minutes of inactivity (this is what the --inactivity-timeout 300 command line option is for), so it won’t stick around hogging memory. But launchd will still be watching its socket for activity, and will relaunch it if necessary. You can watch launchd’s logging by tailing ~/Library/Logs/rtags.launchd.log. Integration with systemd (GNU Linux) On GNU/Linux distributions based on the systemd service manager, rdm can also be socket acivated. Add the following to ~/.config/systemd/user/rdm.socket [Unit] Description=RTags daemon socket  [Socket] ListenStream=%h/.rdm  [Install] WantedBy=multi-user.target     Add the following to ~/.config/systemd/user/rdm.service [Unit] Description=RTags daemon  Requires=rdm.socketp  [Service] Type=simple ExecStart=$RDM -v --inactivity-timeout 300     Replace $RDM with the path to your copy of rdm, and add any command line parameters you might usually use. You have to use absolute paths here. %h is expanded to your home directory. Environment variables are not expanded inside strings. Run the following command from the terminal: systemctl --user enable rdm.socket systemctl --user start rdm.socket     Systemd will create the rdm socket automatically. Usage Now that your files are indexed you can start using RTags. Normally you would do this from your editor but the way to extract this information from rdm is to use the command line tool rc. E.g. $ rdm & $ ninja -t commands | rc -c $ rc --follow-location Job.cpp:20:10 /home/abakken/dev/rtags/src/Job.h:10:18      List<RegExp> *mPathFiltersRegExp;  A location has the format of file:line:column. For Emacs we maintain a set of elisp bindings that allows you to control RTags from your editor. There are projects that provide integration for other editors out there. Vim: https://github.com/lyuts/vim-rtags and https://github.com/shaneharper/vim-rtags Sublime Text: https://github.com/rampage644/sublime-rtags Atom: https://github.com/artagnon/atomic-rtags and https://github.com/rajendrant/atom-rtags rc has a vast number of commands and options and we intend to write a man page at some point. Most users will have limited interest in ever calling them manually and would rather just use the interactive elisp functions. Elisp Functions (rtags-start-process-unless-running) Start the rdm process unless the process is already running. You may create hook to automatically call this function upon entering, e.g. c-mode or c++mode. E.g. (add-hook 'c-mode-common-hook 'rtags-start-process-unless-running) (add-hook 'c++-mode-common-hook 'rtags-start-process-unless-running) (rtags-restart-process) Restart the rdm process. (rtags-find-symbol-at-point) Follow symbol under cursor. For references this goes to the definition (or declaration if no definition is known of the symbol. For declarations it goes to the definition and vice versa. For definitions of variables/parameters with constructors it goes to the constructor in question. If you pass a prefix argument, limit to current source file, if you pass a prefix argument and have narrowed the current file, limit to the narrowed region. This prefix argument is the same for: rtags-find-references-at-point, rtags-find-symbol, rtags-find-references (rtags-find-references-at-point) Find all references to symbol under cursor. If symbol is itself a reference it will find all references to the referenced symbol (rtags-find-symbol) Prompt for name of symbol to go to. Imagine the following code: namespace N { class C { public:     int func(int); }; };  using namespace N; int C::func(int val) {     return val * 2; } int N::C::func(int) will now be accessible by the following names: func func(int) C::func(int) C::func N::C::func(int) N::C::func (rtags-find-references) Prompt for name of symbol to find references to. Same as above but find references to symbol rather than declarations and definitions. (rtags-diagnostics) Start an async process in a buffer to receive warnings/errors from clang whenever a file gets reindexed. It integrates with flymake to put highlighting on code with warnings and errors (rtags-enable-standard-keybindings) Sets up a ton of standard keybindings under C-c r. If you pass a mode to the function it will set it up on that mode, otherwise it will use c-mode-base-map). You can choose a different prefix than C-c r like this: (rtags-enable-standard-keybindings c-mode-base-map ""\C-xr"") (rtags-find-file) Lets you jump to file by name (partial or full, concept kinda stolen from gtags.el) with completion in the project. This includes all files under what we determine to be the root of the project, not just source files. (rtags-find-virtuals-at-point) For virtual functions, show the various reimplementations of the function at point (rtags-fixit) Apply clang’s automatic fixits in current file. If you pass a prefix arg use ediff to apply it. See (http://clang.llvm.org/diagnostics.html) for more info. (rtags-imenu) Provides an ido-based imenu like interface to a subset of the symbols in the current file. Note that it does not actually use imenu infrastructure. (rtags-location-stack-back) (rtags-location-stack-forward) Whenever RTags jumps somewhere it pushes a location onto its stack. Jump back and forward in this stack (rtags-next-match) (rtags-previous-match) For functions that return more than one match, jump to the next/previous one. (rtags-preprocess-file) Preprocess current file according to known C(XX)Flags and show the result in a buffer. If region is active only display the preprocessed output for that region. (rtags-print-symbol-info) Print some info about symbol under cursor (rtags-symbol-type) Print the type of the symbol under cursor. (rtags-print-dependencies) Open a buffer showing files that depend on current file/files that current file depends on. (rtags-print-enum-value-at-point) Print integral value of enum value at point (rtags-quit-rdm) Shut down rdm (rtags-rename-symbol) Rename symbol under cursor. Make sure all files are saved and fully indexed before using. (rtags-reparse-file) Explicitly trigger a reparse of current file. Mostly for debugging. Unless we have bugs it should not be necessary. (rtags-show-rtags-buffer) Switch to *RTags* buffer. This is the buffer where a number of functions display their alternatives when they have more than one match. (rtags-include-file) Insert selected or entered include, e.g. “string.h”/<string.h> in current buffer, either at the top, after the first include statement or with prefix argument (C-u) at current point. (rtags-get-include-file-for-symbol) Insert include for entered symbol or symbol under courser in current buffer, either at the top, after the first include statement or with prefix argument (C-u) at current point. Variables rtags-path Path to rc/rdm if they’re not in $PATH. rtags-jump-to-first-match Similar to compilation-auto-jump-to-first-error. Whether to jump to the first match automatically when there’s more than one. rtags-find-file-case-insensitive Whether to match files case-insensitively rtags-find-file-prefer-exact-match Whether to exclude partial matches for file names when an exact match is found. E.g. /foobar.cpp /bar.cpp If rtags-find-file-prefer-exact-match is t a query for bar.cpp would only return /bar.cpp, otherwise both foobar.cpp and bar.cpp would be returned. Fall back to other taggers You can do something like the following to fall back to e.g. gtags if RTags doesn’t have a certain project indexed: (defun use-rtags (&optional useFileManager)   (and (rtags-executable-find ""rc"")        (cond ((not (gtags-get-rootpath)) t)              ((and (not (eq major-mode 'c++-mode))                    (not (eq major-mode 'c-mode))) (rtags-has-filemanager))              (useFileManager (rtags-has-filemanager))              (t (rtags-is-indexed)))))  (defun tags-find-symbol-at-point (&optional prefix)   (interactive ""P"")   (if (and (not (rtags-find-symbol-at-point prefix)) rtags-last-request-not-indexed)       (gtags-find-tag))) (defun tags-find-references-at-point (&optional prefix)   (interactive ""P"")   (if (and (not (rtags-find-references-at-point prefix)) rtags-last-request-not-indexed)       (gtags-find-rtag))) (defun tags-find-symbol ()   (interactive)   (call-interactively (if (use-rtags) 'rtags-find-symbol 'gtags-find-symbol))) (defun tags-find-references ()   (interactive)   (call-interactively (if (use-rtags) 'rtags-find-references 'gtags-find-rtag))) (defun tags-find-file ()   (interactive)   (call-interactively (if (use-rtags t) 'rtags-find-file 'gtags-find-file))) (defun tags-imenu ()   (interactive)   (call-interactively (if (use-rtags t) 'rtags-imenu 'idomenu)))  (define-key c-mode-base-map (kbd ""M-."") (function tags-find-symbol-at-point)) (define-key c-mode-base-map (kbd ""M-,"") (function tags-find-references-at-point)) (define-key c-mode-base-map (kbd ""M-;"") (function tags-find-file)) (define-key c-mode-base-map (kbd ""C-."") (function tags-find-symbol)) (define-key c-mode-base-map (kbd ""C-,"") (function tags-find-references)) (define-key c-mode-base-map (kbd ""C-<"") (function rtags-find-virtuals-at-point)) (define-key c-mode-base-map (kbd ""M-i"") (function tags-imenu))  (define-key global-map (kbd ""M-."") (function tags-find-symbol-at-point)) (define-key global-map (kbd ""M-,"") (function tags-find-references-at-point)) (define-key global-map (kbd ""M-;"") (function tags-find-file)) (define-key global-map (kbd ""C-."") (function tags-find-symbol)) (define-key global-map (kbd ""C-,"") (function tags-find-references)) (define-key global-map (kbd ""C-<"") (function rtags-find-virtuals-at-point)) (define-key global-map (kbd ""M-i"") (function tags-imenu))  Code Completion in Emacs: To enable code completion in Emacs with company mode do the following: Enable rtags-diagnostics. The easiest way is to: (setq rtags-autostart-diagnostics t) but you can also explicitly start it with M-x rtags-diagnostics <RET>  Enable completions in RTags: (setq rtags-completions-enabled t) Enable company-mode (require 'company) (global-company-mode) Add company-rtags to company-backends: (push 'company-rtags company-backends) This minimal init.el configuration should be enough to get completion to work. (require 'package) (package-initialize) (require 'rtags) (require 'company)  (setq rtags-autostart-diagnostics t) (rtags-diagnostics) (setq rtags-completions-enabled t) (push 'company-rtags company-backends) (global-company-mode) (define-key c-mode-base-map (kbd ""<C-tab>"") (function company-complete)) To enable completion in Emacs with auto-complete-mode do the following: …TODO… RTags Flycheck integration To turn on RTags Flycheck support you need to load the flycheck-rtags package. (require 'flycheck-rtags) Optional You may explicitly select the RTags Flycheck checker for some major modes for better experience. At the moment there is no customize option available to choose between rtags-diagnostics overlays or Flycheck overlays, nor is it planned right now. We recommend setting flycheck-highlighting-mode locally to nil as the RTags overlays are more accurate. Further, Flycheck will trigger automatically, based on events, the syntax checker for the current buffer, this is however, pretty useless in conjunction with RTags. We trigger it manually because we find it gives you a better experience. To turn off the automatic Flycheck syntax checking, set the variable flycheck-check-syntax-automatically locally to nil. (defun my-flycheck-rtags-setup ()   (flycheck-select-checker 'rtags)   (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.   (setq-local flycheck-check-syntax-automatically nil)) ;; c-mode-common-hook is also called by c++-mode (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup) Videos Here are some videos demonstrating how to use RTags with Emacs though some of these may be outdated: Set up RTags Set up symlinks and run the daemon Project setup using make Project setup using ninja Navigation/references Fixits “IMenu” / virtuals / filenames Rename symbol Enums and cursor info Debugging RTags If you find that rp is crashing (leading to output like this: “job crashed 191 9698036154370 0x331e7e30”). You should be able to do the following: rdm --suspend-rp-on-crash When rp crashes the rp process will stay alive, enabling you to debug it with something like this: gdb -p `pidof rp` Support for other editors There are several other projects integrating RTags with other editors. Sublime Text: https://github.com/rampage644/sublime-rtags Vim: https://github.com/lyuts/vim-rtags https://github.com/shaneharper/vim-rtags https://github.com/mattn/vim-rtags Note to those maintainers. If you need RTags to behave differently or add features to make these other integration’s easier (like produce output in other formats etc), just drop us a note. Disclaimer RTags is still under development and is not the most stable piece of software you’ll ever find. We’re constantly working to improve on it. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Andersbakken/rtags"	"A c/c++ client/server indexer with for integration with emacs based on clang."	"true"
"Integrated Development Environment"	"Xcode"	"https://developer.apple.com/xcode/"	"Developed by Apple."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Xcode 8 - What's New - Apple Developer Open Menu Close Menu Apple Developer Account Apple Developer Discover Design Develop Distribute Support Account Search Xcode Open Menu Close Menu Xcode IDE Interface Builder Features Download Beta Now Available Xcode 8 Xcode 8 includes everything you need to create amazing apps for iPhone, iPad, Mac, Apple Watch, and Apple TV. This radically faster version of the IDE features new editor extensions that you can use to completely customize your coding experience. New runtime issues alert you to hidden bugs by pointing out memory leaks, and a new Memory Debugger dives deep into your object graph. Swift 3 includes more natural and consistent API naming, which you can experiment with in the new Swift Playgrounds app for iPad. Interface Builder — Accelerated The Interface Builder design canvas has been thoroughly reengineered to make your work faster and provide greater control. See a live preview of exactly how your app will appear on any Apple device with full vibrancy. As you quickly switch between different devices to customize your UI for size classes, you will always see the same interface as your customers. Pan and zoom are incredibly fast, and you can even edit your interfaces when fully zoomed out for a bird's eye view of your storyboard. Editor Extensions New Xcode extensions for the source editor let you customize your coding experience. Use extensions to navigate within your editor’s text, and select, modify, and transform your code. Bind your favorite extensions to a keyboard shortcut to make common reformatting tasks a snap. Xcode includes a new template so you can easily create editor extensions and distribute them on the Mac App Store, or sign your extensions with your Developer ID to share them online. And because extensions run in a separate process, Xcode stays safe and stable. The new Xcode 8 editor also includes great new features built right in: San Francisco Mono font with new themes Auto-generate Quick Help documentation Highlight the current line Image and color literals in Swift code Code completion for images Swift 3 Swift 3 is the first major release of the innovative programming language built completely in the open with the community of developers at Swift.org. This release unifies core API naming rules under a new public API Naming Guidelines document that makes writing Swift code feel even more natural. Popular system APIs such as Core Graphics and Grand Central Dispatch are more expressive and harmonize well with Swift. You can also experiment with Swift 3 in the new Swift Playgrounds app for iPad. Runtime Issues This new feature reports issues that are identified automatically by Xcode as your app runs, tracking down hard-to-find bugs that may not have been noticed until your app was in the hands of users. The new Thread Sanitizer spots race conditions on data changes and other threading-related bugs. Inspect UI constraint problems using the updated View Debugger with even greater fidelity and visual accuracy, and get alerted to memory leaks that you can track down in the new Memory Debugger. Signing Made Easy and Powerful Device setup and code signing are greatly simplified, while providing more control when you need it. The new automatically managed code signing generates all the assets you need to properly sign, provision, and run your apps on a connected Apple device. Simply choose your team and Xcode does the rest. You also have the option of hand-picking your provisioning profiles and setting up the signing process for each build configuration. If you run into any issues, improved error messages and logs are available in the Report Navigator. And if you have multiple Macs, Xcode will automatically generate a unique development certificate for each Mac. Developing and running your app on your Apple device is as easy as entering your Apple ID into Xcode preferences. Apple Developer Program membership is not required. Developer Xcode Discover macOS iOS watchOS tvOS Developer Program Enterprise Education Design Accessibility Accessories Adaptivity Apple Design Awards Fonts Design Videos Marketing Guidelines Develop Xcode Swift Downloads API Reference Guides Sample Code Videos Distribute App Store App Review iTunes Connect TestFlight Enterprise Safari Extensions Support Developer Forums Contact Us Bug Reporting License Agreements System Status To receive the latest developer news, visit and subscribe to our News and Updates. Copyright © 2016 Apple Inc. All rights reserved. Terms of Use Privacy Policy Report Bugs Feedback"	"null"	"null"	"Developed by Apple."	"true"
"Integrated Development Environment"	"YouCompleteMe"	"https://valloric.github.io/YouCompleteMe/"	"YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"YouCompleteMe by Valloric YouCompleteMe A code-completion engine for Vim Project maintained by Valloric Hosted on GitHub Pages — Theme by mattgraham Intro Installation Mac OS X Ubuntu Linux x64 Fedora Linux x64 Windows FreeBSD/OpenBSD Full Installation Guide Quick Feature Summary User Guide General Usage Client-Server Architecture Completion String Ranking General Semantic Completion C-family Semantic Completion JavaScript Semantic Completion Rust Semantic Completion Python Semantic Completion Semantic Completion for Other Languages Writing New Semantic Completers Diagnostic Display Diagnostic Highlighting Groups Commands YcmCompleter subcommands GoTo Commands Semantic Information Commands Refactoring and FixIt Commands Miscellaneous Commands Functions Autocommands Options FAQ Contributor Code of Conduct Contact License Intro YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim. It has several completion engines: an identifier-based engine that works with every programming language, a Clang-based engine that provides native semantic code completion for C/C++/Objective-C/Objective-C++ (from now on referred to as ""the C-family languages""), a Jedi-based completion engine for Python 2 and 3 (using the JediHTTP wrapper), an OmniSharp-based completion engine for C#, a combination of Gocode and Godef semantic engines for Go, a TSServer-based completion engine for TypeScript, a Tern-based completion engine for JavaScript, a racer-based completion engine for Rust, and an omnifunc-based completer that uses data from Vim's omnicomplete system to provide semantic completions for many other languages (Ruby, PHP etc.). Here's an explanation of what happens in the short GIF demo above. First, realize that no keyboard shortcuts had to be pressed to get the list of completion candidates at any point in the demo. The user just types and the suggestions pop up by themselves. If the user doesn't find the completion suggestions relevant and/or just wants to type, they can do so; the completion engine will not interfere. When the user sees a useful completion string being offered, they press the TAB key to accept it. This inserts the completion string. Repeated presses of the TAB key cycle through the offered completions. If the offered completions are not relevant enough, the user can continue typing to further filter out unwanted completions. A critical thing to notice is that the completion filtering is NOT based on the input being a string prefix of the completion (but that works too). The input needs to be a subsequence match of a completion. This is a fancy way of saying that any input characters need to be present in a completion string in the order in which they appear in the input. So abc is a subsequence of xaybgc, but not of xbyxaxxc. After the filter, a complicated sorting system ranks the completion strings so that the most relevant ones rise to the top of the menu (so you usually need to press TAB just once). All of the above works with any programming language because of the identifier-based completion engine. It collects all of the identifiers in the current file and other files you visit (and your tags files) and searches them when you type (identifiers are put into per-filetype groups). The demo also shows the semantic engine in use. When the user presses ., -> or :: while typing in insert mode (for C++; different triggers are used for other languages), the semantic engine is triggered (it can also be triggered with a keyboard shortcut; see the rest of the docs). The last thing that you can see in the demo is YCM's diagnostic display features (the little red X that shows up in the left gutter; inspired by Syntastic) if you are editing a C-family file. As Clang compiles your file and detects warnings or errors, they will be presented in various ways. You don't need to save your file or press any keyboard shortcut to trigger this, it ""just happens"" in the background. In essence, YCM obsoletes the following Vim plugins because it has all of their features plus extra: clang_complete AutoComplPop Supertab neocomplcache And that's not all... YCM also provides semantic IDE-like features in a number of languages, including: finding declarations, definitions, usages, etc. of identifiers, displaying type information for classes, variables, functions etc., displaying documentation for methods, members, etc. in the preview window, fixing common coding errors, like missing semi-colons, typos, etc., semantic renaming of variables across files (JavaScript only). Features vary by file type, so make sure to check out the file type feature summary and the full list of completer subcommands to find out what's available for your favourite languages. You'll also find that YCM has filepath completers (try typing ./ in a file) and a completer that integrates with UltiSnips. Installation Mac OS X Please refer to the full Installation Guide below; the following commands are provided on a best-effort basis and may not work for you. Install the latest version of MacVim. Yes, MacVim. And yes, the latest. If you don't use the MacVim GUI, it is recommended to use the Vim binary that is inside the MacVim.app package (MacVim.app/Contents/MacOS/Vim). To ensure it works correctly copy the mvim script from the MacVim download to your local binary folder (for example /usr/local/bin/mvim) and then symlink it: ln -s /usr/local/bin/mvim vim  Install YouCompleteMe with Vundle. Remember: YCM is a plugin with a compiled component. If you update YCM using Vundle and the ycm_core library APIs have changed (happens rarely), YCM will notify you to recompile it. You should then rerun the install process. NOTE: If you want C-family completion, you MUST have the latest Xcode installed along with the latest Command Line Tools (they are installed automatically when you run clang for the first time, or manually by running xcode-select --install) Install CMake. Preferably with Homebrew, but here's the stand-alone CMake installer. If you have installed a Homebrew Python and/or Homebrew MacVim, see the FAQ for details. Compiling YCM with semantic support for C-family languages: cd ~/.vim/bundle/YouCompleteMe ./install.py --clang-completer  Compiling YCM without semantic support for C-family languages: cd ~/.vim/bundle/YouCompleteMe ./install.py  The following additional language support options are available: C# support: install Mono with Homebrew or by downloading the Mono Mac package and add --omnisharp-completer when calling ./install.py. Go support: install Go and add --gocode-completer when calling ./install.py. TypeScript support: install Node.js and npm then install the TypeScript SDK with npm install -g typescript. JavaScript support: install Node.js and npm and add --tern-completer when calling ./install.py. Rust support: install Rust and add --racer-completer when calling ./install.py. To simply compile with everything enabled, there's a --all flag. So, to install with all language features, ensure xbuild, go, tsserver, node, npm, rustc, and cargo tools are installed and in your PATH, then simply run: cd ~/.vim/bundle/YouCompleteMe ./install.py --all  That's it. You're done. Refer to the User Guide section on how to use YCM. Don't forget that if you want the C-family semantic completion engine to work, you will need to provide the compilation flags for your project to YCM. It's all in the User Guide. YCM comes with sane defaults for its options, but you still may want to take a look at what's available for configuration. There are a few interesting options that are conservatively turned off by default that you may want to turn on. Ubuntu Linux x64 Please refer to the full Installation Guide below; the following commands are provided on a best-effort basis and may not work for you. Make sure you have Vim 7.3.598 with python2 or python3 support. Ubuntu 14.04 and later have a Vim that's recent enough. You can see the version of Vim installed by running vim --version. If the version is too old, you may need to compile Vim from source (don't worry, it's easy). Install YouCompleteMe with Vundle. Remember: YCM is a plugin with a compiled component. If you update YCM using Vundle and the ycm_core library APIs have changed (happens rarely), YCM will notify you to recompile it. You should then rerun the install process. Install development tools and CMake: sudo apt-get install build-essential cmake Make sure you have Python headers installed: sudo apt-get install python-dev python3-dev. Compiling YCM with semantic support for C-family languages: cd ~/.vim/bundle/YouCompleteMe ./install.py --clang-completer  Compiling YCM without semantic support for C-family languages: cd ~/.vim/bundle/YouCompleteMe ./install.py  The following additional language support options are available: C# support: install Mono and add --omnisharp-completer when calling ./install.py. Go support: install Go and add --gocode-completer when calling ./install.py. TypeScript support: install Node.js and npm then install the TypeScript SDK with npm install -g typescript. JavaScript support: install Node.js and npm and add --tern-completer when calling ./install.py. Rust support: install Rust and add --racer-completer when calling ./install.py. To simply compile with everything enabled, there's a --all flag. So, to install with all language features, ensure xbuild, go, tsserver, node, npm, rustc, and cargo tools are installed and in your PATH, then simply run: cd ~/.vim/bundle/YouCompleteMe ./install.py --all  That's it. You're done. Refer to the User Guide section on how to use YCM. Don't forget that if you want the C-family semantic completion engine to work, you will need to provide the compilation flags for your project to YCM. It's all in the User Guide. YCM comes with sane defaults for its options, but you still may want to take a look at what's available for configuration. There are a few interesting options that are conservatively turned off by default that you may want to turn on. Fedora Linux x64 Please refer to the full Installation Guide below; the following commands are provided on a best-effort basis and may not work for you. Make sure you have Vim 7.3.598 with Python 2 or Python 3 support. Fedora 21 and later have a Vim that's recent enough. You can see the version of Vim installed by running vim --version. If the version is too old, you may need to compile Vim from source (don't worry, it's easy). Install YouCompleteMe with Vundle. Remember: YCM is a plugin with a compiled component. If you update YCM using Vundle and the ycm_core library APIs have changed (happens rarely), YCM will notify you to recompile it. You should then rerun the install process. Install development tools and CMake: sudo dnf install automake gcc gcc-c++ kernel-devel cmake Make sure you have Python headers installed: sudo dnf install python-devel python3-devel. Compiling YCM with semantic support for C-family languages: cd ~/.vim/bundle/YouCompleteMe ./install.py --clang-completer  Compiling YCM without semantic support for C-family languages: cd ~/.vim/bundle/YouCompleteMe ./install.py  The following additional language support options are available: C# support: install Mono and add --omnisharp-completer when calling ./install.py. Go support: install Go and add --gocode-completer when calling ./install.py. TypeScript support: install Node.js and npm then install the TypeScript SDK with npm install -g typescript. JavaScript support: install Node.js and npm and add --tern-completer when calling ./install.py. Rust support: install Rust and add --racer-completer when calling ./install.py. To simply compile with everything enabled, there's a --all flag. So, to install with all language features, ensure xbuild, go, tsserver, node, npm, rustc, and cargo tools are installed and in your PATH, then simply run: cd ~/.vim/bundle/YouCompleteMe ./install.py --all  That's it. You're done. Refer to the User Guide section on how to use YCM. Don't forget that if you want the C-family semantic completion engine to work, you will need to provide the compilation flags for your project to YCM. It's all in the User Guide. YCM comes with sane defaults for its options, but you still may want to take a look at what's available for configuration. There are a few interesting options that are conservatively turned off by default that you may want to turn on. Windows Please refer to the full Installation Guide below; the following commands are provided on a best-effort basis and may not work for you. Important: we assume that you are using the cmd.exe command prompt and that you know how to add an executable to the PATH environment variable. Make sure you have at least Vim 7.3.598 with Python 2 or Python 3 support. You can check the version and which Python is supported by typing :version inside Vim. Look at the features included: +python/dyn for Python 2 and +python3/dyn for Python 3. Take note of the Vim architecture, i.e. 32 or 64-bit. It will be important when choosing the Python installer. We recommend using a 64-bit client. Daily updated copies of 32-bit and 64-bit Vim with Python 2 and Python 3 support are available. Install YouCompleteMe with Vundle. Remember: YCM is a plugin with a compiled component. If you update YCM using Vundle and the ycm_core library APIs have changed (happens rarely), YCM will notify you to recompile it. You should then rerun the install process. Download and install the following software: Python 2 or Python 3. Be sure to pick the version corresponding to your Vim architecture. It is Windows x86 for a 32-bit Vim and Windows x86-64 for a 64-bit Vim. We recommend installing Python 3. CMake. Add CMake executable to the PATH environment variable. Visual Studio. Download the community edition. During setup, choose Custom as the installation type and select the Visual C++ component. 7-zip. Required to build YCM with semantic support for C-family languages. Compiling YCM with semantic support for C-family languages: cd %USERPROFILE%/vimfiles/bundle/YouCompleteMe install.py --clang-completer  Compiling YCM without semantic support for C-family languages: cd %USERPROFILE%/vimfiles/bundle/YouCompleteMe install.py  The following additional language support options are available: C# support: add --omnisharp-completer when calling install.py. Be sure that the build utility msbuild is in your PATH. Go support: install Go and add --gocode-completer when calling install.py. TypeScript support: install Node.js and npm then install the TypeScript SDK with npm install -g typescript. JavaScript support: install Node.js and npm and add --tern-completer when calling install.py. Rust support: install Rust and add --racer-completer when calling install.py. To simply compile with everything enabled, there's a --all flag. So, to install with all language features, ensure msbuild, go, tsserver, node, npm, and cargo tools are installed and in your PATH, then simply run: cd %USERPROFILE%/vimfiles/bundle/YouCompleteMe python install.py --all  You can specify the Microsoft Visual C++ (MSVC) version using the --msvc option. YCM officially supports MSVC 11 (Visual Studio 2012), 12 (2013), and 14 (2015). That's it. You're done. Refer to the User Guide section on how to use YCM. Don't forget that if you want the C-family semantic completion engine to work, you will need to provide the compilation flags for your project to YCM. It's all in the User Guide. YCM comes with sane defaults for its options, but you still may want to take a look at what's available for configuration. There are a few interesting options that are conservatively turned off by default that you may want to turn on. FreeBSD/OpenBSD Please refer to the full Installation Guide below; the following commands are provided on a best-effort basis and may not work for you. OpenBSD / FreeBSD are not officially supported platforms by YCM. Make sure you have Vim 7.3.598 with Python 2 or Python 3 support. OpenBSD 5.5 and later have a Vim that's recent enough. You can see the version of Vim installed by running vim --version. FreeBSD 10.x comes with clang compiler but not the libraries needed to install. pkg install llvm35 boost-all boost-python-libs clang35 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/llvm35/lib/  Install YouCompleteMe with Vundle. Remember: YCM is a plugin with a compiled component. If you update YCM using Vundle and the ycm_core library APIs have changed (happens rarely), YCM will notify you to recompile it. You should then rerun the install process. Install dependencies and CMake: sudo pkg_add llvm boost cmake Compiling YCM with semantic support for C-family languages: cd ~/.vim/bundle/YouCompleteMe ./install.py --clang-completer --system-libclang --system-boost  Compiling YCM without semantic support for C-family languages: cd ~/.vim/bundle/YouCompleteMe ./install.py --system-boost  The following additional language support options are available: C# support: install Mono and add --omnisharp-completer when calling ./install.py. Go support: install Go and add --gocode-completer when calling ./install.py. TypeScript support: install Node.js and npm then install the TypeScript SDK with npm install -g typescript. JavaScript support: install Node.js and npm and add --tern-completer when calling ./install.py. Rust support: install Rust and add --racer-completer when calling ./install.py. To simply compile with everything enabled, there's a --all flag. So, to install with all language features, ensure xbuild, go, tsserver, node, npm, and cargo tools are installed and in your PATH, then simply run: cd ~/.vim/bundle/YouCompleteMe ./install.py --all  That's it. You're done. Refer to the User Guide section on how to use YCM. Don't forget that if you want the C-family semantic completion engine to work, you will need to provide the compilation flags for your project to YCM. It's all in the User Guide. YCM comes with sane defaults for its options, but you still may want to take a look at what's available for configuration. There are a few interesting options that are conservatively turned off by default that you may want to turn on. Full Installation Guide These are the steps necessary to get YCM working on a Unix OS and on Windows. Note to Windows users: we assume that you are running the cmd.exe command prompt and that the needed executables are in the PATH environment variable. Do not just copy the shell commands. Replace ~ by %USERPROFILE% in them and use the right Vim home directory. It should be vimfiles by default instead of .vim. See the FAQ if you have any issues. Remember: YCM is a plugin with a compiled component. If you update YCM using Vundle and the ycm_core library APIs have changed (happens rarely), YCM will notify you to recompile it. You should then rerun the install process. Please follow the instructions carefully. Read EVERY WORD. Ensure that your version of Vim is at least 7.3.598 and that it has support for Python 2 or Python 3 scripting. Inside Vim, type :version. Look at the first two to three lines of output; it should say Vi IMproved X.Y, where X.Y is the major version of vim. If your version is greater than 7.3, then you're all set. If your version is 7.3 then look below that where it says, Included patches: 1-Z, where Z will be some number. That number needs to be 598 or higher. If your version of Vim is not recent enough, you may need to compile Vim from source (don't worry, it's easy). After you have made sure that you have Vim 7.3.598+, type the following in Vim: :echo has('python') || has('python3'). The output should be 1. If it's 0, then get a version of Vim with Python support. On Windows, check also if your Vim architecture is 32 or 64-bit. This is critical because it must match the Python and the YCM libraries architectures. We recommend using a 64-bit Vim. Install YCM with Vundle (or Pathogen, but Vundle is a better idea). With Vundle, this would mean adding a Plugin 'Valloric/YouCompleteMe' line to your vimrc. If you don't install YCM with Vundle, make sure you have run git submodule update --init --recursive after checking out the YCM repository (Vundle will do this for you) to fetch YCM's dependencies. [Complete this step ONLY if you care about semantic completion support for C-family languages. Otherwise it's not necessary.] Download the latest version of libclang. Clang is an open-source compiler that can compile C/C++/Objective-C/Objective-C++. The libclang library it provides is used to power the YCM semantic completion engine for those languages. YCM is designed to work with libclang version 3.8 or higher. You can use the system libclang only if you are sure it is version 3.8 or higher, otherwise don't. Even if it is, we recommend using the official binaries from llvm.org if at all possible. Make sure you download the correct archive file for your OS. We STRONGLY recommend AGAINST use of the system libclang instead of the upstream compiled binaries. Random things may break. Save yourself the hassle and use the upstream pre-built libclang. Compile the ycm_core library that YCM needs. This library is the C++ engine that YCM uses to get fast completions. You will need to have cmake installed in order to generate the required makefiles. Linux users can install cmake with their package manager (sudo apt-get install cmake for Ubuntu) whereas other users can download and install cmake from its project site. Mac users can also get it through Homebrew with brew install cmake. On a Unix OS, you need to make sure you have Python headers installed. On a Debian-like Linux distro, this would be sudo apt-get install python-dev python3-dev. On Mac they should already be present. On Windows, you need to download and install Python 2 or Python 3. Pick the version corresponding to your Vim architecture. You will also need Microsoft Visual C++ (MSVC) to build YCM. You can obtain it by installing Visual Studio. MSVC 11 (Visual Studio 2012), 12 (2013), and 14 (2015) are officially supported. Here we'll assume you installed YCM with Vundle. That means that the top-level YCM directory is in ~/.vim/bundle/YouCompleteMe. We'll create a new folder where build files will be placed. Run the following: cd ~ mkdir ycm_build cd ycm_build  Now we need to generate the makefiles. If you DON'T care about semantic support for C-family languages, run the following command in the ycm_build directory: cmake -G ""<generator>"" . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp  where <generator> is Unix Makefiles on Unix systems and one of the following Visual Studio generators on Windows: Visual Studio 11 Win64 Visual Studio 12 Win64 Visual Studio 14 Win64 Remove the Win64 part in these generators if your Vim architecture is 32-bit. For those who want to use the system version of boost, you would pass -DUSE_SYSTEM_BOOST=ON to cmake. This may be necessary on some systems where the bundled version of boost doesn't compile out of the box. NOTE: We STRONGLY recommend AGAINST use of the system boost instead of the bundled version of boost. Random things may break. Save yourself the hassle and use the bundled version of boost. If you DO care about semantic support for C-family languages, then your cmake call will be a bit more complicated. We'll assume you downloaded a binary distribution of LLVM+Clang from llvm.org in step 3 and that you extracted the archive file to folder ~/ycm_temp/llvm_root_dir (with bin, lib, include etc. folders right inside that folder). On Windows, you can extract the files from the LLVM+Clang installer using 7-zip. NOTE: This only works with a downloaded LLVM binary package, not a custom-built LLVM! See docs below for EXTERNAL_LIBCLANG_PATH when using a custom LLVM build. With that in mind, run the following command in the ycm_build directory: cmake -G ""<generator>"" -DPATH_TO_LLVM_ROOT=~/ycm_temp/llvm_root_dir . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp  where <generator> is replaced like above. Now that configuration files have been generated, compile the libraries using this command: cmake --build . --target ycm_core --config Release  The --config Release part is specific to Windows and will be ignored on a Unix OS. For those who want to use the system version of libclang, you would pass -DUSE_SYSTEM_LIBCLANG=ON to cmake instead of the -DPATH_TO_LLVM_ROOT=... flag. NOTE: We STRONGLY recommend AGAINST use of the system libclang instead of the upstream compiled binaries. Random things may break. Save yourself the hassle and use the upstream pre-built libclang. You could also force the use of a custom libclang library with -DEXTERNAL_LIBCLANG_PATH=/path/to/libclang.so flag (the library would end with .dylib on a Mac). Again, this flag would be used instead of the other flags. If you compiled LLVM from source, this is the flag you should be using. Running the cmake command will also place the libclang.[so|dylib|dll] in the YouCompleteMe/third_party/ycmd folder for you if you compiled with clang support (it needs to be there for YCM to work). Set up support for additional languages, as desired: C# support: install Mono on non-Windows platforms. Navigate to YouCompleteMe/third_party/ycmd/third_party/OmniSharpServer and run msbuild (Windows) or xbuild (other platforms, using Mono) depending on your platform. On Windows, be sure that the build utility msbuild is in your PATH. Go support: install Go and add it to your path. Navigate to YouCompleteMe/third_party/ycmd/third_party/gocode and run go build. TypeScript support: as with the quick installation, simply npm install -g typescript after successfully installing Node.js and npm. JavaScript support: install Node.js and npm. Then navigate to YouCompleteMe/third_party/ycmd/third_party/tern_runtime and run npm install --production Rust support: install Rust. Navigate to YouCompleteMe/third_party/ycmd/third_party/racerd and run cargo build --release. That's it. You're done. Refer to the User Guide section on how to use YCM. Don't forget that if you want the C-family semantic completion engine to work, you will need to provide the compilation flags for your project to YCM. It's all in the User Guide. YCM comes with sane defaults for its options, but you still may want to take a look at what's available for configuration. There are a few interesting options that are conservatively turned off by default that you may want to turn on. Quick Feature Summary General (all languages) Super-fast identifier completer including tags files and syntax elements Intelligent suggestion ranking and filtering File and path suggestions Suggestions from Vim's OmniFunc UltiSnips snippet suggestions C-family languages (C, C++, Objective C, Objective C++) Semantic auto-completion Real-time diagnostic display Go to include/declaration/definition (GoTo, etc.) Semantic type information for identifiers (GetType) Automatically fix certain errors (FixIt) View documentation comments for identifiers (GetDoc) C♯ Semantic auto-completion Real-time diagnostic display Go to declaration/definition (GoTo, etc.) Semantic type information for identifiers (GetType) Automatically fix certain errors (FixIt) Management of OmniSharp server instance View documentation comments for identifiers (GetDoc) Python Intelligent auto-completion Go to declaration/definition, find references (GoTo, GoToReferences) View documentation comments for identifiers (GetDoc) Restart JediHTTP server using a different Python interpreter Go Semantic auto-completion Go to definition (GoTo) Management of gocode server instance TypeScript Semantic auto-completion Renaming symbols (RefactorRename <new name>) Go to definition, find references (GoToDefinition, GoToReferences) Semantic type information for identifiers (GetType) View documentation comments for identifiers (GetDoc) JavaScript Intelligent auto-completion Renaming variables (RefactorRename <new name>) Go to definition, find references (GoToDefinition, GoToReferences) Type information for identifiers (GetType) View documentation comments for identifiers (GetDoc) Management of Tern server instance Rust Semantic auto-completion Go to definition (GoTo, GoToDefinition, and GoToDeclaration are identical) Management of racer server instance User Guide General Usage If the offered completions are too broad, keep typing characters; YCM will continue refining the offered completions based on your input. Filtering is ""smart-case"" sensitive; if you are typing only lowercase letters, then it's case-insensitive. If your input contains uppercase letters, then the uppercase letters in your query must match uppercase letters in the completion strings (the lowercase letters still match both). So, ""foo"" matches ""Foo"" and ""foo"", ""Foo"" matches ""Foo"" and ""FOO"" but not ""foo"". Use the TAB key to accept a completion and continue pressing TAB to cycle through the completions. Use Shift-TAB to cycle backwards. Note that if you're using console Vim (that is, not Gvim or MacVim) then it's likely that the Shift-TAB binding will not work because the console will not pass it to Vim. You can remap the keys; see the Options section below. Knowing a little bit about how YCM works internally will prevent confusion. YCM has several completion engines: an identifier-based completer that collects all of the identifiers in the current file and other files you visit (and your tags files) and searches them when you type (identifiers are put into per-filetype groups). There are also several semantic engines in YCM. There's a libclang-based completer that provides semantic completion for C-family languages. There's a Jedi-based completer for semantic completion for Python. There's also an omnifunc-based completer that uses data from Vim's omnicomplete system to provide semantic completions when no native completer exists for that language in YCM. There are also other completion engines, like the UltiSnips completer and the filepath completer. YCM automatically detects which completion engine would be the best in any situation. On occasion, it queries several of them at once, merges the outputs and presents the results to you. Client-Server Architecture YCM has a client-server architecture; the Vim part of YCM is only a thin client that talks to the ycmd HTTP+JSON server that has the vast majority of YCM logic and functionality. The server is started and stopped automatically as you start and stop Vim. Completion String Ranking The subsequence filter removes any completions that do not match the input, but then the sorting system kicks in. It's actually very complicated and uses lots of factors, but suffice it to say that ""word boundary"" (WB) subsequence character matches are ""worth"" more than non-WB matches. In effect, this means given an input of ""gua"", the completion ""getUserAccount"" would be ranked higher in the list than the ""Fooguxa"" completion (both of which are subsequence matches). A word-boundary character are all capital characters, characters preceded by an underscore and the first letter character in the completion string. General Semantic Completion You can use Ctrl+Space to trigger the completion suggestions anywhere, even without a string prefix. This is useful to see which top-level functions are available for use. C-family Semantic Completion YCM looks for a .ycm_extra_conf.py file in the directory of the opened file or in any directory above it in the hierarchy (recursively); when the file is found, it is loaded (only once!) as a Python module. YCM calls a FlagsForFile method in that module which should provide it with the information necessary to compile the current file. You can also provide a path to a global .ycm_extra_conf.py file, which will be used as a fallback. To prevent the execution of malicious code from a file you didn't write YCM will ask you once per .ycm_extra_conf.py if it is safe to load. This can be disabled and you can white-/blacklist files. See the Options section for more details. This system was designed this way so that the user can perform any arbitrary sequence of operations to produce a list of compilation flags YCM should hand to Clang. See YCM's own .ycm_extra_conf.py for details on how this works. You should be able to use it as a starting point. Don't just copy/paste that file somewhere and expect things to magically work; your project needs different flags. Hint: just replace the strings in the flags variable with compilation flags necessary for your project. That should be enough for 99% of projects. Yes, Clang's CompilationDatabase system is also supported. Again, see the above linked example file. You can get CMake to generate this file for you by adding set( CMAKE_EXPORT_COMPILE_COMMANDS 1 ) to your project's CMakeLists.txt file (if using CMake). If you're not using CMake, you could use something like Bear to generate the compile_commands.json file. Consider using YCM-Generator to generate the ycm_extra_conf.py file. If Clang encounters errors when compiling the header files that your file includes, then it's probably going to take a long time to get completions. When the completion menu finally appears, it's going to have a large number of unrelated completion strings (type/function names that are not actually members). This is because Clang fails to build a precompiled preamble for your file if there are any errors in the included headers and that preamble is key to getting fast completions. Call the :YcmDiags command to see if any errors or warnings were detected in your file. JavaScript Semantic Completion Quick start Ensure that you have enabled the Tern completer. See the installation guide for details. Create a .tern-project file in the root directory of your JavaScript project, by following the instructions in the Tern documentation. Make sure that Vim's working directory is a descendent of that directory (or that directory itself) when working with JavaScript files. Explanation JavaScript completion is based on Tern. This completion engine requires a file named .tern-project to exist in the current working directory or a directory which is an ancestor of the current working directory when the tern server is started. YCM starts the Tern server the first time a JavaScript file is edited, so Vim's working directory at that time needs to be a descendent of the directory containing the .tern-project file (or that directory itself). Alternatively, as described in the Tern documentation, a global .tern-config file may be used. Multiple Tern servers, are not supported. To switch to a different JavaScript project, you can do one of the following: start a new instance of Vim from the new project's directory change Vim's working directory (:cd /path/to/new/project) and restart the ycmd server (:YcmRestartServer) change Vim's working directory (:cd /path/to/new/project), open a JavaScript file (or set filetype to JavaScript) and restart the Tern server using YCM completer subcommands :YcmCompleter StopServer and :YcmCompleter StartServer. Tips and tricks This section contains some advice for configuring .tern-project and working with JavaScript files. The canonical reference for correctly configuring Tern is the Tern documentation. Any issues, improvements, advice, etc. should be sought from the Tern project. For example, see the list of tern plugins for the list of plugins which can be enabled in the plugins section of the .tern-project file. Configuring Tern for node support The following simple example .tern-project file enables nodejs support: {     ""plugins"": {         ""node"": {}     } }   Configuring Tern for requirejs support The Tern requirejs plugin requires that all included ""libraries"" are rooted under the same base directory. If that's not the case for your projects, then it is possible to make it work with appropriate symbolic links. For example, create a directory ext_lib within your project and populate it with symlinks to your libraries. Then set up the .tern-project something like this:  {   ""plugins"": {     ""requirejs"": {       ""baseURL"": ""./ext_lib"",     }   } }  Then, given the following structure: ./ext_lib/mylib (symlink) ./ext_lib/anotherlib (symlink)  Can be used as follows: define( [ 'mylib/file1', 'anotherlib/anotherfile' ], function( f1, f2 ) {     // etc. } );  Rust Semantic Completion Completions and GoTo commands within the current crate and its dependencies should work out of the box with no additional configuration (provided that you built YCM with the --racer-completer flag; see the Installation section for details). For semantic analysis inclusive of the standard library, you must have a local copy of the rust source code. You also need to set the following option so YouCompleteMe can locate it. "" In this example, the rust source code zip has been extracted to "" /usr/local/rust/rustc-1.5.0 let g:ycm_rust_src_path = '/usr/local/rust/rustc-1.5.0/src'  Python Semantic Completion Completion and GoTo commands work out of the box with no additional configuration. Those features are provided by the jedi library which supports a variety of Python versions (2.6, 2.7, 3.2+) as long as it runs in the corresponding Python interpreter. By default YCM runs jedi with the same Python interpreter used by the ycmd server, so if you would like to use a different interpreter, use the following option specifying the Python binary to use. For example, to provide Python 3 completion in your project, set: let g:ycm_python_binary_path = '/usr/bin/python3'  If the value of g:ycm_python_binary_path is an absolute path like above it will be used as-is, but if it's an executable name it will be searched through the PATH. So for example if you set: let g:ycm_python_binary_path = 'python'  YCM will use the first python executable it finds in the PATH to run jedi. This means that if you are in a virtual environment and you start vim in that directory, the first python that YCM will find will be the one in the virtual environment, so jedi will be able to provide completions for every package you have in the virtual environment. Semantic Completion for Other Languages Python, C#, Go, Rust, and TypeScript are supported natively by YouCompleteMe using the Jedi, Omnisharp, Gocode, racer, and TSServer engines, respectively. Check the installation section for instructions to enable these features if desired. YCM will use your omnifunc (see :h omnifunc in Vim) as a source for semantic completions if it does not have a native semantic completion engine for your file's filetype. Vim comes with okayish omnifuncs for various languages like Ruby, PHP etc. It depends on the language. You can get stellar omnifuncs for Java and Ruby with Eclim. Just make sure you have the latest Eclim installed and configured (this means Eclim >= 2.2.* and Eclipse >= 4.2.*). After installing Eclim remember to create a new Eclipse project within your application by typing :ProjectCreate <path-to-your-project> -n ruby (or -n java) inside vim and don't forget to have let g:EclimCompletionMethod = 'omnifunc' in your vimrc. This will make YCM and Eclim play nice; YCM will use Eclim's omnifuncs as the data source for semantic completions and provide the auto-triggering and subsequence-based matching (and other YCM features) on top of it. Writing New Semantic Completers You have two options here: writing an omnifunc for Vim's omnicomplete system that YCM will then use through its omni-completer, or a custom completer for YCM using the Completer API. Here are the differences between the two approaches: You have to use VimScript to write the omnifunc, but get to use Python to write for the Completer API; this by itself should make you want to use the API. The Completer API is a much more powerful way to integrate with YCM and it provides a wider set of features. For instance, you can make your Completer query your semantic back-end in an asynchronous fashion, thus not blocking Vim's GUI thread while your completion system is processing stuff. This is impossible with VimScript. All of YCM's completers use the Completer API. Performance with the Completer API is better since Python executes faster than VimScript. If you want to use the omnifunc system, see the relevant Vim docs with :h complete-functions. For the Completer API, see the API docs. If you want to upstream your completer into YCM's source, you should use the Completer API. Diagnostic Display YCM will display diagnostic notifications for C-family and C# languages if you compiled YCM with Clang and Omnisharp support, respectively. Since YCM continuously recompiles your file as you type, you'll get notified of errors and warnings in your file as fast as possible. Here are the various pieces of the diagnostic UI: Icons show up in the Vim gutter on lines that have a diagnostic. Regions of text related to diagnostics are highlighted (by default, a red wavy underline in gvim and a red background in vim). Moving the cursor to a line with a diagnostic echoes the diagnostic text. Vim's location list is automatically populated with diagnostic data (off by default, see options). The new diagnostics (if any) will be displayed the next time you press any key on the keyboard. So if you stop typing and just wait for the new diagnostics to come in, that will not work. You need to press some key for the GUI to update. Having to press a key to get the updates is unfortunate, but cannot be changed due to the way Vim internals operate; there is no way that a background task can update Vim's GUI after it has finished running. You have to press a key. This will make YCM check for any pending diagnostics updates. You can force a full, blocking compilation cycle with the :YcmForceCompileAndDiagnostics command (you may want to map that command to a key; try putting nnoremap <F5> :YcmForceCompileAndDiagnostics<CR> in your vimrc). Calling this command will force YCM to immediately recompile your file and display any new diagnostics it encounters. Do note that recompilation with this command may take a while and during this time the Vim GUI will be blocked. YCM will display a short diagnostic message when you move your cursor to the line with the error. You can get a detailed diagnostic message with the <leader>d key mapping (can be changed in the options) YCM provides when your cursor is on the line with the diagnostic. You can also see the full diagnostic message for all the diagnostics in the current file in Vim's locationlist, which can be opened with the :lopen and :lclose commands (make sure you have set let g:ycm_always_populate_location_list = 1 in your vimrc). A good way to toggle the display of the locationlist with a single key mapping is provided by another (very small) Vim plugin called ListToggle (which also makes it possible to change the height of the locationlist window), also written by yours truly. Diagnostic Highlighting Groups You can change the styling for the highlighting groups YCM uses. For the signs in the Vim gutter, the relevant groups are: YcmErrorSign, which falls back to group SyntasticErrorSign and then error if they exist YcmWarningSign, which falls back to group SyntasticWarningSign and then todo if they exist You can also style the line that has the warning/error with these groups: YcmErrorLine, which falls back to group SyntasticErrorLine if it exists YcmWarningLine, which falls back to group SyntasticWarningLine if it exists Note that the line highlighting groups only work when gutter signs are turned on. The syntax groups used to highlight regions of text with errors/warnings: - YcmErrorSection, which falls back to group SyntasticError if it exists and then SpellBad - YcmWarningSection, which falls back to group SyntasticWarning if it exists and then SpellCap Here's how you'd change the style for a group: highlight YcmErrorLine guibg=#3f0000  Commands The :YcmRestartServer command If the ycmd completion server suddenly stops for some reason, you can restart it with this command. The :YcmForceCompileAndDiagnostics command Calling this command will force YCM to immediately recompile your file and display any new diagnostics it encounters. Do note that recompilation with this command may take a while and during this time the Vim GUI will be blocked. You may want to map this command to a key; try putting nnoremap <F5> :YcmForceCompileAndDiagnostics<CR> in your vimrc. The :YcmDiags command Calling this command will fill Vim's locationlist with errors or warnings if any were detected in your file and then open it. If a given error or warning can be fixed by a call to :YcmCompleter FixIt, then (FixIt available) is appended to the error or warning text. See the FixIt completer subcommand for more information. NOTE: The absense of (FixIt available) does not strictly imply a fix-it is not available as not all completers are able to provide this indication. For example, the c-sharp completer provides many fix-its but does not add this additional indication. The g:ycm_open_loclist_on_ycm_diags option can be used to prevent the location list from opening, but still have it filled with new diagnostic data. See the Options section for details. The :YcmShowDetailedDiagnostic command This command shows the full diagnostic text when the user's cursor is on the line with the diagnostic. The :YcmDebugInfo command This will print out various debug information for the current file. Useful to see what compile commands will be used for the file if you're using the semantic completion engine. The :YcmToggleLogs command This command automatically opens in windows the stdout and stderr logfiles written by the ycmd server. If one or both logfiles are already opened, they are automatically closed. stderr or stdout can be specified as an argument of this command to only open the corresponding logfile instead of both. If this logfile is already opened, it will be closed. Only for debugging purpose. The :YcmCompleter command This command gives access to a number of additional IDE-like features in YCM, for things like semantic GoTo, type information, FixIt and refactoring. Technically the command invokes completer-specific commands. If the first argument is of the form ft=... the completer for that file type will be used (for example ft=cpp), else the native completer of the current buffer will be used. Call YcmCompleter without further arguments for a list of the commands you can call for the current completer. See the file type feature summary for an overview of the features available for each file type. See the YcmCompleter subcommands section for more information on the available subcommands and their usage. YcmCompleter Subcommands NOTE: See the docs for the YcmCompleter command before tackling this section. The invoked subcommand is automatically routed to the currently active semantic completer, so :YcmCompleter GoToDefinition will invoke the GoToDefinition subcommand on the Python semantic completer if the currently active file is a Python one and on the Clang completer if the currently active file is a C/C++/Objective-C one. You may also want to map the subcommands to something less verbose; for instance, nnoremap <leader>jd :YcmCompleter GoTo<CR> maps the <leader>jd sequence to the longer subcommand invocation. GoTo Commands These commands are useful for jumping around and exploring code. When moving the cursor, the subcommands add entries to Vim's jumplist so you can use CTRL-O to jump back to where you where before invoking the command (and CTRL-I to jump forward; see :h jumplist for details). If there is more than one destination, the quickfix list (see :h quickfix) is populated with the available locations and opened to full width at the bottom of the screen. You can change this behavior by using the YcmQuickFixOpened autocommand. The GoToInclude subcommand Looks up the current line for a header and jumps to it. Supported in filetypes: c, cpp, objc, objcpp The GoToDeclaration subcommand Looks up the symbol under the cursor and jumps to its declaration. Supported in filetypes: c, cpp, objc, objcpp, cs, go, python, rust The GoToDefinition subcommand Looks up the symbol under the cursor and jumps to its definition. NOTE: For C-family languages this only works in certain situations, namely when the definition of the symbol is in the current translation unit. A translation unit consists of the file you are editing and all the files you are including with #include directives (directly or indirectly) in that file. Supported in filetypes: c, cpp, objc, objcpp, cs, go, javascript, python, rust, typescript The GoTo subcommand This command tries to perform the ""most sensible"" GoTo operation it can. Currently, this means that it tries to look up the symbol under the cursor and jumps to its definition if possible; if the definition is not accessible from the current translation unit, jumps to the symbol's declaration. For C/C++/Objective-C, it first tries to look up the current line for a header and jump to it. For C#, implementations are also considered and preferred. Supported in filetypes: c, cpp, objc, objcpp, cs, go, javascript, python, rust The GoToImprecise subcommand WARNING: This command trades correctness for speed! Same as the GoTo command except that it doesn't recompile the file with libclang before looking up nodes in the AST. This can be very useful when you're editing files that take long to compile but you know that you haven't made any changes since the last parse that would lead to incorrect jumps. When you're just browsing around your codebase, this command can spare you quite a bit of latency. Supported in filetypes: c, cpp, objc, objcpp The GoToReferences subcommand This command attempts to find all of the references within the project to the identifier under the cursor and populates the quickfix list with those locations. Supported in filetypes: javascript, python, typescript The GoToImplementation subcommand Looks up the symbol under the cursor and jumps to its implementation (i.e. non-interface). If there are multiple implementations, instead provides a list of implementations to choose from. Supported in filetypes: cs The GoToImplementationElseDeclaration subcommand Looks up the symbol under the cursor and jumps to its implementation if one, else jump to its declaration. If there are multiple implementations, instead provides a list of implementations to choose from. Supported in filetypes: cs Semantic Information Commands These commands are useful for finding static information about the code, such as the types of variables, viewing declarations and documentation strings. The GetType subcommand Echos the type of the variable or method under the cursor, and where it differs, the derived type. For example:     std::string s;  Invoking this command on s returns std::string => std::basic_string<char> NOTE: Due to limitations of libclang, invoking this command on the word auto typically returns auto. However, invoking it on a usage of the variable with inferred type returns the correct type, but typically it is repeated due to libclang returning that the types differ. For example: const char *s = ""String""; auto x = &s; // invoking on x or auto returns ""auto"";              // invoking on s returns ""const char *"" std::cout << *x; // invoking on x returns ""const char ** => const char **""  NOTE: Causes re-parsing of the current translation unit. Supported in filetypes: c, cpp, objc, objcpp, javascript, typescript The GetParent subcommand Echos the semantic parent of the point under the cursor. The semantic parent is the item that semantically contains the given position. For example: class C {     void f(); };  void C::f() {  }  In the out-of-line definition of C::f, the semantic parent is the class C, of which this function is a member. In the example above, both declarations of C::f have C as their semantic context, while the lexical context of the first C::f is C and the lexical context of the second C::f is the translation unit. For global declarations, the semantic parent is the translation unit. NOTE: Causes re-parsing of the current translation unit. Supported in filetypes: c, cpp, objc, objcpp The GetDoc subcommand Displays the preview window populated with quick info about the identifier under the cursor. Depending on the file type, this includes things like: The type or declaration of identifier, Doxygen/javadoc comments, Python docstrings, etc. Supported in filetypes: c, cpp, objc, objcpp, cs, python, typescript, javascript Refactoring and FixIt Commands These commands make changes to your source code in order to perform refactoring or code correction. YouCompleteMe does not perform any action which cannot be undone, and never saves or writes files to the disk. The FixIt subcommand Where available, attempts to make changes to the buffer to correct the diagnostic closest to the cursor position. Completers which provide diagnostics may also provide trivial modifications to the source in order to correct the diagnostic. Examples include syntax errors such as missing trailing semi-colons, spurious characters, or other errors which the semantic engine can deterministically suggest corrections. If no fix-it is available for the current line, or there is no diagnostic on the current line, this command has no effect on the current buffer. If any modifications are made, the number of changes made to the buffer is echo'd and the user may use the editor's undo command to revert. When a diagnostic is available, and g:ycm_echo_current_diagnostic is set to 1, then the text (FixIt) is appended to the echo'd diagnostic when the completer is able to add this indication. The text (FixIt available) is also appended to the diagnostic text in the output of the :YcmDiags command for any diagnostics with available fix-its (where the completer can provide this indication). NOTE: Causes re-parsing of the current translation unit. NOTE: After applying a fix-it, the diagnostics UI is not immediately updated. This is due to a technical restriction in Vim. Moving the cursor, or issuing the :YcmForceCompileAndDiagnostics command will refresh the diagnostics. Repeated invocations of the FixIt command on a given line, however, do apply all diagnostics as expected without requiring refreshing of the diagnostics UI. This is particularly useful where there are multiple diagnostics on one line, or where after fixing one diagnostic, another fix-it is available. Supported in filetypes: c, cpp, objc, objcpp, cs The RefactorRename <new name> subcommand In supported file types, this command attempts to perform a semantic rename of the identifier under the cursor. This includes renaming declarations, definitions and usages of the identifier, or any other language-appropriate action. The specific behavior is defined by the semantic engine in use. Similar to FixIt, this command applies automatic modifications to your source files. Rename operations may involve changes to multiple files, which may or may not be open in Vim buffers at the time. YouCompleteMe handles all of this for you. The behavior is described in the following section. Supported in filetypes: javascript (variables only), typescript Multi-file Refactor When a Refactor or FixIt command touches multiple files, YouCompleteMe attempts to apply those modifications to any existing open, visible buffer in the current tab. If no such buffer can be found, YouCompleteMe opens the file in a new small horizontal split at the top of the current window, applies the change, and then hides the window. NOTE: The buffer remains open, and must be manually saved. A confirmation dialog is opened prior to doing this to remind you that this is about to happen. Once the modifications have been made, the quickfix list (see :help quickfix) is opened and populated with the locations of all modifications. This can be used to review all automatic changes made. Typically, use the CTRL-W <enter> combination to open the selected file in a new split. It is possible to customize how the quickfix window is opened by using the YcmQuickFixOpened autocommand. The buffers are not saved automatically. That is, you must save the modified buffers manually after reviewing the changes from the quickfix list. Changes can be undone using Vim's powerful undo features (see :help undo). Note that Vim's undo is per-buffer, so to undo all changes, the undo commands must be applied in each modified buffer separately. NOTE: While applying modifications, Vim may find files which are already open and have a swap file. The command is aborted if you select Abort or Quit in any such prompts. This leaves the Refactor operation partially complete and must be manually corrected using Vim's undo features. The quickfix list is not populated in this case. Inspect :buffers or equivalent (see :help buffers) to see the buffers that were opened by the command. Miscellaneous Commands These commands are for general administration, rather than IDE-like features. They cover things like the semantic engine server instance and compilation flags. The ClearCompilationFlagCache subcommand YCM caches the flags it gets from the FlagsForFile function in your ycm_extra_conf.py file if you return them with the do_cache parameter set to True. The cache is in memory and is never invalidated (unless you restart Vim of course). This command clears that cache entirely. YCM will then re-query your FlagsForFile function as needed in the future. Supported in filetypes: c, cpp, objc, objcpp The StartServer subcommand Starts the semantic-engine-as-localhost-server for those semantic engines that work as separate servers that YCM talks to. Supported in filetypes: cs, go, javascript, rust The StopServer subcommand Stops the semantic-engine-as-localhost-server for those semantic engines that work as separate servers that YCM talks to. Supported in filetypes: cs, go, javascript, rust The RestartServer subcommand Restarts the semantic-engine-as-localhost-server for those semantic engines that work as separate servers that YCM talks to. An additional optional argument may be supplied for Python, specifying the python binary to use to restart the Python semantic engine. :YcmCompleter RestartServer /usr/bin/python3.4  Supported in filetypes: cs, python, rust The ReloadSolution subcommand Instruct the Omnisharp server to clear its cache and reload all files from disk. This is useful when files are added, removed, or renamed in the solution, files are changed outside of Vim, or whenever Omnisharp cache is out-of-sync. Supported in filetypes: cs Functions The youcompleteme#GetErrorCount function Get the number of YCM Diagnostic errors. If no errors are present, this function returns 0. For example:   call youcompleteme#GetErrorCount()  Both this function and youcompleteme#GetWarningCount can be useful when integrating YCM with other Vim plugins. For example, a lightline user could add a diagnostics section to their statusline which would display the number of errors and warnings. The youcompleteme#GetWarningCount function Get the number of YCM Diagnostic warnings. If no warnings are present, this function returns 0. For example:   call youcompleteme#GetWarningCount()  Autocommands The YcmQuickFixOpened autocommand This User autocommand is fired when YCM opens the quickfix window in response to the GoTo* and RefactorRename subcommands. By default, the quickfix window is opened to full width at the bottom of the screen and its height is set to fit all entries. This behavior can be overridden by using the YcmQuickFixOpened autocommand. For instance: function s:CustomizeYcmQuickFixWindow()   "" Move the window at the top of the screen.   execute ""wincmd K""   "" Set the window height to 5.   execute ""5wincmd _"" endfunction  autocmd User YcmQuickFixOpened call s:CustomizeYcmQuickFixWindow()  Options All options have reasonable defaults so if the plug-in works after installation you don't need to change any options. These options can be configured in your vimrc script by including a line like this: let g:ycm_min_num_of_chars_for_completion = 1  Note that after changing an option in your vimrc script you have to restart Vim for the changes to take effect. The g:ycm_min_num_of_chars_for_completion option This option controls the number of characters the user needs to type before identifier-based completion suggestions are triggered. For example, if the option is set to 2, then when the user types a second alphanumeric character after a whitespace character, completion suggestions will be triggered. This option is NOT used for semantic completion. Setting this option to a high number like 99 effectively turns off the identifier completion engine and just leaves the semantic engine. Default: 2 let g:ycm_min_num_of_chars_for_completion = 2  The g:ycm_min_num_identifier_candidate_chars option This option controls the minimum number of characters that a completion candidate coming from the identifier completer must have to be shown in the popup menu. A special value of 0 means there is no limit. NOTE: This option only applies to the identifier completer; it has no effect on the various semantic completers. Default: 0 let g:ycm_min_num_identifier_candidate_chars = 0  The g:ycm_auto_trigger option When set to 0, this option turns off YCM's identifier completer (the as-you-type popup) and the semantic triggers (the popup you'd get after typing . or -> in say C++). You can still force semantic completion with the <C-Space> shortcut. If you want to just turn off the identifier completer but keep the semantic triggers, you should set g:ycm_min_num_of_chars_for_completion to a high number like 99. Default: 1 let g:ycm_auto_trigger = 1  The g:ycm_filetype_whitelist option This option controls for which Vim filetypes (see :h filetype) should YCM be turned on. The option value should be a Vim dictionary with keys being filetype strings (like python, cpp etc) and values being unimportant (the dictionary is used like a hash set, meaning that only the keys matter). The * key is special and matches all filetypes. By default, the whitelist contains only this * key. YCM also has a g:ycm_filetype_blacklist option that lists filetypes for which YCM shouldn't be turned on. YCM will work only in filetypes that both the whitelist and the blacklist allow (the blacklist ""allows"" a filetype by not having it as a key). For example, let's assume you want YCM to work in files with the cpp filetype. The filetype should then be present in the whitelist either directly (cpp key in the whitelist) or indirectly through the special * key. It should not be present in the blacklist. Filetypes that are blocked by the either of the lists will be completely ignored by YCM, meaning that neither the identifier-based completion engine nor the semantic engine will operate in them. You can get the filetype of the current file in Vim with :set ft?. Default: {'*' : 1} let g:ycm_filetype_whitelist = { '*': 1 }  The g:ycm_filetype_blacklist option This option controls for which Vim filetypes (see :h filetype) should YCM be turned off. The option value should be a Vim dictionary with keys being filetype strings (like python, cpp etc) and values being unimportant (the dictionary is used like a hash set, meaning that only the keys matter). See the g:ycm_filetype_whitelist option for more details on how this works. Default: [see next line] let g:ycm_filetype_blacklist = {       \ 'tagbar' : 1,       \ 'qf' : 1,       \ 'notes' : 1,       \ 'markdown' : 1,       \ 'unite' : 1,       \ 'text' : 1,       \ 'vimwiki' : 1,       \ 'pandoc' : 1,       \ 'infolog' : 1,       \ 'mail' : 1       \}  The g:ycm_filetype_specific_completion_to_disable option This option controls for which Vim filetypes (see :h filetype) should the YCM semantic completion engine be turned off. The option value should be a Vim dictionary with keys being filetype strings (like python, cpp etc) and values being unimportant (the dictionary is used like a hash set, meaning that only the keys matter). The listed filetypes will be ignored by the YCM semantic completion engine, but the identifier-based completion engine will still trigger in files of those filetypes. Note that even if semantic completion is not turned off for a specific filetype, you will not get semantic completion if the semantic engine does not support that filetype. You can get the filetype of the current file in Vim with :set ft?. Default: [see next line] let g:ycm_filetype_specific_completion_to_disable = {       \ 'gitcommit': 1       \}  The g:ycm_show_diagnostics_ui option When set, this option turns on YCM's diagnostic display features. See the Diagnostic display section in the User Manual for more details. Specific parts of the diagnostics UI (like the gutter signs, text highlighting, diagnostic echo and auto location list population) can be individually turned on or off. See the other options below for details. Note that YCM's diagnostics UI is only supported for C-family languages. When set, this option also makes YCM remove all Syntastic checkers set for the c, cpp, objc and objcpp filetypes since this would conflict with YCM's own diagnostics UI. If you're using YCM's identifier completer in C-family languages but cannot use the clang-based semantic completer for those languages and want to use the GCC Syntastic checkers, unset this option. Default: 1 let g:ycm_show_diagnostics_ui = 1  The g:ycm_error_symbol option YCM will use the value of this option as the symbol for errors in the Vim gutter. This option is part of the Syntastic compatibility layer; if the option is not set, YCM will fall back to the value of the g:syntastic_error_symbol option before using this option's default. Default: >> let g:ycm_error_symbol = '>>'  The g:ycm_warning_symbol option YCM will use the value of this option as the symbol for warnings in the Vim gutter. This option is part of the Syntastic compatibility layer; if the option is not set, YCM will fall back to the value of the g:syntastic_warning_symbol option before using this option's default. Default: >> let g:ycm_warning_symbol = '>>'  The g:ycm_enable_diagnostic_signs option When this option is set, YCM will put icons in Vim's gutter on lines that have a diagnostic set. Turning this off will also turn off the YcmErrorLine and YcmWarningLine highlighting. This option is part of the Syntastic compatibility layer; if the option is not set, YCM will fall back to the value of the g:syntastic_enable_signs option before using this option's default. Default: 1 let g:ycm_enable_diagnostic_signs = 1  The g:ycm_enable_diagnostic_highlighting option When this option is set, YCM will highlight regions of text that are related to the diagnostic that is present on a line, if any. This option is part of the Syntastic compatibility layer; if the option is not set, YCM will fall back to the value of the g:syntastic_enable_highlighting option before using this option's default. Default: 1 let g:ycm_enable_diagnostic_highlighting = 1  The g:ycm_echo_current_diagnostic option When this option is set, YCM will echo the text of the diagnostic present on the current line when you move your cursor to that line. If a FixIt is available for the current diagnostic, then (FixIt) is appended. This option is part of the Syntastic compatibility layer; if the option is not set, YCM will fall back to the value of the g:syntastic_echo_current_error option before using this option's default. Default: 1 let g:ycm_echo_current_diagnostic = 1  The g:ycm_always_populate_location_list option When this option is set, YCM will populate the location list automatically every time it gets new diagnostic data. This option is off by default so as not to interfere with other data you might have placed in the location list. See :help location-list in Vim to learn more about the location list. This option is part of the Syntastic compatibility layer; if the option is not set, YCM will fall back to the value of the g:syntastic_always_populate_loc_list option before using this option's default. Default: 0 let g:ycm_always_populate_location_list = 0  The g:ycm_open_loclist_on_ycm_diags option When this option is set, :YcmDiags will automatically open the location list after forcing a compilation and filling the list with diagnostic data. See :help location-list in Vim to learn more about the location list. Default: 1 let g:ycm_open_loclist_on_ycm_diags = 1  The g:ycm_allow_changing_updatetime option When this option is set to 1, YCM will change the updatetime Vim option to 2000 (see :h updatetime). This may conflict with some other plugins you have (but it's unlikely). The updatetime option is the number of milliseconds that have to pass before Vim's CursorHold (see :h CursorHold) event fires. YCM runs the completion engines' ""file comprehension"" systems in the background on every such event; the identifier-based engine collects the identifiers whereas the semantic engine compiles the file to build an AST. The Vim default of 4000 for updatetime is a bit long, so YCM reduces this. Set this option to 0 to force YCM to leave your updatetime setting alone. Default: 1 let g:ycm_allow_changing_updatetime = 1  The g:ycm_complete_in_comments option When this option is set to 1, YCM will show the completion menu even when typing inside comments. Default: 0 let g:ycm_complete_in_comments = 0  The g:ycm_complete_in_strings option When this option is set to 1, YCM will show the completion menu even when typing inside strings. Note that this is turned on by default so that you can use the filename completion inside strings. This is very useful for instance in C-family files where typing #include "" will trigger the start of filename completion. If you turn off this option, you will turn off filename completion in such situations as well. Default: 1 let g:ycm_complete_in_strings = 1  The g:ycm_collect_identifiers_from_comments_and_strings option When this option is set to 1, YCM's identifier completer will also collect identifiers from strings and comments. Otherwise, the text in comments and strings will be ignored. Default: 0 let g:ycm_collect_identifiers_from_comments_and_strings = 0  The g:ycm_collect_identifiers_from_tags_files option When this option is set to 1, YCM's identifier completer will also collect identifiers from tags files. The list of tags files to examine is retrieved from the tagfiles() Vim function which examines the tags Vim option. See :h 'tags' for details. YCM will re-index your tags files if it detects that they have been modified. The only supported tag format is the Exuberant Ctags format. The format from ""plain"" ctags is NOT supported. Ctags needs to be called with the --fields=+l option (that's a lowercase L, not a one) because YCM needs the language:<lang> field in the tags output. See the FAQ for pointers if YCM does not appear to read your tag files. This option is off by default because it makes Vim slower if your tags are on a network directory. Default: 0 let g:ycm_collect_identifiers_from_tags_files = 0  The g:ycm_seed_identifiers_with_syntax option When this option is set to 1, YCM's identifier completer will seed its identifier database with the keywords of the programming language you're writing. Since the keywords are extracted from the Vim syntax file for the filetype, all keywords may not be collected, depending on how the syntax file was written. Usually at least 95% of the keywords are successfully extracted. Default: 0 let g:ycm_seed_identifiers_with_syntax = 0  The g:ycm_extra_conf_vim_data option If you're using semantic completion for C-family files, this option might come handy; it's a way of sending data from Vim to your FlagsForFile function in your .ycm_extra_conf.py file. This option is supposed to be a list of VimScript expression strings that are evaluated for every request to the ycmd server and then passed to your FlagsForFile function as a client_data keyword argument. For instance, if you set this option to ['v:version'], your FlagsForFile function will be called like this: # The '704' value is of course contingent on Vim 7.4; in 7.3 it would be '703' FlagsForFile(filename, client_data = {'v:version': 704})  So the client_data parameter is a dictionary mapping Vim expression strings to their values at the time of the request. The correct way to define parameters for your FlagsForFile function: def FlagsForFile(filename, **kwargs):  You can then get to client_data with kwargs['client_data']. Default: [] let g:ycm_extra_conf_vim_data = []  The g:ycm_server_python_interpreter option YCM will by default search for an appropriate Python interpreter on your system. You can use this option to override that behavior and force the use of a specific interpreter of your choosing. NOTE: This interpreter is only used for the ycmd server. The YCM client running inside Vim always uses the Python interpreter that's embedded inside Vim. Default: '' let g:ycm_server_python_interpreter = ''  The g:ycm_server_keep_logfiles option When this option is set to 1, the ycmd completion server will keep the logfiles around after shutting down (they are deleted on shutdown by default). To see where the logfiles are, call :YcmDebugInfo. Default: 0 let g:ycm_server_keep_logfiles = 0  The g:ycm_server_log_level option The logging level that the ycmd completion server uses. Valid values are the following, from most verbose to least verbose: - debug - info - warning - error - critical Note that debug is very verbose. Default: info let g:ycm_server_log_level = 'info'  The g:ycm_auto_start_csharp_server option When set to 1, the OmniSharp server will be automatically started (once per Vim session) when you open a C# file. Default: 1 let g:ycm_auto_start_csharp_server = 1  The g:ycm_auto_stop_csharp_server option When set to 1, the OmniSharp server will be automatically stopped upon closing Vim. Default: 1 let g:ycm_auto_stop_csharp_server = 1  The g:ycm_csharp_server_port option When g:ycm_auto_start_csharp_server is set to 1, specifies the port for the OmniSharp server to listen on. When set to 0 uses an unused port provided by the OS. Default: 0 let g:ycm_csharp_server_port = 0  The g:ycm_csharp_insert_namespace_expr option By default, when YCM inserts a namespace, it will insert the using statement under the nearest using statement. You may prefer that the using statement is inserted somewhere, for example, to preserve sorting. If so, you can set this option to override this behavior. When this option is set, instead of inserting the using statement itself, YCM will set the global variable g:ycm_namespace_to_insert to the namespace to insert, and then evaluate this option's value as an expression. The option's expression is responsible for inserting the namespace - the default insertion will not occur. Default: '' let g:ycm_csharp_insert_namespace_expr = ''  The g:ycm_add_preview_to_completeopt option When this option is set to 1, YCM will add the preview string to Vim's completeopt option (see :h completeopt). If your completeopt option already has preview set, there will be no effect. You can see the current state of your completeopt setting with :set completeopt? (yes, the question mark is important). When preview is present in completeopt, YCM will use the preview window at the top of the file to store detailed information about the current completion candidate (but only if the candidate came from the semantic engine). For instance, it would show the full function prototype and all the function overloads in the window if the current completion is a function name. Default: 0 let g:ycm_add_preview_to_completeopt = 0  The g:ycm_autoclose_preview_window_after_completion option When this option is set to 1, YCM will auto-close the preview window after the user accepts the offered completion string. If there is no preview window triggered because there is no preview string in completeopt, this option is irrelevant. See the g:ycm_add_preview_to_completeopt option for more details. Default: 0 let g:ycm_autoclose_preview_window_after_completion = 0  The g:ycm_autoclose_preview_window_after_insertion option When this option is set to 1, YCM will auto-close the preview window after the user leaves insert mode. This option is irrelevant if g:ycm_autoclose_preview_window_after_completion is set or if no preview window is triggered. See the g:ycm_add_preview_to_completeopt option for more details. Default: 0 let g:ycm_autoclose_preview_window_after_insertion = 0  The g:ycm_max_diagnostics_to_display option This option controls the maximum number of diagnostics shown to the user when errors or warnings are detected in the file. This option is only relevant if you are using the C-family semantic completion engine. Default: 30 let g:ycm_max_diagnostics_to_display = 30  The g:ycm_key_list_select_completion option This option controls the key mappings used to select the first completion string. Invoking any of them repeatedly cycles forward through the completion list. Some users like adding <Enter> to this list. Default: ['<TAB>', '<Down>'] let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']  The g:ycm_key_list_previous_completion option This option controls the key mappings used to select the previous completion string. Invoking any of them repeatedly cycles backwards through the completion list. Note that one of the defaults is <S-TAB> which means Shift-TAB. That mapping will probably only work in GUI Vim (Gvim or MacVim) and not in plain console Vim because the terminal usually does not forward modifier key combinations to Vim. Default: ['<S-TAB>', '<Up>'] let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']  The g:ycm_key_invoke_completion option This option controls the key mapping used to invoke the completion menu for semantic completion. By default, semantic completion is trigged automatically after typing ., -> and :: in insert mode (if semantic completion support has been compiled in). This key mapping can be used to trigger semantic completion anywhere. Useful for searching for top-level functions and classes. Console Vim (not Gvim or MacVim) passes <Nul> to Vim when the user types <C-Space> so YCM will make sure that <Nul> is used in the map command when you're editing in console Vim, and <C-Space> in GUI Vim. This means that you can just press <C-Space> in both console and GUI Vim and YCM will do the right thing. Setting this option to an empty string will make sure no mapping is created. Default: <C-Space> let g:ycm_key_invoke_completion = '<C-Space>'  The g:ycm_key_detailed_diagnostics option This option controls the key mapping used to show the full diagnostic text when the user's cursor is on the line with the diagnostic. It basically calls :YcmShowDetailedDiagnostic. Setting this option to an empty string will make sure no mapping is created. Default: <leader>d let g:ycm_key_detailed_diagnostics = '<leader>d'  The g:ycm_global_ycm_extra_conf option Normally, YCM searches for a .ycm_extra_conf.py file for compilation flags (see the User Guide for more details on how this works). This option specifies a fallback path to a config file which is used if no .ycm_extra_conf.py is found. You can place such a global file anywhere in your filesystem. Default: '' let g:ycm_global_ycm_extra_conf = ''  The g:ycm_confirm_extra_conf option When this option is set to 1 YCM will ask once per .ycm_extra_conf.py file if it is safe to be loaded. This is to prevent execution of malicious code from a .ycm_extra_conf.py file you didn't write. To selectively get YCM to ask/not ask about loading certain .ycm_extra_conf.py files, see the g:ycm_extra_conf_globlist option. Default: 1 let g:ycm_confirm_extra_conf = 1  The g:ycm_extra_conf_globlist option This option is a list that may contain several globbing patterns. If a pattern starts with a ! all .ycm_extra_conf.py files matching that pattern will be blacklisted, that is they won't be loaded and no confirmation dialog will be shown. If a pattern does not start with a ! all files matching that pattern will be whitelisted. Note that this option is not used when confirmation is disabled using g:ycm_confirm_extra_conf and that items earlier in the list will take precedence over the later ones. Rules: * matches everything ? matches any single character [seq] matches any character in seq [!seq] matches any char not in seq Example: let g:ycm_extra_conf_globlist = ['~/dev/*','!~/*']  The first rule will match everything contained in the ~/dev directory so .ycm_extra_conf.py files from there will be loaded. The second rule will match everything in the home directory so a .ycm_extra_conf.py file from there won't be loaded. As the first rule takes precedence everything in the home directory excluding the ~/dev directory will be blacklisted. NOTE: The glob pattern is first expanded with Python's os.path.expanduser() and then resolved with os.path.abspath() before being matched against the filename. Default: [] let g:ycm_extra_conf_globlist = []  The g:ycm_filepath_completion_use_working_dir option By default, YCM's filepath completion will interpret relative paths like ../ as being relative to the folder of the file of the currently active buffer. Setting this option will force YCM to always interpret relative paths as being relative to Vim's current working directory. Default: 0 let g:ycm_filepath_completion_use_working_dir = 0  The g:ycm_semantic_triggers option This option controls the character-based triggers for the various semantic completion engines. The option holds a dictionary of key-values, where the keys are Vim's filetype strings delimited by commas and values are lists of strings, where the strings are the triggers. Setting key-value pairs on the dictionary adds semantic triggers to the internal default set (listed below). You cannot remove the default triggers, only add new ones. A ""trigger"" is a sequence of one or more characters that trigger semantic completion when typed. For instance, C++ (cpp filetype) has . listed as a trigger. So when the user types foo., the semantic engine will trigger and serve foo's list of member functions and variables. Since C++ also has -> listed as a trigger, the same thing would happen when the user typed foo->. It's also possible to use a regular expression as a trigger. You have to prefix your trigger with re! to signify it's a regex trigger. For instance, re!\w+\. would only trigger after the \w+\. regex matches. NOTE: The regex syntax is NOT Vim's, it's Python's. Default: [see next line] let g:ycm_semantic_triggers =  {   \   'c' : ['->', '.'],   \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',   \             're!\[.*\]\s'],   \   'ocaml' : ['.', '#'],   \   'cpp,objcpp' : ['->', '.', '::'],   \   'perl' : ['->'],   \   'php' : ['->', '::'],   \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],   \   'ruby' : ['.', '::'],   \   'lua' : ['.', ':'],   \   'erlang' : [':'],   \ }  The g:ycm_cache_omnifunc option Some omnicompletion engines do not work well with the YCM cache—in particular, they might not produce all possible results for a given prefix. By unsetting this option you can ensure that the omnicompletion engine is re-queried on every keypress. That will ensure all completions will be presented, but might cause stuttering and lagginess if the omnifunc is slow. Default: 1 let g:ycm_cache_omnifunc = 1  The g:ycm_use_ultisnips_completer option By default, YCM will query the UltiSnips plugin for possible completions of snippet triggers. This option can turn that behavior off. Default: 1 let g:ycm_use_ultisnips_completer = 1  The g:ycm_goto_buffer_command option Defines where GoTo* commands result should be opened. Can take one of the following values: [ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab', 'new-or-existing-tab' ] If this option is set to the 'same-buffer' but current buffer can not be switched (when buffer is modified and nohidden option is set), then result will be opened in horizontal split. Default: 'same-buffer' let g:ycm_goto_buffer_command = 'same-buffer'  The g:ycm_disable_for_files_larger_than_kb option Defines the max size (in Kb) for a file to be considered for completion. If this option is set to 0 then no check is made on the size of the file you're opening. Default: 1000 let g:ycm_disable_for_files_larger_than_kb = 1000  The g:ycm_python_binary_path option This option specifies the Python interpreter to use to run the jedi completion library. Specify the Python interpreter to use to get completions. By default the Python under which ycmd runs is used (ycmd runs on Python 2.6, 2.7 or 3.3+). Default: '' let g:ycm_python_binary_path = 'python'  NOTE: the settings above will make YCM use the first python executable found through the PATH. FAQ I used to be able to import vim in .ycm_extra_conf.py, but now can't YCM was rewritten to use a client-server architecture where most of the logic is in the ycmd server. So the magic vim module you could have previously imported in your .ycm_extra_conf.py files doesn't exist anymore. To be fair, importing the magic vim module in extra conf files was never supported in the first place; it only ever worked by accident and was never a part of the extra conf API. But fear not, you should be able to tweak your extra conf files to continue working by using the g:ycm_extra_conf_vim_data option. See the docs on that option for details. On very rare occasions Vim crashes when I tab through the completion menu That's a very rare Vim bug most users never encounter. It's fixed in Vim 7.4.72. Update to that version (or above) to resolve the issue. I get ImportError exceptions that mention PyInit_ycm_core or initycm_core These errors are caused by building the YCM native libraries for Python 2 and trying to load them into a Python 3 process (or the other way around). For instance, if building for Python 2 but loading in Python 3: ImportError: dynamic module does not define init function (PyInit_ycm_core)  If building for Python 3 but loading in Python 2: ImportError: dynamic module does not define init function (initycm_core)  Setting the g:ycm_server_python_interpreter option to force the use of a specific Python interpreter for ycmd is usually the easiest way to solve the problem. Common values for that option are /usr/bin/python and /usr/bin/python3. I get a linker warning regarding libpython on Mac when compiling YCM If the warning is ld: warning: path '/usr/lib/libpython2.7.dylib' following -L not a directory, then feel free to ignore it; it's caused by a limitation of CMake and is not an issue. Everything should still work fine. I get a weird window at the top of my file when I use the semantic engine This is Vim's preview window. Vim uses it to show you extra information about something if such information is available. YCM provides Vim with such extra information. For instance, when you select a function in the completion list, the preview window will hold that function's prototype and the prototypes of any overloads of the function. It will stay there after you select the completion so that you can use the information about the parameters and their types to write the function call. If you would like this window to auto-close after you select a completion string, set the g:ycm_autoclose_preview_window_after_completion option to 1 in your vimrc file. Similarly, the g:ycm_autoclose_preview_window_after_insertion option can be set to close the preview window after leaving insert mode. If you don't want this window to ever show up, add set completeopt-=preview to your vimrc. Also make sure that the g:ycm_add_preview_to_completeopt option is set to 0. It appears that YCM is not working In Vim, run :messages and carefully read the output. YCM will echo messages to the message log if it encounters problems. It's likely you misconfigured something and YCM is complaining about it. Also, you may want to run the :YcmDebugInfo command; it will make YCM spew out various debugging information, including the ycmd logfile paths and the compile flags for the current file if the file is a C-family language file and you have compiled in Clang support. Logfiles can be automatically opened in the editor using the :YcmToggleLogs command. Sometimes it takes much longer to get semantic completions than normal This means that libclang (which YCM uses for C-family semantic completion) failed to pre-compile your file's preamble. In other words, there was an error compiling some of the source code you pulled in through your header files. I suggest calling the :YcmDiags command to see what they were. Bottom line, if libclang can't pre-compile your file's preamble because there were errors in it, you're going to get slow completions because there's no AST cache. YCM auto-inserts completion strings I don't want! This means you probably have some mappings that interfere with YCM's internal ones. Make sure you don't have something mapped to <C-p>, <C-x> or <C-u> (in insert mode). YCM never selects something for you; it just shows you a menu and the user has to explicitly select something. If something is being selected automatically, this means there's a bug or a misconfiguration somewhere. I get a E227: mapping already exists for <blah> error when I start Vim This means that YCM tried to set up a key mapping but failed because you already had something mapped to that key combination. The <blah> part of the message will tell you what was the key combination that failed. Look in the Options section and see if any of the default mappings conflict with your own. Then change that option value to something else so that the conflict goes away. I get 'GLIBC_2.XX' not found (required by libclang.so) when starting Vim Your system is too old for the precompiled binaries from llvm.org. Compile Clang on your machine and then link against the libclang.so you just produced. See the full installation guide for help. I'm trying to use a Homebrew Vim with YCM and I'm getting segfaults Something (I don't know what) is wrong with the way that Homebrew configures and builds Vim. I recommend using MacVim. Even if you don't like the MacVim GUI, you can use the Vim binary that is inside the MacVim.app package (it's MacVim.app/Contents/MacOS/Vim) and get the Vim console experience. I have a Homebrew Python and/or MacVim; can't compile/SIGABRT when starting You should probably run brew rm python; brew install python to get the latest fixes that should make YCM work with such a configuration. Also rebuild Macvim then. If you still get problems with this, see issue #18 for suggestions. Vim segfaults when I use the semantic completer in Ruby files This was caused by a Vim bug. Update your version of Vim (Vim 7.3.874 is known to work, earlier versions may also fix this issue). I get LONG_BIT definition appears wrong for platform when compiling Look at the output of your CMake call. There should be a line in it like the following (with .dylib in place of .so on a Mac): -- Found PythonLibs: /usr/lib/libpython2.7.so (Required is at least version ""2.5"")  That would be the correct output. An example of incorrect output would be the following: -- Found PythonLibs: /usr/lib/libpython2.7.so (found suitable version ""2.5.1"", minimum required is ""2.5"")  Notice how there's an extra bit of output there, the found suitable version ""<version>"" part, where <version> is not the same as the version of the dynamic library. In the example shown, the library is version 2.7 but the second string is version 2.5.1. This means that CMake found one version of Python headers and a different version for the library. This is wrong. It can happen when you have multiple versions of Python installed on your machine. You should probably add the following flags to your cmake call (again, dylib instead of so on a Mac): -DPYTHON_INCLUDE_DIR=/usr/include/python2.7 -DPYTHON_LIBRARY=/usr/lib/libpython2.7.so  This will force the paths to the Python include directory and the Python library to use. You may need to set these flags to something else, but you need to make sure you use the same version of Python that your Vim binary is built against, which is highly likely to be the system's default Python. I get libpython2.7.a [...] relocation R_X86_64_32 when compiling The error is usually encountered when compiling YCM on Centos or RHEL. The full error looks something like the following: /usr/bin/ld: /usr/local/lib/libpython2.7.a(abstract.o): relocation R_X86_64_32 against `a local symbol' can not be used when making a shared object; recompile with -fPIC  It's possible to get a slightly different error that's similar to the one above. Here's the problem and how you solve it: Your libpython2.7.a was not compiled with -fPIC so it can't be linked into ycm_core.so. Use the -DPYTHON_LIBRARY= CMake flag to point it to a .so version of libpython on your machine (for instance, -DPYTHON_LIBRARY=/usr/lib/libpython2.7.so). Naturally, this means you'll have to go through the full installation guide by hand. I get Vim: Caught deadly signal SEGV on Vim startup This can happen on some Linux distros. If you encounter this situation, run Vim under gdb. You'll probably see something like this in the output when Vim crashes: undefined symbol: clang_CompileCommands_dispose  This means that Vim is trying to load a libclang.so that is too old. You need at least a 3.8 libclang. Just go through the installation guide and make sure you are using a correct libclang.so. We recommend downloading prebuilt binaries from llvm.org. I get Fatal Python error: PyThreadState_Get: no current thread on startup This is caused by linking a static version of libpython into ycmd's ycm_core.so. This leads to multiple copies of the python interpreter loaded when python loads ycmd_core.so and this messes up python's global state. The details aren't important. The solution is that the version of Python linked and run against must be built with either --enable-shared or --enable-framework (on OS X). This is achieved as follows (NOTE: for Mac, replace --enable-shared with --enable-framework): When building python from source: ./configure --enable-shared {options} When building python from pyenv: PYTHON_CONFIGURE_OPTS=""--enable-shared"" pyenv install {version} install.py says python must be compiled with --enable-framework. Wat? See the previous answer for how to ensure your python is built to support dynamic modules. YCM does not read identifiers from my tags files First, put let g:ycm_collect_identifiers_from_tags_files = 1 in your vimrc. Make sure you are using Exuberant Ctags to produce your tags files since the only supported tag format is the Exuberant Ctags format. The format from ""plain"" ctags is NOT supported. The output of ctags --version should list ""Exuberant Ctags"". Ctags needs to be called with the --fields=+l (that's a lowercase L, not a one) option because YCM needs the language:<lang> field in the tags output. NOTE: Exuberant Ctags by default sets language tag for *.h files as C++. If you have C (not C++) project, consider giving parameter --langmap=c:.c.h to ctags to see tags from *.h files. NOTE: Mac OS X comes with ""plain"" ctags installed by default. brew install ctags will get you the Exuberant Ctags version. Also make sure that your Vim tags option is set correctly. See :h 'tags' for details. If you want to see which tag files YCM will read for a given buffer, run :echo tagfiles() with the relevant buffer active. Note that that function will only list tag files that already exist. CTRL-U in insert mode does not work YCM keeps you in a completefunc completion mode when you're typing in insert mode and Vim disables <C-U> in completion mode as a ""feature."" Sadly there's nothing I can do about this. YCM conflicts with UltiSnips TAB key usage YCM comes with support for UltiSnips (snippet suggestions in the popup menu), but you'll have to change the UltiSnips mappings. See :h UltiSnips-triggers in Vim for details. You'll probably want to change some/all of the following options: g:UltiSnipsExpandTrigger g:UltiSnipsJumpForwardTrigger g:UltiSnipsJumpBackwardTrigger  Why isn't YCM just written in plain VimScript, FFS? Because of the identifier completion engine and subsequence-based filtering. Let's say you have many dozens of files open in a single Vim instance (I often do); the identifier-based engine then needs to store thousands (if not tens of thousands) of identifiers in its internal data-structures. When the user types, YCM needs to perform subsequence-based filtering on all of those identifiers (every single one!) in less than 10 milliseconds. I'm sorry, but that level of performance is just plain impossible to achieve with VimScript. I've tried, and the language is just too slow. No, you can't get acceptable performance even if you limit yourself to just the identifiers in the current file and simple prefix-based filtering. Why does YCM demand such a recent version of Vim? During YCM's development several show-stopper bugs were encountered in Vim. Those needed to be fixed upstream (and were). A few months after those bugs were fixed, Vim trunk landed the pyeval() function which improved YCM performance even more since less time was spent serializing and deserializing data between Vim and the embedded Python interpreter. A few critical bugfixes for pyeval() landed in Vim 7.3.584 (and a few commits before that). I get annoying messages in Vim's status area when I type If you're referring to the User defined completion <bla bla> back at original and similar, then just update to Vim 7.4.314 (or later) and they'll go away. Nasty bugs happen if I have the vim-autoclose plugin installed Use the delimitMate plugin instead. It does the same thing without conflicting with YCM. Is there some sort of YCM mailing list? I have questions If you have questions about the plugin or need help, please use the ycm-users mailing list, don't create issues on the tracker. The tracker is for bug reports and feature requests. I get an internal compiler error when installing This can be a problem on virtual servers with limited memory. A possible solution is to add more swap memory. A more practical solution would be to force the build script to run only one compile job at a time. You can do this by setting the YCM_CORES environment variable to 1. Example: YCM_CORES=1 ./install.py --clang-completer  I get weird errors when I press Ctrl-C in Vim Never use Ctrl-C in Vim. Using Ctrl-C to exit insert mode in Vim is a bad idea. The main issue here is that Ctrl-C in Vim doesn't just leave insert mode, it leaves it without triggering InsertLeave autocommands (as per Vim docs). This is a bad idea and is likely to break many other things and not just YCM. Bottom line, if you use Ctrl-C to exit insert mode in Vim, you're gonna have a bad time. If pressing <esc> is too annoying (agreed, it is), we suggest mapping it to something more convenient. On a QWERTY keyboard, a good pick for the <esc> map is inoremap jk <Esc>. This is right on the home row, it's an incredibly rare digraph in English and if you ever need to type those two chars in sequence in insert mode, you just type j, then wait 500ms, then type k. Why did YCM stop using Syntastic for diagnostics display? Previously, YCM would send any diagnostics it would receive from the libclang semantic engine to Syntastic for display as signs in the gutter, red squiggles etc. Today, YCM uses its own code to do that. Using Syntastic for this was always a kludge. Syntastic assumes its ""checker"" plugins behave in a certain way; those assumptions have never fit YCM. For instance, YCM continuously recompiles your code in the background for C-family languages and tries to push new diagnostics to the user as fast as possible, even while the user types. Syntastic assumes that a checker only runs on file save (""active"" mode) or even less frequently, when the user explicitly invokes it (""passive"" mode). This mismatch in assumptions causes performance problems since Syntastic code isn't optimized for this use case of constant diagnostic refreshing. Poor support for this use case also led to crash bugs in Vim caused by Syntastic-Vim interactions (issue #593) and other problems, like random Vim flickering. Attempts were made to resolve these issues in Syntastic, but ultimately some of them failed (for various reasons). Implementing diagnostic display code directly in YCM resolves all of these problems. Performance also improved substantially since the relevant code is now written in Python instead of VimScript (which is very slow) and is tailored only for YCM's use-cases. We were also able to introduce new features in this area since we're now not limited to the Syntastic checker API. We've tried to implement this in the most backwards-compatible way possible; YCM options that control diagnostic display fall back to Syntastic options that control the same concepts if the user has those set. Still, some Syntastic-specific configuration you might have had might not be supported by the new code. Please file issues on the tracker in such cases; if we find the request to be reasonable, we'll find a way to address it. Completion doesn't work with the C++ standard library headers This is caused by an issue with libclang that only affects some operating systems. Compiling with clang the binary will use the correct default header search paths but compiling with libclang.so (which YCM uses) does not. Mac OS X is normally affected, but there's a workaround in YCM for that specific OS. If you're not running that OS but still have the same problem, continue reading. The workaround is to call echo | clang -v -E -x c++ - and look at the paths under the #include <...> search starts here: heading. You should take those paths, prepend -isystem to each individual path and append them all to the list of flags you return from your FlagsForFile function in your .ycm_extra_conf.py file. See issue #303 for details. When I open a JavaScript file, I get an annoying warning about .tern-project file Take a look at the instructions for using the JavaScript completer. If this is still really annoying, and you have a good reason not to have a .tern-project file, create an empty .tern-config file in your home directory and YCM will stop complaining. When I start vim I get a runtime error saying R6034 An application has made an attempt to load the C runtime library incorrectly. CMake and other things seem to screw up the PATH with their own msvcrXX.dll versions. Add the following to the very top of your vimrc to remove these entries from the path. python << EOF import os import re path = os.environ['PATH'].split(';')  def contains_msvcr_lib(folder):     try:         for item in os.listdir(folder):             if re.match(r'msvcr\d+\.dll', item):                 return True     except:         pass     return False  path = [folder for folder in path if not contains_msvcr_lib(folder)] os.environ['PATH'] = ';'.join(path) EOF  I hear that YCM only supports Python 2, is that true? No. Both the Vim client and the ycmd server run on Python 2 or 3. If you work on a Python 3 project, you may need to set g:ycm_python_binary_path to the Python interpreter you use for your project to get completions for that version of Python. On Windows I get E887: Sorry, this command is disabled, the Python's site module could not be loaded If you are running vim on Windows with Python 2.7.11, this is likely caused by a bug. Follow this workaround or use a different version (Python 2.7.9 does not suffer from the bug). I can't complete python packages in a virtual environment. This means that the Python used to run JediHTTP is not the Python of the virtual environment you're in. To resolve this you either set g:ycm_python_binary_path to the absolute path of the Python binary in your virtual environment or since virtual environment will put that Python executable first in your PATH when the virtual environment is active then if you set g:ycm_python_binary_path to just 'python' it will be found as the first Python and used to run JediHTTP. Contributor Code of Conduct Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. Contact If you have questions about the plugin or need help, please use the ycm-users mailing list. If you have bug reports or feature suggestions, please use the issue tracker. The latest version of the plugin is available at http://valloric.github.io/YouCompleteMe/. The author's homepage is http://val.markovic.io. License This software is licensed under the GPL v3 license. © 2015-2016 YouCompleteMe contributors"	"null"	"null"	"YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim."	"true"
"Build Systems"	"Bear"	"https://github.com/rizsotto/Bear"	"A tool to generate compilation database for clang tooling."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"289"	"30"	"37"	"GitHub - rizsotto/Bear: Build EAR Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 289 Fork 37 rizsotto/Bear Code Issues 4 Pull requests 0 Pulse Graphs Build EAR https://travis-ci.org/rizsotto/Bear 373 commits 2 branches 26 releases 14 contributors C 53.7% Python 25.5% CMake 12.2% Shell 5.9% C++ 1.7% QMake 0.5% Makefile 0.5% C Python CMake Shell C++ QMake Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags devel master Nothing to show 2.2.0 2.1.5 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.0.4 2.0.3 2.0.2 2.0.1 2.0 1.4.4 1.4.3 1.4.2 1.4.1 1.4 1.3 1.2 1.1 1.0 0.5 0.4 0.3 0.2 0.1 Nothing to show New pull request Latest commit b89de96 Jun 5, 2016 rizsotto update changelog and bump up version number Permalink Failed to load latest commit information. bear Fix shell_escape not escaping spaces May 27, 2016 doc Fix spelling of 'formatting' Feb 17, 2016 libear Protect report generation in multithread build systems Aug 3, 2015 test Make paths to sources and include files absolute. Feb 14, 2016 .travis.yml add 3.5 and pypy to travis-ci config Jan 12, 2016 CMakeLists.txt update changelog and bump up version number Jun 5, 2016 COPYING change license to GPLv3 Jun 27, 2013 ChangeLog.md update changelog and bump up version number Jun 5, 2016 README.md document well known issues with security OS extensions Feb 14, 2016 README.md Build EAR Bear is a tool that generates a compilation database for clang tooling. The JSON compilation database is used in the clang project to provide information on how a single compilation unit is processed. With this, it is easy to re-run the compilation with alternate programs. One way to get a compilation database is to use cmake as the build tool. Passing -DCMAKE_EXPORT_COMPILE_COMMANDS=ON to cmake generates the compile_commands.json file into the current directory. For non-cmake projects, use Bear. Bear generates the json file during the build process. The concept behind Bear is to execute the original build command and intercept the exec calls issued by the build tool. To achieve that, Bear uses the LD_PRELOAD or DYLD_INSERT_LIBRARIES mechanisms provided by the dynamic linker. Bear has two components: the library and the binary. The library redefines the exec methods to be used by all child processes. The executable enables the use of the library for child processes and writes the output file. How to build Bear should be quite portable on UNIX operating systems. It has been tested on FreeBSD, GNU/Linux and OS X. Prerequisites an ANSI C compiler, to compile the sources. cmake, to configure the build process. make, to run the build. The makefiles are generated by cmake. python is a runtime dependency. The bear command is written in Python. (version >= 2.7) Build commands Ideally, you should build Bear in a separate build directory. cmake $BEAR_SOURCE_DIR make all make install # to install make check   # to run tests make package # to make packages  You can configure the build process with passing arguments to cmake. How to use After installation the usage is like this: bear make  The output file called compile_commands.json found in current directory. For more options you can check the man page or pass --help parameter. Known issues Environment overriding caused problems Because Bear uses LD_PRELOAD or DYLD_INSERT_LIBRARIES environment variables, it does not append to it, but overrides it. So builds which are using these variables might not work. (I don't know any build tool which does that, but please let me know if you do.) Empty compilation database on OS X Captain or Fedora Security extension/modes on different operating systems might disable library preloads. This case Bear behaves normaly, but the result compilation database will be empty. (Please make sure it's not the case when reporting bugs.) Notable examples for enabled security modes are: OS X 10.11 (check with csrutil status | grep 'System Integrity Protection'), and Fedora, CentOS, RHEL (check with sestatus | grep 'SELinux status'). Workaround could be to disable the security feature while running Bear. (This might involve reboot of your computer, so might be heavy workaround.) The other option could be to use tools which are using compiler wrappers. (It inject a fake compiler which does record the compiler invocation and calls the real compiler too.) An example for such tool might be scan-build. The build system shall respect CC and CXX environment variables. Problem reports If you find a bug in this documentation or elsewhere in the program or would like to propose an improvement, please use the project's github issue tracker. Please describing the bug and where you found it. If you have a suggestion how to fix it, include that as well. Patches are also welcome. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rizsotto/Bear"	"A tool to generate compilation database for clang tooling."	"true"
"Build Systems"	"Biicode"	"https://www.biicode.com/"	"Simple, file-based dependency manager."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Simple, file-based dependency manager."	"false"
"Build Systems"	"CMake"	"https://cmake.org/"	"Cross-platform free and open-source software for managing the build process of software using a compiler-independent method. [BSD]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CMake About Overview Participants Licensing Publications Statistics Success News Resources Documentation Mailing Lists Mastering CMake Webinars Services Developer Resources Get Involved Issue Tracker Dashboard Wiki Related Software Download Select Page Build, Test and Package Your Software With CMake CMake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. The suite of CMake tools were created by Kitware in response to the need for a powerful, cross-platform build environment for open-source projects such as ITK and VTK. CMake is part of Kitware’s collection of commercially supported open-source platforms for software development.  Download Latest Release Visit the download page  Support and Services Get support or consulting service for CMake  Contact Us Have a question about a CMake project? We can help  Training Courses Attend an upcoming CMake training course  Book Get the latest edition of the Mastering CMake book  Get Involved Become part of the CMake development community Notable Applications Using CMake Netflix “…CMake, CTest, and CDash have proven to be invaluable tools for us to build multiplatform code, track changes, run tests, and improve code quality by performing code coverage and memory leak analysis.” Inria “I am thankful for CMake’s shadow builds feature. For a project like SOFA, which has many optional features and possible option combinations, being able to quickly test a modification on several typical setups on my machine before pushing a significant change to the repository is a very valuable security. This is especially true for a complex project like ours.” The HDF Group “CMake, CTest, and CDash were the tools that we desperately needed. With the help of our user community, we added the CMake build system for all HDF products. We rely on CMake for HDF software being successfully built and tested on platforms that range from supercomputers to Windows desktops and tablets.” ReactOS “…in early 2010 a decision was made to look for a third party solution instead of continuing to expend time and effort maintaining RBuild. CMake was an early favorite and while the transition was not without its bumps, it has allowed the project to not only increase the number of compilers that could be used to build ReactOS, it also set the stage for significantly decreasing build times, making development faster and easier.” KDE “Our working relationship aside, CMake has greatly improved the process of building KDE. Projects using CMake take less time to get started, since there is less time spent fighting with the build system. One KDE developer says, “CMake doesn’t make you want to shoot yourself with a nailgun when building your project anymore.” Second Life “A great technology choice that our community helped us make was moving to CMake, a cross-platform build tool, which makes it much simpler to maintain makefiles for many different platforms.” Allegro library Armadillo Avidemux awesome BCI2000 Blender BRL-CAD Bullet Physics Engine CGAL Chipmunk physics engine CLion Compiz Conky cURL Deal.II Doomsday Engine Dust Racing 2D Drishti Ettercap Falcon (programming language) FlightGear Flight Simulator GDCM Geant4 Gmsh GNU Radio GROMACS   Hiawatha (web server) Hypertable Hugin iCub robot and YARP IGSTK ITK KDE SC 4 KiCad libpng LAPACK LLVM and Clang LMMS Mir MiKTeX MLPACK MuseScore MySQL and MariaDB OGRE OpenCV OpenCog OpenCPN OpenSceneGraph OpenSync Orthanc Point Cloud Library Poppler   PvPGN QGIS Qt Raw Therapee ReactOS ROOT ROS Ryzom Scribus SDL Second Life SFML Spring RTS SuperTux Synergy Slicer Stellarium Trilinos Vortexje VTK and ParaView VXL zlib PCSX2 Zdoom ZeroMQ   Recent Posts CMake 3.5.2 available for download We are pleased to announce that CMake 3.5.2 is now available for download. Please use the latest release from our download page: https://cmake.org/download/ Thanks for your support! Changes in 3.5.2 … Read More CMake 3.5.1 available for download We are pleased to announce that CMake 3.5.1 is now available for download. Please use the latest release from our download page: https://cmake.org/download/ Thanks for your support! Changes in 3.5.1 … Read More CMake 3.5.0 available for download I am proud to announce that CMake 3.5.0 is now available for download at: https://cmake.org/download/ Documentation is available at: https://cmake.org/cmake/help/v3.5 Release notes appear below and are also published at https://cmake.org/cmake/help/v3.5/release/3.5.html … Read More CMake 3.5.0-rc3 is now ready! I am proud to announce the third CMake 3.5 release candidate. Sources and binaries are available at: https://cmake.org/download/ Documentation is available at: https://cmake.org/cmake/help/v3.5 Release notes appear below and are also published … Read More CMake 3.5.0-rc2 is now ready! I am proud to announce the second CMake 3.5 release candidate. Sources and binaries are available at: https://cmake.org/download/ Documentation is available at: https://cmake.org/cmake/help/v3.5 Release notes appear below and are also published … Read More CMake 3.5.0-rc1 is now ready! I am proud to announce the first CMake 3.5 release candidate. Sources and binaries are available at: https://cmake.org/download/ Documentation is available at: https://cmake.org/cmake/help/v3.5 Release notes appear below and are also … Read More Source: blog.kitware.com Facebook Twitter Google RSS   Website license and management        "	"null"	"null"	"Cross-platform free and open-source software for managing the build process of software using a compiler-independent method. [BSD]"	"true"
"Build Systems"	"CPM"	"https://github.com/iauns/cpm"	"A C++ Package Manager based on CMake and Git."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"490"	"43"	"23"	"GitHub - iauns/cpm: C++ Package Manager Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 490 Fork 23 iauns/cpm Code Issues 7 Pull requests 1 Pulse Graphs C++ Package Manager http://cpm.rocks 380 commits 2 branches 0 releases 1 contributor C++ 95.7% Shell 4.3% C++ Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags hierarchy-tools master Nothing to show Nothing to show New pull request Latest commit 2cfa174 Feb 17, 2015 iauns Update cmake policies to address warnings in CMake 3.1. Permalink Failed to load latest commit information. images Update readme to include upgraded website links. Feb 9, 2015 tests Patch sanitize test to address travis build error. Nov 16, 2014 util Fix offline bug in HG and SVN source. Aug 10, 2014 .gitignore Adding ignore directory for externals (as opposed to modules). Sep 16, 2013 .travis.yml Upgrade version of CMake used by CPM on Travis CI. Dec 14, 2013 CPM.cmake Update cmake policies to address warnings in CMake 3.1. Feb 17, 2015 LICENSE Initial commit Sep 14, 2013 README.md Minor gramatical fixes. Feb 9, 2015 README.md CPM A C++ Package Manager based on CMake and Git. CPM is designed to promote small, well-tested, composable C++ modules. CPM allows you to link against multiple different versions of the same static library without symbol conflicts. You can include other C++ modules that may depend on older or newer versions of the same modules you are using. Additionally, CPM will automatically download and build C++ modules for you. To explore CPM's ecosystem head over to the CPM website: http://cpm.rocks . You can manage C or C++ libraries that do not utilize CPM. A number of 'external' modules are already listed on the website. These modules abstract away the details of downloading, building, and linking against various projects. Just be aware that you cannot statically link against multiple different versions of these 'external' modules because they are not built as CPM modules and do not manage symbols like real CPM modules do. For an example of a module with various interdependencies, check out cpm-es-render. Here's an example dependency graph that the cpm website automatically generated for this module: Table of Contents Brief Example Using CPM Quick Setup Things to Note Building CPM Modules CMakeLists.txt Entry Library target name Wrapping Namespace Directory Structure Exporting Build Info Registering Your Module Building Externals CPM Function Reference General Purpose Modules Only Miscellaneous Issues and Questions Brief Example Below is a sample of a CMakeLists.txt file that uses 3 modules. These modules are: platform specific OpenGL headers, an axis aligned bounding box implementation, and G-truc's GLSL vector math library. See the next section for a full explanation of how to use CPM. The following CMakeLists.txt is self-contained and will build as-is:   cmake_minimum_required(VERSION 2.8.7 FATAL_ERROR)   project(foo)    #------------------------------------------------------------------------------   # Required CPM Setup - no need to modify - See: https://github.com/iauns/cpm   #------------------------------------------------------------------------------   set(CPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/cpm_packages"" CACHE TYPE STRING)   find_package(Git)   if(NOT GIT_FOUND)     message(FATAL_ERROR ""CPM requires Git."")   endif()   if (NOT EXISTS ${CPM_DIR}/CPM.cmake)     message(STATUS ""Cloning repo (https://github.com/iauns/cpm)"")     execute_process(       COMMAND ""${GIT_EXECUTABLE}"" clone https://github.com/iauns/cpm ${CPM_DIR}       RESULT_VARIABLE error_code       OUTPUT_QUIET ERROR_QUIET)     if(error_code)       message(FATAL_ERROR ""CPM failed to get the hash for HEAD"")     endif()   endif()   include(${CPM_DIR}/CPM.cmake)    #------------------------------------------------------------------------------   # CPM Modules   #------------------------------------------------------------------------------    # ++ MODULE: OpenGL platform   CPM_AddModule(""gl_platform""     GIT_REPOSITORY ""https://github.com/iauns/cpm-gl-platform""     GIT_TAG ""1.3.5"")    # ++ MODULE: aabb   CPM_AddModule(""aabb""     GIT_REPOSITORY ""https://github.com/iauns/cpm-glm-aabb""     GIT_TAG ""1.0.3"")    # ++ EXTERNAL-MODULE: GLM   CPM_AddModule(""glm""     GIT_REPOSITORY ""https://github.com/iauns/cpm-glm""     GIT_TAG ""1.0.2""     USE_EXISTING_VER TRUE)    CPM_Finish()    #-----------------------------------------------------------------------   # Setup source   #-----------------------------------------------------------------------    # NOTE: Feel free to ignore this section. It simply creates a main.cpp source   # file from scratch instead of relying on the source being present. This is   # done only to keep this CMakeLists.txt self-contained.    file(WRITE src/main.cpp ""#include <iostream>\n"")   file(APPEND src/main.cpp ""#include <glm-aabb/AABB.hpp>\n"")   file(APPEND src/main.cpp ""#include <glm/glm.hpp>\n\n"")   file(APPEND src/main.cpp ""namespace glm_aabb = CPM_AABB_NS;\n\n"")   file(APPEND src/main.cpp ""int main(int argc, char** av)\n"")   file(APPEND src/main.cpp ""{\n"")   file(APPEND src/main.cpp ""  glm_aabb::AABB aabb(glm::vec3(-1.0), glm::vec3(1.0));\n"")   file(APPEND src/main.cpp ""  aabb.extend(glm::vec3(-2.0, 3.0, -0.5));\n"")   file(APPEND src/main.cpp ""  glm_aabb::AABB aabb2(glm::vec3(1.0), 1.0);\n"")   file(APPEND src/main.cpp ""  std::cout << \""AABB Interesction: \"" << aabb.intersect(aabb2) << std::endl;\n"")   file(APPEND src/main.cpp ""  return 0;\n"")   file(APPEND src/main.cpp ""}\n"")    set(Sources src/main.cpp)    #-----------------------------------------------------------------------   # Setup executable   #-----------------------------------------------------------------------   set(EXE_NAME cpm-test)   add_executable(${EXE_NAME} ${Sources})   target_link_libraries(${EXE_NAME} ${CPM_LIBRARIES}) Using CPM Quick Setup To use CPM in your C++ project, include the following at the top of your CMakeLists.txt:   #------------------------------------------------------------------------------   # Required CPM Setup - no need to modify - See: https://github.com/iauns/cpm   #------------------------------------------------------------------------------   set(CPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/cpm-packages"" CACHE TYPE STRING)   find_package(Git)   if(NOT GIT_FOUND)     message(FATAL_ERROR ""CPM requires Git."")   endif()   if (NOT EXISTS ${CPM_DIR}/CPM.cmake)     message(STATUS ""Cloning repo (https://github.com/iauns/cpm)"")     execute_process(       COMMAND ""${GIT_EXECUTABLE}"" clone https://github.com/iauns/cpm ${CPM_DIR}       RESULT_VARIABLE error_code       OUTPUT_QUIET ERROR_QUIET)     if(error_code)       message(FATAL_ERROR ""CPM failed to get the hash for HEAD"")     endif()   endif()   include(${CPM_DIR}/CPM.cmake)    #------------------------------------------------------------------------------   # CPM Modules   #------------------------------------------------------------------------------    # TODO: Include any modules here...    CPM_Finish()  Then add the ${CPM_LIBRARIES} variable to your target_link_libraries similar to the following: target_link_libraries(my_project ${CPM_LIBRARIES}) And you're done. You will be able to start using CPM modules right away by adding the following snippet to the CPM Modules section of your CMakeLists.txt:   CPM_AddModule(""aabb""     GIT_REPOSITORY ""https://github.com/iauns/cpm-glm-aabb""     GIT_TAG ""1.0.2"") This snippet will automatically download, build, and link version 1.0.2 of a simple axis aligned bounding box implementation named aabb. A new namespace is generated for aabb and a preprocessor definition for this namespace is automatically added to your project. The preprocessor namespace definition always follows the form CPM_<NAME>_NS where <NAME> is the capitalized first argument of your call to CPM_AddModule. For example, in the 'aabb' snippet above, the first argument to CPM_AddModule was ""aabb"" so the preprocessor definition CPM_AABB_NS would be added to our project. This declares the namepsace under which CPM has bound the 'aabb' module. For instance, aabb's only class is named AABB. So the fully qualified name for the AABB class would be: CPM_AABB_NS::AABB. You may want to rename the namespace to something more appropriate: namespace glm_aabb = CPM_AABB_NS;. But that's entirely up to you. Depending on your needs, using the CPM namespace as-is may be all you need. Be sure to place all calls to CPM_AddModule before your call to CPM_Finish. The # TODO: Include any modules here... section mentioned in the first snippet indicates where you should place calls to CPM_AddModule. Why even bother with these preprocessor namespace definitions? The reason is so that we can leverage multiple different versions of a single CPM module in the same static linkage unit. Why would we want to let users utilize multiple versions of our module in the first place? In many cases, users won't know that they are actually using multiple different versions of your module. For example, a more recent version of your module may be included directly by the user, but an older version of your module may be pulled in as a dependency of another module the user is relying on. If you're interested, you can see CPM's dependency graph for your project. Things To Note Includes Every module's root directory will be added to your include path. It is common that every module's github page describes what file or files you should include in your project. The paths to these files will be relative to the module's root directory. So you can copy the include directive directly from the module's github page into your code. For example, to access AABB's functionality we would include its interface header file like so: #include <glm-aabb/AABB.hpp>  Compiler Flags If you have compiler flags you wish to apply to all modules, then add them directly before the CPM section in your CMakeListst.txt. Since each call to CPM_AddModule uses add_subdirectory internally, every module will inherit your compiler flags (for good or bad). CPM Externals If the library you are interested in isn't a CPM module, try browsing through the CPM externals listed on http://cpmcpp.com. Just use CPM_AddModule as you would with any other module. Note that you will likely want to use the USE_EXISTING_VER parameter to CPM_AddModule in conjunction with external modules. If you don't find a formula for your favorite library, kindly consider contributing one to our CPM modules repository. Tag Advice While it may be tempting to use the origin/master tag to track the most recent changes to a module, it is not recommended. Using version tags for a module (such as 1.0.2) and upgrading modules when necessary will save you time in the long run. If you track origin/master and upstream decides to release a major version which includes significant API changes then your builds will likely break immediately. But if versioned tags are used, you will maintain your build integrity even through upstream version upgrades. Advantages Automatically manages code retrieval and building of CPM modules and externals. Allows the use of multiple different versions of the same statically linked module in the same executable. Built entirely in CMake. Nothing else is required. All CPM module code will be included in any generated project solution. Will automatically detect preprocessor naming conflicts. Optionally cache downloaded modules and repositories to a central directory. Limitations Only supports git (with very limited support for SVN). Building CPM Modules If you only want to use pre-existing CPM modules and aren't interested in building modules yourself, feel free to skip this section. But, if you are interested in building CPM modules then please read on as some guidelines and requirements are listed below. CMakeLists.txt Entry There must be a CMakeLists.txt at the root of your module project and this CMakeLists.txt file must contain all relevant CPM directives and code (see below). Do not use issue calls to CPM (CPM_*) in a subdirectory (add_subdirectory). Add the following to the top of the CMakeLists.txt for your module:   #-----------------------------------------------------------------------   # CPM configuration   #-----------------------------------------------------------------------   set(CPM_MODULE_NAME <name>)   set(CPM_LIB_TARGET_NAME ${CPM_MODULE_NAME})    if ((DEFINED CPM_DIR) AND (DEFINED CPM_UNIQUE_ID) AND (DEFINED CPM_TARGET_NAME))     set(CPM_LIB_TARGET_NAME ${CPM_TARGET_NAME})     set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CPM_DIR})     include(CPM)   else()     set(CPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/cpm-packages"" CACHE TYPE STRING)     find_package(Git)     if(NOT GIT_FOUND)       message(FATAL_ERROR ""CPM requires Git."")     endif()     if (NOT EXISTS ${CPM_DIR}/CPM.cmake)       message(STATUS ""Cloning repo (https://github.com/iauns/cpm)"")       execute_process(         COMMAND ""${GIT_EXECUTABLE}"" clone https://github.com/iauns/cpm ${CPM_DIR}         RESULT_VARIABLE error_code         OUTPUT_QUIET ERROR_QUIET)       if(error_code)         message(FATAL_ERROR ""CPM failed to get the hash for HEAD"")       endif()     endif()     include(${CPM_DIR}/CPM.cmake)   endif()    # Include CPM modules or externals here (with CPM_AddModule).    CPM_InitModule(${CPM_MODULE_NAME}) Be sure to update the <name> at the beginning of the snippet. <name> is placed in the namespace preprocessor definition for your module. For example, if <name> is 'spire' then the preprocessor definition that will be added to your project will be CPM_SPIRE_NS. Use this definition as a wrapper around your code and namespaces. Don't worry about users using the same name in their call to CPM_AddModule as the name you choose in your call to CPM_InitModule. CPM will automatically handle this for you. Also use CPM_LIB_TARGET_NAME as the name of your library in add_library and include CPM_LIBRARIES in target_link_libraries for your static library. Example:   # Our CPM module library   add_library(${CPM_LIB_TARGET_NAME} ${Source})   target_link_libraries(${CPM_LIB_TARGET_NAME} ${CPM_LIBRARIES}) Here is an example class that demonstrates the namespace wrapping:   namespace CPM_SPIRE_NS {    ... code here ...    } // namespace CPM_SPIRE_NS Library target name If you used the code snippet above make sure that your generated library target name is ${CPM_LIB_TARGET_NAME}. This will ensure your library target name matches with what CPM is expecting. But, if you can't name your target ${CPM_LIB_TARGET_NAME} for any reason, use CPM_ExportAdditionalLibraryTarget instead in order name your target whatever you would like. See the function reference below. Wrapping Namespace CPM allows multiple different versions of the same module to be statically linked into the same target . As such, when you are building a module for CPM (not when you are using CPM modules!), you should either surround your top-level namespaces in CPM_[module name]_NS tags or use CPM_[module name]_NS as your top level namespace, like so:   namespace CPM_[module name]_NS {      ...      } // namespace CPM_[module name]_NS The first argument given to CPM_InitModule becomes [module name] in your application. Note that this is not required but it is heavily recommended when you are building CPM modules. You must include this if you want your users to be able to use multiple versions of your module within the same static linkage unit. Directory Structure In order to avoid header name conflicts CPM modules adhere to the directory following structure:   Root of [module name]     |-> CMakeLists.txt     |-> test     |-> [module name]       |-> [public headers go here]         |-> src         |-> [private headers and source code]  Using this structure users would include your public headers using:   #include <[module name]/interface.h>  Exporting Build Info Include Paths By default, the root of your project is added to the include path. If you need to expose more directories to the consumer of your module use the CPM_ExportAdditionalIncludeDir function to add directories to the consumer's include path. The first and only argument to CPM_ExportAdditionalIncludeDir is the directory you want to add to the path. Be sure to clearly document any changes you make to the include path in your module's README. Definitions Just as with the include paths above you can set preprocessor definitions for the consumer. Use the function CPM_ExportAdditionalDefinition, like below:   CPM_ExportAdditionalDefinition(""-DMONGO_HAVE_STDINT"")  Targets If you have additional targets, or don't want to use the target name that CPM generates for you, you can use the CPM_ExportAdditionalLibraryTarget function that comes with CPM.   CPM_ExportAdditionaLibraryTarget(""MyTargetName"")  This target will be added to the target_link_libraries call issued by the consumer of your module. Registering Your Module Once you have finished writing your module, add your repository to the ecosystem using the CPM website. A dependency graph will be automatically generated for your module, and you will be able to see others using your module. Note that this step is not mandatory. You can use your module without registering it by pointing CPM to the URL of your git repository. Module registration is recommended because it makes it easier for others to find. Building Externals If you are wrapping non-CPM code then you are likely building a CPM external. Building an external is just like building a module except for a call to:   CPM_ForceOnlyOneModuleVersion()  somewhere in your module's CMakeLists.txt file. This function ensures exactly one (and only one) version of your module is ever statically linked. In addition to this, you should reference the original repository in your cpm-modules JSON file by adding the 'externalURL' key/value pair. The key being 'externalURL' and the value being be a URL locating the repository for which you have created this external. Also set the 'external' key to 'true' in your JSON file so that the CPM website knows you have built an external. For an example see: CPM External for Google Test. CPM Function Reference All CMake functions that CPM exposes are listed below. General Purpose CPM_AddModule Adds a CPM module to your project. All arguments except <name> are optional. Additionally, one of either the GIT_REPOSITORY or SOURCE_DIR arguments must be present in your call to CPM_AddModule. Should be called before either CPM_Finish or CPM_InitModule   CPM_AddModule(<name>           # Required - Module target name. Used to generate your                                   # preprocessor definition.     [GIT_REPOSITORY repo]        # Git repository that corresponds to a CPM module.                                  # If this argument is not specfied, then SOURCE_DIR must be set.     [GIT_TAG tag]                # Git tag to checkout. Tags, shas, and branches all work.     [USE_EXISTING_VER truth]     # If set to true, and an existing version of this module is                                   # found then the existing version of this module is used                                  # instead of the version indicated by GIT_TAG.     [SOURCE_DIR dir]             # Uses 'dir' as the source directory instead of cloning                                  # from a repo. If this is not specified, then                                   # GIT_REPOSITORY must be specified.     [SOURCE_GHOST_GIT_REPO repo] # Ghost repository when using SOURCE_DIR.                                  # Used to correctly correlate SOURCE_DIR modules with their                                   # correct upstream repository.     [SOURCE_GHOST_GIT_TAG tag]   # Ghost git tag when using SOURCE_DIR.     [EXPORT_MODULE truth]        # If true, then this module's (<name>) definitions and includes                                  # will be exported to any consumer of your module.     [FORWARD_DECLARATION truth]  # If true, then only the module's preprocessor definition                                   # (that the <name> argument above is used to generate)                                   # is exported to the consumer of the module. This is useful                                   # for situations where you only need to forward declare a                                   # module's classes in your interface classes and not actually                                   # include the target module's interface headers. This is                                   # preferred over EXPORT_MODULE.     ) CPM_EnsureRepoIsCurrent A utility function that allows you to download and ensure that some repository is up to date and present on the filesystem before proceeding forward with CMakeLists.txt processing. Useful for building CPM externals. You can use this function outside of any call to CPM_Finish or CPM_InitModule   CPM_EnsureRepoIsCurrent(     [TARGET_DIR dir]             # Required - Directory in which to place repository.     [GIT_REPOSITORY repo]        # Git repository to clone and keep up to date.     [GIT_TAG tag]                # Git tag to checkout.     [SVN_REPOSITORY repo]        # SVN repository to checkout.     [SVN_REVISION rev]           # SVN revision.     [SVN_TRUST_CERT 1]           # Trust the Subversion server site certificate     [USE_CACHING 1]              # Enables caching of repositories if the user                                   # has specified CPM_MODULE_CACHING_DIR.                                  # Not enabled by default.     ) CPM_Finish This function is for the top-level application only. Call when you are finished issuing calls to CPM_AddModule. CPM_Finish() Modules Only The functions listed in this section are used exclusively for constructing modules. If you use one of these functions in non-module code, a CMake warning will be generated and the function call will be ignored. CPM_InitModule This function is the module's counterpart to CPM_Finish. Call this to indicate to CPM that you have finished issuing calls to CPM_AddModule. The only argument indicates the name of the module. This name will only be used for generating the preprocessor definition you should use for your module. CPM_InitModule(""my_module"") CPM_ExportAdditionalDefinition When building modules, this exports an additional definition in the module consumer's scope. Use sparingly. Primarily used to expose mandatory external project definitions. CPM_ExportAdditionalDefinition(""-DMY_DEFINITION=42"") CPM_ExportAdditionalIncludeDir Exposes an additional include directory to the consumer of a module. Use sparingly. Primarily used to expose external project directories to module consumers. CPM_ExportAdditionalIncludeDir(""./foo/bar"") Note, for this function, do not quote lists of include directories. Pass the list in as-is. CPM_ExportAdditionalLibraryTarget This function is mostly used to avoid having to name targets per the ${CPM_TARGET_NAME} convention in CPM. For an example of its use see http://github.com/iauns/cpm-google-test. Google test itself generates its own target name when included as a subdirectory so we must use that name. CPM_ExportAdditionalLibraryTarget(""my_target"") Miscellaneous Issues and Questions Below are some common issues users encounter and solutions to them. When are modules downloaded and updated? During the CMake configure step. No repository cloning or fetching occurs during the build step. Exposing foreign module interfaces Some modules require the ability to expose classes from other modules through public headers. This is allowed by tagging the module that you plan on exporting with EXPORT_MODULE TRUE just like:   CPM_AddModule(""GLM""     GIT_REPOSITORY ""https://github.com/iauns/cpm-glm""     GIT_TAG ""origin/master""     USE_EXISTING_VER TRUE     EXPORT_MODULE TRUE    # Use EXPORT_MODULE sparingly. We expose GLM's interface     )                     # through our own interface hence why we export it.  In this case, GLM's definitions and include paths will be exported to the direct consumer of your module. It will not export this module to any parents of your consumer. Using an existing module version CPM allows you the flexibility of selecting the most recently used version of a particular module instead of the version you requested. This is useful when you are working with externals or modules that require you to only use one version. Simply add USE_EXISTING_VER TRUE in your call to CPM_AddModule. An example of this is given above in the section on exposing foreign module interfaces. For example, if a module you added (lets call this module B) requested version v0.9.5 of module A, and you subsequently requested v0.9.1 of module A, then your version would be upgraded to v0.9.5 to comply with the pre-existing version of the module if you specified USE_EXISTING_VER TRUE when adding module A. It is considered best practice to set USE_EXSTING_VER to TRUE when adding externals (not regular modules) to your project. Especially when building modules for others to use. But also be aware that your version can be downgraded in the same manner. You can generally avoid being downgraded by re-arranging the order of your calls to CPM_AddModule. When adding regular non-external modules, you may consider using this option to reduce the size of your executable if multiple different versions of the same module are being used. Just be weary of compiler errors due to version conflicts. In most cases, this option should be avoided when using regular, non-external, CPM modules. Force only one module version As pointed out in the externals section you may force all consumers, indirect or direct, of your module to use only one version. Most module creators won't need to worry about this corner case, but it is required that all externals use this. Include a call to CPM_ForceOnlyOneModuleVersion anywhere in your module's CMakeLists.txt file to enforce this. Usually this call is made directly before calling CPM_InitModule. If you do this, you should indicate that your module is an 'external' in your module's JSON file. Even if you don't use any external code. It is important to separate these modules from 'regular' modules, and the nomenclature we have chosen for these types of modules are 'externals'. Downloading repos without external projects CPM provides a utility function that allows you to download repositories at configuration time. This function is: CPM_EnsureRepoIsCurrent. This function will also ensure the tag you specify is up to date and the repo is present before continuing execution of CMakeLists.txt. You can download both git repositories and SVN repositories using this function. For a reference regarding the function's parameters, see the comments at the top of CPM.cmake. For examples of using this function, see the google test CPM external. How do I cache modules? CPM supports cached repositories and modules by setting either the CPM_MODULE_CACHE_DIR CMake variable or the CPM_CACHE_DIR environment variable to an appropriate cache directory (such as ~/.cpm_cache). When set, a search will be performed in the cache directory for all modules that don't already exist in your project's build directory. If the module is not found in the cache directory, CPM will download the module into the cache directory. This is useful if you find yourself with no or limited internet access from time to time as your cache directory will be searched before attempting to download the repository from the internet. Here's a quick example of using this variable from the command line:   cmake -DCPM_MODULE_CACHE_DIR=~/.cpm_cache ...  The cache directory is searched only when a module is not found in your project's build directory. If the module is then found in the cache directory, the cache directory will be updated using the appropriate SCM and its directory contents will be copied into your project's build directory. Any subsequent invokation of CMake will find the module in your project's build directory and will not search in the cache directory. Unless you have cleaned the project or removed the build directory's modules. How do I cache CPM itself? Use the following code snippet instead of the one given above. This snippet checks to see if CPM exists in the cache directory before attempting to download it. #------------------------------------------------------------------------------ # Required CPM Setup - See: http://github.com/iauns/cpm #------------------------------------------------------------------------------ set(CPM_DIR ""${CMAKE_CURRENT_BINARY_DIR}/cpm-packages"" CACHE TYPE STRING) find_package(Git) if(NOT GIT_FOUND)   message(FATAL_ERROR ""CPM requires Git."") endif() if ((NOT DEFINED CPM_MODULE_CACHE_DIR) AND (NOT ""$ENV{CPM_CACHE_DIR}"" STREQUAL """"))   set(CPM_MODULE_CACHE_DIR ""$ENV{CPM_CACHE_DIR}"") endif() if ((NOT EXISTS ${CPM_DIR}/CPM.cmake) AND (DEFINED CPM_MODULE_CACHE_DIR))   if (EXISTS ""${CPM_MODULE_CACHE_DIR}/github_iauns_cpm"")     message(STATUS ""Found cached version of CPM."")     file(COPY ""${CPM_MODULE_CACHE_DIR}/github_iauns_cpm/"" DESTINATION ${CPM_DIR})   endif() endif() if (NOT EXISTS ${CPM_DIR}/CPM.cmake)   message(STATUS ""Cloning repo (https://github.com/iauns/cpm)"")   execute_process(     COMMAND ""${GIT_EXECUTABLE}"" clone https://github.com/iauns/cpm ${CPM_DIR}     RESULT_VARIABLE error_code     OUTPUT_QUIET ERROR_QUIET)   if(error_code)     message(FATAL_ERROR ""CPM failed to get the hash for HEAD"")   endif() endif() include(${CPM_DIR}/CPM.cmake)  # Modules go here...  CPM_Finish() How do I see the module dependency hierarchy? When building your project define: CPM_SHOW_HIERARCHY=TRUE. On the command line this would look something like   cmake -DCPM_SHOW_HIERARCHY=TRUE ...  It is best to run this command after you have successfully built your project so the output is not muddied by status messages. I get errors regarding reused binary directories If you get errors similar to:   The binary directory      /Users/jhughes/me/cpp/cpm/modules/ ... /bin    is already used to build a source directory.  It cannot be used to build   source directory.  This means that there exists a circular module reference which is not allowed in CPM. The module graph must not contain cycles. For example, if Module A adds Module B, and Module B adds Module A, you will get this error. How do I Manage CPM Namespaces? There are a number of options here. You could rename the CPM_<NAME>_NS at the top of your implementation files: namespace Spire = CPM_SPIRE_NS; Or you can build a header that renames all of the module namespaces for you. Something akin to the following:   #ifndef __MY_NAMESPACES_H   #define __MY_NAMESPACES_H    // 'Forward declaration' of CPM module namespaces.   namespace CPM_SPIRE_NS {}   namespace CPM_SPIRE_SCIRUN_NS {}   ... (more forward declarations) ...    // Renaming the namespaces in our top level namespace.   namespace my_namespace {     namespace Spire     = CPM_SPIRE_NS;     namespace SpireSR   = CPM_SPIRE_SCIRUN_NS;   }    #endif Be careful with the latter header based approach since there are some pitfalls. For example, the increased possibility of header guard confilcts and namespace conflicts. In general, renaming the namespace at the source level is the recommended way to go. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/iauns/cpm"	"A C++ Package Manager based on CMake and Git."	"true"
"Build Systems"	"FASTBuild"	"http://www.fastbuild.org/docs/home.html"	"High performance, open-source build system supporting highly scalable compilation, caching and network distribution."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"FASTBuild - High-Performance Build System Welcome to FASTBuild! FASTBuild is a high performance, open-source build system supporting highly scalable compilation, caching and network distribution. Take a look at the development status and detailed feature breakdown for more information. FASTBuild v0.90 released!  (2-Jul-2016) An updated version of FASTBuild can now be downloaded, featuring: Distributed compilation optimizations Improved Intellisense support and other enhancements Many other bug fixes and optimizations More..."	"null"	"null"	"High performance, open-source build system supporting highly scalable compilation, caching and network distribution."	"true"
"Build Systems"	"MesonBuild"	"http://mesonbuild.com/"	"An open source build system meant to be both extremely fast, and, even more importantly, as user friendly as possible."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Meson® Build System The Meson Build System Main page Sample code Download Documentation Dependencies Development Community Videos Legal Overview Meson is an open source build system meant to be both extremely fast, and, even more importantly, as user friendly as possible. The main design point of Meson is that every moment a developer spends writing or debugging build definitions is a second wasted. So is every second spent waiting for the build system to actually start compiling code. Features multiplatform support for Linux, OSX, Windows, Gcc, Clang, Visual Studio and others supported languages include C, C++, Fortran, Java, Rust build definitions in a very readable and user friendly non-turing complete DSL cross compilation for many operating systems as well as bare metal optimized for extremely fast full and incremental builds without sacrificing correctness built-in multiplatform dependency provider that works together with distro packages fun!"	"null"	"null"	"An open source build system meant to be both extremely fast, and, even more importantly, as user friendly as possible."	"true"
"Build Systems"	"Ninja"	"http://martine.github.io/ninja/"	"A small build system with a focus on speed."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A small build system with a focus on speed."	"false"
"Build Systems"	"Scons"	"http://www.scons.org/"	"A software construction tool configured with Python scipt."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SCons: A software construction tool - SCons Toggle navigation Community Contact Donate SCons Mailing Lists References Development Development SCons Developer's Guidelines Bugs and Feature Requests Documentation Frequently Asked Questions Current Documentation Logos SCons Version Specific Documentation Download Archives Releases News SCons: A software construction tool What is SCons? SCons is an Open Source software construction tool—that is, a next-generation build tool. Think of SCons as an improved, cross-platform substitute for the classic Make utility with integrated functionality similar to autoconf/automake and compiler caches such as ccache. In short, SCons is an easier, more reliable and faster way to build software. What makes SCons better? Configuration files are Python scripts--use the power of a real programming language to solve build problems. Reliable, automatic dependency analysis built-in for C, C++ and Fortran--no more ""make depend"" or ""make clean"" to get all of the dependencies. Dependency analysis is easily extensible through user-defined dependency Scanners for other languages or file types. Built-in support for C, C++, D, Java, Fortran, Yacc, Lex, Qt and SWIG, and building TeX and LaTeX documents. Easily extensible through user-defined Builders for other languages or file types. Building from central repositories of source code and/or pre-built targets. Built-in support for fetching source files from SCCS, RCS, CVS, BitKeeper and Perforce. Built-in support for Microsoft Visual Studio .NET and past Visual Studio versions, including generation of .dsp, .dsw, .sln and .vcproj files. Reliable detection of build changes using MD5 signatures; optional, configurable support for traditional timestamps. Improved support for parallel builds--like make -j but keeps N jobs running simultaneously regardless of directory hierarchy. Integrated Autoconf-like support for finding #include files, libraries, functions and typedefs. Global view of all dependencies--no more multiple build passes or reordering targets to build everything. Ability to share built files in a cache to speed up multiple builds--like ccache but for any type of target file, not just C/C++ compilation. Designed from the ground up for cross-platform builds, and known to work on Linux, other POSIX systems (including AIX, BSD systems, HP/UX, IRIX and Solaris), Windows NT, Mac OS X, and OS/2. Where did SCons come from? SCons began life as the ScCons build tool design which won the Software Carpentry SC Build competition in August 2000. That design was in turn based on the Cons software construction utility. This project has been renamed SCons to reflect that it is no longer directly connected with Software Carpentry (well, that, and to make it slightly easier to type...). Badges Links SCons on Bitbucket SCons wiki Python.org SCons on Openhub Latest Tweets Tweets by Tags Social RSS © 2016 SCons Foundation · Powered by pelican-bootstrap3, Pelican, Bootstrap Back to top"	"null"	"null"	"A software construction tool configured with Python scipt."	"true"
"Build Systems"	"Sconsolidator"	"http://www.sconsolidator.com/"	"Scons build system integration for Eclipse CDT."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"8"	"9"	"GitHub - IFS-HSR/SConsolidator: An Eclipse plug-in for the build system SCons (scons.org). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 12 Fork 9 IFS-HSR/SConsolidator Code Issues 15 Pull requests 2 Wiki Pulse Graphs An Eclipse plug-in for the build system SCons (scons.org). 42 commits 1 branch 1 release Fetching contributors Java 86.1% C++ 8.5% Python 2.7% HTML 2.0% C 0.4% CSS 0.3% Java C++ Python HTML C CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 Nothing to show New pull request Latest commit ebc0cee Jun 30, 2016 Thomas Corbat missing parts of previous commit Permalink Failed to load latest commit information. ch.hsr.ifs.sconsolidator.core.tests Updated sample project Apr 8, 2016 ch.hsr.ifs.sconsolidator.core add a target for eclipse neon Jun 30, 2016 ch.hsr.ifs.sconsolidator.depviz.feature Version bump to 1.0.0 Apr 8, 2016 ch.hsr.ifs.sconsolidator.depviz Version bump to 1.0.0 Apr 8, 2016 ch.hsr.ifs.sconsolidator.feature Version bump to 1.0.0 Apr 8, 2016 ch.hsr.ifs.sconsolidator.help Version bump to 1.0.0 Apr 8, 2016 ch.hsr.ifs.sconsolidator.swtbottests Version bump to 1.0.0 Apr 8, 2016 ch.hsr.ifs.sconsolidator.target missing parts of previous commit Jun 30, 2016 ch.hsr.ifs.sconsolidator.updates Version bump to 1.0.0 Apr 8, 2016 .gitignore Updated .gitignore Apr 8, 2016 .travis.yml run xvfb screenbuffer in travis for eclipse tests Mar 28, 2014 README.md Done #39 Apr 8, 2016 changelog.txt initial commit of sconsolidator v0.6 Mar 28, 2014 eclipse-java-google-style.xml initial commit of sconsolidator v0.6 Mar 28, 2014 pom.xml missing parts of previous commit Jun 30, 2016 runtests.sh initial commit of sconsolidator v0.6 Mar 28, 2014 screenshot.png Done #39 Apr 8, 2016 README.md SConsolidator - An Eclipse plug-in for SCons Install it from our Eclipse Update Site at http://www.sconsolidator.com/update Introduction SCons is an open source software build tool which tries to fix the numerous weaknesses of Make clones like the missing automatic dependency extraction, the complex syntax to describe build properties and the cross-platform issues when using shell scripts. SCons is a self-contained tool which is not dependent on any existing platform utilities. Because it is based on Python the user has the full power of a modern scripting language to deal with all build related issues. For the acceptance of a build tool it is very important to have a comfortable integration into an IDE. Before now there was no satisfying support for SCons in Eclipse. SConsolidator - a term project at the University of Applied Sciences in Rapperswil - addresses this and provides tool integration for SCons in Eclipse for a convenient C/C++ development experience. Features Convertion of existing CDT managed build projects to SCons projects Import of existing SCons projects into Eclipse with wizard support Interactive mode to quickly build single C/C++ source files speeding up round-trip times A special view for a convenient build target management of all workspace projects Graph visualization of build dependencies that helps in debugging SCons build problems Documentation See this getting started guide for help on how to use SConsolidator with your C++ projects. Contribution help Minimum requirements to contribute Java 7 Eclipse 3.7 (Indigo) SCons Maven v3 (because we use Tycho) Eclipse project setup Install Eclipse and SCons Import projects into Eclipse with the project wizard Open target file ch.hsr.ifs.sconsolidator.core.target and install dependencies through ""Set as Target Platform"" Build We use Tycho and Maven to build the project artifacts: $ mvn compile Run tests $ mvn integration-test or if you prefer to run the tests in a X screen buffer, you can use the following script: $ runtests.sh Project layout ch.hsr.ifs.sconsolidator.core SConsoldator's core functionality including all UI stuff, project wizards, builders, Python files for collection build information from existing projects, etc. ch.hsr.ifs.sconsolidator.core.tests All Junit tests for SConsolidator's core functionality as well as the tests for collecting build information from existing projects ch.hsr.ifs.sconsolidator.feature Eclipse feature project for SConsolidator's core plug-in ch.hsr.ifs.sconsolidator.depviz SConsolidators dependency visualization plug-in that shows the dependencies between C++ build entities like source, object and library files; based on the Eclipse's Visualization Toolkit Zest ch.hsr.ifs.sconsolidator.depviz.feature Eclipse feature project for SConsolidator's dependency visualization plug-in ch.hsr.ifs.sconsolidator.help Eclipse project for SConsolidator's Eclipse help system (Getting started guide, welcome page, etc.) ch.hsr.ifs.sconsolidator.swtbottests Some UI tests based on SWTBot ch.hsr.ifs.sconsolidator.updates Eclipse Update site project Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/IFS-HSR/SConsolidator"	"Scons build system integration for Eclipse CDT."	"true"
"Build Systems"	"tundra"	"https://github.com/deplinenoise/tundra"	"High-performance code build system designed to give the best possible incremental build times even for very large software projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"190"	"27"	"41"	"GitHub - deplinenoise/tundra: Tundra is a code build system that tries to be accurate and fast for incremental builds Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 190 Fork 41 deplinenoise/tundra Code Issues 13 Pull requests 1 Wiki Pulse Graphs Tundra is a code build system that tries to be accurate and fast for incremental builds 905 commits 2 branches 36 releases 26 contributors C 44.0% C++ 30.9% Lua 22.5% Perl 1.6% Makefile 0.6% NSIS 0.3% Batchfile 0.1% C C++ Lua Perl Makefile NSIS Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 master Nothing to show v2.0-beta11 v2.0-beta10 v2.0-beta9 v2.0-beta8 v2.0-beta7 v2.0-beta4 v2.0-beta3 v2.0-beta2 v2.0-beta1 v1.2 v1.2a v1.1 v1.1a v1.0 v1.0b v0.99 v0.99k v0.99j v0.99i v0.99h v0.99g v0.99f v0.99e v0.99d v0.99b v0.99a v0.98 v0.97 v0.96 v0.95beta5 jhall1024-v1.0 Beta6 Beta6a 2.0-Beta5 1.0a 0.99c Nothing to show New pull request Latest commit e07b12a Jun 29, 2016 deplinenoise committed on GitHub Merge pull request #279 from bmharper/vcbuildtools … Add support for Visual C++ Build Tools 2015 Permalink Failed to load latest commit information. doc Added Rust support Feb 19, 2016 examples Fix precompiled headers in combination with globbing Jun 21, 2016 lua Enable popen for FreeBSD as well. Dec 27, 2014 scripts Add support for Visual C++ Build Tools 2015 Jun 29, 2016 src Added Rust support Feb 20, 2016 test Rework Source resolution to support nested SourceDir Apr 18, 2014 unittest Implemented 4-xxhash as a faster hash option. Apr 27, 2013 vs2012 Rework threading abstractions to run on Windows XP. Apr 19, 2014 windows-installer Build PathControl rather than downloading it. Jun 18, 2013 .gitignore Add bare-bones NSIS installer. May 2, 2013 COPYING Applied the GPL license to Tundra. Aug 4, 2010 Makefile Fix building outside git checkout. Oct 12, 2015 README.md Update README with WinXP note. Apr 19, 2014 dummy_version_file Fix building outside git checkout. Oct 13, 2015 prof2text.pl Add Lua profiler and report generator script. Sep 2, 2013 run-tests.pl Added support for running only certain tests. Jan 9, 2012 README.md Tundra, a build system Tundra is a high-performance code build system designed to give the best possible incremental build times even for very large software projects. Tundra is portable and works on Mac OSX (10.6-10.8 tested, but most any version should work) Linux FreeBSD Windows (XP or later - binary releases require Vista/64 or later - for XP support build from source using MinGW.) Porting to UNIX-like platforms will be very easy, porting to other platforms will take a little bit of work in a few well-defined places. See doc/manual.asciidoc for more detailed usage information. There is a companion Visual Studio 2012 addin that might be useful. See https://github.com/deplinenoise/tundra-vsplugin for details. Binaries Windows installers are available for download in the releases tab. License and Copyright Tundra is Copyright 2010-2013 Andreas Fredriksson. Tundra is made available under the GNU GPL. See the file COPYING for the complete license text. Tundra uses Lua. See below for Lua's licensing terms which are compatible with those of the GNU GPL. Tundra includes a public domain Lua Debugger, see below. Tundra includes the public domain dlmalloc by Doug Lea. Lua Copyright (c) 1994-2008 Lua.org, PUC-Rio. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Lua Debugger Tundra includes an optional Lua CLI debugger which is public domain software written by Dave Nichols. The debugger was obtained from luaforge.net. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/deplinenoise/tundra"	"High-performance code build system designed to give the best possible incremental build times even for very large software projects."	"true"
"Build Systems"	"tup"	"http://gittup.org/tup/"	"File-based build system that monitors in the background for changed files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"tup | Home Site Map Home Getting Started Examples A First Tupfile Dependencies Generated Header Multiple Directories Manual Lua Parser Lua Examples Tips and Tricks Make vs Tup Tup vs Mordor License Support Additional Info Build System Rules and Algorithms (PDF) tup-users mailing list Home What is tup? Tup is a file-based build system for Linux, OSX, and Windows. It inputs a list of file changes and a directed acyclic graph (DAG), then processes the DAG to execute the appropriate commands required to update dependent files. Updates are performed with very little overhead since tup implements powerful build algorithms to avoid doing unnecessary work. This means you can stay focused on your project rather than on your build system. Get tup Git Repository  $ git clone git://github.com/gittup/tup.git $ cd tup tup$ ./bootstrap.sh tup$ man ./tup.1  Windows Download latest version List of previous versions Linux Ubuntu If you don't want to install tup from the git tree, you can use the unofficial tup PPA repository that works for Debian-based distributions (e.g. Ubuntu 10.04+).  sudo apt-add-repository 'deb http://ppa.launchpad.net/anatol/tup/ubuntu precise main' sudo apt-get update sudo apt-get install tup  MacOSX If you use the Homebrew package manager you can install tup as follows:  brew tap homebrew/fuse brew install homebrew/fuse/tup  If you use MacPorts install tup as: sudo port install tup Why tup? You can use tup anywhere you would use another build system (like make, or any of its derivatives). One reason you would want to use tup is if you like to update things very quickly. For example, if you typically execute a build in a subdirectory because it takes too long to figure out what to do when you execute the build from the top, you might want to look into tup. Unfortunately, tup is so fast that your chair mounted jousting might suffer. I apologize in advance if someone besmirches your honor and you are unable to properly defend yourself as a result. Wha tup? Nothing much, just writing some web pages. What's up with you? Why is it so awesome? It is very fast. It will automatically clean-up old files. It will detect if your build description isn't parallel-safe, and tell you. What this means is: Your edit/compile/test cycle is quick, even if your project is large. You just run: tup upd You don't have to outsmart your build system by starting it in a subdirectory to make it go faster. Anywhere in the tree: tup upd Your version control lets you rename a file. Does your build system? tup upd Fresh checkouts: gone. 'clean' builds: gone. Worries: gone. What remains: tup upd How is it so awesome? In a typical build system, the dependency arrows go down. Although this is the way they would naturally go due to gravity, it is unfortunately also where the enemy's gate is. This makes it very inefficient and unfriendly. In tup, the arrows go up. This is obviously true because it rhymes. See how the dependencies differ in make and tup: Make Tup See the difference? The arrows go up. This makes it very fast. In fact, in at least one case, tup is optimal. See the Build System Rules and Algorithms (PDF) paper for more detailed information. © 2008-2016 Mike Shal. All Rights Reserved."	"null"	"null"	"File-based build system that monitors in the background for changed files."	"true"
"Build Systems"	"Premake"	"http://premake.github.io/"	"A tool configured with lua scipt to generate project files for Visual Studio, GNU Make, Xcode, Code::Blocks, and more across Windows, Mac OS X, and Linux."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"426"	"57"	"121"	"GitHub - premake/premake-core: Premake Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 57 Star 426 Fork 121 premake/premake-core Code Issues 68 Pull requests 16 Wiki Pulse Graphs Premake 2,459 commits 3 branches 14 releases 45 contributors C 78.3% Lua 15.4% HTML 4.4% C++ 1.6% Groff 0.1% Assembly 0.1% Other 0.1% C Lua HTML C++ Groff Assembly Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master release revert-507-rule-cpp-output Nothing to show v5.0.0.alpha4 v5.0.0-alpha9 v5.0.0-alpha8 v5.0.0-alpha7 v5.0.0-alpha6 v5.0.0-alpha5 5.0-alpha2 5.0-alpha1 4.4-beta3 4.4-beta2 4.4-beta1 4.3 4.3-rc2 4.3-beta1 Nothing to show New pull request Latest commit 38ddf0b Jul 14, 2016 starkos committed on GitHub Merge pull request #536 from Euclideon/expandtoken_fix … Fix regression in expandtoken Permalink Failed to load latest commit information. contrib fix zlib Jun 10, 2016 modules Print full text in test_assertions (#522) Jun 22, 2016 packages/debian Copied packaging files to 4.0 trunk May 5, 2008 scripts Adjust packaging script to fetch version number from new location Jun 6, 2016 src Merge pull request #536 from Euclideon/expandtoken_fix Jul 14, 2016 tests Merge pull request #503 from Blizzard/linkgroups-api Jun 10, 2016 .editorconfig Added .editorconfig file (http://editorconfig.org/) Apr 5, 2015 .gitignore Move testing framework into a core module May 16, 2016 .gitmodules Added D language submodule. May 21, 2015 .travis.yml build on travis osx. Dec 17, 2015 BUILD.txt Add support for MinGW as a host bootstrap platform. Jun 11, 2015 Bootstrap.mak update bootstrap.mak Feb 26, 2016 CHANGES.txt Update version and change log for alpha9 release May 31, 2016 CONTRIBUTORS.txt Captured changes since alpha6 Dec 17, 2015 LICENSE.txt Happy New Year Jan 18, 2016 README.md Use PremakeOrganization instead of private AppVeyor account. Jun 21, 2016 appveyor.yml Create appveyor.yml Jun 6, 2016 doxyfile Initial import of my local 4.x development code Apr 6, 2008 premake4.lua Move Lua into folder without version, so it's easier to update to a n… Oct 5, 2015 premake5.lua Split test declarations and stubs out into their own files; improve e… May 18, 2016 README.md PREMAKE 5 (core) Linux : Windows: Premake is a command line utility which reads a scripted definition of a software project and, most commonly, uses it to generate project files for toolsets like Visual Studio, Xcode, or GNU Make. Built-in and Third-Party Modules add support for even more toolsets. Find out in detail what Premake is and how to use it in the wiki. Get started Download Premake Read the wiki to find out how to get your project up and running with Premake. News and Community Check the official Github project for the latest developments For questions about using Premake and authoring project scripts, please ask on StackOverflow, adding the #premake tag to your question. For discussions about developing, customizing, or extending Premake and add-on modules, please use the Premake Developers Google Groups forum. Report isssues Something not working quite as expected? Do you need a feature that has not been implemented yet? Check the issue tracker and add a new one if your problem is not already listed. Please try to provide a detailed description of your problem, including the steps to reproduce it. Contribute Awesome! View the contribution guidelines before you contribute. If you would like to contribute with a new feature or submit a bugfix, fork this repo and send a pull request. Please, make sure all the unit tests are passing before submitting and add new ones in case you introduced new features. Copyright & License Copyright © 2002-2016 by Jason Perkins Distributed under the terms of the BSD License, see LICENSE.txt The Lua language and runtime library is © TeCGraf, PUC-Rio. See their website at http://www.lua.org/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/premake/premake-core"	"A tool configured with lua scipt to generate project files for Visual Studio, GNU Make, Xcode, Code::Blocks, and more across Windows, Mac OS X, and Linux."	"true"
"Static Code Analysis"	"Cppcheck"	"http://cppcheck.sourceforge.net/"	"A tool for static C/C++ code analysis. -"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cppcheck - A tool for static C/C++ code analysis Cppcheck A tool for static C/C++ code analysis Home Wiki Forum Issues Developer Info Online Demo Project page Download Features News Documentation Support Contribute Cppcheck is a static analysis tool for C/C++ code. Unlike C/C++ compilers and many other analysis tools it does not detect syntax errors in the code. Cppcheck primarily detects the types of bugs that the compilers normally do not detect. The goal is to detect only real errors in the code (i.e. have zero false positives). Download Download Now! Version 1.74 for Windows (64-bit)   Download Now! Version 1.74 for Windows (32-bit) Clients and plugins Cppcheck is integrated with many popular development tools. For instance: CLion - Cppcheck plugin Code::Blocks - integrated CodeDX (software assurance tool) - integrated CodeLite - integrated CppDepend 5 - integrated Eclipse - Cppcheclipse gedit - gedit plugin Hudson - Cppcheck Plugin Jenkins - Cppcheck Plugin Mercurial (Linux) - pre-commit hook - Check for new errors on commit (requires interactive terminal) Tortoise SVN - Adding a pre-commit hook script Git (Linux) - pre-commit hook - Check for errors in files going into commit (requires interactive terminal) Visual Studio - Visual Studio plugin Other static analysis tools Using a battery of tools is better than using 1 tool. Therefore we recommend that you also use other tools. Cppcheck focus on bugs instead of stylistic issues. Therefore a tool that focus on stylistic issues could be a good addition. Cppcheck tries very hard to avoid false positives. Sometimes people want to detect all bugs even if there will be many false warnings, for instance when they are working on a release and want to verify that there are no bugs. A tool that is much more noisy than Cppcheck might be a good addition. Even tools that have the same design goals as Cppcheck will probably be good additions. Static analysis is such a big field, Cppcheck only covers a small fraction of it. No tool covers the whole field. The day when all manual testing will be obsolete because of some tool is very far away. Features Detect various kinds of bugs in your code. Out of bounds checking Memory leaks checking Detect possible null pointer dereferences Check for uninitialized variables Check for invalid usage of STL Checking exception safety Warn if obsolete or unsafe functions are used Warn about unused or redundant code Detect various suspicious code indicating bugs … For a list of all checks see: http://sourceforge.net/p/cppcheck/wiki/ListOfChecks. In addition, there are also a few extra checks in the Cppcheck repository that can be downloaded; rules , addons. Both command line interface and graphical user interface are available. Cppcheck can be extended. You can: look for simple patterns, see chapter about rules in the manual (pdf, html) define rules for functions with .cfg files, see chapter about library files in the manual (pdf, html) extend cppcheck with scripts, see chapter about addons in the manual (pdf, html) News Cppcheck-1.74 discussion 2016-06-13 Cppcheck-1.74 2016-06-05 Cppcheck-1.73 2016-04-08 View all news… Documentation You can read the manual or download some articles. Support Use Trac to report bugs and feature requests Ask questions at the IRC channel #cppcheck Contribute You are welcome to contribute. Help is needed. Testing Pick a project and test its source with the latest version of Cppcheck. Submit tickets to Trac about the issues you find in Cppcheck. Developing Pick a ticket from Trac, write a test case for it (and write a comment to the ticket for which that test case has been created). Alternatively, pick a test case that fails and try to fix it. Make a patch and submit it to Trac either inline, if it is small, or otherwise - attach it as a file. Marketing Write articles, reviews or tell your friends about us. The more users we have, the more people we have testing and the better we can become. Design Come up with some new good checks, and create tickets in the Trac instance about them. Integration Write a plugin for your favorite IDE or create a package for your distribution or operating system. Technical Writing Write better documentation for the bugs we find. Currently only a few bugs have any documentation at all."	"null"	"null"	"A tool for static C/C++ code analysis. -"	"true"
"Static Code Analysis"	"source"	"https://github.com/danmar/cppcheck"	"A tool for static C/C++ code analysis. -"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"965"	"149"	"364"	"GitHub - danmar/cppcheck: static analysis of C/C++ code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 149 Star 965 Fork 364 danmar/cppcheck Code Pull requests 7 Pulse Graphs static analysis of C/C++ code http://cppcheck.sourceforge.net/ 14,953 commits 4 branches 49 releases 130 contributors C++ 96.4% C 1.1% Python 0.9% Makefile 0.7% CMake 0.3% HTML 0.3% Other 0.3% C++ C Python Makefile CMake HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.63.x gui2 master simplecpp Nothing to show 1.74 1.73 1.72 1.71 1.70 1.69 1.68 1.67 1.66 1.65 1.64 1.63.1 1.63 1.62.1 1.62 1.61 1.60.1 1.60 1.59 1.58 1.57 1.56 1.55 1.54 1.53 1.52 1.51 1.50 1.49 1.48 1.47 1.46.1 1.46 1.45 1.44 1.43 1.42 1.41 1.40 1.39 1.38 1.37 1.36 1.35 1.34 1.33 1.32 1.31 1.30 Nothing to show New pull request Latest commit e495bfb Jul 10, 2016 amai2012 Use proper tokenizer variable Permalink Failed to load latest commit information. Cppcheck.xcodeproj Fix xcode project file Nov 23, 2015 addons Update Y2038 addon Jun 29, 2016 cfg Library: Support arguments with default value. Fixed default value ha… Jul 9, 2016 cli Updated TinyXML, make use of second argument of XMLElement::Attribute() Jul 9, 2016 cmake Set version to 1.73.99/1.74 dev Apr 22, 2016 democlient Fixed Cppcheck format string warning Jan 15, 2016 externals/tinyxml Updated TinyXML, make use of second argument of XMLElement::Attribute() Jul 9, 2016 gui Updated russian translation. (#804) Jun 14, 2016 htmlreport http://cppcheck.sourceforge.net => http://cppcheck.net Jun 5, 2016 lib Use proper tokenizer variable Jul 10, 2016 man Set version to 1.74.99/1.75 dev Jun 7, 2016 platforms platform files: s/u/unsigned/ in default-sign Jan 9, 2016 rules Rules: Make it possible to write rules that check #define macros Jul 12, 2013 samples Tokenizer::syntaxError: put the character that we have an invalid num… Jul 31, 2015 test Fixed false positive reademptycontainer when end() is called (#7560) Jul 10, 2016 tools Revert ""Preprocessor: Start replacing our Preprocessor code with simp… Jul 7, 2016 triage PEP8 fixes. Apr 20, 2015 win_installer Improved Windows Installer: Jun 7, 2016 .gitignore Fixed #7275 - Make GUI tests buildable Jan 8, 2016 .mailmap Revert ""Revert ""Add a .mailmap file."""" Oct 4, 2013 .travis.yml travis: check llvm too, for greater coverage Jan 23, 2016 .travis_suppressions Fixed false positive stlIfStrFind for function call inside condition. Nov 20, 2015 AUTHORS Update AUTHORS Apr 8, 2016 CMakeLists.txt Added testrunner test to cmake. #7098 Nov 26, 2015 COPYING Licensing: Using the GPL 3 license Oct 26, 2008 Makefile Revert ""Preprocessor: Start replacing our Preprocessor code with simp… Jul 7, 2016 appveyor.yml Appveyor: Add logger so we can see `Compilation messages` on a dedica… Feb 2, 2016 build-pcre.txt Updated/Improved several readme files Nov 6, 2015 build.bat batch files: switch to the batch file directory before doing anything… Sep 29, 2012 console_common.pri pro and pri files: remove unneeded empty lines, use spaces for consis… Oct 12, 2012 cppcheck.cbp Removed ExecutionPath Jul 23, 2015 cppcheck.cppcheck Fixed: some gui/temp headers reported missing includes from gui/ folder. Nov 1, 2011 cppcheck.sln Updated WiX installer and VS solution to VS12 and Qt5 Aug 2, 2014 createrelease minor updates of createrelease Jan 9, 2016 doxyfile doxyfile: disable dot support. Aug 17, 2013 generate_coverage_report Adjust options for lcov/genhtml to unmangled symbols and HTML frames Feb 2, 2016 readme.md readme: minor fix Jan 18, 2016 readme.txt Updated/Improved several readme files Nov 6, 2015 runastyle Updated AStyle to version 2.05.1 Dec 17, 2015 runastyle.bat Updated AStyle to version 2.05.1 Dec 17, 2015 webreport.sh webreport: try to fix generation of cppcheckdata doxygen output Aug 28, 2015 readme.md Cppcheck Linux Build Status Windows Build Status Coverity Scan Build Status Donations If you find Cppcheck useful for you, feel free to make a donation. About the name The original name of this program was ""C++check"", but it was later changed to ""Cppcheck"". Despite the name, Cppcheck is designed for both C and C++. Manual A manual is available online. Compiling Any C++11 compiler should work. For compilers with partial C++11 support it may work. If your compiler has the C++11 features that are available in Visual Studio 2010 then it will work. If nullptr is not supported by your compiler then this can be emulated using the header lib/cxx11emu.h. To build the GUI, you need Qt. When building the command line tool, PCRE is optional. It is used if you build with rules. There are multiple compilation choices: qmake - cross platform build tool cmake - cross platform build tool Windows: Visual Studio (VS 2010 and above) Windows: Qt Creator + mingw gnu make g++ 4.6 (or later) clang++ qmake You can use the gui/gui.pro file to build the GUI. cd gui qmake make Visual Studio Use the cppcheck.sln file. The file is configured for Visual Studio 2015, but the platform toolset can be changed easily to older or newer versions. The solution contains platform targets for both x86 and x64. To compile with rules, select ""Release-PCRE"" or ""Debug-PCRE"" configuration. pcre.lib (pcre64.lib for x64 builds) and pcre.h are expected to be in /externals then. Qt Creator + MinGW The PCRE dll is needed to build the CLI. It can be downloaded here: http://software-download.name/pcre-library-windows/ GNU make Simple, unoptimized build (no dependencies): make The recommended release build is: make SRCDIR=build CFGDIR=cfg HAVE_RULES=yes CXXFLAGS=""-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function"" Flags: SRCDIR=build Python is used to optimise cppcheck CFGDIR=cfg Specify folder where .cfg files are found HAVE_RULES=yes Enable rules (PCRE is required if this is used) CXXFLAGS=""-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function"" Enables most compiler optimizations, disables cppcheck-internal debugging code and enables basic compiler warnings. g++ (for experts) If you just want to build Cppcheck without dependencies then you can use this command: g++ -o cppcheck -std=c++0x -include lib/cxx11emu.h -Iexternals/tinyxml -Ilib cli/*.cpp lib/*.cpp externals/tinyxml/*.cpp If you want to use --rule and --rule-file then dependencies are needed: g++ -o cppcheck -std=c++0x -include lib/cxx11emu.h -lpcre -DHAVE_RULES -Ilib -Iexternals/tinyxml cli/*.cpp lib/*.cpp externals/tinyxml/*.cpp MinGW make LDFLAGS=-lshlwapi Other Compiler/IDE Create a empty project file / makefile. Add all cpp files in the cppcheck cli and lib folders to the project file / makefile. Compile. Cross compiling Win32 (CLI) version of Cppcheck in Linux sudo apt-get install mingw32 make CXX=i586-mingw32msvc-g++ LDFLAGS=""-lshlwapi"" RDYNAMIC="""" mv cppcheck cppcheck.exe Webpage http://cppcheck.sourceforge.net/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/danmar/cppcheck"	"A tool for static C/C++ code analysis. -"	"true"
"Static Code Analysis"	"include-what-you-use"	"https://code.google.com/p/include-what-you-use/"	"A tool for use with clang to analyze includes in C and C++ source files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"A tool for use with clang to analyze includes in C and C++ source files."	"true"
"Static Code Analysis"	"OCLint"	"http://oclint.org/"	"A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C. -"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1386"	"125"	"180"	"GitHub - oclint/oclint: A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 125 Star 1,386 Fork 180 oclint/oclint Code Issues 51 Pull requests 1 Pulse Graphs A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C http://oclint.org 936 commits 1 branch 5 releases 20 contributors C++ 91.6% Python 5.6% CMake 2.7% Shell 0.1% C++ Python CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.10.3 v0.10.2 v0.10.1 v0.7.0.257 v0.6.0.110 Nothing to show New pull request Latest commit 0cafd45 Jul 12, 2016 ryuichis committed on GitHub Merge pull request #350 from ryuichis/ubuntu-16.04 … Supporting Ubuntu 16.04 Permalink Failed to load latest commit information. oclint-core Merge pull request #350 from ryuichis/ubuntu-16.04 Jul 12, 2016 oclint-driver Fix long method issue for DiagnosticDispatcher Jul 7, 2016 oclint-metrics Fix segfault in NPathComplexityMetric May 20, 2016 oclint-reporters A better license template by adding contributors as copyright holders Jan 2, 2016 oclint-rules Fix two broken tests Jul 10, 2016 oclint-scripts Merge pull request #350 from ryuichis/ubuntu-16.04 Jul 12, 2016 .gitignore Start new scripts with building oclint modules Aug 14, 2013 .travis.yml Make coveralls works for gcov Jul 11, 2016 README.md Add Coveralls badge to Readme Jan 31, 2016 README.md OCLint - http://oclint.org OCLint is a static code analysis tool for improving quality and reducing defects by inspecting C, C++ and Objective-C code. It looks for potential problems that aren't visible to compilers, for example: Possible bugs - empty if/else/try/catch/finally statements Unused code - unused local variables and parameters Complicated code - high cyclomatic complexity, NPath complexity and high NCSS Redundant code - redundant if statement and useless parentheses Code smells - long method and long parameter list Bad practices - inverted logic and parameter reassignment ... For more information, visit http://oclint.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/oclint/oclint"	"A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C. -"	"true"
"Static Code Analysis"	"source"	"https://github.com/oclint/oclint"	"A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C. -"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1386"	"125"	"180"	"GitHub - oclint/oclint: A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 125 Star 1,386 Fork 180 oclint/oclint Code Issues 51 Pull requests 1 Pulse Graphs A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C http://oclint.org 936 commits 1 branch 5 releases 20 contributors C++ 91.6% Python 5.6% CMake 2.7% Shell 0.1% C++ Python CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.10.3 v0.10.2 v0.10.1 v0.7.0.257 v0.6.0.110 Nothing to show New pull request Latest commit 0cafd45 Jul 12, 2016 ryuichis committed on GitHub Merge pull request #350 from ryuichis/ubuntu-16.04 … Supporting Ubuntu 16.04 Permalink Failed to load latest commit information. oclint-core Merge pull request #350 from ryuichis/ubuntu-16.04 Jul 12, 2016 oclint-driver Fix long method issue for DiagnosticDispatcher Jul 7, 2016 oclint-metrics Fix segfault in NPathComplexityMetric May 20, 2016 oclint-reporters A better license template by adding contributors as copyright holders Jan 2, 2016 oclint-rules Fix two broken tests Jul 10, 2016 oclint-scripts Merge pull request #350 from ryuichis/ubuntu-16.04 Jul 12, 2016 .gitignore Start new scripts with building oclint modules Aug 14, 2013 .travis.yml Make coveralls works for gcov Jul 11, 2016 README.md Add Coveralls badge to Readme Jan 31, 2016 README.md OCLint - http://oclint.org OCLint is a static code analysis tool for improving quality and reducing defects by inspecting C, C++ and Objective-C code. It looks for potential problems that aren't visible to compilers, for example: Possible bugs - empty if/else/try/catch/finally statements Unused code - unused local variables and parameters Complicated code - high cyclomatic complexity, NPath complexity and high NCSS Redundant code - redundant if statement and useless parentheses Code smells - long method and long parameter list Bad practices - inverted logic and parameter reassignment ... For more information, visit http://oclint.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/oclint/oclint"	"A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C. -"	"true"
"Static Code Analysis"	"Clang Static Analyzer"	"http://clang-analyzer.llvm.org/index.html"	"A source code analysis tool that finds bugs in C, C++, and Objective-C programs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Clang Static Analyzer About About the Analyzer LLVM Project Clang Project Filing Bugs User Manual Obtaining the Analyzer Command Line Usage Using within Xcode Available Checks FAQ Source-level Annotations Development Checker Developer Manual Open Projects Potential Future Checkers Mailing Lists cfe-dev cfe-commits Clang Static Analyzer The Clang Static Analyzer is a source code analysis tool that finds bugs in C, C++, and Objective-C programs. Currently it can be run either as a standalone tool or within Xcode. The standalone tool is invoked from the command line, and is intended to be run in tandem with a build of a codebase. The analyzer is 100% open source and is part of the Clang project. Like the rest of Clang, the analyzer is implemented as a C++ library that can be used by other tools and applications. Download Mac OS X Latest build (10.7+): checker-278.tar.bz2 (built February 5, 2016) Release notes This build can be used both from the command line and from within Xcode Installation and usage Other Platforms For other platforms, please follow the instructions for building the analyzer from source code. Viewing static analyzer results in Xcode Viewing static analyzer results in a web browser What is Static Analysis? The term ""static analysis"" is conflated, but here we use it to mean a collection of algorithms and techniques used to analyze source code in order to automatically find bugs. The idea is similar in spirit to compiler warnings (which can be useful for finding coding errors) but to take that idea a step further and find bugs that are traditionally found using run-time debugging techniques such as testing. Static analysis bug-finding tools have evolved over the last several decades from basic syntactic checkers to those that find deep bugs by reasoning about the semantics of code. The goal of the Clang Static Analyzer is to provide a industrial-quality static analysis framework for analyzing C, C++, and Objective-C programs that is freely available, extensible, and has a high quality of implementation. Part of Clang and LLVM As its name implies, the Clang Static Analyzer is built on top of Clang and LLVM. Strictly speaking, the analyzer is part of Clang, as Clang consists of a set of reusable C++ libraries for building powerful source-level tools. The static analysis engine used by the Clang Static Analyzer is a Clang library, and has the capability to be reused in different contexts and by different clients. Important Points to Consider While we believe that the static analyzer is already very useful for finding bugs, we ask you to bear in mind a few points when using it. Work-in-Progress The analyzer is a continuous work-in-progress. There are many planned enhancements to improve both the precision and scope of its analysis algorithms as well as the kinds of bugs it will find. While there are fundamental limitations to what static analysis can do, we have a long way to go before hitting that wall. Slower than Compilation Operationally, using static analysis to automatically find deep program bugs is about trading CPU time for the hardening of code. Because of the deep analysis performed by state-of-the-art static analysis tools, static analysis can be much slower than compilation. While the Clang Static Analyzer is being designed to be as fast and light-weight as possible, please do not expect it to be as fast as compiling a program (even with optimizations enabled). Some of the algorithms needed to find bugs require in the worst case exponential time. The Clang Static Analyzer runs in a reasonable amount of time by both bounding the amount of checking work it will do as well as using clever algorithms to reduce the amount of work it must do to find bugs. False Positives Static analysis is not perfect. It can falsely flag bugs in a program where the code behaves correctly. Because some code checks require more analysis precision than others, the frequency of false positives can vary widely between different checks. Our long-term goal is to have the analyzer have a low false positive rate for most code on all checks. Please help us in this endeavor by reporting false positives. False positives cannot be addressed unless we know about them. More Checks Static analysis is not magic; a static analyzer can only find bugs that it has been specifically engineered to find. If there are specific kinds of bugs you would like the Clang Static Analyzer to find, please feel free to file feature requests or contribute your own patches."	"null"	"null"	"A source code analysis tool that finds bugs in C, C++, and Objective-C programs."	"true"
"Static Code Analysis"	"Linticator"	"http://linticator.com/"	"Eclipse CDT integration of Pc-/FlexeLint."	"null"	"null"	"null"	"List of tools for static code analysis"	"http://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#C.2FC.2B.2B"	"null"	"null"	"null"	"null"	"null"	"Overview - Linticator Sign in Register Projects Help Search: Linticator — Flexe/PC-Lint Integration for Eclipse CDT Overview Activity Wiki Files Linticator¶ Overview Linticator's features Changelog About Pricing and Purchasing License Guides and Howtos User Guide Installation Quickfixes Examples FAQ Reporting Bugs Lint provides valuable feedback on programming style and common programmer mistakes. Our Linticator plug-in for Eclipse CDT runs Lint and annotates your source code with Lint messages. For some messages, we provide quickfixes that let you quickly correct a warning. Find Your Bugs¶ Linticator reports problems directly in your source code view, allowing you to get rid of them quickly. Let Linticator Fix Your Bugs¶ Linticator's outstanding quick-fixes resolve potential bugs with a single mouse-click. Found a false positive? Simply mute it with one of our quick-fixes. Integrated Lint Documentation¶ Not sure what a lint message means? Linticator automatically shows you the official documentation for all Lint messages. Simpler to Use¶ Linticator automatically configures Lint with your Eclipse CDT Project settings, unburdening you from manually maintaining the configuration. Cross Platform¶ Linticator runs on AIX, Linux, Mac OS X, Solaris, and Windows. Linticator runs on Eclipse 3.4 and all newer releases (we tested up to Eclipse Mars), but some features are only available on Eclipse 3.6 and newer. Linticator is compatible with commercial Eclipse-based IDEs like Freescale's CodeWarrior. And More ...¶ More information on Linticator can be found in the User Guide or you can take a look at some screenshots in a short tour on Linticator's features. Get Linticator!¶ You can evaluate Linticator free of charge for 30 days, after that you'll need to obtain a license Do you want to reduce your compilation times? Let Includator manage your includes.¶ Loading... Powered by Redmine © 2006-2014 Jean-Philippe Lang"	"null"	"null"	"Eclipse CDT integration of Pc-/FlexeLint."	"true"
"Coding Style Tools"	"ClangFormat"	"http://clang.llvm.org/docs/ClangFormat.html"	"A tool to format C/C++/Obj-C code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ClangFormat — Clang 3.9 documentation Clang 3.9 documentation ClangFormat «  ClangCheck   ::   Contents   ::   Clang-Format Style Options  » ClangFormat¶ ClangFormat describes a set of tools that are built on top of LibFormat. It can support your workflow in a variety of ways including a standalone tool and editor integrations. Standalone Tool¶ clang-format is located in clang/tools/clang-format and can be used to format C/C++/Obj-C code. $ clang-format -help OVERVIEW: A tool to format C/C++/Java/JavaScript/Objective-C/Protobuf code.  If no arguments are specified, it formats the code from standard input and writes the result to the standard output. If <file>s are given, it reformats the files. If -i is specified together with <file>s, the files are edited in-place. Otherwise, the result is written to the standard output.  USAGE: clang-format [options] [<file> ...]  OPTIONS:  Clang-format options:    -assume-filename=<string> - When reading from stdin, clang-format assumes this                               filename to look for a style config file (with                               -style=file) and to determine the language.   -cursor=<uint>            - The position of the cursor when invoking                               clang-format from an editor integration   -dump-config              - Dump configuration options to stdout and exit.                               Can be used with -style option.   -fallback-style=<string>  - The name of the predefined style used as a                               fallback in case clang-format is invoked with                               -style=file, but can not find the .clang-format                               file to use.                               Use -fallback-style=none to skip formatting.   -i                        - Inplace edit <file>s, if specified.   -length=<uint>            - Format a range of this length (in bytes).                               Multiple ranges can be formatted by specifying                               several -offset and -length pairs.                               When only a single -offset is specified without                               -length, clang-format will format up to the end                               of the file.                               Can only be used with one input file.   -lines=<string>           - <start line>:<end line> - format a range of                               lines (both 1-based).                               Multiple ranges can be formatted by specifying                               several -lines arguments.                               Can't be used with -offset and -length.                               Can only be used with one input file.   -offset=<uint>            - Format a range starting at this byte offset.                               Multiple ranges can be formatted by specifying                               several -offset and -length pairs.                               Can only be used with one input file.   -output-replacements-xml  - Output replacements as XML.   -sort-includes            - Sort touched include lines   -style=<string>           - Coding style, currently supports:                                 LLVM, Google, Chromium, Mozilla, WebKit.                               Use -style=file to load style configuration from                               .clang-format file located in one of the parent                               directories of the source file (or current                               directory for stdin).                               Use -style=""{key: value, ...}"" to set specific                               parameters, e.g.:                                 -style=""{BasedOnStyle: llvm, IndentWidth: 8}""  Generic Options:    -help                     - Display available options (-help-hidden for more)   -help-list                - Display list of available options (-help-list-hidden for more)   -version                  - Display the version of this program  When the desired code formatting style is different from the available options, the style can be customized using the -style=""{key: value, ...}"" option or by putting your style configuration in the .clang-format or _clang-format file in your project’s directory and using clang-format -style=file. An easy way to create the .clang-format file is: clang-format -style=llvm -dump-config > .clang-format  Available style options are described in Clang-Format Style Options. Vim Integration¶ There is an integration for vim which lets you run the clang-format standalone tool on your current buffer, optionally selecting regions to reformat. The integration has the form of a python-file which can be found under clang/tools/clang-format/clang-format.py. This can be integrated by adding the following to your .vimrc: map <C-K> :pyf <path-to-this-file>/clang-format.py<cr> imap <C-K> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>  The first line enables clang-format for NORMAL and VISUAL mode, the second line adds support for INSERT mode. Change “C-K” to another binding if you need clang-format on a different key (C-K stands for Ctrl+k). With this integration you can press the bound key and clang-format will format the current line in NORMAL and INSERT mode or the selected region in VISUAL mode. The line or region is extended to the next bigger syntactic entity. It operates on the current, potentially unsaved buffer and does not create or save any files. To revert a formatting, just undo. Emacs Integration¶ Similar to the integration for vim, there is an integration for emacs. It can be found at clang/tools/clang-format/clang-format.el and used by adding this to your .emacs: (load ""<path-to-clang>/tools/clang-format/clang-format.el"") (global-set-key [C-M-tab] 'clang-format-region)  This binds the function clang-format-region to C-M-tab, which then formats the current line or selected region. BBEdit Integration¶ clang-format cannot be used as a text filter with BBEdit, but works well via a script. The AppleScript to do this integration can be found at clang/tools/clang-format/clang-format-bbedit.applescript; place a copy in ~/Library/Application Support/BBEdit/Scripts, and edit the path within it to point to your local copy of clang-format. With this integration you can select the script from the Script menu and clang-format will format the selection. Note that you can rename the menu item by renaming the script, and can assign the menu item a keyboard shortcut in the BBEdit preferences, under Menus & Shortcuts. Visual Studio Integration¶ Download the latest Visual Studio extension from the alpha build site. The default key-binding is Ctrl-R,Ctrl-F. Script for patch reformatting¶ The python script clang/tools/clang-format-diff.py parses the output of a unified diff and reformats all contained lines with clang-format. usage: clang-format-diff.py [-h] [-i] [-p NUM] [-regex PATTERN] [-style STYLE]  Reformat changed lines in diff. Without -i option just output the diff that would be introduced.  optional arguments:   -h, --help      show this help message and exit   -i              apply edits to files instead of displaying a diff   -p NUM          strip the smallest prefix containing P slashes   -regex PATTERN  custom pattern selecting file paths to reformat   -style STYLE    formatting style to apply (LLVM, Google, Chromium, Mozilla,                   WebKit)  So to reformat all the lines in the latest git commit, just do: git diff -U0 HEAD^ | clang-format-diff.py -i -p1  In an SVN client, you can do: svn diff --diff-cmd=diff -x -U0 | clang-format-diff.py -i  The option -U0 will create a diff without context lines (the script would format those as well). «  ClangCheck   ::   Contents   ::   Clang-Format Style Options  » © Copyright 2007-2016, The Clang Team. Created using Sphinx 1.1.3."	"null"	"null"	"A tool to format C/C++/Obj-C code."	"true"
"Coding Style Tools"	"Clang-Tidy"	"http://clang.llvm.org/extra/clang-tidy.html"	"Clang-based C++ linter tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"<no title> — Extra Clang Tools 3.9 documentation Extra Clang Tools 3.9 documentation <no title> Contents clang-tidy documentation has moved here: http://clang.llvm.org/extra/clang-tidy/ Contents © Copyright 2007-2016, The Clang Team. Created using Sphinx 1.1.3."	"null"	"null"	"Clang-based C++ linter tool."	"true"
"Coding Style Tools"	"Uncrustify"	"https://github.com/bengardner/uncrustify"	"Code beautifier."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"2"	"233"	"GitHub - bengardner/uncrustify: Code beautifier Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 4 Fork 233 bengardner/uncrustify forked from uncrustify/uncrustify Code Pull requests 0 Pulse Graphs Code beautifier http://uncrustify.sourceforge.net/ 1,335 commits 2 branches 9 releases Fetching contributors C++ 58.1% C 22.3% D 11.6% Objective-C 3.4% Shell 1.5% Python 0.9% Other 2.2% C++ C D Objective-C Shell Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh555 master Nothing to show uncrustify-0.62 uncrustify-0.61 uncrustify-0.60 uncrustify-0.59 uncrustify-0.58 uncrustify-0.57 uncrustify-0.56 uncrustify-0.55 uncrustify-0.54 Nothing to show New pull request Pull request Compare This branch is 16 commits behind uncrustify:master. Latest commit bb2115d Jul 12, 2016 gmaurel committed on GitHub Merge pull request #558 from bengardner/gh511 … Rework ? : detection for Objective C Permalink Failed to load latest commit information. documentation for 0.63 May 10, 2016 etc Merge pull request #461 from todd-richmond/master May 27, 2016 man Don't use backslash in Unix file path in the man page May 19, 2016 osx Add missing osx directory. Oct 25, 2009 scripts Merge pull request #484 from dirk-thomas/make_token_names_py May 27, 2016 src Merge pull request #558 from bengardner/gh511 Jul 12, 2016 tests Merge pull request #558 from bengardner/gh511 Jul 12, 2016 uncrustify.xcodeproj add cmt_insert_before_inlines to annotate functions declared inline i… Jun 29, 2016 win32 add missing files to Visual Studio project files May 17, 2016 .gitattributes Add gitattributes file May 25, 2016 .gitignore Add executable sanity check test file to .gitignore Apr 2, 2016 .travis.yml travis.yml: fix typeo Mar 15, 2016 AUTHORS Import r1644 from subversion Oct 17, 2009 BUGS Update BUGS a bit Oct 14, 2014 CMakeLists.txt Merge pull request #494 from jibsen/fix-runtests Jun 3, 2016 COPYING Import r1644 from subversion Oct 17, 2009 ChangeLog Merge branch 'skip-vspace-tokens' of git://github.com/Unity-Technolog… Jul 12, 2016 Comments.txt prepare the configuration file for the sources Apr 25, 2016 HELP Import r1644 from subversion Oct 17, 2009 INSTALL Simplify expressions such as: May 2, 2016 Makefile.am Adding README.md to the distribution Mar 27, 2016 NEWS Import r1644 from subversion Oct 17, 2009 README.md Updated build steps Mar 14, 2016 TESTING Tweaks to the TESTING how-to Aug 26, 2011 autogen.sh Import r1644 from subversion Oct 17, 2009 commit.log Update ChangeLog and commit.log Feb 2, 2016 compile The issue is similar to bug #651 May 16, 2016 config.guess Import r1644 from subversion Oct 17, 2009 config.sub Import r1644 from subversion Oct 17, 2009 configure.ac Prepare 0.63 May 10, 2016 extras.vpj Add a few files to the workspace Jan 1, 2013 forUncrustifySources.cfg uncrustify all the sources with forUncrustifySources.cfg Apr 27, 2016 forUncrustifySources.txt uncrustify all the sources with forUncrustifySources.cfg Apr 27, 2016 install-sh Test data for Issue #478 May 17, 2016 make_token_names.sh Remove the date from token_names.h/make_token_names.sh Dec 28, 2012 make_version.py make_version.py: no need to split lines of uncrustify_version.h.in Aug 21, 2014 make_win32.sh Rework make_win32.sh to build outside of the source tree. Feb 2, 2016 missing The issue is similar to bug #651 May 16, 2016 package.json Added package.json for npm Feb 18, 2015 release-steps.txt The issue #411 is partialy fixed. May 12, 2016 run_tests.bat Added run_tests.bat to have an equivalent for run_tests.sh on Windows Jun 29, 2016 run_tests.sh Import r1644 from subversion Oct 17, 2009 test-driver Test data for Issue #478 May 17, 2016 uncrustify.vpj Add ability to get config from UNCRUSTIFY_CONFIG env var to win32 Dec 29, 2011 uncrustify.vpw Update SlickEdit project files Oct 8, 2011 working.txt save off work in the freebsd branch Dec 5, 2009 README.md README for Uncrustify Post any bugs to the issue tracker found on the project's Sourceforge page: http://sourceforge.net/projects/uncrustify Please include the following with your issue: a description of what is not working right input code sufficient to demonstrate the issue expected output code configuration options used to generate the output If the issue cannot be easily reproduced, then it isn't likely to be fixed. Building the program Quick start: $ ./autogen.sh $ ./configure $ make  The executable is src/uncrustify. Copy that to your ~/bin/ folder or wherever you want. Building the program using Xcode on Mac OS X You can of course just open the Xcode project and build uncrustify using the default 'Debug' configuration but if you want to install it the 'Install' configuration will not work from within Xcode. For that you will have to use the Xcode command line tool 'xcodebuild'. To do that, cd into the uncrustify project folder where uncrustify.xcodeproj resides and enter the following command: $ sudo xcodebuild -configuration 'Install'  You will be prompted for the root level password. By doing this you will install uncrustify into /usr/local/bin. The install location can be changed by editing the Build Settings for the uncrustify target. The setting you need to change is called, surprisingly enough, 'Installation Directory'. Configuring the program Examine the example config files in etc (such as ben.cfg) and/or read configuration.txt. Copy the existing config file that closely matches your style and put in ~/.uncrustify/. Find complete configuration file options in this file. Modify to your liking. Running the program (and refining your style) As of the current release, I don't particularly trust this program to not make mistakes and screw up my whitespace formatting. Here's how to run it: $ uncrustify -c ~/.uncrustify/mystyle.cfg -f somefile.c > somefile.c.unc  The -c option selects the configuration file. The -f option specifies the input file. The output is sent to stdout. Error messages are sent to stderr. Use a quality side-by-side diff tool to determine if the program did what you wanted. Repeat until your style is refined. Running the program (once you've found your style) Write a script to automate the above. Check out etc/dofiles.sh for an example. That script is used as follows: navigate one level above your project make a list of file to process $ find myproj -name ""*.[ch]"" > files.txt $ sh etc/dofiles.sh files.txt Use your favorite diff/merge program to merge in the changes $ xxdiff out/myproj myproj Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bengardner/uncrustify"	"Code beautifier."	"true"
"API Design"	"Beautiful Native Libraries"	"http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Beautiful Native Libraries | Armin Ronacher's Thoughts and Writings Armin Ronacher's Thoughts and Writings blog archive tags projects talks about Beautiful Native Libraries written on Sunday, August 18, 2013 I'm obsessed with nice APIs. Not just APIs however, also in making the overall experience of using a library as good as possible. For Python there are quite a few best practices around by now but it feels like there is not really a lot of information available about how to properly structure a native library. What do I mean by native library? Essentially a dylib/DLL/so. Since I'm currently spending more time on C and C++ than Python at work I figured I might take the opportunity and collect my thoughts on how to write proper shared libraries that do not annoy your users. Shared or Static? This post almost entirely assumes that you are building a DLL or shared library and not something you link statically. While it sounds like a statically and dynamically linked library are essentially the same thing where the only difference is how you link against it, there is much more to it. With a dynamically linked library you have much better control over your symbols. Dynamically linked libraries also work much better between different programming languages. Nothing stops you from writing a library in C++ and then using it in Python. In fact, that's exactly how I recommend doing unittests against such libraries. More about that later. Which Language? So you want to write a library that compiles into a DLL or something of that sort and it should be somewhat platform independent. Which languages can you actually use there? Right now you can pick between C and C++ and soon you might also be able to add Rust to that list. Why not others? C is easy: because that's the only language that actually defines a somewhat stable ABI. Strictly speaking it's not the language that defines it, it's the operating system, but in one way or another, C is the language of choice for libraries and the C calling conventions is the lingua franca of shared libraries. “The greatest trick that C ever pulled was convince the world that it does not have a runtime”. I'm not sure where I heard the quote first, but it's incredibly appropriate when talking about libraries. Essentially C is so commonplace that everything can assume that some basic functionality is provided by the C standard library. That's the one thing that everybody agreed on that exists. For C++ the situation is more complicated. C++ needs a bunch of extra functionality that is not provided by the C standard library. Primarily it needs support for exception handling. C++ however degrades otherwise nicely to C calling conventions so it's very easy to still write libraries in it, that completely hide the fact that there is C++ behind the scenes. For other languages that's not so easy however. Why for instance is it not a good idea to write a library in Go? The reason for this is that Go for needs quite a heavy runtime that does garbage collection and provides a scheduler for it's coroutines. Rust is getting closer to not having any runtime requirements besides the C standard library which will make it possible to write libraries in it. Right now however, C++ is most likely the language you want to use. Why not C? The reason for this is that Microsoft's C compiler is notoriously bad at receiving language updates and you would otherwise be stuck with C89. Obviously you could just use a different compiler on Windows but that causes a whole bunch of problems for the users of your library if they want to compile it themselves. Requiring a tool chain that is not native to the operating system is an easy way to alienate your developer audience. I would however generally recommend to a very C like subset of C++: don't use exceptions, don't use RTTI, don't build crazy constructors. The rest of the post assumes that C++ is indeed the language of choice. Public Headers The library you're building should ideally have exactly one public header file. Internally go nuts and create as many headers as you want. You want that one public header file to exist, even if you think your library is only ever going to be linked against something that is not C. For instance Python's CFFI library can parse header files and build bindings out of that. People of all languages know how headers work, they will have a look at them to build their own bindings. What rules are there to follow in headers? Header Guards Each public header that other people use should have sufficiently unique header guards to make sure they can be included multiple times safely. Don't get too creative with the guards, but also don't be too generic with them. It's no fun including a header that has a super generic include guard at the top (like UTILS_H and nothing else). You also want to make sure that there are extern ""C"" markers for C++. This would be your minimal header: #ifndef YOURLIB_H_INCLUDED #define YOURLIB_H_INCLUDED #ifdef __cplusplus extern ""C"" { #endif  /* code goes here */  #ifdef __cplusplus } #endif #endif  Export Markers Because you yourself will probably include your header file as well you will need to make sure that there are macros defined that export your functions. This is necessary on Windows and it's a really good idea on other platforms as well. Essentially it can be used to change the visibility of symbols. I will go into that later, for the time being just add something that looks like this: #ifndef YL_API #  ifdef _WIN32 #     if defined(YL_BUILD_SHARED) /* build dll */ #         define YL_API __declspec(dllexport) #     elif !defined(YL_BUILD_STATIC) /* use dll */ #         define YL_API __declspec(dllimport) #     else /* static library */ #         define YL_API #     endif #  else #     if __GNUC__ >= 4 #         define YL_API __attribute__((visibility(""default""))) #     else #         define YL_API #     endif #  endif #endif  On Windows it will set YL_API (I used YL as short version for “Your Library” here, pick a prefix that fits you) for DLLs appropriately depending on what flag is set. Whoever includes the header without doing anything fancy before will automatically get __declspec(dllimport) in its place. This is a really good default behavior on Windows. For other platforms nothing is set unless a somewhat recent GCC/clang version is used in which case the default visibility marker is added. As you can see some macros can be defined to change which branch is taken. For instance when you build the library you would tell the compiler to also defined YL_BUILD_SHARED. On Windows the default behavior for DLLs has always been: all symbols are not exported default unless marked with __declspec(dllexport). On other platforms unfortunately the behavior has always been to export everything. There are multiple ways to fix that, one is the visibility control of GCC 4. This works okay, but there are some extra things that need to be considered. The first is that the in-source visibility control is not the silver bullet. For a start the marker will do nothing unless the library is compiled with -fvisibility=hidden. More important than that however is that this will only affect your own library. If you statically link anything against your library, that library might expose symbols you do not want to expose. Imagine for instance you write a library that depends on another library you want to statically link in. This library's symbols will also be exported from your library unless you prevent that. This works differently on different platforms. On Linux you can pass --exclude-libs ALL to ld and the linker will remove those symbols automatically. On OS X it's tricker because there is no such functionality in the linker. The easiest solution is to have a common prefix for all functions. For instance if all your functions start with yl_ it's easy to tell the linker to hide everything else. You do this by creating a symbols file and then pointing the linker to it with -exported_symbols_list symbols.txt. The contents of this file can be the single line _yl_*. Windows we can ignore as DLLs need explicit export markers. Careful with Includes and Defines One thing to be careful about is that your headers should not include too many things. Generally I believe it's fine for a header to include things like stdint.h to get some common integer types. However what you should not do is being clever and defining types yourself. For instance msgpack had the brilliant idea to define int32_t and a few other types for Visual Studio 2008 because it lacks the stdint.h header. This is problematic as only one library can define those types then. Instead the better solution is to ask the user to provide a replacement stdint.h header for older Visual Studio versions. Especially do not ever include windows.h in a library header. That header pulls in so much stuff that Microsoft added extra defines to make it leaner (WINDOWS_LEAN_AND_MEAN, WINDOWS_EXTRA_LEAN and NOMINMAX). If you need windows.h included, have a private header file that's only included for your .cpp files. Stable ABI Do not put any structs into public headers unless you are 100% sure that you will never change them. If you do want to expose structs and you do want to add extra members later, make sure that the user does not have to allocate that header. If the user does have to allocate that header, add a version or size information as first member into the struct. Microsoft generally puts the size of structs into the structs to allow adding members later, but this leads to APIs that are just not fun to use. If you can try to avoid having too many structs in the headers, if you can't at least try to come up with alternative methods to make the API suck less. With structs you also run into the issue that alignments might differ between different compilers. Unfortunately there are cases where you are dealing with a project that forces the alignment to be different for the whole project and that will obviously also affect the structs in your header file. The fewer structs the better :-) Something that should go without saying: do not make macros part of your API. A macro is not a symbol and users of languages not based on C will hate you for having macros there. One more note on the ABI stability: it's a very good idea to include the version of the library both in the header as well as compiled into the binary. That way you can easily verify that the header matches the binary which can save you lots of headaches. Something like this in the header: #define YL_VERSION_MAJOR 1 #define YL_VERSION_MINOR 0 #define YL_VERSION ((YL_VERSION_MAJOR << 16) | YL_VERSION_MINOR)  unsigned int yl_get_version(void); int yl_is_compatible_dll(void);  And this in the implementation file: unsigned int yl_get_version(void) {     return YL_VERSION; }  int yl_is_compatible_dll(void) {     unsigned int major = yl_get_version() >> 16;     return major == YL_VERSION_MAJOR; }  Exporting a C API When exposing a C++ API to C there is not much that needs to be considered. Generally for each internal class you have, you would have an external opaque struct without any fields. Then provide functions that call into your internal functions. Picture a class like this: namespace yourlibrary {     class Task {     public:         Task();         ~Task();          bool is_pending() const;         void tick();         const char *result_string() const;     }; }  The internal C++ API is quite obvious, but how do you expose that via C? Because the external ABI now no longer knows how large the structs are you will need to allocate memory for the external caller or give it a method to figure out how much memory to allocate. I generally prefer to allocate for the external user and provide a free function as well. For how to make the memory allocation system still flexible, have a look at the next part. For now this is the external header (this has to be in extern ""C"" braces): struct yl_task_s; typedef struct yl_task_s yl_task_t;  YL_API yl_task_t *yl_task_new(); YL_API void yl_task_free(yl_task_t *task); YL_API int yl_task_is_pending(const yl_task_t *task); YL_API void yl_task_tick(yl_task_t *task); YL_API const char *yl_task_get_result_string(const yl_task_t *task);  And this is how the shim layer would look like in the implementation: #define AS_TYPE(Type, Obj) reinterpret_cast<Type *>(Obj) #define AS_CTYPE(Type, Obj) reinterpret_cast<const Type *>(Obj)  yl_task_t *yl_task_new() {     return AS_TYPE(yl_task_t, new yourlibrary::Task()); }  void yl_task_free(yl_task_t *task) {     if (!task)         return;     delete AS_TYPE(yourlibrary::Task, task); }  int yl_task_is_pending(const yl_task_t *task) {     return AS_CTYPE(yourlibrary::Task, task)->is_pending() ? 1 : 0; }  void yl_task_tick(yl_task_t *task) {     AS_TYPE(yourlibrary::Task, task)->tick(); }  const char *yl_task_get_result_string(const yl_task_t *task) {     return AS_CTYPE(yourlibrary::Task, task)->result_string(); }  Notice how the constructor and destructor is fully wrapped. Now there is one problem with standard C++: it raises exceptions. Because constructors have no return value to signal to the outside that something went wrong it will raise exceptions if the allocation fails. That's however not the only problem. How do we customize how the library allocates memory now? C++ is pretty ugly in that regard. But it's largely fixable. Before we go on: please under no circumstances, make a library, that pollutes the namespace with generic names. Always put a common prefix before all your symbols (like yl_) to lower the risk of namespace clashes. Context Objects Global state is terrible, so what's the solution? Generally the solution is to have what I would call “context” objects that hold the state instead. These objects would have all the important stuff on that you would otherwise put into a global variable. That way the user of your library can have multiple of those. Then make each API function take that context as first parameter. This is especially useful if your library is not threadsafe. That way you can have one per thread at least, which might already be enough to get some parallelism out of your code. Ideally each of those context objects could also use a different allocator, but given the complexities of doing that in C++ I would not be super disappointed if you did not make that work. Memory Allocation Customization As mentioned before, constructors can fail and we want to customize memory allocations, so how do we do this? In C++ there are two systems responsible for memory allocations: the allocation operators operator new and operator new[] as well as the allocators for containers. If you want to customize the allocator you will need to deal with both. First you need a way to let others override the allocator functions. The simplest is to provide something like this in the public header: YL_API void yl_set_allocators(void *(*f_malloc)(size_t),                               void *(*f_realloc)(void *, size_t),                               void (*f_free)(void *)); YL_API void *yl_malloc(size_t size); YL_API void *yl_realloc(void *ptr, size_t size); YL_API void *yl_calloc(size_t count, size_t size); YL_API void yl_free(void *ptr); YL_API char *yl_strdup(const char *str);  And then in your internal header you can add a bunch of inline functions that redirect to the function pointers set to an internal struct. Because we do not let users provide calloc and strdup you probably also want to reimplement those functions: struct yl_allocators_s {     void *(*f_malloc)(size_t);     void *(*f_realloc)(void *, size_t);     void (*f_free)(void *); }; extern struct yl_allocators_s _yl_allocators;  inline void *yl_malloc(size_t size) {     return _yl_allocators.f_malloc(size); }  inline void *yl_realloc(void *ptr, size_t size) {     return _yl_allocators.f_realloc(ptr, size); }  inline void yl_free(void *ptr) {     _yl_allocators.f_free(ptr); }  inline void *yl_calloc(size_t count, size_t size) {     void *ptr = _yl_allocators.f_malloc(count * size);     memset(ptr, 0, count * size);     return ptr; }  inline char *yl_strdup(const char *str) {     size_t length = strlen(str) + 1;     char *rv = (char *)yl_malloc(length);     memcpy(rv, str, length);     return rv; }  For the setting of the allocators themselves you probably want to put that into a separate source file: struct yl_allocators_s _yl_allocators = {     malloc,     realloc,     free };  void yl_set_allocators(void *(*f_malloc)(size_t),                        void *(*f_realloc)(void *, size_t),                        void (*f_free)(void *)) {     _yl_allocators.f_malloc = f_malloc;     _yl_allocators.f_realloc = f_realloc;     _yl_allocators.f_free = f_free; }  Memory Allocators and C++ Now that we have those functions set, how do we make C++ use them? This part is tricky and annoying. To get your custom classes allocated through your yl_malloc you need to implement the allocation operators in all your classes. Because that's quite a repetitive process I recommend writing a macro for it that can be placed in the private section of the class. I chose to pick by convention that it has to go into private, even though the function it implements are public. Primarily I did that so that it lives close to where the data is defined, which in my case is usually private. You will need to make sure you don't forget adding that macro to all your classes private sections: #define YL_IMPLEMENTS_ALLOCATORS \ public: \     void *operator new(size_t size) { return yl_malloc(size); } \     void operator delete(void *ptr) { yl_free(ptr); } \     void *operator new[](size_t size) { return yl_malloc(size); } \     void operator delete[](void *ptr) { yl_free(ptr); } \     void *operator new(size_t, void *ptr) { return ptr; } \     void operator delete(void *, void *) {} \     void *operator new[](size_t, void *ptr) { return ptr; } \     void operator delete[](void *, void *) {} \ private:  Here is how an example usage would look like: class Task { public:     Task();     ~Task();  private:     YL_IMPLEMENTS_ALLOCATORS;     // ... };  Now with that all your classes will be allocated through your allocator functions. But what if you want to use STL containers? Those containers will not be allocated through your functions yet. To fix that particular issue you need to write an STL proxy allocator. That's an enormously annoying process because of how complex the interface is, for essentially doing nothing. #include <limits>  template <class T> struct proxy_allocator {     typedef size_t size_type;     typedef ptrdiff_t difference_type;     typedef T *pointer;     typedef const T *const_pointer;     typedef T& reference;     typedef const T &const_reference;     typedef T value_type;      template <class U>     struct rebind {         typedef proxy_allocator<U> other;     };      proxy_allocator() throw() {}     proxy_allocator(const proxy_allocator &) throw() {}     template <class U>     proxy_allocator(const proxy_allocator<U> &) throw() {}     ~proxy_allocator() throw() {}      pointer address(reference x) const { return &x; }     const_pointer address(const_reference x) const { return &x; }      pointer allocate(size_type s, void const * = 0) {         return s ? reinterpret_cast<pointer>(yl_malloc(s * sizeof(T))) : 0;     }      void deallocate(pointer p, size_type) {         yl_free(p);     }      size_type max_size() const throw() {         return std::numeric_limits<size_t>::max() / sizeof(T);     }      void construct(pointer p, const T& val) {         new (reinterpret_cast<void *>(p)) T(val);     }      void destroy(pointer p) {         p->~T();     }      bool operator==(const proxy_allocator<T> &other) const {         return true;     }      bool operator!=(const proxy_allocator<T> &other) const {         return false;     } };  So before we go on, how does one use this abomination? Like this: #include <deque> #include <string>  typedef std::deque<Task *, proxy_allocator<Task *> > TaskQueue; typedef std::basic_string<char, std::char_traits<char>,                           proxy_allocator<char> > String;  I would recommend making a header somewhere that defines all the containers you want to use and then force yourself not to use anything else from the STL without typedefing it to use the right allocator. Careful: do not new TaskQueue() those things as you would invoke the global new operator. Place them instead as members in your own structs so that the allocation happens as part of your object which has a custom allocator. Alternatively just put them on the stack. Memory Allocation Failures In my mind the best way to deal with memory allocation failures is to not deal with them. Just don't cause any allocation to fail. For a library that's easy to accomplish, just be aware of how much memory you will allocate in the worst case scenario and if you are unbounded, provide the user of the library with a way to get an idea of how bad things are. The reason for this is that nobody deals with allocation failures either. For a start the STL entirely depends on std::bad_alloc being thrown from operator new (which we're not doing above, hehe) and will just bubble up the error for you to deal with it. When you compile your library without exception handling then the library will just terminate the process. That's pretty terrible, but that's what's going to happen anyways if you're not careful. I have seen more code that ignores the return value of malloc than code that deals with it properly. Aside from that: on some systems malloc will totally lie to you about how much memory is available anyways. Linux will gladly give you pointers to memory it can't back up with real physical memory. This fiat memory behavior is quite useful but also will mean that you generally already have to assume that allocation failure might not happen. So instead of reporting allocation errors, if you use C++ and you also want to stick to the STL, then give up on that and just don't run out of memory. In computer games the general concept there is to give subsystems their own allocator and just make sure they never allocate more than what they are given. EA seems to recommend the allocator to handle allocation failures. For instance when it fails to load more memory it would check if it can free up some resources that are not needed (like caches) instead of letting the caller know there is a memory failure. This works even with the limited design that the C++ standard gives with allocators. Building Now that you have written the code, how do you build your library without making your users unhappy? If you're like me you come from a Unix background where makefiles are what builds software. However that's not what everybody wants. Autotools/autoconf are terrible, terrible pieces of software and if you give that to a windows guy they will call you all kinds of names. Instead make sure there are Visual Studio solutions sitting around. What if you don't want to deal with Visual Studio because it's not your toolchain of choice? What if you want to keep solutions and makefiles in sync? The answer to that question is premake or cmake. Which of the two you use depends largely on you. Both can generate Makefiles, XCode or Visual Studio solutions out of a simple definition script. I used to be a huge fan of cmake but I now switched to premake. The reason for this is that cmake has some stuff hardcoded which I need to customize (for instance building a Visual Studio solution for Xbox 360 is something you cannot do with stock cmake). Premake has many of the same problems as cmake but it's written almost entirely in lua and can be easily customized. Premake is essentially one executable that includes a lua interpreter and a bunch of lua scripts. It's easy to recompile and if you don't want to, your premake file can override everything if you just know how. Testing Lastly: how do you test your library? Now obviously there are tons of testing tools written in C and C++ you can use, but I think the best tools are actually somewhere else. Shared libraries are not just for C and C++ to enjoy, you can use them in a variety of languages. What better way is there to test your API by using it from a language that is not C++? In my case I am using Python to test my libraries. More to the point: I'm using py.test and CFFI to test my library. This has a couple of big advantages over directly doing it in C/C++. The biggest advantage is the increased iteration speed. I do not have to compile my tests at all, they just run. Not only does the compilation step fall away, I can also take advantage of Python's dynamic typing and py.test's good assert statement. I write myself helpers to print out information and to convert data between my library and Python and I get all the benefit of good error reporting. The second advantage is good isolation. pytest-xdist is a plugin for py.test that adds the --boxed flag to py.test which runs each test in a separate process. That's amazingly useful if you have tests that might crash due to a segfault. If you enable coredumps on your system you can then afterwards load up the segfault in gdb and figure out what's wrong. This also works really well because you don't need to deal with memory leaks that happen because an assertion failed and the code skips the cleanup. The OS will clean up for each test separately. Unfortunately that's implemented through the fork() system call so it does not work well on windows right now. So how do you use your library with CFFI? You will need to do two things: you need to make sure your public header file does not include any other headers. If you can't do that, just add a define that disables the includes (like YL_NOINCLUDE). This is all that's needed to make CFFI work: import os import subprocess from cffi import FFI  here = os.path.abspath(os.path.dirname(__file__)) header = os.path.join(here, 'include', 'yourlibrary.h')  ffi.cdef(subprocess.Popen([     'cc', '-E', '-DYL_API=', '-DYL_NOINCLUDE',     header], stdout=subprocess.PIPE).communicate()[0]) lib = ffi.dlopen(os.path.join(here, 'build', 'libyourlibrary.dylib'))  Place it in a file called testhelpers.py next to your tests. Now obviously that is the simple version that only works on OS X but it's simple to extend for different operating systems. In essence this invokes the C preprocessor and adds some extra defines, then feeds the return value of that to the CFFI parser. Afterwards you have a beautiful wrapped library to work with. Here an example of how such a test could look like. Just place it in a file called test_something.py and let py.test execute it: import time from testhelpers import ffi, lib  def test_basic_functionality():     task = lib.yl_task_new()     while lib.yl_task_is_pending(task)         lib.yl_task_process(task)         time.sleep(0.001)     result = lib.yl_task_get_result_string(task)     assert ffi.string(result) == ''     lib.yl_task_free(task)  py.test has other advantages too. For instance it supports fixtures which allow you to set up common resources that can be reused between tests. This is super useful for instance, if using your library requires creating some sort of context object, setting up common configuration on it, and later destroying it. To do that, just create a conftest.py file with the following content: import pytest from testhelpers import lib, ffi  @pytest.fixture(scope='function') def context(request):     ctx = lib.yl_context_new()     lib.yl_context_set_api_key(ctx, ""my api key"")     lib.yl_context_set_debug_mode(ctx, 1)     def cleanup():         lib.yl_context_free(ctx)     request.addfinalizer(cleanup)     return ctx  To use this now, all you need to do is to add a parameter called context to your test function: from testhelpers import ffi, lib  def test_basic_functionality(context):     task = lib.yl_task_new(context)     ...  Summary Since this is longer than usual, here a quick summary of the most important things to keep in mind when building a native shared library: Write it in C or C++, don't get crazy with building it in a language that pulls in a whole runtime that takes up CPU and memory. No global state if you can avoid it! Do not define common types in your public headers Do not include crazy headers like windows.h in your public headers. Be light on includes in your headers altogether. Consider adding a way to disable all includes through a define. take good care about your namespace. Don't expose symbols you do not want to be exposed. Create a macro like YL_API that prefixes each symbol you want to expose. Try to build a stable ABI Don't go crazy with structs let people customize the memory allocators. If you can't do it per “context” object, at least do it per library. Be careful when using the STL, always only through a typedef that adds your allocator. Don't force your users to use your favourite build tool, always make sure that the user of a library finds a Visual Studio solution and makefile in place. That's it! Happy library building! This entry was tagged c, python and thoughts © Copyright 2015 by Armin Ronacher. Content licensed under the Creative Commons attribution-noncommercial-sharealike License. Contact me via mail, twitter, github or bitbucket. Tip me via gittip. More info: imprint. Subscribe to Atom feed (or RSS)"	"null"	"null"	""	"true"
"API Design"	"Designing Qt-Style C++ APIs"	"https://doc.qt.io/archives/qq/qq13-apis.html"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Designing Qt-Style C++ APIs   Trolltech | Documentation | Qt Quarterly | « Automatic Dialogs | Faster Teambuilder Builds » Designing Qt-Style C++ APIs by Matthias Ettrich We have done substantial research at Trolltech into improving the Qt development experience. In this article, I want to share some of our findings and present the principles we've been using when designing Qt 4, and show you how to apply them to your code. Six Characteristics of Good APIs The Convenience Trap The Boolean Parameter Trap Static Polymorphism The Art of Naming Pointers or References? Case Study: QProgressBar How to Get APIs Right Designing application programmer interfaces, APIs, is hard. It is an art as difficult as designing programming languages. There are many different principles to choose from, many of which tend to contradict each other. Computer science education today puts a lot of emphasis on algorithms and data structures, with less focus on the principles behind designing programming languages and frameworks. This leaves application programmers unprepared for an increasingly important task: the creation of reusable components. Before the rise of object-oriented languages, reusable generic code was mostly written by library vendors rather than by application developers. In the Qt world, this situation has changed significantly. Programming with Qt is writing new components all the time. A typical Qt application has at least some customized components that are reused throughout the application. Often the same components are deployed as part of other applications. KDE, the K Desktop Environment, goes even further and extends Qt with many add-on libraries that implement hundreds of additional classes. But what constitutes a good, efficient C++ API? What is good or bad depends on many factors -- for example, the task at hand and the specific target group. A good API has a number of features, some of which are generally desirable, and some of which are more specific to certain problem domains. Six Characteristics of Good APIs An API is to the programmer what a GUI is to the end-user. The 'P' in API stands for ""Programmer"", not ""Program"", to highlight the fact that APIs are used by programmers, who are humans. We believe APIs should be minimal and complete, have clear and simple semantics, be intuitive, be easy to memorize, and lead to readable code. Be minimal: A minimal API is one that has as few public members per class and as few classes as possible. This makes it easier to understand, remember, debug, and change the API. Be complete: A complete API means the expected functionality should be there. This can conflict with keeping it minimal. Also, if a member function is in the wrong class, many potential users of the function won't find it. Have clear and simple semantics: As with other design work, you should apply the principle of least surprise. Make common tasks easy. Rare tasks should be possible but not the focus. Solve the specific problem; don't make the solution overly general when this is not needed. (For example, QMimeSourceFactory in Qt 3 could have been called QImageLoader and have a different API.) Be intuitive: As with anything else on a computer, an API should be intuitive. Different experience and background leads to different perceptions on what is intuitive and what isn't. An API is intuitive if a semi-experienced user gets away without reading the documentation, and if a programmer who doesn't know the API can understand code written using it. Be easy to memorize: To make the API easy to remember, choose a consistent and precise naming convention. Use recognizable patterns and concepts, and avoid abbreviations. Lead to readable code: Code is written once, but read (and debugged and changed) many times. Readable code may sometimes take longer to write, but saves time throughout the product's life cycle. Finally, keep in mind that different kinds of users will use different parts of the API. While simply using an instance of a Qt class should be intuitive, it's reasonable to expect the user to read the documentation before attempting to subclass it. The Convenience Trap It is a common misconception that the less code you need to achieve something, the better the API. Keep in mind that code is written more than once but has to be understood over and over again. For example,      QSlider *slider = new QSlider(12, 18, 3, 13, Qt::Vertical,                                   0, ""volume"");     is much harder to read (and even to write) than      QSlider *slider = new QSlider(Qt::Vertical);     slider->setRange(12, 18);     slider->setPageStep(3);     slider->setValue(13);     slider->setObjectName(""volume"");     The Boolean Parameter Trap Boolean parameters often lead to unreadable code. In particular, it's almost invariably a mistake to add a bool parameter to an existing function. In Qt, the traditional example is repaint(), which takes an optional bool parameter specifying whether the background should be erased (the default) or not. This leads to code such as      widget->repaint(false);     which beginners might read as meaning, ""Don't repaint!"" The thinking is apparently that the bool parameter saves one function, thus helping reducing the bloat. In truth, it adds bloat; how many Qt users know by heart what each of the next three lines does?      widget->repaint();     widget->repaint(true);     widget->repaint(false);     A somewhat better API might have been      widget->repaint();     widget->repaintWithoutErasing();     In Qt 4, we solved the problem by simply removing the possibility of repainting without erasing the widget. Qt 4's native support for double buffering made this feature obsolete. Here come a few more examples:      widget->setSizePolicy(QSizePolicy::Fixed,                           QSizePolicy::Expanding, true);     textEdit->insert(""Where's Waldo?"", true, true, false);     QRegExp rx(""moc_*.c??"", false, true);     An obvious solution is to replace the bool parameters with enum types. This is what we've done in Qt 4 with case sensitivity in QString. Compare:      str.replace(""%USER%"", user, false);               // Qt 3     str.replace(""%USER%"", user, Qt::CaseInsensitive); // Qt 4     Static Polymorphism Similar classes should have a similar API. This can be done using inheritance where it makes sense -- that is, when run-time polymorphism is used. But polymorphism also happens at design time. For example, if you exchange a QListBox with a QComboBox, or a QSlider with a QSpinBox, you'll find that the similarity of APIs makes this replacement very easy. This is what we call ""static polymorphism"". Static polymorphism also makes it easier to memorize APIs and programming patterns. As a consequence, a similar API for a set of related classes is sometimes better than perfect individual APIs for each class. The Art of Naming Naming is probably the single most important issue when designing an API. What should the classes be called? What should the member functions be called? General Naming Rules A few rules apply equally well to all kinds of names. First, as I mentioned earlier, do not abbreviate. Even obvious abbreviations such as ""prev"" for ""previous"" don't pay off in the long run, because the user must remember which words are abbreviated. Things naturally get worse if the API itself is inconsistent; for example, Qt 3 has activatePreviousWindow() and fetchPrev(). Sticking to the ""no abbreviation"" rule makes it simpler to create consistent APIs. Another important but more subtle rule when designing classes is that you should try to keep the namespace for subclasses clean. In Qt 3, this principle wasn't always followed. To illustrate this, we will take the example of a QToolButton. If you call name(), caption(), text(), or textLabel() on a QToolButton in Qt 3, what do you expect? Just try playing around with a QToolButton in Qt Designer: The name property is inherited from QObject and refers to an internal object name that can be used for debugging and testing. The caption property is inherited from QWidget and refers to the window title, which has virtually no meaning for QToolButtons, since they usually are created with a parent. The text property is inherited from QButton and is normally used on the button, unless useTextLabel is true. The textLabel property is declared in QToolButton and is shown on the button if useTextLabel is true. In the interest of readability, name is called objectName in Qt 4, caption has become windowTitle, and there is no longer any textLabel property distinct from text in QToolButton. Naming Classes Identify groups of classes instead of finding the perfect name for each individual class. For example, All the Qt 4 model-aware item view classes are suffixed with View (QListView, QTableView, and QTreeView), and the corresponding item-based classes are suffixed with Widget instead (QListWidget, QTableWidget, and QTreeWidget). Naming Enum Types and Values When declaring enums, we must keep in mind that in C++ (unlike in Java or C#), the enum values are used without the type. The following example shows illustrates the dangers of giving too general names to the enum values:      namespace Qt     {         enum Corner { TopLeft, BottomRight, ... };         enum CaseSensitivity { Insensitive, Sensitive };         ...     };          tabWidget->setCornerWidget(widget, Qt::TopLeft);     str.indexOf(""$(QTDIR)"", Qt::Insensitive);     In the last line, what does Insensitive mean? One guideline for naming enum types is to repeat at least one element of the enum type name in each of the enum values:      namespace Qt     {         enum Corner { TopLeftCorner, BottomRightCorner, ... };         enum CaseSensitivity { CaseInsensitive,                                CaseSensitive };         ...     };          tabWidget->setCornerWidget(widget, Qt::TopLeftCorner);     str.indexOf(""$(QTDIR)"", Qt::CaseInsensitive);     When enumerator values can be OR'd together and be used as flags, the traditional solution is to store the result of the OR in an int, which isn't type-safe. Qt 4 offers a template class QFlags<T>, where T is the enum type. For convenience, Qt provides typedefs for the flag type names, so you can type Qt::Alignment instead of QFlags<Qt::AlignmentFlag>. By convention, we give the enum type a singular name (since it can only hold one flag at a time) and the ""flags"" type a plural name. For example:      enum RectangleEdge { LeftEdge, RightEdge, ... };     typedef QFlags<RectangleEdge> RectangleEdges;     In some cases, the ""flags"" type has a singular name. In that case, the enum type is suffixed with Flag:      enum AlignmentFlag { AlignLeft, AlignTop, ... };     typedef QFlags<AlignmentFlag> Alignment;     Naming Functions and Parameters The number one rule of function naming is that it should be clear from the name whether the function has side-effects or not. In Qt 3, the const function QString::simplifyWhiteSpace() violated this rule, since it returned a QString instead of modifying the string on which it is called, as the name suggests. In Qt 4, the function has been renamed QString::simplified(). Parameter names are an important source of information to the programmer, even though they don't show up in the code that uses the API. Since modern IDEs show them while the programmer is writing code, it's worthwhile to give decent names to parameters in the header files and to use the same names in the documentation. Naming Boolean Getters, Setters, and Properties Finding good names for the getter and setter of a bool property is always a special pain. Should the getter be called checked() or isChecked()? scrollBarsEnabled() or areScrollBarEnabled()? In Qt 4, we used the following guidelines for naming the getter function: Adjectives are prefixed with is-. Examples: isChecked() isDown() isEmpty() isMovingEnabled() However, adjectives applying to a plural noun have no prefix: scrollBarsEnabled(), not areScrollBarsEnabled() Verbs have no prefix and don't use the third person (-s): acceptDrops(), not acceptsDrops() allColumnsShowFocus() Nouns generally have no prefix: autoCompletion(), not isAutoCompletion() boundaryChecking() Sometimes, having no prefix is misleading, in which case we prefix with is-: isOpenGLAvailable(), not openGL() isDialog(), not dialog() (From a function called dialog(), we would normally expect that it returns a QDialog *.) The name of the setter is derived from that of the getter by removing any is prefix and putting a set at the front of the name; for example, setDown() and setScrollBarsEnabled(). The name of the property is the same as the getter, but without the is prefix. Pointers or References? Which is best for out-parameters, pointers or references?      void getHsv(int *h, int *s, int *v) const     void getHsv(int &h, int &s, int &v) const     Most C++ books recommend references whenever possible, according to the general perception that references are ""safer and nicer"" than pointers. In contrast, at Trolltech, we tend to prefer pointers because they make the user code more readable. Compare:      color.getHsv(&h, &s, &v);     color.getHsv(h, s, v);     Only the first line makes it clear that there's a high probability that h, s, and v will be modified by the function call. Case Study: QProgressBar To show some of these concepts in practice, we'll study the QProgressBar API of Qt 3 and compare it to the Qt 4 API. In Qt 3:      class QProgressBar : public QWidget     {         ...     public:         int totalSteps() const;         int progress() const;              const QString &progressString() const;         bool percentageVisible() const;         void setPercentageVisible(bool);              void setCenterIndicator(bool on);         bool centerIndicator() const;              void setIndicatorFollowsStyle(bool);         bool indicatorFollowsStyle() const;          public slots:         void reset();         virtual void setTotalSteps(int totalSteps);         virtual void setProgress(int progress);         void setProgress(int progress, int totalSteps);          protected:         virtual bool setIndicator(QString &progressStr,                                   int progress,                                   int totalSteps);         ...     };     The API is quite complex and inconsistent; for example, it's not clear from the naming that reset(), setTotalSteps(), and setProgress() are tightly related. The key to improve the API is to notice that QProgressBar is similar to Qt 4's QAbstractSpinBox class and its subclasses, QSpinBox, QSlider and QDial. The solution? Replace progress and totalSteps with minimum, maximum and value. Add a valueChanged() signal. Add a setRange() convenience function. The next observation is that progressString, percentage and indicator really refer to one thing: the text that is shown on the progress bar. Usually the text is a percentage, but it can be set to anything using the setIndicator() function. Here's the new API:      virtual QString text() const;     void setTextVisible(bool visible);     bool isTextVisible() const;     By default, the text is a percentage indicator. This can be changed by reimplementing text(). The setCenterIndicator() and setIndicatorFollowsStyle() functions in the Qt 3 API are two functions that influence alignment. They can advantageously be replaced by one function, setAlignment():      void setAlignment(Qt::Alignment alignment);     If the programmer doesn't call setAlignment(), the alignment is chosen based on the style. For Motif-based styles, the text is shown centered; for other styles, it is shown on the right hand side. Here's the improved QProgressBar API:      class QProgressBar : public QWidget     {         ...     public:         void setMinimum(int minimum);         int minimum() const;         void setMaximum(int maximum);         int maximum() const;         void setRange(int minimum, int maximum);         int value() const;              virtual QString text() const;         void setTextVisible(bool visible);         bool isTextVisible() const;         Qt::Alignment alignment() const;         void setAlignment(Qt::Alignment alignment);          public slots:         void reset();         void setValue(int value);          signals:         void valueChanged(int value);         ...     };     How to Get APIs Right APIs need quality assurance. The first revision is never right; you must test it. Make use cases by looking at code which uses this API and verify that the code is readable. Other tricks include having somebody else use the API with or without documentation and documenting the class (both the class overview and the individual functions). Documenting is also a good way of finding good names when you get stuck: just try to document the item (class, function, enum value, etc.) and use your first sentence as inspiration. If you cannot find a precise name, this is often a sign that the item shouldn't exist. If everything else fails and you are convinced that the concept makes sense, invent a new name. This is, after all, how ""widget"", ""event"", ""focus"", and ""buddy"" came to be. This document is licensed under the Creative Commons Attribution-Share Alike 2.5 license. Copyright © 2005 Trolltech Trademarks Faster Teambuilder Builds »"	"null"	"null"	""	"true"
"Coding Style"	"C++ Core Guidelines"	"https://github.com/isocpp/CppCoreGuidelines"	"""Official"" set of C++ guidelines, reviewed by the author of C++."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11396"	"1306"	"1280"	"GitHub - isocpp/CppCoreGuidelines: The C++ Core Guidelines are a set of tried-and-true guidelines, rules, and best practices about coding in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,306 Star 11,396 Fork 1,280 isocpp/CppCoreGuidelines Code Issues 89 Pull requests 16 Pulse Graphs The C++ Core Guidelines are a set of tried-and-true guidelines, rules, and best practices about coding in C++ http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines 841 commits 3 branches 0 releases 116 contributors Python 58.0% Makefile 42.0% Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags H1 gh-pages master Nothing to show Nothing to show New pull request Latest commit 7c9ec43 Jul 13, 2016 gdr-at-ms committed on GitHub Merge pull request #642 from galik/SL.50fix-typos … Fix typos in SL.50 Permalink Failed to load latest commit information. docs Corrected ""updated"" date in Lifetimes Dec 2, 2015 scripts Merge pull request #598 from tkruse/fix-bad-chars2 Apr 24, 2016 talks Added link for Neil MacIntosh's talk... Oct 24, 2015 .gitignore travis config Apr 9, 2016 .travis.yml travis config Apr 9, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Mar 20, 2016 CppCoreGuidelines.md Merge pull request #642 from galik/SL.50fix-typos Jul 13, 2016 LICENSE Squashed commit of the following: Aug 28, 2015 README.md Update README.md Mar 26, 2016 param-passing-advanced.png Initial checkin Sep 13, 2015 param-passing-normal.png Initial checkin Sep 14, 2015 README.md C++ Core Guidelines ""Within C++ is a smaller, simpler, safer language struggling to get out."" -- Bjarne Stroustrup The C++ Core Guidelines are a collaborative effort led by Bjarne Stroustrup, much like the C++ language itself. They are the result of many person-years of discussion and design across a number of organizations. Their design encourages general applicability and broad adoption but they can be freely copied and modified to meet your organization's needs. Getting started The guidelines themselves are found at CppCoreGuidelines. There is also a version formatted for browsing that is manually integrated and thus slightly older than the version in the master branch. Many of the guidelines make use of the header only Guideline Support Library. One implementation is available at GSL: Guideline Support Library. Background and scope The aim of the guidelines is to help people to use modern C++ effectively. By ""modern C++"" we mean C++11 and C++14 (and soon C++17). In other words, what would you like your code to look like in 5 years' time, given that you can start now? In 10 years' time? The guidelines are focused on relatively higher-level issues, such as interfaces, resource management, memory management, and concurrency. Such rules affect application architecture and library design. Following the rules will lead to code that is statically type safe, has no resource leaks, and catches many more programming logic errors than is common in code today. And it will run fast - you can afford to do things right. We are less concerned with low-level issues, such as naming conventions and indentation style. However, no topic that can help a programmer is out of bounds. Our initial set of rules emphasize safety (of various forms) and simplicity. They may very well be too strict. We expect to have to introduce more exceptions to better accommodate real-world needs. We also need more rules. You will find some of the rules contrary to your expectations or even contrary to your experience. If we haven't suggested you change your coding style in any way, we have failed! Please try to verify or disprove rules! In particular, we'd really like to have some of our rules backed up with measurements or better examples. You will find some of the rules obvious or even trivial. Please remember that one purpose of a guideline is to help someone who is less experienced or coming from a different background or language to get up to speed. The rules are designed to be supported by an analysis tool. Violations of rules will be flagged with references (or links) to the relevant rule. We do not expect you to memorize all the rules before trying to write code. The rules are meant for gradual introduction into a code base. We plan to build tools for that and hope others will too. Contributions and LICENSE Comments and suggestions for improvements are most welcome. We plan to modify and extend this document as our understanding improves and the language and the set of available libraries improve. More details are found at CONTRIBUTING and LICENSE . Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/isocpp/CppCoreGuidelines"	"""Official"" set of C++ guidelines, reviewed by the author of C++."	"true"
"Coding Style"	"C++ Dos and Don'ts"	"http://www.chromium.org/developers/coding-style/cpp-dos-and-donts"	"The Chromium Projects > For Developers > Coding Style > C++ Dos and Don'ts."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"C++ Dos and Don'ts - The Chromium Projects The Chromium Projects Search this site Home Chromium Chromium OS Quick links Report bugs Discuss Sitemap Other sites Chromium Blog Google Chrome Extensions Google Chrome Frame Except as otherwise noted, the content of this page is licensed under a Creative Commons Attribution 2.5 license, and examples are licensed under the BSD License. For Developers‎ > ‎Coding Style‎ > ‎ C++ Dos and Don'ts Contents 1 A Note About Usage 2 Minimize Code in Headers 2.1 Don't include unneeded headers 2.2 Move inner classes into the implementation 2.3 Move static implementation details to the implementation whenever possible 3 Stop inlining code in headers 3.1 Stop inlining complex methods. 3.2 If the method has significant implementation, there's also a good chance that by not inlining it, you could eliminate some includes. 3.3 Stop inlining virtual methods 3.4 Stop inlining constructors and destructors 3.5 When you CAN inline constructors and destructors 3.6 If in doubt, don't rely on these sorts of exceptions.  Err on the side of not inlining. 3.7 Be careful about your accessors 3.8 What about code outside of headers? 4 Static variables 5 Variable initialization A Note About Usage Unlike the style guide, the content of this page is advisory, not required. You can always deviate from something on this page, if the relevant author/reviewer/OWNERS agree that another course is better. Minimize Code in Headers Don't include unneeded headers If a file isn't using the symbols from some header, remove the header.  It turns out that this happens frequently in the Chromium codebase due to refactoring. Move inner classes into the implementation You can also forward declare classes inside a class: class Whatever {  public:   /* ... */  private:   struct DataStruct;   std::vector<DataStruct> data_; }; Any headers that DataStruct needed no longer need to be included in the header file and only need to be included in the implementation. This will often let you pull includes out of the header. For reference, the syntax in the implementation file is: struct Whatever::DataStruct { }; Note that sometimes you can't do this because certain STL data structures require the full definition at declaration time (most notably, std::deque and the STL adapters that wrap it). Move static implementation details to the implementation whenever possible If you have the class in a header file: #include ""BigImplementationDetail.h"" class PublicInterface {   public:    /* ... */   private:    static BigImplementationDetail detail_; }; You should try to move that from a class member into the anonymous namespace in the implementation file: namespace { BigImplementationDetail g_detail; }  // namespace That way, people who don't use your interface don't need to know about or care about BigImplementationDetail. You can do this for helper functions, too.  Note that if there is more than one class in the .cc file, it can aid clarity to define your file-scope helpers in an anonymous namespace just above the class that uses them, instead of at the top of the file. Stop inlining code in headers BACKGROUND: Unless something is a cheap accessor or you truly need it to be inlined, don't ask for it to be inlined.  Remember that definitions inside class declarations are implicitly requested to be inlined. class InlinedMethods {   InlinedMethods() {     // This constructor is equivalent to having the inline keyword in front     // of it!   }   void Method() {     // Same here!   } }; Stop inlining complex methods. class DontDoThis {  public:   int ComputeSomething() {     int sum =0;     for (int i = 0; i < limit; ++i) {       sum += OtherMethod(i, ... );     }     return sum;   } }; A request to inline is merely a suggestion to the compiler, and anything more than a few operations on integral data types will probably not be inlined.  However, every file that has to use an inline method will also emit a function version in the resulting .o, even if the method was inlined. (This is to support function pointer behavior properly.)  Therefore, by requesting an inline in this case, you're likely just adding crud to the .o files which the linker will need to do work to resolve. If the method has significant implementation, there's also a good chance that by not inlining it, you could eliminate some includes. Stop inlining virtual methods You can't inline virtual methods under most circumstances, even if the method would otherwise be inlined because it's very short. The compiler must do runtime dispatch on any virtual method where the compiler doesn't know the object's complete type, which rules out the majority of cases where you have an object. Stop inlining constructors and destructors Constructors and destructors are often significantly more complex than you think they are, especially if your class has any non-POD data members. Many STL classes have inlined constructors/destructors which may be copied into your function body. Because the bodies of these appear to be empty, they often seem like trivial functions that can safely be inlined.  Don't give in to this temptation.  Define them in the implementation file unless you really need them to be inlined.  Even if they do nothing now, someone could later add something seemingly-trivial to the class and make your hundreds of inlined destructors much more complex. Even worse, inlining constructors/destructors prevents you from using forward declared variables: class Forward; class WontCompile {  public:    // THIS WON'T COMPILE, BUT IT WOULD HAVE IF WE PUT THESE IN THE    // IMPLEMENTATION FILE!    //    // The compiler needs the definition of Forward to call the    // vector/scoped_ptr ctors/dtors.    Example() { }    ~Example() { }  private:   std::vector<Forward> examples_;   scoped_ptr<Forward> super_example_; }; For more information, read Item 30 in Effective C++. When you CAN inline constructors and destructors C++ has the concept of a trivial destructor. If your class has only POD types and does not explicitly declare a destructor, then the compiler will not bother to generate or run a destructor. struct Data {   Data() : count_one(0), count_two(0) {}   // No explicit destructor, thus no implicit destructor either.   // The members must all be POD for this trick to work.   int count_one;   int count_two; }; In this example, since there is no inheritance and only a few POD members, the constructor will be only a few trivial integer operations, and thus OK to inline. For abstract base classes with no members, it's safe to define the (trivial) destructor inline: class Interface {  public:   virtual ~Interface() {}      virtual void DoSomething(int parameter) = 0;   virtual int GetAValue() = 0;  }; But be careful; these two ""interfaces"" don't count: class ClaimsToBeAnInterface : public base:RefCounted<ClaimsToBeAnInterface> {  public:   virtual ~ClaimsToBeAnInterface() { /* But derives from a template! */ } }; class HasARealMember {  public:   virtual void InterfaceMethod() = 0;   virtual ~HasARealMember() {}  protected:   vector<string> some_data_; }; If in doubt, don't rely on these sorts of exceptions.  Err on the side of not inlining. Be careful about your accessors Not all accessors are light weight. Compare: class Foo {  public:   int count() const { return count_; }  private:   int count_; }; Here the accessor is trivial and safe to inline.  But the following code is probably not, even though it also looks simple: struct MyData {   vector<GURL> urls_;   base::Time last_access_; }; class Manager {  public:   MyData get_data() { return my_data_; }  private:   MyData my_data_; }; The underlying copy constructor calls for MyData are going to be complex. (Also, they're going to be synthesized, which is bad.) What about code outside of headers? For classes declared in .cc files, there's no risk of bloating several .o files with the definitions of the same ""inlined"" function.  While there are other, weaker arguments to continue to avoid inlining, the primary remaining consideration is simply what would make code most readable. This is especially true in testing code.  Test framework classes don't tend to be instantiated separately and passed around as objects; they're effectively just bundles of file-scope functionality coupled with a mechanism to reset state between tests.  In these cases, defining the test functions inline at their declaration sites has little negative effect and can reduce the amount of ""boilerplate"" in the test file. Different reviewers may have different opinions here; use good judgment. Static variables Dynamic initialization of function-scope static variables is thread-unsafe in chromium, even on compilers/platforms such as gcc/linux where such idioms are normally safe.  Background can be found in this thread. void foo() {     static int BAD_COUNT = ComputeTheCount();  // THREAD-UNSAFE     static int GOOD_COUNT = 42;  // C++03 3.6.2 says this is done before dynamic initialization, so probably thread-safe. } The majority of Chrome code is intended to be single-threaded, where this presents no problem.  When in multi-threaded code, however, the right answer is usually to use a base::LazyInstance. Variable initialization There are myriad ways to initialize variables in C++11.  Prefer the following general rules: Use assignment syntax when performing ""simple"" initialization with one or more literal values which will simply be composed into the object: int i = 1; std::string s = ""Hello""; std::pair<bool, double> p = {true, 2.0}; std::vector<std::string> v = {""one"", ""two"", ""three""}; Using '=' here is no less efficient than ""()"" (the compiler won't generate a temp + copy), and ensures that only implicit constructors are called, so readers seeing this syntax can assume nothing complex or subtle is happening.  Note that ""{}"" are allowed on the right side of the '=' here (e.g. when you're merely passing a set of initial values to a ""simple"" struct/container constructor; see below items for contrast). Use constructor syntax when construction performs significant logic, uses an explicit constructor, or in some other way is not intuitively ""simple"" to the reader: MyClass c(1.7, false, ""test""); std::vector<double> v(500, 0.97);  // Creates 500 copies of the provided initializer Use C++11 ""uniform init"" syntax (""{}"" without '=') only when neither of the above work: class C {  public:   explicit C(bool b) { ... };   ... }; class UsesC {   ...  private:   C c{true};  // Cannot use '=' since C() is explicit (and ""()"" is invalid syntax here) }; class Vexing {  public:   explicit Vexing(const std::string& s) { ... };   ... }; void func() {   Vexing v{std::string()};  // Using ""()"" here triggers ""most vexing parse"";                             // ""{}"" is arguably more readable than ""(())""   ... Never mix uniform init syntax with auto, since what it deduces is unlikely to be what was intended: auto x{1};  // Until C++17, decltype(x) is std::initializer_list<int>, not int! Comments Sign in|Recent Site Activity|Report Abuse|Print Page|Powered By Google Sites"	"null"	"null"	"The Chromium Projects > For Developers > Coding Style > C++ Dos and Don'ts."	"true"
"Coding Style"	"google-styleguide"	"https://github.com/google/styleguide"	"Style guides for Google-originated open-source projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5074"	"478"	"1364"	"GitHub - google/styleguide: Style guides for Google-originated open-source projects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 478 Star 5,074 Fork 1,364 google/styleguide Code Issues 62 Pull requests 41 Pulse Graphs Style guides for Google-originated open-source projects 187 commits 2 branches 0 releases 23 contributors HTML 58.5% Python 32.2% XSLT 5.4% CSS 1.7% JavaScript 1.2% Emacs Lisp 0.9% Other 0.1% HTML Python XSLT CSS JavaScript Emacs Lisp Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: gh-pages Switch branches/tags Branches Tags gh-pages wiki Nothing to show Nothing to show New pull request Latest commit 6d3a7d8 Jul 13, 2016 eglaysher committed on GitHub Merge pull request #159 from lhchavez/cpp11 … Support C++11 types in build/include_what_you_use Permalink Failed to load latest commit information. cpplint Merge pull request #159 from lhchavez/cpp11 Jul 13, 2016 docguide Replaced HTTP where HTTPS been awailable. Apr 1, 2016 include Updated Java Style Guide to reflect current internal version. Jun 29, 2016 README.md Replaced HTTP where HTTPS been awailable. Apr 1, 2016 Rguide.xml Reverted XML namespace name changes Apr 28, 2016 angularjs-google-style.html fix links to Javascript guide Jun 22, 2016 cppguide.html Update to current. Jul 6, 2016 cppguide.xml Update C++ style guide to 4.45. Sep 8, 2014 eclipse-cpp-google-style.xml Add Google C++ Eclipse style config. Jun 29, 2012 eclipse-java-google-style.xml java style guide and eclipse configuration update Feb 3, 2014 google-c-style.el Add autoload magic comments for the functions exposed by google-c-style. Sep 29, 2014 google-r-style.html Restore redirect to Rguide.xml from r105. Jul 18, 2013 google_python_style.vim New file google_python_style.vim. Nov 29, 2010 htmlcssguide.xml Replaced HTTP where HTTPS been awailable. Apr 1, 2016 intellij-java-google-style.xml Adding config files for formatting for IntelliJ and Eclipse Aug 30, 2011 javaguide.css Updated Java Style Guide to reflect current internal version. Jun 29, 2016 javaguide.html Update to current. Jul 12, 2016 javaguidelink.png initial commit for java style guide Dec 17, 2013 javascriptguide.xml Merge pull request #116 from Dominator008/javascript May 17, 2016 jsoncstyleguide.html Update look and feel of the style guides Jul 12, 2010 jsoncstyleguide.xml Replaced HTTP where HTTPS been awailable. Apr 1, 2016 jsoncstyleguide_example_01.png Adding first iteration of the JSON-C Style Guide for JSON APIs Feb 22, 2010 jsoncstyleguide_example_02.png Adding first iteration of the JSON-C Style Guide for JSON APIs Feb 22, 2010 lispguide.xml Replaced HTTP where HTTPS been awailable. Apr 1, 2016 objcguide.xml Replaced HTTP where HTTPS been awailable. Apr 1, 2016 pyguide.html Update shebang line Jun 24, 2016 shell.xml Fix broken link May 19, 2016 styleguide.css Update look and feel of the style guides Jul 12, 2010 styleguide.xsl Reverted XML namespace name changes Apr 28, 2016 vimscriptfull.xml Removed link shortening. Apr 1, 2016 vimscriptguide.xml Removed link shortening. Apr 1, 2016 xmlstyle.html Replaced HTTP where HTTPS been awailable. Apr 1, 2016 README.md Google Style Guides Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style. “Style” covers a lot of ground, from “use camelCase for variable names” to “never use global variables” to “never use exceptions.” This project holds the style guidelines we use for Google code. If you are modifying a project that originated at Google, you may be pointed to this page to see the style guides that apply to that project. Our C++ Style Guide, Objective-C Style Guide, Java Style Guide, Python Style Guide, R Style Guide, Shell Style Guide, HTML/CSS Style Guide, JavaScript Style Guide, AngularJS Style Guide, Common Lisp Style Guide, and Vimscript Style Guide are now available. We have also released cpplint, a tool to assist with style guide compliance, and google-c-style.el, an Emacs settings file for Google style. If your project requires that you create a new XML document format, our XML Document Format Style Guide may be helpful. In addition to actual style rules, it also contains advice on designing your own vs. adapting an existing format, on XML instance document formatting, and on elements vs. attributes. These style guides are licensed under the CC-By 3.0 License, which encourages you to share these documents. See https://creativecommons.org/licenses/by/3.0/ for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/styleguide"	"Style guides for Google-originated open-source projects."	"true"
"Coding Style"	"Google C++ Style Guide"	"https://google.github.io/styleguide/cppguide.html"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google C++ Style Guide Google C++ Style Guide Background C++ is one of the main development languages used by many of Google's open-source projects. As every C++ programmer knows, the language has many powerful features, but this power brings with it complexity, which in turn can make code more bug-prone and harder to read and maintain. The goal of this guide is to manage this complexity by describing in detail the dos and don'ts of writing C++ code. These rules exist to keep the code base manageable while still allowing coders to use C++ language features productively. Style, also known as readability, is what we call the conventions that govern our C++ code. The term Style is a bit of a misnomer, since these conventions cover far more than just source file formatting. Most open-source projects developed by Google conform to the requirements in this guide. Note that this guide is not a C++ tutorial: we assume that the reader is familiar with the language. Goals of the Style Guide Why do we have this document? There are a few core goals that we believe this guide should serve. These are the fundamental whys that underlie all of the individual rules. By bringing these ideas to the fore, we hope to ground discussions and make it clearer to our broader community why the rules are in place and why particular decisions have been made. If you understand what goals each rule is serving, it should be clearer to everyone when a rule may be waived (some can be), and what sort of argument or alternative would be necessary to change a rule in the guide. The goals of the style guide as we currently see them are as follows: Style rules should pull their weight The benefit of a style rule must be large enough to justify asking all of our engineers to remember it. The benefit is measured relative to the codebase we would get without the rule, so a rule against a very harmful practice may still have a small benefit if people are unlikely to do it anyway. This principle mostly explains the rules we don’t have, rather than the rules we do: for example, goto contravenes many of the following principles, but is already vanishingly rare, so the Style Guide doesn’t discuss it. Optimize for the reader, not the writer Our codebase (and most individual components submitted to it) is expected to continue for quite some time. As a result, more time will be spent reading most of our code than writing it. We explicitly choose to optimize for the experience of our average software engineer reading, maintaining, and debugging code in our codebase rather than ease when writing said code. ""Leave a trace for the reader"" is a particularly common sub-point of this principle: When something surprising or unusual is happening in a snippet of code (for example, transfer of pointer ownership), leaving textual hints for the reader at the point of use is valuable (std::unique_ptr demonstrates the ownership transfer unambiguously at the call site). Be consistent with existing code Using one style consistently through our codebase lets us focus on other (more important) issues. Consistency also allows for automation: tools that format your code or adjust your #includes only work properly when your code is consistent with the expectations of the tooling. In many cases, rules that are attributed to ""Be Consistent"" boil down to ""Just pick one and stop worrying about it""; the potential value of allowing flexibility on these points is outweighed by the cost of having people argue over them. Be consistent with the broader C++ community when appropriate Consistency with the way other organizations use C++ has value for the same reasons as consistency within our code base. If a feature in the C++ standard solves a problem, or if some idiom is widely known and accepted, that's an argument for using it. However, sometimes standard features and idioms are flawed, or were just designed without our codebase's needs in mind. In those cases (as described below) it's appropriate to constrain or ban standard features. In some cases we prefer a homegrown or third-party library over a library defined in the C++ Standard, either out of perceived superiority or insufficient value to transition the codebase to the standard interface. Avoid surprising or dangerous constructs C++ has features that are more surprising or dangerous than one might think at a glance. Some style guide restrictions are in place to prevent falling into these pitfalls. There is a high bar for style guide waivers on such restrictions, because waiving such rules often directly risks compromising program correctness. Avoid constructs that our average C++ programmer would find tricky or hard to maintain C++ has features that may not be generally appropriate because of the complexity they introduce to the code. In widely used code, it may be more acceptable to use trickier language constructs, because any benefits of more complex implementation are multiplied widely by usage, and the cost in understanding the complexity does not need to be paid again when working with new portions of the codebase. When in doubt, waivers to rules of this type can be sought by asking your project leads. This is specifically important for our codebase because code ownership and team membership changes over time: even if everyone that works with some piece of code currently understands it, such understanding is not guaranteed to hold a few years from now. Be mindful of our scale With a codebase of 100+ million lines and thousands of engineers, some mistakes and simplifications for one engineer can become costly for many. For instance it's particularly important to avoid polluting the global namespace: name collisions across a codebase of hundreds of millions of lines are difficult to work with and hard to avoid if everyone puts things into the global namespace. Concede to optimization when necessary Performance optimizations can sometimes be necessary and appropriate, even when they conflict with the other principles of this document. The intent of this document is to provide maximal guidance with reasonable restriction. As always, common sense and good taste should prevail. By this we specifically refer to the established conventions of the entire Google C++ community, not just your personal preferences or those of your team. Be skeptical about and reluctant to use clever or unusual constructs: the absence of a prohibition is not the same as a license to proceed. Use your judgment, and if you are unsure, please don't hesitate to ask your project leads to get additional input. Header Files In general, every .cc file should have an associated .h file. There are some common exceptions, such as unittests and small .cc files containing just a main() function. Correct use of header files can make a huge difference to the readability, size and performance of your code. The following rules will guide you through the various pitfalls of using header files. Self-contained Headers Header files should be self-contained (compile on their own) and end in .h. Non-header files that are meant for inclusion should end in .inc. All header files should be self-contained. Users and refactoring tools should not have to adhere to special conditions to include the header. Specifically, a header should have header guards and include all other headers it needs. If a template or inline function is declared in a .h file, that same header should provide its definition. The definitions of these constructs must be included into every .cc file that uses them, or the program may fail to link in some build configurations. Do not move these definitions to separately included header files (-inl.h); this practice was common in the past, but is no longer allowed. As an exception, a template that is explicitly instantiated for all relevant sets of template arguments, or that is a private implementation detail of a class, is allowed to be defined in the one and only .cc file that instantiates the template. There are rare cases where a file is not meant to be self-contained, but it is meant to be included at a specific point in the code. Examples are files that need to be included multiple times or platform-specific implementation details that are essentially part of other self-contained headers. Such files should use the file extension .inc. The #define Guard All header files should have #define guards to prevent multiple inclusion. The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_. To guarantee uniqueness, they should be based on the full path in a project's source tree. For example, the file foo/src/bar/baz.h in project foo should have the following guard: #ifndef FOO_BAR_BAZ_H_ #define FOO_BAR_BAZ_H_  ...  #endif  // FOO_BAR_BAZ_H_  Forward Declarations Avoid using forward declarations where possible. Just #include the headers you need. A ""forward declaration"" is a declaration of a class, function, or template without an associated definition. Forward declarations can save compile time, as #includes force the compiler to open more files and process more input. Forward declarations can save on unnecessary recompilation. #includes can force your code to be recompiled more often, due to unrelated changes in the header. Forward declarations can hide a dependency, allowing user code to skip necessary recompilation when headers change. A forward declaration may be broken by subsequent changes to the library. Forward declarations of functions and templates can prevent the header owners from making otherwise-compatible changes to their APIs, such as widening a parameter type, adding a template parameter with a default value, or migrating to a new namespace. Forward declaring symbols from namespace std:: yields undefined behavior. It can be difficult to determine whether a forward declaration or a full #include is needed. Replacing an #include with a forward declaration can silently change the meaning of code:       // b.h:       struct B {};       struct D : B {};        // good_user.cc:       #include ""b.h""       void f(B*);       void f(void*);       void test(D* x) { f(x); }  // calls f(B*)       If the #include was replaced with forward decls for B and D, test() would call f(void*). Forward declaring multiple symbols from a header can be more verbose than simply #includeing the header. Structuring code to enable forward declarations (e.g. using pointer members instead of object members) can make the code slower and more complex. Try to avoid forward declarations of entities defined in another project. When using a function declared in a header file, always #include that header. When using a class template, prefer to #include its header file. Please see Names and Order of Includes for rules about when to #include a header. Inline Functions Define functions inline only when they are small, say, 10 lines or fewer. You can declare functions in a way that allows the compiler to expand them inline rather than calling them through the usual function call mechanism. Inlining a function can generate more efficient object code, as long as the inlined function is small. Feel free to inline accessors and mutators, and other short, performance-critical functions. Overuse of inlining can actually make programs slower. Depending on a function's size, inlining it can cause the code size to increase or decrease. Inlining a very small accessor function will usually decrease code size while inlining a very large function can dramatically increase code size. On modern processors smaller code usually runs faster due to better use of the instruction cache. A decent rule of thumb is to not inline a function if it is more than 10 lines long. Beware of destructors, which are often longer than they appear because of implicit member- and base-destructor calls! Another useful rule of thumb: it's typically not cost effective to inline functions with loops or switch statements (unless, in the common case, the loop or switch statement is never executed). It is important to know that functions are not always inlined even if they are declared as such; for example, virtual and recursive functions are not normally inlined. Usually recursive functions should not be inline. The main reason for making a virtual function inline is to place its definition in the class, either for convenience or to document its behavior, e.g., for accessors and mutators. Names and Order of Includes Use standard order for readability and to avoid hidden dependencies: Related header, C library, C++ library, other libraries' .h, your project's .h. All of a project's header files should be listed as descendants of the project's source directory without use of UNIX directory shortcuts . (the current directory) or .. (the parent directory). For example, google-awesome-project/src/base/logging.h should be included as: #include ""base/logging.h""  In dir/foo.cc or dir/foo_test.cc, whose main purpose is to implement or test the stuff in dir2/foo2.h, order your includes as follows: dir2/foo2.h. C system files. C++ system files. Other libraries' .h files. Your project's .h files. With the preferred ordering, if dir2/foo2.h omits any necessary includes, the build of dir/foo.cc or dir/foo_test.cc will break. Thus, this rule ensures that build breaks show up first for the people working on these files, not for innocent people in other packages. dir/foo.cc and dir2/foo2.h are usually in the same directory (e.g. base/basictypes_test.cc and base/basictypes.h), but may sometimes be in different directories too. Within each section the includes should be ordered alphabetically. Note that older code might not conform to this rule and should be fixed when convenient. You should include all the headers that define the symbols you rely upon, except in the unusual case of forward declaration. If you rely on symbols from bar.h, don't count on the fact that you included foo.h which (currently) includes bar.h: include bar.h yourself, unless foo.h explicitly demonstrates its intent to provide you the symbols of bar.h. However, any includes present in the related header do not need to be included again in the related cc (i.e., foo.cc can rely on foo.h's includes). For example, the includes in google-awesome-project/src/foo/internal/fooserver.cc might look like this: #include ""foo/server/fooserver.h""  #include <sys/types.h> #include <unistd.h>  #include <hash_map> #include <vector>  #include ""base/basictypes.h"" #include ""base/commandlineflags.h"" #include ""foo/server/bar.h""  Sometimes, system-specific code needs conditional includes. Such code can put conditional includes after other includes. Of course, keep your system-specific code small and localized. Example: #include ""foo/public/fooserver.h""  #include ""base/port.h""  // For LANG_CXX11.  #ifdef LANG_CXX11 #include <initializer_list> #endif  // LANG_CXX11  Scoping Namespaces With few exceptions, place code in a namespace. Namespaces should have unique names based on the project name, and possibly its path. Unnamed namespaces in .cc files are encouraged. Do not use using-directives (e.g. using namespace foo). Do not use inline namespaces. Namespaces subdivide the global scope into distinct, named scopes, and so are useful for preventing name collisions in the global scope. Namespaces provide a method for preventing name conflicts in large programs while allowing most code to use reasonably short names. For example, if two different projects have a class Foo in the global scope, these symbols may collide at compile time or at runtime. If each project places their code in a namespace, project1::Foo and project2::Foo are now distinct symbols that do not collide, and code within each project's namespace can continue to refer to Foo without the prefix. Inline namespaces automatically place their names in the enclosing scope. Consider the following snippet, for example: namespace X { inline namespace Y {   void foo(); } }  The expressions X::Y::foo() and X::foo() are interchangeable. Inline namespaces are primarily intended for ABI compatibility across versions. Namespaces can be confusing, because they complicate the mechanics of figuring out what definition a name refers to. Inline namespaces, in particular, can be confusing because names aren't actually restricted to the namespace where they are declared. They are only useful as part of some larger versioning policy. Use of unnamed namespaces in header files can easily cause violations of the C++ One Definition Rule (ODR). In some contexts, it's necessary to repeatedly refer to symbols by their fully-qualified names. For deeply-nested namespaces, this can add a lot of clutter. Use namespaces according to the policy described below. Terminate namespaces with comments as shown in the given examples. See also the rules on Namespace Names. Unnamed Namespaces Unnamed namespaces are allowed and even encouraged in .cc files, to avoid link time naming conflicts: namespace {                           // This is in a .cc file.  // The content of a namespace is not indented. // // This function is guaranteed not to generate a colliding symbol // with other symbols at link time, and is only visible to // callers in this .cc file. bool UpdateInternals(Frobber* f, int newval) {   ... }  }  // namespace  Do not use unnamed namespaces in .h files. Named Namespaces Named namespaces should be used as follows: Namespaces wrap the entire source file after includes, gflags definitions/declarations and forward declarations of classes from other namespaces. // In the .h file namespace mynamespace {  // All declarations are within the namespace scope. // Notice the lack of indentation. class MyClass {  public:   ...   void Foo(); };  }  // namespace mynamespace  // In the .cc file namespace mynamespace {  // Definition of functions is within scope of the namespace. void MyClass::Foo() {   ... }  }  // namespace mynamespace  More complex .cc files might have additional details, like flags or using-declarations. #include ""a.h""  DEFINE_bool(someflag, false, ""dummy flag"");  using ::foo::bar;  namespace a {  ...code for a...         // Code goes against the left margin.  }  // namespace a  Do not declare anything in namespace std, including forward declarations of standard library classes. Declaring entities in namespace std is undefined behavior, i.e., not portable. To declare entities from the standard library, include the appropriate header file. You may not use a using-directive to make all names from a namespace available. // Forbidden -- This pollutes the namespace. using namespace foo;  Do not use Namespace aliases at namespace scope in header files except in explicitly marked internal-only namespaces, because anything imported into a namespace in a header file becomes part of the public API exported by that file. // Shorten access to some commonly used names in .cc files. namespace baz = ::foo::bar::baz;  // Shorten access to some commonly used names (in a .h file). namespace librarian { namespace impl {  // Internal, not part of the API. namespace sidetable = ::pipeline_diagnostics::sidetable; }  // namespace impl  inline void my_inline_function() {   // namespace alias local to a function (or method).   namespace baz = ::foo::bar::baz;   ... } }  // namespace librarian  Do not use inline namespaces. Nonmember, Static Member, and Global Functions Prefer placing nonmember functions in a namespace; use completely global functions rarely. Prefer grouping functions with a namespace instead of using a class as if it were a namespace. Static methods of a class should generally be closely related to instances of the class or the class's static data. Nonmember and static member functions can be useful in some situations. Putting nonmember functions in a namespace avoids polluting the global namespace. Nonmember and static member functions may make more sense as members of a new class, especially if they access external resources or have significant dependencies. Sometimes it is useful to define a function not bound to a class instance. Such a function can be either a static member or a nonmember function. Nonmember functions should not depend on external variables, and should nearly always exist in a namespace. Rather than creating classes only to group static member functions which do not share static data, use namespaces instead. For a header myproject/foo_bar.h, for example, write namespace myproject { namespace foo_bar { void Function1(); void Function2(); } }  instead of namespace myproject { class FooBar {  public:   static void Function1();   static void Function2(); }; }  If you define a nonmember function and it is only needed in its .cc file, use an unnamed namespace or static linkage (eg static int Foo() {...}) to limit its scope. Local Variables Place a function's variables in the narrowest scope possible, and initialize variables in the declaration. C++ allows you to declare variables anywhere in a function. We encourage you to declare them in as local a scope as possible, and as close to the first use as possible. This makes it easier for the reader to find the declaration and see what type the variable is and what it was initialized to. In particular, initialization should be used instead of declaration and assignment, e.g.: int i; i = f();      // Bad -- initialization separate from declaration.  int j = g();  // Good -- declaration has initialization.  vector<int> v; v.push_back(1);  // Prefer initializing using brace initialization. v.push_back(2);  vector<int> v = {1, 2};  // Good -- v starts initialized.  Variables needed for if, while and for statements should normally be declared within those statements, so that such variables are confined to those scopes. E.g.: while (const char* p = strchr(str, '/')) str = p + 1;  There is one caveat: if the variable is an object, its constructor is invoked every time it enters scope and is created, and its destructor is invoked every time it goes out of scope. // Inefficient implementation: for (int i = 0; i < 1000000; ++i) {   Foo f;  // My ctor and dtor get called 1000000 times each.   f.DoSomething(i); }  It may be more efficient to declare such a variable used in a loop outside that loop: Foo f;  // My ctor and dtor get called once each. for (int i = 0; i < 1000000; ++i) {   f.DoSomething(i); }  Static and Global Variables Variables of class type with static storage duration are forbidden: they cause hard-to-find bugs due to indeterminate order of construction and destruction. However, such variables are allowed if they are constexpr: they have no dynamic initialization or destruction. Objects with static storage duration, including global variables, static variables, static class member variables, and function static variables, must be Plain Old Data (POD): only ints, chars, floats, or pointers, or arrays/structs of POD. The order in which class constructors and initializers for static variables are called is only partially specified in C++ and can even change from build to build, which can cause bugs that are difficult to find. Therefore in addition to banning globals of class type, we do not allow namespace-scope static variables to be initialized with the result of a function, unless that function (such as getenv(), or getpid()) does not itself depend on any other globals. However, a static POD variable within function scope may be initialized with the result of a function, since its initialization order is well-defined and does not occur until control passes through its declaration. Likewise, global and static variables are destroyed when the program terminates, regardless of whether the termination is by returning from main() or by calling exit(). The order in which destructors are called is defined to be the reverse of the order in which the constructors were called. Since constructor order is indeterminate, so is destructor order. For example, at program-end time a static variable might have been destroyed, but code still running — perhaps in another thread — tries to access it and fails. Or the destructor for a static string variable might be run prior to the destructor for another variable that contains a reference to that string. One way to alleviate the destructor problem is to terminate the program by calling quick_exit() instead of exit(). The difference is that quick_exit() does not invoke destructors and does not invoke any handlers that were registered by calling atexit(). If you have a handler that needs to run when a program terminates via quick_exit() (flushing logs, for example), you can register it using at_quick_exit(). (If you have a handler that needs to run at both exit() and quick_exit(), you need to register it in both places.) As a result we only allow static variables to contain POD data. This rule completely disallows vector (use C arrays instead), or string (use const char []). If you need a static or global variable of a class type, consider initializing a pointer (which will never be freed), from either your main() function or from pthread_once(). Note that this must be a raw pointer, not a ""smart"" pointer, since the smart pointer's destructor will have the order-of-destructor issue that we are trying to avoid. Classes Classes are the fundamental unit of code in C++. Naturally, we use them extensively. This section lists the main dos and don'ts you should follow when writing a class. Doing Work in Constructors Avoid virtual method calls in constructors, and avoid initialization that can fail if you can't signal an error. It is possible to perform arbitrary initialization in the body of the constructor. No need to worry about whether the class has been initialized or not. Objects that are fully initialized by constructor call can be const and may also be easier to use with standard containers or algorithms. The problems with doing work in constructors are: If the work calls virtual functions, these calls will not get dispatched to the subclass implementations. Future modification to your class can quietly introduce this problem even if your class is not currently subclassed, causing much confusion. There is no easy way for constructors to signal errors, short of crashing the program (not always appropriate) or using exceptions (which are forbidden). If the work fails, we now have an object whose initialization code failed, so it may be an unusual state requiring a bool IsValid() state checking mechanism (or similar) which is easy to forget to call. You cannot take the address of a constructor, so whatever work is done in the constructor cannot easily be handed off to, for example, another thread. Constructors should never call virtual functions. If appropriate for your code , terminating the program may be an appropriate error handling response. Otherwise, consider a factory function or Init() method. Avoid Init() methods on objects with no other states that affect which public methods may be called (semi-constructed objects of this form are particularly hard to work with correctly). Implicit Conversions Do not define implicit conversions. Use the explicit keyword for conversion operators and single-argument constructors. Implicit conversions allow an object of one type (called the source type) to be used where a different type (called the destination type) is expected, such as when passing an int argument to a function that takes a double parameter. In addition to the implicit conversions defined by the language, users can define their own, by adding appropriate members to the class definition of the source or destination type. An implicit conversion in the source type is defined by a type conversion operator named after the destination type (e.g. operator bool()). An implicit conversion in the destination type is defined by a converting constructor, which is a constructor that can take the source type as its only argument. Note that a multi-parameter constructor can still be a converting constructor, if all but the first parameter have default values. The explicit keyword can be applied to a constructor or (since C++11) a conversion operator, to ensure that it can only be used when the destination type is explicit at the point of use, e.g. with a cast. This applies not only to implicit conversions, but to C++11's list initialization syntax: class Foo {   explicit Foo(int x, double y);   ... };  void Func(Foo f);  Func({42, 3.14});  // Error  This kind of code isn't technically an implicit conversion, but the language treats it as one as far as explicit is concerned. Implicit conversions can make a type more usable and expressive by eliminating the need to explicitly name a type when it's obvious. Implicit conversions can be a simpler alternative to overloading. List initialization syntax is a concise and expressive way of initializing objects. Implicit conversions can hide type-mismatch bugs, where the destination type does not match the user's expectation, or the user is unaware that any conversion will take place. Implicit conversions can make code harder to read, particularly in the presence of overloading, by making it less obvious what code is actually getting called. Constructors that take a single argument may accidentally be usable as implicit type conversions, even if they are not intended to do so. When a single-argument constructor is not marked explicit, there's no reliable way to tell whether it's intended to define an implicit conversion, or the author simply forgot to mark it. It's not always clear which type should provide the conversion, and if they both do, the code becomes ambiguous. List initialization can suffer from the same problems if the destination type is implicit, particularly if the list has only a single element. Type conversion operators, and constructors that are callable with a single argument, must be marked explicit in the class definition. As an exception, copy and move constructors should not be explicit, since they do not perform type conversion. Implicit conversions can sometimes be necessary and appropriate for types that are designed to transparently wrap other types. In that case, contact your project leads to request a waiver of this rule. Constructors that cannot be called with a single argument should usually omit explicit. Constructors that take a single std::initializer_list parameter should also omit explicit, in order to support copy-initialization (e.g. MyType m = {1, 2};). Copyable and Movable Types Support copying and/or moving if these operations are clear and meaningful for your type. Otherwise, disable the implicitly generated special functions that perform copies and moves. A copyable type allows its objects to be initialized or assigned from any other object of the same type, without changing the value of the source. For user-defined types, the copy behavior is defined by the copy constructor and the copy-assignment operator. string is an example of a copyable type. A movable type is one that can be initialized and assigned from temporaries (all copyable types are therefore movable). std::unique_ptr<int> is an example of a movable but not copyable type. For user-defined types, the move behavior is defined by the move constructor and the move-assignment operator. The copy/move constructors can be implicitly invoked by the compiler in some situations, e.g. when passing objects by value. Objects of copyable and movable types can be passed and returned by value, which makes APIs simpler, safer, and more general. Unlike when passing objects by pointer or reference, there's no risk of confusion over ownership, lifetime, mutability, and similar issues, and no need to specify them in the contract. It also prevents non-local interactions between the client and the implementation, which makes them easier to understand, maintain, and optimize by the compiler. Further, such objects can be used with generic APIs that require pass-by-value, such as most containers, and they allow for additional flexibility in e.g., type composition. Copy/move constructors and assignment operators are usually easier to define correctly than alternatives like Clone(), CopyFrom() or Swap(), because they can be generated by the compiler, either implicitly or with = default. They are concise, and ensure that all data members are copied. Copy and move constructors are also generally more efficient, because they don't require heap allocation or separate initialization and assignment steps, and they're eligible for optimizations such as copy elision. Move operations allow the implicit and efficient transfer of resources out of rvalue objects. This allows a plainer coding style in some cases. Some types do not need to be copyable, and providing copy operations for such types can be confusing, nonsensical, or outright incorrect. Types representing singleton objects (Registerer), objects tied to a specific scope (Cleanup), or closely coupled to object identity (Mutex) cannot be copied meaningfully. Copy operations for base class types that are to be used polymorphically are hazardous, because use of them can lead to object slicing. Defaulted or carelessly-implemented copy operations can be incorrect, and the resulting bugs can be confusing and difficult to diagnose. Copy constructors are invoked implicitly, which makes the invocation easy to miss. This may cause confusion for programmers used to languages where pass-by-reference is conventional or mandatory. It may also encourage excessive copying, which can cause performance problems. Provide the copy and move operations if their meaning is clear to a casual user and the copying/moving does not incur unexpected costs. If you define a copy or move constructor, define the corresponding assignment operator, and vice-versa. If your type is copyable, do not define move operations unless they are significantly more efficient than the corresponding copy operations. If your type is not copyable, but the correctness of a move is obvious to users of the type, you may make the type move-only by defining both of the move operations. If your type provides copy operations, it is recommended that you design your class so that the default implementation of those operations is correct. Remember to review the correctness of any defaulted operations as you would any other code, and to document that your class is copyable and/or cheaply movable if that's an API guarantee. class Foo {  public:   Foo(Foo&& other) : field_(other.field) {}   // Bad, defines only move constructor, but not operator=.   private:   Field field_; };  Due to the risk of slicing, avoid providing an assignment operator or public copy/move constructor for a class that's intended to be derived from (and avoid deriving from a class with such members). If your base class needs to be copyable, provide a public virtual Clone() method, and a protected copy constructor that derived classes can use to implement it. If you do not want to support copy/move operations on your type, explicitly disable them using = delete in the public: section. Structs vs. Classes Use a struct only for passive objects that carry data; everything else is a class. The struct and class keywords behave almost identically in C++. We add our own semantic meanings to each keyword, so you should use the appropriate keyword for the data-type you're defining. structs should be used for passive objects that carry data, and may have associated constants, but lack any functionality other than access/setting the data members. The accessing/setting of fields is done by directly accessing the fields rather than through method invocations. Methods should not provide behavior but should only be used to set up the data members, e.g., constructor, destructor, Initialize(), Reset(), Validate(). If more functionality is required, a class is more appropriate. If in doubt, make it a class. For consistency with STL, you can use struct instead of class for functors and traits. Note that member variables in structs and classes have different naming rules. Inheritance Composition is often more appropriate than inheritance. When using inheritance, make it public. When a sub-class inherits from a base class, it includes the definitions of all the data and operations that the parent base class defines. In practice, inheritance is used in two major ways in C++: implementation inheritance, in which actual code is inherited by the child, and interface inheritance, in which only method names are inherited. Implementation inheritance reduces code size by re-using the base class code as it specializes an existing type. Because inheritance is a compile-time declaration, you and the compiler can understand the operation and detect errors. Interface inheritance can be used to programmatically enforce that a class expose a particular API. Again, the compiler can detect errors, in this case, when a class does not define a necessary method of the API. For implementation inheritance, because the code implementing a sub-class is spread between the base and the sub-class, it can be more difficult to understand an implementation. The sub-class cannot override functions that are not virtual, so the sub-class cannot change implementation. The base class may also define some data members, so that specifies physical layout of the base class. All inheritance should be public. If you want to do private inheritance, you should be including an instance of the base class as a member instead. Do not overuse implementation inheritance. Composition is often more appropriate. Try to restrict use of inheritance to the ""is-a"" case: Bar subclasses Foo if it can reasonably be said that Bar ""is a kind of"" Foo. Make your destructor virtual if necessary. If your class has virtual methods, its destructor should be virtual. Limit the use of protected to those member functions that might need to be accessed from subclasses. Note that data members should be private. Explicitly annotate overrides of virtual functions or virtual destructors with an override or (less frequently) final specifier. Older (pre-C++11) code will use the virtual keyword as an inferior alternative annotation. For clarity, use exactly one of override, final, or virtual when declaring an override. Rationale: A function or destructor marked override or final that is not an override of a base class virtual function will not compile, and this helps catch common errors. The specifiers serve as documentation; if no specifier is present, the reader has to check all ancestors of the class in question to determine if the function or destructor is virtual or not. Multiple Inheritance Only very rarely is multiple implementation inheritance actually useful. We allow multiple inheritance only when at most one of the base classes has an implementation; all other base classes must be pure interface classes tagged with the Interface suffix. Multiple inheritance allows a sub-class to have more than one base class. We distinguish between base classes that are pure interfaces and those that have an implementation. Multiple implementation inheritance may let you re-use even more code than single inheritance (see Inheritance). Only very rarely is multiple implementation inheritance actually useful. When multiple implementation inheritance seems like the solution, you can usually find a different, more explicit, and cleaner solution. Multiple inheritance is allowed only when all superclasses, with the possible exception of the first one, are pure interfaces. In order to ensure that they remain pure interfaces, they must end with the Interface suffix. There is an exception to this rule on Windows. Interfaces Classes that satisfy certain conditions are allowed, but not required, to end with an Interface suffix. A class is a pure interface if it meets the following requirements: It has only public pure virtual (""= 0"") methods and static methods (but see below for destructor). It may not have non-static data members. It need not have any constructors defined. If a constructor is provided, it must take no arguments and it must be protected. If it is a subclass, it may only be derived from classes that satisfy these conditions and are tagged with the Interface suffix. An interface class can never be directly instantiated because of the pure virtual method(s) it declares. To make sure all implementations of the interface can be destroyed correctly, the interface must also declare a virtual destructor (in an exception to the first rule, this should not be pure). See Stroustrup, The C++ Programming Language, 3rd edition, section 12.4 for details. Tagging a class with the Interface suffix lets others know that they must not add implemented methods or non static data members. This is particularly important in the case of multiple inheritance. Additionally, the interface concept is already well-understood by Java programmers. The Interface suffix lengthens the class name, which can make it harder to read and understand. Also, the interface property may be considered an implementation detail that shouldn't be exposed to clients. A class may end with Interface only if it meets the above requirements. We do not require the converse, however: classes that meet the above requirements are not required to end with Interface. Operator Overloading Overload operators judiciously. Do not create user-defined literals. C++ permits user code to declare overloaded versions of the built-in operators using the operator keyword, so long as one of the parameters is a user-defined type. The operator keyword also permits user code to define new kinds of literals using operator"""", and to define type-conversion functions such as operator bool(). Operator overloading can make code more concise and intuitive by enabling user-defined types to behave the same as built-in types. Overloaded operators are the idiomatic names for certain operations (e.g. ==, <, =, and <<), and adhering to those conventions can make user-defined types more readable and enable them to interoperate with libraries that expect those names. User-defined literals are a very concise notation for creating objects of user-defined types. Providing a correct, consistent, and unsurprising set of operator overloads requires some care, and failure to do so can lead to confusion and bugs. Overuse of operators can lead to obfuscated code, particularly if the overloaded operator's semantics don't follow convention. The hazards of function overloading apply just as much to operator overloading, if not more so. Operator overloads can fool our intuition into thinking that expensive operations are cheap, built-in operations. Finding the call sites for overloaded operators may requre a search tool that's aware of C++ syntax, rather than e.g. grep. If you get the argument type of an overloaded operator wrong, you may get a different overload rather than a compiler error. For example, foo < bar may do one thing, while &foo < &bar does something totally different. Certain operator overloads are inherently hazardous. Overloading unary & can cause the same code to have different meanings depending on whether the overload declaration is visible. Overloads of &&, ||, and , (comma) cannot match the evaluation-order semantics of the built-in operators. Operators are often defined outside the class, so there's a risk of different files introducing different definitions of the same operator. If both definitions are linked into the same binary, this results in undefined behavior, which can manifest as subtle run-time bugs. User-defined literals allow the creation of new syntactic forms that are unfamiliar even to experienced C++ programmers. Define overloaded operators only if their meaning is obvious, unsurprising, and consistent with the corresponding built-in operators. For example, use | as a bitwise- or logical-or, not as a shell-style pipe. Define operators only on your own types. More precisely, define them in the same headers, .cc files, and namespaces as the types they operate on. That way, the operators are available wherever the type is, minimizing the risk of multiple definitions. If possible, avoid defining operators as templates, because they must satisfy this rule for any possible template arguments. If you define an operator, also define any related operators that make sense, and make sure they are defined consistently. For example, if you overload <, overload all the comparison operators, and make sure < and > never return true for the same arguments. Prefer to define non-modifying binary operators as non-member functions. If a binary operator is defined as a class member, implicit conversions will apply to the right-hand argument, but not the left-hand one. It will confuse your users if a < b compiles but b < a doesn't. Don't go out of your way to avoid defining operator overloads. For example, prefer to define ==, =, and <<, rather than Equals(), CopyFrom(), and PrintTo(). Conversely, don't define operator overloads just because other libraries expect them. For example, if your type doesn't have a natural ordering, but you want to store it in a std::set, use a custom comparator rather than overloading <. Do not overload &&, ||, , (comma), or unary &. Do not overload operator"""", i.e. do not introduce user-defined literals. Type conversion operators are covered in the section on implicit conversions. The = operator is covered in the section on copy constructors. Overloading << for use with streams is covered in the section on streams. See also the rules on function overloading, which apply to operator overloading as well. Access Control Make data members private, unless they are static const (and follow the naming convention for constants). For technical reasons, we allow data members of a test fixture class to be protected when using Google Test). Declaration Order Use the specified order of declarations within a class: public: before private:, methods before data members (variables), etc. Your class definition should start with its public: section, followed by its protected: section and then its private: section. If any of these sections are empty, omit them. Within each section, the declarations generally should be in the following order: Using-declarations, Typedefs and Enums Constants (static const data members) Constructors and assignment operators Destructor Methods, including static methods Data Members (except static const data members) If copying and assignment are disabled with a macro such as DISALLOW_COPY_AND_ASSIGN, it should be at the end of the private: section, and should be the last thing in the class. See Copyable and Movable Types. Do not put large method definitions inline in the class definition. Usually, only trivial or performance-critical, and very short, methods may be defined inline. See Inline Functions for more details. Functions Parameter Ordering When defining a function, parameter order is: inputs, then outputs. Parameters to C/C++ functions are either input to the function, output from the function, or both. Input parameters are usually values or const references, while output and input/output parameters will be non-const pointers. When ordering function parameters, put all input-only parameters before any output parameters. In particular, do not add new parameters to the end of the function just because they are new; place new input-only parameters before the output parameters. This is not a hard-and-fast rule. Parameters that are both input and output (often classes/structs) muddy the waters, and, as always, consistency with related functions may require you to bend the rule. Write Short Functions Prefer small and focused functions. We recognize that long functions are sometimes appropriate, so no hard limit is placed on functions length. If a function exceeds about 40 lines, think about whether it can be broken up without harming the structure of the program. Even if your long function works perfectly now, someone modifying it in a few months may add new behavior. This could result in bugs that are hard to find. Keeping your functions short and simple makes it easier for other people to read and modify your code. You could find long and complicated functions when working with some code. Do not be intimidated by modifying existing code: if working with such a function proves to be difficult, you find that errors are hard to debug, or you want to use a piece of it in several different contexts, consider breaking up the function into smaller and more manageable pieces. Reference Arguments All parameters passed by reference must be labeled const. In C, if a function needs to modify a variable, the parameter must use a pointer, eg int foo(int *pval). In C++, the function can alternatively declare a reference parameter: int foo(int &val). Defining a parameter as reference avoids ugly code like (*pval)++. Necessary for some applications like copy constructors. Makes it clear, unlike with pointers, that a null pointer is not a possible value. References can be confusing, as they have value syntax but pointer semantics. Within function parameter lists all references must be const: void Foo(const string &in, string *out);  In fact it is a very strong convention in Google code that input arguments are values or const references while output arguments are pointers. Input parameters may be const pointers, but we never allow non-const reference parameters except when required by convention, e.g., swap(). However, there are some instances where using const T* is preferable to const T& for input parameters. For example: You want to pass in a null pointer. The function saves a pointer or reference to the input. Remember that most of the time input parameters are going to be specified as const T&. Using const T* instead communicates to the reader that the input is somehow treated differently. So if you choose const T* rather than const T&, do so for a concrete reason; otherwise it will likely confuse readers by making them look for an explanation that doesn't exist. Function Overloading Use overloaded functions (including constructors) only if a reader looking at a call site can get a good idea of what is happening without having to first figure out exactly which overload is being called. You may write a function that takes a const string& and overload it with another that takes const char*. class MyClass {  public:   void Analyze(const string &text);   void Analyze(const char *text, size_t textlen); };  Overloading can make code more intuitive by allowing an identically-named function to take different arguments. It may be necessary for templatized code, and it can be convenient for Visitors. If a function is overloaded by the argument types alone, a reader may have to understand C++'s complex matching rules in order to tell what's going on. Also many people are confused by the semantics of inheritance if a derived class overrides only some of the variants of a function. If you want to overload a function, consider qualifying the name with some information about the arguments, e.g., AppendString(), AppendInt() rather than just Append(). If you are overloading a function to support variable number of arguments of the same type, consider making it take a vector so that the user can use an initializer list to specify the arguments. Default Arguments Default arguments are allowed on non-virtual functions when the default is guaranteed to always have the same value. Follow the same restrictions as for function overloading, and prefer overloaded functions if the readability gained with default arguments doesn't outweigh the downsides below. Often you have a function that uses default values, but occasionally you want to override the defaults. Default parameters allow an easy way to do this without having to define many functions for the rare exceptions. Compared to overloading the function, default arguments have a cleaner syntax, with less boilerplate and a clearer distinction between 'required' and 'optional' arguments. Defaulted arguments are another way to achieve the semantics of overloaded functions, so all the reasons not to overload functions apply. The defaults for arguments in a virtual function call are determined by the static type of the target object, and there's no guarantee that all overrides of a given function declare the same defaults. Default parameters are re-evaluated at each call site, which can bloat the generated code. Readers may also expect the default's value to be fixed at the declaration instead of varying at each call. Function pointers are confusing in the presence of default arguments, since the function signature often doesn't match the call signature. Adding function overloads avoids these problems. Default arguments are banned on virtual functions, where they don't work properly, and in cases where the specified default might not evaluate to the same value depending on when it was evaluated. (For example, don't write void f(int n = counter++);.) In some other cases, default arguments can improve the readability of their function declarations enough to overcome the downsides above, so they are allowed. When in doubt, use overloads. Trailing Return Type Syntax Use trailing return types only where using the ordinary syntax (leading return types) is impractical or much less readable. C++ allows two different forms of function declarations. In the older form, the return type appears before the function name. For example: int foo(int x);  The new form, introduced in C++11, uses the auto keyword before the function name and a trailing return type after the argument list. For example, the declaration above could equivalently be written: auto foo(int x) -> int;  The trailing return type is in the function's scope. This doesn't make a difference for a simple case like int but it matters for more complicated cases, like types declared in class scope or types written in terms of the function parameters. Trailing return types are the only way to explicitly specify the return type of a lambda expression. In some cases the compiler is able to deduce a lambda's return type, but not in all cases. Even when the compiler can deduce it automatically, sometimes specifying it explicitly would be clearer for readers. Sometimes it's easier and more readable to specify a return type after the function's parameter list has already appeared. This is particularly true when the return type depends on template parameters. For example: template <class T, class U> auto add(T t, U u) -> decltype(t + u); versus template <class T, class U> decltype(declval<T&>() + declval<U&>()) add(T t, U u); Trailing return type syntax is relatively new and it has no analogue in C++-like languages like C and Java, so some readers may find it unfamiliar. Existing code bases have an enormous number of function declarations that aren't going to get changed to use the new syntax, so the realistic choices are using the old syntax only or using a mixture of the two. Using a single version is better for uniformity of style. In most cases, continue to use the older style of function declaration where the return type goes before the function name. Use the new trailing-return-type form only in cases where it's required (such as lambdas) or where, by putting the type after the function's parameter list, it allows you to write the type in a much more readable way. The latter case should be rare; it's mostly an issue in fairly complicated template code, which is discouraged in most cases. Google-Specific Magic There are various tricks and utilities that we use to make C++ code more robust, and various ways we use C++ that may differ from what you see elsewhere. Ownership and Smart Pointers Prefer to have single, fixed owners for dynamically allocated objects. Prefer to transfer ownership with smart pointers. ""Ownership"" is a bookkeeping technique for managing dynamically allocated memory (and other resources). The owner of a dynamically allocated object is an object or function that is responsible for ensuring that it is deleted when no longer needed. Ownership can sometimes be shared, in which case the last owner is typically responsible for deleting it. Even when ownership is not shared, it can be transferred from one piece of code to another. ""Smart"" pointers are classes that act like pointers, e.g. by overloading the * and -> operators. Some smart pointer types can be used to automate ownership bookkeeping, to ensure these responsibilities are met. std::unique_ptr is a smart pointer type introduced in C++11, which expresses exclusive ownership of a dynamically allocated object; the object is deleted when the std::unique_ptr goes out of scope. It cannot be copied, but can be moved to represent ownership transfer. std::shared_ptr is a smart pointer type that expresses shared ownership of a dynamically allocated object. std::shared_ptrs can be copied; ownership of the object is shared among all copies, and the object is deleted when the last std::shared_ptr is destroyed. It's virtually impossible to manage dynamically allocated memory without some sort of ownership logic. Transferring ownership of an object can be cheaper than copying it (if copying it is even possible). Transferring ownership can be simpler than 'borrowing' a pointer or reference, because it reduces the need to coordinate the lifetime of the object between the two users. Smart pointers can improve readability by making ownership logic explicit, self-documenting, and unambiguous. Smart pointers can eliminate manual ownership bookkeeping, simplifying the code and ruling out large classes of errors. For const objects, shared ownership can be a simple and efficient alternative to deep copying. Ownership must be represented and transferred via pointers (whether smart or plain). Pointer semantics are more complicated than value semantics, especially in APIs: you have to worry not just about ownership, but also aliasing, lifetime, and mutability, among other issues. The performance costs of value semantics are often overestimated, so the performance benefits of ownership transfer might not justify the readability and complexity costs. APIs that transfer ownership force their clients into a single memory management model. Code using smart pointers is less explicit about where the resource releases take place. std::unique_ptr expresses ownership transfer using C++11's move semantics, which are relatively new and may confuse some programmers. Shared ownership can be a tempting alternative to careful ownership design, obfuscating the design of a system. Shared ownership requires explicit bookkeeping at run-time, which can be costly. In some cases (e.g. cyclic references), objects with shared ownership may never be deleted. Smart pointers are not perfect substitutes for plain pointers. If dynamic allocation is necessary, prefer to keep ownership with the code that allocated it. If other code needs access to the object, consider passing it a copy, or passing a pointer or reference without transferring ownership. Prefer to use std::unique_ptr to make ownership transfer explicit. For example: std::unique_ptr<Foo> FooFactory(); void FooConsumer(std::unique_ptr<Foo> ptr);  Do not design your code to use shared ownership without a very good reason. One such reason is to avoid expensive copy operations, but you should only do this if the performance benefits are significant, and the underlying object is immutable (i.e. std::shared_ptr<const Foo>). If you do use shared ownership, prefer to use std::shared_ptr. Do not use scoped_ptr in new code unless you need to be compatible with older versions of C++. Never use std::auto_ptr. Instead, use std::unique_ptr. cpplint Use cpplint.py to detect style errors. cpplint.py is a tool that reads a source file and identifies many style errors. It is not perfect, and has both false positives and false negatives, but it is still a valuable tool. False positives can be ignored by putting // NOLINT at the end of the line or // NOLINTNEXTLINE in the previous line. Some projects have instructions on how to run cpplint.py from their project tools. If the project you are contributing to does not, you can download cpplint.py separately. Other C++ Features Rvalue References Use rvalue references only to define move constructors and move assignment operators, or for perfect forwarding. Rvalue references are a type of reference that can only bind to temporary objects. The syntax is similar to traditional reference syntax. For example, void f(string&& s); declares a function whose argument is an rvalue reference to a string. Defining a move constructor (a constructor taking an rvalue reference to the class type) makes it possible to move a value instead of copying it. If v1 is a vector<string>, for example, then auto v2(std::move(v1)) will probably just result in some simple pointer manipulation instead of copying a large amount of data. In some cases this can result in a major performance improvement. Rvalue references make it possible to write a generic function wrapper that forwards its arguments to another function, and works whether or not its arguments are temporary objects. (This is sometimes called ""perfect forwarding"".) Rvalue references make it possible to implement types that are movable but not copyable, which can be useful for types that have no sensible definition of copying but where you might still want to pass them as function arguments, put them in containers, etc. std::move is necessary to make effective use of some standard-library types, such as std::unique_ptr. Rvalue references are a relatively new feature (introduced as part of C++11), and not yet widely understood. Rules like reference collapsing, and automatic synthesis of move constructors, are complicated. Use rvalue references only to define move constructors and move assignment operators (as described in Copyable and Movable Types) and, in conjunction with std::forward, to support perfect forwarding. You may use std::move to express moving a value from one object to another rather than copying it. Variable-Length Arrays and alloca() We do not allow variable-length arrays or alloca(). Variable-length arrays have natural-looking syntax. Both variable-length arrays and alloca() are very efficient. Variable-length arrays and alloca are not part of Standard C++. More importantly, they allocate a data-dependent amount of stack space that can trigger difficult-to-find memory overwriting bugs: ""It ran fine on my machine, but dies mysteriously in production"". Use a safe allocator instead, such as vector or std::unique_ptr<T[]>. Friends We allow use of friend classes and functions, within reason. Friends should usually be defined in the same file so that the reader does not have to look in another file to find uses of the private members of a class. A common use of friend is to have a FooBuilder class be a friend of Foo so that it can construct the inner state of Foo correctly, without exposing this state to the world. In some cases it may be useful to make a unittest class a friend of the class it tests. Friends extend, but do not break, the encapsulation boundary of a class. In some cases this is better than making a member public when you want to give only one other class access to it. However, most classes should interact with other classes solely through their public members. Exceptions We do not use C++ exceptions. Exceptions allow higher levels of an application to decide how to handle ""can't happen"" failures in deeply nested functions, without the obscuring and error-prone bookkeeping of error codes. Exceptions are used by most other modern languages. Using them in C++ would make it more consistent with Python, Java, and the C++ that others are familiar with. Some third-party C++ libraries use exceptions, and turning them off internally makes it harder to integrate with those libraries. Exceptions are the only way for a constructor to fail. We can simulate this with a factory function or an Init() method, but these require heap allocation or a new ""invalid"" state, respectively. Exceptions are really handy in testing frameworks. When you add a throw statement to an existing function, you must examine all of its transitive callers. Either they must make at least the basic exception safety guarantee, or they must never catch the exception and be happy with the program terminating as a result. For instance, if f() calls g() calls h(), and h throws an exception that f catches, g has to be careful or it may not clean up properly. More generally, exceptions make the control flow of programs difficult to evaluate by looking at code: functions may return in places you don't expect. This causes maintainability and debugging difficulties. You can minimize this cost via some rules on how and where exceptions can be used, but at the cost of more that a developer needs to know and understand. Exception safety requires both RAII and different coding practices. Lots of supporting machinery is needed to make writing correct exception-safe code easy. Further, to avoid requiring readers to understand the entire call graph, exception-safe code must isolate logic that writes to persistent state into a ""commit"" phase. This will have both benefits and costs (perhaps where you're forced to obfuscate code to isolate the commit). Allowing exceptions would force us to always pay those costs even when they're not worth it. Turning on exceptions adds data to each binary produced, increasing compile time (probably slightly) and possibly increasing address space pressure. The availability of exceptions may encourage developers to throw them when they are not appropriate or recover from them when it's not safe to do so. For example, invalid user input should not cause exceptions to be thrown. We would need to make the style guide even longer to document these restrictions! On their face, the benefits of using exceptions outweigh the costs, especially in new projects. However, for existing code, the introduction of exceptions has implications on all dependent code. If exceptions can be propagated beyond a new project, it also becomes problematic to integrate the new project into existing exception-free code. Because most existing C++ code at Google is not prepared to deal with exceptions, it is comparatively difficult to adopt new code that generates exceptions. Given that Google's existing code is not exception-tolerant, the costs of using exceptions are somewhat greater than the costs in a new project. The conversion process would be slow and error-prone. We don't believe that the available alternatives to exceptions, such as error codes and assertions, introduce a significant burden. Our advice against using exceptions is not predicated on philosophical or moral grounds, but practical ones. Because we'd like to use our open-source projects at Google and it's difficult to do so if those projects use exceptions, we need to advise against exceptions in Google open-source projects as well. Things would probably be different if we had to do it all over again from scratch. This prohibition also applies to the exception-related features added in C++11, such as noexcept, std::exception_ptr, and std::nested_exception. There is an exception to this rule (no pun intended) for Windows code. Run-Time Type Information (RTTI) Avoid using Run Time Type Information (RTTI). RTTI allows a programmer to query the C++ class of an object at run time. This is done by use of typeid or dynamic_cast. Querying the type of an object at run-time frequently means a design problem. Needing to know the type of an object at runtime is often an indication that the design of your class hierarchy is flawed. Undisciplined use of RTTI makes code hard to maintain. It can lead to type-based decision trees or switch statements scattered throughout the code, all of which must be examined when making further changes. The standard alternatives to RTTI (described below) require modification or redesign of the class hierarchy in question. Sometimes such modifications are infeasible or undesirable, particularly in widely-used or mature code. RTTI can be useful in some unit tests. For example, it is useful in tests of factory classes where the test has to verify that a newly created object has the expected dynamic type. It is also useful in managing the relationship between objects and their mocks. RTTI is useful when considering multiple abstract objects. Consider bool Base::Equal(Base* other) = 0; bool Derived::Equal(Base* other) {   Derived* that = dynamic_cast<Derived*>(other);   if (that == NULL)     return false;   ... }  RTTI has legitimate uses but is prone to abuse, so you must be careful when using it. You may use it freely in unittests, but avoid it when possible in other code. In particular, think twice before using RTTI in new code. If you find yourself needing to write code that behaves differently based on the class of an object, consider one of the following alternatives to querying the type: Virtual methods are the preferred way of executing different code paths depending on a specific subclass type. This puts the work within the object itself. If the work belongs outside the object and instead in some processing code, consider a double-dispatch solution, such as the Visitor design pattern. This allows a facility outside the object itself to determine the type of class using the built-in type system. When the logic of a program guarantees that a given instance of a base class is in fact an instance of a particular derived class, then a dynamic_cast may be used freely on the object. Usually one can use a static_cast as an alternative in such situations. Decision trees based on type are a strong indication that your code is on the wrong track. if (typeid(*data) == typeid(D1)) {   ... } else if (typeid(*data) == typeid(D2)) {   ... } else if (typeid(*data) == typeid(D3)) { ...  Code such as this usually breaks when additional subclasses are added to the class hierarchy. Moreover, when properties of a subclass change, it is difficult to find and modify all the affected code segments. Do not hand-implement an RTTI-like workaround. The arguments against RTTI apply just as much to workarounds like class hierarchies with type tags. Moreover, workarounds disguise your true intent. Casting Use C++-style casts like static_cast<float>(double_value), or brace initialization for conversion of arithmetic types like int64 y = int64{1} << 42. Do not use cast formats like int y = (int)x or int y = int(x) (but the latter is okay when invoking a constructor of a class type). C++ introduced a different cast system from C that distinguishes the types of cast operations. The problem with C casts is the ambiguity of the operation; sometimes you are doing a conversion (e.g., (int)3.5) and sometimes you are doing a cast (e.g., (int)""hello""). Brace initialization and C++ casts can often help avoid this ambiguity. Additionally, C++ casts are more visible when searching for them. The C++-style cast syntax is verbose and cumbersome. Do not use C-style casts. Instead, use these C++-style casts when explicit type conversion is necessary. Use brace initialization to convert arithmetic types (e.g. int64{x}). This is the safest approach because code will not compile if conversion can result in information loss. The syntax is also concise. Use static_cast as the equivalent of a C-style cast that does value conversion, when you need to explicitly up-cast a pointer from a class to its superclass, or when you need to explicitly cast a pointer from a superclass to a subclass. In this last case, you must be sure your object is actually an instance of the subclass. Use const_cast to remove the const qualifier (see const). Use reinterpret_cast to do unsafe conversions of pointer types to and from integer and other pointer types. Use this only if you know what you are doing and you understand the aliasing issues. See the RTTI section for guidance on the use of dynamic_cast. Streams Use streams where appropriate, and stick to ""simple"" usages. Streams are the standard I/O abstraction in C++, as exemplified by the standard header <iostream>. They are widely used in Google code, but only for debug logging and test diagnostics. The << and >> stream operators provide an API for formatted I/O that is easily learned, portable, reusable, and extensible. printf, by contrast, doesn't even support string, to say nothing of user-defined types, and is very difficult to use portably. printf also obliges you to choose among the numerous slightly different versions of that function, and navigate the dozens of conversion specifiers. Streams provide first-class support for console I/O via std::cin, std::cout, std::cerr, and std::clog. The C APIs do as well, but are hampered by the need to manually buffer the input. Stream formatting can be configured by mutating the state of the stream. Such mutations are persistent, so the behavior of your code can be affected by the entire previous history of the stream, unless you go out of your way to restore it to a known state every time other code might have touched it. User code can not only modify the built-in state, it can add new state variables and behaviors through a registration system. It is difficult to precisely control stream output, due to the above issues, the way code and data are mixed in streaming code, and the use of operator overloading (which may select a different overload than you expect). The practice of building up output through chains of << operators interferes with internationalization, because it bakes word order into the code, and streams' support for localization is flawed. The streams API is subtle and complex, so programmers must develop experience with it in order to use it effectively. However, streams were historically banned in Google code (except for logging and diagnostics), so Google engineers tend not to have that experience. Consequently, streams-based code is likely to be less readable and maintainable by Googlers than code based on more familiar abstractions. Resolving the many overloads of << is extremely costly for the compiler. When used pervasively in a large code base, it can consume as much as 20% of the parsing and semantic analysis time. Use streams only when they are the best tool for the job. This is typically the case when the I/O is ad-hoc, local, human-readable, and targeted at other developers rather than end-users. Be consistent with the code around you, and with the codebase as a whole; if there's an established tool for your problem, use that tool instead. Avoid using streams for I/O that faces external users or handles untrusted data. Instead, find and use the appropriate templating libraries to handle issues like internationalization, localization, and security hardening. If you do use streams, avoid the stateful parts of the streams API (other than error state), such as imbue(), xalloc(), and register_callback(). Use explicit formatting functions rather than stream manipulators or formatting flags to control formatting details such as number base, precision, or padding. Overload << as a streaming operator for your type only if your type represents a value, and << writes out a human-readable string representation of that value. Avoid exposing implementation details in the output of <<; if you need to print object internals for debugging, use named functions instead (a method named DebugString() is the most common convention). Preincrement and Predecrement Use prefix form (++i) of the increment and decrement operators with iterators and other template objects. When a variable is incremented (++i or i++) or decremented (--i or i--) and the value of the expression is not used, one must decide whether to preincrement (decrement) or postincrement (decrement). When the return value is ignored, the ""pre"" form (++i) is never less efficient than the ""post"" form (i++), and is often more efficient. This is because post-increment (or decrement) requires a copy of i to be made, which is the value of the expression. If i is an iterator or other non-scalar type, copying i could be expensive. Since the two types of increment behave the same when the value is ignored, why not just always pre-increment? The tradition developed, in C, of using post-increment when the expression value is not used, especially in for loops. Some find post-increment easier to read, since the ""subject"" (i) precedes the ""verb"" (++), just like in English. For simple scalar (non-object) values there is no reason to prefer one form and we allow either. For iterators and other template types, use pre-increment. Use of const Use const whenever it makes sense. With C++11, constexpr is a better choice for some uses of const. Declared variables and parameters can be preceded by the keyword const to indicate the variables are not changed (e.g., const int foo). Class functions can have the const qualifier to indicate the function does not change the state of the class member variables (e.g., class Foo { int Bar(char c) const; };). Easier for people to understand how variables are being used. Allows the compiler to do better type checking, and, conceivably, generate better code. Helps people convince themselves of program correctness because they know the functions they call are limited in how they can modify your variables. Helps people know what functions are safe to use without locks in multi-threaded programs. const is viral: if you pass a const variable to a function, that function must have const in its prototype (or the variable will need a const_cast). This can be a particular problem when calling library functions. const variables, data members, methods and arguments add a level of compile-time type checking; it is better to detect errors as soon as possible. Therefore we strongly recommend that you use const whenever it makes sense to do so: If a function guarantees that it will not modify an argument passed by reference or by pointer, the corresponding function parameter should be a reference-to-const (const T&) or pointer-to-const (const T*), respectively. Declare methods to be const whenever possible. Accessors should almost always be const. Other methods should be const if they do not modify any data members, do not call any non-const methods, and do not return a non-const pointer or non-const reference to a data member. Consider making data members const whenever they do not need to be modified after construction. The mutable keyword is allowed but is unsafe when used with threads, so thread safety should be carefully considered first. Where to put the const Some people favor the form int const *foo to const int* foo. They argue that this is more readable because it's more consistent: it keeps the rule that const always follows the object it's describing. However, this consistency argument doesn't apply in codebases with few deeply-nested pointer expressions since most const expressions have only one const, and it applies to the underlying value. In such cases, there's no consistency to maintain. Putting the const first is arguably more readable, since it follows English in putting the ""adjective"" (const) before the ""noun"" (int). That said, while we encourage putting const first, we do not require it. But be consistent with the code around you! Use of constexpr In C++11, use constexpr to define true constants or to ensure constant initialization. Some variables can be declared constexpr to indicate the variables are true constants, i.e. fixed at compilation/link time. Some functions and constructors can be declared constexpr which enables them to be used in defining a constexpr variable. Use of constexpr enables definition of constants with floating-point expressions rather than just literals; definition of constants of user-defined types; and definition of constants with function calls. Prematurely marking something as constexpr may cause migration problems if later on it has to be downgraded. Current restrictions on what is allowed in constexpr functions and constructors may invite obscure workarounds in these definitions. constexpr definitions enable a more robust specification of the constant parts of an interface. Use constexpr to specify true constants and the functions that support their definitions. Avoid complexifying function definitions to enable their use with constexpr. Do not use constexpr to force inlining. Integer Types Of the built-in C++ integer types, the only one used is int. If a program needs a variable of a different size, use a precise-width integer type from <stdint.h>, such as int16_t. If your variable represents a value that could ever be greater than or equal to 2^31 (2GiB), use a 64-bit type such as int64_t. Keep in mind that even if your value won't ever be too large for an int, it may be used in intermediate calculations which may require a larger type. When in doubt, choose a larger type. C++ does not specify the sizes of its integer types. Typically people assume that short is 16 bits, int is 32 bits, long is 32 bits and long long is 64 bits. Uniformity of declaration. The sizes of integral types in C++ can vary based on compiler and architecture. <stdint.h> defines types like int16_t, uint32_t, int64_t, etc. You should always use those in preference to short, unsigned long long and the like, when you need a guarantee on the size of an integer. Of the C integer types, only int should be used. When appropriate, you are welcome to use standard types like size_t and ptrdiff_t. We use int very often, for integers we know are not going to be too big, e.g., loop counters. Use plain old int for such things. You should assume that an int is at least 32 bits, but don't assume that it has more than 32 bits. If you need a 64-bit integer type, use int64_t or uint64_t. For integers we know can be ""big"", use int64_t. You should not use the unsigned integer types such as uint32_t, unless there is a valid reason such as representing a bit pattern rather than a number, or you need defined overflow modulo 2^N. In particular, do not use unsigned types to say a number will never be negative. Instead, use assertions for this. If your code is a container that returns a size, be sure to use a type that will accommodate any possible usage of your container. When in doubt, use a larger type rather than a smaller type. Use care when converting integer types. Integer conversions and promotions can cause non-intuitive behavior. On Unsigned Integers Some people, including some textbook authors, recommend using unsigned types to represent numbers that are never negative. This is intended as a form of self-documentation. However, in C, the advantages of such documentation are outweighed by the real bugs it can introduce. Consider: for (unsigned int i = foo.Length()-1; i >= 0; --i) ...  This code will never terminate! Sometimes gcc will notice this bug and warn you, but often it will not. Equally bad bugs can occur when comparing signed and unsigned variables. Basically, C's type-promotion scheme causes unsigned types to behave differently than one might expect. So, document that a variable is non-negative using assertions. Don't use an unsigned type. 64-bit Portability Code should be 64-bit and 32-bit friendly. Bear in mind problems of printing, comparisons, and structure alignment. printf() specifiers for some types are not cleanly portable between 32-bit and 64-bit systems. C99 defines some portable format specifiers. Unfortunately, MSVC 7.1 does not understand some of these specifiers and the standard is missing a few, so we have to define our own ugly versions in some cases (in the style of the standard include file inttypes.h): // printf macros for size_t, in the style of inttypes.h #ifdef _LP64 #define __PRIS_PREFIX ""z"" #else #define __PRIS_PREFIX #endif  // Use these macros after a % in a printf format string // to get correct 32/64 bit behavior, like this: // size_t size = records.size(); // printf(""%"" PRIuS ""\n"", size);  #define PRIdS __PRIS_PREFIX ""d"" #define PRIxS __PRIS_PREFIX ""x"" #define PRIuS __PRIS_PREFIX ""u"" #define PRIXS __PRIS_PREFIX ""X"" #define PRIoS __PRIS_PREFIX ""o""   Type DO NOT use DO use Notes void * (or any pointer) %lx %p int64_t %qd, %lld %"" PRId64 "" uint64_t %qu, %llu, %llx %"" PRIu64 "", %"" PRIx64 "" size_t %u %"" PRIuS "", %"" PRIxS "" C99 specifies %zu ptrdiff_t %d %"" PRIdS "" C99 specifies %td Note that the PRI* macros expand to independent strings which are concatenated by the compiler. Hence if you are using a non-constant format string, you need to insert the value of the macro into the format, rather than the name. Note also that spaces are required around the macro identifier to separate it from the string literal. It is still possible, as usual, to include length specifiers, etc., after the % when using the PRI* macros. So, e.g. printf(""x = %30"" PRIuS ""\n"", x) would expand on 32-bit Linux to printf(""x = %30"" ""u"" ""\n"", x), which the compiler will treat as printf(""x = %30u\n"", x). Remember that sizeof(void *) != sizeof(int). Use intptr_t if you want a pointer-sized integer. You may need to be careful with structure alignments, particularly for structures being stored on disk. Any class/structure with a int64_t/uint64_t member will by default end up being 8-byte aligned on a 64-bit system. If you have such structures being shared on disk between 32-bit and 64-bit code, you will need to ensure that they are packed the same on both architectures. Most compilers offer a way to alter structure alignment. For gcc, you can use __attribute__((packed)). MSVC offers #pragma pack() and __declspec(align()). Use the LL or ULL suffixes as needed to create 64-bit constants. For example: int64_t my_value = 0x123456789LL; uint64_t my_mask = 3ULL << 48;  Preprocessor Macros Be very cautious with macros. Prefer inline functions, enums, and const variables to macros. Don't use macros to define pieces of a C++ API. Macros mean that the code you see is not the same as the code the compiler sees. This can introduce unexpected behavior, especially since macros have global scope. The problems introduced by macros are especially severe when they are used to define pieces of a C++ API, and still more so for public APIs. Every error message from the compiler when developers incorrectly use that interface now must explain how the macros formed the interface. Refactoring and analysis tools have a dramatically harder time updating the interface. As a consequence, we specifically disallow using macros in this way. For example, avoid patterns like: class WOMBAT_TYPE(Foo) {   // ...   public:   EXPAND_PUBLIC_WOMBAT_API(Foo)    EXPAND_WOMBAT_COMPARISONS(Foo, ==, <) };  Luckily, macros are not nearly as necessary in C++ as they are in C. Instead of using a macro to inline performance-critical code, use an inline function. Instead of using a macro to store a constant, use a const variable. Instead of using a macro to ""abbreviate"" a long variable name, use a reference. Instead of using a macro to conditionally compile code ... well, don't do that at all (except, of course, for the #define guards to prevent double inclusion of header files). It makes testing much more difficult. Macros can do things these other techniques cannot, and you do see them in the codebase, especially in the lower-level libraries. And some of their special features (like stringifying, concatenation, and so forth) are not available through the language proper. But before using a macro, consider carefully whether there's a non-macro way to achieve the same result. If you need to use a macro to define an interface, contact your project leads to request a waiver of this rule. The following usage pattern will avoid many problems with macros; if you use macros, follow it whenever possible: Don't define macros in a .h file. #define macros right before you use them, and #undef them right after. Do not just #undef an existing macro before replacing it with your own; instead, pick a name that's likely to be unique. Try not to use macros that expand to unbalanced C++ constructs, or at least document that behavior well. Prefer not using ## to generate function/class/variable names. 0 and nullptr/NULL Use 0 for integers, 0.0 for reals, nullptr (or NULL) for pointers, and '\0' for chars. Use 0 for integers and 0.0 for reals. This is not controversial. For pointers (address values), there is a choice between 0, NULL, and nullptr. For projects that allow C++11 features, use nullptr. For C++03 projects, we prefer NULL because it looks like a pointer. In fact, some C++ compilers provide special definitions of NULL which enable them to give useful warnings, particularly in situations where sizeof(NULL) is not equal to sizeof(0). Use '\0' for chars. This is the correct type and also makes code more readable. sizeof Prefer sizeof(varname) to sizeof(type). Use sizeof(varname) when you take the size of a particular variable. sizeof(varname) will update appropriately if someone changes the variable type either now or later. You may use sizeof(type) for code unrelated to any particular variable, such as code that manages an external or internal data format where a variable of an appropriate C++ type is not convenient. Struct data; memset(&data, 0, sizeof(data));  memset(&data, 0, sizeof(Struct));  if (raw_size < sizeof(int)) {   LOG(ERROR) << ""compressed record not big enough for count: "" << raw_size;   return false; }  auto Use auto to avoid type names that are noisy, obvious, or unimportant - cases where the type doesn't aid in clarity for the reader. Continue to use manifest type declarations when it helps readability, and never use auto for anything but local variables. C++ type names can be long and cumbersome, especially when they involve templates or namespaces. When a C++ type name is repeated within a single declaration or a small code region, the repetition may not be aiding readability. It is sometimes safer to let the type be specified by the type of the initialization expression, since that avoids the possibility of unintended copies or type conversions. Sometimes code is clearer when types are manifest, especially when a variable's initialization depends on things that were declared far away. In expressions like: auto foo = x.add_foo(); auto i = y.Find(key);  It may not be obvious what the resulting types are if the type of y isn't very well known, or if y was declared many lines earlier. Programmers have to understand the difference between auto and const auto& or they'll get copies when they didn't mean to. If an auto variable is used as part of an interface, e.g. as a constant in a header, then a programmer might change its type while only intending to change its value, leading to a more radical API change than intended. auto is permitted, for local variables only, when it increases readability, particularly as described below. Do not use auto for file-scope or namespace-scope variables, or for class members. Never initialize an auto-typed variable with a braced initializer list. Specific cases where auto is allowed or encouraged: (Encouraged) For iterators and other long/cluttery type names, particularly when the type is clear from context (calls to find, begin, or end for instance). (Allowed) When the type is clear from local context (in the same expression or within a few lines). Initialization of a pointer or smart pointer with calls to new commonly falls into this category, as does use of auto in a range-based loop over a container whose type is spelled out nearby. (Allowed) When the type doesn't matter because it isn't being used for anything other than equality comparison. (Encouraged) When iterating over a map with a range-based loop (because it is often assumed that the correct type is pair<KeyType,ValueType> whereas it is actually pair<const KeyType,ValueType>). This is particularly well paired with local key and value aliases for .first and .second (often const-ref). for (const auto& item : some_map) {   const KeyType& key = item.first;   const ValType& value = item.second;   // The rest of the loop can now just refer to key and value,   // a reader can see the types in question, and we've avoided   // the too-common case of extra copies in this iteration. }  Braced Initializer List You may use braced initializer lists. In C++03, aggregate types (arrays and structs with no constructor) could be initialized with braced initializer lists. struct Point { int x; int y; }; Point p = {1, 2};  In C++11, this syntax was generalized, and any object type can now be created with a braced initializer list, known as a braced-init-list in the C++ grammar. Here are a few examples of its use. // Vector takes a braced-init-list of elements. vector<string> v{""foo"", ""bar""};  // Basically the same, ignoring some small technicalities. // You may choose to use either form. vector<string> v = {""foo"", ""bar""};  // Usable with 'new' expressions. auto p = new vector<string>{""foo"", ""bar""};  // A map can take a list of pairs. Nested braced-init-lists work. map<int, string> m = {{1, ""one""}, {2, ""2""}};  // A braced-init-list can be implicitly converted to a return type. vector<int> test_function() { return {1, 2, 3}; }  // Iterate over a braced-init-list. for (int i : {-1, -2, -3}) {}  // Call a function using a braced-init-list. void TestFunction2(vector<int> v) {} TestFunction2({1, 2, 3});  A user-defined type can also define a constructor and/or assignment operator that take std::initializer_list<T>, which is automatically created from braced-init-list: class MyType {  public:   // std::initializer_list references the underlying init list.   // It should be passed by value.   MyType(std::initializer_list<int> init_list) {     for (int i : init_list) append(i);   }   MyType& operator=(std::initializer_list<int> init_list) {     clear();     for (int i : init_list) append(i);   } }; MyType m{2, 3, 5, 7};  Finally, brace initialization can also call ordinary constructors of data types, even if they do not have std::initializer_list<T> constructors. double d{1.23}; // Calls ordinary constructor as long as MyOtherType has no // std::initializer_list constructor. class MyOtherType {  public:   explicit MyOtherType(string);   MyOtherType(int, string); }; MyOtherType m = {1, ""b""}; // If the constructor is explicit, you can't use the ""= {}"" form. MyOtherType m{""b""};  Never assign a braced-init-list to an auto local variable. In the single element case, what this means can be confusing. auto d = {1.23};        // d is a std::initializer_list<double>  auto d = double{1.23};  // Good -- d is a double, not a std::initializer_list.  See Braced_Initializer_List_Format for formatting. Lambda expressions Use lambda expressions where appropriate. Prefer explicit captures when the lambda will escape the current scope. Lambda expressions are a concise way of creating anonymous function objects. They're often useful when passing functions as arguments. For example: std::sort(v.begin(), v.end(), [](int x, int y) {   return Weight(x) < Weight(y); });  They further allow capturing variables from the enclosing scope either explicitly by name, or implicitly using a default capture. Explicit captures require each variable to be listed, as either a value or reference capture: int weight = 3; int sum = 0; // Captures `weight` by value and `sum` by reference. std::for_each(v.begin(), v.end(), [weight, &sum](int x) {   sum += weight * x; });  Default captures implicitly capture any variable referenced in the lambda body, including this if any members are used: const std::vector<int> lookup_table = ...; std::vector<int> indices = ...; // Captures `lookup_table` by reference, sorts `indices` by the value // of the associated element in `lookup_table`. std::sort(indices.begin(), indices.end(), [&](int a, int b) {   return lookup_table[a] < lookup_table[b]; });  Lambdas were introduced in C++11 along with a set of utilities for working with function objects, such as the polymorphic wrapper std::function. Lambdas are much more concise than other ways of defining function objects to be passed to STL algorithms, which can be a readability improvement. Appropriate use of default captures can remove redundancy and highlight important exceptions from the default. Lambdas, std::function, and std::bind can be used in combination as a general purpose callback mechanism; they make it easy to write functions that take bound functions as arguments. Variable capture in lambdas can be a source of dangling-pointer bugs, particularly if a lambda escapes the current scope. Default captures by value can be misleading because they do not prevent dangling-pointer bugs. Capturing a pointer by value doesn't cause a deep copy, so it often has the same lifetime issues as capture by reference. This is especially confusing when capturing 'this' by value, since the use of 'this' is often implicit. It's possible for use of lambdas to get out of hand; very long nested anonymous functions can make code harder to understand. Use lambda expressions where appropriate, with formatting as described below. Prefer explicit captures if the lambda may escape the current scope. For example, instead of: {   Foo foo;   ...   executor->Schedule([&] { Frobnicate(foo); })   ... } // BAD! The fact that the lambda makes use of a reference to `foo` and // possibly `this` (if `Frobnicate` is a member function) may not be // apparent on a cursory inspection. If the lambda is invoked after // the function returns, that would be bad, because both `foo` // and the enclosing object could have been destroyed.  prefer to write: {   Foo foo;   ...   executor->Schedule([&foo] { Frobnicate(foo); })   ... } // BETTER - The compile will fail if `Frobnicate` is a member // function, and it's clearer that `foo` is dangerously captured by // reference.  Use default capture by reference ([&]) only when the lifetime of the lambda is obviously shorter than any potential captures. Use default capture by value ([=]) only as a means of binding a few variables for a short lambda, where the set of captured variables is obvious at a glance. Prefer not to write long or complex lambdas with default capture by value. Keep unnamed lambdas short. If a lambda body is more than maybe five lines long, prefer to give the lambda a name, or to use a named function instead of a lambda. Specify the return type of the lambda explicitly if that will make it more obvious to readers, as with auto. Template metaprogramming Avoid complicated template programming. Template metaprogramming refers to a family of techniques that exploit the fact that the C++ template instantiation mechanism is Turing complete and can be used to perform arbitrary compile-time computation in the type domain. Template metaprogramming allows extremely flexible interfaces that are type safe and high performance. Facilities like Google Test, std::tuple, std::function, and Boost.Spirit would be impossible without it. The techniques used in template metaprogramming are often obscure to anyone but language experts. Code that uses templates in complicated ways is often unreadable, and is hard to debug or maintain. Template metaprogramming often leads to extremely poor compiler time error messages: even if an interface is simple, the complicated implementation details become visible when the user does something wrong. Template metaprogramming interferes with large scale refactoring by making the job of refactoring tools harder. First, the template code is expanded in multiple contexts, and it's hard to verify that the transformation makes sense in all of them. Second, some refactoring tools work with an AST that only represents the structure of the code after template expansion. It can be difficult to automatically work back to the original source construct that needs to be rewritten. Template metaprogramming sometimes allows cleaner and easier-to-use interfaces than would be possible without it, but it's also often a temptation to be overly clever. It's best used in a small number of low level components where the extra maintenance burden is spread out over a large number of uses. Think twice before using template metaprogramming or other complicated template techniques; think about whether the average member of your team will be able to understand your code well enough to maintain it after you switch to another project, or whether a non-C++ programmer or someone casually browsing the code base will be able to understand the error messages or trace the flow of a function they want to call. If you're using recursive template instantiations or type lists or metafunctions or expression templates, or relying on SFINAE or on the sizeof trick for detecting function overload resolution, then there's a good chance you've gone too far. If you use template metaprogramming, you should expect to put considerable effort into minimizing and isolating the complexity. You should hide metaprogramming as an implementation detail whenever possible, so that user-facing headers are readable, and you should make sure that tricky code is especially well commented. You should carefully document how the code is used, and you should say something about what the ""generated"" code looks like. Pay extra attention to the error messages that the compiler emits when users make mistakes. The error messages are part of your user interface, and your code should be tweaked as necessary so that the error messages are understandable and actionable from a user point of view. Boost Use only approved libraries from the Boost library collection. The Boost library collection is a popular collection of peer-reviewed, free, open-source C++ libraries. Boost code is generally very high-quality, is widely portable, and fills many important gaps in the C++ standard library, such as type traits and better binders. Some Boost libraries encourage coding practices which can hamper readability, such as metaprogramming and other advanced template techniques, and an excessively ""functional"" style of programming. In order to maintain a high level of readability for all contributors who might read and maintain code, we only allow an approved subset of Boost features. Currently, the following libraries are permitted: Call Traits from boost/call_traits.hpp Compressed Pair from boost/compressed_pair.hpp The Boost Graph Library (BGL) from boost/graph, except serialization (adj_list_serialize.hpp) and parallel/distributed algorithms and data structures (boost/graph/parallel/* and boost/graph/distributed/*). Property Map from boost/property_map, except parallel/distributed property maps (boost/property_map/parallel/*). Iterator from boost/iterator The part of Polygon that deals with Voronoi diagram construction and doesn't depend on the rest of Polygon: boost/polygon/voronoi_builder.hpp, boost/polygon/voronoi_diagram.hpp, and boost/polygon/voronoi_geometry_type.hpp Bimap from boost/bimap Statistical Distributions and Functions from boost/math/distributions Multi-index from boost/multi_index Heap from boost/heap The flat containers from Container: boost/container/flat_map, and boost/container/flat_set Intrusive from boost/intrusive. We are actively considering adding other Boost features to the list, so this list may be expanded in the future. The following libraries are permitted, but their use is discouraged because they've been superseded by standard libraries in C++11: Array from boost/array.hpp: use std::array instead. Pointer Container from boost/ptr_container: use containers of std::unique_ptr instead. std::hash Do not define specializations of std::hash. std::hash<T> is the function object that the C++11 hash containers use to hash keys of type T, unless the user explicitly specifies a different hash function. For example, std::unordered_map<int, string> is a hash map that uses std::hash<int> to hash its keys, whereas std::unordered_map<int, string, MyIntHash> uses MyIntHash. std::hash is defined for all integral, floating-point, pointer, and enum types, as well as some standard library types such as string and unique_ptr. Users can enable it to work for their own types by defining specializations of it for those types. std::hash is easy to use, and simplifies the code since you don't have to name it explicitly. Specializing std::hash is the standard way of specifying how to hash a type, so it's what outside resources will teach, and what new engineers will expect. std::hash is hard to specialize. It requires a lot of boilerplate code, and more importantly, it combines responsibility for identifying the hash inputs with responsibility for executing the hashing algorithm itself. The type author has to be responsible for the former, but the latter requires expertise that a type author usually doesn't have, and shouldn't need. The stakes here are high because low-quality hash functions can be security vulnerabilities, due to the emergence of hash flooding attacks. Even for experts, std::hash specializations are inordinately difficult to implement correctly for compound types, because the implementation cannot recursively call std::hash on data members. High-quality hash algorithms maintain large amounts of internal state, and reducing that state to the size_t bytes that std::hash returns is usually the slowest part of the computation, so it should not be done more than once. Due to exactly that issue, std::hash does not work with std::pair or std::tuple, and the language does not allow us to extend it to support them. You can use std::hash with the types that it supports ""out of the box"", but do not specialize it to support additional types. If you need a hash table with a key type that std::hash does not support, consider using legacy hash containers (e.g. hash_map) for now; they use a different default hasher, which is unaffected by this prohibition. If you want to use the standard hash containers anyway, you will need to specify a custom hasher for the key type, e.g. std::unordered_map<MyKeyType, Value, MyKeyTypeHasher> my_map;  Consult with the type's owners to see if there is an existing hasher that you can use; otherwise work with them to provide one, or roll your own. We are planning to provide a hash function that can work with any type, using a new customization mechanism that doesn't have the drawbacks of std::hash. C++11 Use libraries and language extensions from C++11 when appropriate. Consider portability to other environments before using C++11 features in your project. C++11 contains significant changes both to the language and libraries. C++11 was the official standard until august 2014, and is supported by most C++ compilers. It standardizes some common C++ extensions that we use already, allows shorthands for some operations, and has some performance and safety improvements. The C++11 standard is substantially more complex than its predecessor (1,300 pages versus 800 pages), and is unfamiliar to many developers. The long-term effects of some features on code readability and maintenance are unknown. We cannot predict when its various features will be implemented uniformly by tools that may be of interest, particularly in the case of projects that are forced to use older versions of tools. As with Boost, some C++11 extensions encourage coding practices that hamper readability—for example by removing checked redundancy (such as type names) that may be helpful to readers, or by encouraging template metaprogramming. Other extensions duplicate functionality available through existing mechanisms, which may lead to confusion and conversion costs. C++11 features may be used unless specified otherwise. In addition to what's described in the rest of the style guide, the following C++11 features may not be used: Compile-time rational numbers (<ratio>), because of concerns that it's tied to a more template-heavy interface style. The <cfenv> and <fenv.h> headers, because many compilers do not support those features reliably. Ref-qualifiers on member functions, such as void X::Foo() & or void X::Foo() &&, because of concerns that they're an overly obscure feature. Nonstandard Extensions Nonstandard extensions to C++ may not be used unless otherwise specified. Compilers support various extensions that are not part of standard C++. Such extensions include GCC's __attribute__, intrinsic functions such as __builtin_prefetch, designated initializers (e.g. Foo f = {.field = 3}), inline assembly, __COUNTER__, __PRETTY_FUNCTION__, compound statement expressions (e.g. foo = ({ int x; Bar(&x); x }), and the a?:b syntax. Nonstandard extensions may provide useful features that do not exist in standard C++. For example, some people think that designated initializers are more readable than standard C++ features like constructors. Important performance guidance to the compiler can only be specified using extensions. Nonstandard extensions do not work in all compilers. Use of nonstandard extensions reduces portability of code. Even if they are supported in all targeted compilers, the extensions are often not well-specified, and there may be subtle behavior differences between compilers. Nonstandard extensions add to the language features that a reader must know to understand the code. Do not use nonstandard extensions. You may use portability wrappers that are implemented using nonstandard extensions, so long as those wrappers are provided by a designated project-wide portability header. Aliases Public aliases are for the benefit of an API's user, and should be clearly documented. There are several ways to create names that are aliases of other entities: typedef Foo Bar; using Bar = Foo; using other_namespace::Foo;  Like other declarations, aliases declared in a header file are part of that header's public API unless they're in a function definition, in the private portion of a class, or in an explicitly-marked internal namespace. Aliases in such areas or in .cc files are implementation details (because client code can't refer to them), and are not restricted by this rule. Aliases can improve readability by simplifying a long or complicated name. Aliases can reduce duplication by naming in one place a type used repeatedly in an API, which might make it easier to change the type later. When placed in a header where client code can refer to them, aliases increase the number of entities in that header's API, increasing its complexity. Clients can easily rely on unintended details of public aliases, making changes difficult. It can be tempting to create a public alias that is only intended for use in the implementation, without considering its impact on the API, or on maintainability. Aliases can create risk of name collisions Aliases can reduce readability by giving a familiar construct an unfamiliar name Type aliases can create an unclear API contract: it is unclear whether the alias is guaranteed to be identical to the type it aliases, to have the same API, or only to be usable in specified narrow ways Don't put an alias in your public API just to save typing in the implementation; do so only if you intend it to be used by your clients. When defining a public alias, document the intent of the new name, including whether it is guaranteed to always be the same as the type it's currently aliased to, or whether a more limited compatibility is intended. This lets the user know whether they can treat the types as substitutable or whether more specific rules must be followed, and can help the implementation retain some degree of freedom to change the alias. Don't put namespace aliases in your public API. (See also Namespaces). For example, these aliases document how they are intended to be used in client code: namespace a { // Used to store field measurements. DataPoint may change from Bar* to some internal type. // Client code should treat it as an opaque pointer. using DataPoint = foo::bar::Bar*;  // A set of measurements. Just an alias for user convenience. using TimeSeries = std::unordered_set<DataPoint, std::hash<DataPoint>, DataPointComparator>; }  // namespace a  These aliases don't document intended use, and half of them aren't meant for client use: namespace a { // Bad: none of these say how they should be used. using DataPoint = foo::bar::Bar*; using std::unordered_set;  // Bad: just for local convenience using std::hash;           // Bad: just for local convenience typedef unordered_set<DataPoint, hash<DataPoint>, DataPointComparator> TimeSeries; }  // namespace a  However, local convenience aliases are fine in function definitions, private sections of classes, explicitly marked internal namespaces, and in .cc files: // In a .cc file using std::unordered_set;  Naming The most important consistency rules are those that govern naming. The style of a name immediately informs us what sort of thing the named entity is: a type, a variable, a function, a constant, a macro, etc., without requiring us to search for the declaration of that entity. The pattern-matching engine in our brains relies a great deal on these naming rules. Naming rules are pretty arbitrary, but we feel that consistency is more important than individual preferences in this area, so regardless of whether you find them sensible or not, the rules are the rules. General Naming Rules Names should be descriptive; avoid abbreviation. Give as descriptive a name as possible, within reason. Do not worry about saving horizontal space as it is far more important to make your code immediately understandable by a new reader. Do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word. int price_count_reader;    // No abbreviation. int num_errors;            // ""num"" is a widespread convention. int num_dns_connections;   // Most people know what ""DNS"" stands for.  int n;                     // Meaningless. int nerr;                  // Ambiguous abbreviation. int n_comp_conns;          // Ambiguous abbreviation. int wgc_connections;       // Only your group knows what this stands for. int pc_reader;             // Lots of things can be abbreviated ""pc"". int cstmr_id;              // Deletes internal letters.  File Names Filenames should be all lowercase and can include underscores (_) or dashes (-). Follow the convention that your project uses. If there is no consistent local pattern to follow, prefer ""_"". Examples of acceptable file names: my_useful_class.cc my-useful-class.cc myusefulclass.cc myusefulclass_test.cc // _unittest and _regtest are deprecated. C++ files should end in .cc and header files should end in .h. Files that rely on being textually included at specific points should end in .inc (see also the section on self-contained headers). Do not use filenames that already exist in /usr/include, such as db.h. In general, make your filenames very specific. For example, use http_server_logs.h rather than logs.h. A very common case is to have a pair of files called, e.g., foo_bar.h and foo_bar.cc, defining a class called FooBar. Inline functions must be in a .h file. If your inline functions are very short, they should go directly into your .h file. Type Names Type names start with a capital letter and have a capital letter for each new word, with no underscores: MyExcitingClass, MyExcitingEnum. The names of all types — classes, structs, type aliases, enums, and type template parameters — have the same naming convention. Type names should start with a capital letter and have a capital letter for each new word. No underscores. For example: // classes and structs class UrlTable { ... class UrlTableTester { ... struct UrlTableProperties { ...  // typedefs typedef hash_map<UrlTableProperties *, string> PropertiesMap;  // using aliases using PropertiesMap = hash_map<UrlTableProperties *, string>;  // enums enum UrlTableErrors { ...  Variable Names The names of variables and data members are all lowercase, with underscores between words. Data members of classes (but not structs) additionally have trailing underscores. For instance: a_local_variable, a_struct_data_member, a_class_data_member_. Common Variable names For example: string table_name;  // OK - uses underscore. string tablename;   // OK - all lowercase.  string tableName;   // Bad - mixed case.  Class Data Members Data members of classes, both static and non-static, are named like ordinary nonmember variables, but with a trailing underscore. class TableInfo {   ...  private:   string table_name_;  // OK - underscore at end.   string tablename_;   // OK.   static Pool<TableInfo>* pool_;  // OK. };  Struct Data Members Data members of structs, both static and non-static, are named like ordinary nonmember variables. They do not have the trailing underscores that data members in classes have. struct UrlTableProperties {   string name;   int num_entries;   static Pool<UrlTableProperties>* pool; };  See Structs vs. Classes for a discussion of when to use a struct versus a class. Constant Names Variables declared constexpr or const, and whose value is fixed for the duration of the program, are named with a leading ""k"" followed by mixed case. For example: const int kDaysInAWeek = 7;  All such variables with static storage duration (i.e. statics and globals, see Storage Duration for details) should be named this way. This convention is optional for variables of other storage classes, e.g. automatic variables, otherwise the usual variable naming rules apply. Function Names Regular functions have mixed case; ""cheap"" functions may use lower case with underscores. Ordinarily, functions should start with a capital letter and have a capital letter for each new word (a.k.a. ""upper camel case"" or ""Pascal case""). Such names should not have underscores. Prefer to capitalize acronyms as single words (i.e. StartRpc(), not StartRPC()). AddTableEntry() DeleteUrl() OpenFileOrDie()  (The same naming rule applies to class- and namespace-scope constants that are exposed as part of an API and that are intended to look like functions, because the fact that they're objects rather than functions is an unimportant implementation detail.) Functions that are very cheap to call may instead follow the style for variable names (all lower-case, with underscores between words). The rule of thumb is that such a function should be so cheap that you normally wouldn't bother caching its return value when calling it in a loop. A canonical example is an inline method that just returns one of the class's member variables. class MyClass {  public:   ...   bool is_empty() const { return num_entries_ == 0; }   private:   int num_entries_; };  Namespace Names Namespace names are all lower-case. Top-level namespace names are based on the project name . Avoid collisions between nested namespaces and well-known top-level namespaces. The name of a top-level namespace should usually be the name of the project or team whose code is contained in that namespace. The code in that namespace should usually be in a directory whose basename matches the namespace name (or subdirectories thereof). Keep in mind that the rule against abbreviated names applies to namespaces just as much as variable names. Code inside the namespace seldom needs to mention the namespace name, so there's usually no particular need for abbreviation anyway. Avoid nested namespaces that match well-known top-level namespaces. Collisions between namespace names can lead to surprising build breaks because of name lookup rules. In particular, do not create any nested std namespaces. Prefer unique project identifiers (websearch::index, websearch::index_util) over collision-prone names like websearch::util. For internal namespaces, be wary of other code being added to the same internal namespace causing a collision (internal helpers within a team tend to be related and may lead to collisions). In such a situation, using the filename to make a unique internal name is helpful (websearch::index::frobber_internal for use in frobber.h) Enumerator Names Enumerators (for both scoped and unscoped enums) should be named either like constants or like macros: either kEnumName or ENUM_NAME. Preferably, the individual enumerators should be named like constants. However, it is also acceptable to name them like macros. The enumeration name, UrlTableErrors (and AlternateUrlTableErrors), is a type, and therefore mixed case. enum UrlTableErrors {   kOK = 0,   kErrorOutOfMemory,   kErrorMalformedInput, }; enum AlternateUrlTableErrors {   OK = 0,   OUT_OF_MEMORY = 1,   MALFORMED_INPUT = 2, };  Until January 2009, the style was to name enum values like macros. This caused problems with name collisions between enum values and macros. Hence, the change to prefer constant-style naming was put in place. New code should prefer constant-style naming if possible. However, there is no reason to change old code to use constant-style names, unless the old names are actually causing a compile-time problem. Macro Names You're not really going to define a macro, are you? If you do, they're like this: MY_MACRO_THAT_SCARES_SMALL_CHILDREN. Please see the description of macros; in general macros should not be used. However, if they are absolutely needed, then they should be named with all capitals and underscores. #define ROUND(x) ... #define PI_ROUNDED 3.0  Exceptions to Naming Rules If you are naming something that is analogous to an existing C or C++ entity then you can follow the existing naming convention scheme. bigopen() function name, follows form of open() uint typedef bigpos struct or class, follows form of pos sparse_hash_map STL-like entity; follows STL naming conventions LONGLONG_MAX a constant, as in INT_MAX Comments Though a pain to write, comments are absolutely vital to keeping our code readable. The following rules describe what you should comment and where. But remember: while comments are very important, the best code is self-documenting. Giving sensible names to types and variables is much better than using obscure names that you must then explain through comments. When writing your comments, write for your audience: the next contributor who will need to understand your code. Be generous — the next one may be you! Comment Style Use either the // or /* */ syntax, as long as you are consistent. You can use either the // or the /* */ syntax; however, // is much more common. Be consistent with how you comment and what style you use where. File Comments Start each file with license boilerplate. File comments describe the contents of a file. If a file declares, implements, or tests exactly one abstraction that is documented by a comment at the point of declaration, file comments are not required. All other files must have file comments. Legal Notice and Author Line Every file should contain license boilerplate. Choose the appropriate boilerplate for the license used by the project (for example, Apache 2.0, BSD, LGPL, GPL). If you make significant changes to a file with an author line, consider deleting the author line. File Contents If a .h declares multiple abstractions, the file-level comment should broadly describe the contents of the file, and how the abstractions are related. A 1 or 2 sentence file-level comment may be sufficient. The detailed documentation about individual abstractions belongs with those abstractions, not at the file level. Do not duplicate comments in both the .h and the .cc. Duplicated comments diverge. Class Comments Every non-obvious class declaration should have an accompanying comment that describes what it is for and how it should be used. // Iterates over the contents of a GargantuanTable. // Example: //    GargantuanTableIterator* iter = table->NewIterator(); //    for (iter->Seek(""foo""); !iter->done(); iter->Next()) { //      process(iter->key(), iter->value()); //    } //    delete iter; class GargantuanTableIterator {   ... };  The class comment should provide the reader with enough information to know how and when to use the class, as well as any additional considerations necessary to correctly use the class. Document the synchronization assumptions the class makes, if any. If an instance of the class can be accessed by multiple threads, take extra care to document the rules and invariants surrounding multithreaded use. The class comment is often a good place for a small example code snippet demonstrating a simple and focused usage of the class. When sufficiently separated (e.g. .h and .cc files), comments describing the use of the class should go together with its interface definition; comments about the class operation and implementation should accompany the implementation of the class's methods. Function Comments Declaration comments describe use of the function (when it is non-obvious); comments at the definition of a function describe operation. Function Declarations Almost every function declaration should have comments immediately preceding it that describe what the function does and how to use it. These comments may be omitted only if the function is simple and obvious (e.g. simple accessors for obvious properties of the class). These comments should be descriptive (""Opens the file"") rather than imperative (""Open the file""); the comment describes the function, it does not tell the function what to do. In general, these comments do not describe how the function performs its task. Instead, that should be left to comments in the function definition. Types of things to mention in comments at the function declaration: What the inputs and outputs are. For class member functions: whether the object remembers reference arguments beyond the duration of the method call, and whether it will free them or not. If the function allocates memory that the caller must free. Whether any of the arguments can be a null pointer. If there are any performance implications of how a function is used. If the function is re-entrant. What are its synchronization assumptions? Here is an example: // Returns an iterator for this table.  It is the client's // responsibility to delete the iterator when it is done with it, // and it must not use the iterator once the GargantuanTable object // on which the iterator was created has been deleted. // // The iterator is initially positioned at the beginning of the table. // // This method is equivalent to: //    Iterator* iter = table->NewIterator(); //    iter->Seek(""""); //    return iter; // If you are going to immediately seek to another place in the // returned iterator, it will be faster to use NewIterator() // and avoid the extra seek. Iterator* GetIterator() const;  However, do not be unnecessarily verbose or state the completely obvious. Notice below that it is not necessary to say ""returns false otherwise"" because this is implied. // Returns true if the table cannot hold any more entries. bool IsTableFull();  When documenting function overrides, focus on the specifics of the override itself, rather than repeating the comment from the overriden function. In many of these cases, the override needs no additional documentation and thus no comment is required. When commenting constructors and destructors, remember that the person reading your code knows what constructors and destructors are for, so comments that just say something like ""destroys this object"" are not useful. Document what constructors do with their arguments (for example, if they take ownership of pointers), and what cleanup the destructor does. If this is trivial, just skip the comment. It is quite common for destructors not to have a header comment. Function Definitions If there is anything tricky about how a function does its job, the function definition should have an explanatory comment. For example, in the definition comment you might describe any coding tricks you use, give an overview of the steps you go through, or explain why you chose to implement the function in the way you did rather than using a viable alternative. For instance, you might mention why it must acquire a lock for the first half of the function but why it is not needed for the second half. Note you should not just repeat the comments given with the function declaration, in the .h file or wherever. It's okay to recapitulate briefly what the function does, but the focus of the comments should be on how it does it. Variable Comments In general the actual name of the variable should be descriptive enough to give a good idea of what the variable is used for. In certain cases, more comments are required. Class Data Members The purpose of each class data member (also called an instance variable or member variable) must be clear. If there are any invariants (special values, relationships between members, lifetime requirements) not clearly expressed by the type and name, they must be commented. However, if the type and name suffice (int num_events_;), no comment is needed. In particular, add comments to describe the existence and meaning of sentinel values, such as nullptr or -1, when they are not obvious. For example: private:  // Used to bounds-check table accesses. -1 means  // that we don't yet know how many entries the table has.  int num_total_entries_;  Global Variables All global variables should have a comment describing what they are, what they are used for, and (if unclear) why it needs to be global. For example: // The total number of tests cases that we run through in this regression test. const int kNumTestCases = 6;  Implementation Comments In your implementation you should have comments in tricky, non-obvious, interesting, or important parts of your code. Explanatory Comments Tricky or complicated code blocks should have comments before them. Example: // Divide result by two, taking into account that x // contains the carry from the add. for (int i = 0; i < result->size(); i++) {   x = (x << 8) + (*result)[i];   (*result)[i] = x >> 1;   x &= 1; }  Line Comments Also, lines that are non-obvious should get a comment at the end of the line. These end-of-line comments should be separated from the code by 2 spaces. Example: // If we have enough memory, mmap the data portion too. mmap_budget = max<int64>(0, mmap_budget - index_->length()); if (mmap_budget >= data_size_ && !MmapData(mmap_chunk_bytes, mlock))   return;  // Error already logged.  Note that there are both comments that describe what the code is doing, and comments that mention that an error has already been logged when the function returns. If you have several comments on subsequent lines, it can often be more readable to line them up: DoSomething();                  // Comment here so the comments line up. DoSomethingElseThatIsLonger();  // Two spaces between the code and the comment. { // One space before comment when opening a new scope is allowed,   // thus the comment lines up with the following comments and code.   DoSomethingElse();  // Two spaces before line comments normally. } vector<string> list{// Comments in braced lists describe the next element ..                     ""First item"",                     // .. and should be aligned appropriately.                     ""Second item""}; DoSomething(); /* For trailing block comments, one space is fine. */  Function Argument Comments When the meaning of a function argument is nonobvious, consider one of the following remedies: If the argument is a literal constant, and the same constant is used in multiple function calls in a way that tacitly assumes they're the same, you should use a named constant to make that constraint explicit, and to guarantee that it holds. Consider changing the function signature to replace a bool argument with an enum argument. This will make the argument values self-describing. For functions that have several configuration options, consider defining a single class or struct to hold all the options , and pass an instance of that. This approach has several advantages. Options are referenced by name at the call site, which clarifies their meaning. It also reduces function argument count, which makes function calls easier to read and write. As an added benefit, you don't have to change call sites when you add another option. Replace large or complex nested expressions with named variables. As a last resort, use comments to clarify argument meanings at the call site. Consider the following example: // What are these arguments? const DecimalNumber product = CalculateProduct(values, 7, false, nullptr);  versus: ProductOptions options; options.set_precision_decimals(7); options.set_use_cache(ProductOptions::kDontUseCache); const DecimalNumber product =     CalculateProduct(values, options, /*completion_callback=*/nullptr);  Don'ts Do not state the obvious. In particular, don't literally describe what code does, unless the behavior is nonobvious to a reader who understands C++ well. Instead, provide higher level comments that describe why the code does what it does, or make the code self describing. Compare this: // Find the element in the vector.  <-- Bad: obvious! auto iter = std::find(v.begin(), v.end(), element); if (iter != v.end()) {   Process(element); }  To this: // Process ""element"" unless it was already processed. auto iter = std::find(v.begin(), v.end(), element); if (iter != v.end()) {   Process(element); }  Self-describing code doesn't need a comment. The comment from the example above would be obvious: if (!IsAlreadyProcessed(element)) {   Process(element); }  Punctuation, Spelling and Grammar Pay attention to punctuation, spelling, and grammar; it is easier to read well-written comments than badly written ones. Comments should be as readable as narrative text, with proper capitalization and punctuation. In many cases, complete sentences are more readable than sentence fragments. Shorter comments, such as comments at the end of a line of code, can sometimes be less formal, but you should be consistent with your style. Although it can be frustrating to have a code reviewer point out that you are using a comma when you should be using a semicolon, it is very important that source code maintain a high level of clarity and readability. Proper punctuation, spelling, and grammar help with that goal. TODO Comments Use TODO comments for code that is temporary, a short-term solution, or good-enough but not perfect. TODOs should include the string TODO in all caps, followed by the name, e-mail address, bug ID, or other identifier of the person or issue with the best context about the problem referenced by the TODO. The main purpose is to have a consistent TODO that can be searched to find out how to get more details upon request. A TODO is not a commitment that the person referenced will fix the problem. Thus when you create a TODO with a name, it is almost always your name that is given. // TODO(kl@gmail.com): Use a ""*"" here for concatenation operator. // TODO(Zeke) change this to use relations. // TODO(bug 12345): remove the ""Last visitors"" feature  If your TODO is of the form ""At a future date do something"" make sure that you either include a very specific date (""Fix by November 2005"") or a very specific event (""Remove this code when all clients can handle XML responses.""). Deprecation Comments Mark deprecated interface points with DEPRECATED comments. You can mark an interface as deprecated by writing a comment containing the word DEPRECATED in all caps. The comment goes either before the declaration of the interface or on the same line as the declaration. After the word DEPRECATED, write your name, e-mail address, or other identifier in parentheses. A deprecation comment must include simple, clear directions for people to fix their callsites. In C++, you can implement a deprecated function as an inline function that calls the new interface point. Marking an interface point DEPRECATED will not magically cause any callsites to change. If you want people to actually stop using the deprecated facility, you will have to fix the callsites yourself or recruit a crew to help you. New code should not contain calls to deprecated interface points. Use the new interface point instead. If you cannot understand the directions, find the person who created the deprecation and ask them for help using the new interface point. Formatting Coding style and formatting are pretty arbitrary, but a project is much easier to follow if everyone uses the same style. Individuals may not agree with every aspect of the formatting rules, and some of the rules may take some getting used to, but it is important that all project contributors follow the style rules so that they can all read and understand everyone's code easily. To help you format code correctly, we've created a settings file for emacs. Line Length Each line of text in your code should be at most 80 characters long. We recognize that this rule is controversial, but so much existing code already adheres to it, and we feel that consistency is important. Those who favor this rule argue that it is rude to force them to resize their windows and there is no need for anything longer. Some folks are used to having several code windows side-by-side, and thus don't have room to widen their windows in any case. People set up their work environment assuming a particular maximum window width, and 80 columns has been the traditional standard. Why change it? Proponents of change argue that a wider line can make code more readable. The 80-column limit is an hidebound throwback to 1960s mainframes; modern equipment has wide screens that can easily show longer lines. 80 characters is the maximum. Comment lines can be longer than 80 characters if it is not feasible to split them without harming readability, ease of cut and paste or auto-linking -- e.g. if a line contains an example command or a literal URL longer than 80 characters. A raw-string literal may have content that exceeds 80 characters. Except for test code, such literals should appear near the top of a file. An #include statement with a long path may exceed 80 columns. You needn't be concerned about header guards that exceed the maximum length. Non-ASCII Characters Non-ASCII characters should be rare, and must use UTF-8 formatting. You shouldn't hard-code user-facing text in source, even English, so use of non-ASCII characters should be rare. However, in certain cases it is appropriate to include such words in your code. For example, if your code parses data files from foreign sources, it may be appropriate to hard-code the non-ASCII string(s) used in those data files as delimiters. More commonly, unittest code (which does not need to be localized) might contain non-ASCII strings. In such cases, you should use UTF-8, since that is an encoding understood by most tools able to handle more than just ASCII. Hex encoding is also OK, and encouraged where it enhances readability — for example, ""\xEF\xBB\xBF"", or, even more simply, u8""\uFEFF"", is the Unicode zero-width no-break space character, which would be invisible if included in the source as straight UTF-8. Use the u8 prefix to guarantee that a string literal containing \uXXXX escape sequences is encoded as UTF-8. Do not use it for strings containing non-ASCII characters encoded as UTF-8, because that will produce incorrect output if the compiler does not interpret the source file as UTF-8. You shouldn't use the C++11 char16_t and char32_t character types, since they're for non-UTF-8 text. For similar reasons you also shouldn't use wchar_t (unless you're writing code that interacts with the Windows API, which uses wchar_t extensively). Spaces vs. Tabs Use only spaces, and indent 2 spaces at a time. We use spaces for indentation. Do not use tabs in your code. You should set your editor to emit spaces when you hit the tab key. Function Declarations and Definitions Return type on the same line as function name, parameters on the same line if they fit. Wrap parameter lists which do not fit on a single line as you would wrap arguments in a function call. Functions look like this: ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) {   DoSomething();   ... }  If you have too much text to fit on one line: ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,                                              Type par_name3) {   DoSomething();   ... }  or if you cannot fit even the first parameter: ReturnType LongClassName::ReallyReallyReallyLongFunctionName(     Type par_name1,  // 4 space indent     Type par_name2,     Type par_name3) {   DoSomething();  // 2 space indent   ... }  Some points to note: Choose good parameter names. Parameter names may be omitted only if the parameter is unused and its purpose is obvious. If you cannot fit the return type and the function name on a single line, break between them. If you break after the return type of a function declaration or definition, do not indent. The open parenthesis is always on the same line as the function name. There is never a space between the function name and the open parenthesis. There is never a space between the parentheses and the parameters. The open curly brace is always on the end of the last line of the function declaration, not the start of the next line. The close curly brace is either on the last line by itself or on the same line as the open curly brace. There should be a space between the close parenthesis and the open curly brace. All parameters should be aligned if possible. Default indentation is 2 spaces. Wrapped parameters have a 4 space indent. Unused parameters that are obvious from context may be omitted: class Foo {  public:   Foo(Foo&&);   Foo(const Foo&);   Foo& operator=(Foo&&);   Foo& operator=(const Foo&); };  Unused parameters that might not be obvious should comment out the variable name in the function definition: class Shape {  public:   virtual void Rotate(double radians) = 0; };  class Circle : public Shape {  public:   void Rotate(double radians) override; };  void Circle::Rotate(double /*radians*/) {}  // Bad - if someone wants to implement later, it's not clear what the // variable means. void Circle::Rotate(double) {}  Attributes, and macros that expand to attributes, appear at the very beginning of the function declaration or definition, before the return type: MUST_USE_RESULT bool IsOK();  Lambda Expressions Format parameters and bodies as for any other function, and capture lists like other comma-separated lists. For by-reference captures, do not leave a space between the ampersand (&) and the variable name. int x = 0; auto add_to_x = [&x](int n) { x += n; };  Short lambdas may be written inline as function arguments. set<int> blacklist = {7, 8, 9}; vector<int> digits = {3, 9, 1, 8, 4, 7, 1}; digits.erase(std::remove_if(digits.begin(), digits.end(), [&blacklist](int i) {                return blacklist.find(i) != blacklist.end();              }),              digits.end());  Function Calls Either write the call all on a single line, wrap the arguments at the parenthesis, or start the arguments on a new line indented by four spaces and continue at that 4 space indent. In the absence of other considerations, use the minimum number of lines, including placing multiple arguments on each line where appropriate. Function calls have the following format: bool result = DoSomething(argument1, argument2, argument3);  If the arguments do not all fit on one line, they should be broken up onto multiple lines, with each subsequent line aligned with the first argument. Do not add spaces after the open paren or before the close paren: bool result = DoSomething(averyveryveryverylongargument1,                           argument2, argument3);  Arguments may optionally all be placed on subsequent lines with a four space indent: if (...) {   ...   ...   if (...) {     bool result = DoSomething(         argument1, argument2,  // 4 space indent         argument3, argument4);     ...   }  Put multiple arguments on a single line to reduce the number of lines necessary for calling a function unless there is a specific readability problem. Some find that formatting with strictly one argument on each line is more readable and simplifies editing of the arguments. However, we prioritize for the reader over the ease of editing arguments, and most readability problems are better addressed with the following techniques. If having multiple arguments in a single line decreases readability due to the complexity or confusing nature of the expressions that make up some arguments, try creating variables that capture those arguments in a descriptive name: int my_heuristic = scores[x] * y + bases[x]; bool result = DoSomething(my_heuristic, x, y, z);  Or put the confusing argument on its own line with an explanatory comment: bool result = DoSomething(scores[x] * y + bases[x],  // Score heuristic.                           x, y, z);  If there is still a case where one argument is significantly more readable on its own line, then put it on its own line. The decision should be specific to the argument which is made more readable rather than a general policy. Sometimes arguments form a structure that is important for readability. In those cases, feel free to format the arguments according to that structure: // Transform the widget by a 3x3 matrix. my_widget.Transform(x1, x2, x3,                     y1, y2, y3,                     z1, z2, z3);  Braced Initializer List Format Format a braced initializer list exactly like you would format a function call in its place. If the braced list follows a name (e.g. a type or variable name), format as if the {} were the parentheses of a function call with that name. If there is no name, assume a zero-length name. // Examples of braced init list on a single line. return {foo, bar}; functioncall({foo, bar}); pair<int, int> p{foo, bar};  // When you have to wrap. SomeFunction(     {""assume a zero-length name before {""},     some_other_function_parameter); SomeType variable{     some, other, values,     {""assume a zero-length name before {""},     SomeOtherType{         ""Very long string requiring the surrounding breaks."",         some, other values},     SomeOtherType{""Slightly shorter string"",                   some, other, values}}; SomeType variable{     ""This is too long to fit all in one line""}; MyType m = {  // Here, you could also break before {.     superlongvariablename1,     superlongvariablename2,     {short, interior, list},     {interiorwrappinglist,      interiorwrappinglist2}};  Conditionals Prefer no spaces inside parentheses. The if and else keywords belong on separate lines. There are two acceptable formats for a basic conditional statement. One includes spaces between the parentheses and the condition, and one does not. The most common form is without spaces. Either is fine, but be consistent. If you are modifying a file, use the format that is already present. If you are writing new code, use the format that the other files in that directory or project use. If in doubt and you have no personal preference, do not add the spaces. if (condition) {  // no spaces inside parentheses   ...  // 2 space indent. } else if (...) {  // The else goes on the same line as the closing brace.   ... } else {   ... }  If you prefer you may add spaces inside the parentheses: if ( condition ) {  // spaces inside parentheses - rare   ...  // 2 space indent. } else {  // The else goes on the same line as the closing brace.   ... }  Note that in all cases you must have a space between the if and the open parenthesis. You must also have a space between the close parenthesis and the curly brace, if you're using one. if(condition) {   // Bad - space missing after IF. if (condition){   // Bad - space missing before {. if(condition){    // Doubly bad.  if (condition) {  // Good - proper space after IF and before {.  Short conditional statements may be written on one line if this enhances readability. You may use this only when the line is brief and the statement does not use the else clause. if (x == kFoo) return new Foo(); if (x == kBar) return new Bar();  This is not allowed when the if statement has an else: // Not allowed - IF statement on one line when there is an ELSE clause if (x) DoThis(); else DoThat();  In general, curly braces are not required for single-line statements, but they are allowed if you like them; conditional or loop statements with complex conditions or statements may be more readable with curly braces. Some projects require that an if must always always have an accompanying brace. if (condition)   DoSomething();  // 2 space indent.  if (condition) {   DoSomething();  // 2 space indent. }  However, if one part of an if-else statement uses curly braces, the other part must too: // Not allowed - curly on IF but not ELSE if (condition) {   foo; } else   bar;  // Not allowed - curly on ELSE but not IF if (condition)   foo; else {   bar; }  // Curly braces around both IF and ELSE required because // one of the clauses used braces. if (condition) {   foo; } else {   bar; }  Loops and Switch Statements Switch statements may use braces for blocks. Annotate non-trivial fall-through between cases. Braces are optional for single-statement loops. Empty loop bodies should use {} or continue. case blocks in switch statements can have curly braces or not, depending on your preference. If you do include curly braces they should be placed as shown below. If not conditional on an enumerated value, switch statements should always have a default case (in the case of an enumerated value, the compiler will warn you if any values are not handled). If the default case should never execute, simply assert: switch (var) {   case 0: {  // 2 space indent     ...      // 4 space indent     break;   }   case 1: {     ...     break;   }   default: {     assert(false);   } }  Braces are optional for single-statement loops. for (int i = 0; i < kSomeNumber; ++i)   printf(""I love you\n"");  for (int i = 0; i < kSomeNumber; ++i) {   printf(""I take it back\n""); }  Empty loop bodies should use {} or continue, but not a single semicolon. while (condition) {   // Repeat test until it returns false. } for (int i = 0; i < kSomeNumber; ++i) {}  // Good - empty body. while (condition) continue;  // Good - continue indicates no logic.  while (condition);  // Bad - looks like part of do/while loop.  Pointer and Reference Expressions No spaces around period or arrow. Pointer operators do not have trailing spaces. The following are examples of correctly-formatted pointer and reference expressions: x = *p; p = &x; x = r.y; x = r->y;  Note that: There are no spaces around the period or arrow when accessing a member. Pointer operators have no space after the * or &. When declaring a pointer variable or argument, you may place the asterisk adjacent to either the type or to the variable name: // These are fine, space preceding. char *c; const string &str;  // These are fine, space following. char* c;    // but remember to do ""char* c, *d, *e, ...;""! const string& str;  char * c;  // Bad - spaces on both sides of * const string & str;  // Bad - spaces on both sides of &  You should do this consistently within a single file, so, when modifying an existing file, use the style in that file. Boolean Expressions When you have a boolean expression that is longer than the standard line length, be consistent in how you break up the lines. In this example, the logical AND operator is always at the end of the lines: if (this_one_thing > this_other_thing &&     a_third_thing == a_fourth_thing &&     yet_another && last_one) {   ... }  Note that when the code wraps in this example, both of the && logical AND operators are at the end of the line. This is more common in Google code, though wrapping all operators at the beginning of the line is also allowed. Feel free to insert extra parentheses judiciously because they can be very helpful in increasing readability when used appropriately. Also note that you should always use the punctuation operators, such as && and ~, rather than the word operators, such as and and compl. Return Values Do not needlessly surround the return expression with parentheses. Use parentheses in return expr; only where you would use them in x = expr;. return result;                  // No parentheses in the simple case. // Parentheses OK to make a complex expression more readable. return (some_long_condition &&         another_condition);  return (value);                // You wouldn't write var = (value); return(result);                // return is not a function!  Variable and Array Initialization Your choice of =, (), or {}. You may choose between =, (), and {}; the following are all correct: int x = 3; int x(3); int x{3}; string name = ""Some Name""; string name(""Some Name""); string name{""Some Name""};  Be careful when using a braced initialization list {...} on a type with an std::initializer_list constructor. A nonempty braced-init-list prefers the std::initializer_list constructor whenever possible. Note that empty braces {} are special, and will call a default constructor if available. To force the non-std::initializer_list constructor, use parentheses instead of braces. vector<int> v(100, 1);  // A vector of 100 1s. vector<int> v{100, 1};  // A vector of 100, 1.  Also, the brace form prevents narrowing of integral types. This can prevent some types of programming errors. int pi(3.14);  // OK -- pi == 3. int pi{3.14};  // Compile error: narrowing conversion.  Preprocessor Directives The hash mark that starts a preprocessor directive should always be at the beginning of the line. Even when preprocessor directives are within the body of indented code, the directives should start at the beginning of the line. // Good - directives at beginning of line   if (lopsided_score) { #if DISASTER_PENDING      // Correct -- Starts at beginning of line     DropEverything(); # if NOTIFY               // OK but not required -- Spaces after #     NotifyClient(); # endif #endif     BackToNormal();   }  // Bad - indented directives   if (lopsided_score) {     #if DISASTER_PENDING  // Wrong!  The ""#if"" should be at beginning of line     DropEverything();     #endif                // Wrong!  Do not indent ""#endif""     BackToNormal();   }  Class Format Sections in public, protected and private order, each indented one space. The basic format for a class definition (lacking the comments, see Class Comments for a discussion of what comments are needed) is: class MyClass : public OtherClass {  public:      // Note the 1 space indent!   MyClass();  // Regular 2 space indent.   explicit MyClass(int var);   ~MyClass() {}    void SomeFunction();   void SomeFunctionThatDoesNothing() {   }    void set_some_var(int var) { some_var_ = var; }   int some_var() const { return some_var_; }   private:   bool SomeInternalFunction();    int some_var_;   int some_other_var_; };  Things to note: Any base class name should be on the same line as the subclass name, subject to the 80-column limit. The public:, protected:, and private: keywords should be indented one space. Except for the first instance, these keywords should be preceded by a blank line. This rule is optional in small classes. Do not leave a blank line after these keywords. The public section should be first, followed by the protected and finally the private section. See Declaration Order for rules on ordering declarations within each of these sections. Constructor Initializer Lists Constructor initializer lists can be all on one line or with subsequent lines indented four spaces. The acceptable formats for initializer lists are: // When everything fits on one line: MyClass::MyClass(int var) : some_var_(var) {   DoSomething(); }  // If the signature and initializer list are not all on one line, // you must wrap before the colon and indent 4 spaces: MyClass::MyClass(int var)     : some_var_(var), some_other_var_(var + 1) {   DoSomething(); }  // When the list spans multiple lines, put each member on its own line // and align them: MyClass::MyClass(int var)     : some_var_(var),             // 4 space indent       some_other_var_(var + 1) {  // lined up   DoSomething(); }  // As with any other code block, the close curly can be on the same // line as the open curly, if it fits. MyClass::MyClass(int var)     : some_var_(var) {}  Namespace Formatting The contents of namespaces are not indented. Namespaces do not add an extra level of indentation. For example, use: namespace {  void foo() {  // Correct.  No extra indentation within namespace.   ... }  }  // namespace  Do not indent within a namespace: namespace {    // Wrong.  Indented when it should not be.   void foo() {     ...   }  }  // namespace  When declaring nested namespaces, put each namespace on its own line. namespace foo { namespace bar {  Horizontal Whitespace Use of horizontal whitespace depends on location. Never put trailing whitespace at the end of a line. General void f(bool b) {  // Open braces should always have a space before them.   ... int i = 0;  // Semicolons usually have no space before them. // Spaces inside braces for braced-init-list are optional.  If you use them, // put them on both sides! int x[] = { 0 }; int x[] = {0};  // Spaces around the colon in inheritance and initializer lists. class Foo : public Bar {  public:   // For inline function implementations, put spaces between the braces   // and the implementation itself.   Foo(int b) : Bar(), baz_(b) {}  // No spaces inside empty braces.   void Reset() { baz_ = 0; }  // Spaces separating braces from implementation.   ...  Adding trailing whitespace can cause extra work for others editing the same file, when they merge, as can removing existing trailing whitespace. So: Don't introduce trailing whitespace. Remove it if you're already changing that line, or do it in a separate clean-up operation (preferably when no-one else is working on the file). Loops and Conditionals if (b) {          // Space after the keyword in conditions and loops. } else {          // Spaces around else. } while (test) {}   // There is usually no space inside parentheses. switch (i) { for (int i = 0; i < 5; ++i) { // Loops and conditions may have spaces inside parentheses, but this // is rare.  Be consistent. switch ( i ) { if ( test ) { for ( int i = 0; i < 5; ++i ) { // For loops always have a space after the semicolon.  They may have a space // before the semicolon, but this is rare. for ( ; i < 5 ; ++i) {   ...  // Range-based for loops always have a space before and after the colon. for (auto x : counts) {   ... } switch (i) {   case 1:         // No space before colon in a switch case.     ...   case 2: break;  // Use a space after a colon if there's code after it.  Operators // Assignment operators always have spaces around them. x = 0;  // Other binary operators usually have spaces around them, but it's // OK to remove spaces around factors.  Parentheses should have no // internal padding. v = w * x + y / z; v = w*x + y/z; v = w * (x + z);  // No spaces separating unary operators and their arguments. x = -5; ++x; if (x && !y)   ...  Templates and Casts // No spaces inside the angle brackets (< and >), before // <, or between >( in a cast vector<string> x; y = static_cast<char*>(x);  // Spaces between type and pointer are OK, but be consistent. vector<char *> x; set<list<string>> x;        // Permitted in C++11 code. set<list<string> > x;       // C++03 required a space in > >.  // You may optionally use symmetric spacing in < <. set< list<string> > x;  Vertical Whitespace Minimize use of vertical whitespace. This is more a principle than a rule: don't use blank lines when you don't have to. In particular, don't put more than one or two blank lines between functions, resist starting functions with a blank line, don't end functions with a blank line, and be discriminating with your use of blank lines inside functions. The basic principle is: The more code that fits on one screen, the easier it is to follow and understand the control flow of the program. Of course, readability can suffer from code being too dense as well as too spread out, so use your judgement. But in general, minimize use of vertical whitespace. Some rules of thumb to help when blank lines may be useful: Blank lines at the beginning or end of a function very rarely help readability. Blank lines inside a chain of if-else blocks may well help readability. Exceptions to the Rules The coding conventions described above are mandatory. However, like all good rules, these sometimes have exceptions, which we discuss here. Existing Non-conformant Code You may diverge from the rules when dealing with code that does not conform to this style guide. If you find yourself modifying code that was written to specifications other than those presented by this guide, you may have to diverge from these rules in order to stay consistent with the local conventions in that code. If you are in doubt about how to do this, ask the original author or the person currently responsible for the code. Remember that consistency includes local consistency, too. Windows Code Windows programmers have developed their own set of coding conventions, mainly derived from the conventions in Windows headers and other Microsoft code. We want to make it easy for anyone to understand your code, so we have a single set of guidelines for everyone writing C++ on any platform. It is worth reiterating a few of the guidelines that you might forget if you are used to the prevalent Windows style: Do not use Hungarian notation (for example, naming an integer iNum). Use the Google naming conventions, including the .cc extension for source files. Windows defines many of its own synonyms for primitive types, such as DWORD, HANDLE, etc. It is perfectly acceptable, and encouraged, that you use these types when calling Windows API functions. Even so, keep as close as you can to the underlying C++ types. For example, use const TCHAR * instead of LPCTSTR. When compiling with Microsoft Visual C++, set the compiler to warning level 3 or higher, and treat all warnings as errors. Do not use #pragma once; instead use the standard Google include guards. The path in the include guards should be relative to the top of your project tree. In fact, do not use any nonstandard extensions, like #pragma and __declspec, unless you absolutely must. Using __declspec(dllimport) and __declspec(dllexport) is allowed; however, you must use them through macros such as DLLIMPORT and DLLEXPORT, so that someone can easily disable the extensions if they share the code. However, there are just a few rules that we occasionally need to break on Windows: Normally we forbid the use of multiple implementation inheritance; however, it is required when using COM and some ATL/WTL classes. You may use multiple implementation inheritance to implement COM or ATL/WTL classes and interfaces. Although you should not use exceptions in your own code, they are used extensively in the ATL and some STLs, including the one that comes with Visual C++. When using the ATL, you should define _ATL_NO_EXCEPTIONS to disable exceptions. You should investigate whether you can also disable exceptions in your STL, but if not, it is OK to turn on exceptions in the compiler. (Note that this is only to get the STL to compile. You should still not write exception handling code yourself.) The usual way of working with precompiled headers is to include a header file at the top of each source file, typically with a name like StdAfx.h or precompile.h. To make your code easier to share with other projects, avoid including this file explicitly (except in precompile.cc), and use the /FI compiler option to include the file automatically. Resource headers, which are usually named resource.h and contain only macros, do not need to conform to these style guidelines. Parting Words Use common sense and BE CONSISTENT. If you are editing code, take a few minutes to look at the code around you and determine its style. If they use spaces around their if clauses, you should, too. If their comments have little boxes of stars around them, make your comments have little boxes of stars around them too. The point of having style guidelines is to have a common vocabulary of coding so people can concentrate on what you are saying, rather than on how you are saying it. We present global style rules here so people know the vocabulary. But local style is also important. If code you add to a file looks drastically different from the existing code around it, the discontinuity throws readers out of their rhythm when they go to read it. Try to avoid this. OK, enough writing about writing code; the code itself is much more interesting. Have fun!"	"null"	"null"	""	"true"
"Coding Style"	"GNU Coding Standard"	"http://www.gnu.org/prep/standards/standards.html"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GNU Coding Standards GNU Coding Standards Table of Contents 1 About the GNU Coding Standards 2 Keeping Free Software Free 2.1 Referring to Proprietary Programs 2.2 Accepting Contributions 2.3 Trademarks 3 General Program Design 3.1 Which Languages to Use 3.2 Compatibility with Other Implementations 3.3 Using Non-standard Features 3.4 Standard C and Pre-Standard C 3.5 Conditional Compilation 4 Program Behavior for All Programs 4.1 Non-GNU Standards 4.2 Writing Robust Programs 4.3 Library Behavior 4.4 Formatting Error Messages 4.5 Standards for Interfaces Generally 4.6 Standards for Graphical Interfaces 4.7 Standards for Command Line Interfaces 4.7.1 --version 4.7.2 --help 4.8 Standards for Dynamic Plug-in Interfaces 4.9 Table of Long Options 4.10 OID Allocations 4.11 Memory Usage 4.12 File Usage 5 Making The Best Use of C 5.1 Formatting Your Source Code 5.2 Commenting Your Work 5.3 Clean Use of C Constructs 5.4 Naming Variables, Functions, and Files 5.5 Portability between System Types 5.6 Portability between CPUs 5.7 Calling System Functions 5.8 Internationalization 5.9 Character Set 5.10 Quote Characters 5.11 Mmap 6 Documenting Programs 6.1 GNU Manuals 6.2 Doc Strings and Manuals 6.3 Manual Structure Details 6.4 License for Manuals 6.5 Manual Credits 6.6 Printed Manuals 6.7 The NEWS File 6.8 Change Logs 6.8.1 Change Log Concepts 6.8.2 Style of Change Logs 6.8.3 Simple Changes 6.8.4 Conditional Changes 6.8.5 Indicating the Part Changed 6.9 Man Pages 6.10 Reading other Manuals 7 The Release Process 7.1 How Configuration Should Work 7.2 Makefile Conventions 7.2.1 General Conventions for Makefiles 7.2.2 Utilities in Makefiles 7.2.3 Variables for Specifying Commands 7.2.4 DESTDIR: Support for Staged Installs 7.2.5 Variables for Installation Directories 7.2.6 Standard Targets for Users 7.2.7 Install Command Categories 7.3 Making Releases 8 References to Non-Free Software and Documentation Appendix A GNU Free Documentation License Index Next: Preface, Up: (dir)   [Contents][Index] GNU Coding Standards The GNU coding standards, last updated April 13, 2016. Copyright © 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016 Free Software Foundation, Inc. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled “GNU Free Documentation License”. • Preface:    About the GNU Coding Standards. • Legal Issues:    Keeping free software free. • Design Advice:    General program design. • Program Behavior:    Program behavior for all programs • Writing C:    Making the best use of C. • Documentation:    Documenting programs. • Managing Releases:    The release process. • References:    Mentioning non-free software or documentation. • GNU Free Documentation License:    Copying and sharing this manual. • Index:       Next: Legal Issues, Previous: Top, Up: Top   [Contents][Index] 1 About the GNU Coding Standards The GNU Coding Standards were written by Richard Stallman and other GNU Project volunteers. Their purpose is to make the GNU system clean, consistent, and easy to install. This document can also be read as a guide to writing portable, robust and reliable programs. It focuses on programs written in C, but many of the rules and principles are useful even if you write in another programming language. The rules often state reasons for writing in a certain way. If you did not obtain this file directly from the GNU project and recently, please check for a newer version. You can get the GNU Coding Standards from the GNU web server in many different formats, including the Texinfo source, PDF, HTML, DVI, plain text, and more, at: http://www.gnu.org/prep/standards/. If you are maintaining an official GNU package, in addition to this document, please read and follow the GNU maintainer information (see Contents in Information for Maintainers of GNU Software). If you want to receive diffs for every change to these GNU documents, join the mailing list gnustandards-commit@gnu.org, via the web interface at http://lists.gnu.org/mailman/listinfo/gnustandards-commit. Archives are also available there. Please send corrections or suggestions for this document to bug-standards@gnu.org. If you make a suggestion, please include a suggested new wording for it, to help us consider the suggestion efficiently. We prefer a context diff to the Texinfo source, but if that’s difficult for you, you can make a context diff for some other version of this document, or propose it in any way that makes it clear. The source repository for this document can be found at http://savannah.gnu.org/projects/gnustandards. These standards cover the minimum of what is important when writing a GNU package. Likely, the need for additional standards will come up. Sometimes, you might suggest that such standards be added to this document. If you think your standards would be generally useful, please do suggest them. You should also set standards for your package on many questions not addressed or not firmly specified here. The most important point is to be self-consistent—try to stick to the conventions you pick, and try to document them as much as possible. That way, your program will be more maintainable by others. The GNU Hello program serves as an example of how to follow the GNU coding standards for a trivial program. http://www.gnu.org/software/hello/hello.html. This release of the GNU Coding Standards was last updated April 13, 2016. Next: Design Advice, Previous: Preface, Up: Top   [Contents][Index] 2 Keeping Free Software Free This chapter discusses how you can make sure that GNU software avoids legal difficulties, and other related issues. • Reading Non-Free Code:    Referring to proprietary programs. • Contributions:    Accepting contributions. • Trademarks:    How we deal with trademark issues. Next: Contributions, Up: Legal Issues   [Contents][Index] 2.1 Referring to Proprietary Programs Don’t in any circumstances refer to Unix source code for or during your work on GNU! (Or to any other proprietary programs.) If you have a vague recollection of the internals of a Unix program, this does not absolutely mean you can’t write an imitation of it, but do try to organize the imitation internally along different lines, because this is likely to make the details of the Unix version irrelevant and dissimilar to your results. For example, Unix utilities were generally optimized to minimize memory use; if you go for speed instead, your program will be very different. You could keep the entire input file in memory and scan it there instead of using stdio. Use a smarter algorithm discovered more recently than the Unix program. Eliminate use of temporary files. Do it in one pass instead of two (we did this in the assembler). Or, on the contrary, emphasize simplicity instead of speed. For some applications, the speed of today’s computers makes simpler algorithms adequate. Or go for generality. For example, Unix programs often have static tables or fixed-size strings, which make for arbitrary limits; use dynamic allocation instead. Make sure your program handles NULs and other funny characters in the input files. Add a programming language for extensibility and write part of the program in that language. Or turn some parts of the program into independently usable libraries. Or use a simple garbage collector instead of tracking precisely when to free memory, or use a new GNU facility such as obstacks. Next: Trademarks, Previous: Reading Non-Free Code, Up: Legal Issues   [Contents][Index] 2.2 Accepting Contributions If the program you are working on is copyrighted by the Free Software Foundation, then when someone else sends you a piece of code to add to the program, we need legal papers to use it—just as we asked you to sign papers initially. Each person who makes a nontrivial contribution to a program must sign some sort of legal papers in order for us to have clear title to the program; the main author alone is not enough. So, before adding in any contributions from other people, please tell us, so we can arrange to get the papers. Then wait until we tell you that we have received the signed papers, before you actually use the contribution. This applies both before you release the program and afterward. If you receive diffs to fix a bug, and they make significant changes, we need legal papers for that change. This also applies to comments and documentation files. For copyright law, comments and code are just text. Copyright applies to all kinds of text, so we need legal papers for all kinds. We know it is frustrating to ask for legal papers; it’s frustrating for us as well. But if you don’t wait, you are going out on a limb—for example, what if the contributor’s employer won’t sign a disclaimer? You might have to take that code out again! You don’t need papers for changes of a few lines here or there, since they are not significant for copyright purposes. Also, you don’t need papers if all you get from the suggestion is some ideas, not actual code which you use. For example, if someone sent you one implementation, but you write a different implementation of the same idea, you don’t need to get papers. The very worst thing is if you forget to tell us about the other contributor. We could be very embarrassed in court some day as a result. We have more detailed advice for maintainers of GNU packages. If you have reached the stage of maintaining a GNU program (whether released or not), please take a look: see Legal Matters in Information for GNU Maintainers. Previous: Contributions, Up: Legal Issues   [Contents][Index] 2.3 Trademarks Please do not include any trademark acknowledgements in GNU software packages or documentation. Trademark acknowledgements are the statements that such-and-such is a trademark of so-and-so. The GNU Project has no objection to the basic idea of trademarks, but these acknowledgements feel like kowtowing, and there is no legal requirement for them, so we don’t use them. What is legally required, as regards other people’s trademarks, is to avoid using them in ways which a reader might reasonably understand as naming or labeling our own programs or activities. For example, since “Objective C” is (or at least was) a trademark, we made sure to say that we provide a “compiler for the Objective C language” rather than an “Objective C compiler”. The latter would have been meant as a shorter way of saying the former, but it does not explicitly state the relationship, so it could be misinterpreted as using “Objective C” as a label for the compiler rather than for the language. Please don’t use “win” as an abbreviation for Microsoft Windows in GNU software or documentation. In hacker terminology, calling something a “win” is a form of praise. If you wish to praise Microsoft Windows when speaking on your own, by all means do so, but not in GNU software. Usually we write the name “Windows” in full, but when brevity is very important (as in file names and sometimes symbol names), we abbreviate it to “w”. For instance, the files and functions in Emacs that deal with Windows start with ‘w32’. Next: Program Behavior, Previous: Legal Issues, Up: Top   [Contents][Index] 3 General Program Design This chapter discusses some of the issues you should take into account when designing your program. • Source Language:    Which languages to use. • Compatibility:    Compatibility with other implementations. • Using Extensions:    Using non-standard features. • Standard C:    Using standard C features. • Conditional Compilation:    Compiling code only if a conditional is true. Next: Compatibility, Up: Design Advice   [Contents][Index] 3.1 Which Languages to Use When you want to use a language that gets compiled and runs at high speed, the best language to use is C. C++ is ok too, but please don’t make heavy use of templates. So is Java, if you compile it. When highest efficiency is not required, other languages commonly used in the free software community, such as Lisp, Scheme, Python, Ruby, and Java, are OK too. Scheme, as implemented by GNU Guile, plays a particular role in the GNU System: it is the preferred language to extend programs written in C/C++, and also a fine language for a wide range of applications. The more GNU components use Guile and Scheme, the more users are able to extend and combine them (see The Emacs Thesis in GNU Guile Reference Manual). Many programs are designed to be extensible: they include an interpreter for a language that is higher level than C. Often much of the program is written in that language, too. The Emacs editor pioneered this technique. The standard extensibility interpreter for GNU software is Guile (http://www.gnu.org/software/guile/), which implements the language Scheme (an especially clean and simple dialect of Lisp). Guile also includes bindings for GTK+/GNOME, making it practical to write modern GUI functionality within Guile. We don’t reject programs written in other “scripting languages” such as Perl and Python, but using Guile is the path that will lead to overall consistency of the GNU system. Next: Using Extensions, Previous: Source Language, Up: Design Advice   [Contents][Index] 3.2 Compatibility with Other Implementations With occasional exceptions, utility programs and libraries for GNU should be upward compatible with those in Berkeley Unix, and upward compatible with Standard C if Standard C specifies their behavior, and upward compatible with POSIX if POSIX specifies their behavior. When these standards conflict, it is useful to offer compatibility modes for each of them. Standard C and POSIX prohibit many kinds of extensions. Feel free to make the extensions anyway, and include a ‘--ansi’, ‘--posix’, or ‘--compatible’ option to turn them off. However, if the extension has a significant chance of breaking any real programs or scripts, then it is not really upward compatible. So you should try to redesign its interface to make it upward compatible. Many GNU programs suppress extensions that conflict with POSIX if the environment variable POSIXLY_CORRECT is defined (even if it is defined with a null value). Please make your program recognize this variable if appropriate. When a feature is used only by users (not by programs or command files), and it is done poorly in Unix, feel free to replace it completely with something totally different and better. (For example, vi is replaced with Emacs.) But it is nice to offer a compatible feature as well. (There is a free vi clone, so we offer it.) Additional useful features are welcome regardless of whether there is any precedent for them. Next: Standard C, Previous: Compatibility, Up: Design Advice   [Contents][Index] 3.3 Using Non-standard Features Many GNU facilities that already exist support a number of convenient extensions over the comparable Unix facilities. Whether to use these extensions in implementing your program is a difficult question. On the one hand, using the extensions can make a cleaner program. On the other hand, people will not be able to build the program unless the other GNU tools are available. This might cause the program to work on fewer kinds of machines. With some extensions, it might be easy to provide both alternatives. For example, you can define functions with a “keyword” INLINE and define that as a macro to expand into either inline or nothing, depending on the compiler. In general, perhaps it is best not to use the extensions if you can straightforwardly do without them, but to use the extensions if they are a big improvement. An exception to this rule are the large, established programs (such as Emacs) which run on a great variety of systems. Using GNU extensions in such programs would make many users unhappy, so we don’t do that. Another exception is for programs that are used as part of compilation: anything that must be compiled with other compilers in order to bootstrap the GNU compilation facilities. If these require the GNU compiler, then no one can compile them without having them installed already. That would be extremely troublesome in certain cases. Next: Conditional Compilation, Previous: Using Extensions, Up: Design Advice   [Contents][Index] 3.4 Standard C and Pre-Standard C 1989 Standard C is widespread enough now that it is ok to use its features in programs. There is one exception: do not ever use the “trigraph” feature of Standard C. The 1999 and 2011 editions of Standard C are not fully supported on all platforms. If you aim to support compilation by compilers other than GCC, you should not require these C features in your programs. It is ok to use these features conditionally when the compiler supports them. If your program is only meant to compile with GCC, then you can use these features if GCC supports them, when they give substantial benefit. However, it is easy to support pre-standard compilers in most programs, so if you know how to do that, feel free. To support pre-standard C, instead of writing function definitions in standard prototype form, int foo (int x, int y) …  write the definition in pre-standard style like this, int foo (x, y)      int x, y; …  and use a separate declaration to specify the argument prototype: int foo (int, int);  You need such a declaration anyway, in a header file, to get the benefit of prototypes in all the files where the function is called. And once you have the declaration, you normally lose nothing by writing the function definition in the pre-standard style. This technique does not work for integer types narrower than int. If you think of an argument as being of a type narrower than int, declare it as int instead. There are a few special cases where this technique is hard to use. For example, if a function argument needs to hold the system type dev_t, you run into trouble, because dev_t is shorter than int on some machines; but you cannot use int instead, because dev_t is wider than int on some machines. There is no type you can safely use on all machines in a non-standard definition. The only way to support non-standard C and pass such an argument is to check the width of dev_t using Autoconf and choose the argument type accordingly. This may not be worth the trouble. In order to support pre-standard compilers that do not recognize prototypes, you may want to use a preprocessor macro like this: /* Declare the prototype for a general external function.  */ #if defined (__STDC__) || defined (WINDOWSNT) #define P_(proto) proto #else #define P_(proto) () #endif  Previous: Standard C, Up: Design Advice   [Contents][Index] 3.5 Conditional Compilation When supporting configuration options already known when building your program we prefer using if (... ) over conditional compilation, as in the former case the compiler is able to perform more extensive checking of all possible code paths. For example, please write   if (HAS_FOO)     ...   else     ...  instead of:   #ifdef HAS_FOO     ...   #else     ...   #endif  A modern compiler such as GCC will generate exactly the same code in both cases, and we have been using similar techniques with good success in several projects. Of course, the former method assumes that HAS_FOO is defined as either 0 or 1. While this is not a silver bullet solving all portability problems, and is not always appropriate, following this policy would have saved GCC developers many hours, or even days, per year. In the case of function-like macros like REVERSIBLE_CC_MODE in GCC which cannot be simply used in if (...) statements, there is an easy workaround. Simply introduce another macro HAS_REVERSIBLE_CC_MODE as in the following example:   #ifdef REVERSIBLE_CC_MODE   #define HAS_REVERSIBLE_CC_MODE 1   #else   #define HAS_REVERSIBLE_CC_MODE 0   #endif  Next: Writing C, Previous: Design Advice, Up: Top   [Contents][Index] 4 Program Behavior for All Programs This chapter describes conventions for writing robust software. It also describes general standards for error messages, the command line interface, and how libraries should behave. • Non-GNU Standards:    We consider standards such as POSIX; we don’t ""obey"" them. • Semantics:    Writing robust programs. • Libraries:    Library behavior. • Errors:    Formatting error messages. • User Interfaces:    Standards about interfaces generally. • Graphical Interfaces:    Standards for graphical interfaces. • Command-Line Interfaces:    Standards for command line interfaces. • Dynamic Plug-In Interfaces:    Standards for dynamic plug-in interfaces. • Option Table:    Table of long options. • OID Allocations:    Table of OID slots for GNU. • Memory Usage:    When and how to care about memory needs. • File Usage:    Which files to use, and where. Next: Semantics, Up: Program Behavior   [Contents][Index] 4.1 Non-GNU Standards The GNU Project regards standards published by other organizations as suggestions, not orders. We consider those standards, but we do not “obey” them. In developing a GNU program, you should implement an outside standard’s specifications when that makes the GNU system better overall in an objective sense. When it doesn’t, you shouldn’t. In most cases, following published standards is convenient for users—it means that their programs or scripts will work more portably. For instance, GCC implements nearly all the features of Standard C as specified by that standard. C program developers would be unhappy if it did not. And GNU utilities mostly follow specifications of POSIX.2; shell script writers and users would be unhappy if our programs were incompatible. But we do not follow either of these specifications rigidly, and there are specific points on which we decided not to follow them, so as to make the GNU system better for users. For instance, Standard C says that nearly all extensions to C are prohibited. How silly! GCC implements many extensions, some of which were later adopted as part of the standard. If you want these constructs to give an error message as “required” by the standard, you must specify ‘--pedantic’, which was implemented only so that we can say “GCC is a 100% implementation of the standard”, not because there is any reason to actually use it. POSIX.2 specifies that ‘df’ and ‘du’ must output sizes by default in units of 512 bytes. What users want is units of 1k, so that is what we do by default. If you want the ridiculous behavior “required” by POSIX, you must set the environment variable ‘POSIXLY_CORRECT’ (which was originally going to be named ‘POSIX_ME_HARDER’). GNU utilities also depart from the letter of the POSIX.2 specification when they support long-named command-line options, and intermixing options with ordinary arguments. This minor incompatibility with POSIX is never a problem in practice, and it is very useful. In particular, don’t reject a new feature, or remove an old one, merely because a standard says it is “forbidden” or “deprecated”. Next: Libraries, Previous: Non-GNU Standards, Up: Program Behavior   [Contents][Index] 4.2 Writing Robust Programs Avoid arbitrary limits on the length or number of any data structure, including file names, lines, files, and symbols, by allocating all data structures dynamically. In most Unix utilities, “long lines are silently truncated”. This is not acceptable in a GNU utility. Utilities reading files should not drop NUL characters, or any other nonprinting characters including those with codes above 0177. The only sensible exceptions would be utilities specifically intended for interface to certain types of terminals or printers that can’t handle those characters. Whenever possible, try to make programs work properly with sequences of bytes that represent multibyte characters; UTF-8 is the most important. Check every system call for an error return, unless you know you wish to ignore errors. Include the system error text (from perror, strerror, or equivalent) in every error message resulting from a failing system call, as well as the name of the file if any and the name of the utility. Just “cannot open foo.c” or “stat failed” is not sufficient. Check every call to malloc or realloc to see if it returned zero. Check realloc even if you are making the block smaller; in a system that rounds block sizes to a power of 2, realloc may get a different block if you ask for less space. In Unix, realloc can destroy the storage block if it returns zero. GNU realloc does not have this bug: if it fails, the original block is unchanged. Feel free to assume the bug is fixed. If you wish to run your program on Unix, and wish to avoid lossage in this case, you can use the GNU malloc. You must expect free to alter the contents of the block that was freed. Anything you want to fetch from the block, you must fetch before calling free. If malloc fails in a noninteractive program, make that a fatal error. In an interactive program (one that reads commands from the user), it is better to abort the command and return to the command reader loop. This allows the user to kill other processes to free up virtual memory, and then try the command again. Use getopt_long to decode arguments, unless the argument syntax makes this unreasonable. When static storage is to be written in during program execution, use explicit C code to initialize it. Reserve C initialized declarations for data that will not be changed. Try to avoid low-level interfaces to obscure Unix data structures (such as file directories, utmp, or the layout of kernel memory), since these are less likely to work compatibly. If you need to find all the files in a directory, use readdir or some other high-level interface. These are supported compatibly by GNU. The preferred signal handling facilities are the BSD variant of signal, and the POSIX sigaction function; the alternative USG signal interface is an inferior design. Nowadays, using the POSIX signal functions may be the easiest way to make a program portable. If you use signal, then on GNU/Linux systems running GNU libc version 1, you should include bsd/signal.h instead of signal.h, so as to get BSD behavior. It is up to you whether to support systems where signal has only the USG behavior, or give up on them. In error checks that detect “impossible” conditions, just abort. There is usually no point in printing any message. These checks indicate the existence of bugs. Whoever wants to fix the bugs will have to read the source code and run a debugger. So explain the problem with comments in the source. The relevant data will be in variables, which are easy to examine with the debugger, so there is no point moving them elsewhere. Do not use a count of errors as the exit status for a program. That does not work, because exit status values are limited to 8 bits (0 through 255). A single run of the program might have 256 errors; if you try to return 256 as the exit status, the parent process will see 0 as the status, and it will appear that the program succeeded. If you make temporary files, check the TMPDIR environment variable; if that variable is defined, use the specified directory instead of /tmp. In addition, be aware that there is a possible security problem when creating temporary files in world-writable directories. In C, you can avoid this problem by creating temporary files in this manner: fd = open (filename, O_WRONLY | O_CREAT | O_EXCL, 0600);  or by using the mkstemps function from Gnulib (see mkstemps in Gnulib). In bash, use set -C (long name noclobber) to avoid this problem. In addition, the mktemp utility is a more general solution for creating temporary files from shell scripts (see mktemp invocation in GNU Coreutils). Next: Errors, Previous: Semantics, Up: Program Behavior   [Contents][Index] 4.3 Library Behavior Try to make library functions reentrant. If they need to do dynamic storage allocation, at least try to avoid any nonreentrancy aside from that of malloc itself. Here are certain name conventions for libraries, to avoid name conflicts. Choose a name prefix for the library, more than two characters long. All external function and variable names should start with this prefix. In addition, there should only be one of these in any given library member. This usually means putting each one in a separate source file. An exception can be made when two external symbols are always used together, so that no reasonable program could use one without the other; then they can both go in the same file. External symbols that are not documented entry points for the user should have names beginning with ‘_’. The ‘_’ should be followed by the chosen name prefix for the library, to prevent collisions with other libraries. These can go in the same files with user entry points if you like. Static functions and variables can be used as you like and need not fit any naming convention. Next: User Interfaces, Previous: Libraries, Up: Program Behavior   [Contents][Index] 4.4 Formatting Error Messages Error messages from compilers should look like this: sourcefile:lineno: message  If you want to mention the column number, use one of these formats: sourcefile:lineno:column: message sourcefile:lineno.column: message   Line numbers should start from 1 at the beginning of the file, and column numbers should start from 1 at the beginning of the line. (Both of these conventions are chosen for compatibility.) Calculate column numbers assuming that space and all ASCII printing characters have equal width, and assuming tab stops every 8 columns. For non-ASCII characters, Unicode character widths should be used when in a UTF-8 locale; GNU libc and GNU gnulib provide suitable wcwidth functions. The error message can also give both the starting and ending positions of the erroneous text. There are several formats so that you can avoid redundant information such as a duplicate line number. Here are the possible formats: sourcefile:line1.column1-line2.column2: message sourcefile:line1.column1-column2: message sourcefile:line1-line2: message  When an error is spread over several files, you can use this format: file1:line1.column1-file2:line2.column2: message  Error messages from other noninteractive programs should look like this: program:sourcefile:lineno: message  when there is an appropriate source file, or like this: program: message  when there is no relevant source file. If you want to mention the column number, use this format: program:sourcefile:lineno:column: message  In an interactive program (one that is reading commands from a terminal), it is better not to include the program name in an error message. The place to indicate which program is running is in the prompt or with the screen layout. (When the same program runs with input from a source other than a terminal, it is not interactive and would do best to print error messages using the noninteractive style.) The string message should not begin with a capital letter when it follows a program name and/or file name, because that isn’t the beginning of a sentence. (The sentence conceptually starts at the beginning of the line.) Also, it should not end with a period. Error messages from interactive programs, and other messages such as usage messages, should start with a capital letter. But they should not end with a period. Next: Graphical Interfaces, Previous: Errors, Up: Program Behavior   [Contents][Index] 4.5 Standards for Interfaces Generally Please don’t make the behavior of a utility depend on the name used to invoke it. It is useful sometimes to make a link to a utility with a different name, and that should not change what it does. Instead, use a run time option or a compilation switch or both to select among the alternate behaviors. You can also build two versions of the program, with different names and different default behaviors. Likewise, please don’t make the behavior of a command-line program depend on the type of output device it gets as standard output or standard input. Device independence is an important principle of the system’s design; do not compromise it merely to save someone from typing an option now and then. (Variation in error message syntax when using a terminal is ok, because that is a side issue that people do not depend on.) If you think one behavior is most useful when the output is to a terminal, and another is most useful when the output is a file or a pipe, then it is usually best to make the default behavior the one that is useful with output to a terminal, and have an option for the other behavior. You can also build two different versions of the program with different names. There is an exception for programs whose output in certain cases is binary data. Sending such output to a terminal is useless and can cause trouble. If such a program normally sends its output to stdout, it should detect, in these cases, when the output is a terminal and give an error message instead. The -f option should override this exception, thus permitting the output to go to the terminal. Compatibility requires certain programs to depend on the type of output device. It would be disastrous if ls or sh did not do so in the way all users expect. In some of these cases, we supplement the program with a preferred alternate version that does not depend on the output device type. For example, we provide a dir program much like ls except that its default output format is always multi-column format. Next: Command-Line Interfaces, Previous: User Interfaces, Up: Program Behavior   [Contents][Index] 4.6 Standards for Graphical Interfaces When you write a program that provides a graphical user interface, please make it work with the X Window System, using the GTK+ toolkit or the GNUstep toolkit, unless the functionality specifically requires some alternative (for example, “displaying jpeg images while in console mode”). In addition, please provide a command-line interface to control the functionality. (In many cases, the graphical user interface can be a separate program which invokes the command-line program.) This is so that the same jobs can be done from scripts. Please also consider providing a D-bus interface for use from other running programs, such as within GNOME. (GNOME used to use CORBA for this, but that is being phased out.) In addition, consider providing a library interface (for use from C), and perhaps a keyboard-driven console interface (for use by users from console mode). Once you are doing the work to provide the functionality and the graphical interface, these won’t be much extra work. Please make your program interoperate with access technology such as screen readers (see http://www.gnu.org/accessibility/accessibility.html). This should be automatic if you use GTK+. Next: Dynamic Plug-In Interfaces, Previous: Graphical Interfaces, Up: Program Behavior   [Contents][Index] 4.7 Standards for Command Line Interfaces It is a good idea to follow the POSIX guidelines for the command-line options of a program. The easiest way to do this is to use getopt to parse them. Note that the GNU version of getopt will normally permit options anywhere among the arguments unless the special argument ‘--’ is used. This is not what POSIX specifies; it is a GNU extension. Please define long-named options that are equivalent to the single-letter Unix-style options. We hope to make GNU more user friendly this way. This is easy to do with the GNU function getopt_long. One of the advantages of long-named options is that they can be consistent from program to program. For example, users should be able to expect the “verbose” option of any GNU program which has one, to be spelled precisely ‘--verbose’. To achieve this uniformity, look at the table of common long-option names when you choose the option names for your program (see Option Table). It is usually a good idea for file names given as ordinary arguments to be input files only; any output files would be specified using options (preferably ‘-o’ or ‘--output’). Even if you allow an output file name as an ordinary argument for compatibility, try to provide an option as another way to specify it. This will lead to more consistency among GNU utilities, and fewer idiosyncrasies for users to remember. All programs should support two standard options: ‘--version’ and ‘--help’. CGI programs should accept these as command-line options, and also if given as the PATH_INFO; for instance, visiting ‘http://example.org/p.cgi/--help’ in a browser should output the same information as invoking ‘p.cgi --help’ from the command line. • --version:    The standard output for –version. • --help:    The standard output for –help. Next: --help, Up: Command-Line Interfaces   [Contents][Index] 4.7.1 --version The standard --version option should direct the program to print information about its name, version, origin and legal status, all on standard output, and then exit successfully. Other options and arguments should be ignored once this is seen, and the program should not perform its normal function. The first line is meant to be easy for a program to parse; the version number proper starts after the last space. In addition, it contains the canonical name for this program, in this format: GNU Emacs 19.30  The program’s name should be a constant string; don’t compute it from argv[0]. The idea is to state the standard or canonical name for the program, not its file name. There are other ways to find out the precise file name where a command is found in PATH. If the program is a subsidiary part of a larger package, mention the package name in parentheses, like this: emacsserver (GNU Emacs) 19.30  If the package has a version number which is different from this program’s version number, you can mention the package version number just before the close-parenthesis. If you need to mention the version numbers of libraries which are distributed separately from the package which contains this program, you can do so by printing an additional line of version info for each library you want to mention. Use the same format for these lines as for the first line. Please do not mention all of the libraries that the program uses “just for completeness”—that would produce a lot of unhelpful clutter. Please mention library version numbers only if you find in practice that they are very important to you in debugging. The following line, after the version number line or lines, should be a copyright notice. If more than one copyright notice is called for, put each on a separate line. Next should follow a line stating the license, preferably using one of abbreviations below, and a brief statement that the program is free software, and that users are free to copy and change it. Also mention that there is no warranty, to the extent permitted by law. See recommended wording below. It is ok to finish the output with a list of the major authors of the program, as a way of giving credit. Here’s an example of output that follows these rules: GNU hello 2.3 Copyright (C) 2007 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.  You should adapt this to your program, of course, filling in the proper year, copyright holder, name of program, and the references to distribution terms, and changing the rest of the wording as necessary. This copyright notice only needs to mention the most recent year in which changes were made—there’s no need to list the years for previous versions’ changes. You don’t have to mention the name of the program in these notices, if that is inconvenient, since it appeared in the first line. (The rules are different for copyright notices in source files; see Copyright Notices in Information for GNU Maintainers.) Translations of the above lines must preserve the validity of the copyright notices (see Internationalization). If the translation’s character set supports it, the ‘(C)’ should be replaced with the copyright symbol, as follows: © Write the word “Copyright” exactly like that, in English. Do not translate it into another language. International treaties recognize the English word “Copyright”; translations into other languages do not have legal significance. Finally, here is the table of our suggested license abbreviations. Any abbreviation can be followed by ‘vversion[+]’, meaning that particular version, or later versions with the ‘+’, as shown above. In the case of a GNU license, always indicate the permitted versions in this way. In the case of exceptions for extra permissions with the GPL, we use ‘/’ for a separator; the version number can follow the license abbreviation as usual, as in the examples below. GPL GNU General Public License, http://www.gnu.org/licenses/gpl.html. LGPL GNU Lesser General Public License, http://www.gnu.org/licenses/lgpl.html. GPL/Ada GNU GPL with the exception for Ada. Apache The Apache Software Foundation license, http://www.apache.org/licenses. Artistic The Artistic license used for Perl, http://dev.perl.org/licenses/artistic.html. Expat The Expat license, http://www.jclark.com/xml/copying.txt. MPL The Mozilla Public License, http://www.mozilla.org/MPL/. OBSD The original (4-clause) BSD license, incompatible with the GNU GPL http://www.xfree86.org/3.3.6/COPYRIGHT2.html#6. PHP The license used for PHP, http://www.php.net/license/. public domain The non-license that is being in the public domain, http://www.gnu.org/licenses/license-list.html#PublicDomain. Python The license for Python, http://directory.fsf.org/wiki?title=License:Python2.0.1. RBSD The revised (3-clause) BSD, compatible with the GNU GPL, http://www.xfree86.org/3.3.6/COPYRIGHT2.html#5. X11 The simple non-copyleft license used for most versions of the X Window System, http://www.xfree86.org/3.3.6/COPYRIGHT2.html#3. Zlib The license for Zlib, http://www.gzip.org/zlib/zlib_license.html. More information about these licenses and many more are on the GNU licensing web pages, http://www.gnu.org/licenses/license-list.html. Previous: --version, Up: Command-Line Interfaces   [Contents][Index] 4.7.2 --help The standard --help option should output brief documentation for how to invoke the program, on standard output, then exit successfully. Other options and arguments should be ignored once this is seen, and the program should not perform its normal function. Near the end of the ‘--help’ option’s output, please place lines giving the email address for bug reports, the package’s home page (normally ‘http://www.gnu.org/software/pkg’, and the general page for help using GNU programs. The format should be like this: Report bugs to: mailing-address pkg home page: <http://www.gnu.org/software/pkg/> General help using GNU software: <http://www.gnu.org/gethelp/>  It is ok to mention other appropriate mailing lists and web pages. Next: Option Table, Previous: Command-Line Interfaces, Up: Program Behavior   [Contents][Index] 4.8 Standards for Dynamic Plug-in Interfaces Another aspect of keeping free programs free is encouraging development of free plug-ins, and discouraging development of proprietary plug-ins. Many GNU programs will not have anything like plug-ins at all, but those that do should follow these practices. First, the general plug-in architecture design should closely tie the plug-in to the original code, such that the plug-in and the base program are parts of one extended program. For GCC, for example, plug-ins receive and modify GCC’s internal data structures, and so clearly form an extended program with the base GCC. Second, you should require plug-in developers to affirm that their plug-ins are released under an appropriate license. This should be enforced with a simple programmatic check. For GCC, again for example, a plug-in must define the global symbol plugin_is_GPL_compatible, thus asserting that the plug-in is released under a GPL-compatible license (see Plugins in GCC Internals). By adding this check to your program you are not creating a new legal requirement. The GPL itself requires plug-ins to be free software, licensed compatibly. As long as you have followed the first rule above to keep plug-ins closely tied to your original program, the GPL and AGPL already require those plug-ins to be released under a compatible license. The symbol definition in the plug-in—or whatever equivalent works best in your program—makes it harder for anyone who might distribute proprietary plug-ins to legally defend themselves. If a case about this got to court, we can point to that symbol as evidence that the plug-in developer understood that the license had this requirement. Next: OID Allocations, Previous: Dynamic Plug-In Interfaces, Up: Program Behavior   [Contents][Index] 4.9 Table of Long Options Here is a table of long options used by GNU programs. It is surely incomplete, but we aim to list all the options that a new program might want to be compatible with. If you use names not already in the table, please send bug-standards@gnu.org a list of them, with their meanings, so we can update the table. ‘after-date’ ‘-N’ in tar. ‘all’ ‘-a’ in du, ls, nm, stty, uname, and unexpand. ‘all-text’ ‘-a’ in diff. ‘almost-all’ ‘-A’ in ls. ‘append’ ‘-a’ in etags, tee, time; ‘-r’ in tar. ‘archive’ ‘-a’ in cp. ‘archive-name’ ‘-n’ in shar. ‘arglength’ ‘-l’ in m4. ‘ascii’ ‘-a’ in diff. ‘assign’ ‘-v’ in gawk. ‘assume-new’ ‘-W’ in make. ‘assume-old’ ‘-o’ in make. ‘auto-check’ ‘-a’ in recode. ‘auto-pager’ ‘-a’ in wdiff. ‘auto-reference’ ‘-A’ in ptx. ‘avoid-wraps’ ‘-n’ in wdiff. ‘background’ For server programs, run in the background. ‘backward-search’ ‘-B’ in ctags. ‘basename’ ‘-f’ in shar. ‘batch’ Used in GDB. ‘baud’ Used in GDB. ‘before’ ‘-b’ in tac. ‘binary’ ‘-b’ in cpio and diff. ‘bits-per-code’ ‘-b’ in shar. ‘block-size’ Used in cpio and tar. ‘blocks’ ‘-b’ in head and tail. ‘break-file’ ‘-b’ in ptx. ‘brief’ Used in various programs to make output shorter. ‘bytes’ ‘-c’ in head, split, and tail. ‘c++’ ‘-C’ in etags. ‘catenate’ ‘-A’ in tar. ‘cd’ Used in various programs to specify the directory to use. ‘changes’ ‘-c’ in chgrp and chown. ‘classify’ ‘-F’ in ls. ‘colons’ ‘-c’ in recode. ‘command’ ‘-c’ in su; ‘-x’ in GDB. ‘compare’ ‘-d’ in tar. ‘compat’ Used in gawk. ‘compress’ ‘-Z’ in tar and shar. ‘concatenate’ ‘-A’ in tar. ‘confirmation’ ‘-w’ in tar. ‘context’ Used in diff. ‘copyleft’ ‘-W copyleft’ in gawk. ‘copyright’ ‘-C’ in ptx, recode, and wdiff; ‘-W copyright’ in gawk. ‘core’ Used in GDB. ‘count’ ‘-q’ in who. ‘count-links’ ‘-l’ in du. ‘create’ Used in tar and cpio. ‘cut-mark’ ‘-c’ in shar. ‘cxref’ ‘-x’ in ctags. ‘date’ ‘-d’ in touch. ‘debug’ ‘-d’ in make and m4; ‘-t’ in Bison. ‘define’ ‘-D’ in m4. ‘defines’ ‘-d’ in Bison and ctags. ‘delete’ ‘-D’ in tar. ‘dereference’ ‘-L’ in chgrp, chown, cpio, du, ls, and tar. ‘dereference-args’ ‘-D’ in du. ‘device’ Specify an I/O device (special file name). ‘diacritics’ ‘-d’ in recode. ‘dictionary-order’ ‘-d’ in look. ‘diff’ ‘-d’ in tar. ‘digits’ ‘-n’ in csplit. ‘directory’ Specify the directory to use, in various programs. In ls, it means to show directories themselves rather than their contents. In rm and ln, it means to not treat links to directories specially. ‘discard-all’ ‘-x’ in strip. ‘discard-locals’ ‘-X’ in strip. ‘dry-run’ ‘-n’ in make. ‘ed’ ‘-e’ in diff. ‘elide-empty-files’ ‘-z’ in csplit. ‘end-delete’ ‘-x’ in wdiff. ‘end-insert’ ‘-z’ in wdiff. ‘entire-new-file’ ‘-N’ in diff. ‘environment-overrides’ ‘-e’ in make. ‘eof’ ‘-e’ in xargs. ‘epoch’ Used in GDB. ‘error-limit’ Used in makeinfo. ‘error-output’ ‘-o’ in m4. ‘escape’ ‘-b’ in ls. ‘exclude-from’ ‘-X’ in tar. ‘exec’ Used in GDB. ‘exit’ ‘-x’ in xargs. ‘exit-0’ ‘-e’ in unshar. ‘expand-tabs’ ‘-t’ in diff. ‘expression’ ‘-e’ in sed. ‘extern-only’ ‘-g’ in nm. ‘extract’ ‘-i’ in cpio; ‘-x’ in tar. ‘faces’ ‘-f’ in finger. ‘fast’ ‘-f’ in su. ‘fatal-warnings’ ‘-E’ in m4. ‘file’ ‘-f’ in gawk, info, make, mt, sed, and tar. ‘field-separator’ ‘-F’ in gawk. ‘file-prefix’ ‘-b’ in Bison. ‘file-type’ ‘-F’ in ls. ‘files-from’ ‘-T’ in tar. ‘fill-column’ Used in makeinfo. ‘flag-truncation’ ‘-F’ in ptx. ‘fixed-output-files’ ‘-y’ in Bison. ‘follow’ ‘-f’ in tail. ‘footnote-style’ Used in makeinfo. ‘force’ ‘-f’ in cp, ln, mv, and rm. ‘force-prefix’ ‘-F’ in shar. ‘foreground’ For server programs, run in the foreground; in other words, don’t do anything special to run the server in the background. ‘format’ Used in ls, time, and ptx. ‘freeze-state’ ‘-F’ in m4. ‘fullname’ Used in GDB. ‘gap-size’ ‘-g’ in ptx. ‘get’ ‘-x’ in tar. ‘graphic’ ‘-i’ in ul. ‘graphics’ ‘-g’ in recode. ‘group’ ‘-g’ in install. ‘gzip’ ‘-z’ in tar and shar. ‘hashsize’ ‘-H’ in m4. ‘header’ ‘-h’ in objdump and recode ‘heading’ ‘-H’ in who. ‘help’ Used to ask for brief usage information. ‘here-delimiter’ ‘-d’ in shar. ‘hide-control-chars’ ‘-q’ in ls. ‘html’ In makeinfo, output HTML. ‘idle’ ‘-u’ in who. ‘ifdef’ ‘-D’ in diff. ‘ignore’ ‘-I’ in ls; ‘-x’ in recode. ‘ignore-all-space’ ‘-w’ in diff. ‘ignore-backups’ ‘-B’ in ls. ‘ignore-blank-lines’ ‘-B’ in diff. ‘ignore-case’ ‘-f’ in look and ptx; ‘-i’ in diff and wdiff. ‘ignore-errors’ ‘-i’ in make. ‘ignore-file’ ‘-i’ in ptx. ‘ignore-indentation’ ‘-I’ in etags. ‘ignore-init-file’ ‘-f’ in Oleo. ‘ignore-interrupts’ ‘-i’ in tee. ‘ignore-matching-lines’ ‘-I’ in diff. ‘ignore-space-change’ ‘-b’ in diff. ‘ignore-zeros’ ‘-i’ in tar. ‘include’ ‘-i’ in etags; ‘-I’ in m4. ‘include-dir’ ‘-I’ in make. ‘incremental’ ‘-G’ in tar. ‘info’ ‘-i’, ‘-l’, and ‘-m’ in Finger. ‘init-file’ In some programs, specify the name of the file to read as the user’s init file. ‘initial’ ‘-i’ in expand. ‘initial-tab’ ‘-T’ in diff. ‘inode’ ‘-i’ in ls. ‘interactive’ ‘-i’ in cp, ln, mv, rm; ‘-e’ in m4; ‘-p’ in xargs; ‘-w’ in tar. ‘intermix-type’ ‘-p’ in shar. ‘iso-8601’ Used in date ‘jobs’ ‘-j’ in make. ‘just-print’ ‘-n’ in make. ‘keep-going’ ‘-k’ in make. ‘keep-files’ ‘-k’ in csplit. ‘kilobytes’ ‘-k’ in du and ls. ‘language’ ‘-l’ in etags. ‘less-mode’ ‘-l’ in wdiff. ‘level-for-gzip’ ‘-g’ in shar. ‘line-bytes’ ‘-C’ in split. ‘lines’ Used in split, head, and tail. ‘link’ ‘-l’ in cpio. ‘lint’ ‘lint-old’ Used in gawk. ‘list’ ‘-t’ in cpio; ‘-l’ in recode. ‘list’ ‘-t’ in tar. ‘literal’ ‘-N’ in ls. ‘load-average’ ‘-l’ in make. ‘login’ Used in su. ‘machine’ Used in uname. ‘macro-name’ ‘-M’ in ptx. ‘mail’ ‘-m’ in hello and uname. ‘make-directories’ ‘-d’ in cpio. ‘makefile’ ‘-f’ in make. ‘mapped’ Used in GDB. ‘max-args’ ‘-n’ in xargs. ‘max-chars’ ‘-n’ in xargs. ‘max-lines’ ‘-l’ in xargs. ‘max-load’ ‘-l’ in make. ‘max-procs’ ‘-P’ in xargs. ‘mesg’ ‘-T’ in who. ‘message’ ‘-T’ in who. ‘minimal’ ‘-d’ in diff. ‘mixed-uuencode’ ‘-M’ in shar. ‘mode’ ‘-m’ in install, mkdir, and mkfifo. ‘modification-time’ ‘-m’ in tar. ‘multi-volume’ ‘-M’ in tar. ‘name-prefix’ ‘-a’ in Bison. ‘nesting-limit’ ‘-L’ in m4. ‘net-headers’ ‘-a’ in shar. ‘new-file’ ‘-W’ in make. ‘no-builtin-rules’ ‘-r’ in make. ‘no-character-count’ ‘-w’ in shar. ‘no-check-existing’ ‘-x’ in shar. ‘no-common’ ‘-3’ in wdiff. ‘no-create’ ‘-c’ in touch. ‘no-defines’ ‘-D’ in etags. ‘no-deleted’ ‘-1’ in wdiff. ‘no-dereference’ ‘-d’ in cp. ‘no-inserted’ ‘-2’ in wdiff. ‘no-keep-going’ ‘-S’ in make. ‘no-lines’ ‘-l’ in Bison. ‘no-piping’ ‘-P’ in shar. ‘no-prof’ ‘-e’ in gprof. ‘no-regex’ ‘-R’ in etags. ‘no-sort’ ‘-p’ in nm. ‘no-splash’ Don’t print a startup splash screen. ‘no-split’ Used in makeinfo. ‘no-static’ ‘-a’ in gprof. ‘no-time’ ‘-E’ in gprof. ‘no-timestamp’ ‘-m’ in shar. ‘no-validate’ Used in makeinfo. ‘no-wait’ Used in emacsclient. ‘no-warn’ Used in various programs to inhibit warnings. ‘node’ ‘-n’ in info. ‘nodename’ ‘-n’ in uname. ‘nonmatching’ ‘-f’ in cpio. ‘nstuff’ ‘-n’ in objdump. ‘null’ ‘-0’ in xargs. ‘number’ ‘-n’ in cat. ‘number-nonblank’ ‘-b’ in cat. ‘numeric-sort’ ‘-n’ in nm. ‘numeric-uid-gid’ ‘-n’ in cpio and ls. ‘nx’ Used in GDB. ‘old-archive’ ‘-o’ in tar. ‘old-file’ ‘-o’ in make. ‘one-file-system’ ‘-l’ in tar, cp, and du. ‘only-file’ ‘-o’ in ptx. ‘only-prof’ ‘-f’ in gprof. ‘only-time’ ‘-F’ in gprof. ‘options’ ‘-o’ in getopt, fdlist, fdmount, fdmountd, and fdumount. ‘output’ In various programs, specify the output file name. ‘output-prefix’ ‘-o’ in shar. ‘override’ ‘-o’ in rm. ‘overwrite’ ‘-c’ in unshar. ‘owner’ ‘-o’ in install. ‘paginate’ ‘-l’ in diff. ‘paragraph-indent’ Used in makeinfo. ‘parents’ ‘-p’ in mkdir and rmdir. ‘pass-all’ ‘-p’ in ul. ‘pass-through’ ‘-p’ in cpio. ‘port’ ‘-P’ in finger. ‘portability’ ‘-c’ in cpio and tar. ‘posix’ Used in gawk. ‘prefix-builtins’ ‘-P’ in m4. ‘prefix’ ‘-f’ in csplit. ‘preserve’ Used in tar and cp. ‘preserve-environment’ ‘-p’ in su. ‘preserve-modification-time’ ‘-m’ in cpio. ‘preserve-order’ ‘-s’ in tar. ‘preserve-permissions’ ‘-p’ in tar. ‘print’ ‘-l’ in diff. ‘print-chars’ ‘-L’ in cmp. ‘print-data-base’ ‘-p’ in make. ‘print-directory’ ‘-w’ in make. ‘print-file-name’ ‘-o’ in nm. ‘print-symdefs’ ‘-s’ in nm. ‘printer’ ‘-p’ in wdiff. ‘prompt’ ‘-p’ in ed. ‘proxy’ Specify an HTTP proxy. ‘query-user’ ‘-X’ in shar. ‘question’ ‘-q’ in make. ‘quiet’ Used in many programs to inhibit the usual output. Every program accepting ‘--quiet’ should accept ‘--silent’ as a synonym. ‘quiet-unshar’ ‘-Q’ in shar ‘quote-name’ ‘-Q’ in ls. ‘rcs’ ‘-n’ in diff. ‘re-interval’ Used in gawk. ‘read-full-blocks’ ‘-B’ in tar. ‘readnow’ Used in GDB. ‘recon’ ‘-n’ in make. ‘record-number’ ‘-R’ in tar. ‘recursive’ Used in chgrp, chown, cp, ls, diff, and rm. ‘reference’ ‘-r’ in touch. ‘references’ ‘-r’ in ptx. ‘regex’ ‘-r’ in tac and etags. ‘release’ ‘-r’ in uname. ‘reload-state’ ‘-R’ in m4. ‘relocation’ ‘-r’ in objdump. ‘rename’ ‘-r’ in cpio. ‘replace’ ‘-i’ in xargs. ‘report-identical-files’ ‘-s’ in diff. ‘reset-access-time’ ‘-a’ in cpio. ‘reverse’ ‘-r’ in ls and nm. ‘reversed-ed’ ‘-f’ in diff. ‘right-side-defs’ ‘-R’ in ptx. ‘same-order’ ‘-s’ in tar. ‘same-permissions’ ‘-p’ in tar. ‘save’ ‘-g’ in stty. ‘se’ Used in GDB. ‘sentence-regexp’ ‘-S’ in ptx. ‘separate-dirs’ ‘-S’ in du. ‘separator’ ‘-s’ in tac. ‘sequence’ Used by recode to chose files or pipes for sequencing passes. ‘shell’ ‘-s’ in su. ‘show-all’ ‘-A’ in cat. ‘show-c-function’ ‘-p’ in diff. ‘show-ends’ ‘-E’ in cat. ‘show-function-line’ ‘-F’ in diff. ‘show-tabs’ ‘-T’ in cat. ‘silent’ Used in many programs to inhibit the usual output. Every program accepting ‘--silent’ should accept ‘--quiet’ as a synonym. ‘size’ ‘-s’ in ls. ‘socket’ Specify a file descriptor for a network server to use for its socket, instead of opening and binding a new socket. This provides a way to run, in a non-privileged process, a server that normally needs a reserved port number. ‘sort’ Used in ls. ‘source’ ‘-W source’ in gawk. ‘sparse’ ‘-S’ in tar. ‘speed-large-files’ ‘-H’ in diff. ‘split-at’ ‘-E’ in unshar. ‘split-size-limit’ ‘-L’ in shar. ‘squeeze-blank’ ‘-s’ in cat. ‘start-delete’ ‘-w’ in wdiff. ‘start-insert’ ‘-y’ in wdiff. ‘starting-file’ Used in tar and diff to specify which file within a directory to start processing with. ‘statistics’ ‘-s’ in wdiff. ‘stdin-file-list’ ‘-S’ in shar. ‘stop’ ‘-S’ in make. ‘strict’ ‘-s’ in recode. ‘strip’ ‘-s’ in install. ‘strip-all’ ‘-s’ in strip. ‘strip-debug’ ‘-S’ in strip. ‘submitter’ ‘-s’ in shar. ‘suffix’ ‘-S’ in cp, ln, mv. ‘suffix-format’ ‘-b’ in csplit. ‘sum’ ‘-s’ in gprof. ‘summarize’ ‘-s’ in du. ‘symbolic’ ‘-s’ in ln. ‘symbols’ Used in GDB and objdump. ‘synclines’ ‘-s’ in m4. ‘sysname’ ‘-s’ in uname. ‘tabs’ ‘-t’ in expand and unexpand. ‘tabsize’ ‘-T’ in ls. ‘terminal’ ‘-T’ in tput and ul. ‘-t’ in wdiff. ‘text’ ‘-a’ in diff. ‘text-files’ ‘-T’ in shar. ‘time’ Used in ls and touch. ‘timeout’ Specify how long to wait before giving up on some operation. ‘to-stdout’ ‘-O’ in tar. ‘total’ ‘-c’ in du. ‘touch’ ‘-t’ in make, ranlib, and recode. ‘trace’ ‘-t’ in m4. ‘traditional’ ‘-t’ in hello; ‘-W traditional’ in gawk; ‘-G’ in ed, m4, and ptx. ‘tty’ Used in GDB. ‘typedefs’ ‘-t’ in ctags. ‘typedefs-and-c++’ ‘-T’ in ctags. ‘typeset-mode’ ‘-t’ in ptx. ‘uncompress’ ‘-z’ in tar. ‘unconditional’ ‘-u’ in cpio. ‘undefine’ ‘-U’ in m4. ‘undefined-only’ ‘-u’ in nm. ‘update’ ‘-u’ in cp, ctags, mv, tar. ‘usage’ Used in gawk; same as ‘--help’. ‘uuencode’ ‘-B’ in shar. ‘vanilla-operation’ ‘-V’ in shar. ‘verbose’ Print more information about progress. Many programs support this. ‘verify’ ‘-W’ in tar. ‘version’ Print the version number. ‘version-control’ ‘-V’ in cp, ln, mv. ‘vgrind’ ‘-v’ in ctags. ‘volume’ ‘-V’ in tar. ‘what-if’ ‘-W’ in make. ‘whole-size-limit’ ‘-l’ in shar. ‘width’ ‘-w’ in ls and ptx. ‘word-regexp’ ‘-W’ in ptx. ‘writable’ ‘-T’ in who. ‘zeros’ ‘-z’ in gprof. Next: Memory Usage, Previous: Option Table, Up: Program Behavior   [Contents][Index] 4.10 OID Allocations The OID (object identifier) 1.3.6.1.4.1.11591 has been assigned to the GNU Project (thanks to Sergey Poznyakoff). These are used for SNMP, LDAP, X.509 certificates, and so on. The web site http://www.alvestrand.no/objectid has a (voluntary) listing of many OID assignments. If you need a new slot for your GNU package, write maintainers@gnu.org. Here is a list of arcs currently assigned:   1.3.6.1.4.1.11591 GNU  1.3.6.1.4.1.11591.1 GNU Radius  1.3.6.1.4.1.11591.2 GnuPG   1.3.6.1.4.1.11591.2.1   notation   1.3.6.1.4.1.11591.2.1.1 pkaAddress  1.3.6.1.4.1.11591.3 GNU Radar  1.3.6.1.4.1.11591.4 GNU GSS  1.3.6.1.4.1.11591.5 GNU Mailutils  1.3.6.1.4.1.11591.6 GNU Shishi  1.3.6.1.4.1.11591.7 GNU Radio  1.3.6.1.4.1.11591.8 GNU Dico  1.3.6.1.4.1.11591.9 GNU Rush  1.3.6.1.4.1.11591.12 digestAlgorithm   1.3.6.1.4.1.11591.12.2 TIGER/192  1.3.6.1.4.1.11591.13 encryptionAlgorithm   1.3.6.1.4.1.11591.13.2 Serpent     1.3.6.1.4.1.11591.13.2.1 Serpent-128-ECB     1.3.6.1.4.1.11591.13.2.2 Serpent-128-CBC     1.3.6.1.4.1.11591.13.2.3 Serpent-128-OFB     1.3.6.1.4.1.11591.13.2.4 Serpent-128-CFB     1.3.6.1.4.1.11591.13.2.21 Serpent-192-ECB     1.3.6.1.4.1.11591.13.2.22 Serpent-192-CBC     1.3.6.1.4.1.11591.13.2.23 Serpent-192-OFB     1.3.6.1.4.1.11591.13.2.24 Serpent-192-CFB     1.3.6.1.4.1.11591.13.2.41 Serpent-256-ECB     1.3.6.1.4.1.11591.13.2.42 Serpent-256-CBC     1.3.6.1.4.1.11591.13.2.43 Serpent-256-OFB     1.3.6.1.4.1.11591.13.2.44 Serpent-256-CFB  1.3.6.1.4.1.11591.14 CRC algorithms   1.3.6.1.4.1.11591.14.1 CRC 32  1.3.6.1.4.1.11591.15 ellipticCurve   1.3.6.1.4.1.11591.15.1 Ed25519  Next: File Usage, Previous: OID Allocations, Up: Program Behavior   [Contents][Index] 4.11 Memory Usage If a program typically uses just a few meg of memory, don’t bother making any effort to reduce memory usage. For example, if it is impractical for other reasons to operate on files more than a few meg long, it is reasonable to read entire input files into memory to operate on them. However, for programs such as cat or tail, that can usefully operate on very large files, it is important to avoid using a technique that would artificially limit the size of files it can handle. If a program works by lines and could be applied to arbitrary user-supplied input files, it should keep only a line in memory, because this is not very hard and users will want to be able to operate on input files that are bigger than will fit in memory all at once. If your program creates complicated data structures, just make them in memory and give a fatal error if malloc returns zero. Memory analysis tools such as valgrind can be useful, but don’t complicate a program merely to avoid their false alarms. For example, if memory is used until just before a process exits, don’t free it simply to silence such a tool. Previous: Memory Usage, Up: Program Behavior   [Contents][Index] 4.12 File Usage Programs should be prepared to operate when /usr and /etc are read-only file systems. Thus, if the program manages log files, lock files, backup files, score files, or any other files which are modified for internal purposes, these files should not be stored in /usr or /etc. There are two exceptions. /etc is used to store system configuration information; it is reasonable for a program to modify files in /etc when its job is to update the system configuration. Also, if the user explicitly asks to modify one file in a directory, it is reasonable for the program to store other files in the same directory. Next: Documentation, Previous: Program Behavior, Up: Top   [Contents][Index] 5 Making The Best Use of C This chapter provides advice on how best to use the C language when writing GNU software. • Formatting:    Formatting your source code. • Comments:    Commenting your work. • Syntactic Conventions:    Clean use of C constructs. • Names:    Naming variables, functions, and files. • System Portability:    Portability among different operating systems. • CPU Portability:    Supporting the range of CPU types. • System Functions:    Portability and “standard” library functions. • Internationalization:    Techniques for internationalization. • Character Set:    Use ASCII by default. • Quote Characters:    Use ""..."" or ’...’ in the C locale. • Mmap:    How you can safely use mmap. Next: Comments, Up: Writing C   [Contents][Index] 5.1 Formatting Your Source Code Please keep the length of source lines to 79 characters or less, for maximum readability in the widest range of environments. It is important to put the open-brace that starts the body of a C function in column one, so that they will start a defun. Several tools look for open-braces in column one to find the beginnings of C functions. These tools will not work on code not formatted that way. Avoid putting open-brace, open-parenthesis or open-bracket in column one when they are inside a function, so that they won’t start a defun. The open-brace that starts a struct body can go in column one if you find it useful to treat that definition as a defun. It is also important for function definitions to start the name of the function in column one. This helps people to search for function definitions, and may also help certain tools recognize them. Thus, using Standard C syntax, the format is this: static char * concat (char *s1, char *s2) {   … }  or, if you want to use traditional C syntax, format the definition like this: static char * concat (s1, s2)        /* Name starts in column one here */      char *s1, *s2; {                     /* Open brace in column one here */   … }  In Standard C, if the arguments don’t fit nicely on one line, split it like this: int lots_of_args (int an_integer, long a_long, short a_short,               double a_double, float a_float) …  For struct and enum types, likewise put the braces in column one, unless the whole contents fits on one line: struct foo {   int a, b; }  or  struct foo { int a, b; }  The rest of this section gives our recommendations for other aspects of C formatting style, which is also the default style of the indent program in version 1.2 and newer. It corresponds to the options -nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2 -ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -psl -nsc -nsob  We don’t think of these recommendations as requirements, because it causes no problems for users if two different programs have different formatting styles. But whatever style you use, please use it consistently, since a mixture of styles within one program tends to look ugly. If you are contributing changes to an existing program, please follow the style of that program. For the body of the function, our recommended style looks like this: if (x < foo (y, z))   haha = bar[4] + 5; else   {     while (z)       {         haha += foo (z, z);         z--;       }     return ++x + bar ();   }  We find it easier to read a program when it has spaces before the open-parentheses and after the commas. Especially after the commas. When you split an expression into multiple lines, split it before an operator, not after one. Here is the right way: if (foo_this_is_long && bar > win (x, y, z)     && remaining_condition)  Try to avoid having two operators of different precedence at the same level of indentation. For example, don’t write this: mode = (inmode[j] == VOIDmode         || GET_MODE_SIZE (outmode[j]) > GET_MODE_SIZE (inmode[j])         ? outmode[j] : inmode[j]);  Instead, use extra parentheses so that the indentation shows the nesting: mode = ((inmode[j] == VOIDmode          || (GET_MODE_SIZE (outmode[j]) > GET_MODE_SIZE (inmode[j])))         ? outmode[j] : inmode[j]);  Insert extra parentheses so that Emacs will indent the code properly. For example, the following indentation looks nice if you do it by hand, v = rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000     + rup->ru_stime.tv_sec*1000 + rup->ru_stime.tv_usec/1000;  but Emacs would alter it. Adding a set of parentheses produces something that looks equally nice, and which Emacs will preserve: v = (rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000      + rup->ru_stime.tv_sec*1000 + rup->ru_stime.tv_usec/1000);  Format do-while statements like this: do   {     a = foo (a);   } while (a > 0);  Please use formfeed characters (control-L) to divide the program into pages at logical places (but not within a function). It does not matter just how long the pages are, since they do not have to fit on a printed page. The formfeeds should appear alone on lines by themselves. Next: Syntactic Conventions, Previous: Formatting, Up: Writing C   [Contents][Index] 5.2 Commenting Your Work Every program should start with a comment saying briefly what it is for. Example: ‘fmt - filter for simple filling of text’. This comment should be at the top of the source file containing the ‘main’ function of the program. Also, please write a brief comment at the start of each source file, with the file name and a line or two about the overall purpose of the file. Please write the comments in a GNU program in English, because English is the one language that nearly all programmers in all countries can read. If you do not write English well, please write comments in English as well as you can, then ask other people to help rewrite them. If you can’t write comments in English, please find someone to work with you and translate your comments into English. Please put a comment on each function saying what the function does, what sorts of arguments it gets, and what the possible values of arguments mean and are used for. It is not necessary to duplicate in words the meaning of the C argument declarations, if a C type is being used in its customary fashion. If there is anything nonstandard about its use (such as an argument of type char * which is really the address of the second character of a string, not the first), or any possible values that would not work the way one would expect (such as, that strings containing newlines are not guaranteed to work), be sure to say so. Also explain the significance of the return value, if there is one. Please put two spaces after the end of a sentence in your comments, so that the Emacs sentence commands will work. Also, please write complete sentences and capitalize the first word. If a lower-case identifier comes at the beginning of a sentence, don’t capitalize it! Changing the spelling makes it a different identifier. If you don’t like starting a sentence with a lower case letter, write the sentence differently (e.g., “The identifier lower-case is …”). The comment on a function is much clearer if you use the argument names to speak about the argument values. The variable name itself should be lower case, but write it in upper case when you are speaking about the value rather than the variable itself. Thus, “the inode number NODE_NUM” rather than “an inode”. There is usually no purpose in restating the name of the function in the comment before it, because readers can see that for themselves. There might be an exception when the comment is so long that the function itself would be off the bottom of the screen. There should be a comment on each static variable as well, like this: /* Nonzero means truncate lines in the display;    zero means continue them.  */ int truncate_lines;  Every ‘#endif’ should have a comment, except in the case of short conditionals (just a few lines) that are not nested. The comment should state the condition of the conditional that is ending, including its sense. ‘#else’ should have a comment describing the condition and sense of the code that follows. For example: #ifdef foo   … #else /* not foo */   … #endif /* not foo */  #ifdef foo   … #endif /* foo */  but, by contrast, write the comments this way for a ‘#ifndef’: #ifndef foo   … #else /* foo */   … #endif /* foo */  #ifndef foo   … #endif /* not foo */  Next: Names, Previous: Comments, Up: Writing C   [Contents][Index] 5.3 Clean Use of C Constructs Please explicitly declare the types of all objects. For example, you should explicitly declare all arguments to functions, and you should declare functions to return int rather than omitting the int. Some programmers like to use the GCC ‘-Wall’ option, and change the code whenever it issues a warning. If you want to do this, then do. Other programmers prefer not to use ‘-Wall’, because it gives warnings for valid and legitimate code which they do not want to change. If you want to do this, then do. The compiler should be your servant, not your master. Don’t make the program ugly just to placate static analysis tools such as lint, clang, and GCC with extra warnings options such as -Wconversion and -Wundef. These tools can help find bugs and unclear code, but they can also generate so many false alarms that it hurts readability to silence them with unnecessary casts, wrappers, and other complications. For example, please don’t insert casts to void or calls to do-nothing functions merely to pacify a lint checker. Declarations of external functions and functions to appear later in the source file should all go in one place near the beginning of the file (somewhere before the first function definition in the file), or else should go in a header file. Don’t put extern declarations inside functions. It used to be common practice to use the same local variables (with names like tem) over and over for different values within one function. Instead of doing this, it is better to declare a separate local variable for each distinct purpose, and give it a name which is meaningful. This not only makes programs easier to understand, it also facilitates optimization by good compilers. You can also move the declaration of each local variable into the smallest scope that includes all its uses. This makes the program even cleaner. Don’t use local variables or parameters that shadow global identifiers. GCC’s ‘-Wshadow’ option can detect this problem. Don’t declare multiple variables in one declaration that spans lines. Start a new declaration on each line, instead. For example, instead of this: int    foo,        bar;  write either this: int foo, bar;  or this: int foo; int bar;  (If they are global variables, each should have a comment preceding it anyway.) When you have an if-else statement nested in another if statement, always put braces around the if-else. Thus, never write like this: if (foo)   if (bar)     win ();   else     lose ();  always like this: if (foo)   {     if (bar)       win ();     else       lose ();   }  If you have an if statement nested inside of an else statement, either write else if on one line, like this, if (foo)   … else if (bar)   …  with its then-part indented like the preceding then-part, or write the nested if within braces like this: if (foo)   … else   {     if (bar)       …   }  Don’t declare both a structure tag and variables or typedefs in the same declaration. Instead, declare the structure tag separately and then use it to declare the variables or typedefs. Try to avoid assignments inside if-conditions (assignments inside while-conditions are ok). For example, don’t write this: if ((foo = (char *) malloc (sizeof *foo)) == 0)   fatal (""virtual memory exhausted"");  instead, write this: foo = (char *) malloc (sizeof *foo); if (foo == 0)   fatal (""virtual memory exhausted"");  This example uses zero without a cast as a null pointer constant. This is perfectly fine, except that a cast is needed when calling a varargs function or when using sizeof. Next: System Portability, Previous: Syntactic Conventions, Up: Writing C   [Contents][Index] 5.4 Naming Variables, Functions, and Files The names of global variables and functions in a program serve as comments of a sort. So don’t choose terse names—instead, look for names that give useful information about the meaning of the variable or function. In a GNU program, names should be English, like other comments. Local variable names can be shorter, because they are used only within one context, where (presumably) comments explain their purpose. Try to limit your use of abbreviations in symbol names. It is ok to make a few abbreviations, explain what they mean, and then use them frequently, but don’t use lots of obscure abbreviations. Please use underscores to separate words in a name, so that the Emacs word commands can be useful within them. Stick to lower case; reserve upper case for macros and enum constants, and for name-prefixes that follow a uniform convention. For example, you should use names like ignore_space_change_flag; don’t use names like iCantReadThis. Variables that indicate whether command-line options have been specified should be named after the meaning of the option, not after the option-letter. A comment should state both the exact meaning of the option and its letter. For example, /* Ignore changes in horizontal whitespace (-b).  */ int ignore_space_change_flag;  When you want to define names with constant integer values, use enum rather than ‘#define’. GDB knows about enumeration constants. You might want to make sure that none of the file names would conflict if the files were loaded onto an MS-DOS file system which shortens the names. You can use the program doschk to test for this. Some GNU programs were designed to limit themselves to file names of 14 characters or less, to avoid file name conflicts if they are read into older System V systems. Please preserve this feature in the existing GNU programs that have it, but there is no need to do this in new GNU programs. doschk also reports file names longer than 14 characters. Next: CPU Portability, Previous: Names, Up: Writing C   [Contents][Index] 5.5 Portability between System Types In the Unix world, “portability” refers to porting to different Unix versions. For a GNU program, this kind of portability is desirable, but not paramount. The primary purpose of GNU software is to run on top of the GNU kernel, compiled with the GNU C compiler, on various types of CPU. So the kinds of portability that are absolutely necessary are quite limited. But it is important to support Linux-based GNU systems, since they are the form of GNU that is popular. Beyond that, it is good to support the other free operating systems (*BSD), and it is nice to support other Unix-like systems if you want to. Supporting a variety of Unix-like systems is desirable, although not paramount. It is usually not too hard, so you may as well do it. But you don’t have to consider it an obligation, if it does turn out to be hard. The easiest way to achieve portability to most Unix-like systems is to use Autoconf. It’s unlikely that your program needs to know more information about the host platform than Autoconf can provide, simply because most of the programs that need such knowledge have already been written. Avoid using the format of semi-internal data bases (e.g., directories) when there is a higher-level alternative (readdir). As for systems that are not like Unix, such as MSDOS, Windows, VMS, MVS, and older Macintosh systems, supporting them is often a lot of work. When that is the case, it is better to spend your time adding features that will be useful on GNU and GNU/Linux, rather than on supporting other incompatible systems. If you do support Windows, please do not abbreviate it as “win”. In hacker terminology, calling something a “win” is a form of praise. You’re free to praise Microsoft Windows on your own if you want, but please don’t do this in GNU packages. Instead of abbreviating “Windows” to “win”, you can write it in full or abbreviate it to “woe” or “w”. In GNU Emacs, for instance, we use ‘w32’ in file names of Windows-specific files, but the macro for Windows conditionals is called WINDOWSNT. It is a good idea to define the “feature test macro” _GNU_SOURCE when compiling your C files. When you compile on GNU or GNU/Linux, this will enable the declarations of GNU library extension functions, and that will usually give you a compiler error message if you define the same function names in some other way in your program. (You don’t have to actually use these functions, if you prefer to make the program more portable to other systems.) But whether or not you use these GNU extensions, you should avoid using their names for any other meanings. Doing so would make it hard to move your code into other GNU programs. Next: System Functions, Previous: System Portability, Up: Writing C   [Contents][Index] 5.6 Portability between CPUs Even GNU systems will differ because of differences among CPU types—for example, difference in byte ordering and alignment requirements. It is absolutely essential to handle these differences. However, don’t make any effort to cater to the possibility that an int will be less than 32 bits. We don’t support 16-bit machines in GNU. Similarly, don’t make any effort to cater to the possibility that long will be smaller than predefined types like size_t. For example, the following code is ok: printf (""size = %lu\n"", (unsigned long) sizeof array); printf (""diff = %ld\n"", (long) (pointer2 - pointer1));  1989 Standard C requires this to work, and we know of only one counterexample: 64-bit programs on Microsoft Windows. We will leave it to those who want to port GNU programs to that environment to figure out how to do it. Predefined file-size types like off_t are an exception: they are longer than long on many platforms, so code like the above won’t work with them. One way to print an off_t value portably is to print its digits yourself, one by one. Don’t assume that the address of an int object is also the address of its least-significant byte. This is false on big-endian machines. Thus, don’t make the following mistake: int c; … while ((c = getchar ()) != EOF)   write (file_descriptor, &c, 1);  Instead, use unsigned char as follows. (The unsigned is for portability to unusual systems where char is signed and where there is integer overflow checking.) int c; while ((c = getchar ()) != EOF)   {     unsigned char u = c;     write (file_descriptor, &u, 1);   }  Avoid casting pointers to integers if you can. Such casts greatly reduce portability, and in most programs they are easy to avoid. In the cases where casting pointers to integers is essential—such as, a Lisp interpreter which stores type information as well as an address in one word—you’ll have to make explicit provisions to handle different word sizes. You will also need to make provision for systems in which the normal range of addresses you can get from malloc starts far away from zero. Next: Internationalization, Previous: CPU Portability, Up: Writing C   [Contents][Index] 5.7 Calling System Functions Historically, C implementations differed substantially, and many systems lacked a full implementation of ANSI/ISO C89. Nowadays, however, all practical systems have a C89 compiler and GNU C supports almost all of C99 and some of C11. Similarly, most systems implement POSIX.1-2001 libraries and tools, and many have POSIX.1-2008. Hence, there is little reason to support old C or non-POSIX systems, and you may want to take advantage of standard C and POSIX to write clearer, more portable, or faster code. You should use standard interfaces where possible; but if GNU extensions make your program more maintainable, powerful, or otherwise better, don’t hesitate to use them. In any case, don’t make your own declaration of system functions; that’s a recipe for conflict. Despite the standards, nearly every library function has some sort of portability issue on some system or another. Here are some examples: open Names with trailing /’s are mishandled on many platforms. printf long double may be unimplemented; floating values Infinity and NaN are often mishandled; output for large precisions may be incorrect. readlink May return int instead of ssize_t. scanf On Windows, errno is not set on failure. Gnulib is a big help in this regard. Gnulib provides implementations of standard interfaces on many of the systems that lack them, including portable implementations of enhanced GNU interfaces, thereby making their use portable, and of POSIX-1.2008 interfaces, some of which are missing even on up-to-date GNU systems. Gnulib also provides many useful non-standard interfaces; for example, C implementations of standard data structures (hash tables, binary trees), error-checking type-safe wrappers for memory allocation functions (xmalloc, xrealloc), and output of error messages. Gnulib integrates with GNU Autoconf and Automake to remove much of the burden of writing portable code from the programmer: Gnulib makes your configure script automatically determine what features are missing and use the Gnulib code to supply the missing pieces. The Gnulib and Autoconf manuals have extensive sections on portability: Introduction in Gnulib and see Portable C and C++ in Autoconf. Please consult them for many more details. Next: Character Set, Previous: System Functions, Up: Writing C   [Contents][Index] 5.8 Internationalization GNU has a library called GNU gettext that makes it easy to translate the messages in a program into various languages. You should use this library in every program. Use English for the messages as they appear in the program, and let gettext provide the way to translate them into other languages. Using GNU gettext involves putting a call to the gettext macro around each string that might need translation—like this: printf (gettext (""Processing file '%s'...""), file);  This permits GNU gettext to replace the string ""Processing file '%s'..."" with a translated version. Once a program uses gettext, please make a point of writing calls to gettext when you add new strings that call for translation. Using GNU gettext in a package involves specifying a text domain name for the package. The text domain name is used to separate the translations for this package from the translations for other packages. Normally, the text domain name should be the same as the name of the package—for example, ‘coreutils’ for the GNU core utilities. To enable gettext to work well, avoid writing code that makes assumptions about the structure of words or sentences. When you want the precise text of a sentence to vary depending on the data, use two or more alternative string constants each containing a complete sentences, rather than inserting conditionalized words or phrases into a single sentence framework. Here is an example of what not to do: printf (""%s is full"", capacity > 5000000 ? ""disk"" : ""floppy disk"");  If you apply gettext to all strings, like this, printf (gettext (""%s is full""),         capacity > 5000000 ? gettext (""disk"") : gettext (""floppy disk""));  the translator will hardly know that ""disk"" and ""floppy disk"" are meant to be substituted in the other string. Worse, in some languages (like French) the construction will not work: the translation of the word ""full"" depends on the gender of the first part of the sentence; it happens to be not the same for ""disk"" as for ""floppy disk"". Complete sentences can be translated without problems: printf (capacity > 5000000 ? gettext (""disk is full"")         : gettext (""floppy disk is full""));  A similar problem appears at the level of sentence structure with this code: printf (""#  Implicit rule search has%s been done.\n"",         f->tried_implicit ? """" : "" not"");  Adding gettext calls to this code cannot give correct results for all languages, because negation in some languages requires adding words at more than one place in the sentence. By contrast, adding gettext calls does the job straightforwardly if the code starts out like this: printf (f->tried_implicit         ? ""#  Implicit rule search has been done.\n"",         : ""#  Implicit rule search has not been done.\n"");  Another example is this one: printf (""%d file%s processed"", nfiles,         nfiles != 1 ? ""s"" : """");  The problem with this example is that it assumes that plurals are made by adding ‘s’. If you apply gettext to the format string, like this, printf (gettext (""%d file%s processed""), nfiles,         nfiles != 1 ? ""s"" : """");  the message can use different words, but it will still be forced to use ‘s’ for the plural. Here is a better way, with gettext being applied to the two strings independently: printf ((nfiles != 1 ? gettext (""%d files processed"")          : gettext (""%d file processed"")),         nfiles);  But this still doesn’t work for languages like Polish, which has three plural forms: one for nfiles == 1, one for nfiles == 2, 3, 4, 22, 23, 24, ... and one for the rest. The GNU ngettext function solves this problem: printf (ngettext (""%d files processed"", ""%d file processed"", nfiles),         nfiles);  Next: Quote Characters, Previous: Internationalization, Up: Writing C   [Contents][Index] 5.9 Character Set Sticking to the ASCII character set (plain text, 7-bit characters) is preferred in GNU source code comments, text documents, and other contexts, unless there is good reason to do something else because of the application domain. For example, if source code deals with the French Revolutionary calendar, it is OK if its literal strings contain accented characters in month names like “Floréal”. Also, it is OK (but not required) to use non-ASCII characters to represent proper names of contributors in change logs (see Change Logs). If you need to use non-ASCII characters, you should normally stick with one encoding, certainly within a single file. UTF-8 is likely to be the best choice. Next: Mmap, Previous: Character Set, Up: Writing C   [Contents][Index] 5.10 Quote Characters In the C locale, the output of GNU programs should stick to plain ASCII for quotation characters in messages to users: preferably 0x22 (‘""’) or 0x27 (‘'’) for both opening and closing quotes. Although GNU programs traditionally used 0x60 (‘`’) for opening and 0x27 (‘'’) for closing quotes, nowadays quotes ‘`like this'’ are typically rendered asymmetrically, so quoting ‘""like this""’ or ‘'like this'’ typically looks better. It is ok, but not required, for GNU programs to generate locale-specific quotes in non-C locales. For example: printf (gettext (""Processing file '%s'...""), file);  Here, a French translation might cause gettext to return the string ""Traitement de fichier ‹ %s ›..."", yielding quotes more appropriate for a French locale. Sometimes a program may need to use opening and closing quotes directly. By convention, gettext translates the string ‘""`""’ to the opening quote and the string ‘""'""’ to the closing quote, and a program can use these translations. Generally, though, it is better to translate quote characters in the context of longer strings. If the output of your program is ever likely to be parsed by another program, it is good to provide an option that makes this parsing reliable. For example, you could escape special characters using conventions from the C language or the Bourne shell. See for example the option --quoting-style of GNU ls. Previous: Quote Characters, Up: Writing C   [Contents][Index] 5.11 Mmap If you use mmap to read or write files, don’t assume it either works on all files or fails for all files. It may work on some files and fail on others. The proper way to use mmap is to try it on the specific file for which you want to use it—and if mmap doesn’t work, fall back on doing the job in another way using read and write. The reason this precaution is needed is that the GNU kernel (the HURD) provides a user-extensible file system, in which there can be many different kinds of “ordinary files”. Many of them support mmap, but some do not. It is important to make programs handle all these kinds of files. Next: Managing Releases, Previous: Writing C, Up: Top   [Contents][Index] 6 Documenting Programs A GNU program should ideally come with full free documentation, adequate for both reference and tutorial purposes. If the package can be programmed or extended, the documentation should cover programming or extending it, as well as just using it. • GNU Manuals:    Writing proper manuals. • Doc Strings and Manuals:    Compiling doc strings doesn’t make a manual. • Manual Structure Details:    Specific structure conventions. • License for Manuals:    Writing the distribution terms for a manual. • Manual Credits:    Giving credit to documentation contributors. • Printed Manuals:    Mentioning the printed manual. • NEWS File:    NEWS files supplement manuals. • Change Logs:    Recording changes. • Man Pages:    Man pages are secondary. • Reading other Manuals:    How far you can go in learning from other manuals. Next: Doc Strings and Manuals, Up: Documentation   [Contents][Index] 6.1 GNU Manuals The preferred document format for the GNU system is the Texinfo formatting language. Every GNU package should (ideally) have documentation in Texinfo both for reference and for learners. Texinfo makes it possible to produce a good quality formatted book, using TeX, and to generate an Info file. It is also possible to generate HTML output from Texinfo source. See the Texinfo manual, either the hardcopy, or the on-line version available through info or the Emacs Info subsystem (C-h i). Nowadays some other formats such as Docbook and Sgmltexi can be converted automatically into Texinfo. It is ok to produce the Texinfo documentation by conversion this way, as long as it gives good results. Make sure your manual is clear to a reader who knows nothing about the topic and reads it straight through. This means covering basic topics at the beginning, and advanced topics only later. This also means defining every specialized term when it is first used. Programmers tend to carry over the structure of the program as the structure for its documentation. But this structure is not necessarily good for explaining how to use the program; it may be irrelevant and confusing for a user. Instead, the right way to structure documentation is according to the concepts and questions that a user will have in mind when reading it. This principle applies at every level, from the lowest (ordering sentences in a paragraph) to the highest (ordering of chapter topics within the manual). Sometimes this structure of ideas matches the structure of the implementation of the software being documented—but often they are different. An important part of learning to write good documentation is to learn to notice when you have unthinkingly structured the documentation like the implementation, stop yourself, and look for better alternatives. For example, each program in the GNU system probably ought to be documented in one manual; but this does not mean each program should have its own manual. That would be following the structure of the implementation, rather than the structure that helps the user understand. Instead, each manual should cover a coherent topic. For example, instead of a manual for diff and a manual for diff3, we have one manual for “comparison of files” which covers both of those programs, as well as cmp. By documenting these programs together, we can make the whole subject clearer. The manual which discusses a program should certainly document all of the program’s command-line options and all of its commands. It should give examples of their use. But don’t organize the manual as a list of features. Instead, organize it logically, by subtopics. Address the questions that a user will ask when thinking about the job that the program does. Don’t just tell the reader what each feature can do—say what jobs it is good for, and show how to use it for those jobs. Explain what is recommended usage, and what kinds of usage users should avoid. In general, a GNU manual should serve both as tutorial and reference. It should be set up for convenient access to each topic through Info, and for reading straight through (appendixes aside). A GNU manual should give a good introduction to a beginner reading through from the start, and should also provide all the details that hackers want. The Bison manual is a good example of this—please take a look at it to see what we mean. That is not as hard as it first sounds. Arrange each chapter as a logical breakdown of its topic, but order the sections, and write their text, so that reading the chapter straight through makes sense. Do likewise when structuring the book into chapters, and when structuring a section into paragraphs. The watchword is, at each point, address the most fundamental and important issue raised by the preceding text. If necessary, add extra chapters at the beginning of the manual which are purely tutorial and cover the basics of the subject. These provide the framework for a beginner to understand the rest of the manual. The Bison manual provides a good example of how to do this. To serve as a reference, a manual should have an Index that lists all the functions, variables, options, and important concepts that are part of the program. One combined Index should do for a short manual, but sometimes for a complex package it is better to use multiple indices. The Texinfo manual includes advice on preparing good index entries, see Making Index Entries in GNU Texinfo, and see Defining the Entries of an Index in GNU Texinfo. Don’t use Unix man pages as a model for how to write GNU documentation; most of them are terse, badly structured, and give inadequate explanation of the underlying concepts. (There are, of course, some exceptions.) Also, Unix man pages use a particular format which is different from what we use in GNU manuals. Please include an email address in the manual for where to report bugs in the text of the manual. Please do not use the term “pathname” that is used in Unix documentation; use “file name” (two words) instead. We use the term “path” only for search paths, which are lists of directory names. Please do not use the term “illegal” to refer to erroneous input to a computer program. Please use “invalid” for this, and reserve the term “illegal” for activities prohibited by law. Please do not write ‘()’ after a function name just to indicate it is a function. foo () is not a function, it is a function call with no arguments. Whenever possible, please stick to the active voice, avoiding the passive, and use the present tense, not the future teste. For instance, write “The function foo returns a list containing a and b” rather than “A list containing a and b will be returned.” One advantage of the active voice is it requires you to state the subject of the sentence; with the passive voice, you might omit the subject, which leads to vagueness. It is proper to use the future tense when grammar demands it, as in, “If you type x, the computer will self-destruct in 10 seconds.” Next: Manual Structure Details, Previous: GNU Manuals, Up: Documentation   [Contents][Index] 6.2 Doc Strings and Manuals Some programming systems, such as Emacs, provide a documentation string for each function, command or variable. You may be tempted to write a reference manual by compiling the documentation strings and writing a little additional text to go around them—but you must not do it. That approach is a fundamental mistake. The text of well-written documentation strings will be entirely wrong for a manual. A documentation string needs to stand alone—when it appears on the screen, there will be no other text to introduce or explain it. Meanwhile, it can be rather informal in style. The text describing a function or variable in a manual must not stand alone; it appears in the context of a section or subsection. Other text at the beginning of the section should explain some of the concepts, and should often make some general points that apply to several functions or variables. The previous descriptions of functions and variables in the section will also have given information about the topic. A description written to stand alone would repeat some of that information; this redundancy looks bad. Meanwhile, the informality that is acceptable in a documentation string is totally unacceptable in a manual. The only good way to use documentation strings in writing a good manual is to use them as a source of information for writing good text. Next: License for Manuals, Previous: Doc Strings and Manuals, Up: Documentation   [Contents][Index] 6.3 Manual Structure Details The title page of the manual should state the version of the programs or packages documented in the manual. The Top node of the manual should also contain this information. If the manual is changing more frequently than or independent of the program, also state a version number for the manual in both of these places. Each program documented in the manual should have a node named ‘program Invocation’ or ‘Invoking program’. This node (together with its subnodes, if any) should describe the program’s command line arguments and how to run it (the sort of information people would look for in a man page). Start with an ‘@example’ containing a template for all the options and arguments that the program uses. Alternatively, put a menu item in some menu whose item name fits one of the above patterns. This identifies the node which that item points to as the node for this purpose, regardless of the node’s actual name. The ‘--usage’ feature of the Info reader looks for such a node or menu item in order to find the relevant text, so it is essential for every Texinfo file to have one. If one manual describes several programs, it should have such a node for each program described in the manual. Next: Manual Credits, Previous: Manual Structure Details, Up: Documentation   [Contents][Index] 6.4 License for Manuals Please use the GNU Free Documentation License for all GNU manuals that are more than a few pages long. Likewise for a collection of short documents—you only need one copy of the GNU FDL for the whole collection. For a single short document, you can use a very permissive non-copyleft license, to avoid taking up space with a long license. See http://www.gnu.org/copyleft/fdl-howto.html for more explanation of how to employ the GFDL. Note that it is not obligatory to include a copy of the GNU GPL or GNU LGPL in a manual whose license is neither the GPL nor the LGPL. It can be a good idea to include the program’s license in a large manual; in a short manual, whose size would be increased considerably by including the program’s license, it is probably better not to include it. Next: Printed Manuals, Previous: License for Manuals, Up: Documentation   [Contents][Index] 6.5 Manual Credits Please credit the principal human writers of the manual as the authors, on the title page of the manual. If a company sponsored the work, thank the company in a suitable place in the manual, but do not cite the company as an author. Next: NEWS File, Previous: Manual Credits, Up: Documentation   [Contents][Index] 6.6 Printed Manuals The FSF publishes some GNU manuals in printed form. To encourage sales of these manuals, the on-line versions of the manual should mention at the very start that the printed manual is available and should point at information for getting it—for instance, with a link to the page http://www.gnu.org/order/order.html. This should not be included in the printed manual, though, because there it is redundant. It is also useful to explain in the on-line forms of the manual how the user can print out the manual from the sources. Next: Change Logs, Previous: Printed Manuals, Up: Documentation   [Contents][Index] 6.7 The NEWS File In addition to its manual, the package should have a file named NEWS which contains a list of user-visible changes worth mentioning. In each new release, add items to the front of the file and identify the version they pertain to. Don’t discard old items; leave them in the file after the newer items. This way, a user upgrading from any previous version can see what is new. If the NEWS file gets very long, move some of the older items into a file named ONEWS and put a note at the end referring the user to that file. Next: Man Pages, Previous: NEWS File, Up: Documentation   [Contents][Index] 6.8 Change Logs Keep a change log to describe all the changes made to program source files. The purpose of this is so that people investigating bugs in the future will know about the changes that might have introduced the bug. Often a new bug can be found by looking at what was recently changed. More importantly, change logs can help you eliminate conceptual inconsistencies between different parts of a program, by giving you a history of how the conflicting concepts arose and who they came from. • Change Log Concepts:    • Style of Change Logs:    • Simple Changes:    • Conditional Changes:    • Indicating the Part Changed:    Next: Style of Change Logs, Up: Change Logs   [Contents][Index] 6.8.1 Change Log Concepts You can think of the change log as a conceptual “undo list” which explains how earlier versions were different from the current version. People can see the current version; they don’t need the change log to tell them what is in it. What they want from a change log is a clear explanation of how the earlier version differed. Each entry in a change log describes either an individual change or the smallest batch of changes that belong together, also known as a change set. For later reference or for summarizing, sometimes it is useful to start the entry with a one-line description (sometimes called a title) to describe its overall purpose. In the past, we recommended not mentioning changes in non-software files (manuals, help files, media files, etc.) in change logs. However, we’ve been advised that it is a good idea to include them, for the sake of copyright records. The change log file is normally called ChangeLog and covers an entire directory. Each directory can have its own change log, or a directory can use the change log of its parent directory—it’s up to you. Another alternative is to record change log information with a version control system such as RCS or CVS. This can be converted automatically to a ChangeLog file using rcs2log; in Emacs, the command C-x v a (vc-update-change-log) does the job. For changes to code, there’s no need to describe the full purpose of the changes or how they work together. If you think that a change calls for explanation, you’re probably right. Please do explain it—but please put the full explanation in comments in the code, where people will see it whenever they see the code. For example, “New function” is enough for the change log when you add a function, because there should be a comment before the function definition to explain what it does, how to call it, and so on. For changes to files that do not support a comment syntax (e.g., media files), it is ok to include the full explanation in the change log file, after the title and before the list of individual changes. The easiest way to add an entry to ChangeLog is with the Emacs command M-x add-change-log-entry. An individual change should have an asterisk, the name of the changed file, and then in parentheses the name of the changed functions, variables or whatever, followed by a colon. Then describe the changes you made to that function or variable. Next: Simple Changes, Previous: Change Log Concepts, Up: Change Logs   [Contents][Index] 6.8.2 Style of Change Logs Here are some simple examples of change log entries, starting with the header line that says who made the change and when it was installed, followed by descriptions of specific changes. (These examples are drawn from Emacs and GCC.) 1998-08-17  Richard Stallman  <rms@gnu.org>  * register.el (insert-register): Return nil. (jump-to-register): Likewise.  * sort.el (sort-subr): Return nil.  * tex-mode.el (tex-bibtex-file, tex-file, tex-region): Restart the tex shell if process is gone or stopped. (tex-shell-running): New function.  * expr.c (store_one_arg): Round size up for move_block_to_reg. (expand_call): Round up when emitting USE insns. * stmt.c (assign_parms): Round size up for move_block_from_reg.  It’s important to name the changed function or variable in full. Don’t abbreviate function or variable names, and don’t combine them. Subsequent maintainers will often search for a function name to find all the change log entries that pertain to it; if you abbreviate the name, they won’t find it when they search. For example, some people are tempted to abbreviate groups of function names by writing ‘* register.el ({insert,jump-to}-register)’; this is not a good idea, since searching for jump-to-register or insert-register would not find that entry. Separate unrelated change log entries with blank lines. Don’t put blank lines between individual changes of an entry. You can omit the file name and the asterisk when successive individual changes are in the same file. Break long lists of function names by closing continued lines with ‘)’, rather than ‘,’, and opening the continuation with ‘(’ as in this example: * keyboard.c (menu_bar_items, tool_bar_items) (Fexecute_extended_command): Deal with 'keymap' property.  When you install someone else’s changes, put the contributor’s name in the change log entry rather than in the text of the entry. In other words, write this: 2002-07-14  John Doe  <jdoe@gnu.org>          * sewing.c: Make it sew.  rather than this: 2002-07-14  Usual Maintainer  <usual@gnu.org>          * sewing.c: Make it sew.  Patch by jdoe@gnu.org.  As for the date, that should be the date you applied the change. Next: Conditional Changes, Previous: Style of Change Logs, Up: Change Logs   [Contents][Index] 6.8.3 Simple Changes Certain simple kinds of changes don’t need much detail in the change log. When you change the calling sequence of a function in a simple fashion, and you change all the callers of the function to use the new calling sequence, there is no need to make individual entries for all the callers that you changed. Just write in the entry for the function being called, “All callers changed”—like this: * keyboard.c (Fcommand_execute): New arg SPECIAL. All callers changed.  When you change just comments or doc strings, it is enough to write an entry for the file, without mentioning the functions. Just “Doc fixes” is enough for the change log. There’s no technical need to make change log entries for documentation files. This is because documentation is not susceptible to bugs that are hard to fix. Documentation does not consist of parts that must interact in a precisely engineered fashion. To correct an error, you need not know the history of the erroneous passage; it is enough to compare what the documentation says with the way the program actually works. However, you should keep change logs for documentation files when the project gets copyright assignments from its contributors, so as to make the records of authorship more accurate. Next: Indicating the Part Changed, Previous: Simple Changes, Up: Change Logs   [Contents][Index] 6.8.4 Conditional Changes Source files can often contain code that is conditional to build-time or static conditions. For example, C programs can contain compile-time #if conditionals; programs implemented in interpreted languages can contain module imports of function definitions that are only performed for certain versions of the interpreter; and Automake Makefile.am files can contain variable definitions or target declarations that are only to be considered if a configure-time Automake conditional is true. Many changes are conditional as well: sometimes you add a new variable, or function, or even a new program or library, which is entirely dependent on a build-time condition. It is useful to indicate in the change log the conditions for which a change applies. Our convention for indicating conditional changes is to use square brackets around the name of the condition. Conditional changes can happen in numerous scenarios and with many variations, so here are some examples to help clarify. This first example describes changes in C, Perl, and Python files which are conditional but do not have an associated function or entity name: * xterm.c [SOLARIS2]: Include <string.h>. * FilePath.pm [$^O eq 'VMS']: Import the VMS::Feature module. * framework.py [sys.version_info < (2, 6)]: Make ""with"" statement   available by importing it from __future__,   to support also python 2.5.  Our other examples will for simplicity be limited to C, as the minor changes necessary to adapt them to other languages should be self-evident. Next, here is an entry describing a new definition which is entirely conditional: the C macro FRAME_WINDOW_P is defined (and used) only when the macro HAVE_X_WINDOWS is defined: * frame.h [HAVE_X_WINDOWS] (FRAME_WINDOW_P): Macro defined.  Next, an entry for a change within the function init_display, whose definition as a whole is unconditional, but the changes themselves are contained in a ‘#ifdef HAVE_LIBNCURSES’ conditional: * dispnew.c (init_display) [HAVE_LIBNCURSES]: If X, call tgetent.  Finally, here is an entry for a change that takes effect only when a certain macro is not defined: * host.c (gethostname) [!HAVE_SOCKETS]: Replace with winsock version.  Previous: Conditional Changes, Up: Change Logs   [Contents][Index] 6.8.5 Indicating the Part Changed Indicate the part of a function which changed by using angle brackets enclosing an indication of what the changed part does. Here is an entry for a change in the part of the function sh-while-getopts that deals with sh commands: * progmodes/sh-script.el (sh-while-getopts) <sh>: Handle case that user-specified option string is empty.  Next: Reading other Manuals, Previous: Change Logs, Up: Documentation   [Contents][Index] 6.9 Man Pages In the GNU project, man pages are secondary. It is not necessary or expected for every GNU program to have a man page, but some of them do. It’s your choice whether to include a man page in your program. When you make this decision, consider that supporting a man page requires continual effort each time the program is changed. The time you spend on the man page is time taken away from more useful work. For a simple program which changes little, updating the man page may be a small job. Then there is little reason not to include a man page, if you have one. For a large program that changes a great deal, updating a man page may be a substantial burden. If a user offers to donate a man page, you may find this gift costly to accept. It may be better to refuse the man page unless the same person agrees to take full responsibility for maintaining it—so that you can wash your hands of it entirely. If this volunteer later ceases to do the job, then don’t feel obliged to pick it up yourself; it may be better to withdraw the man page from the distribution until someone else agrees to update it. When a program changes only a little, you may feel that the discrepancies are small enough that the man page remains useful without updating. If so, put a prominent note near the beginning of the man page explaining that you don’t maintain it and that the Texinfo manual is more authoritative. The note should say how to access the Texinfo documentation. Be sure that man pages include a copyright statement and free license. The simple all-permissive license is appropriate for simple man pages (see License Notices for Other Files in Information for GNU Maintainers). For long man pages, with enough explanation and documentation that they can be considered true manuals, use the GFDL (see License for Manuals). Finally, the GNU help2man program (http://www.gnu.org/software/help2man/) is one way to automate generation of a man page, in this case from --help output. This is sufficient in many cases. Previous: Man Pages, Up: Documentation   [Contents][Index] 6.10 Reading other Manuals There may be non-free books or documentation files that describe the program you are documenting. It is ok to use these documents for reference, just as the author of a new algebra textbook can read other books on algebra. A large portion of any non-fiction book consists of facts, in this case facts about how a certain program works, and these facts are necessarily the same for everyone who writes about the subject. But be careful not to copy your outline structure, wording, tables or examples from preexisting non-free documentation. Copying from free documentation may be ok; please check with the FSF about the individual case. Next: References, Previous: Documentation, Up: Top   [Contents][Index] 7 The Release Process Making a release is more than just bundling up your source files in a tar file and putting it up for FTP. You should set up your software so that it can be configured to run on a variety of systems. Your Makefile should conform to the GNU standards described below, and your directory layout should also conform to the standards discussed below. Doing so makes it easy to include your package into the larger framework of all GNU software. • Configuration:    How configuration of GNU packages should work. • Makefile Conventions:    Makefile conventions. • Releases:    Making releases Next: Makefile Conventions, Up: Managing Releases   [Contents][Index] 7.1 How Configuration Should Work Each GNU distribution should come with a shell script named configure. This script is given arguments which describe the kind of machine and system you want to compile the program for. The configure script must record the configuration options so that they affect compilation. The description here is the specification of the interface for the configure script in GNU packages. Many packages implement it using GNU Autoconf (see Introduction in Autoconf) and/or GNU Automake (see Introduction in Automake), but you do not have to use these tools. You can implement it any way you like; for instance, by making configure be a wrapper around a completely different configuration system. Another way for the configure script to operate is to make a link from a standard name such as config.h to the proper configuration file for the chosen system. If you use this technique, the distribution should not contain a file named config.h. This is so that people won’t be able to build the program without configuring it first. Another thing that configure can do is to edit the Makefile. If you do this, the distribution should not contain a file named Makefile. Instead, it should include a file Makefile.in which contains the input used for editing. Once again, this is so that people won’t be able to build the program without configuring it first. If configure does write the Makefile, then Makefile should have a target named Makefile which causes configure to be rerun, setting up the same configuration that was set up last time. The files that configure reads should be listed as dependencies of Makefile. All the files which are output from the configure script should have comments at the beginning explaining that they were generated automatically using configure. This is so that users won’t think of trying to edit them by hand. The configure script should write a file named config.status which describes which configuration options were specified when the program was last configured. This file should be a shell script which, if run, will recreate the same configuration. The configure script should accept an option of the form ‘--srcdir=dirname’ to specify the directory where sources are found (if it is not the current directory). This makes it possible to build the program in a separate directory, so that the actual source directory is not modified. If the user does not specify ‘--srcdir’, then configure should check both . and .. to see if it can find the sources. If it finds the sources in one of these places, it should use them from there. Otherwise, it should report that it cannot find the sources, and should exit with nonzero status. Usually the easy way to support ‘--srcdir’ is by editing a definition of VPATH into the Makefile. Some rules may need to refer explicitly to the specified source directory. To make this possible, configure can add to the Makefile a variable named srcdir whose value is precisely the specified directory. In addition, the ‘configure’ script should take options corresponding to most of the standard directory variables (see Directory Variables). Here is the list: --prefix --exec-prefix --bindir --sbindir --libexecdir --sysconfdir --sharedstatedir --localstatedir --runstatedir --libdir --includedir --oldincludedir --datarootdir --datadir --infodir --localedir --mandir --docdir --htmldir --dvidir --pdfdir --psdir  The configure script should also take an argument which specifies the type of system to build the program for. This argument should look like this: cpu-company-system  For example, an Athlon-based GNU/Linux system might be ‘i686-pc-linux-gnu’. The configure script needs to be able to decode all plausible alternatives for how to describe a machine. Thus, ‘athlon-pc-gnu/linux’ would be a valid alias. There is a shell script called config.sub that you can use as a subroutine to validate system types and canonicalize aliases. The configure script should also take the option --build=buildtype, which should be equivalent to a plain buildtype argument. For example, ‘configure --build=i686-pc-linux-gnu’ is equivalent to ‘configure i686-pc-linux-gnu’. When the build type is not specified by an option or argument, the configure script should normally guess it using the shell script config.guess. Other options are permitted to specify in more detail the software or hardware present on the machine, to include or exclude optional parts of the package, or to adjust the name of some tools or arguments to them: ‘--enable-feature[=parameter]’ Configure the package to build and install an optional user-level facility called feature. This allows users to choose which optional features to include. Giving an optional parameter of ‘no’ should omit feature, if it is built by default. No ‘--enable’ option should ever cause one feature to replace another. No ‘--enable’ option should ever substitute one useful behavior for another useful behavior. The only proper use for ‘--enable’ is for questions of whether to build part of the program or exclude it. ‘--with-package’ The package package will be installed, so configure this package to work with package. Possible values of package include ‘gnu-as’ (or ‘gas’), ‘gnu-ld’, ‘gnu-libc’, ‘gdb’, ‘x’, and ‘x-toolkit’. Do not use a ‘--with’ option to specify the file name to use to find certain files. That is outside the scope of what ‘--with’ options are for. ‘variable=value’ Set the value of the variable variable to value. This is used to override the default values of commands or arguments in the build process. For example, the user could issue ‘configure CFLAGS=-g CXXFLAGS=-g’ to build with debugging information and without the default optimization. Specifying variables as arguments to configure, like this: ./configure CC=gcc  is preferable to setting them in environment variables: CC=gcc ./configure  as it helps to recreate the same configuration later with config.status. However, both methods should be supported. All configure scripts should accept all of the “detail” options and the variable settings, whether or not they make any difference to the particular package at hand. In particular, they should accept any option that starts with ‘--with-’ or ‘--enable-’. This is so users will be able to configure an entire GNU source tree at once with a single set of options. You will note that the categories ‘--with-’ and ‘--enable-’ are narrow: they do not provide a place for any sort of option you might think of. That is deliberate. We want to limit the possible configuration options in GNU software. We do not want GNU programs to have idiosyncratic configuration options. Packages that perform part of the compilation process may support cross-compilation. In such a case, the host and target machines for the program may be different. The configure script should normally treat the specified type of system as both the host and the target, thus producing a program which works for the same type of machine that it runs on. To compile a program to run on a host type that differs from the build type, use the configure option --host=hosttype, where hosttype uses the same syntax as buildtype. The host type normally defaults to the build type. To configure a cross-compiler, cross-assembler, or what have you, you should specify a target different from the host, using the configure option ‘--target=targettype’. The syntax for targettype is the same as for the host type. So the command would look like this: ./configure --host=hosttype --target=targettype  The target type normally defaults to the host type. Programs for which cross-operation is not meaningful need not accept the ‘--target’ option, because configuring an entire operating system for cross-operation is not a meaningful operation. Some programs have ways of configuring themselves automatically. If your program is set up to do this, your configure script can simply ignore most of its arguments. Next: Releases, Previous: Configuration, Up: Managing Releases   [Contents][Index] 7.2 Makefile Conventions This describes conventions for writing the Makefiles for GNU programs. Using Automake will help you write a Makefile that follows these conventions. For more information on portable Makefiles, see POSIX and Portable Make Programming in Autoconf. • Makefile Basics:    General conventions for Makefiles. • Utilities in Makefiles:    Utilities to be used in Makefiles. • Command Variables:    Variables for specifying commands. • DESTDIR:    Supporting staged installs. • Directory Variables:    Variables for installation directories. • Standard Targets:    Standard targets for users. • Install Command Categories:    Three categories of commands in the ‘install’ rule: normal, pre-install and post-install. Next: Utilities in Makefiles, Up: Makefile Conventions   [Contents][Index] 7.2.1 General Conventions for Makefiles Every Makefile should contain this line: SHELL = /bin/sh  to avoid trouble on systems where the SHELL variable might be inherited from the environment. (This is never a problem with GNU make.) Different make programs have incompatible suffix lists and implicit rules, and this sometimes creates confusion or misbehavior. So it is a good idea to set the suffix list explicitly using only the suffixes you need in the particular Makefile, like this: .SUFFIXES: .SUFFIXES: .c .o  The first line clears out the suffix list, the second introduces all suffixes which may be subject to implicit rules in this Makefile. Don’t assume that . is in the path for command execution. When you need to run programs that are a part of your package during the make, please make sure that it uses ./ if the program is built as part of the make or $(srcdir)/ if the file is an unchanging part of the source code. Without one of these prefixes, the current search path is used. The distinction between ./ (the build directory) and $(srcdir)/ (the source directory) is important because users can build in a separate directory using the ‘--srcdir’ option to configure. A rule of the form: foo.1 : foo.man sedscript         sed -f sedscript foo.man > foo.1  will fail when the build directory is not the source directory, because foo.man and sedscript are in the source directory. When using GNU make, relying on ‘VPATH’ to find the source file will work in the case where there is a single dependency file, since the make automatic variable ‘$<’ will represent the source file wherever it is. (Many versions of make set ‘$<’ only in implicit rules.) A Makefile target like foo.o : bar.c         $(CC) -I. -I$(srcdir) $(CFLAGS) -c bar.c -o foo.o  should instead be written as foo.o : bar.c         $(CC) -I. -I$(srcdir) $(CFLAGS) -c $< -o $@  in order to allow ‘VPATH’ to work correctly. When the target has multiple dependencies, using an explicit ‘$(srcdir)’ is the easiest way to make the rule work well. For example, the target above for foo.1 is best written as: foo.1 : foo.man sedscript         sed -f $(srcdir)/sedscript $(srcdir)/foo.man > $@  GNU distributions usually contain some files which are not source files—for example, Info files, and the output from Autoconf, Automake, Bison or Flex. Since these files normally appear in the source directory, they should always appear in the source directory, not in the build directory. So Makefile rules to update them should put the updated files in the source directory. However, if a file does not appear in the distribution, then the Makefile should not put it in the source directory, because building a program in ordinary circumstances should not modify the source directory in any way. Try to make the build and installation targets, at least (and all their subtargets) work correctly with a parallel make. Next: Command Variables, Previous: Makefile Basics, Up: Makefile Conventions   [Contents][Index] 7.2.2 Utilities in Makefiles Write the Makefile commands (and any shell scripts, such as configure) to run under sh (both the traditional Bourne shell and the POSIX shell), not csh. Don’t use any special features of ksh or bash, or POSIX features not widely supported in traditional Bourne sh. The configure script and the Makefile rules for building and installation should not use any utilities directly except these: awk cat cmp cp diff echo egrep expr false grep install-info ln ls mkdir mv printf pwd rm rmdir sed sleep sort tar test touch tr true  Compression programs such as gzip can be used in the dist rule. Generally, stick to the widely-supported (usually POSIX-specified) options and features of these programs. For example, don’t use ‘mkdir -p’, convenient as it may be, because a few systems don’t support it at all and with others, it is not safe for parallel execution. For a list of known incompatibilities, see Portable Shell Programming in Autoconf. It is a good idea to avoid creating symbolic links in makefiles, since a few file systems don’t support them. The Makefile rules for building and installation can also use compilers and related programs, but should do so via make variables so that the user can substitute alternatives. Here are some of the programs we mean: ar bison cc flex install ld ldconfig lex make makeinfo ranlib texi2dvi yacc  Use the following make variables to run those programs: $(AR) $(BISON) $(CC) $(FLEX) $(INSTALL) $(LD) $(LDCONFIG) $(LEX) $(MAKE) $(MAKEINFO) $(RANLIB) $(TEXI2DVI) $(YACC)  When you use ranlib or ldconfig, you should make sure nothing bad happens if the system does not have the program in question. Arrange to ignore an error from that command, and print a message before the command to tell the user that failure of this command does not mean a problem. (The Autoconf ‘AC_PROG_RANLIB’ macro can help with this.) If you use symbolic links, you should implement a fallback for systems that don’t have symbolic links. Additional utilities that can be used via Make variables are: chgrp chmod chown mknod  It is ok to use other utilities in Makefile portions (or scripts) intended only for particular systems where you know those utilities exist. Next: DESTDIR, Previous: Utilities in Makefiles, Up: Makefile Conventions   [Contents][Index] 7.2.3 Variables for Specifying Commands Makefiles should provide variables for overriding certain commands, options, and so on. In particular, you should run most utility programs via variables. Thus, if you use Bison, have a variable named BISON whose default value is set with ‘BISON = bison’, and refer to it with $(BISON) whenever you need to use Bison. File management utilities such as ln, rm, mv, and so on, need not be referred to through variables in this way, since users don’t need to replace them with other programs. Each program-name variable should come with an options variable that is used to supply options to the program. Append ‘FLAGS’ to the program-name variable name to get the options variable name—for example, BISONFLAGS. (The names CFLAGS for the C compiler, YFLAGS for yacc, and LFLAGS for lex, are exceptions to this rule, but we keep them because they are standard.) Use CPPFLAGS in any compilation command that runs the preprocessor, and use LDFLAGS in any compilation command that does linking as well as in any direct use of ld. If there are C compiler options that must be used for proper compilation of certain files, do not include them in CFLAGS. Users expect to be able to specify CFLAGS freely themselves. Instead, arrange to pass the necessary options to the C compiler independently of CFLAGS, by writing them explicitly in the compilation commands or by defining an implicit rule, like this: CFLAGS = -g ALL_CFLAGS = -I. $(CFLAGS) .c.o:         $(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $<  Do include the ‘-g’ option in CFLAGS, because that is not required for proper compilation. You can consider it a default that is only recommended. If the package is set up so that it is compiled with GCC by default, then you might as well include ‘-O’ in the default value of CFLAGS as well. Put CFLAGS last in the compilation command, after other variables containing compiler options, so the user can use CFLAGS to override the others. CFLAGS should be used in every invocation of the C compiler, both those which do compilation and those which do linking. Every Makefile should define the variable INSTALL, which is the basic command for installing a file into the system. Every Makefile should also define the variables INSTALL_PROGRAM and INSTALL_DATA. (The default for INSTALL_PROGRAM should be $(INSTALL); the default for INSTALL_DATA should be ${INSTALL} -m 644.) Then it should use those variables as the commands for actual installation, for executables and non-executables respectively. Minimal use of these variables is as follows: $(INSTALL_PROGRAM) foo $(bindir)/foo $(INSTALL_DATA) libfoo.a $(libdir)/libfoo.a  However, it is preferable to support a DESTDIR prefix on the target files, as explained in the next section. It is acceptable, but not required, to install multiple files in one command, with the final argument being a directory, as in: $(INSTALL_PROGRAM) foo bar baz $(bindir)  Next: Directory Variables, Previous: Command Variables, Up: Makefile Conventions   [Contents][Index] 7.2.4 DESTDIR: Support for Staged Installs DESTDIR is a variable prepended to each installed target file, like this: $(INSTALL_PROGRAM) foo $(DESTDIR)$(bindir)/foo $(INSTALL_DATA) libfoo.a $(DESTDIR)$(libdir)/libfoo.a  The DESTDIR variable is specified by the user on the make command line as an absolute file name. For example: make DESTDIR=/tmp/stage install  DESTDIR should be supported only in the install* and uninstall* targets, as those are the only targets where it is useful. If your installation step would normally install /usr/local/bin/foo and /usr/local/lib/libfoo.a, then an installation invoked as in the example above would install /tmp/stage/usr/local/bin/foo and /tmp/stage/usr/local/lib/libfoo.a instead. Prepending the variable DESTDIR to each target in this way provides for staged installs, where the installed files are not placed directly into their expected location but are instead copied into a temporary location (DESTDIR). However, installed files maintain their relative directory structure and any embedded file names will not be modified. You should not set the value of DESTDIR in your Makefile at all; then the files are installed into their expected locations by default. Also, specifying DESTDIR should not change the operation of the software in any way, so its value should not be included in any file contents. DESTDIR support is commonly used in package creation. It is also helpful to users who want to understand what a given package will install where, and to allow users who don’t normally have permissions to install into protected areas to build and install before gaining those permissions. Finally, it can be useful with tools such as stow, where code is installed in one place but made to appear to be installed somewhere else using symbolic links or special mount operations. So, we strongly recommend GNU packages support DESTDIR, though it is not an absolute requirement. Next: Standard Targets, Previous: DESTDIR, Up: Makefile Conventions   [Contents][Index] 7.2.5 Variables for Installation Directories Installation directories should always be named by variables, so it is easy to install in a nonstandard place. The standard names for these variables and the values they should have in GNU packages are described below. They are based on a standard file system layout; variants of it are used in GNU/Linux and other modern operating systems. Installers are expected to override these values when calling make (e.g., make prefix=/usr install) or configure (e.g., configure --prefix=/usr). GNU packages should not try to guess which value should be appropriate for these variables on the system they are being installed onto: use the default settings specified here so that all GNU packages behave identically, allowing the installer to achieve any desired layout. All installation directories, and their parent directories, should be created (if necessary) before they are installed into. These first two variables set the root for the installation. All the other installation directories should be subdirectories of one of these two, and nothing should be directly installed into these two directories. prefix A prefix used in constructing the default values of the variables listed below. The default value of prefix should be /usr/local. When building the complete GNU system, the prefix will be empty and /usr will be a symbolic link to /. (If you are using Autoconf, write it as ‘@prefix@’.) Running ‘make install’ with a different value of prefix from the one used to build the program should not recompile the program. exec_prefix A prefix used in constructing the default values of some of the variables listed below. The default value of exec_prefix should be $(prefix). (If you are using Autoconf, write it as ‘@exec_prefix@’.) Generally, $(exec_prefix) is used for directories that contain machine-specific files (such as executables and subroutine libraries), while $(prefix) is used directly for other directories. Running ‘make install’ with a different value of exec_prefix from the one used to build the program should not recompile the program. Executable programs are installed in one of the following directories. bindir The directory for installing executable programs that users can run. This should normally be /usr/local/bin, but write it as $(exec_prefix)/bin. (If you are using Autoconf, write it as ‘@bindir@’.) sbindir The directory for installing executable programs that can be run from the shell, but are only generally useful to system administrators. This should normally be /usr/local/sbin, but write it as $(exec_prefix)/sbin. (If you are using Autoconf, write it as ‘@sbindir@’.) libexecdir The directory for installing executable programs to be run by other programs rather than by users. This directory should normally be /usr/local/libexec, but write it as $(exec_prefix)/libexec. (If you are using Autoconf, write it as ‘@libexecdir@’.) The definition of ‘libexecdir’ is the same for all packages, so you should install your data in a subdirectory thereof. Most packages install their data under $(libexecdir)/package-name/, possibly within additional subdirectories thereof, such as $(libexecdir)/package-name/machine/version. Data files used by the program during its execution are divided into categories in two ways. Some files are normally modified by programs; others are never normally modified (though users may edit some of these). Some files are architecture-independent and can be shared by all machines at a site; some are architecture-dependent and can be shared only by machines of the same kind and operating system; others may never be shared between two machines. This makes for six different possibilities. However, we want to discourage the use of architecture-dependent files, aside from object files and libraries. It is much cleaner to make other data files architecture-independent, and it is generally not hard. Here are the variables Makefiles should use to specify directories to put these various kinds of files in: ‘datarootdir’ The root of the directory tree for read-only architecture-independent data files. This should normally be /usr/local/share, but write it as $(prefix)/share. (If you are using Autoconf, write it as ‘@datarootdir@’.) ‘datadir’’s default value is based on this variable; so are ‘infodir’, ‘mandir’, and others. ‘datadir’ The directory for installing idiosyncratic read-only architecture-independent data files for this program. This is usually the same place as ‘datarootdir’, but we use the two separate variables so that you can move these program-specific files without altering the location for Info files, man pages, etc. This should normally be /usr/local/share, but write it as $(datarootdir). (If you are using Autoconf, write it as ‘@datadir@’.) The definition of ‘datadir’ is the same for all packages, so you should install your data in a subdirectory thereof. Most packages install their data under $(datadir)/package-name/. ‘sysconfdir’ The directory for installing read-only data files that pertain to a single machine–that is to say, files for configuring a host. Mailer and network configuration files, /etc/passwd, and so forth belong here. All the files in this directory should be ordinary ASCII text files. This directory should normally be /usr/local/etc, but write it as $(prefix)/etc. (If you are using Autoconf, write it as ‘@sysconfdir@’.) Do not install executables here in this directory (they probably belong in $(libexecdir) or $(sbindir)). Also do not install files that are modified in the normal course of their use (programs whose purpose is to change the configuration of the system excluded). Those probably belong in $(localstatedir). ‘sharedstatedir’ The directory for installing architecture-independent data files which the programs modify while they run. This should normally be /usr/local/com, but write it as $(prefix)/com. (If you are using Autoconf, write it as ‘@sharedstatedir@’.) ‘localstatedir’ The directory for installing data files which the programs modify while they run, and that pertain to one specific machine. Users should never need to modify files in this directory to configure the package’s operation; put such configuration information in separate files that go in $(datadir) or $(sysconfdir). $(localstatedir) should normally be /usr/local/var, but write it as $(prefix)/var. (If you are using Autoconf, write it as ‘@localstatedir@’.) ‘runstatedir’ The directory for installing data files which the programs modify while they run, that pertain to one specific machine, and which need not persist longer than the execution of the program—which is generally long-lived, for example, until the next reboot. PID files for system daemons are a typical use. In addition, this directory should not be cleaned except perhaps at reboot, while the general /tmp (TMPDIR) may be cleaned arbitrarily. This should normally be /var/run, but write it as $(localstatedir)/run. Having it as a separate variable allows the use of /run if desired, for example. (If you are using Autoconf 2.70 or later, write it as ‘@runstatedir@’.) These variables specify the directory for installing certain specific types of files, if your program has them. Every GNU package should have Info files, so every program needs ‘infodir’, but not all need ‘libdir’ or ‘lispdir’. ‘includedir’ The directory for installing header files to be included by user programs with the C ‘#include’ preprocessor directive. This should normally be /usr/local/include, but write it as $(prefix)/include. (If you are using Autoconf, write it as ‘@includedir@’.) Most compilers other than GCC do not look for header files in directory /usr/local/include. So installing the header files this way is only useful with GCC. Sometimes this is not a problem because some libraries are only really intended to work with GCC. But some libraries are intended to work with other compilers. They should install their header files in two places, one specified by includedir and one specified by oldincludedir. ‘oldincludedir’ The directory for installing ‘#include’ header files for use with compilers other than GCC. This should normally be /usr/include. (If you are using Autoconf, you can write it as ‘@oldincludedir@’.) The Makefile commands should check whether the value of oldincludedir is empty. If it is, they should not try to use it; they should cancel the second installation of the header files. A package should not replace an existing header in this directory unless the header came from the same package. Thus, if your Foo package provides a header file foo.h, then it should install the header file in the oldincludedir directory if either (1) there is no foo.h there or (2) the foo.h that exists came from the Foo package. To tell whether foo.h came from the Foo package, put a magic string in the file—part of a comment—and grep for that string. ‘docdir’ The directory for installing documentation files (other than Info) for this package. By default, it should be /usr/local/share/doc/yourpkg, but it should be written as $(datarootdir)/doc/yourpkg. (If you are using Autoconf, write it as ‘@docdir@’.) The yourpkg subdirectory, which may include a version number, prevents collisions among files with common names, such as README. ‘infodir’ The directory for installing the Info files for this package. By default, it should be /usr/local/share/info, but it should be written as $(datarootdir)/info. (If you are using Autoconf, write it as ‘@infodir@’.) infodir is separate from docdir for compatibility with existing practice. ‘htmldir’ ‘dvidir’ ‘pdfdir’ ‘psdir’ Directories for installing documentation files in the particular format. They should all be set to $(docdir) by default. (If you are using Autoconf, write them as ‘@htmldir@’, ‘@dvidir@’, etc.) Packages which supply several translations of their documentation should install them in ‘$(htmldir)/’ll, ‘$(pdfdir)/’ll, etc. where ll is a locale abbreviation such as ‘en’ or ‘pt_BR’. ‘libdir’ The directory for object files and libraries of object code. Do not install executables here, they probably ought to go in $(libexecdir) instead. The value of libdir should normally be /usr/local/lib, but write it as $(exec_prefix)/lib. (If you are using Autoconf, write it as ‘@libdir@’.) ‘lispdir’ The directory for installing any Emacs Lisp files in this package. By default, it should be /usr/local/share/emacs/site-lisp, but it should be written as $(datarootdir)/emacs/site-lisp. If you are using Autoconf, write the default as ‘@lispdir@’. In order to make ‘@lispdir@’ work, you need the following lines in your configure.ac file: lispdir='${datarootdir}/emacs/site-lisp' AC_SUBST(lispdir)  ‘localedir’ The directory for installing locale-specific message catalogs for this package. By default, it should be /usr/local/share/locale, but it should be written as $(datarootdir)/locale. (If you are using Autoconf, write it as ‘@localedir@’.) This directory usually has a subdirectory per locale. Unix-style man pages are installed in one of the following: ‘mandir’ The top-level directory for installing the man pages (if any) for this package. It will normally be /usr/local/share/man, but you should write it as $(datarootdir)/man. (If you are using Autoconf, write it as ‘@mandir@’.) ‘man1dir’ The directory for installing section 1 man pages. Write it as $(mandir)/man1. ‘man2dir’ The directory for installing section 2 man pages. Write it as $(mandir)/man2 ‘…’ Don’t make the primary documentation for any GNU software be a man page. Write a manual in Texinfo instead. Man pages are just for the sake of people running GNU software on Unix, which is a secondary application only. ‘manext’ The file name extension for the installed man page. This should contain a period followed by the appropriate digit; it should normally be ‘.1’. ‘man1ext’ The file name extension for installed section 1 man pages. ‘man2ext’ The file name extension for installed section 2 man pages. ‘…’ Use these names instead of ‘manext’ if the package needs to install man pages in more than one section of the manual. And finally, you should set the following variable: ‘srcdir’ The directory for the sources being compiled. The value of this variable is normally inserted by the configure shell script. (If you are using Autoconf, use ‘srcdir = @srcdir@’.) For example: # Common prefix for installation directories. # NOTE: This directory must exist when you start the install. prefix = /usr/local datarootdir = $(prefix)/share datadir = $(datarootdir) exec_prefix = $(prefix) # Where to put the executable for the command 'gcc'. bindir = $(exec_prefix)/bin # Where to put the directories used by the compiler. libexecdir = $(exec_prefix)/libexec # Where to put the Info files. infodir = $(datarootdir)/info  If your program installs a large number of files into one of the standard user-specified directories, it might be useful to group them into a subdirectory particular to that program. If you do this, you should write the install rule to create these subdirectories. Do not expect the user to include the subdirectory name in the value of any of the variables listed above. The idea of having a uniform set of variable names for installation directories is to enable the user to specify the exact same values for several different GNU packages. In order for this to be useful, all the packages must be designed so that they will work sensibly when the user does so. At times, not all of these variables may be implemented in the current release of Autoconf and/or Automake; but as of Autoconf 2.60, we believe all of them are. When any are missing, the descriptions here serve as specifications for what Autoconf will implement. As a programmer, you can either use a development version of Autoconf or avoid using these variables until a stable release is made which supports them. Next: Install Command Categories, Previous: Directory Variables, Up: Makefile Conventions   [Contents][Index] 7.2.6 Standard Targets for Users All GNU programs should have the following targets in their Makefiles: ‘all’ Compile the entire program. This should be the default target. This target need not rebuild any documentation files; Info files should normally be included in the distribution, and DVI (and other documentation format) files should be made only when explicitly asked for. By default, the Make rules should compile and link with ‘-g’, so that executable programs have debugging symbols. Otherwise, you are essentially helpless in the face of a crash, and it is often far from easy to reproduce with a fresh build. ‘install’ Compile the program and copy the executables, libraries, and so on to the file names where they should reside for actual use. If there is a simple test to verify that a program is properly installed, this target should run that test. Do not strip executables when installing them. This helps eventual debugging that may be needed later, and nowadays disk space is cheap and dynamic loaders typically ensure debug sections are not loaded during normal execution. Users that need stripped binaries may invoke the install-strip target to do that. If possible, write the install target rule so that it does not modify anything in the directory where the program was built, provided ‘make all’ has just been done. This is convenient for building the program under one user name and installing it under another. The commands should create all the directories in which files are to be installed, if they don’t already exist. This includes the directories specified as the values of the variables prefix and exec_prefix, as well as all subdirectories that are needed. One way to do this is by means of an installdirs target as described below. Use ‘-’ before any command for installing a man page, so that make will ignore any errors. This is in case there are systems that don’t have the Unix man page documentation system installed. The way to install Info files is to copy them into $(infodir) with $(INSTALL_DATA) (see Command Variables), and then run the install-info program if it is present. install-info is a program that edits the Info dir file to add or update the menu entry for the given Info file; it is part of the Texinfo package. Here is a sample rule to install an Info file that also tries to handle some additional situations, such as install-info not being present. do-install-info: foo.info installdirs         $(NORMAL_INSTALL) # Prefer an info file in . to one in srcdir.         if test -f foo.info; then d=.; \          else d=""$(srcdir)""; fi; \         $(INSTALL_DATA) $$d/foo.info \           ""$(DESTDIR)$(infodir)/foo.info"" # Run install-info only if it exists. # Use 'if' instead of just prepending '-' to the # line so we notice real errors from install-info. # Use '$(SHELL) -c' because some shells do not # fail gracefully when there is an unknown command.         $(POST_INSTALL)         if $(SHELL) -c 'install-info --version' \            >/dev/null 2>&1; then \           install-info --dir-file=""$(DESTDIR)$(infodir)/dir"" \                        ""$(DESTDIR)$(infodir)/foo.info""; \         else true; fi  When writing the install target, you must classify all the commands into three categories: normal ones, pre-installation commands and post-installation commands. See Install Command Categories. ‘install-html’ ‘install-dvi’ ‘install-pdf’ ‘install-ps’ These targets install documentation in formats other than Info; they’re intended to be called explicitly by the person installing the package, if that format is desired. GNU prefers Info files, so these must be installed by the install target. When you have many documentation files to install, we recommend that you avoid collisions and clutter by arranging for these targets to install in subdirectories of the appropriate installation directory, such as htmldir. As one example, if your package has multiple manuals, and you wish to install HTML documentation with many files (such as the “split” mode output by makeinfo --html), you’ll certainly want to use subdirectories, or two nodes with the same name in different manuals will overwrite each other. Please make these install-format targets invoke the commands for the format target, for example, by making format a dependency. ‘uninstall’ Delete all the installed files—the copies that the ‘install’ and ‘install-*’ targets create. This rule should not modify the directories where compilation is done, only the directories where files are installed. The uninstallation commands are divided into three categories, just like the installation commands. See Install Command Categories. ‘install-strip’ Like install, but strip the executable files while installing them. In simple cases, this target can use the install target in a simple way: install-strip:         $(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' \                 install  But if the package installs scripts as well as real executables, the install-strip target can’t just refer to the install target; it has to strip the executables but not the scripts. install-strip should not strip the executables in the build directory which are being copied for installation. It should only strip the copies that are installed. Normally we do not recommend stripping an executable unless you are sure the program has no bugs. However, it can be reasonable to install a stripped executable for actual execution while saving the unstripped executable elsewhere in case there is a bug. ‘clean’ Delete all files in the current directory that are normally created by building the program. Also delete files in other directories if they are created by this makefile. However, don’t delete the files that record the configuration. Also preserve files that could be made by building, but normally aren’t because the distribution comes with them. There is no need to delete parent directories that were created with ‘mkdir -p’, since they could have existed anyway. Delete .dvi files here if they are not part of the distribution. ‘distclean’ Delete all files in the current directory (or created by this makefile) that are created by configuring or building the program. If you have unpacked the source and built the program without creating any other files, ‘make distclean’ should leave only the files that were in the distribution. However, there is no need to delete parent directories that were created with ‘mkdir -p’, since they could have existed anyway. ‘mostlyclean’ Like ‘clean’, but may refrain from deleting a few files that people normally don’t want to recompile. For example, the ‘mostlyclean’ target for GCC does not delete libgcc.a, because recompiling it is rarely necessary and takes a lot of time. ‘maintainer-clean’ Delete almost everything that can be reconstructed with this Makefile. This typically includes everything deleted by distclean, plus more: C source files produced by Bison, tags tables, Info files, and so on. The reason we say “almost everything” is that running the command ‘make maintainer-clean’ should not delete configure even if configure can be remade using a rule in the Makefile. More generally, ‘make maintainer-clean’ should not delete anything that needs to exist in order to run configure and then begin to build the program. Also, there is no need to delete parent directories that were created with ‘mkdir -p’, since they could have existed anyway. These are the only exceptions; maintainer-clean should delete everything else that can be rebuilt. The ‘maintainer-clean’ target is intended to be used by a maintainer of the package, not by ordinary users. You may need special tools to reconstruct some of the files that ‘make maintainer-clean’ deletes. Since these files are normally included in the distribution, we don’t take care to make them easy to reconstruct. If you find you need to unpack the full distribution again, don’t blame us. To help make users aware of this, the commands for the special maintainer-clean target should start with these two: @echo 'This command is intended for maintainers to use; it' @echo 'deletes files that may need special tools to rebuild.'  ‘TAGS’ Update a tags table for this program. ‘info’ Generate any Info files needed. The best way to write the rules is as follows: info: foo.info  foo.info: foo.texi chap1.texi chap2.texi         $(MAKEINFO) $(srcdir)/foo.texi  You must define the variable MAKEINFO in the Makefile. It should run the makeinfo program, which is part of the Texinfo distribution. Normally a GNU distribution comes with Info files, and that means the Info files are present in the source directory. Therefore, the Make rule for an info file should update it in the source directory. When users build the package, ordinarily Make will not update the Info files because they will already be up to date. ‘dvi’ ‘html’ ‘pdf’ ‘ps’ Generate documentation files in the given format. These targets should always exist, but any or all can be a no-op if the given output format cannot be generated. These targets should not be dependencies of the all target; the user must manually invoke them. Here’s an example rule for generating DVI files from Texinfo: dvi: foo.dvi  foo.dvi: foo.texi chap1.texi chap2.texi         $(TEXI2DVI) $(srcdir)/foo.texi  You must define the variable TEXI2DVI in the Makefile. It should run the program texi2dvi, which is part of the Texinfo distribution. (texi2dvi uses TeX to do the real work of formatting. TeX is not distributed with Texinfo.) Alternatively, write only the dependencies, and allow GNU make to provide the command. Here’s another example, this one for generating HTML from Texinfo: html: foo.html  foo.html: foo.texi chap1.texi chap2.texi         $(TEXI2HTML) $(srcdir)/foo.texi  Again, you would define the variable TEXI2HTML in the Makefile; for example, it might run makeinfo --no-split --html (makeinfo is part of the Texinfo distribution). ‘dist’ Create a distribution tar file for this program. The tar file should be set up so that the file names in the tar file start with a subdirectory name which is the name of the package it is a distribution for. This name can include the version number. For example, the distribution tar file of GCC version 1.40 unpacks into a subdirectory named gcc-1.40. The easiest way to do this is to create a subdirectory appropriately named, use ln or cp to install the proper files in it, and then tar that subdirectory. Compress the tar file with gzip. For example, the actual distribution file for GCC version 1.40 is called gcc-1.40.tar.gz. It is ok to support other free compression formats as well. The dist target should explicitly depend on all non-source files that are in the distribution, to make sure they are up to date in the distribution. See Making Releases. ‘check’ Perform self-tests (if any). The user must build the program before running the tests, but need not install the program; you should write the self-tests so that they work when the program is built but not installed. The following targets are suggested as conventional names, for programs in which they are useful. installcheck Perform installation tests (if any). The user must build and install the program before running the tests. You should not assume that $(bindir) is in the search path. installdirs It’s useful to add a target named ‘installdirs’ to create the directories where files are installed, and their parent directories. There is a script called mkinstalldirs which is convenient for this; you can find it in the Gnulib package. You can use a rule like this: # Make sure all installation directories (e.g. $(bindir)) # actually exist by making them if necessary. installdirs: mkinstalldirs         $(srcdir)/mkinstalldirs $(bindir) $(datadir) \                                 $(libdir) $(infodir) \                                 $(mandir)  or, if you wish to support DESTDIR (strongly encouraged), # Make sure all installation directories (e.g. $(bindir)) # actually exist by making them if necessary. installdirs: mkinstalldirs         $(srcdir)/mkinstalldirs \             $(DESTDIR)$(bindir) $(DESTDIR)$(datadir) \             $(DESTDIR)$(libdir) $(DESTDIR)$(infodir) \             $(DESTDIR)$(mandir)  This rule should not modify the directories where compilation is done. It should do nothing but create installation directories. Previous: Standard Targets, Up: Makefile Conventions   [Contents][Index] 7.2.7 Install Command Categories When writing the install target, you must classify all the commands into three categories: normal ones, pre-installation commands and post-installation commands. Normal commands move files into their proper places, and set their modes. They may not alter any files except the ones that come entirely from the package they belong to. Pre-installation and post-installation commands may alter other files; in particular, they can edit global configuration files or data bases. Pre-installation commands are typically executed before the normal commands, and post-installation commands are typically run after the normal commands. The most common use for a post-installation command is to run install-info. This cannot be done with a normal command, since it alters a file (the Info directory) which does not come entirely and solely from the package being installed. It is a post-installation command because it needs to be done after the normal command which installs the package’s Info files. Most programs don’t need any pre-installation commands, but we have the feature just in case it is needed. To classify the commands in the install rule into these three categories, insert category lines among them. A category line specifies the category for the commands that follow. A category line consists of a tab and a reference to a special Make variable, plus an optional comment at the end. There are three variables you can use, one for each category; the variable name specifies the category. Category lines are no-ops in ordinary execution because these three Make variables are normally undefined (and you should not define them in the makefile). Here are the three possible category lines, each with a comment that explains what it means:         $(PRE_INSTALL)     # Pre-install commands follow.         $(POST_INSTALL)    # Post-install commands follow.         $(NORMAL_INSTALL)  # Normal commands follow.  If you don’t use a category line at the beginning of the install rule, all the commands are classified as normal until the first category line. If you don’t use any category lines, all the commands are classified as normal. These are the category lines for uninstall:         $(PRE_UNINSTALL)     # Pre-uninstall commands follow.         $(POST_UNINSTALL)    # Post-uninstall commands follow.         $(NORMAL_UNINSTALL)  # Normal commands follow.  Typically, a pre-uninstall command would be used for deleting entries from the Info directory. If the install or uninstall target has any dependencies which act as subroutines of installation, then you should start each dependency’s commands with a category line, and start the main target’s commands with a category line also. This way, you can ensure that each command is placed in the right category regardless of which of the dependencies actually run. Pre-installation and post-installation commands should not run any programs except for these: [ basename bash cat chgrp chmod chown cmp cp dd diff echo egrep expand expr false fgrep find getopt grep gunzip gzip hostname install install-info kill ldconfig ln ls md5sum mkdir mkfifo mknod mv printenv pwd rm rmdir sed sort tee test touch true uname xargs yes  The reason for distinguishing the commands in this way is for the sake of making binary packages. Typically a binary package contains all the executables and other files that need to be installed, and has its own method of installing them—so it does not need to run the normal installation commands. But installing the binary package does need to execute the pre-installation and post-installation commands. Programs to build binary packages work by extracting the pre-installation and post-installation commands. Here is one way of extracting the pre-installation commands (the -s option to make is needed to silence messages about entering subdirectories): make -s -n install -o all \       PRE_INSTALL=pre-install \       POST_INSTALL=post-install \       NORMAL_INSTALL=normal-install \   | gawk -f pre-install.awk  where the file pre-install.awk could contain this: $0 ~ /^(normal-install|post-install)[ \t]*$/ {on = 0} on {print $0} $0 ~ /^pre-install[ \t]*$/ {on = 1}  Previous: Makefile Conventions, Up: Managing Releases   [Contents][Index] 7.3 Making Releases You should identify each release with a pair of version numbers, a major version and a minor. We have no objection to using more than two numbers, but it is very unlikely that you really need them. Package the distribution of Foo version 69.96 up in a gzipped tar file with the name foo-69.96.tar.gz. It should unpack into a subdirectory named foo-69.96. Building and installing the program should never modify any of the files contained in the distribution. This means that all the files that form part of the program in any way must be classified into source files and non-source files. Source files are written by humans and never changed automatically; non-source files are produced from source files by programs under the control of the Makefile. The distribution should contain a file named README with a general overview of the package: the name of the package; the version number of the package, or refer to where in the package the version can be found; a general description of what the package does; a reference to the file INSTALL, which should in turn contain an explanation of the installation procedure; a brief explanation of any unusual top-level directories or files, or other hints for readers to find their way around the source; a reference to the file which contains the copying conditions. The GNU GPL, if used, should be in a file called COPYING. If the GNU LGPL is used, it should be in a file called COPYING.LESSER. Naturally, all the source files must be in the distribution. It is okay to include non-source files in the distribution along with the source files they are generated from, provided they are up-to-date with the source they are made from, and machine-independent, so that normal building of the distribution will never modify them. We commonly include non-source files produced by Autoconf, Automake, Bison, flex, TeX, and makeinfo; this helps avoid unnecessary dependencies between our distributions, so that users can install whichever versions of whichever packages they like. Do not induce new dependencies on other software lightly. Non-source files that might actually be modified by building and installing the program should never be included in the distribution. So if you do distribute non-source files, always make sure they are up to date when you make a new distribution. Make sure that all the files in the distribution are world-readable, and that directories are world-readable and world-searchable (octal mode 755). We used to recommend that all directories in the distribution also be world-writable (octal mode 777), because ancient versions of tar would otherwise not cope when extracting the archive as an unprivileged user. That can easily lead to security issues when creating the archive, however, so now we recommend against that. Don’t include any symbolic links in the distribution itself. If the tar file contains symbolic links, then people cannot even unpack it on systems that don’t support symbolic links. Also, don’t use multiple names for one file in different directories, because certain file systems cannot handle this and that prevents unpacking the distribution. Try to make sure that all the file names will be unique on MS-DOS. A name on MS-DOS consists of up to 8 characters, optionally followed by a period and up to three characters. MS-DOS will truncate extra characters both before and after the period. Thus, foobarhacker.c and foobarhacker.o are not ambiguous; they are truncated to foobarha.c and foobarha.o, which are distinct. Include in your distribution a copy of the texinfo.tex you used to test print any *.texinfo or *.texi files. Likewise, if your program uses small GNU software packages like regex, getopt, obstack, or termcap, include them in the distribution file. Leaving them out would make the distribution file a little smaller at the expense of possible inconvenience to a user who doesn’t know what other files to get. Next: GNU Free Documentation License, Previous: Managing Releases, Up: Top   [Contents][Index] 8 References to Non-Free Software and Documentation A GNU program should not recommend, promote, or grant legitimacy to the use of any non-free program. Proprietary software is a social and ethical problem, and our aim is to put an end to that problem. We can’t stop some people from writing proprietary programs, or stop other people from using them, but we can and should refuse to advertise them to new potential customers, or to give the public the idea that their existence is ethical. The GNU definition of free software is found on the GNU web site at http://www.gnu.org/philosophy/free-sw.html, and the definition of free documentation is found at http://www.gnu.org/philosophy/free-doc.html. The terms “free” and “non-free”, used in this document, refer to those definitions. A list of important licenses and whether they qualify as free is in http://www.gnu.org/licenses/license-list.html. If it is not clear whether a license qualifies as free, please ask the GNU Project by writing to licensing@gnu.org. We will answer, and if the license is an important one, we will add it to the list. When a non-free program or system is well known, you can mention it in passing—that is harmless, since users who might want to use it probably already know about it. For instance, it is fine to explain how to build your package on top of some widely used non-free operating system, or how to use it together with some widely used non-free program. However, you should give only the necessary information to help those who already use the non-free program to use your program with it—don’t give, or refer to, any further information about the proprietary program, and don’t imply that the proprietary program enhances your program, or that its existence is in any way a good thing. The goal should be that people already using the proprietary program will get the advice they need about how to use your free program with it, while people who don’t already use the proprietary program will not see anything likely to lead them to take an interest in it. If a non-free program or system is obscure in your program’s domain, your program should not mention or support it at all, since doing so would tend to popularize the non-free program more than it popularizes your program. (You cannot hope to find many additional users for your program among the users of Foobar, if the existence of Foobar is not generally known among people who might want to use your program.) Sometimes a program is free software in itself but depends on a non-free platform in order to run. For instance, many Java programs depend on some non-free Java libraries. To recommend or promote such a program is to promote the other programs it needs. This is why we are careful about listing Java programs in the Free Software Directory: we don’t want to promote the non-free Java libraries. We hope this particular problem with Java will be gone by and by, as we replace the remaining non-free standard Java libraries with free software, but the general principle will remain the same: don’t recommend, promote or legitimize programs that depend on non-free software to run. Some free programs strongly encourage the use of non-free software. A typical example is mplayer. It is free software in itself, and the free code can handle some kinds of files. However, mplayer recommends use of non-free codecs for other kinds of files, and users that install mplayer are very likely to install those codecs along with it. To recommend mplayer is, in effect, to promote use of the non-free codecs. Thus, you should not recommend programs that strongly encourage the use of non-free software. This is why we do not list mplayer in the Free Software Directory. A GNU package should not refer the user to any non-free documentation for free software. Free documentation that can be included in free operating systems is essential for completing the GNU system, or any free operating system, so encouraging it is a priority; to recommend use of documentation that we are not allowed to include undermines the impetus for the community to produce documentation that we can include. So GNU packages should never recommend non-free documentation. By contrast, it is ok to refer to journal articles and textbooks in the comments of a program for explanation of how it functions, even though they are non-free. This is because we don’t include such things in the GNU system even if they are free—they are outside the scope of what a software distribution needs to include. Referring to a web site that describes or recommends a non-free program is promoting that program, so please do not make links to (or mention by name) web sites that contain such material. This policy is relevant particularly for the web pages for a GNU package. Following links from nearly any web site can lead eventually to non-free software; this is inherent in the nature of the web. So it makes no sense to criticize a site for having such links. As long as the site does not itself recommend a non-free program, there is no need to consider the question of the sites that it links to for other reasons. Thus, for example, you should not refer to AT&T’s web site if that recommends AT&T’s non-free software packages; you should not refer to a page p that links to AT&T’s site presenting it as a place to get some non-free program, because that part of the page p itself recommends and legitimizes the non-free program. However, that p contains a link to AT&T’s web site for some other purpose (such as long-distance telephone service) is not an objection against it. A web page recommends a program in a particularly strong way if it requires users to run that program in order to use the page. Many pages contain Javascript code which they recommend in this way. This Javascript code may be free or nonfree, but nonfree is the usual case. If the purpose for which you would refer to the page cannot be carried out without running nonfree Javascript code, then you should not refer to it. Thus, if the purpose of referring to the page is for people to view a video, or subscribing to a mailing list, and the viewing or subscribing fail to work if the user’s browser blocks the nonfree Javascript code, then don’t refer to that page. The extreme case is that of web sites which depend on nonfree Javascript code even to see the contents of the pages. Any site hosted on wix.com has this problem, and so do some other sites. Referring people to such pages to read their contents is, in effect, urging them to run those nonfree programs—so please don’t refer to those pages. (Such pages also break the Web, so they deserve condemnation for two reasons.) Instead, please quote excerpts from the page to make your point, or find another place to refer to that information. Next: Index, Previous: References, Up: Top   [Contents][Index] Appendix A GNU Free Documentation License Version 1.3, 3 November 2008 Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. http://fsf.org/  Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.  PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document free in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of “copyleft”, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The “Document”, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as “you”. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A “Modified Version” of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A “Secondary Section” is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document’s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The “Invariant Sections” are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The “Cover Texts” are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A “Transparent” copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not “Transparent” is called “Opaque”. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The “Title Page” means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, “Title Page” means the text near the most prominent appearance of the work’s title, preceding the beginning of the body of the text. The “publisher” means any person or entity that distributes copies of the Document to the public. A section “Entitled XYZ” means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.) To “Preserve the Title” of such a section when you modify the Document means that it remains a section “Entitled XYZ” according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies. COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document’s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. State on the Title page the name of the publisher of the Modified Version, as the publisher. Preserve all the copyright notices of the Document. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document’s license notice. Include an unaltered copy of this License. Preserve the section Entitled “History”, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled “History” in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the “History” section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. For any section Entitled “Acknowledgements” or “Dedications”, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. Delete any section Entitled “Endorsements”. Such a section may not be included in the Modified Version. Do not retitle any existing section to be Entitled “Endorsements” or to conflict in title with any Invariant Section. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version’s license notice. These titles must be distinct from any other section titles. You may add a section Entitled “Endorsements”, provided it contains nothing but endorsements of your Modified Version by various parties—for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled “History” in the various original documents, forming one section Entitled “History”; likewise combine any sections Entitled “Acknowledgements”, and any sections Entitled “Dedications”. You must delete all sections Entitled “Endorsements.” COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an “aggregate” if the copyright resulting from the compilation is not used to limit the legal rights of the compilation’s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document’s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled “Acknowledgements”, “Dedications”, or “History”, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/. Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License “or any later version” applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Document. RELICENSING “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A “Massive Multiauthor Collaboration” (or “MMC”) contained in the site means any set of copyrightable works thus published on the MMC site. “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. “Incorporate” means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is “eligible for relicensing” if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:   Copyright (C)  year  your name.   Permission is granted to copy, distribute and/or modify this document   under the terms of the GNU Free Documentation License, Version 1.3   or any later version published by the Free Software Foundation;   with no Invariant Sections, no Front-Cover Texts, and no Back-Cover   Texts.  A copy of the license is included in the section entitled ``GNU   Free Documentation License''.  If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the “with…Texts.” line with this:     with the Invariant Sections being list their titles, with     the Front-Cover Texts being list, and with the Back-Cover Texts     being list.  If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software. Previous: GNU Free Documentation License, Up: Top   [Contents][Index] Index Jump to:   #   -   A   B   C   D   E   F   G   I   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Index Entry   Section # #endif, commenting:   Comments - ‘--help’ output:   --help ‘--version’ output:   --version ‘-Wall’ compiler option:   Syntactic Conventions A accepting contributions:   Contributions address for bug reports:   --help ANSI C standard:   Standard C arbitrary limits on data:   Semantics ASCII characters:   Character Set autoconf:   System Portability avoiding proprietary code:   Reading Non-Free Code B batch of changes:   Change Log Concepts behavior, dependent on program’s name:   User Interfaces binary packages:   Install Command Categories bindir:   Directory Variables braces, in C source:   Formatting bug reports:   --help bug-standards@gnu.org email address:   Preface C C compatibility:   Compatibility C library functions, and portability:   System Functions canonical name of a program:   --version casting pointers to integers:   CPU Portability CGI programs, standard options for:   Command-Line Interfaces change logs:   Change Logs change logs, conditional changes:   Conditional Changes change logs, style:   Style of Change Logs change set:   Change Log Concepts character set:   Character Set clang:   Syntactic Conventions command-line arguments, decoding:   Semantics command-line interface:   Command-Line Interfaces commenting:   Comments compatibility with C and POSIX standards:   Compatibility compiler warnings:   Syntactic Conventions conditional changes, and change logs:   Conditional Changes conditionals, comments for:   Comments configure:   Configuration control-L:   Formatting conventions for makefiles:   Makefile Conventions CORBA:   Graphical Interfaces credits for manuals:   Manual Credits D D-bus:   Graphical Interfaces data structures, in Gnulib:   System Functions data types, and portability:   CPU Portability description, change log entry:   Change Log Concepts DESTDIR:   DESTDIR directories, creating installation:   Directory Variables documentation:   Documentation doschk:   Names double quote:   Quote Characters downloading this manual:   Preface dynamic plug-ins:   Dynamic Plug-In Interfaces E encodings:   Character Set enum types, formatting:   Formatting error messages:   Semantics error messages, formatting:   Errors error messages, in Gnulib:   System Functions exec_prefix:   Directory Variables expressions, splitting:   Formatting F FDL, GNU Free Documentation License:   GNU Free Documentation License file usage:   File Usage file-name limitations:   Names formatting error messages:   Errors formatting source code:   Formatting formfeed:   Formatting function argument, declaring:   Syntactic Conventions function definitions, formatting:   Formatting function prototypes:   Standard C G getopt:   Command-Line Interfaces gettext:   Internationalization GNOME:   Graphical Interfaces GNOME and Guile:   Source Language Gnulib:   System Functions gnustandards project repository:   Preface gnustandards-commit@gnu.org mailing list:   Preface GNUstep:   Graphical Interfaces graphical user interface:   Graphical Interfaces grave accent:   Quote Characters GTK+:   Graphical Interfaces Guile:   Source Language I implicit int:   Syntactic Conventions impossible conditions:   Semantics installation directories, creating:   Directory Variables installations, staged:   DESTDIR interface styles:   Graphical Interfaces internationalization:   Internationalization K keyboard interface:   Graphical Interfaces L LDAP:   OID Allocations left quote:   Quote Characters legal aspects:   Legal Issues legal papers:   Contributions length of source lines:   Formatting libexecdir:   Directory Variables libiconv:   Semantics libraries:   Libraries library functions, and portability:   System Functions library interface:   Graphical Interfaces license for manuals:   License for Manuals line length:   Formatting lint:   Syntactic Conventions locale-specific quote characters:   Quote Characters long option names:   Option Table long-named options:   Command-Line Interfaces M makefile, conventions for:   Makefile Conventions malloc return value:   Semantics man pages:   Man Pages manual structure:   Manual Structure Details memory allocation failure:   Semantics memory leak:   Memory Usage memory usage:   Memory Usage message text, and internationalization:   Internationalization mmap:   Mmap multiple variables in a line:   Syntactic Conventions N names of variables, functions, and files:   Names NEWS file:   NEWS File non-ASCII characters:   Character Set non-POSIX systems, and portability:   System Portability non-standard extensions:   Using Extensions NUL characters:   Semantics O OID allocations for GNU:   OID Allocations open brace:   Formatting opening quote:   Quote Characters optional features, configure-time:   Configuration options for compatibility:   Compatibility options, standard command-line:   Command-Line Interfaces output device and program’s behavior:   User Interfaces P packaging:   Releases PATH_INFO, specifying standard options as:   Command-Line Interfaces plug-ins:   Dynamic Plug-In Interfaces plugin_is_GPL_compatible:   Dynamic Plug-In Interfaces portability, and data types:   CPU Portability portability, and library functions:   System Functions portability, between system types:   System Portability POSIX compatibility:   Compatibility POSIX functions, and portability:   System Functions POSIXLY_CORRECT, environment variable:   Compatibility post-installation commands:   Install Command Categories pre-installation commands:   Install Command Categories prefix:   Directory Variables program configuration:   Configuration program design:   Design Advice program name and its behavior:   User Interfaces program’s canonical name:   --version programming languages:   Source Language proprietary programs:   Reading Non-Free Code Q quote characters:   Quote Characters R README file:   Releases references to non-free material:   References releasing:   Managing Releases right quote:   Quote Characters S Savannah repository for gnustandards:   Preface sbindir:   Directory Variables signal handling:   Semantics single quote:   Quote Characters SNMP:   OID Allocations spaces before open-paren:   Formatting staged installs:   DESTDIR standard command-line options:   Command-Line Interfaces standards for makefiles:   Makefile Conventions struct types, formatting:   Formatting syntactic conventions:   Syntactic Conventions T table of long options:   Option Table temporary files:   Semantics temporary variables:   Syntactic Conventions texinfo.tex, in a distribution:   Releases title, change log entry:   Change Log Concepts TMPDIR environment variable:   Semantics trademarks:   Trademarks U user interface styles:   Graphical Interfaces V valgrind:   Memory Usage version numbers, for releases:   Releases W where to obtain standards.texi:   Preface X X.509:   OID Allocations xmalloc, in Gnulib:   System Functions Jump to:   #   -   A   B   C   D   E   F   G   I   K   L   M   N   O   P   Q   R   S   T   U   V   W   X  "	"null"	"null"	""	"true"
"Coding Style"	"Linux kernel coding style"	"https://www.kernel.org/doc/Documentation/CodingStyle"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Linux kernel coding style This is a short document describing the preferred coding style for the linux kernel. Coding style is very personal, and I won't _force_ my views on anybody, but this is what goes for anything that I have to be able to maintain, and I'd prefer it for most other things too. Please at least consider the points made here. First off, I'd suggest printing out a copy of the GNU coding standards, and NOT read it. Burn them, it's a great symbolic gesture. Anyway, here goes: Chapter 1: Indentation Tabs are 8 characters, and thus indentations are also 8 characters. There are heretic movements that try to make indentations 4 (or even 2!) characters deep, and that is akin to trying to define the value of PI to be 3. Rationale: The whole idea behind indentation is to clearly define where a block of control starts and ends. Especially when you've been looking at your screen for 20 straight hours, you'll find it a lot easier to see how the indentation works if you have large indentations. Now, some people will claim that having 8-character indentations makes the code move too far to the right, and makes it hard to read on a 80-character terminal screen. The answer to that is that if you need more than 3 levels of indentation, you're screwed anyway, and should fix your program. In short, 8-char indents make things easier to read, and have the added benefit of warning you when you're nesting your functions too deep. Heed that warning. The preferred way to ease multiple indentation levels in a switch statement is to align the ""switch"" and its subordinate ""case"" labels in the same column instead of ""double-indenting"" the ""case"" labels. E.g.: switch (suffix) { case 'G': case 'g': mem <<= 30; break; case 'M': case 'm': mem <<= 20; break; case 'K': case 'k': mem <<= 10; /* fall through */ default: break; } Don't put multiple statements on a single line unless you have something to hide: if (condition) do_this; do_something_everytime; Don't put multiple assignments on a single line either. Kernel coding style is super simple. Avoid tricky expressions. Outside of comments, documentation and except in Kconfig, spaces are never used for indentation, and the above example is deliberately broken. Get a decent editor and don't leave whitespace at the end of lines. Chapter 2: Breaking long lines and strings Coding style is all about readability and maintainability using commonly available tools. The limit on the length of lines is 80 columns and this is a strongly preferred limit. Statements longer than 80 columns will be broken into sensible chunks, unless exceeding 80 columns significantly increases readability and does not hide information. Descendants are always substantially shorter than the parent and are placed substantially to the right. The same applies to function headers with a long argument list. However, never break user-visible strings such as printk messages, because that breaks the ability to grep for them. Chapter 3: Placing Braces and Spaces The other issue that always comes up in C styling is the placement of braces. Unlike the indent size, there are few technical reasons to choose one placement strategy over the other, but the preferred way, as shown to us by the prophets Kernighan and Ritchie, is to put the opening brace last on the line, and put the closing brace first, thusly: if (x is true) { we do y } This applies to all non-function statement blocks (if, switch, for, while, do). E.g.: switch (action) { case KOBJ_ADD: return ""add""; case KOBJ_REMOVE: return ""remove""; case KOBJ_CHANGE: return ""change""; default: return NULL; } However, there is one special case, namely functions: they have the opening brace at the beginning of the next line, thus: int function(int x) { body of function } Heretic people all over the world have claimed that this inconsistency is ... well ... inconsistent, but all right-thinking people know that (a) K&R are _right_ and (b) K&R are right. Besides, functions are special anyway (you can't nest them in C). Note that the closing brace is empty on a line of its own, _except_ in the cases where it is followed by a continuation of the same statement, ie a ""while"" in a do-statement or an ""else"" in an if-statement, like this: do { body of do-loop } while (condition); and if (x == y) { .. } else if (x > y) { ... } else { .... } Rationale: K&R. Also, note that this brace-placement also minimizes the number of empty (or almost empty) lines, without any loss of readability. Thus, as the supply of new-lines on your screen is not a renewable resource (think 25-line terminal screens here), you have more empty lines to put comments on. Do not unnecessarily use braces where a single statement will do. if (condition) action(); and if (condition) do_this(); else do_that(); This does not apply if only one branch of a conditional statement is a single statement; in the latter case use braces in both branches: if (condition) { do_this(); do_that(); } else { otherwise(); } 3.1: Spaces Linux kernel style for use of spaces depends (mostly) on function-versus-keyword usage. Use a space after (most) keywords. The notable exceptions are sizeof, typeof, alignof, and __attribute__, which look somewhat like functions (and are usually used with parentheses in Linux, although they are not required in the language, as in: ""sizeof info"" after ""struct fileinfo info;"" is declared). So use a space after these keywords: if, switch, case, for, do, while but not with sizeof, typeof, alignof, or __attribute__. E.g., s = sizeof(struct file); Do not add spaces around (inside) parenthesized expressions. This example is *bad*: s = sizeof( struct file ); When declaring pointer data or a function that returns a pointer type, the preferred use of '*' is adjacent to the data name or function name and not adjacent to the type name. Examples: char *linux_banner; unsigned long long memparse(char *ptr, char **retptr); char *match_strdup(substring_t *s); Use one space around (on each side of) most binary and ternary operators, such as any of these: = + - < > * / % | & ^ <= >= == != ? : but no space after unary operators: & * + - ~ ! sizeof typeof alignof __attribute__ defined no space before the postfix increment & decrement unary operators: ++ -- no space after the prefix increment & decrement unary operators: ++ -- and no space around the '.' and ""->"" structure member operators. Do not leave trailing whitespace at the ends of lines. Some editors with ""smart"" indentation will insert whitespace at the beginning of new lines as appropriate, so you can start typing the next line of code right away. However, some such editors do not remove the whitespace if you end up not putting a line of code there, such as if you leave a blank line. As a result, you end up with lines containing trailing whitespace. Git will warn you about patches that introduce trailing whitespace, and can optionally strip the trailing whitespace for you; however, if applying a series of patches, this may make later patches in the series fail by changing their context lines. Chapter 4: Naming C is a Spartan language, and so should your naming be. Unlike Modula-2 and Pascal programmers, C programmers do not use cute names like ThisVariableIsATemporaryCounter. A C programmer would call that variable ""tmp"", which is much easier to write, and not the least more difficult to understand. HOWEVER, while mixed-case names are frowned upon, descriptive names for global variables are a must. To call a global function ""foo"" is a shooting offense. GLOBAL variables (to be used only if you _really_ need them) need to have descriptive names, as do global functions. If you have a function that counts the number of active users, you should call that ""count_active_users()"" or similar, you should _not_ call it ""cntusr()"". Encoding the type of a function into the name (so-called Hungarian notation) is brain damaged - the compiler knows the types anyway and can check those, and it only confuses the programmer. No wonder MicroSoft makes buggy programs. LOCAL variable names should be short, and to the point. If you have some random integer loop counter, it should probably be called ""i"". Calling it ""loop_counter"" is non-productive, if there is no chance of it being mis-understood. Similarly, ""tmp"" can be just about any type of variable that is used to hold a temporary value. If you are afraid to mix up your local variable names, you have another problem, which is called the function-growth-hormone-imbalance syndrome. See chapter 6 (Functions). Chapter 5: Typedefs Please don't use things like ""vps_t"". It's a _mistake_ to use typedef for structures and pointers. When you see a vps_t a; in the source, what does it mean? In contrast, if it says struct virtual_container *a; you can actually tell what ""a"" is. Lots of people think that typedefs ""help readability"". Not so. They are useful only for: (a) totally opaque objects (where the typedef is actively used to _hide_ what the object is). Example: ""pte_t"" etc. opaque objects that you can only access using the proper accessor functions. NOTE! Opaqueness and ""accessor functions"" are not good in themselves. The reason we have them for things like pte_t etc. is that there really is absolutely _zero_ portably accessible information there. (b) Clear integer types, where the abstraction _helps_ avoid confusion whether it is ""int"" or ""long"". u8/u16/u32 are perfectly fine typedefs, although they fit into category (d) better than here. NOTE! Again - there needs to be a _reason_ for this. If something is ""unsigned long"", then there's no reason to do typedef unsigned long myflags_t; but if there is a clear reason for why it under certain circumstances might be an ""unsigned int"" and under other configurations might be ""unsigned long"", then by all means go ahead and use a typedef. (c) when you use sparse to literally create a _new_ type for type-checking. (d) New types which are identical to standard C99 types, in certain exceptional circumstances. Although it would only take a short amount of time for the eyes and brain to become accustomed to the standard types like 'uint32_t', some people object to their use anyway. Therefore, the Linux-specific 'u8/u16/u32/u64' types and their signed equivalents which are identical to standard types are permitted -- although they are not mandatory in new code of your own. When editing existing code which already uses one or the other set of types, you should conform to the existing choices in that code. (e) Types safe for use in userspace. In certain structures which are visible to userspace, we cannot require C99 types and cannot use the 'u32' form above. Thus, we use __u32 and similar types in all structures which are shared with userspace. Maybe there are other cases too, but the rule should basically be to NEVER EVER use a typedef unless you can clearly match one of those rules. In general, a pointer, or a struct that has elements that can reasonably be directly accessed should _never_ be a typedef. Chapter 6: Functions Functions should be short and sweet, and do just one thing. They should fit on one or two screenfuls of text (the ISO/ANSI screen size is 80x24, as we all know), and do one thing and do that well. The maximum length of a function is inversely proportional to the complexity and indentation level of that function. So, if you have a conceptually simple function that is just one long (but simple) case-statement, where you have to do lots of small things for a lot of different cases, it's OK to have a longer function. However, if you have a complex function, and you suspect that a less-than-gifted first-year high-school student might not even understand what the function is all about, you should adhere to the maximum limits all the more closely. Use helper functions with descriptive names (you can ask the compiler to in-line them if you think it's performance-critical, and it will probably do a better job of it than you would have done). Another measure of the function is the number of local variables. They shouldn't exceed 5-10, or you're doing something wrong. Re-think the function, and split it into smaller pieces. A human brain can generally easily keep track of about 7 different things, anything more and it gets confused. You know you're brilliant, but maybe you'd like to understand what you did 2 weeks from now. In source files, separate functions with one blank line. If the function is exported, the EXPORT* macro for it should follow immediately after the closing function brace line. E.g.: int system_is_up(void) { return system_state == SYSTEM_RUNNING; } EXPORT_SYMBOL(system_is_up); In function prototypes, include parameter names with their data types. Although this is not required by the C language, it is preferred in Linux because it is a simple way to add valuable information for the reader. Chapter 7: Centralized exiting of functions Albeit deprecated by some people, the equivalent of the goto statement is used frequently by compilers in form of the unconditional jump instruction. The goto statement comes in handy when a function exits from multiple locations and some common work such as cleanup has to be done. If there is no cleanup needed then just return directly. Choose label names which say what the goto does or why the goto exists. An example of a good name could be ""out_buffer:"" if the goto frees ""buffer"". Avoid using GW-BASIC names like ""err1:"" and ""err2:"". Also don't name them after the goto location like ""err_kmalloc_failed:"" The rationale for using gotos is: - unconditional statements are easier to understand and follow - nesting is reduced - errors by not updating individual exit points when making modifications are prevented - saves the compiler work to optimize redundant code away ;) int fun(int a) { int result = 0; char *buffer; buffer = kmalloc(SIZE, GFP_KERNEL); if (!buffer) return -ENOMEM; if (condition1) { while (loop1) { ... } result = 1; goto out_buffer; } ... out_buffer: kfree(buffer); return result; } A common type of bug to be aware of is ""one err bugs"" which look like this: err: kfree(foo->bar); kfree(foo); return ret; The bug in this code is that on some exit paths ""foo"" is NULL. Normally the fix for this is to split it up into two error labels ""err_bar:"" and ""err_foo:"". Chapter 8: Commenting Comments are good, but there is also a danger of over-commenting. NEVER try to explain HOW your code works in a comment: it's much better to write the code so that the _working_ is obvious, and it's a waste of time to explain badly written code. Generally, you want your comments to tell WHAT your code does, not HOW. Also, try to avoid putting comments inside a function body: if the function is so complex that you need to separately comment parts of it, you should probably go back to chapter 6 for a while. You can make small comments to note or warn about something particularly clever (or ugly), but try to avoid excess. Instead, put the comments at the head of the function, telling people what it does, and possibly WHY it does it. When commenting the kernel API functions, please use the kernel-doc format. See the files Documentation/kernel-doc-nano-HOWTO.txt and scripts/kernel-doc for details. Linux style for comments is the C89 ""/* ... */"" style. Don't use C99-style ""// ..."" comments. The preferred style for long (multi-line) comments is: /* * This is the preferred style for multi-line * comments in the Linux kernel source code. * Please use it consistently. * * Description: A column of asterisks on the left side, * with beginning and ending almost-blank lines. */ For files in net/ and drivers/net/ the preferred style for long (multi-line) comments is a little different. /* The preferred comment style for files in net/ and drivers/net * looks like this. * * It is nearly the same as the generally preferred comment style, * but there is no initial almost-blank line. */ It's also important to comment data, whether they are basic types or derived types. To this end, use just one data declaration per line (no commas for multiple data declarations). This leaves you room for a small comment on each item, explaining its use. Chapter 9: You've made a mess of it That's OK, we all do. You've probably been told by your long-time Unix user helper that ""GNU emacs"" automatically formats the C sources for you, and you've noticed that yes, it does do that, but the defaults it uses are less than desirable (in fact, they are worse than random typing - an infinite number of monkeys typing into GNU emacs would never make a good program). So, you can either get rid of GNU emacs, or change it to use saner values. To do the latter, you can stick the following in your .emacs file: (defun c-lineup-arglist-tabs-only (ignored) ""Line up argument lists by tabs, not spaces"" (let* ((anchor (c-langelem-pos c-syntactic-element)) (column (c-langelem-2nd-pos c-syntactic-element)) (offset (- (1+ column) anchor)) (steps (floor offset c-basic-offset))) (* (max steps 1) c-basic-offset))) (add-hook 'c-mode-common-hook (lambda () ;; Add kernel style (c-add-style ""linux-tabs-only"" '(""linux"" (c-offsets-alist (arglist-cont-nonempty c-lineup-gcc-asm-reg c-lineup-arglist-tabs-only)))))) (add-hook 'c-mode-hook (lambda () (let ((filename (buffer-file-name))) ;; Enable kernel mode for the appropriate files (when (and filename (string-match (expand-file-name ""~/src/linux-trees"") filename)) (setq indent-tabs-mode t) (setq show-trailing-whitespace t) (c-set-style ""linux-tabs-only""))))) This will make emacs go better with the kernel coding style for C files below ~/src/linux-trees. But even if you fail in getting emacs to do sane formatting, not everything is lost: use ""indent"". Now, again, GNU indent has the same brain-dead settings that GNU emacs has, which is why you need to give it a few command line options. However, that's not too bad, because even the makers of GNU indent recognize the authority of K&R (the GNU people aren't evil, they are just severely misguided in this matter), so you just give indent the options ""-kr -i8"" (stands for ""K&R, 8 character indents""), or use ""scripts/Lindent"", which indents in the latest style. ""indent"" has a lot of options, and especially when it comes to comment re-formatting you may want to take a look at the man page. But remember: ""indent"" is not a fix for bad programming. Chapter 10: Kconfig configuration files For all of the Kconfig* configuration files throughout the source tree, the indentation is somewhat different. Lines under a ""config"" definition are indented with one tab, while help text is indented an additional two spaces. Example: config AUDIT bool ""Auditing support"" depends on NET help Enable auditing infrastructure that can be used with another kernel subsystem, such as SELinux (which requires this for logging of avc messages output). Does not do system-call auditing without CONFIG_AUDITSYSCALL. Seriously dangerous features (such as write support for certain filesystems) should advertise this prominently in their prompt string: config ADFS_FS_RW bool ""ADFS write support (DANGEROUS)"" depends on ADFS_FS ... For full documentation on the configuration files, see the file Documentation/kbuild/kconfig-language.txt. Chapter 11: Data structures Data structures that have visibility outside the single-threaded environment they are created and destroyed in should always have reference counts. In the kernel, garbage collection doesn't exist (and outside the kernel garbage collection is slow and inefficient), which means that you absolutely _have_ to reference count all your uses. Reference counting means that you can avoid locking, and allows multiple users to have access to the data structure in parallel - and not having to worry about the structure suddenly going away from under them just because they slept or did something else for a while. Note that locking is _not_ a replacement for reference counting. Locking is used to keep data structures coherent, while reference counting is a memory management technique. Usually both are needed, and they are not to be confused with each other. Many data structures can indeed have two levels of reference counting, when there are users of different ""classes"". The subclass count counts the number of subclass users, and decrements the global count just once when the subclass count goes to zero. Examples of this kind of ""multi-level-reference-counting"" can be found in memory management (""struct mm_struct"": mm_users and mm_count), and in filesystem code (""struct super_block"": s_count and s_active). Remember: if another thread can find your data structure, and you don't have a reference count on it, you almost certainly have a bug. Chapter 12: Macros, Enums and RTL Names of macros defining constants and labels in enums are capitalized. #define CONSTANT 0x12345 Enums are preferred when defining several related constants. CAPITALIZED macro names are appreciated but macros resembling functions may be named in lower case. Generally, inline functions are preferable to macros resembling functions. Macros with multiple statements should be enclosed in a do - while block: #define macrofun(a, b, c) \ do { \ if (a == 5) \ do_this(b, c); \ } while (0) Things to avoid when using macros: 1) macros that affect control flow: #define FOO(x) \ do { \ if (blah(x) < 0) \ return -EBUGGERED; \ } while (0) is a _very_ bad idea. It looks like a function call but exits the ""calling"" function; don't break the internal parsers of those who will read the code. 2) macros that depend on having a local variable with a magic name: #define FOO(val) bar(index, val) might look like a good thing, but it's confusing as hell when one reads the code and it's prone to breakage from seemingly innocent changes. 3) macros with arguments that are used as l-values: FOO(x) = y; will bite you if somebody e.g. turns FOO into an inline function. 4) forgetting about precedence: macros defining constants using expressions must enclose the expression in parentheses. Beware of similar issues with macros using parameters. #define CONSTANT 0x4000 #define CONSTEXP (CONSTANT | 3) 5) namespace collisions when defining local variables in macros resembling functions: #define FOO(x) \ ({ \ typeof(x) ret; \ ret = calc_ret(x); \ (ret); \ }) ret is a common name for a local variable - __foo_ret is less likely to collide with an existing variable. The cpp manual deals with macros exhaustively. The gcc internals manual also covers RTL which is used frequently with assembly language in the kernel. Chapter 13: Printing kernel messages Kernel developers like to be seen as literate. Do mind the spelling of kernel messages to make a good impression. Do not use crippled words like ""dont""; use ""do not"" or ""don't"" instead. Make the messages concise, clear, and unambiguous. Kernel messages do not have to be terminated with a period. Printing numbers in parentheses (%d) adds no value and should be avoided. There are a number of driver model diagnostic macros in which you should use to make sure messages are matched to the right device and driver, and are tagged with the right level: dev_err(), dev_warn(), dev_info(), and so forth. For messages that aren't associated with a particular device, defines pr_notice(), pr_info(), pr_warn(), pr_err(), etc. Coming up with good debugging messages can be quite a challenge; and once you have them, they can be a huge help for remote troubleshooting. However debug message printing is handled differently than printing other non-debug messages. While the other pr_XXX() functions print unconditionally, pr_debug() does not; it is compiled out by default, unless either DEBUG is defined or CONFIG_DYNAMIC_DEBUG is set. That is true for dev_dbg() also, and a related convention uses VERBOSE_DEBUG to add dev_vdbg() messages to the ones already enabled by DEBUG. Many subsystems have Kconfig debug options to turn on -DDEBUG in the corresponding Makefile; in other cases specific files #define DEBUG. And when a debug message should be unconditionally printed, such as if it is already inside a debug-related #ifdef section, printk(KERN_DEBUG ...) can be used. Chapter 14: Allocating memory The kernel provides the following general purpose memory allocators: kmalloc(), kzalloc(), kmalloc_array(), kcalloc(), vmalloc(), and vzalloc(). Please refer to the API documentation for further information about them. The preferred form for passing a size of a struct is the following: p = kmalloc(sizeof(*p), ...); The alternative form where struct name is spelled out hurts readability and introduces an opportunity for a bug when the pointer variable type is changed but the corresponding sizeof that is passed to a memory allocator is not. Casting the return value which is a void pointer is redundant. The conversion from void pointer to any other pointer type is guaranteed by the C programming language. The preferred form for allocating an array is the following: p = kmalloc_array(n, sizeof(...), ...); The preferred form for allocating a zeroed array is the following: p = kcalloc(n, sizeof(...), ...); Both forms check for overflow on the allocation size n * sizeof(...), and return NULL if that occurred. Chapter 15: The inline disease There appears to be a common misperception that gcc has a magic ""make me faster"" speedup option called ""inline"". While the use of inlines can be appropriate (for example as a means of replacing macros, see Chapter 12), it very often is not. Abundant use of the inline keyword leads to a much bigger kernel, which in turn slows the system as a whole down, due to a bigger icache footprint for the CPU and simply because there is less memory available for the pagecache. Just think about it; a pagecache miss causes a disk seek, which easily takes 5 milliseconds. There are a LOT of cpu cycles that can go into these 5 milliseconds. A reasonable rule of thumb is to not put inline at functions that have more than 3 lines of code in them. An exception to this rule are the cases where a parameter is known to be a compiletime constant, and as a result of this constantness you *know* the compiler will be able to optimize most of your function away at compile time. For a good example of this later case, see the kmalloc() inline function. Often people argue that adding inline to functions that are static and used only once is always a win since there is no space tradeoff. While this is technically correct, gcc is capable of inlining these automatically without help, and the maintenance issue of removing the inline when a second user appears outweighs the potential value of the hint that tells gcc to do something it would have done anyway. Chapter 16: Function return values and names Functions can return values of many different kinds, and one of the most common is a value indicating whether the function succeeded or failed. Such a value can be represented as an error-code integer (-Exxx = failure, 0 = success) or a ""succeeded"" boolean (0 = failure, non-zero = success). Mixing up these two sorts of representations is a fertile source of difficult-to-find bugs. If the C language included a strong distinction between integers and booleans then the compiler would find these mistakes for us... but it doesn't. To help prevent such bugs, always follow this convention: If the name of a function is an action or an imperative command, the function should return an error-code integer. If the name is a predicate, the function should return a ""succeeded"" boolean. For example, ""add work"" is a command, and the add_work() function returns 0 for success or -EBUSY for failure. In the same way, ""PCI device present"" is a predicate, and the pci_dev_present() function returns 1 if it succeeds in finding a matching device or 0 if it doesn't. All EXPORTed functions must respect this convention, and so should all public functions. Private (static) functions need not, but it is recommended that they do. Functions whose return value is the actual result of a computation, rather than an indication of whether the computation succeeded, are not subject to this rule. Generally they indicate failure by returning some out-of-range result. Typical examples would be functions that return pointers; they use NULL or the ERR_PTR mechanism to report failure. Chapter 17: Don't re-invent the kernel macros The header file include/linux/kernel.h contains a number of macros that you should use, rather than explicitly coding some variant of them yourself. For example, if you need to calculate the length of an array, take advantage of the macro #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) Similarly, if you need to calculate the size of some structure member, use #define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f)) There are also min() and max() macros that do strict type checking if you need them. Feel free to peruse that header file to see what else is already defined that you shouldn't reproduce in your code. Chapter 18: Editor modelines and other cruft Some editors can interpret configuration information embedded in source files, indicated with special markers. For example, emacs interprets lines marked like this: -*- mode: c -*- Or like this: /* Local Variables: compile-command: ""gcc -DMAGIC_DEBUG_FLAG foo.c"" End: */ Vim interprets markers that look like this: /* vim:set sw=8 noet */ Do not include any of these in source files. People have their own personal editor configurations, and your source files should not override them. This includes markers for indentation and mode configuration. People may use their own custom mode, or may have some other magic method for making indentation work correctly. Chapter 19: Inline assembly In architecture-specific code, you may need to use inline assembly to interface with CPU or platform functionality. Don't hesitate to do so when necessary. However, don't use inline assembly gratuitously when C can do the job. You can and should poke hardware from C when possible. Consider writing simple helper functions that wrap common bits of inline assembly, rather than repeatedly writing them with slight variations. Remember that inline assembly can use C parameters. Large, non-trivial assembly functions should go in .S files, with corresponding C prototypes defined in C header files. The C prototypes for assembly functions should use ""asmlinkage"". You may need to mark your asm statement as volatile, to prevent GCC from removing it if GCC doesn't notice any side effects. You don't always need to do so, though, and doing so unnecessarily can limit optimization. When writing a single inline assembly statement containing multiple instructions, put each instruction on a separate line in a separate quoted string, and end each string except the last with \n\t to properly indent the next instruction in the assembly output: asm (""magic %reg1, #42\n\t"" ""more_magic %reg2, %reg3"" : /* outputs */ : /* inputs */ : /* clobbers */); Chapter 20: Conditional Compilation Wherever possible, don't use preprocessor conditionals (#if, #ifdef) in .c files; doing so makes code harder to read and logic harder to follow. Instead, use such conditionals in a header file defining functions for use in those .c files, providing no-op stub versions in the #else case, and then call those functions unconditionally from .c files. The compiler will avoid generating any code for the stub calls, producing identical results, but the logic will remain easy to follow. Prefer to compile out entire functions, rather than portions of functions or portions of expressions. Rather than putting an ifdef in an expression, factor out part or all of the expression into a separate helper function and apply the conditional to that function. If you have a function or variable which may potentially go unused in a particular configuration, and the compiler would warn about its definition going unused, mark the definition as __maybe_unused rather than wrapping it in a preprocessor conditional. (However, if a function or variable *always* goes unused, delete it.) Within code, where possible, use the IS_ENABLED macro to convert a Kconfig symbol into a C boolean expression, and use it in a normal C conditional: if (IS_ENABLED(CONFIG_SOMETHING)) { ... } The compiler will constant-fold the conditional away, and include or exclude the block of code just as with an #ifdef, so this will not add any runtime overhead. However, this approach still allows the C compiler to see the code inside the block, and check it for correctness (syntax, types, symbol references, etc). Thus, you still have to use an #ifdef if the code inside the block references symbols that will not exist if the condition is not met. At the end of any non-trivial #if or #ifdef block (more than a few lines), place a comment after the #endif on the same line, noting the conditional expression used. For instance: #ifdef CONFIG_SOMETHING ... #endif /* CONFIG_SOMETHING */ Appendix I: References The C Programming Language, Second Edition by Brian W. Kernighan and Dennis M. Ritchie. Prentice Hall, Inc., 1988. ISBN 0-13-110362-8 (paperback), 0-13-110370-9 (hardback). The Practice of Programming by Brian W. Kernighan and Rob Pike. Addison-Wesley, Inc., 1999. ISBN 0-201-61586-X. GNU manuals - where in compliance with K&R and this text - for cpp, gcc, gcc internals and indent, all available from http://www.gnu.org/manual/ WG14 is the international standardization working group for the programming language C, URL: http://www.open-std.org/JTC1/SC22/WG14/ Kernel CodingStyle, by greg@kroah.com at OLS 2002: http://www.kroah.com/linux/talks/ols_2002_kernel_codingstyle_talk/html/"	"null"	"null"	""	"true"
"Coding Style"	"LLVM Coding Standards"	"http://llvm.org/docs/CodingStandards.html"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LLVM Coding Standards — LLVM 3.9 documentation Navigation index next | previous | LLVM Home |  Documentation» LLVM Coding Standards¶ Introduction Languages, Libraries, and Standards C++ Standard Versions C++ Standard Library Supported C++11 Language and Library Features Other Languages Mechanical Source Issues Source Code Formatting Commenting File Headers Class overviews Method information Comment Formatting Doxygen Use in Documentation Comments #include Style Source Code Width Use Spaces Instead of Tabs Indent Code Consistently Format Lambdas Like Blocks Of Code Braced Initializer Lists Language and Compiler Issues Treat Compiler Warnings Like Errors Write Portable Code Do not use RTTI or Exceptions Do not use Static Constructors Use of class and struct Keywords Do not use Braced Initializer Lists to Call a Constructor Use auto Type Deduction to Make Code More Readable Beware unnecessary copies with auto Style Issues The High-Level Issues A Public Header File is a Module #include as Little as Possible Keep “Internal” Headers Private Use Early Exits and continue to Simplify Code Don’t use else after a return Turn Predicate Loops into Predicate Functions The Low-Level Issues Name Types, Functions, Variables, and Enumerators Properly Assert Liberally Do Not Use using namespace std Provide a Virtual Method Anchor for Classes in Headers Don’t use default labels in fully covered switches over enumerations Don’t evaluate end() every time through a loop #include <iostream> is Forbidden Use raw_ostream Avoid std::endl Don’t use inline when defining a function in a class definition Microscopic Details Spaces Before Parentheses Prefer Preincrement Namespace Indentation Anonymous Namespaces See Also Introduction¶ This document attempts to describe a few coding standards that are being used in the LLVM source tree. Although no coding standards should be regarded as absolute requirements to be followed in all instances, coding standards are particularly important for large-scale code bases that follow a library-based design (like LLVM). While this document may provide guidance for some mechanical formatting issues, whitespace, or other “microscopic details”, these are not fixed standards. Always follow the golden rule: If you are extending, enhancing, or bug fixing already implemented code, use the style that is already being used so that the source is uniform and easy to follow. Note that some code bases (e.g. libc++) have really good reasons to deviate from the coding standards. In the case of libc++, this is because the naming and other conventions are dictated by the C++ standard. If you think there is a specific good reason to deviate from the standards here, please bring it up on the LLVM-dev mailing list. There are some conventions that are not uniformly followed in the code base (e.g. the naming convention). This is because they are relatively new, and a lot of code was written before they were put in place. Our long term goal is for the entire codebase to follow the convention, but we explicitly do not want patches that do large-scale reformating of existing code. On the other hand, it is reasonable to rename the methods of a class if you’re about to change it in some other way. Just do the reformating as a separate commit from the functionality change. The ultimate goal of these guidelines is to increase the readability and maintainability of our common source base. If you have suggestions for topics to be included, please mail them to Chris. Languages, Libraries, and Standards¶ Most source code in LLVM and other LLVM projects using these coding standards is C++ code. There are some places where C code is used either due to environment restrictions, historical restrictions, or due to third-party source code imported into the tree. Generally, our preference is for standards conforming, modern, and portable C++ code as the implementation language of choice. C++ Standard Versions¶ LLVM, Clang, and LLD are currently written using C++11 conforming code, although we restrict ourselves to features which are available in the major toolchains supported as host compilers. The LLDB project is even more aggressive in the set of host compilers supported and thus uses still more features. Regardless of the supported features, code is expected to (when reasonable) be standard, portable, and modern C++11 code. We avoid unnecessary vendor-specific extensions, etc. C++ Standard Library¶ Use the C++ standard library facilities whenever they are available for a particular task. LLVM and related projects emphasize and rely on the standard library facilities for as much as possible. Common support libraries providing functionality missing from the standard library for which there are standard interfaces or active work on adding standard interfaces will often be implemented in the LLVM namespace following the expected standard interface. There are some exceptions such as the standard I/O streams library which are avoided. Also, there is much more detailed information on these subjects in the LLVM Programmer’s Manual. Supported C++11 Language and Library Features¶ While LLVM, Clang, and LLD use C++11, not all features are available in all of the toolchains which we support. The set of features supported for use in LLVM is the intersection of those supported in MSVC 2013, GCC 4.7, and Clang 3.1. The ultimate definition of this set is what build bots with those respective toolchains accept. Don’t argue with the build bots. However, we have some guidance below to help you know what to expect. Each toolchain provides a good reference for what it accepts: Clang: http://clang.llvm.org/cxx_status.html GCC: http://gcc.gnu.org/projects/cxx0x.html MSVC: http://msdn.microsoft.com/en-us/library/hh567368.aspx In most cases, the MSVC list will be the dominating factor. Here is a summary of the features that are expected to work. Features not on this list are unlikely to be supported by our host compilers. Rvalue references: N2118 But not Rvalue references for *this or member qualifiers (N2439) Static assert: N1720 auto type deduction: N1984, N1737 Trailing return types: N2541 Lambdas: N2927 But not lambdas with default arguments. decltype: N2343 Nested closing right angle brackets: N1757 Extern templates: N1987 nullptr: N2431 Strongly-typed and forward declarable enums: N2347, N2764 Local and unnamed types as template arguments: N2657 Range-based for-loop: N2930 But {} are required around inner do {} while() loops. As a result, {} are required around function-like macros inside range-based for loops. override and final: N2928, N3206, N3272 Atomic operations and the C++11 memory model: N2429 Variadic templates: N2242 Explicit conversion operators: N2437 Defaulted and deleted functions: N2346 But not defaulted move constructors or move assignment operators, MSVC 2013 cannot synthesize them. Initializer lists: N2627 Delegating constructors: N1986 Default member initializers (non-static data member initializers): N2756 Only use these for scalar members that would otherwise be left uninitialized. Non-scalar members generally have appropriate default constructors, and MSVC 2013 has problems when braced initializer lists are involved. The supported features in the C++11 standard libraries are less well tracked, but also much greater. Most of the standard libraries implement most of C++11’s library. The most likely lowest common denominator is Linux support. For libc++, the support is just poorly tested and undocumented but expected to be largely complete. YMMV. For libstdc++, the support is documented in detail in the libstdc++ manual. There are some very minor missing facilities that are unlikely to be common problems, and there are a few larger gaps that are worth being aware of: Not all of the type traits are implemented No regular expression library. While most of the atomics library is well implemented, the fences are missing. Fortunately, they are rarely needed. The locale support is incomplete. Other than these areas you should assume the standard library is available and working as expected until some build bot tells you otherwise. If you’re in an uncertain area of one of the above points, but you cannot test on a Linux system, your best approach is to minimize your use of these features, and watch the Linux build bots to find out if your usage triggered a bug. For example, if you hit a type trait which doesn’t work we can then add support to LLVM’s traits header to emulate it. Other Languages¶ Any code written in the Go programming language is not subject to the formatting rules below. Instead, we adopt the formatting rules enforced by the gofmt tool. Go code should strive to be idiomatic. Two good sets of guidelines for what this means are Effective Go and Go Code Review Comments. Mechanical Source Issues¶ Source Code Formatting¶ Commenting¶ Comments are one critical part of readability and maintainability. Everyone knows they should comment their code, and so should you. When writing comments, write them as English prose, which means they should use proper capitalization, punctuation, etc. Aim to describe what the code is trying to do and why, not how it does it at a micro level. Here are a few critical things to document: File Headers¶ Every source file should have a header on it that describes the basic purpose of the file. If a file does not have a header, it should not be checked into the tree. The standard header looks like this: //===-- llvm/Instruction.h - Instruction class definition -------*- C++ -*-===// // //                     The LLVM Compiler Infrastructure // // This file is distributed under the University of Illinois Open Source // License. See LICENSE.TXT for details. // //===----------------------------------------------------------------------===// /// /// \file /// This file contains the declaration of the Instruction class, which is the /// base class for all of the VM instructions. /// //===----------------------------------------------------------------------===//  A few things to note about this particular format: The “-*- C++ -*-” string on the first line is there to tell Emacs that the source file is a C++ file, not a C file (Emacs assumes .h files are C files by default). Note This tag is not necessary in .cpp files. The name of the file is also on the first line, along with a very short description of the purpose of the file. This is important when printing out code and flipping though lots of pages. The next section in the file is a concise note that defines the license that the file is released under. This makes it perfectly clear what terms the source code can be distributed under and should not be modified in any way. The main body is a doxygen comment (identified by the /// comment marker instead of the usual //) describing the purpose of the file. The first sentence or a passage beginning with \brief is used as an abstract. Any additional information should be separated by a blank line. If an algorithm is being implemented or something tricky is going on, a reference to the paper where it is published should be included, as well as any notes or gotchas in the code to watch out for. Class overviews¶ Classes are one fundamental part of a good object oriented design. As such, a class definition should have a comment block that explains what the class is used for and how it works. Every non-trivial class is expected to have a doxygen comment block. Method information¶ Methods defined in a class (as well as any global functions) should also be documented properly. A quick note about what it does and a description of the borderline behaviour is all that is necessary here (unless something particularly tricky or insidious is going on). The hope is that people can figure out how to use your interfaces without reading the code itself. Good things to talk about here are what happens when something unexpected happens: does the method return null? Abort? Format your hard disk? Comment Formatting¶ In general, prefer C++ style comments (// for normal comments, /// for doxygen documentation comments). They take less space, require less typing, don’t have nesting problems, etc. There are a few cases when it is useful to use C style (/* */) comments however: When writing C code: Obviously if you are writing C code, use C style comments. When writing a header file that may be #included by a C source file. When writing a source file that is used by a tool that only accepts C style comments. To comment out a large block of code, use #if 0 and #endif. These nest properly and are better behaved in general than C style comments. Doxygen Use in Documentation Comments¶ Use the \file command to turn the standard file header into a file-level comment. Include descriptive paragraphs for all public interfaces (public classes, member and non-member functions). Don’t just restate the information that can be inferred from the API name. The first sentence or a paragraph beginning with \brief is used as an abstract. Put detailed discussion into separate paragraphs. To refer to parameter names inside a paragraph, use the \p name command. Don’t use the \arg name command since it starts a new paragraph that contains documentation for the parameter. Wrap non-inline code examples in \code ... \endcode. To document a function parameter, start a new paragraph with the \param name command. If the parameter is used as an out or an in/out parameter, use the \param [out] name or \param [in,out] name command, respectively. To describe function return value, start a new paragraph with the \returns command. A minimal documentation comment: /// Sets the xyzzy property to \p Baz. void setXyzzy(bool Baz);  A documentation comment that uses all Doxygen features in a preferred way: /// \brief Does foo and bar. /// /// Does not do foo the usual way if \p Baz is true. /// /// Typical usage: /// \code ///   fooBar(false, ""quux"", Res); /// \endcode /// /// \param Quux kind of foo to do. /// \param [out] Result filled with bar sequence on foo success. /// /// \returns true on success. bool fooBar(bool Baz, StringRef Quux, std::vector<int> &Result);  Don’t duplicate the documentation comment in the header file and in the implementation file. Put the documentation comments for public APIs into the header file. Documentation comments for private APIs can go to the implementation file. In any case, implementation files can include additional comments (not necessarily in Doxygen markup) to explain implementation details as needed. Don’t duplicate function or class name at the beginning of the comment. For humans it is obvious which function or class is being documented; automatic documentation processing tools are smart enough to bind the comment to the correct declaration. Wrong: // In Something.h:  /// Something - An abstraction for some complicated thing. class Something { public:   /// fooBar - Does foo and bar.   void fooBar(); };  // In Something.cpp:  /// fooBar - Does foo and bar. void Something::fooBar() { ... }  Correct: // In Something.h:  /// An abstraction for some complicated thing. class Something { public:   /// Does foo and bar.   void fooBar(); };  // In Something.cpp:  // Builds a B-tree in order to do foo.  See paper by... void Something::fooBar() { ... }  It is not required to use additional Doxygen features, but sometimes it might be a good idea to do so. Consider: adding comments to any narrow namespace containing a collection of related functions or types; using top-level groups to organize a collection of related functions at namespace scope where the grouping is smaller than the namespace; using member groups and additional comments attached to member groups to organize within a class. For example: class Something {   /// \name Functions that do Foo.   /// @{   void fooBar();   void fooBaz();   /// @}   ... };  #include Style¶ Immediately after the header file comment (and include guards if working on a header file), the minimal list of #includes required by the file should be listed. We prefer these #includes to be listed in this order: Main Module Header Local/Private Headers llvm/... System #includes and each category should be sorted lexicographically by the full path. The Main Module Header file applies to .cpp files which implement an interface defined by a .h file. This #include should always be included first regardless of where it lives on the file system. By including a header file first in the .cpp files that implement the interfaces, we ensure that the header does not have any hidden dependencies which are not explicitly #included in the header, but should be. It is also a form of documentation in the .cpp file to indicate where the interfaces it implements are defined. Source Code Width¶ Write your code to fit within 80 columns of text. This helps those of us who like to print out code and look at your code in an xterm without resizing it. The longer answer is that there must be some limit to the width of the code in order to reasonably allow developers to have multiple files side-by-side in windows on a modest display. If you are going to pick a width limit, it is somewhat arbitrary but you might as well pick something standard. Going with 90 columns (for example) instead of 80 columns wouldn’t add any significant value and would be detrimental to printing out code. Also many other projects have standardized on 80 columns, so some people have already configured their editors for it (vs something else, like 90 columns). This is one of many contentious issues in coding standards, but it is not up for debate. Use Spaces Instead of Tabs¶ In all cases, prefer spaces to tabs in source files. People have different preferred indentation levels, and different styles of indentation that they like; this is fine. What isn’t fine is that different editors/viewers expand tabs out to different tab stops. This can cause your code to look completely unreadable, and it is not worth dealing with. As always, follow the Golden Rule above: follow the style of existing code if you are modifying and extending it. If you like four spaces of indentation, DO NOT do that in the middle of a chunk of code with two spaces of indentation. Also, do not reindent a whole source file: it makes for incredible diffs that are absolutely worthless. Indent Code Consistently¶ Okay, in your first year of programming you were told that indentation is important. If you didn’t believe and internalize this then, now is the time. Just do it. With the introduction of C++11, there are some new formatting challenges that merit some suggestions to help have consistent, maintainable, and tool-friendly formatting and indentation. Format Lambdas Like Blocks Of Code¶ When formatting a multi-line lambda, format it like a block of code, that’s what it is. If there is only one multi-line lambda in a statement, and there are no expressions lexically after it in the statement, drop the indent to the standard two space indent for a block of code, as if it were an if-block opened by the preceding part of the statement: std::sort(foo.begin(), foo.end(), [&](Foo a, Foo b) -> bool {   if (a.blah < b.blah)     return true;   if (a.baz < b.baz)     return true;   return a.bam < b.bam; });  To take best advantage of this formatting, if you are designing an API which accepts a continuation or single callable argument (be it a functor, or a std::function), it should be the last argument if at all possible. If there are multiple multi-line lambdas in a statement, or there is anything interesting after the lambda in the statement, indent the block two spaces from the indent of the []: dyn_switch(V->stripPointerCasts(),            [] (PHINode *PN) {              // process phis...            },            [] (SelectInst *SI) {              // process selects...            },            [] (LoadInst *LI) {              // process loads...            },            [] (AllocaInst *AI) {              // process allocas...            });  Braced Initializer Lists¶ With C++11, there are significantly more uses of braced lists to perform initialization. These allow you to easily construct aggregate temporaries in expressions among other niceness. They now have a natural way of ending up nested within each other and within function calls in order to build up aggregates (such as option structs) from local variables. To make matters worse, we also have many more uses of braces in an expression context that are not performing initialization. The historically common formatting of braced initialization of aggregate variables does not mix cleanly with deep nesting, general expression contexts, function arguments, and lambdas. We suggest new code use a simple rule for formatting braced initialization lists: act as-if the braces were parentheses in a function call. The formatting rules exactly match those already well understood for formatting nested function calls. Examples: foo({a, b, c}, {1, 2, 3});  llvm::Constant *Mask[] = {     llvm::ConstantInt::get(llvm::Type::getInt32Ty(getLLVMContext()), 0),     llvm::ConstantInt::get(llvm::Type::getInt32Ty(getLLVMContext()), 1),     llvm::ConstantInt::get(llvm::Type::getInt32Ty(getLLVMContext()), 2)};  This formatting scheme also makes it particularly easy to get predictable, consistent, and automatic formatting with tools like Clang Format. Language and Compiler Issues¶ Treat Compiler Warnings Like Errors¶ If your code has compiler warnings in it, something is wrong — you aren’t casting values correctly, you have “questionable” constructs in your code, or you are doing something legitimately wrong. Compiler warnings can cover up legitimate errors in output and make dealing with a translation unit difficult. It is not possible to prevent all warnings from all compilers, nor is it desirable. Instead, pick a standard compiler (like gcc) that provides a good thorough set of warnings, and stick to it. At least in the case of gcc, it is possible to work around any spurious errors by changing the syntax of the code slightly. For example, a warning that annoys me occurs when I write code like this: if (V = getValue()) {   ... }  gcc will warn me that I probably want to use the == operator, and that I probably mistyped it. In most cases, I haven’t, and I really don’t want the spurious errors. To fix this particular problem, I rewrite the code like this: if ((V = getValue())) {   ... }  which shuts gcc up. Any gcc warning that annoys you can be fixed by massaging the code appropriately. Write Portable Code¶ In almost all cases, it is possible and within reason to write completely portable code. If there are cases where it isn’t possible to write portable code, isolate it behind a well defined (and well documented) interface. In practice, this means that you shouldn’t assume much about the host compiler (and Visual Studio tends to be the lowest common denominator). If advanced features are used, they should only be an implementation detail of a library which has a simple exposed API, and preferably be buried in libSystem. Do not use RTTI or Exceptions¶ In an effort to reduce code and executable size, LLVM does not use RTTI (e.g. dynamic_cast<>;) or exceptions. These two language features violate the general C++ principle of “you only pay for what you use”, causing executable bloat even if exceptions are never used in the code base, or if RTTI is never used for a class. Because of this, we turn them off globally in the code. That said, LLVM does make extensive use of a hand-rolled form of RTTI that use templates like isa<>, cast<>, and dyn_cast<>. This form of RTTI is opt-in and can be added to any class. It is also substantially more efficient than dynamic_cast<>. Do not use Static Constructors¶ Static constructors and destructors (e.g. global variables whose types have a constructor or destructor) should not be added to the code base, and should be removed wherever possible. Besides well known problems where the order of initialization is undefined between globals in different source files, the entire concept of static constructors is at odds with the common use case of LLVM as a library linked into a larger application. Consider the use of LLVM as a JIT linked into another application (perhaps for OpenGL, custom languages, shaders in movies, etc). Due to the design of static constructors, they must be executed at startup time of the entire application, regardless of whether or how LLVM is used in that larger application. There are two problems with this: The time to run the static constructors impacts startup time of applications — a critical time for GUI apps, among others. The static constructors cause the app to pull many extra pages of memory off the disk: both the code for the constructor in each .o file and the small amount of data that gets touched. In addition, touched/dirty pages put more pressure on the VM system on low-memory machines. We would really like for there to be zero cost for linking in an additional LLVM target or other library into an application, but static constructors violate this goal. That said, LLVM unfortunately does contain static constructors. It would be a great project for someone to purge all static constructors from LLVM, and then enable the -Wglobal-constructors warning flag (when building with Clang) to ensure we do not regress in the future. Use of class and struct Keywords¶ In C++, the class and struct keywords can be used almost interchangeably. The only difference is when they are used to declare a class: class makes all members private by default while struct makes all members public by default. Unfortunately, not all compilers follow the rules and some will generate different symbols based on whether class or struct was used to declare the symbol (e.g., MSVC). This can lead to problems at link time. All declarations and definitions of a given class or struct must use the same keyword. For example: class Foo;  // Breaks mangling in MSVC. struct Foo { int Data; };  As a rule of thumb, struct should be kept to structures where all members are declared public. // Foo feels like a class... this is strange. struct Foo { private:   int Data; public:   Foo() : Data(0) { }   int getData() const { return Data; }   void setData(int D) { Data = D; } };  // Bar isn't POD, but it does look like a struct. struct Bar {   int Data;   Bar() : Data(0) { } };  Do not use Braced Initializer Lists to Call a Constructor¶ In C++11 there is a “generalized initialization syntax” which allows calling constructors using braced initializer lists. Do not use these to call constructors with any interesting logic or if you care that you’re calling some particular constructor. Those should look like function calls using parentheses rather than like aggregate initialization. Similarly, if you need to explicitly name the type and call its constructor to create a temporary, don’t use a braced initializer list. Instead, use a braced initializer list (without any type for temporaries) when doing aggregate initialization or something notionally equivalent. Examples: class Foo { public:   // Construct a Foo by reading data from the disk in the whizbang format, ...   Foo(std::string filename);    // Construct a Foo by looking up the Nth element of some global data ...   Foo(int N);    // ... };  // The Foo constructor call is very deliberate, no braces. std::fill(foo.begin(), foo.end(), Foo(""name""));  // The pair is just being constructed like an aggregate, use braces. bar_map.insert({my_key, my_value});  If you use a braced initializer list when initializing a variable, use an equals before the open curly brace: int data[] = {0, 1, 2, 3};  Use auto Type Deduction to Make Code More Readable¶ Some are advocating a policy of “almost always auto” in C++11, however LLVM uses a more moderate stance. Use auto if and only if it makes the code more readable or easier to maintain. Don’t “almost always” use auto, but do use auto with initializers like cast<Foo>(...) or other places where the type is already obvious from the context. Another time when auto works well for these purposes is when the type would have been abstracted away anyways, often behind a container’s typedef such as std::vector<T>::iterator. Beware unnecessary copies with auto¶ The convenience of auto makes it easy to forget that its default behavior is a copy. Particularly in range-based for loops, careless copies are expensive. As a rule of thumb, use auto & unless you need to copy the result, and use auto * when copying pointers. // Typically there's no reason to copy. for (const auto &Val : Container) { observe(Val); } for (auto &Val : Container) { Val.change(); }  // Remove the reference if you really want a new copy. for (auto Val : Container) { Val.change(); saveSomewhere(Val); }  // Copy pointers, but make it clear that they're pointers. for (const auto *Ptr : Container) { observe(*Ptr); } for (auto *Ptr : Container) { Ptr->change(); }  Style Issues¶ The High-Level Issues¶ A Public Header File is a Module¶ C++ doesn’t do too well in the modularity department. There is no real encapsulation or data hiding (unless you use expensive protocol classes), but it is what we have to work with. When you write a public header file (in the LLVM source tree, they live in the top level “include” directory), you are defining a module of functionality. Ideally, modules should be completely independent of each other, and their header files should only #include the absolute minimum number of headers possible. A module is not just a class, a function, or a namespace: it’s a collection of these that defines an interface. This interface may be several functions, classes, or data structures, but the important issue is how they work together. In general, a module should be implemented by one or more .cpp files. Each of these .cpp files should include the header that defines their interface first. This ensures that all of the dependences of the module header have been properly added to the module header itself, and are not implicit. System headers should be included after user headers for a translation unit. #include as Little as Possible¶ #include hurts compile time performance. Don’t do it unless you have to, especially in header files. But wait! Sometimes you need to have the definition of a class to use it, or to inherit from it. In these cases go ahead and #include that header file. Be aware however that there are many cases where you don’t need to have the full definition of a class. If you are using a pointer or reference to a class, you don’t need the header file. If you are simply returning a class instance from a prototyped function or method, you don’t need it. In fact, for most cases, you simply don’t need the definition of a class. And not #includeing speeds up compilation. It is easy to try to go too overboard on this recommendation, however. You must include all of the header files that you are using — you can include them either directly or indirectly through another header file. To make sure that you don’t accidentally forget to include a header file in your module header, make sure to include your module header first in the implementation file (as mentioned above). This way there won’t be any hidden dependencies that you’ll find out about later. Keep “Internal” Headers Private¶ Many modules have a complex implementation that causes them to use more than one implementation (.cpp) file. It is often tempting to put the internal communication interface (helper classes, extra functions, etc) in the public module header file. Don’t do this! If you really need to do something like this, put a private header file in the same directory as the source files, and include it locally. This ensures that your private interface remains private and undisturbed by outsiders. Note It’s okay to put extra implementation methods in a public class itself. Just make them private (or protected) and all is well. Use Early Exits and continue to Simplify Code¶ When reading code, keep in mind how much state and how many previous decisions have to be remembered by the reader to understand a block of code. Aim to reduce indentation where possible when it doesn’t make it more difficult to understand the code. One great way to do this is by making use of early exits and the continue keyword in long loops. As an example of using an early exit from a function, consider this “bad” code: Value *doSomething(Instruction *I) {   if (!isa<TerminatorInst>(I) &&       I->hasOneUse() && doOtherThing(I)) {     ... some long code ....   }    return 0; }  This code has several problems if the body of the 'if' is large. When you’re looking at the top of the function, it isn’t immediately clear that this only does interesting things with non-terminator instructions, and only applies to things with the other predicates. Second, it is relatively difficult to describe (in comments) why these predicates are important because the if statement makes it difficult to lay out the comments. Third, when you’re deep within the body of the code, it is indented an extra level. Finally, when reading the top of the function, it isn’t clear what the result is if the predicate isn’t true; you have to read to the end of the function to know that it returns null. It is much preferred to format the code like this: Value *doSomething(Instruction *I) {   // Terminators never need 'something' done to them because ...   if (isa<TerminatorInst>(I))     return 0;    // We conservatively avoid transforming instructions with multiple uses   // because goats like cheese.   if (!I->hasOneUse())     return 0;    // This is really just here for example.   if (!doOtherThing(I))     return 0;    ... some long code .... }  This fixes these problems. A similar problem frequently happens in for loops. A silly example is something like this: for (BasicBlock::iterator II = BB->begin(), E = BB->end(); II != E; ++II) {   if (BinaryOperator *BO = dyn_cast<BinaryOperator>(II)) {     Value *LHS = BO->getOperand(0);     Value *RHS = BO->getOperand(1);     if (LHS != RHS) {       ...     }   } }  When you have very, very small loops, this sort of structure is fine. But if it exceeds more than 10-15 lines, it becomes difficult for people to read and understand at a glance. The problem with this sort of code is that it gets very nested very quickly. Meaning that the reader of the code has to keep a lot of context in their brain to remember what is going immediately on in the loop, because they don’t know if/when the if conditions will have elses etc. It is strongly preferred to structure the loop like this: for (BasicBlock::iterator II = BB->begin(), E = BB->end(); II != E; ++II) {   BinaryOperator *BO = dyn_cast<BinaryOperator>(II);   if (!BO) continue;    Value *LHS = BO->getOperand(0);   Value *RHS = BO->getOperand(1);   if (LHS == RHS) continue;    ... }  This has all the benefits of using early exits for functions: it reduces nesting of the loop, it makes it easier to describe why the conditions are true, and it makes it obvious to the reader that there is no else coming up that they have to push context into their brain for. If a loop is large, this can be a big understandability win. Don’t use else after a return¶ For similar reasons above (reduction of indentation and easier reading), please do not use 'else' or 'else if' after something that interrupts control flow — like return, break, continue, goto, etc. For example, this is bad: case 'J': {   if (Signed) {     Type = Context.getsigjmp_bufType();     if (Type.isNull()) {       Error = ASTContext::GE_Missing_sigjmp_buf;       return QualType();     } else {       break;     }   } else {     Type = Context.getjmp_bufType();     if (Type.isNull()) {       Error = ASTContext::GE_Missing_jmp_buf;       return QualType();     } else {       break;     }   } }  It is better to write it like this: case 'J':   if (Signed) {     Type = Context.getsigjmp_bufType();     if (Type.isNull()) {       Error = ASTContext::GE_Missing_sigjmp_buf;       return QualType();     }   } else {     Type = Context.getjmp_bufType();     if (Type.isNull()) {       Error = ASTContext::GE_Missing_jmp_buf;       return QualType();     }   }   break;  Or better yet (in this case) as: case 'J':   if (Signed)     Type = Context.getsigjmp_bufType();   else     Type = Context.getjmp_bufType();    if (Type.isNull()) {     Error = Signed ? ASTContext::GE_Missing_sigjmp_buf :                      ASTContext::GE_Missing_jmp_buf;     return QualType();   }   break;  The idea is to reduce indentation and the amount of code you have to keep track of when reading the code. Turn Predicate Loops into Predicate Functions¶ It is very common to write small loops that just compute a boolean value. There are a number of ways that people commonly write these, but an example of this sort of thing is: bool FoundFoo = false; for (unsigned I = 0, E = BarList.size(); I != E; ++I)   if (BarList[I]->isFoo()) {     FoundFoo = true;     break;   }  if (FoundFoo) {   ... }  This sort of code is awkward to write, and is almost always a bad sign. Instead of this sort of loop, we strongly prefer to use a predicate function (which may be static) that uses early exits to compute the predicate. We prefer the code to be structured like this: /// \returns true if the specified list has an element that is a foo. static bool containsFoo(const std::vector<Bar*> &List) {   for (unsigned I = 0, E = List.size(); I != E; ++I)     if (List[I]->isFoo())       return true;   return false; } ...  if (containsFoo(BarList)) {   ... }  There are many reasons for doing this: it reduces indentation and factors out code which can often be shared by other code that checks for the same predicate. More importantly, it forces you to pick a name for the function, and forces you to write a comment for it. In this silly example, this doesn’t add much value. However, if the condition is complex, this can make it a lot easier for the reader to understand the code that queries for this predicate. Instead of being faced with the in-line details of how we check to see if the BarList contains a foo, we can trust the function name and continue reading with better locality. The Low-Level Issues¶ Name Types, Functions, Variables, and Enumerators Properly¶ Poorly-chosen names can mislead the reader and cause bugs. We cannot stress enough how important it is to use descriptive names. Pick names that match the semantics and role of the underlying entities, within reason. Avoid abbreviations unless they are well known. After picking a good name, make sure to use consistent capitalization for the name, as inconsistency requires clients to either memorize the APIs or to look it up to find the exact spelling. In general, names should be in camel case (e.g. TextFileReader and isLValue()). Different kinds of declarations have different rules: Type names (including classes, structs, enums, typedefs, etc) should be nouns and start with an upper-case letter (e.g. TextFileReader). Variable names should be nouns (as they represent state). The name should be camel case, and start with an upper case letter (e.g. Leader or Boats). Function names should be verb phrases (as they represent actions), and command-like function should be imperative. The name should be camel case, and start with a lower case letter (e.g. openFile() or isFoo()). Enum declarations (e.g. enum Foo {...}) are types, so they should follow the naming conventions for types. A common use for enums is as a discriminator for a union, or an indicator of a subclass. When an enum is used for something like this, it should have a Kind suffix (e.g. ValueKind). Enumerators (e.g. enum { Foo, Bar }) and public member variables should start with an upper-case letter, just like types. Unless the enumerators are defined in their own small namespace or inside a class, enumerators should have a prefix corresponding to the enum declaration name. For example, enum ValueKind { ... }; may contain enumerators like VK_Argument, VK_BasicBlock, etc. Enumerators that are just convenience constants are exempt from the requirement for a prefix. For instance: enum {   MaxSize = 42,   Density = 12 };  As an exception, classes that mimic STL classes can have member names in STL’s style of lower-case words separated by underscores (e.g. begin(), push_back(), and empty()). Classes that provide multiple iterators should add a singular prefix to begin() and end() (e.g. global_begin() and use_begin()). Here are some examples of good and bad names: class VehicleMaker {   ...   Factory<Tire> F;            // Bad -- abbreviation and non-descriptive.   Factory<Tire> Factory;      // Better.   Factory<Tire> TireFactory;  // Even better -- if VehicleMaker has more than one                               // kind of factories. };  Vehicle MakeVehicle(VehicleType Type) {   VehicleMaker M;                         // Might be OK if having a short life-span.   Tire Tmp1 = M.makeTire();               // Bad -- 'Tmp1' provides no information.   Light Headlight = M.makeLight(""head"");  // Good -- descriptive.   ... }  Assert Liberally¶ Use the “assert” macro to its fullest. Check all of your preconditions and assumptions, you never know when a bug (not necessarily even yours) might be caught early by an assertion, which reduces debugging time dramatically. The “<cassert>” header file is probably already included by the header files you are using, so it doesn’t cost anything to use it. To further assist with debugging, make sure to put some kind of error message in the assertion statement, which is printed if the assertion is tripped. This helps the poor debugger make sense of why an assertion is being made and enforced, and hopefully what to do about it. Here is one complete example: inline Value *getOperand(unsigned I) {   assert(I < Operands.size() && ""getOperand() out of range!"");   return Operands[I]; }  Here are more examples: assert(Ty->isPointerType() && ""Can't allocate a non-pointer type!"");  assert((Opcode == Shl || Opcode == Shr) && ""ShiftInst Opcode invalid!"");  assert(idx < getNumSuccessors() && ""Successor # out of range!"");  assert(V1.getType() == V2.getType() && ""Constant types must be identical!"");  assert(isa<PHINode>(Succ->front()) && ""Only works on PHId BBs!"");  You get the idea. In the past, asserts were used to indicate a piece of code that should not be reached. These were typically of the form: assert(0 && ""Invalid radix for integer literal"");  This has a few issues, the main one being that some compilers might not understand the assertion, or warn about a missing return in builds where assertions are compiled out. Today, we have something much better: llvm_unreachable: llvm_unreachable(""Invalid radix for integer literal"");  When assertions are enabled, this will print the message if it’s ever reached and then exit the program. When assertions are disabled (i.e. in release builds), llvm_unreachable becomes a hint to compilers to skip generating code for this branch. If the compiler does not support this, it will fall back to the “abort” implementation. Another issue is that values used only by assertions will produce an “unused value” warning when assertions are disabled. For example, this code will warn: unsigned Size = V.size(); assert(Size > 42 && ""Vector smaller than it should be"");  bool NewToSet = Myset.insert(Value); assert(NewToSet && ""The value shouldn't be in the set yet"");  These are two interesting different cases. In the first case, the call to V.size() is only useful for the assert, and we don’t want it executed when assertions are disabled. Code like this should move the call into the assert itself. In the second case, the side effects of the call must happen whether the assert is enabled or not. In this case, the value should be cast to void to disable the warning. To be specific, it is preferred to write the code like this: assert(V.size() > 42 && ""Vector smaller than it should be"");  bool NewToSet = Myset.insert(Value); (void)NewToSet; assert(NewToSet && ""The value shouldn't be in the set yet"");  Do Not Use using namespace std¶ In LLVM, we prefer to explicitly prefix all identifiers from the standard namespace with an “std::” prefix, rather than rely on “using namespace std;”. In header files, adding a 'using namespace XXX' directive pollutes the namespace of any source file that #includes the header. This is clearly a bad thing. In implementation files (e.g. .cpp files), the rule is more of a stylistic rule, but is still important. Basically, using explicit namespace prefixes makes the code clearer, because it is immediately obvious what facilities are being used and where they are coming from. And more portable, because namespace clashes cannot occur between LLVM code and other namespaces. The portability rule is important because different standard library implementations expose different symbols (potentially ones they shouldn’t), and future revisions to the C++ standard will add more symbols to the std namespace. As such, we never use 'using namespace std;' in LLVM. The exception to the general rule (i.e. it’s not an exception for the std namespace) is for implementation files. For example, all of the code in the LLVM project implements code that lives in the ‘llvm’ namespace. As such, it is ok, and actually clearer, for the .cpp files to have a 'using namespace llvm;' directive at the top, after the #includes. This reduces indentation in the body of the file for source editors that indent based on braces, and keeps the conceptual context cleaner. The general form of this rule is that any .cpp file that implements code in any namespace may use that namespace (and its parents’), but should not use any others. Provide a Virtual Method Anchor for Classes in Headers¶ If a class is defined in a header file and has a vtable (either it has virtual methods or it derives from classes with virtual methods), it must always have at least one out-of-line virtual method in the class. Without this, the compiler will copy the vtable and RTTI into every .o file that #includes the header, bloating .o file sizes and increasing link times. Don’t use default labels in fully covered switches over enumerations¶ -Wswitch warns if a switch, without a default label, over an enumeration does not cover every enumeration value. If you write a default label on a fully covered switch over an enumeration then the -Wswitch warning won’t fire when new elements are added to that enumeration. To help avoid adding these kinds of defaults, Clang has the warning -Wcovered-switch-default which is off by default but turned on when building LLVM with a version of Clang that supports the warning. A knock-on effect of this stylistic requirement is that when building LLVM with GCC you may get warnings related to “control may reach end of non-void function” if you return from each case of a covered switch-over-enum because GCC assumes that the enum expression may take any representable value, not just those of individual enumerators. To suppress this warning, use llvm_unreachable after the switch. Don’t evaluate end() every time through a loop¶ Because C++ doesn’t have a standard “foreach” loop (though it can be emulated with macros and may be coming in C++‘0x) we end up writing a lot of loops that manually iterate from begin to end on a variety of containers or through other data structures. One common mistake is to write a loop in this style: BasicBlock *BB = ... for (BasicBlock::iterator I = BB->begin(); I != BB->end(); ++I)   ... use I ...  The problem with this construct is that it evaluates “BB->end()” every time through the loop. Instead of writing the loop like this, we strongly prefer loops to be written so that they evaluate it once before the loop starts. A convenient way to do this is like so: BasicBlock *BB = ... for (BasicBlock::iterator I = BB->begin(), E = BB->end(); I != E; ++I)   ... use I ...  The observant may quickly point out that these two loops may have different semantics: if the container (a basic block in this case) is being mutated, then “BB->end()” may change its value every time through the loop and the second loop may not in fact be correct. If you actually do depend on this behavior, please write the loop in the first form and add a comment indicating that you did it intentionally. Why do we prefer the second form (when correct)? Writing the loop in the first form has two problems. First it may be less efficient than evaluating it at the start of the loop. In this case, the cost is probably minor — a few extra loads every time through the loop. However, if the base expression is more complex, then the cost can rise quickly. I’ve seen loops where the end expression was actually something like: “SomeMap[X]->end()” and map lookups really aren’t cheap. By writing it in the second form consistently, you eliminate the issue entirely and don’t even have to think about it. The second (even bigger) issue is that writing the loop in the first form hints to the reader that the loop is mutating the container (a fact that a comment would handily confirm!). If you write the loop in the second form, it is immediately obvious without even looking at the body of the loop that the container isn’t being modified, which makes it easier to read the code and understand what it does. While the second form of the loop is a few extra keystrokes, we do strongly prefer it. #include <iostream> is Forbidden¶ The use of #include <iostream> in library files is hereby forbidden, because many common implementations transparently inject a static constructor into every translation unit that includes it. Note that using the other stream headers (<sstream> for example) is not problematic in this regard — just <iostream>. However, raw_ostream provides various APIs that are better performing for almost every use than std::ostream style APIs. Note New code should always use raw_ostream for writing, or the llvm::MemoryBuffer API for reading files. Use raw_ostream¶ LLVM includes a lightweight, simple, and efficient stream implementation in llvm/Support/raw_ostream.h, which provides all of the common features of std::ostream. All new code should use raw_ostream instead of ostream. Unlike std::ostream, raw_ostream is not a template and can be forward declared as class raw_ostream. Public headers should generally not include the raw_ostream header, but use forward declarations and constant references to raw_ostream instances. Avoid std::endl¶ The std::endl modifier, when used with iostreams outputs a newline to the output stream specified. In addition to doing this, however, it also flushes the output stream. In other words, these are equivalent: std::cout << std::endl; std::cout << '\n' << std::flush;  Most of the time, you probably have no reason to flush the output stream, so it’s better to use a literal '\n'. Don’t use inline when defining a function in a class definition¶ A member function defined in a class definition is implicitly inline, so don’t put the inline keyword in this case. Don’t: class Foo { public:   inline void bar() {     // ...   } };  Do: class Foo { public:   void bar() {     // ...   } };  Microscopic Details¶ This section describes preferred low-level formatting guidelines along with reasoning on why we prefer them. Spaces Before Parentheses¶ We prefer to put a space before an open parenthesis only in control flow statements, but not in normal function call expressions and function-like macros. For example, this is good: if (X) ... for (I = 0; I != 100; ++I) ... while (LLVMRocks) ...  somefunc(42); assert(3 != 4 && ""laws of math are failing me"");  A = foo(42, 92) + bar(X);  and this is bad: if(X) ... for(I = 0; I != 100; ++I) ... while(LLVMRocks) ...  somefunc (42); assert (3 != 4 && ""laws of math are failing me"");  A = foo (42, 92) + bar (X);  The reason for doing this is not completely arbitrary. This style makes control flow operators stand out more, and makes expressions flow better. The function call operator binds very tightly as a postfix operator. Putting a space after a function name (as in the last example) makes it appear that the code might bind the arguments of the left-hand-side of a binary operator with the argument list of a function and the name of the right side. More specifically, it is easy to misread the “A” example as: A = foo ((42, 92) + bar) (X);  when skimming through the code. By avoiding a space in a function, we avoid this misinterpretation. Prefer Preincrement¶ Hard fast rule: Preincrement (++X) may be no slower than postincrement (X++) and could very well be a lot faster than it. Use preincrementation whenever possible. The semantics of postincrement include making a copy of the value being incremented, returning it, and then preincrementing the “work value”. For primitive types, this isn’t a big deal. But for iterators, it can be a huge issue (for example, some iterators contains stack and set objects in them... copying an iterator could invoke the copy ctor’s of these as well). In general, get in the habit of always using preincrement, and you won’t have a problem. Namespace Indentation¶ In general, we strive to reduce indentation wherever possible. This is useful because we want code to fit into 80 columns without wrapping horribly, but also because it makes it easier to understand the code. To facilitate this and avoid some insanely deep nesting on occasion, don’t indent namespaces. If it helps readability, feel free to add a comment indicating what namespace is being closed by a }. For example: namespace llvm { namespace knowledge {  /// This class represents things that Smith can have an intimate /// understanding of and contains the data associated with it. class Grokable { ... public:   explicit Grokable() { ... }   virtual ~Grokable() = 0;    ...  };  } // end namespace knowledge } // end namespace llvm  Feel free to skip the closing comment when the namespace being closed is obvious for any reason. For example, the outer-most namespace in a header file is rarely a source of confusion. But namespaces both anonymous and named in source files that are being closed half way through the file probably could use clarification. Anonymous Namespaces¶ After talking about namespaces in general, you may be wondering about anonymous namespaces in particular. Anonymous namespaces are a great language feature that tells the C++ compiler that the contents of the namespace are only visible within the current translation unit, allowing more aggressive optimization and eliminating the possibility of symbol name collisions. Anonymous namespaces are to C++ as “static” is to C functions and global variables. While “static” is available in C++, anonymous namespaces are more general: they can make entire classes private to a file. The problem with anonymous namespaces is that they naturally want to encourage indentation of their body, and they reduce locality of reference: if you see a random function definition in a C++ file, it is easy to see if it is marked static, but seeing if it is in an anonymous namespace requires scanning a big chunk of the file. Because of this, we have a simple guideline: make anonymous namespaces as small as possible, and only use them for class declarations. For example, this is good: namespace { class StringSort { ... public:   StringSort(...)   bool operator<(const char *RHS) const; }; } // end anonymous namespace  static void runHelper() {   ... }  bool StringSort::operator<(const char *RHS) const {   ... }  This is bad: namespace {  class StringSort { ... public:   StringSort(...)   bool operator<(const char *RHS) const; };  void runHelper() {   ... }  bool StringSort::operator<(const char *RHS) const {   ... }  } // end anonymous namespace  This is bad specifically because if you’re looking at “runHelper” in the middle of a large C++ file, that you have no immediate way to tell if it is local to the file. When it is marked static explicitly, this is immediately obvious. Also, there is no reason to enclose the definition of “operator<” in the namespace just because it was declared there. See Also¶ A lot of these comments and recommendations have been culled from other sources. Two particularly important books for our work are: Effective C++ by Scott Meyers. Also interesting and useful are “More Effective C++” and “Effective STL” by the same author. Large-Scale C++ Software Design by John Lakos If you get some free time, and you haven’t read them: do so, you might learn something. Navigation index next | previous | LLVM Home |  Documentation» © Copyright 2003-2016, LLVM Project. Last updated on 2016-07-14. Created using Sphinx 1.1.3."	"null"	"null"	""	"true"
"Talks"	"CppCon Talks"	"https://www.youtube.com/user/CppCon/videos"	"The C++ conference."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CppCon  - YouTube Pomiń nawigację PL Prześlij Zaloguj się Szukaj Główna Na czasie Najlepsze w YouTube Muzyka Sport Gry Filmy Aktualności Na żywo Film 360° Przeglądaj kanały Zaloguj się, aby zobaczyć swoje kanały i rekomendacje. Zaloguj się Wybierz język. Zamknij Więcej informacji View this message in English Język, w którym oglądasz YouTube, to Polski. Możesz zmienić to ustawienie poniżej. Learn more You're viewing YouTube in Polish. You can change this preference below. Kolejka filmów do obejrzenia Kolejka Kolejka filmów do obejrzeniaKolejka Usuń wszystko Rozłącz Trwa wczytywanie... Kolejka filmów do obejrzenia Kolejka __count__/__total__ CppCon SubskrybujSubskrybujeszAnuluj subskrypcję Trwa wczytywanie... Trwa wczytywanie... Działam... CppCon sponsors have made it possible to record and freely distribute over 200 sessions from 2014 and 2015. We hope you enjoy them.  CppCon sponsors have made it possible to record and freely distribute over 200 sessions from 2014 and 2015. We hope you enjoy them.  Visit cppcon.org for details on the next CppCon, to be held in September 2016. Pokaż więcej Pokaż mniej Siatka Lista Data dodania (od najnowszego) Najpopularniejsze Data dodania (od najstarszego) Przesłane filmy 1:42 Odtwórz jako następny Odtwórz teraz CppCon 2016 Promotional Video - Czas trwania: 102 sekundy. 2 887 wyświetleń 2 tygodnie temu 47:22 Odtwórz jako następny Odtwórz teraz CppCon 2015: Richard Powell “Intro to the C++ Object Model"" - Czas trwania: 47 minut. 11 386 wyświetleń 7 miesięcy temu 53:25 Odtwórz jako następny Odtwórz teraz CppCon 2015: Richard Powell “The Importance of Being const"" - Czas trwania: 53 minuty. 6 446 wyświetleń 7 miesięcy temu 1:03:52 Odtwórz jako następny Odtwórz teraz CppCon 2015: T. Winters & H. Wright “All Your Tests are Terrible..."" - Czas trwania: 1 godzina, 3 minuty. 9 404 wyświetlenia 8 miesięcy temu 1:02:54 Odtwórz jako następny Odtwórz teraz CppCon 2015: James Radigan “CLANG + C2 - Engineering/Futures/Measurements"" - Czas trwania: 1 godzina, 2 minuty. 7 288 wyświetleń 8 miesięcy temu 15:15 Odtwórz jako następny Odtwórz teraz CppCon 2015: Piotr Padlewski ""C++ devirtualization in clang"" - Czas trwania: 15 minut. 4 180 wyświetleń 8 miesięcy temu 16:26 Odtwórz jako następny Odtwórz teraz CppCon 2015: Matt P. Dziubinski ""Algorithmic Differentiation: C++ & Extremum Estimation"" - Czas trwania: 16 minut. 3 324 wyświetlenia 8 miesięcy temu 14:15 Odtwórz jako następny Odtwórz teraz CppCon 2015: Andre Bergner ""Indian C++: Curry for your Functions"" - Czas trwania: 14 minut. 3 896 wyświetleń 8 miesięcy temu 15:53 Odtwórz jako następny Odtwórz teraz CppCon 2015: Dmitri Nesteruk ""CLion Tips & Tricks"" - Czas trwania: 15 minut. 3 993 wyświetlenia 8 miesięcy temu 14:46 Odtwórz jako następny Odtwórz teraz CppCon 2015: Julian Storer ""The Projucer"" - Czas trwania: 14 minut. 3 249 wyświetleń 8 miesięcy temu 14:47 Odtwórz jako następny Odtwórz teraz CppCon 2015: Greg Law "" Give me 15 minutes & I'll change your view of GDB"" - Czas trwania: 14 minut. 14 080 wyświetleń 8 miesięcy temu 14:18 Odtwórz jako następny Odtwórz teraz CppCon 2015: Jens Weller ""How I integrated TinyMCE into my Qt Application"" - Czas trwania: 14 minut. 1 141 wyświetleń 8 miesięcy temu 15:15 Odtwórz jako następny Odtwórz teraz CppCon 2015: Piotr Padlewski ""C++ WAT"" - Czas trwania: 15 minut. 11 596 wyświetleń 8 miesięcy temu 12:05 Odtwórz jako następny Odtwórz teraz CppCon 2015: Leor Zolman ""Traits Go Mainstream..."" - Czas trwania: 12 minut. 2 195 wyświetleń 8 miesięcy temu 11:41 Odtwórz jako następny Odtwórz teraz CppCon 2015: B. Geller & A. Sermersheim ""Compile-Time Counter Using Template & Constexpr Magic"" - Czas trwania: 11 minut. 2 033 wyświetlenia 8 miesięcy temu 16:19 Odtwórz jako następny Odtwórz teraz CppCon 2015: Atila Neves ""Emacs as a C++ IDE"" - Czas trwania: 16 minut. 18 230 wyświetleń 8 miesięcy temu 13:01 Odtwórz jako następny Odtwórz teraz CppCon 2015: Phil Nash ""The stand up"" - Czas trwania: 13 minut. 2 601 wyświetleń 8 miesięcy temu 8:41 Odtwórz jako następny Odtwórz teraz CppCon 2015: Edouard Alligand & Joel Falcou ""Introducing brigand"" - Czas trwania: 8 minut, 41 sekund. 1 192 wyświetlenia 8 miesięcy temu 11:33 Odtwórz jako następny Odtwórz teraz CppCon 2015: Kyle Markley ""Extreme Type Safety with Opaque Typedefs"" - Czas trwania: 11 minut. 3 729 wyświetleń 8 miesięcy temu 10:38 Odtwórz jako następny Odtwórz teraz CppCon 2015: Milian Wolff ""Heaptrack: A Heap Memory Profiler for Linux"" - Czas trwania: 10 minut. 2 337 wyświetleń 8 miesięcy temu 6:30 Odtwórz jako następny Odtwórz teraz CppCon 2015: Reid Kleckner ""Clang on Windows: a status update"" - Czas trwania: 6 minut, 30 sekund. 3 109 wyświetleń 8 miesięcy temu 8:03 Odtwórz jako następny Odtwórz teraz CppCon 2015: Roland Bock ""Kiss Templates"" - Czas trwania: 8 minut, 3 sekundy. 2 308 wyświetleń 8 miesięcy temu 5:33 Odtwórz jako następny Odtwórz teraz CppCon 2015: Jens Weller ""A different way to use boost serialization"" - Czas trwania: 5 minut, 33 sekundy. 1 709 wyświetleń 8 miesięcy temu 9:40 Odtwórz jako następny Odtwórz teraz CppCon 2015: Huu Nguyen ""C++ Requests - Curl for People"" - Czas trwania: 9 minut, 40 sekund. 3 143 wyświetlenia 8 miesięcy temu 5:17 Odtwórz jako następny Odtwórz teraz CppCon 2015: Fabian Renn-Giles ""Superscopes: Local, global... is there any more?"" - Czas trwania: 5 minut, 17 sekund. 1 529 wyświetleń 8 miesięcy temu 4:31 Odtwórz jako następny Odtwórz teraz CppCon 2015: Joshua Gerrard ""The dangers of C-style casts"" - Czas trwania: 4 minuty, 31 sekund. 2 957 wyświetleń 8 miesięcy temu 1:12:00 Odtwórz jako następny Odtwórz teraz CppCon 2015: Barbara Geller & Ansel Sermersheim “CopperSpice: A Pure C++ GUI Library"" - Czas trwania: 1 godzina, 12 minut. 6 493 wyświetlenia 8 miesięcy temu 1:05:58 Odtwórz jako następny Odtwórz teraz CppCon 2015: Fedor Pikus “C++ Metaprogramming: Journey from simple to insanity and back"" - Czas trwania: 1 godzina, 5 minut. 7 318 wyświetleń 8 miesięcy temu 54:51 Odtwórz jako następny Odtwórz teraz CppCon 2015: Nicolas Guillemot & Sean Middleditch “Birth of Study Group 14..."" - Czas trwania: 54 minuty. 1 968 wyświetleń 8 miesięcy temu 1:00:58 Odtwórz jako następny Odtwórz teraz CppCon 2015: Michael Wong “C++11/14/17 atomics and memory model..."" - Czas trwania: 1 godzina. 6 945 wyświetleń 8 miesięcy temu Trwa wczytywanie... Pokaż więcej Język: Polski Kraj: Polska Tryb ograniczonego dostępu Wyłączony Historia Pomoc Trwa wczytywanie... Trwa wczytywanie... Trwa wczytywanie... Informacje Centrum prasowe Prawa autorskie Twórcy Reklamy Programiści +YouTube Warunki Prywatność Zasady i bezpieczeństwo Prześlij opinię Spróbuj czegoś nowego! Trwa wczytywanie... Działam... Zaloguj się, by dodać film do listy „Do obejrzenia” Dodaj do Trwa wczytywanie playlist..."	"null"	"null"	"The C++ conference."	"true"
"Talks"	"Quick game development with C++11/C++14"	"https://github.com/SuperV1234/cppcon2014"	"CppCon 2014 talk by Vittorio Romeo."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"62"	"3"	"13"	"GitHub - SuperV1234/cppcon2014: Repository for the slides and the code of my ""Quick game development with C++11/C++14"" CppCon 2014 talk. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 62 Fork 13 SuperV1234/cppcon2014 Code Issues 0 Pull requests 0 Pulse Graphs Repository for the slides and the code of my ""Quick game development with C++11/C++14"" CppCon 2014 talk. http://vittorioromeo.info 15 commits 1 branch 0 releases Fetching contributors C++ 99.8% Shell 0.2% C++ Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 32fcf0d Jan 18, 2016 SuperV1234 License Permalink Failed to load latest commit information. code automatic clang-format run Oct 6, 2015 .gitignore Gitignore Sep 11, 2014 LICENSE License Jan 18, 2016 README.md Added video to readme Oct 8, 2014 presentation.odp Readme Sep 11, 2014 presentation.pdf We're live Sep 11, 2014 README.md cppcon2014 Repository for the slides and the code of my ""Quick game development with C++11/C++14"" CppCon 2014 talk. The official video is available here. Thanks for attending and/or checking out this repository! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SuperV1234/cppcon2014"	"CppCon 2014 talk by Vittorio Romeo."	"true"
"Talks"	"Presentation on Hana for C++Now 2015"	"https://github.com/ldionne/hana-cppnow-2015"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"1"	"0"	"GitHub - ldionne/hana-cppnow-2015: Presentation on Hana for C++Now 2015 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 7 Fork 0 ldionne/hana-cppnow-2015 Code Issues 0 Pull requests 0 Pulse Graphs Presentation on Hana for C++Now 2015 http://ldionne.github.io/hana-cppnow-2015 34 commits 1 branch 0 releases Fetching contributors JavaScript 41.2% CSS 31.8% HTML 16.4% C++ 10.0% CMake 0.6% JavaScript CSS HTML C++ CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: gh-pages Switch branches/tags Branches Tags gh-pages Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. code css js lib plugin sampler test .gitignore .travis.yml CMakeLists.txt CONTRIBUTING.md Gruntfile.js LICENSE README.md Update README post-presentation May 15, 2015 hana-cppnow-2015.sublime-project index.html index.in.html package.json README.md Presentation on Hana for C++Now 2015 This repository contains my reveal.js-based presentation on Hana for C++Now 2015. Basic usage Go to https://ldionne.github.io/hana-cppnow-2015 or open index.html with your browser. Advanced usage From the root of the repository, npm install grunt serve & and then connect to localhost:8000 to view locally. Notes to my future self index.html is generated from index.in.html. To generate index.html, mkdir build cd build cmake .. make index Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ldionne/hana-cppnow-2015"	""	"true"
"Other Awesome Projects"	"algorithms"	"https://github.com/xtaci/algorithms"	"Algorithms & Data Structures in C++."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1009"	"203"	"489"	"GitHub - xtaci/algorithms: Algorithms & Data Structures in C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 203 Star 1,009 Fork 489 xtaci/algorithms Code Issues 2 Pull requests 2 Pulse Graphs Algorithms & Data Structures in C++ 490 commits 2 branches 1 release 19 contributors C++ 89.6% C 8.0% Makefile 2.2% CMake 0.2% C++ C Makefile CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v1.0 Nothing to show New pull request Latest commit b01ee93 May 21, 2016 xtaci Merge pull request #47 from heshamsafi/master … issue #46 : Build Error Permalink Failed to load latest commit information. include issue #46 : May 21, 2016 msvc + Added .Net style Dictionary ( cache friendly hash table ) Nov 26, 2014 src issue #46 : May 21, 2016 utils add 'static' keyword to utils Jun 15, 2013 .gitignore add .gitignore & rename Nov 5, 2013 CMakeLists.txt Adding cmake file. Fixes for msvc support. Currently 36 out of 43 dem… Jun 23, 2013 LICENSE Update LICENSE Jun 8, 2013 Makefile Add shell sort Mar 30, 2016 README.md update Apr 26, 2016 darwin12.supp add macos 10.8.2 suppression file Mar 5, 2013 demo_graph.png add demo_graph.png Nov 11, 2013 donate_alg.png update Apr 26, 2016 README.md Algorithms & Data Structures in C++ 目标 ( goal ) : 经典的算法实现 (classical algorithms implementations) 服务器端 (based on linux/gcc) 正确，易于使用和改造, 一个头文件一个算法，并附带一个demo. (correct! and ease of use, one .header file per algorithm) 约定 ( Convention ): 一个算法用一个.h文件表示放到include下. ( one .header file per algorithm. ) 算法演示的demo程序放到src下. ( one demo per algorithm. ) 程序正确通过后，请发起Pull Requests，代码被验证后入库，并在README中发布新算法实现。 (Please Use Fork+Pull Requests !!! Correctness is the most important!) TAB = 4 space. set ts=4 in vim Graph的输出格式为 Graphviz Dot格式. (the output format of the graph is in dot of graphviz.) eg: 已实现 ( Implemented ): Array shuffle Prime test(trial division) Prime test(Miller-Rabin's method) 2D Array Arbitrary Integer Linear congruential generator Maximum subarray problem  Bit-Set Queue Stack Binary Heap Fibonacci Heap Priority Queue (list based)  Bubble sort Selection sort Insertion sort Shell sort Radix sort Quick sort Merge sort Double linked list Skip list Self-organized linked-list ops (move-to-front, move-ahead-one) Largest common sequence  Binary search tree AVL tree Dynamic order statistics Red-black tree Interval tree Prefix Tree(Trie) Suffix Tree B-Tree Suffix Array  Hash by multiplication Hash table Universal hash function Perfect hash Java's string hash FNV-1a string hash SimHash Bloom Filter SHA-1 Message Digest Algorithm MD5 Base64  Graph data structure Strongly Connected Components(SCC) Prim's minimum spanning tree Kruskal MST Directed/Undirected graph ops Breadth First Search Depth First Search Dijkstra's algorithm Bellman-Ford algorithm Edmonds-Karp Maximal Flow Push–Relabel algorithm  Huffman Coding Word segementation(CHN/GB18030) using HMM and viterbi algorithm. A* algorithm K-Means Knuth–Morris–Pratt algorithm Disjoint-Set 8-Queue Problem Palindrome  贡献者 ( Contributors ) : Samana:  for heavy work of MSVC compatability wycg1984: for K-Means xmuliang: for HeapSort, Kruskal MST wyh267: for base64, LRU, bubble sort, selection sort ZhangYou0122: Push-Relabel algorithm, Suffix Tree            UsingtcNower: Suffix Array afernandez90: AVL trees  支持此项目 ( Donations ) : 欢迎使用支付宝扫描上面的二维码，对该项目进行捐赠。捐赠款项将用于持续优化补全及完善。 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xtaci/algorithms"	"Algorithms & Data Structures in C++."	"true"
"Other Awesome Projects"	"c-algorithms"	"https://github.com/fragglet/c-algorithms"	"C algorithms library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"574"	"73"	"174"	"GitHub - fragglet/c-algorithms: A library of common data structures and algorithms written in C. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 73 Star 574 Fork 174 fragglet/c-algorithms Code Issues 3 Pull requests 0 Pulse Graphs A library of common data structures and algorithms written in C. https://fragglet.github.io/c-algorithms/ 260 commits 2 branches 3 releases 5 contributors C 97.4% C++ 1.1% Other 1.5% C C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show c-algorithms-1.2.0 c-algorithms-1.1.0 c-algorithms-1.0.0 Nothing to show New pull request Latest commit 5b0555f Jul 14, 2016 fragglet committed on GitHub Merge pull request #10 from waldyrious/patch-1 … Add license title Permalink Failed to load latest commit information. doc Remove trailing whitespace from files. Apr 26, 2015 src Fixed comments. Jul 14, 2016 test Moved SortedArray struct to .c file so it is hidden. Jun 6, 2016 tools Wipe out ChangeLog file. Apr 26, 2015 .gitignore Add a .gitignore file. Apr 26, 2015 .lvimrc Add local vim project settings file. Oct 1, 2008 .travis.yml Remove clang from Travis config. Apr 26, 2015 AUTHORS Update email address. Apr 25, 2015 COPYING Add license title Jun 30, 2016 ChangeLog Wipe out ChangeLog file. Apr 26, 2015 Makefile.am Install header files, pkgconfig .pc file Dec 13, 2005 NEWS Remove trailing whitespace from files. Apr 26, 2015 README Reword some of the text about the license. Sep 4, 2008 autogen.sh Generate a configuration file so that the compiler command line is not Nov 26, 2005 configure.ac Tweak configure.ac to work with older automake versions. Apr 26, 2015 libcalg-1.0.pc.in Install header files, pkgconfig .pc file Dec 13, 2005 README  C Algorithms  The C programming language includes a very limited standard library in comparison to other modern programming languages.  This is a collection of common Computer Science algorithms which may be used in C projects.  The code is licensed under the ISC license (a simplified version of the BSD license that is functionally identical).  As such, it may legitimately be reused in any project, whether Proprietary or Open Source.   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fragglet/c-algorithms"	"C algorithms library."	"true"
