"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Awesome Groovy"	"Groovy.ZEEF.com"	"https://groovy.zeef.com/kunal.dabir"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Groovy by Kunal Dabir | ZEEF ZEEF works best with JavaScript enabled. How to enable JavaScript in your browser? Filter on All This page Curators Links Advanced Simple Page name Curator Site or domain Tag Language EN NL FR ui-button Login Create a page Groovy byKunal Dabir Follow - 10 Curated list of awesome groovy libraries, frameworks and resources. Based on https://github.com/kdabir/awesome-groovy development awesome-awesomeness jvm java language About this page Table of contents Suggest 8 Share Groovy Kunal Dabir An imperfect perfectionist, lazy coder, disorganized webaholic, a headbanger and wannabe drummer, pathetic runner, a husband, father and a ThoughtWorker Profile Statistics 1.7k views (loading latest) 788 clicks (loading latest) 39 links 15 blocks published 2 years ago updated 2 months ago Groovy 1 Official Site 56 2 Blogs 129 3 IDE & Editor Support 95 4 Rich Application 129 5 Database 91 6 Build Tools & Setup 52 7 Testing 52 8 Concurrency 78 9 Web Frameworks 132 10 Code Analysis 26 11 Transpilers 52 12 HTTP 49 13 Interactive Learning 79 14 Language Utilities 125 15 Static Web 75 7 more Official Site 1 Groovy-Lang.org 56 Blogs 1 Guillaume Laforge's Blog 68 2 Messages from mrhaki 23 3 Cédric Champeau's blog 38 IDE & Editor Support 1 IntelliJ IDEA 20 2 Groovy Grails Tool Suite 16 3 Groovy Web Console 21 4 LightTable Plugin 24 5 Sublime Text 2 14 Rich Application 1 Codehaus 60 2 GroovyFX 69 Database 1 Gmongo 28 2 Gstorm 29 3 Tayra 25 4 Groovy-liquibase 9 Build Tools & Setup 1 Gradle 11 2 GVM 16 3 Lazybones 25 Testing 1 Spock 12 2 Geb 10 3 Betamax 30 Concurrency 1 GPars 31 2 RxJava 26 3 Vert.x 21 Web Frameworks 1 Grails 18 2 Gaelyk 30 3 Glide 34 4 Ratpack 22 5 Spring Boot 28 Code Analysis 1 CodeNarc 26 Transpilers 1 Grooscript 52 HTTP 1 Codehaus 30 2 Groovy-wslite 19 Interactive Learning 1 Groovy Koans 79 Language Utilities 1 Functionalgroovy 56 2 Groovy-stream 32 3 Flipside 37 Static Web 1 Grain 44 2 Gaiden 31 Suggest 8 Share Groovy Follow - 10 Share link… Thanked Thanks Message Kunal Dabir Report link Confirm Cancel Delete Share Social Link visit Cancel Follow page Suggest Message Kunal Dabir Report link ZEEF Home Create a page Subjects Curators Region Global (selected) Nederland France About About Blog Features FAQ Guidelines API Terms Privacy Contact Follow us Help us improve Bugs © 2016 ZEEF - 2016.7.2 This site uses affiliate links. ZEEF® is a registered trademark. Home Subjects Curators Terms Privacy Contact About ZEEF on social media"	"null"	"null"	""	"true"
"Build tools and Setup"	"Gradle"	"http://www.gradle.org/"	"A powerful build system for the JVM"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3683"	"341"	"1439"	"GitHub - gradle/gradle: A powerful build system for the JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 341 Star 3,683 Fork 1,439 gradle/gradle Code Pull requests 21 Wiki Pulse Graphs A powerful build system for the JVM http://gradle.org 36,782 commits 55 branches 857 releases 228 contributors Java 52.3% Groovy 43.6% C++ 2.8% JavaScript 0.6% C 0.3% CSS 0.1% Other 0.3% Java Groovy C++ JavaScript C CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.14.x 3.0-milestone-1 ak-FSS ak-expose-daemon-stats am-native-client bugs/GRADLE-3307 cc-binary-module-descritpr cc-buildscript-hash cc-cross-build-dep-resolution-cache cc-direct-task-invoker cc-dirty-tasks-discovery cc-ear-to-groovy cc-jmh-experiment-direct-invoke cc-jvm-test-suite-check cc-md5-classpath-hash cc-optim-dynobj cc-parallel-reports cc-perf-configuration-caching cc-perf-configuration cc-perf-empty-snapshots cc-reduce-memory-footprint cc-static-gradle-build composite-builds credentials-spike dd-cli-composite-spike dd-composite-builds-via-settings dependent-components ec2-builds elj-file-tree elj-tool-provider ew-first-class-daemon-state gh-ctrl-c-cancel-build gh-soak-tests gradle-script-kotlin ld-gradle-impldep-shading lh-hackathlon-alldependencies lp-dist-cache-spike lp-upgrade-to-guava-19 master mb-close-classloaders mv-enable-http-retry mv-https-proxy pk-ideaPlugin-languageLevel pm-build-dependents-spike pm-dependent-components-m2-spike pm-jdk-discovery refactorExcludeRulesWithNotationParser release rg-ad-hoc-test rg_immutable_props rg_spike_daemon_count_limit sf-depcache sg-dsl-links sg-native-transitive tc Nothing to show v3.0.0-M2 v3.0.0-M1 lp-custom-component-from-jar-source-cedrics-model-action REL_3.0-milestone-2 REL_3.0-milestone-1 REL_3.0-20160715000024+0000 REL_3.0-20160714000037+0000 REL_3.0-20160713000017+0000 REL_3.0-20160712001602+0000 REL_3.0-20160711000023+0000 REL_3.0-20160710000026+0000 REL_3.0-20160709000018+0000 REL_3.0-20160708000026+0000 REL_3.0-20160707000019+0000 REL_3.0-20160706000014+0000 REL_3.0-20160705000020+0000 REL_3.0-20160704000022+0000 REL_3.0-20160703000025+0000 REL_3.0-20160702000020+0000 REL_3.0-20160701000016+0000 REL_3.0-20160630000020+0000 REL_3.0-20160629000022+0000 REL_3.0-20160628000018+0000 REL_3.0-20160627000036+0000 REL_3.0-20160626000022+0000 REL_3.0-20160625000015+0000 REL_3.0-20160624000015+0000 REL_3.0-20160623000016+0000 REL_3.0-20160622000017+0000 REL_3.0-20160621000025+0000 REL_3.0-20160620000028+0000 REL_3.0-20160619000022+0000 REL_3.0-20160618000024+0000 REL_3.0-20160617000025+0000 REL_3.0-20160616000019+0000 REL_3.0-20160615000025+0000 REL_3.0-20160614000026+0000 REL_3.0-20160613000028+0000 REL_3.0-20160612000017+0000 REL_3.0-20160611000036+0000 REL_3.0-20160610000029+0000 REL_3.0-20160609000015+0000 REL_3.0-20160608000021+0000 REL_3.0-20160607000021+0000 REL_3.0-20160606000020+0000 REL_3.0-20160605000020+0000 REL_3.0-20160604000023+0000 REL_3.0-20160603173718+0000 REL_3.0-20160603042402+0000 REL_3.0-20160603003053+0000 REL_3.0-20160603000025+0000 REL_3.0-20160602000019+0000 REL_3.0-20160601000016+0000 REL_3.0-20160531141006+0000 REL_3.0-20160531000033+0000 REL_3.0-20160530000020+0000 REL_3.0-20160529000021+0000 REL_3.0-20160528073707+0000 REL_3.0-20160528000023+0000 REL_3.0-20160526000028+0000 REL_3.0-20160525000020+0000 REL_3.0-20160524000017+0000 REL_3.0-20160523000024+0000 REL_3.0-20160522000022+0000 REL_3.0-20160521000015+0000 REL_3.0-20160520000026+0000 REL_3.0-20160519000016+0000 REL_3.0-20160518000021+0000 REL_3.0-20160517000022+0000 REL_3.0-20160516000019+0000 REL_3.0-20160515000018+0000 REL_3.0-20160514000020+0000 REL_3.0-20160513000023+0000 REL_3.0-20160512000031+0000 REL_3.0-20160511000026+0000 REL_2.14.1-rc-2 REL_2.14.1-rc-1 REL_2.14 REL_2.14-rc-6 REL_2.14-rc-5 REL_2.14-rc-4 REL_2.14-rc-3 REL_2.14-rc-2 REL_2.14-rc-1 REL_2.14-20160510000018+0000 REL_2.14-20160509000021+0000 REL_2.14-20160508000031+0000 REL_2.14-20160507000023+0000 REL_2.14-20160506000031+0000 REL_2.14-20160505000028+0000 REL_2.14-20160504181444+0000 REL_2.14-20160504000015+0000 REL_2.14-20160503151749+0000 REL_2.14-20160503000024+0000 REL_2.14-20160501000014+0000 REL_2.14-20160430000030+0000 REL_2.14-20160429000028+0000 REL_2.14-20160428120601+0000 REL_2.14-20160428000027+0000 REL_2.14-20160427000021+0000 Nothing to show New pull request Latest commit 4f7ef2c Jul 15, 2016 wolfs Execute integration test for commit phase, too … +review REVIEW-6102 Permalink Failed to load latest commit information. buildSrc remove groovydoc from gradle docs project Jul 14, 2016 config Add checkstyle rule to disallow using non-Guava Lists or Maps May 25, 2016 design-docs Design doc for reserving heap from cache use Jul 13, 2016 gradle Polish release notes for S3 publishing Jul 6, 2016 subprojects Execute integration test for commit phase, too Jul 15, 2016 .editorconfig Don't trim trailng whitespace from markdown files. May 4, 2016 .gitignore Ignore log files in repository root May 25, 2016 .mailmap Add .mailmap entry for Marco Vermeulen Jun 14, 2016 .tm_properties some textmate metadata Nov 17, 2011 .travis.yml Runs all checks, except for integTests, on all subprojects for PR's May 30, 2015 CONTRIBUTING.md Change the CLA link to Gradle Apr 6, 2016 PULL_REQUEST_TEMPLATE.md Change to wording May 12, 2016 README.md Update depMngmt.xml (#659) Jun 24, 2016 build.gradle Make patchExternalModules a Sync task Jul 14, 2016 gradlew handle paths that have spaces May 20, 2016 gradlew.bat Update the wrapper to 3.0-M2. Jun 21, 2016 settings.gradle Revert ""Temporarily reverting everything since 810f052 for 3.0-milest… Jun 7, 2016 travisci_build.sh Skips a unit test on travisci which requires the full gradlde git branch May 30, 2015 version.txt Set version to 3.0 May 9, 2016 README.md Gradle is a build tool with a focus on build automation and support for multi-language development. If you are building, testing, publishing, and deploying software on any platform, Gradle offers a flexible model that can support the entire development lifecycle from compiling and packaging code to publishing web sites. Gradle has been designed to support build automation across multiple languages and platforms including Java, Scala, Android, C/C++, and Groovy, and is closely integrated with development tools and continuous integration servers including Eclipse, IntelliJ, and Jenkins. For more information about Gradle, please visit: http://gradle.org Downloading You can download released versions and nightly build artifacts from: http://gradle.org/downloads Building Naturally, Gradle builds itself with Gradle. Gradle provides an innovative wrapper that allows you to work with a Gradle build without having to manually install Gradle. The wrapper is a batch script on Windows and a shell script on other operating systems. You should use the wrapper to build the gradle project. Generally, you should use the wrapper for any wrapper-enabled project because it guarantees building with the Gradle version that the build was intended to use. To build the entire Gradle project, you should run the following in the root of the checkout. ./gradlew build  This will compile all the code, generate all the documentation and run all the tests. It can take several hours because we have thousands of tests, including integration tests that exercise virtually every Gradle feature. Among the things we test are: compatibility across versions, validity of samples and Javadoc snippets, daemon process capabilities, etc. In order for this build to pass, you will need a supported native tool chain installed. See the Gradle userguide for a list of supported tool chains. Installing from source To create an install from the source tree you can run either of the following: ./gradlew install -Pgradle_installPath=/usr/local/gradle-source-build  This will create a minimal installation; just what's needed to run Gradle (i.e. no docs). Note that the -Pgradle_installPath denotes where to install to. You can then build a Gradle based project with this installation: /usr/local/gradle-source-build/bin/gradle «some task»  To create a full installation (includes docs): ./gradlew installAll -Pgradle_installPath=/usr/local/gradle-source-build  Working with subprojects The Gradle build uses Gradle's ability to customize the logical structure of a multiproject build. All of the build's subprojects are in the subprojects/ directory and are mapped to top level children in settings.gradle. This means that to build just the core subproject (that lives in subprojects/core) you would run: ./gradlew core:build  Or to build the docs: ./gradlew docs:build  And so on. Contributing If you're looking to contribute to Gradle or provide a patch/pull request, you can find info on how to get in touch with the developers at http://gradle.org/development. Contributing Code This is a complicated topic and the Gradle development team are happy to help anybody get started working with the Gradle code base, so don't hesitate to get in touch with the developers if you need help working with the finer points of the build. If you are simply wanting to fix something or adding a small minor feature, it is usually good enough to simply make your change to the code and then run the check task for that subproject. So if the patch was to the launcher package for example, you can run: ./gradlew launcher:check  To run all of the tests and code quality checks for that module. Contributing Documentation Please see the readme in the docs subproject. Opening in your IDE IntelliJ IDEA To open the Gradle project in IDEA, simply run the following task from the root: ./gradlew idea  This will generate appropriate IDEA metadata so that the project can be opened from within IDEA. Also, IntelliJ Run Configurations will be generated, which allow you to run/debug Gradle or run pre-commit tests. Note that due to an IDEA glitch, the first build of Gradle from IDEA will fail. Launching a second build fixes the compilation error. Eclipse Building the Gradle project with Eclipse is currently limited due to Eclipse's lacking Groovy support. We recommend using IntelliJ IDEA. You will need Eclipse 4.5 (Mars) Install the Groovy Eclipse plugin from http://dist.springsource.org/snapshot/GRECLIPSE/e4.5/ Make sure you have a Java 7 compatible JRE configured in your workspace In Window->Preferences->Groovy->Compiler, check Enable Script folder support and add **/*.gradle Run ./gradlew eclipse from the root directory Import all projects using the ""Import Existing Projects into Workspace"" wizard Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gradle/gradle"	"A powerful build system for the JVM"	"true"
"Build tools and Setup"	"SDKMAN"	"http://sdkman.io"	"The Software Development Kit Manager (Previously known as GVM)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"858"	"65"	"149"	"GitHub - sdkman/sdkman-cli: The Software Development Kit Manager Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 65 Star 858 Fork 149 sdkman/sdkman-cli Code Issues 41 Pull requests 7 Wiki Pulse Graphs The Software Development Kit Manager http://sdkman.io 989 commits 7 branches 54 releases 36 contributors Cucumber 37.8% Shell 33.9% Groovy 28.3% Cucumber Shell Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags beta dev master offline_modes production sdkman_refactor zsh Nothing to show 5.0.0 3.3.4 3.3.3 3.3.2 3.3.1 3.3.0 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.1.0 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 2.4.5 2.4.4 2.4.3 2.4.2 2.4.1 2.4.0 2.3.0 2.2.1 2.2.0 2.1.0 2.0.0 1.3.13 1.3.12 1.3.11 1.3.10 1.3.9 1.3.8 1.3.7 1.3.6 1.3.5 1.3.0 1.1.2 1.1.1 1.1.0 1.0.3 1.0.2 1.0.1 1.0.0 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.5 Nothing to show New pull request Latest commit e3a4d46 Jul 5, 2016 busches committed with marc0der Fix creating symlinks in cygwin (#302) … mklink function from: http://stackoverflow.com/questions/3343988/accessing-a-cygwin-symlink-from-windows/11166347#11166347 Permalink Failed to load latest commit information. bin Implement semantic versioning. Jun 25, 2016 gradle/wrapper Upgrade to Gradle 3.0-milestone-2. Jun 23, 2016 lib Copy heroku logging java agent into lib folder. Oct 27, 2013 src Fix creating symlinks in cygwin (#302) Jul 5, 2016 .gitignore Updates all refs in build and VCS descriptor files to sdkman. Jun 17, 2015 .travis.yml Deploy to bintray after_succes on travis. Jun 10, 2016 Dockerfile Set the ENTRYPOINT, rather than the CMD. for the Docker build. Mar 5, 2016 LICENSE Add Apache 2.0 license to scripts. Remove appendix from main license … Dec 5, 2012 README.md Add README. Mar 29, 2016 build.gradle Implement semantic versioning. Jun 25, 2016 config.groovy Implement semantic versioning. Jun 25, 2016 gradlew Upgrade to Gradle 3.0-milestone-2. Jun 23, 2016 settings.gradle Revert ""Change root project name to be sdkman-cli."" May 19, 2016 README.md SDKMAN! CLI The Software Development Kit Manager Command Line Interface SDKMAN is a tool for managing parallel Versions of multiple Software Development Kits on any Unix based system. It provides a convenient command line interface for installing, switching, removing and listing Candidates. See documentation on the SDKMAN! website. Please report any bugs and feature request on the GitHub Issue Tracker. Installation Open your favourite terminal and enter the following: $ curl -s api.sdkman.io | bash  If the environment needs tweaking for SDKMAN to be installed, the installer will prompt you accordingly and ask you to restart. Running the Cucumber Features All SDKMAN's BDD tests are written in Cucumber and can be found under src/test/cucumber/sdkman. These can be run with Gradle by running the following command: $ ./gradlew test  Please ensure that the JAVA_HOME environment variable is set to JDK 1.8 on your system! Mac users can add the following line to their ~/.bash_profile file to set this variable: export JAVA_HOME=$(/usr/libexec/java_home -v1.8)  Using Docker for tests You can run the tests in a Docker container to guarantee a clean test environment. $ docker build --tag=sdkman-cli/gradle . $ docker run --rm -it sdkman-cli/gradle test  By running the following command, you don't need to wait for downloading Gradle wrapper and other dependencies. The test reports can be found under the local build directory. $ docker run --rm -it -v $PWD:/usr/src/app -v $HOME/.gradle:/root/.gradle sdkman-cli/gradle test  Local Installation To install SDKMAN locally running against your local server, run the following commands: $ ./gradlew install $ source ~/.sdkman/bin/sdkman-init.sh  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sdkman/sdkman-cli"	"The Software Development Kit Manager (Previously known as GVM)"	"true"
"Build tools and Setup"	"Lazybones"	"https://github.com/pledbrook/lazybones"	"A simple project creation tool that uses packaged project templates."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"369"	"35"	"68"	"GitHub - pledbrook/lazybones: A simple project creation tool that uses packaged project templates. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 369 Fork 68 pledbrook/lazybones Code Issues 39 Pull requests 2 Wiki Pulse Graphs A simple project creation tool that uses packaged project templates. 340 commits 3 branches 24 releases 19 contributors Groovy 81.0% Java 18.9% HTML 0.1% Groovy Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags embeddable master subgen Nothing to show v0.8.3 v0.8.2 v0.8.1 v0.8 v0.7.1 v0.7 v0.6 v0.5 v0.4 v0.3 v0.2.1 v0.2 rm plugin-v1.2.4 plugin-v1.2.3 plugin-v1.2.2 plugin-v1.2.1 plugin-v1.2 plugin-v1.1 plugin-v1.0.4 plugin-v1.0.3 plugin-v1.0.2 plugin-v1.0.1 plugin-v1.0 Nothing to show New pull request Latest commit a42afef Jun 1, 2016 pledbrook Use new version of SDKman Gradle plugin. … The old SKDman API endpoint is being shutdown, so the URL needs updating. Might as well update to the latest version of the plugin while I'm at it. Permalink Failed to load latest commit information. gradle/wrapper updates Gradle (wrapper) version to 2.9 Dec 20, 2015 lazybones-app Use new version of SDKman Gradle plugin. Jun 1, 2016 lazybones-gradle-plugin set plugin version in README to 1.2.4 Apr 4, 2016 lazybones-templates Bump version for lazybones-project template. Feb 3, 2016 media Add vector logo. Aug 13, 2014 .gitignore Ignore IDE files. Nov 26, 2015 .travis.yml Fix JDK 8 name in Travis file. Dec 31, 2015 CONTRIBUTING.md Add commit message guidelines to CONTRIBUTING.md May 18, 2013 LICENSE Create Apache 2 license file Apr 10, 2014 README.md @guspower removed references in examples to the now-defunct ratpack-l… Mar 4, 2016 build.gradle Updated to gradle 1.8 Oct 3, 2013 codenarc.groovy Upgrade to Gradle 2.5 for the main build. Aug 7, 2015 gradlew updates Gradle (wrapper) version to 2.9 Dec 21, 2015 gradlew.bat Add Gradle wrapper. Apr 25, 2013 settings.gradle Refactor build into multiple projects. Jun 21, 2013 README.md Lazybones Project Creation Tool Lazybones was born out of frustration that Ratpack does not and will not have a command line tool that will bootstrap a project. It's a good decision for Ratpack, but I'm lazy and want tools to do the boring stuff for me. The tool is very simple: it allows you to create a new project structure for any framework or library for which the tool has a template. You can even contribute templates by sending pull requests to this GitHub project or publishing the packages to the relevant Bintray repository (more info available below). The concept of Lazybones is very similar to Maven archetypes, and what Yeoman does for web applications. Lazybones also includes a subtemplates feature that resembles the behaviour of Yeoman's sub-generators, allowing you to generate optional extras (controllers, scaffolding etc.) inside a project. Developers Peter Ledbrook Kyle Boon Tommy Barker Contributors Luke Daley Tomas Lin Russell Hart Dave Syer Andy Duncan Running it Grab lazybones from sdkman (formerly gvm): sdk install lazybones  or alternatively, grab the distribution from Bintray, unpack it to a local directory, and then add its 'bin' directory to your PATH environment variable. Creating projects To create a new project, run lazybones create <template name> <template version> <target directory>  So if you wanted to create a skeleton Ratpack project in a new 'my-rat-app' directory you would run lazybones create ratpack 1.2.0 my-rat-app  The version is optional and if you leave it out, Lazybones will install the latest version of the template it can find. Named templates are all stored on Bintray. By default, Lazybones searches for templates in the pledbrook/lazybones-templates repository, but you can use other Bintray repositories by adding some configuration - set the Custom Repositories section under Configuration later in this document. You're not limited to only Bintray as you can install templates directly from a URL too: lazybones create http://dl.bintray.com/kyleboon/lazybones/java-basic-template-0.1.zip my-app  Of course it can be pretty laborious copying and pasting URLs around, so Lazybones allows you to configure aliases for URLs that you use frequently. By adding the following configuration to your Lazybones settings file, ~/.lazybones/config.groovy (see below for more details on this), you can install the template by name: templates {     mappings {         myTmpl = ""http://dl.bintray.com/...""     } }  In other words, you could now run lazybones create myTmpl my-app  Note that when using the URL option, there is no need to specify a version. You should also be aware that mappings take precedence, i.e. if a mapping has the same name as an existing template, the mapping is used. This essentially creates a simple override mechanism. There is just one more thing to say about the create command: by default it creates the specified directory and puts the initial project in there. If you want to unpack a template in the current directory instead, for example if you have already created the project directory, then just pass '.' as the directory: lazybones create ratpack .  Once you have created a new project from a template, you may notice that the project directory contains a .lazybones sub directory. You may delete this, but then you won't be able to use the generate command (see next section) if the project template has support for it. Many project templates request information from you, such as a project name, a group ID, a default package, etc. If this is the umpteenth time you have created a project from a given template, then answering the questions can become tedious. There is also the problem of scripting and automation when you want to create a project without user intervention. The solution to both these issues is to pass the values on the command line: lazybones create ratpack 1.2.0 ratapp -Pgroup=org.example -Ppackage=org.example.myapp  The -P option allows you to pass property values into the project templates without user intervention. The key is to know what the property names are, and that comes down to the project template. At the moment, the best way to find out what those properties are is to look at the post-install script itself. The last option to mention is --with-git which will automatically create a new git repository in the project directory. The only requirement is that you have the git command on your path. Sub-templates As of Lazybones version 0.7, project templates can incorporate subtemplates. Imagine that you have just created a new web application project from a template and that template documents that you can create new controllers using a sub- template named controller. To use it, just cd into the project directory and run lazybones generate controller  This will probably ask you for the name of the controller and its package before generating the corresponding controller file in your project. You can reuse the command to create as many controllers as you need. As with the create command, you can also pass in property values on the command line if the subtemplate is parameterised: lazybones generate controller -Ppackage=org.example.myapp -Pclass=Book  The last option available to you as a user is template qualifiers. These only work if the subtemplate supports them, but they allow you to pass additional information in a concise way: lazybones generate artifact::controller  In this case, the template name is artifact, but we have qualified it with an extra controller. You can pass in as many qualifiers as you want, you just separate them with ::. Note that you do not specify a version with the generate command. This is because the subtemplates are embedded directly in the project template, and so there can only be one version available to you. Finding out what templates are available To see what templates you can install, run lazybones list  This will list all aliases and remote templates. If you want to see what templates you have cached locally, run lazybones list --cached  In fact, --cached is implied if Lazybones can't connect to the internet. You can also find out more about a template through the info command: lazybones info <template name>  This will print a description of the template and what versions are available for it. If you're offline, this will simply display an error message. Configuration Lazybones will run out of the box without any extra configuration, but the tool does allow you to override the default behaviour via a fixed set of configuration options. These options can be provided in a number of ways following a set order of precedence: System properties of the form lazybones.*, which can be passed into the app via either JAVA_OPTS or LAZYBONES_OPTS environment variables. For example: env JAVA_OPTS=""-Dlazybones.config.file=/path/to/my-custom-default-config.groovy"" lazybones ...  Highest precedence, i.e. it overrides all other sources of setting data. User configuration file in $USER_HOME/.lazybones/config.groovy. This is parsed using Groovy's ConfigSlurper, so if you're familiar with that syntax you'll be right at home. Otherwise, just see the examples below. (Since 0.8) A JSON configuration file in $USER_HOME/.lazybones/managed-config.groovy that is used by the config commands. You can edit it this as well. A Groovy-based default configuration file that is provided by the application itself, but you can specify an alternative file via the lazybones.config.file system property. Lazybones also provides a convenient mechanism for setting and removing options via the command line: the config command. Command line configuration The config command provides several sub-commands that allow you to interact with the persisted Lazybones configuration; specifically, the JSON config file. You run a sub-command via lazybones config <sub-cmd> <args>  where <sub-cmd> is one of: set <option> <value> [<value> ...] Allows you to change the value of a configuration setting. Multiple values are treated as a single array/list value. The new value replaces any existing one. add <option> <value> Appends an extra value to an existing array/list setting. Reports an error if the setting doesn't accept multiple values. If the setting doesn't already have a value, this command will initialise it with an array containing the given value. clear <option> Removes a setting from the configuration, effectively reverting it to whatever the internal default is. show [--all] <option> Shows the current value of a setting. You can use the --all argument (without a setting name) to display all the current settings and their values. list Displays all the configuration settings supported by Lazybones. So what configuration settings are you likely to customise? Custom repositories Lazybones will by default download the templates from a specific Bintray repository. If you want to host template packages in a different repository you can add it to Lazybone's search path via the bintrayRepositories setting: bintrayRepositories = [       ""kyleboon/lazybones"",       ""pledbrook/lazybones-templates"" ]  If a template exists in more than one repository, it will be downloaded from the first repository in the list that it appears in. Package aliases If you regularly use a template at a specific URL rather than from Bintray, then you will want to alias that URL to a name. That's where template mappings (or aliases) come in. The aliases are defined as normal settings of the form templates.mappings.<alias> = <url>  In a Groovy configuration file, you can define multiple aliases in a block: templates {     mappings {         test = ""http://dl.dropboxusercontent.com/u/29802534/custom-ratpack.zip""         after = ""file:///var/tmp/afterburnerfx-2.0.0.zip""     } }  Alternatively, add them from the command line like this: lazybones config set templates.mappings.after file:///var/tmp/afterburnerfx-2.0.0.zip  The aliases will always be available to you until you remove them from the persisted configuration. Setting a proxy (and other system properties) (Since 0.8.1) Many people have to work behind a proxy, but Lazybones didn't make it easy to configure one. In fact the only way to do it was to add the relevant system properties to a JAVA_OPTS environment variable. From 0.8.1, you now have another option. Lazybones has stolen the idea of having a special form of configuration option for system properties from Gradle. So if you define a property with a systemProp. prefix, it will be added as a system property internally. So to configure an HTTP proxy, you only need to add the following to your Lazybones configuration: systemProp {     http {         proxyHost = ""localhost""         proxyPort = 8181     }     https {         proxyHost = ""localhost""         proxyPort = 8181     } }  To avoid potential configuration issues, use the same proxy settings for HTTP and HTTPS if possible. If your proxy requires authentication, you will need to add a couple of extra properties: systemProp {     http {         proxyUser = ""johndoe""         proxyPassword = ""mypassword""     } }  As with the host and port, there are https variants of the username and passwordi as well. General options These are miscellaneous options that can be overridden on the command line: // <-- This starts a line comment // Set logging level - overridden by command line args options.logLevel = ""SEVERE""  The logging level can either be overridden using the same logLevel setting: lazybones --logLevel SEVERE info ratpack  or via --verbose, --quiet, and --info options: lazybones --verbose info ratpack  The logging level can be one of: OFF SEVERE WARNING INFO FINE FINEST ALL Building it This project is split into two parts: The lazybones command line tool; and The project templates. The command line tool The command line tool is created via Gradle's application plugin. The main class is uk.co.cacoethes.lazybones.LazyBonesMain, which currently implements all the sub-commands (create, list, etc.) as concrete methods. The main class plus everything else under src/main is packaged into a lazybones JAR that is included in the distribution zip. The application Gradle plugin generates a lazybones script that then runs the main class with all required dependencies on the classpath. To build the distribution, simply run ./gradlew distZip  The project templates The project templates are simply directory structures with whatever files in them that you want. Ultimately, the template project directories will be zipped up and stored on Bintray. From there, lazybones downloads the zips on demand and caches them in a local user directory (currently ~/.lazybones/templates). If you want empty directories to form part of the project template, then simply add an empty .retain file to each one. When the template archive is created, any .retain files are filtered out (but the containing directories are included). To package up a template, simply run ./gradlew packageTemplate<TemplateName>  The name of the project template comes from the containing directory, which is assumed to be lowercase hyphenated. The template name is the equivalent camel case form. So the template directory structure in src/templates/my-template results in a template called 'MyTemplate', which can be packaged with ./gradlew packageTemplateMyTemplate  The project template archive will be created in the build directory with the name '-template-.zip'. See the small section below on how the template version is derived. You can also package all the templates in one fell swoop: ./gradlew packageAllTemplates  Once a template is packaged up, you can publish it to a generic (non-Maven) Bintray repository by running ./gradlew publishTemplate<TemplateName>  This will initially fail, because the build does not know where to publish to. That's quickly fixed by adding a gradle.properties file in the root of this project that contains at least these properties: repo.username=your_bintray_username repo.apiKey=your_bintray_apikey  You can then publish new versions of templates whenever you want. Note that you cannot republish with this mechanism, so remember to increment the version if you need to. Finally, you can publish the whole shebang (unusual) with ./gradlew publishAllTemplates  If you don't want to publish your template you can install it locally using the installTemplate rule.  ./gradlew installTemplate<TemplateName>  This will install the template to ~/.lazybones/templates so that you can use it without moving it to bintray first. And that's it for the project templates. Template versions You define the version of a template by putting a VERSION file in the root directory of the template that contains just the version number. For example, you specify a version of 1.2.8 for the my-template template by adding the file src/templates/my-template/VERSION with the contents 1.2.8  That's it! The VERSION file will automatically be excluded from the project template archive. Contributing templates Read the Template Developers Guide for information on how to create and publish Lazybones templates. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pledbrook/lazybones"	"A simple project creation tool that uses packaged project templates."	"true"
"IDE and Editor Support"	"IntelliJ IDEA"	"http://www.jetbrains.com/idea/"	"The Most Intelligent IDE for the Java Platform"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IntelliJ IDEA the Java IDE All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search IntelliJ IDEA What's New Features Learn Buy Download Capable and Ergonomic Java * IDE Download *Actually, much more than just Java Features Enjoy productive java Every aspect of IntelliJ IDEA is specifically designed to maximize developer productivity. Together, powerful static code analysis and ergonomic design make development not only productive but also an enjoyable experience. Take a tour Deep intelligence After IntelliJ IDEA's indexed your source code, it offers blazing fast and intelligent experience by giving relevant suggestions in every context: instant and clever code completion, on-the-fly code analysis and reliable refactoring tools. Out-of-the-box experience Mission-critical tools such as integrated version controls systems and a wide variety of supported languages and frameworks are at hand — no plugin hustle included. Smart code completion While the basic completion suggests names of classes, methods, fields, and keywords within the visibility scope, the smart completion suggests only those types that are expected in the current context. Framework-specific assistance While IntelliJ IDEA is an IDE for Java, it also understands and provides intelligent coding assistance for a large variety of other languages such as SQL, JPQL, HTML, JavaScript, etc., even when the language expression is injected into a String literal in your Java code. Productivity boosters The IDE predicts your needs and automates the tedious and repetitive development tasks so you can stay focused on the big picture. Developer ergonomics In every design and implementation decision that we make, we keep in mind the risk of interrupting the developer's flow and do our best to eliminate or minimize it. The IDE follows your context and brings up the corresponding tools automatically. Unobtrusive intelligence The coding assistance in IntelliJ IDEA is not about only the editor: it helps you stay productive when dealing with its other parts as well: e.g. filling a field, searching over a list of elements; accessing a tool window; or toggling for a setting, etc. Built-in tools and supported frameworks Built-in tools Build tools Version control Decompiler Coverage Database tools/SQL JVM languages Java Scala Groovy Kotlin Enterprise frameworks Spring Java EE GWT/Vaadin JBoss Play Grails App Servers/Clouds Mobile development Android PhoneGap/Cordova/ Ionic Web development JavaScript HTML/CSS AngularJS React Node.js Discover all features New Features User interface Font ligatures Breadcrumb for Java Background Image in Editor and IDE Frame Notication popups got compact and moved to the right-bottom corner Version control Log for Git and Mercurial now loads data in the background, gets a handy loading progress indicator and a shortcut to navigate to the filter field Unversioned files in Commit dialog Case-only rename in Git for Windows and OS X Patches can now be applied from the clipboard or by dragging a file into the IDE; and IntelliJ offers help when applying patches with conflicts Frameworks Support for JUnit 5 Better coding assistance for React Support for AngularJS 2 Spring 4.3 core features, new inspections, and better performance Coding assistance for Spring Caching Code completion and navigation in FreeMarker and Velocity templates for variables defined in Spring controllers And much more… Choose your edition Choose your edition Community For JVM and Android development Ultimate For web and enterprise development Java, Kotlin, Groovy, Scala Android ? Maven, Gradle, SBT Git, SVN, Mercurial, CVS Perforce, ClearCase, TFS JavaScript, TypeScript ? Java EE, Spring, GWT, Vaadin, Play, Grails, Other Frameworks ? Database Tools, SQL Compare editions Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free download Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free 30-day trial Tell me about new product features as they come out Thanks for your request! Community forum Plugin repository Bug and issue tracker IntelliJ IDEA blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"The Most Intelligent IDE for the Java Platform"	"true"
"IDE and Editor Support"	"Groovy Grails Tool Suite"	"http://spring.io/tools/ggts"	"Eclipse-based IDE optimized for developing, debugging and executing Groovy and Grails applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Groovy/Grails Tool Suite™ (GGTS) Docs Guides Projects Blog Questions x Home Docs Guides Projects Blog Questions Tools Groovy/Grails Tool Suite™ will be available from Pivotal for a limited time The Groovy/Grails Tool Suite is a complete Eclipse-based development environment optimized for developing, debugging and executing Groovy and Grails applications. A new perspective, new views and wizards ensure an intuitive and familiar Eclipse experience when working with the Groovy language and Grails framework. It provides support for the latest versions of Groovy and Grails, and comes on top of the latest Eclipse releases. Included with the Groovy/Grails Tool Suite is the developer edition of Pivotal tc Server, the drop-in replacement for Apache Tomcat. With its Spring Insight console, tc Server Developer Edition provides a graphical real-time view of application performance metrics that lets developers identify and diagnose problems from their desktops. The Groovy/Grails Tool Suite supports application targeting to local, virtual and cloud-based servers. It is freely available for development and internal business operations use with no time limits, fully open-source and licensed under the terms of the Eclipse Public License. Download GGTS (3.6.4.RELEASE for Mac) Download GGTS (3.6.4.RELEASE for Linux) Download GGTS (3.6.4.RELEASE for Linux) Download GGTS (3.6.4.RELEASE for Windows) Download GGTS (3.6.4.RELEASE for Windows) See All Versions Feature Highlights Powerful Groovy Editing Facilities A smart inferencing engine continually analyses your code, making intelligent code completion suggestions, providing detailed hover info and enables fast navigation around a codebase. The intelligent debugger understands the dynamic nature of groovy code making it easier to step through and explore program state. Sophisticated Grails Support Comprehensive support for creating, editing, debugging and launching Grails applications. A command wizard is included that provides intelligent content assist for quickly executing commands to help increase productivity. By exploiting the Eclipse Web Tools Project there are easy deployment options to tc Server or Cloud Foundry. Gradle Integration Installable from the GGTS Dashboard, the gradle extension provides comprehensive Gradle project integration. Easily import gradle projects and have the tools automatically manage dependencies. Also includes an integrated task view enabling direct task invocation with a double click. Team Services Tools © 2016 Pivotal Software, Inc. All Rights Reserved. Terms of Use, Privacy and Trademark Guidelines"	"null"	"null"	"Eclipse-based IDE optimized for developing, debugging and executing Groovy and Grails applications"	"true"
"IDE and Editor Support"	"Groovy Web Console"	"http://groovyconsole.appspot.com"	"The online Groovy console"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Groovy web console Groovy web console Subscribe to this site Actions  ➤ Execute script New script Publish script View recent scripts Title Author Tags (comma separated) Captcha question: Result Output Stacktrace Console tips You can hit Alt-Meta-R to execute the current script without using the execute button. You can resize the script view by sliding down the bottom of the line number gutter. About this site: The Groovy Web Console is a website for sharing and executing Groovy programming snippets of code! Application deployed on Google App Engine Developed with the Gaelyk lightweight Groovy toolkit for Google App Engine Programmed with Groovy Code hosted on GitHub and managed with Git Live syntax highlighting provided by CodeMirror Syntax highlighting for sharing provided by SyntaxHighlighter"	"null"	"null"	"The online Groovy console"	"true"
"IDE and Editor Support"	"LightTable Plugin"	"https://github.com/rundis/LightTable-Groovy"	"LightTable Support"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25"	"7"	"6"	"GitHub - rundis/LightTable-Groovy: Groovy plugin for Light Table Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 25 Fork 6 rundis/LightTable-Groovy Code Issues 8 Pull requests 1 Wiki Pulse Graphs Groovy plugin for Light Table 76 commits 1 branch 7 releases 5 contributors JavaScript 79.0% Groovy 11.7% Clojure 7.4% Java 1.6% Other 0.3% JavaScript Groovy Clojure Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit a94fce8 Apr 30, 2016 rundis Add discontinued message Permalink Failed to load latest commit information. codemirror Initial commit with support for groovy syntax highlighting Feb 8, 2014 gradle/wrapper Working version with classpath from gradle projects (single level) May 18, 2014 groovy-src Display dependency graph for both single project and multiproject wit… Jun 11, 2014 js First stat at showing dependencies for a single gradle project Jun 1, 2014 lib Upping to version 0.0.6 Jun 11, 2014 samples/gradle Display dependency graph for both single project and multiproject wit… Jun 10, 2014 src/lt/plugins #19 Temp fix for not making a gradle connection when evaluating a .gr… Jun 19, 2014 style Display dependency graph for both single project and multiproject wit… Jun 10, 2014 LICENSE.md Added readme and license Feb 9, 2014 README.md Add discontinued message Apr 30, 2016 build.gradle Display dependency graph for both single project and multiproject wit… Jun 10, 2014 gradlew First step of incorporating ast transformation from Jim White for col… Feb 20, 2014 gradlew.bat First step of incorporating ast transformation from Jim White for col… Feb 20, 2014 groovy.behaviors Display dependency graph for both single project and multiproject wit… Jun 10, 2014 groovy_compiled.js Upping version to 0.0.7 Jun 19, 2014 groovy_compiled.js.map Upping version to 0.0.7 Jun 19, 2014 plugin.edn Upping version to 0.0.7 Jun 19, 2014 project.clj Upping version to 0.0.7 Jun 19, 2014 run-server.sh Run with utf-8 default for groovy server Jun 11, 2014 sample.groovy Cache binding results to allow a more repl oriented experience May 12, 2014 README.md ! NO LONGER MAINTAINED ! This plugin doesn't work with the latest versions of Light Table and Groovy. If anyone would like to take over maintenance, feel free to get in touch. Alternatively I'm happy to receive pull requests bringing the plugin up to date. Groovy plugin for Light Table This plugin aims to provide Groovy support for the Light Table IDE. At the moment it is quite rudementary. The short term plan is to grow it into a feasible groovy console/groovy shell alternative with some unique features enabled by the Light Table platform. A long term plan would be to slowly grow it into a feasible Groovy IDE alternative. Installation / Getting started The plugin is available from the Light Table plugin manager under the name Groovy. Check out the screencast Development/Contributing If you wish to submit pull request. Just fork this repo and install the plugin by cloning the repo into your Light Table plugin directory.   $ cd /path/to/config/LightTable/plugins && git clone git@github.com:rundis/LightTable-Groovy.git To build the groovy bits a Gradle wrapper script is provided:   $ ./gradlew build deploy Check out the wiki for more details: Contributing Requirements You need to have groovy installed and available in your PATH. I would recommend using GVM Features/Usage Syntax highlighting Simple syntax highlighting is provided throught the use of CodeMirror groovy mode. Evaluate Groovy on Demand ctrl/cmd-shift-enter evaluates all content in the current editor, prints any output to the console and shows results line by line. ctrl/cmd-enter evaluates the selected text/current line, prints output to the console and shows results inline for selected line(s). Values for all top level expressions are shown. In looping constructs a max of 10 values are displayed for any given line. Exceptions are also displayed. If there are any exceptions, any values recorded prior to the exception arising are also shown. Bindings Bindings are stored/cached per editor. This gives you a behavior resembling a repl, but with many limitations. Anything that is evaluated is run as a groovy script, so obviously the same restrictions apply. def myVar = 4  println myVar // will crash if you evaluate each line separately (ie two separate evals) myVar = 4  println myVar // will work fine when evaluating lines separately, because myVar will be stored in binding def myDouble(x) {x*2} // evaluates and results in a closure stored in bindings  myDouble(2) // I can invoke it  myDouble.curry(4)() // Its a closure not a method ! If you wish to clear all bindings for an editor invoke the command Groovy: Clear bindings for current editor (you probably would want to assign your own keyboard shortcut for it !) Gradle integration You can connect the groovy plugin to a gradle project (its using the Gradle tooling API under the hood). Just use the command Add connection and select ""Groovy"" from the list. Then select the directory where your build.gradle file resides. NOTE Won't work on multiprojects Once connected you can import and use classes available from the classpath of that project. 3rd party libraries are available without further ado, but for project internal classes you must explicitly compile your project. The plugin uses the runttime classpath available through your projects main sourceSet Gradle task execution When you have connected to a Gradle project you can invoke tasks (currently only one at a time). Select command: Groovy: Select gradle task A list of available tasks is shown. For multiprojects task selectors are shown in addition to the individual tasks available for each subproject Select task (or task selector) The task will be executed and progress shown in the status bar. If there is an error the stacktrace is logged to the console. Show dependency graph You can view a dependency graph for your connected gradle project via the command Groovy: Show gradle dependencies. Each dependency configuration available in your project can be viewed. For multiprojects you also get an overview diagram + the ability to drill down to individual projects. Feature hightlight: Zoom in / out with mouse or keyboard Pan (with mouse only currently) View dependency graph per configuration (tab/button per config) Overview diagram for multiproject (creates edges for any connection between projects regardless of configuration) Any project node (configured as project(....) dependency in gradle) should be clickable. Clicking on a project dep node should bring you to a detailed view of dependecies for that project If you click the ""header"" of the diagram you should be taken back to the default view Enable logging If you wish to enable debug logging from the groovy client. Add the following to your user.behaviors   :editor.groovy [(:lt.plugins.groovy/client-enable-logging)] Output is written to: $groovy-plugin-dir$/lt_groovy.log Version history 0.0.7 Bugfix regression. Evaluation of .groovy files outside of gradle projects failed 0.0.6 Gradle dependency graph and execute tasks for gradle multi-projects. Cheers to hackergarten at Gr8Conf for contributions. Big cheers to effrafax and rlovtangen for contributions to this release ! 0.0.5 Execute Gradle tasks for connected gradle project (with progress reporting) 0.0.4 Connect to gradle projects for exploratory testing of any classes in the classpath. Methods are now stored as closure binding variables. 0.0.3 A hint of REPL. Storing binding variables between evals allows for a more REPL like experience. 0.0.2 Inline results for almost any top level line expression yielding values are shown. Removed display of binding variables (no longer needed). The majority of the features for this release are due to awesome groovy ast contributions from Jim White 0.0.1 Support for simple syntax highligting and evaluation of groovy scripts with inline results. License GPLv3 license, same as Light Table. See LICENSE.md for the full text. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rundis/LightTable-Groovy"	"LightTable Support"	"true"
"IDE and Editor Support"	"Sublime Text 2"	"https://gist.github.com/kdabir/2203530"	"Run groovy scripts from Sublime Text"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Run groovy sripts from sublime-text 2 · GitHub Skip to content All gists GitHub Sign up for a GitHub account Sign in Create a gist now Instantly share code, notes, and snippets. Star 8 Fork 1 kdabir/groovy.sublime-build Last active Apr 14, 2016 Embed What would you like to do? Embed Embed this gist in your website. Embed Share Copy sharable URL for this gist. Share Clone via HTTPS Clone with Git or checkout with SVN using the repository's web address. HTTPS Learn more about clone URLs Download ZIP Code Revisions 2 Stars 8 Forks 1 Run groovy sripts from sublime-text 2 Raw groovy.sublime-build { ""cmd"": [""groovy"",""$file""], ""selector"": ""source.groovy"", ""windows"": { ""shell"": ""cmd.exe"" } } Owner kdabir commented May 7, 2012 If groovy is not found on PATH, check out here to set groovy on path for non terminal apps, or give complete path to groovy executable leonidasos commented Sep 21, 2012 Add selector for 'Automatic' build system: ""selector"": ""source.groovy"", Owner kdabir commented Aug 26, 2013 Thanks for the ""selector"" tip @leonidasos whgreate commented Sep 10, 2013 it works! jhntrifork commented Oct 10, 2013 If you add the line below, you will be able to use F4 to skip to next build error: ""file_regex"": ""[ ]*at .+\((.+):([0-9]+)\)"", seanf commented Feb 7, 2014 @jhntrifork, thanks for that. Sublime 3 gave an error about an escape character, so I went with this: ""file_regex"": ""[ ]*at .+[(](.+):([0-9]+)[)]"",  Sign up for free to join this conversation on GitHub. Already have an account? Sign in to comment Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://gist.github.com/kdabir/2203530"	"Run groovy scripts from Sublime Text"	"true"
"Web Frameworks"	"Grails"	"https://github.com/grails/grails"	"A powerful web application framework based on the Groovy language"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"454"	"27"	"89"	"GitHub - grails/grails: A powerful web application framework based on the Groovy language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 454 Fork 89 grails/grails Code Pull requests 0 Pulse Graphs A powerful web application framework based on the Groovy language http://grails.org 6,419 commits 6 branches 11 releases Fetching contributors Groovy 48.6% Java 46.5% JavaScript 4.8% Other 0.1% Groovy Java JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1.x 1.2.x app-engine bundlor grailsgspperf master Nothing to show v1.2.1 v1.2 v1.2RC2 v1.2RC1 v1.2M4 v1.2M3 v1.2M2 v1.2M1 v1.2-M4 v1.1.2 v1.1.1 Nothing to show New pull request Latest commit 874de26 Feb 10, 2010 jeffbrown remove .gitignore file Permalink Failed to load latest commit information. README.txt the project has been broken up into several smaller projects Feb 10, 2010 README.txt The monolithic grails project has been broken up into several smaller projects.    Visit http://github.com/grails.   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/grails/grails"	"A powerful web application framework based on the Groovy language"	"true"
"Web Frameworks"	"Gaelyk"	"https://github.com/gaelyk/gaelyk"	"A lightweight Groovy toolkit for Google App Engine Java"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"228"	"18"	"41"	"GitHub - gaelyk/gaelyk: A lightweight Groovy toolkit for Google App Engine Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 228 Fork 41 gaelyk/gaelyk Code Issues 30 Pull requests 1 Pulse Graphs A lightweight Groovy toolkit for Google App Engine Java http://gaelyk.appspot.com 1,193 commits 10 branches 21 releases 14 contributors Groovy 68.6% Java 21.4% HTML 3.9% ApacheConf 2.6% CSS 1.8% JavaScript 1.7% Groovy Java HTML ApacheConf CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags doc-rework gradle-reorg groovy2 issue/132 issue/134 master nexus-problem plugins-extracted routes-extracted template-restructure Nothing to show GAELYK_2_1_2 GAELYK_2_1_1 GAELYK_2_1 GAELYK_2_0 GAELYK_1_1 GAELYK_0_7 GAELYK_0_6_1 GAELYK_0_6 GAELYK_0_5_6 GAELYK_0_5_5 GAELYK_0_5 GAELYK_0_4_4 GAELYK_0_4_3 GAELYK_0_4_2 GAELYK_0_4_1 GAELYK_0_4 GAELYK_0_3_3 GAELYK_0_3_2 GAELYK_0_3_1 GAELYK_0_3 GAELYK_0_2 Nothing to show New pull request Latest commit 605f26b May 31, 2016 musketyr updated to latest appengine version and download sdk automatically Permalink Failed to load latest commit information. core Bring back FilesExtensions Apr 26, 2016 gaelyk-docgenerator upgraded dependencies (Groovy, Gradle, AppEngine), new snaphost release May 15, 2015 gradle/wrapper Update Gradle 2.13 Apr 26, 2016 graphics prepared for 2.1 release Mar 23, 2014 ngdocs new web Jan 31, 2014 template-project updated to latest appengine version and download sdk automatically May 31, 2016 website Documentation clarification Apr 29, 2016 .gitignore tuned up POGO coercion Feb 18, 2013 .travis.yml Try no --stacktrace in travis... Apr 12, 2012 README.md Updated links to sources and Issue tracker Oct 30, 2014 build.gradle Update Gradle 2.13 Apr 26, 2016 codenarc.groovy using common gradle settings in core build Nov 19, 2012 common-codenarc-ci.gradle derived common gradle properties, settings and tasks Nov 19, 2012 common-nexus.gradle renamed signing enabled variable Nov 19, 2012 common.gradle Update wrapper in common May 13, 2016 gradlew Update Gradle 2.13 Apr 26, 2016 gradlew.bat Update Gradle 2.13 Apr 26, 2016 settings.gradle added base for gaelyk shortcuts generator Nov 26, 2013 README.md Welcome to the Gaelyk project infrastructure Gaelyk is a lightweight toolkit for developing applications in Groovy for the Google App Engine environment. You can learn more about the project by going to the project website. In particular, you'll quickly get started by reading the tutorial. And downloading the latest version of the toolkit. If you wish to discuss or contribute, please fill free to join us on the Gaelyk Google Group. Gaelyk is hosted at GitHub: Sources Issue tracker Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gaelyk/gaelyk"	"A lightweight Groovy toolkit for Google App Engine Java"	"true"
"Web Frameworks"	"Glide"	"https://github.com/kdabir/glide"	"Create awesome apps on Google App Engine in a snap"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"39"	"7"	"7"	"GitHub - kdabir/glide: Create awesome apps on Google App Engine in a snap Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 39 Fork 7 kdabir/glide Code Issues 14 Pull requests 0 Pulse Graphs Create awesome apps on Google App Engine in a snap http://glide-gae.appspot.com 322 commits 1 branch 15 releases Fetching contributors Groovy 89.0% Java 7.9% CSS 2.1% Makefile 0.4% Shell 0.3% HTML 0.2% JavaScript 0.1% Groovy Java CSS Makefile Shell HTML JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.3 v0.3.2 v0.3.1 v0.3 v0.2 v0.1 runner-0.9.1 glide-runner-0.9.2 glide-gradle-plugin-0.9.3 glide-gradle-plugin-0.9.2 glide-gradle-plugin-0.9.1 glide-gradle-plugin-0.9.0 glide-filters-0.9.2 glide-filters-0.9.1 glide-filters-0.9.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. glide-filters glide-gradle-plugin glide-runner gradle/wrapper samples sandbox site .editorconfig spaces are bad :) Jul 1, 2016 .gitignore .travis.yml to prevent site from starting server on travis Jun 25, 2016 LICENSE.txt Makefile README.md build.gradle gradle.properties gradlew gradlew.bat settings.gradle setup-intg.sh README.md Glide This is source code repo of glide. For User guide check the glide homepage. Contributing To start developing glide, you need to have git and java (at least 1.7) available on your machine. It's advisable to have groovy and gradle installed as well (both optional). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kdabir/glide"	"Create awesome apps on Google App Engine in a snap"	"true"
"Web Frameworks"	"Ratpack"	"https://github.com/ratpack/ratpack"	"A toolkit for JVM web applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1151"	"146"	"262"	"GitHub - ratpack/ratpack: A toolkit for JVM web applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 146 Star 1,151 Fork 262 ratpack/ratpack Code Issues 86 Pull requests 5 Pulse Graphs A toolkit for JVM web applications http://www.ratpack.io 4,824 commits 9 branches 38 releases 92 contributors Java 68.4% Groovy 29.3% CSS 1.3% JavaScript 0.9% HTML 0.1% Ruby 0.0% Java Groovy CSS JavaScript HTML Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags default-public-address-scheme enable-failOnVersionConflict execution-tracing expose-cookies-from-handlingresult groovy-embedded-app-script hyleung-hystrix-1.5 master netty-upgrade pooled-http-integ Nothing to show v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.3.0-rc-2 v1.3.0-rc-1 v1.2.0 v1.2.0-rc-2 v1.2.0-RC-1 v1.1.1 v1.1.0 v1.0.0 v1.0.0-rc-3 v1.0.0-rc-2 v1.0.0-rc-1 v0.9.19 v0.9.18 v0.9.17 v0.9.16 v0.9.15 v0.9.14 v0.9.13 v0.9.12 v0.9.11 v0.9.10 v0.9.9 v0.9.8 v0.9.7 v0.9.6 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 spring-boot-pr-3 0.6.1 0.5.2 Nothing to show New pull request Latest commit 0134a4e Jul 15, 2016 alkemist Add Operation.blockingNext(). … Closes #1001.  Credit https://github.com/danhyun. Permalink Failed to load latest commit information. buildSrc Rearrange things to support building in Eclipse (#446). Mar 30, 2015 gradle Update Checkstyle version. Jul 15, 2016 perf Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-benchmark Update various build/test/internal dependencies. Apr 4, 2015 ratpack-core Add Operation.blockingNext(). Jul 15, 2016 ratpack-dropwizard-metrics Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-gradle Add Guava as a test dependency to the Gradle tests, now that we don't… Jun 15, 2016 ratpack-groovy-test Rename EmbeddedBaseDir to EphemeralBaseDir. Aug 24, 2015 ratpack-groovy Merge branch 'netty-upgrade' Jun 19, 2016 ratpack-guice Add support for null returning guice providers (#966) May 30, 2016 ratpack-h2 Make datasource decoration possible in built-in modules Aug 27, 2015 ratpack-handlebars Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-hikari Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-hystrix Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-lazybones Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-manual Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-newrelic Allow exec interceptors to initialise the execution. Aug 21, 2015 ratpack-pac4j Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-remote-test Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-remote Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-retrofit2 Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-rx #1012 RxRatpack#fork for parallel observables (#1014) Jul 15, 2016 ratpack-session-redis Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-session Move tempermental algorithms to new spec that is allowed to fail. Jun 24, 2016 ratpack-site Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-spring-boot-starter Re-enable failOnVersionConflict(). (#1011) Jul 13, 2016 ratpack-spring-boot Create a file system for root of JAR if app is running from archive Jan 19, 2016 ratpack-test-internal Use more fine grained serialization for the session data. Apr 10, 2016 ratpack-test Support for describing the path binding specification. (#984) May 19, 2016 ratpack-thymeleaf Allow an initializer to be specified when adding the MDC interceptor. Sep 25, 2015 .editorconfig Move the .editorconfig file and give it the right values. Dec 31, 2014 .gitattributes Ensure gradle-wrapper.jar is being treated as binary in Windows Aug 26, 2014 .gitignore Add Spring Boot starter to build Dec 10, 2015 CONTRIBUTING.md Add a waffle badge to the contributing page. Dec 23, 2013 LICENSE.txt Clarified that Ratpack is under the Apache 2.0 license. Apr 26, 2011 README.md Update coverage badge Aug 7, 2015 RELEASING.md Use docs.gradle.org links. Oct 22, 2015 gradle.properties Update Checkstyle version. Jul 15, 2016 gradlew copied template project Apr 19, 2013 gradlew.bat copied template project Apr 19, 2013 ratpack.gradle Need to set project version b4 eval ext properties. Jun 24, 2016 release-notes.md Upgrade to Netty 4.1.2.Final Jul 1, 2016 settings.gradle Change name to indicate we are retrofit2. May 28, 2016 README.md What is Ratpack? Ratpack is a simple, capable, toolkit for creating high performance web applications. Ratpack is built on Java and the Netty event-driven networking engine. The API is optimized for Groovy and Java 8. Optional Google Guice integration provides a foundation for scaling your application in size in a managed way. Optional Gradle build time support makes building and testing applications a breeze. http://www.ratpack.io Looking to contribute? Please see CONTRIBUTING.md Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ratpack/ratpack"	"A toolkit for JVM web applications"	"true"
"Web Frameworks"	"gServ"	"https://github.com/javaConductor/gserv"	"A Groovy toolkit for creating SPAs and REST based micro-services without the need for a container (Tomcat, JBoss, etc.)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"8"	"8"	"GitHub - javaConductor/gserv: GServ: Framework for SPAs and REST based services. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 32 Fork 8 javaConductor/gserv Code Issues 11 Pull requests 0 Wiki Pulse Graphs GServ: Framework for SPAs and REST based services. 141 commits 5 branches 10 releases Fetching contributors JavaScript 56.3% HTML 20.4% Groovy 16.6% CSS 5.6% ApacheConf 0.8% Ruby 0.2% Other 0.1% JavaScript HTML Groovy CSS ApacheConf Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9.5 1.0.0 1.1.0 gh-pages master Nothing to show v1.0.0 Beta0.0.1 Beta-0.9.9 Beta-0.9.8 Beta-0.9.7 Beta-0.9.5 Beta-0.9.3 Beta-0.9.2 Beta-0.9.1 0.9.6 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. dist gradle gservInstaller resources src .gitignore .nb-gradle-properties DataDictionary.md README.md build.gradle gServ.pptx gradle-app.setting gradlew gradlew.bat license.txt maven_push.gradle settings.gradle README.md What is gServ? gServ is a tool for creating and deploying REST based services using Groovy without the hassle of a container (JBoss, Tomcat, etc.) . Using gServ, you can easily define REST resources as Groovy scripts or embed gServ in your application. gServ is perfect for creating lightweight micro services. Features: Container Free Serve static files Serve Groovy script as REST resources HATEOAS Support Easy Content Negotiation Plugin API Embeddable Standalone Mode CORS support Compression support ETag support Basic Authentication HTTPS Requirements: Java JDK 1.6+ Groovy 2.3+ (Framework only) Basic Concepts Term Meaning Action HTTP request handler for a particular path/query/method combination. Resources Resources define actions for a particular root path (eg. /books) and its sub-resources (eg. /books/bestSellers). Server Config The config encapsulates any resources, actions, filters, and plugins. Server Instance This is the actual server instance that will listen to the specified port and handle requests based on its configuration. gServ can be used in two ways Framework Standalone Simple Examples Creating REST Resources  /// create a GServ instance def gserv = new GServ()  /// Create a Books REST resource def bkResource = gserv.resource(""/books"") {     // URI:  /books/faq     get “/faq”, file(“BooksFaq.html”)          // URI: /books/xyz     get “:id”, { id ->         def book = bookService.get( id )         writeJson book     }          // responds  to /books/all     get “/all”, {  ->         def books = bookService.allBooks ()         header “content-type”, “application/json”         writeJSON books     } }   The root path is passed to the GServ.resource() method along with a closure defining the actions for the resource. Creating a Server Instance  gserv.http {     // setup a directory for static files     static_root  '/public/webapp'      //static FAQ page located at '/public/webapp/App.faq.html'     get '/faq', file(""App.faq.html"")      }.start(8080);    The http() method creates a GServInstance that can later listen on a port and handle HTTP requests. This server instance defines static roots usually used for templates for single-page apps and a single FAQ page. Then, after the server instance is returned from the http() method, we can immediately call start(8080) on it. Adding Resources to a Server Instance  def bkResource = gserv.resource(""/books"") { ... } def userResource = gserv.resource(""/users"") { ... }  gserv.http {     // setup a directory for static files     static_root ""/public/webapp""       // static FAQ page located at '/public/webapp/App.faq.html'     get '/faq', file('App.faq.html')      /// add Book and User REST resources to our GServ instance     resource bkResource     resource userResource  }.start(8080);   A server instance can be created by simply adding resources. Here we add our 2 resources: bkResources and userResources. Now, all URIs related to both resources are available once the instance is started. This instance also defines a static_root which tells gserv where to find static files such as the FAQ page which should be at /public/webapp/App.faq.html. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/javaConductor/gserv"	"A Groovy toolkit for creating SPAs and REST based micro-services without the need for a container (Tomcat, JBoss, etc.)."	"true"
"Web Frameworks"	"Spring-Boot"	"http://projects.spring.io/spring-boot"	"Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that can you can ""just run"""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6337"	"922"	"6257"	"GitHub - spring-projects/spring-boot: Spring Boot Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 922 Star 6,337 Fork 6,257 spring-projects/spring-boot Code Issues 478 Pull requests 43 Wiki Pulse Graphs Spring Boot http://projects.spring.io/spring-boot 8,400 commits 7 branches 61 releases 276 contributors Java 97.1% HTML 0.7% SQLPL 0.6% Groovy 0.5% JavaScript 0.4% XSLT 0.3% Other 0.4% Java HTML SQLPL Groovy JavaScript XSLT Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.x 1.1.x 1.2.x 1.3.x gh-6030 gh-pages master Nothing to show v1.4.0.RC1 v1.4.0.M3 v1.4.0.M2 v1.4.0.M1 v1.3.6.RELEASE v1.3.5.RELEASE v1.3.4.RELEASE v1.3.3.RELEASE v1.3.2.RELEASE v1.3.1.RELEASE v1.3.0.RELEASE v1.3.0.RC1 v1.3.0.M5 v1.3.0.M4 v1.3.0.M3 v1.3.0.M2 v1.3.0.M1 v1.2.8.RELEASE v1.2.7.RELEASE v1.2.6.RELEASE v1.2.5.RELEASE v1.2.4.RELEASE v1.2.3.RELEASE v1.2.2.RELEASE v1.2.1.RELEASE v1.2.0.RELEASE v1.2.0.RC2 v1.2.0.RC1 v1.2.0.M2 v1.2.0.M1 v1.1.12.RELEASE v1.1.11.RELEASE v1.1.10.RELEASE v1.1.9.RELEASE v1.1.8.RELEASE v1.1.7.RELEASE v1.1.6.RELEASE v1.1.5.RELEASE v1.1.4.RELEASE v1.1.3.RELEASE v1.1.2.RELEASE v1.1.1.RELEASE v1.1.0.RELEASE v1.1.0.RC1 v1.1.0.M2 v1.1.0.M1 v1.0.2.RELEASE v1.0.1.RELEASE v1.0.0.RELEASE v1.0.0.RC5 v1.0.0.RC4 v1.0.0.RC3 v1.0.0.RC2 v1.0.0.RC1 v0.5.0.M7 v0.5.0.M6 v0.5.0.M5 v0.5.0.M4 v0.5.0.M3 v0.5.0.M2 v0.5.0.M1 Nothing to show New pull request Latest commit 51ede0c Jul 15, 2016 philwebb Document ConfigFile...Initializer limitations … Update the reference documentation with a note about the limitations of ConfigFileApplicationContextInitializer.  Fixes gh-6120 Permalink Failed to load latest commit information. .github Polish Apr 26, 2016 .mvn Upgrade to Maven 3.3.9 Apr 13, 2016 eclipse Add AssertJ to Eclipse Oomph Setup Feb 6, 2016 spring-boot-actuator-docs Add MVC actuator endpoint for heap dumps Jul 2, 2016 spring-boot-actuator Improve usage of ConcurrentMap Jul 13, 2016 spring-boot-autoconfigure Fix FixedAuthoritiesExtractor map extract bug Jul 15, 2016 spring-boot-cli Upgrade to Maven Assembly Plugin 2.6 Jul 1, 2016 spring-boot-dependencies Downgrade maven-compiler-plugin to 3.5 Jul 13, 2016 spring-boot-deployment-tests Make use of new GetMapping and PostMapping annotations May 9, 2016 spring-boot-devtools Merge branch '1.3.x Jul 13, 2016 spring-boot-docs Document ConfigFile...Initializer limitations Jul 15, 2016 spring-boot-full-build Add spring-boot-test-autoconfigure module Mar 23, 2016 spring-boot-integration-tests Merge branch '1.3.x' Jun 15, 2016 spring-boot-parent Add setReadTimeout and setConnectTimeout to RestTemplateBuilder Jul 13, 2016 spring-boot-samples Add support for Thymeleaf 3 while keeping Thymeleaf 2 as the default Jul 12, 2016 spring-boot-starters Update starters readme with updated JSF support Jul 6, 2016 spring-boot-test-autoconfigure Make it easier to add auto-configuration to a test slice Jul 6, 2016 spring-boot-test Polish Jul 12, 2016 spring-boot-tools Fix spring-boot-gradle-plugin package tangle Jul 11, 2016 spring-boot Merge complex types from multiple source correctly Jul 13, 2016 .gitignore Refine ApplicationHome detection logic Jun 9, 2016 .settings-template.xml Increase maven central timeout Jul 6, 2016 .travis.yml Add schemaAction property to CassandraProperties Jun 28, 2016 CODE_OF_CONDUCT.adoc Add contributor covenant Jan 29, 2016 CONTRIBUTING.adoc Fix STS link in CONTRIBUTING.adoc Apr 25, 2016 LICENSE.txt Update license details Nov 18, 2014 README.adoc Replace Starter POM to Starter in the documentation May 18, 2016 mvnw Add Maven wrapper Oct 26, 2015 mvnw.cmd Add Maven wrapper Oct 26, 2015 pom.xml Fix gradle samples replacement regex Jul 11, 2016 README.adoc Spring Boot Spring Boot makes it easy to create Spring-powered, production-grade applications and services with absolute minimum fuss. It takes an opinionated view of the Spring platform so that new and existing users can quickly get to the bits they need. You can use Spring Boot to create stand-alone Java applications that can be started using java -jar or more traditional WAR deployments. We also provide a command line tool that runs spring scripts. Our primary goals are: Provide a radically faster and widely accessible getting started experience for all Spring development Be opinionated out of the box, but get out of the way quickly as requirements start to diverge from the defaults Provide a range of non-functional features that are common to large classes of projects (e.g. embedded servers, security, metrics, health checks, externalized configuration) Absolutely no code generation and no requirement for XML configuration Installation and Getting Started The reference documentation includes detailed installation instructions as well as a comprehensive getting started guide. Documentation is published in HTML, PDF and EPUB formats. Here is a quick teaser of a complete Spring Boot application in Java: import org.springframework.boot.*; import org.springframework.boot.autoconfigure.*; import org.springframework.web.bind.annotation.*;  @RestController @EnableAutoConfiguration public class Example {      @RequestMapping(""/"")     String home() {         return ""Hello World!"";     }      public static void main(String[] args) throws Exception {         SpringApplication.run(Example.class, args);     }  } Getting help Having trouble with Spring Boot? We’d like to help! Check the reference documentation, especially the How-to’s — they provide solutions to the most common questions. Learn the Spring basics — Spring Boot builds on many other Spring projects, check the spring.io web-site for a wealth of reference documentation. If you are just starting out with Spring, try one of the guides. Ask a question - we monitor stackoverflow.com for questions tagged with spring-boot. Report bugs with Spring Boot at github.com/spring-projects/spring-boot/issues. Reporting Issues Spring Boot uses GitHub’s integrated issue tracking system to record bugs and feature requests. If you want to raise an issue, please follow the recommendations below: Before you log a bug, please search the issue tracker to see if someone has already reported the problem. If the issue doesn’t already exist, create a new issue. Please provide as much information as possible with the issue report, we like to know the version of Spring Boot that you are using, as well as your Operating System and JVM version. If you need to paste code, or include a stack trace use Markdown $$```$$ escapes before and after your text. If possible try to create a test-case or project that replicates the issue. You can submit sample projects as pull-requests against the spring-boot-issues GitHub project. Use the issue number for the name of your project. Building from Source You don’t need to build from source to use Spring Boot (binaries in repo.spring.io), but if you want to try out the latest and greatest, Spring Boot can be easily built with the maven wrapper. You also need JDK 1.8 (although Boot applications can run on Java 1.6). $ ./mvnw clean install If you want to build with the regular mvn command, you will need Maven v3.0.5 or above. Note You may need to increase the amount of memory available to Maven by setting a MAVEN_OPTS environment variable with the value -Xmx512m. Remember to set the corresponding property in your IDE as well if you are building and running tests there (e.g. in Eclipse go to Preferences→Java→Installed JREs and edit the JRE definition so that all processes are launched with those arguments). This property is automatically set if you use the maven wrapper. Also see CONTRIBUTING.adoc if you wish to submit pull requests, and in particular please fill out the Contributor’s Agreement before your first change, however trivial. (Or if you filed such an agreement already for another project just mention that in your pull request.) Building reference documentation The reference documentation requires the documentation of the Maven plugin to be available so you need to build that first since it’s not generated by default. $ ./mvnw clean install -pl spring-boot-tools/spring-boot-maven-plugin -Pdefault,full The documentation also includes auto-generated information about the starters. To allow this information to be collected, the starter projects must be built first: $ ./mvnw clean install -f spring-boot-starters Once this is done, you can build the reference documentation with the command below: $ ./mvnw clean generate-resources -pl spring-boot-docs -Pdefault,full Tip The generated documentation is available from spring-boot-docs/target/contents/reference Modules There are a number of modules in Spring Boot, here is a quick overview: spring-boot The main library providing features that support the other parts of Spring Boot, these include: The SpringApplication class, providing static convenience methods that make it easy to write a stand-alone Spring Application. Its sole job is to create and refresh an appropriate Spring ApplicationContext Embedded web applications with a choice of container (Tomcat or Jetty for now) First class externalized configuration support Convenience ApplicationContext initializers, including support for sensible logging defaults spring-boot-autoconfigure Spring Boot can configure large parts of common applications based on the content of their classpath. A single @EnableAutoConfiguration annotation triggers auto-configuration of the Spring context. Auto-configuration attempts to deduce which beans a user might need. For example, If HSQLDB is on the classpath, and the user has not configured any database connections, then they probably want an in-memory database to be defined. Auto-configuration will always back away as the user starts to define their own beans. spring-boot-starters Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop-shop for all the Spring and related technology that you need without having to hunt through sample code and copy paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA for database access just include the spring-boot-starter-data-jpa dependency in your project, and you are good to go. spring-boot-cli The Spring command line application compiles and runs Groovy source, making it super easy to write the absolute minimum of code to get an application running. Spring CLI can also watch files, automatically recompiling and restarting when they change. spring-boot-actuator Spring Boot Actuator provides additional auto-configuration to decorate your application with features that make it instantly deployable and supportable in production. For instance if you are writing a JSON web service then it will provide a server, security, logging, externalized configuration, management endpoints, an audit abstraction, and more. If you want to switch off the built in features, or extend or replace them, it makes that really easy as well. spring-boot-loader Spring Boot Loader provides the secret sauce that allows you to build a single jar file that can be launched using java -jar. Generally you will not need to use spring-boot-loader directly, but instead work with the Gradle or Maven plugin. Samples Groovy samples for use with the command line application are available in spring-boot-cli/samples. To run the CLI samples type spring run <sample>.groovy from samples directory. Java samples are available in spring-boot-samples and should be built with maven and run by invoking java -jar target/<sample>.jar. Guides The spring.io site contains several guides that show how to use Spring Boot step-by-step: Building an Application with Spring Boot is a very basic guide that shows you how to create a simple application, run it and add some management services. Building a RESTful Web Service with Spring Boot Actuator is a guide to creating a REST web service and also shows how the server can be configured. Converting a Spring Boot JAR Application to a WAR shows you how to run applications in a web server as a WAR file. License Spring Boot is Open Source software released under the Apache 2.0 license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spring-projects/spring-boot"	"Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that can you can ""just run"""	"true"
"Database"	"Gmongo"	"https://github.com/poiati/gmongo"	"A Groovy wrapper to the mongodb Java driver"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"171"	"24"	"35"	"GitHub - poiati/gmongo: A Groovy wrapper to the mongodb Java driver Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 171 Fork 35 poiati/gmongo Code Issues 3 Pull requests 1 Pulse Graphs A Groovy wrapper to the mongodb Java driver http://blog.paulopoiati.com/2010/06/20/gmongo-0-5-released/ 137 commits 4 branches 13 releases 7 contributors Groovy 100.0% Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bug master upgrade v0.9.x Nothing to show r1.2 r1.0 r0.9.5 r0.9.4 r0.9.3 r0.9.2 r0.9.1 r0.9 r0.8 r0.7 r0.6 r0.5.1 r0.5 Nothing to show New pull request Latest commit 3e335b3 Mar 18, 2015 poiati fix signing method signature to reflect Gradle 2.x Permalink Failed to load latest commit information. src makign gmongoclient extend gmongo to fix grails mongodb plugin not wo… Mar 2, 2015 .gitignore Added .gradle dir to .gitignore Jun 19, 2010 .travis.yml gradle 2.0 support and changelog Mar 1, 2015 CHANGELOG.txt fix signing method signature to reflect Gradle 2.x Mar 18, 2015 LICENSE.txt release 0.5 commit Jun 19, 2010 README.md support to mongodb 3.0 Mar 1, 2015 build.gradle fix signing method signature to reflect Gradle 2.x Mar 18, 2015 README.md GMongo The goal of this project is to provide a more simple, easy to use and less verbose API to work with mongodb using the Groovy programming language. More information can be found here: http://blog.paulopoiati.com/2010/06/20/gmongo-0-5-released/. Usage com.gmongo.GMongo doesn't extends com.mongodb.Mongo. It delegate all methods calls to a Mongo instance. If you need to get the Mongo reference �just call com.gmongo.GMongo#getMongo. You can also use com.gmongo.GMongoClient. It has the same constructors as com.mongodb.MongoClient. For example, to connect to a MongoDB instance with auth enabled. @Grab(group='com.gmongo', module='gmongo', version='1.3')  import com.gmongo.GMongoClient import com.mongodb.MongoCredential import com.mongodb.ServerAddress  credentials = MongoCredential.createMongoCRCredential('username', 'database', 'password' as char[])  client = new GMongoClient(new ServerAddress(), [credentials]) Auth is only available in GMongo 1.3 and above. (If you are using Mongodb 3.x you need to use MongoCredential#createCredential instead) Sample: // To download GMongo on the fly and put it at classpath @Grab(group='com.gmongo', module='gmongo', version='1.0') import com.gmongo.GMongo // Instantiate a com.gmongo.GMongo object instead of com.mongodb.Mongo // The same constructors and methods are available here def mongo = new GMongo()  // Get a db reference in the old fashion way def db = mongo.getDB(""gmongo"")  // Collections can be accessed as a db property (like the javascript API) assert db.myCollection instanceof com.mongodb.DBCollection // They also can be accessed with array notation  assert db['my.collection'] instanceof com.mongodb.DBCollection  // Insert a document db.languages.insert([name: 'Groovy']) // A less verbose way to do it db.languages.insert(name: 'Ruby') // Yet another way db.languages << [name: 'Python']  // Insert a list of documents db.languages << [[name: 'Javascript', type: 'prototyped'], [name: 'Ioke', type: 'prototyped']]  def statics = ['Java', 'C', 'VB']  statics.each {     db.languages << [name: it, type: 'static'] }  // Finding the first document def lang = db.languages.findOne() assert lang.name == 'Groovy' // Set a new property lang.site = 'http://groovy.codehaus.org/' // Save the new version db.languages.save lang  assert db.languages.findOne(name: 'Groovy').site == 'http://groovy.codehaus.org/'  // Counting the number of documents in the collection assert db.languages.find(type: 'static').count() == 3  // Another way to count assert db.languages.count(type: 'prototyped') == 2  // Updating a document using the '$set' operator db.languages.update([name: 'Python'], [$set: [paradigms: ['object-oriented', 'functional', 'imperative']]])  assert 3 == db.languages.findOne(name: 'Python').paradigms.size()  // Using upsert db.languages.update([name: 'Haskel'], [$set: [paradigms: ['functional']]], true)  assert db.languages.findOne(name: 'Haskel')  // Removing some documents db.languages.remove(type: 'prototyped') assert 0 == db.languages.count(type: 'prototyped')  // Removing all documents db.languages.remove([:]) assert 0 == db.languages.count()  // To ensure complete consistency in a session use DB#inRequest // It is analogous to user DB#requestStarted and DB#requestDone db.inRequest {     db.languages.insert(name: 'Objective-C')     assert 1 == db.languages.count(name: 'Objective-C') } Sorting and Pagination @Grab(group='com.gmongo', module='gmongo', version='1.0') import com.gmongo.GMongo  def mongo = new GMongo() def db = mongo.getDB(""gmongo"")  // Make sure that the collection is empty db.example.drop()  // Insert 100 documents with any random value 100.times {     db.example << [time: it, random: (Integer)(Math.random() * 100)] }  def at = 0  // Find out how many documents are in the collection def total = db.example.find().count()  // Sort the documents by the 'random' property ascending and Paginate over it 10 by 10 while (at < total) {     println ""At page: ${at / 10}\n""     db.example.find().limit(10).skip(at).sort(random: 1).each {         println ""\t-- ${it}""     }     println ""\n--------------------------""     at += 10 } MapReduce @Grab(group='com.gmongo', module='gmongo', version='1.0') import com.gmongo.GMongo  def mongo = new GMongo() def db = mongo.getDB(""gmongo"")  def words = ['foo', 'bar', 'baz'] def rand  = new Random()          1000.times {      db.words << [word: words[rand.nextInt(3)]] }  assert db.words.count() == 1000  def result = db.words.mapReduce(     """"""     function map() {         emit(this.word, {count: 1})     }     """""",     """"""     function reduce(key, values) {         var count = 0         for (var i = 0; i < values.length; i++)             count += values[i].count         return {count: count}     }     """""",     ""mrresult"",     [:] // No Query )  assert db.mrresult.count() == 3 assert db.mrresult.find()*.value*.count.sum() == 1000 Grouping Grouping can also be achieved. Example: @Grab(""com.gmongo:gmongo:1.0"") import com.gmongo.GMongo  def gmongo = new GMongo(""localhost:27017"")  def db = gmongo.getDB(""test"")  db.clicks.drop()  db.clicks.insert(day: 1, total: 10) db.clicks.insert(day: 1, total: 14) db.clicks.insert(day: 2, total: 45) db.clicks.insert(day: 1, total:  9) db.clicks.insert(day: 3, total: 32) db.clicks.insert(day: 2, total: 11) db.clicks.insert(day: 3, total: 34)  def result = db.clicks.group([day: true], [:], [count: 0], ""function(doc, out) { out.count += doc.total }"")  // Will output [[day:1.0, count:33.0], [day:2.0, count:56.0], [day:3.0, count:66.0]] println result And a more advanced grouping using 'keyf': @Grab(""com.gmongo:gmongo:1.0"") import com.gmongo.GMongo  def gmongo = new GMongo(""localhost:27017"")  def db = gmongo.getDB(""test"")  db.clicks.drop()  db.clicks.insert(day: 1, total: 10) db.clicks.insert(day: 1, total: 14) db.clicks.insert(day: 2, total: 45) db.clicks.insert(day: 1, total:  9) db.clicks.insert(day: 3, total: 32) db.clicks.insert(day: 2, total: 11) db.clicks.insert(day: 3, total: 34)  def keyf = ""function(clicks) { return clicks.day % 2 ? { odd: true } : { even: true } }""  def command = ['$keyf': keyf, cond: [:], initial: [count: 0], $reduce: ""function(doc, out) { out.count += doc.total }""]  def result = db.clicks.group(command)  // Will output [[odd:true, count:99.0], [even:true, count:56.0]] println result  Aggregation This features is only available in version 1.0 or greater. The simple example below will get the name of all the cities with population greater or equal 10.000 and sort it. @Grab(""com.gmongo:gmongo:1.0"") import com.gmongo.GMongo  def gmongo = new GMongo(""localhost:27017"")  def db = gmongo.getDB(""test"")  db.zipcodes.drop() db.zipcodes << [""city"": ""ACMAR"", ""loc"": [-86.51557F, 33.584132F], ""pop"": 6055, ""state"": ""AL"", ""_id"": ""35004""] db.zipcodes << [""city"": ""ADAMSVILLE"", ""loc"": [-86.959727F, 33.588437F], ""pop"": 10616, ""state"": ""AL"", ""_id"": ""35005""] db.zipcodes << [""city"": ""ADGER"", ""loc"": [-87.167455F, 33.434277F], ""pop"": 3205, ""state"": ""AL"", ""_id"": ""35006""] db.zipcodes << [""city"": ""KEYSTONE"", ""loc"": [-86.812861F, 33.236868F], ""pop"": 14218, ""state"": ""AL"", ""_id"": ""35007""] db.zipcodes << [""city"": ""NEW SITE"", ""loc"": [-85.951086F, 32.941445F], ""pop"": 19942, ""state"": ""AL"", ""_id"": ""35010""]  def aggrOutput = db.zipcodes.aggregate([      $project : [ city: 1, pop: 1 ]    ],   [      $match : [ pop: [ $gte : 10 * 1000 ] ]    ],   [      $sort: [ pop: -1]    ] )  assert aggrOutput.results().size() == 3 assert aggrOutput.results()[0].city == ""NEW SITE"" assert aggrOutput.results()[1].city == ""KEYSTONE"" assert aggrOutput.results()[2].city == ""ADAMSVILLE"" An amazing documentation about Aggregation can be found in the MongoDB website: http://docs.mongodb.org/manual/applications/aggregation/ . Support Any bug, suggestion or ... whatever. Blog: http://blog.paulopoiati.com/2010/06/20/gmongo-0-5-released/. Email: paulogpoiati@gmail.com Twitter: http://twitter.com/poiati Maven All versions of the project can be found in the maven central repository: http://repo1.maven.org/maven2/com/gmongo/gmongo/  Build The project is build using gradle. Gradle can be found in: http://www.gradle.org Test To run the tests start a mongo instance on localhost:27017 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/poiati/gmongo"	"A Groovy wrapper to the mongodb Java driver"	"true"
"Database"	"Gstorm"	"https://github.com/kdabir/gstorm"	"A simple ORM for simple databases and CSV files to be used in groovy scripts"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"54"	"13"	"7"	"GitHub - kdabir/gstorm: A simple ORM for databases and CSV files to be used in groovy scripts Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 54 Fork 7 kdabir/gstorm Code Issues 14 Pull requests 0 Pulse Graphs A simple ORM for databases and CSV files to be used in groovy scripts 97 commits 1 branch 9 releases Fetching contributors Groovy 100.0% Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.7.2 v0.7.1 v0.7 v0.6 v0.5 v0.4 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit 59ff369 Jun 14, 2016 kdabir ouch, CI checks out the project in dir which is not named gstorm, and… … … the gradle project name screws up :) better to be explicit about the project name Permalink Failed to load latest commit information. examples small upgrades Jun 13, 2016 gradle/wrapper small upgrades Jun 13, 2016 src/gstorm trim the query and return self while stormifying. changes for publish… Sep 25, 2014 test add basic ability to create hsqldb TEXT tables using `@Csv` annotatio… May 29, 2014 .gitignore move to bintray.com to host the binary (and the maven repo) of gstorm. Dec 29, 2013 .travis.yml automate releasing Mar 27, 2016 LICENSE small upgrades Jun 13, 2016 README.md small upgrades Jun 13, 2016 build.gradle vcsurl is required by bintray plugin now Jun 14, 2016 gradle.properties [Gradle Release Plugin] - new version commit: 'v0.7.3-SNAPSHOT'. Jun 14, 2016 gradlew small upgrades Jun 13, 2016 gradlew.bat small upgrades Jun 13, 2016 settings.gradle ouch, CI checks out the project in dir which is not named gstorm, and… Jun 14, 2016 README.md GStorm - Groovy Single Table ORM GStorm is a light-weight persistence helper that lets you persist data without any boilerplate code. Also it can act as and ORM for CSV files. Example class Person { String name, project }       // this is your model class  def g = new Gstorm() g.stormify(Person)                          // table automatically gets created for this class  def person = new Person(name: ""kunal"", project: ""gstorm"")  person.save()                               // which saves object to db  def result = Person.where(""name = 'kunal'"") // pass any standard SQL where clause println result  println ""all records -> ${Person.all}""      // get all objects from db  person.name = ""kunal dabir"" person.save()                               // saves the object back to db  println Person.get(person.id)               // loads the object by id  person.delete()                             // delete the person from db  Running it To see gstorm in action just execute following from command line: groovy https://raw.github.com/kdabir/gstorm/master/examples/getting_started.groovy Provided you have groovy installed, you don't need to install anything else. Why Gstorm? In groovy scripts, when you need persistence, and you often feel hibernate is overkill but handwritten SQL is headache. You don't want to connect to external Database server and still wish you could just create a table and save objects as quickly as possible. You hate writing SQL for trivial CRUD but still want to be able to harness the power of SQL when need be. You can then try Gstorm. Gstorm take very simple approach to solve this problem by focusing just on needs of persistence mechanism required for small scripts/projects. The market is already flooded with ORMs and NoSQL databases. It's pointless to introduce anything that's heavy, complex, rigid and tries to solve all the problems in the world. What good a Single Table ORM would do? Creates Tables for you Allows you to persist objects without worrying about CRUD SQL statements Very light layer, no jar baggage Can still fire complex SQL queries that would have been difficult in NoSQL or plain collection backed DBs Typically this would be useful in scripts, Not in multi-layered web applications or any complex use cases Doesn't handle any relationships or complex data types Gstorm uses HSQLDB syntax internally. Getting started GStorm is available in jcenter repository Grab GStorm using @GrabConfig(systemClassLoader = true) @Grab('io.github.kdabir.gstorm:gstorm:0.7.1') Create instance of Gstorm def g = new Gstorm() You may pass optionally pass object of java.sql.Connection or groovy.sql.Sql def g = new Gstorm(sql) where sql is an instance of groovy.sql.Sql And gstormify your model g.stormify(Person) Just go through the example's source and test and have fun. Project status Gstorm is tiny project with very specific use case. There is long list of items that I would want to complete before calling it feature complete. The project is under active development and is not yet suitable for production grade applications. Changelog : v0.7.1 infrastructural changes to build and release added to jcenter repo v0.7 support @WithoutId annotation to map to tables that do not have any id field and hence classes will not have id specific methods first cut of support for @Csv annotation to open CSV files as table. File can be set using setCsvFile() method of Gstorm. capability to provide custom type mappings as well changing the default type mapping if no type mapping is found ability to chain stormify and return the Gstorm instance v0.6 support count() method and count property on Model class. count(clause) can take a where like condition support Gstorm(Connection) which can take java.sql.Connection object support Gstorm() constructor which create in memory db (HSQLDB) automatically support Gstorm(dbpath) constructor which creates HSQLDB with the specified file path add hsqldb as compile/runtime dependency to project, so it will be used by default. User can always exclude it if it's not required. v0.5 support @Id annotation. limitation: The id has to be a numeric (Integer) field in class heavy refactoring internally, keeping the api intact v0.4 support primitive numbers (int/long). Floating point numbers are stored as string as of yet. Support table name to be different from the class name. Class can be annotated with @Table(""TABLE_NAME"") to specify table name. support date/time to be stored. internal refactoring v0.3 enableQueryLogging to enable sql query logging get() to load a model by id v0.2 autogenerated id property on model ability to update() or save() when model has id using gradle to publish to maven repo travis ci added all method/property v0.1 initial prototype save() and where() methods added Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kdabir/gstorm"	"A simple ORM for simple databases and CSV files to be used in groovy scripts"	"true"
"Database"	"Tayra"	"https://github.com/EqualExperts/Tayra"	"Incremental backup tool for MongoDB"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"124"	"30"	"22"	"GitHub - EqualExperts/Tayra: Incremental backup tool for MongoDB Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 124 Fork 22 EqualExperts/Tayra Code Issues 3 Pull requests 1 Wiki Pulse Graphs Incremental backup tool for MongoDB 517 commits 11 branches 285 releases Fetching contributors Groovy 47.5% Java 34.1% HTML 10.4% Shell 4.5% CSS 3.5% Groovy Java HTML Shell CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ExceptionRefactoring RestoreOperation bhargava-master binaryDataIssue binaryDataIssueFix continuousDeploy gh-pages master memoryMappedReader performanceevaluation usagepattern Nothing to show Story4-UpdateDocument Story3-InsertDocument Story2 Story1 Release-0.8.2-Beta3 Release-0.8.1-Beta3 Release-0.8.0-Beta2 Release-0.7.0-Beta1 JavaProjectTemplate Demo Build-362 Build-361 Build-360 Build-359 Build-358 Build-357 Build-356 Build-355 Build-354 Build-353 Build-352 Build-350 Build-349 Build-348 Build-347 Build-344 Build-342 Build-326 Build-325 Build-324 Build-323 Build-322 Build-321 Build-318 Build-317 Build-312 Build-311 Build-310 Build-309 Build-308 Build-307 Build-306 Build-305 Build-304 Build-303 Build-302 Build-301 Build-300 Build-299 Build-298 Build-297 Build-296 Build-295 Build-294 Build-293 Build-292 Build-291 Build-290 Build-289 Build-288 Build-287 Build-286 Build-285 Build-284 Build-283 Build-282 Build-280 Build-279 Build-278 Build-277 Build-276 Build-275 Build-274 Build-273 Build-272 Build-271 Build-270 Build-246 Build-245 Build-243 Build-241 Build-240 Build-239 Build-238 Build-226 Build-225 Build-224 Build-223 Build-222 Build-221 Build-219 Build-218 Build-217 Build-216 Build-215 Build-214 Build-213 Build-212 Build-211 Build-209 Nothing to show New pull request Latest commit bebc7c8 May 15, 2015 spethe Removed dead video link for now Permalink Failed to load latest commit information. .groovy Introduced Specs for NIO Reader and Fast Flag Apr 25, 2013 acceptance-tests Changed checkstyle Dec 5, 2013 config 1. made the recommended changes for handling binary data. 2. Ignored … Oct 22, 2013 deploy-scripts 1. exploding deploy-scripts into deploed folder as well 2. changed th… Apr 23, 2013 distribution-template - Added release notes Jun 12, 2014 exploratory-tests/test/groovy/com/ee/tayra/exploratory have fixed the issues. but need refactoring before finalizing. Dec 13, 2013 old-env-scripts Messages for Waiting and Long running restore process Apr 3, 2013 setup-env - Removed hard-coded dir refs Jun 12, 2014 src upgraded mongo driver to 2.12.2 Jun 13, 2014 test-lib Evolved DataUnit to determine file size Apr 30, 2013 .gitignore 1. made the recommended changes for handling binary data. 2. Ignored … Oct 22, 2013 AppConfig.groovy merged changes for binary data issue fix Jun 11, 2014 LICENSE.txt Removed unrecognised character Feb 5, 2013 NOTICE.txt updated product info Apr 4, 2013 README.md Removed dead video link for now May 15, 2015 build.gradle upgraded mongo driver to 2.12.2 Jun 13, 2014 connection.properties Refactored to run with different mongo versions Mar 29, 2013 README.md Tayra Incremental backup tool for MongoDB Overview Tayra can be viewed as an external and persistent oplog that is stored on the file system instead of residing within MongoDB. The files generated can then be used to restore the data incrementally to any target MongoDB instance, which can be injected into a replica set in case of any event that threatens the availability of service. Features Summary Selective Restore Selective Backup Rotating Logs in backup and restore Surviving node crash in a replica set Secured and unsecured backup/restore Analyse documents to restore using Dry Run Documentation Please find the documentation here for usage. Additionally, you can refer to the ReadMe.txt within binary distribution for features. Approach, Design Overview Binary Distributions Download from here. Build Info We are using Gradle 1.11 for our builds. You can download it here Please do not checkin Eclipse or Intellij or any IDE specific files. For Idea or Eclipse they can be generated using gradle eclipse gradle idea Project Versioning We will be following JBoss Versioning Convention major.minor.micro.Alpha[n] major.minor.micro.Beta[n] major.minor.micro.CR[n] Please refer to AppConfig.groovy - a single place of change for all the project get License Tayra is licensed under the terms of the FreeBSD License Acknowledgment This product is developed using IntelliJ IDEA 12.1.4 Ultimate Edition under free open source license granted by JetBrains Releases Latest release 0.8.2-Beta3 is a bug fix release for issue# 3 - backup failed on fields with binary data Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/EqualExperts/Tayra"	"Incremental backup tool for MongoDB"	"true"
"Database"	"Groovy-liquibase"	"https://github.com/tlberglund/groovy-liquibase"	"Yet Another Groovy DSL for Liquibase"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"67"	"9"	"34"	"GitHub - tlberglund/groovy-liquibase: Yet Another Groovy DSL for Liquibase Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 67 Fork 34 tlberglund/groovy-liquibase Code Issues 1 Pull requests 0 Pulse Graphs Yet Another Groovy DSL for Liquibase 203 commits 1 branch 8 releases 6 contributors Groovy 100.0% Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Release_1.0.2 Release_1.0.1 Release_1.0.0 0.7.6 0.7.5 0.7.4 0.7.3 0.7.0 Nothing to show New pull request Latest commit aa72809 May 25, 2015 stevesaliman More wordsmithing of the README Permalink Failed to load latest commit information. gradle/wrapper Bumped the Gradle wrapper to version 2.3 Mar 1, 2015 src Added compatibility arguments to build.gradle so that it works with J… Mar 9, 2015 test Fixed https://github.com/tlberglund/groovy-liquibase/issues#issue/11 Mar 19, 2011 .gitignore Included configuration to sign the POM and properly upload to staging… Aug 17, 2011 CHANGELOG.md Fixed a typo in the changelog Mar 9, 2015 LICENSE.txt Finished updating files for the 1.0.0 release Jun 15, 2014 README.md More wordsmithing of the README May 25, 2015 build.gradle Added compatibility arguments to build.gradle so that it works with J… Mar 10, 2015 gradlew Bumped wrapper to 1.4, version to 0.7.6 Mar 1, 2013 gradlew.bat Added the Gradle wrapper, 1.0-M7. Jan 23, 2012 howto.md Translated dutch to english Apr 6, 2011 liquibase.gradle Bumped the Groovy dependency and released 1.0.1 Mar 1, 2015 README.md News May 25, 2015 We're pleased to announce that the Liquibase Groovy DSL is now a part of the Liquibase organization. I'll still maintain the code, it will just live in a different Git repository. Bringing this project into the larger Liquibase family will help keep all things Liquibase together in one place and make the project easier to find for all Liquibase users. The new home for the Liquibase Groovy DSL is https://github.com/liquibase/liquibase-groovy-dsl I'll update existing issues in this repository as they get addressed, but new issues should be reported in the new repository. Thank you all for your continued support, Steve Saliman Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tlberglund/groovy-liquibase"	"Yet Another Groovy DSL for Liquibase"	"true"
"Database"	"Effigy"	"https://github.com/cjstehno/effigy"	"Groovy annotation-driven JDBC row mapping framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"1"	"GitHub - cjstehno/effigy: Groovy annotation-driven JDBC row mapping framework. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 1 cjstehno/effigy Code Issues 11 Pull requests 0 Pulse Graphs Groovy annotation-driven JDBC row mapping framework. http://cjstehno.github.io/effigy 196 commits 4 branches 1 release Fetching contributors Groovy 88.6% CSS 9.2% Shell 1.5% Batchfile 0.7% Groovy CSS Shell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev-v0.5.0 gh-pages mapper-dsl-ast master Nothing to show last_with_entity Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. config/codenarc effigy-core effigy-guide effigy-site effigy-test gradle/wrapper .gitignore LICENSE.txt README.md TODO.md build.gradle docs.md gradlew gradlew.bat settings.gradle README.md Effigy WARNING: this project is not ready for general use yet - in fact, it is effectively dormant. The different SQL dialects and deeper use cases make this project overly difficult to implement (for free). I think this is still a valid project, it's just too much work unless I either need it for something or get paid to develop it. If you would like to donate code or money towards its further development, please feel free to contact me. Introduction Effigy: 1. a sculpture or model of a person. 2. a roughly made model of a particular person, made in order to be damaged or destroyed as a protest or expression of anger You can decide which definition above fits with your standard data-access experience. Effigy is an annotation-driven simplification of JDBC that sits on top of the Spring JDBC library and allows a developer to quickly develop data-access code for standard use cases, based on standard coding patterns. Effigy is NOT a full-blown ORM. Effigy is inspired by JPA and Spring-Data JPA and the desire to have similar functionality with simple JDBC-based projects. Build Effigy uses Gradle, so just run: gradlew build  User Guide The User Guide is built using Gaiden, separate from the standard Gradle build. If you want to generate the User Guide run the following in the effigy-guide directory: gaidenw build  The effigy-guide/build directory will contain the generated guide. Site: http://cjstehno.github.io/effigy Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cjstehno/effigy"	"Groovy annotation-driven JDBC row mapping framework"	"true"
"Database"	"elasticsearch-groovy"	"https://github.com/elastic/elasticsearch-groovy"	"Elasticsearch Groovy client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"46"	"10"	"GitHub - elastic/elasticsearch-groovy: Elasticsearch Groovy client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 27 Fork 10 elastic/elasticsearch-groovy Code Issues 5 Pull requests 0 Pulse Graphs Elasticsearch Groovy client 128 commits 9 branches 26 releases 3 contributors Groovy 100.0% Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.4 1.5 1.6 1.7 2.x 2.0 2.1 2.2 master Nothing to show v2.1.2 v2.1.1 v2.1.0 v2.0.2 v2.0.0 v2.0.0-rc1 v2.0.0-beta2 v2.0.0-beta1 v1.7.5 v1.7.4 v1.7.3 v1.7.2 v1.7.1 v1.7.0 v1.6.2 v1.6.1 v1.6.0 v1.5.2 v1.5.1 v1.5.0 v1.4.5 v1.4.4 v1.4.3 v1.4.2 v1.4.1 v1.4.0 Nothing to show New pull request Latest commit 0f2f826 Feb 3, 2016 pickypg Updating to latest 3.0 Permalink Failed to load latest commit information. docs Changing to standard client version numbering scheme. Nov 24, 2014 grails Fixing classpath issues related to new tests (e.g., duplicate classes… Jun 30, 2015 src Updating to latest 3.0 Feb 3, 2016 .gitignore Updating master to the latest Lucene snapshot and adding `libs/` to t… Jan 22, 2015 CONTRIBUTING.md Updates preparing for Elasticsearch 1.4.0 release Nov 10, 2014 LICENSE.txt Add licence and documentation Jan 17, 2014 README.md Updating master build's required Groovy version Feb 2, 2016 build.gradle Updating to latest 3.0 Feb 3, 2016 gradle.properties Adding support for 2.0.0-SNAPSHOT Dec 11, 2014 settings.gradle Adding support for Grails developers by compiling a jar without indy … Feb 22, 2015 README.md Groovy Client for Elasticsearch The Elasticsearch Groovy client project helps you to use Elasticsearch in Groovy projects. This Groovy client inherently supports 100% of the Elasticsearch API for the supported version by using Groovy extension modules with the Java client. Literally anything possible in the same version of the Java client is possible with the Groovy client, plus some Groovy-friendly extensions. You can use the Java client code from any Java client example that you find online with the benefit of the Groovy extensions. TransportClient client = TransportClient.builder().settings(Settings.settingsBuilder {   client.transport.sniff = true   cluster.name = ""your-cluster-name"" }).build()  // identical to the Java client: client.addTransportAddress( ... )  String userId = ""some-user-id""  // asynchronously fetch the results ListenableActionFuture<SearchResponse> future = client.searchAsync {   indices ""your-index""   types ""your-type""   source {     query {       match {         user.id = userId       }     }   } }  // block until the response is retrieved (you could alternatively use listeners) SearchResponse response = future.actionGet() Besides the usage of Closures, the above example should look very familiar to any existing Java client users, as well as those familiar with the Elasticsearch DSL (Domain Specific Language used for indexing and querying). Versions You need to install a version matching your Elasticsearch version: Elasticsearch Groovy Client Java Groovy master [3.0] Build from source [3.0] 8 or later 2.4.5 2.x 2.x 7u60 or later 2.4.5 2.2 2.2 7u60 or later 2.4.5 2.1 2.1 7u60 or later 2.4.4 2.0 2.0 7u60 or later 2.4.4 1.7 1.7 7u60 or later 2.4.4 1.6 1.6 7u60 or later 2.4.4 1.5 1.5 7u60 or later 2.4.1* 1.4 1.4 7u60 or later 2.3.7* Please read documentation relative to the version that you are using! To build a SNAPSHOT version, you need to build it with Gradle (see below for further details): $ gradle clean installDist Groovy Warning Groovy released Groovy 2.4.4 to fix a vulnerability with CVE-2015-3253. You are considered vulnerable just by having an earlier version of Groovy on your classpath! All users should upgrade to Groovy 2.4.4, or later, as a result. JVM Warning Both Elasticsearch and the Elasticsearch Groovy client require at least Java 7. In addition, the Groovy client is compiled with indy support enabled, which means that it theoretically could cause issues if you are running with Java 7u22 to 7u55 due to a bug in the JVM related to invokedynamic. This is reported directly from the Groovy developers and it is strongly suggested that you run Java 7u60 or later. JVM Release Groovy Client Support invokedynamic Support Java 5 Unsupported None Java 6 Unsupported None Java 7u22 to 7u55 Unsupported Buggy Java 7u60 or later Supported [1.x, 2.x] Supported Java 8 Supported [1.x or later] Supported Groovy is supported on any JDK supported by Elasticsearch, which currently includes Oracle JDK and OpenJDK. Adding to your Groovy projects Gradle repositories {   mavenCentral() }  dependencies {   compile 'org.elasticsearch:elasticsearch-groovy:2.1.2' } Maven <dependencies>   <dependency>     <groupId>org.elasticsearch</groupId>     <artifactId>elasticsearch-groovy</artifactId>     <version>2.1.2</version>     <scope>compile</scope>   </dependency> </dependencies> Grails 2.x Out-of-the-box support for Grails is limited to Grails 2.4.4 or later. To use with earlier versions, you must follow the instructions found in GRAILS-10652 to load Groovy extension modules. repositories {   mavenCentral() }  dependencies {   // You may be able to use the 'runtime' scope   compile group: 'org.elasticsearch', name: 'elasticsearch-groovy', version: '2.1.2', classifier: 'grails' } Grails 3.x has overhauled their build system to use Gradle, which makes it easy for you to select the version of Groovy to use with it, including the use of invokedynamic. However, Grails 2.x did not make it easy. A part of not being easy, Grails 2.x does not use the invokedynamic-compatible Groovy jar, which means that any Grails 2.x project requires a jar that is not compiled with invokedynamic. With the release of Elasticsearch Groovy 1.4.3, we have introduced a secondary jar with a new grails classifier that can be used by Grails users. All other users are strongly recommended to use the invokedynamic-compatible versions described above (it's both faster and slightly smaller!). Support for this is intended to assist the Grails community to use the Elasticsearch Groovy client prior to the release of Grails 3.0. If you are using Grails 3.0 or later, then you should use the invokedynamic version of Groovy and the Gradle dependency above. Compiling Groovy Client To compile this code on your own, then run: $ gradle clean installDist This will skip all tests and place the compiled jar in ./build/install/elasticsearch-groovy/elasticsearch-groovy-{version}.jar. It will package all dependencies (e.g., elasticsearch-{version}.jar) into ./build/install/elasticsearch-groovy/lib. Testing Groovy Client The Groovy client makes use of the Randomized Testing framework used by Elasticsearch itself. The unit tests and integration tests that this uses can be invoked with the same command: $ gradle clean test The various tests.* and es.* system properties that are used by Elasticsearch are also used by the Gradle build script. As a result, any recommendation that suggests running mvn clean test -DsystemProp=xyz can be replaced with gradle clean test -DsystemProp=xyz (the only change was from mvn to gradle). This only applies to the Groovy client. Testing with IntelliJ By default, IntelliJ will place all of the compile-time dependencies above the testCompile dependencies. In the case of the test frameworks used, this presents issues that occasionally trigger test failures (that tell you to fix your classpath with respect to ""test-framework.jar""). To fix this behavior, put your test dependencies above any non-test dependencies within IntelliJ. Open Project Structure Select Modules Suggested Groovy Settings Since the release of Java 7 (aka Java 1.7), higher level languages like Groovy have had access to the invokedynamic JVM instruction. This avoids the need for some runtime code generation (e.g., $callSiteArrays) and it theoretically speeds up all Groovy code. In the Groovy world, there is still support for Java 5 and Java 6, which means that invokedynamic cannot be enabled by default. Compiling Groovy with invokedynamic support To support invokedynamic in your own Groovy project(s), at a minimum, you must include the invokedynamic-compiled Groovy jar, which the Groovy developers call the indy (invokedynamic) jar. Gradle repositories {   mavenCentral() }  dependencies {   compile 'org.codehaus.groovy:groovy-all:2.4.5:indy' } Maven <dependencies>   <dependency>     <groupId>org.codehaus.groovy</groupId>     <artifactId>groovy-all</artifactId>     <version>2.4.5</version>     <classifier>indy</classifier>     <scope>compile</scope>   </dependency> </dependencies> Using invokedynamic in your Groovy code After including the indy jar, you now only have an invokedynamic-compatible Groovy runtime. All internal Groovy calls will use invokedynamic, as will any other Groovy code compiled with invokedynamic support (e.g., the Groovy client), but your code must also be compiled with invokedynamic support to gain the benefits within your compiled jar(s). Gradle apply plugin: 'groovy'  // ...  /**  * Customize Groovy compilation.  */ tasks.withType(GroovyCompile) {   groovyOptions.optimizationOptions.indy = true } Maven Maven has numerous ways to do this, and it largely depends on how you compile your Groovy code. If you are wrapping the Ant task, then add indy=""true"" to the Groovy compilation. Otherwise check your plugin's documentation. IntelliJ When allowing IntelliJ to control the compilation of your project, then you must enable Invoke dynamic support within the preferences for the Groovy Compiler. To change this setting: Open Preferences Select Compiler Select Groovy Compiler Check Invoke dynamic support With IntelliJ 13, I have noticed that it is sometimes necessary to manually rebuild the project because it loses track of the resource files. This happens infrequently, but it will cause practically every test to fail when it does happen. License This software is licensed under the Apache 2 license, quoted below.  Copyright 2009-2015 Elastic <http://www.elastic.co>  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/elastic/elasticsearch-groovy"	"Elasticsearch Groovy client"	"true"
"Rich Application"	"Griffon"	"http://griffon-framework.org/"	"Griffon is an application framework for developing desktop applications in the JVM"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Griffon Toggle navigation Griffon Home Why Griffon News Documentation Tutorials Plugins Development About Griffon is desktop application development platform for the JVM.Inspired by Grails, Griffon leverages the use of the Groovy language and concepts like Convention over Configuration. The Swing toolkit is the default UI toolkit of choice however others may be used, for example JavaFX. Griffon encourages the use of the MVC pattern. Griffon also follows in the spirit of the Swing Application Framework (JSR 296), it defines a simple yet powerful application life cycle and event publishing mechanism. Another interesting feature comes from the Groovy language itself: automatic property support and property binding (inspired by BeansBinding (JSR 295)), which makes creating observable beans and binding to their properties a snap! As if property binding was not enough Groovy’s SwingBuilder also simplifies building multi-threaded applications, say goodbye to the ugly gray rectangle (the bane of Swing apps)! Grails developers should feel right at home when trying out Griffon. Many of Grails’ conventions and commands are shared with Griffon. Granted, Swing is not the same as HTML/GSP but Builders simplify the task of creating the UI. Seasoned Java developers will also be able to pick up the pace quickly, as the framework relieves you of the burden of maintaining an application structure, allowing you to concentrate on getting the code right. Quick Start The recommended way to get started with a Griffon project is to use a Lazybones project template and Gradle. You can install these tools with SDKMAN. $ curl -s http://get.sdkman.io | bash $ sdk install lazybones $ sdk install gradle Next register the griffon-lazybones-templates repository with Lazybones' config file. Edit $USER_HOME/.lazybones/config.groovy bintrayRepositories = [     ""griffon/griffon-lazybones-templates"",     ""pledbrook/lazybones-templates"" ] List all available templates by invoking the following command $ lazybones list Available templates in griffon/griffon-lazybones-templates      griffon-javafx-groovy     griffon-javafx-java     griffon-javafx-kotlin     griffon-lanterna-groovy     griffon-lanterna-java     griffon-pivot-groovy     griffon-pivot-java     griffon-plugin     griffon-swing-groovy     griffon-swing-java Select a starting template from the list and invoke the create command $ lazybones create griffon-javafx-java sample-javax-java Compile, run and test the project with any of these commands $ gradle build $ gradle test $ gradle run You may use Maven as an alternate build tool $ mvn compile $ mvn test $ mvn -Prun Tweets by @theaviary © 2008 - 2016 The Griffon Team | Mixed with Bootstrap v3.1.1 | Baked with JBake v2.4.0"	"null"	"null"	"Griffon is an application framework for developing desktop applications in the JVM"	"true"
"Rich Application"	"GroovyFx"	"http://groovyfx.org/"	"GroovyFX provides a Groovy binding for JavaFX 2.0."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"132"	"26"	"30"	"GitHub - groovyfx-project/groovyfx: A library for writing JavaFX 8 applications in the Groovy language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 132 Fork 30 groovyfx-project/groovyfx Code Issues 12 Pull requests 0 Wiki Pulse Graphs A library for writing JavaFX 8 applications in the Groovy language. http://groovyfx.org 493 commits 3 branches 6 releases 11 contributors Groovy 82.0% Java 12.8% CSS 5.2% Groovy Java CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags groovyfx_0.2.x master version8 Nothing to show pre-0.1 RELEASE-8.0.0 RELEASE-0.4.0 RELEASE-0.3.1 RELEASE-0.3.0 RELEASE-0.2.0 Nothing to show New pull request Latest commit 7577c56 Jul 7, 2016 russel Upgrade Gradle to 3.0-milestone-2 so as to be able to run with JDK9 a… … …s well as JDK1.8. Permalink Failed to load latest commit information. config Continue to improve build settings Aug 26, 2015 gradle Upgrade Gradle to 3.0-milestone-2 so as to be able to run with JDK9 a… Jul 7, 2016 src Move most metaclass enhancements to groovy module. Fixes #36 Mar 8, 2016 .gitignore Ported the first two sections of the docs to asciidoc. Jun 23, 2014 .travis.yml add travis config Aug 25, 2015 README.adoc Make URL consistent with version8 branch. May 24, 2016 build.gradle Upgrade Gradle to 3.0-milestone-2 so as to be able to run with JDK9 a… Jul 7, 2016 build.xml Removed extra groovyfx directory from hierarchy. May 16, 2012 gradle.properties Update version to 9 Mar 8, 2016 gradlew Upgrade Gradle to 3.0-milestone-2 so as to be able to run with JDK9 a… Jul 7, 2016 gradlew.bat Upgrade Gradle to 3.0-milestone-2 so as to be able to run with JDK9 a… Jul 7, 2016 README.adoc GroovyFx Build instructions Download JavaFX from http://javafx.com and follow the install instructions. Or if you are feeling ""bleeding edge"" clone the Git repository! Building with Gradle shell command line Make sure you have Java8u20 (or greater) installed cd to the GroovyFX directory gradlew build To run any specific demo, e.g. the AccordionDemo, you can just call: gradlew AccordionDemo To see an executable overview of all build tasks including all demos: gradlew --gui Using GroovyFX from Maven Central Having GroovyFX in Maven Central (thanks to Sonatype’s OSS hosting) makes it simple to use GroovyFX in everything from simple test scripts to larger projects. The Maven coordinates are as follows: groupId: org.codehaus.groovyfx artifactId: groovyfx version: 9.0.0-SNAPSHOT GroovyFX is simple to include in Groovy scripts thanks to Groovy’s Grab annotation, a part of the Grape system. Just include the following line at the top of your script: @Grab('org.groovyfx:groovyfx:9.0.0-SNAPSHOT') You may find that when you start such a script, you have to ensure that an explicit reference to your jfxrt.jar is declared in your classpath. For Java 8: groovy -cp $JAVA_HOME/jre/lib/ext/jfxrt.jar myScript.groovy Creating a GroovyFX-Based Project with Gradle It is also simple to set up your own GroovyFX-based project using Gradle as the build system. This sample build.gradle script will get you started. Just create a new directory for your project and place the Gradle script into it. Then simply execute the following command: gradle makeDirs to set up the rest of your project’s directory structure. You will automatically have a dependency on both Groovy and GroovyFX. Building with IntelliJ IDEA GroovyFX’s build script is capable of generating all of the project files necessary to build the project with IntelliJ IDEA. Just run the following command from the project’s root directory: gradlew idea This will generate a groovyfx.ipr file. From IntelliJ IDEA, select File → Open Project and navigate to the directory containing the groovyfx.ipr file and open it. You should now be able to build the library and run the demos with IntelliJ IDEA. Building with NetBeans Install the NetBeans Gradle Plugin (which should be in the list of plugins offered as standard, but failing that there see http://plugins.netbeans.org/plugin/44510/gradle-support). Using the open a new project dialogue, navigate to the GroovyFX project directory and you should see the Gradle logo indicating you can open this as a Gradle project. You should now be able to build the library and run the demos with NetBeans. Building with Eclipse Install the Gradle BuildShip and The Groovy Eclipse plugins form the Eclipse Marketplace to get started. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/groovyfx-project/groovyfx"	"GroovyFX provides a Groovy binding for JavaFX 2.0."	"true"
"HTTP"	"Http-Builder"	"https://github.com/jgritman/httpbuilder"	"HTTPBuilder is the easiest way to manipulate HTTP-based resources from the JVM"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"153"	"26"	"108"	"GitHub - jgritman/httpbuilder Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 153 Fork 108 jgritman/httpbuilder Code Issues 32 Pull requests 4 Wiki Pulse Graphs No description or website provided. 305 commits 2 branches 4 releases 9 contributors Java 77.8% Groovy 21.4% HTML 0.8% Java Groovy HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags json-output master Nothing to show http-builder-0.7.2 http-builder-0.7.1 http-builder-0.7 http-builder-0.6 Nothing to show New pull request Latest commit 72fb50a Apr 13, 2015 jgritman Merge pull request #43 from splix/patch-1 … Update README - link to wiki docs Permalink Failed to load latest commit information. .settings misc. minor project changes. Removed cobertura from test phase so uni… Dec 20, 2008 src Merge pull request #31 from kamilszymanski/timeouts May 13, 2014 .classpath git-svn-id: http://svn.codehaus.org/gmod/httpbuilder/trunk@758 f908d5… Jun 12, 2009 .gitignore add missing contentType guard Apr 25, 2014 .project initial project import. -TMN Dec 15, 2008 README Update README Apr 13, 2015 pom.xml [maven-release-plugin] prepare for next development iteration May 18, 2014 README HTTPBuilder = Easy HTTP client for Groovy.  Build Instructions:   HTTPBuilder is built using Apache Maven (http://maven.apache.org)  $ mvn install  Documentation: https://github.com/jgritman/httpbuilder/wiki  Contributions:   This project relies on the work of many open source projects including:   * Groovy: http://groovy.codehaus.org   * Apache HttpClient: http://hc.apache.org   * Json-Lib: http://json-lib.sourceforge.net/   * Neko HTML: http://nekohtml.sourceforge.net/   * Signpost: http://code.google.com/p/oauth-signpost/   This project also includes source code written by Martin Blom (martin@blom.org)  in the 'thirdparty' package.  It is licensed under the LGPL v3 and  re-distributed with permission from the author.   License:   HTTPBuilder is copyright 2009-2011 Thomas Nichols except where otherwise noted.   This project is licensed under the Apache License Version 2.0 except where  otherwise noted in the source files.   You are receiving this code free of charge, which represents many hours of  effort from other individuals and corporations.  As a responsible member  of the community, you are encouraged (but not required) to donate any  enhancements or improvements back to the community under a similar open  source license.  Thank you. -TMN    Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jgritman/httpbuilder"	"HTTPBuilder is the easiest way to manipulate HTTP-based resources from the JVM"	"true"
"HTTP"	"AsyncRestClient"	"https://github.com/eginez/AsyncRestClient"	"Combine the power of RESTClient with RxGroovy for async http calls"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"2"	"1"	"GitHub - eginez/AsyncRestClient: This is a light weight extension of groovy's RESTClient to support asyn call via RxJava Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 4 Fork 1 eginez/AsyncRestClient Code Issues 0 Pull requests 0 Pulse Graphs This is a light weight extension of groovy's RESTClient to support asyn call via RxJava 18 commits 1 branch 0 releases Fetching contributors Groovy 100.0% Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. gradle/wrapper src .gitignore LICENSE README.md build.gradle gradlew gradlew.bat settings.gradle README.md AsyncRestClient This is a light weight extension of groovy's RESTClient to support asyn call via RxGroovy Install: dependencies {         compile 'org.eginez.groovy:AsyncRestClient:1.+' } For RESTClient documentation: https://github.com/jgritman/httpbuilder/wiki/RESTClient. For RxGroovy documentation: https://github.com/ReactiveX/RxGroovy Quick example: with(AsyncRest) { new RESTClient('https://google.com')         .getAsync(path:'/')         .subscribe { res -> println res.data }         } And of course harness the power of RxJava :D with(AsyncRest){ Observable<Object>.zip(     new RESTClient('http://someurl.com/part_1').getAsync(),     new RESTClient('http://someurl.com/part_2').getAsync(),     { res1, res2         //proccess them eg:         [res1.data: res2.data]     })     .subscribe { println '2 concurrent rest calls sync\'d for processing'}     } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/eginez/AsyncRestClient"	"Combine the power of RESTClient with RxGroovy for async http calls"	"true"
"HTTP"	"Groovy-wslite"	"https://github.com/jwagenleitner/groovy-wslite"	"Lightweight SOAP and REST webservice clients for Groovy"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"309"	"46"	"78"	"GitHub - jwagenleitner/groovy-wslite: Lightweight SOAP and REST webservice clients for Groovy Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 309 Fork 78 jwagenleitner/groovy-wslite Code Issues 13 Pull requests 3 Pulse Graphs Lightweight SOAP and REST webservice clients for Groovy 222 commits 4 branches 19 releases 12 contributors Groovy 99.0% Java 1.0% Groovy Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags compile-static master v1.0.x v1.1.x Nothing to show v1.1.2 v1.1.1 v1.1.0 v1.0.1 v1.0.0 v0.8.2 v0.8.1 v0.8.0 v0.7.2 v0.7.1 v0.7.0 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit 130dc5d Sep 17, 2015 d10xa committed with jwagenleitner fix missing gradle properties (closes #107) Permalink Failed to load latest commit information. config/codenarc formatting Jan 20, 2012 gradle/wrapper build updates Jun 2, 2015 src Merge pull request #103 from marsla/master Apr 17, 2016 .gitignore added changelog/license files Mar 28, 2011 CHANGELOG.md changelog Jun 3, 2015 LICENSE added changelog/license files Mar 29, 2011 README.md Closes #91 Jun 3, 2015 build.gradle fix missing gradle properties (closes #107) Apr 17, 2016 gradle.properties.sample readme fixes and build tweaks Jul 9, 2014 gradlew v0.7.2 Feb 2, 2013 gradlew.bat gradle 1.1 Aug 5, 2012 README.md groovy-wslite Library for Groovy that provides no-frills SOAP and REST webservice clients. This library assumes you know exactly what messages you want to send to your services and want full control over the request. No streams are used and all request/responses are buffered in memory for convenience. Versions Note Please consult the Changelog for any breaking changes. 1.0 JDK 1.5 or higher Requires Groovy 1.7.6 or higher 2.0 (beta) JDK 1.7 or higher Requires Groovy 2.3 or higher Plans Use Groovy's built-in JSON parsing Support for HEAD and PATCH verbs Make use of @CompileStatic where appropriate Make API more extensible Clean up connection handling SOAP Example @Grab('com.github.groovy-wslite:groovy-wslite:1.1.2') import wslite.soap.*  def client = new SOAPClient('http://www.holidaywebservice.com/Holidays/US/Dates/USHolidayDates.asmx') def response = client.send(SOAPAction:'http://www.27seconds.com/Holidays/US/Dates/GetMothersDay') {     body {         GetMothersDay('xmlns':'http://www.27seconds.com/Holidays/US/Dates/') {             year(2011)         }     } }  assert ""2011-05-08T00:00:00"" == response.GetMothersDayResponse.GetMothersDayResult.text() assert 200 == response.httpResponse.statusCode assert ""ASP.NET"" == response.httpResponse.headers['X-Powered-By'] Usage def client = new SOAPClient(""http://..."") def response = client.send(SOAPAction: ""SomeAction"",                            connectTimeout:5000,                            readTimeout:10000,                            useCaches:false,                            followRedirects:false,                            sslTrustAllCerts:true) {     version SOAPVersion.V1_2        // SOAPVersion.V1_1 is default     soapNamespacePrefix ""SOAP""      // ""soap-env"" is default     encoding ""ISO-8859-1""           // ""UTF-8"" is default encoding for xml     envelopeAttributes ""xmlns:hr"":""http://example.org/hr""     header(mustUnderstand:false) {         auth {             apiToken(""1234567890"")         }     }     body {         GetWeatherByZipCode(xmlns:""http://example.weather.org"") {             ZipCode(""93657"")         }     } } The header and body closures are passed to a MarkupBuilder in order to create the SOAP message. If you have a string with XML content you want to include in you can use mkp. def response = client.send {     body {         GetWeatherByZipCode(xmlns:""http://example.weather.org"") {             mkp.yieldUnescaped ""<ZipCode>93657</ZipCode>""         }     } } You can also pass a raw string to the send method if you want absolute control over the resulting message. client.send(     """"""<?xml version='1.0' encoding='UTF-8'?>        <soap-env:Envelope xmlns:SOAP='http://schemas.xmlsoap.org/soap/envelope/'>            <soap-env:Body>                <GetFoo>bar</GetFoo>            </soap-env:Body>        </soap-env:Envelope>"""""" ) The SOAP version will be auto-detected using the namespace URI of the Envelope element, you can override this by specifying a SOAPVersion. client.send(SOAPVersion.V1_2,             """"""<?xml version='1.0' encoding='UTF-8'?>                <soap-env:Envelope xmlns:SOAP='http://www.w3.org/2003/05/soap-envelope'>                    <soap-env:Body>                        <GetFoo>bar</GetFoo>                     </soap-env:Body>                 </soap-env:Envelope>"""""") You can also specify connection settings. client.send(SOAPVersion.V1_2,             connectTimeout:7000,             readTimeout:9000,             """"""<?xml version='1.0' encoding='UTF-8'?>                <soap-env:Envelope xmlns:SOAP='http://www.w3.org/2003/05/soap-envelope'>                    <soap-env:Body>                        <GetFoo>bar</GetFoo>                    </soap-env:Body>                </soap-env:Envelope>"""""") SSL Using a custom SSL trust store In addition to setting a global trust store and trust store password using the javax.net.ssl.trustStore and javax.net.ssl.trustStorePassword System properties, you can set a custom trust store on a client. import wslite.soap.*  def client = new SOAPClient(""https://www.example.com/ExampleService"") client.httpClient.sslTrustStoreFile = ""~/mykeystore.jks"" client.httpClient.sslTrustStorePassword = ""secret""  def response = client.send() {     .... } You can also specify a custom trust store on a per request basis, this will override any custom trust store that may be set on the client. def client = new SOAPClient(""https://www.example.com/ExampleService"") def response = client.send(sslTrustStoreFile:""~/mykeystore.jks"", sslTrustStorePassword:""secret"") {     .... } Note: sslTrustStorePassword is optional. Trusting all SSL certs When in development mode and dealing with lots of servers with self-signed certs it can be helpful to bypass a custom trust store and trust all certs automatically. import wslite.soap.*  def client = new SOAPClient(""https://www.example.com/ExampleService"") client.httpClient.sslTrustAllCerts = true  def response = client.send() {     .... } You can also specify a the same parameter on a per request basis. def client = new SOAPClient(""https://www.example.com/ExampleService"") def response = client.send(sslTrustAllCerts:true) {     .... } Note: sslTrustAllCerts overrides any custom trust store settings that may have already be set on the client or the request. Response The response is automatically parsed by XmlSlurper and provides several convenient properties for accessing the SOAP message. response.envelope To get straight to the Header or Body element... response.header or response.body You can access the first child element of the Body by name response.GetWeatherByZipCodeResponse If you just want the text of the response use response.text. You can also access the underlying HTTPRequest response.httpRequest and HTTPResponse response.httpResponse objects. SOAP Faults If the server responds with a SOAP Fault a SOAPFaultException will be thrown. The SOAPFaultException wraps a SOAPResponse that contains the Fault. import wslite.soap.*  def client = new SOAPClient(""http://www.webservicex.net/WeatherForecast2.asmx"") try {     def response = client.send {         ....     } } catch (SOAPFaultException sfe) {     println sfe.message // faultcode/faultstring for 1.1 or Code/Reason for 1.2     println sfe.text    // prints SOAP Envelope     println sfe.httpResponse.statusCode     println sfe.fault.detail.text() // sfe.fault is a GPathResult of Envelope/Body/Fault } catch (SOAPClientException sce) {     // This indicates an error with underlying HTTP Client (i.e., 404 Not Found) } Proxy If behind proxy, you can set it in the request. def proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress('proxy.example.com', 8080))  def client = new SOAPClient(""https://www.example.com/ExampleService"") def response = client.send(proxy:proxy) {     .... } If the proxy requires authentication... Authenticator.setDefault(new Authenticator() {     protected PasswordAuthentication getPasswordAuthentication() {         return new PasswordAuthentication(""username"",""password"".toCharArray())     } }) You can also set the proxy on the SOAP client itself or via the standard java.net ""http.proxyHost"" and ""http.proxyPort"" system properties (or their ""https.*"" counterparts). To configure the client with a proxy, use code like this: def proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress('proxy.example.com', 8080))  def client = new SOAPClient(""https://www.example.com/ExampleService"") client.httpClient.proxy = proxy .... In decreasing precedence, groovy-wslite picks the proxy settings from: The request's proxy The client's proxy The java.net system properties No proxy REST Example @Grab('com.github.groovy-wslite:groovy-wslite:1.1.2') import wslite.rest.*  def client = new RESTClient(""http://api.twitter.com/1/"") def response = client.get(path:'/users/show.json', query:[screen_name:'jwagenleitner', include_entities:true])  assert 200 == response.statusCode assert ""John Wagenleitner"" == response.json.name Methods RESTClient supports the following methods: head get delete post put patch Parameters The methods can all take a map as a parameter (though not required) that give you control over the request. def client = new RESTClient(""http://api.twitter.com/1/"") def response = client.get( path:'/users/show.json',                            accept: ContentType.JSON,                            query:[screen_name:'jwagenleitner', include_entities:true],                            headers:[""X-Foo"":""bar""],                            connectTimeout: 5000,                            readTimeout: 10000,                            followRedirects: false,                            useCaches: false,                            sslTrustAllCerts: true ) Sending Content In addition to a Map, the post/put methods take an additional parameter of a Closure. def client = new RESTClient(""http://some.service.net/"") def response = client.post(path: ""/comments"") {     type ContentType.XML     xml {         Comment {             Text(""This is my comment."")         }     } } When sending content you can also send byte[], text, url encoded parameters, xml and json. def response = client.post() {     type ""application/vnd.lock-in-proprietary-format""  // String or ContentType     charset ""US-ASCII""      // one of the following     bytes new File(""payload.txt"").bytes     text ""hello world""     urlenc username: ""homer"", password: ""simpson"", timezone: ""EST""     xml { root() }     json id:""525"", department:""Finance"" } You can also do multipart requests for uploading files and such. You don't need to specify content type as this will be multipart/form-data and will have a content boundary assigned to it. def response = client.post() {      // call once for each body-part     multipart 'username', 'antony'.bytes     multipart 'files[myfile.png]', myFile.bytes     // specify content-type and filename     multipart 'inputFile', 'test'.bytes, 'image/png', 'test.png' } Client Defaults When interacting with a service that requires a particular Accept header or when sending content of the same type/charset, you can set those as defaults so they will be sent for every request (if they are not already specified in the request): client.defaultAcceptHeader = ""text/xml"" client.defaultContentTypeHeader = ""application/json"" client.defaultCharset = ""UTF-8"" HTTP Authorization Currently only Basic Auth is supported. Basic Auth import wslite.http.auth.* import wslite.rest.*  def client = new RESTClient(""http://some.service.net"") client.authorization = new HTTPBasicAuthorization(""homer"", ""simpson"") SSL Using a custom SSL trust store In addition to setting a global trust store and trust store password using the javax.net.ssl.trustStore and javax.net.ssl.trustStorePassword System properties, you can set a custom trust store on a client. import wslite.rest.*  def client = new RESTClient(""http://some.service.net"") client.httpClient.sslTrustStoreFile = ""~/mykeystore.jks"" client.httpClient.sslTrustStorePassword = ""myKeystorePassword""  def response = client.get() You can also specify a custom trust store on a per request basis, this will override any custom trust store that may be set on the client. def client = new RESTClient(""http://some.service.net"") client.get(sslTrustStoreFile:""~/mykeystore.jks"", sslTrustStorePassword:""secret"") Note: sslTrustStorePassword is optional. Trusting all SSL certs When in development mode and dealing with lots of servers with self-signed certs it can be helpful to bypass a custom trust store and trust all certs automatically. import wslite.rest.*  def client = new RESTClient(""http://some.service.net"") client.httpClient.sslTrustAllCerts = true  def response = client.get() You can also specify a the same parameter on a per request basis. def client = new RESTClient(""http://some.service.net"") def response = client.get(sslTrustAllCerts:true) Note: sslTrustAllCerts overrides any custom trust store settings that may have already be set on the client or the request. Response The response has the following properties: url statusCode // 200 statusMessage // ""Ok"" contentType // ""text/xml"" (parameters are not included such as charset) charset // UTF-8 (charset parameter parsed from the returned Content-Type header) contentEncoding // from headers contentLength // from headers date // from headers expiration // from headers lastModified // from headers headers // Map (case insensitive) of all headers data // byte[] of any content returned from the server The response also includes the original HTTPReqeust (ex. response.request). Content Type Handling In addition to the above response properties, there are handlers for text, xml and json responses. For all text based responses (content type starts with ""text/"") there will be a text (i.e., response.text) property available for the response. For xml based responses, an xml (i.e., response.xml) property is available that is of type GPathResult. For json based responses, a json (i.e., response.json) property is available that is of type returned from groovy.json.JsonSlurper. Proxies If you want to send requests via a proxy, you can configure one in several ways. You can do it at the level of the request: // SOAPClient def proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress('proxy.example.com', 8080))  def client = new SOAPClient(""https://www.example.com/ExampleService"") def response = client.send(proxy:proxy) {     .... }  // RESTClient def proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress('proxy.example.com', 8080))  def client = new RESTClient(""http://api.twitter.com/1/"") def response = client.get(path:'/users/show.json', proxy:proxy, query:[screen_name:'jwagenleitner', include_entities:true]) You can also set the proxy on the SOAP client or REST client itself: def proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress('proxy.example.com', 8080))  def client = new SOAPClient(""https://www.example.com/ExampleService"") client.httpClient.proxy = proxy .... Finally, you can use the standard java.net ""http.proxyHost"" and ""http.proxyPort"" system properties (or their ""https.*"" counterparts). In decreasing precedence, groovy-wslite picks the proxy settings from: The request's proxy The client's proxy The java.net system properties No proxy If the proxy requires authentication, then you will need to set an Authenticator: Authenticator.setDefault(new Authenticator() {     protected PasswordAuthentication getPasswordAuthentication() {         return new PasswordAuthentication(""username"",""password"".toCharArray())     } }) Using groovy-wslite in your project Download Release JAR Files Download SNAPSHOT JAR Files groovy-wslite is available in Maven Central. Maven Releases <dependency>     <groupId>com.github.groovy-wslite</groupId>     <artifactId>groovy-wslite</artifactId>     <version>1.1.2</version> </dependency>  Snapshots <repositories>     <repository>         <id>groovy-wslite</id>         <url>https://oss.sonatype.org/content/groups/public</url>     </repository> </repositories>  <dependencies>     <dependency>         <groupId>com.github.groovy-wslite</groupId>         <artifactId>groovy-wslite</artifactId>         <version>2.0.0-SNAPSHOT</version>     </dependency> </dependencies>  Groovy Grape Releases @Grab('com.github.groovy-wslite:groovy-wslite:1.1.2')  Snapshots @GrabResolver(name='groovy-wslite', root='https://oss.sonatype.org/content/groups/public', m2Compatible=true) @Grab(group='com.github.groovy-wslite', module='groovy-wslite', version='2.0.0-SNAPSHOT', changing=true)  Using with Grails The SOAP/RESTClients can easily be configured and used in your Grails application. Add the dependency to grails-app/conf/BuildConfig.groovy. Note: You must enable the mavenCentral() repository. grails.project.dependency.resolution = {     ....     ....     repositories {         ....         ....         mavenCentral()         // uncomment below in order to use snapshots         //mavenRepo ""https://oss.sonatype.org/content/groups/public""     }     dependencies {         runtime 'com.github.groovy-wslite:groovy-wslite:1.1.2'     } }  Configure the clients in grails-app/conf/spring/resources.groovy For example: clientBasicAuth(wslite.http.auth.HTTPBasicAuthorization) {     username = ""Aladdin""     password = ""open sesame"" }  httpClient(wslite.http.HTTPClient) {     connectTimeout = 5000     readTimeout = 10000     useCaches = false     followRedirects = false     sslTrustAllCerts = true     // authorization = ref('clientBasicAuth')     // proxy = myproxy }  soapClient(wslite.soap.SOAPClient) {     serviceURL = ""http://example.org/soap""     httpClient = ref('httpClient')     // authorization = ref('clientBasicAuth') }  restClient(wslite.rest.RESTClient) {     url = ""http://example.org/services""     httpClient = ref('httpClient')     authorization = ref('clientBasicAuth') }  In your controller/service/taglib/etc. you can access the configured client(s) as you would any Grails service. For example: package org.example  class MyService {      def restClient     def soapClient      def someServiceMethod() {         def response = restClient.get()         ....     }      def someOtherServiceMethod() {         def response soapClient.send { ... }     } } Versioning This project uses Semantic Versioning. Building groovy-wslite uses Gradle for the build process. Build Instructions Fetch the latest code: git clone git://github.com/jwagenleitner/groovy-wslite.git (Optional) Run the unit tests using gradlew test (Optional) Run the integration tests using gradlew integrationTest (Optional) Run the code quality checks gradlew codenarcMain codenarcTest Go to the project directory and run: gradlew jar You will find the built jar in ./build/libs. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jwagenleitner/groovy-wslite"	"Lightweight SOAP and REST webservice clients for Groovy"	"true"
"Testing"	"Spock"	"https://github.com/spockframework/spock"	"The Enterprise-ready testing and specification framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1161"	"115"	"221"	"GitHub - spockframework/spock: The Enterprise-ready testing and specification framework. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 115 Star 1,161 Fork 221 spockframework/spock Code Issues 173 Pull requests 23 Pulse Graphs The Enterprise-ready testing and specification framework. http://spockframework.org 2,191 commits 11 branches 21 releases Fetching contributors Java 56.5% Groovy 31.8% JavaScript 7.7% XSLT 2.6% HTML 1.1% CSS 0.3% Java Groovy JavaScript XSLT HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages groovy-1.7 groovy-1.8 groovy-1.9 groovy-2.3 ideaconfig jenkins master model-builder pr/550.1 sonar Nothing to show spock-1.1 spock-1.1-rc-1 spock-1.0 spock-0.7-groovy-2.0 spock-0.7-groovy-1.8 spock-0.6-groovy-2.0 spock-0.6-groovy-2.0-rc-1 spock-0.6-groovy-1.8 spock-0.6-groovy-1.8-rc-1 spock-0.6-groovy-1.7 spock-0.6-groovy-1.7-rc-1 spock-0.5-groovy-1.8 spock-0.5-groovy-1.7 spock-0.5-groovy-1.6 spock-0.4-groovy-1.7 spock-0.4-groovy-1.6 spock-0.3 spock-0.3-groovy-1.7 spock-0.2 spock-0.1 groovy-1.6-end-of-life Nothing to show New pull request Latest commit 684ed05 Jul 14, 2016 robfletcher committed on GitHub Merge pull request #618 from fwilhe/patch-1 … Fix broken hyperlink Permalink Failed to load latest commit information. .github updated a couple of references to the version number Jun 30, 2016 .idea changes to idea files Dec 25, 2013 buildSrc add buildSrc to allow use of spock-gradle from spock build Feb 5, 2013 config Sign and publish artifacts from Shippable Feb 28, 2015 docs Fix broken hyperlink Jul 14, 2016 gradle Merge pull request #108 from siordache/partialMock Jun 1, 2016 spock-core Merge pull request #586 from tschulte/issue-584 Jul 5, 2016 spock-gradle Start iteration for 1.1-SNAPSHOT Mar 2, 2015 spock-guice Update GuiceExtension.java Mar 4, 2015 spock-report Don't publish spock-gradle and spock-report for now Feb 28, 2015 spock-specs Merge pull request #586 from tschulte/issue-584 Jul 5, 2016 spock-spring Ensured Java 6 compatibility by excluding bundled JTA library and usi… Jun 24, 2016 spock-tapestry Use Java 1.8 compatible dependencies for builds running on Java 1.8 Mar 1, 2015 spock-unitils convenient interceptors for fixture methods Nov 23, 2012 .editorconfig Added .editorconfig Mar 26, 2015 .gitignore Improve build configuration for shippable CI Sep 14, 2014 .travis.yml avoid always rewriting the travis cache Jun 1, 2016 CONTRIBUTING.md updated docs to reflect IntelliJ gradle import fails #70 Mar 25, 2015 LICENSE google code import Feb 18, 2009 NOTICE updated notice and readme May 26, 2010 README.md updated a couple of references to the version number Jun 30, 2016 appveyor.yml Invoke `appveyorCiBuild` rather than `build` task Feb 28, 2015 build.gradle label 1.1-rc-1 release Jun 29, 2016 gradlew Updated to gradle 2.13 variant Jun 1, 2016 gradlew.bat Updated to gradle 2.13 variant Jun 1, 2016 settings.gradle Delete spock-maven subproject Mar 2, 2015 shippable.yml Remove TEST_KEY Mar 1, 2015 README.md Spock Framework Spock is a developer testing and specification framework for Java and Groovy applications. To learn more about Spock, visit http://spockframework.org. To run a sample spec in your browser, go to http://webconsole.spockframework.org. Latest Versions The latest release version is 1.1-rc-1 (1.1-groovy-2.0-rc-1, 1.1-groovy-2.3-rc-1, 1.1-groovy-2.4-rc-1), released on 2016-06-29. The current development version is 1.1-SNAPSHOT (1.1-groovy-2.0-SNAPSHOT, 1.1-groovy-2.3-SNAPSHOT, 1.1-groovy-2.4-SNAPSHOT). Releases are available from Maven Central. Development snapshots are available from Sonatype OSS. Modules spock-core -- Core framework. This is the only mandatory module. spock-specs -- Specifications for spock-core, implemented using Spock. Not required for using Spock. spock-spring -- Integration with the Spring TestContext Framework. spock-tapestry -- Integration with the Tapestry 5 IoC container. spock-guice -- Integration with Guice 2/3. spock-unitils -- Integration with Unitils. spock-report -- Interactive, business-friendly HTML reports. Building Supported versions Spock is supported for Java version 6, 7, and 8. Spock is supported for Groovy version 2.0 (Not supported for Java 8+), 2.3, 2.4 The tests are testing spock with a specific versions (variants) of groovy. Default is groovy version 2.4 The groovy 2.4 variant should pass on all supported JDK versions: ./gradlew clean build  (Windows: gradlew clean build). All build dependencies, including thebuild tool itself, will be downloaded automatically (unless already present). If you are using JDK 6 or 7 you can specify groovy version 2.0 with using -Dvariant=2.0 and it should pass as well: ./gradlew clean build -Dvariant=2.0  Contributing Contributions are welcome! Please see the contributing page for detailed instructions. Support If you have any comments or questions, please direct them to the user forum. All feedback is appreciated! Links Spock Homepage -- http://spockframework.org Spock Web Console -- http://webconsole.spockframework.org GitHub Organization -- http://github.spockframework.org Reference Documentation -- http://docs.spockframework.org Old Wiki -- http://wiki.spockframework.org Javadoc -- http://javadoc.spockframework.org User Forum -- http://forum.spockframework.org Developer Forum -- http://dev-forum.spockframework.org Issue Tracker -- http://issues.spockframework.org Build Server -- http://builds.spockframework.org Spock Example Project -- http://github.spockframework.org/spock-example Twitter -- http://twitter.spockframework.org Live Long And Prosper! The Spock Framework Team Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spockframework/spock"	"The Enterprise-ready testing and specification framework."	"true"
"Testing"	"Geb"	"https://github.com/geb/geb"	"Very Groovy Browser Automation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"629"	"95"	"173"	"GitHub - geb/geb: Very Groovy Browser Automation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 95 Star 629 Fork 173 geb/geb Code Pull requests 0 Pulse Graphs Very Groovy Browser Automation http://www.gebish.org 1,878 commits 1 branch 23 releases Fetching contributors Groovy 93.1% Java 6.3% HTML 0.6% Groovy Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.13.1 v0.13.0 v0.12.2 v0.12.1 v0.12.0 v0.11.0 v0.10.0 v0.9.3 v0.9.2 v0.9.1 v0.9.0-RC-1 v0.7.2 v0.7.1 v0.7.0 v0.6.3 v0.6.2 v0.6.0 v0.6.0.RC1 v0.5.1 v0.5 v0.4 v0.2 v0.1 Nothing to show New pull request Latest commit 5e760a8 Jul 3, 2016 erdi Update to latest Spock Permalink Failed to load latest commit information. buildSrc Revert accidental changes #2 Nov 21, 2015 compatibility/groovy-2.3.7 Treat the :compatibility:groovy-2.3.7 subproject as a groovy module f… Feb 20, 2016 doc Removed unused javascript Jun 26, 2016 gradle Update to latest Gradle Jul 3, 2016 integration Codenarc fixes. Feb 10, 2016 internal/test-support Use latest codenarc Mar 6, 2016 module Update to latest Spock Jul 3, 2016 .gitignore Ignore all logs. Apr 1, 2013 .tm_properties more tm metadata Nov 19, 2011 LICENSE First cut. Nov 8, 2009 Procfile Update site to use latest Ratpack. Aug 18, 2015 README.md Update README.md Jun 28, 2016 RELEASING.md Update releasing instructions. Jul 12, 2015 geb.gradle Update to latest Spock Jul 3, 2016 gradlew Update to latest Gradle Jun 26, 2016 gradlew.bat Update to latest Gradle Jun 26, 2016 ideaCodeStyle.xml tabs -> spaces Feb 5, 2015 logo.svg Add project logo. Jun 24, 2015 settings.gradle Rename subproject used for testing compatibility with groovy 2.3.7 Feb 20, 2016 README.md Geb (pronounced “jeb”) is a browser automation solution. It brings together the power of WebDriver, the elegance of jQuery content selection, the robustness of Page Object modelling and the expressiveness of the Groovy language. For more information about the project, see the http://www.gebish.org. How to contribute Build Environment Geb builds with Gradle. You do not need to have Gradle installed to work with the Geb build as Gradle provides an executable wrapper that you use to drive the build. On UNIX type environments this is gradlew and is gradlew.bat on Windows. For example to run the Geb test suite for the entire project you would run… ./gradlew test  Contributing Documentation Geb documentation comes in two forms: the manual and the API (i.e. the Groovydoc amongst the source). The Manual The manual project can be found at doc/manual within the project tree. The AsciiDoc source files, CSS and images that make up the manual can be found at doc/manual/src (the manual is compiled using a tool called AsciiDoctor). Most documentation contributions are simply modifications to these files. To compile the manual in or to see any changes made, simply run (from the root of the geb project)… ./gradlew :doc:manual:asciidoctor  You will then find the compiled HTML in the directory doc/manual/build/asciidoc The API reference The API reference is made up of the Groovydoc (like Javadoc) that annotates the Groovy files for the different modules in module/. To make a change to the reference API documentation, find the corresponding file in module/«module»/src/main/groovy and make the change. You can then generate the API reference HTML by running… ./gradlew :doc:manual:apiDoc  You will then find the compiled HTML in the directory doc/manual/build/apiDoc Note that you can build the manual chapters and reference API in one go with ./gradlew doc:manual:packageManual Contributing features/patches The source code for all of the modules is contained in the module/ directory. To run the tests after making your change to a module, you can run… ./gradlew :module:«module-name»:test  There are lots of example tests in the geb-core module that use the classes from the test-support module for running against an in memory HTTP server. To run the entire test suite, run… ./gradlew test  Development Mailing List If you want to do some work on Geb and want some help, you can join the geb-dev@googlegroups.com mailing list via Google Groups. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/geb/geb"	"Very Groovy Browser Automation"	"true"
"Testing"	"Betamax"	"http://freeside.co/betamax/"	"Betamax is a tool for mocking external HTTP resources such as web services and REST APIs in your tests."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Betamax is a tool for mocking external HTTP resources such as web services and REST APIs in your tests."	"false"
"Concurrency"	"GPars"	"https://github.com/GPars/GPars"	"The GPars concurrency and parallelism framework for the JVM"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"117"	"15"	"37"	"GitHub - GPars/GPars: The GPars concurrency and parallelism framework for the JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 117 Fork 37 GPars/GPars Code Issues 8 Pull requests 1 Wiki Pulse Graphs The GPars concurrency and parallelism framework for the JVM http://gpars.website 3,193 commits 5 branches 20 releases Fetching contributors Java 51.5% Groovy 47.3% Other 1.2% Java Groovy Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags jdk8 maintenance-1.0 maintenance-1.1 maintenance-1.2 master Nothing to show release-1.2.1 release-1.2.0 release-1.1.0 release-1.1.0-rc1 release-1.0.0 release-1.0.0-rc1 release-1.0-beta-3 release-1.0-beta-2 release-1.0-beta-1 release-0.12 release-0.12-beta-1 release-0.11 release-0.11-beta-4 release-0.11-beta-3 release-0.11-beta-2 release-0.11-beta-1 release-0.10 list Before_atomic_gae_compatibility_fix 0.10-beta-1_release Nothing to show New pull request Latest commit f60a87a May 24, 2016 russel Merge pull request #36 from ysb33r/master … Fixed Bintray org & repo names Permalink Failed to load latest commit information. artwork Add variant of logo for use of dark backgrounds. Dec 22, 2015 buildSrc File changes in a way inconsistent with being in version control. Mar 8, 2015 config/codenarc Amend all the files with \n\r ar EOL to be \n EOL, i.e. no \n\r EOLs … Mar 10, 2011 docs/JonKerridgeBook Amend all the files with \n\r ar EOL to be \n EOL, i.e. no \n\r EOLs … Mar 10, 2011 gradle/wrapper Upgrade Gradle. May 24, 2016 java-demo Updated the default project files to JDK 7 and Groovy 2.2.2 Apr 26, 2014 lib Rearrange some more dependencies, and back out of the Multiverse upda… Mar 29, 2013 licenses Tidy up the lib and licence hierarchy. Dec 11, 2011 src Update the CI inspection profiles, spellchecker dictionary and fix a … Dec 31, 2015 .gitignore Capitalize project name. Mar 8, 2015 .travis.yml Rename the TravisCI file. Nov 28, 2014 GPars_CI_only.iml Updated the default project files to JDK 7 and Groovy 2.2.2 Apr 26, 2014 GPars_CI_only.ipr Update the CodeStyle inspection profile Dec 31, 2015 LICENSE.txt user guide Dec 16, 2010 README.idea Updated the idea readme file May 24, 2013 README.md Fixed links in README May 24, 2016 bambooBuild Updated the bamboo build script to correctly generated and package sn… Mar 30, 2012 bambooBuildRelease Added a bamboo script dedicated to release builds Oct 20, 2011 build.gradle Merge pull request #36 from ysb33r/master May 24, 2016 gradle.properties Update versions of things. Dec 22, 2015 gradlew Upgrade Gradle. May 24, 2016 gradlew.bat Upgrade Gradle. May 24, 2016 overview.html Updated the license header (removed GParallelizer) May 24, 2010 settings.gradle Capitalize project name. Mar 8, 2015 README.md Travis-CI master branch: | jdk8 branch: Snap-CI master branch: | jdk8 branch: Codeship master branch: | jdk8 branch: Introduction The GPars framework (http://www.gpars.org) offers Java developers intuitive and safe ways to handle Java or Groovy tasks concurrently. Leveraging the enormous flexibility of the Groovy programing language and building on proven Java technologies, we aim to make concurrent programming for multi-core hardware intuitive, robust and enjoyable. GPars - 'coz concurrency is Groovy The traditional thread-based concurrency model built into Java doesn't match well with the natural human sense for parallelism. While this was not a problem at times, when the level of parallelism in software was low and concurrency offered only limited benefits compared to sequential code, nowadays, with the number of cores on a single main-stream chip doubling almost every year, sequential code quickly looses ground and fails to compete in performance and hardware utilization with concurrent code. Inevitably, for concurrent programming to be effective, the mental models of concurrent systems interactions that people create in their heads have to respect the nature of human brains more than the wires on the chips. Luckily, such abstractions have been around for several decades, used at universities, in telephone switches, the super-computing industry and some other inherently concurrent domains. The current challenge for GPars is to bring these abstractions up to the mainstream software developers to help us solve our practical daily issues. The framework provides straightforward Java or Groovy-based APIs to declare, which parts of the code should be performed in parallel. Collections can have their elements processed concurrently, closures can be turned into composable asynchronous functions and run in the background on your behalf, mutable data can be protected by agents or software transactional memory. For the common scenario that one or multiple results are calculated concurrently but need to be processed as soon as they are available, GPars makes it a breeze to correctly model this with Dataflow. Dataflow variables and channels gives you a handy abstraction of single-assignment multiple-read data elements, while dataflow operators let you build efficient concurrent data-processing networks. The concept of Actors as an approach to organizing concurrent activities has recently gained new popularity (thanks to the Scala, Erlang, and other programming languages). GPars implements this concept for Java and Groovy developers. With actors support you can quickly create several independent Actors, which consume messages passed to them and communicate with other actors by sending them messages. You then build your solution by combining these actors into a communication network. For more details, visit the GPars project home page at http://www.gpars.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GPars/GPars"	"The GPars concurrency and parallelism framework for the JVM"	"true"
"Concurrency"	"RxGroovy"	"https://github.com/ReactiveX/RxGroovy"	"RxJava bindings for Groovy"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"93"	"19"	"22"	"GitHub - ReactiveX/RxGroovy: RxJava bindings for Groovy Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 93 Fork 22 ReactiveX/RxGroovy Code Issues 4 Pull requests 0 Pulse Graphs RxJava bindings for Groovy 95 commits 1 branch 5 releases Fetching contributors Groovy 56.5% Java 41.3% Shell 2.2% Groovy Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.x Switch branches/tags Branches Tags 1.x Nothing to show v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0-rc.1 Nothing to show New pull request Latest commit 57ac7a4 Feb 26, 2016 zsxwing Merge pull request #14 from szpak/patch-1 … Fix link to Maven Search Permalink Failed to load latest commit information. gradle Allow maven central automatic sync on travis publish Apr 10, 2015 src Fix getParameterTypes for groovy:indy versions Nov 2, 2015 .gitignore Upgrade to Nebula Build Aug 29, 2014 .travis.yml Allow maven central automatic sync on travis publish Apr 10, 2015 CONTRIBUTING.md Upgrade to Nebula Build Aug 29, 2014 LICENSE Upgrade to Nebula Build Aug 29, 2014 README.md Fix link to Maven Search Feb 26, 2016 build.gradle copy over the travis configuration from RxJava to enable triggering a… Mar 3, 2015 gradle.properties copy over the travis configuration from RxJava to enable triggering a… Mar 3, 2015 gradlew Upgrade to Nebula Build Aug 29, 2014 gradlew.bat Bump to 2.2 Dec 13, 2014 settings.gradle Upgrade to Nebula Build Aug 29, 2014 README.md RxGroovy: Reactive Extensions for Groovy This is a Groovy adapter to RxJava. This adaptor allows 'groovy.lang.Closure' functions to be used and RxJava will know how to invoke them. This enables code such as:   Observable.just(""one"", ""two"", ""three"")     .take(2)      .subscribe({arg -> println(arg)}) Master Build Status Communication Since RxGroovy is part of the RxJava family the communication channels are similar: Google Group: RxJava Twitter: @RxJava GitHub Issues Versioning RxGroovy 1.0.x is based on RxJava 1.0.x. As of 1.0.0 semantic versioning will be used. Full Documentation RxJava: Wiki Javadoc Binaries For version 1.x: Binaries and dependency information for Maven, Ivy, Gradle and others can be found at https://search.maven.org. Example for Maven: <dependency>     <groupId>io.reactivex</groupId>     <artifactId>rxgroovy</artifactId>     <version>x.y.z</version> </dependency> and for Ivy: <dependency org=""io.reactivex"" name=""rxgroovy"" rev=""x.y.z"" /> and for Gradle: compile 'io.reactivex:rxgroovy:x.y.z' Build To build: $ git clone git@github.com:ReactiveX/RxGroovy.git $ cd RxGroovy/ $ ./gradlew build  Futher details on building can be found on the RxJava Getting Started page of the wiki. Bugs and Feedback For bugs, questions and discussions please use the Github Issues. LICENSE Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ReactiveX/RxGroovy"	"RxJava bindings for Groovy"	"true"
"Concurrency"	"Vertx"	"http://vertx.io/"	"Vert.x is a lightweight, high performance application platform for the JVM"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"472"	"98"	"542"	"GitHub - vert-x3/vertx-examples Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 98 Star 472 Fork 542 vert-x3/vertx-examples Code Issues 8 Pull requests 1 Pulse Graphs No description or website provided. 649 commits 14 branches 7 releases 38 contributors Java 40.2% JavaScript 19.9% HTML 16.1% Groovy 7.1% Ruby 6.9% CSS 6.1% Other 3.7% Java JavaScript HTML Groovy Ruby CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.1.0-SNAPSHOT 3.1.0-staging 3.2.0-SNAPSHOT 3.2.0-staging 3.2.1-SNAPSHOT 3.2.1-staging 3.3.0-SNAPSHOT 3.3.0-staging 3.3.0.CR1 3.3.2 codetrans-config master sync vertx-sync Nothing to show 3.3.2 3.3.0 3.2.1 3.2.0 3.0.0 3.0.0-milestone4 3.0.0-milestone3 Nothing to show New pull request Latest commit f3a65b9 Jul 12, 2016 cescoffier Bump version to 3.3.2 Permalink Failed to load latest commit information. amqp-bridge-examples Bump version to 3.3.2 Jul 10, 2016 camel-bridge-examples Bump version to 3.3.2 Jul 10, 2016 ceylon Cleanup Jun 24, 2016 core-examples Bump version to 3.3.2 Jul 10, 2016 docker-examples Bump version to 3.3.2 Jul 12, 2016 examples-utils Bump version to 3.3.2 Jul 10, 2016 fatjar-examples Bump version to 3.3.2 Jul 12, 2016 gradle-redeploy Bump version to 3.3.2 Jul 12, 2016 gradle-simplest Bump version to 3.3.2 Jul 12, 2016 gradle-verticles Bump version to 3.3.2 Jul 12, 2016 heroku-example Bump version to 3.3.2 Jul 10, 2016 ignite-examples Bump version to 3.3.2 Jul 10, 2016 jca-examples Bump version to 3.3.2 Jul 10, 2016 jdbc-examples Bump version to 3.3.2 Jul 10, 2016 jgroups-examples Bump version to 3.3.2 Jul 10, 2016 kotlin-example Bump version to 3.3.2 Jul 12, 2016 mail-examples Bump version to 3.3.2 Jul 12, 2016 maven-service-factory-examples update version of the verticle to deploy Jul 10, 2016 maven-simplest Bump version to 3.3.2 Jul 10, 2016 maven-verticles Bump version to 3.3.2 Jul 10, 2016 metrics-examples Bump version to 3.3.2 Jul 10, 2016 mongo-examples Bump version to 3.3.2 Jul 10, 2016 openshift2-example Bump version to 3.3.2 Jul 10, 2016 openshift3-examples Bump version to 3.3.2 Jul 12, 2016 osgi-examples Bump version to 3.3.2 Jul 10, 2016 redis-examples Bump version to 3.3.2 Jul 10, 2016 rx-examples Bump version to 3.3.2 Jul 10, 2016 service-proxy-examples Bump version to 3.3.2 Jul 12, 2016 shell-examples Bump version to 3.3.2 Jul 10, 2016 spring-examples Bump version to 3.3.2 Jul 10, 2016 sync-examples Bump version to 3.3.2 Jul 10, 2016 unit-examples Bump version to 3.3.2 Jul 10, 2016 web-examples Bump version to 3.3.2 Jul 12, 2016 .gitignore Remove binaries file Jun 6, 2016 LICENSE.txt Create LICENSE.txt Jun 21, 2016 Procfile Bump version Jun 23, 2016 README.adoc Fix #138 Jul 6, 2016 app.json Added app.json and Procfile to work from root Nov 13, 2015 pom.xml Bump version to 3.3.2 Jul 10, 2016 README.adoc Vert.x examples This repository contains a range of examples so you can get up and running easily with Vert.x. Maven users Start with the simplest Maven example to show you how setup a simple Vert.x project that uses Maven. You need to have Java 8 installed and set the JAVA_HOME environment variable to point to your Java 8 installation. Use that as a template for setting up a Maven project with Vert.x. Progress to the simple Maven verticle example to show you how to deploy your code as verticles in a Maven project. Also check Maven verticles examples to show how you can use Maven with Groovy, Ruby and JavaScript verticles. Want to start right away, open the first example in Eclipse Che: Gradle users Start with the simplest Gradle example to show you how setup a simple Vert.x project that uses Gradle. Use that as a template for setting up a Gradle project with Vert.x. Progress to the simple Gradle verticle example to show you how to deploy your code as verticles in a Gradle project Neither Maven nor Gradle users That’s fine too :) You can run most of the examples at the command line using vertx run if you have Vert.x installed (see below). Some examples need examples-utils You may find examples that need examples-utils. You need to build it from link:examples-utils: git clone https://github.com/vert-x3/vertx-examples.git cd vertx-examples cd examples-utils mvn clean install The examples The examples demonstrate how to use all different bits of Vert.x including Vert.x core, Vert.x-Web and various other services and features. Most of the examples have been written as verticles. For more information on verticles please consult the Vert.x core manual. Using verticles allows you to scale and run your code from the command line more easily, but if you prefer to embed, the exact same code in the verticles can also be run embedded if you prefer. It’s really up to you. Verticles are entirely optional in Vert.x. Different languages Most of the examples are available in all the languages that Vert.x supports. You’ll find the examples for the relevant language in a directory src/main/${lang} where lang is an identifier for the language, e.g. java, js, ruby etc. For example you’ll find the Vert.x core Java examples in core-examples/src/main/java and you’ll find the Vert.x core JavaScript examples in core-examples/src/main/js Note All the non-Java examples are automatically generated from the Java examples using our magic code translator. Running the examples Running in your IDE Most of the Java examples can be run directly in your IDE (if you have one!). We provide a main() method in most of the example classes which allows you to conveniently run them directly in your IDE. Just right click the main method or class in your IDE and run as…​ application (supported by all major IDEs). Running at the command line If vertx is installed you can also run any verticle directly on the command line. This way of working may be of interest to you if you don’t want to use Maven or Gradle or perhaps you don’t use an IDE. Or perhaps you’re just a command line kind of person. If you’re coming from using other platforms such as Node.js you might want to work this way. You can think of the vertx command as a bit like the node command in Node.js. Instructions for installing Vert.x are in the next section. Once Vert.x is installed, to run an example, just cd to the example directory and type vertx run followed by the filename of the verticle. For example cd core-examples/src/main/java/io/vertx/example/core vertx run EchoServer.java  cd core-examples/src/main/js/echo vertx run echo_server.js Yes! You can run Java source files directly using Vert.x (no compilation required). Installing Vert.x Note This is only necessary if you want to run Vert.x at the command line. If you’d prefer to work with Maven or Gradle projects then you don’t need to pre-install Vert.x - you just let Maven/Gradle pull in the Vert.x dependencies into your project as you would with any dependency. Pre-requisites: You will need to have Java 8 JDK installed. Download a Vert.x 3 distribution Unzip it somewhere on your disk (e.g. in your home directory) Set your PATH environment variable to include the installation directory Test the install by typing vertx -version. On the download page, you will find several distributions. Each distribution has a different set of components: Min: The min distribution contains only Vert.x Core, the support of the different languages, and the Hazelcast clustering. Full: The full distribution contains all the components of the Vert.x stack. It includes Vert.x web and the different data access technologies. Vert.x core examples The Vert.x core examples contains a wide range of examples using just Vert.x Core. Vert.x-Web examples Vert.x-Web is a toolkit for building web applications using Vert.x The Vert.x-Web examples contains a wide range of examples using Vert.x-Web Vertx unit examples Vertx-unit is a toolkit for writing asynchronous tests. We include some examples of how to use this tool to test your Vert.x (or other asynchronous) applications. The Vert.x Unit examples shows how to use Vert.x Unit. Mail examples The Vert.x Mail examples contains a few examples using Vert.x Mail The mail examples show different ways to create the mail message and send it via tls, ssl etc. The examples either use localhost:25 to send a mail or use host mail.example.com. To actually run the examples you will have to change the mail server and the user credentials in the MailLogin example. Maven Service Factory examples The Vert.x Maven service factory examples shows how to package a verticle that can be deployed using the Maven Service Factory. Such a deployment is also demonstrated using either the command line or the api. Service Proxy Examples The Vert.x Service Proxy examples contains an example of service proxy usage. It depicts how a service provider can be implemented and how the published service can be consumed. OSGi Examples The Vert.x OSGi examples contains a few examples using Vert.x in an OSGi context. Docker examples The Vert.x Docker examples shows how to deploy Vert.x application in Docker containers. It also contains an example of application that can be deployed on Fabric8. Openshift & Kubernetes examples The Vert.x OpenShift 2 example shows how to deploy Vert.x application to OpenShift 2 following the two proposed approaches: using the DIY cartridge or the vert.x 3 cartridge. The Vert.x OpenShift 3 examples shows how to deploy Vert.x applications on Openshift 3 and Kubernetes. It also demonstrates clustering and service discovery. Spring Examples The Vert.x Spring Examples shows how vert.x application can be integrated inside a Spring ecosystem. Redis example The Vert.x Redis Example shows how you can interact with Redis using the vert.x redis client. Mongo example The Vert.x Mongo Example shows how you can interact with MongoDB using the vert.x mongo client. JDBC example The Vert.x JDBC Examples shows how you can interact JDBC Databases using the vert.x JDBC client. JCA example The Vert.x JCA Example project provides a JEE compliant application that enables to you deploy the application into a [Wildfly](http://wildfly.org) application server. While simple in implementation, the JCA examples provides a good point of departure for your own development. AMQP Bridge examples The Vert.x AMQP Bridge Examples show how you can interact with AMQP 1.0 servers using the Vert.x AMQP Bridge. Camel Bridge examples The Vert.x Camel Bridge Examples show how you can use Apache Camel routes from the event bus. Vert.x fatjar examples The Vert.x fatjar Examples show how you can build fatjar with Maven or Gradle. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vert-x3/vertx-examples"	"Vert.x is a lightweight, high performance application platform for the JVM"	"true"
"Code Analysis"	"CodeNarc"	"http://codenarc.sourceforge.net/"	"Static analysis tool for Groovy"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CodeNarc -      Last Published: 02 Apr 2016  | Version: 0.25.2 General Home Downloads GitHub Project SourceForge Project Running Ant Task Usage Command-Line Run as a Test Other Tools/Frameworks Using Creating a RuleSet Creating a Rule Configuring Rules Starter RuleSet (All) Report Types HTML Report Sortable HTML Report XML Report Text and IDE Reports Baseline Report Sample Reports Sample HTML Report Sample Sortable Report Sample XML Report Rules Rule Index Basic Rules Braces Rules Concurrency Rules Convention Rules Design Rules DRY Rules Enhanced Rules Exceptions Rules Formatting Rules Generic Rules Grails Rules Groovyism Rules Imports Rules JDBC Rules JUnit Rules Logging Rules Naming Rules Size/Complexity Rules Security Rules Serialization Rules Unnecessary Rules Unused Rules Developing Developer Guide Project Documentation Project Information Static Analysis for Groovy: Less Bugs, Better Code CodeNarc analyzes Groovy code for defects, bad practices, inconsistencies, style issues and more. A flexible framework for rules, rulesets and custom rules means it's easy to configure CodeNarc to fit into your project. Build tool, framework support, and report generation are all enterprise ready. CodeNarc Rules CodeNarc triggers violations based on rules. Click the links to the left to view the index of all rules, or individual rule categories (rulesets), such as the basic, or concurrency rules. Or you can create your own ruleset; see how easy it is in this screencast. Get 0.25.2 Running CodeNarc Run CodeNarc with the Ant Task, the command-line runner, or as part of your test suite. Also, plugins exist for Maven, Gradle, Grails, Griffon, Sonar and Hudson. See our Integration page for more details. Reports come in HTML, XML, or text format. Take a look at a Sample CodeNarc HTML Report, or a Sample CodeNarc XML Report. Requirements CodeNarc requires: Groovy version 2.1 Java 1.6 or later Log4J 1.2.13 or later on the classpath Get it from Maven2 For projects built using Maven, CodeNarc is available from the Maven Central Repository groupId = org.codenarc artifactId = CodeNarc Inspirations We're inspired by the wonderful PMD and Checkstyle Java static analysis tools, as well as the extensive Groovy inspections performed by IntelliJ IDEA. Copyright © 2016. All Rights Reserved."	"null"	"null"	"Static analysis tool for Groovy"	"true"
"Transpilers"	"Grooscript"	"https://github.com/chiquitinxx/grooscript"	"Converts your Groovy code to Javascript"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"152"	"24"	"15"	"GitHub - chiquitinxx/grooscript: Converts your Groovy code to Javascript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 152 Fork 15 chiquitinxx/grooscript Code Issues 5 Pull requests 0 Pulse Graphs Converts your Groovy code to Javascript http://grooscript.org 689 commits 3 branches 30 releases Fetching contributors Groovy 81.3% JavaScript 17.2% Java 1.5% Groovy JavaScript Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master packages Nothing to show v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.2 v1.1.1 v1.1.0 v1.0.2 v1.0.1 v1.0.0 v1.0.0-rc-2 v0.6.3 v0.6.2 v0.6 v0.5.2 v0.5.1 v0.5 v0.4.5 v0.4.4 v0.4.2 v0.4.1 v0.4 v0.3 v0.2.4 0.4.1 0.3.1 0.2.2 0.2.1 0.2 0.1 Nothing to show New pull request Latest commit 1d41a81 Jul 4, 2016 chiquitinxx committed on GitHub Update README.adoc Permalink Failed to load latest commit information. doc Support @TailRecursive ast Oct 22, 2015 gradle Upgrade to gradle 2.14 Jun 14, 2016 npm Version 1.2.3 Feb 23, 2016 src Merge pull request #55 from ulrichenslin/master Jul 4, 2016 .gitignore Add libraries to include in bower Feb 1, 2015 .travis.yml Add coveralls Feb 9, 2015 LICENSE.txt License info in source files Aug 23, 2015 NOTICE.txt Version 0.6 labels Sep 18, 2014 README.adoc Update README.adoc Jul 4, 2016 appveyor.yml Update appveyor.yml Jan 19, 2015 bower.json Version 1.2.3 Feb 23, 2016 build.gradle Upgrade to gradle 2.14 Jun 14, 2016 gradlew Upgrade groovy dependencies and gradle Jun 8, 2016 gradlew.bat Upgrade groovy dependencies and gradle Jun 7, 2016 gulpfile.js Remove require js tests from main build Feb 9, 2015 package.json Upgrade javascript dependencies Mar 31, 2016 settings.gradle Upgrade to groovy 2.4.5 and divide gradle build file Sep 30, 2015 README.adoc grooscript Converts your Groovy or Java code to JavaScript(Groovy 2.x to Javascript ECMAScript 5). You need groovy jar greater than 2.0 to make conversions. For more information about the project, see grooscript.org Not a full groovy to javascript conversion. Some groovy and java features not supported, check documentation for more info. Converted code, needs grooscript.js to run. grooscript.js inside the jar in META-INF/resources for servlet 3.0 support. Also a Node.js npm module imports it. Try online conversions here. Can convert .java and .groovy files or a text fragment as: @Grab('org.grooscript:grooscript:1.2.3')  import org.grooscript.GrooScript  def result = GrooScript.convert '''     def sayHello = { println ""Hello ${it}!"" }     ['Groovy','JavaScript','GrooScript'].each sayHello'''  println result Latest Versions The latest release version is 1.2.3, released on 23-02-2016. The current development version is 1.2.4-SNAPSHOT. Releases are available from Maven Central and Bintray. Build Using gradle wrapper, only Groovy dependencies in the project. You need JDK 1.7+ to build and test the project. First time, you have to install Node.js stuff, maybe you have to run as administrator, do it with: ./gradlew npmInstall Create IntelliJ IDEA project: ./gradlew idea Test project: ./gradlew test Build project: ./gradlew build Tools Grails 2 plugin Grails 3 plugin Gradle plugin Npmjs package Demos Browser and node.js demos Spring boot and gradle plugin in this books demo Grails 3 websockets circles demo Grails 3.1 with gradle and grails plugins in action License Grooscript licensed under the terms of the Apache License, Version 2.0 Contributors Jorge Franco Serge Tarkovski Abel Salgado Alberto Navarrete Jonatas Emidio yellowsnow ulrichenslin Contact Twitter: @grooscript Email: grooscript@gmail.com Please all feedback welcome, thank you! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chiquitinxx/grooscript"	"Converts your Groovy code to Javascript"	"true"
"Static Web"	"Grain"	"https://github.com/sysgears/grain"	"Static Web Site Building Framework For Groovy"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"118"	"36"	"26"	"GitHub - sysgears/grain: Static Web Site Building Framework For Groovy Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 118 Fork 26 sysgears/grain Code Issues 2 Pull requests 0 Pulse Graphs Static Web Site Building Framework For Groovy 425 commits 4 branches 10 releases Fetching contributors Groovy 91.5% HTML 5.9% Java 2.6% Groovy HTML Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.5.x 0.6.x master v8js Nothing to show v0.6.6 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.2 v0.5.1 v0.5.0 Nothing to show New pull request Latest commit b0dd19e May 26, 2016 evgenijolshanskij Updated Grain docs. … Signed-off-by: Evgenij Olshanskij <evgenij.olshanskij@sysgears.com> Permalink Failed to load latest commit information. docs Updated Grain docs. May 26, 2016 gradle/wrapper Upgrade to Gradle Wrapper 1.8. Add exclude dirs for IntelliJ module i… Oct 15, 2013 src Merged 'master'. May 11, 2016 tools Improved error handling for the Pygments highlighting. Mar 14, 2016 .gitattributes Preserve line endings in scripts for cygwin Dec 19, 2013 .gitignore Removed bin from gitignore list Oct 16, 2013 CHANGELOG.md Added the version 0.6.6 to the project changelog. Aug 27, 2015 LICENSE Transfer repository to github Oct 11, 2013 NOTICE Transfer repository to github Oct 11, 2013 README.md Added the banner image to the README.md Oct 2, 2015 TODO.md Remove Mentos IPC todo item refactoring, because we have implemented … Feb 5, 2014 banner.png Added the new banner image. Oct 6, 2015 build.gradle Merged 'master'. May 11, 2016 gradlew Transfer repository to github Oct 11, 2013 gradlew.bat Transfer repository to github Oct 11, 2013 settings.gradle Transfer repository to github Oct 11, 2013 README.md Grain is a lightweight and yet powerful static website generator for Groovy which purpose is to make demanding site implementation intuitive and enjoyable. Grain framework is equally well-suited for any static website, whether it is a complex company site or a neat blog. The framework applies simple website building concepts and allows to develop rapidly by making and seeing changes on the fly. Getting Started For further information please visit Grain project website. Grain Community There are many ways of getting involved: Mailing List - reach us or ask the community for help Issue Tracker - make Grain better by suggesting improvements Twitter - keep up with the latest Grain news and announcements Contributing Any person or company wanting to contribute to Grain Framework should follow the following rules in order to their contribution being accepted. Sign your Work We require that all contributors ""sign-off"" on their commits. This certifies that the contribution is your original work, or you have rights to submit it under the same license, or a compatible license. Any contribution which contains commits that are not Signed-Off will not be accepted. To sign off on a commit you simply use the --signoff (or -s) option when committing your changes: $ git commit -s -m ""Adding a new widget driver for cogs.""  This will append the following to your commit message: Signed-off-by: Your Name <your@email.com>  By doing this you certify the below: Developer's Certificate of Origin 1.1  If you wish to add the signoff to the commit message on your every commit without the need to specify -s or --signoff, rename .git/hooks/commit-msg.sample to .git/hooks/commit-msg and uncomment the lines: SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p') grep -qs ""^$SOB"" ""$1"" || echo ""$SOB"" >> ""$1"" Developer's Certificate of Origin To help track the author of a patch as well as the submission chain, and be clear that the developer has authority to submit a patch for inclusion into this project please sign off your work. The sign off certifies the following: Developer's Certificate of Origin 1.1  By making a contribution to the project, I certify that:  (a) The contribution was created in whole or in part by me and I     have the right to submit it under the open source license     indicated in the file; or  (b) The contribution is based upon previous work that, to the best     of my knowledge, is covered under an appropriate open source     license and I have the right under that license to submit that     work with modifications, whether created in whole or in part     by me, under the same open source license (unless I am     permitted to submit under a different license), as indicated     in the file; or  (c) The contribution was provided directly to me by some other     person who certified (a), (b) or (c) and I have not modified     it.  (d) I understand and agree that this project and the contribution     are public and that a record of the contribution (including all     personal information I submit with it, including my sign-off) is     maintained indefinitely and may be redistributed consistent with     this project or the open source license(s) involved.  (e) I hereby grant to the project, SysGears, LLC and its successors;      and recipients of software distributed by the Project a perpetual,     worldwide, non-exclusive, no-charge, royalty-free, irrevocable     copyright license to reproduce, modify, prepare derivative works of,     publicly display, publicly perform, sublicense, and distribute this     contribution and such modifications and derivative works consistent     with this Project, the open source license indicated in the previous     work or other appropriate open source license specified by the Project     and approved by the Open Source Initiative(OSI)     at http://www.opensource.org.  License Grain is licensed under the terms of the Apache License, Version 2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sysgears/grain"	"Static Web Site Building Framework For Groovy"	"true"
"Static Web"	"Gaiden"	"https://github.com/kobo/gaiden"	"Gaiden is a tool that makes it easy to create documentation with Markdown."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"107"	"17"	"10"	"GitHub - kobo/gaiden: Gaiden is a tool that makes it easy to create documentation with Markdown. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 107 Fork 10 kobo/gaiden Code Issues 8 Pull requests 1 Pulse Graphs Gaiden is a tool that makes it easy to create documentation with Markdown. 320 commits 3 branches 5 releases Fetching contributors Groovy 39.8% HTML 36.9% Java 9.7% CSS 7.7% JavaScript 5.9% Groovy HTML Java CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master print-css Nothing to show v1.1 v1.0 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit 91ef382 Jun 6, 2016 yamkazu Update version to 1.1 Permalink Failed to load latest commit information. .idea Ignore UnnecessaryElseStatement inspection Oct 15, 2013 doc Fix the link of Markdown Syntax Guide Nov 24, 2014 gaiden-core Fix #36 Resources are looked up outside of the project directory Mar 5, 2015 gaiden-wrapper Update missing License Oct 29, 2014 gradle Update missing License Oct 29, 2014 src Update missing License Oct 29, 2014 .gitignore Add first cut of document Sep 26, 2014 .travis.yml Tweak travis settings Sep 19, 2014 LICENSE Update LICENSE text Oct 29, 2014 NOTICE Add LICENSE and NOTICE Sep 25, 2013 README.md Update README Oct 29, 2014 build.gradle Update version to 1.1 Jun 6, 2016 codenarc.groovy Fix violations Sep 27, 2013 gradlew installed gradle wrapper Jun 11, 2013 gradlew.bat installed gradle wrapper Jun 11, 2013 settings.gradle Update missing License Oct 29, 2014 README.md Gaiden Gaiden is a tool that makes it easy to create documentation with Markdown. The Groovy language is the base of the tool. Documentation http://kobo.github.io/gaiden/ License Gaiden is licensed under the terms of the Apache License, Version 2.0 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kobo/gaiden"	"Gaiden is a tool that makes it easy to create documentation with Markdown."	"true"
"Language Utilities"	"Functionalgroovy"	"https://github.com/mperry/functionalgroovy"	"Functional programming in Groovy"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"50"	"9"	"4"	"GitHub - mperry/functionalgroovy: Functional programming in Groovy Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 50 Fork 4 mperry/functionalgroovy Code Issues 23 Pull requests 0 Pulse Graphs Functional programming in Groovy 483 commits 3 branches 0 releases 3 contributors Groovy 97.2% Java 2.8% Groovy Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags java8 master trait Nothing to show Nothing to show New pull request Latest commit fb1e13f Aug 23, 2015 mperry Update to gradle 2.6 Permalink Failed to load latest commit information. base Added base submodule for typeclass dependencies not belonging in core Dec 29, 2014 consume Added file listing and exception handling test Sep 1, 2014 core Upgrade to Groovy 2.4.4, FunctionalJava 4.4 Jul 21, 2015 demo Added file listing and exception handling test Aug 31, 2014 gradle/wrapper Update to gradle 2.6 Aug 23, 2015 java8 Use JDK 8 compiler, attempt at Travis CI build fix Jul 19, 2015 kind Initial attempt at free monad Nov 30, 2014 main Upgrade to Groovy 2.4.4, FunctionalJava 4.4 Jul 21, 2015 sandbox Tested groovy coercion of a value Sep 10, 2014 test-extensions Upgrade to Groovy 2.4.4, FunctionalJava 4.4 Jul 21, 2015 typeclass Added base submodule for typeclass dependencies not belonging in core Dec 28, 2014 .gitattributes Add eol=lf for text files to .gitattributes Jul 4, 2013 .gitignore Added iml and out files to .gitignore Jun 11, 2013 .travis.yml Set Travis sudo to false Jul 19, 2015 README.md Added link to Travis CI on github home page Jul 19, 2015 build.gradle Added Gradle Nexus Staging Plugin Jul 22, 2015 gradle.properties Turn signing off by default May 12, 2014 gradlew Added execute permission to gradlew Jul 4, 2014 gradlew.bat Revert ""Removed Gradlew"" Jul 2, 2014 settings.gradle Added base submodule for typeclass dependencies not belonging in core Dec 28, 2014 README.md Functional Groovy Functional Groovy is a library for doing functional programming (FP) in Groovy. It is a Groovy extension module for Functional Java (FJ), adding Groovy idioms and new FP constructs in Groovy. Features includes: FunctionalJava based Enhances FunctionalJava for Groovy as a Groovy extension module Groovy Quickcheck style property testing (specification based testing) Monad library using a minimal monad implementation (unit/flatMap) Monadic functions added to the standard Java List Monad comprehensions (dynamically typed) Lenses Reader, Writer and State monads A simple IO type Y Combinator The project has some cloud build servers I used to experiment with including: Cloudbees Jenkins Build Sonatype Functional Groovy Artifacts Travis CI Build I have written an initial blog post on Groovy Null Handling using Bind, Comprehensions and Lift covering: some introductory material on functional programming in Groovy how to begin using the Functional Groovy library handling nulls by binding through the Option type, monadic comprehensions and monadic lifting The full list of related posts are: Groovy Null Handling Using Bind, Comprehensions and Lift Specification Based Testing Referentially Transparent Input/Output in Groovy Folds and Unfolds To start using the library add the dependency com.github.mperry:functionalgroovy-main:0.5.1-SNAPSHOT to your Gradle project. A simple test script to get going (test.groovy) is: @GrabResolver('https://oss.sonatype.org/content/groups/public') @Grab('com.github.mperry:functionalgroovy-core:0.5.1-SNAPSHOT') @Grab('org.functionaljava:functionaljava:4.1')  import com.github.mperry.fg.*  1.to(5).each {     println it } Run this script using groovy test.groovy. This project uses: JDK 8 Gradle 1.11 Groovy 2.3.2 Functional Java 4.1 Intellij Community Edition 13.1 I have added a list of open issues so feel free to contribute. Some ways of contributing are: adding new functionality adding tests adding FP in Groovy examples adding FunctionalGroovy usage examples Functional Groovy is divided into four components: core, main, demo, java8 and consume. Core enhances Functional Java with Groovy idioms Main adds new functionality Demo includes examples of FP in Groovy and usage of this library Java8 includes enhancements related to Java 8 types (e.g. Optional). Consume shows how to include FunctionalGroovy in your project Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mperry/functionalgroovy"	"Functional programming in Groovy"	"true"
"Language Utilities"	"Groovy-stream"	"https://github.com/timyates/groovy-stream"	"A collection of classes to give a fluent builder for Streams (Lazy Groovy Generators)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"63"	"9"	"9"	"GitHub - timyates/groovy-stream: A collection of classes to give a fluent builder for Streams (Lazy Groovy Generators) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 63 Fork 9 timyates/groovy-stream Code Issues 4 Pull requests 0 Pulse Graphs A collection of classes to give a fluent builder for Streams (Lazy Groovy Generators) http://timyates.github.io/groovy-stream/javadoc/index.html?groovy/stream/Stream.html 268 commits 3 branches 16 releases Fetching contributors Java 54.2% Groovy 33.6% CSS 12.2% Java Groovy CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags PotentialStreamCloseMethod gh-pages master Nothing to show v0.8.1 v0.8.0 v0.7.4 v0.7.2 v0.7.1 v0.7.0 v0.6.2 v0.6.1 v0.6 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5 v0.4 v0.2 Nothing to show New pull request Latest commit 24e8c75 Dec 23, 2014 Tim Yates Parameter rename on repeat Permalink Failed to load latest commit information. docs Fixed typos in index.html Mar 11, 2014 gradle/wrapper Up to latest 2.3 groovy and 2.2.1 gradle wrapper Dec 4, 2014 src Parameter rename on repeat Dec 23, 2014 .gitignore Up to latest 2.3 groovy and 2.2.1 gradle wrapper Dec 4, 2014 .travis.yml Merged 0.8 development branch Mar 10, 2014 LICENSE.txt Added Apache 2 License Jan 20, 2013 README.md Added repeat method to Stream, up to 0.9.0 Dec 23, 2014 build.gradle Added repeat method to Stream, up to 0.9.0 Dec 23, 2014 gradlew Rewrite, to see if I can get it nicer (and allow multiple filters/maps) Aug 21, 2013 gradlew.bat Added Gradle wrapper Jun 8, 2012 README.md A Lazy Groovy Generator. Latest Version 0.9.0 Documentation is embarrassingly out of date... Best place may be the Javadoc (has compiled examples in it) http://timyates.github.io/groovy-stream/javadoc/index.html?groovy/stream/Stream.html Out of date usage, news, etc. can be found here: http://timyates.github.com/groovy-stream/ or http://timyates.github.com/groovy-stream/main.html The first casualty of lack-of-time is documentation :-( Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/timyates/groovy-stream"	"A collection of classes to give a fluent builder for Streams (Lazy Groovy Generators)"	"true"
"Language Utilities"	"Flipside"	"https://github.com/johnnywey/flipside"	"Simple Groovy options library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"21"	"3"	"1"	"GitHub - johnnywey/flipside: Simple Groovy options library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 21 Fork 1 johnnywey/flipside Code Issues 3 Pull requests 0 Pulse Graphs Simple Groovy options library 59 commits 1 branch 0 releases Fetching contributors Groovy 60.8% Java 39.2% Groovy Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 0f53f9e Feb 15, 2016 johnnywey Bump to .22 Permalink Failed to load latest commit information. gradle/wrapper Added HTTP 405 and updated Gradle version. Fixes #5. Nov 19, 2015 src Define the 'Groovy Truth' of Failables, Markers, and Boxes. Feb 4, 2016 .gitignore Ignore properties Feb 7, 2014 .travis.yml Do not need to build the whole thing Feb 8, 2014 LICENSE.txt Add Matcher section in readme and specify license Feb 7, 2014 README.md Bump to .22 Feb 15, 2016 build.gradle Bump to .22 Feb 15, 2016 gradlew Added HTTP 405 and updated Gradle version. Fixes #5. Nov 19, 2015 gradlew.bat First commit. Feb 4, 2014 README.md                ______ _ _       _____ _     _                                   |  ___| (_)     /  ___(_)   | |                     ______ ______| |_  | |_ _ __ \ `--. _  __| | ___ ______ ______ |______|______|  _| | | | '_ \ `--. \ |/ _` |/ _ \______|______|               | |   | | | |_) /\__/ / | (_| |  __/                             \_|   |_|_| .__/\____/|_|\__,_|\___|                                       | |                                                              |_|                                        Flipside Flipside is a very simple Groovy / Java options library. It includes three distinct kinds of options and a Matcher. That's it. Easy peasy. I built it because I especially missed these idioms when transitioning from Scala back to Java / Groovy. Install You can install Flipside from the OSS Sonatype Maven repo https://oss.sonatype.org/content/repositories/snapshots/ You will probably need to manually exclude the Groovy dependency. Maven: <dependency>     <groupId>com.johnnywey</groupId>     <artifactId>flipside</artifactId>     <version>0.1.22-SNAPSHOT</version>     <exclusions>      <exclusion>        <groupId>org.codehaus.groovy</groupId>        <artifactId>groovy-all</artifactId>      </exclusion>    </exclusions>     </dependency> Gradle: compile('com.johnnywey:flipside:0.1.22-SNAPSHOT') {   exclude module: 'groovy-all' } Grails (versions < 3. For versions >= 3, see Gradle syntax above): compile('com.johnnywey:flipside:0.1.22-SNAPSHOT') { excludes 'groovy-all' } All files are built for Java versions >= 1.6. Fail Enum Two of the three options take the Fail enum as part of their constructor params. This is to indicate what went wrong and to try and map the failure back to an HTTP response code. For now, these are hard-coded. In the future, they will be an interface that will allow you to drop in your own failure types. Option Types First of all, if you want to know more about Options, start here. There are three different types of Options in Flipside: A Box (either Some or None) A Marker (either Worked or DidNotWork) A Failable (either Success or Failed) They each have distinct uses and similar interfaces. Box A Box is either empty or full. It's designed for operations that wouldn't necessarily ""fail"" if a null value were returned but get around passing null or a value: import static com.johnnywey.flipside.Boxes.*  def full = Some(""A string!"") // Creates a box containing a string value def empty = None() // Creates an empty box  assert empty.isEmpty() assert !full.isEmpty()  assert ""A string!"" == full.get() empty.get() // will throw an UnsupportedOperationException Marker A Marker is designed for operations that result in side effects such as writing some tracking information in a database or uploading a photo to a back-end image processing tier. You wouldn't need a return type if things go well but, if things fail, you'd probably want some indication as to why. import static com.johnnywey.flipside.Markers.* import com.johnnywey.flipside.failable.Fail  def failed = DidNotWork(Fail.NOT_FOUND, ""The thing was not found"") // Creates a new one indicating the operation failed and why def worked = Worked() // Creates one indicating the operation succeeded  assert !failed.isSuccess() assert worked.isSuccess()  assert ""The thing was not found"" == failed.getDetail() assert Fail.NOT_FOUND == failed.getReason()  // these will throw an UnsupportedOperationException worked.getReason() worked.getDetail() Failable A Failable is similar to the Marker and is designed for operations that succeed with a value or fail with an error condition. When the operation succeeds, you can call .get() on the resulting object to get at the value. import static com.johnnywey.flipside.Failable.* import com.johnnywey.flipside.failable.Fail  def failed = Failed(Fail.NOT_FOUND, ""The thing was not found"") // Creates a new one indicating the operation failed and why def success = Succeeded(""It worked!"") // Creates one indicating the operation succeeded  assert !failed.isSuccess() assert success.isSuccess()  assert ""The thing was not found"" == failed.getDetail() assert Fail.NOT_FOUND == failed.getReason() failed.get() // will throw an FailableException with embedded details of the failure  assert success.get() == ""It worked!"" Matcher The Matcher is my attempt to replicate some of the Scala matching functionality using a Groovy DSL. While in many cases the Matcher works similarly to a Groovy switch statement, it becomes a lot more useful when combined with the existing Option classes. It supports a bunch of different types including literal values, data types and Options. When used with Options, the values are automatically unwrapped and injected into the respective handler functions. A simple type example: import static com.johnnywey.flipside.Matcher.match  def foundString = false match ""test"" on {     matches String, { foundString = true }     matches Integer, { foundString = false } }  assert foundString == true A literal value example: import static com.johnnywey.flipside.Matcher.match  def foundString = false def string = ""test""  // Should match the first Closure even though both would apply. match string on {     matches ""test"", { foundString = true }       matches String, { foundString = false } }  assert foundString == true To match boxes, use the match key words some and none. In a some condition, the value is automatically unboxed and injected into the handler function. import static com.johnnywey.flipside.Matcher.match import static com.johnnywey.flipside.Boxes.Some  def full = Some(""test"")  def result = match full on {     some { it } // In this case, the matcher will return the value of the box and set it to the implicit var 'it'     none { ""fail"" } // If the box were empty, we would get this value }  assert result == ""test"" To match Markers, use the match key words success and failure. In a success condition, the handler function is executed with no implicit value (as Markers do not have one). In a failure condition, it is set to the DidNotWork object for easy evaluation. import static com.johnnywey.flipside.Matcher.match import static com.johnnywey.flipside.Markers.Worked  def option_worked = Worked() def result_worked = null  match option_worked on {     failure { result_worked = null }     success { result_worked = ""worked!"" } // no values are injected here as a Marker contains none }  assert result_worked == ""worked!"" To match Failables, use the match key words success and failure. In a success condition, the handler function is executed with the value of it set to whatever is returned when .get() is called on the Success object. In a failure condition, it is set to the Failed object for easy evaluation. import static com.johnnywey.flipside.Matcher.match import static com.johnnywey.flipside.Markers.Failables.Succeeded  def option_worked = Succeeded(""worked!"") def result_worked = null  match option_worked on {     failure { result_worked = null }     success { result_worked = it } // 'it' is automatically set to the the value of 'option_worked.get()' }  assert result_worked == ""worked!"" To see the whole range of functionality, check out the MatcherSpec. License MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/johnnywey/flipside"	"Simple Groovy options library"	"true"
"Language Utilities"	"groovy-common-extensions"	"https://github.com/timyates/groovy-common-extensions"	"Lets you add things commonly useful to the Groovy language via the extension system"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"51"	"8"	"14"	"GitHub - timyates/groovy-common-extensions Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 51 Fork 14 timyates/groovy-common-extensions Code Issues 2 Pull requests 2 Pulse Graphs No description or website provided. 113 commits 1 branch 12 releases Fetching contributors Groovy 100.0% Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.5.7 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5 v0.4.1 v0.3 v0.2 0.4 Nothing to show New pull request Latest commit 49a6d26 Dec 23, 2014 Tim Yates Updated version in Grab in README Permalink Failed to load latest commit information. gradle/wrapper Dumb terminal for travis and Gradle 1.9 Nov 25, 2013 src Added a few more tests and options to toXml (closes #14) Dec 23, 2014 .gitignore NodeChild extension to go xml string to map through XmlSlurper Nov 20, 2012 .travis.yml Dumb terminal for travis and Gradle 1.9 Nov 25, 2013 LICENSE.txt Added Apache 2.0 License Dec 18, 2012 README.md Updated version in Grab in README Dec 23, 2014 build.gradle Up to v0.6.0 Dec 23, 2014 gradlew Up to gradle 1.3 Dec 18, 2012 gradlew.bat Initial commit Nov 6, 2012 README.md groovy-common-extensions Lets you add things I find commonly useful to the Groovy language via the extension system. Obviously requires at least Groovy 2.0.5 (so that the extension system exists) Usage: @Grab( 'com.bloidonia:groovy-common-extensions:0.6.0' )  and the following methods will be available to you: Current extensions: clamp static <T extends Comparable> T clamp( T self, T lower, T upper ) static <T extends Comparable> T clamp( T self, Range range ) { static Range clamp( Range self, Range range ) {  Lets you do: println 10.clamp(  1, 15 )    // 10 println 10.clamp(  1,  5 )    // 5 println 10.clamp( 12, 20 )    // 12 println 10.clamp( 12..20 )    // 12 println (3..20).clamp( 2..9 ) // 3..9  Works with any comparable: println 'a'.clamp( 'b', 'z' ) // b  Multi closure sort static Collection sort( Collection self, boolean mutate, Closure... closures )  Lets you do (example from here): List list = [   [id:0, firstName: 'Sachin', lastName: 'Tendulkar', age: 40 ],   [id:1, firstName: 'Sachin', lastName: 'Tendulkar', age: 103 ],   [id:2, firstName: 'Ajay', lastName: 'Tendulkar', age: 48 ],   [id:3, firstName: 'Virendra', lastName: 'Sehwag', age: 5 ],   [id:4, firstName: 'Virendra', lastName: 'Sehwag', age: 50 ],   [id:5, firstName: 'Sachin', lastName: 'Nayyar', age: 15 ] ]  // returns [2, 5, 0, 1, 3, 4] list.sort( false, { it.firstName }, { it.lastName }, { it.age } )*.id  Negative index take (with Lists) static List take( List self, int n )  Lets you safely grab the end of a list, as you can with take for the front println [1,2,3,4].take( -2 ) // [3,4]  If you pass a positive number, it delegates to the original DGM.take method println [1,2,3,4].take( 2 ) // [1,2]  withClosable static Object withClosable( Object self, Closure c ) {  Executes the closure (passing the delegate), and when finished it calls close on the delegate if the method exists. If it doesn't exist, it does nothing. Examples: // Create a FileWriter, close it when finished new FileWriter( '/tmp/d.txt' ).withClosable {   it.println 'd' }  // Create 3 FileWriters, close them all when done, and return // Closure result ('tim') to the rslt var def rslt = [ '/tmp/a.txt', '/tmp/b.txt', '/tmp/c.txt' ].collect {   new FileWriter( it ) }.withClosable { a, b, c ->   a.println 'a'   b.println 'b'   c.println 'c'   'tim' } assert rslt == 'tim'  // This works, but does nothing 'tim'.withClosable {   println it }  tap static Object tap( Object self, Closure c ) {  Taken from Ruby, the tap method executes the closure using the object as the delegate - internally, it just calls self.with c and then it returns self. This allows you to tap into a method chain: def m = (1..10)                         .tap { println ""original ${it}"" }                .findAll { it % 2 == 0 } .tap { println ""evens    ${it}"" }                .collect { it * it }     .tap { println ""squares  ${it}"" } // prints: //    original [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] //    evens    [2, 4, 6, 8, 10] //    squares  [4, 16, 36, 64, 100]  // and returns: assert m == [4, 16, 36, 64, 100]  zip and unzip static File zip ( File self ) static File zip ( File self, File destination ) static File zip ( File self, Closure<Boolean> filter ) static File zip ( File self, File destination, Closure<Boolean> filter )  static Collection<File> unzip ( File self ) static Collection<File> unzip ( File self, File destination ) static Collection<File> unzip ( File self, Closure<Boolean> filter ) static Collection<File> unzip ( File self, File destination, Closure<Boolean> filter )  Zips/unzips a single file or directory tree. If no destination is given, the target directory for the generated zip or extracted file(s) will be relative to the current file location. If a filter is specified, then each file is passed to the closure before it is handled. If the closure returns false, the file is skipped. Examples: // zips the directory tree and creates a 'tmp.zip' file in '/var' File zipFile = new File('/var/tmp/').zip()  // zips all *.txt files in the directory tree and creates a 'tmp.zip' file in '/var' File zipFile = new File('/var/tmp/').zip {   it.name.endsWith '.txt' }  // extracts the files to '/var/' Collection<File> extractedFiles = new File('/var/tmp.zip').unzip()  // zips the directory content and moves 'tmp.zip' to '/home/bill' File zipFile = new File('/var/tmp/').zip(new File('/home/bill/tmp.zip')  // extracts the files to '/home/bill/' Collection<File> extractedFiles = new File('/var/tmp.zip').unzip(new File('/home/bill'))  toMap functionality for NodeChild static Map toMap( NodeChild self ) static Map toMap( NodeChild self, String childKey )  Converts a NodeChild and its children to a Map. Child nodes are by default put inside a key _children, though this can be changed using the optional childKey parameter (if your xml contains _children nodes for example) Examples: def xmlstr = '<dan value=""a""><subnode><item value=""a""/></subnode></dan>' def xml = new XmlSlurper().parseText( xmlstr ) def map = xml.toMap()  assert map == [dan:[value:'a',_children:[[subnode:[_children:[[item:[value:'a']]]]]]]]  And with a childKey: def xmlstr = '<dan value=""a""><subnode><item value=""a""/></subnode></dan>' def xml = new XmlSlurper().parseText( xmlstr ) def map = xml.toMap( 'kids' )  assert map == [dan:[value:'a',kids:[[subnode:[kids:[[item:[value:'a']]]]]]]]  rand functionality for List and Iterator static <T> T rand( List<T> self ) static <T> List<T> rand( List<T> self, int n ) { static <T> List<T> rand( List<T> self, int n, boolean allowDuplicates ) { static <T> List<T> rand( List<T> self, int n, boolean allowDuplicates, Random r ) {  static <T> T rand( Iterator<T> self ) static <T> List<T> rand( Iterator<T> self, int n ) static <T> List<T> rand( Iterator<T> self, int n, boolean allowDuplicates ) static <T> List<T> rand( Iterator<T> self, int n, boolean allowDuplicates, Random r )  Randomly select an element from a list or iterator. The first form returns a single random element from the List or Iterator. The second form returns a List of n random elements from the List or Iterator (duplicates allowed) The third form allows you to specify no duplicates (by passing false as the third parameter) and returns a List The fourth form also returns a List and also allows you to set the Random object to be used in the processing. This allows tests to specify a seed so reproducability is assured. The returned list is of the same class as the input. If you ask for 0 items, you get an empty list returned. If you ask for more unique elements than there are items in the list, this throws an IllegalArgumentException When rand is called on an Iterator, the entire Iterator is consumed until hasNext() is false and the returned elements are chosen from all the items iterated over with uniform probability. Example: def list = [1, 2, 3, 4, 5] def randomInt = list.rand() assert randomInt in list  Extended merge functionality for ConfigObject static ConfigObject merge( Map self, Map other, Boolean sourcePrecedence )  Boolean sourcePrecedence specifies that the source ConfigObject should not have it's existing key/value pair overwritten by a merge with another ConfigObject Example:     def config1 = """"""         config {             a = 1             b = 2             c = 3         }     """"""     def config2 = """"""         config {             a = 2             b = 2         }     """"""      def configObject1 = new ConfigSlurper().parse(config1)     def configObject2 = new ConfigSlurper().parse(config2)     def merge = configObject2.merge(configObject1)      def configObject3 = new ConfigSlurper().parse(config1)     def configObject4 = new ConfigSlurper().parse(config2)     def mergeWithSourcePrecedence = configObject4.merge(configObject3,true)      // overwrote config2's value     assert merge.config.a == 1     // preserved config2's value     assert mergeWithSourcePrecedence.config.a == 2      // config2 inherited value from config1     assert merge.config.c == 3     // config2 inherited from config1     assert mergeWithSourcePrecedence.config.c == merge.config.c  Transposed Iterator for List of Lists static <T> Iterator<T> transposedIterator( List<List<T>> lists ) static <T> Iterator<T> transposedIterator( List<List<T>> lists, List<Integer> amounts )  Given a list of lists, ie: def a = [ 1..4, 'a'..'e' ]  you can (with Groovy) call a.transpose() ie: assert a.transpose() == [ [ 1,'a' ], [ 2,'b' ], [ 3,'c' ], [ 4,'d' ] ]  This new functionality returns an iterator, and you can specify how many reseults of each list to expect. So: // We need the collect as we want the values from the Iterator def b = a.transposedIterator().collect()  // Note we get the extraneous 'e' that is lost by transpose() assert b = [ 1, 'a', 2, 'b', 3, 'c', 4, 'd', 'e' ]  And (passing a list of amounts): // So we want 1 element of list 1 followed by 2 of list 2 (repeated till exhaustion) def c = a.transposedIterator( [ 1, 2 ] ).collect()  // Note we run out of list 2 after the 'e', so just get the last 4 from list 1 assert c = [ 1, 'a', 'b', 2, 'c', 'd', 3, 'e', 4 ]  Averages for collection of Numbers static <V extends Number> AverageStats<V> average( Collection<V> collection )  Given a collection of Numbers, ie: def a = 1..10  We can get the mean, median, variance and stdDev wrapped in an Immutable AverageStats class by simply calling: def stats = a.average()  assert stats.mean     == 5.5 assert stats.median   == 5.5 assert stats.variance == 8.25 assert String.format( '%.5g', avg.stdDev ) == '2.8723'  This is useful when we are assuming a collection of numbers is the same based on it's superficial criteria, ie given: def a = [1] * 50 + [100] * 50 def b = 1..100  It is easy using simple (bogus) stats to say they are very similar: // Both print: ""MIN 1 MAX 100 SIZE 100 MEAN 50.5"" println ""MIN ${a.min()} MAX ${a.max()} SIZE ${a.size()} MEAN ${a.sum() / 100}"" println ""MIN ${b.min()} MAX ${b.max()} SIZE ${b.size()} MEAN ${b.sum() / 100}""  However, the standard deviation shows that they are very different sequences of numbers: // prints: ""AverageStats( mean:50.5, median:50.5, variance:2450.25, stdDev:49.5 )"" println a.average() // prints: ""AverageStats( mean:50.5, median:50.5, variance:833.25, stdDev:28.86607004772212 )"" println b.average()  byte[].hexdump() static void hexdump( byte[] self, Writer writer, int idx, int len ) static void hexdump( byte[] self, int idx, int len ) static void hexdump( byte[] self, Writer writer, int idx ) static void hexdump( byte[] self, int idx ) static void hexdump( byte[] self, Writer writer ) static void hexdump( byte[] self )  Dumps a byte array out as hex in a readable form. You can also pass a Writer to print to this rather than System.out (the default) ie: calling: String output = new StringWriter().with { w ->     bytes.hexdump( w )     w.toString() }  Writes the following to output:             +--------------------------------------------------+             | 0  1  2  3  4  5  6  7   8  9  a  b  c  d  e  f  |  +----------+--------------------------------------------------+------------------+  | 00000000 | 48 65 6c 6c 6f 20 61 6e  64 20 77 65 6c 63 6f 6d | Hello and welcom |  | 00000010 | 65 20 74 6f 20 e2 98 85  20 47 72 6f 6f 76 79    | e to ... Groovy  |  +----------+--------------------------------------------------+------------------+  String.toXml static GPathResult toXml( String self ) { static GPathResult toXml( String self, boolean validating, boolean namespaceAware) static GPathResult toXml( String self, boolean validating, boolean namespaceAware, boolean allowDocTypeDeclaration) static GPathResult toXml( String self, SAXParser parser) static GPathResult toXml( String self, XMLReader reader)  Will pass any String through XmlSlurper with the specified constructor parameters, ie: assert '<xml><name>Tim</name></xml>'.toXml().name == 'Tim'  String.toConfig static ConfigObject toConfig( String self ) {  String.toJson static Object toJson( String self ) {  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/timyates/groovy-common-extensions"	"Lets you add things commonly useful to the Groovy language via the extension system"	"true"
"Language Utilities"	"groovy-extra-list-behaviour"	"https://github.com/dnahodil/groovy-extra-list-behaviour"	"Adds extra methods to Lists via the extension system"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - dnahodil/groovy-extra-list-behaviour: :1234: Some extra functionality for Groovy Lists Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 dnahodil/groovy-extra-list-behaviour Code Issues 2 Pull requests 0 Pulse Graphs 🔢 Some extra functionality for Groovy Lists 70 commits 1 branch 0 releases Fetching contributors Groovy 100.0% Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. gradle/wrapper src .gitignore .travis.yml LICENSE README.md build.gradle gradlew gradlew.bat README.md Groovy Extra List Behaviour About » Using this library » New methods available » Releases » Thanks » About Adds extra methods to Groovy lists. Requires Groovy version > 2.0.5 as it utilises the Groovy extensions mechanism. Released under the MIT license. Using this library You can include this library in your project in a number of ways, detailed below. Via Grape e.g. for use in Groovy scripts (including in the GroovyConsole) @Grab('com.dnahodil.groovy.extensions:groovy-extra-list-behaviour') In Grails Grails version > 2.4.4 is required for this to work automatically. compile('com.dnahodil.groovy.extensions:groovy-extra-list-behaviour:x.y.z') For earlier versions of Grails I wrote a blog post describing Adding Groovy extension modules to a Grails application. You will either need to download the jar to include in your Grails app, or build it yourself using this repository. Via Gradle compile 'com.dnahodil.groovy.extensions:groovy-extra-list-behaviour:x.y.z' Via Maven <dependency>     <groupId>com.dnahodil.groovy.extensions</groupId>     <artifactId>groovy-extra-list-behaviour</artifactId>     <version>x.y.z</version> </dependency> New methods available only() In a similar vein to first() and last() this method will return the only element of a list. This method allows you to write clearer code by making it expressly clear when we are expecting a list with a single element. An example usage might be if we are calling an SQL utilty which always returns a list of rows as the result, but the SQL being executed will return a scalar value, e.g. select count(*) from users;. Calling first() or last() when we know there's only going to be one element weakens the expressiveness of the code, whereas calling only() enhances it. As with similar methods on the List class this will throw a NoSuchElementException if the list is empty. If there is more than the expected one element a MoreThanOneElementException will be thrown. ['a', 'b'].only() // Throws MoreThanOneElementException assert ['a'].only() == 'a' [].only() // Throws NoSuchElementException This is described in more detail in my blog post ""An extension for Groovy Lists – getting the only element of a List"". firstIfAny(), lastIfAny(), headIfAny(), tailIfAny(), and onlyIfAny() These methods extend the first(), last(), head(), tail(), and only() methods. These methods will behave the same as their counterparts on a non-empty list. The difference is that they will return null if the list is empty. This is useful if you are using Groovy truthiness or null-safe navigation to make the subsequent code null-safe. Using these methods will allow you to eliminate an if condition, or a usage of the ternary operator, to stop the corresponding call of first(), last(), etc. on an empty list (which would otherwise throw an exception). assert ['a', 'b'].firstIfAny() == 'a' assert ['a'].firstIfAny() == 'a' assert [].firstIfAny() == null  assert ['a', 'b'].lastIfAny() == 'b' assert ['a'].lastIfAny() == 'a' assert [].lastIfAny() == null  assert ['a', 'b'].headIfAny() == 'a' assert ['a'].headIfAny() == 'a' assert [].headIfAny() == null  assert ['a', 'b'].tailIfAny() == ['b'] assert ['a'].tailIfAny() == [] assert [].tailIfAny() == null  assert ['a'].onlyIfAny() == 'a' assert [].onlyIfAny() == null I wrote a blog post about these, ""An extension for Groovy Lists – a less strict alternative for first(), last(), etc."". removeNulls() This method will remove all occurences of null within a list. Elements in the returned list will be in the same order as they were in the original list. This is the same behaviour as calling findAll{ it != null } on a list but the intent is more clear. assert [1, false, null, '', 2].removeNulls() == [1, false, '', 2] Releases 2.0.2 (current version) Fixed issue #20 2.0.1 Fixed bug where removeNulls() removed items which weren't null but which were falsey 2.0.0 Updated return types of tailIfAny() and removeNulls() from Object to List Changed package names (in preparation of publishing to maven central repo) 1.2.0 Added new method: removeNulls() 1.1.0 Switched to semantic versioning (no functional changes) 1.1 Improved some tests (no functional changes) 1.0 Initial release New methods available: only(), firstIfAny(), lastIfAny(), headIfAny(), tailIfAny(), and onlyIfAny() Thanks Learning about the Groovy extension mechanism and inspiration to try writing an extension myself come from Tim Yates' Groovy Common Extensions project. The Gradle build file here is based heavily on his from that project, too. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dnahodil/groovy-extra-list-behaviour"	"Adds extra methods to Lists via the extension system"	"true"
"Language Utilities"	"GPerfUtils"	"https://github.com/gperfutils"	"Groovy-based tools verifying performance of your code"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GPerfUtils · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization GPerfUtils http://gperfutils.org me@masatonagai.com Repositories People 0 Filters Sources Forks Java 22 6 gprof GProf - The profiling module for Groovy Updated Jun 27, 2015 Groovy 19 3 gbench GBench - The benchmarking module for Groovy Updated Feb 14, 2015 0 People This organization has no public members. You must be a member to see who’s a part of this organization. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gperfutils"	"Groovy-based tools verifying performance of your code"	"true"
"Language Utilities"	"gprof"	"https://github.com/gperfutils/gprof"	"The profiling module for Groovy"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"22"	"4"	"6"	"GitHub - gperfutils/gprof: GProf - The profiling module for Groovy Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 22 Fork 6 gperfutils/gprof Code Issues 1 Pull requests 0 Pulse Graphs GProf - The profiling module for Groovy http://gprof.gperfutils.org/ 94 commits 7 branches 4 releases Fetching contributors Java 72.6% Groovy 27.4% Java Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop feature/callgraph feature/overhead master origin/develop origin/master v0.3.x Nothing to show v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit b05f082 Jun 27, 2015 masatonagai Merge tag 'v0.3.1' … tag v0.3.1 Permalink Failed to load latest commit information. lib update build.xml, update the version to 0.3.1 Jun 27, 2015 src fix compilation error with groovy 2.4 Jun 27, 2015 .gitignore update .gitignore Sep 7, 2013 LICENSE undo invalid replacement Jul 22, 2013 NEWS update NEWS Sep 14, 2013 README update README Sep 14, 2013 build.xml update build.xml, update the version to 0.3.1 Jun 27, 2015 pom.xml change the top package to groovyx Jul 22, 2013 README OVERVIEW --------  The Groovy profiler, GProf is a profiling module for Groovy. It allows you to determine which parts of a program are taking most of the execution time as the GNU profiler, gprof does for C and C++.  INSTALL -------    @Grab('org.gperfutils:gprof:0.3.0-groovy-2.1') // v0.3.0 for Groovy 2.1  or other ways to install from the Maven Central repository or build a jar file from source code.  EXAMPLE -------    // slow !!   def fib(n) {       if (n < 2) {           n       } else {           fib(n - 1) + fib(n - 2)       }   }    profile {       fib(20)   }.prettyPrint()    /* stdout   Flat:     %    cumulative   self            self     total    self    total   self    total   time   seconds    seconds  calls  ms/call  ms/call  min ms  min ms  max ms  max ms  name   54.3        0.29     0.29      2   145.86   267.78   38.14   58.56  253.57  477.00  demo.fib   30.4        0.45     0.16  21890     0.00     0.00    0.00    0.00    0.80    0.80  java.lang.Integer.minus   15.0        0.53     0.08  10945     0.00     0.00    0.00    0.00    0.83    0.83  java.lang.Integer.plus    0.1        0.53     0.00      1     1.05   537.10    1.05  537.10    1.05  537.10  demo$_run_closure1.fib    0.0        0.53     0.00      1     0.13   537.23    0.13  537.23    0.13  537.23  demo$_run_closure1.doCall    Call graph:    index  % time  self  children  calls        name                  0.00      0.53          1/1      <spontaneous>   [1]     100.0  0.00      0.53            1  demo$_run_closure1.doCall [1]                  0.00      0.53          1/1      demo$_run_closure1.fib [2]   -----------------------------------------------------------------------------                  0.00      0.53          1/1      demo$_run_closure1.doCall [1]   [2]      99.9  0.00      0.53            1  demo$_run_closure1.fib [2]                  0.29      0.24          2/2      demo.fib [3]                  0.00      0.00      2/21890      java.lang.Integer.minus [4]                  0.00      0.00      1/10945      java.lang.Integer.plus [5]   -----------------------------------------------------------------------------                  0.29      0.24          2/2      demo$_run_closure1.fib [2]   [3]      99.6  0.29      0.24      2+21888  demo.fib [3]                  0.16      0.00  21888/21890      java.lang.Integer.minus [4]                  0.08      0.00  10944/10945      java.lang.Integer.plus [5]   -----------------------------------------------------------------------------                  0.00      0.00      2/21890      demo$_run_closure1.fib [2]                  0.16      0.00  21888/21890      demo.fib [3]   [4]      30.4  0.16      0.00        21890  java.lang.Integer.minus [4]   -----------------------------------------------------------------------------                  0.00      0.00      1/10945      demo$_run_closure1.fib [2]                  0.08      0.00  10944/10945      demo.fib [3]   [5]      15.0  0.08      0.00        10945  java.lang.Integer.plus [5]   -----------------------------------------------------------------------------   */  LICENSE -------  GProf is licensed under the term of the Apache License, Version 2.0. See the file LICENSE for the full license.   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gperfutils/gprof"	"The profiling module for Groovy"	"true"
"Language Utilities"	"gbench"	"https://github.com/gperfutils/gbench"	"The benchmarking module for Groovy"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"5"	"3"	"GitHub - gperfutils/gbench: GBench - The benchmarking module for Groovy Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 19 Fork 3 gperfutils/gbench Code Issues 3 Pull requests 0 Pulse Graphs GBench - The benchmarking module for Groovy http://gbench.gperfutils.org/ 95 commits 6 branches 7 releases Fetching contributors Groovy 91.6% Java 8.4% Groovy Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master travis-ci v0.2.x v0.3.x v0.4.x Nothing to show v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.1 v0.3.0 v0.2.2 Nothing to show New pull request Latest commit 4126e44 Feb 14, 2015 masatonagai add README, NEWS and LICENSE Permalink Failed to load latest commit information. lib many fixes for build.xml: Feb 7, 2015 src fix some tests Feb 6, 2015 .gitignore make git to ignore out/ Mar 20, 2013 LICENSE add README, NEWS and LICENSE Feb 14, 2015 NEWS add README, NEWS and LICENSE Feb 14, 2015 README add README, NEWS and LICENSE Feb 14, 2015 build.xml compile-test runs when -Dskip.test=true Feb 14, 2015 pom.xml update POM Nov 24, 2014 README OVERVIEW --------  GBench is a benchmarking module for Groovy. It allows you to compare the performance of programs.  GBench has two features: Benchmark Builder and Benchmark Transformation.  Benchmark Builder allows you to correctly benchmark programs. Groovy is a difficult language to accurately benchmark. Method caching, dynamic optimization and garbage collection by JVM, there are many factors that interfere measurement. You can resolve the issues by using BenchmarkBuilder. See also ""Right Groovy Benchmarking"" at    http://blog.masatonagai.com/2012/03/right-groovy-benchmarking.html  for understanding what the ""correctly"" means.  Benchmark Transformation allows you to measure methods’ execution time without additional code.   VERSIONING ----------  GBench has different versions for different Groovy versions.    [major].[minor].[maintenance]-groovy-[groovy_major].[groovy_minor]  For example, the versions of GBench 0.4.3 that supports from Groovy 1.7 to Groovy 2.4 are:    0.4.3-groovy-1.7, 0.4.3-groovy-1.8, 0.4.3-groovy-2.0, 0.4.3-groovy-2.1,   0.4.3-groovy-2.2, 0.4.3-groovy-2.3, 0.4.3-groovy-2.4   DOWNLOADING -----------  Download a distribution from the Maven Central repository using a dependency manager of your choice.  Groovy Grape    @Grab(group='org.gperfutils', module='gbench', version='[version]')  Apache Maven    <dependency>     <groupId>org.gperfutils</groupId>     <artifactId>gbench</artifactId>     <version>[version]</version>   </dependency>  Apache Ivy    <dependency org=""org.gperfutils"" name=""gbench"" rev=""[version]"" />   BUILDING --------  Build from source using Ant.  Distribution    ant dist -Dskip.test=true  Binary jar for a specific Groovy version    ant binary -Dgroovy.version=[groovy_version] -Dskip.test=true   EXAMPLES --------  Compare the performance of StringBuilder and StringBuffer using Benchmark Builder:    def r = benchmark {   // or new groovyx.gbench.BenchmarkBuilder().run {       'StringBuilder' {           def sb = new StringBuilder()           sb.append('foo')           sb.append('bar')           sb.append('baz')           sb.toString()       }       'StringBuffer' {           def sb = new StringBuffer()           sb.append('foo')           sb.append('bar')           sb.append('baz')           sb.toString()       }   }   r.prettyPrint()    /* stdout:   Environment   ===========   * Groovy: 2.4.0   * JVM: Java HotSpot(TM) 64-Bit Server VM (24.75-b04, Oracle Corporation)       * JRE: 1.7.0_75       * Total Memory: 491.5 MB       * Maximum Memory: 910.5 MB   * OS: Mac OS X (10.10.1, x86_64)    Options   =======   * Warm Up: Auto (- 60 sec)   * CPU Time Measurement: On                   user  system  cpu  real    StringBuilder   115       0  115   117   StringBuffer    132       0  132   133   */  Measure the execution time of a method using Benchmark Transformation:    import groovyx.gbench.Benchmark    class Task {       @Benchmark void run() {           // task       }   }    /* stdout:   Task  void run()  user:847000 system:1777000 cpu:2624000 real:4918000   */   LICENSE -------  GBench is licensed under the term of the Apache License, Version 2.0. See the file LICENSE for the full license.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gperfutils/gbench"	"The benchmarking module for Groovy"	"true"
"File System Utilities"	"Groovy-Vfs"	"https://github.com/ysb33r/groovy-vfs"	"A DSL for Groovy on top of Apache VFS2"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"46"	"9"	"8"	"GitHub - ysb33r/groovy-vfs: A DSL for Groovy on top of Apache VFS2 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 46 Fork 8 ysb33r/groovy-vfs Code Issues 29 Pull requests 0 Pulse Graphs A DSL for Groovy on top of Apache VFS2 274 commits 9 branches 16 releases Fetching contributors Groovy 95.4% Java 4.3% Shell 0.3% Groovy Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags JAVA7_NIO development-cpio development_v1 development_v2 gh-pages issue_60_webdav master nfs_provider vfs_2_1 Nothing to show RELEASE_1_0 RELEASE_1_0_BETA9 RELEASE_1_0_BETA8 RELEASE_1_0_BETA7 RELEASE_1_0_BETA6 RELEASE_1_0_BETA5 RELEASE_1_0_BETA4 RELEASE_1_0_BETA3 RELEASE_1_0_BETA2 RELEASE_1_0_BETA1 RELEASE_0_5_1 RELEASE_0_5 RELEASE_0_4 RELEASE_0_3 RELEASE_0_2 CMDLINE_RELEASE_0_1 Nothing to show New pull request Latest commit 004c915 Jun 10, 2016 Schalk W. Cronjé Documentation fixes for 1.0 Permalink Failed to load latest commit information. cloud-provider-core Updated changelogs Jun 10, 2016 cmdline Updated changelogs Jun 10, 2016 config Added license plugin support Jan 5, 2015 cpio-provider Have a working copy of a read-only cpio provider Jun 24, 2015 docs Documentation fixes for 1.0 Jun 10, 2016 dsl Documentation fixes for 1.0 Jun 10, 2016 gradle-plugin 1.0-Beta9 release adjustments Jun 10, 2016 gradle Moving to new Gradle Publish Plugin Jun 24, 2015 jlan Added JLAN build in preparation for a smb-provider Nov 26, 2014 smb-provider Workaround issue in plugin-publish-plugin by renaming the dsl project… Nov 5, 2015 test-servers Added a VfsMkdir task Jan 2, 2015 website @ 2dc1310 Documentation fixes for 1.0 Jun 10, 2016 .gitignore Added SMB Provider for Groovy VFS Nov 26, 2014 .gitmodules Maintaining gh-pages-based website as part of the same project Jun 24, 2015 .travis.yml Removed MacOSX from Travis Jun 10, 2016 HACKING.adoc Quick notes on releasing Oct 27, 2015 LICENSE.txt Added explicit license file Mar 7, 2014 README.adoc added note regading ISSUE #73 Jun 10, 2016 appveyor.yml Removed fast failure Jan 5, 2015 build.gradle Documentation fixes for 1.0 Jun 10, 2016 gradlew Added Gradle wrapper. Created multi-level build, although currently o… Jun 12, 2013 gradlew.bat Added Gradle wrapper. Created multi-level build, although currently o… Jun 12, 2013 settings.gradle Workaround issue in plugin-publish-plugin by renaming the dsl project… Nov 5, 2015 README.adoc Groovy VFS A DSL for Groovy to wrap around the Apache Commons VFS libraries. If you like it, then tweet about it using #groovyvfs as the hashtag. Groovy Library @Grapes([ 	@Grab( 'org.ysb33r.groovy:groovy-vfs:0.5' ), 	@Grab( 'commons-net:commons-net:3.+' ), // If you want to use ftp     @Grab( 'commons-httpclient:commons-httpclient:3.1'), // If you want http/https     @Grab( 'com.jcraft:jsch:0.1.48' ) // If you want sftp ]) import org.ysb33r.groovy.dsl.vfs.VFS  def vfs = new VFS()  // Simple copy operation vfs.cp 'ftp://foo.example/myfile', 'sftp://bar.example/yourfile'  // Utilising the DSL vfs {      // Copy file from one site to anther using two different protocols     cp 'http://first.example/myfile', 'sftp://second.example/yourfile'      // Not implemented yet - move file between two sites using different protocols     mv 'sftp://second.example/yourfile', 'ftp://third.example/theirfile'      // Lists all files on a remote site     ls ('http://first.example') {         println it.name     }      // Streams the output     cat ('http://first.example/myfile') { strm->         println strm.text     }      // Create a new folder on a remote site     mkdir 'sftp://second.example/my/new/folder'      // Change default options via property Map     options 'vfs.ftp.passiveMode' : true      // Change default options DSL style     options {         ftp {             passiveMode true         }     }      // Use options on a per URL basis     cp 'ftp://first.example/myfile?vfs.ftp.passiveMode=1', 'sftp://second.example/yourfile?vfs.sftp.compression=zlib'      // Download a compressed archive and unpack to local directory     cp 'tbz2:ftp:/first.example/myFiles.tar.bz2"", new File( '../unpack-here' ), recursive:true      // Replace content of a file with text     overwrite 'ftp://first.example/myfile?vfs.ftp.passiveMode=1' with 'this text'     overwrite 'ftp://first.example/myfile?vfs.ftp.passiveMode=1', { strm -> strm << 'this text' }      // Append content to a file     append 'ftp://first.example/myfile?vfs.ftp.passiveMode=1' with 'this text'     append 'ftp://first.example/myfile?vfs.ftp.passiveMode=1', { strm -> strm << 'this text' } } Gradle plugin From initiation a VFS object has been available as an extension to the project class. The interface is very experimental and may change without much warning in future releases of this plugin. buildscript {     repositories {         jcenter()         mavenCentral()       }       dependencies {         classpath 'org.ysb33r.gradle:vfs-gradle-plugin:0.5.1'         classpath 'commons-net:commons-net:3.+'  // If you want to use ftp         classpath 'commons-httpclient:commons-httpclient:3.1' // If you want http/https         classpath 'com.jcraft:jsch:0.1.48'  // If you want sftp       } } apply plugin : 'org.ysb33r.vfs'  // Create a VFS task task copyReadme << {   vfs {     cp 'https://raw.github.com/ysb33r/groovy-vfs/master/README.md', new File(""${buildDir}/tmp/README.md"")   } }  // it is also possible to update global options for vfs vfs {   options {     http {       maxTotalConnections 4     }   } } If you want to see what VFS is going run gradle with --debug In 1.0 a copy task has been added. import org.ysb33r.gradle.vfs.tasks.VfsCopy  task download ( type : VfsCopy ) {      from 'http://somewhere.example/file' (1)      from URL_2      // Set the destination root URI. Files will be copied into that folder     into URL_ROOT      // Set options for all of the copy operations.     // These override global options, but are only applicable for source and destination URLs within this task     options {       ftp {         passiveMode true       }     } } Copy the file at this URI <2> Any local source URIs will get reflected as an input file in the TaskInputs, otherwise it is just an input If the destination URI is local, it will get reflected as TaskOutputs as a file Adding extra plugins From v1.0 onwards additional plugins can be loaded via a new extend block. For more details see this gist: https://gist.github.com/ysb33r/9916940 SMB provider A provider for accessing SMB shares is now avavilable. The plugin must be loaded separately. @Grab( 'org.ysb33r.groovy:groovy-vfs-smb-provider:1.0-beta1' ), @Grab( 'jcifs:jcifs:1.3.17' ),  vfs {   extend {     provider className: 'org.ysb33r.groovy.vfsplugin.smb.SmbFileProvider', schemes: ['smb','cifs']   }    cp 'smb://someserver/share/dir/file', new File('localfile.txt) } NOTE: when embedding windows credentials in the URL use %5C in place of backslash i.e.   smb://DOMAIN%5cUSERNAME:PASSWORD@HOSTNAME/SHARE/PATH Note This provider has a concurrency bug (#73). S3 provider (EXPERIMENTAL) A provider for accessing S3 shares is now available and will be fully supported in future version. The plugin must be loaded separately. @Grab( 'org.ysb33r.groovy:groovy-vfs-cloud-core:0.1-beta1' ), @Grab( 'org.apache.jclouds:jclouds-all:1.7.2' ) @Grab( 'org.apache.jclouds.driver:jclouds-jsch:1.7.2' ) @Grab( 'org.apache.jclouds.provider:aws-s3:1.7.2' vfs {   extend {     provider className: 'org.ysb33r.groovy.vfsplugin.cloud.s3.S3FileProvider', schemes: ['s3']   }    cp 'smb://id:key@bucket/dir/file', new File('localfile.txt) } NOTE: Although S# does not actually support folders, this is simulated through the use of folder names containing / characters. Command-line utility A command-line utility mimicking a number of GNU shell utilities is available. Documentation See https://github.com/ysb33r/groovy-vfs/wiki for more detailed documentation. Greach2014 presentation on v0.5 - http://www.slideshare.net/ysb33r/groovy-vfs-32889561 GGX2014 presentation on v0.5 & v1.0 - https://skillsmatter.com/skillscasts/6049-groovy-vfs Credits It is seldom that these kind of libraries happen in isolation. It is therefore prudent that I acknowledge the inputs of others in the creation of groovy-vfs Luke Daley (https://gist.github.com/alkemist/7943781) for helping to use Ratpack as a Mock HTTP Server in unit tests. Will_lp (https://gist.github.com/will-lp/5785180) & Jim White (https://gist.github.com/jimwhite/5784982) offered great suggestions when I got stuck with the config DSL. Jez Higgins, Rob Fletcher, Giovanni Asproni, Balachandran Sivakumar, Burkhard Kloss & Tim Barker who helped shape the design decision to auto-create intermediates during a move operation. Maarten Boekhold for testing the SMB Provider plugin Everyone from Greach 2014 that provided feedback Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ysb33r/groovy-vfs"	"A DSL for Groovy on top of Apache VFS2"	"true"
"File System Utilities"	"Directree"	"https://github.com/kdabir/directree"	"A Simple DSL to create Directory Tree with Text Files"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"1"	"0"	"GitHub - kdabir/directree: A Simple DSL to create Directory Tree with Text Files Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 8 Fork 0 kdabir/directree Code Issues 7 Pull requests 0 Pulse Graphs A Simple DSL to create Directory Tree with Text Files 21 commits 1 branch 1 release Fetching contributors Groovy 100.0% Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. gradle/wrapper src/directree test/directree .gitignore .travis.yml LICENSE.txt README.md build.gradle gradlew gradlew.bat README.md DirecTree A Simple DSL for : Creating directory trees with text files (with contents). Keeping multiple source directories in sync with a target directory. directree is available in jcenter maven repository. @Grab('io.github.kdabir.directree:directree:0.3.0') import static directree.DirTree.create  create(""my-dir"") {     dir (""todo"") {         file ""first.txt"", ""check out this new library""     }      file (""README.md"") { """"""         Directree         ${'='*80}          There are multiple ways in which content can be written to a file.         after all, its all a valid groovy code.         """""".stripIndent()     } } Verifying it: $ tree my-dir my-dir |-- README.md `-- todo     `-- first.txt  1 directory, 2 files  $ cat my-dir/README.md Directree ================================================================================  There are multiple ways in which content can be written to a file. after all, its all a valid groovy code.  $ cat my-dir/todo/first.txt check out this new library  More realistic example You can create a project structure: create(""my-project"") {     dir ""src"" , {         file ""hello.groovy"", ""println 'hello world'""     }     dir ""test"", {         file "".gitkeep""     }     file ""build.gradle"" , """"     file "".gitignore"", ""*.class"" } create(""."") will create the files and directories in current directory. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kdabir/directree"	"A Simple DSL to create Directory Tree with Text Files"	"true"
"File Format DSL"	"document-builder"	"https://github.com/craigburke/document-builder"	"A document builder for Groovy for PDF or Word documents."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"75"	"14"	"15"	"GitHub - craigburke/document-builder: Groovy Document Builder Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 75 Fork 15 craigburke/document-builder Code Issues 13 Pull requests 4 Pulse Graphs Groovy Document Builder 363 commits 2 branches 13 releases Fetching contributors Groovy 100.0% Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.4.12 v0.4.11 v0.4.10 v0.4.9 v0.4.8 v0.4.7 v0.4.6 v0.4.5 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 Nothing to show New pull request Latest commit 1957819 May 6, 2016 Craig Burke Merge branch 'master' of https://github.com/craigburke/document-builder Permalink Failed to load latest commit information. config/codenarc Fixing border styles and styles not being applied to text elements Oct 9, 2015 core Merge branch 'master' of https://github.com/craigburke/document-builder May 6, 2016 docs Adding documentation for new features. Bumping version to 0.4 Apr 30, 2015 gradle/wrapper Background color for text. #8 Mar 1, 2016 pdf Merge branch 'master' of https://github.com/craigburke/document-builder May 6, 2016 word Reworking build. Bumping to version 0.5.0 May 6, 2016 .gitignore Support eclipse; targetCompatibility=1.6 explicit; corrected codenarc… Mar 7, 2015 README.adoc Update README.adoc May 6, 2016 build.gradle Setup bintray plugin to autopublish to maven central May 6, 2016 gradlew Initial Commit Jan 1, 2015 gradlew.bat Initial Commit Jan 2, 2015 settings.gradle Got table rendering to work. Removed itext project Feb 9, 2015 README.adoc Groovy Document Builder A document builder for Groovy for PDF or Word documents. This is still very much a work in progress. Documentation Note Because of the use of Groovy traits within the project, the minimum version of Groovy required is 2.3. Example @Grab(group='com.craigburke.document', module='pdf', version='0.5.0') @Grab(group='com.craigburke.document', module='word', version='0.5.0')  import com.craigburke.document.builder.PdfDocumentBuilder import com.craigburke.document.builder.WordDocumentBuilder  def builders = [     new PdfDocumentBuilder(new File('example.pdf')),     new WordDocumentBuilder(new File('example.docx')) ]  String[] COLORS = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082', '#8B00FF']  String GROOVY_IMAGE_URL = 'http://www.craigburke.com/images/posts/groovy-logo.png' byte[] groovyImageData = new URL(GROOVY_IMAGE_URL).bytes  builders.each { builder ->     builder.create {         document(font: [family: 'Helvetica', size: 14.pt], margin: [top: 0.75.inches]) {          heading1 ""Groovy Document Builder v.0.5.0"", font: [color: '#990000', size: 22.pt]          heading2 ""Paragraphs""          paragraph {             font.size = 42.pt             ""Hello World"".eachWithIndex { letter, index ->                 font.color = COLORS[ index % COLORS.size() ]                 text letter                 font.size--             }             lineBreak()             text ""Current font size is ${font.size}pt""         }          paragraph ""Back to default font and aligned to the right"", align: 'right'          paragraph(margin: [left: 1.25.inches, right: 1.inch, top: 0.25.inches, bottom: 0.25.inches]) {             font << [family: 'Times-Roman', bold: true, italic: true, color: '#333333']             text ""A paragraph with a different font and margins""         }          paragraph(align: 'center') {             image(data: groovyImageData, width: 250.px, height: 125.px)             lineBreak()             text ""Figure 1: Groovy Logo"", font: [italic: true, size: 9.pt]         }          heading2 ""Tables""          table(width: 6.inches, padding: 4.px, border: [size: 3.px, color: '#990000']) {             row {                 cell('Left Aligned', width:1.5.inches, align:'left')                 cell('Center Aligned', width:2.inches, align:'center')                 cell(align:'right') {                     text 'Right Aligned'                 }             }         }     }} } License The core project as well as the Word document and Pdf builder are all available under the MPL2 license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/craigburke/document-builder"	"A document builder for Groovy for PDF or Word documents."	"true"
"File Format DSL"	"spreadsheet-builder"	"https://github.com/MetadataRegistry/spreadsheet-builder"	"Spreadsheet builder provides convenient way how to create MS Excel OfficeOpenXML Documents (XSLX)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"10"	"4"	"GitHub - MetadataConsulting/spreadsheet-builder: Spreadsheet Builder Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 24 Fork 4 MetadataConsulting/spreadsheet-builder Code Issues 2 Pull requests 0 Pulse Graphs Spreadsheet Builder 30 commits 2 branches 8 releases Fetching contributors Groovy 63.3% Java 36.7% Groovy Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.5 0.1.3 Nothing to show New pull request Latest commit c7d02c6 Jan 6, 2016 musketyr fixed #9 - named styles no longer working - bumped version Permalink Failed to load latest commit information. docs added doc image to the index Jan 2, 2016 gradle/wrapper initial commit Oct 8, 2015 spreadsheet-builder-api fixed #8 The maximum number of Cell Styles was exceeded Jan 4, 2016 spreadsheet-builder-poi fixed #9 - named styles no longer working Jan 6, 2016 .gitignore initial commit Oct 8, 2015 .travis.yml initial commit Oct 8, 2015 LICENSE initial commit Oct 8, 2015 README.adoc expanded the example with styles Oct 12, 2015 build.gradle fixed #9 - named styles no longer working - bumped version Jan 6, 2016 gradlew initial commit Oct 8, 2015 gradlew.bat initial commit Oct 8, 2015 settings.gradle initial commit Oct 8, 2015 README.adoc Groovy Spreadsheet Builder Spreadsheet builder provides convenient way how to create MS Excel OfficeOpenXML Documents (XSLX) focus not only on content side but also on easy styling. See the Full Documentation Getting Started Following example creates the basic spreadsheet with two rows and three columns. @Grab(group='org.modelcatalogue', module='spreadsheet-builder-poi', version='{version}') // fixes bugs on Groovy 2.4.x @Grab(group='commons-codec', module='commons-codec', version='1.10') @GrabExclude('org.codehaus.groovy:groovy-all')  import org.modelcatalogue.builder.spreadsheet.poi.PoiSpreadsheetBuilder  def builder = new PoiSpreadsheetBuilder()                                                   // <1>  File file = new File('spreadsheet.xlsx')  file.withOutputStream { out ->     builder.build(out) {                                                                    // <2>         sheet('Sample') {                                                                   // <3>             row {                                                                           // <4>                 cell 'A'                                                                    // <5>                 cell 'B'                 cell 'C'             }             row {                 cell 1                 cell 2                 cell 3             }         }     } } Create new spreadsheet builder based on Apache POI (currently the only implementation provided) Build new spreadsheet and write it to the output stream Create new sheet with the name Sample Create new row Create new cell Acknowledgement This project is inspired by Groovy Document Builder Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MetadataRegistry/spreadsheet-builder"	"Spreadsheet builder provides convenient way how to create MS Excel OfficeOpenXML Documents (XSLX)"	"true"
"Scripting Tools"	"sshoogr"	"https://github.com/aestasit/sshoogr"	"DSL library for working with remote servers through SSH."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"189"	"35"	"29"	"GitHub - aestasit/sshoogr: A Groovy-based DSL for working with remote SSH servers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 189 Fork 29 aestasit/sshoogr Code Issues 23 Pull requests 1 Pulse Graphs A Groovy-based DSL for working with remote SSH servers. 263 commits 2 branches 10 releases 11 contributors Groovy 98.4% Java 1.6% Groovy Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.9.25 v0.9.24 v0.9.23 v0.9.21 v0.9.18 v0.9.16 v0.9.15 v0.9.14 v0.9.12 v0.9.11 Nothing to show New pull request Latest commit 9206911 Apr 7, 2016 aadamovich updgraded to 0.9.25 Permalink Failed to load latest commit information. examples updgraded to 0.9.25 Apr 7, 2016 gradle configured nexus staging Mar 21, 2016 src added usage section placeholder Apr 7, 2016 test-data moved test files from main dir + organized imports Mar 16, 2016 test-settings/env1/layer1 initial commit Apr 12, 2013 .gitattributes initial commit Apr 12, 2013 .gitignore removed old eclipse files Mar 21, 2016 LICENSE added license header to all files Oct 16, 2013 README.md updgraded to 0.9.25 Apr 6, 2016 Vagrantfile updated vagrant machine for integration tests Mar 21, 2016 build.gradle added nexus staging plugin Mar 21, 2016 default.sshoogr moved test files from main dir + organized imports Mar 16, 2016 gradle.properties updgraded to 0.9.25 Apr 6, 2016 gradlew Make Gradle wrapper executable on UNIX. Mar 18, 2016 gradlew.bat matching projects and templates Oct 16, 2013 settings.gradle matching projects and templates Oct 16, 2013 README.md sshoogr Overview The sshoogr is a Groovy-based DSL library for working with remote servers through SSH. The DSL allows: connecting, executing remote commands, copying files and directories, creating tunnels in a simple and concise way. The library was jointly developed by Aestas/IT (http://aestasit.com) and NetCompany A/S (http://www.netcompany.com/) to support the quickly growing company's operations and hosting department. Installing sshoogr with SDKMAN! The simplest way to use sshoogr from the command line is by using SDKMAN!. If SDKMAN is not yet installed, open a terminal and enter the following: $ curl -s get.sdkman.io | bash  Follow the instructions presented in the terminal, then enter the following command: $ sdk install sshoogr  This will install the sshoogr and make it available on your path. Using sshoogr in Groovy scripts The easiest way to use sshoogr in a Groovy script is by importing the dependency using Grape. @Grab('com.aestasit.infrastructure.sshoogr:sshoogr:0.9.25') import static com.aestasit.infrastructure.ssh.DefaultSsh.* The entry point for using the DSL is the remoteSession method, which accepts an SSH URL and a closure with Groovy or DSL code: remoteSession('user2:654321@localhost:2222') {   exec 'rm -rf /tmp/*'   exec 'touch /var/lock/my.pid'   remoteFile('/var/my.conf').text = ""enabled=true"" } For more use cases, please refer to the following sections or to the examples folder in this repository. Remote connections The remoteSession method accepts an SSH URL and a closure, for example: remoteSession(""user:password@localhost:22"") {   //... } Inside the closure you can execute remote commands, access remote file content, upload and download files, create tunnels. If your connection settings were set with the help of default configuration (see ""Configuration options"" section), then you can omit the URL parameter: remoteSession {   //... } Furthermore, it is possible to override the default values in each session by directly assigning host, username, password and port properties: remoteSession {    host = 'localhost'   username = 'user2'   password = '654321'   port = 2222    //...  } The SSH's URL can be also assigned from withing the remote session declaration, like so: remoteSession {    url = 'user2:654321@localhost:2222'    //...  } The actual connection to the remote host will be executed upon the first command or file access, and, naturally, the connection will be automatically closed after the code block terminates. You can explicitly call connect or disconnect methods to control this behavior: remoteSession {    // explicitly call connect   connect()    // do some stuff ...    // explicitly disconnect   disconnect()    // explicitly connect again   connect()    //...  } In the next section, we will see how to execute remote commands. Executing commands The simplest way to execute a command within a remote session is by using the exec method that just takes a command string: remoteSession {   exec 'ls -la' } You can also pass a list of commands in an array: exec([   'ls -la',   'date' ]) The exec behavior can also be controlled with additional named parameters given to the method. For example, in order to hide commands output, you can use the following syntax: exec(command: 'ls –la', showOutput: false) The additional Parameter names are specified in the ""Configuration options"" section for the execOptions. They can all be used to override default settings for specific commands. In the same way, you can also define common parameters for a block of commands passed as an array: exec(showOutput: false, command: [   'ls -la',   'date' ]) Also you can get access to command output, exit code and exception thrown during command execution. This can be useful for implementing logic based on a result returned by the remote command and/or parsing of the output. For example, def result = exec(command: '/usr/bin/mycmd', failOnError: false, showOutput: false) if (result.exitStatus == 1) {   result.output.eachLine { line ->     if (line.contains('WARNING')) {       throw new RuntimeException(""Warning!!!"")     }   } } Two additional methods that you can use around your commands are prefix and suffix. They are similar to using the prefix and suffix options in execOptions or named parameters to exec method. prefix(""sudo"") {   exec 'ls -la'   exec 'df -h' } And with suffix: suffix("">> output.log"") {   exec 'ls -la'   exec 'df -h'   exec 'date'   exec 'facter' }   File uploading/downloading The simplest way to modify a remote text file content is by using remoteFile method, which returns a remote file object instance, and assign some string to the text property: remoteFile('/etc/yum.repos.d/puppet.repo').text = '''   [puppet]   name=Puppet Labs Packages   baseurl=http://yum.puppetlabs.com/el/$releasever/products/$basearch/   enabled=0   gpgcheck=0 ''' Each line of the input string will be trimmed before it's copied to the remote file. For text file downloading you can just read the text property: println remoteFile('/etc/yum.repos.d/puppet.repo').text Uploading of a single file can be done in the following way: scp ""$buildDir/test.file"", '/tmp/test.file' This method only works for file uploading (from local environment to remote). You can also write the example above in a more verbose form with the help of closures: scp {   from { localFile ""$buildDir/test.file"" }   into { remoteFile '/tmp/test.file' } } A whole directory can be uploaded by using the remoteDir and localDir methods of scp. scp {   from { localDir ""$buildDir/application"" }   into { remoteDir '/var/bea/domain/application' } } In similar fashion, you can download directories and files: scp {   from { remoteDir '/etc/nginx' }   into { localDir ""$buildDir/nginx"" } } You can also copy multiple sources into multiple targets: scp {   from {     localDir ""$buildDir/doc""     localFile ""$buildDir/readme.txt""     localFile ""$buildDir/license/license.txt""   }   into {     remoteDir '/var/server/application'     remoteDir '/repo/company/application'   } } During any upload/download operation, local and remote directories will be created automatically. Tunneling If inside your build script you need to get access to a remote server that is not visible directly from the local machine, then you can create a tunnel to that server by using the tunnel method: tunnel('1.2.3.4', 8080) { int localPort ->   //... } All code executed within the closure passed to the tunnel method will have access to a server tunnel running on localhost and randomly selected localPort, which is passed as a parameter to the closure. Inside that tunnel code you can, for example, deploy a web application or send some HTTP command to remote server: tunnel('1.2.3.4', 8080) { int localPort ->   def result = new URL(""http://localhost:${localPort}/flushCache"").text   if (result == 'OK') {     println ""Cache is flushed!""   } else {     throw new RuntimeException(result)   } } The tunnel will be closed upon closure completion. Also, you can define a local port yourself in the following way: tunnel(7070, '1.2.3.4', 8080) {   def result = new URL(""http://localhost:7070/flushCache"").text   //... } Configuration options The following list gives an overview of the available configuration options: defaultHost, defaultUser, defaultPassword, defaultPort (defaults to 22) - Default host, user name, password or port to use in remote connection in case they are not specified in some other way (through url, host, port, user or password properties inside the remoteSession method). defaultKeyFile - Default key file to use in remote connection in case it is not specified through the keyFile property inside the remoteSession method. failOnError (defaults to true) - If set to true, failed remote commands and file operations will throw an exception. verbose (defaults to false) - If set to true, the library produces more debug output. The sshOptions may also contain a nested execOptions structure, which defines remote command execution (see ""Executing commands"" section) options. It has the following properties: showOutput (defaults to true) - If set to true, remote command output is printed. showCommand (defaults to true) - If set to true, remote command is printed. hideSecrets (defaults to true) - If set to true, secret Strings contained in ExecOptions.secrets will be redacted from output and replaced by ********. secrets (defaults to [ ]) - a list of secret Strings to be redacted from output maxWait (defaults to 0) - Number of milliseconds to wait for command to finish. If it is set to 0, then library will wait forever. succeedOnExitStatus (defaults to 0) - Exit code that indicates commands success. If command returns different exit code, then build will fail. failOnError (defaults to true) - If set to true, failed remote commands will fail the build. verbose (defaults to false) - If set to true, library produces more debug output. prefix - String to prepend to each executed command, for example, ""sudo"". suffix - String to append to each executed command, for example, "">> output.log"". There is also a nested scpOptions structure, which defines remote file copying options (see ""File uploading/downloading"" section). It has the following properties: failOnError (defaults to true) - If set to true, failed file operations will fail the build. showProgress (defaults to false) - If set to true, library shows additional information regarding file upload/download progress. verbose (defaults to false) - If set to true, library produces more debug output. Advanced usage Creating a SshDslEngine instance If you need to embed sshoogr into your own DSL or another library you may need to use internal classes instead of default static methods. The main library's classes are SshDslEngine and SshOptions, which need to be imported before the library can be used: import com.aestasit.infrastructure.ssh.dsl.SshDslEngine import com.aestasit.infrastructure.ssh.SshOptions To create a simple instance of the engine with the default options you can just use the following instruction: def engine = new SshDslEngine(new SshOptions()) The engine instance gives access to the remoteSession method. Populating SshOptions A more verbose example of creating a SshOptions object can be found below: import com.aestasit.infrastructure.ssh.log.SysOutLogger  //...  options = new SshOptions() options.with {    logger = new SysOutLogger()    defaultHost = '127.0.0.1'   defaultUser = 'user1'   defaultPassword = '123456'   defaultPort = 2233    reuseConnection = true   trustUnknownHosts = true    execOptions.with {     showOutput = true     failOnError = false     hideSecrets = true     secrets = ['secret1']     succeedOnExitStatus = 0     maxWait = 30000   }    scpOptions.with {     verbose = true     showProgress = true   }  } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aestasit/sshoogr"	"DSL library for working with remote servers through SSH."	"true"
"Groovy Code Examples"	"MrHaKi's Goodness"	"http://mrhaki.blogspot.com/"	"Look out for entries titled ""Groovy Goodness"", ""Grails Goodness"", Gradle Goodness"""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Messages from mrhaki skip to main | skip to sidebar Blog Books Github About Loading... July 6, 2016 Ratpacked: Create a Partial Response Suppose we want to support partial JSON responses in our Ratpack application. The user must send a request parameter with a list of fields that need to be part of the response. In our code we must use the value of the request parameter and output only the given properties of an object. We implement this logic using a custom renderer in Ratpack. Inside the renderer we can get access to the request parameters of the original request. In our example Ratpack application we have a Course class, which is a simple class withs some properties: // File: src/main/groovy/mrhaki/ratpack/Course.groovy package mrhaki.ratpack  import groovy.transform.Immutable  @Immutable class Course {     String name     String teacher     Integer maxOccupation }  Next we create a custom renderer for our Course class. We extend the RendererSupport class and override the render method: // File: src/main/groovy/mrhaki/ratpack/CourseRenderer.groovy package mrhaki.ratpack  import ratpack.handling.Context import ratpack.render.RendererSupport  import static ratpack.jackson.Jackson.json  class CourseRenderer extends RendererSupport<Course> {          @Override     void render(final Context context, final Course course) throws Exception {         // Get request parameter fields with a comma separated list         // of field names to include in the output.         final String paramFields = context.request.queryParams.get('fields')                  if (paramFields) {             // Transform comma separated property names to a Set.             final Set<String> coursePropertyNames =                      paramFields.tokenize(',').toSet()                          // Create Map with only Course properties that need to             // be included.             final Map partialCourse =                      filterProperties(course, coursePropertyNames)                          // Render Map.             context.render(json(partialCourse))         } else {             // No fields request parameter so we can return             // the original Course object.             context.render(json(course))         }     }      /**      * Find all properties in the object that are in the collection      * of property names.      *       * @param object Object with properties to filter      * @param propertyNames Names of properties to find      * @return Map with properties      */     private Map filterProperties(             final Object object,              final Set<String> propertyNames) {          object.properties.findAll { property ->              property.key in propertyNames          }     } }  Finally we need to add the CourseRenderer to the Ratpack registry. Ratpack will find the renderer when we want to render a Course object. This happens automatically, we don't have to do anything ourselves. The following Ratpack application configuration adds our CourseRenderer with the bind method. We also add a endpoint to show the contents of a sample Course object. // File: src/ratpack/ratpack.groovy import mrhaki.ratpack.Course import mrhaki.ratpack.CourseRenderer import ratpack.registry.Registry  import static ratpack.groovy.Groovy.ratpack  ratpack {     bindings {         // Add to registry, so Ratpack can use         // it to render a Course object.         bind CourseRenderer     }     handlers {         all {             final Course course =                      new Course(                             name: 'Ratpack rules 101',                             teacher: 'mrhaki',                             maxOccupation: 450)             next(Registry.single(course))         }         get('course') { Course course ->             render(course)         }     } }  Let's try several requests using the fields request parameter and without the fields request parameter using HTTPie as client: $ http -b http://localhost:5050/course {     ""maxOccupation"": 450,     ""name"": ""Ratpack rules 101"",     ""teacher"": ""mrhaki"" }  $ http -b http://localhost:5050/course fields==name,teacher {     ""name"": ""Ratpack rules 101"",     ""teacher"": ""mrhaki"" }  Written with Ratpack 1.3.3. Tweet Posted by Hubert Klein Ikkink Tags: Ratpack Ratpack 1.3.3 Ratpacked Ratpacked:HTTP Ratpacked:Renderer July 2, 2016 Spring Sweets: Using Groovy Configuration As PropertySource We have many ways to provide configuration properties to a Spring (Boot) application. We can add our own custom configuration properties format. For example we can use Groovy's ConfigObject object to set configuration properties. We need to read a configuration file using ConfigSlurper and make it available as a property source for Spring. We need to implement two classes and add configuration file to support a Groovy configuration file in a Spring application. First we need to write a class that extends the PropertySource in the package org.springframework.core.env. This class has methods to get property values based on a given key. There are already some subclasses for specific property sources. There is for example also a MapPropertySource class. We will extend that class for our implementation, because we can pass our flattened ConfigObject and rely on all existing functionality of the MapPropertySource class: // File: src/main/java/mrhaki/spring/configobject/ConfigObjectPropertySource.java package mrhaki.spring.configobject;  import groovy.util.ConfigObject; import org.springframework.core.env.MapPropertySource;  /**  * Property source that supports {@link ConfigObject}. The {@link ConfigObject}  * is flattened and all functionality is delegated to the  * {@link MapPropertySource}.  */ public class ConfigObjectPropertySource extends MapPropertySource {          public ConfigObjectPropertySource(             final String name,              final ConfigObject config) {                  super(name, config.flatten());     }      }  Next we must implement a class that loads the configuration file. The configuration file must be parsed and we must our ConfigObjectPropertySource so we can use it in our Spring context. We need to implement the PropertySourceLoader interface, where we can define the file extensions the loader must be applied for. Also we override the load method to load the actual file. In our example we also add some extra binding variables we can use when we define our Groovy configuration file. // File: src/main/java/mrhaki/spring/configobject/ConfigObjectPropertySourceLoader.java package mrhaki.spring.configobject;  import groovy.util.ConfigObject; import groovy.util.ConfigSlurper; import org.springframework.boot.env.PropertySourceLoader; import org.springframework.core.env.PropertySource; import org.springframework.core.io.Resource; import org.springframework.util.ClassUtils;  import java.io.IOException; import java.util.HashMap; import java.util.Map;  public class ConfigObjectPropertySourceLoader implements PropertySourceLoader {      /**      * Allowed Groovy file extensions for configuration files.      *      * @return List of extensions for Groovy configuration files.      */     @Override     public String[] getFileExtensions() {         return new String[]{""groovy"", ""gvy"", ""gy"", ""gsh""};     }      /**      * Load Groovy configuration file with {@link ConfigSlurper}.      */     @Override     public PropertySource<?> load(             final String name,             final Resource resource,             final String profile) throws IOException {          if (isConfigSlurperAvailable()) {             final ConfigSlurper configSlurper = profile != null ?                     new ConfigSlurper(profile) :                     new ConfigSlurper();              // Add some extra information that is accessible             // in the Groovy configuration file.             configSlurper.setBinding(createBinding(profile));             final ConfigObject config = configSlurper.parse(resource.getURL());              // Return ConfigObjectPropertySource if configuration             // has key/value pairs.             return config.isEmpty() ?                     null :                     new ConfigObjectPropertySource(name, config);         }          return null;     }      private boolean isConfigSlurperAvailable() {         return ClassUtils.isPresent(""groovy.util.ConfigSlurper"", null);     }      private Map<String, Object> createBinding(final String profile) {         final Map<String, Object> bindings = new HashMap<>();         bindings.put(""userHome"", System.getProperty(""user.home""));         bindings.put(""appDir"", System.getProperty(""user.dir""));         bindings.put(""springProfile"", profile);         return bindings;     }  }  Finally we need to add our ConfigObjectPropertySourceLoader to a Spring configuration file, so it used in our Spring application. We need to create the file spring.factories in the META-INF directory with the following contents: # File: src/main/resources/META-INF/spring.factories org.springframework.boot.env.PropertySourceLoader=\   mrhaki.spring.configobject.ConfigObjectPropertySourceLoader  Now when we create a Spring application with all our classes and configuration file in the classpath we can provide an application.groovy file in the root of the classpath: // File: src/main/resources/application.groovy app {     // Using binding property appDir,     // which is added to the ConfigSlurper      // in ConfigObjectPropertySourceLoader.     startDir = appDir      // Configuration hierarchy.     message {         text = ""Text from Groovy configuration!""     } }  environments {     // When starting application with      // -Dspring.profiles.active=blog this     // environment configuration is used.     blog {         app {             message {                 text = ""Groovy Goodness""             }         }     } }  Written with Spring Boot 1.3.5.RELEASE Tweet Posted by Hubert Klein Ikkink Tags: Spring Spring Boot Spring Boot 1.3.5 Spring:Sweets SpringSweets SpringSweets:Configuration SpringSweets:Groovy June 27, 2016 Grails Goodness: Pass JSON Configuration Via Command Line We can use the environment variable SPRING_APPLICATION_JSON with a JSON value as configuration source for our Grails 3 application. The JSON value is parsed and merged with the configuration. Instead of the environment variable we can also use the Java system property spring.application.json. Let's create a simple controller that reads the configuration property app.message: // File: grails-app/controllers/mrhaki/grails/config/SampleController.groovy package mrhaki.grails.config  import org.springframework.beans.factory.annotation.Value  class MessageController {          @Value('${app.message}')     String message      def index() {          render message     } }  Next we start Grails and set the environment variable SPRING_APPLICATION_JSON with a value for app.message: $ SPRING_APPLICATION_JSON='{""app"":{""message"":""Grails 3 is Spring Boot on steroids""}}' grails run-app | Running application... Grails application running at http://localhost:8080 in environment: development  When we request the sample endpoint we see the value of app.message: $ http -b :8080/message Grails 3 is Spring Boot on steroids $  If we want to use the Java system property spring.application.json with the Grails command we must first configure the bootRun task so all system properties are passed along: // File: build.gradle ... bootRun {     systemProperties System.properties } ...  With the following command we pass the configuration as inline JSON: $ grails -Dspring.application.json='{""app"":{""message"":""Grails 3 is Spring Boot on steroids""}}' run-app | Running application... Grails application running at http://localhost:8080 in environment: development  Written with Grails 3.1.8. Tweet Posted by Hubert Klein Ikkink Tags: Grails Grails 3 Grails 3.1.8 Grails:Goodness GrailsGoodness:Configuration GrailsGoodness:Spring Ratpacked: Using Groovy Configuration Scripts As Configuration Source Ratpack has a lot of options to add configuration data to our application. We can use for example YAML and JSON files, properties, environment variables and Java system properties. Groovy has the ConfigSlurper class to parse Groovy script with configuration data. It even supports an environments block to set configuration value for a specific environment. If we want to support Groovy scripts as configuration definition we write a class that implements the ratpack.config.ConfigSource interface. We create a new class ConfigSlurperConfigSource and implement the ConfigSource interface. We must implement the loadConfigData method in which we read the Groovy configuration and transform it to a ObjectNode so Ratpack can use it: // File: src/main/groovy/mrhaki/ratpack/config/ConfigSlurperConfigSource.groovy package mrhaki.ratpack.config  import com.fasterxml.jackson.databind.ObjectMapper import com.fasterxml.jackson.databind.node.ArrayNode import com.fasterxml.jackson.databind.node.ObjectNode import groovy.transform.CompileDynamic import groovy.transform.CompileStatic import ratpack.config.ConfigSource import ratpack.file.FileSystemBinding  import java.nio.file.Path  @CompileStatic class ConfigSlurperConfigSource implements ConfigSource {          private final String configScript          private final URL scriptUrl          private final String environment          ConfigSlurperConfigSource(final String configScript) {         this(configScript, '')     }      ConfigSlurperConfigSource(final String configScript, final String environment) {         this.configScript = configScript         this.environment = environment     }      ConfigSlurperConfigSource(final Path configPath) {         this(configPath, '')     }      ConfigSlurperConfigSource(final Path configPath, final String environment) {         this(configPath.toUri(), environment)     }      ConfigSlurperConfigSource(final URI configUri) {         this(configUri, '')     }      ConfigSlurperConfigSource(final URI configUri, final String environment) {         this(configUri.toURL(), environment)     }      ConfigSlurperConfigSource(final URL configUrl) {         this(configUrl, '')     }      ConfigSlurperConfigSource(final URL configUrl, final String environment) {         this.scriptUrl = configUrl         this.environment = environment     }      @Override     ObjectNode loadConfigData(             final ObjectMapper objectMapper,              final FileSystemBinding fileSystemBinding) throws Exception {          // Create ConfigSlurper for given environment.         final ConfigSlurper configSlurper = new ConfigSlurper(environment)          // Read configuration.         final ConfigObject configObject =                  configScript ?                          configSlurper.parse(configScript) :                          configSlurper.parse(scriptUrl)                  // Transform configuration to node tree         final ObjectNode rootNode = objectMapper.createObjectNode()         populate(rootNode, configObject)         return rootNode     }      @CompileDynamic     private populate(final ObjectNode node, final ConfigObject config) {         // Loop through configuration.         // ConfigObject also implements Map interface,         // so we can loop through key/value pairs.         config.each { key, value ->             // Value is another configuration,             // this means the nested configuration             // block.             if (value instanceof Map) {                 populate(node.putObject(key), value)             } else {                 // If value is a List we convert it to                 // an array node.                 if (value instanceof List) {                     final ArrayNode listNode = node.putArray(key)                     value.each { listValue ->                         listNode.add(listValue)                     }                 } else {                     // Put key/value pair in node.                     node.put(key, value)                 }             }         }     } }  We have several options to pass the Groovy configuration to the ConfigSlurperConfigSource class. We can use a String, URI, URL or Path reference. Let's create a file with some configuration data. // File: src/ratpack/application.groovy app {     serverPort = 9000 }  environments {     development {         app {             serverName = 'local'         }     }     production {         app {             serverName = 'cloud'             serverPort = 80         }     } }  Next we create a Ratpack application using the Groovy DSL. In the serverConfig section we use our new ConfigSlurperConfigSource: // File: src/ratpack/ratpack.groovy import com.google.common.io.Resources import com.mrhaki.config.ConfigSlurperConfigSource  import static groovy.json.JsonOutput.prettyPrint import static groovy.json.JsonOutput.toJson import static ratpack.groovy.Groovy.ratpack  //final Logger log = LoggerFactory.getLogger('ratpack')  ratpack {      serverConfig {         // Use Groovy configuration.         add new ConfigSlurperConfigSource('''\             app {                 message = 'Ratpack swings!'             }''')          // Use external Groovy configuration script file.         add new ConfigSlurperConfigSource(                 Resources.getResource('application.groovy'), 'development')          require '/app', SimpleConfig     }      handlers {         get('configprops') { SimpleConfig config ->             render(prettyPrint(toJson(config)))         }     }  }  // Simple configuration. class SimpleConfig {     String message     String serverName     Integer serverPort }  Let's check the output of the configprops endpoint: $ http -b localhost:5050/configprops {     ""message"": ""Ratpack swings!"",     ""serverName"": ""local"",     ""serverPort"": 9000 }  Now we set the environment to production in our Ratpack application: // File: src/ratpack/ratpack.groovy ...  ratpack {      serverConfig {         ...          // Use external Groovy configuration script file.         add new ConfigSlurperConfigSource(                 Resources.getResource('application.groovy'), 'production')         ...     }      ... }  If we check configprops again we see different configuration values: $ http -b localhost:5050/configprops {     ""message"": ""Ratpack swings!"",     ""serverName"": ""cloud"",     ""serverPort"": 80 }  Written with Ratpack 1.3.3. Tweet Posted by Hubert Klein Ikkink Tags: Ratpack Ratpack 1.3.3 Ratpacked Ratpacked:Configuration Ratpacked:Groovy June 24, 2016 Ratpacked: Handling Exceptions When Reading Configuration Sources To define configuration sources for our Ratpack application we have several options. We can set default properties, look at environment variables or Java system properties, load JSON or YAML formatted configuration files or implement our own configuration source. When something goes wrong using one of these methods we want to be able to handle that situation. For example if an optional configuration file is not found, we want to inform the user, but the application must still start. The default exception handling will throw the exception and the application is stopped. We want to customise this so we have more flexibility on how to handle exceptions. We provide the configuration source in the serverConfig configuration block of our Ratpack application. We must add the onError method and provide an error handler implementation before we load any configuration source. This error handler will be passed to each configuration source and is execute when an exception occurs when the configuration source is invoked. The error handler implements the Action interface with the type Throwable. In our implementation we can for example check for the type of Throwable and show a correct status message to the user. In the following example application we rely on external configuration source files that are optional. If the file is present it must be loaded, otherwise a message must be shown to indicate the file is missing, but the application still starts: // File: src/ratpack/ratpack.groovy import org.slf4j.Logger import org.slf4j.LoggerFactory  import java.nio.file.NoSuchFileException import java.nio.file.Paths  import static ratpack.groovy.Groovy.ratpack  final Logger log = LoggerFactory.getLogger('ratpack.server')  ratpack {     serverConfig {         // Use custom error handler, when         // exceptions happen during loading         // of configuration sources.         onError { throwable ->             if (throwable in NoSuchFileException) {                 final String file = throwable.file                 log.info ""Cannot load optional configuration file '{}'"", file             } else {                 throw throwable             }         }                  yaml('application.yml')          // Optional configuration files         // to override values in          // 'application.yml'. This could         // potentially give an exception if         // the files don't exist.         yaml(Paths.get('conf/application.yml'))         json(Paths.get('conf/application.json'))                  args(args)         sysProps()         env()                  ...     }      ... }  Next we start the application with the absence of the optional configuration files conf/application.yml and conf/application.json: $ gradle run ... :run  12:28:38.887 [main]            INFO  ratpack.server.RatpackServer - Starting server... 12:28:39.871 [main]            INFO  ratpack.server - Cannot load optional configuration file 'conf/application.yml' 12:28:39.873 [main]            INFO  ratpack.server - Cannot load optional configuration file 'conf/application.json' 12:28:40.006 [main]            INFO  ratpack.server.RatpackServer - Building registry... 12:28:40.494 [main]            INFO  ratpack.server.RatpackServer - Ratpack started (development) for http://localhost:5050   Notice that application is started and in the logging we have nice status messages that tell us the files are not found. Written with Ratpack 1.3.3. Tweet Posted by Hubert Klein Ikkink Tags: Ratpack Ratpack 1.3.3 Ratpacked Ratpacked:Configuration June 23, 2016 Groovy Goodness: Customise Log AST Annotations Adding logging support to a class in Groovy is easy. We can choose to add SLF4J, Log4j, Log4j2, Apache Commons or Java Util Logging to our class. The default implementation of the Abstract Syntax Tree (AST) transformation is to add a log field of the correct type. As category name the complete class name (including the package) is used. We can change the name of the field with the value attribute. To alter the category name we use the attribute category. In the following example snippet we change the log field name to LOGGER and set a custom category name: @Grapes(     @Grab(group='ch.qos.logback', module='logback-classic', version='1.1.7') ) import groovy.util.logging.Slf4j  // Change name of the field to LOGGER and // the category to 'mrhaki.blog.samples'. @Slf4j(value = 'LOGGER', category = 'mrhaki.blog.samples') class SampleLogging {      String sample(final String message) {         LOGGER.info 'Running sample({}) method', message                  ""Groovy is $message!""     }      }  def s = new SampleLogging() println ""System.out says: ${s.sample('gr8')}""  When we execute the script we get the following output: 16:33:56.972 [Thread-7] INFO mrhaki.blog.samples - Running sample(gr8) method System.out says: Groovy is gr8!  Notice the category is mrhaki.blog.samples and we use the field LOGGER in our code. Written with Groovy 2.4.7. Tweet Posted by Hubert Klein Ikkink Tags: Groovy Groovy 2.4.7 Groovy:Goodness GroovyGoodness:AST GroovyGoodness:Logging June 22, 2016 Groovy Goodness: Turn A Map Or List As String To Map Or List In a previous post we learned how to use the toListString or toMapString methods. With these methods we create a String representation of a List or Map object. With a bit of Groovy code we can take such a String object and turn it into a List or Map again. In the following code snippet we turn the String value [abc, 123, Groovy rocks!] to a List with three items: // Original List with three items. def original = ['abc', 123, 'Groovy rocks!']  // Create a String representation: // [abc, 123, Groovy rocks!] def listAsString = original.toListString()  // Take the String value between // the [ and ] brackets, then // split on , to create a List // with values. def list = listAsString[1..-2].split(', ')  assert list.size() == 3 assert list[0] == 'abc' assert list[1] == '123' // String value assert list[2] == 'Groovy rocks!'  We can do something similar for a String value representing a map structure: // Original Map structure. def original = [name: 'mrhaki', age: 42]  // Turn map into String representation: // [name:mrhaki, age:42] def mapAsString = original.toMapString()  def map =      // Take the String value between     // the [ and ] brackets.     mapAsString[1..-2]         // Split on , to get a List.         .split(', ')         // Each list item is transformed         // to a Map entry with key/value.         .collectEntries { entry ->              def pair = entry.split(':')             [(pair.first()): pair.last()]         }           assert map.size() == 2 assert map.name == 'mrhaki' assert map.age == '42'  Written with Groovy 2.4.7. Tweet Posted by Hubert Klein Ikkink Tags: Groovy Groovy 2.4.7 Groovy:Goodness GroovyGoodness:Collections GroovyGoodness:String June 21, 2016 Groovy Goodness: Represent Map As String Groovy adds to Map objects the toMapString method. With this method we can have a String representation of our Map. We can specify an argument for the maximum width of the generated String. Groovy will make sure at least the key/value pairs are added as a pair, before adding three dots (...) if the maximum size is exceeded. def course = [     name: 'Groovy 101',     teacher: 'mrhaki',     location: 'The Netherlands']      assert course.toMapString(15) == '[name:Groovy 101, ...]' assert course.toMapString(25) == '[name:Groovy 101, teacher:mrhaki, ...]'  As mentioned in a previous post we can use the toListString method to represent a List as a String: def names = ['mrhaki', 'hubert']  assert names.toListString(5) == '[mrhaki, ...]'  Written with Groovy 2.4.7. Tweet Posted by Hubert Klein Ikkink Tags: Groovy Groovy 2.4.7 Groovy:Goodness GroovyGoodness:Collections GroovyGoodness:GDK June 20, 2016 Grails Goodness: Add Banner To Grails 3.1 Application In a previous post we learned how to add a banner to a Grails 3.0 application. We used the Spring Boot support in Grails to show a banner on startup. The solution we used doesn't work for a Grails 3.1 application. We need to implement a different solution to show a banner on startup. First of all we create a new class that implements the org.springframework.boot.Banner interface. We implement the single method printBanner and logic to display a banner, including colors: // File: src/main/groovy/mrhaki/grails/GrailsBanner.groovy package mrhaki.grails  import org.springframework.boot.Banner import grails.util.Environment import org.springframework.boot.ansi.AnsiColor import org.springframework.boot.ansi.AnsiOutput import org.springframework.boot.ansi.AnsiStyle  import static grails.util.Metadata.current as metaInfo  /**  * Class that implements Spring Boot Banner  * interface to show information on application startup.  */ class GrailsBanner implements Banner {      /**      * ASCCI art Grails 3.1 logo built on      * http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20      */     private static final String BANNER = $/   _________________    _____  .___.____       _________ ________      ____   /  _____|______   \  /  _  \ |   |    |     /   _____/ \_____  \    /_   | /   \  ___|       _/ /  /_\  \|   |    |     \_____  \    _(__  <     |   | \    \_\  \    |   \/    |    \   |    |___  /        \  /       \    |   |  \______  /____|_  /\____|__  /___|_______ \/_______  / /______  / /\ |___|         \/       \/         \/            \/        \/         \/  \/           /$      @Override     void printBanner(             org.springframework.core.env.Environment environment,             Class<?> sourceClass,             PrintStream out) {          // Print ASCII art banner with color yellow.         out.println AnsiOutput.toString(AnsiColor.BRIGHT_YELLOW, BANNER)          // Display extran infomratio about the application.         row 'App version', metaInfo.getApplicationVersion(), out         row 'App name', metaInfo.getApplicationName(), out         row 'Grails version', metaInfo.getGrailsVersion(), out         row 'Groovy version', GroovySystem.version, out         row 'JVM version', System.getProperty('java.version'), out         row 'Reloading active', Environment.reloadingAgentEnabled, out         row 'Environment', Environment.current.name, out                  out.println()     }      private void row(final String description, final value, final PrintStream out) {         out.print AnsiOutput.toString(AnsiColor.DEFAULT, ':: ')         out.print AnsiOutput.toString(AnsiColor.GREEN, description.padRight(16))         out.print AnsiOutput.toString(AnsiColor.DEFAULT, ' :: ')         out.println AnsiOutput.toString(AnsiColor.BRIGHT_CYAN, AnsiStyle.FAINT, value)     }  }  Next we must override the GrailsApp class. We override the printBanner method, which has no implementation in the GrailsApp class. In our printBanner method we use GrailsBanner: // File: src/main/groovy/mrhaki/grails/BannerGrailsApp.groovy package mrhaki.grails  import grails.boot.GrailsApp import groovy.transform.InheritConstructors import org.springframework.core.env.Environment  @InheritConstructors class BannerGrailsApp extends GrailsApp {          @Override     protected void printBanner(final Environment environment) {         // Create GrailsBanner instance.         final GrailsBanner banner = new GrailsBanner()          banner.printBanner(environment, Application, System.out)     }      }  Finally in the Application class we use BannerGrailsApp instead of the default GrailsApp object: // File: grails-app/init/mrhaki/grails/Application.groovy package mrhaki.grails  import grails.boot.config.GrailsAutoConfiguration  class Application extends GrailsAutoConfiguration {     static void main(String[] args) {         final BannerGrailsApp app = new BannerGrailsApp(Application)         app.run(args)     } }  When we start our Grails application on a console with color support we see the following banner: Written with Grails 3.1.8. Tweet Posted by Hubert Klein Ikkink Tags: Grails Grails 3.1 Grails 3.1.8 Grails:Goodness GrailsGoodness:CommandLine GrailsGoodness:Spring Grails Goodness: Creating A Fully Executable Jar With Grails 3 we can create a so-called fat jar or war file. To run our application we only have to use java -jar followed by our archive file name and the application starts. Another option is to create a fully executable jar or war file, which adds a shell script in front of the jar or war file so we can immediately run the jar or war file. We don't have to use java -jar anymore to run our Grails application. The fully executable JAR file can only run on Unix-like systems and it is ready to be used as service using init.d or systemd. To create a fully executable jar file for our Grails application we must add the following lines to our build.gradle file: // File: build.gradle ... // Disable war plugin to create a jar file // otherwise a fully executable war file // is created. //apply plugin: 'war'  ... springBoot {     // Enable the creation of a fully     // executable archive file.     executable = true }  Next we execute the Gradle assemble task to create the fully executable archive: grails> assemble ... :compileGroovyPages :jar :bootRepackage :assemble  BUILD SUCCESSFUL  Total time: 5.619 secs | Built application to build/libs using environment: production grails>  We can find the executable archive file in the build/libs directory. Suppose our Grails application is called grails-full-executable-jar and has version 0.1 we can execute the jar file grails-full-executable-jar-0.1.jar: $ cd build/libs $ ./grails-full-executable-jar-0.1.jar Grails application running at http://localhost:8080 in environment: production  The launch script that is prepended to the archive file can be changed by defining a new launch script with the springBoot property embeddedLaunchScript. The default launch script that is used has some variable placeholders we can change using the embeddedLaunchScriptProperties property. For example the launch script can determine if the script is used to run the application standalone or as a Linux/Unix service and will act accordingly. We can also set the mode property to service so it will always act like a Linux/Unix service. Furthermore we can set some meta information for the launch script with several properties. To learn more about the different options see the Spring Boot documentation. // File: build.gradle ... springBoot {     // Enable the creation of a fully     // executable archive file.     executable = true      // Set values for variable placeholders     // in the default launch script.     embeddedLaunchScriptProperties =         [initInfoDescription: project.description,          initInfoShortDescription: project.name,          initInfoProvides: jar.baseName,          mode: 'service'] }  After we have recreated the archive file we can check the launch script that is created: $ head -n 55 build/libs/grails-full-executable-jar-0.1.jar #!/bin/bash # #    .   ____          _            __ _ _ #   /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ #  ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ #   \\/  ___)| |_)| | | | | || (_| |  ) ) ) ) #    '  |____| .__|_| |_|_| |_\__, | / / / / #   =========|_|==============|___/=/_/_/_/ #   :: Spring Boot Startup Script :: #  ### BEGIN INIT INFO # Provides:          grails-full-executable-jar # Required-Start:    $remote_fs $syslog $network # Required-Stop:     $remote_fs $syslog $network # Default-Start:     2 3 4 5 # Default-Stop:      0 1 6 # Short-Description: grails-full-executable-jar # Description:       Sample Grails Application # chkconfig:         2345 99 01 ### END INIT INFO  [[ -n ""$DEBUG"" ]] && set -x  # Initialize variables that cannot be provided by a .conf file WORKING_DIR=""$(pwd)"" # shellcheck disable=SC2153 [[ -n ""$JARFILE"" ]] && jarfile=""$JARFILE"" [[ -n ""$APP_NAME"" ]] && identity=""$APP_NAME""  # Follow symlinks to find the real jar and detect init.d script cd ""$(dirname ""$0"")"" || exit 1 [[ -z ""$jarfile"" ]] && jarfile=$(pwd)/$(basename ""$0"") while [[ -L ""$jarfile"" ]]; do   [[ ""$jarfile"" =~ init\.d ]] && init_script=$(basename ""$jarfile"")   jarfile=$(readlink ""$jarfile"")   cd ""$(dirname ""$jarfile"")"" || exit 1   jarfile=$(pwd)/$(basename ""$jarfile"") done jarfolder=""$(dirname ""$jarfile"")"" cd ""$WORKING_DIR"" || exit 1  # Source any config file configfile=""$(basename ""${jarfile%.*}.conf"")"" # shellcheck source=/dev/null [[ -r ""${jarfolder}/${configfile}"" ]] && source ""${jarfolder}/${configfile}""  # Initialize PID/LOG locations if they weren't provided by the config file [[ -z ""$PID_FOLDER"" ]] && PID_FOLDER=""/var/run"" [[ -z ""$LOG_FOLDER"" ]] && LOG_FOLDER=""/var/log"" ! [[ -x ""$PID_FOLDER"" ]] && PID_FOLDER=""/tmp"" ! [[ -x ""$LOG_FOLDER"" ]] && LOG_FOLDER=""/tmp""  # Set up defaults [[ -z ""$MODE"" ]] && MODE=""service"" # modes are ""auto"", ""service"" or ""run"" $ cd build/libs $ ./grails-full-executable-jar.0.1.jar Usage: ./grails-full-executable-jar-0.1.jar {start|stop|restart|force-reload|status|run} $  Written with Grails 3.1.8. Tweet Posted by Hubert Klein Ikkink Tags: Grails Grails 3 Grails 3.1.8 Grails:Goodness GrailsGoodness:CommandLine GrailsGoodness:Spring Older Posts Home Subscribe to: Posts (Atom) Links Website Blog Books Github Livestream About Link to friends Droomkoekjes JDriven Blog Pixeldam Xpanded DrBob42 Connect Twitter Google+ LinkedIn Facebook Delicious Contact Labels Apache Camel (5) Asciidoc (46) Asciidoctor (46) Awesome:Asciidoctor (47) Cocoon (26) Git (5) Google App Egine (4) Google Guava (4) Gradle (119) Gradle:Goodness (103) Grails (197) Grails:Goodness (148) Griffon:Goodness (2) Groovy (548) Groovy:Goodness (346) IntelliJ IDEA (34) Java (51) Maven (31) Maven2 (33) NetBeans (114) OSX (4) Ratpack (48) Ratpacked (48) RESTful webservices (3) Spock (34) Spock:Spotlight (21) Spring (23) Spring Boot (5) Spring:Sweets (7) Tomcat (8) XSLT (5) Yahoo Pipes (5) © 2008-2016 Hubert A. Klein Ikkink | Dark theme | Light theme Subscribe in a reader"	"null"	"null"	"Look out for entries titled ""Groovy Goodness"", ""Grails Goodness"", Gradle Goodness"""	"true"
"Groovy Code Examples"	"Groovy Almanac"	"http://groovy-almanac.org/"	"useful code snippets"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Groovy Almanac Groovy Almanac Detecting groovy version Determine the groovy version in a script. (more…) Opening an URL with a proxy Set proxy config. (more…) Save URL to file Simple example how to save an image from the net to a local file. (more…) Command line interface with CommandLine Builder Simple example of the groovy commandline builder. (more…) Search in zipfile This example will search for 1.txt in the zipfile test.zip and print out the result. (more…) Examples of using range or a list in a switch statement This are two examples of using ranges in switch statements. (more…) Connect to a MySQL database Simple snippet for a connection to a MySQL database. (more…) List the methods of a groovy class This snippet show how to get a list of all methods in a groovy class. (more…) CSV parser with groovy categories This shows how categories in groovy can be used to create a simple csv parser. (more…) Measure execution time with a closure Measures the execution time with a closure. (more…) 123456» Related Random Posts Creating a temporary file Create a directory with AntBuilder Read from stdin List all subdirectories Directory contents as Ascii tree Logging with groovy Loop over Calendar Catch assertion exceptions in Groovy Measure execution time with a closure HelloWorld with AntBuilder Tags io file list directory ant AntBuilder create zip lang stdin recursiv each range line dir closure print random loop date delete rename integer method net execute url stdout stream proxy save jsch scp read run ssh timer task timer move content entry temp files groovy temporary Search"	"null"	"null"	"useful code snippets"	"true"
"Groovy Code Examples"	"PLEAC Groovy"	"http://pleac.sourceforge.net/pleac_groovy/"	"Groovy is one of the 3 languages out of 32, having completed 100% of PLEAC examples."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PLEAC-Groovy  PLEAC-Groovy Table of Contents Foreword 1. Strings (100.0%) 2. Numbers (100.0%) 3. Dates and Times (100.0%) 4. Arrays (100.0%) 5. Hashes (100.0%) 6. Pattern Matching (100.0%) 7. File Access (100.0%) 8. File Contents (100.0%) 9. Directories (100.0%) 10. Subroutines (100.0%) 11. References and Records (100.0%) 12. Packages, Libraries, and Modules (100.0%) 13. Classes, Objects, and Ties (100.0%) 14. Database Access (100.0%) 15. User Interfaces (100.0%) 16. Process Management and Communication (100.0%) 17. Sockets (100.0%) 18. Internet Services (100.0%) 19. CGI Programming (100.0%) 20. Web Automation (100.0%) A. Helpers Foreword Following the Perl Cookbook (by Tom Christiansen and Nathan Torkington, published by O'Reilly) spirit, the PLEAC Project aims to gather fans of programming, in order to implement the solutions in other programming languages. In this document, you'll find an implementation of the Solutions of the Perl Cookbook in the Groovy language.     Next     Strings"	"null"	"null"	"Groovy is one of the 3 languages out of 32, having completed 100% of PLEAC examples."	"true"
"Groovy Code Examples"	"Langref Groovy"	"http://langref.org/groovy/"	"Covers good number of problem solutions in groovy. Help contributing more solutions"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"langref.org - groovy Login | Signup langref.org - groovy add.. all clojure cpp csharp erlang fantom fsharp go haskell java ocaml perl php python ruby scala Home All Solved Unsolved Strings Numbers Regex Lists Maps Structure Files Dates OOP Networking XML Algorithms Misc Parallel Overview groovy 13% complete with 166 solutions ranging over 94 problems. There are 592 unsolved problems. submit problem | contact | sponsored by"	"null"	"null"	"Covers good number of problem solutions in groovy. Help contributing more solutions"	"true"
