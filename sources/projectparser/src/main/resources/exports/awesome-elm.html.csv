"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Awesome Elm"	""	"https://camo.githubusercontent.com/3e4c4bb80f926dbc33526b728cb1266deb0d0095/687474703a2f2f656c6d2d6c616e672e6f72672f6c6f676f2e737667"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"false"
"Examples"	"Official list"	"http://elm-lang.org/examples"	"Examples from to in official website."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"examples"	"null"	"null"	"Examples from to in official website."	"true"
"Examples"	"Builtwithelm"	"http://builtwithelm.co/"	"Web site built with elm with list of projects and apps built with Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Built With Elm"	"null"	"null"	"Web site built with elm with list of projects and apps built with Elm."	"true"
"Examples"	"Tetris"	"http://people.cs.umass.edu/%7Ejcollard/elmtris/"	"— A Tetris game for the web browser written in Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"null"	"null"	"— A Tetris game for the web browser written in Elm."	"true"
"Examples"	"Vessel"	"https://github.com/slawrence/vessel"	"A ""tunnel"" game written in Elm!"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"82"	"3"	"9"	"GitHub - slawrence/vessel: A ""tunnel"" game written in Elm! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 82 Fork 9 slawrence/vessel Code Issues 0 Pull requests 0 Pulse Graphs A ""tunnel"" game written in Elm! 18 commits 2 branches 0 releases Fetching contributors Elm 100.0% Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit b23c322 Jan 22, 2015 slawrence Merge pull request #2 from bamboo/master … update syntax to elm 0.14.1 Permalink Failed to load latest commit information. .gitignore README.md vessel.elm vessel.png better image and explosions - also go to wait screen a few secs after… Mar 2, 2014 README.md Vessel Play: http://slawrence.github.io/vessel/ Space to start and left and right arrows to move. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slawrence/vessel"	"A ""tunnel"" game written in Elm!"	"true"
"Examples"	"Sliding Puzzle"	"https://github.com/moroshko/sliding-puzzle"	"Configurable sliding puzzle game written in Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"43"	"3"	"0"	"GitHub - moroshko/sliding-puzzle: Sliding puzzle built in Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 43 Fork 0 moroshko/sliding-puzzle Code Issues 0 Pull requests 0 Pulse Graphs Sliding puzzle built in Elm http://bit.ly/playthisgamenow 49 commits 2 branches 0 releases 1 contributor JavaScript 96.0% Elm 3.8% Other 0.2% JavaScript Elm Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 7f2ce74 Nov 15, 2015 moroshko Update readme Permalink Failed to load latest commit information. .gitignore Add app.js Nov 5, 2015 App.elm Add default start and goal Nov 14, 2015 Board.elm Rename names ending with apostrophes Nov 14, 2015 README.md Update readme Nov 15, 2015 Utils.elm Add `start` and `goal` options Nov 10, 2015 app.css Move tiles by clicking them Nov 5, 2015 app.js Add default start and goal Nov 14, 2015 build.sh Add build script Nov 7, 2015 elm-package.json Add `start` and `goal` options Nov 10, 2015 index.html Get initial window dimensions using Signal.Extra.foldp' Nov 9, 2015 README.md Sliding Puzzle Classic 15-puzzle More interesting challenge (Hint: this is solvable!) Game Parameters You can set the following game parameters via the query string: width - game width. Range: [2..10]. Default: 3. height - game height. Range: [2..10]. Default: 3. start - start position of the game. For example: P,L,A,Y,T,H,I,S,G,A,M,E,N,W,O,. When start is set, you probably also want to set shuffle=0. goal - end position of the game. For example: P,L,A,Y,T,H,I,S,G,A,M,E,N,O,W, shuffle - amount of random moves to play before the game starts. Range: [0..20000]. Default: (width * height) ^ 2. size - tile size in pixels. Range: [5..200]. Default: maximizes the screen space, but doesn't go above 200. Development $ elm package install $ ./build.sh $ elm reactor Then, open http://0.0.0.0:8000/index.html License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/moroshko/sliding-puzzle"	"Configurable sliding puzzle game written in Elm."	"true"
"Examples"	"TodoMVC"	"https://github.com/evancz/elm-todomvc"	"Proper implementation of the TodoMVC app."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"492"	"26"	"169"	"GitHub - evancz/elm-todomvc: Proper implementation of the TodoMVC app Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 492 Fork 169 evancz/elm-todomvc Code Issues 1 Pull requests 1 Pulse Graphs Proper implementation of the TodoMVC app 67 commits 2 branches 0 releases 8 contributors Elm 51.9% CSS 43.2% HTML 4.9% Elm CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 42833e0 Jun 28, 2016 evancz Update to latest CSS Permalink Failed to load latest commit information. .gitignore Make changes for 0.14 Nov 24, 2014 LICENSE Longer years in license May 10, 2016 README.md Update README.md May 10, 2016 Todo.elm Update to latest CSS Jun 28, 2016 elm-package.json Begin migration to 0.17 May 10, 2016 index.html Change name of localStorage content Jun 28, 2016 style.css Update to latest CSS Jun 28, 2016 README.md TodoMVC in Elm - Try It! All of the Elm code lives in Todo.elm and relies on the elm-lang/html library. There also is a port handler set up in index.html to set the focus on particular text fields when necessary. Build Instructions Run the following command from the root of this project: elm-make Todo.elm --output elm.js Then open index.html in your browser! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/evancz/elm-todomvc"	"Proper implementation of the TodoMVC app."	"true"
"Examples"	"TodoMVC/Firebase"	"https://github.com/ThomasWeiser/todomvc-elmfire"	"Fork of TodoMVC demonstrating start-app, and Firebase as backend."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"1"	"7"	"GitHub - ThomasWeiser/todomvc-elmfire: TodoMVC+Firebase  in  Elm+ElmFire Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 32 Fork 7 ThomasWeiser/todomvc-elmfire Code Issues 1 Pull requests 0 Pulse Graphs TodoMVC+Firebase in Elm+ElmFire http://thomasweiser.github.io/todomvc-elmfire/ 26 commits 2 branches 3 releases 4 contributors Elm 58.2% CSS 35.2% Makefile 3.4% HTML 3.2% Elm CSS Makefile HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show without-elmfire-extra 2015-11-24 2015-11-10 Nothing to show New pull request Latest commit f08e1f9 Jun 16, 2016 ThomasWeiser Use https in link to demo site Permalink Failed to load latest commit information. src Some code cosmetics Jan 26, 2016 .gitignore Change directory structure. Some Elm linting. Oct 28, 2015 LICENSE initial public commit Aug 4, 2015 Makefile Change directory structure. Some Elm linting. Oct 28, 2015 README.md Use https in link to demo site Jun 16, 2016 elm-package.json Fix version dependencies Feb 7, 2016 README.md TodoMVC in Elm + ElmFire • Demo TodoMVC implemented in Elm, extending Evan Czaplicki's version, using Firebase via ElmFire and elmfire-extra for storage and real-time collaboration. Build Instructions This app needs the Elm plattform version 0.16. Compile with: elm make --yes --output js/elm.js src/TodoMVC.elm  Then open index.html in your browser. The app should connect to the shared Firebase and retrieve the current list of items. Alternatively use the enclosed Makefile on Unix-like machines: make all open  Architectural Overview The app complies with The Elm Architecture, using evancz/start-app and evancz/elm-effects. A sketch of the data flow: Inputs are coming from Firebase changes user interaction The model comprises two parts shared persistent state, mirrored from Firebase by means of ElmFire.Dict local state (filter settings, intermediate edit state) An update function takes an input event and the current model, returning a new model and possibly an effect, i.e. a task to change the Firebase data (using ElmFire.Op). A view function renders the current model as HTML Please note that content changes made by the user always flow through the Firebase layer. From there they a passed down to the new model. This utilizes the fact that the Firebase library immediately reflects local writes without waiting for a server round trip. Firebase queues up write operations during a network outage. So the app will work offline and will catch up after going online again. For adding new items the app uses Firebase's push operation, which generates chronologically sorted unique ids. The model uses a dictionary to map these ids to the items' payload. Future Work Explore architectural variations Componentize the model: split it into a shared part and a local part where the local part depends on the shared part but not the other way round. Possibly structure the code into components, as outlined in The Elm Architecture. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ThomasWeiser/todomvc-elmfire"	"Fork of TodoMVC demonstrating start-app, and Firebase as backend."	"true"
"Learn"	"Architecture Tutorial"	"https://github.com/evancz/elm-architecture-tutorial"	"How to create modular Elm code that scales nicely with your app."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2580"	"87"	"645"	"GitHub - evancz/elm-architecture-tutorial: How to create modular Elm code that scales nicely with your app Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 87 Star 2,580 Fork 645 evancz/elm-architecture-tutorial Code Issues 7 Pull requests 5 Pulse Graphs How to create modular Elm code that scales nicely with your app 135 commits 3 branches 0 releases 19 contributors Elm 100.0% Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev gh-pages master Nothing to show Nothing to show New pull request Latest commit 1fe9f92 May 19, 2016 evancz Merge pull request #83 from Zimmi48/patch-1 … Change link to HTTP to avoid security warning Permalink Failed to load latest commit information. examples change ""action"" param to ""msg"" to keep it consistent with 0.17 May 16, 2016 nesting Attempt to make code a bit nicer May 18, 2016 .gitignore Add initial set of examples Jan 11, 2015 LICENSE Update the license for 2016 Apr 24, 2016 README.md Change link to HTTP to avoid security warning May 19, 2016 elm-package.json Add nesting examples for counters May 13, 2016 README.md The Elm Architecture The Elm Architecture is a simple pattern for infinitely nestable components. This repo parallels The Elm Architecture tutorial, allowing you to follow along and compile things locally. Run The Examples Start by installing Elm and familiarizing yourself with the command line tools. Once that is done, run the following commands in your terminal to download this repo and start a server that compiles Elm for you: git clone https://github.com/evancz/elm-architecture-tutorial.git cd elm-architecture-tutorial elm-reactor Now go to http://localhost:8000/ and start looking at the examples/ directory. When you edit an Elm file, just refresh the corresponding page in your browser and it will recompile. After you get comfortable with things in the examples/ directory, check out the nesting/ directory which has examples of snapping components together. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/evancz/elm-architecture-tutorial"	"How to create modular Elm code that scales nicely with your app."	"true"
"Examples"	"<elm-ement>"	"https://github.com/ohanhi/elm-ement"	"– Minimal example of a custom element."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"0"	"2"	"GitHub - ohanhi/elm-ement: The ""Hello world"" of Elm + Web Components. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 0 Star 15 Fork 2 ohanhi/elm-ement Code Issues 1 Pull requests 0 Pulse Graphs The ""Hello world"" of Elm + Web Components. http://ohanhi.github.io/elm-ement/ 17 commits 2 branches 0 releases 2 contributors JavaScript 99.6% Other 0.4% JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit bb7cff4 Aug 6, 2015 ohanhi Merge pull request #3 from tomekwi/call-to-action … Call to action Permalink Failed to load latest commit information. webcomponents.js Add webcomponents.js polyfill Jun 23, 2015 .gitignore Add gitignore Jun 23, 2015 Hello.elm Support a custom attribute Jul 28, 2015 LICENSE Initial commit Jun 23, 2015 README.md Pimp the title :) Jul 28, 2015 elm-package.json Add initial version Jun 23, 2015 elm.js Support a custom attribute Jul 28, 2015 index.html Add charset meta Aug 6, 2015 README.md <elm-ement> Go check it out! → This is a proof of concept displaying the possibility to include standalone Elm applications as Custom Elements as per the Web Components spec. <elm-ement> does not do anything useful - it is merely a demonstration of how the beautiful functional Elm language can be used interoperably with any other HTML5 content through the familiar Web Components system. Copyright © 2015 Ossi Hanhinen. License: MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ohanhi/elm-ement"	"– Minimal example of a custom element."	"true"
"Examples"	"Elm Playground"	"http://elm-playground.maciejsmolinski.com/"	"Tiny Elm projects implemented for the sake of learning by example."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16"	"3"	"0"	"GitHub - maciejsmolinski/elm-playground: Elm Language Playground (projects). Demos: http://elm-playground.maciejsmolinski.com/ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 16 Fork 0 maciejsmolinski/elm-playground Code Issues 0 Pull requests 0 Pulse Graphs Elm Language Playground (projects). Demos: http://elm-playground.maciejsmolinski.com/ 153 commits 2 branches 0 releases Fetching contributors Elm 38.5% JavaScript 30.8% HTML 15.8% CSS 7.7% Makefile 7.1% Shell 0.1% Elm JavaScript HTML CSS Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master spotify-mini Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. match-events randomuser spotify-mini todo .gitignore LICENSE Makefile README.md index.html package.json post-sync.sh README.md Elm Playground Elm Language playground repository is supposed to consist of tiny projects that are easy to scan and reason about so that everybody can learn the language quickly by example. More about the project at the bottom of this readme. Demos: http://elm-playground.maciejsmolinski.com/ Projects Listing: Please note elm-lang and node.js must be present on your machine to play around with the projects. Spotify Mini Demo: http://elm-playground.maciejsmolinski.com/spotify-mini/ Clone the repo git clone https://github.com/maciejsmolinski/elm-playground.git && cd elm-playground Install all dependencies, compile and run server: make spotifymini (or if already installed make serve-spotifymini) View the project http://localhost:8765/webpack-dev-server/ in browser Match Events (WebWorkers and EventSource integration) Demo: http://elm-playground.maciejsmolinski.com/match-events/ Clone the repo git clone https://github.com/maciejsmolinski/elm-playground.git && cd elm-playground Install all dependencies, compile and run server: make matchevents (or if already installed make serve-matchevents) View the project http://localhost:8765/webpack-dev-server/ in browser If you want to use EventSource, run node.js server that serves match events in a separate terminal window cd match-events && node server.js and uncomment sse = new Worker('js/sse.js'); in js/index.js file to use Server Sent Events by the application Random User API Integration Demo: http://elm-playground.maciejsmolinski.com/randomuser/ Clone the repo git clone https://github.com/maciejsmolinski/elm-playground.git && cd elm-playground Install all dependencies, compile and run server: make randomuser (or if already installed make serve-randomuser) View the project http://localhost:8765/webpack-dev-server/ in browser Simple Todo List Demo: http://elm-playground.maciejsmolinski.com/todo/ Clone the repo git clone https://github.com/maciejsmolinski/elm-playground.git && cd elm-playground Install all dependencies, compile and run server: make todo (or if already installed make serve-todo) View the project http://localhost:8765/webpack-dev-server/ in browser Explanation This repository is meant to be a playground so that everybody can learn the language, break things, change things or even improve them. Feel free to create pull requests if you find these examples useful. Also, please let me know if you find them too easy or too complex or not interesting at all. Thanks for the interest and taking your time to visit the repository! Stay in Touch Have questions? Raise an issue or contact me on twitter: @maciejsmolinski Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/maciejsmolinski/elm-playground"	"Tiny Elm projects implemented for the sake of learning by example."	"true"
"Learn"	"Official tutorial"	"http://elm-lang.org/docs"	"— General information and in-depth guide with examples."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"docs"	"null"	"null"	"— General information and in-depth guide with examples."	"true"
"Learn"	"Elm’s Time Traveling Debugger"	"http://debug.elm-lang.org/"	"Debugger that lets you travel backwards and forwards in time."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Home"	"null"	"null"	"Debugger that lets you travel backwards and forwards in time."	"true"
"Learn"	"Start app"	"https://github.com/evancz/start-app"	"Make an app, start it up."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"412"	"17"	"86"	"GitHub - evancz/start-app: DEPRECATED. Moved to elm-lang/html Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 412 Fork 86 evancz/start-app Code Pull requests 0 Pulse Graphs DEPRECATED. Moved to elm-lang/html http://package.elm-lang.org/packages/elm-lang/html/latest/Html-App 39 commits 1 branch 5 releases Fetching contributors Elm 100.0% Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 2.0.2 2.0.1 2.0.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit 6f1fd86 May 16, 2016 evancz Add note that this is not used in 0.17 anymore Permalink Failed to load latest commit information. src Get rid of partial pattern Oct 5, 2015 .gitignore Initial commit May 8, 2015 LICENSE Initial commit May 8, 2015 README.md Add note that this is not used in 0.17 anymore May 16, 2016 elm-package.json Bump to 2.0.2 Oct 5, 2015 README.md DEPRECATED The equivalent of this library lives in Html.App as of Elm 0.17. You can read more about how this fits into The Elm Architecture here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/evancz/start-app"	"Make an app, start it up."	"true"
"Learn"	"Elm: Building Reactive Web Apps"	"https://pragmaticstudio.com/elm"	"Learn how to build reactive web apps using Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elm Tutorial | The Pragmatic Studio Courses | Free Tutorials | Consulting | Books | Blog | Sign In Elm: Building Reactive Web Apps Video Tutorial This course is no longer available as it is not compatible with the latest version of Elm (0.17). For the latest on Elm, we recommend An Introduction to Elm GitBook. There are plenty of JavaScript-based frameworks for building single-page web apps. But the common problem with all of them is… JavaScript. We need a better solution: not just a band-aid over JavaScript's ugly parts, but instead a whole new, fresh approach to browser programming. We need Elm. Elm apps run in the browser, but you don't write them in JavaScript. Elm embraces the good parts of functional programming, but lets you ignore the theoretical underpinnings. Indeed, Elm makes functional, reactive programming not only possible, but practical and even fun! In this course, you'll learn Elm from the ground up as we incrementally create a single-page, reactive web app. By building a real project with real code from scratch, you'll see how everything fits together. Along the way you'll discover how Elm helps you write reliable code that stays well-factored and easy to maintain even as you scale feature-rich apps. Watch Next Video → “Great ramp up from total beginner to building apps and having fun!” — Evan Czaplicki, creator of Elm “A great, practical introduction to Elm. Straightforward with a great ease-in approach to new concepts.” — Jake Trent “Love this Elm tutorial. Time to write front end code again since I don't need to use JS.” — Mike Gehard Craft Reactive Web Apps, The Elm Way Elm is a functional programming language that compiles to JavaScript and runs in the browser, designed and developed by Evan Czaplicki. Elm syntax is clean and readable. Refactoring and testing is a breeze. The world-class Elm compiler always generates reliable code, so runtime exceptions are a thing of the past. And Elm can render HTML with blazing speed. But what we love most about Elm is that you can actually build practical stuff with it quickly, which is exactly what we do in this course. Throughout this course we follow a project-based approach so you learn how to build Elms apps from start to finish. Topics are introduced only when they're required to accomplish a task that advances our app from humble beginnings to a feature-rich app. Each video tackles a new problem while reinforcing previous concepts, so you gain a deeper understanding of both the ""how"" and the ""why"". Along the way, you'll learn how to do everything the Elm way, including: Organizing an Elm project Compiling and running Elm programs Using the Elm REPL Navigating the documentation Importing modules: core libraries and community packages Calling functions and using the pipe operator Defining named functions and using anonymous functions Function currying Refactoring and structuring Elm code Generating HTML and CSS with the elm-html library List transformations: mapping, sorting, filtering, and so on Modeling application data with immutable records Creating, accessing, and updating records Describing possible states with union types Pattern matching in case expressions Let expressions Understanding the underlying type system Type aliases and type annotations Reacting to user inputs Two-way binding with input fields Using the start-app package The Elm architecture: the model-update-view pattern Writing idiomatic Elm code Whether you're simply curious about Elm, ready to start your first Elm project, or want to learn a new way of programming, this course has you covered. By the end of this tutorial, not only will you have a thorough understanding of the Elm language, but you'll also know how to properly architect Elm applications. “I love that this course was practical. We built a real application... The explanations were very clear and the course flowed from start to finish. I don't think this course could have been better.” — Philip Poots “Each lesson was short, clear, and moved the needle by building skills step-by-step. Everything was anticipated. Really, really impressive.” — Chris Jones Learn Elm, The Pragmatic Way 20 Videos This course includes 20 videos totaling 2 hours of step-by-step instruction. Each video is a combination of guided instruction, live coding, and animations. All the videos are downloadable, DRM-free, available in full 1280x720 HD resolution, and licensed for individual use only. Example Code You also get all the example code so you can follow along with the videos and experiment on your own, including: Instructions for installing Elm and getting your development environment set up A starter project with a handful of prepared files including HTML and CSS files All the Elm code for the single-page HTML app we create in the videos Cheat Sheets For handy reference during and after the course, you also get a PDF of cheat sheets that summarize all the Elm syntax, concepts, and idioms taught in this course. “I really wanted to learn Elm but was intimidated. Now I look forward to building something!” — Steve Freeman Elm |> Experienced Programmers This course is designed for experienced developers who want to learn Elm in the context of building a web app. We assume you're already fluent in HTML, CSS, and another programming language. No prior experience with functional programming, Elm, or JavaScript is assumed. As such, this course likely isn't a good fit for staunch Haskell programmers or folks already using Elm in earnest. “I thoroughly recommend this [series of tutorials] to Elm beginners who have gone through the introductory [Elm documentation] material but are still struggling to piece things together and it works just as well for those who have had no contact with Elm at all, to give you a flavour that tastes so good you will be back for more.” — Read Philip Poots' Full Course Review About Mike Mike Clark got curious about Elm in late 2014, spent the holidays toying around with it, and still just can't seem to put it down. Having programmed in many languages over the past 20 years, he found Elm to be a fresh and fun way to learn the good parts of functional programming. His enthusiasm for Elm leads naturally to wanting to teach others. Together with his wife Nicole, they own and run The Pragmatic Studio. We are grateful for Evan Czaplicki's technical review of this course. Evan is the lead designer and developer of Elm and currently works full time on Elm at NoRedInk. Related Resources Elm: Signals, Mailboxes & Ports Tutorial What is Elm? Q & A Blog Is Learning Elm Worth Your Time? 4 Ways To Know Reviews “Mike Clark is an excellent teacher. He explains the concepts clearly and concisely... He introduces everything incrementally and at no point did I feel overloaded. Quite the opposite, there were a number of times when he displayed the uncanny ability to read the questions arising in my mind while going through the material...” Read Philip Poots' Full Course Review “Everything was explained really well, working up from very simple foundations. This course is very approachable for just about anyone!” James MacAulay “A very practical, hands-on approach to learning Elm. Great course overall!” Matthew Machuga “This is a perfect, succinct introduction that helps cement the idea that Elm is a usable language for the day-to-day.” Vitor Capela “...loving the course on @elmlang! finally getting my head around this awesome #WebDev language!” Ian Taylor “I have really enjoyed the two courses on Elm. They are a great way to get some traction with a super fun language.” James Edward Gray II “Clear and professionally presented, enthusiastic speaker, well thought-out example. Top Notch!” Mark Orr “I looked at the Elm documentation and was lost, but with this course, I got a good base. I like that the incremental approach lets you take in the various concepts one at a time and build on them. I just fell in love with this FRP language and its way to build web apps.” Denis Ricard Read more reviews → Individual Use Only All the course material, including videos, exercises, and source code is copyrighted and licensed for individual use only. You'll need to purchase a copy for each student. Refund Policy We try very hard to make the descriptions of our courses accurate, and to give you representative excerpts before you buy. Despite this, we know that sometimes a course isn't what you expected. If you are not satisfied with a course, contact us within 30 days of purchase and we'll gladly issue a full refund. The Pragmatic Studio is where developers have come since 2005 to learn, practice, and improve their craft. In our acclaimed courses, you get the most up-to-date and approachable developer training around! Learn more… About Us Contact Us Blog Twitter Privacy Policy Terms of Use Courses Discounts Free Tutorials Pragmatic Books Past Events Sign up to get the latest Studio news delivered right to your inbox! Copyright © 2005–2016, The Pragmatic Studio. All Rights Reserved."	"null"	"null"	"Learn how to build reactive web apps using Elm."	"true"
"Learn"	"Elm: Signals, Mailboxes & Ports"	"https://pragmaticstudio.com/elm-signals"	"Create more reactive Elm apps by mastering signals."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elm Signals | The Pragmatic Studio Courses | Free Tutorials | Consulting | Books | Blog | Sign In Elm: Signals, Mailboxes & Ports Video Tutorial This course is no longer available as it is not compatible with the latest version of Elm (0.17). For the latest on Elm, we recommend An Introduction to Elm GitBook. Signals are the underpinning of every reactive Elm app, whether it's a canvas-based game or a web application. To react to any type of user input, you apply a function to a signal. To receive messages sent to a mailbox, you tune in to a signal. To maintain application state, you create a past-dependent signal. Communicating with JavaScript via ports? You guessed it, you use signals! Indeed, to be effective with Elm you need to master signals. In this course, we'll look in-depth at different examples and use cases. By doing so, you'll learn not just how signals work but, equally important, when and why to use them. You'll come away from this course with an appreciation for the power of signals and you'll be ready to apply them effectively in your own projects. Watch Next Video → “Just.. wow. Bravo! It's so good. Thank you for explaining this stuff so well, like usual.” — Bruce Williams “You all have done it again! An excellent course that goes well beyond explaining the fundamentals of signals. For anyone who finds the StartApp and mailboxes to be magical, this course will expose the man behind the curtain.” — Michael Niessner “The @pragmaticstudio Elm courses are the missing link when it comes to understanding the Elm language & programming model. Money well spent.” — Ben Teese Design With Signals, The Elm Way This course is loaded with practical examples of signals used in a variety of scenarios. By seeing recurring design patterns in different contexts, you'll quickly build up a strong intuition for when and why to use signals in your own code. We'll start by seeing various signals in action to understand what they are and how they work. Then we'll learn how to transform signals to react to inputs in more specialized ways. Applying these techniques, we'll create a simple game that responds to multiple user inputs. Building on that foundation, the next level is understanding how to use signals as they relate to mailboxes and ports in web apps. To do that, we'll put together a simple reactive web app with JavaScript interop, without the aid of the StartApp module. Throughout this course, you'll learn the following: Reacting to user inputs: mouse, window, keyboard, time, and so on Transforming and combining signals Sampling and filtering signals Maintaining state by folding signal values from the past Mapping signals to actions Implementing the model-update-view pattern from scratch Designing a simple canvas-based game around signals Merging multiple signals Using mailboxes to create reactive web apps Understanding how the StartApp module works JavaScript interop using incoming and outgoing ports Lots of practical examples and use cases for signals At the end of this course, you will have mastered Elm signals and have the confidence to immediately apply these techniques and patterns to your own projects! “This course had a great evolutionary path to learning Signals. It demonstrated them clearly, and by the halfway mark my jaw was dropping with the simple elegance of Elm and Signals. This was the most enjoyable thing I've learned in a while. Thanks for making it easy and fun!” — Max Baumann “Your Elm courses were exactly what I was looking for. Easy to follow. Simple approach. This is the best weekend I've had learning in a long time!” — Chris Buttery Learn Elm Signals, The Pragmatic Way 14 Videos This course includes 14 videos totaling nearly 2 hours of step-by-step instruction. Each video is a combination of guided instruction, live coding, and animations. All the videos are downloadable, DRM-free, available in full 1280x720 HD resolution, and licensed for individual use only. Example Code You also get all the example code so you can follow along with the videos and experiment on your own. Cheat Sheets For handy reference during and after the course, you also get a PDF of cheat sheets that summarize all the Elm syntax, concepts, and idioms taught in this course. “This was a perfect addition to the first Elm course. It explained signals and ports in a very straightforward and full-circle way; they are far simpler than they initially appear. I appreciate the depth of the topic, and the breadth of examples with various modules and data structures. A great course again!” — Matthew Machuga For Elm Programmers This is an intermediate-level course. We assume you already have a basic understanding of functional programming with Elm. If you're new to the Elm programming language, we strongly recommend going through our introductory Elm: Building Reactive Web Apps tutorial before taking this course. About Mike Mike Clark got curious about Elm in late 2014, spent the holidays toying around with it, and still just can't seem to put it down. Having programmed in many languages over the past 20 years, he found Elm to be a fresh and fun way to learn the good parts of functional programming. His enthusiasm for Elm leads naturally to wanting to teach others. Together with his wife Nicole, they own and run The Pragmatic Studio. 14 Videos Example Code Cheat Sheets Add To Cart  |  $35  $20 Lifetime Access Related Resources Elm: Building Reactive Web Apps Tutorial What is Elm? Q & A Blog Is Learning Elm Worth Your Time? 4 Ways To Know Reviews “The first course is a very good introductory on the language... but this course showed me how Elm can be so elegant and simple at the same time. This course was for me a series of jaw dropping moments. In summary: WOW!” David Proteau “[This course] gave me the confidence I needed to start playing around with more sophisticated examples and was a great complement to the official site and documentation.” Read Philip Poots' Full Course Review “I finally comprehend signals and mailboxes thanks to your course! Keep 'em coming!” Alex Kelley “You all have done it again! For anyone who finds the StartApp and Mailboxes to be magical, this course will expose the man behind the curtain. Finally, by choosing to discuss ports at the end of the course, you've ensured everyone goes away with a strong understanding of how Elm apps can interact with their existing Javascript.” Michael Niessner “Thanks for the awesome Elm series! Wrote my first Elm app today.” Corey Haines “This course took something I knew nothing about and quickly gave me the intuition to complete the code before finishing the videos. I felt like I was being subtly guided to figure out the solution on my own. What an incredible way to learn!” Mike Mangino “Incredibly clear explanation of some otherwise complicated concepts.” Julian Jelfs “Signals and ports are very cool and powerful, but difficult to pick up from scratch. This course is a real asset. I'm confident I'll be able to move forward with my Elm/JS hybrid app now. Great stuff!” Bill Gathen Read more reviews → Individual Use Only All the course material, including videos, exercises, and source code is copyrighted and licensed for individual use only. You'll need to purchase a copy for each student. Refund Policy We try very hard to make the descriptions of our courses accurate, and to give you representative excerpts before you buy. Despite this, we know that sometimes a course isn't what you expected. If you are not satisfied with a course, contact us within 30 days of purchase and we'll gladly issue a full refund. The Pragmatic Studio is where developers have come since 2005 to learn, practice, and improve their craft. In our acclaimed courses, you get the most up-to-date and approachable developer training around! Learn more… About Us Contact Us Blog Twitter Privacy Policy Terms of Use Courses Discounts Free Tutorials Pragmatic Books Past Events Sign up to get the latest Studio news delivered right to your inbox! Copyright © 2005–2016, The Pragmatic Studio. All Rights Reserved."	"null"	"null"	"Create more reactive Elm apps by mastering signals."	"true"
"Learn"	"Learn you an Elm"	"http://learnyouanelm.github.io/"	"Elm tutorial with exhaustive examples and descriptions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Home Learn You an Elm Based on Learn You a Haskell for a Great Good. by Miran Lipovača. Adapted for Elm by: Joey Eremondi Alex Neslusan Contents Introduction Starting Out Intro to Types Syntax in Functions Hello Recursion! Higher Order Functions Modules Making our own Types Tasks and Signals Functionally Solving Problems Map and App A Fistful of Callbacks For a Few Callbacks More Zippers Learn You An Elm Done Add disclaimer to all chapters that they are un-adapted for Elm Intro updated for Elm TODO Adapt code-snippets to Elm Remove all references to laziness Remove all reference to typeclasses Replace “Input and Output” with “Signals and Tasks” Change Monad/Applicative/Functor terminology Fix image references so can be viewed easily online Describe String vs List Char Descrive Records as an extension of tuples License This book is licensed under an Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0) license."	"null"	"null"	"Elm tutorial with exhaustive examples and descriptions."	"true"
"Learn"	"Writing native"	"https://github.com/NoRedInk/take-home/wiki/Writing-Native"	"Learn how to create native JavaScript modules for Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"227"	"28"	"14"	"Writing Native · NoRedInk/take-home Wiki · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 227 Fork 14 NoRedInk/take-home Code Issues 8 Pull requests 2 Wiki Pulse Graphs Writing Native Noah edited this page Jan 1, 2016 · 14 revisions Pages 9 Home Admin setup Candidate setup Native best practices Native types Running headless Elm Writing Native Writing your first Elm Native module Writing your first impure Elm Native module Clone this wiki locally Clone in Desktop What is Elm Native? Javascript! Straight up Javascript, wrapped in a framework. It's not type checked, it runs on a Javascript engine just like JQuery. It doesn't even have to be Javascript, it can be a compile-to-Javascript language, as long as the compile step takes place before Elm's compile step. Should I be writing Native? Elm's Native API is undocumented on purpose and subject to change. If possible, avoid writing Native. See these two threads here and here for further information. The information in this wiki should come with that warning in mind. It may be very quickly out of date. What does it look like? For a basic example, check out how to write your first Native module The theory Every Native module has a standard that it needs to follow. First, it must export itself by attaching to the global Elm object. Native should attach to Elm.Native, non-native should attach to just Elm. We must then define our module, by creating an empty object with the attribute make. make should be a function that takes an instance of the Elm object, and returns an object where each property can be accessed through the Elm code. It should also check to see if the current module is already defined to have a values property on the instance of Elm passed in. If it does, simply return that instead. These are the values that have been loaded already. Within the make function, it is possible to to use other modules. To do this, we run the make function, passing in the Elm instance. From there the module's attached properties can be used just as if it were in Elm code itself. var make = function make(localRuntime) {     localRuntime.Native = localRuntime.Native || {};     localRuntime.Native.Http = localRuntime.Native.Http || {};      if (localRuntime.Native.Http.values) {         return localRuntime.Native.Http.values;     }      var http = require('http');     var fs = require('fs');     var mime = require('mime');      var Task = Elm.Native.Task.make(localRuntime);     var Utils = Elm.Native.Utils.make(localRuntime);     var Signal = Elm.Native.Signal.make(localRuntime);     var Tuple0 = Utils['Tuple0'];     var Tuple2 = Utils['Tuple2'];      return {         'createServer': createServer(fs, http, Tuple2, Task),         'listen': F3(listen(Task)),         'on': F2(on(Signal, Tuple0))     }; }; Elm.Native.Http = {}; Elm.Native.Http.make = make; Elm internals There can be considered two parts to Elm: Elm.Native Native code, written by humans! Follows a standard structure N.B: must have ""native-modules"": true in elm-package.json for it to be included Elm Generated code, compiled from code written in Elm the language This can be broken down further, into The Elm runtime/core Provided by the core library for elm Contains a standard set of modules which are included in every Elm project Also provides bootstrapping and setup for the framework Extra Elm modules Anything that isn't part of core Note that Elm modules could have native extensions that overwrite core libraries. This is how some meta-programming in Elm is achievable. Now check out: Writing your first Native Module Running headless Elm Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/NoRedInk/take-home/wiki/Writing-Native"	"Learn how to create native JavaScript modules for Elm."	"true"
"Learn"	"Elm: Functional frontend development"	"https://dennisreimann.de/articles/elm.html"	"Series of articles about fundamentals and advanced topics."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elm – functional frontend development • Dennis Reimann Home Articles Elm Projects Contact //dennisreimannSoftware developer Elm – functional frontend development Elm is a functional programming language that compiles to JavaScript. Opposed to JavaScript, Elm is statically typed. The compiler type checks the code and guarantees to generate reliable code that will not throw any runtime exceptions. Consequently even the view is statically typed – the templates, which are written in elm-html, are based on the concept of the Virtual DOM, just like in React. The syntax might look odd at first if you have not worked with a functional programming language before, nevertheless it is very clear and does not take much time to get used to in my opinion. The following articles introduce you to the fundamentals of funtional frontend development with Elm. Fundamentals Elm SetupInstallation and building the first project[en | de] So you are ready to dive into the next generation approach of creating frontends for web applications? How to install Elm and which tools do you need to build your first project? Besides clarifying these questions we will also look at a toolchain that goes beyond the simple Hello World … more Elm Modules and ImportsThe module system[en | de] In the previous article which describes how to setup your first Elm project we already needed to import a module. Importing a module exposes its functionality in the context of the program that is loading the module. In Elm there are different ways to import modules and we will have a look at these in this article. more Elm FunctionsSyntax, Piping, and Currying[en | de] This article spotlights the central construct of the Elm programming language: Functions. What does the definition of a function look like, how can functions be chained via piping and what the heck is currying? Let us have a closer look … more Elm Data Structures (1)Lists, Arrays, Sets, and Dictionaries[en | de] In Elm there are different kinds of data structures that can contain elements. This article spotlights the iterable structures lists, arrays, sets, and dictionaries, which support the basic operations of functional programming like map, filter, and folding/reducing. more Elm Data Structures (2)Records and Tuples[en | de] After we have already covered the iterable data structures in the previous article, we will now work wth records and tuples, which can contain elements of different types. We will also have a look at how to access values using destructuring and get to know about type aliases … more Elm Data Structures (3)Union Types[en | de] Now that we have already looked at the data structures lists, arrays, sets, and dictionaries as well as records and tuples, there is only one more basic structure we need to talk about: The so called Union Type. more Contact Dennis Reimann mail@dennisreimann.de +49 (0)151 22 63 03 17 Contact details & Imprint"	"null"	"null"	"Series of articles about fundamentals and advanced topics."	"true"
"Learn"	"Elm Tutorial"	"http://www.elm-tutorial.org/"	"A tutorial on developing single page web applications with Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Choose a language · Elm Tutorial Choose a language English Français"	"null"	"null"	"A tutorial on developing single page web applications with Elm."	"true"
"Learn"	"Elm cheat sheet"	"https://github.com/izdi/elm-cheat-sheet"	"Syntax and features overview."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"250"	"20"	"12"	"GitHub - izdi/elm-cheat-sheet: An overview of Elm syntax and features Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 250 Fork 12 izdi/elm-cheat-sheet Code Issues 0 Pull requests 0 Pulse Graphs An overview of Elm syntax and features 37 commits 1 branch 0 releases 5 contributors Elm 100.0% Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 9f46c26 Jun 18, 2016 izdi committed on GitHub Updated logo url Permalink Failed to load latest commit information. .gitignore Cheat Sheet init Feb 7, 2016 CONTRIBUTING.md Update README.md Feb 9, 2016 HelloWorld.elm HelloWorld.elm Feb 16, 2016 LICENSE Cheat Sheet init Feb 7, 2016 README.md Updated logo url Jun 18, 2016 README.md Elm Cheat Sheet Table of Contents Hello World Comments Modules Imports Tools REPL Compile Packaging Publish Documentation HTML Embedding Primitives Numbers Strings Booleans Other Collections Lists Tuples Records Other Functions Anonymous Infix Prefix Types Union Types Maybe Type Aliases Type Annotation Operators Arithmetic Bitwise Comparison Logical Function Composition Other Control Statements If Case-of Let-in Ports Elm in a nutshell purely functional language statically typed no runtime exceptions outperforms most popular rendering libraries package manager built-in tooling HTML, CSS, JavaScript interoperability clean syntax I like frontend again... Hello World File HelloWorld.elm: import Html exposing (h1, text) import Html.Attributes exposing (id)  -- Hello world example main =   h1 [id ""hw""] [text ""Hello World!""] Comments -- Single line comment  {- Multi-line comment   -} Comments for package documentation Modules -- Defining a module, exports everything by default module Mymodule where  -- Export only specified entities module Mymodule (Type, value) where  -- Export all or specific states of type module Mymodule      ( Error(Forbidden, Timeout)     , Stuff(..)     ) where  type Error     = Forbidden String     | Timeout String     | NotFound String Imports -- qualified imports import String                       -- String.toUpper, String.repeat import String as Str                -- Str.toUpper, Str.repeat  -- unqualified imports import Mymodule exposing (..)                 -- Error, Stuff import Mymodule exposing ( Error )            -- Error import Mymodule exposing ( Error(..) )        -- Error, Forbidden, Timeout import Mymodule exposing ( Error(Forbidden) ) -- Error, Forbidden Tools REPL elm repl / elm-repl Import required modules > import List Get function signature > List.map <function> : (a -> b) -> List a -> List b > (++) <function> : appendable -> appendable -> appendable Elm expressions return resulting value and type > 1 + 1 2 : number Backslash \ is for multi-line expressions > fn a b = \ |    a + b <function> : number -> number -> number  Compile elm make / elm-make # Default compilation  elm make HelloWorld.elm -> index.html  # Custom name $ elm make HelloWorld.elm --output hw.js  # Multiple files $ elm make HelloWorld.elm MyModule.elm --output hw.js  # With warnings $ elm make HelloWorld.elm --warn  # To HTML $ elm make HelloWorld.elm --output hw.html Packaging elm package / elm-package Installation automatically adds dependencies in package.json. # Install a package $ elm-package install evancz/elm-html  # Specific version $ elm-package install evancz/elm-html 1.0.0  # Diff two versions $ elm-package diff evancz/virtual-dom  2.0.0 2.1.0 Comparing evancz/virtual-dom 2.0.0 to 2.1.0... This is a MINOR change.  ------ Changes to module VirtualDom - MINOR ------      Added:         attributeNS : String -> String -> String -> VirtualDom.Property Documentation Publishing a package requires well documented code. module Documentation      ( Type     , value     , anyfinCanHappen     )     where  {-| Module level documentation   # Just a header, what to include below  @docs Type, value  # About Anyfin @docs anyfinCanHappen  -}  import Random exposing (int)  {-| Type level documentation comment -} type Type = Bool  {-|-} -- Empty comment above value : Int value = 1 + 1  {-| More on anyfinCanHappen -} anyfinCanHappen : Generator Int anyfinCanHappen =      int 0 64  {-| This value is not exported, so isn't required -} -- Use basic comment syntax imNotExported =     ""Don't need to comment me"" Documentation comment starts {-| ends with -} Module documentation comes after module declaration, before the imports Functions are grouped into related sections by keyword @docs <args> and declared with Markdown Each exported entity should have documentation comment on top of its declaration Publish Add README.md otherwise publishing will fail All packages start with initial version 1.0.0 Versions all have exactly three parts: MAJOR.MINOR.PATCH PATCH - the API is the same, no risk of breaking code MINOR - values have been added, existing values are unchanged MAJOR - existing values have been changed or removed elm-package.json source-directories - array of directories to look up for project source code inside the working directory exposed-modules - modules that exposed to a user after publishing, kind of interface to your internal API. # elm-package.json source-directories"": [     ""."",     ""SubOne"",     ""SubTwo"" ] ""exposed-modules"": [     ""SubOne"",     ""Goodmodule"",     ""Module"" ]  ├── SubOne │   └── SubOne.elm        # Compiled and exposed ├── SubOne │   └── SubTwo.elm        # Compiled, but unexposed ├── SubOne │   └── SubThree.elm      # Compiler won't see the source, unexposed to the users  ├── README.md ├── elm-package.json ├── Goodmodule.elm        # Compiled and exposed   └── Module.elm            # Compiled and exposed Publish $ git tag -a 1.0.0 -m ""initial release"" $ git push --tags  $ elm-package publish Updating $ elm-package bump  $ git tag -a 1.0.1 -m ""secondary release"" $ git push --tags  $ elm-package publish HTML Embedding Running fullscreen elm-make HelloWorld.elm -> elm.js <script type=""text/javascript"" src=""elm.js""></script> <script type=""text/javascript"">     Elm.fullscreen(Elm.HelloWorld); </script> Embed explicitly in a html element <script type=""text/javascript"" src=""elm.js""></script> <script type=""text/javascript"">     var elmHolder = document.getElementById('hw-wrapper');      Elm.embed(Elm.HelloWorld, elmHolder); </script> Run without graphics Elm.worker(Elm.HelloWorld); Primitives Numbers Numeric types are number and Float, number represents both Int and Float: > 1 1 : number > 2.0 2 : Float > truncate 0.1 0 : Int > truncate 1 1 : Int Strings String types are char and String > 'a' 'a' : Char > ""Hello"" ""Hello"" : String Multi-line string """""" Hello World """""" Single quotes are for char only > 'ab' -- SYNTAX PROBLEM -- > ""ab"" ""ab"" : String Booleans > True True : Bool > False False : Bool Other comparable - ints, floats, chars, strings, lists, tuples appendable - strings, lists, text. Kind of dynamic types are represented as a, b, c etc. meaning that you can pass any value, even functions Collections Lists A list holds a collection of related values separated by commas and enclosed in square brackets. All the values in a list must have the same type: > [] [] : List a > [1,2,3] [1,2,3] : List number > [""a"", ""b"", ""c""] [""a"",""b"",""c""] : List String Ways to create a list > [1..4] > [1,2,3,4] > 1 :: [2,3,4] > 1 :: 2 :: 3 :: 4 :: [] Tuples Tuples package two or more expressions into a single expression. The type of a tuple records the number of components and each of their types. > (1, ""2"", True) (1,""2"",True) : ( number, String, Bool ) Also possible, put as many commas as you'll have values inside a tuple > (,,,) 1 True 'a' [] (1,True,'a',[]) : ( number, Bool, Char, List a ) Destructuring (x, y) = (1, 2) > x 1 : number Records Records are immutable. A record is a collection of key/value pairs, similar to objects in JavaScript or dictionary in Python myRecord =   { style = ""Blue"",    number = 1,     isCool = True   } Accessing records > myRecord.style ""Blue"" : String > .style myRecord ""Blue"" : String Updating records returns a new record > updatedRecord = { myRecord | style = ""Red"", number = 10, isCool = False } > myRecord.style ""Blue"" : String > updatedRecord.style ""Red"" : String Destructuring { style, number, isCool } = myRecord > style ""Blue"" : String Other Core library also has: Array Dict Set Functions Basics -- function name | arguments names = function body sum a b = a + b  -- combine arguments in a tuple sum (a, b) = a + b All functions in Elm are curried by default. If you have a function of 2 arguments, it takes one argument and returns a function that takes another argument: -- Both are equal myFunction arg1 arg2 ((myFunction arg1) arg2)  -- Partial application > minus x y = (-) x y <function> : number -> number -> number > minus1 = minus 1 <function> : number -> number > minus1 11 -10 : number Anonymous Also known as lambdas -- (\function arguments -> function body) -- parenthesized, content starts with backslash (\n -> n < 0) (\x y -> x * y) Infix Functions that placed between two arguments and enclosed in backticks ` are called infix -- Normal > min 1 2 1 : number  -- Infix > 1 `min` 2 1 : number Prefix Functions that placed in front of arguments while enclosed in parentheses are called prefix -- Normally you would do this > ""abcde"" ++ ""fghij"" ""abcdefghij"" : String  -- Prefix  > (++) ""abcde"" ""fghij"" ""abcdefghij"" : String Types Union Types Elm allows to create custom types known as union types. The expression below creates a type which can have one of the values (or tags) from the right. Union types tightly coupled with case-of statement. type Movement = Right | Left | Stop Tags bring additional information, after tag itself comes a type or multiple types. type Movement      = Right Int      | Left Int     | Stop Bool     | Coordinates (Float, Float)  -- passing to the function myFunction ( Coordinates (45.7, 67.5) ) Union types can also have type variables type Person a   = Name String   | Surname String   | Age Int   | About a Maybe A Maybe can help you with optional arguments, error handling, and records with optional fields. Think of it as a kind ofnull -- Maybe resides in a module import Maybe exposing ( Maybe(..) )  -- Takes an argument that can be filled with any value type Maybe a = Just a | Nothing Type annotation explicitly tells that it will give back an Int or it won't. getId : Int -> Maybe Int getId id =   if id >= 0 then     Just id   else     Nothing Type Aliases You can give existing types a custom name with type alias type alias Name = String type alias Dob = String  type alias Record = { name: Name, dob: Dob } We can use it later annotating function record : Record record =     { name = ""Dave"", dob = ""27/08/1999 } But still type alias equals to it's parent type type alias Name = String  name : Name name =   ""Dave""  secondName : String secondName =   ""Dave""  -- True name == secondName Type Annotation Elm, like most ML dialects, automatically infers most types. -- function name : 1st arg type -> 2nd arg type -> return type fnc : Int -> List -> Int Example below is read as function that takes an a value and returns a b value, list of a values returns a list of b values map: (a -> b) -> List a -> List b Pattern matching on record fields -- Requires the argument with x and y fields multiply {x,y} =     x * y Annotating records coordinates : { x : Float, y : Float } coordinates =      { x = 0,       y = 0     }    Operators In a nutshell Elm operators are functions. Arithmetic Operator Description Type hint + addition number -> number -> number - subtraction number -> number -> number * multiplication number -> number -> number / floating point division Float -> Float -> Float // integer division, discard the reminder Int -> Int -> Int ^ exponentiation number -> number -> number % modulo Int -> Int -> Int Bitwise Operator Description Type hint and bitwise AND Int -> Int -> Int or bitwise OR Int -> Int -> Int xor biwise XOR Int -> Int -> Int Comparison Operator Description Type hint == equal comparable -> comparable -> Bool /= not equal comparable -> comparable -> Bool < less than comparable -> comparable -> Bool <= less than or equal comparable -> comparable -> Bool > greater than comparable -> comparable -> Bool >= greater than or equal comparable -> comparable -> Bool Logical Operator Description Type hint && logical and Bool -> Bool -> Bool || logical or Bool -> Bool -> Bool not logical not Bool -> Bool Function Composition Operator Description Type hint <| backward (pipe) function application f <| x == f x (a -> b) -> a -> b |> forward (pipe) function application x |> f == f x a -> (a -> b) -> b << composes functions into one, arguments first applied to the function from the right side (b -> c) -> (a -> b) -> a -> c >> same as before except arguments first applied to the function from the left side (a -> b) -> (b -> c) -> a -> c Other Operator Description Type hints ++ put appendable things together appendable -> appendable -> appendable :: add an element to the front of a list a -> List a -> List a as keyword that creates aliases for values (x, y) as t == t = (x, y) a -> a Control statements If All the branches of an if need to match so that no matter which one we take, we get back the same type of value overall. if a < 1 then      ""It's zero""  else      ""Non-zero""  -- Multi-line. if y > 0 then     ""Greater""    else if x /= 0 then     ""Not equals"" else     ""silence"" Elm does not have the notion of “truthiness”. The condition must evaluate to True or False, and nothing else. > if 1 then ""nope"" else ""nope again"" - TYPE MISMATCH -- Case-of Case tries to match the value of type against patterns defined after the of keyword type User     = Activated     | Deleted  update state =   case state of     Activated ->       -- do something     Deleted ->       -- do again In case of passing tags with additional properties, parameters are passed along with type checking type User     = Activated Int     | Deleted (Int, String)  update state =   case state of     Activated value ->       -- do something with value     Deleted values ->       -- do something with values  update ( Activated 1 ) update ( Deleted (0, ""gone"") ) Let-in let allows you to define intermediate values. let   x = 3 * 8   y = 4 ^ 2 in   x + y let helps simplify complex expressions let   activeUsers = List.filter (\u -> u.state /= 1) model.users in   { model | user = activeUsers} Ports Ports are a general purpose way to communicate with JavaScript. From JavaScript to Elm -- define port port portName : Signal String var main = Elm.embed(Elm.Main, div, { portName: ""Initial Value"" });  // send into port main.ports.portName.send(""Port value""); From Elm to JavaScript port showPortName : Signal String port showPortName : =     portName function logName(name) {     console.log(name); }  // subscribe to receive events main.ports.showPortName.subscribe(logName);  // unsubscribe main.ports.showPortName.unsubscribe(logName); Type interoperability JavaScript Elm Booleans Bool Strings Char, String Arrays List, Array, Tuples (fixed-length) Objects Records Events Signals null Maybe Nothing Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/izdi/elm-cheat-sheet"	"Syntax and features overview."	"true"
"Learn"	"Learn Elm in Y Minutes"	"https://learnxinyminutes.com/docs/elm/"	"Syntax and features overview. The Elm page on"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3696"	"155"	"1438"	"GitHub - adambard/learnxinyminutes-docs: Code documentation written as code! How novel and totally my idea! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 155 Star 3,696 Fork 1,438 adambard/learnxinyminutes-docs Code Issues 82 Pull requests 84 Pulse Graphs Code documentation written as code! How novel and totally my idea! http://learnxinyminutes.com/ 5,144 commits 7 branches 0 releases 857 contributors TeX 99.9% HTML 0.1% TeX HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master-cn master-es master new-contributing p6-array2list revert-1115-master revert-1936-master Nothing to show Nothing to show New pull request Latest commit 8f99c7a Jul 12, 2016 vendethiel committed on GitHub fix #2308 Permalink Failed to load latest commit information. bg-bg Create bg-bg/perl.html.markdown (#2255) May 13, 2016 cs-cz Fix cs-cz/javascript headers (#1773) May 27, 2016 de-de [java/de] Initial translation added. (#1391) Jun 27, 2016 el-gr Update css-gr.html.markdown (#2263) May 19, 2016 es-es #1672 metadata Jun 26, 2016 fa-ir fix fa-ir/css Mar 13, 2016 fi-fi Fix capitalization of GitHub Feb 23, 2016 fr-fr [fr/ruby-ecosytem] Translated ruby-ecosytem article in French (#1857) Jun 29, 2016 hd-hd Metadata fixups for #1673 Jun 26, 2016 hu-hu metadata fixup for #1874 Jun 26, 2016 id-id [json/id-id] update changes for ID translation (#2305) Jul 9, 2016 it-it #1630 Jun 26, 2016 ja-jp [bash-jp/ja-jp] Corrected spelling. seperated -> separated Feb 17, 2016 ko-kr adds Korean translation for Erlang Feb 28, 2016 lt-lt Update json-lt.html.markdown Mar 21, 2016 ms-my Merge pull request #1691 from hack1m/sass-my-translation Mar 13, 2016 nl-nl Add dutch translation of markdown (#1724) Jun 26, 2016 no-nb translating done Apr 26, 2015 pl-pl [json/pl] Translated JSON tutorial (#2079) Jun 26, 2016 pt-br #1421 Jun 26, 2016 pt-pt Update swift.html.markdown Jun 26, 2016 ro-ro Attempt at #2299 Jul 6, 2016 ru-ru Merge pull request #2186 from kafeg/patch-1 May 28, 2016 sk-sk #1517 Jun 26, 2016 sv-se Fix folder name, lang value and a typo Mar 15, 2016 ta_in Clean up various errors Feb 12, 2016 tr-tr TypeScript Turkish translation (#2246) Apr 28, 2016 uk-ua add me to list of contributors May 14, 2016 vi-vn Update objective-c-vi.html.markdown Mar 15, 2016 zh-cn update according to reviewer feedback Jun 7, 2016 zh-tw [Elixir/zh-Tw]Translation for Elixir of zh-tw Apr 22, 2016 .gitignore Updated, referencing #2185 Mar 14, 2016 CONTRIBUTING.markdown Resolve conflicts from merge Feb 15, 2016 HTML-fr.html.markdown Create HTML-fr.html.markdown (#1843) Jun 27, 2016 PULL_REQUEST_TEMPLATE.md YESSSSS! Feb 17, 2016 README.markdown Resolve conflicts from merge Feb 15, 2016 amd.html.markdown removing whitespace all over Oct 7, 2015 asciidoc.html.markdown [asciidoc/en] fixed a couple of typos Feb 17, 2016 asymptotic-notation.html.markdown Fixed typos and content exceeding beyond 80 chars Mar 12, 2016 bash.html.markdown [bash/en] Addition to bash (#2302) Jul 10, 2016 bf.html.markdown brainfuck->bf Feb 12, 2016 binary-search.html.markdown fixup filename for #1879 Jun 26, 2016 c++.html.markdown Added the Logical and bitwise operators section, fixes merge issue with Jun 27, 2016 c.html.markdown Fix c - the first character of ILoveC is I not i (#2253) May 12, 2016 chapel.html.markdown Fix capitalization of GitHub Feb 24, 2016 clojure-macros.html.markdown removing whitespace all over Oct 8, 2015 clojure.html.markdown Copy arrow docs from french. Oct 18, 2015 cmake.html.markdown tiny fixes to cmake May 30, 2016 coffeescript.html.markdown Merge pull request #1424 from AndyBrown91/coffeescript Oct 9, 2015 coldfusion.html.markdown replaced &lt; and &gt; in pre block Dec 18, 2015 common-lisp.html.markdown [common-lisp/en] Fix code in examples Dec 9, 2015 compojure.html.markdown Use keywords in POST/PUT examples May 30, 2015 csharp.html.markdown Correct ""Bycles"" to ""Bicycles"""" (#2293) Jun 28, 2016 css.html.markdown [CSS/en] Adding border related styleguides (#2301) Jul 8, 2016 d.html.markdown fix parallelism example typo Jan 2, 2016 dart.html.markdown Update dart.html.markdown Oct 31, 2015 dynamic-programming.html.markdown Feature: adds Dynamic Programming tutorial (#1885) Jun 26, 2016 edn.html.markdown Clean up various errors Feb 13, 2016 elisp.html.markdown [elisp/en] Fix typo Oct 22, 2015 elixir.html.markdown Elixir agents/maps, Ruby conventions/docs (#2116) Jul 12, 2016 elm.html.markdown fix #2295 Jul 2, 2016 erlang.html.markdown Replaced 'or' with a semicolons Nov 19, 2015 factor.html.markdown [factor/en] minor typo. dont -> don't Mar 5, 2016 file.erb Added filename parameter Jun 29, 2013 forth.html.markdown [forth/en] don't -> don't Mar 14, 2016 fsharp.html.markdown [fsharp/en] typos Mar 15, 2016 git.html.markdown Fix git pull --rebase explanation (#2262) May 18, 2016 go.html.markdown Updated closure Jun 4, 2016 groovy.html.markdown [groovy/es] Groovy translated to Spanish (#1791) May 27, 2016 hack.html.markdown removing whitespace all over Oct 8, 2015 haml.html.markdown Merge pull request #1438 from chashmeetsingh/patch-8 Oct 12, 2015 haskell.html.markdown Merge pull request #1758 from patrikja/patch-2 Feb 11, 2016 haxe.html.markdown [haxe/en] Adding colon after comments May 20, 2015 hy.html.markdown Merge pull request #1574 from Zirak/patch-1 Mar 11, 2016 inform7.html.markdown Add a try at an Inform 7 tutorial. Jan 22, 2016 java.html.markdown [Java/en] Adding a reference for treemap (#2300) Jul 8, 2016 javascript.html.markdown Added new resource to javascript Oct 31, 2015 json.html.markdown [json/en] Cut noise, formatting, links. Oct 20, 2015 julia.html.markdown Update Dict and Set Syntax (#2296) Jul 2, 2016 kotlin.html.markdown [kotlin/en] Add examples of sequences (#2214) Jun 26, 2016 latex.html.markdown Replace invite sign $ by > in compilation example Mar 31, 2016 less.html.markdown [less/en] paranthesis -> parenthesis Mar 6, 2016 livescript.html.markdown removing whitespace all over Oct 8, 2015 lua.html.markdown [elisp/en] Fix typo Oct 28, 2015 make.html.markdown Merge pull request #2167 from divayprakash/typos-fix Mar 12, 2016 markdown.html.markdown fixed content extending beyond 80 chars Mar 18, 2016 matlab.html.markdown Add a section on code sections/cells (#1855) Jun 26, 2016 neat.html.markdown removing whitespace all over Oct 8, 2015 nim.html.markdown [nim/en] Correct syntax highlighting Mar 23, 2016 nix.html.markdown Remove nix highlighting (we don't have it) May 19, 2016 objective-c.html.markdown fix #2308 Jul 12, 2016 ocaml.html.markdown Change anonymous function in List.filter example Mar 26, 2016 paren.html.markdown Updating header with contribution name Oct 20, 2015 pcre.html.markdown Add an example of trap command (#1826) Jun 26, 2016 perl.html.markdown [perl/en] Fix line formatting and use $x instead of $a Apr 15, 2016 perl6.html.markdown Fixed instance where wrong variable name was used Mar 20, 2016 pets.csv Create pets.csv Jun 29, 2013 php-composer.html.markdown [php-composer/en] Add new tool document for Composer, PHP's dependenc… Oct 20, 2015 php.html.markdown Change curly braces statement (#1804) Jun 16, 2016 pogo.html.markdown Fixed typo at the end Dec 22, 2014 powershell.html.markdown [PowerShell/en]: fixed typos/layout. Added some extra aliases/info. Jan 8, 2016 purescript.html.markdown [purescript/en] comparisions -> comparisons Feb 27, 2016 python.html.markdown [python/en] Set, dict, and generator comprehensions (#2298) Jul 3, 2016 python3.html.markdown [python/en] Set, dict, and generator comprehensions (#2298) Jul 3, 2016 pythonstatcomp.html.markdown Update pythonstatcomp.html.markdown Mar 18, 2016 qt.html.markdown Added document about Qt framework (#1444) Jun 26, 2016 r.html.markdown fix spaces at end-of-lines again Oct 20, 2015 racket.html.markdown [racket/en] Add more details about Racket (#2278) Jun 26, 2016 red.html.markdown removing whitespace all over Oct 8, 2015 rst.html.markdown [en/RST] Add RST introduction (#1723) Jun 26, 2016 ruby-ecosystem.html.markdown Ruby 1.9.x is also retired Oct 6, 2015 ruby.html.markdown Elixir agents/maps, Ruby conventions/docs (#2116) Jul 12, 2016 rust.html.markdown Update rust.html.markdown Jun 26, 2016 sass.html.markdown [SASS] Add control directives, and misc. fixes (#1805) Jun 19, 2016 scala.html.markdown Add example of an int is divided by a double (#2284) Jun 21, 2016 self.html.markdown [self-en] separeated -> separated Feb 22, 2016 smalltalk.html.markdown Update smalltalk.html.markdown May 11, 2016 solidity.html.markdown Security additions + edits (#2281) Jun 20, 2016 standard-ml.html.markdown [racket/en] Add more details about Racket (#2278) Jun 26, 2016 swift.html.markdown Add documentation comment for If let Feb 19, 2016 tcl.html.markdown tcl: fix error in no-braces example (#2274) Jun 6, 2016 tmux.html.markdown Remove obsolete utf-8 options. (#2294) Jun 28, 2016 typescript.html.markdown Added typescript-pt.html.markdown (#1699) Jun 26, 2016 vim.html.markdown Added vim.html.markdown (#1744) Apr 28, 2016 visualbasic.html.markdown correction Nov 8, 2015 whip.html.markdown [whip/en] Fix typos Oct 31, 2015 wolfram.html.markdown Rename wolfram.md to wolfram.html.markdown Jan 1, 2016 xml.html.markdown [xml/en] Grammar, formatting. Made more 'inlined'. Oct 20, 2015 yaml.html.markdown [yaml/en] Add more resources (#1666) Apr 28, 2016 zfs.html.markdown Merge pull request #1644 from fliiiix/patch-1 Mar 11, 2016 README.markdown Learn X in Y minutes Whirlwind tours of (several, hopefully many someday) popular and ought-to-be-more-popular programming languages, presented as valid, commented code and explained as they go. We need YOU!... ... to write more inline code tutorials. Just grab an existing file from this repo and copy the formatting (don't worry, it's all very simple). Make a new file, send a pull request, and if it passes muster I'll get it up pronto. Remember to fill in the ""contributors"" fields so you get credited properly! Contributing All contributions are welcome, from the tiniest typo to a brand new article. Translations in all languages are welcome (or, for that matter, original articles in any language). Send a pull request or open an issue any time of day or night. Please prepend the tag [language/lang-code] to your issues and pull requests. For example, [python/en] for English Python. This will help everyone pick out things they care about. We're happy for any contribution in any form, but if you're making more than one major change (i.e. translations for two different languages) it would be super cool of you to make a separate pull request for each one so that someone can review them more effectively and/or individually. For a detailed style guide, please review the full CONTRIBUTING guidelines. License Contributors retain copyright to their work, and can request removal at any time. By uploading a doc here, you agree to publish your work under the default Creative Commons Attribution-ShareAlike 3.0 Unported licensing included on each doc page. Anything not covered by the above -- basically, this README -- you can use as you wish, I guess. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adambard/learnxinyminutes-docs"	"Syntax and features overview. The Elm page on"	"true"
"Learn"	"learnxinyminutes.com"	"https://learnxinyminutes.com"	"Syntax and features overview. The Elm page on"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3696"	"155"	"1438"	"GitHub - adambard/learnxinyminutes-docs: Code documentation written as code! How novel and totally my idea! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 155 Star 3,696 Fork 1,438 adambard/learnxinyminutes-docs Code Issues 82 Pull requests 84 Pulse Graphs Code documentation written as code! How novel and totally my idea! http://learnxinyminutes.com/ 5,144 commits 7 branches 0 releases 857 contributors TeX 99.9% HTML 0.1% TeX HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master-cn master-es master new-contributing p6-array2list revert-1115-master revert-1936-master Nothing to show Nothing to show New pull request Latest commit 8f99c7a Jul 12, 2016 vendethiel committed on GitHub fix #2308 Permalink Failed to load latest commit information. bg-bg Create bg-bg/perl.html.markdown (#2255) May 13, 2016 cs-cz Fix cs-cz/javascript headers (#1773) May 27, 2016 de-de [java/de] Initial translation added. (#1391) Jun 27, 2016 el-gr Update css-gr.html.markdown (#2263) May 19, 2016 es-es #1672 metadata Jun 26, 2016 fa-ir fix fa-ir/css Mar 13, 2016 fi-fi Fix capitalization of GitHub Feb 23, 2016 fr-fr [fr/ruby-ecosytem] Translated ruby-ecosytem article in French (#1857) Jun 29, 2016 hd-hd Metadata fixups for #1673 Jun 26, 2016 hu-hu metadata fixup for #1874 Jun 26, 2016 id-id [json/id-id] update changes for ID translation (#2305) Jul 9, 2016 it-it #1630 Jun 26, 2016 ja-jp [bash-jp/ja-jp] Corrected spelling. seperated -> separated Feb 17, 2016 ko-kr adds Korean translation for Erlang Feb 28, 2016 lt-lt Update json-lt.html.markdown Mar 21, 2016 ms-my Merge pull request #1691 from hack1m/sass-my-translation Mar 13, 2016 nl-nl Add dutch translation of markdown (#1724) Jun 26, 2016 no-nb translating done Apr 26, 2015 pl-pl [json/pl] Translated JSON tutorial (#2079) Jun 26, 2016 pt-br #1421 Jun 26, 2016 pt-pt Update swift.html.markdown Jun 26, 2016 ro-ro Attempt at #2299 Jul 6, 2016 ru-ru Merge pull request #2186 from kafeg/patch-1 May 28, 2016 sk-sk #1517 Jun 26, 2016 sv-se Fix folder name, lang value and a typo Mar 15, 2016 ta_in Clean up various errors Feb 12, 2016 tr-tr TypeScript Turkish translation (#2246) Apr 28, 2016 uk-ua add me to list of contributors May 14, 2016 vi-vn Update objective-c-vi.html.markdown Mar 15, 2016 zh-cn update according to reviewer feedback Jun 7, 2016 zh-tw [Elixir/zh-Tw]Translation for Elixir of zh-tw Apr 22, 2016 .gitignore Updated, referencing #2185 Mar 14, 2016 CONTRIBUTING.markdown Resolve conflicts from merge Feb 15, 2016 HTML-fr.html.markdown Create HTML-fr.html.markdown (#1843) Jun 27, 2016 PULL_REQUEST_TEMPLATE.md YESSSSS! Feb 17, 2016 README.markdown Resolve conflicts from merge Feb 15, 2016 amd.html.markdown removing whitespace all over Oct 7, 2015 asciidoc.html.markdown [asciidoc/en] fixed a couple of typos Feb 17, 2016 asymptotic-notation.html.markdown Fixed typos and content exceeding beyond 80 chars Mar 12, 2016 bash.html.markdown [bash/en] Addition to bash (#2302) Jul 10, 2016 bf.html.markdown brainfuck->bf Feb 12, 2016 binary-search.html.markdown fixup filename for #1879 Jun 26, 2016 c++.html.markdown Added the Logical and bitwise operators section, fixes merge issue with Jun 27, 2016 c.html.markdown Fix c - the first character of ILoveC is I not i (#2253) May 12, 2016 chapel.html.markdown Fix capitalization of GitHub Feb 24, 2016 clojure-macros.html.markdown removing whitespace all over Oct 8, 2015 clojure.html.markdown Copy arrow docs from french. Oct 18, 2015 cmake.html.markdown tiny fixes to cmake May 30, 2016 coffeescript.html.markdown Merge pull request #1424 from AndyBrown91/coffeescript Oct 9, 2015 coldfusion.html.markdown replaced &lt; and &gt; in pre block Dec 18, 2015 common-lisp.html.markdown [common-lisp/en] Fix code in examples Dec 9, 2015 compojure.html.markdown Use keywords in POST/PUT examples May 30, 2015 csharp.html.markdown Correct ""Bycles"" to ""Bicycles"""" (#2293) Jun 28, 2016 css.html.markdown [CSS/en] Adding border related styleguides (#2301) Jul 8, 2016 d.html.markdown fix parallelism example typo Jan 2, 2016 dart.html.markdown Update dart.html.markdown Oct 31, 2015 dynamic-programming.html.markdown Feature: adds Dynamic Programming tutorial (#1885) Jun 26, 2016 edn.html.markdown Clean up various errors Feb 13, 2016 elisp.html.markdown [elisp/en] Fix typo Oct 22, 2015 elixir.html.markdown Elixir agents/maps, Ruby conventions/docs (#2116) Jul 12, 2016 elm.html.markdown fix #2295 Jul 2, 2016 erlang.html.markdown Replaced 'or' with a semicolons Nov 19, 2015 factor.html.markdown [factor/en] minor typo. dont -> don't Mar 5, 2016 file.erb Added filename parameter Jun 29, 2013 forth.html.markdown [forth/en] don't -> don't Mar 14, 2016 fsharp.html.markdown [fsharp/en] typos Mar 15, 2016 git.html.markdown Fix git pull --rebase explanation (#2262) May 18, 2016 go.html.markdown Updated closure Jun 4, 2016 groovy.html.markdown [groovy/es] Groovy translated to Spanish (#1791) May 27, 2016 hack.html.markdown removing whitespace all over Oct 8, 2015 haml.html.markdown Merge pull request #1438 from chashmeetsingh/patch-8 Oct 12, 2015 haskell.html.markdown Merge pull request #1758 from patrikja/patch-2 Feb 11, 2016 haxe.html.markdown [haxe/en] Adding colon after comments May 20, 2015 hy.html.markdown Merge pull request #1574 from Zirak/patch-1 Mar 11, 2016 inform7.html.markdown Add a try at an Inform 7 tutorial. Jan 22, 2016 java.html.markdown [Java/en] Adding a reference for treemap (#2300) Jul 8, 2016 javascript.html.markdown Added new resource to javascript Oct 31, 2015 json.html.markdown [json/en] Cut noise, formatting, links. Oct 20, 2015 julia.html.markdown Update Dict and Set Syntax (#2296) Jul 2, 2016 kotlin.html.markdown [kotlin/en] Add examples of sequences (#2214) Jun 26, 2016 latex.html.markdown Replace invite sign $ by > in compilation example Mar 31, 2016 less.html.markdown [less/en] paranthesis -> parenthesis Mar 6, 2016 livescript.html.markdown removing whitespace all over Oct 8, 2015 lua.html.markdown [elisp/en] Fix typo Oct 28, 2015 make.html.markdown Merge pull request #2167 from divayprakash/typos-fix Mar 12, 2016 markdown.html.markdown fixed content extending beyond 80 chars Mar 18, 2016 matlab.html.markdown Add a section on code sections/cells (#1855) Jun 26, 2016 neat.html.markdown removing whitespace all over Oct 8, 2015 nim.html.markdown [nim/en] Correct syntax highlighting Mar 23, 2016 nix.html.markdown Remove nix highlighting (we don't have it) May 19, 2016 objective-c.html.markdown fix #2308 Jul 12, 2016 ocaml.html.markdown Change anonymous function in List.filter example Mar 26, 2016 paren.html.markdown Updating header with contribution name Oct 20, 2015 pcre.html.markdown Add an example of trap command (#1826) Jun 26, 2016 perl.html.markdown [perl/en] Fix line formatting and use $x instead of $a Apr 15, 2016 perl6.html.markdown Fixed instance where wrong variable name was used Mar 20, 2016 pets.csv Create pets.csv Jun 29, 2013 php-composer.html.markdown [php-composer/en] Add new tool document for Composer, PHP's dependenc… Oct 20, 2015 php.html.markdown Change curly braces statement (#1804) Jun 16, 2016 pogo.html.markdown Fixed typo at the end Dec 22, 2014 powershell.html.markdown [PowerShell/en]: fixed typos/layout. Added some extra aliases/info. Jan 8, 2016 purescript.html.markdown [purescript/en] comparisions -> comparisons Feb 27, 2016 python.html.markdown [python/en] Set, dict, and generator comprehensions (#2298) Jul 3, 2016 python3.html.markdown [python/en] Set, dict, and generator comprehensions (#2298) Jul 3, 2016 pythonstatcomp.html.markdown Update pythonstatcomp.html.markdown Mar 18, 2016 qt.html.markdown Added document about Qt framework (#1444) Jun 26, 2016 r.html.markdown fix spaces at end-of-lines again Oct 20, 2015 racket.html.markdown [racket/en] Add more details about Racket (#2278) Jun 26, 2016 red.html.markdown removing whitespace all over Oct 8, 2015 rst.html.markdown [en/RST] Add RST introduction (#1723) Jun 26, 2016 ruby-ecosystem.html.markdown Ruby 1.9.x is also retired Oct 6, 2015 ruby.html.markdown Elixir agents/maps, Ruby conventions/docs (#2116) Jul 12, 2016 rust.html.markdown Update rust.html.markdown Jun 26, 2016 sass.html.markdown [SASS] Add control directives, and misc. fixes (#1805) Jun 19, 2016 scala.html.markdown Add example of an int is divided by a double (#2284) Jun 21, 2016 self.html.markdown [self-en] separeated -> separated Feb 22, 2016 smalltalk.html.markdown Update smalltalk.html.markdown May 11, 2016 solidity.html.markdown Security additions + edits (#2281) Jun 20, 2016 standard-ml.html.markdown [racket/en] Add more details about Racket (#2278) Jun 26, 2016 swift.html.markdown Add documentation comment for If let Feb 19, 2016 tcl.html.markdown tcl: fix error in no-braces example (#2274) Jun 6, 2016 tmux.html.markdown Remove obsolete utf-8 options. (#2294) Jun 28, 2016 typescript.html.markdown Added typescript-pt.html.markdown (#1699) Jun 26, 2016 vim.html.markdown Added vim.html.markdown (#1744) Apr 28, 2016 visualbasic.html.markdown correction Nov 8, 2015 whip.html.markdown [whip/en] Fix typos Oct 31, 2015 wolfram.html.markdown Rename wolfram.md to wolfram.html.markdown Jan 1, 2016 xml.html.markdown [xml/en] Grammar, formatting. Made more 'inlined'. Oct 20, 2015 yaml.html.markdown [yaml/en] Add more resources (#1666) Apr 28, 2016 zfs.html.markdown Merge pull request #1644 from fliiiix/patch-1 Mar 11, 2016 README.markdown Learn X in Y minutes Whirlwind tours of (several, hopefully many someday) popular and ought-to-be-more-popular programming languages, presented as valid, commented code and explained as they go. We need YOU!... ... to write more inline code tutorials. Just grab an existing file from this repo and copy the formatting (don't worry, it's all very simple). Make a new file, send a pull request, and if it passes muster I'll get it up pronto. Remember to fill in the ""contributors"" fields so you get credited properly! Contributing All contributions are welcome, from the tiniest typo to a brand new article. Translations in all languages are welcome (or, for that matter, original articles in any language). Send a pull request or open an issue any time of day or night. Please prepend the tag [language/lang-code] to your issues and pull requests. For example, [python/en] for English Python. This will help everyone pick out things they care about. We're happy for any contribution in any form, but if you're making more than one major change (i.e. translations for two different languages) it would be super cool of you to make a separate pull request for each one so that someone can review them more effectively and/or individually. For a detailed style guide, please review the full CONTRIBUTING guidelines. License Contributors retain copyright to their work, and can request removal at any time. By uploading a doc here, you agree to publish your work under the default Creative Commons Attribution-ShareAlike 3.0 Unported licensing included on each doc page. Anything not covered by the above -- basically, this README -- you can use as you wish, I guess. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adambard/learnxinyminutes-docs"	"Syntax and features overview. The Elm page on"	"true"
"Learn"	"A Concise Introduction to Elm"	"https://www.cis.upenn.edu/%7Ematuszek/Concise%20Guides/Concise%20Elm.html"	"High overview of language features."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A Concise Introduction to Elm A Concise Introduction to Elm Copyright © 2015 David Matuszek General Elm is a functional reactive language. That is, rather than ""reading"" inputs from some point in the program, input events just ""happen,"" and the program reacts to them. This is the way GUI programs are usually written, using callbacks, but Elm is designed to do much the same thing without the complexity of callbacks. Elm compiles into JavaScript, so Elm programs are normally run in a browser, and make use of a lot of functions that compile into HTML tags. Running programs Online To run in an online IDE, go to http://elm-lang.org/try. This is a good way to write small programs. Installing Elm Use the installer from http://elm-lang.org/install. Local REPL To try out expressions in the REPL, type elm repl or elm-repl at the command line. Exit with :exit. Rapid feedback In the root directory of your project, execute elm-reactor. Then in a browser, go to http://localhost:8000. Click on your Elm file in the displayed page to run it. You can make changes in your favorite editor (Sublime Text has good syntax coloring for Elm), save the file, and click the refresh button in your browser. Downside: The Elm reactor uses a default CSS file, not one you supply. Compiling to JavaScript Create a directory for your project and navigate into it. By convention, create a Main.elm file in this directory. Compile with elm-make Main.elm --output index.html. Then open the result in a browser. You can also do elm-make Main.elm --output main.js,  then link to the resulting JavaScript in an HTML page. To compile hello.elm to a hello.js file, execute the following in the desired directory:      elm package install     elm package install evancz/elm-html elm package install evancz/start-app     elm make hello.elm --output hello.html     elm make hello.elm --output hello.js Then Imports Many functions are in modules that must be imported, such as the String and List modules. import String imports the String module, and allows qualified references to functions in the module, such as String.toUpper. import String exposing (toUpper, toLower) imports the String module, and allows unqualified references to toUpper and toLower, and qualified references to other functions in the module. import String exposing (..)  imports the String module and allows unqualified references to all functions in the module. Comments -- begins a single line comment. {- and -} enclose a multiline comment; these can be nested. Types Elm has: Strings: ""hello"". Strings are not lists of characters. Chars: 'a' Functions: isNegative n = n < 0 Lists (all elements must have the same type): [""one"", ""two"", ""three""] Tuples (fixed number of values, any mix of types): (""Dave"", True) Records (key-value pairs): { x = 0, y = 10 } Named functions: avg x y = (x + y) / 2 Anonymous functions: (\ x y -> (x + y) / 2) Aliases: type alias Point = { x = 0, y = 0 } Operations Operations on numbers Arithmetic expressions: +, -, *, / (result is always a float), // (integer division), % (mod), parentheses Comparators: <, <=, ==, !=, >=, > Operations on booleans &&, ||, not Operations on strings ++ is string concatenation Operations on lists import List exposing (..) (::) : a -> List a -> List a ""Cons"" (add) an element to a list. head : List a -> a Return the first element of a list. tail : List a -> List a Return the remainder of a list after the head. member : a -> List a -> Bool Tests whether a value is in a list. take : Int -> List a -> List a Returns the first n elements of a list. drop : Int -> List a -> List a Returns the list with the first n elements removed. isEmpty : List a -> Bool Tests if a list is empty. length : List a -> Int Returns the length of a list. reverse : List a -> List a Reverses a list. append : List a -> List a -> List a Appends two lists. concat : List (List a) -> List a Combine a list of lists into a single list. intersperse : a -> List a -> List a Put an element between all elements of a list. map : (a -> b) -> List a -> List b Applies a function to each element of a list, returning a list of results. filter : (a -> Bool) -> List a -> List a Applies a predicate to each element of a list, retaining those that satisfy the predicate. foldl : (a -> b -> b) -> b -> List a -> b Reduce a list from the left. Specifically, takes a binary function f a b -> b, an initial value b, and a list of a, producing a single b. foldl1 : (a -> a -> a) -> List a -> a Reduce a non-empty list from the left. foldr : (a -> b -> b) -> b -> List a -> b Reduce a list from the right. foldr1 : (a -> b -> b) -> b -> List a -> b Reduce a non-empty list from the right. scanl : (a -> b -> b) -> b -> List a -> List b Reduce a list from the left, building up all of the intermediate results into a list. scanl1 : (a -> b -> b) -> b -> List a -> List b Reduce a non-empty list from the left, building up all of the intermediate results into a list. map2 : (a -> b -> result) -> List a -> List b -> List result Combine two lists, element-wise, with the given function. The functions map3, map4, and map5 also exist. zip Not currently in Elm; use map2 (,). unzip : List (a, b) -> (List a, List b) Given a list of tuples, returns a tuple of lists. partition : (a -> Bool) -> List a -> (List a, List a) Returns a tuple of the elements that satisfy the predicate and those that fail the predicate. all : (a -> Bool) -> List a -> Bool Tests whether all elements satisfy the predicate. any : (a -> Bool) -> List a -> Bool Tests whether any element satisfies the predicate. sum : List number -> number Returns the sum of the list elements. product : List number -> number Returns the product of the list elements. maximum : List comparable -> Maybe comparable Returns the largest value in the list. minimum : List comparable -> Maybe comparable Returns the smallest value in the list. sort : List comparable -> List comparable Sorts from lowest to highest. sortBy : (a -> comparable) -> List a -> List a Sorts by a property of the list elements, such as a field of a record. sortWith : (a -> a -> Order) -> List a -> List a Sorts according to the supplies function. filterMap : (a -> Maybe b) -> List a -> List b Apply a function to a list and keep only the ones that succeed in returning a value. concatMap : (a -> List b) -> List a -> List b Map a function onto a list and flatten the results (""flatmap"" in some languages). indexedMap : (Int -> a -> b) -> List a -> List b Same as map but the function is also applied to the index of each element (starting at zero). Operations on tuples (,), (,,), (,,,), etc. Functions that construct tuples from arguments. fst : (a, b) -> a Returns the first element. snd : (a, b) -> b Returns the second element. Pattern matching in case expressions can be used on tuples. Beyond that, Elm has very little support for tuples. Operations on records A record is like a Python dictionary or a Java HashMap { name = value, ..., name = value } defines a record. Use record.key or .key record to access the fields of a record. http://elm-lang.org/docs/syntax#records has a number of operations without much explanation. To copy a record but with some fields different, use { old_record | key1 <- new_value_1, ..., key_n <- new_value_n } Conditional expressions  if condition then value_if_True else value_if_False if | condition -> expression   | condition -> expression   ...   | otherwise -> expression case expression of   pattern -> expression   ...   pattern -> expression Calling functions As is usual in functional languages, functions are curried--they only take a single parameter. A function that appears to take several parameters actually takes only the first parameter, returning a function that takes the next parameter, etc., until a single result is obtained. To call a function, give its name and its parameters, separated by spaces, for example,     List.map toUpper words The result of a function can be piped to the next function, using the |> operator, for example,  message ++ ""  ""     |> String.toUpper     |> String.repeat times     |> String.trimRight     |> Html.text If the argument to a function is a record, you can specify which fields must be present. Example:      rec = {x = 5, y = 7, z = 3}      maxxz {x, z} = if x > z then x else z      maxxz rec -- returns 5 In the REPL, a backslash (\) at the end of a line causes the next line to act as a continuation of the current line. Be sure not to have any whitespace after the backslash. Signals and maps Signals The reactive part of Elm is its use of signals. A signal is a variable whose value varies according to external events, such as mouse motion or keyboard entries. Here are some of the supplied signals: import Mouse exposing (..) position : Signal ( Int, Int ) x : Signal Int y : Signal Int isDown : Signal Bool clicks : Signal () import Keyboard exposing (..) Mouse.position : Signal (Int, Int) arrows : Signal { x : Int, y : Int } wasd : Signal { x : Int, y : Int } enter, space, ctrl, shift, alt, meta all have type Signal Bool type alias KeyCode = Int isDown : KeyCode -> Signal Bool keysDown : Signal (Set KeyCode) presses : Signal KeyCode -- most recent key pressed import Time exposing (..) fps : number -> Signal Time (frames per second) will produce a signal the given number of times every second fpsWhen : number -> Signal Bool -> Signal Time Same as the fps function, but you can turn it on and off every : Time -> Signal Time takes a time interval t and produces a signal updated every t delay : Time -> Signal a -> Signal a delays a time signal There a few additional Time functions import Window exposing (..) dimensions : Signal ( Int, Int ) width : Signal Int height : Signal Int foldp : (a -> state -> state) -> state -> Signal a -> Signal state foldp folds signals ""over time""; used to step the state of the computation forward Maps Variables in a purely functional language should be immutable. Signals are not immutable, therefore they are kept in ""isolation"" in a Signal monad. Values in a Signal can be used to call pure functions, but the result must be put immediately back into a Signal. This is the purpose of the various map functions. Signal.map : (a -> b) -> Signal a -> Signal b This function was originally named lift. It has an argument structure similar to List.map, (a -> b) -> List a -> List b, and I suspect the function was renamed to take advantage of the familiarity of the latter. Some pure functions may require more than one argument, so there are functions for calling pure functions with more than one Signal. map2 : (a -> b -> result) -> Signal a -> Signal b -> Signal result map3 : (a -> b -> c -> result) -> Signal a -> Signal b -> Signal c -> Signal result map4 :  (a -> b -> c -> d -> result) -> Signal a  -> Signal b -> Signal c -> Signal d -> Signal result map5 :  (a -> b -> c -> d -> e -> result) -> Signal a -> Signal b  -> Signal c -> Signal d -> Signal e -> Signal result There are several additional functions for working with and combining Signals. merge : Signal a -> Signal a -> Signal a mergeMany : List (Signal a) -> Signal a keepIf : (a -> Bool) -> a -> Signal a -> Signal a -- the first Signal a is a default value keepWhen : Signal Bool -> a -> Signal a -> Signal a -- the first Signal a is a default value dropRepeats : Signal a -> Signal a constant : a -> Signal a In addition, sampleOn : Signal a -> Signal b -> Signal b Samples from the second input every time an event occurs on the first input. I believe the purpose of this is to keep the program from having to deal with an infeasibly large number of signals. Structure of an Elm program GUI programs are usually written using the MVC (Model-View-Controller) pattern. Elm programs are written following a very similar pattern, as follows (http://elm-lang.org/guide/architecture#the-basic-pattern): MODEL UPDATE VIEW type alias Model = { ... } type Action = NoOp | Move Int Int | ...update : Action -> Model -> Modelupdate action model =  case action of    NoOp -> ...     Move x y -> ...  ... view : Model -> Htmlview = ... main : Signal Element main = ... The Model is a record that describes the current state of the program. An Action is a list of type names provided by the programmer, naming the types of action that can occur. Actions may have parameters. The update method applies an Action to a Model, producing a new Model. Note that, in the above template, the output is an HTML page. Imports The follow lists some of the libraries that may need to be imported, along with the methods found in each. As Elm is a rapidly evolving language, the URLs provided may link to outdated versions, which should in turn link to newer versions. Keyboard 2.1.0 type alias KeyCode = Int arrows : Signal { x : Int, y : Int } wasd : Signal { x : Int, y : Int } enter, space, ctrl, shift, alt, meta, isDown   are all : Signal Bool The meta key is the Windows key on Windows and the Command key on Mac. keysDown : Signal (Set KeyCode) presses : Signal KeyCode main =  Signal.map show Keyboard.keysDown --shows keyCodes for currently pressed keys ← 37, ↑ 38, → 39, ↓ 40 Mouse 2.1.0 position : Signal (Int, Int) x : Signal Int x : Signal Int isDown : Signal Bool   (State of the left mouse button; apparently no way to check the right mouse button.) clicks : Signal ()   (Event triggers on every mouse click.) HTML The syntax of an HTML tag is <tag attributes> Contents </tag>. In Elm this is represented as a function with two list arguments: tag [attributes] [Contents]. The attributes are of type Attribute, and there are assorted methods in Html.Attributes for creating these. The following types can be displayed: Element , Html, (Signal Element), (Signal Html). show : a -> Element Converts any type of value to a displayable Element. Strings and characters are shown with enclosing quote marks. text : String -> Svg.Svg Turns a String into a graphical element that can be displayed. Html.ul [] [ li [] [ text ""Hello"" ], li [] [ text ""there"" ] ]"	"null"	"null"	"High overview of language features."	"true"
"Learn"	"Elm Maybe - Dealing with null/Nothing"	"http://rundis.github.io/blog/2016/elm_maybe.html"	"Working with the Maybe type, with nicely commented code examples."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"2"	"3"	"GitHub - rundis/blog: My Personal Blog Space Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 5 Fork 3 rundis/blog Code Issues 0 Pull requests 0 Pulse Graphs My Personal Blog Space 80 commits 2 branches 0 releases Fetching contributors CSS 73.4% FreeMarker 26.6% CSS FreeMarker Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. gradle/wrapper src/jbake .gitignore README.md build.gradle gradlew gradlew.bat publish.gradle settings.gradle README.md blog My Personal Blog Space Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rundis/blog"	"Working with the Maybe type, with nicely commented code examples."	"true"
"Learn"	"Elm Topic on DailyDrip"	"http://dailydrip.com/topics/elm"	"Daily continuing education on Elm, videos and text, with new content every day."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elm Pricing Topics Blog Sign in Get Started Today Group Copy Created with Sketch. Pricing Topics Blog Sign in Elm Learn Elm, a strongly-typed functional programming language that is used for building frontend applications. NOTE: All of the text (including video scripts) has been ported to Elm 0.17. The videos are all still Elm 0.16. I am porting them in the next couple of weeks, but there are 18 videos to record and I want to begin producing new content again so it will be gradual. In the meantime, in general, you can watch the videos and see the scripts for differences. Some are large differences, most are small. Want all our free content for this topic? Enter your best email address here and we'll send you new free stuff when it's available. Do not fill in this field  Send me updates! 001.1 The Elm Programming Language A brief introduction to the Elm programming language. 001.2 Introduction and Installing Installation and a brief syntax introduction. 001.3 Multiline Strings How to use multiline strings, both in regular code and in the REPL. 001.4 Our First HTML Application Building a basic counter HTML application, using Html.App.beginnerProgram. 001.5 Html.App.beginnerProgram Exploration An explanation of exactly what Html.App.beginnerProgram provides. 001.6 Exercise - Counter Extended Your first exercise - expanding on the counter. 001.7 Elm Weekly Drip #1 A list of useful introductory links when early on your path to learn Elm. 002.1 Understanding beginnerProgram and Building Todo A solution to Elm 001.6's exercise, and readings to prepare you for implementing TodoMVC in Elm. 002.3 TodoMVC Planning Preparing to implement TodoMVC by modeling the problem domain. 002.4 TodoMVC Part 1: Model and Views Beginning our TodoMVC implementation in a new project, with the models we've identified, and pulling in existing styles. 002.5 TodoMVC Part 2: Adding Todos Adding the ability to add Todos to the model in our TodoMVC implementation by pressing Enter in the input field. 002.6 Exercise - TodoMVC: Adding Todo Details Modifying the TodoMVC implementation to support adding specific todos to the model, rather than just using our mockTodo function. 002.7 Elm Weekly Drip #2 Must-see links per the elm-lang slack channel and found via the Mailing List. 003.1 Extending Todo and Filtering Solving the previous TodoMVC exercise, and planning for editing and filtering our Todos. 003.2 TodoMVC Part 3: Marking Todos Completed Adding an identifier to each Todo, and wiring up the checkbox to toggle their completed state. 003.3 TodoMVC Part 4: Fixing Identifier Bug Fixing a bug introduced in the previous drip. 003.4 TodoMVC Part 5: Filtering Filtering Todos by their completion state. 003.5 TodoMVC Part 6: Removing Todos Removing Todos from the list. 003.6 Exercise - TodoMVC: Clearing Completed Todos An exercise suggestion: clearing the completed todos. 003.7 Elm Weekly Drip #3 A collection of links from the ML, Slack, and the internet in general. A video by Richard Feldman, a way to find new Elm libraries, and dealing with CSS/HTML Animations in Elm, and more! 004.1 Cmd, Tasks, and Ports An implementation of the previous exercise, as well as introductory readings to prepare you for Cmd, Tasks, and Ports. 004.2 Tasks and Cmd with RandomGif Implementing the RandomGif example from the elm-architecture-tutorial as a means of introducing Tasks and Cmd. 004.3 Composing Components with RandomGifPair Seeing how tagged actions plus Cmd.batch, Cmd.map, and Html.map can allow you to easily compose components. 004.4 Ports Interop between JavaScript and Elm uses Ports. In this episode, we see how to send data to Elm from JavaScript over a port. 004.5 Outbound Ports Sending data from Elm to JavaScript by way of ports. 004.6 Exercise - Ports: Outbound and Inbound An exercise to implement both inbound and outbound ports from scratch to reinforce our understanding. 004.7 Elm Weekly Drip #4 There are a lot of fun links this week. A bit of learning, a bit of new libraries, and a great Richard Feldman video. 005.1 LocalStorage in TodoMVC Preparation for the week and the solution to the Ports exercise. This week we'll cover LocalStorage via Ports, and custom JSON encoding and decoding. 005.2 LocalStorage via Ports Storing the state of our model in the browser's LocalStorage by using Ports. 005.3 LocalStorage and JSON Storing a slightly more complicated model into LocalStorage, and encoding / decoding that model via JSON. 005.4 TodoMVC Part 7: LocalStorage Implementing custom JSON encoders and Decoders in order to store our custom types in LocalStorage for our TodoMVC implementation. 005.5 Why `object4`? Introducing elm-decode-pipeline for a better way to decode JSON. 005.6 External APIs and JSON An exercise to build an interface for viewing random Chuck Norris jokes from an external API. 005.7 Elm Weekly Drip #5 There are a lot of dense links this week. Maybe too many. But there's a trove of useful information if you want to deep dive into understanding the core concepts behind Elm. 006.1 Graphics This week we'll take a break from HTML and start exploring Elm's Graphics capabilities. 006.2 Graphics Introduction Learning about the Graphics capabilities that Elm provides, as well as an introduction to the Mouse module. 006.3 Graphics Shapes Reviewing various other shapes at your disposal from the Collage module. 006.4 Stamps Building an application that allows the user to place stamps on a canvas, learning more about subscriptions in the process. 006.5 Extending Stamps Adding the ability to stamp multiple shapes. 006.6 Adding More Messages to Stamps An exercise to add a message to the Stamps application 006.7 Elm Weekly Drip #6 Just a few high quality links this week, with a heavy focus on content from NoRedInk. Everything from code style suggestions to tools to help build JSON decoders. 007.1 Graphics Input and Etch-A-Sketch This week we'll implement an Etch-A-Sketch, introducing various methods of Graphics Input and Animation. 007.2 Etch-A-Sketch Exploring more of Elm's Graphics capabilities by building an Etch-A-Sketch application. 007.3 Repeating Keypresses Introducing Time.every and Keyboard.Extra to allow us to introduce key repeat in our Etch-A-Sketch application. 007.4 Graphics Input and Animation Introducing Graphics.Input to add a Shake button to our Etch-A-Sketch, and adding some animation with elm-animation. 007.5 Multiple Animations Handling multiple sequential animations in our Etch-A-Sketch. 007.6 Graphics Input: Picking Colors An exercise adding color-changing functionality to the Etch-A-Sketch. 007.7 Elm Weekly Drip #7 Structuring larger Elm apps, creating web components that use Elm internally, how languages can encourage productivity by being difficult, a blip on a Radar, and $$$$. 008.1 Project Setup and Tooling This week we'll look at setting up our Projects a bit more intelligently, and bringing in some tooling to help us maintain and test them. 008.2 Project Setup Defining a reasonable project structure, adding a good README, adding build and publish scripts, and publishing to GitHub Pages. 008.3 elm-format Using elm-format to make your code pretty. 008.4 Debug Debugging in Elm with Debug.crash and Debug.log. 008.5 elm-test Using elm-test to write tests for your applications and run them easily from the console, and using Travis CI to run them every time you push new code. 008.7 Elm Weekly Drip #8 This week: an awesome elm sound toy; nesting components; Elm and Elixir; another Elm intro video; and an idea for disambiguating some union tags. 009.1 Date and Maybe This week we'll look at the Date and Maybe modules in the Elm standard library, as well as a package that adds Date functionality, and we'll review Elm's pipes. 009.2 Date Dealing with Dates and Times in Elm. 009.3 elm-date-extra Using elm-date-extra to provide some much-needed Date functionality, including easy relative modification and comparison. 009.4 Maybe Handling computations that aren't guaranteed to have a meaningful return value. 009.5 Pipes Looking at the use of Backwards and Forwards Function Application. 009.6 Maybe Dates This week we learned how to deal with Dates and how Maybe worked. For this week's exercise, we'll combine the two. 009.7 Elm Weekly Drip #9 This week: Accidentally Concurrent, Fractal UI Patterns, Ray Tracing, Electron, the role of Effects and Tasks, and a discussion of producing Swift code from Elm (or not). 010.1 Web Audio This week we're going to talk about the Web Audio API. There's a lot to it, but in general it boils down to this: you make nodes in an Audio Processing Graph and hook them together. 010.2 Building a Theremin with Web Audio Building a Web Audio-powered Theremin, controlled by the mouse position from Elm. 010.3 Web Audio Analyzer / Elm Interop Gathering fast Fourier transform data from web audio, and sending it to Elm over a port (which involves dealing with Uint8Arrays, sort of) 010.4 An Oscilloscope Appears! Graphing our Audio Graph's data in Elm as an oscilloscope, centered in our window. 010.5 Alpha Oscilloscope History Making our oscilloscope look slightly more retro by adding traces of its history to the rendered graph. 010.6 Reduce CPU Usage for Oscilloscope For this week's exercise, we'll essentially manually memoize some function calls to reduce CPU load. 011.1 Phoenix and Elm A solution to reducing elm_theremin's CPU usage re: the alpha oscilloscope traces, and prepwork for our upcoming Phoenix <-> Elm channels work. 011.2 elm-phoenix-socket Building an Elm client to an Elixir Phoenix-based chat application using the elm-phoenix-socket package. 011.3 Refactoring the Chat Client We refactor the views for the chat client to make it easier to follow as we add more logic, and we accept a username before initializing the Phoenix Socket. 011.4 Adding Presence Support to `elm-phoenix-socket` Contributing to our first library, by adding Phoenix.Presence support to fbonetti's elm-phoenix-socket library. 011.5 Elm Weekly Drip #11 and Exercise: Support PresenceDiff Types Some articles on Elm Types; convincing your co-workers to give it a shot; explanations for the present Native situation; a paper that has consumed my life; a React-based immutability-focused rich text editor to integrate with ports; a mental model for Elm 0.17's program loop. 012.1 Phoenix and Elm, Continued A JSON Decoder for PresenceDiff, and preparation for implementing the remaining client-side support for Phoenix.Presence features. 012.2 Phoenix `syncState` in Elm Test-Driving our Phoenix Presence client by porting the existing phoenix.js test suite to Elm. 012.3 Phoenix `syncDiff` Implementation Porting more of the presence_test.js test suite and implementing syncDiff. 012.4 Using Presence Making use of our Phoenix.Presence support in elm-phoenix-socket in an application. 012.5 Elm Weekly Drip #12 and Exercise: Enhance `elm-phoenix-socket` We cover why walking's great but the existence of legs doesn't magically make bicycles not amazing; child->parent communication; Porting a module to 0.17 with detailed discussion; Vega Lite, which should be great for charting from Elm but I haven't tried yet; modal dialogs; Static Type Checking; the reasoning behind the Elm Logo; and filtering on Sub. 013.1 Extracting Modules, Nested Records, and Parameterized Types This week we'll extract a Presence module and continue creating a PR for Phoenix.Presence in elm-phoenix-sockets, as well as do some more interesting Json.Decode work. We'll also see how to make our own Parameterized Types. 013.2 Extracting Presence Module Extracting a Presence module for the elm-phoenix-socket library so that we can reduce our userland code. 013.3 Presence.list We implement Presence.list in elm-phoenix-socket, and in the process I have a bit of a eureka! moment re: functional composition. 013.4 Nested Records and Phoenix.Presence Making the Presence support in elm-phoenix-socket more friendly regarding user-defined-values that are passed in the presence metadata. 013.5 Elm Weekly Drip #13 and Exercise: Use Presence Metadata in Elm Phoenix Example Strap in, we've got another substantial list of Elm-related (and occasionally not-exactly-related) posts to dig into from the community. We'll cover a quick vim function to stub out your main elm modules, an example of writing a full site in Phoenix and Elm, Parent<->Child communication, some metal, a bit of F#, and yet another Elm game. 014.1 Single Page Apps Preparing for a new project where we'll build a Single Page App, and the exercise solution from last week. 014.2 Content Catalog, Part 1: Initial Setup Tiny submodules and introducing Navigation. 014.3 Content Catalog, Part 2: Link Helpers Building out links for our navigation elements, using types to make sure we don't do stupid things. 014.4 Content Catalog, Part 3: Topics and Content Nested Routes, and some more modularity. 014.5 Elm Weekly Drip #14 and Exercise: Marking Active Routes This week: we'll cover more Phoenix and Elm; see another Elm game; learn a bit about building Effect Managers; learn how to enquire about DOM properties; see how to generate boilerplate; compare react/redux/elm; and hopefully contribute to a Mailing List thread that I find fascinating. 015.1 Styling Styling in Elm with elm-css, as well as the exercise solution from last week. 015.2 elm-css A CSS preprocessor for Elm. 015.3 Structuring elm-css Breaking out the CSS into its own file and introducing variables as well as withClass. Group Copy Created with Sketch. © 2016 Concur Messaging, Inc. All Rights Reserved Android, Google Play and the Google Play logo are trademarks of Google Inc. Terms of Service Privacy Policy Twitter"	"null"	"null"	"Daily continuing education on Elm, videos and text, with new content every day."	"true"
"Learn"	"Exercism Elm Track"	"http://exercism.io/languages/elm"	"Collection of Elm exercises."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"34"	"6"	"15"	"GitHub - exercism/xelm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 34 Fork 15 exercism/xelm Code Issues 2 Pull requests 1 Pulse Graphs No description or website provided. 127 commits 1 branch 0 releases Fetching contributors Elm 87.7% Shell 7.7% Batchfile 4.6% Elm Shell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 65db27e Jun 19, 2016 tgecho committed on GitHub Merge pull request #86 from tgecho/largest-series-product … Add largest-series-product exercise Permalink Failed to load latest commit information. bin Auto install elm packages in bin/build.sh May 13, 2016 docs Add test running wrappers May 13, 2016 exercises Add largest-series-product exercise Jun 19, 2016 img Add the elm icon Jun 18, 2016 .gitignore Add test running wrappers May 13, 2016 .travis.yml Update elm-package.json and .elm files to support Elm 0.17 May 12, 2016 LICENSE Bootstrap elm track Sep 8, 2015 README.md Update elm-package.json and .elm files to support Elm 0.17 May 13, 2016 SETUP.md Bootstrap elm track Sep 8, 2015 config.json Add largest-series-product exercise Jun 19, 2016 elm-package.json Add largest-series-product exercise Jun 19, 2016 README.md xElm Exercism Exercises in Elm Setup The simplest way to install Elm is via Node.js/NPM. If you don't already have Node.js installed on your computer, you can download it from the official site. Once you have Node.js up and running, follow these steps to install the Elm platform and elm-test. $ npm install --global elm elm-test Contributing Thank you so much for contributing! 🎉 Please start by reading the general Exercism contributing guide. We welcome pull requests that provide fixes and improvements to existing exercises. If you're unsure, then go ahead and open a GitHub issue, and we'll discuss the change. Please keep the following in mind: Pull requests should be focused on a single exercise, issue, or change. We welcome changes to code style, and wording. Please open a separate PR for these changes if possible. Please open an issue before creating a PR that makes significant (breaking) changes to an existing exercise or makes changes across many exercises. It is best to discuss these changes before doing the work. Follow the coding standards found in The Elm Style Guide. Please consider running elm-format before submitting a pull request. Watch out for trailing spaces, extra blank lines, and spaces in blank lines. Each exercise must stand on its own. Do not reference files outside the exercise directory. They will not be included when the user fetches the exercise. Exercises should use only the Elm core libraries. Please do not add a README or README.md file to the exercise directory. The READMEs are constructed using shared metadata, which lives in the exercism/x-common repository. Each exercise should have a test suite, an example solution, a template file for the real implementation and an elm-package.json file with the elm-test and elm-console dependencies. The CI build expects files to be named using the following convention. The example solution should be named ExerciseModuleName.example. The template file should be named ExerciseModuleName.elm. Test file should be named ExerciseModuleNameTest.elm. The recommended workflow when working on an exercise is to first create the implementation and test files, ExerciseModuleName.elm and ExerciseModuleNameTest.elm. Test the new exercise directly by running elm-test exercises/exercise_module_name/ExerciseModuleNameTest.elm. Once the implementation of the exercise is complete, move ExerciseModuleName.elm to ExerciseModuleName.example and create the template file. Make sure everything is good to go by running all tests with bin/build.sh. If you have elm-format installed, you can easily check the project by running WITH_FORMAT=true bin/build.sh. If you get diffs on exercises other than the one you are working on, please submit a separate pull request. Please do not commit any Elm configuration files or directories inside the exercise, such as elm-stuff. Please include only the standard elm-package.json. Test files should use the following format: module Main exposing (..)  import ElmTest exposing (..)   tests : Test tests =   suite     ""ExerciseModuleName""     [ test ""first test"" (assertEqual True True)     , test ""second test"" (assertEqual False False)     ]   main : Program Never main =   runSuite tests All the tests for xElm exercises can be run from the top level of the repo with bin/build.sh. Please run this command before submitting your PR. If you are submitting a new exercise, be sure to add it to the appropriate place in the config.json and elm-package.json files. Also, please run bin/fetch-configlet && bin/configlet to ensure the exercise is configured correctly. License The MIT License (MIT) Copyright (c) 2016 Katrina Owen, _@kytrinyx.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/exercism/xelm"	"Collection of Elm exercises."	"true"
"Libraries"	"elm-core"	"https://github.com/elm-lang/core"	"Elm Core Libraries."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"518"	"69"	"181"	"GitHub - elm-lang/core: Elm's core libraries Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 518 Fork 181 elm-lang/core Code Issues 51 Pull requests 22 Pulse Graphs Elm's core libraries 1,223 commits 5 branches 11 releases 73 contributors Elm 72.7% JavaScript 27.2% Shell 0.1% Elm JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags array debugger-stuff dict-additions master stable Nothing to show 4.0.3 4.0.2 4.0.1 4.0.0 3.0.0 2.1.0 2.0.1 2.0.0 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 10c8737 Jul 15, 2016 evancz Bump to 4.0.3 for nicer Json.Decode error messages Permalink Failed to load latest commit information. src Improve error message for Json.Decode.customDecode Jul 15, 2016 tests add tests for equality, concerning record constructors Jul 2, 2016 .eslintrc remove JSHint configuration and fix other style issues Aug 14, 2015 .gitignore run-test.sh script Jan 5, 2015 .travis.yml update travis file May 11, 2016 CONTRIBUTING.md Create CONTRIBUTING.md Jan 7, 2015 LICENSE Update LICENSE Jun 26, 2016 README.md Fix #597 May 12, 2016 changelog.md Merge branch 'master' into patch-2 Jun 23, 2015 elm-package.json Bump to 4.0.3 for nicer Json.Decode error messages Jul 15, 2016 README.md Elm Core Libraries Every Elm project needs the core libraries. They provide basic functionality including: The Basics — addition, subtraction, etc. Data Structures — lists, dictionaries, sets, etc. Default Imports In all Elm files there is a small set of default imports: import Basics exposing (..) import Debug import List exposing ( List, (::) ) import Maybe exposing ( Maybe( Just, Nothing ) ) import Result exposing ( Result( Ok, Err ) ) import Platform exposing ( Program ) import Platform.Cmd exposing ( Cmd, (!) ) import Platform.Sub exposing ( Sub ) The intention is to include things that are both extremely useful and very unlikely to overlap with anything that anyone will ever write in a library. By keeping the set of default imports small, it also becomes easier to use whatever version of map suits your fancy. Finally, it makes it easier to figure out where the heck a function is coming from. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/elm-lang/core"	"Elm Core Libraries."	"true"
"Libraries"	"elm-html"	"https://github.com/evancz/elm-html/"	"Use HTML in Elm, based on the idea of a ""virtual DOM""."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"355"	"25"	"62"	"GitHub - evancz/elm-html: DEPRECATED. Moved to elm-lang/html Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 355 Fork 62 evancz/elm-html Code Pull requests 8 Pulse Graphs DEPRECATED. Moved to elm-lang/html https://github.com/elm-lang/html/ 271 commits 2 branches 14 releases 20 contributors Elm 100.0% Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master Nothing to show 5.0.0 4.0.2 4.0.1 4.0.0 3.0.0 2.0.0 1.1.0 1.0.0 0.3 0.2.1 0.2 0.1.2 0.1.1 0.1 Nothing to show New pull request Latest commit ac45f75 Jul 13, 2016 evancz Switch link to point to new package Permalink Failed to load latest commit information. src Fix typo in docs Jul 13, 2016 .gitignore Rename for latest elm-package Nov 17, 2014 LICENSE Initial commit Jul 1, 2014 README.md Switch link to point to new package Jul 13, 2016 elm-package.json Revert ""Expose nothing"" Jul 13, 2016 README.md DEPRECATED Use elm-lang/html instead. It's way better! Story When Elm 0.17 came out, the changes included a revamp of the HTML API to replace some old concepts (signals and address) with something simpler. To make that possible, it was necessary to reimplement this library from scratch. That also seemed like a great opportunity to officially graduate this library to the elm-lang organization. Through all this, the public API changed very little. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/evancz/elm-html/"	"Use HTML in Elm, based on the idea of a ""virtual DOM""."	"true"
"Libraries"	"elm-test"	"https://github.com/deadfoxygrandpa/Elm-Test"	"A unit testing framework for Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"154"	"7"	"30"	"GitHub - deadfoxygrandpa/elm-test: A unit testing framework for Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 154 Fork 30 deadfoxygrandpa/elm-test Code Issues 11 Pull requests 1 Pulse Graphs A unit testing framework for Elm 181 commits 7 branches 27 releases 12 contributors Elm 100.0% Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.16 canonicalize exceptions master native suites taskrunner Nothing to show v1.0 3.1.1 3.1.0 3.0.1 3.0.0 2.0.0 1.1.0 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.4.0 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2 0.1.1 0.1 Nothing to show New pull request Latest commit 17eadf7 Feb 24, 2016 deadfoxygrandpa Bump version Permalink Failed to load latest commit information. examples Update to allow Elm 0.16 in examples Nov 19, 2015 src Make tests more pleasant to read Feb 18, 2016 tests Update tests for new public API Nov 9, 2015 .gitignore Update .gitignore Jan 1, 2015 .travis.yml Remove debug statement Nov 9, 2015 LICENSE Fixed Issue #1 Jan 27, 2014 README.md Add Gulp section to README Feb 24, 2016 elm-package.json Bump version Feb 24, 2016 README.md elm-test A unit testing framework for Elm Getting Started The simplest way to get started with Elm Test is to install & run it via node-elm-test. This package can install Elm Test and its dependencies for you, as well as providing you with a command line test runner and an example test suite. Creating Tests Creating a test case is very simple. You only need a name and an assertion: myTest = test ""Example Test"" (assert True) For convenience, there is a function to create a name for you based on the inputs: -- Test name will be ""5 == 5"" myTest = defaultTest (assertEqual 5 5) As well as a function to create an assertEqual tests, again deriving a name based on the inputs: myTest = defaultTest (5 `assertEqual` 5) There are five different functions to create assertions: assert : Bool -> Assertion assertEqual : a -> a -> Assertion assertNotEqual : a -> a -> Assertion lazyAssert : (() -> Bool) -> Assertion  assertionList : List a -> List a -> List Assertion Example usage of these functions might be: assert        (a > 5)             -- Returns an AssertTrue assertion assertEqual    a b                -- Returns an AssertEqual assertion assertNotEqual a b                -- Returns an AssertNotEqual assertion lazyAssert (\_ -> a > 5)          -- Same as the assert example, but delays execution until test runtime assertionList [a, b, c] [d, e, f] -- Shorthand for [assertEqual a d, assertEqual b e, assertEqual c f] The lazyAssert function can be useful for testing functions which might possibly cause a runtime error. With all the other assertion functions, the tests are actually run when the file is loaded, which can cause runtime errors on page load, but with lazyAssert, any runtime errors are delayed until actual test execution. Note that for this to work, you must manually write an anonymous function of type () -> Bool; Grouping Tests Writing many tests as a flat list quickly becomes unwieldy. For easier maintenance you can group tests into logical units called test suites. The following function will create a test suite from a suite name and a list of tests: suite : String -> List Test -> Test The type of a test suite is simply Test, allowing use of all the test runners with either a single test or a suite of tests. Test suites can also contain subsuites, of course. The other benefit of grouping tests into suites is that the test runners described in the following sections will greatly simplify the output, showing only detailed information in suites that contain failed tests, making it easier to quickly spot the failures instead of being flooded with irrelevant data. Running Tests The simplest way to run tests and display the output is the elementRunner : Test -> Element function, which is an easy way to run your tests and report the results in-browser, as a standard Elm module. A full example could be: -- Example.elm import String import Graphics.Element exposing (Element)  import ElmTest exposing (..)   tests : Test tests =      suite ""A Test Suite""         [ test ""Addition"" (assertEqual (3 + 7) 10)         , test ""String.left"" (assertEqual ""a"" (String.left 1 ""abcdefg""))         , test ""This test should fail"" (assert False)         ]   main : Element main =      elementRunner tests Compile this with elm-make Example.elm --output Example.html and open the resulting file in your browser, and you'll see the results. Another method is the stringRunner : Test -> String function. This is almost the same, but it returns a String instead of an Element. The String is a summary of the overall test results. Here's the same example as before, but modified for stringRunner: -- Example.elm import String import Graphics.Element exposing (Element, show)  import ElmTest exposing (..)   tests : Test tests =      suite ""A Test Suite""         [ test ""Addition"" (assertEqual (3 + 7) 10)         , test ""String.left"" (assertEqual ""a"" (String.left 1 ""abcdefg""))         , test ""This test should fail"" (assert False)         ]   main : Element main =      show (stringRunner tests) There is one more version of this function: consoleRunner : Test -> IO (). This is designed to work with Laszlo Pandy's elm-console library. See the below section on Testing from the Command Line for details. Demo For a quick demo, you can compile the ElementExample.elm file, or continue to the next section: Testing from the Command Line See https://github.com/laszlopandy/elm-console for details, but here's the short version: Make a file that uses the Console runner and sets up the appropriate ports: -- Example.elm import String import Task  import Console import ElmTest exposing (..)   tests : Test tests =      suite ""A Test Suite""         [ test ""Addition"" (assertEqual (3 + 7) 10)         , test ""String.left"" (assertEqual ""a"" (String.left 1 ""abcdefg""))         , test ""This test should fail"" (assert False)         ]   port runner : Signal (Task.Task x ()) port runner =     Console.run (consoleRunner tests) Then compile it, run the elm-io.sh script inside the elm-console directory (you can find this in your project's elm-stuff directory) to process the file, and run it with node: $ elm-make Example.elm --output raw-test.js $ sh ./elm-stuff/packages/laszlopandy/elm-console/1.1.0/elm-io.sh raw-test.js test.js $ node test.js   5 suites run, containing 17 tests   3 suites and 16 tests passed   2 suites and 1 tests failed  Test Suite: A Test Suite: FAILED   Test Suite: Some tests: all tests passed   Test Suite: Some other tests: FAILED     8 == 1: FAILED. Expected: 8; got: 1     3 == 3: passed.     True: passed.     test head: passed.   Test Suite: More tests!: all tests passed   3 == 3: passed.   Test Suite: Even more!!: all tests passed While the elementRunner display is nicest to read, the consoleRunner runner is amenable to automated testing. If a test suite passes the script will exit with exit code 0, and if it fails it will exit with 1. Integrating With Travis CI With elm-test and elm-console, it is possible to run continuous integration tests with Travis CI on your Elm projects. Just set up Travis CI for your repository as normal, write tests with elm-test, and include a .travis.yml file based on the following: language: haskell install:   - npm install -g elm   - elm-package install -y before_script:    - elm-make --yes --output raw-test.js tests/Tests.elm   - bash elm-stuff/packages/laszlopandy/elm-console/1.0.2/elm-io.sh raw-test.js test.js script: node test.js  You can look at the .travis.yml file in this repository to see a real example. Running tests with Gulp You can follow this gist from turboMaCk. Thanks to @turboMaCk for figuring this out. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/deadfoxygrandpa/Elm-Test"	"A unit testing framework for Elm."	"true"
"Libraries"	"elm-router"	"https://github.com/TheSeamau5/elm-router"	"Easy routing in Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"78"	"5"	"8"	"GitHub - TheSeamau5/elm-router: Easy routing in Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 78 Fork 8 TheSeamau5/elm-router Code Issues 2 Pull requests 2 Pulse Graphs Easy routing in Elm 6 commits 1 branch 1 release Fetching contributors Elm 100.0% Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.0 Nothing to show New pull request Latest commit ab6b966 May 4, 2015 TheSeamau5 Merge pull request #2 from ryanashcraft/example2-fix … Fix Example2.elm Permalink Failed to load latest commit information. src First commit Apr 14, 2015 Example.elm First commit Apr 14, 2015 Example2.elm Fix Example2.elm May 4, 2015 README.md Added link to elm-history Apr 14, 2015 elm-package.json First commit Apr 14, 2015 README.md elm-router This library contains a couple functions to assist in doing client-side routing in Elm. The way this library achieves this is by introducing the concepts of routes and routers and a match function to match url paths to different routes. Note: This library offers very simplistic mechanisms for routing and is mainly intended for small applications and to serve as an example API for what can be achieved in Elm in terms of routing. Please do not consider this API as a definitive solution to routing or that it somehow represents how routing should be done. I'd like to think that it merely represents one way routing could be done. Motivating Example elm-router allows you do define routes as follows: mainRoute : Route Html mainRoute = match   [ ""/""               :-> displayHomePage   , ""/index.html""     :-> displayHomePage   , ""/blog""           :-> blogRoute   , ""/contacts.html""  :-> displayContactsPage   ] display404Page  blogRoute : Route Html blogRoute = match   [ ""/""             :-> displayBlogListing   , ""/entry1.html""  :-> displayEntry1   , ""/entry2.html""  :-> displayEntry2   ] display404Page  Routes are created with the match function. Match takes a list of strings and functions (or Routers) and a default route and creates a route from them. In this example, if the user were to go to ""/contacts.html"", the displayContactsPage function would be called. You may also notice that these routes nest, as shown with blogRoute. In this example, if the user were to go to ""/blog/entry2.html"", the displayEntry2 function would be called. Hopefully, you can see from this example that the DSL provided by elm-router makes it easy to work with routes. The only thing you might notice is that these routes require other routes. So, how do you make those? To this, we will explore what are routes. Routes and Routers Route: A Route is defined as a function from a String to some value or computation. type alias Route a = String -> a The input String of a Route, in the case of the example, would be a url path. So, in our example, mainRoute is simply a function that, given a url path, produces Html. This is exactly what we intend with routers, to produce different views based on an input url path. An example function that would fit this description could be: displayHelloWorld : Route Html displayHelloWorld _ = text ""Hello World"" This is a function which ignores the input path and displays ""Hello World"" as text. Router: A Router is simply defined as a tuple of String and Route. type alias Router a = (String, Route a) As such, a Router contains sufficient information for performing a simple pattern match on strings. We can trivially take a string, match on the Router's string, and if the match succeeds, call the Router's route. So, now that we understand the fundamental types, let's understand how match works. Match As stated in the example, match takes a list of routers and a default route and returns a route. match : List (Router a) -> Route a -> Route a Basically what happens is that match will take an input string and go through each router one by one to see if there is a match. If there is one, it will call on the matched router's route. If no strings match, then it will call on the default route. So, in our example above, the default route is display404Page. This is the common catch-all for websites where they refer you to a 404 page to tell the user that they have entered an unknown url. A minimal example match would be: route : Route String route = match   [""/index.html"" :-> (\_ -> ""Hello world"")]   (\_ -> ""Nothing Here"")  -- route ""/index.html"" == ""Hello world"" -- route ""/someotherthing"" == ""Nothing Here"" -- route ""/"" == ""Nothing Here"" -- route ""/index.htmlejnuz"" == ""Hello world"" -- route ""/index.htm"" == ""Nothing Here"" From this example we can see that, if the given string starts with one of the reference strings in the list of routers, the appropriate function will be called, even if the given string is non-sensical. If the given string is not matched completely, then match will default to the given default route. So, ok, match sees if the given string starts with one of the reference strings and then calls the appropriate route. But what does it call that route with? To answer this, let's tweak our minimal example a bit. route : Route String route = match   [""/index.html"" :-> (\string -> string)]   (\string -> string)  -- route ""/index.html"" == """" -- route ""/someotherthing"" == ""/someotherthing"" -- route ""/"" == ""/"" -- route ""/index.htmlejnuz"" == ""ejnuz"" -- route ""/index.htm"" == ""/index.htm"" So, now we have modified our route to simply output what it was given. We can already see the behavior of match from this example. In the case that an input string was matched against a reference string in a router, match will pass the remainder of the input string to the route. In essence, match will string the part of the input string that is matched and pass what is left to the route. So, if we had ""hello"" as input and matched against ""he"", match would pass ""llo"" to the route. In the case that an input string was not matched, it will pass the entire input to the default route. This is partly because, since there is nothing to match, there is nothing to string and partly because this may be useful for debugging and analytics purposes. It is also important to note that match matches routers in the order you state them. This means that in the following example: route = match   [ ""/user""       :-> userRoute   , ""/users.html"" :-> displayUserListing   ] display404Page  the ""/users.html"" router will never be matched. This is because if you pass ""/users.html"" to route, then the ""/user"" router will be matched and userRoute will be called with the string ""s.html"". In order to solve this issue, you must re-order the routers as follows: route = match   [ ""/users.html"" :-> displayUserListing   , ""/user""       :-> userRoute   ] display404Page Now, match will try ""/users.html"" first. At this point, you may note that in our very first example, we used ""/"" as a router before all the other routers. You would assume that all the other routes are unreachable. This is not the case because match special cases the empty string and ""/"" due to their prevalence. Finally, you may have noticed the weird :-> operator. This is just an alias for the (,) tuple constructor. (:->) : String -> Route a -> Router a (:->) = (,) For more details on usage, please refer to the examples in the repo. Note that this library is best used in conjunction with elm-history as it allows you to capture the url path as it changes and thus match on it. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TheSeamau5/elm-router"	"Easy routing in Elm."	"true"
"Libraries"	"elm-http"	"https://github.com/evancz/elm-http"	"Make HTTP requests in Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"67"	"9"	"38"	"GitHub - evancz/elm-http: Make HTTP requests in Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 67 Fork 38 evancz/elm-http Code Issues 13 Pull requests 5 Pulse Graphs Make HTTP requests in Elm http://package.elm-lang.org/packages/evancz/elm-http/latest 57 commits 1 branch 4 releases Fetching contributors Elm 76.7% JavaScript 23.3% Elm JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 3.0.1 3.0.0 2.0.0 1.0.0 Nothing to show New pull request Latest commit 4f3740b Jun 6, 2016 evancz Merge pull request #30 from jgillich/patch-1 … fix get/post example code Permalink Failed to load latest commit information. src Merge pull request #30 from jgillich/patch-1 Jun 6, 2016 .gitignore Ignore elm-stuff/ directory Apr 9, 2015 LICENSE Check in initial draft of elm-http Mar 8, 2015 README.md Fix compile errors in example Apr 10, 2015 elm-package.json Bump to 3.0.1 Mar 27, 2016 README.md elm-http Make HTTP requests in Elm. The Http module aims to cover some of the most common cases of requesting JSON data, but also have lower-level functions such that the API covers all of the underlying functionality. Example import Http import Json.Decode as Json exposing ((:=)) import Task exposing (..)   lookupZipCode : String -> Task Http.Error (List String) lookupZipCode query =     Http.get places (""http://api.zippopotam.us/us/"" ++ query)   places : Json.Decoder (List String) places =   let place =         Json.object2 (\city state -> city ++ "", "" ++ state)           (""place name"" := Json.string)           (""state"" := Json.string)   in       ""places"" := Json.list place Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/evancz/elm-http"	"Make HTTP requests in Elm."	"true"
"Libraries"	"elm-http-extra"	"https://github.com/lukewestby/elm-http-extra"	"Build and handle JSON requests more naturally than with low-level elm-http."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"6"	"4"	"GitHub - lukewestby/elm-http-extra: REPUBLISHED AS lukewestby/elm-http-builder FOR 0.17 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 32 Fork 4 lukewestby/elm-http-extra Code Issues 2 Pull requests 0 Pulse Graphs REPUBLISHED AS lukewestby/elm-http-builder FOR 0.17 https://github.com/lukewestby/elm-http-builder 54 commits 1 branch 12 releases Fetching contributors Elm 96.5% JavaScript 3.0% Shell 0.5% Elm JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 5.2.0 5.1.0 5.0.0 4.0.0 3.0.1 3.0.0 2.0.0 1.2.2 1.2.1 1.2.0 1.1.0 1.0.0 Nothing to show New pull request Latest commit 2f3e7b9 May 1, 2016 lukewestby Update README.md Permalink Failed to load latest commit information. scripts src/Http tests/unit .gitignore .travis.yml latest node version, speed boost Apr 9, 2016 CODE_OF_CONDUCT.md LICENSE README.md elm-package.json README.md Republished as elm-http-builder for 0.17 elm-http-extra Chainable functions for building HTTP requests and composable functions for handling responses. Need help? Join the #http channel in the Elm Slack! Thanks to @fredcy, @rileylark, and @etaque for the original discussion of the API Example In this example, we expect a successful response to be JSON array of strings, like: [""hello"", ""world"", ""this"", ""is"", ""the"", ""best"", ""json"", ""ever""] and an error response might have a body which just includes text, such as the following for a 404 error: Not Found. We'll use HttpExtra.jsonReader and a Json.Decode.Decoder to parse the successful response body and HttpExtra.stringReader to accept a string body on error without trying to parse JSON. import Time import Http.Extra as HttpExtra exposing (..) import Json.Decode as Json   itemsDecoder : Json.Decoder (List String) itemsDecoder =   Json.list Json.string   addItem : String -> Task (HttpExtra.Error String) (HttpExtra.Response (List String)) addItem item =   HttpExtra.post ""http://example.com/api/items""     |> withStringBody (""{ \""item\"": \"""" ++ item ++ ""\"" }"")     |> withHeader ""Content-Type"" ""application/json""     |> withTimeout (10 * Time.second)     |> withCredentials     |> send (jsonReader itemsDecoder) stringReader Contributing I'm happy to receive any feedback and ideas for about additional features. Any input and pull requests are very welcome and encouraged. If you'd like to help or have ideas, get in touch with me at @luke_dot_js on Twitter or @luke in the elmlang Slack! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lukewestby/elm-http-extra"	"Build and handle JSON requests more naturally than with low-level elm-http."	"true"
"Libraries"	"elm-console"	"https://github.com/laszlopandy/elm-console"	"Elm library to read and write to the console in Node."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"41"	"3"	"16"	"GitHub - laszlopandy/elm-console: Elm library to read and write to the console in Node. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 41 Fork 16 laszlopandy/elm-console forked from maxsnew/IO Code Issues 4 Pull requests 3 Pulse Graphs Elm library to read and write to the console in Node. 122 commits 9 branches 13 releases 8 contributors Elm 76.0% JavaScript 17.9% Shell 6.1% Elm JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.14 elmloader environment generalize master native overflow run-with-tasks travis Nothing to show old-IO-1.0.1 old-IO-1.0.0 old-IO-0.3.0.0 old-IO-0.2.0.0 old-IO-0.1.2.0 old-IO-0.1.1 old-IO-0.1 1.1.1 1.1.0 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Pull request Compare This branch is 20 commits ahead, 1 commit behind maxsnew:master. Latest commit d788cac Mar 21, 2016 laszlopandy Bump: 1.1.1 Permalink Failed to load latest commit information. src Update require guard Mar 10, 2016 test Small echo string for test Nov 24, 2015 .gitignore Test script. Sep 15, 2015 .travis.yml Fix tests Sep 15, 2015 LICENSE Cabalify and remove elm-runtime.js Feb 7, 2014 README.md Readme Sep 15, 2015 elm-io.sh Use Tasks for running IO, instead of ports. Jul 13, 2015 elm-package.json Bump: 1.1.1 Mar 21, 2016 README.md Elm Console This library allows reading and writing from the console in Node. It is a replacement for maxsnew/IO, which is no longer updated. Example An elm Program: module Main where  import Console exposing (IO, (>>>), (>>=), forever, getLine, pure, exit, putStrLn) import Task  import List import Maybe import String  echo : IO () echo = forever (getLine >>= putStrLn)  loop : IO () loop = getLine >>= \s ->        if s == ""exit""        then pure ()        else putStrLn s >>> loop  hello : IO () hello = putStrLn ""Hello, Console!"" >>>         putStrLn ""I'll echo your input until you say \""exit\"":"" >>>         loop >>>         putStrLn ""That's all, folks!"" >>>         exit 0  port runner : Signal (Task.Task x ()) port runner = Console.run hello link in some javascript and then run: $ elm-make --yes test/Test.elm raw-test.js ... $ ./elm-io.sh raw-test.js test.js $ node test.js Hello, Console! I'll echo your input: hooray hooray That's all, folks!  Design and Implementation The implementation is based on the IOSpec haskell library. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/laszlopandy/elm-console"	"Elm library to read and write to the console in Node."	"true"
"Libraries"	"Lazy"	"https://github.com/maxsnew/lazy"	"Lazy Evaluation in Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"5"	"8"	"GitHub - maxsnew/lazy: Lazy Evaluation in Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 17 Fork 8 maxsnew/lazy Code Issues 0 Pull requests 1 Pulse Graphs Lazy Evaluation in Elm 53 commits 1 branch 6 releases Fetching contributors Elm 86.1% JavaScript 13.9% Elm JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.1.0 1.0.1 1.0.0 0.3 0.2 0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src .gitignore LICENSE README.md elm-package.json README.md Laziness in Elm This package provides the basic primitives for working with laziness in Elm. Motivating Example Maybe you have 100 different graphs you want to show at various times, each requiring a decent amount of computation. Here are a couple ways to handle this: Compute everything up front. This will introduce a delay on startup, but it should be quite fast after that. Depending on how much memory is needed to store each graph, you may be paying a lot there as well. Compute each graph whenever you need it. This minimizes startup cost and uses a minimal amount of memory, but when you are flipping between two graphs you may be running the same computations again and again. Compute each graph whenever you need it and save the result. Again, this makes startup as fast as possible fast, but since we save the result, flipping between graphs becomes much quicker. As we look at more graphs we will need to use more and more memory though. All of these strategies are useful in general, but the details of your particular problem will mean that one of these ways provides the best experience. This library makes it super easy to use strategy #3. Pitfalls Laziness + Time — Over time, laziness can become a bad strategy. As a very simple example, think of a timer that counts down from 10 minutes, decrementing every second. Each step is very cheap to compute. You subtract one from the current time and store the new time in memory, so each step has a constant cost and memory usage is constant. Great! If you are lazy, you say “here is how you would subtract one” and store that entire computation in memory. This means our memory usage grows linearly as each second passes. When we finally need the result, we might have 10 minutes of computation to run all at once. In the best case, this introduces a delay that no one really notices. In the worst case, this computation is actually too big to run all at once and crashes. Just like with dishes or homework, being lazy over time can be quite destructive. Laziness + Concurrency — When you add concurrency into the mix, you need to be even more careful with laziness. As an example, say we are running expensive computations on three worker threads, and the results are sent to a fourth thread just for rendering. If our three worker threads are doing their work lazily, they “finish” super quick and pass the entire workload onto the render thread. All the work we put into designing this concurrent system is wasted, everything is run sequentially on the render thread! It is just like working on a team with lazy people. You have to pay the cost of coordinating with them, but you end up doing all the work anyway. You are better off making things single threaded! Learn More One of the most delightful uses of laziness is to create infinite streams of values. Hopefully we can get a set of interesting challenges together so you can run through them and get comfortable. For a deeper dive, Chris Okasaki's book Purely Functional Data Structures and thesis have interesting examples of data structures that get great benefits from laziness, and hopefully it will provide some inspiration for the problems you face in practice. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/maxsnew/lazy"	"Lazy Evaluation in Elm."	"true"
"Libraries"	"elm-ui"	"https://github.com/gdotdesign/elm-ui"	"UI Library in Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"262"	"20"	"4"	"GitHub - gdotdesign/elm-ui: UI Library in Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 262 Fork 4 gdotdesign/elm-ui Code Issues 4 Pull requests 0 Wiki Pulse Graphs UI Library in Elm http://gdotdesign.github.io/elm-ui/ 454 commits 7 branches 8 releases Fetching contributors CSS 89.0% Elm 9.2% JavaScript 1.8% CSS Elm JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.2 elm-css file-input form gh-pages markdown master Nothing to show 0.2.2 0.2.1 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 75959d9 Jul 11, 2016 gdotdesign Added Ui.NotificationCenter to exposed list of modules for documentat… … …ion. Permalink Failed to load latest commit information. bin Allow specifying the compiled Elm file. Jul 4, 2016 public Move the loading of the stylesheet into the html from Ui.App Jun 13, 2016 source Add setValue to Ui.InplaceInput. Jul 10, 2016 specs Fixes for specs and tests. Jan 22, 2016 stylesheets Added space-around and space-between aligns for container & minor fixes. Jul 7, 2016 tests Fix tests and remove not testable cases. May 10, 2016 .gitignore Add missing files. Jun 6, 2016 .scss-lint.yml Some cleanup of the css. Dec 19, 2015 .travis.yml Build on 6.1 instead of 5.4 May 14, 2016 CHANGELOG.md Bump version. Jun 30, 2016 CONTRIBUTING.md Update README and Add CONTRIBUTING file. Feb 7, 2016 Gulpfile.js Started CLI. Jan 13, 2016 License.md Rename License.md Dec 21, 2015 README.md Update Readme.md Mar 22, 2016 elm-install.sh Use fallback loop when installing packages. Apr 13, 2016 elm-package.json Added Ui.NotificationCenter to exposed list of modules for documentat… Jul 11, 2016 package.json Bump version. Jun 30, 2016 tests.js Started tests. Dec 29, 2015 README.md ⚠️ This library is still under development use it in production at your own risk. ⚠️ Elm UI An opinionated UI library and application framework for the web in Elm, following the Elm Architecture. Getting Started Elm-UI provides you the following features: An application framework: Elm is used for the frontend logic Sass is used for the stylesheets Lots of components ready to be used Support for environment configurations A development workflow: A command for scaffolding a project with a demo to quickly get started A development server which will reload your page when an Elm file is changed and inject the css when a Sass file is changed (via BrowserSync) The error messages are displayed (with color if available) in the browser both for Elm and Sass A build command to build your final files Conventions to keep things simple Installing Elm-UI is avaiable as a command line client via NPM: npm install elm-ui -g See Command Line Interface (CLI) for documentation. Scaffolding a new Project To scaffold a new project just use the elm-ui init my-project-name command. The elm-ui.json The project configuration lives in the elm-ui.json file, which is a clone of Elms elm-package.json file. This is needed because the Elm Package Manager doesn't support installing packages from Github, so Elm-UI manages the the actual elm-package-json. You can add elm packages and source directories that you need into the elm-ui.json file. Elm-UI dependecies are automatically added when installing, you can see them here. Installing Packages After you scaffolded a project you need to install Elm packages with the elm-ui install command. Starting the development server Use the elm-ui server to start a development server. There are three applications are available on different ports: localhost:8001 - The main application localhost:8002 - The proxied application that reloads on changes localhost:8003 - The BrowserSync UI (options) Building Build the final files with elm-ui build into dist directory. Implemented Componets All of the components business logic is written completely in Elm (while using the minimum Native bindings possible). Interactive components so far: Ui.App - The base for a web or mobile application Ui.Button - Basic button component with different sizes and styles Ui.ButtonGroup - A component for handling multiple buttons in a row Ui.IconButton - A button with an icon on the left or right side Ui.Calendar - A calendar component (orignially for the date picker) Ui.Checkbox - Basic checkobx with three variations (checkbox, toggle, radio) Ui.Chooser - A searchable, customizable select box with lots of features Ui.ColorPanel - An interface for manipulating a hue, saturation and value properties of a color Ui.ColorPicker - An input for selecting a color with a color panel Ui.DatePicker - A date picker component using a calendar Ui.DropdownMenu - A dropdown menu that is always visible on the screen Ui.Image - An image that fades when loaded Ui.InplaceInput - An input that can be edited in place (display and form view with a save button) Ui.Input - Basic input component Ui.Loader - A loader component Ui.Modal - A base for modal dialogs Ui.NotificationCenter - A component for displaying messages to the user Ui.NumberPad - An interface for providing number values (like a calculator or lock screen) Ui.NumberRange - An interface for maniuplating a number value by dragging Ui.Pager - A pager component Ui.Ratings - A ratings component Ui.SearchInput - An input component for handling text search Ui.Slider - A slider component Ui.Tagger - A component to manage tags on an entity Ui.Textarea - An automatically growing textarea Ui.Time - A component to show relative time Ui.Tabs - A tab component Static components so far: Ui.Container - A flexbox container for layouts Ui.icon - Icons from Ionicons Ui.title - Title Ui.subTitle - Subtitle Ui.panel - Panel for grouping content Ui.inputGroup - Container for and input and a label Ui.fab - Floating action button Ui.Header - A mobile header Ui.Header.title - A title for a mobile header Ui.Header.icon - An icon to be used in a header Ui.Header.item - An item to be used in a header Ui.Header.iconItem - An icon item to be used in a header Ui.Header.separator - A separator to be used in a header Planned components: Ui.Upload - A file upload component Ui.MaskedInput - An input component where the value is masked by a pattern Ui.CheckboxGroup - A component for selecting a value via checkboxes Documentation Currently the only documentation is the Elm documentation that you can generate with the npm run elm-docs and then opening the documentation.json with the preview feature in http://package.elm-lang.org/help/docs-preview. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gdotdesign/elm-ui"	"UI Library in Elm."	"true"
"Libraries"	"elm-mdl"	"https://github.com/debois/elm-mdl"	"Material Design component library in Elm. With."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"160"	"22"	"23"	"GitHub - debois/elm-mdl: Elm-port of the Material Design Lite CSS/JS library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 160 Fork 23 debois/elm-mdl Code Issues 13 Pull requests 0 Pulse Graphs Elm-port of the Material Design Lite CSS/JS library 319 commits 5 branches 16 releases 10 contributors Elm 98.8% Other 1.2% Elm Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master patch-1 ripple-fix v6 Nothing to show native 6.0.3 6.0.2 6.0.1 6.0.0 5.0.0 4.0.0 3.1.0 3.0.0 2.1.3 2.1.2 2.1.1 2.1.0 2.0.0 1.0.1 1.0.0 Nothing to show New pull request Latest commit fcbc0b8 Jul 15, 2016 debois Merge branch 'v6' Permalink Failed to load latest commit information. demo Renamed slider to view Jul 15, 2016 examples Dependencies. Jun 29, 2016 src Merge branch 'v6' Jul 15, 2016 .gitignore Gitignore *~ files Jul 4, 2016 .travis.yml Re-organised travis testing Apr 13, 2016 CONTRIBUTING.md docs Jun 27, 2016 Makefile Dependencies. Jun 29, 2016 README.md Update README.md Jun 27, 2016 RELEASE.md Update RELEASE.md Jun 27, 2016 elm-package.json Merge branch 'v6' Jul 15, 2016 page.html . May 18, 2016 README.md Material Design Components for Elm Port of Google's Material Design Lite CSS/JS implementation of the Material Design Specification. Live demo & package documentation. MDL is implemented primarily through CSS, with a little bit of JavaScript adding and removing CSS classes in response to DOM events. This port re-implements the JavaScript parts in Elm, but relies on the CSS of MDL verbatim. Get Started Adapt examples/Component.elm to suit your needs. Then refer to the extensive package documentation, or look at the source of the Live demo, which exercises most components of the library. Contribute Contributions are warmly encouraged! Whether you are a newcomer to Elm or an accomplished expert, the MDL port presents interesting challenges. Refer to this page for a detailed list of possible contributions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/debois/elm-mdl"	"Material Design component library in Elm. With."	"true"
"Libraries"	"demo"	"https://debois.github.io/elm-mdl/"	"Material Design component library in Elm. With."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"elm-mdl-demo"	"null"	"null"	"Material Design component library in Elm. With."	"true"
"Libraries"	"elmfire"	"https://github.com/ThomasWeiser/elmfire"	"Use Firebase as backend. For higher level API:."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"105"	"16"	"4"	"GitHub - ThomasWeiser/elmfire: Firebase Bindings for Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 105 Fork 4 ThomasWeiser/elmfire Code Issues 4 Pull requests 0 Pulse Graphs Firebase Bindings for Elm http://package.elm-lang.org/packages/ThomasWeiser/elmfire/latest 81 commits 1 branch 9 releases 4 contributors Elm 67.2% JavaScript 27.9% Makefile 2.8% HTML 2.1% Elm JavaScript Makefile HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show announcement-2015-04-17 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Latest commit 8f1bede May 5, 2016 ThomasWeiser Update Firebase.js to v2.4.2 Permalink Failed to load latest commit information. demo Use latest Firebase version. Some linting and wording. Oct 18, 2015 example Use latest Firebase version. Some linting and wording. Oct 18, 2015 src Update Firebase.js to v2.4.2 May 5, 2016 test Use latest Firebase version. Some linting and wording. Oct 18, 2015 .gitignore Fix docs and add missing type annotations Aug 5, 2015 LICENSE First released version: basic functionality for `set` and `query` Apr 17, 2015 README.md Documentation fixes May 1, 2016 elm-package.json Update Firebase.js to v2.4.2 May 5, 2016 README.md ElmFire: Use the Firebase API in Elm Virtually all features of the Firebase Web API are exposed as a library for Elm: Setting, removing and modifying values Transactions Querying data, both one-time and per subscription Complex queries with sorting, filtering and limiting Authentication User management Offline capabilities In addition to these base functions the package elmfire-extra provides a higher-level synchronization API, which allows you to treat your Firebase data like a local Elm-Dict. Demo application for these APIs: Collaborative TodoMVC API Usage The API design corresponds closely to the targeted Firebase JavaScript API. Please refer to the original documentation for further discussions of the concepts. In the following we give a short overview of the API. Detailed documentation is embedded in the source code. Constructing Firebase Locations To refer to a Firebase path use a Location. It can be built with the following functions: -- Location is an opaque type. fromUrl  : String -> Location sub      : String -> Location -> Location parent   : Location -> Location root     : Location -> Location push     : Location -> Location location : Reference -> Location These are all pure functions. They don't touch a real Firebase until the resulting location is used in one of the tasks outlined below. Example: location : Location location =   fromUrl ""https://elmfire.firebaseio-demo.com/test""     |> parent     |> sub ""anotherTest""`     |> push References to Locations Most actions on a Firebase location return a reference to that location. Likewise, query results contain a reference to the location of the reported value. References can inform about the key or the complete URL of the referred location. And a reference may be converted back to a location, which can be used in a new task. There is a special task to open a location without modifying or querying it, which results in a reference if the location is valid. It's generally not necessary to explicitly open a constructed location, but it may be used to check the validity of a location or to cache Firebase references. -- Reference is an opaque type key      : Reference -> String toUrl    : Reference -> String location : Reference -> Location open     : Location -> Task Error Reference Modifying Values set             : Value -> Location -> Task Error Reference setWithPriority : Value -> Priority -> Location -> Task Error Reference setPriority     : Priority -> Location -> Task Error Reference update          : Value -> Location -> Task Error Reference remove          : Location -> Task Error Reference These tasks complete when synchronization to the Firebase servers has completed. On success they result in a Reference to the modified location. They result in an error if the location is invalid or if you have no permission to modify the data. Values are given as Json values, i.e. Json.Encode.Value. Example: port write : Task Error () port write =   set (Json.Encode.string ""new branch"") (push location)   `andThen`   (\ref -> ... ref.key ... ) Transactions Atomic modifications of the data at a location can be achieved by transactions. A transaction takes an update function that maps the previous value to a new value. In case of a conflict with concurrent updates by other clients the update function is called repeatedly until no more conflict is encountered. transaction : (Maybe Value -> Action) ->               Location ->               Bool ->               Task Error (Bool, Snapshot) type Action = Abort | Remove | Set Value Example: port trans : Task Error -> Task Error () port trans =   transaction     ( \maybeVal -> case maybeVal of         Just value ->           case Json.Decode.decodeValue Json.Decode.int value of             Ok counter -> Set (Json.Encode.int (counter + 1))             _          -> Abort         Nothing ->           Set (Json.Encode.int 1)     ) location False   `andThen`   (\(committed, snapshot) -> ... ) Querying once        : Query -> Location -> Task Error Snapshot subscribe   : (Snapshot -> Task x a) ->               (Cancellation -> Task y b) ->               Query ->               Location ->               Task Error Subscription unsubscribe : Subscription -> Task Error () Use once to listen to exactly one event of the given type. The first parameter specifies the event to listen to: valueChanged, childAdded, childChanged, childRemoved or childMoved. Additionally, this parameter may also specify ordering, filtering and limiting of the query (see below). If you don't need these options a simple query specification is valueChanged noOrder. The second parameter references the queried location. Use subscribe to start a continuing query of the specified events. Subscription queries return a arbitrary number of data messages, which are reported via running a supplied task. The first parameter of subscribe is a function used to construct that task from a data message. The second parameter is a function used to construct a task that is run when the query gets canceled. The third and fourth parameter of subscribe are the same as the first two of once. On success the subscribe task returns a Subscription, an identifier that can be used to match the corresponding responses and to cancel the query. type alias Snapshot =   { subscription: Subscription   , key: String   , reference: Reference   , existing: Bool   , value: Value   , prevKey: Maybe String   , priority: Priority   } type Cancellation   = Unsubscribed Subscription   | QueryError Subscription Error A Snapshot carries the resulting Value (as Json) among other information, e.g. the corresponding Subscription identifier. In queries of type valueChanged the result may be that there is no value at the queried location. In this case existing will be False and value will be the Json value of null. key corresponds to the last part of the path. It is the empty string for the root. Keys are relevant notably for child queries. Example: responses : Signal.Mailbox (Maybe Snapshot) responses = Signal.mailbox Nothing  port query : Task Error Subscription port query =   subscribe     (Signal.send responses.address << Just)     (always (Task.succeed ()))     (childAdded noOrder noLimit)     (fromUrl ""https:...firebaseio.com/..."")  ... = Signal.map         (\response -> case response of             Nothing -> ...             Just snapshot -> ...         )         responses.signal Ordering, Filtering and Limiting Queries Query results can be ordered (by value, by a child's value, by key or by priority), and then filtered by giving a start and/or end value within that order, and limited to the first or last certain number of children. Example queries to be used in once and subscribe: childAdded noOrder childAdded (orderByValue noRange noLimit) childAdded (orderByChild ""size"" noRange noLimit) childAdded (orderByKey noRange noLimit) childAdded (orderByPriority noRange (limitToFirst 2)) childAdded (orderByValue (startAt (Json.Encode.string ""foo"")) noLimit) childAdded (orderByValue (startAt (Json.Encode.string ""foo"")) (limitToLast 10)) childAdded (orderByChild ""size"" (equalTo (Json.Encode.int 42)) noLimit) childAdded (orderByKey (endAt ""k"") noLimit) childAdded (orderByPriority (startAt (NumberPriority 17, Just ""k"")) noLimit) When doing ordered valuedChanged queries it may be useful to map the result to a list to conserve the ordering: toSnapshotList : Snapshot -> List Snapshot toValueList    : Snapshot -> List JE.Value toKeyList      : Snapshot -> List String toPairList     : Snapshot -> List (String, JE.Value) Authentication The sub-module ElmFire.Auth provides all authentication and user management functions that are offered by Firebase. Some example tasks: import ElmFire.Auth exposing (..)  -- create a new user-account with email and password userOperation (createUser ""me@some.where"" ""myPassword"")  -- login with with email and password authenticate loc [rememberSessionOnly] (withPassword ""me@some.where"" ""myPassword"")  -- login with with github account authenticate loc [] (withOAuthPopup ""github"")  -- watch for logins and logouts subscribeAuth   (\maybeAuth -> case maybeAuth of     Just auth -> ... auth.uid ...     Nothing   -> ... -- not authenticated   )   loc Offline Capabilities Detecting connection state changes: subscribeConnected Manually disconnect and reconnect: goOffline, goOnline Managing presence: onDisconnectSet, onDisconnectSetWithPriority, onDisconnectUpdate, onDisconnectRemove, onDisconnectCancel Handling latency: subscribeServerTimeOffset, serverTimeStamp Examples There is a basic example app in example/src/Example.elm. To build it: cd example make all open Alternatively without using make: cd example elm make --output Example.html src/Example.elm TodoMVC A more extensive example is this implementation of TodoMVC as a collaborative real-time app. Testing There is a testing app, living in the directory test, that covers most of the code. It runs a given sequence of tasks on the Firebase API and logs these steps along with the several results. This app uses a small ad-hoc testing framework for task-based code. There is a Makefile to build the app. On most Unix-like systems a cd test; make all open should do the trick. An older, still functional testing app lives in the directory demo. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ThomasWeiser/elmfire"	"Use Firebase as backend. For higher level API:."	"true"
"Libraries"	"elmfire-extra"	"https://github.com/ThomasWeiser/elmfire-extra"	"Use Firebase as backend. For higher level API:."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"3"	"2"	"GitHub - ThomasWeiser/elmfire-extra: High-level API for ElmFire Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 10 Fork 2 ThomasWeiser/elmfire-extra Code Issues 1 Pull requests 0 Pulse Graphs High-level API for ElmFire http://package.elm-lang.org/packages/ThomasWeiser/elmfire-extra/latest 14 commits 1 branch 5 releases Fetching contributors Elm 96.0% Makefile 3.0% HTML 1.0% Elm Makefile HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. demo example src/ElmFire .gitignore README.md elm-package.json README.md High-level API for ElmFire Treat your Firebase data like a local Dict This package provides an API layer on top of the basic ElmFire API, that treats a Firebase collection as a key-value store and makes it available basically as an Elm dictionary with corresponding operations on it. The package consists of two modules, for reading and writing respectively: ElmFire.Dict Mirroring a Firebase location as an Elm Dict Getting a signal of all updates One-time retrieval ElmFire.Op Inserting, updating and deleting of single key-value pairs Inserting and deleting lists of key-value pairs Updating the whole collection via the higher-order functions map, filter and filterMap Operations on the whole store can selectively be run sequentially, in parallel or as a single transaction. General Usage Pattern These two modules are intended to be used together. The state of the mirrored store will be held as a dictionary as part of the application's model. Operations on the store are performed by the appropriate actions of the application. Local modifications will be reflected immediately in addition to be sent to the Firebase server and to other clients subscribed to the same Firebase location. Likewise, remote modifications will be reflected in the local mirror. Configuration All functionality of the package is guided by a configuration record that defines type mappings and other specifics of the Firebase collection. type alias Config v =   { location: ElmFire.Location   , orderOptions: ElmFire.OrderOptions   , encoder: v -> JD.Value   , decoder: JD.Decoder v   }  location specifies the Firebase and sub-path where the store is hosted. orderOptions can be used to filter and limit the elements, that should be included in the local mirror. Use ElmFire.noOrder to access the whole collection. The API is parameterized on the store's value type v. This can be any Elm type, as long as suitable conversion functions are provided. Note that the keys are always of type String. encoder and decoder are the functions used to convert between the value type in Elm code and the JSON schema in the Firebase. Example Code We setup a simple store with values of type Int. url = ""https://myfirebase.firebaseio.com/sub/path""  config : ElmFire.Dict.Config Int config =   { location = ElmFire.fromUrl url   , orderOptions = ElmFire.noOrder   , encoder = Json.Encode.int   , decoder = Json.Decode.int   } Start to mirror the store as a signal model. mirror = ElmFire.Dict.mirror config  port initSubscription : Task ElmFire.Error (Task ElmFire.Error ()) port initSubscription = fst mirror  model : Signal (Dict String Int) model = snd mirror Define two operations on the store and run them. The result will be reflected in the mirror. -- Initialize the store  (run the tasks via a port) opInit : ElmFire.Op.Operation Int opInit =   ElmFire.Op.fromList     ElmFire.Op.sequential     [(""foo"",1), (""bar"",2)]  -- Double each value opMap : ElmFire.Op.Operation Int opMap =   ElmFire.Op.map     ElmFire.Op.sequential     (\key val -> val * 2)  port runOperation : Task ElmFire.Error (List ElmFire.Reference) port runOperation =   Task.sequence <|     List.map (ElmFire.Op.operate config) [opInit, opMap, opMap] The package includes the complete example code in directory example/. There is also a more detailed demonstration app in directory demo/ Examples of projects using elmfire-extra TodoMVC An example usage of this package is this fork of TodoMVC. It uses Firebase to store and share the todo items. It utilizes ElmFire.Dict and ElmFire.Op in the aforementioned usage pattern. elmfire-extra-hello-world Raine Revere published some instructive minimal example code. Starts here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ThomasWeiser/elmfire-extra"	"Use Firebase as backend. For higher level API:."	"true"
"Tools"	"elm-compiler"	"https://github.com/elm-lang/elm-compiler"	"Compiler for the Elm programming language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2926"	"162"	"249"	"GitHub - elm-lang/elm-compiler: Compiler for the Elm programming language. Elm aims to make web development more pleasant. Elm is a type inferred, functional reactive language that compiles to HTML, CSS, and JavaScript. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 162 Star 2,926 Fork 249 elm-lang/elm-compiler Code Issues 38 Pull requests 5 Pulse Graphs Compiler for the Elm programming language. Elm aims to make web development more pleasant. Elm is a type inferred, functional reactive language that compiles to HTML, CSS, and JavaScript. http://elm-lang.org/ 3,907 commits 2 branches 23 releases 65 contributors Haskell 76.4% JavaScript 20.0% Elm 3.6% Haskell JavaScript Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master stable Nothing to show 0.17.1 0.17.0 0.17 0.16.0 0.16 0.15.1 0.15 0.14.1 0.14 0.13 0.12.3 0.12.2 0.12.1.3 0.12.1 0.12 0.11 0.10.1 0.10.0.2 0.10 0.9.0.2 0.9 0.8.0.3 0.8.0.2 Nothing to show New pull request Latest commit 70d4933 Jul 15, 2016 evancz committed on GitHub Merge pull request #1437 from elm-lang/pr/1342 … Setup issue template Permalink Failed to load latest commit information. .github Move stuff into .github/ directory Jul 14, 2016 bench Check in old benchmark files so we can race 0.15 and 0.16 Oct 9, 2015 hints Fix #1205 about misspelling recursive May 12, 2016 src Fix error in code for --version Jun 7, 2016 tests Merge branch 'pr/1290' into dev Apr 27, 2016 .gitignore Clear out current benchmarks for a more targeted benchmark suite Oct 7, 2015 .gitmodules Remove submodules for now Nov 4, 2014 .travis.yml Just put the -O0 flag directly on the test suite Apr 18, 2016 ContributorAgreement.pdf Mess around with wording and switch to using a pdf for the contributo… Dec 13, 2013 How to Request Features.md Add note about how to request features to the main repo Dec 21, 2013 LICENSE Bump year in license Apr 27, 2016 README.md Make travis badge only report status of master branch Apr 27, 2016 Setup.hs Make some changes based on new .travis.yaml script Jun 1, 2015 changelog.md Format links a bit more Dec 1, 2015 elm-compiler.cabal Add version constraint on aeson-pretty Jul 15, 2016 README.md Learn about the Elm programming language at elm-lang.org. Install Follow these instructions to use Elm on your machine. Be sure to use the platform specific installers if you are on Mac or Windows. It's way easier! Build from source / Contribute Use this script to build the entire Elm Platform from source: the compiler, REPL, package manager, and reactor. Be sure to read all the instructions to learn how the script works and what your workflow will be like. Help If you are stuck, email the list or ask a question in the #Elm IRC channel. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/elm-lang/elm-compiler"	"Compiler for the Elm programming language."	"true"
"Tools"	"elm-make"	"https://github.com/elm-lang/elm-make"	"A build tool for Elm projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"78"	"15"	"24"	"GitHub - elm-lang/elm-make: A build tool for Elm projects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 78 Fork 24 elm-lang/elm-make Code Issues 11 Pull requests 2 Pulse Graphs A build tool for Elm projects 197 commits 3 branches 7 releases 5 contributors Haskell 100.0% Haskell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags build master next Nothing to show 0.17.1 0.17 0.16 0.2 0.1.2 0.1.1 0.1 Nothing to show New pull request Latest commit 0a0a1f5 Jun 7, 2016 evancz Bump to 0.17.1 Permalink Failed to load latest commit information. src Update for latest elm-package public API for descriptions and solutions May 31, 2016 .gitignore Ignore cabal artifacts Oct 7, 2014 LICENSE increment year Jan 6, 2015 README.md Make bullets a bit more parallel Nov 25, 2014 api.md Brainstorm of flags and commands that'd be nice Oct 7, 2014 elm-make.cabal Bump to 0.17.1 Jun 7, 2016 README.md elm-make elm-make is a build tool for Elm. Compile down to JS or HTML — turn Elm files into artifacts that can be used with whatever backend you are already using. Build in parallel — if you have four cores, elm-make will try to compile four files at all times. Build dependencies — elm-make is designed to work with elm-package so if you use a bunch of 3rd party packages they will all work just fine. Build what you need — if a module is not needed for your project it will not be built or appear in the resulting JS or HTML. Basic Usage Your Elm projects should all have a root directory, like project/ that all of your Elm related stuff is going to live in. Lets imagine having the following directory structure. project/     Main.elm     SearchBox.elm     SearchResults.elm     Theme.elm  We have a couple Elm modules, maybe they depend on each other in some way. To turn this into JavaScript, you can run the following command: elm-make Main.elm --output=main.html Before creating an HTML file called main.html, this will prompt you to install elm-lang/core which contains all of the core modules needed to make Elm programs work. It will also create a file called elm-package.json which gives a structured description of your project. elm-make uses this file to figure out what directories it needs to look in and which packages are relevant. More Advanced Usage A lot of the more advanced stuff involves fiddling with elm-package.json to make your directory structure nicer or to make sure you are working with the right dependencies. Directory Structure In the Basic Usage section above, we saw a pretty boring directory structure. As we actually used it, it would probably expand to look like this: project/     elm-package.json     elm-stuff/...     LICENSE     Main.elm     README.md     SearchBox.elm     SearchResults.elm     Theme.elm  Pretty messy! There is a field in elm-package.json called source-directories that allows you to list all the directories that contain Elm modules. By default it only lists the root directory . but it is best to change that a bit. If you are doing an Elm only project, this structure is pretty nice. project/     src/         Main.elm         SearchBox.elm         SearchResults.elm         Theme.elm     elm-package.json     LICENSE     README.md  I would set ""source-directories"": [ ""src"" ] keeping the root of the project as clean as possible. If you have a project that has both frontend and backend components, I have been experimenting with this directory structure. project/     backend/...     frontend/         Main.elm         SearchBox.elm         SearchResults.elm         Theme.elm     elm-package.json     LICENSE     README.md  In this world you set ""source-directories"": [ ""frontend"" ]. This pattern is used for the package.elm-lang.org project and seems to work pretty well. Managing Dependencies There are two general approaches to managing dependencies depending on what you are trying to do. These rules may not apply in every case, but they are good guidelines. If you are creating a package for others to use, you want to keep your dependency ranges as broad as possible. You also only want to extend ranges as far as you have tested. When you say ""my library works with 4.0.0 of this package"" before that version has been released or before you have tested with it, you are likely to make life suck for your users. Do not do that! If you are creating an app or product, you want to keep your dependency ranges very specific. When you build, a file is generated called elm-stuff/exact-dependencies.json which lists all of the packages needed for your project and the exact versions you happen to be using right now. You may want to check this in to version control if you want the same exact thing every time. If you are in camp #1 creating a package for others, we have plans to help automate the process of expanding version bounds. If your project compiles with the new stuff and your tests pass, it is conceivable that everything just works. We will be experimenting with this! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/elm-lang/elm-make"	"A build tool for Elm projects."	"true"
"Tools"	"elm-reactor"	"https://github.com/elm-lang/elm-reactor"	"Interactive development tool that makes it easy to develop and debug Elm programs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"226"	"30"	"49"	"GitHub - elm-lang/elm-reactor: Interactive development tool that makes it easy to develop and debug Elm programs. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 226 Fork 49 elm-lang/elm-reactor Code Issues 8 Pull requests 3 Pulse Graphs Interactive development tool that makes it easy to develop and debug Elm programs. 612 commits 8 branches 8 releases 18 contributors Elm 65.8% Haskell 30.1% JavaScript 2.2% Python 1.9% Elm Haskell JavaScript Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags agent-ui expando integrate-tree master next own-window revert-179-patch-1 stable Nothing to show 0.17.1 0.17 0.16 0.3.2 0.3.1 0.3 0.2 0.1 Nothing to show New pull request Latest commit 7522d7e Jun 27, 2016 evancz committed on GitHub Add link to Debug module Permalink Failed to load latest commit information. assets Add waiting.gif Apr 7, 2016 src Fix #195, load external CSS last. Jun 26, 2016 .gitignore Do not check in last-modified file Aug 12, 2015 .gitmodules Remove submodules Apr 6, 2016 LICENSE increment version numbers and years Jan 6, 2015 README.md Add link to Debug module Jun 27, 2016 build-from-source.md Move build instructions out of readme Jun 6, 2016 cabal-build.py Have cabal-build.py run build, not install Apr 7, 2016 elm-package.json Remove submodules from dependencies, add SVG dependency Apr 6, 2016 elm-reactor.cabal Bump to 0.17.1 Jun 7, 2016 README.md Elm Reactor Interactive development tool that makes it easier to develop Elm programs. Key features include: Automatically compile any Elm program Compatible with any editor This means you can get a great development experience whether you are using Sublime Text, Emacs, vim, or whatever else to edit Elm code. Install Install Elm Platform. This will install Elm Reactor and everything else it needs. Use Navigate to the Elm project you want to work on. A great project to get started with is elm-architecture-tutorial which contains some simple programs that should be fun to debug. In the root of your Elm project start the reactor with: elm-reactor Now open http://localhost:8000 in your browser. You should see a navigation page for your project. Click on any file to see what it looks like. For example, you can navigate to an Elm file like examples/1-button.elm and try it out. If you modify the file, you can just refresh that page and see the new version! Note About Time Travel In 2013, Laszlo Pandy figured out how to make a reliable Time Traveling Debugger for Elm. It became part of elm-reactor in 2014 thanks to Michael James who adapted it for how we thought people would work with it in practice. Since then (1) the internal implementation of Elm has changed a decent amount and (2) we have learned a lot about what production users need to use this tool seriously. So time travel is not available in elm-reactor right now, but it will be coming back with a new design focused on real workflows. I think this will lead us to a tool that is both more reliable and more broadly useful whether you are making games or web apps. For now, the Debug module still makes it easy to peek at values in your program. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/elm-lang/elm-reactor"	"Interactive development tool that makes it easy to develop and debug Elm programs."	"true"
"Tools"	"elm-repl"	"https://github.com/elm-lang/elm-repl"	"A REPL for Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"105"	"11"	"24"	"GitHub - elm-lang/elm-repl: A REPL for Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 105 Fork 24 elm-lang/elm-repl Code Issues 32 Pull requests 1 Pulse Graphs A REPL for Elm 247 commits 3 branches 9 releases 13 contributors Haskell 100.0% Haskell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dependencies master stable Nothing to show 0.17.1 0.17 0.16 0.4.2 0.4.1 0.4 0.3 0.2.2.1 0.2.2 Nothing to show New pull request Latest commit 413ac0d Jun 26, 2016 evancz committed on GitHub Fix #119, but don't do it upper case Permalink Failed to load latest commit information. man Update manpage Jul 18, 2014 src Make things work with the new Elm.Package.Description.read API Jun 2, 2016 tests data keyword cahnged to type Feb 6, 2015 .gitignore Rudimentary update for 0.14 Nov 18, 2014 .travis.yml Should work this time Aug 27, 2014 LICENSE it's 2014 Aug 20, 2014 README.md Fix #119, but don't do it upper case Jun 26, 2016 Setup.hs Merge branch 'master' into dev Jan 14, 2014 changelog.txt Update changelog Apr 3, 2014 elm-repl.cabal Bump to 0.17.1 Jun 7, 2016 README.md Elm REPL This tool lets you interact with values and functions directly. Install Install Elm Platform to get elm-repl. Then make sure you have node.js installed because it is needed to evaluate the generated JS. Use You can type in expressions, definitions, union types, and module imports using normal Elm syntax. > 1 + 1 2 : number  > ""hello"" ++ ""world"" ""helloworld"" : String  The same can be done with definitions and union types: > fortyTwo = 42 42 : number  > f n = n + 1 <function> : number -> number  > f 41 42 : number  > factorial n = \ |   if n < 1 then 1 \ |            else n * factorial (n-1) <function> : number -> number  > factorial 5    120 : number  > type Either a b = Left a | Right b  > case Left 32 of \ |   Left n -> 2 * n \ |   Right m -> m + 1 64 : number  You can import standard libraries and any library reachable from the directory where elm-repl is running: > import String  > String.length ""hello"" 5 : Int  > String.reverse ""flow"" ""wolf"" : String  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/elm-lang/elm-repl"	"A REPL for Elm."	"true"
"Package managers"	"elm-package"	"https://github.com/elm-lang/elm-package"	"Command line tool to share Elm libraries."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"106"	"16"	"40"	"GitHub - elm-lang/elm-package: Command line tool to share Elm libraries Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 106 Fork 40 elm-lang/elm-package Code Issues 49 Pull requests 5 Pulse Graphs Command line tool to share Elm libraries 697 commits 5 branches 16 releases 20 contributors Haskell 100.0% Haskell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags commonPackageFile init master nameConflicts stable Nothing to show 0.17.1 0.17 0.16 0.5.1 0.5 0.4 0.2.2 0.2.1 0.2 0.1.3 0.1.2 0.1.1.3 0.1.1.2 0.1.1.1 0.1.1 0.1 Nothing to show New pull request Latest commit 9011ccd Jun 27, 2016 evancz Do not print out an extra newline when nothing is downloaded Permalink Failed to load latest commit information. src Do not print out an extra newline when nothing is downloaded Jun 27, 2016 tests Revert ""Control.Monad.Error -> Control.Monad.Except almost everywhere"" Dec 30, 2014 .gitignore Stop ignoring a bunch of stuff that seems to no longer exist Sep 29, 2015 LICENSE increment year Jan 6, 2015 README.md Update README to reference elm-lang/html Jun 12, 2016 elm-package.cabal Bump to 0.17.1 Jun 7, 2016 README.md elm-package The package manager for Elm. The full catalog of community libraries is located at package.elm-lang.org. Basic Usage To install a library run: elm-package install elm-lang/html         # Install latest version elm-package install elm-lang/html 1.0.0   # Install version 1.0.0 elm-package is sandboxed by default, so the downloaded package will be placed in your projects elm-stuff/ directory. Sandboxing means it is easy for different projects to have different dependencies. Installing a package will also create a file called elm-package.json which gives a structured overview of your project, including stuff like what license you use, what packages you depend on, and which directories contain source code. Take a look at this file and see if everything looks correct! Version Rules Many people use version numbers in different ways, making it hard to give reliable version bounds in your own package. With elm-package versions are determined based on API changes. The rules are: Versions all have exactly three parts: MAJOR.MINOR.PATCH All packages start with initial version 1.0.0 Versions are incremented based on how the API changes: PATCH - the API is the same, no risk of breaking code MINOR - values have been added, existing values are unchanged MAJOR - existing values have been changed or removed elm-package will bump versions for you, automatically enforcing these rules This means that if your package works with elm-lang/html 1.0.0 it is very likely to work with everything up until 2.0.0. At that point, some breaking change has occurred that might break your code. It is conceivable that things break on a minor change if you are importing things unqualified and a newly added value causes a name collision, but that is not extremely likely. Updating Dependencies Say you know a new version of elm-lang/core has come out, but you are not sure if you want to update. You can see how big of a change it is by running the following command: elm-package diff elm-lang/core 3.0.0 4.0.0 This will show you all of the changes from version 3.0.0 which you have and version 4.0.0 which you would like to have. This gives you some real basis for deciding if you should update right now. If you like what you see, take the following steps. Save a copy of elm-stuff/exact-dependencies.json so you can always come back to a working state. Change your version bounds in elm-package.json to include the newest stuff. Run elm-package install elm-lang/core 4.0.0 and see how things go! Publishing Packages This is a step by step discussion of how to make a nice package that will be useful, easy to learn, and pleasant to use. Designing APIs Before publishing, look through the design guidelines. Some key takeaways are: Design for a concrete use case Always give functions human readable names Avoid gratuitous abstraction Preparing for Publication The information in elm-package.json determines what people will see when they browse your package on package.elm-lang.org. Here are some hints for filling in that information: Keep the summary under 80 characters. The recommended license is BSD3, but of course, you can use whatever license you want. exposed-modules lets you expose some small set of modules. Use this to stop internal details from polluting your API and cluttering the docs with modules that are not meant for users. You should also create a README.md for your project. It should explain the use case of your library along with some examples to help people get situated before deciding to use your library or diving into your documentation. Finally, you should document all of the publicly exposed modules and functions based on this format. Examples are one of the most powerful ways to learn new APIs so do not be lazy, make your users' lives easy! Publishing for the First Time When you have finished the API, tested everything, and written up docs, it is time to share it with others! All Elm packages start with version number 1.0.0 and then increase according to automatically enforced rules. For now, all you need to know is that 1.0.0 is where things start. elm-package is currently backed by GitHub, so we use GitHub tags to refer to specific version numbers. Add a version tag to your repo like this: git tag -a 1.0.0 -m ""initial release"" git push --tags This will add a tag 1.0.0 which matches the version number you are publishing. It also associates that tag with a message. You can make your message more helpful than ""initial release"". Once that is done, run the following command: elm-package publish This will send all the relevant information to the package catalog and verify that everything is in order. You just published a package! Publishing Updates Once you have published 1.0.0 you enter into the world of automatically enforced versioning as described in the version rules section. elm-package provides a couple tools to make it easy to diff APIs and figure out new version numbers. First we have API diffing with the following commands: elm-package diff        # diff current API with most recently published API elm-package diff 1.0.0  # diff current API with version 1.0.0 Both of these will help you review your changes and make sure everything is what you were expecting. From there, you can automatically bump your version number by running this command: elm-package bump Based on the version number listed in your elm-package.json file, it will run a diff and figure out the magnitude of the changes. It will then tell you your new version number! From here, everything is the same as publishing for the first time. Tag it on GitHub and publish it. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/elm-lang/elm-package"	"Command line tool to share Elm libraries."	"true"
"Tools"	"elm-init"	"https://github.com/JustusAdam/elm-init"	"Interactive setup for new Elm projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"1"	"0"	"GitHub - JustusAdam/elm-init: Initialise scaffolding for a new Elm project Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 8 Fork 0 JustusAdam/elm-init Code Issues 0 Pull requests 0 Pulse Graphs Initialise scaffolding for a new Elm project 63 commits 1 branch 11 releases Fetching contributors Haskell 97.5% HTML 1.5% Elm 1.0% Haskell HTML Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.4 v1.0.3 v1.0.2 v0.1.2.0 1.0.1.1 1.0.1.0 1.0.0.2 1.0.0.1 1.0.0.0 1.0.0 0.1.2.1 Nothing to show New pull request Latest commit a8879ee May 21, 2016 JustusAdam Updated elm version Permalink Failed to load latest commit information. resources src .gitignore Fixed a version reading bug, initialized stack Jan 26, 2016 .travis.yml Added gitignore, added compatibility to ghc>=7.6 Nov 30, 2015 LICENSE Slightly changed .cabal file Jul 20, 2015 README.md Slightly changed .cabal file Jul 20, 2015 Setup.hs initial commit May 11, 2015 elm-init.cabal Relaxed directory package lower limit Feb 17, 2016 stack.yaml Fixed a version reading bug, initialized stack Jan 26, 2016 README.md elm-init Initialize a new empty Elm project. Features Interactive setup tool for a new Elm project. This tool basically helps you populate your ""elm-package.json"" file. Including: License chooser (automatically adds license file) Version validator Install Install the package from the Hackage with cabal install elm-init. Use Simply run elm-init [DIRECTORY] or elm init [DIRECTORY] if you have the elm platform installed DIRECTORY = '.' if omitted. DIRECTORY need not exist, though needs to be a valid directory name. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JustusAdam/elm-init"	"Interactive setup for new Elm projects."	"true"
"Tools"	"elm-format"	"https://github.com/avh4/elm-format"	"Automatic Elm code formatter adhering to."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"279"	"18"	"27"	"GitHub - avh4/elm-format: elm-format formats Elm source code according to a standard set of rules based on the official Elm Style Guide Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 279 Fork 27 avh4/elm-format Code Issues 60 Pull requests 1 Pulse Graphs elm-format formats Elm source code according to a standard set of rules based on the official Elm Style Guide 688 commits 5 branches 7 releases 19 contributors Haskell 46.8% Elm 26.8% JavaScript 24.1% Shell 2.1% Batchfile 0.1% Ruby 0.1% Haskell Elm JavaScript Shell Batchfile Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags eol-comments haskell-tests master trailing-commas version Nothing to show 0.4.0-alpha 0.3.1-alpha 0.3.0-alpha 0.3.0-alpha-elm017rc1-rc1 0.2.0-alpha 0.1-alpha2 0.1-alpha-1 Nothing to show New pull request Latest commit c6e1a59 Jul 5, 2016 avh4 committed on GitHub Update Emacs plugin information Permalink Failed to load latest commit information. ci Add Concourse CI scripts for windows and linux Apr 15, 2016 package Update publishing instructions Jul 3, 2016 parser All the first argument of functions to be split to a new line Jul 2, 2016 src All the first argument of functions to be split to a new line Jul 3, 2016 tests Bump version to 0.4.1-alpha-dev Jul 3, 2016 .gitignore Change --dry to --validate and exit 1 if there are unformatted files Mar 22, 2016 .travis.yml Revert halcyon Attempt #2 Jun 8, 2016 BuildFromSource.hs Don't needlessly install elm-reactor Sep 13, 2015 CHANGELOG.md Update CHANGELOG for 0.4.0-alpha Jul 3, 2016 HLint.hs Fix warnings Oct 3, 2015 LICENSE Add Fedor Nezhivoi to the LICENSE Jun 17, 2016 PUBLISHING.md Update publishing instructions Jul 3, 2016 README.md Update Emacs plugin information Jul 5, 2016 cabal.config Enable ghc --split-objs to reduce build size Jun 8, 2016 elm-format.cabal Bump version to 0.4.1-alpha-dev Jul 3, 2016 install_system.sh Update publishing instructions May 19, 2016 README.md elm-format elm-format is still in alpha. If you run into any problems, please report them. The format produced by elm-format may change significantly before the 1.0.0 release. If this will cause problems for you, please refrain from using elm-format during the alpha- and beta-test periods. elm-format formats Elm source code according to a standard set of rules. It is inspired by the popular gofmt. The benefits of elm-format: It makes code easier to write, because you never have to worry about minor formatting concerns while powering out new code. It makes code easier to read, because there are no longer distracting minor stylistic differences between different code bases. As such, your brain can map more efficiently from source to mental model. It makes code easier to maintain, because you can no longer have diffs related only to formatting; every diff necessarily involves a material change. It saves your team time debating how to format things, because there is a standard tool that formats everything the same way. Usage elm-format Main.elm  # Format a single file elm-format Main.elm --yes  # Overwrite the file without prompting elm-format src/  # Format all *.elm files in a directory elm-format --stdin  # Format input from stdin and write to stdout elm-format --stdin --output Main.elm  # Format input from stdin and write to file elm-format --help  # See other command line options Installation elm-format is still in alpha. If you run into any problems, please report them. The format produced by elm-format may change significantly before the 1.0.0 release. If this will cause problems for you, please refrain from using elm-format during the alpha- and beta-test periods. You will need to download the version appropriate for your OS, unzip it, and place elm-format or elm-format.exe (windows) on your PATH. Simpler installation options will be available once there is a stable release of elm-format. If you need PGP signatures, see the releases page. For Elm 0.17 (Using this version with Elm 0.16 files will migrate them to Elm 0.17 syntax.) Mac: download Linux: download Windows: download For Elm 0.16 Mac: download Linux: download Windows: download Editor integration Find your editor in the table below. The recommended plugin for each editor is indicated with 🏆 (trophy emoji). Editor Plugin Installation Formatting Format on save Configuration Error handling Atom 🏆 atom-elm-format ✅ 2 steps ⚠️ must use format-on-save or save file before formatting ✅ ✅ ⚠️ no installation instructions atom-beautify ⚠️ 3 steps ✅ ⚠️ requires configuration ✅ ✅ Light Table 🏆 elm-light ⚠️ 3 steps ✅ ⚠️ requires configuration ✅ ⚠️ no installation instructions Vim 🏆 elm-vim ❌ 6 steps ✅ ⚠️ requires configuration ✅ ❌ no error message Emacs 🏆 elm-mode ❌ 5 steps ✅ ⚠️ requires configuration ✅ ⚠️ no installation instructions Visual Studio Code 🏆 Elm Language Support ⚠️ 3 steps ❔ TBD ❌ ❔ TBD ❔ TBD VSCode Elm Format ⚠️ 3 steps ❔ TBD ⚠️ requires configuration ❔ TBD ❔ TBD Sublime Text 🏆 Elm Language Support ✅ 2 steps ❔ TBD ✅ ❔ TBD ❔ TBD Detailed instructions If you can simplify or improve the installation instructions or add instructions for another editor, please make a pull request. The default behavior of elm-format-approved plugins is to format Elm files on save. atom-elm-format installation Install elm-format Install atom-elm-format apm install atom-elm-format  or use the Atom package manager in Atom's settings atom-beautify installation Install elm-format Install atom-beautify apm install atom-beautify  or use the Atom package manager in Atom's settings Use ^⌥B (CTRL-ALT-B) to format a file elm-light installation Install elm-format Install the elm-light plugin using the Light Table plugin manager Add the following to your user keymap: [:editor.elm ""ctrl-s"" :save :elm-format :elm.lint] This step needs improvement to be understandable by novice Light Table users: how does one edit the user keymap? elm-mode installation Install elm-format If your Emacs has package.el (which is automatically the case for Emacs >= 24), you can install elm-mode from the package in MELPA: Ensure that you have added the MELPA source in your ~/.emacs.d/init.el: (require 'package) (add-to-list 'package-archives '(""melpa"" . ""http://melpa.org/packages/"")) Install elm-mode (official instructions): Use M-x list-packages and choose elm-mode. Use C-c C-f to format buffers (when in elm-mode) Set or customize elm-format-on-save to t to apply elm-format on the current buffer on every save This step needs improvement to be understandable by novice Emacs users: how does one customize the elm-format-on-save setting? See also the respective section about elm-format at elm-mode elm-vim installation Install elm-format Install vim-plug (official instructions) Download vim-plug: curl -fLo ~/.vim/autoload/plug.vim --create-dirs \     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Make sure there is a section like this in your ~/.vimrc: call plug#begin('~/.vim/plugged') "" ... any active plugins call plug#end() Install elm-vim (official instructions) Add Plug 'elmcast/elm-vim' to the plug#begin plugin section in your ~/.vimrc Start vim and run :PlugInstall Add the following to your ~/.vimrc: let g:elm_format_autosave = 1  Visual Studio Code installation Install elm-format Install Elm tools for VSCode ext install elm SHIFT-ALT-F will format the current file VSCode Elm Format installation Install elm-format Install VSCode Elm Format ext install elm-format You can run elm-format by using the Elm: Format command You can also run elm-format whenever you save the file by enabling the `formatOnSave' option This step needs improvement to be understandable by novice Visual Studio Code users: how does one enable the formatOnSave option? Sublime Text installation Install elm-format Install the Elm Language Support package. Development info Building from source git clone https://github.com/avh4/elm-format.git cd elm-format cabal sandbox init cabal install --only-dependencies --enable-tests cabal build ./dist/build/elm-format-0.17/elm-format-0.17 --help Running tests brew install shellcheck cabal configure --enable-tests ./tests/run-tests.sh Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/avh4/elm-format"	"Automatic Elm code formatter adhering to."	"true"
"Tools"	"Elm Style Guide"	"http://elm-lang.org/docs/style-guide"	"Automatic Elm code formatter adhering to."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"style-guide"	"null"	"null"	"Automatic Elm code formatter adhering to."	"true"
"Tools"	"grunt-elm"	"https://github.com/rtfeldman/grunt-elm"	"Grunt plugin that compiles Elm files to JavaScript."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"2"	"4"	"GitHub - rtfeldman/grunt-elm: Grunt plugin that compiles Elm files to JavaScript. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 15 Fork 4 rtfeldman/grunt-elm Code Issues 3 Pull requests 2 Pulse Graphs Grunt plugin that compiles Elm files to JavaScript. 44 commits 1 branch 5 releases Fetching contributors JavaScript 100.0% JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.2.0+elm-0.15 1.1.0+elm-0.15 1.0.0 0.4.0 0.3.0 Nothing to show New pull request Latest commit 00c99be Dec 1, 2015 rtfeldman Switch to BSD-3-Clause license. Permalink Failed to load latest commit information. tasks Switch to BSD-3-Clause license. Dec 1, 2015 test Upgrade everything to 0.15 May 17, 2015 .gitignore Update .gitignore to replace cache with elm-stuff Nov 26, 2014 .jshintrc .travis.yml Fix .travis.yml Nov 26, 2014 Gruntfile.js Switch to BSD-3-Clause license. Dec 1, 2015 LICENSE README.md elm-package.json Switch to BSD-3-Clause license. Dec 1, 2015 package.json Bump to node-elm-compiler 1.0.1 which supports Elm 0.16 Nov 19, 2015 README.md grunt-elm Compile Elm files to JavaScript. Getting Started This plugin requires Grunt ~0.4.0 If you haven't used Grunt before, be sure to check out the Getting Started guide, as it explains how to create a Gruntfile as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command: npm install grunt-elm --save-dev Once the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript: grunt.loadNpmTasks('grunt-elm'); This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that you upgrade, but in case you can't please use v0.3.2. Options yes Type: Boolean Default: true Automatically answer yes to any prompts that come up during the build. Usage Examples elm: {   compile: {     files: {       'output-dir/': 'path/to/Source.elm',       'other-output-dir/': ['path/to/sources/*.elm', 'path/to/more/*.elm']     }   }, Changelog 1.0.0 Switches to using node-elm-compiler under the hood. The yesToAllPrompts option is now called yes and defaults to true. 0.4.0 Initial release. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rtfeldman/grunt-elm"	"Grunt plugin that compiles Elm files to JavaScript."	"true"
"Tools"	"elm-webpack-loader"	"https://github.com/rtfeldman/elm-webpack-loader"	"Webpack loader for the Elm programming language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"170"	"10"	"18"	"GitHub - rtfeldman/elm-webpack-loader: Webpack loader for the Elm programming language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 170 Fork 18 rtfeldman/elm-webpack-loader Code Issues 4 Pull requests 1 Pulse Graphs Webpack loader for the Elm programming language. 106 commits 2 branches 13 releases 14 contributors JavaScript 94.2% HTML 3.6% Elm 2.2% JavaScript HTML Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master upgrade-node-elm-compiler Nothing to show 3.0.3 3.0.2 3.0.1 3.0.0 2.0.1 2.0.0 1.1.3 1.1.1 1.1.0 1.0.0 0.2.0+elm-0.15 0.1.0 0.0.1 Nothing to show New pull request Latest commit 5642cf4 May 23, 2016 rtfeldman Bump to 3.0.3 to use node-elm-compiler 4.0.1+ Permalink Failed to load latest commit information. example Lint all files Dec 13, 2015 test remove export from test Apr 29, 2016 .eslintignore Lint all files Dec 13, 2015 .eslintrc Lint all files Dec 13, 2015 .gitignore Commit test elm-package.json Dec 13, 2015 .travis.yml Add Node 4.2 to Travis Dec 6, 2015 LICENSE Switch license to BSD-3-Clause Dec 2, 2015 README.md Bump to 3.0.3 to use node-elm-compiler 4.0.1+ May 23, 2016 appveyor.yml Add Node 4.2 to AppVeyor Dec 6, 2015 index.js Pass a real error object to webpack on failures May 14, 2016 package.json Bump to 3.0.3 to use node-elm-compiler 4.0.1+ May 24, 2016 README.md Elm loader Webpack loader for the Elm programming language. Installation $ npm install --save elm-webpack-loader Usage Documentation: Using loaders In your webpack.config.js file: module.exports = {   module: {     loaders: [{       test: /\.elm$/,       exclude: [/elm-stuff/, /node_modules/],       loader: 'elm-webpack'     }]   } }; See the examples section below for the complete webpack configuration. Options Cache (default false) You can add cache=true to the loader:   ...   loader: 'elm-webpack?cache=true'   ... If you add this, when using npm run watch, the loader will only load the dependencies at startup. This could be performance improvement, but know that new files won't be picked up and so won't be watched until you restart webpack. This flag doesn't matter if you don't use watch mode. cwd (default null) You can add cwd=elmSource to the loader: var elmSource = __dirname + '/elm/path/in/project'   ...   loader: 'elm-webpack?cwd=' + elmSource   ... You can use this to specify a custom location within your project for your elm files. Note, this will cause the compiler to look for all elm source files in the specified directory. Upstream options All options are sent down as an options object to node-elm-compiler. For example, you can explicitly pick the local elm-make binary by setting the option pathToMake:   ...   loader: 'elm-webpack?pathToMake=node_modules/.bin/elm-make',   ... For a list all possible options, consult the source. Notes Example You can find an example in the example folder. To run: npm install npm run build  You can have webpack watch for changes with: npm run watch You can run the webpack dev server with: npm run dev For a full featured example project that uses elm-webpack-loader see pmdesgn/elm-webpack-starter . noParse Webpack can complain about precompiled files (files compiled by elm-make). You can silence this warning with noParse. You can see it in use in the example.   module: {     loaders: [...],     noParse: [/.elm$/]   } Revisions 3.0.3 Use node-elm-compiler 4.0.1+ for important bugfix. 3.0.2 Use node-elm-compiler 4.0.0+ 3.0.1 Pass a real error object to webpack on failures. 3.0.0 Support Elm 0.17, and remove obsolete appendExport option. 2.0.0 Change warn to be a pass-through compiler flag rather than a way to specify logging behavior. 1.0.0 Initial stable release. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rtfeldman/elm-webpack-loader"	"Webpack loader for the Elm programming language."	"true"
"Tools"	"servelm"	"https://github.com/eeue56/servelm"	"A project enabling server-side use of Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"100"	"10"	"7"	"GitHub - eeue56/servelm: Server-side Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 100 Fork 7 eeue56/servelm Code Issues 2 Pull requests 0 Pulse Graphs Server-side Elm 56 commits 1 branch 1 release 3 contributors Elm 85.0% JavaScript 14.7% Shell 0.3% Elm JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0.0 Nothing to show New pull request Latest commit 7225e2d Feb 23, 2016 eeue56 Merge pull request #2 from conorhastings/patch-1 … fix small typo in comment Permalink Failed to load latest commit information. example server side rendering! Nov 10, 2015 src fix small typo in comment Feb 23, 2016 .gitignore some kind of basic caching Nov 10, 2015 LICENSE Initial commit Oct 4, 2015 README.md server side rendering! Nov 10, 2015 elm-package.json server side rendering! Nov 10, 2015 README.md Servelm - Elm Http Server This server, along with rtfeldman's Elm stylesheets, means that we can now have full stack Elm support. At no point in the development of an application will you have to write anything other than Elm! It now supports server-side rendering of elm-html. A demo can be found here. The styling is done through compile-time correct CSS provided by elm-stylesheets. APIs exposed The Http.Server module allows you to create servers and run them. Sending out Elm Use the Http.Response.writeElm function to compile an Elm file on request. It will compile an Elm file found with name + "".elm"""". It will write the output to a file in the same folder as name + "".html"". This will then be served out to the client. There is basic caching involved at the moment, which works based on the lifecycle of the server. Restart the server if you make any changes. This is enabled by the node-elm-compiler package. It also supports server-side rendering of elm-html, through using the vdom-to-html package. Get started To start Elm inside of Node simply this to the end of your compiled Elm code. Elm.worker(Elm.Main); Take a look at example/run.sh to see a complete usage elm make example/server/Main.elm --output=example/main.js echo ""Elm.worker(Elm.Main);"" >> example/main.js node example/main.js Run the example This project depends on Node.js and the node command. example/run.sh Then load up the browser to see it working! Credit Originally inspired by https://github.com/Fresheyeball/elm-http-server. There was some great work already there, I just cleaned it up a little and integrated it with some other packages. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/eeue56/servelm"	"A project enabling server-side use of Elm."	"true"
"Tools"	"elm-oracle"	"https://github.com/ElmCast/elm-oracle"	"Query for information about values in elm source files. Used by most editor plugins."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"78"	"9"	"6"	"GitHub - ElmCast/elm-oracle: Query for information about values in elm source files. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 78 Fork 6 ElmCast/elm-oracle Code Issues 2 Pull requests 1 Pulse Graphs Query for information about values in elm source files. 32 commits 3 branches 0 releases 2 contributors JavaScript 96.3% Elm 3.7% JavaScript Elm Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.2 elm-node master Nothing to show Nothing to show New pull request Latest commit 3fa02e4 Jan 30, 2016 ajhager Add Debug module as a default import Permalink Failed to load latest commit information. bin Add work in progress elm-node rewrite. Aug 1, 2015 elm-node @ 45a740b Move elm-node to a submodule Jan 27, 2016 .gitignore Simplify deployment Jul 31, 2015 .gitmodules Move elm-node to a submodule Jan 27, 2016 Import.elm Add Debug module as a default import Jan 30, 2016 Main.elm Fix module href generation Jan 28, 2016 Oracle.elm Further flesh out API Aug 2, 2015 Package.elm Add work in progress elm-node rewrite. Aug 2, 2015 README.md Add atom-elm to list of projects that use elm-oracle Jan 26, 2016 elm-package.json Bump elm version to 1.1.1 Jan 28, 2016 elm.js Add Debug module as a default import Jan 30, 2016 package.json 1.1.1 Jan 28, 2016 README.md elm-oracle Elm Oracle intends to be a standalone program that can be used by all editor plugins to query information about a project's source code. Installation You need node to install and run elm-oracle. npm install -g elm-oracle  Usage elm-oracle FILE query   Query for information about a token in an Elm file.  Available options:   -h,--help                    Show this help text.  The return value will be a json array of json objects with information for each value that starts with the query string. elm-oracle Main.elm Signal.message might return: [     {         ""name"": ""message"",         ""fullName"": ""Signal.message"",         ""href"": ""http://package.elm-lang.org/packages/elm-lang/core/latest/Signal#message"",         ""signature"": ""Address a -> a -> Message"",         ""comment"": ""Create a message that may be sent to a `Mailbox` at a later time.\n\nMost importantly, this lets us create APIs that can send values to ports\n*without* allowing people to run arbitrary tasks.""     } ] Whereas elm-oracle Main.elm Signal.m might include Signal.mailbox, Signal.map, etc. If elm-oracle encounters errors, it will return a json array or json objects like: [{""error"": ""You did not supply a source file or query.""}] Projects that use elm-oracle Vim: elm-vim Atom: atom-elm Emacs: elm-mode Sublime: Elm.tmLanguage LightTable: elm-light Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ElmCast/elm-oracle"	"Query for information about values in elm source files. Used by most editor plugins."	"true"
"Editor plugins"	"atom-linter-elm-make"	"https://atom.io/packages/linter-elm-make"	"Elm code linter for the Atom editor."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"636"	"28"	"134"	"GitHub - steelbrain/linter: A Base Linter with Cow Powers Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 636 Fork 134 steelbrain/linter Code Issues 26 Pull requests 1 Wiki Pulse Graphs A Base Linter with Cow Powers 2,003 commits 3 branches 52 releases Fetching contributors JavaScript 70.1% CoffeeScript 29.9% JavaScript CoffeeScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: steelbrian/new Switch branches/tags Branches Tags master steelbrain/transition-towards-ide steelbrian/new Nothing to show v1.11.14 v1.11.13 v1.11.12 v1.11.11 v1.11.10 v1.11.9 v1.11.8 v1.11.7 v1.11.6 v1.11.5 v1.11.4 v1.11.3 v1.11.2 v1.11.1 v1.11.0 v1.10.0 v1.9.1 v1.9.0 v1.8.1 v1.8.0 v1.7.2 v1.7.1 v1.7.0 v1.6.0 v1.5.2 v1.5.1 v1.5.0 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.0 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 915fb35 Jun 17, 2016 steelbrain committed on GitHub Merge pull request #1186 from spejamchr/patch-1 … Update README.md badges Permalink Failed to load latest commit information. benchmarks Another try to fix the build Mar 14, 2016 keymaps Remove 'linter:set-bubble-transparent' from keybindings Jul 19, 2015 lib ✅ Add specs for change May 19, 2016 spec 🚐 fdescribe -> describe May 19, 2016 .editorconfig style: add `.editorconfig` to enforce editor config Jun 23, 2015 .eslintrc.json Move spec specific globals rules to spec dir Mar 18, 2016 .flowconfig Ignore node_modules from flow Feb 21, 2016 .gitattributes Add a .gitattributes file Dec 13, 2015 .gitignore Add specs for change Mar 25, 2016 .travis.yml Upgrade CI configs Feb 11, 2016 CHANGELOG.md 📝 Document #1156 in CHANGELOG May 19, 2016 CONTRIBUTING.md Minor docs change Mar 14, 2016 LICENSE.md Update license year range to 2016 Jan 16, 2016 README.md Update README.md Jun 17, 2016 appveyor.yml Upgrade AppVeyor CI Config Feb 29, 2016 circle.yml Run linting on CI Mar 14, 2016 package.json adding readme field and coffee-script devDep Jun 1, 2016 README.md Linter Linter is a base linter provider for the Hackable Atom Editor. Additionally you need to install specific linter for your language. You will find full list below in Available linters section. It provides a top-level API to its consumer that allows them to visualize errors and other types of messages, easily. How to / Installation Install package through Atom or use CLI: $ apm install linter  Available linters Full linters list API Documentation Linter API wiki Contribute Stick to imposed codestyle: $ npm i -g coffeelint eslint $ npm run lint Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atom-community/linter"	"Elm code linter for the Atom editor."	"true"
"Editor plugins"	"atom-elm-snippets"	"https://github.com/chiefGui/atom-elm-snippets"	"Elm snippets for Atom."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"2"	"0"	"GitHub - chiefGui/atom-elm-snippets: Elm snippets for Atom Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 5 Fork 0 chiefGui/atom-elm-snippets Code Issues 0 Pull requests 0 Pulse Graphs Elm snippets for Atom 😘 3 commits 1 branch 1 release 1 contributor CoffeeScript 100.0% CoffeeScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Latest commit 41081de Mar 29, 2016 chiefGui Fix repo's name Permalink Failed to load latest commit information. snippets Initial commit Mar 29, 2016 .gitignore Initial commit Mar 29, 2016 CHANGELOG.md Initial commit Mar 29, 2016 LICENSE.md Initial commit Mar 29, 2016 README.md Improving README Mar 29, 2016 package.json Fix repo's name Mar 29, 2016 README.md Elm snippets for Atom Adding some shortcut sugar to your day-by-day programming in Elm on Atom. Disclaimer: this package is in early stage. I'm not covering all the possible scenarios, but the most ones used by me. Feel free to PR! Install apm install elm-snippets Snippets Write the prefixes below and press the Tab key and you're good to go. [mod] module <name> (..) where [imp] import <name> [impas] import <name> as <alias> [impea] import <name> exposing (..) [ta] type alias <name> =   <something> [str] String [sig] Signal [sigma] Signal.map <(a -> b)> <Signal a> [sigmb] Signal.mailbox """" [cof] case <something> of   <Condition> ->     <action> Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chiefGui/atom-elm-snippets"	"Elm snippets for Atom."	"true"
"Editor plugins"	"atom-language-elm"	"https://atom.io/packages/language-elm"	"Syntax highlighting and autocompletion for the Atom editor."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"45"	"4"	"14"	"GitHub - edubkendo/atom-elm: An atom package providing syntax highlighting and snippets for the Elm language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 45 Fork 14 edubkendo/atom-elm Code Issues 6 Pull requests 0 Pulse Graphs An atom package providing syntax highlighting and snippets for the Elm language. 83 commits 2 branches 23 releases 11 contributors CoffeeScript 75.1% JavaScript 23.9% CSS 1.0% CoffeeScript JavaScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags better-instructions master Nothing to show v1.5.0 v1.4.0 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.0 v1.1.1 v1.1.0 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.0 v0.6.1 v0.6.0 v0.5.0 v0.4.1 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 7bf63e6 May 18, 2016 edubkendo Prepare 1.5.0 release Permalink Failed to load latest commit information. grammars Allow port and effect module declarations May 11, 2016 lib Move control flow out of module Jan 17, 2016 settings Set autoIndentOnPaste to false Aug 13, 2015 styles Fixes #24: Make it easier to read the description & signature Oct 17, 2015 .gitignore Add elm-oracle autocompletion in place of snippets Sep 16, 2015 CHANGELOG.md Initial commit Oct 25, 2014 README.md Fixes #34: Add installation instructions Mar 1, 2016 package.json Prepare 1.5.0 release May 18, 2016 screenshot.png Fixes #34: Add installation instructions Feb 29, 2016 README.md language-elm package Syntax highlighting and autocomplete for the Elm language. Installation There are two ways to install the Atom Elm Extension: using the editor, or using the command line. Install using the editor (Recommended) You can install packages within Atom. To do so: Open the editor settings Click the ""Install"" menu item Search for ""language-elm"" Click the install button on the ""language-elm"" result More documentation for how to use the package manager can be found on the official Atom site. Screenshot Install using the command line Run the following command in your terminal: apm install language-elm Autocomplete In order to get autocomplete working, please: Open up a terminal npm install -g elm-oracle which elm-oracle on Unix/Linux or where.exe elm-oracle on Windows Copy the path to elm-oracle Open up the language-elm settings in Atom Open up the Atom Settings / Preferences tab Click on ""Packages"" Find the ""language-elm"" package in the list Click ""Settings"" Paste the path into ""The elm-oracle executable path"" setting Thanks to the authors of Elm Oracle Jump to Symbol Atom's native symbol-view package uses ctags, and thus doesn't support Elm without extra configuration. But this plugin https://atom.io/packages/goto uses langauge definition files to identify symbols, and does support Elm as long as atom-elm is installed. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/edubkendo/atom-elm"	"Syntax highlighting and autocompletion for the Atom editor."	"true"
"Editor plugins"	"emacs-elm-mode"	"https://github.com/jcollard/elm-mode"	"Syntax highlighting, Elm REPL, Elm make and Elm format integration for the Emacs editor."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"134"	"13"	"33"	"GitHub - jcollard/elm-mode: Elm mode for emacs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 134 Fork 33 jcollard/elm-mode Code Issues 5 Pull requests 0 Pulse Graphs Elm mode for emacs 266 commits 1 branch 34 releases Fetching contributors Emacs Lisp 100.0% Emacs Lisp Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.17.0 v0.16.0 v0.15.0 v0.14.0 v0.13.3 v0.13.2 v0.13.1 v0.13.0 v0.12.0 v0.11.4 v0.11.3 v0.11.2 v0.11.1 v0.11.0 v0.10.2 v0.10.1 v0.10.0 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.1 v0.6.0 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 Nothing to show New pull request Latest commit 3112ff7 Jun 5, 2016 Bogdanp add elm-imenu Permalink Failed to load latest commit information. screenshots add auto-complete screenshot Jul 28, 2015 .gitignore ignore .elc files Jul 4, 2015 LICENSE align LICENSE header Dec 19, 2015 README.md add elm-sort-imports-on-save Jun 4, 2016 elm-font-lock.el hack around lambda destructuring issue May 23, 2016 elm-format.el fix error and unsaved buffer handling in elm-format Dec 28, 2015 elm-imenu.el add elm-imenu Jun 5, 2016 elm-indent.el make indentation more consistent with elm-format May 23, 2016 elm-interactive.el add elm-sort-imports-on-save Jun 4, 2016 elm-mode.el add elm-imenu Jun 5, 2016 elm-tags.el update copyright years Jan 21, 2016 elm-util.el Use locate-dominating-file instead of hand-rolled traversal Apr 26, 2016 elm.tags add support for automatic TAGS generation Jan 17, 2016 README.md elm-mode Elm mode for Emacs. Features Syntax highlighting. Intelligent indentation. Integration with elm-make. Integration with elm-repl. Integration with elm-reactor. Integration with elm-package. Integration with elm-oracle Integration with elm-format Indentation elm-mode indentation is based on cycling: every time you insert a new line there will be one or more indentation levels available for you to choose from. The exact number is printed in the minibuffer either as Sole indentation or Indent cycle (n)... where n is the number of available indentations to choose from. If the automatic indentation level was not the one you expected simply hit TAB to cycle through the list (note that hitting any other key will cancel the cycle). Installation MELPA If your Emacs has package.el (which is automatically the case for Emacs >= 24), you can install elm-mode from the package in MELPA. From source Add this repo to your load-path and (require 'elm-mode). Ensure that the following dependencies are available: f let-alist s This package assumes you are runing Emacs 24 or later. Bindings The following bindings are available in elm-mode: TAGS Keybinding Description C-c M-t Generate a TAGS file for the current project. C-c . Jump to tag at point. C-c , Jump to previous location after visiting a tag. TAGS file generation requires that the UNIX find, egrep commands and the Emacs etags command be available in your path. Set or customize elm-tags-on-save to t to generate a new TAGS file for the current project on every save. Set or customize elm-tags-exclude-elm-stuff to nil to include source files inside elm-stuff directories when generating the TAGS file. elm-make Keybinding Description C-c C-c Compile the current buffer. C-u C-c C-c Compile the current buffer, specifying the output file. C-c M-c Compile the main elm file. C-u C-c M-c Compile the main elm file, specifying the output file. C-c C-a Add missing type annotations to the current buffer. C-u C-c C-a Add missing type annotations to the current buffer, prompting before each change. C-c C-r Clean up imports in the current buffer. C-u C-c C-r Clean up imports in the current buffer, prompting before each change. elm-repl Keybinding Description C-c C-l Load the current file in a REPL. C-c C-p Push the current region to a REPL. C-c C-e Push the current decl. to a REPL (requires haskell-mode). elm-reactor Keybinding Description C-c C-n Preview the current buffer in a browser. C-u C-c C-n Preview the current buffer in a browser in debug mode. C-c C-m Preview the main elm file in a browser. C-u C-c C-m Preview the main elm file in a browser in debug mode. elm-package Keybinding Description C-c C-d View a function's documentation in a browser. C-c C-i Import a module from one of the dependencies. C-c C-s Sort the imports in the current file. C-c M-k Open the package catalog. C-u C-c M-k Open the package catalog, refreshing the package list first. The following bindings are available in the package list buffer: Keybinding Description g Refresh package list. n Next package. p Previous package. v View package in browser. m Mark package for installation. i Mark package for installation. u Unmark package. x Install marked packages. Set or customize elm-sort-imports-on-save to t to apply elm-sort-imports on the current buffer on every save. elm-format The following functionality requires elm-format to be installed. elm-format does not come with the Elm installer so you will have to install it manually. Keybinding Description C-c C-f Automatically format the current buffer. Set or customize elm-format-on-save to t to apply elm-format on the current buffer on every save. elm-oracle The following functionality requires elm-oracle to be installed. elm-oracle does not come with the Elm installer so you will have to install it manually. Keybinding Description C-c C-t Show the type of the function at point in the minibuffer. C-c M-d Show the documentation of the function at point. elm-mode supports auto completion through elm-oracle. To enable basic completion (either with company-mode or Emacs' completion-at-point) add elm-oracle-setup-completion to the elm-mode-hook like so: (add-hook 'elm-mode-hook #'elm-oracle-setup-completion) If you want to use company for autocompletion all you need to do is add the provided backend to the provider list: (add-to-list 'company-backends 'company-elm) The company backend supports company-quickhelp as well to display documentation snippets for the autocompletion candidates. If you prefer to use auto-complete as your completion backend you can instead do the following after setting up auto-complete according to its manual: (add-hook 'elm-mode-hook #'elm-oracle-setup-ac) Note that the completion process is synchronous so you should set ac-auto-start to a large value or to nil otherwise you will experience slowdown. This will be improved in the future. Here's a screenshot of auto-complete in action: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jcollard/elm-mode"	"Syntax highlighting, Elm REPL, Elm make and Elm format integration for the Emacs editor."	"true"
"Editor plugins"	"elm-light-table"	"https://github.com/rundis/elm-light"	"Syntax highlighting, REPL, autocompletion, package management and much more for Light Table."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"53"	"6"	"4"	"GitHub - rundis/elm-light: Elm language plugin for Light Table Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 53 Fork 4 rundis/elm-light Code Issues 5 Pull requests 0 Pulse Graphs Elm language plugin for Light Table 66 commits 1 branch 15 releases 2 contributors JavaScript 91.3% Clojure 4.9% Elm 1.9% HTML 1.3% CSS 0.6% JavaScript Clojure Elm HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 0.3.8 0.3.7 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.0 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit e6d4ed9 Jun 27, 2016 rundis Update docs to highlight tested with 0.17 Permalink Failed to load latest commit information. DocPreview Release 0.3.6 Mar 28, 2016 css Make linter markers a little more squiggly May 29, 2016 elm/ModuleBrowser First cut support for doc preview for elm packages Mar 28, 2016 js Implement autocompleter using async channels and CM show-hint plugin May 6, 2016 mode Return string for unmatched strings/quotes in codemirror mode. Fixes #21 Jun 26, 2016 node Add linter quick fixes and project main compile target May 7, 2016 node_modules Bundle with harbor, Light Table 0.8.1 no longer ships with that node … Jan 22, 2016 src/lt/plugins Make scrollposition behavior less annoying on format May 29, 2016 .gitignore First cut support for doc preview for elm packages Mar 27, 2016 LICENSE.md Initial commit - Syntax highlighting support Oct 15, 2015 README.adoc Update docs to highlight tested with 0.17 Jun 27, 2016 browsertests.png Prepping 0.2.0 release Dec 11, 2015 consoletests.png Prepping 0.2.0 release Dec 11, 2015 elm-dep-graph.png Add dependency graph viewer Jan 1, 2016 elm-light-pkgs.png Add dependency graph viewer Jan 1, 2016 elm-light.behaviors Add linter quick fixes and project main compile target May 7, 2016 elm-light_compiled.js Up to version 0.3.8 Jun 26, 2016 elm-light_compiled.js.map Up to version 0.3.8 Jun 26, 2016 elm.keymap Implement autocompleter using async channels and CM show-hint plugin May 6, 2016 lint.png Prepping 0.2.0 release Dec 11, 2015 modulebrowser.png Version 0.3.5 Mar 15, 2016 packagedocs.png Release 0.3.6 Mar 28, 2016 plugin.edn Up to version 0.3.8 Jun 26, 2016 project.clj Up to version 0.3.8 Jun 26, 2016 README.adoc Elm LightTable plugin Elm language plugin for Light Table 1. Installation Install using the Light Table plugin manager. Alternatively you can clone it into $LT_USER_HOME\plugins. 2. Preconditions LIghtTable 0.8-alpha or higher is required You will need to have the elm-platform (there is also a npm installer out there) installed and the following should be in your path: elm-reactor elm-make elm-package elm-repl For all commands/features you will need to have a project folder with a elm-package.json file ℹ️ Tested with elm 0.16.0 and 0.17.0 on OS/X 10.9.5, Ubuntu 14.04 and Windows 10. 3. Resources ScreenCast - Demo of the features available in the first release of the plugin elm-lang.org - The home of Elm Light Table - GithHub home of Light Table 4. Overview 4.1. Elm client For pretty much any operation this plugin you support you need an elm client connection. An elm client connection is a small node process that the plugin typically will spawn automatically for any action that requires a elm client. When the elm-client starts it; Opens an elm-repl Starts (and listens) to elm-reactor Listens for commands from light table (eval, docs, autocompletions etc) You may also manually connect to an elm project using the connect bar in Light Table Invoke the command: Connect: Add Connection Select Elm from the list of client types If all goes well you will get a confirmation in the status bar that the project is connected To disconnect Invoke the command Connect: Show connect bar Find the project in the list and click disconnect The client connectionns is named after the the directory containing the elm-package.json 4.2. Elm project In the future the plugin might add support for geting started with just a simple .elm file, but you very quickly end up having to add some config especially a elm-package.json. So as mentioned in the preconditions, you will need one. How does elm-light determine the project ? Say you have a project with the following structure /home/myuser/projects/hello-elm/elm-package.json /home/myuser/projects/hello-elm/hello.elm /home/myuser/projects/hello-elm/src/util.elm If you start of with evaluating hello.elm, the plugin will start looking for a elm-package.json in the same directory as the hello.elm file resides. So the elm client will use /home/myuser/projects/hello-elm as root path and the project assumed to be hello-elm If you start of with evaluating util.elm, it will start looking for a elm-package.json in the src folder, since not finding one it will try the parent directory (and recurse until one found or none can be found). Hence the root path and project name will be the same If you (with the elm-client still running) later add a .elm file anywhere below /home/myuser/projects/hello-elm and eval or lint (or whatever) on it, the plugin will assume it belongs to the same elm-client and use that. 4.3. A few disclaimers/general notes If an operation takes some time to respond, it might be that it’s because elm is installing packages (first time or you’ve changed the elm-package.json file) If stuff does’t work and you don’t get anything sensible indicating why not, it’s worth trying to remove the folder elm-stuff and run elm-package install at the command line to see if packages installs correctly (I’ve experienced that it’s not always reliable…​) 5. Usage 5.1. Linting To lint an elm file use the command: Elm: Lint selected file Errors are marked with red underline, warnings with yellow underline Errors/warnings in dependent files are shown in the console 5.1.1. Details and navigation To view details about an error or warning place your cursor inside an underline range and select the command Linter: Show details at cursor To move to next lint result select command Linter: Move to next result To move to previous lint result select command Linter: Move to previous result ℹ️ Rember to save. Linting works on saved files ! TIP: Linting on save If you wish to lint on save just add the following to your user behaviors  [:editor.elm :lt.objs.editor.file/on-save :elm.lint] 5.1.2. Quick fixes For some warnings and errors there are shortcut operations to do fixes in your code. Currently these includes Unused import: Allows you to quickly remove an unused import Missing type annotation: Facility to add type annotation (top level expressions only) Type mismatch: Facility to fix a type annotation that doesn’t match the implementation Naming errors: For some spelling errors the compiler will provide helpful suggestions. Feature to quickly apply one of those suggestions (if any) ℹ️ When an linter message is open and a quick fix operation is available you will have buttons for each possible action. Pressing Enter will invoke the first action available (which is typically the one you want) 5.2. Make (to js) To run make for your elm file/project use the command: Elm: Make selected file A .js file is generated in the same directory as the .elm file resides. Errors and warnings are handled similar to linting. 5.3. Testing Preconditions The plugin comes bundled with the node-elm-test node package. It’s slighly modified to ensure that it uses the node instance that comes bundled with Light Table. So you don’t need to install node-elm-test ! Of course you can run browser based tests without problems. The great benefit of using the console runner is that these tests can also be run as part of a ci build. 5.3.1. Quick start The plugin has a feature create a test skeleton subproject. From any (non-test) elm file; Invoke the command Elm: Add test subproject to current project The plugin will: Create a test directory Create a elm-package.json file based on the elm-package.json file in your current project. It will add dependencies to elm-test and elm-console. It will also set up source directories for your test project to include any source directories set up for your root project It will add a sample console TestRunner.elm and a sample Tests.elm Finally it will run elm-package install do set you up for subsequently quickly run your tests (this may take a little while the first time) Now you have a great starting point to start writing tests running them 5.3.2. Running tests Open a test file Select the command Elm: Test current file One of two outcomes will occur: If the test is considered a console test (contains ""consoleRunner"" or ""Console"") ; The tests are run using node-elm-test. Results are shown in the console. In case of errors a message is displayed in the status bar If not a console test, the test is assumed to be a browser/element test and the file is opened in the inline browser (backed by elm-reactor). Test are run and results are shown using elm-tests elementRunner (or stringRunner if that’s what you are using) ℹ️ The first time you run a browser test, you might need to reload the page as the reactor might not have completed starting before the tests run (and hence the test file hasn’t completed compiling yet). After that it’s just a matter of changing tests and reloead (ctrl-r) 5.4. Language docs From an elm file; Select the command: Docs: Search language docs (ctrl-shift-d) Enter search criteria Behold the results ℹ️ Doc search currently picks a random elm file as the basis for search. And uses elm-oracle behind the scenes. Elm oracle is bundled with the plugin btw. 5.5. Inline doc With the cursor over something docable press ctrl+d. Inline documentation is displayed (or an error message is shown on the status bar) Ctrl+d again to close the inline doc ℹ️ Only functions that are available through imports (explicit + elm defaults) are docable 5.6. Autocomplete (incubating) Once an elm editor has a connection (through use of linting, make, inline doc etc) the autocompleter kicks in (sort of (: ). It should kick in when you type something (like Signa …​ should show completions from Signal etc) To turn it off (and optionally turn on text hints) just edit your User behaviors  [:editor.elm -:lt.plugins.elm-light/use-local-hints] ; Turn off the autocompleter  [:editor.clj :lt.plugins.auto-complete/textual-hints] ; Enable textual hings again 5.7. Editor repl Once connected to an elm-project in Light Table, a repl is started running in the background. This means you can evaluate statements from within any given elm editor. In an elm file: Position the cursor within the region of a top level expression and press cmd/ctrl+enter. You may also select a region that constitutes of one or more top level statements and press cmd/ctrl+enter However results are shown next to the first line of the selection, even though the actual result might be the related to the last statement (or if an error, whatever line caused the error) results are shown inline You may reset the repl to start with a clean slate. Just select the command: Elm: Restart repl for current project ℹ️ Results are currently only showed sensibly if you eval one top level statement at a time. Also the repl is shared between all elm editors for a given project. 5.8. ""Anonymous"" repl You may also create a repl that isn’t backed by a file Select the command Elm repl: Open a elm repl You may now eval code as for an Editor repl ℹ️ You need a connected elm project for this to work 5.9. Elm-Reactor When you connect an elm project, elm-reactor is started in the background. To support multiple projects running in parallell each projects elm-reactor gets a port from the port-range (3000 - 4000) Convenience commands has been added to view an elm file in the Light Table internal browser. Either Select the command Elm: View current elm file in browser (elm-reactor) or Elm: `Elm: View current elm file in browser with debugger (elm-reactor) if you wish the debugger panel opened by default 💡 If you get a blank page (and/or an error in the console about the address not being available), it might be because elm-reactor is running make in the background. You might need to be patient and refresh the browser (cmd+r for mac) ⚠️ On Mac the elm-reactor starts two processes. You may experience occurences when the plugin is unable to terminate both these subprocesses appropriately for now. To be improved. You may close connections by using the command Connect: Show connect bar and click disconnect for your elm project 5.10. Package management The plugin has an interface for doing some handy package related task. It’s basically a thin wrapper over the elm-package command with a UI to give you a better overview. 5.10.1. Open package manager From an editor with any file under your project, select the command Elm: Show project packages ℹ️ You need to have a working network connection, as it retrieves package info from the central elm package repository 5.10.2. Add a new package Search for a given package in the section for adding packages Use up/down arrows to navigate the dropdown Use enter to select the package you wish to add Select the version of the package you wish to install Click Add package Check the status bar/console log for feedback on progress and success/failure If all goes well the view of packages gets updated (as will you elm-package.json file in the background as well) ℹ️ The feedback from elm-package install is not always the most helpful when there are problems. Sometimes it even reports success when nothing has been done. Check out the github repo for elm-package for follow up on issues related to this. Be adviced that when a package is listed with the exact column empty, means something didn’t go well , eventhough elm-package might have reported success. 5.10.3. Remove package You can remove packages that are specified in your elm-package.json. Click on the remove button next to the package in the listing. Your elm-package.json file will get updated elm-package install invoked to clean up The listing will be updated (with potential transitive deps removed too) 5.10.4. Handling other cases Sometimes you need to edit your elm-package.json file directly for elm-package to know what to do. There might also be the case you have defined a elm-package.json but haven’t yet invoked any elm command that resulted in package install. For such cases the Refresh packages button comes in handy ! 5.10.5. Package docs For any packages installed (with an exact version) you may view the online docs: In the list click on the package name A LT browser tab is opened (or focused if one already exists) and the package doc for the selected package is displayed 5.11. Dependency graph You may view an inline dependency graph of you project dependencie. Either From any file under your project root invoke the command Elm: Show dependency graph Alternatively click the Show dependency graph button from the package viewer Additional info Dashed arrows reprensents transitive dependencies If you hover of a dependency you will see a short package summary Dependencies found in elm-package.json that elm-package failed to install will be shown with a red color When you update packages in the package viewer, the graph is automatically refreshed ℹ️ You will need an internet connection for this to work (uses package.elm.lang.org) 5.12. Elm format In an effort to standardize how Elm code should be formatted, elm-format was created. It is still in alpha, but I figured you might just as well start playing with it. Precondition You will need to install elm-format and make sure the executable is available in your path for it to work from the plugin. You’ll find install instructions on the elm-format readme. Format editor contents With an elm file open, select the command Elm: Format editor contents If no errors the whole editor is formatted (but any format changes aren’t saved) If there are any errors (typically syntax errors), a message is shown in the Statusbar and details can be found in the console Format top level expression If for some reason you find yourself wanting to just format a top level expression, this is the command for you. Place the cursor somewhere within the top level expression you wish to format Select the command Elm: Format top level expression at point Format a file With an elm file open, select the command Elm: Format file ⚠️ Any unsaved changes will be lost when running this command. This command updates the file backing the editor in question. Adding keyboard shortcuts  [:editor.elm.common ""cmd-shift-l"" :elm-format-expression]  [:editor.elm.common ""cmd-ctrl-l""  :elm-format-buffer] Configuring indent in Light Table [:editor.elm.common :lt.objs.editor/tab-settings false 4 4] ;; or 2 2 if the war continues and things change back TIP: Format and Lint on save If you wish to format and lint on every save just add the following to your user keymap  [:editor.elm ""ctrl-s"" :save :elm-format :elm.lint]  However if you added linting when saving to your user behaviors, you would want to remove that otherwise you'll be double linting ! 5.13. Module browser To view your project modules: From an open elm editor Select the command : Elm: Show module-browser Use the arrow keys to move the selection up or down The list of modules is filtered by ""starts-with"" (case insensitive) from what you enter in the input text field To open a module press Enter To close the module browser, press Esc ℹ️ You need to have run elm-make/elm-package install to view modules from 3.rd party packages. 5.14. Preview package docs for module If you are writing a package to be deployed to http://package.elm-lang.org/ you need to document all your exposed modules (remember to add any modules for public usage to the exposed-modules entry in your elm-package.json) You can preview the docs in Light Table From an open elm editor (an exposed module remember) Select the command : Elm: Preview doc for selected file A preview window is opened (you might want to move that to it’s own tabset) Write docs according to the instructions at http://package.elm-lang.org/help/documentation-format When you save your file the preview will be automatically updated ⚠️ The doc preview only works for exposed modules 5.15. Note on editor commands 5.15.1. Select top-level statements If you wish to select a top level statement just invoke the command Elm: Select top level expression from current expression ℹ️ The selection algorithm is sort of naive, so there might be cases when the selection doesn’t work out quite as you’d hope. In most cases it should work sensibly though. To enable as keyboard shortcut in both elm editors and anonymous elm repl   [:editor.elm.common ""alt-shift-s"" :elm.select.top.level] ; modify keybinding to your liking ! 5.15.2. Code folding You can fold code by invoking the editor command Editor: Fold code at cursor. It will fold the code based on the given indentation level your cursor is at. 6. Contributing Pull requests are most welcome. Please do not include the transpiled files (_compiled) in the PR. 7. History 0.3.8 Support code folding, fix autoclose brackets issue, scrollposition after format improvement 0.3.7 Improved autocompleter implementation and added quick-fixes feature to Linter messages 0.3.6 Added package doc preview feature Fixed bug with lint display at bottom of editor getting cut off 0.3.5 Added module browser Bugfix: Display make errors (both make and linting) 0.3.4 Updated to supprt elm-format 0.2-alpha Added format buffer (keeps unsaved changes) and format expression commands 0.3.3 Fix compatibility with LT 0.8.1. Also tweaked the autocompletion to be a little faster and more accurate. 0.3.2 Module aware autocomplete and remove leading pipes from repl results 0.3.1 Added an inline project dependency graph (using d3) 0.3.0 Added windows support. See github release notes for details 0.2.0 Improved linting, introduced test support and support for elm-format 0.1.3 Bugfix: Forgot to include react.js (used for rendering package ui) 0.1.2 Package manager and 0.16.0 fix UI for managing your project packages. 0.16.0 fix: Remove ansi color codes from errors and warnings shown inline 0.1.1 Maintenance release: Feature to select top level expressions Eval in repl with no selection automatically selects top level expression based on cursor position Syntax highlight multiline strings """""" Allow user to select to browse file in reactor with or without debugger Fix: Allow reuse of released reactor ports Add tag :editor.elm.common to allow users to configure common behaviors/commands for repl and editors more easily 0.1.0 Initial release 8. License MIT, same as Light Table. See LICENSE.md for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rundis/elm-light"	"Syntax highlighting, REPL, autocompletion, package management and much more for Light Table."	"true"
"Editor plugins"	"Elm Language Support"	"https://packagecontrol.io/packages/Elm%20Language%20Support"	"Syntax highlighting, REPL, autocompletion, and more for Sublime Text 2 and 3."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elm Language Support - Packages - Package Control Installation Browse Search Docs News Stats About Say Thanks Supported via ctrl+shift+p filters: :st2 :st3 :win :osx :linux Browse Elm Language Support by elm-community ST2/ST3 Elm language syntax highlighting and tool integration for ST2/3 Labels language syntax Details Version 0.17.0 Homepage packagecontrol.​io Issues github.​com Modified 4 weeks ago Last Seen Just now First Seen 3 years ago Installs Total 8K Win 2K OS X 5K Linux 1K Jul 15 Jul 14 Jul 13 Jul 12 Jul 11 Jul 10 Jul 9 Jul 8 Jul 7 Jul 6 Jul 5 Jul 4 Jul 3 Jul 2 Jul 1 Jun 30 Jun 29 Jun 28 Jun 27 Jun 26 Jun 25 Jun 24 Jun 23 Jun 22 Jun 21 Jun 20 Jun 19 Jun 18 Jun 17 Jun 16 Jun 15 Jun 14 Jun 13 Jun 12 Jun 11 Jun 10 Jun 9 Jun 8 Jun 7 Jun 6 Jun 5 Jun 4 Jun 3 Jun 2 Jun 1 May 31 Windows 4 5 7 9 1 6 1 6 2 5 5 5 3 4 2 3 2 6 2 5 9 6 2 5 8 7 7 8 7 5 5 4 5 3 3 5 5 12 9 11 5 6 4 3 9 5 OS X 11 11 15 15 16 8 10 9 15 13 10 13 7 9 16 12 12 12 9 9 14 14 12 13 11 21 12 13 17 13 12 14 11 13 13 18 12 17 13 12 10 13 6 15 8 17 Linux 1 3 5 4 6 4 6 2 3 4 4 2 1 3 2 3 3 4 2 2 1 5 6 2 2 5 3 2 2 3 2 7 7 7 2 4 7 6 10 2 4 2 4 7 4 4 Readme Source raw.​githubusercontent.​com The Sublime Elm Language Package Installation Install Package Control Run Package Control: Install Package in the Command Palette (Super+Shift+P) Install Elm or use NPM (npm i -g elm) Features Compatible with Sublime Text 2 and Sublime Text 3 Syntax highlighting Autocompletions plus type signature and documentation display for all functions inside packages in your elm-package.json file (requires elm-oracle, which you can install with npm install -g elm-oracle) Bring up the type panel with alt+up or through the right-click context menu Close the type panel with alt+down If you don't like these keybindings, rebind them in your User packages directory Four standard build commands (Super+[Shift]+B or Super+[Shift]+F7) Build just checks errors. Kudos to this tweet! Run additionally outputs your compiled program to an inferred path. The same as the above two, but ignoring warnings Output path is configurable in elm-package.json or Elm Build System: … in the Command Palette. Elm build system only requires a valid config in any ancestor directory of the active file. Compile messages Navigate errors and warnings (Super+[Shift]+F4). Formatted for build output panel. Compile message highlighting, embedded code highlighting, and color scheme for output panel. Integration with popular plugins (installed separately) SublimeREPL — Run elm-repl in an editor tab with syntax highlighting. Highlight Build Errors — Does what it says on the box … usually. Integration with elm format Make sure elm-format is in your PATH Run the “Elm Language Support: Run elm-format” command from the Command Palette to run elm-format on the current file To enable automatic formatting on every save, Go to Preferences -> Package Settings -> Elm Language Support -> User and add this setting: ""elm_format_on_save"": true If there are certain Elm source files you don't want to automatically run elm-format on, for example elm-css based files, you can set a regex filter which will search the full filename (including the path to the file). If the regex matches, then it will not automatically run elm-format on the file when you save. For example, the following filter would prevent automatic elm-format on a file named elm-css/src/Css/TopBar.elm: ""elm_format_filename_filter"": ""elm-css/src/Css/.*\\.elm$"" Troubleshooting I have elm-oracle installed, but completions, type signature display, and the type panel don't work Make sure elm-oracle is on your PATH, or Add the absolute path of the directory containing elm-oracle to the elm_paths setting in your Elm Language Support User settings I have elm-format installed, but it's not working Make sure elm-format is on your PATH, or Add the absolute path of the directory containing elm-format to the elm_paths setting in your Elm Language Support User settings. Note that you can combine paths with the above, so an example might be ""elm_paths"": ""/users/alex/elm-format:/users/alex/elm-oracle"" Elm format automatically runs every time I save a file, but there are some files I don't want it to run on If there are certain Elm source files you don't want to automatically run elm-format on, for example elm-css based files, you can set a regex filter which will search the full filename (including the path to the file). If the regex matches, then it will not automatically run elm-format on the file when you save. For example, the following filter would prevent automatic elm-format on a file named elm-css/src/Css/TopBar.elm: ""elm_format_filename_filter"": ""elm-css/src/Css/.*\\.elm$"" Learning Don't know Elm? Great first step! Official Elm Hub Community Forum Pragmatic Studio ElmCast Coming Soon The following features are being worked on next: - Built in elm-package support. Install packages, open docs in the browser, and pull package stats from GitHub - Improved snippets to help with common patterns. Create a new Elm Architecture project or submodule with a basic skeleton in just a few keystrokes. Less manual boilerplate © 2015"	"null"	"null"	"Syntax highlighting, REPL, autocompletion, and more for Sublime Text 2 and 3."	"true"
"Editor plugins"	"Elm-vim"	"https://github.com/ElmCast/elm-vim"	"Elm mode for vim."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"140"	"6"	"15"	"GitHub - ElmCast/elm-vim: Elm plugin for Vim Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 140 Fork 15 ElmCast/elm-vim Code Issues 22 Pull requests 3 Pulse Graphs Elm plugin for Vim 88 commits 1 branch 0 releases Fetching contributors VimL 100.0% VimL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 6527c8a Jun 22, 2016 ajhager committed on GitHub Merge pull request #61 from KevinSjoberg/fix/strip-ansi-color-escape-… … …sequences  Fix/strip ansi color escape sequences Permalink Failed to load latest commit information. autoload Fix indentation Jun 11, 2016 doc Merge Apr 6, 2016 ftdetect Add basics of the plugin Jun 12, 2015 ftplugin Make jump to error default to off Apr 2, 2016 indent Auto-indent on the 'in' keyword Mar 24, 2016 screenshots Make logo more compact Apr 2, 2016 syntax More finegrained and opinionated syntax highlighting Apr 2, 2016 syntax_checkers/elm Run elm-oracle and elm-make in the root project folder Apr 4, 2016 .gitignore Add screenshot of errors and completion Mar 31, 2016 LICENSE Add license file Jun 20, 2015 README.md Add basic support for elm-test Apr 6, 2016 addon-info.json Add vim-addon-manager support Jun 20, 2015 README.md elm-vim Features Syntax highlighting Automatic indentation Function completion Build and package commands Code formating and linting Documentation lookup Repl integration Check out this ElmCast video for more detail. Installation If you don't have a preferred installation method, I recommend installing vim-plug, and then simply add Plug 'elmcast/elm-vim to your plugin section: Once help tags have been generated, you can view the manual with :help elm-vim. Requirements First, make sure you have the Elm Platform installed. The simplest method to get started is to use the official npm package. npm install -g elm  In order to run unit tests from within vim, install elm-test npm install -g elm-test  For code completion and doc lookups, install elm-oracle. npm install -g elm-oracle  To automatically format your code, install elm-format from its github page. let g:elm_format_autosave = 1 Mappings The plugin provides several <Plug> mappings which can be used to create custom mappings. The following keybindings are provided by default: Keybinding Description <Leader>m Compile the current buffer. <Leader>b Compile the Main.elm file in the project. <Leader>t Runs the tests of the current buffer or 'tests/TestRunner'. <Leader>r Opens an elm repl in a subprocess. <Leader>e Shows the detail of the current error or warning. <Leader>d Shows the type and docs for the word under the cursor. <Leader>w Opens the docs web page for the word under the cursor. You can disable these mappings if you want to use your own. let g:elm_setup_keybindings = 0 Highlighting Vim syntax highlighting is biased for the c family of languages, with entire syntax groups for the preprocessor. This can leave functional languages looking mismatched, so elm-vim has very opinionated highlighting. If you do not like that, you can switch to a more traditional mode. g:elm_classic_highlighting = 1 Integration Syntastic Syntastic support should work out of the box, but we recommend the following settings: let g:syntastic_always_populate_loc_list = 1 let g:syntastic_auto_loc_list = 1  let g:elm_syntastic_show_warnings = 1 YouCompleteMe let g:ycm_semantic_triggers = {      \ 'elm' : ['.'],      \} Neocomplete call neocomplete#util#set_default_dictionary(   \ 'g:neocomplete#sources#omni#input_patterns',   \ 'elm',   \ '\.') Usage :help elm-vim let g:elm_jump_to_error = 0 let g:elm_make_output_file = ""elm.js"" let g:elm_make_show_warnings = 0 let g:elm_syntastic_show_warnings = 0 let g:elm_browser_command = """" let g:elm_detailed_complete = 0 let g:elm_format_autosave = 0 let g:elm_setup_keybindings = 1 let g:elm_classic_hightlighting = 0 :ElmMake [filename] calls elm-make with the given file. If no file is given it uses the current file being edited. :ElmMakeMain attempts to call elm-make with ""Main.elm"". :ElmTest calls elm-test with the given file. If no file is given it runs it in the root of your project. :ElmRepl runs elm-repl, which will return to vim on exiting. :ElmErrorDetail shows the detail of the current error in the quickfix window. :ElmShowDocs queries elm-oracle, then echos the type and docs for the word under the cursor. :ElmBrowseDocs queries elm-oracle, then opens docs web page for the word under the cursor. * :ElmFormat formats the current buffer with elm-format. Screenshots Credits Other vim-plugins, thanks for inspiration (elm.vim, ocaml.vim, haskell-vim) Contributors of elm-vim License Copyright © Joseph Hager. See LICENSE for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ElmCast/elm-vim"	"Elm mode for vim."	"true"
"Editor plugins"	"elm-plugin"	"https://plugins.jetbrains.com/plugin/8192"	"Elm plugin for IntelliJ IDEA."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JetBrains Plugin Repository :: Elm language plugin JetBrains Home Login | Sign Up Plugins Plugins home IntelliJ IDEA RubyMine WebStorm PhpStorm PyCharm AppCode MPS Android Studio DataGrip CLion Rider RSS Search: Categories All plugins (1877) Build (67) Code Editing (109) Code tools (218) Custom Languages (190) Amazon Ion IntelliJ IDEA Plugin Anko DSL Preview Apache Avro™ support Apache config (.htaccess) support AppleScript Support Arc AsciiDoc AspectJ Support Autosys JIL plugin AWS CloudFormation support BashSupport Batch Scripts Support BeanShell Box BEM Support BSFConsole C/C++ CFMLSupportPlugin CMD Support CoffeeBrew CoffeeLint CoffeeScript coffeescript-idea Conkitty Coocoo Courier schema language CSharp Cup Support Cursive D Language D Language Support Dart Data Weave Intellij Plugin. Decode DeftIDEA doT DSL Platform Dust EJS Elixir Elm language plugin Elm Language Support Emblem Erlang Extended Syntax Highlighting for IDEA6 Extended Syntax Highlighting for IDEA7 Fantom Support Fest Support FFDL Plugin FitNesse Fitnesse Integration FitNesse support for IntelliJ Frege Plugin Frozen Idea Gauge GLSL Support GNU GetText files support (*.po) Go Google Closure Soy Templates Google Protocol Buffers support Groovy HotSwap Groovy++ Support Handlebars/Mustache Haskell Haskell HaskForce Haxe Support HCL language support I-Pascal Illuminated Cloud™ Ini4Idea IntelliBot IntelliFrog IntelliJ plugin for the R language IntelliJ-Haskell IntelliJ-Haskell Itrules JaggeryEditor Jar Manifest Java Operator Overloading support java2smali JavaCC Plugin JavaFx Support JavaScript Squeezer Jet Template Language Support JetGroovy JFlex Support Jodd Props Support JS GraphQL JSFL Support K KerboScript(kOS) Kevoree Kotlin Kotlin Extensions For Android (obsolete) La Clojure LaTeX Latte LeekScript Libretto LiveScriptBrains LiveScriptIdea lsFusion support Lua Markdown Navigator Markdown support Mathematica REPL Mathematica Support Mirah language support Monkey C (Garmin Connect IQ) MonkeyScript Syntax Highlighter NEON support NetBurst JBehave-Idea Nim language support nixitch Non-Dairy Soy Plugin NSIS Language Support NSIS plugin OCaml Support OpenResty Lua Support Org4Idea OS Gosu Oxidize Parser Parser for IDEA Parser for IDEA 6.0 Paste Images into Markdown Perl PerlRun PHP PHP for IDEA 8 PHP RegExp Support Pig PList File Support PMIP - Poor Mans IDE Plugin Pony PropertiesEditor Protobuf Support Pug (ex-Jade) Puppet Support Purescript Plugin Python Python Community Edition Pyxl Support R4Intellij Raml Plugin For Intellij Redline Smalltalk RESOLVE langauge plugin ReStructuredText Support Robot Plugin RtplPlugin Ruby Rust Scala Scala Power Pack Schemely Script Monkey SilverStripe Template Language Support Simple Syntax Highlighting for IDEA6 Slim SmcPlugin SnakeYAML plugin sparql4idea Spj Plugin SQL Script Editor SQLDelight Squirrel Stylus support Sutr Language Plugin Swagger Plugin Swift Tara TeaCup Textmapper Thrift Support TL Schema support Toml Tree syntax highlighter Twelf Plugin Twig Support TYPO3 TypoScript Support TypoScript Plugin VDL plugin for IntelliJ vue-for-idea Winstanley WDL XQuery Support Xtend Support Xtext Xtext IDEA Core YAML/Ansible support Zephir CVS (4) Database (24) Editor (128) Folder (4) Formatting (30) Framework integration (136) Fun Stuff (44) Graphics (11) Inspection (46) Intention (8) J2ee (19) J2ME (3) JavaScript (25) JBehave (5) JSP (3) Maven 2 (22) Menu Components (8) Misc (134) Modeling and CASE Tools (18) MPS (25) Navigation (48) Network (18) Obfuscation (3) Obsolete (10) OS Integration (15) Plugin Development (18) PluginUploader (2) Profiling (14) Refactoring (20) Reporting (11) Search and replace (14) Struts (6) TeamWork (28) Tools Integration (176) UI (50) Unit Testing (55) VCS Integration (59) Viewer (8) Web (22) XML (19) Add new category... Authors: elm.intellij.plugin@gmail.com Elm language plugin Products: IntelliJ IDEA, RubyMine, WebStorm, PhpStorm, PyCharm, AppCode, Android Studio, 0xDBE, CLion, Rider Vendor: Kamil Durkiewicz Email: Source code: https://github.com/durkiewicz/elm-plugin License: https://raw.githubuserco...lugin/master/LICENSE.txt Bugtracker page Plugin for Elm language support. Features Supports Elm 0.17.0 (If you need to have different version supported, see this link) Parsing the syntax Coloring keywords, comments, strings and numbers Going to declaration Highlighting unresolved references Code completion Spellchecking Brace matching Downloads: 2071 Rating: Participated in rating: 3 Comment and rate Version Compatible builds Date 0.4.0 141 + 17.06.2016 Download 8 updates are hidden show all updates Recent change notes Warning: You cannot use multiple Elm plugins at the same time. If you have installed an Elm language plugin for IntelliJ be sure to uninstall it before installing this one. This plugin is still at development phase. More features are coming soon. v0.4 Code completion, Spellchecking, Brace matching. v0.3 Going to declaration, Highlighting unresolved references. v0.2 Simplified code completion: an index with keywords, values from the current file and some values from the core library. v0.1 Parsing the syntax Coloring keywords, comments, strings and numbers Commenting / uncommenting the code with a keybord shortcut Comments: Comment and rate avilesdiego Rated: 2016-07-13 17:44:27 Great early version. Was not expecting any Elm plugin or support but I'm pleasently surprised there is one and it's quite good. Of course there is room for improvement, but taking into account what a new and different syntax Elm is/has, it's already a pretty good plug-in. Thank you! Keep it up. . nitingupta910 Rated: 2016-07-12 23:05:55 . douglascorrea Rated: 2016-06-26 02:42:23 It is still on going but it is perfect. Now that it will support a better color scheme I have not reasons to move from IntelliJ . Copyright © 2000-2016 JetBrains. All rights reserved version: 3.0.439 Write to"	"null"	"null"	"Elm plugin for IntelliJ IDEA."	"true"
"Editor plugins"	"Elm Visual Studio Code Support"	"https://marketplace.visualstudio.com/items?itemName=sbrink.elm"	"Syntax highlighting, Snippets, Function information, REPL, Reactor support (Webserver/Debugger) - Starting/Stopping"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"elm | Visual Studio Marketplace   https://www.visualstudio.com MSDN Subscriptions Products Top Products Visual Studio 2015 Products Visual Studio Enterprise Visual Studio Professional Visual Studio Community Visual Studio Code Visual Studio Team Services Team Foundation Server Other Products Visual Studio Test Professional Team Explorer Everywhere Application Insights MSDN Platforms HockeyApp Visual Studio Express How to Buy Visual Studio Visual Studio Team Services Compare Compare Visual Studio 2015 Offerings Visual Studio Team Services Feature Matrix Features Application Development Mobile Web Cloud Windows Office Tools Games Node.js Visual C++ Python .NET Lifecycle Management DevOps and ALM Agile Software Development Version Control Tools for Java teams Release Management Reporting Cloud-Based Load Testing Continuous Integration Testing Tools Extend and Integrate Visual Studio Visual Studio Team Services Visual Studio Code Downloads Top Downloads Visual Studio Enterprise Visual Studio Community Visual Studio Code Team Foundation Server Extensions and Integrations Visual Studio Tools for Apache Cordova Visual Studio Tools for Unity Node.js Tools for Visual Studio Python Tools for Visual Studio .NET Nuget Packages Visual Studio Gallery Visual Studio Team Services Integrations All Downloads News Support Marketplace Documentation Visual Studio on MSDN Visual Studio Team Services Visual Studio Code Free Visual Studio Contact us Jobs Privacy Terms of use Trademarks © 2016 Microsoft"	"null"	"null"	"Syntax highlighting, Snippets, Function information, REPL, Reactor support (Webserver/Debugger) - Starting/Stopping"	"true"
"Boilerplates"	"elm-webpack-starter"	"https://github.com/moarwick/elm-webpack-starter"	"A simple Webpack setup for writing Elm apps."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"339"	"14"	"37"	"GitHub - moarwick/elm-webpack-starter: Boilerplate for developing Elm apps on Webpack Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 339 Fork 37 moarwick/elm-webpack-starter Code Issues 0 Pull requests 0 Pulse Graphs Boilerplate for developing Elm apps on Webpack http://moarwick.github.io/elm-webpack-starter/ 51 commits 2 branches 4 releases 5 contributors JavaScript 56.1% Elm 32.3% HTML 7.3% CSS 4.3% JavaScript Elm HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.6.2 v0.6.1 v0.6.0 v0.5.1 Nothing to show New pull request Latest commit 5552eb8 Jun 6, 2016 moarwick Update README Permalink Failed to load latest commit information. src update modules, rebuild May 19, 2016 .gitignore add dist/ folder to .gitignore May 21, 2016 README.md Update README Jun 6, 2016 elm-package.json upgrade to v0.17.0, rebuild May 11, 2016 package.json 0.6.2 Jun 6, 2016 webpack.config.js use copy-webpack-plugin Jun 6, 2016 README.md elm-webpack-starter A simple Webpack setup for writing Elm apps: Dev server with live reloading, HMR Support for CSS/SCSS (with Autoprefixer), image assets Bootstrap 3.3+ (Sass version) Bundling and minification for deployment Basic app scaffold, using Html.App A snippet of example code to get you started! Install: git clone https://github.com/moarwick/elm-webpack-starter cd elm-webpack-starter npm install  If you haven't done so yet, install Elm globally: npm install -g elm  Install Elm's dependencies: elm package install  Serve locally: npm start  Access app at http://localhost:8080/ Get coding! The entry point file is src/Main.elm Browser will refresh automatically on any file changes.. Build & bundle for prod: npm run build  Files are saved into the /dist folder To check it, open dist/index.html Changelog Ver 0.6.2 Use copy-webpack-plugin instead of cp to copy files (Windows compatible) Ver 0.6.0 elm-hot-loader is back (no Elm code changes required!) Switch to bootstrap-sass to demo CSS Ver 0.5.0 Update to Elm 0.17.0 (and other latest modules) Upgrade starter code per upgrade-docs Remove elm-hot-loader (for now) Ver 0.4.0 Add elm-hot-loader for HMR support (PR by fluxxu) Ver 0.3.0 Use html-webpack-plugin to generate index.html Apply hash filenames for bundled JS and CSS (prevents caching) Image and favicon assets copied to dist/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/moarwick/elm-webpack-starter"	"A simple Webpack setup for writing Elm apps."	"true"
"Boilerplates"	"elm-app-boilerplate"	"https://github.com/gkubisa/elm-app-boilerplate"	"A fully-featured base project for Elm apps: Webpack, HMR, ES6, JS and Elm tests, Semantic UI, sample code and more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"4"	"5"	"GitHub - gkubisa/elm-app-boilerplate: Elm application boilerplate. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 38 Fork 5 gkubisa/elm-app-boilerplate Code Issues 3 Pull requests 0 Pulse Graphs Elm application boilerplate. http://gkubisa.github.io/elm-app-boilerplate/ 84 commits 3 branches 19 releases Fetching contributors JavaScript 49.6% Elm 48.2% HTML 1.3% Nginx 0.9% JavaScript Elm HTML Nginx Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master navigation Nothing to show v0.3.1 v0.3.0 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 hakyll Nothing to show New pull request Latest commit 0ad5398 Jun 21, 2016 gkubisa committed on GitHub Merge pull request #10 from bravo-kernel/host … Add note about running on alternative host/port Permalink Failed to load latest commit information. config Building and running Docker image May 10, 2016 elm-test Update dependencies (including elm 0.17) May 22, 2016 elm Update dependencies (including elm 0.17) May 22, 2016 html Integrate webpack (WIP) Apr 10, 2016 js-test Add JavaScript tests Apr 16, 2016 js Update dependencies (including elm 0.17) May 22, 2016 styles Integrate webpack (WIP) Apr 9, 2016 .babelrc Use ES6 in webpack config Apr 14, 2016 .dockerignore Building and running Docker image May 10, 2016 .editorconfig Build and push production docker image as part of CI May 11, 2016 .eslintrc.test.yml Add JavaScript tests Apr 16, 2016 .eslintrc.yml Integrate eslint-loader Apr 14, 2016 .gitignore Add JavaScript tests Apr 16, 2016 .npmrc Simplify updating the project version Mar 28, 2016 Dockerfile Building and running Docker image May 10, 2016 LICENSE Initial version Feb 11, 2016 README.md Adds note about alternative host/port Jun 18, 2016 elm-package.json Bump version to 0.3.1 May 25, 2016 html-minifier.json Implement `npm run build` using webpack Apr 14, 2016 karma.conf.js Add JavaScript tests Apr 16, 2016 package.json Bump version to 0.3.1 May 24, 2016 shippable.yml Run `npm update` as part of the CI build May 16, 2016 webpack.config.babel.js Update dependencies (including elm 0.17) May 22, 2016 README.md Elm App Boilerplate Provides an efficient development workflow and a starting point for building Elm applications. Features automated build of all application resources using webpack Hot Module Replacement for the Elm code using elm-hot-loader automatic re-execution of tests on source change for Elm and JavaScript code property based testing using elm-check for the Elm tests test coverage using istanbul for the JavaScript tests Semantic UI integration JavaScript code written in ES6, transpiled using Babel JavaScript linted using eslint building and running a Docker image continuous integration and deployment based on Shippable dependency checking using npm-check-updates Getting Started Fork and clone this repo. npm install npm start  Open http://localhost:8080/ in a browser. For an alternative host or port run: npm start -- --host=0.0.0.0 --port=8081  Testing Run tests once off: npm test # Elm and JavaScript tests npm run test:elm # only Elm tests npm run test:js # only JavaScript tests  Restart the tests on code change: npm run tdd # Elm and JavaScript tests npm run tdd:elm # only Elm tests npm run tdd:js # only JavaScript tests  Deployment The deployment is automated using Shippable and is triggered as follows: Run npm version [major|minor|patch] on the master branch. Add release notes in GitHub. On success: a new docker image is pushed to elm-app-boilerplate on Docker Hub the demo app is deployed to elm-app-boilerplate GitHub Pages Custom Deployments Consider using npm run release as a base - it builds the app, creates a docker image, and then tags and pushes it to Docker Hub. Alternatively use the output of the npm run build command which stores all the optimized application files in ./dist. Updating Version This project customizes the standard npm version script to also: ensure that the dependencies are up to date execute all tests update the version in elm-package.json push the branch on which the version change was made push the created tag Updating Dependencies Dependeny check and update is handled by ncu. A check runs automatically every time npm version is executed but can also be triggered explicitly. npm run ncu # checks the dependencies in package.json npm run ncu -- -a # updates all dependencies in node_modules and package.json  Note: all ncu parameters and flags have to be specified after --. Elm Commands The following Elm commands are exposed through npm scripts: npm run elm npm run elm-reactor npm run elm-repl npm run elm-package npm run elm-make The parameters to those commands must be specified after --, for example: npm run elm-package -- install evancz/elm-effects. See npm run-script. Directory Structure General package.json - defines dependencies and scripts for building, testing and running the application dist/ - built application artifacts produced by npm run build coverage/ - JavaScript test coverage reports shippable.yml - configuration of the continuous integration and deployment process based on Shippable Elm elm-package.json - describes the Elm application and its dependencies elm/ - Elm source files elm/Main.elm - Elm application entry point elm/App/ - the namespace for all application Elm modules elm-test/ - directory containing all Elm tests elm-test/TestRunner.elm - the entry point for executing tests and bootstrapping the actual test runner elm-test/Tests.elm - the main file loading and exposing all the test suites Semantic UI styles/ - all the application styles styles/theme.config - specifies which theme to use for each components styles/site/ - project-specific configuration and overrides The following files and directories are copied from semantic-ui-less node module by the postinstall script and should not be modified manually. styles/definitions/ - Semantic UI component definitions styles/themes/ - Semantic UI themes styles/semantic.less - includes all Semantic UI components styles/theme.less - internal theme loading helper JavaScript js/ - contains all application JavaScript code js/main.js - entry point to the application JavaScript code js/semantic-ui/ - scripts for Semantic UI integration js-test/ - directory containing all JavaScript tests js-test/test.js - entry point for JavaScript tests - automatically loads all *.test.js files in js-test HTML html/index.html - overall application entry point Docker Dockerfile - instructions for building a docker image config - configuration for the services embedded in the docker image Docker This section describes the Docker-related commands which are used by the Shippable continuous integration and deployment process. Docker version 1.11.1 or later is required. Creating a docker image containing a copy of the ./dist directory which is served by nginx on port 80: npm run docker-build  Pushing the created docker image to Docker Hub with the tag latest: npm run docker-push  Testing the created docker image locally: npm run docker-run # creates and starts a Docker container # the app is now available at http://localhost:8081  npm run docker-start # starts an existing container npm run docker-stop # stops an existing container npm run docker-rm # removes an existing, stopped container  Semantic UI Semantic UI provides a lot of ready-made, customizable UI components and helps to implement the design of the application quickly and consistently. It was included in elm-app-boilerplate because it integrates nicely with Elm. The main idea behind the integration is that Elm handles all the application logic, integration with the backend and rendering of the HTML. Semantic UI on the other hand is responsible for making the application look nice on the screen. Integration Semantic UI globals, views, collections and elements are defined using LESS only (except for globals/site.js which handles the global configuration), so they work seamlessly with Elm out of the box. The modules require some JavaScript to work and must be initialized by the application. However, some (if not all) modules can be automatically managed in JavaScript in a way that is completely transparent to the Elm code. The demo page of elm-app-boilerplate contains some examples of that technique. Pull requests with examples for other modules welcome! The behaviors would certainly be the most difficult to integrate, however, they are probably also the least likely to be useful to an Elm application. Specifically, the interaction with the backend (API behaviour) is better handled in Elm. Form validation could be useful, however, Elm validation is also available. The visibility behaviour is the one which cannot be easily done in Elm, so the integration might be worth the effort. Usage The application can be styled using the following techniques, in order of preference: Select suitable themes for the components by modifying styles/theme.config. Configure the Semantic UI variables in styles/site/**/*.variables. Add custom LESS code to modify some components in styles/site/**/*.overrides. Add any other custom LESS code to styles/site/globals/site.overrides, or to custom *.less files it imports. Please refer to Semantic UI documentation for more details, including defining your own reusable themes. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gkubisa/elm-app-boilerplate"	"A fully-featured base project for Elm apps: Webpack, HMR, ES6, JS and Elm tests, Semantic UI, sample code and more."	"true"
"Misc"	"Try Elm"	"http://elm-lang.org/try"	"Write and compile elm code online!"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Try Elm"	"null"	"null"	"Write and compile elm code online!"	"true"
"Misc"	"404 Elm Street"	"https://github.com/zalando/elm-street-404"	"A fun WebGL game built with Elm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"71"	"15"	"2"	"GitHub - zalando/elm-street-404: A fun WebGL game built with Elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 71 Fork 2 zalando/elm-street-404 Code Issues 6 Pull requests 0 Pulse Graphs A fun WebGL game built with Elm http://zalando.github.io/elm-street-404/ 320 commits 3 branches 0 releases Fetching contributors Elm 96.9% HTML 1.8% Other 1.3% Elm HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master sprites Nothing to show Nothing to show New pull request Latest commit 91bc1a8 Jul 9, 2016 w0rm committed on GitHub Update README.md Permalink Failed to load latest commit information. img Merge pull request #34 from kuzminadya/master Jul 9, 2016 src Added close button Jul 6, 2016 .gitignore Adding html-minifier Dec 17, 2015 .travis.yml Ported TEA May 15, 2016 LICENSE Prepare for github Dec 17, 2015 MAINTAINERS Prepare for github Dec 17, 2015 README.md Update README.md Jul 9, 2016 elm-package.json Support relative click May 29, 2016 embed.html Update embed.html Jul 9, 2016 gh-pages.sh Update gh-pages.sh Jul 9, 2016 index.html Update index.html Jul 9, 2016 screen.gif updated gif Dec 23, 2015 README.md 404 Elm Street Work in progress, current demo can be seen here. Read more about the game on our blog. You are Joe, the courier. It is your job, to deliver all the fashion to all the customers. Sometimes, you have to pick up stuff and return it to Zalando. No problem. However, customers keep ordering more and more — and your bicycle only has room for so many boxes... To succeed, you'll have to plan your route carefully. You have to decide which packages to deliver in which order. And you really, really have to hurry. You'll find, that it's not as easy being a Zalandoer as you thought it was: Unhappy customers: you lose. Instructions to run Install elm elm-lang.org/install Clone this repo and cd into it Start elm reactor Open http://localhost:8000/src/Main.elm in the browser to see the game Embedded mode Run elm make src/Main.elm --output elm.js Start elm reactor Open http://localhost:8000/index.html Alternatively there is http://localhost:8000/embed.html that demonstrates how the game may be toggled by a button Gotchas In order to be able to correctly suspend/restore the game for embeded mode, this fix has to be applied to the compiled elm.js. - numSteps = step(numSteps, process); + if (process.root) { numSteps = step(numSteps, process); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zalando/elm-street-404"	"A fun WebGL game built with Elm."	"true"
"Misc"	"Debug Elm"	"http://debug.elm-lang.org/try"	"Debug elm code online."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Debug Elm"	"null"	"null"	"Debug elm code online."	"true"
"Misc"	"Haskell to Elm"	"https://github.com/eeue56/haskell-to-elm"	"Collection of examples on places where Elm is different to Haskell, targetted at Elm beginners coming from Haskell backgrounds."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16"	"4"	"4"	"GitHub - eeue56/haskell-to-elm Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 16 Fork 4 eeue56/haskell-to-elm Code Issues 0 Pull requests 1 Pulse Graphs No description or website provided. 33 commits 1 branch 0 releases Fetching contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 7290712 Dec 23, 2015 eeue56 Merge pull request #1 from gyzerok/patch-1 … fix typo Permalink Failed to load latest commit information. .gitignore Initial commit Aug 9, 2015 LICENSE Initial commit Aug 9, 2015 README.md Update README.md Dec 23, 2015 README.md haskell-to-elm Collection of examples on places where Elm is different to Haskell. Used for helping beginners moving from Haskell to Elm. Non-exhaustive list, only to be used alongside the documentation on the Elm site. Functional Programming Type signatures Function application Function composition List comprehensions Lenses Where Purity Prelude functions id cons head tail zip show mod unwords cycle foldl Modules Importing Exporting Functional programming Type signatures Elm uses a single colon (:) for type signatures. Double colons (::) is used for cons. Example     add :: Int -> Int  becomes     add : Int -> Int  Function application Instead of using the dollar symbol $ elm uses <| and |> for application in different directions. Example:     collage (round board.width) (round board.height) $ map (genRect board) board.pieces  becomes     collage (round board.width) (round board.height) <| List.map (genRect board) board.pieces     --     List.map (genRect board) board.pieces |> collage (round board.width) (round board.height)  Function composition Instead of using the (.) symbol Elm uses << and >> for composition in different directions Example:     isEvenSquareRoot = sqrt . isEven  becomes     isEvenSquareRoot = sqrt << isEven     -- or     isEvenSquareRoot = isEven >> sqrt  List comprenhensions There are no list comprehensions in Elm. Lenses Elm has the package focus for lense-like accessors. Due to a lack of template-haskell like functionality, you must always manually create your own focus Example:     data Patch = Patch {         _colour :: Colour,         _size :: Double,          _coord :: Coordinate     } deriving (Show, Eq, Ord)      mkLabels[''Patch]  becomes     type alias Patch = {         colour: Colour,         size: Float,         coord: Coordinate     }      colour = create .colour (\f r -> { r | colour <- f r.colour })     coord = create .coord (\f r -> { r | coord <- f r.coord })     size = create .size (\f r -> { r | size <- f r.size })  where vs let Elm has no where binding - instead use let Pattern matching Elm doesn't support multiple body declarations for functions, so instead you have to use case..of Example:     head [] = error     head (X:xs) = x  becomes     head xs = case xs of         x::xs -> Just x         [] -> Nothing  Purity Functions in Elm as of 0.15.1 have pure type signatures. However, as they are actually implented in JS, it's possible that the underlying code you're calling isn't pure. This gives the effect of Elm the language being pure, but the things it can be used to do can be impure (eg, drawing to screen). Native functions can also produce runtime errors, though there is a drive to rid these from Elm entirely. Built-in (Prelude) methods id Elm has renamed id to identity Example:     id xs  becomes     identity xs  cons Elm uses double colons (::) for cons. Example     5 : 6 : [7, 8]  becomes     5 :: 6 :: 7 :: [7, 8]  head Instead of throwing errors for empty lists, Elm uses Maybe for head Example     head [4, 5] == 4  becomes     case head [4, 5] of         Just x -> x == 4         Nothing -> False  tail Instead of throwing errors for empty lists, Elm uses Maybe for tail Example     tail [4, 5] == [5]  becomes     case tail [4, 5] of         Just x -> x == [5]         Nothing -> False  zip Elm has no built-in zip method - instead it provides a map2 function that can be used with the tuple creator (,) to make a list of size 2 tuples from two lists. Example:     zip xs ys  becomes     map2 (,) xs ys  show Elm renamed show to toString. Confusingly, there is also a method called show in Elm - this generates a HTML element containing a textual representation of the data. Example:     show [1, 2, 3]  becomes     toString [1, 2, 3]  mod mod in Elm uses the (%) symbol. Example:     isEven x = x `mod` 2 == 0  becomes     isEven x = x % 2 == 0  unwords unwords is replaced by the join function Example:     unwords $ words ""Hello Dave and Jeremy""  becomes     join "" "" <| words ""Hello Dave and Jeremy""  cycle Elm has no cycle built in. TODO: find documentation for this foldl The order of the accumalator function arguments are swapped in Elm. Example:     idx xs = foldl (\x y -> y : x) [] xs  becomes     id xs = List.foldl (\x y -> x :: y) xs []   Module syntax Importing names Elm uses the exposing keyword to import names into the current namespace. Example:     import List (map, foldl)  becomes     import List exposing (map, foldl)  Defining exportable names TODO: find documentation on elm site for this Following the module declaration, you must have no identnation level. Example:     module Coords (pos) where         pos x y = (x, y)  becomes     module Coords (pos) where     pos x y = (x, y)  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/eeue56/haskell-to-elm"	"Collection of examples on places where Elm is different to Haskell, targetted at Elm beginners coming from Haskell backgrounds."	"true"
"Misc"	"elmflux"	"http://yang-wei.github.io/elmflux/"	"Visualization of Elm Signals."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elm Flux : Visualization of Elm Signal"	"null"	"null"	"Visualization of Elm Signals."	"true"
"Support"	"Mailing list"	"https://groups.google.com/forum/?fromgroups#!forum/elm-discuss"	"Google discussion group."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Grupy dyskusyjne Google Aby korzystać z usługi Forum Dyskusyjne Google, włącz obsługę języka JavaScript w ustawieniach przeglądarki, a następnie odśwież tę stronę. <xmp>.</xmp> <div style=""display:none"" id=""__top_header""><div class=""gb_nf"" ng-non-bindable="""" id=""gb""><div class=""gb_re gb_sf""><div class=""gb_db gb_sf gb_R gb_rf""><div class=""gb_df gb_R gb_sf gb_kf""></div><div class=""gb_ec gb_sf gb_R""><div class=""gb_ga"" id=""gbsfw""></div><div class=""gb_ea gb_Ec gb_R"" id=""gbwa""><div class=""gb_pc""><a class=""gb_b gb_Rb"" href=""https://www.google.pl/intl/pl/options/"" title=""Aplikacje Google"" aria-expanded=""false"" tabindex=""0"" data-ved=""0EL0nCAI""></a><div class=""gb_fb""></div><div class=""gb_eb""></div></div><div class=""gb_ha gb_ga gb_ua"" aria-label=""Aplikacje Google"" aria-hidden=""true"" role=""region""><ul class=""gb_ja gb_ca"" aria-dropeffect=""move""><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""192"" href=""https://myaccount.google.com/?utm_source=OGB"" id=""gb192"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCAMoAA""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -1451px""></span><span class=""gb_4"">Moje konto</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""1"" href=""https://www.google.pl/webhp?tab=gw&amp;ei=3VyJV4fmJIie-wHtsJKgBg&amp;ved=0EKkuCAQoAQ"" id=""gb1"" rel=""noreferrer"" target=""_blank""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:-17px -207px""></span><span class=""gb_4"">Wyszukiwarka</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""8"" href=""https://maps.google.pl/maps?hl=pl&amp;tab=gl"" id=""gb8"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCAUoAg""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -450px""></span><span class=""gb_4"">Mapy</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""36"" href=""https://www.youtube.com/"" id=""gb36"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCAYoAw""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 0""></span><span class=""gb_4"">YouTube</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""78"" href=""https://play.google.com/?hl=pl&amp;tab=g8"" id=""gb78"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCAcoBA""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -1779px""></span><span class=""gb_4"">Play</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""5"" href=""https://news.google.pl/nwshp?hl=pl&amp;tab=gn&amp;ei=3VyJV4fmJIie-wHtsJKgBg&amp;ved=0EKkuCAgoBQ"" id=""gb5"" rel=""noreferrer"" target=""_blank""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -1990px""></span><span class=""gb_4"">Wiadomości</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""23"" href=""https://mail.google.com/mail/?tab=gm"" id=""gb23"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCAkoBg""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -1710px""></span><span class=""gb_4"">Gmail</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""49"" href=""https://drive.google.com/?tab=go"" id=""gb49"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCAooBw""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -138px""></span><span class=""gb_4"">Dysk</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""24"" href=""https://www.google.com/calendar?tab=gc"" id=""gb24"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCAsoCA""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -2059px""></span><span class=""gb_4"">Kalendarz</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""119"" href=""https://plus.google.com/?gpsrc=ogpy0&amp;tab=gX"" id=""gb119"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCAwoCQ""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -938px""></span><span class=""gb_4"">Google+</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""51"" href=""https://translate.google.pl/?hl=pl&amp;tab=gT"" id=""gb51"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCA0oCg""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -693px""></span><span class=""gb_4"">Tłumacz</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""31"" href=""https://photos.google.com/?tab=gq"" id=""gb31"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCA4oCw""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -1145px""></span><span class=""gb_4"">Zdjęcia</span></a></li></ul><a class=""gb_ka gb_Ee"" aria-label=""Więcej aplikacji Google"" href=""https://www.google.pl/intl/pl/options/"" target=""_blank"">Więcej</a><span class=""gb_la""></span><ul class=""gb_ja gb_da"" aria-dropeffect=""move""><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""25"" href=""https://docs.google.com/document/?usp=docs_alc"" id=""gb25"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCA8oDA""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -1214px""></span><span class=""gb_4"">Dokumenty</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""10"" href=""https://books.google.pl/bkshp?hl=pl&amp;tab=gp&amp;ei=3VyJV4fmJIie-wHtsJKgBg&amp;ved=0EKkuCBAoDQ"" id=""gb10"" rel=""noreferrer"" target=""_blank""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -554px""></span><span class=""gb_4"">Książki</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""30"" href=""https://www.blogger.com/?tab=gj"" id=""gb30"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCBEoDg""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -1007px""></span><span class=""gb_4"">Blogger</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""53"" href=""https://www.google.com/contacts/?hl=pl&amp;tab=gC"" id=""gb53"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCBIoDw""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -69px""></span><span class=""gb_4"">Kontakty</span></a></li><li class=""gb_Z"" aria-grabbed=""false""><a class=""gb_O"" data-pid=""300"" href=""https://hangouts.google.com/"" id=""gb300"" rel=""noreferrer"" target=""_blank"" data-ved=""0EMEuCBMoEA""><div class=""gb_8""></div><div class=""gb_9""></div><div class=""gb_aa""></div><div class=""gb_ba""></div><span class=""gb_3"" style=""background-position:0 -2335px""></span><span class=""gb_4"">Hangouts</span></a></li></ul><a class=""gb_la gb_ye"" href=""https://www.google.pl/intl/pl/options/"" target=""_blank"">Jeszcze więcej od Google</a></div></div><div class=""gb_ef gb_R""><div class=""gb_pc""><a class=""gb_Je gb_Ha gb_rb"" id=""gb_70"" href=""https://www.google.com/a/UniversalLogin?continue=https://groups.google.com/forum/?fromgroups&amp;hl=pl&amp;service=groups2&amp;hd=default"" target=""_top"">Zaloguj się</a><div class=""gb_fb""></div><div class=""gb_eb""></div></div></div></div></div><div class=""gb_Mb gb_R gb_Qb"" id=""gbq1"" style=""max-width:204px;min-width:204px""><div class=""gb_Nb""><a class=""gb_hd gb_Pb"" href=""https://groups.google.com/d/overview"" title=""Grupy dyskusyjne Google"" data-ved=""0EMQuCBQ""><span class=""gb_Rb""></span></a></div></div><div class=""gb_R gb_ne""><div id=""gbq""><div class=""gbt"" id=""gbq2""><div id=""gbqfw""><form class=""gb_Ie"" action="""" onsubmit=""return false;"" target="""" id=""gbqf"" method=""get"" name=""gbqf"" data-ved=""0ELsnCBU""><fieldset class=""gbxx""><legend class=""gbxx"">Ukryte pola</legend><div id=""gbqffd""></div></fieldset><fieldset class=""gbqff gb_R"" id=""gbqff""><legend class=""gbxx"">Szukaj grup lub wiadomości</legend><div id=gbfwa class=""gbqfwa ""><div id=gbqfqw class=gbqfqw><div id=gbqfaa></div><div id=gbqfqwb class=gbqfqwb><input id=gbqfq class=gbqfif name=q type=text autocomplete=off value="""" placeholder=""Szukaj grup lub wiadomości""></div><div id=gbqfab></div></div></div></fieldset><div class=""gb_R gb_He"" id=""gbqfbw""><button class=""gbqfb"" aria-label=""Szukaj w Google"" name="""" id=""gbqfb""><span class=""gbqfi gb_Rb""></span></button></div></form></div></div></div></div></div><div id=""gbw""></div></div><div class=""gb_6c"" id=""gba""></div> <div style=""clear:both""></div></div></body></html>"	"null"	"null"	"Google discussion group."	"true"
"Support"	"SHARE-ELM"	"http://www.share-elm.com/"	"Share your code snippets, authorize with github gist."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Share your code snippets, authorize with github gist."	"false"
"Support"	"Reddit"	"https://www.reddit.com/r/elm"	"Elm board on reddit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Elm Programming Language jump to content my subreddits announcementsArtAskRedditaskscienceawwblogbookscreepydataisbeautifulDIYDocumentariesEarthPorneuropeexplainlikeimfivefoodfunnyFuturologygadgetsgamingGetMotivatedgifshistoryIAmAInternetIsBeautifulJokesLifeProTipslistentothismildlyinterestingmoviesMusicnewsnosleepnottheonionOldSchoolCoolpersonalfinancephilosophyphotoshopbattlespicsPolskascienceShowerthoughtsspacesportstelevisiontifutodayilearnedTwoXChromosomesUpliftingNewsvideosworldnewsWritingPromptsedit subscriptions front -all -random |  AskReddit -funny -worldnews -pics -videos -news -todayilearned -gaming -gifs -movies -aww -Showerthoughts -mildlyinteresting -IAmA -Jokes -europe -science -television -LifeProTips -OldSchoolCool -explainlikeimfive -creepy -dataisbeautiful -nottheonion -tifu -food -Music -gadgets -personalfinance -sports -space -TwoXChromosomes -EarthPorn -Futurology -photoshopbattles -nosleep -WritingPrompts -UpliftingNews -GetMotivated -askscience -books -Art -Documentaries -history -DIY -philosophy -listentothis -Polska -InternetIsBeautiful -announcements -blogmore » reddit.com elm hot new rising controversial top gilded promoted Want to join? Log in or sign up in seconds.| English limit my search to /r/elm use the following search parameters to narrow your results: subreddit:subreddit find submissions in ""subreddit"" author:username find submissions by ""username"" site:example.com find submissions from ""example.com"" url:text search for ""text"" in url selftext:text search for ""text"" in self post contents self:yes (or self:no) include (or exclude) self posts nsfw:yes (or nsfw:no) include (or exclude) results marked as NSFW e.g. subreddit:aww site:imgur.com dog see the search faq for details. advanced search: by author, subreddit... remember mereset password login Submit a new link Submit a new text post elmsubscribeunsubscribe2,705 readers ~7 users here now Get Set Up Online editor - write code, no install Install instructions Learning resources: Getting Started Examples and Docs Basic Architecture Community elm-discuss - friendly forum for questions and general discussion #elm - chat with people, great way to quickly find answers that are not online for some reason share-elm - easily share Elm programs elm-dev - planning and implementation for core tools created by zandernoriegaa community for 3 years message the moderators MODERATORS zandernoriega wheatBread about moderation team » get the best of reddit, delivered once a week email: subscribe × what's this? This sponsored link is an advertisement generated with our self-serve advertisement tool. Use of this tool is open to all members of reddit.com, and for as little as $5.00 you can advertise in this area. Get started › This is a new ad format that we are currently testing. We often try new types of ads in a limited capacity. If you have feedback, please let us know in the ads subreddit. This area shows new and upcoming links. Vote on links here to help them become popular, and click the forwards and backwards buttons to view more. Enter a keyword or topic to discover new subreddits around your interests. Be specific! You can access this tool at any time on the /subreddits/ page. 1 1 2 3 [Help required]: Pattern matching a 'Maybe' type (self.elm) submitted 11 hours ago * by savish 4 comments share loading... 2 17 18 19 An early progress of my advance data editing tool using elm on the client and rust on the server (github.com) submitted 2 days ago by ivanceras comment share loading... 3 0 1 2 Regular Expressions with Parametric Replacement (self.elm) submitted 2 days ago by imright_anduknowit 3 comments share loading... 4 24 25 26 99 elm problems, challenge (johncrane.gitbooks.io) submitted 3 days ago by yanis-urbis comment share loading... 5 4 5 6 How to fix the drag example? (self.elm) submitted 3 days ago by Suttonian 7 comments share loading... 6 2 3 4 Dependency CI, a new CI that lists Elm as supported language (dependencyci.com) submitted 3 days ago by jmite comment share loading... 7 52 53 54 How to use Elm at work (elm-lang.org) submitted 4 days ago by wheatBread 1 comment share loading... 8 4 5 6 wheel event in elm ? (self.elm) submitted 4 days ago by ThereIsNoDana-6 3 comments share loading... 9 0 1 2 How to approach JSON encode & decode of record with odd-shaped union type? (self.elm) submitted 3 days ago * by Fr0sty5 1 comment share loading... 10 1 2 3 Converting String Decoder to String (self.elm) submitted 4 days ago by DougieSF 4 comments share loading... 11 16 17 18 Getting to know Purescript (from Elm) (lambdacat.com) submitted 4 days ago by doppioslash comment share loading... 12 0 0 1 EpochTalk in Elm? (self.elm) submitted 6 days ago by pl4st3l1n4ROJA 4 comments share loading... 13 2 3 4 What is a good example of a CRUD app with multiple views? (self.elm) submitted 7 days ago by 2426021684 11 comments share loading... 14 14 15 16 Code Therapy -- Elm (youtube.com) submitted 8 days ago by alfreds_coach 5 comments share loading... 15 0 1 2 Recursive call to update and mapping child effects... (self.elm) submitted 8 days ago by d13d13 2 comments share loading... 16 5 6 7 [VIDEO] Nested Routes with elm-lang/navigation (dailydrip.com) submitted 8 days ago by knewter comment share loading... 17 2 3 4 sharing elm snippets (self.elm) submitted 8 days ago by greenail 3 comments share loading... 18 39 40 41 Minesweeper clone, and my experience learning Elm (self.elm) submitted 10 days ago by greim 16 comments share loading... 19 6 7 8 Duplicate, Message, or Update? Contexts in Elm Components (brianthicks.com) submitted 10 days ago by brnhx comment share loading... 20 10 11 12 Does elm have haskell like lens or something similar? (stackoverflow.com) submitted 12 days ago by 2426021684 comment share loading... 21 2 3 4 Can sub-modules respond to subscriptions? (self.elm) submitted 12 days ago by magnuscrocethethird 6 comments share loading... 22 16 17 18 The Board Game ""Go"" translated from Redux to Elm (self.elm) submitted 12 days ago * by Eleint 4 comments share loading... 23 17 18 19 Exploring Elm Lang (youtube.com) submitted 13 days ago by nohtyp comment share loading... 24 15 16 17 Could you suggest a good video course on Elm for a total beginner? The pragmatic studio course (linked in the resources section of this page) doesn't seem to exist anymore (self.elm) submitted 13 days ago by music05 6 comments share loading... 25 2 3 4 Trying to understand view updates (self.elm) submitted 13 days ago by jrmxrf 6 comments share loading... view more: next › about blog about source code advertise jobs help site rules FAQ wiki reddiquette transparency contact us apps & tools Reddit for iPhone Reddit for Android mobile website buttons <3 reddit gold redditgifts Use of this site constitutes acceptance of our User Agreement and Privacy Policy (updated). © 2016 reddit inc. All rights reserved. REDDIT and the ALIEN Logo are registered trademarks of reddit inc. π Rendered by PID 16759 on app-07 at 2016-07-15 21:59:58.951134+00:00 running 00a24de country code: PL."	"null"	"null"	"Elm board on reddit."	"true"
"Support"	"IRC"	"http://webchat.freenode.net/?channels=elm"	"Ask questions on elm freenode."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"freenode Web IRC (qwebirc) Javascript is required to use IRC."	"null"	"null"	"Ask questions on elm freenode."	"true"
"Support"	"Slack"	"http://elmlang.herokuapp.com/"	"Elm slack community."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Join Elm on Slack! Join Elm on Slack. 220 users online now of 3040 registered. Get my Invite or sign in. powered by slackin"	"null"	"null"	"Elm slack community."	"true"
"Who to follow"	"#elmlang"	"https://twitter.com/search?q=%23elmlang"	"Elm slack community."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"#elmlang — wyszukiwanie Twittera Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij #elmlang Najlepsze Na żywo Konta Zdjęcia Filmy Więcej opcji Wszystko Tweety Konta Zdjęcia Filmy Wiadomości Od wszystkich Od osób, które obserwujesz Z każdego miejsca Blisko Ciebie Zamieść to wyszukiwanie Wyszukiwanie zaawansowane Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się false © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Wyniki wyszukiwania Amitai Burstein ‏ @amitaibu 1 godz.1 godzinę temu From a simple counter to (almost) a full SPA example, in small steps https://github.com/Gizra/elm-tlv3/#steps … #elmlang 0 podanych dalej 1 polubiony Odpowiedz Podaj dalej Podane dalej Polub 1 Polubione 1 Więcej Kopiuj link do tweeta Zamieść tweeta Dave Thomas ‏ @7sharp9_exhumed 5 godz.5 godzin temu Im thinking of winding my own Guitar pickups, finish building my 4m carport and writing a game in #elmlang, fun times! 0 podanych dalej 1 polubiony Odpowiedz Podaj dalej Podane dalej Polub 1 Polubione 1 Więcej Kopiuj link do tweeta Zamieść tweeta Zalando Technology ‏ @ZalandoTech 7 godz.7 godzin temu Developers @unsoundscapes and @01k explain how the “Elm Street 404” game came together at @curry_on_conf: http://www.curry-on.org/2016/sessions/creating-a-fun-game-with-elm.html … #elmlang 1 podany dalej 1 polubiony Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 1 Polubione 1 Więcej Kopiuj link do tweeta Zamieść tweeta char *charStar[] ‏ @luke_dot_js 7 godz.7 godzin temu Is there an #elmlang meetup in Pittsburgh? Would love to meet you all while I'm there for @abstractionscon! 3 podane dalej 3 polubione Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Elm Weekly ‏ @elmweekly 13 godz.13 godzin temu Elm Weekly Issue 22 invading your inbox. Read the latest news / articles / videos and more by signing up at http://www.elmweekly.nl  #elmlang 9 podanych dalej 8 polubionych Odpowiedz Podaj dalej 9 Podane dalej 9 Polub 8 Polubione 8 Więcej Kopiuj link do tweeta Zamieść tweeta Jérémie Jost ‏ @j_jost 13 godz.13 godzin temu My Ultimate Tic-Tac-Toe (in #elmlang) is live! Play it at http://buff.ly/29U8bK3  3 podane dalej 3 polubione Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Yan Cui ‏ @theburningmonk 14.07 recording of my #elmlang talk at @polyconfhq is up https://www.youtube.com/watch?v=28jCDXfZCgE … #polyconf 4 podane dalej 11 polubionych Odpowiedz Podaj dalej 4 Podane dalej 4 Polub 11 Polubione 11 Więcej Kopiuj link do tweeta Zamieść tweeta W odpowiedzi do Richard Feldman Claudia Doppioslash ‏ @doppioslash 14.07 @rtfeldman there is also https://github.com/rgrempel/purescript-elm … by @rgrempel, which is also an #elmlang rewrite (mostly) in purescript with a little js 2 podane dalej 3 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Claudia Doppioslash ‏ @doppioslash 14.07 Learning #purescript after #elmlang feels like realising the sky you were looking at was just a ceiling, and *this* is the real sky 27 podanych dalej 74 polubione Odpowiedz Podaj dalej 27 Podane dalej 27 Polub 74 Polubione 74 Więcej Kopiuj link do tweeta Zamieść tweeta Max Goldstein ‏ @maxgoldst 14.07 Another useful #elmlang trick: If you've named something in a let and don't know what type it is, declare that it's an Int. Then recompile! 3 podane dalej 6 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 6 Polubione 6 Więcej Kopiuj link do tweeta Zamieść tweeta Mr 'Rob' Ashton ‏ @RobAshton 12.07 City of London, London I am getting the feeling that #elmlang is Duplo to the #purescript Lego 1 podany dalej 5 polubionych Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta elmoin ‏ @elmoinmoin 12.07 Are u ready to hack #elmlang with a very nice crowd tomorrow? #elmlang exercises for Elmoin meetup just published https://github.com/elmoin/port-exercise … 2 podane dalej 2 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 2 Polubione 2 Więcej Kopiuj link do tweeta Zamieść tweeta Charlie Koster ‏ @ckoster22 12.07 Shoutout to @czaplic for his hard work on #elmlang. It can't be easy sifting through community opinions to prioritize and make Elm better. 1 podany dalej 6 polubionych Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 6 Polubione 6 Więcej Kopiuj link do tweeta Zamieść tweeta Joseph Furlott ‏ @jmfurlott 12.07 Oakland, CA Thanks @czaplic for https://github.com/evancz/react-elm-components … | this is something that will definitely make the barrier to entry smaller #reactjs #elmlang 3 podane dalej 3 polubione Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta jose_zap ‏ @jose_zap 11.07 jose_zap podał/a dalej Evan Czaplicki This is clever! Will I've it a try soon #reactjs #elmlang https://twitter.com/czaplic/status/752495419045720064 … jose_zap dodał/a, Evan Czaplicki @czaplic Want to give @elmlang a try? Use it alongside React to introduce it gradually. http://elm-lang.org/blog/how-to-use-elm-at-work … pic.twitter.com/N47uIvFSRx 1 podany dalej 0 polubionych Odpowiedz Podaj dalej 1 Podane dalej 1 Polub Polubione Więcej Kopiuj link do tweeta Zamieść tweeta Martin Trojer ‏ @martintrojer 11.07 Writing #clojure backend + #elmlang frontend service is interesting. I'm reluctant to change CLJ bcos of stuff breaking, not at all in Elm. 7 podanych dalej 19 polubionych Odpowiedz Podaj dalej 7 Podane dalej 7 Polub 19 Polubione 19 Więcej Kopiuj link do tweeta Zamieść tweeta LambdaCat ‏ @lambda_cat 10.07 Getting to know Purescript (from Elm) http://www.lambdacat.com/getting-to-know-purescript-from-elm/ … #purescript #elmlang 15 podanych dalej 24 polubione Odpowiedz Podaj dalej 15 Podane dalej 15 Polub 24 Polubione 24 Więcej Kopiuj link do tweeta Zamieść tweeta elmoin ‏ @elmoinmoin 9.07 Elmoin Starter Kit, a simple boilerplate to hack nicely around with #elmlang w/o any Schnickschnack [ˈʃnɪkˌʃnak] https://github.com/elmoin/elmoin-starter-kit … 3 podane dalej 5 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta franzejr ‏ @franzejr 6.07 franzejr podał/a dalej Ossi Hanhinen The next @elmlang remote meetup is coming. Get your spot today! #elmlang #meetup @planetelm @elmcastio @elmweeklyhttps://twitter.com/ohanhi/status/750205436658343936 … franzejr dodał/a, Ossi Hanhinen @ohanhi The free Elm Remote Meetup is next Monday. Sign up now! #elmlang https://twitter.com/RemoteMeetup/status/750146972636573696 … 0 podanych dalej 1 polubiony Odpowiedz Podaj dalej Podane dalej Polub 1 Polubione 1 Więcej Kopiuj link do tweeta Zamieść tweeta Brak wyników. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Elm slack community."	"true"
"Who to follow"	"#elm"	"https://twitter.com/search?q=%23elm"	"Elm slack community."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"#elm — wyszukiwanie Twittera Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij #elm Najlepsze Na żywo Konta Zdjęcia Filmy Więcej opcji Wszystko Tweety Konta Zdjęcia Filmy Wiadomości Od wszystkich Od osób, które obserwujesz Z każdego miejsca Blisko Ciebie Zamieść to wyszukiwanie Wyszukiwanie zaawansowane Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się false © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Wyniki wyszukiwania Konta Pokaż wszystko Tweety 1 892 Obserwowani 15 Obserwujący 55,6 tys. Wyłącz wyciszenie @elm Wycisz @elm Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Elm - علم Konto zweryfikowane @elm شركة علم، الشركة الرائدة في مجال ابتكار الحلول وتطوير الخدمات وتحسين الإجراءات Riyadh, Saudi Arabia • elm.sa t3amBrian ‏ @t3amBrian 3 godz.3 godziny temu Get a crash course in Elm from @knewter this Sunday at the UN Join Us http://bit.ly/29M8BD7  #FrontEndCamp #Elm #FrontEnd 2 podane dalej 2 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 2 Polubione 2 Więcej Kopiuj link do tweeta Zamieść tweeta egghead.io ‏ @eggheadio 6 godz.6 godzin temu Decode a List of Numbers From a JSON String in Elm - #Elm lesson by @splodingsocks #free #newhttp://bit.ly/29DsXLt  3 podane dalej 10 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 10 Polubione 10 Więcej Kopiuj link do tweeta Zamieść tweeta Gareth Irwin ‏ @welshwoodturner 10 godz.10 godzin temu This morning job, only one chance to get it right, times 4! Stick chair seat slab in english #elm pic.twitter.com/qEJu34BH4z 6 podanych dalej 15 polubionych Odpowiedz Podaj dalej 6 Podane dalej 6 Polub 15 Polubione 15 Więcej Kopiuj link do tweeta Zamieść tweeta Hugh Miller ‏ @HM_HandMade 14.07 #Elm #chairs, part of my #Japanese collection, almost ready for oiling. #Japan #Craft #Furniture #Wood #Chair #Makepic.twitter.com/sSlJsL8mVd 3 podane dalej 9 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 9 Polubione 9 Więcej Kopiuj link do tweeta Zamieść tweeta Karl Sutt ‏ @karlsutt 13.07 Using #Elm as a type-checker for my dynamically typed backend API. 2 podane dalej 11 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 11 Polubione 11 Więcej Kopiuj link do tweeta Zamieść tweeta Ju Liu ‏ @arkh4m 12.07 Here's my lightning talk on ELM! http://slides.com/arkh4m/lightning-elm … #elm #embercamp 1 podany dalej 3 polubione Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta GOTO Copenhagen ‏ @GOTOcph 12.07 . @luke_dot_js shows how #Elm makes programming for browsers a nicer experience #gotocph https://gotocon.com/cph-2016/presentations/show_talk.jsp?oid=7709 …pic.twitter.com/zMovz3iPH0 4 podane dalej 5 polubionych Odpowiedz Podaj dalej 4 Podane dalej 4 Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Noco JavaScript ‏ @NoCoJavaScript 12.07 The Armory Coworking . @toastal is pretty convincing that #elm is worth your time. pic.twitter.com/tBjGTck7dm 1 podany dalej 1 polubiony Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 1 Polubione 1 Więcej Kopiuj link do tweeta Zamieść tweeta Jeff Shamley ‏ @jeff_shamley 12.07 The Armory Coworking Learning about why #elm is so cool from @toastal at @NoCoJavaScript meetup.pic.twitter.com/zDiJfOUZ3a 1 podany dalej 4 polubione Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta Elixir Digest ‏ @elixirdigest 12.07 Writing A Full Site in Phoenix and Elm - Navigation From The Ground Up http://buff.ly/29AiJQb  #elixir #elm #phoenix 10 podanych dalej 29 polubionych Odpowiedz Podaj dalej 10 Podane dalej 10 Polub 29 Polubione 29 Więcej Kopiuj link do tweeta Zamieść tweeta Kansas Cheerleading ‏ @KUcheer 11.07 2nd work week in 7 days Let's get ready to work! #ELM pic.twitter.com/buCZTi8akW 2 podane dalej 25 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 25 Polubione 25 Więcej Kopiuj link do tweeta Zamieść tweeta Functional Works ‏ @Functionalworks 11.07 Getting to know #Purescript (from #Elm) http://hubs.ly/H03zD5d0  1 podany dalej 9 polubionych Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 9 Polubione 9 Więcej Kopiuj link do tweeta Zamieść tweeta Skills Matter Konto zweryfikowane ‏ @skillsmatter 11.07 Interested in #Elm? Join us and Elm London tonight for Intro to Elm with Kris Jenkins! http://buff.ly/29xvvvV pic.twitter.com/GGwDeSnKtY 2 podane dalej 3 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Godefroid Chapelle ‏ @__gotcha 10.07 We met at @hintjens party. You mentioned looking into #elm to rewrite your UI. I forgot your name but would like to get in touch. Help 3 podane dalej 4 polubione Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta Orlando B ‏ @oboff84 10.07 Comicbook idea: languages as mutants battling for dev minds #clojure #haskell #fsharp #erlang #elixir #elm #j #java #csharp #cpp #javascript 2 podane dalej 2 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 2 Polubione 2 Więcej Kopiuj link do tweeta Zamieść tweeta elixirforbeginners ‏ @ElixirBeginners 8.07 Build a full phoenix and elm website #elixirlang #elm #Phoenix #myelixirstatus https://medium.com/@diamondgfx/writing-a-full-site-in-phoenix-and-elm-8f50ba4382a3#.llgnrlcho … 5 podanych dalej 19 polubionych Odpowiedz Podaj dalej 5 Podane dalej 5 Polub 19 Polubione 19 Więcej Kopiuj link do tweeta Zamieść tweeta Wireless Lifestyle ‏ @WLELM 8.07 Whittier, CA Meetings at #elm, gearing up for the weekend @sprinteveryday @DEVINPOLK3 @TyMehrapic.twitter.com/E7wyA6Wxas 1 podany dalej 2 polubione Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 2 Polubione 2 Więcej Kopiuj link do tweeta Zamieść tweeta Andy Poynter ‏ @andy_poynter 8.07 Excellent turnout for @ArbAssociation @LTOA33 #Elm tree event in @BrightonHoveCC @Brightonelmtree @Treemonkey1975pic.twitter.com/CV2oiIz9lH 2 podane dalej 4 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta Erlang Factory ‏ @erlangfactory 6.07 What #Elm and #elmrang are capable of? @doppioslash will show you some examples at #EUC2016 8-9 Sep http://www.erlang-factory.com/euc2016/claudia-doppioslash … 0 podanych dalej 4 polubione Odpowiedz Podaj dalej Podane dalej Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta Brak wyników. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Elm slack community."	"true"
"Who to follow"	"Official Elm"	"https://twitter.com/elmlang"	"Elm slack community."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elm (@elmlang) | Twitter Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij Elm @elmlang Tweety 798 Obserwowani 8 Obserwujący 7 873 Polubienia 726   Więcej Polubienia Wyłącz wyciszenie @elmlang Wycisz @elmlang Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Elm @elmlang Official tweets for the Elm programming language elm-lang.org Dołączył styczeń 2014 2 zdjęcia lub filmy Zdjęcia i filmy Tweety Tweety Tweety i odpowiedzi Multimedia @elmlang jest zablokowany Czy na pewno chcesz zobaczyć te tweety? Zobaczenie tweetów nie odblokuje @elmlang. Pokaż Tweety Zamknij Elm obserwuje Przypięty tweet Elm ‏ @elmlang 16.02.2015 Want to build big webapps? The Elm Architecture will keep your code modular, maintainable, and easy to test:https://github.com/evancz/elm-architecture-tutorial#the-elm-architecture … 63 podane dalej 143 polubione Odpowiedz Podaj dalej 63 Podane dalej 63 Polub 143 Polubione 143 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Elm Vancouver ‏ @elmvancity 22 godz.22 godziny temu Vancouver, British Columbia Wanna learn @elmlang by doing? Join us @ Suite Genius #Vancouver on July 20 and July 27 and have fun. 4 podane dalej 4 polubione Odpowiedz Podaj dalej 4 Podane dalej 4 Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Mateusz Gajewski Ꮺ ‏ @wendigo 14.07 Warszawa, Polska I’ll be attending @elmlang workshops before @strangeloop_stl conference Can’t wait! 2 podane dalej 7 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 7 Polubione 7 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Richard Feldman ‏ @rtfeldman 14.07 SF @elmlang Hack Night will be 7pm tomorrow in SoMa! @avh4 has volunteered to do an ""Elm for beginners"" session! http://www.meetup.com/Elm-user-group-SF/events/231519165/ … 7 podanych dalej 12 polubionych Odpowiedz Podaj dalej 7 Podane dalej 7 Polub 12 Polubione 12 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej ReactNext ‏ @ReactNext 13.07 @elmlang is a constant inspiration to #reactjs eco-system. Read this post by @freemanlatifhttp://j.mp/29yneL1  32 podane dalej 38 polubionych Odpowiedz Podaj dalej 32 Podane dalej 32 Polub 38 Polubione 38 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Jörn Huxhorn ‏ @huxi 12.07 Ostend, Frankfurt am Main How are @elmlang stylesheets not the next big thing already? :O https://www.youtube.com/watch?v=R121YzswY_4 … (PoC by @rtfeldman) 21 podanych dalej 50 polubionych Odpowiedz Podaj dalej 21 Podane dalej 21 Polub 50 Polubione 50 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej fgrsnab ‏ @mod3rn0 12.07 Tomorrow it's once again time for the Hamburg @elmlang Meetup! Great location, free drinks/snacks courtesy of @jimdohttp://www.meetup.com/Elmoin/events/231880436/ … 3 podane dalej 5 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Richard Feldman ‏ @rtfeldman 11.07 SF @elmlang Hack Night this Thursday! Free pizza, salad, beer, knowledge, high-fives, puns, and building things!http://www.meetup.com/Elm-user-group-SF/events/231519165/ … 6 podanych dalej 9 polubionych Odpowiedz Podaj dalej 6 Podane dalej 6 Polub 9 Polubione 9 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Elixir Fountain ‏ @elixirfountain 11.07 It's that time of week! Join special guest @czaplic & catch up on @elmlang #myelixirstatushttps://soundcloud.com/elixirfountain/elixir-fountain-evan-czaplicki-2016-07-11 … 18 podanych dalej 27 polubionych Odpowiedz Podaj dalej 18 Podane dalej 18 Polub 27 Polubione 27 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej der Schaarschmidt ‏ @schaary 11.07 For people who are interested in @elmlang - http://buff.ly/29AZUfF  is maybe the best introduction you could find.Very well done @rtfeldman 10 podanych dalej 37 polubionych Odpowiedz Podaj dalej 10 Podane dalej 10 Polub 37 Polubione 37 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Michael Curry ‏ @CurlyChimera 11.07 Listening to @rtfeldman describe ""6 Months of Elm in Production"" https://www.youtube.com/watch?v=R2FtMbb-nLs … … #elmlangpic.twitter.com/y4Q4oawoqL 13 podanych dalej 43 polubione Odpowiedz Podaj dalej 13 Podane dalej 13 Polub 43 Polubione 43 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Evan Czaplicki ‏ @czaplic 11.07 Want to give @elmlang a try? Use it alongside React to introduce it gradually. http://elm-lang.org/blog/how-to-use-elm-at-work …pic.twitter.com/N47uIvFSRx 253 podane dalej 426 polubionych Odpowiedz Podaj dalej 253 Podane dalej 253 Polub 426 Polubione 426 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Murphy Randle ‏ @splodingsocks 8.07 I’m super excited to be speaking about crowd-sourcing music with Twitter, @elmlang, and @elixirphoenix at @ElmConf this year!!!!!! 8 podanych dalej 28 polubionych Odpowiedz Podaj dalej 8 Podane dalej 8 Polub 28 Polubione 28 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Tom McGurl ‏ @Tom_McGurl 7.07 Manhattan, NY If your in the New York area and interested in @elmlang come out to @elm_ny tonight http://meetu.ps/e/BLycj/tsKD5/d  Beginners welcome! #elmlang 2 podane dalej 3 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Bill Gathen ‏ @epicpoodle 7.07 All of http://guide.elm-lang.org  is terrific, but “Error Handling and Tasks” is awesome. I finally feel like I grasp Maybe! @elmlang rocks 12 podanych dalej 32 polubione Odpowiedz Podaj dalej 12 Podane dalej 12 Polub 32 Polubione 32 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Evan Czaplicki ‏ @czaplic 7.07 First ever @ElmConf this September! Tickets at http://www.elm-conf.us/  Very excited to meet @elmlang folks from all over the country! 31 podanych dalej 44 polubione Odpowiedz Podaj dalej 31 Podane dalej 31 Polub 44 Polubione 44 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Richard Feldman ‏ @rtfeldman 5.07 ""Writing Friendly Elm Code"" - wisdom from @t_kelly9's experience writing @elmlang in production! http://tech.noredink.com/post/146963432518/writing-friendly-elm-code … 12 podanych dalej 46 polubionych Odpowiedz Podaj dalej 12 Podane dalej 12 Polub 46 Polubione 46 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Maxime Dantec ‏ @iamwarry 6.07 Joined talk with @paul_dijou about @elmlang in production, submitted for @Devoxx \o/ 4 podane dalej 14 polubionych Odpowiedz Podaj dalej 4 Podane dalej 4 Polub 14 Polubione 14 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Elm Vancouver ‏ @elmvancity 6.07 See you tonight at the first #Vancouver @elmlang meetup 4 podane dalej 6 polubionych Odpowiedz Podaj dalej 4 Podane dalej 4 Polub 6 Polubione 6 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Evan Czaplicki ‏ @czaplic 5.07 Great practical advice in http://tech.noredink.com/post/146963432518/writing-friendly-elm-code … E.g. record extension is nice for function reuse, not for data modeling. cc @t_kelly9 20 podanych dalej 71 polubionych Odpowiedz Podaj dalej 20 Podane dalej 20 Polub 71 Polubione 71 Więcej Kopiuj link do tweeta Zamieść tweeta Elm podał/a dalej Coding Grace ‏ @CodingGrace 4.07 Want to learn @elmlang? #Elm User Group Dublin is running a free workshop tomorrow evening. RSVP:http://www.meetup.com/Elm-User-Group-Dublin/events/231870837/ … 2 podane dalej 4 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta @elmlang nie ma jeszcze wpisów. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się Może Ci się też spodobać · Odśwież © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Elm slack community."	"true"
"Who to follow"	"Evan Czaplicki"	"https://twitter.com/czaplic"	"Elm slack community."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Evan Czaplicki (@czaplic) | Twitter Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij Evan Czaplicki @czaplic Tweety 1 974 Obserwowani 156 Obserwujący 8 411 Polubienia 962   Więcej Polubienia Wyłącz wyciszenie @czaplic Wycisz @czaplic Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Evan Czaplicki @czaplic Designer/developer of @elmlang. Working at NoRedInk. San Francisco, CA elm-lang.org Dołączył październik 2012 58 zdjęć lub filmów Zdjęcia i filmy Tweety Tweety Tweety i odpowiedzi Multimedia @czaplic jest zablokowany Czy na pewno chcesz zobaczyć te tweety? Zobaczenie tweetów nie odblokuje @czaplic. Pokaż Tweety Zamknij Evan Czaplicki obserwuje Przypięty tweet Evan Czaplicki ‏ @czaplic 11.07 Want to give @elmlang a try? Use it alongside React to introduce it gradually. http://elm-lang.org/blog/how-to-use-elm-at-work …pic.twitter.com/N47uIvFSRx 253 podane dalej 426 polubionych Odpowiedz Podaj dalej 253 Podane dalej 253 Polub 426 Polubione 426 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej Murphy Randle ‏ @splodingsocks 8 godz.8 godzin temu I really like this attitude toward refactoring from @czaplic in http://elm-lang.org/blog/how-to-use-elm-at-work …pic.twitter.com/rVgp1459rD 12 podanych dalej 20 polubionych Odpowiedz Podaj dalej 12 Podane dalej 12 Polub 20 Polubione 20 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej John Carmack ‏ @ID_AA_Carmack 22 godz.22 godziny temu Sometimes duplicating things, either code or data, can significantly simplifies a system. DRY isn't absolute. 672 podane dalej 976 polubionych Odpowiedz Podaj dalej 672 Podane dalej 672 Polub 976 Polubione 976 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej elm-conf ‏ @ElmConf 22 godz.22 godziny temu @KristianPuccio @czaplic yes, @dailydripcom has sponsored video recording and release :D 3 podane dalej 9 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 9 Polubione 9 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki ‏ @czaplic 24 godz.24 godziny temu Speakers for @ElmConf are posted! http://www.elm-conf.us/speaker/  very excited for the talks :D 10 podanych dalej 19 polubionych Odpowiedz Podaj dalej 10 Podane dalej 10 Polub 19 Polubione 19 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki ‏ @czaplic 14.07 Lots of folks coming to the @elmlang meetup tonight! http://www.meetup.com/Elm-user-group-SF/events/231519165/ … I'll be there a bit late, but excited to meet everyone! 0 podanych dalej 7 polubionych Odpowiedz Podaj dalej Podane dalej Polub 7 Polubione 7 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki ‏ @czaplic 14.07 New to Elm? Want to learn the basics? @avh4 is giving an intro tonight at the @elmlang meetup in SF. Come visit!http://www.meetup.com/Elm-user-group-SF/events/231519165/ … 5 podanych dalej 11 polubionych Odpowiedz Podaj dalej 5 Podane dalej 5 Polub 11 Polubione 11 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej Erin VonderHaar ‏ @avh4 14.07 I'm giving an Elm intro at the SF Elm meetup tonight, cc: @cbguder and I don't remember who all else 3 podane dalej 9 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 9 Polubione 9 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki obserwuje elm-conf i Randi Cohen Wyłącz wyciszenie @ElmConf Wycisz @ElmConf Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj elm-conf @ElmConf elm-conf US 2016 Wyłącz wyciszenie @randicohen89 Wycisz @randicohen89 Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Randi Cohen @randicohen89 Evan Czaplicki ‏ @czaplic 12.07 Had fun talking to @johnny_rugger on @elixirfountain, from @elmlang to French Toast :)https://soundcloud.com/elixirfountain/elixir-fountain-evan-czaplicki-2016-07-11 … 14 podanych dalej 35 polubionych Odpowiedz Podaj dalej 14 Podane dalej 14 Polub 35 Polubione 35 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej Elixir Fountain ‏ @elixirfountain 11.07 It's that time of week! Join special guest @czaplic & catch up on @elmlang #myelixirstatushttps://soundcloud.com/elixirfountain/elixir-fountain-evan-czaplicki-2016-07-11 … 18 podanych dalej 27 polubionych Odpowiedz Podaj dalej 18 Podane dalej 18 Polub 27 Polubione 27 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej Michael Curry ‏ @CurlyChimera 11.07 Listening to @rtfeldman describe ""6 Months of Elm in Production"" https://www.youtube.com/watch?v=R2FtMbb-nLs … … #elmlangpic.twitter.com/y4Q4oawoqL 13 podanych dalej 43 polubione Odpowiedz Podaj dalej 13 Podane dalej 13 Polub 43 Polubione 43 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej Bill Gathen ‏ @epicpoodle 7.07 All of http://guide.elm-lang.org  is terrific, but “Error Handling and Tasks” is awesome. I finally feel like I grasp Maybe! @elmlang rocks 12 podanych dalej 32 polubione Odpowiedz Podaj dalej 12 Podane dalej 12 Polub 32 Polubione 32 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki ‏ @czaplic 7.07 First ever @ElmConf this September! Tickets at http://www.elm-conf.us/  Very excited to meet @elmlang folks from all over the country! 31 podanych dalej 44 polubione Odpowiedz Podaj dalej 31 Podane dalej 31 Polub 44 Polubione 44 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki ‏ @czaplic 7.07 Evan Czaplicki podał/a dalej Gabriel Grinberg This is a particularly pretty game of snake. Nice work! :Dhttps://twitter.com/GabiGrinberg/status/734093611340533762 … Evan Czaplicki dodał/a, Gabriel Grinberg @GabiGrinberg Checkout this Elm snippet I've made using #elmfiddleio #elm http://www.elmfiddle.io/view/ciohidiwb0000ittvijce7hy5 … 7 podanych dalej 26 polubionych Odpowiedz Podaj dalej 7 Podane dalej 7 Polub 26 Polubione 26 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki ‏ @czaplic 5.07 Great practical advice in http://tech.noredink.com/post/146963432518/writing-friendly-elm-code … E.g. record extension is nice for function reuse, not for data modeling. cc @t_kelly9 20 podanych dalej 71 polubionych Odpowiedz Podaj dalej 20 Podane dalej 20 Polub 71 Polubione 71 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej Bastian Krol ‏ @bastiankrol 30.06 Bastian Krol podał/a dalej The Practical Dev The fact that @elmlang is mentioned in such memes makes me smile more than the actual joke :) (via @misprintedtype)https://twitter.com/ThePracticalDev/status/748164497840410624 … Bastian Krol dodał/a, The Practical Dev @ThePracticalDev Can you even call yourself a software developer anymore? pic.twitter.com/4jjdoe5VdT 8 podanych dalej 16 polubionych Odpowiedz Podaj dalej 8 Podane dalej 8 Polub 16 Polubione 16 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej Astynax Pirogov ‏ @alex_pir 1.07 It is still easy to use a good old Collage with new #elmlang. Even without Signals: new Sub/Cmd subsystem is nice :)https://github.com/astynax/elm-hekoish-watch … 3 podane dalej 6 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 6 Polubione 6 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki podał/a dalej Elm ‏ @elmlang 29.06 #elmlang patch release out today! http://elm-lang.org/install  for nicer elm-package errors and https://gist.github.com/evancz/d5f418f42827262ece857aa8ff6458c6 …pic.twitter.com/Zr6ZAg0tlq 23 podane dalej 27 polubionych Odpowiedz Podaj dalej 23 Podane dalej 23 Polub 27 Polubione 27 Więcej Kopiuj link do tweeta Zamieść tweeta Evan Czaplicki ‏ @czaplic 29.06 Upgrade to @elmlang 0.17.1 for nicer errors for elm-package! More info at https://gist.github.com/evancz/d5f418f42827262ece857aa8ff6458c6 …pic.twitter.com/oXPZhabC9U 48 podanych dalej 83 polubione Odpowiedz Podaj dalej 48 Podane dalej 48 Polub 83 Polubione 83 Więcej Kopiuj link do tweeta Zamieść tweeta @czaplic nie ma jeszcze wpisów. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się Może Ci się też spodobać · Odśwież San Francisco, CA © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Elm slack community."	"true"
"Who to follow"	"Richard Feldman"	"https://twitter.com/rtfeldman"	"Elm slack community."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Richard Feldman (@rtfeldman) | Twitter Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij Richard Feldman @rtfeldman Tweety 17,5 tys. Obserwowani 451 Obserwujący 3 848 Polubienia 28,3 tys.   Więcej Polubienia Wyłącz wyciszenie @rtfeldman Wycisz @rtfeldman Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Richard Feldman @rtfeldman Let’s go with the ambitious approach. San Francisco, CA github.com/rtfeldman Dołączył wrzesień 2008 276 zdjęć lub filmów Zdjęcia i filmy Tweety Tweety Tweety i odpowiedzi Multimedia @rtfeldman jest zablokowany Czy na pewno chcesz zobaczyć te tweety? Zobaczenie tweetów nie odblokuje @rtfeldman. Pokaż Tweety Zamknij Richard Feldman obserwuje Przypięty tweet Richard Feldman ‏ @rtfeldman 8.02 Folks often ask me if there's a major @elmlang book yet. Then someone at @ManningBooks did. Today it's official: Elm in Action is underway! 114 podanych dalej 300 polubionych Odpowiedz Podaj dalej 114 Podane dalej 114 Polub 300 Polubione 300 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman ‏ @rtfeldman 3 min3 minuty temu We're setting up ElmBridge, following the awesome @bridgefoundry model! :D If this interests you, here's a survey! https://docs.google.com/forms/d/e/1FAIpQLSfoY2hKEEycZtYcNZOvZjFYoZ2Clhwl2_kfaDXkG5HzB0I9fA/viewform … 2 podane dalej 0 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub Polubione Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Brian Hicks ‏ @brianhicks 25 min25 minut temu Brian Hicks podał/a dalej char *charStar[] elm-bridge should be a thing. They're collecting interest, get on this form!https://twitter.com/luke_dot_js/status/754057420133904385 … Brian Hicks dodał/a, char *charStar[] @luke_dot_js https://docs.google.com/a/noredink.com/forms/d/e/1FAIpQLSfoY2hKEEycZtYcNZOvZjFYoZ2Clhwl2_kfaDXkG5HzB0I9fA/viewform … 2 podane dalej 0 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub Polubione Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej egghead.io ‏ @eggheadio 6 godz.6 godzin temu Decode a List of Numbers From a JSON String in Elm - #Elm lesson by @splodingsocks #free #newhttp://bit.ly/29DsXLt  3 podane dalej 10 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 10 Polubione 10 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Ash Huang ‏ @ashsmash 6 godz.6 godzin temu Here. It's going to be okay. We're going to make it okay, everyone.pic.twitter.com/u9Hi7zKCiu 5 podanych dalej 15 polubionych Odpowiedz Podaj dalej 5 Podane dalej 5 Polub 15 Polubione 15 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Reactive Conference ‏ @ReactiveConf 6 godz.6 godzin temu Our limited offer of 399€ Regular tickets is running out fast! Make sure to get them while you can and save 30€ now. http://buff.ly/29TjtiN  1 podany dalej 2 polubione Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 2 Polubione 2 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Jack Franklin ‏ @Jack_Franklin 14.07 My @elmlang for JS developers talk from PolyConf is now online!https://www.youtube.com/watch?v=tOkOmWgDLOM … 6 podanych dalej 32 polubione Odpowiedz Podaj dalej 6 Podane dalej 6 Polub 32 Polubione 32 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman ‏ @rtfeldman 6 godz.6 godzin temu Richard Feldman podał/a dalej Richard Feldman Thanks to all who responded yesterday! I've submitted chapters 1 and 2 of @elm_in_action for MEAP formatting. :)https://twitter.com/rtfeldman/status/753350562012278784 … Richard Feldman dodał/a, Richard Feldman @rtfeldman Had a call with @ManningBooks about @elm_in_action. 2 chapters are done, and ch3 needs a few weeks. Should we release 1 & 2 as MEAP or wait? 2 podane dalej 18 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 18 Polubione 18 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej char *charStar[] ‏ @luke_dot_js 7 godz.7 godzin temu Is there an #elmlang meetup in Pittsburgh? Would love to meet you all while I'm there for @abstractionscon! 3 podane dalej 3 polubione Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Murphy Randle ‏ @splodingsocks 8 godz.8 godzin temu I really like this attitude toward refactoring from @czaplic in http://elm-lang.org/blog/how-to-use-elm-at-work …pic.twitter.com/rVgp1459rD 12 podanych dalej 20 polubionych Odpowiedz Podaj dalej 12 Podane dalej 12 Polub 20 Polubione 20 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej chuuch ‏ @ch000ch 19.10.2013 hi, grandma? can u come pick me up from my rap battle? it's over. no, i lost. he saw u drop me off & did a pretty devastating rhyme about it 45 756 podanych dalej 61 263 polubione Odpowiedz Podaj dalej 46 tys. Podane dalej 46 tys. Polub 61 tys. Polubione 61 tys. Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Erin VonderHaar ‏ @avh4 18 godz.18 godzin temu Notes from today's Elm Intro at SF Elm Meetup: https://gist.github.com/avh4/0e659685a2103ad2995012f5e9e1e276 … Thanks for coming! 4 podane dalej 10 polubionych Odpowiedz Podaj dalej 4 Podane dalej 4 Polub 10 Polubione 10 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej James L. Sutter ‏ @jameslsutter 17.04.2014 I hereby propose Henson's Law: Even the best CGI will look crude in 10 years, but awesome puppets will always look like awesome puppets. 1 843 podane dalej 1 876 polubionych Odpowiedz Podaj dalej 1,8 tys. Podane dalej 1,8 tys. Polub 1,9 tys. Polubione 1,9 tys. Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman ‏ @rtfeldman 20 godz.20 godzin temu Our @elmlang meetup can skeletonize a stack of pizzas in under 30 minutes. (Good thing we have more!)pic.twitter.com/D60k7ticpS 0 podanych dalej 15 polubionych Odpowiedz Podaj dalej Podane dalej Polub 15 Polubione 15 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman ‏ @rtfeldman 21 godz.21 godzin temu Anyone know why ""Request desktop mode"" is so often thwarted? Because it only spoofs UA, doesn't send fake dimensions for responsive layouts? 1 podany dalej 3 polubione Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Matt Ford ‏ @fordm 14.07 The Founders have mostly boring paintings aside from Ben Franklin, who was a wizard I guesspic.twitter.com/zw3F5CiPTM 312 podanych dalej 664 polubione Odpowiedz Podaj dalej 312 Podane dalej 312 Polub 664 Polubione 664 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej John Carmack ‏ @ID_AA_Carmack 22 godz.22 godziny temu Sometimes duplicating things, either code or data, can significantly simplifies a system. DRY isn't absolute. 672 podane dalej 976 polubionych Odpowiedz Podaj dalej 672 Podane dalej 672 Polub 976 Polubione 976 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Machine Pix ‏ @MachinePix 22 godz.22 godziny temu Very satisfying cable management.pic.twitter.com/Vt63NRLNd8 199 podanych dalej 497 polubionych Odpowiedz Podaj dalej 199 Podane dalej 199 Polub 497 Polubione 497 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Evan Czaplicki ‏ @czaplic 24 godz.24 godziny temu Speakers for @ElmConf are posted! http://www.elm-conf.us/speaker/  very excited for the talks :D 10 podanych dalej 19 polubionych Odpowiedz Podaj dalej 10 Podane dalej 10 Polub 19 Polubione 19 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Erin VonderHaar ‏ @avh4 14.07 Using @elmlang at work is 10 votes against unnecessary complexity http://elm-lang.org/blog/how-to-use-elm-at-work … 1 podany dalej 6 polubionych Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 6 Polubione 6 Więcej Kopiuj link do tweeta Zamieść tweeta Richard Feldman podał/a dalej Erin VonderHaar ‏ @avh4 14.07 Learning @elmlang is a vote against unnecessary complexity 6 podanych dalej 16 polubionych Odpowiedz Podaj dalej 6 Podane dalej 6 Polub 16 Polubione 16 Więcej Kopiuj link do tweeta Zamieść tweeta @rtfeldman nie ma jeszcze wpisów. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się Może Ci się też spodobać · Odśwież San Francisco, CA © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Elm slack community."	"true"
"Who to follow"	"Noah Hall"	"https://twitter.com/eeue56"	"Elm slack community."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Noah (@eeue56) | Twitter Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij Noah @eeue56 Tweety 606 Obserwowani 131 Obserwujący 453 Polubienia 489   Więcej Polubienia Wyłącz wyciszenie @eeue56 Wycisz @eeue56 Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Noah @eeue56 Software engineer at NoRedInk All over github.com/eeue56 Dołączył grudzień 2015 28 zdjęć lub filmów Zdjęcia i filmy Tweety Tweety Tweety i odpowiedzi Multimedia @eeue56 jest zablokowany Czy na pewno chcesz zobaczyć te tweety? Zobaczenie tweetów nie odblokuje @eeue56. Pokaż Tweety Zamknij Noah obserwuje Noah ‏ @eeue56 14.07 The things happening in the UK are genuinely scary. I haven't ever felt so out of control of my own life. I don't ever want to go back there 0 podanych dalej 3 polubione Odpowiedz Podaj dalej Podane dalej Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 13.07 I wonder if everyone else is actually as grumpy as me too 0 podanych dalej 2 polubione Odpowiedz Podaj dalej Podane dalej Polub 2 Polubione 2 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 12.07 Noah podał/a dalej sᴄᴏᴛᴛ/ᴄᴏʀɢᴀɴ this is how I feel every time I'm in SFhttps://twitter.com/scottcorgan/status/752911337659899904 … Noah dodał/a, sᴄᴏᴛᴛ/ᴄᴏʀɢᴀɴ @scottcorgan I’ve found so much more inspiration outside of the programming community than in it. Go stare at a mountain! 0 podanych dalej 2 polubione Odpowiedz Podaj dalej Podane dalej Polub 2 Polubione 2 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 12.07 Noah podał/a dalej char *charStar[] Also this!https://twitter.com/luke_dot_js/status/752836188042428416 … Noah dodał/a, char *charStar[] @luke_dot_js it was an honor and a lot of fun to share the virtual stage with @eeue56 and @robheghan at the #ElmRemoteMeetup yesterday! thanks to 0 podanych dalej 6 polubionych Odpowiedz Podaj dalej Podane dalej Polub 6 Polubione 6 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 12.07 Suggest something fun and hard to learn. What language needs more love right now? 0 podanych dalej 4 polubione Odpowiedz Podaj dalej Podane dalej Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 11.07 Great job HN, you've implemented user friendly features reddit has had for 3 years. Oh no, how will I maintain my inaccessable hipster creds 0 podanych dalej 1 polubiony Odpowiedz Podaj dalej Podane dalej Polub 1 Polubione 1 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 11.07 Protip: for major releases, don't completely rewrite untested core libraries that are vital for anyone using your thing without adding tests 0 podanych dalej 5 polubionych Odpowiedz Podaj dalej Podane dalej Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 11.07 Very much miss backend programming without needing to fight a bonkers framework. 1 podany dalej 4 polubione Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 8.07 If you take away the platforms for the most knowledgeable people to share their knowledge, the knowledge does with them. Sharing is good 2 podane dalej 1 polubiony Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 1 Polubione 1 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 6.07 Claim: people who don't want to use software ""because it's written in Python"" don't realise that they have Python installed. 0 podanych dalej 2 polubione Odpowiedz Podaj dalej Podane dalej Polub 2 Polubione 2 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 5.07 Noah podał/a dalej Ossi Hanhinen Gonna be talking about the Elm landscape and what things people want and what the current state ishttps://twitter.com/ohanhi/status/750205436658343936 … Noah dodał/a, Ossi Hanhinen @ohanhi The free Elm Remote Meetup is next Monday. Sign up now! #elmlang https://twitter.com/RemoteMeetup/status/750146972636573696 … 0 podanych dalej 5 polubionych Odpowiedz Podaj dalej Podane dalej Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 28.06 Noah podał/a dalej Ciaran Jenkins Yep. If you think you're Welsh and you voted to leave, you aren't Welsh or you're just plain oblivious.https://twitter.com/C4Ciaran/status/747092548343181312 … Noah dodał/a, Ciaran Jenkins @C4Ciaran EU funding by UK region. Brace yourselves, Wales. pic.twitter.com/o0jd7tGGNa 0 podanych dalej 5 polubionych Odpowiedz Podaj dalej Podane dalej Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 26.06 Oslo, Norge *Roedd* hen wlad fy nhadiau yn annywl i mi.. 0 podanych dalej 0 polubionych Odpowiedz Podaj dalej Podane dalej Polub Polubione Więcej Kopiuj link do tweeta Zamieść tweeta Noah podał/a dalej Nicole Sullivan ‏ @stubbornella 25.06 100% of time spent working from a backlog is also horrid. People need breathing room. Engage creativity and not churn out keyboard monkeys. 114 podanych dalej 179 polubionych Odpowiedz Podaj dalej 114 Podane dalej 114 Polub 179 Polubione 179 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 24.06 Good news: my EU funded research was considered a good thing and my contributions to Elm worthwhile! I now will be a master by research :) 2 podane dalej 34 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 34 Polubione 34 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 24.06 If you call a Welshperson English, they'll be offended. Now it's offensive to be called British too, and welsh. Just call me lost 0 podanych dalej 3 polubione Odpowiedz Podaj dalej Podane dalej Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Noah podał/a dalej Kris Jenkins ‏ @krisajenkins 24.06 Will CTO for Citizenship. 4 podane dalej 11 polubionych Odpowiedz Podaj dalej 4 Podane dalej 4 Polub 11 Polubione 11 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 24.06 . @luke_dot_js I come from a family of farmers and poorly paid archaeologists, in one of the poorest parts of the EU. The EU gave me chances 2 podane dalej 4 polubione Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta Noah ‏ @eeue56 24.06 . @luke_dot_js no chance to study easily abroad, no funding for startups, no funding for research. I owe my whole career to the EU 3 podane dalej 8 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 8 Polubione 8 Więcej Kopiuj link do tweeta Zamieść tweeta @eeue56 nie ma jeszcze wpisów. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się Może Ci się też spodobać · Odśwież All over © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Elm slack community."	"true"
"More awesome"	"@sindresorhus"	"https://github.com/sindresorhus"	"by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"sindresorhus (Sindre Sorhus) · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub Sindre Sorhus sindresorhus ┈╭━━━━━━━━━━━╮┈ ┈┃╭━━━╮┊╭━━━╮┃┈ ╭┫┃┈🦄┈┃┊┃┈🦄┈┃┣╮ ┃┃╰━━━╯┊╰━━━╯┃┃ ╰┫╭━╮╰━━━╯╭━╮┣╯ ┈┃┃┣┳┳┳┳┳┳┳┫┃┃┈ ┈┃┃╰┻┻┻┻┻┻┻╯┃┃┈ ┈╰━━━━━━━━━━━╯┈ @avajs @chalk @yeoman ° ☾ ☆ ¸. ¸　★ :.　 . • ○ ° ★ sindresorhus@gmail.com https://twitter.com/sindresorhus Joined on Dec 20, 2009 12.6k Followers 1.9k Starred 41 Following Organizations Follow Overview Repositories Public activity Pinned repositories avajs/ava 🚀 Futuristic JavaScript test runner 5,517 xo ❤️ Happiness JavaScript linter 1,305 awesome 😎 Curated list of awesome lists 38,220 awesome-nodejs ⚡ Delightful Node.js packages and resources 12,422 cat-names 🐈 Get popular cat names 85 7,732 contributions in the last year Jul Aug Sep Oct Nov Dec Jan Feb Mar Apr May Jun S M T W T F S Summary of pull requests, issues opened, and commits. Learn how we count contributions. Less More Period: 1 week Filter activity 1 day 3 days 1 week 1 month Contribution activity 68 commits Pushed 2 commits to sindresorhus/eslint-json Jul 15 Pushed 1 commit to sindresorhus/eslint-formatter-pretty Jul 15 Pushed 2 commits to sindresorhus/eslint-config-xo-space Jul 15 Pushed 2 commits to sindresorhus/eslint-config-xo-react Jul 15 Pushed 3 commits to sindresorhus/eslint-config-xo Jul 15 Pushed 1 commit to sindresorhus/hook-std Jul 15 Pushed 1 commit to sindresorhus/awesome-electron Jul 15 Pushed 7 commits to sindresorhus/promise-time Jul 12 – Jul 15 Pushed 9 commits to sindresorhus/alfy Jul 10 – Jul 15 Pushed 1 commit to sindresorhus/awesome-nodejs Jul 14 Pushed 2 commits to sindresorhus/user-info Jul 14 Pushed 4 commits to avajs/ava Jul 11 – Jul 13 Pushed 1 commit to sindresorhus/alfred-emoj Jul 13 Pushed 1 commit to sindresorhus/alfred-npms Jul 13 Pushed 2 commits to avajs/atom-ava Jul 13 Pushed 3 commits to sindresorhus/refined-github Jul 11 – Jul 13 Pushed 1 commit to sotojuan/is-pokemon-go-up-cli Jul 12 Pushed 2 commits to sindresorhus/electron-config Jul 12 Pushed 4 commits to sindresorhus/conf Jul 11 – Jul 12 Pushed 1 commit to sindresorhus/fast-cli Jul 12 Pushed 2 commits to sindresorhus/clean-stack Jul 12 Pushed 4 commits to sindresorhus/meow Jul 11 Pushed 2 commits to sindresorhus/redent Jul 11 Pushed 2 commits to sindresorhus/atom-esformatter Jul 10 Pushed 1 commit to sindresorhus/normalize-url Jul 10 Pushed 2 commits to sindresorhus/is-online Jul 10 Pushed 2 commits to sindresorhus/np Jul 9 – Jul 10 Pushed 1 commit to sindresorhus/awesome Jul 9 Pushed 2 commits to sindresorhus/cocoa-dialog Jul 9 2 Pull Requests Merged #1 Simplify the CLI code Jul 12 sotojuan/is-pokemon-go-up-cli Merged #5 add `.matches()` and `.inputMatches()` methods Jul 12 sindresorhus/alfy 7 Issues reported Open #28 Use the new ESLint `endLine` and `endColumn` properties for better error highlighting Jul 15 sindresorhus/atom-linter-xo Open #8 Make the `silent` option `true` by default Jul 15 sindresorhus/hook-std Open #966 Default concurrency Jul 15 avajs/ava Open #28 Move `Promise` argument into an option Jul 12 sindresorhus/pify Closed #1 Add sub-method to log directly? Jul 12 sindresorhus/promise-time Closed #3 Add `maxAge` option for `alfy.cache` Jul 11 sindresorhus/alfy Open #10 Option to only show subtasks on failure Jul 10 SamVerschueren/listr Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sindresorhus"	"by"	"true"
"More awesome"	"@bayandin"	"https://github.com/bayandin"	"by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"bayandin (Alexander Bayandin) · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub Alexander Bayandin bayandin Developer Program Member @Badoo London, UK a.bayandin@gmail.com http://alexander.bayand.in Joined on Jun 21, 2011 303 Followers 155 Starred 22 Following Organizations Follow Overview Repositories Public activity Popular repositories awesome-awesomeness 16,633 A curated list of awesome awesomeness github-board 23 chromedriver 12 ChromeDriver only from Chromium repository selenium-launchers 11 webpagetest-private 8 [ABANDONED] WebPagetest Private in Vagrant box with Ansible provisioning 98 contributions in the last year Jul Aug Sep Oct Nov Dec Jan Feb Mar Apr May Jun S M T W T F S Summary of pull requests, issues opened, and commits. Learn how we count contributions. Less More Period: 1 week Filter activity 1 day 3 days 1 week 1 month Contribution activity 1 commit Pushed 1 commit to ChromeDevTools/debugger-protocol-viewer Jul 12 1 Pull Request Merged #56 Fix typo in url Jul 12 ChromeDevTools/debugger-protocol-viewer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bayandin"	"by"	"true"
