"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Design Patterns"	"Design Patterns Playgrounds"	"https://github.com/ihrd/Design-Patterns-Playground"	"Playground that show various traditional design patterns."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"30"	"5"	"3"	"GitHub - ihrd/Design-Patterns-Playground: Swift way to explore OO and functional design patterns Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 30 Fork 3 ihrd/Design-Patterns-Playground Code Issues 0 Pull requests 1 Pulse Graphs Swift way to explore OO and functional design patterns 50 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. Decorator.playground Factory.playground Memento.playground Monad.playground Observer.playground Singletone.playground State Machine - Native.playground State Machine - Unleashed.playground State Machine.playground Strategy.playground README.md README.md Swift design playgrounds I started this collection of playgrounds as notes in the process of learning object oriented design course, so that I can understand concepts better in Swift instead of Java (which instructor used). I suddenly finish course and realize, that I want to learn more, bridge basics I learnet to practice in Swift and keep this playgrounds up to date. I will kindly appreciate any help to made this collection complete and comprehensible. Moreover I realize that Swift is an opportunity to reevalute some classical object oriented design patterns in light of practical functional approach. I will keep updating this collection on my way to learn what it actually means. Structure I want to keep each playground resonably short and self explained. I keep ""motivation"" section and basic implementation in a playground file with pattern name, than more native for Swift or specific variants in additional playgrounds named by convention ""Pattern name - Specific"". State Machine and State Machine - Native are best examples so far. Materials Course: Object-Oriented Design with Simon Allardice Course: Design Patterns with Elisabeth Robson and Eric Freeman Blog Post: Immutable Swift ""A truth that all programmers know: state management is why we get paid."" Blog post: Singleton Considered Stupid by Stevey Drunken ""The problem is, about 1/3 to 1/2 of them were basically cover-ups for deficiencies in C++ that don't exist in other languages. Although I'm not a huge Perl fan anymore, I have to admit the Perl community caught on to this first (or at least funniest). They pointed out that many of these so-called patterns were actually an implementation of Functional Programming in C++. The Visitor, for instance, is just a class wrapper for a function with some accumulator variables, something that's achieved far more cleanly with, say, the map() function in higher-level languages. Iterator is a poor man's Visitor. The Strategy pattern is beautiful on the surface, but Strategy objects are typically stateless, which means they're really just first-order functions in disguise. (If they have state, then they're Closures in disguise.) Etc. You either get this, because you've done functional programming before, or you don't, in which case I sound like I'm a babbling idiot, so I guess I'll wrap it up."" TODO: Decompress second paragraph to actual examples in Swift? Book: Head First Design Patterns TODO: Port all examples covered in the book (authors kindly argeed) Book: Functional Programming in Swift TODO: Understand what it really mean for mankind More Playgrounds Design Patterns implemented in Swift – another collection of patterns implementations. Without unrelated comments and awful spelling. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ihrd/Design-Patterns-Playground"	"Playground that show various traditional design patterns."	"true"
"Design Patterns"	"Design Patterns Playground"	"https://github.com/edopelawi/DesignPatternsPlayground"	"Learning GoF's Design Patterns in Swift 2."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"1"	"2"	"GitHub - edopelawi/DesignPatternsPlayground: Attempts on learning GoF's Design Patterns in Swift 2. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 6 Fork 2 edopelawi/DesignPatternsPlayground Code Issues 0 Pull requests 0 Pulse Graphs Attempts on learning GoF's Design Patterns in Swift 2. 422 commits 2 branches 2 releases Fetching contributors Swift 99.5% Other 0.5% Swift Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show structural-patterns-completed creational-patterns-completed Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. DesignPatternsPlayground.xcodeproj DesignPatternsPlayground DesignPatternsPlaygroundTests Initial commit Dec 17, 2015 InternalFrameworks screenshots .gitignore Podfile README.md README.md Design Patterns Playground This project was made as an attempt to learn GoF's Design Patterns and how to implement it in Swift 2. I might not implement all of them (or at least, the right way), since there's a chance that Swift 2 doesn't have concepts that available in C++ or Smalltalk, which were the main languages of the book. I tried my best to add UI representations on how the patterns are used (instead of just print logs), and comments about the pattern that accessible from the UI! How To Use Clone / fork this repository. Install the pods using pod install. Open the result *.xcworkspace on XCode 7 or up. Run the project in simulator / device. Play around a sample. Check how it implemented from DesignPatternsPlayground > PatternSampleClasses > (Corresponding Pattern Group) > (Pattern Name). ??? Profit! Screenshots Patterns Checklist Here's the list of patterns that currently implemented (and not). Creational Abstract Factory Builder Factory Method Prototype Singleton Structural Adapter Bridge Composite Decorator Facade Flyweight Proxy Behavioural Chain of Responsibility Command Interpreter Iterator Mediator Memento Observer State Strategy Template method Visitor Other TODOs Create comments page functionality Add comments on implemented patterns Add short description about design pattern in top of README file License The MIT License (MIT) Copyright (c) 2016 Ricardo Pramana Suranta. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/edopelawi/DesignPatternsPlayground"	"Learning GoF's Design Patterns in Swift 2."	"true"
"Protocol Oriented Programming"	"Swift Diagram Playgrounds"	"https://github.com/alskipp/Swift-Diagram-Playgrounds"	"Adaptation of the Protocol-Oriented Programming in Swift talk from WWDC 2015."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"217"	"9"	"11"	"GitHub - alskipp/Swift-Diagram-Playgrounds: Drawing diagrams in Swift using a recursive enum data structure Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 217 Fork 11 alskipp/Swift-Diagram-Playgrounds Code Issues 0 Pull requests 0 Pulse Graphs Drawing diagrams in Swift using a recursive enum data structure 48 commits 2 branches 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 107a815 Dec 1, 2015 alskipp Updated CrustaceanEnumOriented.playground to Swift 2.1 Permalink Failed to load latest commit information. Crustacean.playground Swift 2.1 compatibility changes Dec 1, 2015 CrustaceanEnumOriented.playground Updated CrustaceanEnumOriented.playground to Swift 2.1 Dec 1, 2015 Diagrams.playground Fixed Swift 2.1 warnings Dec 1, 2015 .gitignore Add .gitignore Jun 11, 2015 README.md Updated README Dec 1, 2015 README.md Swift-Diagram-Playgrounds This is an adaption of Apple’s sample code for the Protocol-Oriented Programming in Swift talk given during WWDC 2015. Included is Apple’s original example playground file Crustacean.playground that uses a Protocol-oriented design. In addition there's an alternative version CrustaceanEnumOriented.playground that uses a recursive enum as the data structure. Finally there's the Diagrams.playground which adds a bit more functionality and includes several pages of example diagrams. The playgrounds demonstrate two different approaches to creating Diagrams as value types and show how to draw them into a CGContext. Apple’s version uses a variety of structs that conform to the Drawable protocol to represent different shapes. The alternative approach uses a recursive enum to achieve the same result. It looks like this: public indirect enum Diagram {   case Polygon(corners: [CGPoint])   case Line(points: [CGPoint])   case Arc(radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat)   case Circle(radius: CGFloat)   case Scale(x: CGFloat, y: CGFloat, diagram: Diagram)   case Translate(x: CGFloat, y: CGFloat, diagram: Diagram)   case Rotate(angle: CGFloat, diagram: Diagram)   case Diagrams([Diagram]) } Note: livePreview will merrily consume processing power to continuously redraw still images, therefore it's recommended to manually stop execution of the Playground after the images have rendered. Protocol-Oriented or Enum-Oriented – which is better? The two approaches are a good demonstration of the expression problem. Which approach is easier to extend? Using a protocol-oriented technique allows you to add new types without too much hassle. In Apple’s example code a Bubble struct is added by implementing the Drawable protocol and Equatable (no pre-existing code needs to be adjusted). If a Bubble case were added to the enum version it would necessitate the altering of pre-existing functions (Equatable for Diagram and the drawDiagram function) this is more hassle and more error prone. However, we don't need to add a new case to the enum to draw Bubbles, we can simply add a function that constructs a bubble and returns a Diagram, in that case no code needs to be altered. The use of a Renderer protocol makes it much easier to add a TestRenderer to log drawing. But using the Renderer protocol to add diagram transformation functionality is potentially very cumbersome. It is easy to add a ScaledRenderer type, but it would be more complicated to add a TranslateRenderer, or a RotateRenderer and duplicates functionality that is already provided by CGContext. The enum approach doesn't attempt to provide the logic for Diagram transformation, it simply stores the information needed and uses CGContext functions to do the hard work. Which approach is better? I dunno ¯\_(ツ)_/¯ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alskipp/Swift-Diagram-Playgrounds"	"Adaptation of the Protocol-Oriented Programming in Swift talk from WWDC 2015."	"true"
"Protocol Oriented Programming"	"Swift Protocol Extensions"	"https://github.com/davidahouse/SwiftProtocolExtensions"	"A playground to explore Protocol Extensions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18"	"1"	"1"	"GitHub - davidahouse/SwiftProtocolExtensions: A playground for exploring Protocol Extensions Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 18 Fork 1 davidahouse/SwiftProtocolExtensions Code Issues 0 Pull requests 0 Pulse Graphs A playground for exploring Protocol Extensions 2 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 43464cc Aug 8, 2015 davidahouse added playground Permalink Failed to load latest commit information. ProtocolExtension.playground .gitignore LICENSE Initial commit Aug 8, 2015 README.md README.md SwiftProtocolExtensions A playground for exploring Protocol Extensions. Open the playground in Xcode 7 and make sure to render the markdown. Enjoy! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/davidahouse/SwiftProtocolExtensions"	"A playground to explore Protocol Extensions."	"true"
"Protocol Oriented Programming"	"Battleship Example"	"https://github.com/vichudson1/Battleship-POP-Example"	"An example of how to use Protocol Oriented Programming with the battleship game."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"2"	"1"	"GitHub - vichudson1/Battleship-POP-Example: A simple playground to demonstrate Swift Protocol Oriented Programming Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 2 Fork 1 vichudson1/Battleship-POP-Example Code Issues 0 Pull requests 0 Pulse Graphs A simple playground to demonstrate Swift Protocol Oriented Programming 2 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 1442e9e Feb 3, 2016 vichudson1 Create README.md … Just Added a ReadMe file. Permalink Failed to load latest commit information. Battleship.playground README.md README.md Battleship-POP-Example A simple playground to demonstrate Protocol Oriented Programming in Swift to a friend. I thought it might be useful to others so I went ahead and made it my first github project as well. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vichudson1/Battleship-POP-Example"	"An example of how to use Protocol Oriented Programming with the battleship game."	"true"
"Functional Reactive Programming"	"ReactiveCocoa Playground"	"https://github.com/nikita-leonov/ReactiveCocoaPlayground"	"The easiest way to get a taste of ReactiveCocoa."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"87"	"2"	"4"	"GitHub - nikita-leonov/ReactiveCocoaPlayground: The easiest way to get a taste of ReactiveCocoa Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 87 Fork 4 nikita-leonov/ReactiveCocoaPlayground Code Issues 1 Pull requests 0 Pulse Graphs The easiest way to get a taste of ReactiveCocoa 10 commits 1 branch 2 releases Fetching contributors Swift 91.4% Ruby 8.6% Swift Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 2.0 1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. ReactiveCocoaPlayground.playground Updated version of RAC to alpha4 Dec 8, 2015 ReactiveCocoaPlayground.xcodeproj ReactiveCocoaPlayground.xcworkspace Ready to use version. Sep 19, 2015 .gitattributes .gitignore Info.plist LICENSE Podfile Podfile.lock README.md README.md ReactiveCocoaPlayground The easiest way to get a taste of ReactiveCocoa. Installation Run pod install to install all CocoaPods dependencies Open ReactiveCocoaPlayground.xcworkspace Build ReactiveCocoaPlayground target You are good to go. Enjoy. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nikita-leonov/ReactiveCocoaPlayground"	"The easiest way to get a taste of ReactiveCocoa."	"true"
"Functional Reactive Programming"	"Swift Reactive Playground"	"https://github.com/ColinEberhardt/SwiftReactivePlayground"	"Companion to the article: ReactiveCocoa made Simple With Swift."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"22"	"3"	"5"	"GitHub - ColinEberhardt/SwiftReactivePlayground: A project that accompanies my talk, ReactiveCocoa made Simple with Swift Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 22 Fork 5 ColinEberhardt/SwiftReactivePlayground Code Issues 0 Pull requests 0 Pulse Graphs A project that accompanies my talk, ReactiveCocoa made Simple with Swift 23 commits 1 branch 2 releases Fetching contributors Swift 97.2% Objective-C 2.8% Swift Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show ready-for-reactive non-reactive Nothing to show New pull request Latest commit 3c01489 Sep 3, 2014 ColinEberhardt Create README.md Permalink Failed to load latest commit information. ReactiveCocoa @ de3c9a7 Removed original implementation and added ReactiveCocoa Aug 26, 2014 SwiftReactivePlayground.xcodeproj Removed original implementation and added ReactiveCocoa Aug 26, 2014 SwiftReactivePlayground This time with commands Aug 26, 2014 .gitignore Added UI controls and dummy service Aug 21, 2014 .gitmodules Removed original implementation and added ReactiveCocoa Aug 26, 2014 README.md Create README.md Sep 3, 2014 README.md SwiftReactivePlayground A project that accompanies my talk, ReactiveCocoa made Simple with Swift This repo has a commit for each of the build-and-run steps of the talk. Enjoy! Colin E. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ColinEberhardt/SwiftReactivePlayground"	"Companion to the article: ReactiveCocoa made Simple With Swift."	"true"
"Apple's Playgrounds"	"Apple's Mandelbrot Playground"	"https://github.com/palmerc/Mandelbrot-Swift-Playground"	"A playground with the mandelbrot fractal (updated to Swift2 by @palmerc)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"2"	"GitHub - palmerc/Mandelbrot-Swift-Playground: Updated the Apple Mandelbrot Playground example Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 2 palmerc/Mandelbrot-Swift-Playground Code Issues 0 Pull requests 0 Pulse Graphs Updated the Apple Mandelbrot Playground example 6 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit c3f9ddf Jan 20, 2016 palmerc Updated the render default to on Permalink Failed to load latest commit information. Mandelbrot.playground Updated the render default to on Jan 20, 2016 .gitignore Initial commit Jan 19, 2016 README.md README.md Mandelbrot Updated the Apple's Mandelbrot Playground example Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/palmerc/Mandelbrot-Swift-Playground"	"A playground with the mandelbrot fractal (updated to Swift2 by @palmerc)."	"true"
"Apple's Playgrounds"	"Apple's Balloons Playground"	"https://developer.apple.com/swift/blog/downloads/Balloons.zip"	"The balloons playground showed at WWDC14."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The balloons playground showed at WWDC14."	"false"
"Apple's Playgrounds"	"Interactive Playgrounds"	"https://developer.apple.com/swift/blog/?id=35"	"Playground that presents the interactive playgrounds feature with a UIKit dynamics Newton's cradle."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Interactive Playgrounds - Swift Blog - Apple Developer Open Menu Close Menu Apple Developer Account Apple Developer Discover Design Develop Distribute Support Account Search Swift Open Menu Close Menu Swift Playgrounds Resources Blog Feb 8, 2016 Interactive Playgrounds Xcode 7.3 beta 3 adds interactive iOS and OS X playgrounds that allow you to click, drag, type, and otherwise interact with the user interfaces you code into your playground. These interfaces react just as they would within a full application. Interactive playgrounds help you to quickly prototype and build your applications, and simply provide another great way to interact with your code. Any view or view controller that is assigned to the liveView property of the XCPlaygroundPage is automatically made interactive, and since it runs within a playground you get all the usual playground results. You can experiment with gesture recognizers, see how UITableView creates and dequeues cells as you scroll, or interact with a complex 3D scene in SceneKit. Sample playground Below is an iOS playground that uses UIKit Dynamics to create a fully-interactive and customizable Newton’s Cradle, perfect for your desktop. NewtonsCradle.playground All Blog Posts Developer Swift Blog Interactive Playgrounds To receive the latest developer news, visit and subscribe to our News and Updates. Copyright © 2016 Apple Inc. All rights reserved. Terms of Use Privacy Policy Report Bugs Feedback"	"null"	"null"	"Playground that presents the interactive playgrounds feature with a UIKit dynamics Newton's cradle."	"true"
"Playgrounds about Playgrounds"	"Interactive Playground"	"https://github.com/dasdom/InteractivePlayground"	"Exploring interactivity in Playgrounds in Xcode 7.3."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"34"	"3"	"3"	"GitHub - dasdom/InteractivePlayground: Exploring interactivity in Playgrounds in Xcode 7.3 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 34 Fork 3 dasdom/InteractivePlayground Code Issues 0 Pull requests 0 Pulse Graphs Exploring interactivity in Playgrounds in Xcode 7.3 14 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 181a490 Feb 5, 2016 dasdom Merge branch 'master' of https://github.com/dasdom/InteractivePlayground … Permalink Failed to load latest commit information. InteractivePlayground.playground Add responder chain example Feb 5, 2016 gifs Add spring animation Jan 30, 2016 LICENCE Create LICENCE Jan 29, 2016 README.md Update README.md Jan 30, 2016 README.md InteractivePlayground Exploring interactivity in Playgrounds (new in Xcode 7.3) Pushing a view controller Animating appearance of buttons Using gesture recognizer Text input Using SpriteKit Spring animation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dasdom/InteractivePlayground"	"Exploring interactivity in Playgrounds in Xcode 7.3."	"true"
"Playgrounds about Playgrounds"	"XCTest Playground"	"https://github.com/Liquidsoul/XCTestPlayground"	"Better looking tests for playgrounds"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"30"	"3"	"4"	"GitHub - Liquidsoul/XCTestPlayground Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 30 Fork 4 Liquidsoul/XCTestPlayground Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 26 commits 2 branches 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master swift3 Nothing to show Nothing to show New pull request Latest commit af05981 Jun 18, 2016 Liquidsoul Add note in README about Xcode 8 and Swift 3 Permalink Failed to load latest commit information. Supporting Files Add workspace and framework project to have working playground setup May 19, 2016 XCTestPlayground.xcodeproj Share XCTestPlayground scheme May 19, 2016 XCTestPlayground.xcworkspace Add workspace and framework project to have working playground setup May 19, 2016 XCTestPlaygroundExample.playground Remove superfluous space Jun 18, 2016 .gitignore Add Swift .gitignore from github/gitignore repo May 19, 2016 README.md Add note in README about Xcode 8 and Swift 3 Jun 18, 2016 XCTestPlayground.swift Add missing ``` May 19, 2016 screenshot.png * renamed base Test class to XCTestCase, updated README and screenshot Jan 29, 2016 README.md XCTestPlayground This repository contains a simple implementation of most XCTAssert macros to use in a Playground. With the Playground feature that display the result of an executed line, it will show the assert result like this: I use this to do TDD directly inside a Playground and then move the code as-is inside my test files. It contains a XCTestCase base class that, when instantiated, will run all methods with names beginning with ""test"", to mimic XCTestCase behaviour and make moving the code to your Xcode project easier. How to install it in an existing playground Simply add the XCTestPlayground.swift file to your Playground Sources folder. Using it directly The repo contains a fully configured Xcode workspace containing a playground importing XCTestPlayground. All you have to do is: clone the repo build the framework on a 64-bit target (e.g. iPhone 5s simulator) go and play in the XCTestPlaygroundExample playground! 🎉 Xcode 8 and Swift 3 Xcode 8 beta has been released and since it breaks source compatibility the changes cannot be pushed to the master branch yet. As a result, I have created a swift3 branch which contains the necessary changes to support Xcode 8 with Swift 3. Please, checkout this branch if you intend to use XCTestPlayground in Xcode 8 😃 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Liquidsoul/XCTestPlayground"	"Better looking tests for playgrounds"	"true"
"Playgrounds about Playgrounds"	"Mondrian"	"https://github.com/timbellay/Mondrian"	"Make iOS app mockups in Swift 2.x playgrounds."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - timbellay/Mondrian: Make iOS app mockups in Swift 2.x playgrounds. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 timbellay/Mondrian Code Issues 0 Pull requests 0 Pulse Graphs Make iOS app mockups in Swift 2.x playgrounds. 63 commits 3 branches 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags List appearance master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. AppPrototyping.playground screens .gitignore README.md README.md Mondrian - App prototyping in Xcode Playgrounds! Quick and flexibly prototype iOS screens using Swift 2.x and Xcode Playgrounds with minimal code. Note this project is on hold for a bit. Update 01-22-16: I'm cooling off dev for Mondrian for at least a month (Feb.) to work on something else that's come up, but here's an update on some major things I've learned to remind me when I get back to this project. When I set out to make this set of prototyping tools, I made at least three naive miscalculations. 1) UIStackViews were supremely powerful. Nope. I thought they could solve the general problem of sticking views anywhere, but they do not. StackViews are more suited for repetitive components such as a group of buttons, equally sized and perhaps horizontally laid out. I'll definitely keep using them in the future instead of repeatedly adding a set of subviews through constraints. In Mondrian, vertical UIStackViews were used to position containers such as the statusBar, navigationBar, content views, toolbars and tabBars into a Screen. One good discovery was UILayoutGuides. They work well for spacing views apart in precise ways and eliminate using spacer views. 2) Playgrounds have the same functionality as the iOS simulators they borrow from. Nope. I knew Apple had removed some functionality including interactivity from playgrounds in the last Xcode update, but that wouldn't kill the main function of this tool, i.e. prototyping iOS screens. I decided to press forward and I first discovered that could not use UIKit properly because delegates involving interactivity (such as scrollViewDidScroll) were not getting called in Playgrounds, because there was no interaction period. Bummer. So I just went ahead an laid out views in containers anyways, since we just needed mocks. However without interactivity, it becomes harder to answer the question of ""Why not just prototype in Storyboards?"" Plus with storyboards, you can use the resulting nibs and then go build an app. 3) I could avoid MVC. Nah. I guess I thought ""Hey this is a playground, MVC probably doesn't play well with others out here. He belongs inside, in timeout."" EPIC_ERROR. After now knowing pretty much all of the UI components that I'd liked to be able to place with this tool, I have a pretty good idea of the way forward with MVC and potentially get us set up with maybe with some FRP. We'll have a Model object representing an abstract screen and it will be sent to a LayoutController that builds the Screen as views, mostly in preset ways. If Apple adds back interactivity, we'll be able to have ""real"" ViewControllers in a navigation stack. Thus the model is pretty simple, and composed of an App class that has a Device class, an optional array of Screens, a optional DataManager class and an optional Appearance class. The Screen class is just a long list of optional arrays of UI components e.g. [CustomView]?, [TableView]?, [CollectionView]?, ... [Alert]?, [PopOver]?, [ActivityIndicator]?. A Layout class would then take care of either adding views to UIStackView or for simple prebuilt controls, use UILayoutguides, e.g. a simple tableViewCell. I'll post a pic of the Model. Importantly the DataManager has dictionary with classes for keys that tell us what settable properties of the UIComponents we will support changing. And each UI component has a data dictionary with the settable data we want to populate the model. Any suggestions or comments are welcome. Usage: import UIKit import XCPlayground  let device = Device.iPhone5s let appearance = Appearance(theme: .Custom, textColor: .yellowColor(), labelColor: .purpleColor()) let screen = Screen(device: device, type: .list, appearance: appearance) XCPlayground.XCPlaygroundPage.currentPage.liveView = screen.view  Soon come: [Screens] Form, e.g. login, join Login, see Form below Post, e.g. status update, message, or photo ScrollView scroll bars fadeView to indicate more content in a scrollable direction such as a textView in a scrollView Feed, i.e. List or UITableViewController simple tableViewCell section cells or headers other types, plus tutorial on custom tableViewCell using ContainerView class. Settings, type of Feed above Collection, i.e collectionView Detail, i.e a single cell in Feed Page, i.e. pageViewController, e.g. on-boarding [Bars you should be able to add to any screen] StatusBar Cellular signal strength meter Carrier labels more carrier labels, e.g. Sprint, AT&T, etc. WiFi signal strength meter Time Phone is using location services and alarm icon, etc. NavigationBar Ability to add SearchBar to NavigationBar ToolBar default toolbar that take three buttons ToolBar separator (left, up, right, down) TabBar SearchBar use UIBarSyle enum for bars? also a gentle reminder to use UIKit enums when possible [Controls you should be able to add anywhere] Button, label (left, up, right, down) Sliders Steppers Switches Text Fields ability to show/hide keyboard Segmented Controls Date Pickers Page Controls ActionSheet Popover, i.e “new updates” for Feed AlertView, including System Notifications used in app permission granting. Activity indicators with animations [Resources] Open source icons and other default icons to speed up prototyping [Data & Backend] Data manager singleton with: DateFormatter Get pseudo data to fill tables and other Screens Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/timbellay/Mondrian"	"Make iOS app mockups in Swift 2.x playgrounds."	"true"
"Algorithms and Data Structures"	"Learn about transducers"	"https://github.com/mbrandonw/learn-transducers-playground"	"A little tutorial that explains transducers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"59"	"6"	"2"	"GitHub - mbrandonw/learn-transducers-playground: A little tutorial written in Swift playgrounds to learn about transducers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 59 Fork 2 mbrandonw/learn-transducers-playground Code Issues 0 Pull requests 0 Pulse Graphs A little tutorial written in Swift playgrounds to learn about transducers. 13 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 3e8892c Nov 16, 2014 mbrandonw Fixed mismatched bracket. Permalink Failed to load latest commit information. transducers.playground Fixed mismatched bracket. Nov 16, 2014 .gitignore Initial commit Nov 3, 2014 LICENSE Initial commit Nov 3, 2014 README.md Update README.md Nov 3, 2014 transducers.css Added some styles for a more readable playground. Nov 4, 2014 transducers.md Fixed mismatched bracket. Nov 16, 2014 README.md Learn about transducers A little tutorial written in Swift playgrounds to play around with transducers. Open the transducers.playground to view the tutorial. About The transducers.playground file is generated from transducers.md using this playground tool. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mbrandonw/learn-transducers-playground"	"A little tutorial that explains transducers."	"true"
"Algorithms and Data Structures"	"Swift Functors, Applicatives, and Monads in Pictures"	"https://github.com/mokacoding/Swift-Functors-Applicative-Monads-In-Pictures-Playground"	"Companion to the article: Swift Functors, Applicatves, and Monads in Pictures."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"3"	"6"	"GitHub - mokacoding/Swift-Functors-Applicative-Monads-In-Pictures-Playground: A companion Playground for the article ""Swift Functors, Applicatves, and Monads in Pictures"" Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 35 Fork 6 mokacoding/Swift-Functors-Applicative-Monads-In-Pictures-Playground Code Issues 0 Pull requests 0 Pulse Graphs A companion Playground for the article ""Swift Functors, Applicatves, and Monads in Pictures"" 4 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit cd5ef54 Dec 22, 2015 mokagio Merge pull request #1 from prt2121/master … Rename Optional type parameter from 'T' to 'Wrapped' Permalink Failed to load latest commit information. Functors-Applicatives-Monads-In-Pictures.playground Rename Optional type parameter from 'T' to 'Wrapped' Dec 20, 2015 .gitignore Playground for ""Swift Functors, Applicatives, and Monads in Pictures"" Jul 14, 2015 README.md Add README Jul 14, 2015 README.md Swift Functors, Applicatives, and Monads in Pictures - Playground This is a companion Playground for the aritcle ""Swift Functors, Applicatives, and Monads in Pictures"" from mokacoding. The article itself is a port to Swift of Haskell's original ""Functors, Applicatives, and Monads in Pictures"" by Aditya Bhargava, @__egonschiele on Twitter. Reach out on twitter @mokagio or open an issue if you have feedbacks, comments, or questions. Cheers (c) 2015 - Giovanni Lodi - mokacoding.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mokacoding/Swift-Functors-Applicative-Monads-In-Pictures-Playground"	"Companion to the article: Swift Functors, Applicatves, and Monads in Pictures."	"true"
"Algorithms and Data Structures"	"Functors in Swift"	"https://github.com/mokagio/Swift-Functor-Introduction-Playground"	"A playground to introduce Functors in Swift, and their practical usage."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"1"	"0"	"GitHub - mokagio/Swift-Functor-Introduction-Playground: A playground to introduce Functors in Swift, and their practical usage. From my Melbour CocoaHeads #85 lighting talk. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 6 Fork 0 mokagio/Swift-Functor-Introduction-Playground Code Issues 0 Pull requests 0 Pulse Graphs A playground to introduce Functors in Swift, and their practical usage. From my Melbour CocoaHeads #85 lighting talk. 5 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 8a78e8a Jul 12, 2015 mokagio Add README Permalink Failed to load latest commit information. Functors-Swift-Introduction.playground .gitignore README.md Add README Jul 12, 2015 README.md Functors in Swift - A simple introduction Note: This Playground is written in Swift 2.0 and Xcode 7 Beta 3. This is the playground for my lightning talk at July's 2015 Melbourne CocoaHeads. The talk is a simple introduction to Functors and Monads in Swift, focusing on the practical use of these concepts, rather than their mathematical definition. The cool things about Functors and Monads are map and flatMap. Using these we can simplify code like this: func getFancyEmojiForUser() -> String? {   if let actuallyAUser = userFromDatabase() {     let joinedUserName = joinedName(actuallyAUser)      if let emojiForUser = emojiFromString(joinedUserName) {       return fancifyEmoji(emojiForUser)     }   }    return .None } into something that is easier to write and specially easier to reason about. func getFancyEmojiForUser() -> String? {   return userFromDatabase()     .map(joinedName)     .flatMap(emojiFromString)     .map(fancifyEmoji) } If you are interested in this tweet me @mokagio or visit mokacoding (c) 2015 - Giovanni Lodi Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mokagio/Swift-Functor-Introduction-Playground"	"A playground to introduce Functors in Swift, and their practical usage."	"true"
"Algorithms and Data Structures"	"DataStructures Playground"	"https://github.com/oliverfoggin/DataStructuresPlayground"	"Data Structures and Algorithms in Swift."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"6"	"1"	"GitHub - oliverfoggin/DataStructuresPlayground: Data Structures and Algorithms in Swift Playground Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 13 Fork 1 oliverfoggin/DataStructuresPlayground Code Issues 0 Pull requests 0 Pulse Graphs Data Structures and Algorithms in Swift Playground 40 commits 1 branch 0 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 6797f37 Jun 30, 2015 oliverfoggin Sleep sort Permalink Failed to load latest commit information. Data Structure and Algorithms.playground Sleep sort Jun 30, 2015 .gitignore Initial commit Jun 21, 2015 README.md Initial commit Jun 21, 2015 README.md DataStructuresPlayground Data Structures and Algorithms in Swift Playground Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/oliverfoggin/DataStructuresPlayground"	"Data Structures and Algorithms in Swift."	"true"
"Algorithms and Data Structures"	"Swiftography"	"https://github.com/sketchytech/Swiftography"	"Standard cryptographic algorithms in a Swift Playground."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"1"	"0"	"GitHub - sketchytech/Swiftography: Standard cryptographic algorithms in a Swift Playground Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 8 Fork 0 sketchytech/Swiftography Code Issues 0 Pull requests 0 Pulse Graphs Standard cryptographic algorithms in a Swift Playground 19 commits 2 branches 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Swift_2 master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. CryptoPlayground.playground clean up Apr 29, 2015 LICENSE README.md README.md Swiftography Standard cryptographic algorithms in a Swift Playground CryptoJS Swiftorgraphy leverages the CryptoJS repository via JavaScriptCore framework. It is featured in a playground here but can transfered to a regular app as well. IDPF font obfuscation added Font obfuscation in line with IDPF EPUB standard works to obfuscate and de-obfuscate fonts. Example As you'll see in the playground all is self-explanatory and easy to use, simply write: let str = ""Hello Swift!""  Crypto.sha1(str) // ""9c602d242f2ecedff6dd3703576e1fa39aa25706"" Crypto.sha224(str) // ""807db20e8e9f401114c7d542609bda14b8ebcb723f662cc14602ee96"" Crypto.sha256(str) // ""bf452d84b203dfe67b45f1d73be4866f2552f8414eff79452375a467f02e30d7"" Crypto.sha384(str) // ""f1a8c74940995d34dc90b7972c50c36c1a5e9137c723aeacf0e11d527f63f487f96707c339e58e9a210cc2084243b028"" Crypto.sha512(str) // ""636130e3878c8c47ee266849d8c8754481dae9018a32f74ac13a7773390dfee02e7472fb7caa1c1a33e846bcc16204e895ddd11dd8175e87f3b2451b7326c03f"" Crypto.sha3(str) // ""f23a824632ba5a27fc2d7bf3683032acb27862eb49d7bce825c75f86a52a2b123aab3c76035fab5a5aad01b0cc0c495b2140198260a0e7441ba9235f26795338"" Crypto.md5(str) // ""ba135edf6168271dfe4ed79e719e8188"" Crypto.ripemd160(str) // ""1c87b79ebcb075d87242486fe0e8e43b9ccdd311""  In addition to common crypotography algorithms, repo now includes IDPF EPUB standard font obfuscation. // IDPF font obfuscation if let url = NSBundle.mainBundle().URLForResource(""Lobster-Regular"", withExtension: ""ttf""),     source = NSData(contentsOfURL: url) {         // obfuscate font using IDPF approach         let obFont = obfuscateFontIDPF(source,""urn:uuid:9A6376C9-9E0A-4BA4-87CE-667AA91A70DE"")         obFont == source // false, font has been obfuscated         obfuscateFontIDPF(obFont,""urn:uuid:9A6376C9-9E0A-4BA4-87CE-667AA91A70DE"") == source // true, font has been obfuscated back to original state }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sketchytech/Swiftography"	"Standard cryptographic algorithms in a Swift Playground."	"true"
"Algorithms and Data Structures"	"Algorithms Playground"	"https://github.com/ashokgelal/AlgorithmsPlayground"	"Various algorithm implementation in Swift."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"2"	"0"	"GitHub - ashokgelal/AlgorithmsPlayground: Various algorithms implementation as Swift Playground files Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 1 Fork 0 ashokgelal/AlgorithmsPlayground Code Issues 0 Pull requests 0 Pulse Graphs Various algorithms implementation as Swift Playground files https://github.com/ashokgelal/AlgorithmsPlayground 12 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 41acc6d Jun 2, 2015 ashokgelal HashMap implementation using chaining for collision resolution Permalink Failed to load latest commit information. BubbleSort.playground EfficientStock.playground HashMap.playground HighestProductOf3.playground InsertionSort.playground MergingMeetings.playground ProductsOfAllExceptIndex.playground SelectionSort.playground .gitignore LICENSE README.md README.md AlgorithmsPlayground Various algorithm implementation as Swift Playground files Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ashokgelal/AlgorithmsPlayground"	"Various algorithm implementation in Swift."	"true"
"Algorithms and Data Structures"	"Dynamic Programming With Swift"	"https://github.com/evansjohnson/DynamicProgrammingWithSwift"	"A set of three dynamic programming problems implemented in a Swift."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - evansjohnson/DynamicProgrammingWithSwift: A set of three dynamic programming problems implemented in a Swift playground. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 evansjohnson/DynamicProgrammingWithSwift Code Issues 0 Pull requests 0 Pulse Graphs A set of three dynamic programming problems implemented in a Swift playground. 6 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. ProblemSet8Playground.playground .gitignore LICENSE README.md README.md DynamicProgrammingWithSwift A set of three dynamic programming problems implemented in a Swift playground. Open ProblemSet8Playground.playground with xcode to observe variable state with progression through algorithms with XCode's playground mode. To simply view the code navigate ProblemSet8Playground.playground/Contents.swift Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/evansjohnson/DynamicProgrammingWithSwift"	"A set of three dynamic programming problems implemented in a Swift."	"true"
"Algorithms and Data Structures"	"Swift Algorithm Club"	"https://github.com/raywenderlich/swift-algorithm-club"	"Algorithms and data structures in Swift with explanations."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7244"	"562"	"749"	"GitHub - raywenderlich/swift-algorithm-club: Algorithms and data structures in Swift, with explanations! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 562 Star 7,244 Fork 749 raywenderlich/swift-algorithm-club Code Issues 11 Pull requests 8 Pulse Graphs Algorithms and data structures in Swift, with explanations! 704 commits 2 branches 0 releases 47 contributors Swift 99.7% Other 0.3% Swift Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags btree-viktor master Nothing to show Nothing to show New pull request Latest commit 912c21d Jun 30, 2016 kelvinlauKL Fixed a typo in the main readme markdown file Permalink Failed to load latest commit information. AVL Tree Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 All-Pairs Shortest Paths Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Array2D Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 B-Tree Fixed some typos Jun 26, 2016 Binary Search Tree Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Binary Search Configure tests projects for running for xctool Jun 11, 2016 Binary Tree Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Bit Set Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Bloom Filter Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Bounded Priority Queue Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Boyer-Moore Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Breadth-First Search Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Brute-Force String Search No longer gitignore xcworkspace May 9, 2016 Bubble Sort Add bubble sort (but not really) Jan 26, 2016 Bucket Sort Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Combinatorics Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Count Occurrences Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Counting Sort Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Depth-First Search Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Deque Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Fixed Size Array Tons of tiny text tweaks Mar 3, 2016 Fizz Buzz Fix for #141 Jun 10, 2016 GCD Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Graph removed a merge conflict Jun 17, 2016 Hash Set Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Hash Table Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Heap Sort Configure tests projects for running for xctool Jun 11, 2016 Heap Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Huffman Coding Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Images Image size change Jun 4, 2016 Insertion Sort Configure tests projects for running for xctool Jun 11, 2016 K-Means Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Kth Largest Element Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Linear Search No longer gitignore xcworkspace May 9, 2016 Linked List Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Longest Common Subsequence Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Merge Sort Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Minimum Edit Distance Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Minimum Spanning Tree (Unweighted) Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Monty Hall Problem No longer gitignore xcworkspace May 9, 2016 Ordered Array Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Ordered Set Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Priority Queue Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Queue Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Quicksort Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Radix Sort Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Radix Tree Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Red-Black Tree Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Ring Buffer Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Run-Length Encoding Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Segment Tree Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Select Minimum Maximum Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Selection Sampling Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Selection Sort Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Set Cover (Unweighted) Set cover (unweighted) - replacing count = 0 conditions with isEmpty Jun 28, 2016 Shell Sort Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Shortest Path (Unweighted) Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Shuffle No longer gitignore xcworkspace May 9, 2016 Shunting Yard Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Single-Source Shortest Paths (Weighted) Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Stack Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Ternary Search Tree Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Threaded Binary Tree Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Topological Sort Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Treap Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 Tree Altered the tree diagram so that one of the leafs is actually labeled… Jun 27, 2016 Trie Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Two-Sum Problem Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 Union-Find Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 swift-algorithm-club.xcworkspace Added directory for all files. Jun 12, 2016 .gitignore No longer gitignore xcworkspace May 9, 2016 .swiftlint.yml Added basic SwiftLint config file. Fixing all linting errors. Jun 8, 2016 .travis.yml Merge pull request #151 from ViktorSimko/btree Jun 26, 2016 Algorithm Design.markdown Tons of tiny text tweaks Mar 3, 2016 Big-O Notation.markdown Add link to rosettacode.org Feb 19, 2016 How to Contribute.markdown Merge branch 'master' of https://github.com/raywenderlich/swift-algor… Jun 12, 2016 LICENSE.txt Add name to articles Jan 28, 2016 README.markdown Fixed a typo in the main readme markdown file Jun 30, 2016 Under Construction.markdown Set cover (unweighted) - adding link on under construction page Jun 28, 2016 What are Algorithms.markdown Pancakes! Feb 10, 2016 Why Algorithms.markdown Tweak main page Feb 6, 2016 install_swiftlint.sh CHMOD install_swiftlint.sh Jun 8, 2016 README.markdown Welcome to the Swift Algorithm Club! Here you'll find implementations of popular algorithms and data structures in everyone's favorite new language Swift, with detailed explanations of how they work. If you're a computer science student who needs to learn this stuff for exams -- or if you're a self-taught programmer who wants to brush up on the theory behind your craft -- you've come to the right place! The goal of this project is to explain how algorithms work. The focus is on clarity and readability of the code, not on making a reusable library that you can drop into your own projects. That said, most of the code should be ready for production use but you may need to tweak it to fit into your own codebase. All code is compatible with Xcode 7.3 and Swift 2.2. We'll keep this updated with the latest version of Swift. This is a work in progress. More algorithms will be added soon. :-) 😍 Suggestions and contributions are welcome! 😍 Important links What are algorithms and data structures? Pancakes! Why learn algorithms? Worried this isn't your cup of tea? Then read this. Big-O notation. We often say things like, ""This algorithm is O(n)."" If you don't know what that means, read this first. Algorithm design techniques. How do you create your own algorithms? How to contribute. Report an issue to leave feedback, or submit a pull request. Under construction. Algorithms that are under construction. Where to start? If you're new to algorithms and data structures, here are a few good ones to start out with: Stack Queue Insertion Sort Binary Search and Binary Search Tree Merge Sort Boyer-Moore string search The algorithms Searching Linear Search. Find an element in an array. Binary Search. Quickly find elements in a sorted array. Count Occurrences. Count how often a value appears in an array. Select Minimum / Maximum. Find the minimum/maximum value in an array. k-th Largest Element. Find the k-th largest element in an array, such as the median. Selection Sampling. Randomly choose a bunch of items from a collection. Union-Find. Keeps track of disjoint sets and lets you quickly merge them. String Search Brute-Force String Search. A naive method. Boyer-Moore. A fast method to search for substrings. It skips ahead based on a look-up table, to avoid looking at every character in the text. Rabin-Karp Longest Common Subsequence. Find the longest sequence of characters that appear in the same order in both strings. Sorting It's fun to see how sorting algorithms work, but in practice you'll almost never have to provide your own sorting routines. Swift's own sort() is more than up to the job. But if you're curious, read on... Basic sorts: Insertion Sort Selection Sort Shell Sort Fast sorts: Quicksort Merge Sort Heap Sort Special-purpose sorts: Counting Sort Radix Sort Topological Sort Bad sorting algorithms (don't use these!): Bubble Sort Compression Run-Length Encoding (RLE). Store repeated values as a single byte and a count. Huffman Coding. Store more common elements using a smaller number of bits. Miscellaneous Shuffle. Randomly rearranges the contents of an array. Mathematics Greatest Common Divisor (GCD). Special bonus: the least common multiple. Permutations and Combinations. Get your combinatorics on! Shunting Yard Algorithm. Convert infix expressions to postfix. Statistics Machine learning k-Means Clustering. Unsupervised classifier that partitions data into k clusters. k-Nearest Neighbors Linear Regression Logistic Regression Neural Networks PageRank Data structures The choice of data structure for a particular task depends on a few things. First, there is the shape of your data and the kinds of operations that you'll need to perform on it. If you want to look up objects by a key you need some kind of dictionary; if your data is hierarchical in nature you want a tree structure of some sort; if your data is sequential you want a stack or queue. Second, it matters what particular operations you'll be performing most, as certain data structures are optimized for certain actions. For example, if you often need to find the most important object in a collection, then a heap or priority queue is more optimal than a plain array. Most of the time using just the built-in Array, Dictionary, and Set types is sufficient, but sometimes you may want something more fancy... Variations on arrays Array2D. A two-dimensional array with fixed dimensions. Useful for board games. Bit Set. A fixed-size sequence of n bits. Fixed Size Array. When you know beforehand how large your data will be, it might be more efficient to use an old-fashioned array with a fixed size. Ordered Array. An array that is always sorted. Queues Stack. Last-in, first-out! Queue. First-in, first-out! Deque. A double-ended queue. Priority Queue. A queue where the most important element is always at the front. Ring Buffer. Also known as a circular buffer. An array of a certain size that conceptually wraps around back to the beginning. Lists Linked List. A sequence of data items connected through links. Covers both singly and doubly linked lists. Skip List Trees Tree. A general-purpose tree structure. Binary Tree. A tree where each node has at most two children. Binary Search Tree (BST). A binary tree that orders its nodes in a way that allows for fast queries. Red-Black Tree Splay Tree Threaded Binary Tree Segment Tree. Can quickly compute a function over a portion of an array. kd-Tree Heap. A binary tree stored in an array, so it doesn't use pointers. Makes a great priority queue. Fibonacci Heap Trie B-Tree. A self-balancing search tree, in which nodes can have more than two children. Hashing Hash Table. Allows you to store and retrieve objects by a key. This is how the dictionary type is usually implemented. Hash Functions Sets Bloom Filter. A constant-memory data structure that probabilistically tests whether an element is in a set. Hash Set. A set implemented using a hash table. Multiset Ordered Set. A set where the order of items matters. Graphs Graph Breadth-First Search (BFS) Depth-First Search (DFS) Shortest Path on an unweighted tree Single-Source Shortest Paths Minimum Spanning Tree on an unweighted tree All-Pairs Shortest Paths Puzzles A lot of software developer interview questions consist of algorithmic puzzles. Here is a small selection of fun ones. For more puzzles (with answers), see here and here. Two-Sum Problem Fizz Buzz Monty Hall Problem Learn more! For more information, check out these great books: Introduction to Algorithms by Cormen, Leiserson, Rivest, Stein The Algorithm Design Manual by Skiena Elements of Programming Interviews by Aziz, Lee, Prakash Algorithms by Sedgewick The following books are available for free online: Algorithms by Dasgupta, Papadimitriou, Vazirani Algorithms, Etc. by Erickson Algorithms + Data Structures = Programs by Wirth Algorithms and Data Structures: The Basic Toolbox by Mehlhorn and Sanders Wikibooks: Algorithms and Implementations Other algorithm repositories: EKAlgorithms. A great collection of algorithms in Objective-C. @lorentey. Production-quality Swift implementations of common algorithms and data structures. Rosetta Code. Implementations in pretty much any language you can think of. AlgorithmVisualizer. Visualize algorithms on your browser. Credits The Swift Algorithm Club was originally created by Matthijs Hollemans. It is now maintained by Chris Pilcher and Kelvin Lau. The Swift Algorithm Club is a collaborative effort from the most algorithmic members of the raywenderlich.com community. We're always looking for help - why not join the club? :] License All content is licensed under the terms of the MIT open source license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/raywenderlich/swift-algorithm-club"	"Algorithms and data structures in Swift with explanations."	"true"
"Algorithms and Data Structures"	"Sorting Experiments"	"https://github.com/adrfer/Sort"	"Alluring experiments with sorting algorithms in Swift, sort of."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"1"	"GitHub - adrfer/Sort: Alluring experiments with sorting algorithms in Swift, sort of Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 1 adrfer/Sort Code Issues 0 Pull requests 0 Pulse Graphs Alluring experiments with sorting algorithms in Swift, sort of 150 commits 2 branches 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master swift-3 Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. Sort.playground .gitignore LICENSE README.md README.md Sort Alluring experiments with sorting algorithms in Swift, sort of. The code was tested on Xcode 7.3 and Swift 2.2. Important: This is a preliminary document of sorting algorithms writen in the Swift Programming Language. Welcome to the Sort Playground! The idea here is to have fun while exploring alternative implementations of different sorting techniques written in Swift, a modern and very exciting programming language. So, to better experience how to move from disarray to order when managing collections of data, some variations of these sorting algorithms are provided, starting with a classic implementation that is then forged over and over until it becomes more idiomatic, or simply, more Swift-y. Remember, the focus of this playground is experimentation, learning, and having fun. Do not expect any crazy dilly-dilly award-winning performant code ahead, ok? Now, you're about to indulge yourself with the following takes: The Classic, a die-hard style, rooted in tradition, in all its imperative glory The Swift-ish, a sligthly more modern take on the classic, but still not quite quaint enough The Swiftest, a nifty approach that attempts to tap into the most powerful language features yet The Generic, a play on the swiftest version, but elevated to a type-agnostic nirvana status The Functional, a quirky take that unleashes some of the neat declarative aspects of the language The Bonus, a twist on the Swift-ish version that takes a predicate, similar to sort from the Swift Standard Library Also, a few test cases covering some initial conditions were added: Sorted Nearly Sorted Reversed Shuffled I know, I know... Talk is cheap, show me the code, right? Okey-dokey, let's dive in and enjoy the ride! Table of Contents Bubble Sort Insertion Sort Merge Sort Quick Sort Selection Sort What's Next Here are some future ideas yet to be considered: Refactor tests into its own playground page, if possible Implement Heap Sort, Shell Sort, and Intro Sort algorithms Feel free to ping me on Twitter. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/adrfer/Sort"	"Alluring experiments with sorting algorithms in Swift, sort of."	"true"
"Algorithms and Data Structures"	"The Jelly Bean Problem"	"https://github.com/kyleweiner/Jelly-Bean-Problem"	"The Jelly Bean problem from Wait But Why."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"1"	"GitHub - kyleweiner/Jelly-Bean-Problem: A playground for modeling ""The Jelly Bean Problem"" presented by Tim Urban on Wait But Why. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 1 kyleweiner/Jelly-Bean-Problem Code Issues 0 Pull requests 0 Pulse Graphs A playground for modeling ""The Jelly Bean Problem"" presented by Tim Urban on Wait But Why. 4 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. Jelly Bean Problem.playground .gitignore README.md README.md Jelly Bean Problem ""The Jelly Bean Problem"" was published by Tim Urban of Wait But Why on March 7, 2016. The problem is mathematically equivalent to the famous Monty Hall problem popularized by Marilyn vos Savant in 1990. Summary You're presented with three jelly beans–one is harmless and two have a lethal poison. You don't know which jelly bean is safe, but you're required to eat one. Upon making your choice, one of the two remaining jelly beans is removed–you're told it was lethal. Before consuming the jelly bean you initially selected, you're given the option to eat the remaining one instead. Which jelly bean do you eat? Does it even matter? Conditions This problem operates under the following conditions: Only one jelly bean is safe to consume. Two jelly beans will remain after the removal process; this includes the initially selected jelly bean. The removed jelly beans are always lethal. The option to switch the initially selected jelly bean for the remaining one is always provided. Playground The playground proves that your choice does matter–it's better to switch. There was initially a ⅓ probability of making a non-lethal selection. After the removal process, this probability remained the same. However, the probability of making a non-lethal selection by switching is now ⅔. In the scenario below, the remaining choice is always taken (e.g. the remaining jelly bean is consumed–not the one that was initially selected). The numberOfChoices represents the number of jelly beans that were initially offered and the playCount is the number of times the scenario will run. var scenario = Scenario(numberOfChoices: 3, playCount: 1000)! scenario.run() The results are printed in the playground's sidebar. For the above scenario, it will be similar to the following: 😀 Survived by switching 667 times (66.7%). 💀 Died by switching 333 times (33.3%). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kyleweiner/Jelly-Bean-Problem"	"The Jelly Bean problem from Wait But Why."	"true"
"Algorithms and Data Structures"	"Euclidean Strings"	"https://github.com/modulusMathews/ReEuclid"	"A playground leveraging ReSwift to generate Euclidean Strings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - modulusMathews/ReEuclid: A playground leveraging ReSwift to generate Euclidean Strings Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 modulusMathews/ReEuclid Code Issues 0 Pull requests 0 Pulse Graphs A playground leveraging ReSwift to generate Euclidean Strings 1 commit 1 branch 0 releases Fetching contributors Swift 97.9% Objective-C 2.1% Swift Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. Sources .gitignore Contents.swift contents.xcplayground Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/modulusMathews/ReEuclid"	"A playground leveraging ReSwift to generate Euclidean Strings"	"true"
"UIKit And Graphics"	"UIStackView Playground"	"https://github.com/dasdom/UIStackViewPlayground"	"Interesting examples of use of UIStackViews."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"257"	"6"	"10"	"GitHub - dasdom/UIStackViewPlayground: Playground to play with UIStackViews. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 257 Fork 10 dasdom/UIStackViewPlayground Code Issues 0 Pull requests 0 Pulse Graphs Playground to play with UIStackViews. 36 commits 1 branch 0 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 85dd9a8 Nov 22, 2015 dasdom Added a new example Permalink Failed to load latest commit information. UIStackView.playground Added a new example Nov 22, 2015 screenShots Added screenshot Oct 21, 2015 LiCENCE Update LiCENCE Jun 26, 2015 README.md Update README.md Oct 21, 2015 README.md UIStackViewPlayground Playground to play with UIStackViews. iOS Springboard iOS Calculator Calculator Profile Timeline Post/Tweet Twitter With Quotes iOS Mail Inbox Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dasdom/UIStackViewPlayground"	"Interesting examples of use of UIStackViews."	"true"
"UIKit And Graphics"	"Bezier Path Playgrounds"	"https://github.com/DigitalLeaves/BezierPathPlaygrounds"	"Some playgrounds to better understand UIBezierPaths."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"1"	"3"	"GitHub - DigitalLeaves/BezierPathPlaygrounds: Some playgrounds to better understand UIBezierPaths and how to use them. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 10 Fork 3 DigitalLeaves/BezierPathPlaygrounds Code Issues 0 Pull requests 0 Pulse Graphs Some playgrounds to better understand UIBezierPaths and how to use them. 1 commit 1 branch 0 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 11899b9 Jul 26, 2015 DigitalLeaves Initial commit Permalink Failed to load latest commit information. BezierPathImages.playground Initial commit Jul 26, 2015 BezierPathShapes.playground Initial commit Jul 26, 2015 BezierPathViews.playground Initial commit Jul 26, 2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DigitalLeaves/BezierPathPlaygrounds"	"Some playgrounds to better understand UIBezierPaths."	"true"
"UIKit And Graphics"	"RPClarity"	"https://github.com/RobotsAndPencils/RPClarity"	"Shows a technique for blurring an image behind the characters behind one or more UILabels."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"16"	"1"	"GitHub - RobotsAndPencils/RPClarity: A Swift 1.2 playground that shows a technique for blurring an image behind the characters (glyphs) of one or more UILabels Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 36 Fork 1 RobotsAndPencils/RPClarity Code Issues 0 Pull requests 0 Pulse Graphs A Swift 1.2 playground that shows a technique for blurring an image behind the characters (glyphs) of one or more UILabels 2 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 6816928 Jul 23, 2015 daveanderson Introduction of RPClarity Permalink Failed to load latest commit information. RPClarity.playground Introduction of RPClarity Aug 12, 2015 RPClarity Introduction of RPClarity Aug 12, 2015 .gitignore Initial commit Jul 23, 2015 HigherContrast.png Introduction of RPClarity Aug 12, 2015 LICENSE Introduction of RPClarity Aug 12, 2015 LowContrast.png Introduction of RPClarity Aug 12, 2015 NoFeather.png README.md README.md RPClarity RPClarity is a set of extensions, demonstrated in a swift playground that shows a technique for blurring an image behind the individual characters (glyphs) of one or more UILabels in order to improve the contrast between text (often white) and the image behind the text. Background Beautiful images are a major component of many apps, and it is very common to apply white text over top of an image. In cases where the image includes clouds or other light colored or high contrast (busy) elements, the text has insufficient contrast with the background and is hard to read. Low Contrast Techniques for improving the readability of white text over an image often include putting a gradient or other layer between the text and the image to improve the contrast, therefore improving the readability. A major side effect of this approach is that the layer used to improve contrast is a fixed, rectangular size and is not adaptive to the specific (often dynamic) text, screen size and line wrapping of the layout. e.g. The CSS BackdropFilterProperty supported by WebKit. Unnecessarily obscuring an image where text does not exist defeats the investment in beautiful imagery. Similarly, the entire image may be darkened, blurred or halftoned, but each of these approaches affects more of the image than may be necessary. A compromise may be to apply a blur to the image only where the UILabel exists. For single lines of text that do not wrap, this may be an attractive improvement. However, if the contents of the UILabel happen to wrap, there is no need to blur areas within the bounding rectangle of the label that do not contain text. The quick brown fox jumps over the lazy dog  (If this ^ were a UILabel there would be no need to blur the image below the negative space to the right of over or dog.) Details RPClarity attempts to optimize the application of a blur to specifically the areas underneath the glyphs, preserving the detail visible in other areas of the image. RPClarity Applied RPClarity also allows for the edge of the blurred area to be feathered (default) or to have sharp edges. RPClarity with No Feather The blurred area has a desaturation and tint color applied to generally improve the legibility of white text over white imagery. This technique assumes a view hierarchy that includes a UIImageView as well as one or more UILabels above it (in z). It then internally uses NSTextStorage, NSLayoutManager, NSTextContainer and an invisible UITextView to determine the line wrapping of the contents of the UILabel and apply a blur to the image only underneath the glyphs of the text of the UILabel. The blur can have sharp or soft (feathered) edges, and the blurred area can also have a tint applied in order to further increase contrast. Note: RPClarity is not a high-performance solution (yet). It has not yet been subjected to performance analysis with Instruments and has known inefficiencies. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/RobotsAndPencils/RPClarity"	"Shows a technique for blurring an image behind the characters behind one or more UILabels."	"true"
"UIKit And Graphics"	"Swift Clock"	"https://github.com/nickoneill/swiftclock"	"An animated clock in a swift playground."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"4"	"6"	"GitHub - nickoneill/swiftclock: An iOS Clock icon in a swift playground Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 15 Fork 6 nickoneill/swiftclock Code Issues 0 Pull requests 0 Pulse Graphs An iOS Clock icon in a swift playground 18 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 20131e5 Nov 14, 2014 nickoneill Update README.md Permalink Failed to load latest commit information. Clock.playground A few missing CGFloats Nov 14, 2014 README.md Update README.md Nov 14, 2014 screenshot.png Added screenshot. Jun 18, 2014 README.md swiftclock An iOS Clock icon in a swift playground. It reads the current time and animates the second hand for 30 seconds in the style of the iOS clock icon. Compatible with Xcode 6.1 thanks to Corinne Krych Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nickoneill/swiftclock"	"An animated clock in a swift playground."	"true"
"UIKit And Graphics"	"Checkmark Button"	"https://github.com/BilalReffas/CheckmarkButton"	"Animated check mark button."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"1"	"GitHub - BilalReffas/CheckmarkButton: Button animation made with the Playground Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 1 BilalReffas/CheckmarkButton Code Issues 0 Pull requests 0 Pulse Graphs Button animation made with the Playground 3 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2ff776a Jan 29, 2016 BilalReffas Update README.md Permalink Failed to load latest commit information. CheckmarkButton.playground Init Play Wuhuuu 👻 Jan 29, 2016 README.md Update README.md Jan 29, 2016 README.md CheckmarkButton Button animation in Playgrounds (new in Xcode 7.3) 👻👻👻👻👻👻👻👻👻👻👻👻 How to use ? Just use the class Checkmark which is an subclass of UIButton use the CheckamarkDelegate to check if the button was pressed. You can customize the linewidth of the checkmark and checkmarkcolor. class ButtonViewController : UIViewController,CheckamarkDelegate{      var buttonView: UIButton!      override func viewDidLoad() {         super.viewDidLoad()         self.view.frame = CGRect(x: 0, y: 0, width: 500, height: 500)         self.view.backgroundColor = UIColor.whiteColor()          let checkMark = Checkmark(frame: CGRect(x: 0, y: 0, width: 200, height: 200))         checkMark.backgroundColor = UIColor(red:0.92, green:0.11, blue:0.4, alpha:1)         checkMark.center = self.view.center         checkMark.delegate = self           checkMark.lineWidth = 9.0         checkMark.checkmarkColor = UIColor.whiteColor()          self.view.addSubview(checkMark)      }       func pressedCheckmark(checkmark: Checkmark) {         print(""Wuhhuuuu 👻 do some stuff"")     }   }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BilalReffas/CheckmarkButton"	"Animated check mark button."	"true"
"UIKit And Graphics"	"UIKit playground"	"https://github.com/ralfebert/uikit-playground"	"Playgrounds to experiment interactively with UIKit views."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"1"	"1"	"GitHub - ralfebert/uikit-playground: Xcode playground to experiment interactively with UIKit views. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 5 Fork 1 ralfebert/uikit-playground Code Issues 0 Pull requests 0 Pulse Graphs Xcode playground to experiment interactively with UIKit views. http://www.ralfebert.de/snippets/ios/uikit-playground/ 5 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ca5b14b Oct 10, 2015 ralfebert colored uiprogressview Permalink Failed to load latest commit information. UIActivityIndicatorView.playground separate files Oct 10, 2015 UIButton.playground separate files Oct 10, 2015 UICollectionView.playground separate files Oct 10, 2015 UIColor.playground Updated for Xcode 7 Oct 1, 2015 UIDatePicker.playground separate files Oct 10, 2015 UIImageView.playground separate files Oct 10, 2015 UILabel.playground UIPageControl.playground separate files Oct 10, 2015 UIPickerView.playground separate files Oct 10, 2015 UIProgressView.playground colored uiprogressview Oct 10, 2015 UIScrollView.playground separate files Oct 10, 2015 UISegmentedControl.playground separate files Oct 10, 2015 UISlider.playground separate files Oct 10, 2015 UIStepper.playground UISwitch.playground separate files Oct 10, 2015 UITableView.playground separate files Oct 10, 2015 UITextField.playground separate files Oct 10, 2015 UITextView.playground separate files Oct 10, 2015 UIView.playground separate files Oct 10, 2015 UIWebView.playground .gitignore UIColor playground May 12, 2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ralfebert/uikit-playground"	"Playgrounds to experiment interactively with UIKit views."	"true"
"UIKit And Graphics"	"WatchKit Asset Playground"	"https://github.com/cwimberger/WatchKitAssetPlayground"	"A swift playground for creating awesome animations for your WatchKit Apps."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"0"	"GitHub - cwimberger/WatchKitAssetPlayground: A swift playground for creating awesome animations for your WatchKit Apps. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 0 cwimberger/WatchKitAssetPlayground Code Issues 0 Pull requests 0 Pulse Graphs A swift playground for creating awesome animations for your WatchKit Apps. 7 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. WatchKitAsset.playground readme-assets LICENSE README.md README.md WatchKitAssetPlayground A swift playground for creating awesome animations for your WatchKit Apps. Examples: These little animations can be implemented in a functional way: let dots = 3 let duration = 2.0 let color = UIColor.blackColor() let circleSize = interpolate(duration: duration, curve: easeInOutQuad, values: 0.0, 20.0) let c = circle(size: circleSize, color: color) let circleAlpha = interpolate(duration: duration, curve: easeInOutQuad, values: 1.0, 0.0) let ac = alpha(value: circleAlpha, animation: c)  var circles: [AnimationBlock] = [] for i in 0..<dots {   let delayDuration = duration * Double(i) / Double(dots)   let delayedAnimation = delay(duration: delayDuration, animation: ac)   circles.append(delayedAnimation) }  let anim = loop(from: duration, duration: duration, animation: overlay(circles)) To display the animation right in your playground, use the showAnimation function to show the animation 5x magnified directly in the playground - perfect for prototyping. let assetSize = CGSize(width: 20, height: 20) showAnimation(name: ""Twitter"", size: assetSize, framerate: 20, animation: anim) When you're finished, export all needed PNGs using the createAssets function. It will create all files in your ""~/Documents/Shared Playground Data/"" directory. Please make sure it exists. createAssets(name: ""twitter"", duration: 2.0, size: assetSize, framerate: 20, animation: anim)  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cwimberger/WatchKitAssetPlayground"	"A swift playground for creating awesome animations for your WatchKit Apps."	"true"
"UIKit And Graphics"	"Swift 2.0 Protocol Extension Example"	"https://github.com/jhurray/Swift2-Protocol-Extension-Example"	"Showing how to use Swift2 protocol extensions to render errors in UIViews and UIViewControllers without subclassing or creating classes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"42"	"2"	"4"	"GitHub - jhurray/Swift2-Protocol-Extension-Example: Playground showing how to use swift2 protocol extensions to render errors in UIViews and UIViewControllers without subclassing Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 42 Fork 4 jhurray/Swift2-Protocol-Extension-Example Code Issues 0 Pull requests 0 Pulse Graphs Playground showing how to use swift2 protocol extensions to render errors in UIViews and UIViewControllers without subclassing 5 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit baea495 Jun 7, 2016 jhurray Merge pull request #1 from muhasturk/master … fix deprecated usage of XCPShowView Permalink Failed to load latest commit information. Swift2-ProtocolExtensions-ErrorRendering.playground fix deprecated usage of XCPShowView Jun 7, 2016 .gitignore Initial commit Sep 27, 2015 LICENSE Initial commit Sep 27, 2015 README.md Read me update Sep 27, 2015 example.gif Read me update Sep 27, 2015 example.mov Read me update Sep 27, 2015 README.md Swift 2.0 Protocol Extension Example Playground showing how to use Swift2 protocol extensions to render errors in UIViews and UIViewControllers without subclassing or creating classes UIViewControllers will render an error as a toast banner UIViews will render an error by adding a generic error label to the views top right corner. This was inspired by a sweet article by KrakenDev import UIKit import XCPlayground  struct ErrorOptions {     let message: String     let tintColor: UIColor      init(message: String = ""Error!"", tintColor: UIColor = UIColor.clearColor()) {         self.message = message         self.tintColor = tintColor     } }  typealias ErrorRenderingCompletionBlock = ()->()  protocol ErrorPopoverRenderer {     func presentError(errorOptions: ErrorOptions)     func presentError(errorOptions: ErrorOptions, completion : ErrorRenderingCompletionBlock?) }  extension ErrorPopoverRenderer {     func presentError(errorOptions: ErrorOptions = ErrorOptions()) {         self.presentError(errorOptions, completion: nil)     } }  extension ErrorPopoverRenderer where Self: UIViewController {      func presentError(errorOptions: ErrorOptions = ErrorOptions(), completion : ErrorRenderingCompletionBlock?) {         let errorBanner = UILabel()         errorBanner.backgroundColor = errorOptions.tintColor         errorBanner.textAlignment = .Center         errorBanner.adjustsFontSizeToFitWidth = true         errorBanner.font = UIFont.systemFontOfSize(20.0)         errorBanner.textColor = UIColor.whiteColor()         errorBanner.text = errorOptions.message         let height : CGFloat = 50         errorBanner.frame = CGRect(x: 0, y: -height, width: CGRectGetWidth(self.view.bounds), height: height)         self.view.addSubview(errorBanner)         UIView.animateWithDuration(0.8, animations: { () -> Void in             errorBanner.transform = CGAffineTransformMakeTranslation(0, height)             }) { (done1) -> Void in                 UIView.animateWithDuration(0.8, delay: 0.5, options: UIViewAnimationOptions.CurveEaseOut, animations: { () -> Void in                     errorBanner.transform = CGAffineTransformIdentity                     }, completion: { (done2) -> Void in                         errorBanner.removeFromSuperview()                         if let completionBlock = completion {                             completionBlock()                         }                 })         }     } }  extension ErrorPopoverRenderer where Self: UIView {      func presentError(errorOptions: ErrorOptions = ErrorOptions(), completion : ErrorRenderingCompletionBlock?) {         let errorBanner = UILabel()         errorBanner.backgroundColor = errorOptions.tintColor         errorBanner.textAlignment = .Center         errorBanner.adjustsFontSizeToFitWidth = true         errorBanner.font = UIFont.systemFontOfSize(18.0)         errorBanner.text = ""!""         errorBanner.textColor = UIColor.redColor()         let size : CGFloat = 32.0         let padding : CGFloat = 8.0         errorBanner.layer.cornerRadius = size/2.0         errorBanner.layer.borderColor = UIColor.redColor().CGColor         errorBanner.layer.borderWidth = 1.0         errorBanner.frame = CGRect(x: CGRectGetWidth(self.bounds) - size - padding, y: padding, width: size, height: size)         self.addSubview(errorBanner)         if let completionBlock = completion {             completionBlock()         }     } }  extension UIViewController : ErrorPopoverRenderer {} extension UIView : ErrorPopoverRenderer {}   let viewController = UIViewController() viewController.view.frame = CGRect(x: 0, y: 0, width: 375, height: 667) viewController.view.backgroundColor = UIColor.whiteColor() XCPShowView(""Controller View"", view: viewController.view)  let errorOptions = ErrorOptions(message: ""OMG an error!"", tintColor: UIColor.redColor()) viewController.presentError(errorOptions) { () -> () in     viewController.view.presentError() }    Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jhurray/Swift2-Protocol-Extension-Example"	"Showing how to use Swift2 protocol extensions to render errors in UIViews and UIViewControllers without subclassing or creating classes."	"true"
"UIKit And Graphics"	"Tinting"	"https://github.com/Jesse-calkin/tinting"	"A small playground to demonstrate image tinting in UIKit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"0"	"GitHub - Jesse-calkin/tinting: A small playground to demonstrate image tinting in UIKit. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 0 Jesse-calkin/tinting Code Issues 0 Pull requests 0 Pulse Graphs A small playground to demonstrate image tinting in UIKit. 3 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 65f31a9 Dec 3, 2015 Jesse-calkin added example images to readme Permalink Failed to load latest commit information. Tinting.playground added playground Dec 3, 2015 .gitignore Initial commit Dec 3, 2015 README.md added example images to readme Dec 3, 2015 star.gif added example images to readme Dec 3, 2015 star.png README.md tinting A small playground to demonstrate image tinting in UIKit. Becomes Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Jesse-calkin/tinting"	"A small playground to demonstrate image tinting in UIKit."	"true"
"UIKit And Graphics"	"Animated GIF Playground"	"https://github.com/danielrhammond/GIF-Playground"	"Swift playground for generating animated GIFs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"1"	"GitHub - danielrhammond/GIF-Playground: Swift playground for generating GIFs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 1 danielrhammond/GIF-Playground Code Issues 0 Pull requests 0 Pulse Graphs Swift playground for generating GIFs 6 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. GIFPlayground.playground .gitignore Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/danielrhammond/GIF-Playground"	"Swift playground for generating animated GIFs."	"true"
"UIKit And Graphics"	"Ray tracing Playground"	"https://github.com/Swiftor/Raytracing"	"A playground and a series of articles on ray tracing, see also part,,"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"4"	"1"	"GitHub - Swiftor/Raytracing Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 10 Fork 1 Swiftor/Raytracing Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 4 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ab00a41 Mar 22, 2016 mhorga first commit Permalink Failed to load latest commit information. demo.playground first commit Mar 21, 2016 images first commit Mar 21, 2016 README.md first commit Mar 22, 2016 README.md Raytracing Repository to accompany the following blog post: http://mhorga.org/2016/03/21/ray-tracing-in-a-swift-playground.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Swiftor/Raytracing"	"A playground and a series of articles on ray tracing, see also part,,"	"true"
"UIKit And Graphics"	"2"	"https://github.com/Swiftor/Raytracing2"	"A playground and a series of articles on ray tracing, see also part,,"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"2"	"0"	"GitHub - Swiftor/Raytracing2 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 4 Fork 0 Swiftor/Raytracing2 Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 4 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. part2.playground README.md README.md Raytracing 2 Repository to accompany the blog post at: http://mhorga.org/2016/03/28/ray-tracing-in-a-swift-playground-part-2.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Swiftor/Raytracing2"	"A playground and a series of articles on ray tracing, see also part,,"	"true"
"UIKit And Graphics"	"3"	"https://github.com/Swiftor/Raytracing3"	"A playground and a series of articles on ray tracing, see also part,,"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"1"	"0"	"GitHub - Swiftor/Raytracing3 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 6 Fork 0 Swiftor/Raytracing3 Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 5 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. part3.playground README.md README.md Raytracing 3 Repository to accompany the blog post at: http://mhorga.org/2016/04/05/ray-tracing-in-a-swift-playground-part-3.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Swiftor/Raytracing3"	"A playground and a series of articles on ray tracing, see also part,,"	"true"
"UIKit And Graphics"	"4"	"https://github.com/Swiftor/Raytracing4"	"A playground and a series of articles on ray tracing, see also part,,"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"1"	"GitHub - Swiftor/Raytracing4 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 1 Swiftor/Raytracing4 Code Issues 0 Pull requests 0 Pulse Graphs No description or website provided. 4 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. part4.playground README.md README.md Raytracing 4 Repository to accompany the blog post at: http://mhorga.org/2016/04/09/ray-tracing-in-a-swift-playground-part-4.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Swiftor/Raytracing4"	"A playground and a series of articles on ray tracing, see also part,,"	"true"
"Core Image"	"Interpolation Playground"	"https://github.com/FlexMonkey/Interpolation-Playground-"	"Playground demonstrating lerp, smooth step, Catcall-Rom and others!"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"7"	"1"	"GitHub - FlexMonkey/Interpolation-Playground-: Swift playground demonstrating lerp, smooth step, Catcall-Rom and others! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 24 Fork 1 FlexMonkey/Interpolation-Playground- Code Issues 0 Pull requests 0 Pulse Graphs Swift playground demonstrating lerp, smooth step, Catcall-Rom and others! http://flexmonkey.blogspot.co.uk/2016/01/playing-with-interpolation-functions-in.html 21 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4a14f2c Feb 29, 2016 FlexMonkey Update README.md Permalink Failed to load latest commit information. InterpolationPlayground.playground Added Gaussian interpolation Feb 29, 2016 README.md screenshot.png README.md Interpolation-Playground Swift playground demonstrating lerp, smooth step, Catmull-Rom and others! List of interpolations Linear Interpolation Smooth Step Smoother Step Smoothest Step Squared Inverse Squared Cubed Sin Catmull-Rom Elastic In Elastic Out Wobble Gaussian Feel free to raise a PR to add your own! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FlexMonkey/Interpolation-Playground-"	"Playground demonstrating lerp, smooth step, Catcall-Rom and others!"	"true"
"Core Image"	"CoreImage for Swift Playgrounds"	"https://github.com/FlexMonkey/CoreImageForSwiftPlaygrounds"	"Growing collection of CoreImage playgrounds from the upcoming book ""CoreImage For Swift""."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"21"	"7"	"4"	"GitHub - FlexMonkey/CoreImageForSwiftPlaygrounds: CoreImage For Swift Playgrounds Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 21 Fork 4 FlexMonkey/CoreImageForSwiftPlaygrounds Code Issues 0 Pull requests 0 Pulse Graphs CoreImage For Swift Playgrounds 16 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 82e2c8d Apr 1, 2016 FlexMonkey Merge remote-tracking branch 'origin/master' Permalink Failed to load latest commit information. Chapter1.playground New Playgrounds Mar 6, 2016 Chapter2.playground New Playgrounds Mar 6, 2016 Chapter6.playground Updates for 1.2 Mar 31, 2016 Chapter7.playground Updates for 1.2 Mar 31, 2016 Chapter8.playground Updates for 1.2 Mar 31, 2016 Chapter9.playground Added MaskedVariableBlur to Chapter 9 Playground Apr 1, 2016 README.md Update README.md Mar 31, 2016 README.md CoreImageForSwiftPlaygrounds Companion playgrounds for my book, Core Image for Swift Core Image for Swift is available from: Core Image for Swift from iBooks Store Core Image For Swift from Gumroad Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FlexMonkey/CoreImageForSwiftPlaygrounds"	"Growing collection of CoreImage playgrounds from the upcoming book ""CoreImage For Swift""."	"true"
"Core Image"	"Image Processor"	"https://github.com/mortenbrudvik/ImageProcessor"	"Implementing different image filter algorithms."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - mortenbrudvik/ImageProcessor: Playing around with swift playground by implementing different image filter algorithms Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 mortenbrudvik/ImageProcessor Code Issues 0 Pull requests 0 Pulse Graphs Playing around with swift playground by implementing different image filter algorithms 1 commit 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. ImageProcessor.playground Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mortenbrudvik/ImageProcessor"	"Implementing different image filter algorithms."	"true"
"Metal"	"METAL Playground"	"https://github.com/haawa799/METAL_Playground"	"Apple Metal framework playground."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"4"	"2"	"GitHub - haawa799/METAL_Playground: Apple Metal framework playground Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 32 Fork 2 haawa799/METAL_Playground Code Issues 1 Pull requests 0 Pulse Graphs Apple Metal framework playground 54 commits 1 branch 0 releases 1 contributor Swift 59.9% Objective-C 35.2% Python 2.9% C++ 2.0% Swift Objective-C Python C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ef4118a Jul 10, 2014 haawa799 All samples fixed for iOS8 - beta3 Permalink Failed to load latest commit information. 1. Colored Triangle All samples fixed for iOS8 - beta3 Jul 10, 2014 2. Cube + Transform All samples fixed for iOS8 - beta3 Jul 10, 2014 3. Texured cube All samples fixed for iOS8 - beta3 Jul 10, 2014 4. Cube + Lighting All samples fixed for iOS8 - beta3 Jul 10, 2014 5. Imported Model All samples fixed for iOS8 - beta3 Jul 10, 2014 Obj_Convert.py A lot's of refactor done. Jul 4, 2014 README.md Update README.md Jul 10, 2014 README.md UPDATE After finishing this try-out project I made Flappy bird colne with Metal, go check it out https://github.com/haawa799/Metal-Flaps METAL_Playground Task: Create complex 3D scene app using Apples new Metal framework, using Swift as much as possible. NOTE1: Since I'm trying to use Swift where it's posiible, this code is not super efficient or fast, there are some wrappers which are not recommanded in this kind of projects. Hope to improve it as new Xcode betas will come out. NOTE: 1) For now (Xcode 6 - beta2) requires -Ofast compiler flag to build. 2) iOS 8 and device with A7 required! Doesn't work on simulator. Model importing script Obj_Convert.py In part 5 i wrote simple python script which parse OBJ file (generated from Blender or any other 3D model tool) and produce Swift class and txt file. Here are steps on how I used it to get that Ram rendered. Here's a link to free 3D model http://www.3dvia.com/models/67EC495D6F415365/ramiro-the-ram, thanks to dipsy. Put your OBJ and MTL file (generated from Blender) into one folder Make sure that both OBJ and MTL files have same name, and this name will be your Swift class name, in my case it's ""ram.obj"" and ""ram.mtl"" Put Obj_Convert.py file into same folder From terminal cd to your folder Run following command ""python Obj_Convert.py name"" name should be equal to .obj and .mtl file names in my case it's ""ram"" Check you folder, .swift and .txt files should be there, drag and drop them into your project Double check .swift file, wethere texture name is correct Use imported model as any other Model subclass inside your MetalViewController Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/haawa799/METAL_Playground"	"Apple Metal framework playground."	"true"
"Metal"	"Metalbrot"	"https://github.com/jtbandes/Metalbrot.playground"	"Interactive playground that draws the Mandelbrot fractal with Metal."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"28"	"3"	"4"	"GitHub - jtbandes/Metalbrot.playground: An interactive playground showing how to use Metal compute kernels. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 28 Fork 4 jtbandes/Metalbrot.playground Code Issues 0 Pull requests 0 Pulse Graphs An interactive playground showing how to use Metal compute kernels. https://bandes-stor.ch/blog/2016/02/21/drawing-fractals-with-minimal-metal/ 1 commit 1 branch 1 release 1 contributor Swift 84.2% Metal 15.8% Swift Metal Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1 Nothing to show New pull request Latest commit 8da9058 Feb 21, 2016 jtbandes Initial commit Permalink Failed to load latest commit information. Metalbrot.playground Initial commit Feb 21, 2016 .gitignore Initial commit Feb 22, 2016 LICENSE.txt Initial commit Feb 22, 2016 README.md Initial commit Feb 22, 2016 README.md Metalbrot.playground is an interactive playground showing how to use Metal compute kernels with Swift. More information can be found on my blog. (This demo is free for personal and educational use. If you plan to use it for anything else, please credit me — see LICENSE.txt for details.) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jtbandes/Metalbrot.playground"	"Interactive playground that draws the Mandelbrot fractal with Metal."	"true"
"Animations"	"iOS Animation Samples"	"https://github.com/JakeLin/iOSAnimationSample"	"Experiment with iOS animations."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"131"	"10"	"40"	"GitHub - JakeLin/iOSAnimationSample: This app is an iOS Animation playground to exercise different iOS Animations. The app is written in Swift. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 131 Fork 40 JakeLin/iOSAnimationSample Code Issues 1 Pull requests 0 Pulse Graphs This app is an iOS Animation playground to exercise different iOS Animations. The app is written in Swift. 57 commits 1 branch 8 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show uiview-spring uiview-scale uiview-rotation uiview-repeat uiview-position uiview-opacity uiview-easing uiview-color Nothing to show New pull request Latest commit 7178c19 Mar 12, 2016 JakeLin Animate logo and the dot images Permalink Failed to load latest commit information. Design Add AutoLayout Login VC Oct 9, 2015 Screenshots Add screenshot Oct 19, 2015 iOSAnimationSample.xcodeproj Update project settings Mar 10, 2016 iOSAnimationSample Animate logo and the dot images Mar 12, 2016 iOSAnimationSampleTests Update project settings Mar 10, 2016 .gitignore UIView Animation - Position Apr 29, 2015 LICENSE Initial commit Apr 29, 2015 README.md update read me file Oct 19, 2015 README.md iOS Animation Sample This app is an iOS Animation playground to exercise different iOS Animations. The app is written in Swift 2. Version The current version is working with Xcode Version 7. If you are using different Xcode version, please check out the previous commits. Features UIView Animations Auto Layout Animations Screenshots Animated Login screen using Auto Layout TODO CALayer Animations Facebook Pop Animations Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JakeLin/iOSAnimationSample"	"Experiment with iOS animations."	"true"
"Animations"	"Additive Animations"	"https://github.com/d-ronnqvist/Additive-Animations-Playground"	"Experiment with multiple additive animations in Core Animation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"2"	"3"	"GitHub - d-ronnqvist/Additive-Animations-Playground: A playground for experimenting with multiple additive animations in Core Animation. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 27 Fork 3 d-ronnqvist/Additive-Animations-Playground Code Issues 0 Pull requests 0 Pulse Graphs A playground for experimenting with multiple additive animations in Core Animation. 4 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. Additive Animations.playground Additive Move to Tap LICENSE README.md README.md Additive-Animations-Playground This playground can be used as a stating point for experimenting with mutliple additive animations in Core Animation. It creates two additive animations for the position property and uses them to achieve a movement along a complex path. It is the accompanying playgound for the ""Multiple Animations"" blog post http://ronnqvi.st/multiple-animations/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/d-ronnqvist/Additive-Animations-Playground"	"Experiment with multiple additive animations in Core Animation."	"true"
"Animations"	"Core Animation Playground"	"https://github.com/knightsc/CoreAnimationPlayground"	"Companion to Apple's Core Animation Programming Guide."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"0"	"GitHub - knightsc/CoreAnimationPlayground: A Swift playground demonstrating how to use Core Animation Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 0 knightsc/CoreAnimationPlayground Code Issues 0 Pull requests 0 Pulse Graphs A Swift playground demonstrating how to use Core Animation 1 commit 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. CoreAnimation.playground LICENSE README.md README.md Core Animation Playground This Swift playground is intended to accompany Apple's Core Animation Programming Guide which can be found here: https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide Xcode 7 or above is required. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/knightsc/CoreAnimationPlayground"	"Companion to Apple's Core Animation Programming Guide."	"true"
"Animations"	"Duet-Inspired Trail Effect"	"https://github.com/dionlarson/Duet-Trail-Effect-SpriteKit-Playground"	"How to get a Duet style trailing effect in SpriteKit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"0"	"GitHub - dionlarson/Duet-Trail-Effect-SpriteKit-Playground: Swift Playground demonstrating how to get a ""Duet"" style trailing effect in SpriteKit. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 0 dionlarson/Duet-Trail-Effect-SpriteKit-Playground Code Issues 0 Pull requests 0 Pulse Graphs Swift Playground demonstrating how to get a ""Duet"" style trailing effect in SpriteKit. 4 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 9eb0a02 Apr 5, 2016 dionlarson Fix for Playgrounds in Xcode 7.3 Permalink Failed to load latest commit information. Duet Style Trail.playground Duet_demo.gif Update gif to repeat Mar 17, 2016 README.md Initial commit Mar 17, 2016 README.md Duet-Inspired Trail Effect I'm a huge fan of the game Duet and created this Swift Playground while answering this question on StackOverflow. License Licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dionlarson/Duet-Trail-Effect-SpriteKit-Playground"	"How to get a Duet style trailing effect in SpriteKit."	"true"
"SpriteKit"	"Sprite Kit Collisions"	"https://github.com/jaredmpayne/Sprite-Kit-Collisions-Playground"	"Demonstrates how to perform physics collision detection using Swift and Sprite Kit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"23"	"1"	"0"	"GitHub - jaredmpayne/Sprite-Kit-Collisions-Playground: This playground demonstrates how to perform physics collision detection using Swift and Sprite Kit. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 23 Fork 0 jaredmpayne/Sprite-Kit-Collisions-Playground Code Issues 0 Pull requests 0 Pulse Graphs This playground demonstrates how to perform physics collision detection using Swift and Sprite Kit. 4 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 5a2c9b3 Feb 11, 2016 jaredmpayne Updated Scene presentation to use XCPlaygroundPage.currentPage.liveVi… … …ew over XCPShowView(). Permalink Failed to load latest commit information. Sprite Kit Collisions.playground Updated Scene presentation to use XCPlaygroundPage.currentPage.liveVi… Feb 11, 2016 README.md Updated Scene presentation to use XCPlaygroundPage.currentPage.liveVi… Feb 11, 2016 README.md Sprite Kit Collisions Playground This playground demonstrates how to perform physics collision detection using Swift and Sprite Kit. This playground was written using Swift 2 and Xcode 7. It covers creating category bit masks and contact delegates to detect colliding physics bodies during runtime. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jaredmpayne/Sprite-Kit-Collisions-Playground"	"Demonstrates how to perform physics collision detection using Swift and Sprite Kit."	"true"
"SpriteKit"	"SceneKit Examples"	"https://github.com/UCh/swift-scene-kit-playgrounds"	"Experiment with SceneKit and Swift."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"3"	"3"	"GitHub - UCh/swift-scene-kit-playgrounds: Experiment with scene kit and swift Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 10 Fork 3 UCh/swift-scene-kit-playgrounds Code Issues 0 Pull requests 1 Pulse Graphs Experiment with scene kit and swift 8 commits 1 branch 0 releases Fetching contributors Swift 64.2% C 35.8% Swift C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 9b38566 Jul 25, 2014 rogeratplumbee Added read me file Permalink Failed to load latest commit information. BringToysCompleted.playground Updated to Xcode6 Beta4 Jul 25, 2014 ClassyCompleted.playground Updated to Xcode6 Beta4 Jul 25, 2014 HandsDirtyCompleted.playground Updated to Xcode6 Beta4 Jul 25, 2014 PaleBlueDotComplete.playground Updated to Xcode6 Beta4 Jul 25, 2014 Readme.md Added read me file Jul 25, 2014 Readme.md SceneKit Swift Playground examples Playgrounds used on the Skill Matters talk Making noise in the playground Updated to XCode 6 Beta 4 This playgrounds are used as snippeds of basic ussage of Scene Kit in Swift languaje. HandsDirtyCompleted.playground Create a scene kit view, add a camera, some geogetry and apply basic animation to it ClassyCompleted.playground Move the code of the previous playground to a class, and animate it using Scene Kit transaction, been able to use the timeline scrubber on the playground view PaleBlueDotComplete Add lights and textures to a scene creating a earth globe with day/night cycle BringToysCompleted Replace build in materials by a custom Simplex Noise shader License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/UCh/swift-scene-kit-playgrounds"	"Experiment with SceneKit and Swift."	"true"
"Audio"	"Bach Playground"	"https://github.com/dreamwieber/BachPlayground"	"A Simple Swift Playground that plays a brief piece by Bach with AVAudioEngine and AVMIDIPlayer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"0"	"GitHub - dreamwieber/BachPlayground: A Simple Swift Playground that plays a brief piece by Bach with AVAudioEngine and AVMIDIPlayer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 0 dreamwieber/BachPlayground Code Issues 0 Pull requests 0 Pulse Graphs A Simple Swift Playground that plays a brief piece by Bach with AVAudioEngine and AVMIDIPlayer 6 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit fc4f6e0 Aug 2, 2015 dreamwieber Update Contents.swift Permalink Failed to load latest commit information. BachPlayer.playground Update Contents.swift Aug 2, 2015 .gitignore initial commit Aug 1, 2015 LICENSE Initial commit Aug 1, 2015 README.md Update README.md Aug 1, 2015 bach.mid initial commit Aug 2, 2015 README.md BachPlayground A Simple Swift Playground that plays a brief piece by Bach with AVAudioEngine and AVMIDIPlayer To play, simply comment out the stop() method on the last line of the playground. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dreamwieber/BachPlayground"	"A Simple Swift Playground that plays a brief piece by Bach with AVAudioEngine and AVMIDIPlayer."	"true"
"Audio"	"PlayerNode Playground"	"https://github.com/genedelisa/PlayerNodePlayground"	"Playground using AVAudioEngine with a playernode and effects to play an audio file."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"1"	"GitHub - genedelisa/PlayerNodePlayground: Swift 2 playground using AVAudioEngine with a playernode and effects to play an audio file Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 1 genedelisa/PlayerNodePlayground Code Issues 0 Pull requests 0 Pulse Graphs Swift 2 playground using AVAudioEngine with a playernode and effects to play an audio file 2 commits 1 branch 1 release Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. playernodePlayground.playground LICENSE README.md README.md PlayerNodePlayground A Swift 2 Playground example using AVAudioPlayerNode along with effects AVAudioUnitDelay, AVAudioUnitReverb, and AVAudioUnitTimePitch attached to an AVAudioEngine to play an audio file. Blog post for this example. Blog post Buy my kitty Giacomo some cat food Licensing MIT Please read the LICENSE for details. Credits Gene De Lisa's development blog Gene De Lisa's music blog Twitter: @GeneDeLisaDev Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/genedelisa/PlayerNodePlayground"	"Playground using AVAudioEngine with a playernode and effects to play an audio file."	"true"
"Mathematics"	"Lindenmayer Systems"	"https://github.com/henrinormak/lindenmayer"	"A Swift playground exploring Lindemayer systems."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"2"	"GitHub - henrinormak/lindenmayer: A Swift playground exploring Lindemayer systems Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 2 henrinormak/lindenmayer Code Issues 0 Pull requests 0 Pulse Graphs A Swift playground exploring Lindemayer systems 5 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 6a76daa Jan 29, 2016 henrinormak Fix for latest Swift version Permalink Failed to load latest commit information. Lindenmayer.playground Fix for latest Swift version Jan 29, 2016 README.md Added Future Work section Mar 22, 2015 README.md Lindenmayer Playground Inspired by the Mandelbrot playground released by the Swift development team, this playground features Lindenmayer systems, better known as L-Systems. According to Wikipedia, An L-system or Lindenmayer system is a parallel rewriting system and a type of formal grammar. In this playground you can try out rendering various predefined systems or define your own. The Lindenmayer struct used to define a rule set allows for the basic operators, drawing, moving, turning and grouping. For more information, look at the sources attached to the main playground. All examples of systems come from Wikipedia. Author: Henri Normak - @henrinormak Future work It might be interesting to expand this to include stochastic rules and make it more applicable for rendering trees and plants as described in The Algorithmic Beauty of Plants. It would also be cool to have a way of evaluating expressions within replacement rules, such as ""Move forward 0.2 of previous unit size"". Similarly, it would also be interesting to allow more customisation in terms of colours of specific lines etc, not only would that allow more interesting visualisation, it would also help people understand how the rules are evaluated. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/henrinormak/lindenmayer"	"A Swift playground exploring Lindemayer systems."	"true"
"Mathematics"	"Swift Accelerate"	"https://github.com/haginile/SwiftAccelerate"	"Using the Accelerate framework and Swift for Linear Algebra."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"55"	"4"	"7"	"GitHub - haginile/SwiftAccelerate: A playground demoing how to use Accelerate & Swift for Linear Algebra (vector/matrix manipulations) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 55 Fork 7 haginile/SwiftAccelerate Code Issues 1 Pull requests 0 Pulse Graphs A playground demoing how to use Accelerate & Swift for Linear Algebra (vector/matrix manipulations) https://swift.versify-app.com/post/usehnl/ 8 commits 1 branch 0 releases 2 contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 86118eb Jul 19, 2014 haginile Merge pull request #1 from scottsievert/latex … Latex Permalink Failed to load latest commit information. SwiftAccelerate.playground removed some unnecessary casting Jul 12, 2014 LICENSE Initial commit Jul 12, 2014 README.md adding swift syntax highlighting Jul 19, 2014 README.md SwiftAccelerate This note provides a concise tutorial on how you may use Apple's Accelerate framework with the Swift programming language to perform vector/matrix manipulations, including matrix transposes, dot products, matrix inversions, etc. A playground illustrating all the functions discussed here is included. Also, a better formatted version can be accessed at here. Linking Your Project Against Accelerate Select your project by clicking on the blue icon in the top left corner. In the TARGETS list (the panel in the middle), select the target you're compiling and then activate the Build Phases tab. Click on the little triangle in front of Link Binary With Libraries. Click on the + sign and select Accelerate.framework in the popup. Importing Accelerate Now that your project is linked against Accelerate, you can import it in your .swift file by issuing: import Accelerate  Vector & Scalars The general syntax for adding a scalar to a vector and for multiplying or dividing a vector by a scalar is as follows vDSP_vs***D(vector, 1, &scalar, &result, 1, length_of_vector)  The 1s tells the function to operate on each element of the vector. If you replace 1 with 2, it'll operate on every other element instead. Needless to say, for most LA applications, you'll be sticking with 1, as we do for the rest of the tutorial. A few example should make everything crystal clear: var v = [1.0, 2.0] var s = 3.0 var vsresult = [Double](count : v.count, repeatedValue : 0.0) vDSP_vsaddD(v, 1, &s, &vsresult, 1, vDSP_Length(v.count)) vsresult    // returns [4.0, 5.0] vDSP_vsmulD(v, 1, &s, &vsresult, 1, vDSP_Length(v.count)) vsresult    // returns [3.0, 6.0] vDSP_vsdivD(v, 1, &s, &vsresult, 1, vDSP_Length(v.count)) vsresult    // returns [0.333333333333333, 0.666666666666667] Vector & Vector Vector-vector operations pose no challenge to Accelerate and the associated functions look like vDSP_v***D(vector_1, 1, vector_2, 1, &result, 1, length_of_vector)  Here are a few worked-out examples: var v1 = [2.0, 5.0] var v2 = [3.0, 4.0] var vvresult = [Double](count : 2, repeatedValue : 0.0) vDSP_vaddD(v1, 1, v2, 1, &vvresult, 1, vDSP_Length(v1.count)) vvresult    // returns [5.0, 9.0] vDSP_vmulD(v1, 1, v2, 1, &vvresult, 1, vDSP_Length(v1.count)) vvresult    // returns [6.0, 20.0] vDSP_vdivD(v1, 1, v2, 1, &vvresult, 1, vDSP_Length(v1.count)) vvresult    // returns [1.5, 0.8] Dot Product var v3 = [1.0, 2.0] var v4 = [3.0, 4.0] var dpresult = 0.0 vDSP_dotprD(v3, 1, v4, 1, &dpresult, vDSP_Length(v3.count)) dpresult    // returns 11.0 Matrix Multiplication Matrices are passed into Accelerate as 1D arrays. As a result, matrix addition/subtraction is the same as vector addition/subtraction. Matrix multiplication, on the other hand, is a bit more involved and requires this function: vDSP_mmulD(matrix_1, 1, matrix_2, 1, &result, 1,             rows_of_matrix_1, columns_of_matrix_2,             columns_of_matrix_1_or_rows_of_matrix_2) For example,     var m1 = [ 3.0, 2.0, 4.0, 5.0, 6.0, 7.0 ]     var m2 = [ 10.0, 20.0, 30.0, 30.0, 40.0, 50.0]     var mresult = [Double](count : 9, repeatedValue : 0.0)      vDSP_mmulD(m1, 1, m2, 1, &mresult, 1, 3, 3, 2)     mresult    // returns [90.0, 140.0, 190.0, 280.0, 370.0, 270.0, 400.0, 530.0] Matrix Transpose Matrix transpose can be obtained with     vDSP_mtransD(matrix, 1, &result, 1, number_of_rows_of_result, number_of_columns_of_result)  Like this,     var t = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]     var mtresult = [Double](count : t.count, repeatedValue : 0.0)     vDSP_mtransD(t, 1, &mtresult, 1, 3, 2)     mtresult    // returns [1.0, 4.0, 2.0, 5.0, 3.0, 6.0] Matrix Inversion Matrix inversion takes a bit more effort, but can be accomplished with the function below (see Stack Overflow):     func invert(matrix : [Double]) -> [Double] {          var inMatrix = matrix          var pivot : __CLPK_integer = 0         var workspace = 0.0         var error : __CLPK_integer = 0          var N = __CLPK_integer(sqrt(Double(matrix.count)))         dgetrf_(&N, &N, &inMatrix, &N, &pivot, &error)          if error != 0 {             return inMatrix         }          dgetri_(&N, &inMatrix, &N, &pivot, &workspace, &N, &error)         return inMatrix     }       var m = [1.0, 2.0, 3.0, 4.0]     invert(m)    // returns [-2.0, 1.0, 1.5, -0.5] Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/haginile/SwiftAccelerate"	"Using the Accelerate framework and Swift for Linear Algebra."	"true"
"Mathematics"	"Swifty Mathematics"	"https://github.com/DylanModesitt/swiftyMathematics"	"A collection of swift playground about mathematics."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - DylanModesitt/swiftyMathematics: A collection of swift playground about mathematics. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 DylanModesitt/swiftyMathematics Code Issues 0 Pull requests 0 Pulse Graphs A collection of swift playground about mathematics. 3 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 8ab6693 Aug 16, 2015 DylanModesitt Legal changes Permalink Failed to load latest commit information. swiftyMathematics.playground README.md Create README.md Aug 16, 2015 README.md swiftyMathematics A collection of swift playground about mathematics. This is a collection of some mathematical functions I have been working with for my grandfather project ""Logos."" Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DylanModesitt/swiftyMathematics"	"A collection of swift playground about mathematics."	"true"
"Mathematics"	"Numerical Algorithms"	"https://www.raywenderlich.com/99559/numeric-algorithms-using-playgrounds"	"Numerical argorithms playground from Ray Wenderlich."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Numerical Algorithms using Playgrounds <img height=""1"" width=""1"" alt="""" style=""display:none"" src=""https://www.facebook.com/tr?id=915433011818742&amp;ev=PixelInitialized""> Ray Wenderlich RAYWENDERLICH TUTORIALS FOR DEVELOPERS & GAMERS Tutorials for iPhone / iOS Developers and Gamers Site Navigation Write For Us About Written TutorialsWritten LANGUAGES Swift APP DEVELOPMENT iOS Android OS X GAME DEVELOPMENT Apple Game Frameworks Unity OTHER Articles Archive Video TutorialsVideo Podcast Forums Art Store Search Numerical Algorithms using Playgrounds Jean-Pierre Distler on July 2, 2015 Tweet If you're new here, you may want to subscribe to my RSS feed or follow me on Twitter. Thanks for visiting! There’s nothing like lines on graph paper to bring back nightmares from high school.For many problems, no analytic solution exists. For others, there is, but it would take too long to calculate, and In these cases, you need numerical algorithms. Hopefully you didn’t vomit when read numerical algorithms. If you did, well, look on the bright side … you can have lunch again! :] In this tutorial, you’ll learn what numerical algorithms are and how to use them to solve problems that don’t have an analytic solution. You’ll also learn how you can use playgrounds to easily visualize the solutions. If the notion of math doesn’t excite you, nor are you an avid user of physics or computer science, you’ll still find value in this tutorial. All you need is a basic understanding of calculus and some elementary physics. You’ll learn how to solve two different problems with numerical algorithms, but for the sake of learning, both also allow analytic solutions. Though algorithms are ideal for those times when analytics won’t work, it’s easier to understand how they work when you can compare the two methodologies. What are Numerical Algorithms? Simply put, numerical algorithms are methods to solve mathematical problems that don’t rely on a closed-form analytic solution. What is a Closed-Form Analytic Solution? It’s any mathematical formula that you use to solve an exact value by plugging in the values you already know and performing a finite set of operations. More simply put, if you can use algebra to find an expression to solve an unknown value, and all you need to do is substitute the known values and evaluate that expression, then you have a closed-form analytic solution. When to Use Numerical Algorithms For many problems, no analytic solution exists. For others, there is, but it would take too long to calculate, and In these cases, you need numerical algorithms.  For example, imagine that you wrote a physics engine that computes the behavior of many objects in a limited amount of time. In this scenario, you can use numerical algorithms to calculate the behavior much faster. There is a downside: You pay for the faster calculation with less precise results. But in many cases, the result is good enough. Weather forecasting is example of an activity that benefits from the use of numerics. Think about how quickly it evolves and how many factors affect it; it’s a highly complex system and only numerical simulations can handle the task of predicting the future. Maybe a lack of these algorithms is why your iPhone tells you that it’s raining but a look outside says the opposite! Getting Started As a warm up, you’ll play a game, and then you’ll calculate the square root of a given number. For both tasks, you’ll use the bisection method. Surprise! You probably know this method, but maybe not by name. Think back to the childhood game where you choose a number between one and 100, and then someone else has to guess it. The only hint you can give the other person is if the number is bigger or smaller than the guess. Let’s say you’re guessing what I’ve chosen, and you start with one. I tell you the number is higher. Then you choose two, and again, I tell you it’s higher. Now you choose three, then four, and each time I tell you the number is bigger, until you get to five, which is my number. After five steps you find the number — not bad — but if I chose 78, this approach would take quite a bit of time. This game moves much faster when you use the bisection method to find the solution. The Bisection Method You know the number is inside the interval [1,100], so instead of making incremental or even random guesses, you divide this interval into two subintervals of the same size: a=[1,50] and b=[51,100]. Then you determine if the number is inside interval a or b by asking if the number is 50. If the number is smaller than 50, you forget interval b and subdivide interval a again. Then you repeat these steps until you find the number. Here’s an example: My number is 60, and the intervals are a=[1,50] and b=[51,100]. In the first step, you say 50 to test the upper bound of interval a. I tell you the number is bigger, and now you know that the number is in interval b. Now you subdivide b into the intervals c=[51,75] and d=[76,100]. Again, you take the upper bound of interval c, 75, and my answer is that the number is smaller. This means the number must be in interval c, so you subdivide again By using this method, you find the number after just seven steps versus 60 steps with the first approach. 50 -> bigger 75 -> smaller 62 -> smaller 56 -> bigger 59 -> bigger 61 -> smaller 60 -> got it For the square root of a number x, the process looks similar. The square root is between 0 and x, or expressed as an interval it is (0, x]. If the number is bigger than or equal to 1. You can use the interval [1, x]. Dividing this interval brings you to a=(0, x/2] and b=(x/2, x]. If my number is 9, the interval is [1, 9] the divided intervals are a=[1, 5] and b=(5, 9]. The middle m is (1+9)/2 = 5. Next, you check if m*m – x is bigger than the desired accuracy. Is this case, you check if m*m is bigger or smaller than x. If it’s bigger, you use the interval (0,x/2] otherwise (x/2,x] Let’s see this in action, we start with m=5 and a desired accuracy of 0.1: Calculate m*m-x: 5*5-9 = 16 Check if the desired accuracy is reached: 25-11 <= 0.1 ? Search next interval: Is m*m greater than x? Yes 25 is greater than 9, now use the interval [1, 5] with a middle of (1+5)/2 = 3 Calculate m*m-x: 3*3-9 = 0 Check if the desired accuracy is reached: 9-9 <= 0.1 ? Got it. Note: Are you wondering what the different parentheses mean? An interval has the form (lower bound, upper bound) and the different parentheses tell you if one of these bounds is part of the interval. Round parentheses mean the bound is not inside the interval and brackets mean it’s inside. The interval (0, a] contains a but not zero. In the above example, the interval a contains a/2 but not zero, and b contains everything above a/2 up to a. Taking Bisection to Playgrounds At this point, you’re going to take the theory and put it into practice by creating your own bisection algorithm. Create a new playground and add the following function to it. func bisection(x: Double) -> Double { //1     var lower = 1.0     //2     var upper = x     //3     var m = (lower + upper) / 2     var epsilon = 1e-10     //4     while (fabs(m * m - x) > epsilon) {     //5         m = (lower + upper) / 2         if m * m > x {             upper = m         } else {             lower = m         }     }       return m } What does each section do? Sets the lower bound to 1 Sets the upper bound to x Finds the middle and defines the desired accuracy Checks if the operation has reached the desired accuracy If not, this block finds the middle of the new interval and checks which interval to use next To test this function, add this line to your playground. let bis = bisection(2.5) As you can see on the right of the line m = (lower + upper) / 2, this code executes 35 times, meaning this method takes 35 steps to find the result. Now you’re going to take advantage of one of the loveable features of playgrounds — the ability to view the history of a value. Since the bisection algorithm successively calculates more accurate approximations of the actual solution, you can use the value history graph to see how this numerical algorithm converges on the correct solution. Press option+cmd+enter to open the assistant editor, and then click on the rounded button on the right side of the line m = (lower + upper) / 2 to add a value history to the assistant editor. Here you can see the method jumping around the correct value. Ancient Math Still Works The next algorithm you’ll learn dates back to antiquity. It originated in Babylonia, as far back as 1750 B.C, but was described in Heron of Alexandria’s book Metrica around the year 100. And this is how it came to be known as Heron’s method. You can learn more about Heron’s method over here. This method works by using the function , where a is the number for which you want to calculate the square root. If you can find this curve’s zero point — the value of x where the function equals zero — then you have found the square root of a. To do this, you start with an arbitrary starting value of x, calculate the tangent line at this value, and then find the tangent line’s zero point. Then you repeat this using that zero point as the next starting value, and keep repeating until you reach the desired accuracy. Since every tangent moves closer to true zero, the process converges on the true answer. The next graphic illustrates this process by solving with a=9, using a starting value of 1. The starting point at x0=1 generates the red tangent line, producing the next point x1 that generates the purple line, producing the x2 that generates the blue line, finally leading to the answer. Ancient Math, Meet Playgrounds You have something that the Babylonians did not: playgrounds. Check out what happens when you add the following function to your playground: func heron(x: Double) -> Double {   //1   var xOld = 0.0   var xNew = (x + 1.0) / 2.0   var epsilon = 1e-10     //2   while (fabs(xNew - xOld) > epsilon) {     //3     xOld = xNew     xNew = (xOld + x / xOld) / 2   }     return xNew } What’s happening here? Creates variables to store the current result. xOld is the last calculated value andxNew the actual value. A good starting point for this method is found the way xNew is initialized. epsilon is the desired accuracy. In this case, you calculate the square root up to the 10th decimal place. While checks if the desired accuracy is reached. If not, xNew becomes the new xOld, and then the next iteration starts. Check your code by adding the line: let her = heron(2.5) Heron method requires only five iterations to find the result. Click on the rounded button on the right side of the line xNew = (xOld + x / xOld) / 2 to add a value history to the assistant editor, and you’ll see that the first iteration found a good approximation. Meet Harmonic Oscillators In this section, you’ll learn how to use numerical integration algorithms in order to model a simple harmonic oscillator, a basic dynamical system. The system can describe many phenomena, from the swinging of a pendulum to the vibrations of a weight on a spring, to name a couple. Specifically, it can be used to describe scenarios that involve a certain offset or displacement that changes over time. You’ll use the playground’s value history feature to model how this offset value changes over time, but won’t use it to show how your numerical approximation takes you successively closer to the perfect solution. For this example, you’ll work with a mass attached to a spring. To make things easier, you’ll ignore damping and gravity, so the only force acting on the mass is the spring force that tries to pull the mass back to an offset position of zero. With this assumption, you only need to work with two physical laws. Newton’s Second Law: , which describes how the force on the mass changes its acceleration. Hook’s Law:, which describes how the spring applies a force on the mass proportional to its displacement, where k is the spring constant and x is the displacement. Harmonic Oscillator Formula Since the spring is the only source of force on the mass, you combine these equations and write the following: You can write this as: is also known as , which is the square of the resonance frequency. The formula for the exact solution is as follows: A is the amplitude, and in this case it means the displacement, , is known as phase difference. Both are constant values that can be found using initial values. If you say at the time t=0 you have and you find the amplitude and phase difference as: Let’s look at an example. We have a mass of 2kg attached to a spring with a spring constant k=196N/m. At the time t=0 the spring has a displacement of 0.1m. To calculate and we have to calculate . and Take it to the Playground Before you use this formula to calculate the exact solution for any given time step, you need to write some code. Go back to your playground and add the following code at the end: //1 typealias Solver = (Double, Double, Double, Double, Double) -> Void   //2 struct HarmonicOscillator {   var kSpring = 0.0   var mass = 0.0   var phase = 0.0   var amplitude = 0.0   var deltaT = 0.0     init(kSpring: Double, mass: Double, phase: Double, amplitude: Double, deltaT: Double) {     self.kSpring = kSpring     self.mass = mass     self.phase = phase     self.amplitude = amplitude     self.deltaT = deltaT   }     //3   func solveUsingSolver(solver: Solver) {     solver(kSpring, mass, phase, amplitude, deltaT)   } } What’s happening in this block? This defines a typealias for a function that takes five Double arguments and returns nothing. Here you create a struct that describes a harmonic oscillator. This function simply creates Closures to solve the oscillator. Compare to an Exact Solution The code for the exact solution is as follows: func solveExact(amplitude: Double, phase: Double, kSpring: Double, mass: Double, t: Double) {   var x = 0.0   //1   let omega = sqrt(kSpring / mass)     var i = 0.0     while i < 100.0 { //2     x =  amplitude * sin(omega * i + phase)     i += t   } } This method includes all the parameters needed to solve the movement equation. Calculates the resonance frequency. The current position calculates Inside the while loop, and i is incremented for the next step. Test it by adding the following code: let osci = HarmonicOscillator(kSpring: 0.5, mass: 10, phase: 10, amplitude: 50, deltaT: 0.1) osci.solveUsingSolver(solveExact) The solution function is a bit curious. It takes arguments, but it returns nothing and it prints nothing. So what is it good for? The purpose of this function is that, within its while loop, it models the actual dynamics of your oscillator. You’ll observe those dynamics by using the value history feature of the playground. Add a value history to the line x = amplitude * sin(omega * i + phase) and you’ll see the oscillator moving. Now that you have an exact solution working, you can start with the first numerical solution. Euler Method The Euler method is the simplest method for numerical integration. It was introduced in the year 1768 in the book Institutiones Calculi Integralis by Leonhard Euler. To learn more about the Euler method, you can find out here. The idea behind this method is to approximate a curve by using short lines. This is done by calculating the slope on a given point and drawing a short line with the same slope. At the end of this line, you calculate the slope again and draw another line. As you can see, the accuracy depends on the length of the lines. Did you wonder what deltaT is used for? The numerical algorithms you use have a step size, which is important for the accuracy of such algorithms; bigger step sizes cause lower accuracy but faster execution speed and vice versa. deltaT is the step size for your algorithms. You initialized it with a value of 0.1, meaning that you calculated the position of the mass for every 0.1 second. In the case of the Euler method, this means that the lines have a length of 0.1 units on the x-Axis. Before you start coding, you need to have a look again at the formula: This second order differential equation can be replaced with two differential equations of first order. can be written as and this as You get this by using the difference quotient: And you also get those: With these equations, you can directly implement the Euler method. Add the following code right behind solveExact: func solveEuler(amplitude: Double, phase: Double, kSpring: Double, mass: Double, t: Double) {   //1   var x = amplitude * sin(phase)   let omega = sqrt(kSpring / mass)   var i = 0.0   //2   var v = amplitude * omega * cos(phase);   var vold = v   var xoldEuler = x     while i < 100 {     //3     v -= omega * omega  * x * t     //4     x += vold * t     xoldEuler = x       vold = v     i+=t     } } What does this do? Sets the current position and omega. Calculates thee current speed. Makes calculating the new velocity the first order of business inside the while loop. The new position calculates at the end based on the velocity, and at the end, i is incremented by the step size t. Now test this method by adding the following to the bottom of your playground: osci.solveUsingSolver(solveEuler) Then add a value history to the line xoldEuler = x. Take a look at the history, and you’ll see that this method also draws a sine curve with a rising amplitude. The Euler method is not exact, and in this instance the big step size of 0.1 is contributing to the inaccuracy. Here is another image, but this shows how it looks with a step size of 0.01, which leads to a much better solution. So, when you think about the Euler method, remember that it’s most useful for small step sizes, but it also has the easiest implementation. Velocity Verlet The last method is called Velocity Verlet. It works off the same idea as Euler but calculates the new position a slightly different way. Euler calculates the new position, while ignoring the actual acceleration, with the formula . Velocity Verlet takes acceleration into account − this brings better results for the same step size. Add the following code right after solveEuler: func solveVerlet(amplitude: Double, phase: Double, kSpring: Double, mass: Double, t: Double) {   //1   var x = amplitude * sin(phase)   var xoldVerlet = x   let omega = sqrt(kSpring / mass)     var v = amplitude * omega * cos(phase)   var vold = v   var i = 0.0     while i < 100 {     //2     x = xoldVerlet + v * t + 0.5 * omega * omega * t * t     v -= omega * omega * x * t     xoldVerlet = x     i+=t   } } What’s going on here? Everything until the loop is the same as before. Calculates the new position and velocity and increments i. Again, test the function by adding this line to the end of your playground: osci.solveUsingSolver(solveVerlet) And also add a value history to the line xoldVerlet = x Where to Go From Here? You can download the completed project over here. I hope you enjoyed your trip into the numerical world, learned a few things about algorithms, and even a few fun facts about the ancient world to help you on your next trivia night. Before you start exploring more, you should play with different values for deltaT, but keep in mind that playgrounds are not that fast and choosing a small step size can freeze Xcode for a long time — my MacBook froze for several minutes after I changed deltaT to 0.01 to make the second Euler screenshot. With the algorithms you learned, you can solve a variety of problems like the n-body problem. If you are feeling a little shaky about algorithms in general, you should check out MIT’s Introductions to Algorithms class on YouTube. Finally, keep check back to the site for more tutorials on this subject. If you have questions or ideas about other ways to use numerical algorithms, bring it to the forums by commenting below. I look forward to hearing your thoughts and talking about all the cool things math can do for your apps. Tweet Jean-Pierre Distler Jean-Pierre Distler is an iOS Developer in Braunfels, Germany. He develops apps for 3+ years and is also interested in IT-Security and penetration testing. When he's not on his computer he enjoys time with his daughters. You can read earlier discussions of this topic in the archives Learn how to use numerical algorithms in iOS by using Playgrounds. ​ Other Items of Interest raywenderlich.com Weekly Sign up to receive the latest tutorials from raywenderlich.com each week, and receive a free epic-length tutorial as a bonus! Advertise with Us! Advertise Here! Our Books Our Team Video Team ... 9 total! Swift Team ... 15 total! iOS Team ... 47 total! Android Team ... 15 total! OS X Team ... 12 total! Apple Game Frameworks Team ... 14 total! Unity Team ... 10 total! Articles Team ... 8 total! About RayWenderlich.com Recent Forum Posts Part 2: CollectionView Tutorial: I am getting an error removing the cell method below: **The ... in UICollectionView Tutorial Part 2: Reusable Views and Cell Selection Hi, I want to display a NSLabel on top of a Map, for displaying user coordinates, or other things. ... in NSLabel on MkMapVISIT THE FORUM » Like Us on Facebook Ray Wenderlich 12333 people like Ray Wenderlich Our Recent Tweets Finished with arugula, ricotta, and balsamic https://t.co/sK3ZFlvOEL Janie Clayton -4 seconds agoFOLLOW US ON TWITTER © 2016 Razeware LLC. All rights reserved. WRITE FOR US FAQ ADVERTISE CONTACT"	"null"	"null"	"Numerical argorithms playground from Ray Wenderlich."	"true"
"Mathematics"	"Swift Natural Numbers"	"https://github.com/jakebromberg/Swift-Natural-Numbers"	"A playground for implementing the natural numbers and more concepts in number theory."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"1"	"1"	"GitHub - jakebromberg/Swift-Natural-Numbers: A Swift playground for implementing the natural numbers and more concepts in number theory. The inspiration for this was taken from fewbutripe.com Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 1 jakebromberg/Swift-Natural-Numbers Code Issues 0 Pull requests 0 Pulse Graphs A Swift playground for implementing the natural numbers and more concepts in number theory. The inspiration for this was taken from fewbutripe.com 29 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. Natural Numbers.playground .gitignore README.md README.md Swift Natural Numbers A Swift playground for implementing the natural numbers and more concepts in number theory. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jakebromberg/Swift-Natural-Numbers"	"A playground for implementing the natural numbers and more concepts in number theory."	"true"
"Libraries"	"Argo Playground"	"https://github.com/renrawnalon/ArgoPlayground"	"JSON decoding with Argo."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - renrawnalon/ArgoPlayground: A simple project that imports json parsing library Argo and plays around with json decoding in an easy to manipulate playground format. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 renrawnalon/ArgoPlayground Code Issues 0 Pull requests 0 Pulse Graphs A simple project that imports json parsing library Argo and plays around with json decoding in an easy to manipulate playground format. 31 commits 1 branch 0 releases 1 contributor Swift 98.5% Ruby 1.5% Swift Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit cc36233 Jan 8, 2016 renrawnalon Added convenience static request functions Permalink Failed to load latest commit information. ArgoPlayground.playground Added convenience static request functions Jan 8, 2016 ArgoTest.xcodeproj Moved Argo code to Playground Dec 22, 2015 ArgoTest.xcworkspace Moved Argo code to Playground Dec 22, 2015 ArgoTest Fixed SwiftLint warnings and errors Dec 22, 2015 .gitignore Added Podfile with Argo and Curry Dec 22, 2015 .swiftlint.yml Added .swiftlint.yml file to check swift syntax Dec 22, 2015 Podfile Added Moya and RxSwift to Podfile Jan 6, 2016 README.md Added convenience static request functions Jan 8, 2016 README.md ArgoPlayground A simple project that imports the json parsing library Argo and plays around with json decoding in an easy to manipulate playground format. This project has now been split into two playground pages. The first page uses dummy json data to specifically test the various aspects of parsing with Argo. The second page, however, also imports RxSwift and Moya in order to test parsing json results from real apis. I chose the Github api to test because it is public, easy to use, and it provides json blobs along with its various well defined errors, which is something else I wanted to test. Using this, I would like to attempt to intellegently parse both the json returned in the success case, as well as the json returned in the failure case. Suggestions about how I could improve any of the code or thoughts on the concepts themselves are very welcome, so feel free to leave comments! Moya+Argo(+RxSwift) In the second page, I reimplement ivanbruel's Moya-ObjectMapper extension with Argo instead of ObjectMapper as the json parsing framework. Currently, I only have this solution implemented in this playground, but plan on turning it into a micro-framework like Moya-ObjectMapper so that other Argo users can easily use it as well. Using the map functions of this extension, it becomes possible to write clean Moya code with free json parsing like this: Provider.request(.Info)     .mapDecodable()     .subscribe { (event: Event<InfoModel>) in         switch event {         case .Next(let model):             print(model)         case .Error(let error):             print(error)         default:             break         } }  In this implementation, I provide functions that return either the raw value type T or the Decoded type, leaving it to the user to decide how they wany their error information returned. In the case the T is the return type, the parsing error provided in Decoded.Error(error) is thrown and can be caught in either the Error(error) case of Event<T> from RxSwift's Observable or the Failure(error) case of Response<T> from Moya. This seems like the preferable solution, because it keeps all of the error logic in on place. The resulting code for making an api call would look something like this: switch event { // (event: Event<InfoModel>) case .Next(let model):      print(model) case .Error(let error): // This catches both Moya errors and Argo parsing errors!!      print(error) default:      break }  The alternitave would cause Moya errors and Argo errors to be returned to two different places, which doesn't make sense. The resuling code for making an api call would look like this: switch event { // (event: Event<Decoded<InfoModel>>)  case .Next(let decodedModel):     switch decodedModel {     case .Success(let model):         print(model)     case .Failure(let error): // This catches only Argo errors.         print(error)     } case .Error(let error): // This catches only Moya errors.     print(error) default:     break }  Arguably, the first approach is much more userful and managable. In this project, I have included both solutions for the sake of completeness, but when released as a framework, it would probably make sense to exclude the second approach all together, in order to avoid confusion and bad practive. A note on authenticating the Github api The code, as is, performs unauthenticated access to the Github api, which has an inherent request limit of 60 requests per hour. However, this limit can be increased to 5000 requests per hour by authenticating requests. This is easily done by providing an access token in the request header. Information on generating Github access tokens can be found here, then authenticated requests can be performed by changing this: private static let endpointClosure = { (target: GithubAPI) -> Endpoint<GithubAPI> in     let url = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString     let endpoint = Endpoint<GithubAPI>(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)      return endpoint }  to this: private static let endpointClosure = { (target: GithubAPI) -> Endpoint<GithubAPI> in     let url = target.baseURL.URLByAppendingPathComponent(target.path).absoluteString     let endpoint = Endpoint<GithubAPI>(URL: url, sampleResponseClosure: {.NetworkResponse(200, target.sampleData)}, method: target.method, parameters: target.parameters)       return endpoint.endpointByAddingHTTPHeaderFields([""Authorization"": ""token <Insert token here>""]) }  Here is an example of how the access token header field declaration looks with a dummy token: [""Authorization"": ""token 123456789012345678901234567890""]  Installation Run pod install with CocoaPods 0.36 or newer. Open ArgoTest.xcworkspace to edit playground with Cocoapods imports. Run the blank project once to build the pods. Optional Install SwiftLint using Homebrew to enforce Swift style and conventions. brew install swiftlint  or Go to realm/SwiftLint to build from source and get more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/renrawnalon/ArgoPlayground"	"JSON decoding with Argo."	"true"
"Libraries"	"Parse Playground"	"https://github.com/ultrasaurus/ParsePlayground"	"Experimenting with Parse.com in Swift."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"0"	"1"	"GitHub - ultrasaurus/ParsePlayground: iOS playground for experimenting with Parse.com data in Swift 2.0 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 0 Star 2 Fork 1 ultrasaurus/ParsePlayground Code Issues 0 Pull requests 0 Pulse Graphs iOS playground for experimenting with Parse.com data in Swift 2.0 4 commits 1 branch 0 releases Fetching contributors Swift 68.8% Ruby 31.2% Swift Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ca1fe9a Jan 1, 2016 ultrasaurus additional Parse code & notes Permalink Failed to load latest commit information. ParsePlayground.xcodeproj basic parse playground Jan 1, 2016 ParsePlayground.xcworkspace install pods Dec 31, 2015 ParsePlayground additional Parse code & notes Jan 3, 2016 Pods additional Parse code & notes Jan 3, 2016 doc/parse additional Parse code & notes Jan 3, 2016 experiment.playground additional Parse code & notes Jan 3, 2016 .gitignore additional Parse code & notes Jan 3, 2016 Gemfile additional Parse code & notes Jan 3, 2016 Gemfile.lock additional Parse code & notes Jan 3, 2016 Podfile install pods Dec 31, 2015 Podfile.lock install pods Dec 31, 2015 README.md additional Parse code & notes Jan 3, 2016 README.md Parse Playouground For experimenting with Parse.com in Swift Tested with: OSX 10.10.5 (Yosemite) Xcode 7.2 Ruby 2.2.4 Cocoapod 0.39.0 Set up Parse Make an app in Parse, after creating an account, create an app: Then you should see something like this: Add a class called ""item"" Then you will see the empty list of objects: Add a column called ""info"" then add a few objects Play with XCode and Swift download the files from this repo in XCode, open ParsePlayground.xcworkspace in experiment.playground find the following two lines of code and fill in your app ID and client key from parse Parse.setApplicationId(""-redacted-"",   clientKey: ""-redacted-"")  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ultrasaurus/ParsePlayground"	"Experimenting with Parse.com in Swift."	"true"
"Libraries"	"S3Uploader"	"https://github.com/djromero/S3UploaderPlayground"	"A playground to upload images to AWS S3."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"0"	"GitHub - djromero/S3UploaderPlayground: Xcode 7 playground to upload a single image to AWS S3. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 0 djromero/S3UploaderPlayground Code Issues 0 Pull requests 0 Pulse Graphs Xcode 7 playground to upload a single image to AWS S3. 1 commit 1 branch 0 releases Fetching contributors Swift 90.7% Ruby 4.9% Objective-C 4.4% Swift Ruby Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit e357293 Jan 16, 2016 djromero Upload an image to S3 in swift. … The relevant bits from https://github.com/awslabs/aws-sdk-ios-samples/tree/master/S3TransferManager-Sample/Swift to upload an image to S3 in swift. Permalink Failed to load latest commit information. AWS.xcworkspace Upload an image to S3 in swift. Jan 16, 2016 AWS Upload an image to S3 in swift. Jan 16, 2016 S3Uploader.playground Upload an image to S3 in swift. Jan 16, 2016 .gitignore Upload an image to S3 in swift. Jan 16, 2016 Podfile Upload an image to S3 in swift. Jan 16, 2016 Podfile.lock Upload an image to S3 in swift. Jan 16, 2016 README.md Upload an image to S3 in swift. Jan 16, 2016 README.md Playground to upload a single image to AWS S3. The relevant bits from S3TransferManager-Sample to upload an image to S3 in swift. Requirements: pod install Build the AWS project to make AWS frameworks available to the playground Configure your AWS Cognito pool ID, region and S3 bucket name See how to configure policies to allow a cognito pool to access S3: http://docs.aws.amazon.com/mobile/sdkforios/developerguide/s3transfermanager.html Give public access to the bucket: {     ""Statement"": [         {             ""Action"": ""s3:GetObject"",             ""Effect"": ""Allow"",             ""Principal"": ""*"",             ""Resource"": ""arn:aws:s3:::your-bucket-name/*"",             ""Sid"": ""AddPerm""         }     ] }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/djromero/S3UploaderPlayground"	"A playground to upload images to AWS S3."	"true"
"Libraries"	"100 AudioKit Playgrounds"	"http://audiokit.io/playgrounds/"	"Audio synthesis and processing with AudioKit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2099"	"136"	"275"	"GitHub - audiokit/AudioKit: Open-source audio synthesis, processing, & analysis platform. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 136 Star 2,099 Fork 275 audiokit/AudioKit Code Issues 0 Pull requests 0 Pulse Graphs Open-source audio synthesis, processing, & analysis platform. http://audiokit.io/ 1,928 commits 3 branches 16 releases 19 contributors Swift 37.0% C 23.5% Objective-C 16.2% Objective-C++ 15.2% C++ 7.9% Shell 0.2% Swift C Objective-C Objective-C++ C++ Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags XCode8-Swift3 develop master Nothing to show v3.1.3 v3.1.2 v3.1.1 v3.1 v3.0.1 v3.0 v2.3 v2.2-08-23-2015 v2.1.1-05-06-2015 v2.1-04-29-2015 v2.0.1-04-07-2015 v2.0-03-26-2015 v1.3-02-16-2015 v1.2-01-04-2015 v1.1-12-12-2014 v1.0-11-05-2014 Nothing to show New pull request Latest commit 62bb5f5 Jun 15, 2016 aure committed on GitHub Merge pull request #411 from zmcartor/master … setNeedsDisplay not needed Permalink Failed to load latest commit information. AudioKit.xcworkspace Revert ""Remove unnecessary workspace"" Feb 12, 2016 AudioKit Minor AKMicrophoneRecorder Jun 9, 2016 Examples setNeedsDisplay not needed Jun 15, 2016 Frameworks Updated doc to mention setting for Objective-C projects. Apr 11, 2016 Tests Removed ancient testing setup May 23, 2016 .gitignore Refine .gitignore to not exclude certain workspace files. Jan 9, 2016 .travis.yml Updating travis' osx image Jan 28, 2016 AudioKit.podspec.json Bumping version number to 3.1.3 May 25, 2016 LICENSE Fix LICENSE year and link, added contributor links Feb 1, 2016 README.md Merge branch 'develop' May 25, 2016 VERSION Bumping version number to 3.1.3 May 25, 2016 README.md AudioKit V3 AudioKit is an audio synthesis, processing, and analysis platform for OS X, iOS, and tvOS. This document serves as a one-page introduction to AudioKit, but we have much more information available on the AudioKit website at http://audiokit.io/ If you need support, the best thing to do is to join AudioKit's google group: https://groups.google.com/forum/#!forum/audiokit Version 3 The third major revision of AudioKit has been completely rewritten to offer the following improvements over previous versions: Installation as a framework Integrated with CoreAudio audio units from Apple No external dependencies Can use opcodes from Faust, Chuck, STK, Csound, and others Many included Xcode Swift playgrounds and quite a bit more. There are things that version 2 had that are not yet part of version 3, but rather than trying to support version 2, let us know what you need to do, and we'll port it over to version 3 upon request. Key Concepts Nodes Nodes are interconnectable signal processing components. Each node has at least an ouput and most likely also has parameters. If it is processing another signal, the node will also have an input. Operations Operations are similar to nodes, except that they are a series of signal processing components that exist inside of a single node. Operations can be used as parameters to other operations to create very complex processing results. Taps Taps use nodes as their data source, but do not redirect the audio signal away from the source nodes output into other nodes. This allows a tap to be moved from node to node more freely and can be added after the audio signal path has started. Installation Installation can be achieved in the usual ways for a framework. This is explained in more detail in the INSTALL.md file in the Frameworks directory. Installation with CocoaPods and Carthage is also planned but may not come with the first release. Example Code There are three Hello World projects, one for each of the Apple platforms: OSX, iOS, and tvOS. They simply play an oscillator and display the waveform. The examples rely on the frameworks being built so you can either download the precompiled frameworks or build them on your own: $ cd Frameworks $ ./build_frameworks.sh  Hello World basically consists of just a few sections of code: Creating the sound, in this case an oscillator: var oscillator = AKOscillator()  Telling AudioKit where to get its audio from (ie. the oscillator): AudioKit.output = oscillator  Starting AudioKit: AudioKit.start()  And then responding to the UI by changing the oscillator: if oscillator.isPlaying {     oscillator.stop() } else {     oscillator.amplitude = random(0.5, 1)     oscillator.frequency = random(220, 880)     oscillator.start() }  Playgrounds Because Playgrounds have very different capabilities depending on whether they are for OSX or iOS, we have two sets of playgrounds for each OS. At this point tvOS behaves very much like iOS so there is no set of playgrounds explicitly for tvOS. AudioKit for iOS Playgrounds There are many playground pages within the AudioKit for iOS Playground. Each playground includes a demo of a node or operation or an example of sound design. The first playground is a Table of Contents in which the playgrounds are organized via markup. The playground may also be opened up to view the playgrounds alphabetically. AudioKit for OS X Playgrounds OS X Playgrounds have slightly different capabilities from iOS ones, so while most playgrounds are the same across the two platforms, a few playgrounds only exist on one or the other. As of this writing, access to a microphone is only capable on the OS X playgrounds, for instance. Tests So far, the only testing that we do automatically through Travis is to ensure that all of the projects included with AudioKit build successfully. AudioKit version 2 was heavily tested, but at the time of this writing AudioKit 3 does not have a test suite in place. This is high on our priority list after an initial release. Package Managers You can easily add the framework to your project by using Carthage. Just use the following in your Cartfile: github ""audiokit/AudioKit""  If you use CocoaPods, you can also easily get the latest AudioKit binary framework for your project. Use this in your Podfile: pod 'AudioKit', '~> 3.1'  About Us AudioKit was created by the following team whose contributions are fully chronicled in Github, and summarized below in alphabetical order by first name: Aurelius Prochazka: Primary programmer of AudioKit. Lives for this stuff. Your life line if you need help. Jeff Cooper: Rearchitected all things MIDI, sampler, and sequencer related in AudioKit 3. Matthew Fecher: Sound design, graphic design, and programming of the Analog Synth X example. Nicholas Arner: Longtime contributor to AudioKit and AudioKit's web site. Paul Batchelor: The author of Soundpipe, and Sporth, which serve as two primary audio engines in AudioKit 3. Simon Gladman: Longtime user of AudioKit, contributed his AudioKitParticles project to AudioKit 3. Stephane Peter: Installation and configuration czar and code reviewer. Syed Haris Ali: The author of EZAudio which is AudioKit's included waveform plotter and FFT analysis engine. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/audiokit/AudioKit"	"Audio synthesis and processing with AudioKit."	"true"
"Libraries"	"AIToolbox"	"https://github.com/KevinCoble/AIToolbox/tree/master/Playgrounds"	"A set of playgrounds showing machine learning algorithms, all implemented with pieces of the AIToolbox framework code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"414"	"20"	"34"	"AIToolbox/Playgrounds at master · KevinCoble/AIToolbox · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 414 Fork 34 KevinCoble/AIToolbox Code Issues 1 Pull requests 0 Pulse Graphs Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show Create new file Find file History AIToolbox/Playgrounds/ Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink .. Failed to load latest commit information. LinearRegression.playground NeuralNetwork.playground SupportVectorMachine.playground Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KevinCoble/AIToolbox/tree/master/Playgrounds"	"A set of playgrounds showing machine learning algorithms, all implemented with pieces of the AIToolbox framework code."	"true"
"Libraries"	"Realm Swift Playground"	"https://github.com/willowtreeapps/RealmSwiftPlayground"	"A playground that demos the basic features of Realm in swift."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"6"	"0"	"GitHub - willowtreeapps/RealmSwiftPlayground: A playground that demos the basic features of Realm in swift Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 0 Fork 0 willowtreeapps/RealmSwiftPlayground Code Issues 0 Pull requests 0 Pulse Graphs A playground that demos the basic features of Realm in swift 5 commits 1 branch 0 releases Fetching contributors Swift 96.8% Ruby 3.2% Swift Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. Pods RealmSwift.playground RealmSwift.xcodeproj RealmSwift.xcworkspace .gitignore Podfile Podfile.lock README.md README.md RealmSwiftPlayground A playground that demos the basic features of Realm in swift Open RealmSwift.xcworkspace and dive in! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/willowtreeapps/RealmSwiftPlayground"	"A playground that demos the basic features of Realm in swift."	"true"
"Playground Sets"	"Public Extensions"	"https://github.com/Jasdev/Public-Extension"	"A set of useful extensions from."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"97"	"9"	"6"	"GitHub - Jasdev/Public-Extension: A weekly log of handy Swift extensions Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 97 Fork 6 Jasdev/Public-Extension Code Issues 1 Pull requests 0 Pulse Graphs 🔧 A weekly log of handy Swift extensions 119 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 04ca255 Jun 23, 2016 Jasdev Adding UISplitViewController extension Permalink Failed to load latest commit information. PublicExtension.playground Adding UISplitViewController extension Jun 23, 2016 .gitignore Testing ignoring generate playground files Jun 2, 2016 README.md Adding an advanceBy function to Range's May 30, 2016 README.md Public-Extension A log of handy @SwiftLang extensions. Created by @jasdev. Subscribe To follow along, each extension will be tweeted from @PublicExtension with sample usages and a link to the code in this repository. Structure Each extension will be added to the Playground file in this repository. Types that are being extended will have their own page! To view the playground with rendered documentation, make sure to check 'Render Documentation' in the Utilities pane of Xcode! Suggestions If you have any suggested extensions, please DM them on Twitter with a gist! 💙 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Jasdev/Public-Extension"	"A set of useful extensions from."	"true"
"Playground Sets"	"@PublicExtension"	"https://twitter.com/publicextension"	"A set of useful extensions from."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Public Extension (@PublicExtension) | Twitter Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij Public Extension @PublicExtension Tweety 92 Obserwowani 1 Obserwujący 600 Polubienia 34   Więcej Polubienia Wyłącz wyciszenie @PublicExtension Wycisz @PublicExtension Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Public Extension @PublicExtension A log of handy @SwiftLang extensions by @jasdev. Suggestions are welcome! Brooklyn, NY github.com/Jasdev/Public-… Dołączył październik 2015 Data ur. 09 października 72 zdjęcia lub filmy Zdjęcia i filmy Tweety Tweety Tweety i odpowiedzi Multimedia @PublicExtension jest zablokowany Czy na pewno chcesz zobaczyć te tweety? Zobaczenie tweetów nie odblokuje @PublicExtension. Pokaż Tweety Zamknij Public Extension obserwuje Public Extension ‏ @PublicExtension 24.06 : Easily access master/detail view controllers on UISplitViewController! h/t @soffes https://github.com/Jasdev/Public-Extension/blob/04ca2555b9c9149cc6bb657ea68f69b998a799c0/PublicExtension.playground/Pages/UISplitViewController.xcplaygroundpage/Contents.swift#L5-L20 …pic.twitter.com/z9zYu9y3oK 0 podanych dalej 11 polubionych Odpowiedz Podaj dalej Podane dalej Polub 11 Polubione 11 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 22.06 : Lazily load the unique elements in a SequenceType! h/t @aligatr https://github.com/Jasdev/Public-Extension/blob/d403af27f6419f6e21c59f918810c43e5b705ff0/PublicExtension.playground/Pages/SequenceType.xcplaygroundpage/Contents.swift#L3-L23 …pic.twitter.com/g2yH7xPMRd 3 podane dalej 15 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 15 Polubione 15 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 17.06 : Desaturate a UIColor! h/t @soffes https://github.com/Jasdev/Public-Extension/blob/f36ba1eba622570d8055049e0f16c5b23fbc3438/PublicExtension.playground/Pages/UIColor.xcplaygroundpage/Contents.swift#L16-L25 …pic.twitter.com/ciUgH4z38H 2 podane dalej 17 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 17 Polubione 17 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension podał/a dalej Jasdev Singh ‏ @jasdev 13.06 Upper Market, San Francisco In SF for the week for #WWDC! If we haven’t caught up in a while or met (yet), I’d love to 1 podany dalej 20 polubionych Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 20 Polubione 20 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 31.05 : Advance a Range by a constant amount! h/t @calebd https://github.com/Jasdev/Public-Extension/blob/e41f2f5e3751d4584476d86974bb18db9cfd35e1/PublicExtension.playground/Pages/Range.xcplaygroundpage/Contents.swift#L24-L29 …pic.twitter.com/zvlaGExxQb 1 podany dalej 4 polubione Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 4 Polubione 4 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 25.05 : Convert unsigned integers to their Roman numeral representation! h/t @kumo @soffes https://github.com/Jasdev/Public-Extension/blob/8b14bc90c9d38f10da9c57f02b7dd99585af08c5/PublicExtension.playground/Pages/UInt.xcplaygroundpage/Contents.swift#L3-L27 …pic.twitter.com/LUosFWC8V8 0 podanych dalej 12 polubionych Odpowiedz Podaj dalej Podane dalej Polub 12 Polubione 12 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 13.05 : Easily clamp Comparables to intervals! h/t @aligatr, @khanlou https://github.com/Jasdev/Public-Extension/blob/86eb3a309631834d206f5d7f42896dd047d61336/PublicExtension.playground/Pages/Comparable.xcplaygroundpage/Contents.swift#L3-L12 …pic.twitter.com/CC8RbIwxXP 0 podanych dalej 9 polubionych Odpowiedz Podaj dalej Podane dalej Polub 9 Polubione 9 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 12.05 : Adding an emoji character set to NSCharacterSet h/t @_matthewpalmer https://github.com/Jasdev/Public-Extension/blob/987a5affeab4f78e30b9433867f0564db91b9647/PublicExtension.playground/Pages/NSCharacterSet.xcplaygroundpage/Contents.swift#L5-L13 …pic.twitter.com/78jrNfsWTO 2 podane dalej 7 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 7 Polubione 7 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 11.05 : Nifty trick to invert a Bool h/t @Kametrixom https://github.com/Jasdev/Public-Extension/blob/996d5da4ad53846df04467ad5655c51f86d2d8e0/PublicExtension.playground/Pages/Bool.xcplaygroundpage/Contents.swift#L3-L8 …pic.twitter.com/6DTBZ2DSGV 2 podane dalej 5 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 10.05 : Cancel an existing gesture recognizer touch ht @bukovinski, http://stackoverflow.com/a/4167471  https://github.com/Jasdev/Public-Extension/blob/8d06643ec186786faa3e226efabd1bb1e5f8de47/PublicExtension.playground/Pages/UIGestureRecognizer.xcplaygroundpage/Contents.swift#L11-L17 …pic.twitter.com/tfAtahF2ow 0 podanych dalej 6 polubionych Odpowiedz Podaj dalej Podane dalej Polub 6 Polubione 6 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 9.05 : Factory method for Storyboard initialization ht @sandofsky, https://twitter.com/sandofsky/status/725385648761270272 … https://github.com/Jasdev/Public-Extension/blob/41b2df4262fc8378d0df644bc98797d6a38f7257/PublicExtension.playground/Pages/Miscellaneous.xcplaygroundpage/Contents.swift#L27-L42 …pic.twitter.com/Mlchw4xaws 0 podanych dalej 10 polubionych Odpowiedz Podaj dalej Podane dalej Polub 10 Polubione 10 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 26.04 : Quickly take the floor and ceiling of a CGRect! h/t @soffes https://github.com/Jasdev/Public-Extension/blob/e86989c6422df84b37788e115e9267d8d9d9fde4/PublicExtension.playground/Pages/CGRect.xcplaygroundpage/Contents.swift#L5-L24 …pic.twitter.com/7PBMbcdYYB 0 podanych dalej 3 polubione Odpowiedz Podaj dalej Podane dalej Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 25.04 : Return a font with monospaced numbers! h/t @soffes https://github.com/Jasdev/Public-Extension/blob/e86989c6422df84b37788e115e9267d8d9d9fde4/PublicExtension.playground/Pages/UIFont.xcplaygroundpage/Contents.swift#L5-L19 …pic.twitter.com/dUrO1h6OPq 1 podany dalej 5 polubionych Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 22.04 : Basic ""time ago"" implementation on NSDate! h/t @soffes https://github.com/Jasdev/Public-Extension/blob/a39bd8b5076e195c669a62b6600a1a6d9e819c67/PublicExtension.playground/Pages/NSDate.xcplaygroundpage/Contents.swift#L15-L39 …pic.twitter.com/71Wvkjfl1V 1 podany dalej 9 polubionych Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 9 Polubione 9 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 21.04 : Adding a subscript to NSCache! h/t @soffes https://github.com/Jasdev/Public-Extension/blob/8d3504dcb9097713cb08f54f48d1afb017983312/PublicExtension.playground/Pages/NSCache.xcplaygroundpage/Contents.swift#L5-L20 …pic.twitter.com/Vs2L0AwJTX 4 podane dalej 12 polubionych Odpowiedz Podaj dalej 4 Podane dalej 4 Polub 12 Polubione 12 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 20.04 : Create multiple UIGestureRecognizer dependencies in one call! https://github.com/Jasdev/Public-Extension/blob/686b6752bf412db191053100c7ed96b409443163/PublicExtension-iOS.playground/Pages/UIGestureRecognizer.xcplaygroundpage/Contents.swift#L5-L9 …pic.twitter.com/iOhdzwUs7m 0 podanych dalej 5 polubionych Odpowiedz Podaj dalej Podane dalej Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 19.04 : Avoid copying references when using joinWithSeperator w/ intersperse! h/t @irace https://github.com/Jasdev/Public-Extension/blob/c51f79e25ad52c2b6c4c3208de03a7c07dc4b70f/PublicExtension.playground/Pages/CollectionType.xcplaygroundpage/Contents.swift#L86-L98 …pic.twitter.com/lIxIQIuXod 0 podanych dalej 7 polubionych Odpowiedz Podaj dalej Podane dalej Polub 7 Polubione 7 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 18.04 : Wrap `fatalError` for ErrorTypes that also conform to CustomStringConvertible! https://github.com/Jasdev/Public-Extension/blob/3dce78a9823d14e1d7f555ca870decf723a52d18/PublicExtension-iOS.playground/Pages/Miscellaneous.xcplaygroundpage/Contents.swift#L21-L23 …pic.twitter.com/gY039EVyT5 0 podanych dalej 8 polubionych Odpowiedz Podaj dalej Podane dalej Polub 8 Polubione 8 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 11.04 : Quickly initialize an `NSDateFormatter` with a format string! h/t @ZackShapiro https://github.com/Jasdev/Public-Extension/blob/51c902f48539862f9b974d4d0e297f4c2ed4e224/PublicExtension-iOS.playground/Pages/NSDateFormatter.xcplaygroundpage/Contents.swift#L5-L12 …pic.twitter.com/bpvuXfCWQ3 1 podany dalej 10 polubionych Odpowiedz Podaj dalej 1 Podane dalej 1 Polub 10 Polubione 10 Więcej Kopiuj link do tweeta Zamieść tweeta Public Extension ‏ @PublicExtension 7.04 : An `associatedtype` and `typealias` in the same protocol in Swift 2.2! https://github.com/Jasdev/Public-Extension/blob/489e98133e9da63efe67e09b2ea3b5d87d619499/PublicExtension-iOS.playground/Pages/Miscellaneous.xcplaygroundpage/Contents.swift#L13-L19 …pic.twitter.com/EvYIRvdVbp 0 podanych dalej 3 polubione Odpowiedz Podaj dalej Podane dalej Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta @PublicExtension nie ma jeszcze wpisów. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się Może Ci się też spodobać · Odśwież Brooklyn, NY © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"A set of useful extensions from."	"true"
"Playground Sets"	"Sketchytech's Playgrounds"	"https://github.com/sketchytech/SwiftPlaygrounds"	"Various Playgrounds."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"2"	"0"	"GitHub - sketchytech/SwiftPlaygrounds: Swift Playgrounds Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 7 Fork 0 sketchytech/SwiftPlaygrounds Code Issues 0 Pull requests 0 Pulse Graphs Swift Playgrounds http://sketchytech.blogspot.com 15 commits 1 branch 0 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 5bb61e1 Jul 7, 2015 Anthony Levings fixed anchors display Permalink Failed to load latest commit information. AutoLayoutProgrammaticConstraints.playground fixed anchors display Jul 7, 2015 JoinFlatMapReduce.playground Delete UserInterfaceState.xcuserstate Jul 4, 2015 StackViewPlayground.playground fixed anchors display Jul 7, 2015 UnsafeMutablePointerPlayground.playground Delete UserInterfaceState.xcuserstate Jul 4, 2015 LICENSE Initial commit Jun 30, 2015 README.md added a little detail Jun 30, 2015 README.md Swift Playgrounds Plan is to include all future playgrounds here as a form of organization. We'll see how that goes! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sketchytech/SwiftPlaygrounds"	"Various Playgrounds."	"true"
"Playground Sets"	"Parks And Recreation"	"https://github.com/zwaldowski/ParksAndRecreation"	"Great collection of interesting playgrounds, for fun and for profit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"61"	"4"	"4"	"GitHub - zwaldowski/ParksAndRecreation: Various Swift playgrounds, for fun and for profit. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 61 Fork 4 zwaldowski/ParksAndRecreation Code Issues 0 Pull requests 1 Pulse Graphs Various Swift playgrounds, for fun and for profit. 73 commits 2 branches 0 releases 2 contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags geometry-only-swift_1.2 master Nothing to show Nothing to show New pull request Latest commit 4cfea80 Jul 3, 2016 zwaldowski [CustomTruncation] Prototype Swift 3 version Permalink Failed to load latest commit information. Swift-2 [Debounce] Add new playgrounds for Swift 2 and 3 Jun 19, 2016 Swift-3 [CustomTruncation] Prototype Swift 3 version Jul 3, 2016 .gitignore Initial commit Aug 2, 2015 LICENSE Fix location of README and sundries Jun 19, 2016 README.md [Notifier] Add Swift 3 version Jul 2, 2016 README.md ParksAndRecreation Various Swift playgrounds, for fun and for profit. Index AnyCollectionSlice Derived from @krzyzanowskim's blog post: use protocol extension to split any collection into a group of slices. Think flatten(), but in reverse. ConcretePlusProtocol If you're hurting for Objective-C's MyClassType<SomeProtocolType> *, try this on for size. Custom Truncation Use TextKit to perform custom truncation with high performance. Also an example of creating building a drop-in UILabel backed by TextKit. Debounce Swift 2 Swift 3 Use DispatchSource to coalesce calls that shouldn't be called more than once per runloop iteration, like UI reconfiguration. Geometry Mathematical operators and idiomatic bridging for Core Graphics types. Keyboard Layout Guide An extension on UIViewController providing a keyboardLayoutGuide property. The layout guide normally mirrors the topLayoutGuide and bottomLayoutGuide, but automatically resizes to avoid the keyboard. Requires iOS 9.0. String Localization Formatted localization using Swift string formatting. Introduces localize with a similar prototype to NSLocalizedString: func localize(text: LocalizableText, tableName: String? = default, bundle: NSBundle = default, value: String = default, comment: String) What's a LocalizableText? It's an intermediary type that deconstructs interpolation segments for use with string formatting. But that's not important, what's important is that it's literal convertible: let filesLeft = 4 let filesTotal = 5 let labelText = localize(""test-progress-\(filesLeft)-of-\(filesTotal)"", comment: ""Help text used for a positional description"") And in your Localizable.strings, just like in Cocoa: /* Help text used for a positional description */ ""test-progress-%@-of-%@"" = ""%1$@ of %2$@ remaining."";  All placeholders should be %@ on the end of the key, and be represented positionally, i.e., with %1$@, %2$@, and so on. String Tokenization Swift 2 Swift 3 Line, paragraph, sentence, and word views for Swift.String, providing idiomatic alternatives to String.enumerateSubstringsInRange(_:options:_:). Array(string.lines)            // -> [String] Target-Action Notifier Swift 2 Swift 3 A helper for performing type-safe multicast callbacks. The result is a lot like using UIControl, but for weakly held objects and without unsafe selectors. Heavily inspired by this blog post from @ole. Ordered Dictionary A simple glueing together of Swift.Dictionary and Swift.String into an ordered, hashed data structure. Useful if your keys are indeed already Hashable, but doesn't have great performance; insertion and removal tend towards the worst of both structures. If you have any alternative, prefer something B-Tree based instead. Custom Size Classes ""Size classes are fine, but I can't customize them!"" Yeah, you can! By inspecting what Mobile Safari does, you can do the same, using override trait collections. Custom Readable Width Emulating the calculation of UIView.readableContentGuide. Regular Expressions Simple Swift bridging for NSRegularExpression, as well as general patterns to go from String.UTF16View and Range<String.UTF16Index> to NSString and NSRange. UI Geometry Conveniences for using Core Graphics types in UI programming, such as retina-friendly rounding and equation operators that account for floating point inaccuracy. Value Coding Swift 2 Swift 3 A simple bridge to bridges concrete value types into NSCoding. View Recursion Showing off the simple power of Swift iterators by performing breadth-first travel through the trees created by UIView, UIViewController, and CALayer. Swift 2 only BetterCoreDataInit Use protocol extension to achieve simpler Core Data, like MyManagedObject(context:). Data An idiomatic Data<T>, representing any buffer (contiguous or discontiguous) of numeric elements. Part NSData, part dispatch_data_t, Data is useful for low-level byte-based APIs in Swift, such as crypto and string parsing. Create one with an array: let data = Data<UInt8>(array: [ 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21 ]) And enumerate through it in constant time: for byte in data {     ... } Made with lots of help from @a2. Fixing dispatch_block_t Even though it's been fixed in 2.1, Swift 2.0 has a rather ugly bug with wrapped dispatch_block_t types. Fix it with a C few tricks and a rational DispatchBlock type. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zwaldowski/ParksAndRecreation"	"Great collection of interesting playgrounds, for fun and for profit."	"true"
"Playground Sets"	"Swift fun playgrounds"	"https://github.com/madbat/Swift-fun-playgrounds"	"A few playgrounds to showcase Swift peculiar features."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"1"	"1"	"GitHub - madbat/Swift-fun-playgrounds: A few playgrounds to showcase Swift peculiar features Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 5 Fork 1 madbat/Swift-fun-playgrounds Code Issues 0 Pull requests 0 Pulse Graphs A few playgrounds to showcase Swift peculiar features 3 commits 1 branch 0 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 342d9b4 Mar 18, 2015 madbat Updated with contents from Swift workshop @ Commit University Permalink Failed to load latest commit information. GameOfLife.playground Updated with contents from Swift workshop @ Commit University Mar 18, 2015 SwiftFeatures.playground Updated with contents from Swift workshop @ Commit University Mar 17, 2015 README.md Updated with contents from Swift workshop @ Commit University Mar 17, 2015 README.md Swift fun playgrounds The playgrounds in this repo were live-coded and showcased during the Swift workshop hosted by Commit Software, on March 18, 2015. Let's explore some idiomatic Swift features with the Swift Features playground. The GameOfLife playground is a Swift implementation of the iconic Conway's Game of Life, rendered with SpriteKit Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/madbat/Swift-fun-playgrounds"	"A few playgrounds to showcase Swift peculiar features."	"true"
"Playground Sets"	"BradLarson's Playgrounds"	"https://github.com/BradLarson/PersonalSwiftPlaygrounds"	"Various playgrounds."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18"	"2"	"22"	"GitHub - BradLarson/PersonalSwiftPlaygrounds: Some useful Swift playgrounds I maintain for my own interests Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 18 Fork 22 BradLarson/PersonalSwiftPlaygrounds Code Issues 1 Pull requests 0 Pulse Graphs Some useful Swift playgrounds I maintain for my own interests 3 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ea35472 Sep 29, 2014 BradLarson Converted all but the SceneKit sample to be iOS playgrounds. Permalink Failed to load latest commit information. AccelerateFunctions.playground Converted all but the SceneKit sample to be iOS playgrounds. Sep 29, 2014 CollectionOperations.playground Converted all but the SceneKit sample to be iOS playgrounds. Sep 29, 2014 HandyFunctions.playground Converted all but the SceneKit sample to be iOS playgrounds. Sep 29, 2014 SceneKitMac.playground Converted all but the SceneKit sample to be iOS playgrounds. Sep 29, 2014 .gitignore Seeded with initial playgrounds. Aug 12, 2014 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BradLarson/PersonalSwiftPlaygrounds"	"Various playgrounds."	"true"
"Playground Sets"	"Dmikusa's Playgrounds"	"https://github.com/dmikusa/swift_playgrounds"	"Playgrounds that show basic Swift, JSON parsing, sending HTTP requests and basic file IO."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"3"	"3"	"GitHub - dmikusa/swift_playgrounds: A collection of Swift playgrounds demonstrating language basics, JSON parsing, HTTP networking and File IO. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 12 Fork 3 dmikusa/swift_playgrounds Code Issues 0 Pull requests 0 Pulse Graphs A collection of Swift playgrounds demonstrating language basics, JSON parsing, HTTP networking and File IO. 11 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4cbd464 Jul 12, 2015 dmikusa-pivotal Updated instructions for pulling in submodules. Permalink Failed to load latest commit information. Alamofire @ 97c29c6 Added Alamofire, Just and SwiftyJSON as submodules. Jul 12, 2015 BasicSwift.playground Updated project files. Jul 12, 2015 FileIO.playground Updated project files. Jul 13, 2015 JSON.playground Updated project files. Jul 13, 2015 Just @ da30e86 Changed Just to v0.1. Jul 12, 2015 Networking.playground Added my playgrounds. Jun 7, 2015 Playgrounds.xcworkspace Updated workspace. Jul 12, 2015 SwiftyJSON @ 62b581e Added Alamofire, Just and SwiftyJSON as submodules. Jul 13, 2015 .gitignore Removed ignores for submodules. Jul 12, 2015 .gitmodules Added Alamofire, Just and SwiftyJSON as submodules. Jul 13, 2015 README.md Updated instructions for pulling in submodules. Jul 12, 2015 README.md Swift Playgrounds This is a collection of Swift playgrounds that I included in my presentation at the 2015 MacAdmins Conference at Penn State University. It includes playgrounds that show basic Swift, JSON parsing, sending HTTP requests and doing basic file IO. Usage Clone the repo. git clone --recursive https://github.com/dmikusa/swift_playgrounds.git Open the workspace in XCode. Wait for it to index everything. In the Schema selector, pick SwiftyJSON -> My Mac. Go to the Project menu and pick Build. Repeat for Just-OSX -> My Mac and Alamofire OSX -> My Mac. This will build the frameworks used by the projects. Select a playground or go to Editor -> Execute Playground to refresh it. Note: You only need to perform the first three steps once. After that, you can edit the playgrounds as much as you want. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dmikusa/swift_playgrounds"	"Playgrounds that show basic Swift, JSON parsing, sending HTTP requests and basic file IO."	"true"
"Playground Sets"	"Cananito's Playgrounds"	"https://github.com/Cananito/Playgrounds"	"Various playgrounds."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"1"	"GitHub - Cananito/Playgrounds: Collection of Playgrounds. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 1 Cananito/Playgrounds Code Issues 0 Pull requests 0 Pulse Graphs Collection of Playgrounds. 17 commits 2 branches 0 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master swift-2.0 Nothing to show Nothing to show New pull request Latest commit 0935397 May 23, 2015 Cananito Playground with bind operator. Permalink Failed to load latest commit information. AnyObjectFunctionsAndInference.playground Added one that explores compiler friendliness with dynamic selectos. Apr 30, 2015 AnyObjectMethodPresence.playground Swift equivalent of respondsToSelector:. Apr 26, 2015 ArrayOfProtocols.playground Added all my current Playgrounds. Mar 22, 2015 AspectRatio.playground Got rid of unnecessary import. Extra xctimeline file. Mar 22, 2015 Bigrams.playground Updated for Xode 6.3 beta 3 and added link of origin. Mar 22, 2015 BindOperator.playground Playground with bind operator. May 23, 2015 Curry.playground Added all my current Playgrounds. Mar 22, 2015 Demangle.playground In with the new, out with the old 🎵. Mar 22, 2015 FilterMapReduce.playground Added all my current Playgrounds. Mar 22, 2015 FunctionArray.playground Showcasing how to instantiate an array of functions. Parse error with… Apr 10, 2015 FunctionDecorator.playground Added all my current Playgrounds. Mar 22, 2015 Introspection.playground Updated for Xcode 6.3 beta 3. Mar 22, 2015 Map.playground Added all my current Playgrounds. Mar 22, 2015 MutableConcurrencySemaphores.playground Added MutableConcurrencySemaphores playground. Apr 19, 2015 MutableDictionaryStoredArray.playground Mutable dictionary, mutable stored value, not a reference. May 9, 2015 OptionalSwitch.playground Added all my current Playgrounds. Mar 22, 2015 ProofInFunctions.playground Added all my current Playgrounds. Mar 22, 2015 ProtocolParameters.playground Added playground to document generic parameters conforming to a proto… May 23, 2015 StaticAndClass.playground Auto-edits. Apr 19, 2015 StringExtension.playground Auto-edits. Apr 20, 2015 StringIndex.playground Got rid of unnecessary import. Extra xctimeline file. Mar 22, 2015 TimeZones.playground Timezone experiments. Apr 9, 2015 README.md Tweaked README. Mar 22, 2015 README.md Playgrounds Collection of Playgrounds. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Cananito/Playgrounds"	"Various playgrounds."	"true"
"Playground Sets"	"Mgrebenets's Playgrounds"	"https://github.com/mgrebenets/playgrounds"	"Various playgrounds."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"2"	"1"	"GitHub - mgrebenets/playgrounds: Xcode playgrounds of all kinds Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 2 Fork 1 mgrebenets/playgrounds Code Issues 0 Pull requests 0 Pulse Graphs Xcode playgrounds of all kinds 5 commits 1 branch 0 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 217fdf8 Feb 29, 2016 Maksym Grebenets Add latest playgrounds Permalink Failed to load latest commit information. Alamofire.playground Initial commit Aug 28, 2015 Animations.playground Initial commit Aug 28, 2015 AnyObjectProtocol.playground Initial commit Aug 28, 2015 ArrayWithEnum.playground New playgrounds Sep 25, 2015 ChrisTalk.playground Initial commit Aug 28, 2015 CollectionInitialization.playground Add latest playgrounds Feb 29, 2016 CurriedPlayground.playground Initial commit Aug 28, 2015 DeckPlayground.playground Initial commit Aug 28, 2015 DictionaryLiteralConvertible.playground Initial commit Aug 28, 2015 FindInRangePlayground.playground Initial commit Aug 28, 2015 FlatMap.playground Add latest playgrounds Feb 29, 2016 FlatMapPaymentInfo.playground Add latest playgrounds Feb 29, 2016 FlattenSubviews.playground Initial commit Aug 28, 2015 IBPlayground Add former submodules Aug 28, 2015 IDontCare.playground Initial commit Aug 28, 2015 IsEmpty.playground New playgrounds Sep 25, 2015 MakeEmPay.playground Initial commit Aug 28, 2015 Mandelbrot.playground Initial commit Aug 28, 2015 MapByFirstCharacter.playground Add latest playgrounds Feb 29, 2016 MapPlayground.playground Initial commit Aug 28, 2015 ModelWithLotsOfProps.playground Add latest playgrounds Feb 29, 2016 NSObjectEquatable.playground Initial commit Aug 28, 2015 Nicole.playground Add latest playgrounds Feb 29, 2016 NodeCollectionPlayground.playground Initial commit Aug 28, 2015 NodeCollectionPlayground Add former submodules Aug 28, 2015 ObjectFactory.playground Initial commit Aug 28, 2015 Optional-vs-Empty-Array.playground Add latest playgrounds Feb 29, 2016 PasswordGenerator.playground Add latest playgrounds Feb 29, 2016 RectMath.playground Add latest playgrounds Feb 29, 2016 Reduce.playground Add latest playgrounds Feb 29, 2016 Reflection.playground Initial commit Aug 28, 2015 Regex.playground Add latest playgrounds Feb 29, 2016 Score.playground Initial commit Aug 28, 2015 SharedStaticVar.playground Initial commit Aug 28, 2015 StartsWithLetter.playground Add latest playgrounds Feb 29, 2016 StaticLet.playground Initial commit Aug 28, 2015 Swap.playground Initial commit Aug 28, 2015 SwiftIO.playground Initial commit Aug 28, 2015 SwiftObjCInterop.playground Initial commit Aug 28, 2015 TableViewFactory.playground Initial commit Aug 28, 2015 Test.playground Add latest playgrounds Feb 29, 2016 ThrowingBind.playground Initial commit Aug 28, 2015 TouchEquality-OSX.playground Initial commit Aug 28, 2015 TouchEquality-iOS.playground Initial commit Aug 28, 2015 TypeCast.playground Add latest playgrounds Feb 29, 2016 UIAlert.playground Initial commit Aug 28, 2015 Uppercase.playground Add latest playgrounds Feb 29, 2016 ViewControllerPlayground/ViewControllerPlayground.playground Initial commit Aug 28, 2015 break-a-dollar.playground Some extra stuff Aug 28, 2015 break-a-dollar.swift Some extra stuff Aug 28, 2015 singleton.swift Some extra stuff Aug 28, 2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mgrebenets/playgrounds"	"Various playgrounds."	"true"
"Playground Sets"	"Uberbruns's Playgrounds"	"https://github.com/uberbruns/SwiftPlaygrounds"	"Various playgrounds."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - uberbruns/SwiftPlaygrounds: A collection of personal playgrounds Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 uberbruns/SwiftPlaygrounds Code Issues 0 Pull requests 0 Pulse Graphs A collection of personal playgrounds 20 commits 1 branch 0 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 3b7c73e Jun 16, 2016 uberbruns ddau improvements Permalink Failed to load latest commit information. 15-08-Generic-Values.playground All work but now play makes jack a dull boy Aug 31, 2015 15-08-Guards.playground Guards? GUARDS!!!!!?!!!!111! Aug 29, 2015 15-08-Hashing.playground Add playground Nov/Dec Dec 14, 2015 15-08-Integers.playground Add playground Nov/Dec Dec 14, 2015 15-08-Protocols.playground Improve clearity Aug 28, 2015 15-08-StringHash.playground You wont find any smart commit messages here Aug 29, 2015 15-08-Zip.playground All work but now play makes jack a dull boy Aug 31, 2015 15-09-Code-Writer.playground play play play Oct 7, 2015 15-09-HTTP-Diggest.playground play play play Oct 6, 2015 15-09-Split-Camel-Case.playground play play play Oct 6, 2015 15-09-String-Parser.playground play play play Oct 6, 2015 15-09-String-Sequence.playground play play play Oct 6, 2015 15-09-Weak-Tables.playground play play play Oct 6, 2015 15-10-Camera.playground Update Nov 25, 2015 15-10-Math.playground Update Nov 25, 2015 15-10-Schulze.playground Update Nov 25, 2015 15-11-Binary.playground DDAU Apr 8, 2016 15-12-Enum-Equality.playground DDAU Apr 7, 2016 15-12-If-Function.playground DDAU Apr 7, 2016 16-01-Complex-Setup.playground DDAU Apr 7, 2016 16-02-Save-Raw-As-Tiff DDAU Apr 7, 2016 16-04-Data-Down-Actions-Up/ddau ddau improvements Jun 16, 2016 16-05-Protocol-Exploration.playground ddau improvements Jun 16, 2016 README.md Create README.md Aug 29, 2015 README.md SwiftPlaygrounds A collection of personal playgrounds Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/uberbruns/SwiftPlaygrounds"	"Various playgrounds."	"true"
"Playground Sets"	"URaimo's Playgrounds"	"https://github.com/uraimo/Swift-Playgrounds"	"My playgrounds, various topics."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"66"	"11"	"6"	"GitHub - uraimo/Swift-Playgrounds: Collection of Swift playgrounds used in my posts: From functional aspects of Swift to C interoperability. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 66 Fork 6 uraimo/Swift-Playgrounds Code Issues 0 Pull requests 0 Pulse Graphs Collection of Swift playgrounds used in my posts: From functional aspects of Swift to C interoperability. 29 commits 1 branch 0 releases 1 contributor Swift 95.5% C 3.1% Objective-C 1.4% Swift C Objective-C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 91d5503 May 17, 2016 uraimo Updated all playgrounds to Swift 2.2.x (oneliners,sequences) Permalink Failed to load latest commit information. 2015-09-VariancePlayground.playground Renamed playground with date Sep 29, 2015 2015-10-MapFlatMapPlayground.playground Small typo in a comment for the flatMap article Oct 25, 2015 2015-11-12-SequenceTypeGeneratorTypePlayground.playground Updated all playgrounds to Swift 2.2.x (oneliners,sequences) May 17, 2016 2015-11-ErrorHandlingConsole Added Swift2+Objective-C Error Handling Console Example Nov 3, 2015 2015-11-Swift2ErrorHandlingPlayground.playground New playground for the error handling article Nov 1, 2015 2016-01-6-Swift-One-Liners-Playground.playground Updated all playgrounds to Swift 2.2.x (oneliners,sequences) May 17, 2016 2016-02-5-Bitwise-Playground.playground Added Bitwise operations playground Feb 5, 2016 2016-04-07-Swift-And-C Updated union example for Swift And C playground May 5, 2016 2016-05-05-recursive-trampoline.playground Added Recursion and Trampolines playground May 5, 2016 archives Updated all playgrounds to Swift 2.2.x (oneliners,sequences) May 17, 2016 .gitignore Initial commit Sep 29, 2015 LICENSE Initial commit Sep 29, 2015 README.md Updated readme for new playground May 6, 2016 README.md Swift-Playgrounds A collection of Swift2+ playgrounds used in my posts: 5th May 2016: Recursive Tail Calls and Trampolines in Swift ZIP 6th April 2016: Swift and C: Everything you need to know ZIP 5th February 2016: Dealing with Bit Sets in Swift ZIP 6th Jannuary 2016: 10 Swift One Liners To Impress Your Friends ZIP 12th November 2015: Experimenting with Swift Sequences and Generators ZIP 3rd November 2015: Swift 2.1 Error Handling: from Objective-C to Swift and Back ZIP 8th October 2015: Swift 2.0: Map and FlatMap Demystified ZIP 29th September 2015: Swift 2.1 Function Types Conversion: Covariance and Contravariance ZIP Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/uraimo/Swift-Playgrounds"	"My playgrounds, various topics."	"true"
"Miscellaneous"	"Turtle Playground"	"https://github.com/dimsumthinking/TurtlePlayground"	"A playground with Logo-like commands."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"120"	"17"	"13"	"GitHub - dimsumthinking/TurtlePlayground: Swift playground using Logo-like commands Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 120 Fork 13 dimsumthinking/TurtlePlayground Code Issues 1 Pull requests 0 Pulse Graphs Swift playground using Logo-like commands 67 commits 2 branches 4 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags internal-refactor master Nothing to show v0.9 v0.8 v0.7 v0.5 Nothing to show New pull request Latest commit deb264a Feb 20, 2016 dimsumthinking Merge pull request #6 from giladronat/master … Use XCPlaygroundSharedDataDirectoryURL Permalink Failed to load latest commit information. Turtle.playground Use XCPlaygroundSharedDataDirectoryURL Jan 20, 2016 .gitignore modified git ignore Aug 12, 2015 README.md Revised the readme to reflect git problems with playground page order Aug 12, 2015 README.md TurtlePlayground Swift playground using Logo-like commands A few preliminary notes: The playground doesn't seem to be respecting page order. Click on TOC to go to the table of contents and the navigation will work from there. This playground requires the new playground format and features released in Xcode 7 and Swift 2. This version requires Yosemite. From time to time playgrounds can crash or seem to disappear from time to time. The current fix suggested by Apple is to show the package contents of the playground and delete the workspace. Type ""turtle"" in the Linear Turtle playground page. You should see ""Linear_Turtle_with_Target_PageSources.Turtle"" on the right. Mouse over it and you will see the quick look icon and the show value icon. Click on the show value icon. You should see a rectangle with a turtle in the middle. Enlarge the box if you like. Make the turtle move by typing in ""forward() or back()"". Stop when you've hit your target'. In the next page add the functions right() and left(). In the next page the four functions can take arguments specifying how much to move forward() or back() and how much to turn right() or left(). In the next page you can change colors using penColor() or nextColor(). In the final page you can show() and hide() the icon or control the pen using penUp() or penDown(). Create routines and your own functions. I am working on a book that will serve as a tutorial using this playground. It will be available soon. This project is presented without any sort of warranty - use at your own risk. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dimsumthinking/TurtlePlayground"	"A playground with Logo-like commands."	"true"
"Miscellaneous"	"Game Boards"	"https://github.com/joalbright/Gameboard"	"Chess, checkers, tic-tac-toe, sudoku and many others in playground."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"136"	"5"	"6"	"GitHub - joalbright/Gameboard: Gameboards built in a playground Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 136 Fork 6 joalbright/Gameboard Code Issues 0 Pull requests 0 Pulse Graphs Gameboards built in a playground 28 commits 1 branch 0 releases 1 contributor Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 0c5ad84 Jun 7, 2016 joalbright Fix Broken Project … - removed reference to missing file - updated for Swift 2.2 Permalink Failed to load latest commit information. Gameboards.playground Fix Broken Project Jun 7, 2016 Games.xcodeproj Fix Broken Project Jun 7, 2016 Games Fix Broken Project Jun 7, 2016 images readme images Feb 6, 2016 .gitignore 2 Gameboards Jan 30, 2016 LICENSE Create LICENSE Feb 3, 2016 README.md app updates Feb 7, 2016 RM_Checkers.md app updates Feb 7, 2016 RM_Chess.md app updates Feb 7, 2016 RM_Go.md app updates Feb 7, 2016 RM_Minesweeper.md app updates Feb 7, 2016 RM_Sudoku.md app updates Feb 7, 2016 RM_TicTacToe.md app updates Feb 7, 2016 README.md Gameboard Gameboards built in a playground Games Links send you to the readme for each game. Checkers Chess Go Mancala MineSweeper Sudoku TicTacToe Features Switch Player Per Turn Coordinate System Ability to Reset Available Moves : hint system Custom Colors Piece Collection Time Control : timer for moves Simple Move AI : need a friend? Overall Validation Stop friendly fire : checks if target piece is yours Only play on your turn : checks against pieces for player No piece available : checks for no piece Off the board : checks if target square is on board Images Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/joalbright/Gameboard"	"Chess, checkers, tic-tac-toe, sudoku and many others in playground."	"true"
"Miscellaneous"	"Swift Brainfuck"	"https://github.com/xavieryao/Swift-Brainfuck"	"Brainfuck interpreter written in Swift using Playground."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"1"	"1"	"GitHub - xavieryao/Swift-Brainfuck: Brainfuck interpreter written in Swift using Playground. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 5 Fork 1 xavieryao/Swift-Brainfuck Code Issues 0 Pull requests 0 Pulse Graphs Brainfuck interpreter written in Swift using Playground. 2 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. brainfuck.playground .gitignore LICENSE README.md brainfuck.swift README.md Swift-Brainfuck Brainfuck interpreter written in Swift using Playground. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xavieryao/Swift-Brainfuck"	"Brainfuck interpreter written in Swift using Playground."	"true"
"Miscellaneous"	"Icon Creator"	"https://github.com/tnantoka/IconCreator"	"Create app icons on Swift playground."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"1"	"GitHub - tnantoka/IconCreator: Create app icons on Swift playground. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 1 tnantoka/IconCreator Code Issues 0 Pull requests 0 Pulse Graphs Create app icons on Swift playground. http://qiita.com/tnantoka/items/9ca884dad8445ca71026 8 commits 2 branches 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags edhita master Nothing to show Nothing to show New pull request Latest commit 6c90ddf Jul 1, 2016 tnantoka Update README Permalink Failed to load latest commit information. IconCreator.playground Update README Jul 9, 2016 showcase Update README Jul 8, 2016 .gitignore first commit Dec 9, 2015 LICENSE first commit Dec 8, 2015 README.md Update README Jul 8, 2016 icon.png Update README Jul 8, 2016 logo.pdf Update README Jul 8, 2016 swift.png Update README Jul 8, 2016 README.md IconCreator Create app icons programmatically on Playground with Swift and Xcode. CreatorConfiguration.loadFont(""devicons.ttf"") let creator = IconCreator() creator.config.fontName = ""icomoon"" creator.config.string = ""\u{e655}"" creator.config.backgroundColor = UIColor.orangeColor() creator.preview()  creator.save() print(""$ open \(creator.rootPath)"") // $ open /path/to/Documents/IconCreator/  Showcase icon.png logo.pdf Pull requests are welcome! Acknowledgements https://www.google.com/fonts/specimen/Pacifico https://fortawesome.github.io/Font-Awesome/ http://vorillaz.github.io/devicons/ https://github.com/SSA111/SwiftImageToPDFConverter https://www.google.com/fonts/specimen/Italiana License My code is licensed under the MIT license. Each font has its own license! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tnantoka/IconCreator"	"Create app icons on Swift playground."	"true"
"Miscellaneous"	"StarWars Seals"	"https://github.com/jconkin/StarWarsSeals"	"Emblems from Star Wars in Swift playgrounds via CoreGraphics and UIViews"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"0"	"1"	"GitHub - jconkin/StarWarsSeals: Emblems from Star Wars in Swift playgrounds Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 0 Star 1 Fork 1 jconkin/StarWarsSeals Code Issues 0 Pull requests 0 Pulse Graphs Emblems from Star Wars in Swift playgrounds 8 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. StarWarsSeals.playground .gitignore README.md empire.png README.md StarWarsSeals Emblems from Star Wars in Swift playgrounds via CoreGraphics and UIViews Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jconkin/StarWarsSeals"	"Emblems from Star Wars in Swift playgrounds via CoreGraphics and UIViews"	"true"
"Miscellaneous"	"SwiftFiles"	"https://github.com/sketchytech/SwiftFiles"	"Save, Load and Delete files easily from within a Swift playground."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"3"	"3"	"GitHub - sketchytech/SwiftFiles: Save, Load and Delete from a Swift Playground Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 24 Fork 3 sketchytech/SwiftFiles Code Issues 0 Pull requests 0 Pulse Graphs Save, Load and Delete from a Swift Playground 16 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 208efec May 8, 2016 Anthony Levings Divided playground into pages … Regular file save, load, move and delete separated from NSURLSession downloads. Permalink Failed to load latest commit information. FilesPlayground.playground Divided playground into pages May 8, 2016 License Create License Apr 29, 2015 README.md list file NSURLs Feb 2, 2016 README.md SwiftFiles Save, Load and Delete files from within a Swift playground Usage List file NSURLs in a given location  do {     if let files = try FileList.allFilesAndFolders(inDirectory: NSSearchPathDirectory.CachesDirectory, subdirectory: ""Data"") {     for file in files {         print(""Filename:\(file.lastPathComponent!) NSURL:\(file)"")         }     }     else {         print(""failed to find given location"")     }   } catch  {     print(""error occurred"") }  Save a string to a file FileSave.saveStringToTemporaryDirectory(""hello World"", path: ""myString.txt"", subdirectory: """")  Save, load and delete FileSave.saveString(""hello world"", directory: NSSearchPathDirectory.DocumentDirectory, path: ""myString.txt"", subdirectory: ""MyFiles"") FileLoad.loadString(""myString.txt"", directory: NSSearchPathDirectory.DocumentDirectory, subdirectory: ""MyFiles"", encoding: NSUTF8StringEncoding) FileDelete.deleteFile(""myString.txt"", directory: NSSearchPathDirectory.DocumentDirectory, subdirectory: ""MyFiles"") FileLoad.loadString(""myString.txt"", directory: NSSearchPathDirectory.DocumentDirectory, subdirectory: ""MyFiles"", encoding: NSUTF8StringEncoding) // returns nil file is deleted  Save and load data let data = ""Hello Swift"".dataUsingEncoding(NSUTF8StringEncoding)! FileSave.saveData(data, directory: NSSearchPathDirectory.CachesDirectory, path: ""myFile.txt"", subdirectory: ""Data"") FileLoad.loadData(""myFile.txt"", directory: NSSearchPathDirectory.CachesDirectory, subdirectory: ""Data"") == data // true  Find file locations on your system // find out the location of your files to use in Finder -> Go -> Go to Directory dialogue box FileDirectory.applicationDirectory(NSSearchPathDirectory.DocumentDirectory) FileDirectory.applicationTemporaryDirectory()  Note that the majority of the methods are throwing methods and so require do/try/catch. See the playground for examples. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sketchytech/SwiftFiles"	"Save, Load and Delete files easily from within a Swift playground."	"true"
"Miscellaneous"	"Register VM"	"https://github.com/brianhill/register-vm-in-swift"	"A register-based VM in a Swift playground."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"2"	"4"	"GitHub - brianhill/register-vm-in-swift: A Playground for ""Creating a Virtual Machine"" by Jeffrey Meunier Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 1 Fork 4 brianhill/register-vm-in-swift Code Issues 0 Pull requests 0 Pulse Graphs A Playground for ""Creating a Virtual Machine"" by Jeffrey Meunier https://en.wikibooks.org/wiki/Creating_a_Virtual_Machine 4 commits 1 branch 0 releases Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. RegisterVMInSwift.playground .gitignore README.md README.md register-vm-in-swift A Swift playground corresponding to a chapter in the Wikibook Creating a Virtual Machine by Jeffrey Meunier and other Wikibooks contributors. This text is incorporated into the wikibook as Register VM in Swift. It is a direct translation from C into Swift of the chapter Register VM in C. This text and the text from which it was translated are licensed under the Creative Commons Attribution-ShareAlike License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brianhill/register-vm-in-swift"	"A register-based VM in a Swift playground."	"true"
"Miscellaneous"	"Earth photos"	"https://github.com/jtbandes/DSCOVR.playground"	"A slideshow of Earth photos taken by DSCOVR/EPIC"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - jtbandes/DSCOVR.playground: A slideshow of Earth photos taken by DSCOVR/EPIC, fetched from Twitter using Swift. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 jtbandes/DSCOVR.playground Code Issues 0 Pull requests 0 Pulse Graphs 🌏 A slideshow of Earth photos taken by DSCOVR/EPIC, fetched from Twitter using Swift. http://bandes-stor.ch/blog/2016/04/22/dscovr-the-earth/ 1 commit 1 branch 1 release Fetching contributors Swift 100.0% Swift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. DSCOVR.playground .gitignore LICENSE.txt README.md README.md DSCOVR.playground is an interactive playground which uses the Twitter API to fetch images from the Earth Polychromatic Imaging Camera on the DSCOVR satellite. More information can be found on my blog. (This demo is free for personal and educational use. If you plan to use it for anything else, please credit me — see LICENSE.txt for details. Naturally, this license only applies to the material I’ve produced, which doesn’t include the EPIC imagery, tweets by @dscovr_epic, or the SpaceX launch video, for which I can claim no copyright.) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jtbandes/DSCOVR.playground"	"A slideshow of Earth photos taken by DSCOVR/EPIC"	"true"
