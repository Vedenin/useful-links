"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Ancients"	"Apache Ant"	"http://ant.apache.org/"	"Build process management with XML."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Ant - Welcome the Apache Ant site Home Projects Apache Ant Welcome License News Security Reports Documentation Manual Related Projects External Tools and Tasks Resources Frequently Asked Questions Wiki Having Problems? Download Binary Distributions Source Distributions Ant Manual Contributing Mailing Lists Git Repositories Subversion Repositories Nightly+Continuous Builds Bug Database Security Sponsorship Thanks Sponsorship Project Management Contributors Apache Ant Mission Project Bylaws Legal   Welcome Apache Ant™ Apache Ant is a Java library and command-line tool whose mission is to drive processes described in build files as targets and extension points dependent upon each other. The main known usage of Ant is the build of Java applications. Ant supplies a number of built-in tasks allowing to compile, assemble, test and run Java applications. Ant can also be used effectively to build non Java applications, for instance C or C++ applications. More generally, Ant can be used to pilot any type of process which can be described in terms of targets and tasks. Ant is written in Java. Users of Ant can develop their own ""antlibs"" containing Ant tasks and types, and are offered a large number of ready-made commercial or open-source ""antlibs"". Ant is extremely flexible and does not impose coding conventions or directory layouts to the Java projects which adopt it as a build tool. Software development projects looking for a solution combining build tool and dependency management can use Ant in combination with Apache Ivy. The Apache Ant project is part of the Apache Software Foundation. Java5 compatible Long Term Support Version 1.9.x Ant 1.10.0 - which hasn't been released, yet - requires Java8 at build and run time. The Ant developers intend to backport bug fixes to future releases of the 1.9.x series which will remain compatible with Java5. See the FAQ for a full history that shows which version of Ant can be used with which version of Java. Apache Ant 1.9.7 Apr 12, 2016 - Apache Ant 1.9.7 Released Apache Ant 1.9.7 is now available for download as source or binary from http://ant.apache.org/bindownload.cgi. Ant 1.9.7 contains several bug fixes and improvements compared to Ant 1.9.6. Apache IvyDE 2.2.0 November 22, 2013 - Apache IvyDE 2.2.0 Released The Apache IvyDE project is pleased to announce its 2.2.0 release. The Apache IvyDE Eclipse plugin integrates Apache Ivy's dependency management into Eclipse. It lets you manage your dependencies declared in an ivy.xml in your Java Eclipse projects, or any other kind of project which needs dependency management. Apache IvyDE will contribute to the classpath of your Java project or you can make it retrieve your dependencies directly into your project. Last but not least Apache IvyDE offer editors of ivy.xml and ivysettings.xml files with completion. Get some preview here: http://ant.apache.org/ivy/ivyde/screenshots.html Major changes in this release The API of IvyDE has been stabilized so that third party plugins can rely on it, while still not complete, and still not advertised as stable in Ivy, support of OSGi has been added, javadoc and source attachement can be edited now one by one, improved stability of the resolve process, improved logging for easier debugging. Compatibility This release is expected to work with every version of Ivy 2.1 or superior. The OSGi features require Ivy 2.3.0 or superior though. This release is considered as stable. The beta of 2.2.0 has been out for a (too) long time. A more detailed release notes can be read there: http://ant.apache.org/ivy/ivyde/history/latest-milestone/release-notes.html Download the 2.2.0 release at: http://ant.apache.org/ivy/ivyde/download.cgi Or use directly the Apache IvyDE's updatesite: http://www.apache.org/dist/ant/ivyde/updatesite Issues should be reported to: https://issues.apache.org/jira/browse/IVYDE More information can be found on the Apache IvyDE website: http://ant.apache.org/ivy/ivyde/ Apache Ivy 2.3.0 January 21, 2013 - Apache Ivy 2.3.0 Released Apache Ivy 2.3.0 is now available for download as source or binary (with and without dependencies) from http://ant.apache.org/ivy/download.cgi. Key features of the 2.3.0 release are improved Ant support with some new Ant tasks and enhancements to existing tasks improved Maven2 compatibility some new resolvers numerous bug fixes and improvements as documented in Jira and in the release notes In addition, experimental OSGI support has been added to the Ivy core. For more information see the Ivy home page. Apache AntUnit 1.3 May 14, 2014 - Apache AntUnit 1.3 Released Apache AntUnit 1.3 is now available for download as binary or source release. This release adds new assertions that deal with non-file resources better than the existing ones and provides additional access to the log created during tests. Documentation You can view the documentation for the current release (Apache Ant 1.9.7) online Comprehensive documentation is included in the source and binary distributions. Get Involved Get Involved Join Mailing Lists Search the Dev Mailing List Search the User Mailing List Apache Ant, Apache Ivy, Apache EasyAnt, Ant, Ivy, EasyAnt, Apache, the Apache feather logo, and the Apache Ant project logos are trademarks of The Apache Software Foundation."	"null"	"null"	"Build process management with XML."	"true"
"Ancients"	"Apache Hadoop"	"http://hadoop.apache.org/"	"Storage and large-scale processing of data-sets on clusters of commodity hardware."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome to Apache™ Hadoop®! Apache > Hadoop   Top Wiki   About Welcome What Is Apache Hado... Getting Started ... Download Hadoop Who Uses Hadoop?... News Releases Mailing Lists Issue Tracking Who We Are? Who Uses Hadoop? Buy Stuff Sponsorship Thanks Privacy Policy Bylaws License Documentation Current Stable Release 1.2.1 Release 2.5.2 Release 2.6.4 Release 0.23.11 Release 2.7.2 Related Projects Ambari Avro Cassandra Chukwa Hama HBase Hive Mahout Pig Spark Tez ZooKeeper PDF Welcome to Apache™ Hadoop®! What Is Apache Hadoop? The Apache™ Hadoop® project develops open-source software for reliable, scalable, distributed computing. The Apache Hadoop software library is a framework that allows for the distributed processing of large data sets across clusters of computers using simple programming models. It is designed to scale up from single servers to thousands of machines, each offering local computation and storage. Rather than rely on hardware to deliver high-availability, the library itself is designed to detect and handle failures at the application layer, so delivering a highly-available service on top of a cluster of computers, each of which may be prone to failures. The project includes these modules: Hadoop Common: The common utilities that support the other Hadoop modules. Hadoop Distributed File System (HDFS™): A distributed file system that provides high-throughput access to application data. Hadoop YARN: A framework for job scheduling and cluster resource management. Hadoop MapReduce: A YARN-based system for parallel processing of large data sets. Other Hadoop-related projects at Apache include: Ambari™: A web-based tool for provisioning, managing, and monitoring Apache Hadoop clusters which includes support for Hadoop HDFS, Hadoop MapReduce, Hive, HCatalog, HBase, ZooKeeper, Oozie, Pig and Sqoop. Ambari also provides a dashboard for viewing cluster health such as heatmaps and ability to view MapReduce, Pig and Hive applications visually alongwith features to diagnose their performance characteristics in a user-friendly manner. Avro™: A data serialization system. Cassandra™: A scalable multi-master database with no single points of failure. Chukwa™: A data collection system for managing large distributed systems. HBase™: A scalable, distributed database that supports structured data storage for large tables. Hive™: A data warehouse infrastructure that provides data summarization and ad hoc querying. Mahout™: A Scalable machine learning and data mining library. Pig™: A high-level data-flow language and execution framework for parallel computation. Spark™: A fast and general compute engine for Hadoop data. Spark provides a simple and expressive programming model that supports a wide range of applications, including ETL, machine learning, stream processing, and graph computation. Tez™: A generalized data-flow programming framework, built on Hadoop YARN, which provides a powerful and flexible engine to execute an arbitrary DAG of tasks to process data for both batch and interactive use-cases. Tez is being adopted by Hive™, Pig™ and other frameworks in the Hadoop ecosystem, and also by other commercial software (e.g. ETL tools), to replace Hadoop™ MapReduce as the underlying execution engine. ZooKeeper™: A high-performance coordination service for distributed applications. Getting Started To get started, begin here: Learn about Hadoop by reading the documentation. Download Hadoop from the release page. Discuss Hadoop on the mailing list. Download Hadoop Please head to the releases page to download a release of Apache Hadoop. Who Uses Hadoop? A wide variety of companies and organizations use Hadoop for both research and production. Users are encouraged to add themselves to the Hadoop PoweredBy wiki page. News 11 February, 2016: Release 2.6.4 available A point release for the 2.6 line. Please see the Hadoop 2.6.4 Release Notes for the list of 46 critical bug fixes and since the previous release 2.6.3. 25 January, 2016: Release 2.7.2 (stable) available A point release for the 2.7 line. Please see the Hadoop 2.7.2 Release Notes for the list of 155 bug fixes and patches since the previous release 2.7.1. 17 December, 2015: Release 2.6.3 available A point release for the 2.6 line. Please see the Hadoop 2.6.3 Release Notes for the list of 35 critical bug fixes and since the previous release 2.6.2. 28 October, 2015: Release 2.6.2 available A point release for the 2.6 line. Please see the Hadoop 2.6.2 Release Notes for the list of 15 critical bug fixes and since the previous release 2.6.1. 23 September, 2015: Release 2.6.1 available A point release for the 2.6 line. Please see the Hadoop 2.6.1 Release Notes for the list of 158 critical bug fixes and since the previous release 2.6.0. 06 July, 2015: Release 2.7.1 (stable) available A point release for the 2.7 line. This release is now considered stable. Please see the Hadoop 2.7.1 Release Notes for the list of 131 bug fixes and patches since the previous release 2.7.0. Please look at the 2.7.0 section below for the list of enhancements enabled by this first stable release of 2.7.x. 21 April 2015: Release 2.7.0 available Apache Hadoop 2.7.0 contains a number of significant enhancements. A few of them are noted below. IMPORTANT notes This release drops support for JDK6 runtime and works with JDK 7+ only. This release is not yet ready for production use. Critical issues are being ironed out via testing and downstream adoption. Production users should wait for a 2.7.1/2.7.2 release. Hadoop Common Support Windows Azure Storage - Blob as a file system in Hadoop. Hadoop HDFS Support for file truncate Support for quotas per storage type Support for files with variable-length blocks Hadoop YARN Make YARN authorization pluggable Automatic shared, global caching of YARN localized resources (beta) Hadoop MapReduce Ability to limit running Map/Reduce tasks of a job Speed up FileOutputCommitter for very large jobs with many output files. Full information about this milestone release is available at Hadoop Releases. 18 November, 2014: release 2.6.0 available Apache Hadoop 2.6.0 contains a number of significant enhancements such as: Hadoop Common Key management server (beta) Credential provider (beta) Hadoop HDFS Heterogeneous Storage Tiers - Phase 2 Application APIs for heterogeneous storage SSD storage tier Memory as a storage tier (beta) Support for Archival Storage Transparent data at rest encryption (beta) Operating secure DataNode without requiring root access Hot swap drive: support add/remove data node volumes without restarting data node (beta) AES support for faster wire encryption Hadoop YARN Support for long running services in YARN Service Registry for applications Support for rolling upgrades Work-preserving restarts of ResourceManager Container-preserving restart of NodeManager Support node labels during scheduling Support for time-based resource reservations in Capacity Scheduler (beta) Global, shared cache for application artifacts (beta) Support running of applications natively in Docker containers (alpha) Full information about this milestone release is available at Hadoop Releases. 19 November, 2014: release 2.5.2 available Full information about this milestone release is available at Hadoop Releases. 12 September, 2014: release 2.5.1 available Full information about this milestone release is available at Hadoop Releases. 11 August, 2014: release 2.5.0 available Full information about this milestone release is available at Hadoop Releases. 30 June, 2014: release 2.4.1 available Full information about this milestone release is available at Hadoop Releases. 27 June, 2014: release 0.23.11 available Full information about this milestone release is available at Hadoop Releases. 07 April, 2014: release 2.4.0 available Full information about this milestone release is available at Hadoop Releases. 20 February, 2014: release 2.3.0 available Full information about this milestone release is available at Hadoop Releases. 11 December, 2013: release 0.23.10 available Full information about this milestone release is available at Hadoop Releases. 15 October, 2013: release 2.2.0 available Apache Hadoop 2.x reaches GA milestone! Full information about this milestone release is available at Hadoop Releases. 25 August, 2013: release 2.1.0-beta available Apache Hadoop 2.x reaches beta milestone! Full information about this milestone release is available at Hadoop Releases. 27 December, 2011: release 1.0.0 available Hadoop reaches 1.0.0! Full information about this milestone release is available at Hadoop Releases. March 2011 - Apache Hadoop takes top prize at Media Guardian Innovation Awards Described by the judging panel as a ""Swiss army knife of the 21st century"", Apache Hadoop picked up the innovator of the year award for having the potential to change the face of media innovations. See The Guardian web site January 2011 - ZooKeeper Graduates Hadoop's ZooKeeper subproject has graduated to become a top-level Apache project. Apache ZooKeeper can now be found at http://zookeeper.apache.org/ September 2010 - Hive and Pig Graduate Hadoop's Hive and Pig subprojects have graduated to become top-level Apache projects. Apache Hive can now be found at http://hive.apache.org/ Pig can now be found at http://pig.apache.org/ May 2010 - Avro and HBase Graduate Hadoop's Avro and HBase subprojects have graduated to become top-level Apache projects. Apache Avro can now be found at http://avro.apache.org/ Apache HBase can now be found at http://hbase.apache.org/ July 2009 - New Hadoop Subprojects Hadoop is getting bigger! Hadoop Core is renamed Hadoop Common. MapReduce and the Hadoop Distributed File System (HDFS) are now separate subprojects. Avro and Chukwa are new Hadoop subprojects. See the summary descriptions for all subprojects above. Visit the individual sites for more detailed information. March 2009 - ApacheCon EU In case you missed it.... ApacheCon Europe 2009 November 2008 - ApacheCon US In case you missed it.... ApacheCon US 2008 July 2008 - Hadoop Wins Terabyte Sort Benchmark Hadoop Wins Terabyte Sort Benchmark: One of Yahoo's Hadoop clusters sorted 1 terabyte of data in 209 seconds, which beat the previous record of 297 seconds in the annual general purpose (Daytona) terabyte sort benchmark. This is the first time that either a Java or an open source program has won.   Copyright © 2014 The Apache Software Foundation. Apache Hadoop, Hadoop, Apache, the Apache feather logo, and the Apache Hadoop project logo are either registered trademarks or trademarks of the Apache Software Foundation in the United States and other countries."	"null"	"null"	"Storage and large-scale processing of data-sets on clusters of commodity hardware."	"true"
"Ancients"	"Apache OpenNLP"	"https://opennlp.apache.org/"	"Toolkit for common tasks like tokenization."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache OpenNLP - Welcome to Apache OpenNLP General Home Download Maven Dependency License Documentation News Mailing Lists Issue tracker Wiki Development Get Involved Source Code Building Code Conventions Making a release Project Team ASF ASF Thanks Security Become a Sponsor Welcome to Apache OpenNLP The Apache OpenNLP library is a machine learning based toolkit for the processing of natural language text. It supports the most common NLP tasks, such as tokenization, sentence segmentation, part-of-speech tagging, named entity extraction, chunking, parsing, and coreference resolution. These tasks are usually required to build more advanced text processing services. OpenNLP also includes maximum entropy and perceptron based machine learning. Copyright © 2010 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache OpenNLP, OpenNLP, Apache, the Apache feather logo, and the Apache OpenNLP project logo are trademarks of The Apache Software Foundation. - Privacy Policy"	"null"	"null"	"Toolkit for common tasks like tokenization."	"true"
"Ancients"	"Apache Velocity"	"http://velocity.apache.org/"	"Templates for HTML pages, emails or source code generation in general."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Apache Velocity Project The Apache Velocity Project http://velocity.apache.org/ apache velocity General¶ Welcome News Downloads Releases¶ Engine 1.7 Tools 2.0 Development¶ Engine Tools Community¶ Who we are Contact us Get involved Wiki How it works Board Reports Developer Resources¶ Coding standards Project guidelines Site building Release process Archive¶ Anakia 1.0 Texen 1.0 DVSL 1.0 DocBook Fx 1.0 Apache Foundation¶ Apache Website How the ASF work ASF Developer Infos ASF Source Code Repository Sponsorship Thanks What is Velocity?¶ Velocity is a Java-based template engine. It permits anyone to use a simple yet powerful template language to reference objects defined in Java code. When Velocity is used for web development, Web designers can work in parallel with Java programmers to develop web sites according to the Model-View-Controller (MVC) model, meaning that web page designers can focus solely on creating a site that looks good, and programmers can focus solely on writing top-notch code. Velocity separates Java code from the web pages, making the web site more maintainable over its lifespan and providing a viable alternative to Java Server Pages (JSPs) or PHP. Velocity's capabilities reach well beyond the realm of the web; for example, it can be used to generate SQL, PostScript and XML from templates. It can be used either as a standalone utility for generating source code and reports, or as an integrated component of other systems. For instance, Velocity provides template services for various web frameworks, enabling them with a view engine facilitating development of web applications according to a true MVC model. The Apache Velocity Project¶ Velocity is a project of the Apache Software Foundation, charged with the creation and maintenance of open-source software related to the Apache Velocity Engine. All software created at the Velocity project is available under the Apache Software License and free of charge for the public. Recent News¶ 2010-11-29 - Velocity Engine 1.7 released 2010-05-10 - VelocityTools 2.0 released 2010-05-10 - Velocity Engine 1.6.4 released See all news... Apache Software Foundation¶ The Apache Software Foundation provides support for the Apache community of open-source software projects. The Apache projects are characterized by a collaborative, consensus based development process, an open and pragmatic software license, and a desire to create high quality software that leads the way in its field. Apache Velocity Projects¶ Apache Velocity offers the following projects: Velocity Engine ‐ This is the actual templating engine which does all the work. If you came here because you heard about Velocity somewhere on the web, this is probably the right place to start. Velocity Tools ‐ This project contains tools and other useful infrastructure to build web and non-web application using the Velocity engine. You will find e.g. code for Struts integration or the standalone VelocityViewServlet here. Release Status¶ Project Release Version Alpha/Beta/RC Release Version Velocity Engine 1.7 (currently none available) Velocity Tools 2.0 (currently none available) The release distribution is available as a combined source/binary distribution in tar.gz and zip formats, and can be downloaded from our download page. More Information¶ For more information about the Apache Velocity Project, see How the Apache Velocity project works Who are the people behind the Apache Velocity project Find out how to get involved with the Apache Velocity project Contact the Apache Velocity project For more information about the Apache Software Foundation, see Foundation Home Page Apache License and Distribution FAQ Copyright © 2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache and the Apache feather logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Templates for HTML pages, emails or source code generation in general."	"true"
"Ancients"	"FreeMarker"	"http://freemarker.org/"	"General templating engine without any heavyweight or opinionated dependencies."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"69"	"5"	"30"	"GitHub - apache/incubator-freemarker: Mirror of Apache Freemarker (Incubating) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 69 Fork 30 apache/incubator-freemarker mirrored from git://git.apache.org/incubator-freemarker.git Code Pull requests 6 Pulse Graphs Mirror of Apache Freemarker (Incubating) 1,681 commits 9 branches 30 releases 8 contributors Java 92.2% FreeMarker 7.4% HTML 0.4% Java FreeMarker HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 2.3-gae Switch branches/tags Branches Tags 2.3-gae-tools 2.3-gae 2.3 2.3.20-bc-tests 2.3.24-gae-stabilization 2.3.24-stabilization docgen-2.0 master unboundTemplate Nothing to show v2.3.25 v2.3.25-gae v2.3.24 v2.3.24-rc01 v2.3.24-rc01-gae v2.3.24-pre01 v2.3.24-pre01-gae v2.3.24-gae v2.3.23 v2.3.23-rc01 v2.3.23-rc01-gae v2.3.23-gae v2.3.22 v2.3.22-rc02 v2.3.22-rc02-gae v2.3.22-rc01 v2.3.22-rc01-gae v2.3.22-gae v2.3.21 v2.3.21-rc02 v2.3.21-rc02-gae v2.3.21-rc01 v2.3.21-rc01-gae v2.3.21-gae v2.3.20 v2.3.20-gae old-2.4 master-donated-to-asf 2.3-gae-donated-to-asf 2.3-donated-to-asf Nothing to show New pull request Latest commit 6032411 Jul 5, 2016 ddekany FREEMARKER-28: Manual typo fix Permalink Failed to load latest commit information. src FREEMARKER-28: Manual typo fix Jul 5, 2016 .gitattributes Git: Force CRLF conversion to LF May 21, 2013 .gitignore Added Eclipse files to .gitignore Jan 26, 2016 DISCLAIMER The ""sponsored by"" part was missing from the incubation disclaimer. Jul 1, 2016 LICENSE LICENSE and NOTICE fixes: Jan 7, 2016 NOTICE Added missing ""Apache"" before ""FreeMarker"" in NOTICE files. Jun 23, 2016 README README adjustments. Mar 20, 2016 RELEASE-NOTES RELEASE-NOTES adjustment. Mar 20, 2016 build.properties.sample Build: Added GPG signing and checksum file generation Jan 2, 2016 build.xml (build.xml adjustment) Jun 12, 2016 ivy.xml Put back @SuppressFBWarnings annotations, but filter them out in the … May 25, 2016 ivysettings.xml Added copyright comments to some build related XML-s and the Manual XML Dec 31, 2015 osgi.bnd Build: bnd license URL update Jan 3, 2016 README /*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * ""License""); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   *   http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  ===============================================================================   Apache FreeMarker {version}   For the latest version or to report bugs visit:   http://freemarker.org/  ===============================================================================    DISCLAIMER    Apache FreeMarker is an effort undergoing incubation at The Apache   Software Foundation (ASF). Incubation is required of all newly accepted   projects until a further review indicates that the infrastructure,   communications, and decision making process have stabilized in a manner   consistent with other successful ASF projects. While incubation status is   not necessarily a reflection of the completeness or stability of the   code, it does indicate that the project has yet to be fully endorsed by   the ASF.   What is Apache FreeMarker? --------------------------  FreeMarker is a ""template engine""; a generic tool to generate text output (anything from HTML to auto generated source code) based on templates. It's a Java package, a class library for Java programmers. It's not an application for end-users in itself, but something that programmers can embed into their products. FreeMarker is designed to be practical for the generation of HTML Web pages, particularly by servlet-based applications following the MVC (Model View Controller) pattern.   Licensing ---------  FreeMarker is licensed under the Apache License, Version 2.0.  See the LICENSE file for more details!   Documentation -------------  Online: http://freemarker.org/docs/  Offline: The full documentation is available in the binary distribution in the documentation/index.html directory.   Installing ----------  If you are using Maven, just add this dependency:    <!--   Attention: Be sure nothing pulls in an old dependency with groupId   ""freemarker"" (without the ""org.""), because then you will end up with   two freemarker.jar-s and unpredictable behavior on runtime!   -->   <dependency>     <groupId>org.freemarker</groupId>     <artifactId>freemarker</artifactId>     <version>{version}</version>   </dependency>  Otherwise simply copy freemarker.jar to a location where your Java application's ClassLoader will find it. For example, if you are using FreeMarker in a web application, you probably want to put freemarker.jar into the WEB-INF/lib directory of your web application.  FreeMarker has no required dependencies. It has several optional dependencies, but usually you don't have to deal with them, because if you are using an optional feature that's certainly because your application already uses the related library.   Change log ----------  Online (for stable releases only): http://freemarker.org/docs/app_versions.html  Offline: In the binary release, open documentation/index.html, and you will find the link.   Building --------  First of all, if you haven't yet, download the source release, or check out FreeMarker from the source code repository.  You need JDK 8(!), Apache Ant and Ivy to be installed. (As of this writing it was tested with Ant 1.8.1 and Ivy 2.3.0.) Note that the ivy-<version>.jar should be copied to your Ant home directory ""lib"" subfolder.  It's recommended to copy build.properties.sample into build.properties, and edit its content to fit your system. (Although basic jar building should succeeds without the build.properties file too.)  To build freemarker.jar, just issue ""ant"" in the project root directory, and it should download all dependencies automatically and build freemarker.jar.  If later you change the dependencies in ivy.xml, or otherwise want to re-download some of them, it will not happen automatically anymore. You have to issue ""ant update-deps"" for that.   Eclipse and other IDE setup ---------------------------  Below you find the step-by-step setup for Eclipse Mars.1. If you are using a different version or an entierly different IDE, still read this, and try to apply it to your development environment:  - Install Ant and Ivy, if you haven't yet; see earlier. - From the command line, run `ant clean javacc ide-dependencies`. (Note that   now the ""ide-dependencies"" and  ""build/generated-sources"" was created.) - Start Eclipse - You may prefer to start a new workspace (File -> ""Switch workspace""), but   it's optional. - Window -> Preferences   - General -> Workspace, set the text file encoding     to ""UTF-8"". (Or, you can set the same later on project level instead.)   - Java -> Code Style -> Formatter -> Import...     Select src\ide-settings\Eclipse-Mars\Formatter-profile-FreeMarker.xml     inside the FreeMarker project directory.     This profile uses space-only indentation policy and 120 character line     width, and formatting rules that are pretty much standard in modern Java.   - Java -> Installed JRE-s:     Ensure that you have JDK 6 installed, and that it was added to Eclipse.     Note that it's not JRE, but JDK. - Create new ""Java Project"" in Eclipse:   - In the first window popping up:     - Change the ""location"" to the directory of the FreeMarker project     - Press ""Next""   - In the next window, you see the build path settings:     - On ""Source"" tab, ensure that exactly these are marked as source       directories (be careful, Eclipse doesn't auto-detect these well):         build/generated-sources/java         src/main/java         src/main/resources         src/test/java         src/test/resources     - On the ""Libraries"" tab:       - Delete everyhing from there, except the ""JRE System Library [...]""       - Edit ""JRE System Library [...]"" to ""Execution Environment"" ""JavaSE 1.6""       - Add all jar-s that are directly under the ""ide-dependencies"" directory         (use the ""Add JARs..."" and select all those files).     - On the ""Order and Export"" tab find dom4j-*.jar, and send it to the         bottom of the list (becase, an old org.jaxen is included inside         dom4j-*.jar, which casues compilation errors if it wins over         jaxen-*.jar).    - Press ""Finish"" - Eclipse will indicate many errors at this point; it's expected, read on. - Project -> Properties -> Java Compiler   - Set ""Compiler Compliance Level"" to ""1.5"" (you will have to uncheck     ""Use compliance from execution environment"" for that)   - In Errors/Warnings, check in ""Enable project specific settings"", then set     ""Forbidden reference (access rules)"" from ""Error"" to ""Warning"". - You will still have errors on these java files (because different java   files depend on different versions of the same library, and Eclipse can't   handle that). Exclude those java files from the Build Path (in the Package   Explorer, right click on the problematic file -> ""Build Path"" -> ""Exclude"").     _Jython20*.java     _Jython22*.java     _FreeMarkerPageContext2.java     FreeMarkerJspFactory2.java   Also, close these files if they are open. Now you shouldn't have any errors. - At Project -> Properties -> Java Code Style -> Formatter, check in ""Enable   project specific settings"", and then select ""FreeMarker"" as active profile. - Right click on the project -> Run As -> JUnit Test   It should run without problems (all green). - It's highly recommened to use the Eclipse FindBugs plugin.   - Install it from Eclipse Marketplace (3.0.1 as of this writing)   - Window -> Preferences -> Java -> FindBugs:     Set all bug marker ranks from Warning to Error. (For false alarms we add     @SuppressFBWarnings(value = ""..."", justification = ""..."") annotations.)   - Project -> Properties -> FindBugs -> [x] Run Automatically   - There should 0 errors. But sometimes the plugin fails to take the     @SuppressFBWarnings annotations into account; then use Project -> Clean.   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/apache/incubator-freemarker"	"General templating engine without any heavyweight or opinionated dependencies."	"true"
"Ancients"	"GlassFish"	"https://glassfish.java.net/"	"Application server and reference implementation for Java EE sponsored by Oracle."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GlassFish Server GlassFish - World's first Java EE 7 Application Server About Legal Roadmap Contact us Download GlassFish 4.1.1 GlassFish Server 4.1.1 Open Source Edition has been released! Cargo Tracker Applied domain-driven design blueprints for Java EE ‹ ›      Get Started How to quickly start with GlassFish      Download How to download GlassFish       Documentation Documentation, guides and other useful resources      Issue Tracker Issues and RFEs       Contribute How to get involved    Source Code GlassFish Source Code Repository      IDEs NetBeans, Eclipse, etc.      Forum Forum and mailing lists      Related Projects Grizzly, Jersey, OpenMQ, etc. Google+ Project sponsored by Copyright © 2015 Oracle Corporation and/or its affiliates. Last Published: 10/7/2015."	"null"	"null"	"Application server and reference implementation for Java EE sponsored by Oracle."	"true"
"Ancients"	"GWT"	"http://www.gwtproject.org/"	"Toolbox which includes a Java-to-JavaScript compiler for client-side code, XML parser, API for RPC, JUnit integration, internationalization support and widgets for the GUI."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GWT Project GWT homepage Overview Get started Tutorials Docs Resources Make GWT Better Terms Download Java Doc Access our Google+ community Creative Commons Attribution 3.0 License. >Back to GWT homepage Menu Search Productivity for developers, performance for users GWT is used by many products at Google, including Google AdWords and Google Wallet. It's open source, completely free, and used by thousands of enthusiastic developers around the world. Next GWT pronounced «gwit» GWT is the official open source project for GWT releases 2.5 and onwards. This site houses links to the documentation, source code repository, issues list and information related to GWT roadmap and release. It is intended for developers interested in contributing to GWT, and for keeping people informed on new and upcoming changes to GWT, GWT related events and other news. Next Let's begin Learn about GWT The features and tools it offers, and how you can quickly develop performance AJAX applications across all major browsers. Download Download and install the tools in GWT, including the SDK, Speed Tracer, and the Google Plugin for Eclipse. Get started Walk through the first steps needed to get a web application up and running. Download and install the tools in GWT, including the SDK, Speed Tracer, and the Google Plugin for Eclipse. Docs Everything you need to know about how to use GWT."	"null"	"null"	"Toolbox which includes a Java-to-JavaScript compiler for client-side code, XML parser, API for RPC, JUnit integration, internationalization support and widgets for the GUI."	"true"
"Ancients"	"HornetQ"	"http://hornetq.jboss.org/"	"Clear, concise, modular and made to be embedded."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"HornetQ - putting the buzz in messaging - JBoss Community HornetQ - putting the buzz in messaging Putting the buzz in messaging. HornetQ Putting the buzz in messaging.   Overview License   Downloads   Documentation   Community Wiki User Forum Developer Forum Chat Blog Twitter HornetQ - Contributors HornetQ - Goodies   Issue Tracker JIRA   Source Code Anonymous GIT GitHub   Build What is HornetQ? HornetQ is an open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system. HornetQ is an example of Message Oriented Middleware (MoM) . Please see the General FAQ wiki page for more information.   Downloads Documentation Community Why should I use HornetQ? Here are a selection of the reasons: Open Source Software - HornetQ is released under the Apache v 2.0 Licence. Written in Java - HornetQ runs on any platform with a Java 5 or later runtime. JMS and above - HornetQ supports the JMS 1.1 and 2.0 APIs and also defines its own messaging API for maximum performance and flexibility. Other protocols are planned for upcoming releases. Superb performance - HornetQ class-beating high performance journal provides persistent messaging performance at rates normally seen for non-persistent messaging. Non-persistent messaging performance rocks the boat too. POJO-based design - HornetQ has been designed using POJO and minimal third-party dependencies. You choose how you want to use HornetQ: run it stand-alone, integrate it with JBoss Application Server or another Java server/container or embed it directly inside your own product. Solid high availability - HornetQ offers server replication and automatic client failover to eliminate lost or duplicated messages in case of server failure. Flexible clustering - Create clusters of HornetQ servers that know how to load balance messages. Link geographically distributed clusters over unreliable connections to form a global network. Configure routing of messages in a highly flexible way. Adapt HornetQ to your network topology, not the other way round. Management - HornetQ provides a comprehensive management API to manage & monitor servers. It is integrated seamlessly to the servers to work in a highly available environment. Documentation & Examples - All HornetQ features are documented and examples are provided. Read the documentation, run the examples and leverage HornetQ features to make your messaging code more robust and performant. Whetted your appetite? The HornetQ wiki provides a more complete listing of features.             Quick links Downloads Documentation Wiki FAQ Features Roadmap User forum Developer forum HornetQ blog HornetQ Twitter The team IRC Free HornetQ wallpapers! Get started in less than 5 minutes! Chinese Docs HornetQ Messaging Developer's Guide Check out the HornetQ Messaging Developer's Guide Apache License, Version 2.0   Want to be a HornetQ committer? Come and join the sexiest messaging project around. We need you! We want you! Just follow these easy steps   Desktop wallpaper | Project Swag  "	"null"	"null"	"Clear, concise, modular and made to be embedded."	"true"
"Ancients"	"Hudson"	"http://hudson-ci.org/"	"Continuous integration server still in active development."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Hudson Continuous Integration Docs Source Plugins Wiki Bugs Mail lists Forum Meet Hudson. Find out what Hudson is and get started. Use Hudson See how to get more out of Hudson. Extend Hudson Learn how to build Hudson or extend Hudson by writing plugins. News 02/15/2016 - Hudson 3.3.3 Security Patch Released Hudson 3.3.3 is now available from the Hudson downloads page. This is a patch set improves the default security of Hudson by locking down the Hudson Command Line Interface (CLI) by default. For more information see the changelog 11/02/2015 - Hudson 3.3.2 Security Patch Released In order to address a critical remote vulnerability in Hudson: CVE-2015-8031 - Hudson XML External Entity Injection, Hudson 3.3.2 has been released. It is now available from the Hudson downloads page. For more information see the changelog and the download page. 09/30/2015 - Hudson 3.3.1 Patch Set Released Hudson 3.3.1 is now available from the Hudson downloads page. This is a patch set release for 3.3.0 and should be of particular interest to Active Directory users blocked by Bug 474329. For more information see the changelog and the download page. 07/12/2015 - Hudson 3.3.0 Hudson 3.3.0 is now available from the Hudson downloads page. Note that this release mandates the use of Java 7 or above to run Hudson. For more information see the changelog and the download page. 01/30/2015 - Hudson 3.2.2 is Available Hudson 3.2.2 is now available for production use from the Hudson downloads page. This patch set release addresses a range of issues in the 3.2 release including some security vulnerabilities (see the changelog for details). We recommend that users of 3.2.0 (and earlier versions) upgrade to this release. 9/27/2014 - Hudson 3.2.1 is Available Hudson 3.2.1 is now available for production use from the Hudson downloads page. This patch set release addresses a small number of high priority bugs brought to light by the Hudson 3.2.0 upgrade. We recommend that users of 3.2.0 (and earlier versions) upgrade to this release. 7/14/2014 - Hudson 3.2.0 Final is Available Hudson 3.2.0 is now available for production use from the downloads page. This milestone encapsulates the upgrade of the Spring libraries to Spring 3 and upgrades the capabilities of the Team support to full multi-tenancy with Job Group View and Slave isolation. 02/13/2014 - Hudson 3.1.2 Patchset Available for Download The Hudson 3.1.2 bugfix release now available for production use from the downloads page for the WAR file version and this page for the OS Specific distributions. The bugs addressed in this release and the preceding 3.1.1 patchset are listed in the change log. 02/03/2014 - Hudson 3.1.2 Early Access Available for Download Hudson 3.1.2 is available for early testing. This release is a small bugfix release addressing some high priority issues encountered in 3.1.1. The release candidate can be obtained from the downloads page. 12/24/2013 - Hudson 3.1.1 Available for Download The Hudson Team are pleased to announce the availability of the 3.1.1 release. This bugfix only release is now available for download from the downloads page. 12/13/2013 - Hudson 3 Essentials Published We're please to pass on the news that yet another Hudson book has just been published. Lloyd Meinholz has just let us know that his Hudson 3 Essentials fast paced book which covers both Hudson 3 and 3.1 has just made it to the newstand. Congratulations Lloyd! 09/30/2013 - Hudson Continuous Integration in Practice Book, Now Available Hudson project lead Winston Prakash, along with established author and JSF Spec Lead Ed Burns, have just completed their collaboration on a great guide to using and extending Hudson. The book is available now and you can read more here. 09/20/2013 - Hudson 3.1.0 is Production The Hudson project team is proud to announce the availability of Hudson 3.1.0. This new release adds the new team support feature and provides significant improvements in scalability. 03/22/2013 - Hudson 3.0.1 Released The 3.0.1 patchset release of Hudson is now available. This is a minor release, mainly consisting of bugfixes for the Hudson 3.0.0 release. Details of the fixes and minor new features can be found on the ChangeLog 12/12/2012 - Hudson 3.0.0 Released The first production release of Hudson under the Eclipse Foundation umbrella is now available! 12/12/2012 - Hudson has Graduated! Great news, Hudson has now moved out of incubation at Eclipse and the release of Hudson 3.0 is approved. 10/23/2012 - New Hudson iPhone App A new iPhone application for monitoring your Hudson installations, the Hudson Mobile Monitor, is now available from iTunes (and coming to Android soon!). Read more at the Hudson Blog. 10/16/2012 - Hudson Best Practices paper from JavaOne Winston and Duncans Developing Best Practice with Hudson paper is now available for viewing here. 09/24/2012 - Logging Issues for Hudson In accordance with the Hudson Community meeting of September 24th the old issues.hudson-ci.org repository is being retired. All new issues in Hudson core should be logged in the Eclipse Bugzilla system against technology.hudson. Issues with plugins should be logged in the respective GITHub projects: (Hudson 2.n Plugins / Hudson 3+ Plugins). Hudson 3.0.0 Release Candidate Now Available The release candidate for Hudson 3.0 from Eclipse is now available for download and evaluation from the Eclipse Download page. This version previews the production Hudson 3.0 release, which, barring show-stopper problems should appear within the next couple of weeks.. Note that this release candidate is intended for evaluation and testing only and should not be used in production. Hudson 3.0.0 Milestone 4 Released The fourth and final milestone (alpha) release of Hudson from Eclipse is now available for download and evaluation from the Eclipse Download page. This version previews the Hudson 3.0 release candidate (RC1) and provides the final stable library versions and more improvements to the management of plugins including a re-worked plugin management center. Note that this milestone version is intended for evaluation only and should not be used in production. Hudson 2.2.1 Released We're happy to announce the immediate availability of Hudson 2.2.1 production. This is primarily a bugfix release. See the changelog for more information. Hardware Migration It's been a long road but Hudson is now bedding in on its new hardware configuration. This will provide a more stable environment and more power for the Hudson-on-Hudson plugins build. Hudson 3.0.0 Milestone 0 Released Great news! The first milestone (alpha) release of Hudson from Eclipse is now available for download and evaluation. Head on over to the Eclipse Download page to grab it and play. Note that this milestone version is intended for evaluation only and should not be used in production. Hudson 2.2.0 Released We're happy to announce the availablity of Hudson 2.2.0 production - Now with Cascading projects! It can be downloaded from here. click here for more...Note: You must backup your job configurations before upgrading to this release RSS: Twitter Feed ● User Forum Download Hudson .war Latest production Release WAR file: 3.3.3 Change Log ● Earlier Releases Download Native Pkg 3.3.3 Production Version: Ubuntu / Debian Oracle Linux Redhat / Fedora / CentOS openSUSE More Information Want to Install Hudson? Here's how>> License Hudson is currently licensed under the Eclipse EPL license. Versions of Hudson prior to 3.n and plugins (unless otherwise stated) are licensed under the MIT license About the Project Hudson is hosted partly as an Eclipse Foundation project and partly as a java.net project. For more information about this head on over to the The Hudson Universe Page.   Keeping in Touch Follow @hudsonci Hang out on the Hudson Forum @ Eclipse More >> Project Sponsors Feedback Terms of Use Privacy Legal"	"null"	"null"	"Continuous integration server still in active development."	"true"
"Ancients"	"Java Modeling Language (JML)"	"http://www.eecs.ucf.edu/%7Eleavens/JML/"	"Behavioral interface specification language that can be used to specify the behavior of code modules. It combines the design by contract approach of Eiffel and the model-based specification approach of the Larch family of interface specification languages, with some elements of the refinement calculus. Used by several other verification tools."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Java Modeling Language (JML) Home Page The Java Modeling Language (JML) Home Page The JML webpages have been reorganized. The page you are requesting is now available at: http://www.jmlspecs.org/index.shtml The new URL should automatically load in a few seconds. If you are tired of waiting, load the new page. Page last modified $Date: 2013/05/12 13:03:45 $."	"null"	"null"	"Behavioral interface specification language that can be used to specify the behavior of code modules. It combines the design by contract approach of Eiffel and the model-based specification approach of the Larch family of interface specification languages, with some elements of the refinement calculus. Used by several other verification tools."	"true"
"Ancients"	"JavaCC"	"https://javacc.java.net/"	"More specific and slightly easier to learn. Has syntactic lookahead."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JavaCC Home Java Compiler Compiler tm (JavaCC tm) - The Java Parser Generator Main JavaCC home page at its java.net home New!!! JavaCC can now generate C/C++ code! Please try it out from head of the main source code repository: https://svn.java.net/svn/javacc~svn or svn+ssh://<your java.net userid>@svn.java.net/javacc~svn. Just check out the source code and run ant to build it. We will soon release a beta version. Java Compiler Compiler tm (JavaCC tm) is the most popular parser generator for use with Java tm applications. A parser generator is a tool that reads a grammar specification and converts it to a Java program that can recognize matches to the grammar. In addition to the parser generator itself, JavaCC provides other standard capabilities related to parser generation such as tree building (via a tool called JJTree included with JavaCC), actions, debugging, etc. We've had hundreds of thousands of downloads and estimate serious users in the many thousands (and maybe even tens of thousands). Our newsgroup comp.compilers.tools.javacc and our mailing list together have a few thousand participants. JavaCC works with any Java VM version 1.2 or greater. It has been certified to be 100% Pure Java. JavaCC has been tested on countless different platforms without any special porting requirements. Given that we have seen JavaCC run on only around 5 or 6 platforms, we think this is a great testimonial to the ""Write Once Run Anywhere"" aspect of the Java programming language. We say this as engineers who have personally experienced the benefits of writing Java applications. Getting the Software Download JavaCC 6.0 (older versions are here). Third party contributions An excellent FAQ is maintained by Theo Norvell at Memorial University of Newfoundland. A repository of JavaCC grammars is being maintained on the JavaCC home page. We urge you to contribute your grammars to this repository or to the JavaCC authors for the benefit of others. Feature Highlights: A short description of the features of JavaCC. Installation and Getting Started: This page contains a bunch of tips that should aid you through the installation process. Documentation: The complete documentation for JavaCC. Lexer writing tips: Tips for writing good JavaCC lexical analyzer specs. This can also help you if you are getting 'code size too big' error message from javac when you compile the generated token manager. Getting Support and Keeping In Touch: Here's how you can contact us and keep in touch with what's happening. Source Code: Here's the Subversion repository containing the JavaCC source code."	"null"	"null"	"More specific and slightly easier to learn. Has syntactic lookahead."	"true"
"Ancients"	"JavaServer Faces"	"https://javaserverfaces.java.net/"	"Oracle's open-source implementation of the JSF standard, Mojarra."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Mojarra JavaServer Faces Mojarra JavaServer Faces - Oracle's open source implementation of the JSF standard Related Projects GlassFish Jersey Tyrus Grizzly Open MQ JavaServer™ Faces technology simplifies building user interfaces for JavaServer applications.   Developers of various skill levels can quickly build web applications by: Assembling reusable UI components in a page Connecting these components to an application data source Wiring client-generated events to server-side event handlers Latest News June 13th, 2016 Mojarra 2.3.0 Milestone 6 released : Release Notes - Download Page May 30th, 2016 Mojarra 2.2.8 Milestone 16 released : Release Notes - Download Page May 27th, 2016 Mojarra 2.1.29 Milestone 07 released : Release Notes - Download Page May 24th, 2016 Mojarra 2.0.11 Milestone 03 released : Release Notes - Download Page May 18th, 2016 Mojarra 2.1.29 Milestone 06 released : Release Notes - Download Page May 31th, 2016 Mojarra 2.1.20 Milestone 12 released : Release Notes - Download Page May 7th, 2016 Mojarra 2.1.20 Milestone 11 released : Release Notes - Download Page April 20th, 2016 Mojarra 2.1.20 Milestone 10 released : Release Notes - Download Page April 15th, 2016 Mojarra 2.2.8 Milestone 15 released : Release Notes - Download Page April 1st, 2016 Mojarra 2.2.8 Milestone 14 released : Release Notes - Download Page March 17th, 2016 Mojarra 2.3.0 Milestone 5 released : Release Notes - Download Page February 4th, 2016 Mojarra 2.2.13 released : Release Notes - Download Page October 8th, 2015 Mojarra 2.3.0 Milestone 4 released : Release Notes - Download Page July 21th, 2015 Mojarra 2.3.0 Milestone 3 released : Release Notes - Download Page July 20th, 2015 Mojarra 2.2.12 released : Release Notes - Download Page July 8th, 2015 Arjan Tijms from ZEEF was granted committer access! January 6th, 2015 Mojarra 2.2.11 released : Release Notes - Download Page January 6th, 2015 Mojarra 2.2.10 released : Release Notes - Download Page January 6th, 2015 Mojarra 2.3.0 Milestone 1 released : Release Notes - Download Page December 18th, 2014 Mojarra 2.2.9 released : Release Notes - Download Page September 22nd, 2014 JSF 2.3 begins : JSR page. September 9th, 2014 GlassFish 4.1 released : Download Page. Contains Mojarra 2.2.7.      Get Started How to quickly start with JSF      Download How to download Mojarra. Older releases available on the download page.       Documentation JavaServer Faces API 2.2 Javadoc      Forum Post your JSF related questions      Issue Tracker Issues and RFEs       Contribute How to get involved      Specification JCP activity to advance the JSF specification      FAQ Frequently Asked Questions          GlassFish Server GlassFish Server 4.0 Open Source Edition Project sponsored by Copyright © 2014 Oracle Corporation and/or its affiliates. Last updated: 4/9/14 12:15 PM PT"	"null"	"null"	"Oracle's open-source implementation of the JSF standard, Mojarra."	"true"
"Ancients"	"JavaServer Pages"	"https://jsp.java.net/"	"Common templating for websites with custom tag libraries."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JavaServer(TM) Pages JavaServer(TM) Pages JavaServer(TM) Pages Implementation This project provides a container independent implementation of JSP 2.1. The main goals are Improves current implementation: bug fixes and performance improvements Provides API for use by other tools, such as Netbeans Provides a sandbox for new JSP features; provides a reference implementation of next JSP spec Get Started Learn about JSP 2.1 and EL 1.1. Download Download the latest JSP implementation and run with a JavaEE container. Get Involved Help improve JSP implementation by providing beedbacks and filing bugs. Those interested in code contribution, can set up a workspace for building and testing. Main Home License Governance Download Download Contribute Mailing Lists Membership Project Info Source Control Issue Tracking Mailing Lists JSP Specification Back to top Copyright ©2013 Oracle Corporation. All Rights Reserved."	"null"	"null"	"Common templating for websites with custom tag libraries."	"true"
"Ancients"	"JUnit"	"http://junit.org/"	"Common testing framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JUnit"	"null"	"null"	"Common testing framework."	"true"
"Ancients"	"Launch4j"	"http://launch4j.sourceforge.net/"	"Wraps JARs in lightweight and native Windows executables."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"66"	"6"	"31"	"GitHub - lukaszlenart/launch4j-maven-plugin: http://launch4j.sourceforge.net/index.html Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 66 Fork 31 lukaszlenart/launch4j-maven-plugin Code Issues 5 Pull requests 0 Pulse Graphs http://launch4j.sourceforge.net/index.html http://9stmaryrd.com/tools/launch4j-maven-plugin/ 141 commits 1 branch 13 releases 10 contributors Java 53.3% C 46.7% Java C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show launch4j-maven-plugin-1.7.10 launch4j-maven-plugin-1.7.9 launch4j-maven-plugin-1.7.8 launch4j-maven-plugin-1.7.7 launch4j-maven-plugin-1.7.6 launch4j-maven-plugin-1.7.5 launch4j-maven-plugin-1.7.4 launch4j-maven-plugin-1.7.3 launch4j-maven-plugin-1.7.2 launch4j-maven-plugin-1.7.1 launch4j-maven-plugin-1.7 launch4j-maven-plugin-1.6 launch4j-maven-plugin-1.4 Nothing to show New pull request Latest commit 01f25f2 Jul 3, 2016 lukaszlenart committed on GitHub Fixes small align issue Permalink Failed to load latest commit information. src Drops default value to avoid exceptions Apr 21, 2016 .gitignore Ignores jenv specific file Dec 30, 2014 .travis.yml Migrates to new Tarvis infrastructure Sep 3, 2015 LICENSE Initial import Jan 28, 2011 README.md Fixes small align issue Jul 3, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Apr 21, 2016 README.md Launch4j Maven Plugin Originally hosted at http://9stmaryrd.com/tools/launch4j-maven-plugin/ Documentation Version Notes FAQ Documentation Please check this document for more detailed info on how to use the plugin. Please also check Launch4j's Configuration file page. Version Notes Version notes 1.7.10 fixes broken <configuration/> when not using <infile/> Version notes 1.7.9 adds capability of loading Launch4j native configuration file <configuration>      <infile>${project.basedir}/src/main/resources/my-app-config.xml</infile> </configuration> By default it will take from ${project.basedir}/src/main/resources/${project.artifactId}-launch4j.xml. Plugin execution goal should be set to install. It's an optional configuration, you can either use your existing configuration as it was in previous version or use native Launch4j config file via <infile>. Version notes 1.7.8 fixes issue with spaces in path to maven repository on non-Windows systems, see #27, #28 Version notes 1.7.7 once again fixes problem with including dependencies in scope runtime (now it should be the final solution), see #5 adds support for bundledJreAsFallback and bundledJre64Bit properties, see #23 upgrades Launch4j to 3.8.0, see #21 Version notes 1.7.6 fixes again problem with including dependencies in scope runtime, see #5 Version notes 1.7.5 allows add custom headers and libraries to working dir #22 Version notes 1.7.4 fixes type in default value for outfile parameter #17 Version notes 1.7.3 uses Maven annotation instead of JavaDoc parameters #15 upgrades Maven plugins #15 converts tabs to spaces 5b0619 Version notes 1.7.2 adds support for restartOnCrash Launch4j's option #14 Version notes 1.7.1 launch4j's abeille dependency was excluded #11 versions of several plugins were updated #11 tabs were converted to spaces #11 Version notes 1.7 uses the latest version of Launch4j (3.5.0) contains support for runtimeBits, see #6 fixes problem with including dependencies in scope runtime, see #5 Version notes 1.6 dropped Launch4j source and based on artifacts from Maven Central, see #8 uses the latest version of Launch4j (3.4.0) at least Java 1.7 is required FAQ Q: I cannot build my project because dsol-xml dependency is missing? A: Add this repository to your ~/.m2/settings.xml <repositories>     <repository>         <id>dsol-xml</id>         <name>Simulation @ TU Delft</name>         <url>http://simulation.tudelft.nl/maven/</url>     </repository> </repositories> Q: Where can I find -SNAPSHOT builds? A: Use the Sonatype OSS repo <repositories>     <repository>         <id>sonatype-nexus-snapshots</id>         <name>Sonatype Nexus Snapshots</name>         <url>https://oss.sonatype.org/content/repositories/snapshots/</url>         <releases>             <enabled>false</enabled>         </releases>         <snapshots>             <enabled>true</enabled>         </snapshots>     </repository> </repositories> Q: Can I use Launch4j on 64bit OS? A: Yes but you will have to install these libs to avoid problems: lib32z1 lib32ncurses5 lib32bz2-1.0 ( (has been ia32-libs in older Ubuntu versions) zlib.i686 ncurses-libs.i686 bzip2-libs.i686 See #4 for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lukaszlenart/launch4j-maven-plugin"	"Wraps JARs in lightweight and native Windows executables."	"true"
"Ancients"	"Quartz"	"https://github.com/quartz-scheduler/quartz"	"Open-source job scheduler library with Apache 2.0 license."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"194"	"42"	"95"	"GitHub - quartz-scheduler/quartz: Code for Quartz Scheduler Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 194 Fork 95 quartz-scheduler/quartz Code Issues 19 Pull requests 10 Pulse Graphs Code for Quartz Scheduler http://www.quartz-scheduler.org 328 commits 5 branches 22 releases 5 contributors Java 99.0% Other 1.0% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.2.1-rc master quartz-1.8.x quartz-2.0.x quartz-2.1.x Nothing to show quartz-2.2.3 quartz-2.2.2 quartz-2.2.1 quartz-2.2.0 quartz-2.1.7 quartz-2.1.6 quartz-2.1.5 quartz-2.1.4 quartz-2.1.3 quartz-2.1.2 quartz-2.1.1 quartz-2.1.0 quartz-2.0.2 quartz-2.0.1 quartz-2.0.0 quartz-1.8.6 quartz-1.8.5 quartz-1.8.4 quartz-1.8.3 quartz-1.8.2 quartz-1.8.1 quartz-1.8.0 Nothing to show New pull request Latest commit 5cc9a44 May 24, 2016 jhouserizer Merge pull request #15 from rishabhmonga/TAB-4700 … TAB-4700 : Remove update-checker feature Permalink Failed to load latest commit information. checkstyle trunk to 2.2.4-SNAPSHOT Jan 19, 2016 distribution TAB-4700 : Remove update-checker feature May 24, 2016 management-quartz-impl trunk to 2.2.4-SNAPSHOT Jan 19, 2016 management-quartz trunk to 2.2.4-SNAPSHOT Jan 19, 2016 quartz-commonj trunk to 2.2.4-SNAPSHOT Jan 19, 2016 quartz-core TAB-4700 : Remove update-checker feature May 24, 2016 quartz-jboss trunk to 2.2.4-SNAPSHOT Jan 19, 2016 quartz-jobs trunk to 2.2.4-SNAPSHOT Jan 19, 2016 quartz-oracle trunk to 2.2.4-SNAPSHOT Jan 19, 2016 quartz-plugins TAB-4700 : Remove update-checker feature May 24, 2016 quartz-stubs trunk to 2.2.4-SNAPSHOT Jan 19, 2016 quartz-weblogic trunk to 2.2.4-SNAPSHOT Jan 19, 2016 quartz trunk to 2.2.4-SNAPSHOT Jan 19, 2016 system-tests trunk to 2.2.4-SNAPSHOT Jan 19, 2016 terracotta TAB-4700 : Remove update-checker feature May 24, 2016 README.txt it's sonatype not sourceforge that we deploy to Apr 13, 2012 TestCategories.properties Add test categories Mar 2, 2012 pom.xml trunk to 2.2.4-SNAPSHOT Jan 19, 2016 README.txt 1. To compile:   %> mvn install -DskipTests    Note:  the final Quartz jar is found under quartz/target   2. To build Quartz distribution kit:    %> cd distribution   %> mvn package  3. To deploy Maven central repo (via Sonatype)    %> mvn clean deploy -P sign-artifacts,deploy-sonatype -DskipTests  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/quartz-scheduler/quartz"	"Open-source job scheduler library with Apache 2.0 license."	"true"
"Ancients"	"TestNG"	"http://testng.org/"	"Testing framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"null"	"null"	"Testing framework."	"true"
"Ancients"	"Trove"	"http://trove.starlight-systems.com/"	"Primitive collections."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Trove Search this site Home Overview News License Contacts Javadocs Download Download (<3.0.3) Support FAQ Discussion Forum BitBucket Page Home The Trove library provides high speed regular and primitive collections for Java.  The GNU Trove library has two objectives:  Provide ""free"" (as in ""free speech"" and ""free beer""), fast, lightweight implementations of the java.util Collections API. These implementations are designed to be pluggable replacements for their JDK equivalents. Provide primitive collections with similar APIs to the above. This gap in the JDK is often addressed by using the ""wrapper"" classes (java.lang.Integer, java.lang.Float, etc.) with Object-based collections. For most applications, however, collections which store primitives directly will require less space and yield significant performance gains.Trove allows both server-side and client applications to work faster and use less memory. Give it a try and discover a library you can't live without!  Current versions:  Stable: 3.0.3, changes (6/3/12)  Experimental: none right now Recent News Moved to BitBucket Trove development has moved to BitBucket. You can now find the code repository in Git, the issue tracker and (soon) the wiki there. Posted Feb 24, 2013, 3:12 PM by Rob Eden 3.0.3 3.0.3 has been released. This release is a minor bugfix release recommended for all users. It's available both from SourceForge and Maven. Posted Jun 3, 2012, 8:15 PM by Rob Eden 3.0.2 3.0.2 has been released to the SourceForge download page and will be release to Maven soon (tonight?).This release contains a couple of significant bug fixes and is ... Posted Nov 23, 2011, 11:41 AM by Rob Eden Showing posts 1 - 3 of 9. View more » Sign in|Report Abuse|Print Page|Powered By Google Sites"	"null"	"null"	"Primitive collections."	"true"
"Bean Mapping"	"Dozer"	"https://github.com/DozerMapper/dozer/"	"Mapper that copies data from one object to another, using annotations, API or XML configuration."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"606"	"84"	"248"	"GitHub - DozerMapper/dozer: Dozer is a Java Bean to Java Bean mapper that recursively copies data from one object to another. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 84 Star 606 Fork 248 DozerMapper/dozer Code Issues 156 Pull requests 37 Wiki Pulse Graphs Dozer is a Java Bean to Java Bean mapper that recursively copies data from one object to another. http://dozer.sf.net 701 commits 1 branch 1 release 21 contributors Java 99.9% Other 0.1% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v5.4.0 Nothing to show New pull request Latest commit 788b3c6 Aug 2, 2015 lauriharpf Merge pull request #101 from josebarragan/feature/JAXBElementConverter … Patch for #104 Permalink Failed to load latest commit information. core Merge pull request #101 from josebarragan/feature/JAXBElementConverter Aug 2, 2015 eclipse-plugin Update copyrights across all code Aug 30, 2013 osgi-test Fixes #211 Jul 25, 2015 osgi switched version to 5.5.1 to be able to release; Apr 22, 2014 proto fixes to builds and documentation; Apr 23, 2014 spring Updated dependencies: Nov 23, 2014 .gitignore switched version to 5.5.1 to be able to release; Apr 22, 2014 .travis.yml Adding ooraclejdk8 to Travis build Nov 25, 2014 LICENSE.md Update copyrights across all code Aug 30, 2013 README.md Some basic grammar corrections Jul 8, 2015 pom.xml Merge pull request #199 from diorcety/jdk8 Nov 30, 2014 README.md Why Map? A mapping framework is useful in a layered architecture where you are creating layers of abstraction by encapsulating changes to particular data objects vs. propagating these objects to other layers (i.e. external service data objects, domain objects, data transfer objects, internal service data objects). Mapping between data objects has traditionally been addressed by hand coding value object assemblers (or converters) that copy data between the objects. Most programmers will develop some sort of custom mapping framework and spend countless hours and thousands of lines of code mapping to and from their different data object. This type of code for such conversions is rather boring to write, so why not do it automatically? What is Dozer? Dozer is a Java Bean to Java Bean mapper that recursively copies data from one object to another, it is an open source mapping framework that is robust, generic, flexible, reusable, and configurable. Dozer supports simple property mapping, complex type mapping, bi-directional mapping, implicit-explicit mapping, as well as recursive mapping. This includes mapping collection attributes that also need mapping at the element level. Dozer not only supports mapping between attribute names, but also automatically converting between types. Most conversion scenarios are supported out of the box, but Dozer also allows you to specify custom conversions via XML or code-based configuration. Getting Started Check out the Getting Started Guide and Full User Guide or Dozer SF Site for advanced information. Getting the Distribution If you are using Maven, simply copy-paste this dependency to your project. <dependency>     <groupId>net.sf.dozer</groupId>     <artifactId>dozer</artifactId>     <version>5.5.1</version> </dependency>  Apache Ivy users can copy-paste the following line instead. <dependency org=""net.sf.dozer"" name=""dozer"" rev=""5.5.1""/>  Simple Example <mapping>   <class-a>yourpackage.SourceClassName</class-a>   <class-b>yourpackage.DestinationClassName</class-b>     <field>       <A>yourSourceFieldName</A>       <B>yourDestinationFieldName</B>     </field> </mapping>  SourceClassName sourceObject = ... Mapper mapper = new DozerBeanMapper(); DestinationObject destObject =     mapper.map(sourceObject, DestinationClassName.class); assertTrue(destObject.getYourDestinationFieldName().equals(sourceObject.getYourSourceFieldName));  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DozerMapper/dozer/"	"Mapper that copies data from one object to another, using annotations, API or XML configuration."	"true"
"Bean Mapping"	"JMapper"	"http://jmapper-framework.github.io/jmapper-core/"	"Using byte code manipulation for lightning fast mapping. Supporting annotations, API or XML configuration."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"7"	"2"	"GitHub - jmapper-framework/jmapper-core: Elegance, high performance and robustness all in one java bean mapper Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 29 Fork 2 jmapper-framework/jmapper-core Code Issues 9 Pull requests 0 Wiki Pulse Graphs Elegance, high performance and robustness all in one java bean mapper http://jmapper-framework.github.io/jmapper-core 329 commits 2 branches 14 releases Fetching contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show jmapper-core-1.4.1 jmapper-core-1.4.0 jmapper-core-1.3.3.1 jmapper-core-1.3.3 jmapper-core-1.3.2 jmapper-core-1.2.2 jmapper-core-1.2.0 jmapper-core-1.1.1 jmapper-core-1.1.0 jmapper-api-1.2.1 1.6.0.1 1.6.0 1.5.0 1.4.2 Nothing to show New pull request Latest commit 94c441a May 19, 2016 avurro prepare for next development iteration Permalink Failed to load latest commit information. JMapper Framework prepare for next development iteration May 19, 2016 .travis.yml Update .travis.yml Apr 30, 2015 LICENSE license added Apr 17, 2015 README.md Update README.md Apr 19, 2016 README.md JMapper Framework Version 1.6.0.1 Released! You can check the release notes for more information. Fast as hand-written code with zero compromise. Write the configuration using what you prefer: Annotation, XML or API. Most relevant features: One to Many and Many to One relationship dynamic conversions, whose body adapts to every relationship inherited configurations, you can split the configuration along the hierarchy and more.. especially its use is intuitive Configuration Below it is shown the same configuration in the three types allowed Annotation class Destination{                      class Source{     @JMap     private String id;                      private String id;     @JMap(""sourceField"")                         private String destinationField;        private String sourceField;     private String other;                   private String other;      // getters and setters...               // getters and setters... }                                       } XML <jmapper>   <class name=""it.jmapper.bean.Destination"">     <attribute name=""id"">       <value name=""id""/>     </attribute>     <attribute name=""destinationField"">       <value name=""sourceField"">     </attribute>   </class> </jmapper> API JMapperAPI jmapperAPI = new JMapperAPI()     .add(mappedClass(Destination.class)              .add(attribute(""id"")                      .value(""id""))              .add(attribute(""destinationField"")                      .value(""sourceField""))); Creation JMapper<Destination, Source> mapper; Annotation mapper = new JMapper<>(Destination.class, Source.class); XML mapper = new JMapper<>(Destination.class, Source.class, xml); API mapper = new JMapper<>(Destination.class, Source.class, jmapperAPI); Usage Source source = new Source(""id"", ""sourceField"", ""other""); Destination destination = mapper.getDestination(source); Result destination [""id"", ""sourceField"", null] With JMapper we have all the advantages of dynamic mapping with the performance of static code, with 0 memory consumption. Required java 5+ issues status Dependency information For a complete guide wiki pages Do you like the project? think it has good potential? Let us know any malfunctions, new features and more through the JMapper Framework group. Do you want to contribute to the development of JMapper? There are many features to be implemented, such as: Eclipse plugin Integration with Hibernate, Apache Camel and other frameworks and more.. contact us (jmapper.framework@gmail.com) for more information. Do you want to do a friendly chat? Follow us on twitter Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jmapper-framework/jmapper-core"	"Using byte code manipulation for lightning fast mapping. Supporting annotations, API or XML configuration."	"true"
"Bean Mapping"	"MapStruct"	"https://github.com/mapstruct/mapstruct"	"Code generator which simplifies mappings between different bean types, based on a convention over configuration approach."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"408"	"44"	"97"	"GitHub - mapstruct/mapstruct: An annotation processor for generating type-safe bean mappers Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 408 Fork 97 mapstruct/mapstruct Code Issues 141 Pull requests 2 Wiki Pulse Graphs An annotation processor for generating type-safe bean mappers http://mapstruct.org/ 765 commits 2 branches 10 releases 19 contributors Java 97.7% FreeMarker 2.3% Java FreeMarker Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 385-target-inheritance-discussion master Nothing to show 1.1.0.Beta1 1.0.0.Final 1.0.0.CR2 1.0.0.CR1 1.0.0.Beta4 1.0.0.Beta3 1.0.0.Beta2 1.0.0.Beta1 1.0.0.Alpha2 1.0.0.Alpha1 Nothing to show New pull request Latest commit 53e542c Jul 8, 2016 agudian committed on GitHub #828 Fix NoClassDefFoundError when running in Eclipse Neon (4.6) (#831) Permalink Failed to load latest commit information. build-config [maven-release-plugin] prepare for next development iteration Mar 16, 2016 core-common #669 Documentation update for source presence checker and nullValueCh… Jul 6, 2016 core-jdk8 #669 rework into sourcepresencecheck SPI and nullvaluecheckstrategy Jul 5, 2016 core #669 rework into sourcepresencecheck SPI and nullvaluecheckstrategy Jul 5, 2016 distribution [maven-release-plugin] prepare for next development iteration Mar 16, 2016 documentation #669 Documentation update for source presence checker and nullValueCh… Jul 6, 2016 etc #723 Updating year in license headers Jan 16, 2016 integrationtest #825 Add @WithServiceImplementation annotation in testutil to registe… Jul 5, 2016 parent #27 Add OSGi metadata to manifests of mapstruct.jar and mapstruct-jdk… Jun 29, 2016 processor #828 Fix NoClassDefFoundError when running in Eclipse Neon (4.6) (#831) Jul 8, 2016 .gitattributes Automatically handling line endings May 13, 2013 .gitignore #365 Adding integration test May 27, 2015 CONTRIBUTING.md Adding CONTRIBUTING.md May 23, 2013 LICENSE.txt #723 Updating year in license headers Jan 16, 2016 copyright.txt #669 rework into sourcepresencecheck SPI and nullvaluecheckstrategy Jul 5, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Mar 16, 2016 readme.md Updating readme.md prior to 1.0.0.Final release Nov 25, 2015 readme.md MapStruct - Java bean mappings, the easy way! Version: 1.0.0.Final, November 25th 2015 What is MapStruct? MapStruct is a Java annotation processor for the generation of type-safe bean mapping classes. All you have to do is to define a mapper interface which declares any required mapping methods. During compilation, MapStruct will generate an implementation of this interface. This implementation uses plain Java method invocations for mapping between source and target objects, i.e. no reflection or similar. Compared to writing mapping code from hand, MapStruct saves time by generating code which is tedious and error-prone to write. Following a convention over configuration approach, MapStruct uses sensible defaults but steps out of your way when it comes to configuring or implementing special behavior. Compared to dynamic mapping frameworks, MapStruct offers the following advantages: Fast execution by using plain method invocations instead of reflection Compile-time type safety: Only objects and attributes mapping to each other can be mapped, no accidental mapping of an order entity into a customer DTO etc. Self-contained code, no runtime dependencies Clear error-reports at build time, if entities or attributes can't be mapped Mapping code is easy to debug (or edited by hand e.g. in case of a bug in the generator) MapStruct works in command line builds (plain javac, via Maven, Gradle, Ant etc.) and IDEs. For Eclipse, there is a dedicated plug-in under development (see https://github.com/mapstruct/mapstruct-eclipse) which goes beyond what's possible with an annotation processor, providing content assist for annotation attributes, quick fixes and more. Documentation and getting help To learn more about MapStruct in two minutes, refer to the project homepage. The reference documentation covers all provided functionality in detail. If you need help, come and join the mapstruct-users group. Requirements MapStruct requires Java 1.6 or later. Using MapStruct MapStruct is a Java annotation processor based on JSR 269 and as such can be used within command line builds (javac, Ant, Maven etc.) as well as from within your IDE. For Maven based projects add the following to your POM file in order to use MapStruct (the dependencies can be obtained from Maven Central): ... <properties>     <org.mapstruct.version>1.0.0.Final</org.mapstruct.version> </properties> ... <dependencies>     <dependency>         <groupId>org.mapstruct</groupId>         <artifactId>mapstruct</artifactId>         <version>${org.mapstruct.version}</version>     </dependency>     <!-- Use this with Java 8 and beyond -->     <dependency>         <groupId>org.mapstruct</groupId>         <artifactId>mapstruct-jdk8</artifactId>         <version>${org.mapstruct.version}</version>     </dependency> </dependencies> ... <build>     <plugins>         <plugin>             <groupId>org.bsc.maven</groupId>             <artifactId>maven-processor-plugin</artifactId>             <version>2.2.4</version>             <configuration>                 <defaultOutputDirectory>                     ${project.build.directory}/generated-sources                 </defaultOutputDirectory>                 <processors>                     <processor>org.mapstruct.ap.MappingProcessor</processor>                 </processors>             </configuration>             <executions>                 <execution>                     <id>process</id>                     <phase>generate-sources</phase>                     <goals>                         <goal>process</goal>                     </goals>                 </execution>             </executions>             <dependencies>                 <dependency>                     <groupId>org.mapstruct</groupId>                     <artifactId>mapstruct-processor</artifactId>                     <version>${org.mapstruct.version}</version>                 </dependency>             </dependencies>         </plugin>     </plugins> </build> ... Alternatively, a distribution bundle is available from SourceForge. Licensing MapStruct is licensed under the Apache License, Version 2.0 (the ""License""); you may not use it except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0. Building from Source MapStruct uses Maven for its build. To build the complete project run mvn clean install  from the root of the project directory. To skip the distribution module, run mvn clean install -DskipDistribution=true  Links Homepage Source code Downloads Issue tracker User group CI build Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mapstruct/mapstruct"	"Code generator which simplifies mappings between different bean types, based on a convention over configuration approach."	"true"
"Bean Mapping"	"ModelMapper"	"https://github.com/jhalterman/modelmapper"	"ModelMapper is an intelligent object mapping library that automatically maps objects to each other."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"386"	"39"	"92"	"GitHub - jhalterman/modelmapper: Intelligent object mapping Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 386 Fork 92 jhalterman/modelmapper Code Issues 66 Pull requests 7 Pulse Graphs Intelligent object mapping http://modelmapper.org 420 commits 6 branches 26 releases 13 contributors Java 99.9% Other 0.1% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags JonasJurczok-master disambiguation gh-pages gh64 gh105 master Nothing to show modelmapper-parent-1.0.1 modelmapper-parent-0.7.6 modelmapper-parent-0.7.5 modelmapper-parent-0.7.4 modelmapper-parent-0.7.3 modelmapper-parent-0.7.2 modelmapper-parent-0.7.1 modelmapper-parent-0.7.0 modelmapper-parent-0.6.5 modelmapper-parent-0.6.4 modelmapper-parent-0.6.3 modelmapper-parent-0.6.2 modelmapper-parent-0.6.1 modelmapper-parent-0.6.0 modelmapper-parent-0.5.6 modelmapper-parent-0.5.5 modelmapper-parent-0.5.4 modelmapper-parent-0.5.3 modelmapper-parent-0.5.2 modelmapper-parent-0.5.1 modelmapper-parent-0.5.0 modelmapper-parent-0.4.0 modelmapper-0.3.4 modelmapper-0.3.3 modelmapper-0.3.2 modelmapper-0.3.1 Nothing to show New pull request Latest commit 62da5b2 May 18, 2016 jhalterman [maven-release-plugin] prepare for next development iteration Permalink Failed to load latest commit information. bin Javadoc push script update Aug 3, 2013 core [maven-release-plugin] prepare for next development iteration May 18, 2016 examples Added field references to examples Jun 6, 2014 extensions [maven-release-plugin] prepare for next development iteration May 18, 2016 groovy Added support for explicit mapping of groovy properties - Fixes issue #… Aug 24, 2013 .gitignore doc build updates Sep 15, 2012 .travis.yml Upgrade to latest travis infra Sep 2, 2015 CHANGES.md Update changelog May 18, 2016 LICENSE.txt initial commit Jun 20, 2011 README.md Add note on project status to readme Jun 25, 2015 pom.xml [maven-release-plugin] prepare for next development iteration May 18, 2016 README.md ModelMapper ModelMapper is an intelligent object mapping library that automatically maps objects to each other. It uses a convention based approach while providing a simple refactoring safe API for handling specific use cases. Visit modelmapper.org to learn more. Project Status I am currently not focused on ModelMapper development beyond minor bug fixes and pull requests. If you're interested in contributing major work to ModelMapper or even taking on the project as a maintainer, feel free to contact me. Contributing Bug reports and feature requests are welcome via the issue tracker. Fixes and enhancements are also welcome via pull requests. If you're unsure about a contribution idea, feel free to contact me. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jhalterman/modelmapper"	"ModelMapper is an intelligent object mapping library that automatically maps objects to each other."	"true"
"Bean Mapping"	"Orika"	"https://github.com/orika-mapper/orika"	"Orika is a Java Bean mapping framework that recursively copies (among other capabilities) data from one object to another."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"248"	"45"	"89"	"GitHub - orika-mapper/orika: Simpler, better and faster Java bean mapping framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 45 Star 248 Fork 89 orika-mapper/orika forked from elaatifi/orika Code Issues 45 Pull requests 1 Wiki Pulse Graphs Simpler, better and faster Java bean mapping framework http://orika-mapper.github.io/orika-docs/ 734 commits 12 branches 15 releases 18 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags abstract-mappers add-dest-to-filter.shouldMap expectation filters java8 master orangina orika-1.4.x orika-1.5.x qualified-field-context rdt revert-41-java-8 Nothing to show orika-parent-1.4.6 orika-parent-1.4.5 orika-parent-1.4.4 orika-parent-1.4.3 orika-parent-1.4.2 orika-parent-1.4.1 orika-parent-1.4.0 orika-parent-1.3.5 orika-parent-1.3.4 orika-parent-1.3.3 orika-parent-1.3.1 orika-parent-1.3.0 orika-parent-1.2.2 orika-parent-1.2.1 1.5.0-beta0 Nothing to show New pull request #132 Compare This branch is 331 commits ahead, 1 commit behind elaatifi:master. Latest commit 4ae4d3a Jun 4, 2016 elaatifi Caliper benchmark not available anymore #121 Permalink Failed to load latest commit information. core Merge pull request #115 from acourouppe/master Jun 1, 2016 eclipse-tools [maven-release-plugin] prepare for next development iteration May 30, 2015 misc Added caliper results by version for before and after recent changes for Apr 28, 2013 tests Beef up unit test and fix failure Apr 6, 2016 .gitignore Update copyright headers Jul 28, 2013 .project Changed eclipse parent project name back to 'orika-parent' Sep 9, 2012 .travis.yml Update .travis.yml Nov 1, 2014 AUTHORS Update AUTHORS Nov 12, 2014 LICENSE Add Apache license 2 file Jun 23, 2013 README.md Caliper benchmark not available anymore #121 Jun 4, 2016 pom.xml update paranamer to version 2.8 May 18, 2016 README.md Orika ! NEW We are pleased to announce the release of Orika 1.4.6 ! This version is available on Maven central repository What? Orika is a Java Bean mapping framework that recursively copies (among other capabilities) data from one object to another. It can be very useful when developing multi-layered applications. Why? Struggling with hand coded and reflection-based mappers? Orika can be used to simplify the process of mapping between one object layer and another. Our ambition is to build a comprehensive, efficient and robust Java bean mapping solution. Orika focuses on automating as much as possible, while providing customization through configuration and extension where needed. Orika enables the developer to : Map complex and deeply structured objects ""Flatten"" or ""Expand"" objects by mapping nested properties to top-level properties, and vice versa Create mappers on-the-fly, and apply customizations to control some or all of the mapping Create converters for complete control over the mapping of a specific set of objects anywhere in the object graph--by type, or even by specific property name Handle proxies or enhanced objects (like those of Hibernate, or the various mock frameworks) Apply bi-directional mapping with one configuration Map to instances of an appropriate concrete class for a target abstract class or interface Map POJO properties to Lists, Arrays, and Maps How? Orika uses byte code generation to create fast mappers with minimal overhead. Want to give Orika a try? Check out our new User Guide Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/orika-mapper/orika"	"Orika is a Java Bean mapping framework that recursively copies (among other capabilities) data from one object to another."	"true"
"Bean Mapping"	"Selma"	"https://github.com/xebia-france/selma"	"Stupid Simple Statically Linked Mapper. Selma is an Annotation Processor Based bean mapper."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"53"	"18"	"17"	"GitHub - xebia-france/selma: Selma Java bean mapping that compiles Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 53 Fork 17 xebia-france/selma forked from slemesle/selma Code Issues 9 Pull requests 0 Pulse Graphs Selma Java bean mapping that compiles http://selma-java.org 271 commits 4 branches 14 releases 6 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-jekyll gh-pages master travis Nothing to show selma-parent-0.14 selma-parent-0.13 selma-parent-0.12 selma-parent-0.11 selma-parent-0.10 selma-parent-0.9 selma-parent-0.8 selma-parent-0.7 selma-parent-0.6 selma-parent-0.5 selma-parent-0.4 selma-parent-0.3 selma-parent-0.2 selma-parent-0.1 Nothing to show New pull request Pull request Compare This branch is 227 commits ahead, 3 commits behind slemesle:master. Latest commit 32d203e Jun 30, 2016 slemesle committed on GitHub Merge pull request #98 from Byhiras/issue97 … Fix #97: Add support for mapping to raw types. Permalink Failed to load latest commit information. examples-common [maven-release-plugin] prepare for next development iteration Mar 17, 2016 examples [maven-release-plugin] prepare for next development iteration Mar 17, 2016 processor Fix broken tests on JDK7. Jun 29, 2016 resources Official logo Nov 28, 2013 selma Merge remote-tracking branch 'upstream/master' into buildersetter Jun 7, 2016 .gitignore #32 Improve error message for missing fields Oct 17, 2014 .travis.yml Add workaround for travis bug on java localhost resolution Dec 22, 2015 LICENSE.txt Add Licensing to Apache2 Nov 27, 2013 NOTICE.txt Fix licensing Jan 13, 2014 README.md Prepare 0.15 release notes Mar 17, 2016 RELEASE_NOTES Prepare 0.15 release notes Mar 17, 2016 pom.xml Tidy up mapper creation/caching code. Apr 5, 2016 travis.sh Add deploy for openjdk7 Nov 8, 2014 README.md Selma Java bean mapping at compile time ! What is Selma ? S3lm4 say Selma, stands for Stupid Simple Statically Linked Mapper. In fact it is on one side an Annotation Processor that generate Java code to handle the mapping from field to field at compile time. On the other side, it is a Runtime library to instantiate and invoke the generated Mapper. How does it works ? First add selma-processor as a provided dependency and selma as a compile dependency to your build. Then, define a Mapper interface describing the mapping you want: @Mapper public interface SelmaMapper {      // Imutable mapping     OutBean asOutBean(InBean source);      // Update graph     OutBean updateOutBean(InBean source, OutBean destination);  } Then ? Well just use the generated Mapper:     SelmaMapper mapper = Selma.mapper(SelmaMapper.class);      OutBean res = mapper.asOutBean(in);      // Or     OutBean dest = dao.getById(42);      OutBean res = mapper.updateOutBean(in, dest);     // res is the updated bean dest with in values And voilà ! Visit our site: (http://selma-java.org) Features Generate code for mapping bean to bean matching fields to fields ** Support for nested bean ** Bean should respect Java property convention Custom field to (embedded)field name mapping Maps Enum using identical values with default value Maps Collection any to any Maps Map any to any Use strict memory duplication for all fields except immutables Support for SourcedBeans to instantiate beans is out of the box Support Type to Type custom mapping using custom mapping methods Gives full feedback at compilation time Break build when mapping does not work Say good bye to mapping errors in production Usage First add selma and selma-processor to your pom dependencies:         <!-- scope provided because the processor is only needed for the compiler -->         <dependency>             <groupId>fr.xebia.extras</groupId>             <artifactId>selma-processor</artifactId>             <version>0.14</version>             <scope>provided</scope>         </dependency>          <!-- This is the only real dependency you will have in your binaries -->         <dependency>             <groupId>fr.xebia.extras</groupId>             <artifactId>selma</artifactId>             <version>0.14</version>         </dependency> Then, as I said earlier, build your interface with @Mapper annotation and enjoy. Checkout the example module to have a deeper look. Help needed, please report issues and ask for features :) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xebia-france/selma"	"Stupid Simple Statically Linked Mapper. Selma is an Annotation Processor Based bean mapper."	"true"
"Build"	"Apache Maven"	"http://maven.apache.org/"	"Declarative build and dependency management which favors convention over configuration. It might be preferable to Apache Ant which uses a rather procedural approach and can be difficult to maintain."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Maven – Welcome to Apache Maven Apache/ Maven/ Welcome to Apache Maven Last Published: 2016-07-09 Main Welcome License Download Install Configure Run IDE Integration About Maven What is Maven? Features FAQ Support and Training Documentation Maven Plugins Index (category) Running Maven User Centre Plugin Developer Centre Maven Repository Centre Maven Developer Centre Books and Resources Security Community Community Overview How to Contribute Maven Repository Getting Help Issue Tracking Source Repository The Maven Team Project Documentation Project Information About Team Mailing Lists Source Code Management Issue Management CI Management Maven Projects Archetype Doxia JXR Maven Parent POMs Plugins Plugin Testing Plugin Tools Resource Bundles SCM Shared Components Skins Surefire Wagon ASF How Apache Works Foundation Sponsoring Apache Thanks Welcome to Apache Maven Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting and documentation from a central piece of information. If you think that Maven could help your project, you can find out more information about in the ""About Maven"" section of the navigation. This includes an in-depth description of what Maven is, a list of some of its main features, and a set of frequently asked questions about what Maven is. This site is separated into the following sections, depending on how you'd like to use Maven: Use Download, Install, Run Maven Configure, Use Maven and Maven Plugins Information for those needing to build a project that uses Maven Information for those wanting to use Maven to build their project, including a ""10 minute test"" that gives a practical overview of Maven's main features in just 10 minutes and plugin list for more information on each plugin Extend Write Maven Plugins Improve the Maven Repository Information for those who may or may not be using Maven, but want to provide a plugin for shared functionality or to accompany their own product or toolset Information for those who may or may not use, but are interested in getting project metadata into the repository Contribute Help Maven Develop Maven Information if you'd like to get involved: Maven is an open source community and welcomes contributions. Information for those who are currently developers, or who are interested in contributing to the Maven project itself Each guide is divided into a number of trails to get you started on a particular topic, and includes a reference area and a ""cookbook"" of common examples. You can access the guides at any time from the left navigation. If you are looking for a quick reference, you can use the documentation index. How to Get Support Support for Maven is available in a variety of different forms. To get started, search the documentation, issue tracker, the wiki or the mailing list archives to see if the problem has been solved or reported before. If the problem has not been reported before, the recommended way to get help is to subscribe to the Maven Users Mailing list. Many other users and Maven developers will answer your questions there, and the answer will be archived for others in the future. You can also reach the Maven developers on IRC. Maven is a part of the Apache Software Foundation. We'd like to thank the sponsors that provide financial assistance to the foundation. For more information on how you can support the foundation, see the sponsorship page. Archived Releases Maven 1.x and Maven 2.x have now reached their end of life. The following documentation is archived: Archived documentation for Maven 1.x Archived documentation for Maven 2.x Copyright ©2002–2016 The Apache Software Foundation. All rights reserved."	"null"	"null"	"Declarative build and dependency management which favors convention over configuration. It might be preferable to Apache Ant which uses a rather procedural approach and can be difficult to maintain."	"true"
"Build"	"Bazel"	"http://bazel.io"	"Build tool from Google that builds code quickly and reliably."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Build tool from Google that builds code quickly and reliably."	"false"
"Build"	"Gradle"	"http://gradle.org/"	"Incremental builds which are programmed via Groovy instead of declaring XML. Works well with Maven's dependency management."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3682"	"341"	"1439"	"GitHub - gradle/gradle: A powerful build system for the JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 341 Star 3,682 Fork 1,439 gradle/gradle Code Pull requests 21 Wiki Pulse Graphs A powerful build system for the JVM http://gradle.org 36,779 commits 55 branches 857 releases 228 contributors Java 52.3% Groovy 43.6% C++ 2.8% JavaScript 0.6% C 0.3% CSS 0.1% Other 0.3% Java Groovy C++ JavaScript C CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.14.x 3.0-milestone-1 ak-FSS ak-expose-daemon-stats am-native-client bugs/GRADLE-3307 cc-binary-module-descritpr cc-buildscript-hash cc-cross-build-dep-resolution-cache cc-direct-task-invoker cc-dirty-tasks-discovery cc-ear-to-groovy cc-jmh-experiment-direct-invoke cc-jvm-test-suite-check cc-md5-classpath-hash cc-optim-dynobj cc-parallel-reports cc-perf-configuration-caching cc-perf-configuration cc-perf-empty-snapshots cc-reduce-memory-footprint cc-static-gradle-build composite-builds credentials-spike dd-cli-composite-spike dd-composite-builds-via-settings dependent-components ec2-builds elj-file-tree elj-tool-provider ew-first-class-daemon-state gh-ctrl-c-cancel-build gh-soak-tests gradle-script-kotlin ld-gradle-impldep-shading lh-hackathlon-alldependencies lp-dist-cache-spike lp-upgrade-to-guava-19 master mb-close-classloaders mv-enable-http-retry mv-https-proxy pk-ideaPlugin-languageLevel pm-build-dependents-spike pm-dependent-components-m2-spike pm-jdk-discovery refactorExcludeRulesWithNotationParser release rg-ad-hoc-test rg_immutable_props rg_spike_daemon_count_limit sf-depcache sg-dsl-links sg-native-transitive tc Nothing to show v3.0.0-M2 v3.0.0-M1 lp-custom-component-from-jar-source-cedrics-model-action REL_3.0-milestone-2 REL_3.0-milestone-1 REL_3.0-20160715000024+0000 REL_3.0-20160714000037+0000 REL_3.0-20160713000017+0000 REL_3.0-20160712001602+0000 REL_3.0-20160711000023+0000 REL_3.0-20160710000026+0000 REL_3.0-20160709000018+0000 REL_3.0-20160708000026+0000 REL_3.0-20160707000019+0000 REL_3.0-20160706000014+0000 REL_3.0-20160705000020+0000 REL_3.0-20160704000022+0000 REL_3.0-20160703000025+0000 REL_3.0-20160702000020+0000 REL_3.0-20160701000016+0000 REL_3.0-20160630000020+0000 REL_3.0-20160629000022+0000 REL_3.0-20160628000018+0000 REL_3.0-20160627000036+0000 REL_3.0-20160626000022+0000 REL_3.0-20160625000015+0000 REL_3.0-20160624000015+0000 REL_3.0-20160623000016+0000 REL_3.0-20160622000017+0000 REL_3.0-20160621000025+0000 REL_3.0-20160620000028+0000 REL_3.0-20160619000022+0000 REL_3.0-20160618000024+0000 REL_3.0-20160617000025+0000 REL_3.0-20160616000019+0000 REL_3.0-20160615000025+0000 REL_3.0-20160614000026+0000 REL_3.0-20160613000028+0000 REL_3.0-20160612000017+0000 REL_3.0-20160611000036+0000 REL_3.0-20160610000029+0000 REL_3.0-20160609000015+0000 REL_3.0-20160608000021+0000 REL_3.0-20160607000021+0000 REL_3.0-20160606000020+0000 REL_3.0-20160605000020+0000 REL_3.0-20160604000023+0000 REL_3.0-20160603173718+0000 REL_3.0-20160603042402+0000 REL_3.0-20160603003053+0000 REL_3.0-20160603000025+0000 REL_3.0-20160602000019+0000 REL_3.0-20160601000016+0000 REL_3.0-20160531141006+0000 REL_3.0-20160531000033+0000 REL_3.0-20160530000020+0000 REL_3.0-20160529000021+0000 REL_3.0-20160528073707+0000 REL_3.0-20160528000023+0000 REL_3.0-20160526000028+0000 REL_3.0-20160525000020+0000 REL_3.0-20160524000017+0000 REL_3.0-20160523000024+0000 REL_3.0-20160522000022+0000 REL_3.0-20160521000015+0000 REL_3.0-20160520000026+0000 REL_3.0-20160519000016+0000 REL_3.0-20160518000021+0000 REL_3.0-20160517000022+0000 REL_3.0-20160516000019+0000 REL_3.0-20160515000018+0000 REL_3.0-20160514000020+0000 REL_3.0-20160513000023+0000 REL_3.0-20160512000031+0000 REL_3.0-20160511000026+0000 REL_2.14.1-rc-2 REL_2.14.1-rc-1 REL_2.14 REL_2.14-rc-6 REL_2.14-rc-5 REL_2.14-rc-4 REL_2.14-rc-3 REL_2.14-rc-2 REL_2.14-rc-1 REL_2.14-20160510000018+0000 REL_2.14-20160509000021+0000 REL_2.14-20160508000031+0000 REL_2.14-20160507000023+0000 REL_2.14-20160506000031+0000 REL_2.14-20160505000028+0000 REL_2.14-20160504181444+0000 REL_2.14-20160504000015+0000 REL_2.14-20160503151749+0000 REL_2.14-20160503000024+0000 REL_2.14-20160501000014+0000 REL_2.14-20160430000030+0000 REL_2.14-20160429000028+0000 REL_2.14-20160428120601+0000 REL_2.14-20160428000027+0000 REL_2.14-20160427000021+0000 Nothing to show New pull request Latest commit 3f62490 Jul 15, 2016 ghale Change OS memory calls to work around IBM JDK8 issues … +review REVIEW-6106 Permalink Failed to load latest commit information. buildSrc remove groovydoc from gradle docs project Jul 14, 2016 config Add checkstyle rule to disallow using non-Guava Lists or Maps May 25, 2016 design-docs Design doc for reserving heap from cache use Jul 13, 2016 gradle Polish release notes for S3 publishing Jul 6, 2016 subprojects Change OS memory calls to work around IBM JDK8 issues Jul 15, 2016 .editorconfig Don't trim trailng whitespace from markdown files. May 4, 2016 .gitignore Ignore log files in repository root May 25, 2016 .mailmap Add .mailmap entry for Marco Vermeulen Jun 14, 2016 .tm_properties some textmate metadata Nov 17, 2011 .travis.yml Runs all checks, except for integTests, on all subprojects for PR's May 30, 2015 CONTRIBUTING.md Change the CLA link to Gradle Apr 6, 2016 PULL_REQUEST_TEMPLATE.md Change to wording May 12, 2016 README.md Update depMngmt.xml (#659) Jun 24, 2016 build.gradle Make patchExternalModules a Sync task Jul 14, 2016 gradlew handle paths that have spaces May 20, 2016 gradlew.bat Update the wrapper to 3.0-M2. Jun 21, 2016 settings.gradle Revert ""Temporarily reverting everything since 810f052 for 3.0-milest… Jun 7, 2016 travisci_build.sh Skips a unit test on travisci which requires the full gradlde git branch May 30, 2015 version.txt Set version to 3.0 May 9, 2016 README.md Gradle is a build tool with a focus on build automation and support for multi-language development. If you are building, testing, publishing, and deploying software on any platform, Gradle offers a flexible model that can support the entire development lifecycle from compiling and packaging code to publishing web sites. Gradle has been designed to support build automation across multiple languages and platforms including Java, Scala, Android, C/C++, and Groovy, and is closely integrated with development tools and continuous integration servers including Eclipse, IntelliJ, and Jenkins. For more information about Gradle, please visit: http://gradle.org Downloading You can download released versions and nightly build artifacts from: http://gradle.org/downloads Building Naturally, Gradle builds itself with Gradle. Gradle provides an innovative wrapper that allows you to work with a Gradle build without having to manually install Gradle. The wrapper is a batch script on Windows and a shell script on other operating systems. You should use the wrapper to build the gradle project. Generally, you should use the wrapper for any wrapper-enabled project because it guarantees building with the Gradle version that the build was intended to use. To build the entire Gradle project, you should run the following in the root of the checkout. ./gradlew build  This will compile all the code, generate all the documentation and run all the tests. It can take several hours because we have thousands of tests, including integration tests that exercise virtually every Gradle feature. Among the things we test are: compatibility across versions, validity of samples and Javadoc snippets, daemon process capabilities, etc. In order for this build to pass, you will need a supported native tool chain installed. See the Gradle userguide for a list of supported tool chains. Installing from source To create an install from the source tree you can run either of the following: ./gradlew install -Pgradle_installPath=/usr/local/gradle-source-build  This will create a minimal installation; just what's needed to run Gradle (i.e. no docs). Note that the -Pgradle_installPath denotes where to install to. You can then build a Gradle based project with this installation: /usr/local/gradle-source-build/bin/gradle «some task»  To create a full installation (includes docs): ./gradlew installAll -Pgradle_installPath=/usr/local/gradle-source-build  Working with subprojects The Gradle build uses Gradle's ability to customize the logical structure of a multiproject build. All of the build's subprojects are in the subprojects/ directory and are mapped to top level children in settings.gradle. This means that to build just the core subproject (that lives in subprojects/core) you would run: ./gradlew core:build  Or to build the docs: ./gradlew docs:build  And so on. Contributing If you're looking to contribute to Gradle or provide a patch/pull request, you can find info on how to get in touch with the developers at http://gradle.org/development. Contributing Code This is a complicated topic and the Gradle development team are happy to help anybody get started working with the Gradle code base, so don't hesitate to get in touch with the developers if you need help working with the finer points of the build. If you are simply wanting to fix something or adding a small minor feature, it is usually good enough to simply make your change to the code and then run the check task for that subproject. So if the patch was to the launcher package for example, you can run: ./gradlew launcher:check  To run all of the tests and code quality checks for that module. Contributing Documentation Please see the readme in the docs subproject. Opening in your IDE IntelliJ IDEA To open the Gradle project in IDEA, simply run the following task from the root: ./gradlew idea  This will generate appropriate IDEA metadata so that the project can be opened from within IDEA. Also, IntelliJ Run Configurations will be generated, which allow you to run/debug Gradle or run pre-commit tests. Note that due to an IDEA glitch, the first build of Gradle from IDEA will fail. Launching a second build fixes the compilation error. Eclipse Building the Gradle project with Eclipse is currently limited due to Eclipse's lacking Groovy support. We recommend using IntelliJ IDEA. You will need Eclipse 4.5 (Mars) Install the Groovy Eclipse plugin from http://dist.springsource.org/snapshot/GRECLIPSE/e4.5/ Make sure you have a Java 7 compatible JRE configured in your workspace In Window->Preferences->Groovy->Compiler, check Enable Script folder support and add **/*.gradle Run ./gradlew eclipse from the root directory Import all projects using the ""Import Existing Projects into Workspace"" wizard Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gradle/gradle"	"Incremental builds which are programmed via Groovy instead of declaring XML. Works well with Maven's dependency management."	"true"
"Bytecode Manipulation"	"ASM"	"http://asm.ow2.org/"	"All purpose, low level, bytecode manipulation and analysis."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ASM - Home Page Advanced Search - Powered by Google   Consortium     Activities     Projects     Forge     Events  ASM ASM · Home · Download · Eclipse plugin · User Guide · Mailing Lists · License · History ASMDEX · Home · Download · Mailing Lists · License · History Developers' Corner · ObjectWeb Forge Site · SVN Repository · Issue Tracker · Developer Guide About · Users · Team · Contacts ASM ASM is an all purpose Java bytecode manipulation and analysis framework. It can be used to modify existing classes or dynamically generate classes, directly in binary form. Provided common transformations and analysis algorithms allow to easily assemble custom complex transformations and code analysis tools. ASM offer similar functionality as other bytecode frameworks, but it is focused on simplicity of use and performance. Because it was designed and implemented to be as small and as fast as possible, it makes it very attractive for using in dynamic systems*. (*) ASM can of course be used in a static way too. ""ASM: a code manipulation tool to implement adaptable systems"", E. Bruneton, R. Lenglet and T. Coupaye, Adaptable and extensible component systems, November 2002, Grenoble, France. Also available in french. ""Using ASM framework to implement common bytecode transformation patterns"", E. Kuleshov, AOSD.07, March 2007, Vancouver, Canada. ASM is already used in many Java products. Please let us know if your project is using ASM. You can also add the ""Powered by ASM"" button below to your project page. Documentation The best way to learn to use ASM is to write a Java source file that is equivalent to what you want to generate and then use the ASMifier mode of the Bytecode Outline plugin for Eclipse (or the ASMifier tool) to see the equivalent ASM code. If you want to implement a class transformer, write two Java source files (before and after transformation) and use the compare view of the plugin in ASMifier mode to compare the equivalent ASM code. The following document provides an in-depth introduction to ASM 4.0, going from the basic features to advanced topics such as bytecode analysis. ASM 4.0 A Java bytecode engineering library. Tutorial for ASM 2.0. Tutorial for ASM 1.5.x. Tutorial for using J2SE 5.0 Annotations with ASM 1.5.x. Frequently Asked Questions. External articles ASM 2.0 Classworking. Annotations with ASM 2.0. Generics with ASM 2.0. API ASM 5.0 API (noframes). ASM 4.0 API (noframes). changes from 3.3 ASM 3.3 API (noframes). changes from 3.2 ASM 3.2 API (noframes). changes from 3.1, 3.0, 2.2.3, 1.5.3 ASM 3.1 API (noframes). changes from 3.0, 2.2.3, 1.5.3 ASM 3.0 API (noframes). changes from 2.2.3, 1.5.3 ASM 2.3.3 API (noframes). changes from 1.5.3 ASM 1.5.3 API (noframes). Recent News 5 March 2016: release of ASM 5.1 Copyright © 1999-2009, OW2 Consortium | contact | webmaster | Last modified at 2016-03-05 03:24 PM"	"null"	"null"	"All purpose, low level, bytecode manipulation and analysis."	"true"
"Bytecode Manipulation"	"Byte Buddy"	"http://bytebuddy.net/"	"Further simplifies bytecode generation with a fluent API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1005"	"68"	"91"	"GitHub - raphw/byte-buddy: Runtime code generation for the Java virtual machine. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 68 Star 1,005 Fork 91 raphw/byte-buddy Code Issues 0 Pull requests 0 Wiki Pulse Graphs Runtime code generation for the Java virtual machine. http://bytebuddy.net 2,739 commits 4 branches 89 releases 13 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags development gh-pages master stack-count Nothing to show byte-buddy-1.4.12 byte-buddy-1.4.11 byte-buddy-1.4.10 byte-buddy-1.4.9 byte-buddy-1.4.8 byte-buddy-1.4.7 byte-buddy-1.4.6 byte-buddy-1.4.5 byte-buddy-1.4.4 byte-buddy-1.4.3 byte-buddy-1.4.2 byte-buddy-1.4.1 byte-buddy-1.4.0 byte-buddy-1.3.20 byte-buddy-1.3.19 byte-buddy-1.3.18 byte-buddy-1.3.17 byte-buddy-1.3.16 byte-buddy-1.3.15 byte-buddy-1.3.14 byte-buddy-1.3.13 byte-buddy-1.3.12 byte-buddy-1.3.11 byte-buddy-1.3.10 byte-buddy-1.3.9 byte-buddy-1.3.8 byte-buddy-1.3.7 byte-buddy-1.3.6 byte-buddy-1.3.5 byte-buddy-1.3.4 byte-buddy-1.3.3 byte-buddy-1.3.2 byte-buddy-1.3.1 byte-buddy-1.3.0 byte-buddy-1.2.3 byte-buddy-1.2.2 byte-buddy-1.2.1 byte-buddy-1.2.0 byte-buddy-1.1.1 byte-buddy-1.1.0 byte-buddy-1.0.3 byte-buddy-1.0.2 byte-buddy-1.0.1 byte-buddy-1.0.0 byte-buddy-0.7.8 byte-buddy-0.7.7 byte-buddy-0.7.6 byte-buddy-0.7.5 byte-buddy-0.7.4 byte-buddy-0.7.3 byte-buddy-0.7.2 byte-buddy-0.7.1 byte-buddy-0.7 byte-buddy-0.7-rc6 byte-buddy-0.7-rc5 byte-buddy-0.7-rc4 byte-buddy-0.7-rc3 byte-buddy-0.7-rc2 byte-buddy-0.7-rc1 byte-buddy-0.6.15 byte-buddy-0.6.14 byte-buddy-0.6.13 byte-buddy-0.6.12 byte-buddy-0.6.11 byte-buddy-0.6.10 byte-buddy-0.6.9 byte-buddy-0.6.8 byte-buddy-0.6.7 byte-buddy-0.6.6 byte-buddy-0.6.5 byte-buddy-0.6.4 byte-buddy-0.6.3 byte-buddy-0.6.2 byte-buddy-0.6.1 byte-buddy-0.6 byte-buddy-0.5.6 byte-buddy-0.5.5 byte-buddy-0.5.4 byte-buddy-0.5.3 byte-buddy-0.5.2 byte-buddy-0.5.1 byte-buddy-0.5 byte-buddy-0.4.1 byte-buddy-0.4 byte-buddy-0.3.1 byte-buddy-0.3 byte-buddy-0.2.1 byte-buddy-0.2 byte-buddy-0.1 Nothing to show New pull request Latest commit 1352224 Jul 15, 2016 raphw committed on GitHub Updated to 1.4.12 Permalink Failed to load latest commit information. byte-buddy-agent [maven-release-plugin] prepare for next development iteration Jul 15, 2016 byte-buddy-android-test Optimized generated byte code for advice component to not create retu… Jul 15, 2016 byte-buddy-android [maven-release-plugin] prepare for next development iteration Jul 15, 2016 byte-buddy-benchmark [maven-release-plugin] prepare for next development iteration Jul 15, 2016 byte-buddy-dep [maven-release-plugin] prepare for next development iteration Jul 15, 2016 byte-buddy [maven-release-plugin] prepare for next development iteration Jul 15, 2016 .gitignore Fixed minor bugs to invoke dynamic instrumentation while adding more … Feb 20, 2015 .travis.yml Added stack monitor for advice code to avoid that stack underflows ge… Jul 15, 2016 CONTRIBUTING.md Added contribution guidlines. Feb 24, 2016 LICENSE First commit. Nov 25, 2013 README.md Added convenience method for loading types via a dynamic type. Jul 5, 2016 checkstyle.xml Added ability to disable type validation. Jan 8, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jul 15, 2016 release-notes.md Updated to 1.4.12 Jul 15, 2016 README.md Byte Buddy runtime code generation for the Java virtual machine Byte Buddy is a code generation library for creating Java classes during the runtime of a Java application and without the help of a compiler. Other than the code generation utilities that ship with the Java Class Library, Byte Buddy allows the creation of arbitrary classes and is not limited to implementing interfaces for the creation of runtime proxies. In order to use Byte Buddy, one does not require an understanding of Java byte code or the class file format. In contrast, Byte Buddy’s API aims for code that is concise and easy to understand for everybody. Nevertheless, Byte Buddy remains fully customizable down to the possibility of defining custom byte code. Furthermore, the API was designed to be as non-intrusive as possible and as a result, Byte Buddy does not leave any trace in the classes that were created by it. For this reason, the generated classes can exist without requiring Byte Buddy on the class path. Because of this feature, Byte Buddy’s mascot was chosen to be a ghost. Byte Buddy is written in Java 6 but supports the generation of classes for any Java version. Byte Buddy is a light-weight library and only depends on the visitor API of the Java byte code parser library ASM which does itself not require any further dependencies. At first sight, runtime code generation can appear to be some sort of black magic that should be avoided and only few developers write applications that explicitly generate code during their runtime. However, this picture changes when creating libraries that need to interact with arbitrary code and types that are unknown at compile time. In this context, a library implementer must often choose between either requiring a user to implement library-proprietary interfaces or to generate code at runtime when the user’s types becomes first known to the library. Many known libraries such as for example Spring or Hibernate choose the latter approach which is popular among their users under the term of using Plain Old Java Objects. As a result, code generation has become an ubiquitous concept in the Java space. Byte Buddy is an attempt to innovate the runtime creation of Java types in order to provide a better tool set to those relying on code generation. In October 2015, Byte Buddy was distinguished with a Duke's Choice award by Oracle. The award appreciates Byte Buddy for its ""tremendous amount of innovation in Java Technology"". We feel very honored for having received this award and want to thank all users and everybody else who helped making Byte Buddy the success it has become. We really appreciate it! Byte Buddy offers excellent performance at production quality. It is stable and in use by distiguished frameworks and tools such as Mockito, Google's Bazel build system and many others. Byte Buddy is also used by a large number of commercial products to great result. It is currently downloaded over a million times a year. Hello World Saying Hello World with Byte Buddy is as easy as it can get. Any creation of a Java class starts with an instance of the ByteBuddy class which represents a configuration for creating new types: Class<?> dynamicType = new ByteBuddy()   .subclass(Object.class)   .method(ElementMatchers.named(""toString""))   .intercept(FixedValue.value(""Hello World!""))   .make()   .load(getClass().getClassLoader())   .getLoaded(); assertThat(dynamicType.newInstance().toString(), is(""Hello World!"")); The default ByteBuddy configuration which is used in the above example creates a Java class in the newest version of the class file format that is understood by the processing Java virtual machine. As hopefully obvious from the example code, the created type will extend the Object class and overrides its toString method which should return a fixed value of Hello World!. The method to be overridden is identified by a so-called ElementMatcher. In the above example, a predefined element matcher named(String) is used which identifies methods by their exact names. Byte Buddy comes with numerous predefined and well-tested matchers which are collected in the ElementMatchers class and which can be easily composed. The creation of custom matchers is however as simple as implementing the (functional) ElementMatcher interface. For implementing the toString method, the FixedValue class defines a constant return value for the overridden method. Defining a constant value is only one example of many method interceptors that ship with Byte Buddy. By implementing the Implementation interface, a method could however even be defined by custom byte code. Finally, the described Java class is created and then loaded into the Java virtual machine. For this purpose, a target class loader is required. Eventually, we can convince ourselves of the result by calling the toString method on an instance of the created class and finding the return value to represent the constant value we expected. A more complex example Of course, a Hello World example is a too simple use case for evaluating the quality of a code generation library. In reality, a user of such a library wants to perform more complex manipulations, for example by introducing hooks into the execution path of a Java program. Using Byte Buddy, doing so is however equally simple. The following example gives a taste of how method calls can be intercepted. Byte Buddy expresses dynamically defined method implementations by instances of the Implementation interface. In the previous example, FixedValue that implements this interface was already demonstrated. By implementing this interface, a user of Byte Buddy can go to the length of defining custom byte code for a method. Normally, it is however easier to use Byte Buddy's predefined implementations such as MethodDelegation which allows for implementing any method in plain Java. Using this implementation is straight forward as it operates by delegating the control flow to any POJO. As an example of such a POJO, Byte Buddy can for example redirect a call to the only method of the following class: public class GreetingInterceptor {   public Object greet(Object argument) {     return ""Hello from "" + argument;   } } Note that the above GreetingInterceptor does not depend on any Byte Buddy type. This is good news because none of the classes that by Byte Buddy generates require Byte Buddy on the class path! Given the above GreetingInterceptor, we can use Byte Buddy to implement the Java 8 java.util.function.Function interface and its abstract apply method: Class<? extends java.util.function.Function> dynamicType = new ByteBuddy()   .subclass(java.util.function.Function.class)   .method(ElementMatchers.named(""apply""))   .intercept(MethodDelegation.to(new GreetingInterceptor()))   .make()   .load(getClass().getClassLoader())   .getLoaded(); assertThat((String) dynamicType.newInstance().apply(""Byte Buddy""), is(""Hello from Byte Buddy"")); Executing the above code, Byte Buddy implements Java's Function interface and implements the apply method as a delegation to an instance of the GreetingInterceptor POJO that we defined before. Now, every time that the Function::apply method is called, the control flow is dispatched to GreetingInterceptor::greet and the latter method's return value is returned from the interface's method. Interceptors can be defined to take with more generic inputs and outputs by annotating the interceptor's parameters. When Byte Buddy discovers an annotation, the library injects the dependency that the interceptor parameter requires. An example for a more general interceptor is the following class: public class GeneralInterceptor {   @RuntimeType   public Object intercept(@AllArguments Object[] allArguments,                           @Origin Method method) {     // intercept any method of any signature   } } With the above interceptor, any intercepted method could be matched and processed. For example, when matching Function::apply, the method's arguments would be passed as the single element of an array. Also, a Method reference to Fuction::apply would be passed as the interceptor's second argument due to the @Origin annotation. By declaring the @RuntimeType annotation on the method, Byte Buddy finally casts the returned value to the return value of the intercepted method if this is necessary. In doing so, Byte Buddy also applies automatic boxing and unboxing. Besides the annotations that were already mentioned there exist plenty of other predefined annotations. For example, when using the @SuperCall annotation on a Runnable or Callable type, Byte Buddy injects proxy instances that allow for an invocation of a non-abstract super method if such a method exists. And even if Byte Buddy does not cover au use case, Byte Buddy offers an extension mechanism for defining custom annotations. You might expect that using these annotations ties your code to Byte Buddy. However, Java ignores annotations in case that they are not visible to a class loader. This way, generated code can still exist without Byte Buddy! You can find more information on the MethodDelegation and on all of its predefined annotations in its javadoc and in Byte Buddy's tutorial. Where to go from here? Byte Buddy is a comprehensive library and we only scratched the surface of Byte Buddy's capabilities. However, Byte Buddy aims for being easy to use by providing a domain-specific language for creating classes. Most runtime code generation can be done by writing readable code and without any knowledge of Java's class file format. If you want to learn more about Byte Buddy, you can find such a tutorial on Byte Buddy's web page. Furthermore, Byte Buddy comes with a detailed in-code documentation and extensive test case coverage which can also serve as example code. Finally, you can find an up-to-date list of articles and presentations on Byte Buddy in the wiki. When using Byte Buddy, make also sure to read the following information on maintaining a project dependency. Dependency and API evolution Byte Buddy is written on top of ASM, a mature and well-tested library for reading and writing compiled Java classes. In order to allow for advanced type manipulations, Byte Buddy is intentionally exposing the ASM API to its users. Of course, the direct use of ASM remains fully optional and most users will most likely never require it. This choice was made such that a user of Byte Buddy is not restrained to its higher-level functionality but can implement custom implementations without a fuzz when it is necessary. However, this imposes one possible problem when relying onto Byte Buddy as a project dependency and making use of the exposed ASM API. The authors of ASM require their users to repackage the ASM dependency into a different name space. This is necessary because one cannot anticipate changes in the Java class file format what can lead to API incompatibilities of future versions of ASM. Because of this, each version of Byte Buddy is distributed in two different packaging formats: A no-dependency version that repackages the ASM dependency from its org.objectweb.asm into Byte Buddy's own namespace net.bytebuddy.jar.asm. Doing so, the ASM dependency is also contained within Byte Buddy's jar file. By using this version, you do not need to worry about possible ASM version clashes which might be caused by the use of ASM by both Byte Buddy and other libraries. If you do not plan to use ASM, do not know what ASM is or what this is all about, this is the version you want to use. The artifact ID of this packaging format is byte-buddy. A version with an explicit dependency on ASM in its original org.objectweb.asm namespace. This version must only be used for repackaging Byte Buddy and its ASM dependency into your own namespace. Never distribute your application while directly relying on this dependency. Otherwise, your users might experience version conflicts of different ASM versions on their class path. The artifact ID of this packaging format is byte-buddy-dep. Normally, you would use the first, no-dependency version. However, if you are using Byte Buddy and making use of the exposed ASM API, you must use the second version of Byte Buddy and repackage it into your own name space as suggested. This is in particularly true when you plan to redistribute your code for the use by others. Future versions of Byte Buddy will update their ASM dependency to newer version what will then lead to version clashes between different ASM versions that were repackaged by Byte Buddy, if you have not follow this recommendation! There exist several tools that allow for an easy automation of the repacking of dependencies during your build processes. You can for example use the Shade plugin for Maven. With Gradle, a similar tool is the Shadow plugin. Another alternative is jarjar, a library that offers integration as an Ant task. License and development Byte Buddy is licensed under the liberal and business-friendly Apache Licence, Version 2.0 and is freely available on GitHub. Byte Buddy is further released to the repositories of Maven Central and on JCenter. The project is built using Maven. From your shell, cloning and building the project would go something like this: git clone https://github.com/raphw/byte-buddy.git cd byte-buddy mvn package On these commands, Byte Buddy is cloned from GitHub and built on your machine. Byte Buddy is currently tested for the OpenJDK versions 6 and 7 and the Oracle JDK versions 7 and 8 using Travis CI. Note that the above build is optimized for its runtime and does not create all artifacts. To build all artifacts, including the zero-dependency jar of Byte Buddy, use the extras profile: mvn package -Pextras The zero-dependency jar file is then saved in byte-buddy/target/byte-buddy-#.#-SNAPSHOT.jar. The regular jar file is saved in byte-buddy-dep/target/byte-buddy-dep-#.#-SNAPSHOT.jar. Additionally, source code and javadoc artifacts are built when using this profile. See the developer page for further information on building the project. Please use GitHub's issue tracker for reporting bugs. When committing code, please provide test cases that prove the functionality of your features or that demonstrate a bug fix. Furthermore, make sure you are not breaking any existing test cases. If possible, please take the time to write some documentation. For feature requests or general feedback, you can also use the issue tracker or contact us on our mailing list. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/raphw/byte-buddy"	"Further simplifies bytecode generation with a fluent API."	"true"
"Bytecode Manipulation"	"Byteman"	"http://byteman.jboss.org/"	"Manipulate bytecode at runtime via DSL (rules) mainly for testing/troubleshooting."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"168"	"22"	"76"	"GitHub - bytemanproject/byteman: Byteman Project main repo Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 168 Fork 76 bytemanproject/byteman Code Pull requests 2 Pulse Graphs Byteman Project main repo http://www.jboss.org/byteman 754 commits 8 branches 37 releases 15 contributors Java 97.9% Other 2.1% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags BYTEMAN-148 Byteman_1_0 Byteman_1_1 Byteman_1_2 Byteman_1_3 Byteman_1_4 Byteman_1_5 master Nothing to show Byteman_1_5_2 Byteman_1_5_1 Byteman_1_5_0 Byteman_1_4_1 Byteman_1_4_0 Byteman_1_3_0 Byteman_1_2_2_1 Byteman_1_2_2 Byteman_1_2_1 Byteman_1_2_0_1 Byteman_1_2_0 Byteman_1_1_1 Byteman_1_1_0 Byteman_1_0_3 Byteman_1_0_3_CP02 Byteman_1_0_3_CP01 Byteman_1_0_2 Byteman_1_0_1 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.0 2.2.2 2.2.1 2.2.0 2.1.3 2.1.2 2.1.1 2.1.0 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.6.0 Nothing to show New pull request Latest commit 7b14bd6 Jul 8, 2016 adinn delete asciidoc module from docs pom so we can successfully build usi… … …ng jdk9 Permalink Failed to load latest commit information. agent modify agent pom so Byteman agent uses ASM6.0_ALPHA -- fix for BYTEMA… Jul 8, 2016 bin Documented javaagent policy option and bminstall -s flag -- fixes BYT… Oct 29, 2015 contrib rolled over pom versions to next snapshot May 19, 2016 docs delete asciidoc module from docs pom so we can successfully build usi… Jul 8, 2016 download rolled over pom versions to next snapshot May 19, 2016 install rolled over pom versions to next snapshot May 19, 2016 licenses Moved to ASM 5.0 ready for release 3.0.0 -- fixes BYTEMAN-290 May 19, 2015 sample rolled over pom versions to next snapshot May 19, 2016 submit rolled over pom versions to next snapshot May 19, 2016 .gitignore BYTEMAN-190 update to add rule check api and rulecheck-maven-plugin Jun 8, 2013 README snagging update for mavenize process Aug 3, 2011 pom.xml rolled over pom versions to next snapshot May 19, 2016 README Byteman README --------------  Byteman supports injection of side effects into Java programs for the purpose of tracing and testing application behaviour.  Installation ------------  When you unzip the downloaded release it will explode to a single target install directory containing everything you need to use byteman. You should set environment variable BYTEMAN_HOME so that it points to this target install directory.  The install directory for the binary release contains the following subdirectories    bin -- contains Unix scripts to simplify: using Byteman (bmjava.sh);       typechecking Byteman rule scripts (bytemancheck.sh);       communicating with the Byteman agent listener (bmsubmit.sh);       and installing the agent into a running JVM (bminstall.sh).       You will need to change the permissions of these files       in order to execute them directly from the command line.    docs -- contains the Byteman Programmer's guide and license       information for Byteman plus the third-party software it uses    lib -- contains the Byteman agent and rule engine (byteman.jar);       the subset of this code needed to compile/run the submit       client (byteman-submit.jar); the subset of this code needed       to compile/run the install client (byteman-install.jar).    sample/scripts -- contains example rule scripts showing how to       use Byteman    sample/lib -- contains helper code for the sample scripts     contrib -- contains software contributed by other Byteman users        see the README in each contrib subdirectory for details of        how to use the package  The install directory for the full source release contains all the above directories plus the following extra directories    sources -- contains source code jars for each of the component       jars in lib, sample/lib, contrib/dtest and contrib/bmunit    javadoc -- contains javadoc format documentation jars for each of       the component jars in lib, sample/lib, contrib/dtest and       contrib/bmunit  Using Byteman ------------- Access to the Byteman project downlaods, documentation, user and developer forums and source code is available from the project home page at http://www.jboss.org/byteman  Please consult the Programmer's Guide for details of how Byteman operates, how to write Byteman rule scripts and how to run a Java program with the Byteman agent in place.  Take a look at the sample scripts directory to see some examples of how you can use Byteman to trace application and JVM execution or to gather and present statistics detailing the operation of JVM or application code. (n.b. these examples still need extending to show how to use Byteman for fault injection based testing).  Copyright --------- See the copyright file in the docs directory for details of the open source license under which this code is released. Note that this code employs the ObjectWeb ASM package to do bytecode manipulation and the JFlex and JavaCUP tokeniser and parser genereators to generate and provide runtime support for the rule parser which are also released under open source licenses.   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bytemanproject/byteman"	"Manipulate bytecode at runtime via DSL (rules) mainly for testing/troubleshooting."	"true"
"Bytecode Manipulation"	"cglib"	"https://github.com/cglib/cglib"	"Bytecode generation library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"717"	"91"	"237"	"GitHub - cglib/cglib: cglib - Byte Code Generation Library is high level API to generate and transform Java byte code. It is used by AOP, testing, data access frameworks to generate dynamic proxy objects and intercept field access. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 91 Star 717 Fork 237 cglib/cglib Code Issues 11 Pull requests 7 Wiki Pulse Graphs cglib - Byte Code Generation Library is high level API to generate and transform Java byte code. It is used by AOP, testing, data access frameworks to generate dynamic proxy objects and intercept field access. https://github.com/cglib/cglib/wiki 807 commits 3 branches 24 releases 11 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags RELEASE_1_1 RELEASE_2_2_3 master Nothing to show start Root_RELEASE_2_2_3 RELEASE_3_2_4 RELEASE_3_2_3 RELEASE_3_2_2 RELEASE_3_2_1 RELEASE_3_2_0 RELEASE_3_1 RELEASE_2_2 RELEASE_2_2_BETA_1 RELEASE_2_1_3 RELEASE_2_1_02 RELEASE_2_1_1 RELEASE_2_1_0 RELEASE_2_1 RELEASE_2_0_2 RELEASE_2_0_1 RELEASE_2_0 RELEASE_2_0_RC2 RELEASE_2_0_RC_1 RELEASE_2_0_BETA_1 RELEASE_1_1_RC1 RELEACE_1_0 RC2 Nothing to show New pull request Latest commit 0258a52 Jun 24, 2016 sameb bump snapshot version Permalink Failed to load latest commit information. cglib-integration-test bump snapshot version Jun 24, 2016 cglib-jmh bump snapshot version Jun 24, 2016 cglib-nodep bump snapshot version Jun 24, 2016 cglib-sample bump snapshot version Jun 24, 2016 cglib bump snapshot version Jun 24, 2016 .gitattributes Add XML/TXT files to gitattributes to convert to LF automatically Oct 9, 2014 .gitignore Convert cglib to be a maven project Oct 9, 2014 .travis.yml Add JDK9 Travis job Jun 23, 2016 LICENSE switch to apache license 2.0 Jun 24, 2004 NOTICE switch to apache license 2.0 Jun 24, 2004 README.md remove ""build with ant"" from readme Oct 27, 2014 pom.xml bump snapshot version Jun 24, 2016 README.md cglib Byte Code Generation Library is high level API to generate and transform JAVA byte code. It is used by AOP, testing, data access frameworks to generate dynamic proxy objects and intercept field access. https://github.com/cglib/cglib/wiki How To: https://github.com/cglib/cglib/wiki/How-To Latest Release: https://github.com/cglib/cglib/releases/latest All Releases: https://github.com/cglib/cglib/releases cglib-#.#_#.jar binary distribution, CGLIB classes only, it must be used to extend cglib classes dependant on ASM API cglib-nodep-#.#_#.jar binary distribution, CGLIB and renamed ASM classes, not extendable Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cglib/cglib"	"Bytecode generation library."	"true"
"Bytecode Manipulation"	"Javassist"	"http://jboss-javassist.github.io/javassist/"	"Tries to simplify the editing of bytecode."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Javassist by jboss-javassist Javassist Java bytecode engineering toolkit since 1999 View on GitHub Download .zip Download .tar.gz Javassist (Java Programming Assistant) makes Java bytecode manipulation simple. It is a class library for editing bytecodes in Java; it enables Java programs to define a new class at runtime and to modify a class file when the JVM loads it. Unlike other similar bytecode editors, Javassist provides two levels of API: source level and bytecode level. If the users use the source-level API, they can edit a class file without knowledge of the specifications of the Java bytecode. The whole API is designed with only the vocabulary of the Java language. You can even specify inserted bytecode in the form of source text; Javassist compiles it on the fly. On the other hand, the bytecode-level API allows the users to directly edit a class file as other editors. Availability Javassist version 3.20.0-GA is available (June 25, 2015). This version is distributed under the triple license of the MPL, the LGPL, and the Apache License. The distribution includes the jar file, the sources, some samples, the API manual, and a tutorial. The binary is also available from the central repo. Releases Bug Tracking Online API manual Tutorial Japanese translation of the tutorial for version 3.0 is here. Old binaries, etc. (3.18.0-GA and earlier) Available from sourceforge.net (zip). Publication Shigeru Chiba, ""Load-time Structural Reflection in Java,"" ECOOP 2000 - Object-Oriented Programming, LNCS 1850, Springer Verlag, page 313-336, 2000. (The overview of Javassist) Shigeru Chiba and Muga Nishizawa, ""An Easy-to-Use Toolkit for Efficient Java Bytecode Translators,"" Proc. of 2nd Int'l Conf. on Generative Programming and Component Engineering (GPCE '03), LNCS 2830, pp.364-376, Springer-Verlag, 2003. (The performance of Javassist) Export control Here is the information you might need to export your commercial software including Javassist. Country of origin: Japan Is there US Content in there?: No Is the software designed or modified to use cryptography: No Acknowledgment The development of Javassist was supported in part by the PRESTO and CREST funding programs of Japan Science and Technology Agency. Javassist is maintained by jboss-javassist. This page was generated by GitHub Pages using the Cayman theme by Jason Long."	"null"	"null"	"Tries to simplify the editing of bytecode."	"true"
"Cluster Management"	"Apache Aurora"	"http://aurora.apache.org/"	"Apache Aurora is a Mesos framework for long-running services and cron jobs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Aurora Documentation Community Downloads Blog Aurora is a Mesos framework for long-running services and cron jobs. What does Aurora do? Aurora runs applications and services across a shared pool of machines, and is responsible for keeping them running, forever. When machines experience failure, Aurora intelligently reschedules those jobs onto healthy machines. Key Aurora Features Rolling Updates with Automatic Rollback When updating a job, Aurora will detect the health and status of a deployment and automatically rollback if necessary. Resource Quota and Multi-User Support Aurora has a quota system to provide guaranteed resources for specific applications, and can support multiple users to deploy services. Sophisticated DSL Services are highly-configurable via a DSL which supports templating, allowing you to establish common patterns and avoid redundant configurations. Service Registration Aurora announces services to Apache ZooKeeper for discovery by clients like Finagle. Quick Links Downloads Mailing Lists Issue Tracking How To Contribute The ASF License Sponsorship Thanks Security © 2014-2016 Apache Software Foundation. Licensed under the Apache License v2.0. The Aurora Borealis IX photo displayed on the homepage is available under a Creative Commons BY-NC-ND 2.0 license. Apache, Apache Aurora, and the Apache feather logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Apache Aurora is a Mesos framework for long-running services and cron jobs."	"true"
"Cluster Management"	"Apache Mesos"	"http://mesos.apache.org/"	"Abstracts CPU, memory, storage, and other compute resources away from machines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Mesos Apache Software Foundation Apache Homepage License Sponsorship Thanks Security Apache Mesos Toggle navigation Getting Started Blog Documentation Downloads Community Program against your datacenter like it’s a single pool of resources Apache Mesos abstracts CPU, memory, storage, and other compute resources away from machines (physical or virtual), enabling fault-tolerant and elastic distributed systems to easily be built and run effectively. Download Mesos Mesos 0.28.2 Changelog What is Mesos? A distributed systems kernel Mesos is built using the same principles as the Linux kernel, only at a different level of abstraction. The Mesos kernel runs on every machine and provides applications (e.g., Hadoop, Spark, Kafka, Elasticsearch) with API’s for resource management and scheduling across entire datacenter and cloud environments. Linear scalability Industry proven to easily scale to 10,000s of nodes. High availability Fault-tolerant replicated master and agents using Zookeeper. Non-disruptive upgrades. Containers Native support for launching containers with Docker and AppC images. Pluggable isolation First class isolation support for CPU, memory, disk, ports, GPU, and modules for custom resource isolation. Two level scheduling Support for running cloud native and legacy applications in the same cluster with pluggable scheduling policies. APIs HTTP APIs for developing new distributed applications, for operating the cluster, and for monitoring. Web UI Built-in Web UI for viewing cluster state and navigating container sandboxes. Cross Platform Runs on Linux, OSX and Windows. Cloud provider agnostic. Follow @ApacheMesos Tweet #mesos © 2012-2016 The Apache Software Foundation. Apache Mesos, the Apache feather logo, and the Apache Mesos project logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Abstracts CPU, memory, storage, and other compute resources away from machines."	"true"
"Cluster Management"	"Singularity"	"http://getsingularity.com/"	"Singularity is a Mesos framework that makes deployment and operations easy. It supports web services, background workers, scheduled jobs, and one-off tasks."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Introduction | Singularity Introduction 1. About Singularity 1.1. How It Works 1.2. Requests and Deploys 1.3. Singularity UI 1.4. Adopters 2. Getting Started 2.1. Try It Out 2.2. Install 2.3. Examples 3. Developing 3.1. Developing Using Docker 3.2. UI 3.3. Load Balancer Integration 3.4. Basepom 4. Releases 5. Feature Docs 5.1. Choosing Custom Ports 5.2. Expiring Actions 5.3. Shell Commands 5.4. Task Search 5.5. Incremental Deploys 6. Reference 6.1. Configuration 6.2. Container Options 6.3. Database 6.4. Webhooks 6.5. Slave Extras 6.6. API 6.6.1. /api/sandbox 6.6.2. /api/slaves 6.6.3. /api/history 6.6.4. /api/state 6.6.5. /api/logs 6.6.6. /api/tasks 6.6.7. /api/test 6.6.8. /api/webhooks 6.6.9. /api/racks 6.6.10. /api/requests 6.6.11. /api/deploys 6.6.12. Models Published with GitBook Singularity Singularity Mesos Framework Singularity is an API and web application for running and scheduling Apache Mesos tasks — including long running processes, scheduled jobs, and one-off tasks. It focuses on a batteries-included approach: Singularity and its components provide an entire Platform as a Service (PaaS) to end-users. It has many features which have been introduced to reduce developer friction and ensure proper operation and reliable deployment of tasks. Users may even be unfamiliar with and shielded from the details of Mesos. For a more thorough explanation of the concepts behind Singularity and Mesos click here. Features Native Docker Support JSON REST API and Java Client Fully featured web application (replaces and improves Mesos Master UI) Rich load balancer integration with Baragon Deployments, automatic rollbacks, and healthchecks Webhooks for third party integrations Configurable email alerts to service owners Historical deployment and task data Custom executor with extended log features Try It Out! If you want to give Singularity a try, you can install docker and docker-compose to run our example cluster. Run docker-compose pull first to get all of the needed images. Note: This may take a few minutes Then simply run docker-compose up and it will start containers for... mesos master mesos slave (docker/mesos containerizers enabled) zookeeper Singularity Baragon Service for load balancer management Baragon Agent + Nginx as a load balancer ...and the following UIs will be available: Singularity UI => http://localhost:7099/singularity Baragon UI => http://localhost:8080/baragon/v2/ui if using boot2docker or another vm, replace localhost with the ip of your vm Getting Started Requirements Mesos ZooKeeper Java 7+ MySQL (optional) Contact singularity-users@googlegroups.com // singularity-users #singularity-framework on freenode Reference Install Installation Instructions Deployment API Configuration Examples Request and Deploy Concepts Custom Executor Components Development Local Development with Docker Hacking on the UI Understanding the basepom / Maven structure Third-party load balancer API design requirements Singularity is built and used by a number of different companies. Check out the list of adopters here."	"null"	"null"	"Singularity is a Mesos framework that makes deployment and operations easy. It supports web services, background workers, scheduled jobs, and one-off tasks."	"true"
"Code Analysis"	"Checkstyle"	"https://github.com/checkstyle/checkstyle"	"Static analysis of coding conventions and standards."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1170"	"98"	"527"	"GitHub - checkstyle/checkstyle: Checkstyle is a development tool to help programmers write Java code that adheres to a coding standard. By default it supports the Google Java Style Guide and Sun Code Conventions, but is highly configurable. It can be invoked with an ANT task and a command line program. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 98 Star 1,170 Fork 527 checkstyle/checkstyle Code Issues 264 Pull requests 6 Wiki Pulse Graphs Checkstyle is a development tool to help programmers write Java code that adheres to a coding standard. By default it supports the Google Java Style Guide and Sun Code Conventions, but is highly configurable. It can be invoked with an ANT task and a command line program. http://checkstyle.sourceforge.net/ 5,982 commits 2 branches 63 releases Fetching contributors Java 98.7% GAP 1.2% Other 0.1% Java GAP Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags i3202-whitespace-around-array-init master Nothing to show v2-branch_lmp release5_7 release5_6 release5_5 release5_4 release5_3 release4_4 release4_3 release4_2 release4_1 release4_0 release4_0_beta_5 release4_0_beta_4 release4_0_beta_3 release4_0_beta_2 release4_0_beta_1 release3_5 release3_4 release3_3 release3_2 release3_1 release3_0 release2_4 release2_2 release2_0 release1_4 release1_3 release1_2 release1_1 checkstyle-7.0 checkstyle-6.19 checkstyle-6.18 checkstyle-6.17 checkstyle-6.16.1 checkstyle-6.16 checkstyle-6.15 checkstyle-6.14.1 checkstyle-6.14 checkstyle-6.13 checkstyle-6.12.1 checkstyle-6.12 checkstyle-6.11.2 checkstyle-6.11.1 checkstyle-6.11 checkstyle-6.10.1 checkstyle-6.10 checkstyle-6.9 checkstyle-6.8.2 checkstyle-6.8.1 checkstyle-6.8 checkstyle-6.7 checkstyle-6.6 checkstyle-6.5 checkstyle-6.4.1 checkstyle-6.4 checkstyle-6.3 checkstyle-6.2 checkstyle-6.1.1 checkstyle-6.1 checkstyle-6.0 checkstyle-5.9 checkstyle-5.8 bcel Nothing to show New pull request Latest commit 137c0b2 Jul 15, 2016 romani minor: fix linkcheck-maven-plugi violations Permalink Failed to load latest commit information. .github Update PULL_REQUEST_TEMPLATE.md Jul 11, 2016 config Issue #3101: Add new 'useContainerOrderingForStatic' option for Impor… Jul 6, 2016 src minor: fix linkcheck-maven-plugi violations Jul 15, 2016 .gitattributes Issue #2161: unify test input locations for checks package Oct 19, 2015 .gitignore infra: Improve .gitignore by adding .pmd etc. by m2e-code-quality (#3192 May 18, 2016 .travis.yml minor: fix linkcheck-maven-plugi violations Jul 15, 2016 LICENSE Issue #2080: Replace tabs with spaces Sep 3, 2015 LICENSE.apache20 chmod all files to 644 Oct 5, 2013 README.md Issue #3159: badge for wrecker ci Jun 20, 2016 RIGHTS.antlr Remove obsolete double spaces Mar 9, 2015 appveyor.yml config: site-only maven profile is used in appveyor.yml Apr 6, 2016 circle.yml Issue #3126: Rearrange projects in circle.yml May 30, 2016 distelli-manifest.yml Issue #3229: switch distelli CI to jdk8 Jun 26, 2016 fast-forward-merge.sh minor: symplification of fast-forward-merge.sh Feb 6, 2016 pom.xml minor: fix linkcheck-maven-plugi violations Jul 15, 2016 release.sh minor: formatting Jun 10, 2016 wercker.yml config: switch back to CS-SI/Orekit repo, on commit that have zero vi… Jun 27, 2016 README.md Members chat: Contributors chat: Checkstyle is a tool for checking Java source code for adherence to a Code Standard or set of validation rules (best practices). The latest release version can be found at SourceForge downloads or at Maven repo. Each-commit builds of maven artifacts can be found at Maven Snapshot repository. Documentation is available in HTML format, see http://checkstyle.sourceforge.net/checks.html. Continuous integration and Quality reports Travis (Linux & MacOS build): Appveyor (Windows build): Distelli CI Quality reports: http://checkstyle.sourceforge.net/project-reports.html JavaScript, CSS and Java source file analysis on Codacy: Feedback/Support Please send any feedback to https://groups.google.com/forum/?hl=en#!forum/checkstyle Questions and Answers from community: Bugs and Feature requests (not a questions): https://github.com/checkstyle/checkstyle/issues Licensing This software is licensed under the terms in the file named ""LICENSE"" in this directory. The software uses the ANTLR package (http://www.antlr.org). Its license terms are in the file named ""RIGHTS.antlr"" in this directory. This product includes software developed by The Apache Software Foundation (http://www.apache.org/). The software uses the Cli, Logging and Beanutils packages from the Apache Commons project (http://commons.apache.org/). The license terms of these packages are in the file named ""LICENSE.apache20"" in this directory. The software uses the Google Guava Libraries (https://code.google.com/p/guava-libraries/). The license terms of these packages are in the file named ""LICENSE.apache20"" in this directory. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/checkstyle/checkstyle"	"Static analysis of coding conventions and standards."	"true"
"Code Analysis"	"Codacy"	"https://www.codacy.com"	"Continuous static analysis, code coverage, and software metrics to automate code reviews."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Home | Codacy Toggle navigation Product Pricing Enterprise Login Sign up Review less, merge faster Check code style, security, duplication, complexity and coverage on every change while tracking code quality throughout your sprints.Sign up with GitHub Or sign up with a different account Loved by Developers Codacy saves hours in code review and code quality monitoring, from small teams to big companies. Save time in Code reviews Automatically identify new static analysis issues, code coverage, code duplication and code complexity evolution in every commit and pull request. Learn More Integrated in your Workflow Codacy is flexible and adapts to your code review process. Codacy pushes results as comments in your pull requests or as notifications in Slack or Hipchat channels. Codacy also plays nice with your Continuous Integration tools and serves as an ideal complement to your unit tests. See all Features and Integrations Track your project quality evolution Get a code quality glance at your project and track its quality evolution over time. Our dashboard answers three main questions: _What is the state of your projects code quality? _How is it evolving throughout time? _What are the hotspots in my code? Learn more What our customers say Akara Sucharitakul Principal MTS at Paypal ""We came to rely on Codacy to analyze every commit and every pull request to catch code quality issues, manage code coverage, or even new bugs before we even accept the pull request, saving us a huge amount of churn and cost."" Raúl Raja CTO at 47 Degrees ""Codacy has probably saved us over two hours a day of valuable engineering time.""Read more Xavier Fernández CTO at Expansiva Engineering ""It helps a lot because it reduces a lot of the time of code reviews while increasing the time we spend coding.The code reviews are now about code structure and its internal logic, and not about code conventions, making the reviews less repetitive and more interesting.""Read more Jules Ivanic Colisweb Lead Developer and Technical Architect ""Code quality is an everyday job; it’s the responsibility of every member of the team and Codacy is a very good assistant in that everyday job.""Read more Elton Minetto CEO at Coderockr ""With Codacy our code review process became fast and precise, especially thanks to the integration with GitHub and Slack. Now our team can receive an analysis in each commit and improve the code right away.""Read more Product Product Features Why Codacy Customers Pricing Enterprise Company About Us Security Open Source Help Documentation Getting Started Request a Demo Privacy Policy Terms and Conditions Get in touch Contact Us Blog Twitter GitHub © 2016 - Codacy Automated Code Review"	"null"	"null"	"Continuous static analysis, code coverage, and software metrics to automate code reviews."	"true"
"Code Analysis"	"Error Prone"	"https://github.com/google/error-prone"	"Catches common programming mistakes as compile-time errors."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1263"	"92"	"118"	"GitHub - google/error-prone: Catch common Java mistakes as compile-time errors Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 92 Star 1,263 Fork 118 google/error-prone Code Issues 102 Pull requests 6 Wiki Pulse Graphs Catch common Java mistakes as compile-time errors http://errorprone.info 1,794 commits 7 branches 11 releases 53 contributors Java 99.8% Other 0.2% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags add_intellij_style add_license_to_pom bump-version-number finally_altname gh-pages master travis Nothing to show v2.0.10 v2.0.9 v2.0.8 v2.0.7 v2.0.6 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0 Nothing to show New pull request Latest commit 03495e2 Jul 15, 2016 Ian Rogers [maven-release-plugin] prepare for next development iteration Permalink Failed to load latest commit information. .idea Add google intellij style. May 14, 2015 annotation [maven-release-plugin] prepare for next development iteration Jul 15, 2016 annotations [maven-release-plugin] prepare for next development iteration Jul 15, 2016 ant [maven-release-plugin] prepare for next development iteration Jul 15, 2016 core [maven-release-plugin] prepare for next development iteration Jul 15, 2016 docgen [maven-release-plugin] prepare for next development iteration Jul 15, 2016 docs/bugpattern Discourage use of the default Charset Jul 12, 2016 examples Fix hasAnnotationOnAnyOverriddenMethod to handle missing annotation t… Jul 7, 2016 third_party/java/auto Initial bazel build Apr 17, 2015 util Re-enable publishing snapshots and documentation Oct 28, 2015 .gitignore Clean up Bazel plugin example (#421) Jun 24, 2016 .travis.yml Turn down travis JDK7 build Oct 1, 2015 CONTRIBUTING.md Add CONTRIBUTING file Dec 18, 2014 COPYING Initial commit. Basic Predicate DSL for matchers, and check for one e… Sep 14, 2011 README.md Revise README Feb 10, 2016 WORKSPACE Initial bazel build Apr 18, 2015 pom.xml [maven-release-plugin] prepare for next development iteration Jul 15, 2016 README.md Error Prone Error Prone is a static analysis tool for Java that catches common programming mistakes at compile-time. public class ShortSet {   public static void main (String[] args) {     Set<Short> s = new HashSet<>();     for (short i = 0; i < 100; i++) {       s.add(i);       s.remove(i - 1);     }     System.out.println(s.size());   } } error: [CollectionIncompatibleType] Argument 'i - 1' should not be passed to this method; its type int is not compatible with its collection's type argument Short       s.remove(i - 1);               ^     (see http://errorprone.info/bugpattern/CollectionIncompatibleType) 1 error  Getting Started Our documentation is at errorprone.info. Error Prone works with Bazel, Maven, Ant, and Gradle. See our installation instructions for details. Developing Error Prone Developing and building Error Prone is documented on the wiki. Links Mailing lists General discussion Announcements Javadoc Pre-release snapshots are available from Sonatype's snapshot repository. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/error-prone"	"Catches common programming mistakes as compile-time errors."	"true"
"Code Analysis"	"FindBugs"	"http://findbugs.sourceforge.net/"	"Static analysis of bytecode to find potential bugs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"FindBugs™ - Find Bugs in Java Programs   Docs and Info  FindBugs 2.0  Demo and data  Users and supporters  FindBugs blog  Fact sheet  Manual  Manual(ja/日本語)  FAQ  Bug descriptions  Bug descriptions(ja/日本語)  Bug descriptions(fr)  Mailing lists  Documents and Publications  Links   Downloads   FindBugs Swag   Development  Open bugs  Reporting bugs  Contributing  Dev team  API [no frames]  Change log  SF project page  Browse source  Latest code changes FindBugs™ - Find Bugs in Java Programs This is the web page for FindBugs, a program which uses static analysis to look for bugs in Java code.  It is free software, distributed under the terms of the Lesser GNU Public License. The name FindBugs™ and the FindBugs logo are trademarked by The University of Maryland. FindBugs has been downloaded more than a million times. The current version of FindBugs is 3.0.1. FindBugs requires JRE (or JDK) 1.7.0 or later to run.  However, it can analyze programs compiled for any version of Java, from 1.0 to 1.8. The current version of FindBugs is 3.0.1, released on 13:05:33 EST, 06 March, 2015. We are very interested in getting feedback on how to improve FindBugs. File bug reports on our sourceforge bug tracker Changes | Talks | Papers | Sponsors | Support FindBugs 3.0.1 Release A number of changes described in the changes document, including new bug patterns: BSHIFT_WRONG_ADD_PRIORITY, CO_COMPARETO_INCORRECT_FLOATING, DC_PARTIALLY_CONSTRUCTED, DM_BOXED_PRIMITIVE_FOR_COMPARE, DM_INVALID_MIN_MAX, ME_MUTABLE_ENUM_FIELD, ME_ENUM_FIELD_SETTER, MS_MUTABLE_COLLECTION, MS_MUTABLE_COLLECTION_PKGPROTECT, RANGE_ARRAY_INDEX, RANGE_ARRAY_OFFSET, RANGE_ARRAY_LENGTH, RANGE_STRING_INDEX, RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT, UC_USELESS_CONDITION, UC_USELESS_CONDITION_TYPE, UC_USELESS_OBJECT, UC_USELESS_OBJECT_STACK, UC_USELESS_VOID_METHOD FindBugs 3.0.0 Release FindBugs supports Java 8 now (both as runtime and target platform). FindBugs requires minimum Java 7 as runtime environment! FindBugs uses ASM 5 now which means that some 3rd party detectors based on FindBugs 2.x/ASM 3 has to be upgraded. See details in ASM documentation. New Bug patterns: NP_OPTIONAL_RETURN_NULL, IIO_INEFFICIENT_INDEX_OF, IIO_INEFFICIENT_LAST_INDEX_OF CNT_ROUGH_CONSTANT_VALUE New ""Source"" filter which can be used to filter out classes generated from other languages:                              <?xml version=""1.0"" encoding=""UTF-8""?>                             <FindBugsFilter>                             <Match>                                 <Source name=""~.*\.groovy"" />                             </Match>                             </FindBugsFilter>                         New ""-auxclasspathFromFile"" and ""-analyzeFromFile"" command line options. New ""nested"" ant task attribute. Various bug fixes, also many patches from community. Thanks for your contributions! FindBugs 2.0.3 Release FindBugs 2.0.3 is intended to be a minor bug fix release over FindBugs 2.0.2. Although than some improvements to existing bug detectors and analysis engines, and a few new bug patterns, and some important bug fixes to the Eclipse plugin, no significant changes should be observed. Consult the Change log for more details. Also check out http://code.google.com/p/findbugs/w/list for more information about some recent features/changes in FindBugs. Major changes in FindBugs 2.0 (from FindBugs 1.3.x) FindBugs Communal cloud checks for updated versions of FindBugs Powerful plugin capabilities new bug patterns, including new/improved support for Guava and JSR-305 improved performance Ways to run FindBugs Here are various ways to run FindBugs. For plugins not supported by the FindBugs team, check to see what version of FindBugs they provide; it might take a little while for the plugins to update to FindBugs 2.0. Command line, ant, GUI Provided in FindBugs download Eclipse Update site for Eclipse plugin: http://findbugs.cs.umd.edu/eclipse. Supported by the FindBugs project. Maven http://mojo.codehaus.org/findbugs-maven-plugin/ Netbeans SQE: Software Quality Environment Jenkins Jenkins FindBugs Plugin Hudson HUDSON FindBugs Plugin IntelliJ Several plugins, see http://code.google.com/p/findbugs/wiki/IntellijFindBugsPlugins for a description. Experience with FindBugs Google FindBugs Fixit: Google has a tradition of engineering fixits, special days where they try to get all of their engineers focused on some specific problem or technique for improving the systems at Google. A fixit might work to improve web accessibility, internal testing, removing TODO's from internal software, etc. In 2009, Google held a global fixit for UMD's FindBugs tool a static analysis tool for finding coding mistakes in Java software. The focus of the fixit was to get feedback on the 4,000 highest confidence issues found by FindBugs at Google, and let Google engineers decide which issues, if any, needed fixing. More than 700 engineers ran FindBugs from dozens of offices. More than 250 of them entered more than 8,000 reviews of the issues. A review is a classification of an issue as must-fix, should-fix, mostly-harmless, not-a-bug, and several other categories. More than 75% of the reviews classified issues as must fix, should fix or I will fix. Many of the scariest issues received more than 10 reviews each. Engineers have already submitted changes that made more than 1,100 of the 3,800 issues go away. Engineers filed more than 1,700 bug reports, of which 600 have already been marked as fixed Work continues on addressing the issues raised by the fixit, and on supporting the integration of FindBugs into the software development process at Google. The fixit at Google showcased new capabilities of FindBugs that provide a cloud computing / social networking backdrop. Reviews of issues are immediately persisted into a central store, where they can be seen by other developers, and FindBugs is integrated into the internal Google tools for filing and viewing bug reports and for viewing the version control history of source files. For the Fixit, FindBugs was configured in a mode where engineers could not see reviews from other engineers until they had entered their own; after the fixit, the configuration will be changed to a more open configuration where engineers can see reviews from others without having to provide their own review first. These capabilities have all been contributed to UMD's open source FindBugs tool, although a fair bit of engineering remains to prepare the capabilities for general release and make sure they can integrate into systems outside of Google. The new capabilities are expected to be ready for general release in Fall 2009. Talks about FindBugs Mistakes That Matter, JavaOne, 2009 Youtube video showing of demo of our 2.0 Eclipse plugin (5 minutes) Quicktime movie showing of demo of our new GUI to view some of the null pointer bugs in Eclipse (Big file warning: 23 Megabytes) JavaOne 2007 talk on Improving Software Quality Using Static Analysis Talk Bill Pugh gave at SD Best Practices, Sept 14th (more of a handle on tutorial about using FindBugs) Talk Bill Pugh gave at ITA Software and MIT, Sept 12th and 13th (more of a research focus) Video of talk Bill Pugh gave at Google, July 6th, 2006 Java Posse podcast interview with Bill Pugh and Brian Goetz Papers about FindBugs Finding More Null Pointer Bugs, But Not Too Many, by David Hovemeyer, York College of Pennsylvania and William Pugh, Univ. of Maryland, 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, June, 2007 Evaluating Static Analysis Defect Warnings On Production Software, Nathaniel Ayewah and William Pugh, Univ. of Maryland, and J. David Morgenthaler, John Penix and YuQian Zhou, Google, Inc., 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, June, 2007 Contributors and Sponsors The current development team consists of Bill Pugh and Andrey Loskutov. The most recent funding for FindBugs comes from a Google Faculty Research Awards. Additional Support Numerous people have made significant contributions to the FindBugs project, including founding work by David Hovemeyer and the web cloud infrastructure by Keith Lea. YourKit is kindly supporting open source projects with its full-featured Java Profiler. YourKit, LLC is creator of innovative and intelligent tools for profiling Java and .NET applications. Take a look at YourKit's leading software products: YourKit Java Profiler and YourKit .NET Profiler. The FindBugs project also uses FishEye and Clover, which are generously provided by Cenqua/Atlassian. Additional financial support for the FindBugs project was provided by National Science Foundation grants ASC9720199 and CCR-0098162, Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation (NSF). Send comments to findbugs@cs.umd.edu"	"null"	"null"	"Static analysis of bytecode to find potential bugs."	"true"
"Code Analysis"	"jQAssistant"	"http://jqassistant.org/"	"Static code analysis with Neo4J-based query language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"87"	"21"	"34"	"GitHub - buschmais/jqassistant: Your Software.Your Structures.Your Rules. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 87 Fork 34 buschmais/jqassistant Code Issues 80 Pull requests 3 Wiki Pulse Graphs Your Software.Your Structures.Your Rules. 1,924 commits 7 branches 13 releases Fetching contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1 170-plugin-model-documentation gh-pages jensnerche-master jexp-master master nachtgold-master Nothing to show BEFORE_CHECKSTYLE 1.1.3 1.1.2 1.1.1 1.1.0 1.1.0-RC2 1.1.0-RC1 1.0.0 1.0.0-RC1 1.0.0-M4 1.0.0-M3 1.0.0-M2 1.0.0-M1 Nothing to show New pull request Latest commit ba773b5 Jul 4, 2016 obfischer Purged the master branch of jQAssistant as we splitted up this reposi… … …tory into multiple repositories. Permalink Failed to load latest commit information. .gitignore + /neo4j-home/ Jan 20, 2016 readme.adoc Purged the master branch of jQAssistant as we splitted up this reposi… Jul 4, 2016 readme.adoc Former jQAssistant Master Repository We splitted jQAssistant in multiple single repositories to be able to build a better and more flexible build an release infrastructure then we had before. Warning Do not raise any new issues for this repository. Raise new issues only in the affected repository. If you have questions related to jQAssistant please get in touch with us via the QAssistant forum. The table below lists all existing repositories jQAssistant is made of. Table 1. List of jQAssistant related repositories as of 4-Jul-2016 Commandline distribution https://github.com/buschmais/jqa-commandline-tool Plugin for Apache Maven https://github.com/buschmais/jqa-maven-plugin jQA Core Framework https://github.com/buschmais/jqa-core-framework jQA EJB 3 plugin https://github.com/buschmais/jqa-ejb3-plugin jQA CDI plugin https://github.com/buschmais/jqa-cdi-plugin jQA GraphML plugin https://github.com/buschmais/jqa-graphml-plugin jQA Java plugin https://github.com/buschmais/jqa-java-plugin jQA Java 8 plugin https://github.com/buschmais/jqa-java8-plugin jQA JavaEE 6 plugin https://github.com/buschmais/jqa-javaee6-plugin jQA JAX RS https://github.com/buschmais/jqa-jaxrs-plugin jQA JPA 2 plugin https://github.com/buschmais/jqa-jpa2-plugin jQA JUnit plugin https://github.com/buschmais/jqa-junit-plugin jQA M2 Repo plugin https://github.com/buschmais/jqa-m2repo-plugin jQA Maven 3 plugin https://github.com/buschmais/jqa-maven3-plugin jQA Neo4j backend https://github.com/buschmais/jqa-neo4j-backend jQA OSGi plugin https://github.com/buschmais/jqa-osgi-plugin jQA TestNG plugin https://github.com/buschmais/jqa-testng-plugin jQA Tycho plugin https://github.com/buschmais/jqa-tycho-plugin jQA RDMMS plugin https://github.com/buschmais/jqa-rdbms-plugin jQA XML plugin https://github.com/buschmais/jqa-xml-plugin jQA YAML plugin https://github.com/buschmais/jqa-yaml-plugin Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/buschmais/jqassistant"	"Static code analysis with Neo4J-based query language."	"true"
"Code Analysis"	"PMD"	"https://github.com/pmd/pmd"	"Source code analysis for finding bad coding practices."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"566"	"65"	"267"	"GitHub - pmd/pmd Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 65 Star 566 Fork 267 pmd/pmd forked from adangel/pmd Code Pull requests 0 Pulse Graphs https://pmd.github.io 8,698 commits 5 branches 33 releases Fetching contributors Java 76.4% Apex 18.5% XSLT 1.1% Matlab 0.8% ANTLR 0.7% Swift 0.7% Other 1.8% Java Apex XSLT Matlab ANTLR Swift Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master pmd/4.3.x pmd/5.0.x pmd/5.3.x pmd/5.4.x Nothing to show pmd_releases/5.5.0 pmd_releases/5.4.2 pmd_releases/5.4.1 pmd_releases/5.4.0 pmd_releases/5.3.7 pmd_releases/5.3.6 pmd_releases/5.3.5 pmd_releases/5.3.4 pmd_releases/5.3.3 pmd_releases/5.3.2 pmd_releases/5.3.1 pmd_releases/5.3.0 pmd_releases/5.2.3 pmd_releases/5.2.2 pmd_releases/5.2.1 pmd_releases/5.2.0 pmd_releases/5.1.3 pmd_releases/5.1.2 pmd_releases/5.1.1 pmd_releases/5.1.0 pmd_releases/5.0.5 pmd_releases/5.0.4 pmd_releases/5.0.3 pmd_releases/5.0.2 pmd_releases/5.0.1 pmd_releases/5.0.0 pmd_releases/4.3 pmd-eclipse-plugin/4.0.2.v20131031-1124 pmd-eclipse-plugin/4.0.1.v20130811-0001 pmd-eclipse-plugin/4.0.0.v20130510-1000 pmd-build/0.9 pmd-build/0.8 pmd-build/0.7 Nothing to show New pull request Pull request Compare This branch is even with adangel:master. Latest commit 4e5e018 Jul 8, 2016 adangel Disable doclint in site generation (-Psite) with java8 Permalink Failed to load latest commit information. pmd-apex Same fix for #1501 for apex Jul 7, 2016 pmd-core Merge branch 'bug-1499' Jul 2, 2016 pmd-cpp [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-cs [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-dist [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-fortran [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-go [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-java Merge branch 'pr-103' Jul 7, 2016 pmd-java8 [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-javascript Fix duplicated maven-antrun-plugin section Jun 27, 2016 pmd-jsp [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-matlab [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-objectivec [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-perl [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-php [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-plsql [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-python [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-ruby [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-scala [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-swift [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-test [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-ui [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-vm [maven-release-plugin] prepare for next development iteration Jun 25, 2016 pmd-xml [maven-release-plugin] prepare for next development iteration Jun 25, 2016 src/site Update changelog Jul 7, 2016 .gitignore update gitignore Mar 21, 2015 .travis-settings.xml Add travis.yml - see https://travis-ci.org/pmd/pmd Sep 26, 2015 .travis-toolchains.xml travis toolchains: add amd64 suffix Jul 2, 2016 .travis.yml Add a toolchains.xml for travis Jul 2, 2016 LICENSE Update changelog for scala pull request; update license infos Jan 18, 2015 NOTICE Update changelog for scala pull request; update license infos Jan 18, 2015 README.md Revert ""Update README.md"" May 21, 2016 do-release.sh Merge branch 'pmd/5.3.x' May 1, 2016 example-toolchains.xml Add maven toolchains Apr 10, 2016 pom.xml Disable doclint in site generation (-Psite) with java8 Jul 8, 2016 README.md PMD About PMD is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth. It supports Java, JavaScript, Salesforce.com Apex, XML, XSL. Additionally it includes CPD, the copy-paste-detector. CPD finds duplicated code in Java, C, C++, C#, PHP, Ruby, Fortran, JavaScript, Salesforce.com Apex, Perl, Swift. Source Our latest source of PMD can be found on GitHub. Fork us! How to build PMD? You'll need to have a ~/.m2/toolchains.xml file setup with jdk 1.6 (for pmd 5.3.x), jdk 1.7 (for pmd 5.4.x and pmd 5.5.x) and jdk 1.8 (for some features in pmd 5.5.x). See maven toolchains. A example file can be found here: example-toolchains.xml. Use maven in the top-level directory: mvn clean package  This will create the zip files in the directory pmd-dist/target: cd pmd-dist/target ls *.zip  That's all ! How to build the documentation (maven site)? Building the maven site is done with the following commands: mvn clean install -DskipTests=true mvn install site site:stage -Psite  You'll find the built site in the directory target/staging/. Bug Reports We are using Sourceforge for bug tracking. Please file your bugs at https://sourceforge.net/p/pmd/bugs/. Pull Requests Pull requests are always welcome: https://github.com/pmd/pmd/pulls News and Website More information can be found on our Website and on SourceForge. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pmd/pmd"	"Source code analysis for finding bad coding practices."	"true"
"Code Analysis"	"SonarQube"	"http://www.sonarqube.org/"	"Integrates other analysis components via plugins and provides an overview of the metrics over time."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1181"	"148"	"492"	"GitHub - SonarSource/sonarqube: Put your technical debt under control Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 148 Star 1,181 Fork 492 SonarSource/sonarqube Code Pull requests 9 Pulse Graphs Put your technical debt under control http://www.sonarqube.org 19,982 commits 53 branches 92 releases 44 contributors Java 72.0% Ruby 12.9% JavaScript 6.1% COBOL 4.1% HTML 3.2% CSS 1.0% Other 0.7% Java Ruby JavaScript COBOL HTML CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.5.5 Godin-patch-1 branch-3.1 branch-3.2 branch-3.3 branch-3.4 branch-3.5 branch-3.6 branch-3.7 branch-4.0 branch-4.1 branch-4.2 branch-4.3 branch-4.4 branch-4.5 branch-5.0 branch-5.1 branch-5.2 branch-5.3 branch-5.4 branch-5.5 branch-5.6 feature/deprecate_check_api feature/eh/SONAR-7857_update_UpdateCenter feature/jl/try_to_fix_dev_cockpit feature/jl/upgrade_updatecenter_to_1.17 feature/jl/5.6_update_project_view_date feature/no_project_name feature/npmrc feature/sb/ce-hook feature/sb/fix-issues-date-facet feature/sb/selenide feature/sb/speedup-db-migration feature/sb/speedup-db-tests feature/stas/flow feature/stas/my-projects-ws feature/stas/refactor-project-permissions feature/stas/travis-utils-v31 feature/utwin fix_npm frozen/SONAR-6506_remove_api_updatecenter_installed_plugins frozen/SONAR-6511_remove_api_server_setup frozen/sl/SONAR-7480_optimize_es_requests hf372-oracle-severity master patch/batch-timeout-4_5_4 release-2.10.1 release-2.11 release-2.12 release-2.13 release-2.14 release-3.0 to_trash/sl/drop_unused_measures_col Nothing to show latest-silver-master-#65 5.6 5.6-RC2 5.6-RC1 5.5 5.5-RC2 5.5-RC1 5.4 5.4-RC4 5.4-RC3 5.4-RC2 5.4-RC1 5.3 5.3-RC3 5.3-RC2 5.3-RC1 5.2 5.2-RC3 5.2-RC2 5.2-RC1 5.1.2 5.1.1 5.1 5.1-RC2 5.1-RC1 5.0.1 5.0 5.0-RC4 5.0-RC3 5.0-RC2 5.0-RC1 4.5.7 4.5.6 4.5.5 4.5.4 4.5.3 4.5.2 4.5.1 4.5.1-RC1 4.5 4.5-RC3 4.5-RC2 4.5-RC1 4.4.1 4.4 4.4-RC3 4.4-RC2 4.4-RC1 4.3.3 4.3.2 4.3.1 4.3 4.2 4.1.2 4.1.1 4.1 4.1-RC2 4.1-RC1 4.0 3.7.4 3.7.2 3.7.1 3.7.1-RC1- 3.7 3.6.3 3.6.2 3.6.1 3.6 3.5.1 3.5 3.4.1 3.4 3.3.2 3.3.1 3.3 3.2.1 3.2 3.1.1 3.1 3.0.1 3.0 2.14 2.13.1 2.13 2.12 2.11 2.10.1 2.10 2.9 2.8 2.7 2.6 Nothing to show New pull request Latest commit c525e88 Jul 15, 2016 stas-vilchik fix saving of new issue filter Permalink Failed to load latest commit information. it fix saving of new issue filter Jul 15, 2016 plugins/sonar-xoo-plugin SONAR-7883 Expose InputFile charset in API Jul 12, 2016 scripts [script] use local variable rather than function arguments May 23, 2016 server fix saving of new issue filter Jul 15, 2016 sonar-application SONAR-7797 Upgrade the distributed plugins Jul 15, 2016 sonar-check-api prepare for next development iteration May 20, 2016 sonar-colorizer prepare for next development iteration May 20, 2016 sonar-core SONAR-7492 Display an explanation tooltip for rating measures (#1104) Jul 15, 2016 sonar-db SONAR-7889 Add project key to WS api/qualityprofiles/projects Jul 15, 2016 sonar-duplications remove use of Guava's Objects.equal May 24, 2016 sonar-home Fix some Quality flaws Jun 27, 2016 sonar-markdown prepare for next development iteration May 20, 2016 sonar-plugin-api-deps prepare for next development iteration May 20, 2016 sonar-plugin-api Improve quality Jul 14, 2016 sonar-scanner-engine-shaded prepare for next development iteration May 20, 2016 sonar-scanner-engine Improve quality Jul 14, 2016 sonar-scanner-protocol Add issues to report viewer Jun 30, 2016 sonar-testing-harness prepare for next development iteration May 20, 2016 sonar-ws SONAR-7871 Fix searching issues by type in IssueService client WS Jul 15, 2016 tests Automatic merge from branch-5.6 Jul 8, 2016 .cix.yml Add minor comments to build files Jun 6, 2016 .gitignore ignore license files in scripts/patches Aug 7, 2015 .sonarsource.properties Add minor comments to build files Jun 6, 2016 .travis.yml Cache JDK8 installer on Travis Jun 21, 2016 LICENSE.txt Add LICENSE.txt May 20, 2016 README.md changed reference links to a Links section to make them clickable on … May 19, 2016 build.sh [SCRIPT] build and quick-build must stop SQ instance Aug 24, 2015 cix.sh Add minor comments to build files Jun 6, 2016 copyright.txt Fix copyright.txt and remove useless COPYING file May 20, 2016 cve-false-positives.xml Add configuration for check of dep vulnerabilities listed in CVE regi… Feb 14, 2015 debug-server.sh SONAR-5709 Add properties sonar.search.javaAdditionalOpts and sonar.w… Oct 8, 2014 find-classpath-conflicts.sh Minor Bash improvements (#951) May 11, 2016 format-headers.sh Upgrade to parent 26 and new copyright headers Jan 5, 2016 jacoco-build.sh Minor Bash improvements (#951) May 11, 2016 pom.xml SONAR-7857 Upgrade to update center 1.17 Jul 15, 2016 quick-build.sh Fix OOM in build Jun 13, 2016 run-db-unit-tests.sh Enable QA pipeline at SonarSource Feb 10, 2016 run-integration-tests.sh Fix IT scripts Feb 11, 2016 run-perf-tests.sh Fix and move perf tests Feb 10, 2016 run-upgrade-tests.sh Fix description of run-upgrade-tests.sh Jun 30, 2016 start.sh [SCRIPTS] add support for patches to start.sh Aug 6, 2015 stop.sh fix start.sh and stop.sh on ubuntu with zsh Apr 7, 2015 third-party-licenses.sh SONAR-6642 drop internal maven plugins Jun 12, 2015 travis.sh upgrade travis-utils to v31 (#1088) Jul 8, 2016 README.md License Copyright 2008-2016 SonarSource. Licensed under the GNU Lesser General Public License, Version 3.0 Build status Links Project website: http://www.sonarqube.org/ Documentation: http://docs.sonarqube.org/display/SONAR Issue tracking: http://jira.sonarsource.com/browse/SONAR How to contribute: http://www.sonarqube.org/development/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SonarSource/sonarqube"	"Integrates other analysis components via plugins and provides an overview of the metrics over time."	"true"
"Code Coverage"	"Clover"	"https://www.atlassian.com/software/clover/overview"	"Proprietary code coverage tool by Atlassian that relies on source-code instrumentation, instead of bytecode instrumentation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Java and Groovy code coverage | Clover | Atlassian Atlassian Products JIRA Software Project and issue tracking Confluence Document collaboration Bitbucket Git code management JIRA Service Desk IT and business service desk HipChat Team chat, video, file sharing View all products » Purchase a product » Teams Software Plan, build, and ship amazing products IT Provide great service and support your business Marketing Bring together a winning go-to-market strategy Finance Simplify what it takes to report, measure, and analyze Operations Run your business smoothly and efficiently HR Streamline processes for better people management Legal Securely and reliably manage clients and documents Other Work smart and deliver fast with any team Support Documentation Guides to all our products University Self-paced and live training Enterprise services Support for large teams Answers Community Q&A forum Expert partners Custom professional services My account Manage your Atlassian account View all resources » Create support ticket » Try Buy Company Careers Contact us Pricing Try it free Java and Groovy code coverage Get started for free Balance writing code that does stuff, and code that tests stuff. Find risky code changes before you commit them to your SCM system. Use Clover in your IDE or continuous integration system. Analyze Identify where new tests will have the most impact using coverage clouds and tree maps. Optimize Speed your builds and test execution. Clover can selectively run tests only on code changes or when a previous build has failed.  Build Integrate with Bamboo, Hudson, Jenkins, Ant, Maven and more, to provide code coverage reports in your build results. Results Drill down into the full details of test results and track code coverage over time with historical data. Use in your IDE or your continuous integration system Integrate with almost any build system or run Clover in any Eclipse-based IDE or IntelliJ IDEA to check coverage of code changes before you commit them to your SCM system The Atlassian ecosystem is a big benefit for a team like ours that's collaborating across geographical locations. Dave Mittman, Lead Software Developer Simple plans for your Desktop or Server Single machine $300 One-time payment choose Desktop or Server Desktop Server Download now Free for 30 days No credit card required Many machines $2200 One-time payment Desktop or Server 10 machines 25 machines 100 machines Unlimited machines Download now Free for 30 days No credit card required Atlassian My account Products Marketplace Community Company Careers Contact us Languages Choose your language English Español Deutsch Français 日本語 Português русский 한국어 Privacy policy Terms of use Trust & Security Copyright © 2016 Atlassian"	"null"	"null"	"Proprietary code coverage tool by Atlassian that relies on source-code instrumentation, instead of bytecode instrumentation."	"true"
"Code Coverage"	"Cobertura"	"http://cobertura.github.io/cobertura/"	"Relies on offline (or static) bytecode instrumentation and class loading to collect code coverage metrics; GPLv2 licensed."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"436"	"76"	"158"	"GitHub - cobertura/cobertura: Cobertura Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 76 Star 436 Fork 158 cobertura/cobertura forked from christ66/cobertura Code Issues 138 Pull requests 5 Wiki Pulse Graphs Cobertura 992 commits 20 branches 21 releases 21 contributors Java 84.8% HTML 8.7% PHP 1.9% JavaScript 1.7% CSS 1.2% Groovy 1.2% Other 0.5% Java HTML PHP JavaScript CSS Groovy Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master mavenization ptab_v2_0 v1_9rc1 v1_9rc1@503 v1_9rc2 v1_9 v1_9_1 v1_9_1_1 v1_9_1@569 v1_9_1@583 v1_9_2 v1_9_2@607 v1_9_2@616 v1_9_3 v1_9_3@678 v1_9_4 v1_9_4@707 vendor Nothing to show v1_9_4_1 v1_9_4 v1_9_3 v1_9_2 v1_9_1 v1_9 v1_9rc2 v1_9rc1 v1_8 v1_7 v1_6 v1_5 v1_4 v1_3 v1_2 v1_1 v1_0 start initial cobertura-2.1.1 cobertura-2.1.0 Nothing to show New pull request #301 Compare This branch is 172 commits ahead, 2 commits behind christ66:master. Latest commit db3bedf Jun 1, 2016 christ66 Merge pull request #309 from tiffloon/patch-2 … Fixing Issue #200 Permalink Failed to load latest commit information. cobertura-runtime [maven-release-plugin] prepare for next development iteration Feb 26, 2015 cobertura Fixing Issue #200 May 27, 2016 codestyle [maven-release-plugin] prepare for next development iteration Feb 26, 2015 conversion [maven-release-plugin] prepare for next development iteration Feb 26, 2015 interaction [maven-release-plugin] prepare for next development iteration Feb 26, 2015 metrics [maven-release-plugin] prepare for next development iteration Feb 26, 2015 poms [maven-release-plugin] prepare for next development iteration Feb 26, 2015 src/site Added simplified metrics model, as well as partial components for ext… Dec 8, 2013 .gitignore Add exclude rule for cobertura.ser files. Jul 6, 2014 LICENSE.txt Migrate cobertura to Maven. Add formatter plugin to ensure all code a… Jun 11, 2013 README.markdown Add a download section. Feb 27, 2015 pom.xml Merge pull request #237 from mkordas/update_maven_project_info_report… Mar 10, 2016 README.markdown COBERTURA ABOUT Cobertura is a free Java code coverage reporting tool. It is based on jcoverage 1.0.5. See the Cobertura web page and wiki for more details. Since 2.0.0, Cobertura versions follow the Semantic versioning guidelines. COPYRIGHT Code in the net.sourceforge.cobertura.javancss package is Copyright (C) 2000 Chr. Clemens Lee See the included file ""LICENSE.txt"" LICENSE Cobertura is free software. Most of it is licensed under the GNU GPL, and you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. Please review the file LICENSE.txt included in this distribution for further details. Parts of Cobertura are licensed under the Apache Software License, Version 1.1. WARRANTY Cobertura is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. DOWNLOAD You can download Cobertura 2.1.1 from The Central Repository. That includes the distributions for stand-alone command line usage. CONVENTIONS Before committing check all tests pass build the project, so that all code gets uniformly indented. A Maven plugin ensures this. CONTRIBUTORS List of all contributors to Cobertura listed alphabetically by last name Copyright (C) 2005 Björn Beskow Copyright (C) 2008 Matt Cordes Copyright (C) 2005 Erik Dick Copyright (C) 2005 Mark Doliner Copyright (C) 2005 Joakim Erdfelt Copyright (C) 2008 Scott Frederick Copyright (C) 2008 Julian Gamble Copyright (C) 2006 Dan Godfrey Copyright (C) 2008 Tri Bao Ho Copyright (C) 2006 Naoki Iwami Copyright (C) 2003 jcoverage ltd. Copyright (C) 2009 John Lewis Copyright (C) 2005 Grzegorz Lukasik Copyright (C) 2006 Jiri Mares Copyright (C) 2009 Amit Nithianandan Copyright (C) 2005 Olivier Parent Copyright (C) 2009 Ed Randall Copyright (C) 2005 Alex Ruiz Copyright (C) 2005 James Seigel Copyright (C) 2005 Mark Sinke Copyright (C) 2010 Tad Smith Copyright (C) 2009 Charlie Squires Copyright (C) 2010 Piotr Tabor Copyright (C) 2005 Jeremy Thomerson Copyright (C) 2009 Chris van Es Copyright (C) 2006 Srivathsan Varadarajan Copyright (C) 2005 Nathan Wilson Copyright (C) 2005 Alexei Yudichev Copyright (C) 2013 Steven Christou MAVEN MIGRATION NOTES How do we get a good blame while all files were moved? Use ""git blame --follow"" nameOfFile.java CHANGELOG version 2.1.1, 2015-02-26: 62 Parse error on Java 1.7 combined exception 69 Branch coverage may exceed 100%, resulting in awkward HTML reports 104 Some tests fail on Windows due to incorrect Escape characters 111 Lexical error at line xxx, column xxx. 137 Incorrect (it seems) bat and SH files 166 Error when using Java 8 175 Cobertura 2.0.4 will create breaking changes to plugins 179 Instrumentation fails when there is no base directory 187 Error: Could not find or load main class net.sourceforge.cobertura.instrument.Main in Cobertura 2.0.3 190 Will Cobertura (or ASM) Support Java 7 with Correct Coverage? 201 Test failure in current 2.1.0-SNAPSHOT 202 Cobertura needs to update minimum Java requirement to Java 6 203 Cobertura needs an SLF4J binding in compile scope 204 Add a limited runtime project for Cobertura, like the one that was available in 2.0.3 206 Multiple tests fail when building with Java 6 213 Replace all usages of java.util.logging with SLF4J 229 ERROR - loadCoverageData version 2.0.3: * Fixed null version in reports. (Github Issue 37) * Added auxClasspath argument to fix ClassNotFoundException with ClassWriter.getCommonSuperClass. Thanks Hendrik Brummermann(nhnb) * Fixed parsing of anonymous classes. (Github Issue 53) * Fixed ClassCastException with JumpTouchPointDescriptor, SwitchTouchPointDescriptor and LineTouchPointDescriptor. * Fixed parsing for += in if-statement.  version 2.0.2: * Compiled code using source and target of java 5. * Fixed sensitive test units.  version 2.0.1: * Fix a problem that occurs if class version lower than 49.  version 2.0.0: * New --ignoreTrivial switch that tells Cobertura to ignore the    following in the coverage report: Getter methods that simply    read a class field; Setter methods that set a class field;   Constructors that only set class fields and call a super    class constructor.   (Patch 3010530 from 1576631) (Scott Frederick/Tad Smith) * New --ignoreMethodAnnotation switch used to specify an annotation that,    when present on a method, will cause Cobertura to ignore the    method in the coverage report.   (Patch 3010530) (Tad Smith)  version 1.9.4.1: * Fix a problem that occurs in Tomcat.   When TouchCollector    initializes, it calls ProjectData.initialize() which (with    Tomcat only) eventually calls TouchCollector.   However,    TouchCollector's static members have not been initialized.      Added a test that highlights this problem.   (Thanks to Jack Cobb   for suggesting the fix). * Runs on Java 5.  (Fix for Bug 2962599).  version 1.9.4: * Cobertura is now up to 10x faster. Aggregates changes in   temporary TouchCollector class (thread-safe, but lock-free) and after that   applies it on real model (ProjectData) as a batch operation. (Piotr Tabor) * Fixed ""Some packages are included more then once"" bug (#2875576) that   caused some counts on the HTML report to be incorrect.  (Charlie Squires) * Fixed ""Inner classes not counted in coverage report total"" bug (#2943320)   (Charlie Squires)  version 1.9.3: * Update to the latest Javancss (32.53) to fix some complexity calculation   problems.  Bug #2824425. (John Lewis) * Non-Java source files (like Groovy) no longer show the JavaNCSS warnings   during cobertura-report.  Fix of bug #2819844. * Support the case where multiple classloaders each load the Cobertura    classes.  (Ed Randall) * Fixed bug added with 1.9.2 where a NullPointerException is thrown   if ProjectData.saveGlobalProjectData() is called before any instrumented   code is executed.  version 1.9.2: * Cobertura is now thread safe. * Fix for FileLocker exception when writing coverage data    (java.lang.IllegalStateException: Shutdown in progress) that started   to appear with Java 6 update 14. (Chris van Es) * Fix for bug ""Unix scripts behave oddly due to DOS format - ID: 2788621""  version 1.9.1.1: * Just a copy of 1.9.1 with a corrected Maven POM file (cobertura-runtime.pom).   A new version has to be created to get it uploaded to the central Maven repo.  version 1.9.1: * Complexity calculation now works with Java 5 language   features such as Annotations. (Tri Bao Ho) * Removed the bold font from the source-view for uncovered lines to   improve the alignment.  (Jiri Mares) * Support Ant <dirset>s. (Matt Cordes, John Lewis) * Support the antlib mechanism for defining and importing    ant tasks. (Richard Atkins) * Reports now support source encoded in something than UTF-8. (Jiri Mares) * Report generation performance improvement. (Ignat Zapolsky) * Report generation will look in zip and jar files if the    source java file is not found. (Charlie Squires, John Lewis) * cobertura-check with linerate=0, branchrate=0,    packagebranchrate=0, packagelinerate=0, totalbranchrate=0,   totallinerate=0 will no longer default all the values to   50 as before.   Therefore, cobertura-check will always pass.   Note that this still means that <cobertura-check /> (with   no attributes) will still default to 50 for all rates. (Charlie   Squires) (Bug 2152919) * New coberturaFlush.war is created.   Deploy it to a    web server and invoke http://<HOST>:<PORT>/coberturaFlush/flushCobertura   for a convenient way of flushing the cobertura data to the   datafile without stopping the web server.  (Amit Nithianandan) * XML report now shows total lines-covered, lines-valid,    branches-covered, branches-valid, and complexity.  (Julian Gamble) * New report option called ""summaryXml"" will create   a small summary XML report that does not have all the   details on the classes - just the overall totals.  This   is for large projects where the full XML report gets so   big it impairs continuous build processes.  (Julian Gamble and Dan Godfrey) * Migrated from asm-2.2.1 to asm-3.0. (Jiri Mares) * The percentage coverage of 199 out of 200 lines has been 100%.    No more! Now it is 99%.  (Jiri Mares) * Spelling error corrected in main.css file - changed magin to   margin. (Dennis Lundberg)  version 1.9: * Much improved branch coverage.  Information on whether   the true as well as the false of an if statement is   collected.  Also, information on the branches of a   switch statement (including the default) is collected.   (Jiri Mares) * Assume Java source files are saved as UTF-8 instead of   the computer's default encoding. * Write all HTML and XML reports in UTF-8 instead of the   computer's default encoding (Naoki Iwami). * Fix a bug where the Cobertura ant tasks would not work   correctly in Microsoft Windows when Cobertura was   installed on a different drive than the drive from which   you're running ant (Srivathsan Varadarajan). * Added a ""maxmemory"" attribute to the instrument, merge   and report ant tasks (Matt Cordes). * Improve support for Maven and similar environments where   control over system properties is difficult such as   app servers, IoC containers, IDEs, etc.  Setting the   datafile location is difficult in these environments.   To correct this, a cobertura.properties file    located in the classpath is used to properly set the    net.sourceforge.cobertura.datafile property.     (Joakim Erdfelt)  version 1.8 (2006-04-10) * Ability to have multiple <ignore/> regular expressions   in the instrument task (Alexei Yudichev). * Ability to specify a minimum branch coverage rate and   line coverage rate for each package when using   cobertura-check. * Show the number of lines and branches covered and the   total number of lines and branches in the HTML report. * Support for instrumenting classes written in Groovy. * Lock the data file before trying to write to it.  This   allows multiple JVMs (or multiple class loaders within   a single JVM) to write to the same coverage data file   with no problems (John Lewis). * Ability to instrument classes on a given classpath   instead of specifying filesets (John Lewis). * Ability to specify which classes will be instrumented   using regular expressions (John Lewis). * Archives within archives will be instrumented if you   specify an includeClassname regular expression (John   Lewis). * If instrumenting an archive, remove any signatures   and checksums, since they will no longer be valid (John   Lewis). * Removed the Class-Path line from cobertura.jar.  You may   need to modify your Cobertura taskdef to include the jars   in Cobertura's 'lib' directory.  See our Ant task web   page for an example. * Reorganized libs into a flatter directory structure--you   may need to update your ant scripts. * Upgraded from asm 2.1 to asm 2.2.1.  No code changes were   needed. * Copied portions of classes from JavaNCSS into Cobertura   so that we don't need to include the entire JavaNCSS and   CCL jars.  version 1.7 (2005-12-06) * log4j is no longer used by the Cobertura classes that are   accessed by instrumented Java code.  This means you will   not need to add log4j to your project's classpath in order   to use Cobertura (but log4j is still required when   instrumenting and reporting). * Upgraded from asm 2.0 to asm 2.1.  No code changes were   needed. * Improved the merge task.  It should work correctly now   (with help from  Björn Beskow). * Fixed the ability to specify a data file in the merge task. * Changed the command-line interface to the merge task and   added a helper batch/shell script. * Added better error checking to the merge task. * Fixed a bug where an empty or incomplete coverage data   file would be written when you test classes inside Tomcat,   and you stop Tomcat using the shutdown.bat or shutdown.sh   scripts.  This would result in an EOFException when running   cobertura-report. * Added support for classes compiled with AspectJ. * Cobertura now produces valid XHTML 1.0 reports.  version 1.6 (2005-08-22) * Can now use multiple filesets in the cobertura-instrument   task (Thanks to Grzegorz Lukasik). * Can now use multiple filesets in the cobertura-report task   (Thanks to Jeremy Thomerson, Grzegorz Lukasik and James Seigel). * No longer using the Java version of GNU GetOpt * Fixed a bug where the total number of classes displayed in   the HTML report included anonymous classes when it should   not have.  version 1.5 (2005-08-05) * Shortened the header shown when running Cobertura (Thanks   to Jarkko Viinamäki). * Don't save the data file twice after instrumenting. * Print a warning when running cobertura-report with a   data file that does not contain information from the   instrument step. * When instrumenting, you can now specify a zip, jar, war,   ear or sar file and Cobertura will instrument any classes   inside of the archive.  You must explicity give the name   of the archive when instrumenting--giving the name of the   directory containing the archive will not work (Thanks to   Grzegorz Lukasik). * Fixed a bug where the class list in the HTML reports did   not show multiple classes with the same name, but in   different packages. * Add a timestamp and version number to all HTML reports. * Add a timestamp and version number to all XML reports. * Add the combined line-rate and branch-rate for all   packages to all XML reports. * Fixed the merge task (Thanks to Mark Sinke). * The check task now supports checking against a project's   total branch and line coverage rates (Thanks to Nathan   Wilson). * The check ant task now allows you to fail the ant build,   if desired (Thanks to Nathan Wilson). * The check task can set an ant property to ""true"" on   failure (Thanks to Alex Ruiz). * Changed some of the parameters for the check task.  See   the online documentation for usage information. * The command line Windows batch scripts work better.  version 1.4 (2005-05-30) * Fixed a bug that sometimes resulted in a   StringIndexOutOfBoundsException when running cobertura-report   (Thanks to Grzegorz Lukasik). * Fixed a bug where classes without coverage data (""N/A"") were   not always sorted correctly in the HTML report (Thanks to   Olivier Parent). * Fixed a bug where the code complexity column would not always   sort correctly in locales that use a comma to split the decimal   part of the number (Thanks to Olivier Parent). * Show ""N/A"" in the branch column of the HTML report for classes   and packages that do not have any branches.  version 1.3 (2005-05-20) * Increased speed of HTML reports by filtering the files read   in to determine cyclomatic complexity numbers on. * In the lower left pane of the HTML reports, classes are now   sorted only by their class name (instead of by their package   name plus class name). * Changed the format of the XML reports to something that   is hopefully easier to use and more natural.  This   unfortunately breaks backward compatability. * We're using a DTD for the XML reports now.  See   http://cobertura.sourceforge.net/xml/coverage-01.dtd * Added the ability to specify the location of the coverage   data files from the ant tasks and the command line. * More user-friendly error checking and reporting.  version 1.2 (2005-03-16) * Fix a bug that caused the XML reports to be invalid XML   (they were missing the </package> tag). * Use Java 1.4 pattern matching and remove Jakarta ORO.  version 1.1 (2005-03-08) * Fix a bug in the syntax highlighting code of the HTML report   generation.  Previously, the highlighting for single quotes   containing ""\\"" would not end correctly. * Check the third party jars into CVS using the correct CVS   substition flag (binary, not ASCII). * Temporary files created by the instrument ant task and merge   ant task are now deleted after the ant task finishes. * Switch the instrumentation classes to use ASM instead of   Apache BCEL.  There are three benefits to this:   1. BCEL was throwing exceptions with some source code compiled      with JDK 1.5--ASM works fine.   2. ASM is licensed under the revised BSD license, which      is compatable with the GPL, which allows us to remove      the questionable exception for BCEL.   3. Instrumentation is about 5 times faster with ASM than BCEL. * Modify the HTML reports so that classes without line number   information will appear as ""Not Applicable.""  This includes   skeleton classes, stub classes, interfaces, or anything not   compiled with debug=true. * Fix bug #1151777 with a patch from Jeremy Thomerson.   Previously we were not escaping some characters correctly in the   generated XML coverage report (specificially < and >). * Set the class-path in the cobertura.jar manifest file correctly. * Fill feature request #1151779 with a patch from Jeremy Thomerson.   This changes the structure of the XML report so that <classes> are   enclosed inside <packages>.  version 1.0 (2005-02-12) * Forked jcoverage 1.0.5 (although the version in the source says 1.0.4).   All original code is copyright 2003 jcoverage ltd.  Kurt Guenther   highlighted a bug in the branch coverage, was was fixed. * Applied a patch from Joakim Erdfelt to fix a bug where jcoverage   would fail to instrument classes if you attempted to instrument a   very large number of classes (in the hundreds). * Rewrote the HTML reporting and included code complexity in the output.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cobertura/cobertura"	"Relies on offline (or static) bytecode instrumentation and class loading to collect code coverage metrics; GPLv2 licensed."	"true"
"Code Coverage"	"JaCoCo"	"http://eclemma.org/jacoco/"	"Framework that enables collection of code coverage metrics, using both offline and runtime bytecode instrumentation; prominently used by EclEmma, the Eclipse code-coverage plugin."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"2"	"2"	"GitHub - jacoco/www.eclemma.org: source files for construction of website Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 4 Fork 2 jacoco/www.eclemma.org Code Pull requests 0 Pulse Graphs 📄 source files for construction of website 323 commits 2 branches 0 releases Fetching contributors Python 70.0% HTML 28.1% CSS 1.2% Shell 0.7% Python HTML CSS Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master relative-paths Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. content generator templates .gitignore .project .travis.sh .travis.yml README.md updatesite.sh README.md Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jacoco/www.eclemma.org"	"Framework that enables collection of code coverage metrics, using both offline and runtime bytecode instrumentation; prominently used by EclEmma, the Eclipse code-coverage plugin."	"true"
"Command-line Argument Parsers"	"args4j"	"http://args4j.kohsuke.org/"	"Small library to parse command like arguments similar to javac."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"424"	"33"	"122"	"GitHub - kohsuke/args4j: args4j Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 33 Star 424 Fork 122 kohsuke/args4j Code Issues 33 Pull requests 8 Wiki Pulse Graphs args4j http://args4j.kohsuke.org/ 617 commits 2 branches 31 releases 26 contributors Java 98.1% HTML 1.2% Other 0.7% Java HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show args4j-site-2.33 args4j-site-2.32 args4j-site-2.0.31 args4j-site-2.0.30 args4j-site-2.0.29 args4j-site-2.0.28 args4j-site-2.0.27 args4j-site-2.0.26 args4j-site-2.0.25 args4j-site-2.0.24 args4j-site-2.0.23 args4j-site-2.0.22 args4j-site-2.0.21 args4j-site-2.0.20 args4j-site-2.0.19 args4j-site-2.0.18 args4j-site-2.0.17 args4j-2.0.16 args4j-2.0.15 args4j-2.0.14 args4j-2.0.13 args4j-2.0.12 args4j-2.0.11 args4j-2.0.10 args4j-2.0.9 args4j-2.0.8 args4j-2.0.7 args4j-2.0.6 args4j-2.0.5 args4j-2.0.4 args4j-2.0.3 Nothing to show New pull request Latest commit b1b2d13 Mar 18, 2016 kohsuke Merge pull request #125 from mrkozmic/patch-1 … Bugfix: forbids() should return forbids, not depends Permalink Failed to load latest commit information. .settings 1st line wrapping: split hard on character position (than on words) Jun 19, 2008 args4j-maven-plugin-example [maven-release-plugin] prepare for next development iteration Jan 31, 2016 args4j-maven-plugin [maven-release-plugin] prepare for next development iteration Jan 31, 2016 args4j-tools [maven-release-plugin] prepare for next development iteration Jan 31, 2016 args4j Merge pull request #125 from mrkozmic/patch-1 Mar 18, 2016 src/site Fixed links Mar 22, 2015 xdocs New MetadataParser (FieldParser) which makes all Fields available by … Sep 5, 2009 .classpath Revert ""#41 Possibility to exclude Options if other option is present"" May 3, 2014 .gitignore Ignore IDE files Oct 29, 2015 LICENSE Add LICENSE file Nov 26, 2013 README.md Fixed links Mar 23, 2015 pom.xml [maven-release-plugin] prepare for next development iteration Jan 31, 2016 release.sh Remove the old Maven 1 build Jan 16, 2014 README.md args4j args4j is a small Java class library that makes it easy to parse command line options/arguments in your CUI application. See more info at [http://args4j.kohsuke.org/] Why should I use it? See the quick intro It makes command line parsing very easy by using annotations Generate usage text very easily Generate HTML/XML documentation listing all options Full localization support Designed to parse javac like options, as opposed to GNU-style (where ls -lR is considered to have two options l and R). Licensed under the MIT license. How can I use it? Check the sample. This is how your code will look like. Download the distribution or include the library from the Maven Repository. Write your code. More Resources A small tutorial for the use of the Starter and Args4J javadoc How to generate a documentation for your CLI Extend args4j to handle other Java types Kohsuke's Blog: Parsing command line options in JDK 5.0 style A comparison between Commons CLI and Args4j in French Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kohsuke/args4j"	"Small library to parse command like arguments similar to javac."	"true"
"Command-line Argument Parsers"	"JCommander"	"http://jcommander.org/"	"Command line arguments parsing framework with custom types and validation via implementing interfaces."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"678"	"54"	"149"	"GitHub - cbeust/jcommander: Command line parsing framework for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 54 Star 678 Fork 149 cbeust/jcommander Code Issues 78 Pull requests 23 Pulse Graphs Command line parsing framework for Java 658 commits 1 branch 40 releases Fetching contributors Java 99.8% Other 0.2% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show jcommander-1.48 jcommander-1.47 jcommander-1.46 jcommander-1.45 jcommander-1.44 jcommander-1.42 jcommander-1.39 jcommander-1.37 jcommander-1.35 jcommander-1.34 jcommander-1.32 jcommander-1.30 jcommander-1.29 jcommander-1.28 jcommander-1.27 jcommander-1.26 jcommander-1.25 jcommander-1.23 jcommander-1.22 jcommander-1.21 jcommander-1.20 jcommander-1.19 jcommander-1.18 jcommander-1.17 jcommander-1.16 jcommander-1.15 jcommander-1.13 jcommander-1.12 jcommander-1.11 jcommander-1.10 jcommander-1.9 jcommander-1.8 jcommander-1.7 jcommander-1.6 jcommander-1.5 jcommander-1.4 jcommander-1.3 jcommander-1.2 jcommander-1.1 1.1 Nothing to show New pull request Latest commit a5b57c2 Jun 22, 2016 cbeust Update Kobalt Permalink Failed to load latest commit information. doc Clarify validation Jun 22, 2016 gradle Gradle 2.3. Jul 9, 2015 kobalt Update Kobalt Jun 22, 2016 src Streamline the getDescriptionFor method Apr 14, 2016 .gitignore .gitignore. Feb 28, 2016 .travis.yml JDK 8 Jun 22, 2016 CHANGELOG Better error message when there's a visibility problem. Apr 18, 2015 README.markdown Fix link Nov 5, 2015 build-with-maven Fix build script. Apr 18, 2015 build.gradle TestNG 6.9.4. Aug 23, 2015 gradlew +x flag for gradlew May 1, 2015 kobaltw Update kobalt Nov 18, 2015 license.txt Updated license Jan 13, 2012 notice.md Updated the pom Aug 5, 2010 pom.xml Enable Java 7 build Jan 21, 2016 release Changed profile name to 'sign' Sep 6, 2010 upload 1.27 Jul 5, 2012 README.markdown JCommander This is an annotation based parameter parsing framework for Java. Here is a quick example: public class JCommanderTest {     @Parameter     public List<String> parameters = Lists.newArrayList();      @Parameter(names = { ""-log"", ""-verbose"" }, description = ""Level of verbosity"")     public Integer verbose = 1;      @Parameter(names = ""-groups"", description = ""Comma-separated list of group names to be run"")     public String groups;      @Parameter(names = ""-debug"", description = ""Debug mode"")     public boolean debug = false;      @DynamicParameter(names = ""-D"", description = ""Dynamic parameters go here"")     public Map<String, String> dynamicParams = new HashMap<String, String>();  } and how you use it: JCommanderTest jct = new JCommanderTest(); String[] argv = { ""-log"", ""2"", ""-groups"", ""unit1,unit2,unit3"",                     ""-debug"", ""-Doption=value"", ""a"", ""b"", ""c"" }; new JCommander(jct, argv);  Assert.assertEquals(2, jct.verbose.intValue()); Assert.assertEquals(""unit1,unit2,unit3"", jct.groups); Assert.assertEquals(true, jct.debug); Assert.assertEquals(""value"", jct.dynamicParams.get(""option"")); Assert.assertEquals(Arrays.asList(""a"", ""b"", ""c""), jct.parameters); The full doc is available at http://jcommander.org. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cbeust/jcommander"	"Command line arguments parsing framework with custom types and validation via implementing interfaces."	"true"
"Command-line Argument Parsers"	"JOpt Simple"	"http://pholser.github.io/jopt-simple/"	"Simple parser that uses the POSIX getopt() and GNU getopt_long() syntaxes. Does not use annotations, uses a fluent API instead."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JOpt Simple - a Java command line parsing library - JOpt Simple Last Published: 2016-06-08  | Version: 5.0.2 JOpt Simple Overview Download Examples Change Log Javadoc Developer Docs Acknowledgements Project Documentation Project Information Dependencies Dependency Convergence Dependency Information Distribution Management About Issue Tracking Project License Plugin Management Project Plugins Project Team Source Repository Project Summary Project Reports JOpt Simple is a Java library for parsing command line options, such as those you might pass to an invocation of javac. In the interest of striving for simplicity, as closely as possible JOpt Simple attempts to honor the command line option syntaxes of POSIX getopt() and GNU getopt_long(). It also aims to make option parser configuration and retrieval of options and their arguments simple and expressive, without being overly clever. Here are some libraries that perform the same duties as JOpt Simple: JArgs Jakarta Commons CLI TE-Code has a command line parsing library. argparser Java port of GNU getopt Args4J JSAP CLAJR CmdLn JewelCli JCommando parse-cmd JCommander plume-lib Options I hope you'll agree that JOpt Simple tops them all in ease of use and cleanliness of code (although I admire JewelCli quite a bit). I'd love to hear your constructive feedback, especially suggestions for improvements to the library or the site! If your project is using JOpt Simple, do let me know. Projects Using JOpt Simple Here are some we know of or have known of: OpenJDK. From Mark Reinhold: ""I thought you might be interested to know that we're using your jopt-simple library in the open-source Java Development Kit. Thanks for writing such a nice little library! It's far cleaner than any of the other alternatives out there."" Gradle NATBraille Minecraft Copyright © 2016. All Rights Reserved."	"null"	"https://github.com/jopt-simple/"	"Simple parser that uses the POSIX getopt() and GNU getopt_long() syntaxes. Does not use annotations, uses a fluent API instead."	"true"
"Compiler-compiler"	"ANTLR"	"http://www.antlr.org/"	"Complex full-featured framework for top-down parsing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1535"	"181"	"457"	"GitHub - antlr/antlr4: ANTLR (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 181 Star 1,535 Fork 457 antlr/antlr4 Code Issues 189 Pull requests 23 Wiki Pulse Graphs ANTLR (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. http://antlr.org 4,642 commits 1 branch 21 releases 57 contributors Java 61.7% C# 15.8% Python 15.3% JavaScript 5.0% GAP 1.2% ANTLR 0.8% Other 0.2% Java C# Python JavaScript GAP ANTLR Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show antlr4-master-4.5.3 antlr-4.0b3 antlr-4.0b2 antlr-4.0b1 4.5.3 4.5.2 4.5.1 4.5.1-beta-1 4.5.1-1 4.5 4.5-rc-2 4.5-rc-1 4.4 4.3 4.2.2 4.2.1 4.2 4.2-SNAPSHOT 4.1 4.0 4.0-rc-1 Nothing to show New pull request Latest commit 47e268d Jun 23, 2016 parrt committed on GitHub Merge pull request #1218 from ericvergnaud/python-performance-issue … Python performance issue Permalink Failed to load latest commit information. antlr4-maven-plugin [maven-release-plugin] prepare for next development iteration Mar 30, 2016 build update version so 4.5.1 tests/builds May 18, 2015 doc Update releasing-antlr.md Mar 30, 2016 runtime-testsuite [maven-release-plugin] prepare for next development iteration Mar 30, 2016 runtime Fix #1217 Jun 23, 2016 tool-testsuite [maven-release-plugin] prepare for next development iteration Mar 30, 2016 tool remove unwanted semicolon in generated Python code Jun 23, 2016 .gitignore add index of faq Oct 27, 2015 .travis.yml back out change to python versions in travis Mar 30, 2016 CHANGES.txt Update CHANGES.txt Mar 25, 2014 LICENSE.txt set versions to 4.5 Jan 10, 2015 README.md add travis status Jan 29, 2016 contributors.txt add get max token type to vocab. Mar 29, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Mar 30, 2016 README.md ANTLR v4 ANTLR (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It's widely used to build languages, tools, and frameworks. From a grammar, ANTLR generates a parser that can build parse trees and also generates a listener interface (or visitor) that makes it easy to respond to the recognition of phrases of interest. Given day-job constraints, my time working on this project is limited so I'll have to focus first on fixing bugs rather than changing/improving the feature set. Likely I'll do it in bursts every few months. Please do not be offended if your bug or pull request does not yield a response! --parrt Authors and major contributors Terence Parr, parrt@cs.usfca.edu ANTLR project lead and supreme dictator for life University of San Francisco Sam Harwell (Tool co-author, Java and C# target) Eric Vergnaud (Javascript, Python2, Python3 targets and significant work on C# target) Useful information Release notes Getting started with v4 Official site Documentation FAQ API ANTLR v3 v3 to v4 Migration, differences You might also find the following pages useful, particularly if you want to mess around with the various target languages. How to build ANTLR itself How we create and deploy an ANTLR release The Definitive ANTLR 4 Reference Programmers run into parsing problems all the time. Whether it’s a data format like JSON, a network protocol like SMTP, a server configuration file for Apache, a PostScript/PDF file, or a simple spreadsheet macro language—ANTLR v4 and this book will demystify the process. ANTLR v4 has been rewritten from scratch to make it easier than ever to build parsers and the language applications built on top. This completely rewritten new edition of the bestselling Definitive ANTLR Reference shows you how to take advantage of these new features. You can buy the book The Definitive ANTLR 4 Reference at amazon or an electronic version at the publisher's site. You will find the Book source code useful. Additional grammars This repository is a collection of grammars without actions where the root directory name is the all-lowercase name of the language parsed by the grammar. For example, java, cpp, csharp, c, etc... Travis Status Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/antlr/antlr4"	"Complex full-featured framework for top-down parsing."	"true"
"Configuration"	"config"	"https://github.com/typesafehub/config"	"Configuration library for JVM languages."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2048"	"137"	"320"	"GitHub - typesafehub/config: Configuration library for JVM languages Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 137 Star 2,048 Fork 320 typesafehub/config Code Issues 74 Pull requests 7 Pulse Graphs Configuration library for JVM languages http://typesafe.com 809 commits 8 branches 24 releases 32 contributors Java 61.8% Scala 37.7% HTML 0.5% Java Scala HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3.x 1.0.x gh-pages issue-190 list-of-beans master or-null-getters wip/bad-map Nothing to show v1.3.0 v1.3.0-M3 v1.3.0-M2 v1.3.0-M1 v1.2.1 v1.2.0 v1.0.2 v1.0.0 v0.6.0 v0.5.2 v0.5.0 v0.4.1 v0.4.0 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 Nothing to show New pull request Latest commit 3639c64 Jul 4, 2016 havocp committed on GitHub Merge pull request #407 from FeiWongReed/master … issue #405 fixed: config loading strategy implemented Permalink Failed to load latest commit information. config minor fix Jul 4, 2016 examples Delete empty build.sbt files. Jan 26, 2015 project Update sbt-checkstyle-plugin version to 3.0.0 Apr 4, 2016 test-lib/src/test/resources Delete empty build.sbt files. Jan 26, 2015 .gitignore Organize README and add doctoc table of contents May 2, 2014 .travis.yml Use same sbt command line for test and doc Mar 6, 2015 CONTRIBUTING.md Add CONTRIBUTING.md with release instructions May 5, 2015 HOCON.md Update doctoc for README.md and add doctoc to HOCON.md Mar 7, 2015 LICENSE-2.0.txt Add a real README, license, and rewrite spec. Nov 15, 2011 NEWS.md Update news/readme for 1.3.0 May 8, 2015 README.md Merge pull request #394 from mig-foxbat/master May 16, 2016 build.sbt Update sbt-pgp version to 1.0.0 Apr 4, 2016 README.md Configuration library for JVM languages. If you have questions or are working on a pull request or just curious, please feel welcome to join the chat room: Overview implemented in plain Java with no dependencies supports files in three formats: Java properties, JSON, and a human-friendly JSON superset merges multiple files across all formats can load from files, URLs, or classpath good support for ""nesting"" (treat any subtree of the config the same as the whole config) users can override the config with Java system properties, java -Dmyapp.foo.bar=10 supports configuring an app, with its framework and libraries, all from a single file such as application.conf parses duration and size settings, ""512k"" or ""10 seconds"" converts types, so if you ask for a boolean and the value is the string ""yes"", or you ask for a float and the value is an int, it will figure it out. JSON superset features: comments includes substitutions (""foo"" : ${bar}, ""foo"" : Hello ${who}) properties-like notation (a.b=c) less noisy, more lenient syntax substitute environment variables (logdir=${HOME}/logs) API based on immutable Config instances, for thread safety and easy reasoning about config transformations extensive test coverage This library limits itself to config files. If you want to load config from a database or something, you would need to write some custom code. The library has nice support for merging configurations so if you build one from a custom source it's easy to merge it in. Table of Contents generated with DocToc Essential Information License Binary Releases Release Notes API docs Bugs and Patches Build Using the Library API Example Longer Examples Immutability Schemas and Validation Standard behavior Note about resolving substitutions in reference.conf and application.conf Merging config trees How to handle defaults Understanding Config and ConfigObject ConfigBeanFactory Using HOCON, the JSON Superset Features of HOCON Examples of HOCON Uses of Substitutions Factor out common values Inheritance Optional system or env variable overrides Concatenation reference.conf can't refer to application.conf Miscellaneous Notes Debugging Your Configuration Supports Java 8 and Later Rationale for Supported File Formats Other APIs (Wrappers and Ports) Scala wrappers for the Java library Clojure wrappers for the Java library Ruby port Puppet module Python port C++ port Essential Information License The license is Apache 2.0, see LICENSE-2.0.txt. Binary Releases Version 1.2.1 and earlier were built for Java 6, while newer versions (1.3.0 and above) will be built for Java 8. You can find published releases on Maven Central. <dependency>     <groupId>com.typesafe</groupId>     <artifactId>config</artifactId>     <version>1.3.0</version> </dependency>  sbt dependency: libraryDependencies += ""com.typesafe"" % ""config"" % ""1.3.0""  Link for direct download if you don't use a dependency manager: http://central.maven.org/maven2/com/typesafe/config/ Release Notes Please see NEWS.md in this directory, https://github.com/typesafehub/config/blob/master/NEWS.md API docs Online: http://typesafehub.github.com/config/latest/api/ also published in jar form consider reading this README first for an intro for questions about the .conf file format, read HOCON.md in this directory Bugs and Patches Report bugs to the GitHub issue tracker. Send patches as pull requests on GitHub. Before we can accept pull requests, you will need to agree to the Typesafe Contributor License Agreement online, using your GitHub account - it takes 30 seconds. You can do this at http://www.typesafe.com/contribute/cla Please see CONTRIBUTING for more including how to make a release. Build The build uses sbt and the tests are written in Scala; however, the library itself is plain Java and the published jar has no Scala dependency. Using the Library API Example import com.typesafe.config.ConfigFactory  Config conf = ConfigFactory.load(); int bar1 = conf.getInt(""foo.bar""); Config foo = conf.getConfig(""foo""); int bar2 = foo.getInt(""bar"");  Longer Examples See the examples in the examples/ directory. You can run these from the sbt console with the commands project config-simple-app-java and then run. In brief, as shown in the examples: libraries should use a Config instance provided by the app, if any, and use ConfigFactory.load() if no special Config is provided. Libraries should put their defaults in a reference.conf on the classpath. apps can create a Config however they want (ConfigFactory.load() is easiest and least-surprising), then provide it to their libraries. A Config can be created with the parser methods in ConfigFactory or built up from any file format or data source you like with the methods in ConfigValueFactory. Immutability Objects are immutable, so methods on Config which transform the configuration return a new Config. Other types such as ConfigParseOptions, ConfigResolveOptions, ConfigObject, etc. are also immutable. See the API docs for details of course. Schemas and Validation There isn't a schema language or anything like that. However, two suggested tools are: use the checkValid() method access your config through a Settings class with a field for each setting, and instantiate it on startup (immediately throwing an exception if any settings are missing) In Scala, a Settings class might look like: class Settings(config: Config) {      // validate vs. reference.conf     config.checkValid(ConfigFactory.defaultReference(), ""simple-lib"")      // non-lazy fields, we want all exceptions at construct time     val foo = config.getString(""simple-lib.foo"")     val bar = config.getInt(""simple-lib.bar"") }  See the examples/ directory for a full compilable program using this pattern. Standard behavior The convenience method ConfigFactory.load() loads the following (first-listed are higher priority): system properties application.conf (all resources on classpath with this name) application.json (all resources on classpath with this name) application.properties (all resources on classpath with this name) reference.conf (all resources on classpath with this name) The idea is that libraries and frameworks should ship with a reference.conf in their jar. Applications should provide an application.conf, or if they want to create multiple configurations in a single JVM, they could use ConfigFactory.load(""myapp"") to load their own myapp.conf. (Applications can provide a reference.conf also if they want, but you may not find it necessary to separate it from application.conf.) Libraries and frameworks should default to ConfigFactory.load() if the application does not provide a custom Config object. This way, libraries will see configuration from application.conf and users can configure the whole app, with its libraries, in a single application.conf file. Libraries and frameworks should also allow the application to provide a custom Config object to be used instead of the default, in case the application needs multiple configurations in one JVM or wants to load extra config files from somewhere. The library examples in examples/ show how to accept a custom config while defaulting to ConfigFactory.load(). For applications using application.{conf,json,properties}, system properties can be used to force a different config source: config.resource specifies a resource name - not a basename, i.e. application.conf not application config.file specifies a filesystem path, again it should include the extension, not be a basename config.url specifies a URL These system properties specify a replacement for application.{conf,json,properties}, not an addition. They only affect apps using the default ConfigFactory.load() configuration. In the replacement config file, you can use include ""application"" to include the original default config file; after the include statement you could go on to override certain settings. If you set config.resource, config.file, or config.url on-the-fly from inside your program (for example with System.setProperty()), be aware that ConfigFactory has some internal caches and may not see new values for system properties. Use ConfigFactory.invalidateCaches() to force-reload system properties. Note about resolving substitutions in reference.conf and application.conf The substitution syntax ${foo.bar} will be resolved twice. First, all the reference.conf files are merged and then the result gets resolved. Second, all the application.conf are layered over the reference.conf and the result of that gets resolved again. The implication of this is that the reference.conf stack has to be self-contained; you can't leave an undefined value ${foo.bar} to be provided by application.conf, or refer to ${foo.bar} in a way that you want to allow application.conf to override. However, application.conf can refer to a ${foo.bar} in reference.conf. This can be frustrating at times, but possible workarounds include: putting an application.conf in a library jar, alongside the reference.conf, with values intended for later resolution. putting some logic in code instead of building up values in the config itself. Merging config trees Any two Config objects can be merged with an associative operation called withFallback, like merged = firstConfig.withFallback(secondConfig). The withFallback operation is used inside the library to merge duplicate keys in the same file and to merge multiple files. ConfigFactory.load() uses it to stack system properties over application.conf over reference.conf. You can also use withFallback to merge in some hardcoded values, or to ""lift"" a subtree up to the root of the configuration; say you have something like: foo=42 dev.foo=57 prod.foo=10  Then you could code something like: Config devConfig = originalConfig                      .getConfig(""dev"")                      .withFallback(originalConfig)  There are lots of ways to use withFallback. How to handle defaults Many other configuration APIs allow you to provide a default to the getter methods, like this: boolean getBoolean(String path, boolean fallback)  Here, if the path has no setting, the fallback would be returned. An API could also return null for unset values, so you would check for null: // returns null on unset, check for null and fall back Boolean getBoolean(String path)  The methods on the Config interface do NOT do this, for two major reasons: If you use a config setting in two places, the default fallback value gets cut-and-pasted and typically out of sync. This can result in Very Evil Bugs. If the getter returns null (or None, in Scala) then every time you get a setting you have to write handling code for null/None and that code will almost always just throw an exception. Perhaps more commonly, people forget to check for null at all, so missing settings result in NullPointerException. For most situations, failure to have a setting is simply a bug to fix (in either code or the deployment environment). Therefore, if a setting is unset, by default the getters on the Config interface throw an exception. If you want to allow a setting to be missing from application.conf in a particular case, then here are some options: Set it in a reference.conf included in your library or application jar, so there's a default value. Use the Config.hasPath() method to check in advance whether the path exists (rather than checking for null/None after as you might in other APIs). Catch and handle ConfigException.Missing. NOTE: using an exception for control flow like this is much slower than using Config.hasPath(); the JVM has to do a lot of work to throw an exception. In your initialization code, generate a Config with your defaults in it (using something like ConfigFactory.parseMap()) then fold that default config into your loaded config using withFallback(), and use the combined config in your program. ""Inlining"" your reference config in the code like this is probably less convenient than using a reference.conf file, but there may be reasons to do it. Use Config.root() to get the ConfigObject for the Config; ConfigObject implements java.util.Map<String,?> and the get() method on Map returns null for missing keys. See the API docs for more detail on Config vs. ConfigObject. Set the setting to null in reference.conf, then use Config.getIsNull and Config.hasPathOrNull to handle null in a special way while still throwing an exception if the setting is entirely absent. The recommended path (for most cases, in most apps) is that you require all settings to be present in either reference.conf or application.conf and allow ConfigException.Missing to be thrown if they are not. That's the design intent of the Config API design. Consider the ""Settings class"" pattern with checkValid() to verify that you have all settings when you initialize the app. See the Schemas and Validation section of this README for more details on this pattern. If you do need a setting to be optional: checking hasPath() in advance should be the same amount of code (in Java) as checking for null afterward, without the risk of NullPointerException when you forget. In Scala, you could write an enrichment class like this to use the idiomatic Option syntax: implicit class RichConfig(val underlying: Config) extends AnyVal {   def getOptionalBoolean(path: String): Option[Boolean] = if (underlying.hasPath(path)) {      Some(underlying.getBoolean(path))   } else {      None   } } Since this library is a Java library it doesn't come with that out of the box, of course. It is understood that sometimes defaults in code make sense. For example, if your configuration lets users invent new sections, you may not have all paths up front and may be unable to set up defaults in reference.conf for dynamic paths. The design intent of Config isn't to prohibit inline defaults, but simply to recognize that it seems to be the 10% case (rather than the 90% case). Even in cases where dynamic defaults are needed, you may find that using withFallback() to build a complete nothing-missing Config in one central place in your code keeps things tidy. Whatever you do, please remember not to cut-and-paste default values into multiple places in your code. You have been warned! :-) Understanding Config and ConfigObject To read and modify configuration, you'll use the Config interface. A Config looks at a JSON-equivalent data structure as a one-level map from paths to values. So if your JSON looks like this:   ""foo"" : {     ""bar"" : 42     ""baz"" : 43   }  Using the Config interface, you could write conf.getInt(""foo.bar""). The foo.bar string is called a path expression (HOCON.md has the syntax details for these expressions). Iterating over this Config, you would get two entries; ""foo.bar"" : 42 and ""foo.baz"" : 43. When iterating a Config you will not find nested Config (because everything gets flattened into one level). When looking at a JSON tree as a Config, null values are treated as if they were missing. Iterating over a Config will skip null values. You can also look at a Config in the way most JSON APIs would, through the ConfigObject interface. This interface represents an object node in the JSON tree. ConfigObject instances come in multi-level trees, and the keys do not have any syntax (they are just strings, not path expressions). Iterating over the above example as a ConfigObject, you would get one entry ""foo"" : { ""bar"" : 42, ""baz"" : 43 }, where the value at ""foo"" is another nested ConfigObject. In ConfigObject, null values are visible (distinct from missing values), just as they are in JSON. ConfigObject is a subtype of ConfigValue, where the other subtypes are the other JSON types (list, string, number, boolean, null). Config and ConfigObject are two ways to look at the same internal data structure, and you can convert between them for free using Config.root() and ConfigObject.toConfig(). ConfigBeanFactory As of version 1.3.0, if you have a Java object that follows JavaBean conventions (zero-args constructor, getters and setters), you can automatically initialize it from a Config. Use ConfigBeanFactory.create(config.getConfig(""subtree-that-matches-bean""), MyBean.class) to do this. Creating a bean from a Config automatically validates that the config matches the bean's implied schema. Bean fields can be primitive types, typed lists such as List<Integer>, java.time.Duration, ConfigMemorySize, or even a raw Config, ConfigObject, or ConfigValue (if you'd like to deal with a particular value manually). Using HOCON, the JSON Superset The JSON superset is called ""Human-Optimized Config Object Notation"" or HOCON, and files use the suffix .conf. See HOCON.md in this directory for more detail. After processing a .conf file, the result is always just a JSON tree that you could have written (less conveniently) in JSON. Features of HOCON Comments, with # or // Allow omitting the {} around a root object Allow = as a synonym for : Allow omitting the = or : before a { so foo { a : 42 } Allow omitting commas as long as there's a newline Allow trailing commas after last element in objects and arrays Allow unquoted strings for keys and values Unquoted keys can use dot-notation for nested objects, foo.bar=42 means foo { bar : 42 } Duplicate keys are allowed; later values override earlier, except for object-valued keys where the two objects are merged recursively include feature merges root object in another file into current object, so foo { include ""bar.json"" } merges keys in bar.json into the object foo include with no file extension includes any of .conf, .json, .properties you can include files, URLs, or classpath resources; use include url(""http://example.com"") or file() or classpath() syntax to force the type, or use just include ""whatever"" to have the library do what you probably mean (Note: url()/file()/classpath() syntax is not supported in Play/Akka 2.0, only in later releases.) substitutions foo : ${a.b} sets key foo to the same value as the b field in the a object substitutions concatenate into unquoted strings, foo : the quick ${colors.fox} jumped substitutions fall back to environment variables if they don't resolve in the config itself, so ${HOME} would work as you expect. Also, most configs have system properties merged in so you could use ${user.home}. substitutions normally cause an error if unresolved, but there is a syntax ${?a.b} to permit them to be missing. += syntax to append elements to arrays, path += ""/bin"" multi-line strings with triple quotes as in Python or Scala Examples of HOCON All of these are valid HOCON. Start with valid JSON: {     ""foo"" : {         ""bar"" : 10,         ""baz"" : 12     } }  Drop root braces: ""foo"" : {     ""bar"" : 10,     ""baz"" : 12 }  Drop quotes: foo : {     bar : 10,     baz : 12 }  Use = and omit it before {: foo {     bar = 10,     baz = 12 }  Remove commas: foo {     bar = 10     baz = 12 }  Use dotted notation for unquoted keys: foo.bar=10 foo.baz=12  Put the dotted-notation fields on a single line: foo.bar=10, foo.baz=12  The syntax is well-defined (including handling of whitespace and escaping). But it handles many reasonable ways you might want to format the file. Note that while you can write HOCON that looks a lot like a Java properties file (and many properties files will parse as HOCON), the details of escaping, whitespace handling, comments, and so forth are more like JSON. The spec (see HOCON.md in this directory) has some more detailed notes on this topic. Uses of Substitutions The ${foo.bar} substitution feature lets you avoid cut-and-paste in some nice ways. Factor out common values This is the obvious use, standard-timeout = 10ms foo.timeout = ${standard-timeout} bar.timeout = ${standard-timeout}  Inheritance If you duplicate a field with an object value, then the objects are merged with last-one-wins. So: foo = { a : 42, c : 5 } foo = { b : 43, c : 6 }  means the same as: foo = { a : 42, b : 43, c : 6 }  You can take advantage of this for ""inheritance"": data-center-generic = { cluster-size = 6 } data-center-east = ${data-center-generic} data-center-east = { name = ""east"" } data-center-west = ${data-center-generic} data-center-west = { name = ""west"", cluster-size = 8 }  Using include statements you could split this across multiple files, too. If you put two objects next to each other (close brace of the first on the same line with open brace of the second), they are merged, so a shorter way to write the above ""inheritance"" example would be: data-center-generic = { cluster-size = 6 } data-center-east = ${data-center-generic} { name = ""east"" } data-center-west = ${data-center-generic} { name = ""west"", cluster-size = 8 }  Optional system or env variable overrides In default uses of the library, exact-match system properties already override the corresponding config properties. However, you can add your own overrides, or allow environment variables to override, using the ${?foo} substitution syntax. basedir = ""/whatever/whatever"" basedir = ${?FORCED_BASEDIR}  Here, the override field basedir = ${?FORCED_BASEDIR} simply vanishes if there's no value for FORCED_BASEDIR, but if you set an environment variable FORCED_BASEDIR for example, it would be used. A natural extension of this idea is to support several different environment variable names or system property names, if you aren't sure which one will exist in the target environment. Object fields and array elements with a ${?foo} substitution value just disappear if the substitution is not found: // this array could have one or two elements path = [ ""a"", ${?OPTIONAL_A} ]  Concatenation Values on the same line are concatenated (for strings and arrays) or merged (for objects). This is why unquoted strings work, here the number 42 and the string foo are concatenated into a string 42 foo: key : 42 foo  When concatenating values into a string, leading and trailing whitespace is stripped but whitespace between values is kept. Unquoted strings also support substitutions of course: tasks-url : ${base-url}/tasks  A concatenation can refer to earlier values of the same field: path : ""/bin"" path : ${path}"":/usr/bin""  Arrays can be concatenated as well: path : [ ""/bin"" ] path : ${path} [ ""/usr/bin"" ]  There is a shorthand for appending to arrays: // equivalent to: path = ${?path} [ ""/usr/bin"" ] path += ""/usr/bin""  To prepend or insert into an array, there is no shorthand. When objects are ""concatenated,"" they are merged, so object concatenation is just a shorthand for defining the same object twice. The long way (mentioned earlier) is: data-center-generic = { cluster-size = 6 } data-center-east = ${data-center-generic} data-center-east = { name = ""east"" }  The concatenation-style shortcut is: data-center-generic = { cluster-size = 6 } data-center-east = ${data-center-generic} { name = ""east"" }  When concatenating objects and arrays, newlines are allowed inside each object or array, but not between them. Non-newline whitespace is never a field or element separator. So [ 1 2 3 4 ] is an array with one unquoted string element ""1 2 3 4"". To get an array of four numbers you need either commas or newlines separating the numbers. See the spec for full details on concatenation. Note: Play/Akka 2.0 have an earlier version that supports string concatenation, but not object/array concatenation. += does not work in Play/Akka 2.0 either. Post-2.0 versions support these features. reference.conf can't refer to application.conf Please see this earlier section; all reference.conf have substitutions resolved first, without application.conf in the stack, so the reference stack has to be self-contained. Miscellaneous Notes Debugging Your Configuration If you have trouble with your configuration, some useful tips. Set the Java system property -Dconfig.trace=loads to get output on stderr describing each file that is loaded. Note: this feature is not included in the older version in Play/Akka 2.0. Use myConfig.root().render() to get a Config printed out as a string with comments showing where each value came from. Supports Java 8 and Later Currently the library is maintained against Java 8, but version 1.2.1 and earlier will work with Java 6. Please use 1.2.1 if you need Java 6 support, though some people have expressed interest in a branch off of 1.3.0 supporting Java 7. If you want to work on that branch you might bring it up on chat. We can release a jar for Java 7 if someone(s) steps up to maintain the branch. The master branch does not use Java 8 ""gratuitously"" but some APIs that use Java 8 types will need to be removed. Rationale for Supported File Formats (For the curious.) The three file formats each have advantages. Java .properties: Java standard, built in to JVM Supported by many tools such as IDEs JSON: easy to generate programmatically well-defined and standard bad for human maintenance, with no way to write comments, and no mechanisms to avoid duplication of similar config sections HOCON/.conf: nice for humans to read, type, and maintain, with more lenient syntax built-in tools to avoid cut-and-paste ways to refer to the system environment, such as system properties and environment variables The idea would be to use JSON if you're writing a script to spit out config, and use HOCON if you're maintaining config by hand. If you're doing both, then mix the two. Two alternatives to HOCON syntax could be: YAML is also a JSON superset and has a mechanism for adding custom types, so the include statements in HOCON could become a custom type tag like !include, and substitutions in HOCON could become a custom tag such as !subst, for example. The result is somewhat clunky to write, but would have the same in-memory representation as the HOCON approach. Put a syntax inside JSON strings, so you might write something like ""$include"" : ""filename"" or allow ""foo"" : ""${bar}"". This is a way to tunnel new syntax through a JSON parser, but other than the implementation benefit (using a standard JSON parser), it doesn't really work. It's a bad syntax for human maintenance, and it's not valid JSON anymore because properly interpreting it requires treating some valid JSON strings as something other than plain strings. A better approach is to allow mixing true JSON files into the config but also support a nicer format. Other APIs (Wrappers, Ports and Utilities) This may not be comprehensive - if you'd like to add mention of your wrapper, just send a pull request for this README. We would love to know what you're doing with this library or with the HOCON format. Guice integration Typesafe Config Guice https://github.com/racc/typesafeconfig-guice Java (yep!) wrappers for the Java library tscfg https://github.com/carueda/tscfg Scala wrappers for the Java library Ficus https://github.com/ceedubs/ficus configz https://github.com/arosien/configz configs https://github.com/kxbmap/configs config-annotation https://github.com/wacai/config-annotation PureConfig https://github.com/melrief/pureconfig Simple Scala Config https://github.com/ElderResearch/ssc Clojure wrappers for the Java library beamly-core.config https://github.com/beamly/beamly-core.config Ruby port https://github.com/puppetlabs/ruby-hocon Puppet module Manage your HOCON configuration files with Puppet!: https://forge.puppetlabs.com/puppetlabs/hocon Python port pyhocon https://github.com/chimpler/pyhocon C++ port https://github.com/puppetlabs/cpp-hocon Linting tool A web based linting tool http://www.hoconlint.com/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/typesafehub/config"	"Configuration library for JVM languages."	"true"
"Configuration"	"owner"	"https://github.com/lviggiano/owner"	"Reduces boilerplate of properties."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"386"	"37"	"93"	"GitHub - lviggiano/owner: Get rid of the boilerplate code in properties based configuration. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 386 Fork 93 lviggiano/owner Code Issues 56 Pull requests 4 Wiki Pulse Graphs Get rid of the boilerplate code in properties based configuration. http://owner.aeonbits.org 788 commits 5 branches 13 releases Fetching contributors Java 89.1% CSS 6.7% HTML 4.1% Shell 0.1% Java CSS HTML Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages issues-attachments master owner-1.0.3-bugfix owner-1.0.4-bugfix Nothing to show owner-parent-1.0.9 owner-parent-1.0.8 owner-parent-1.0.7 owner-1.0.6 owner-1.0.5.1 owner-1.0.5 owner-1.0.4.1 owner-1.0.4 owner-1.0.3.1 owner-1.0.3 owner-1.0.2 owner-1.0.1 owner-1.0 Nothing to show New pull request Latest commit f1b9a72 Jun 28, 2016 lviggiano removed build on OSX Permalink Failed to load latest commit information. owner-assembly changed the location of the built artifact archives, to be on the ${b… Jun 15, 2016 owner-examples [maven-release-plugin] prepare for next development iteration Jul 22, 2015 owner-extras refactoring after merge Jun 15, 2016 owner-java8-extras refactoring after merge Jun 15, 2016 owner-java8 refactoring after merge Jun 15, 2016 owner-site refactoring after merge Jun 15, 2016 owner moving all ByteSize classes and tests to owner-java8 module May 11, 2016 .gitignore updated .gitignore Oct 14, 2014 .travis.yml removed build on OSX Jun 28, 2016 LICENSE Update LICENSE Jan 4, 2016 README.md fixed typo Jun 28, 2016 TODO.md cleanup Apr 16, 2015 pom.xml refactoring after merge Jun 15, 2016 README.md OWNER OWNER, an API to ease Java property files usage. INTRODUCTION The goal of OWNER API is to minimize the code required to handle application configuration through Java properties files. Full documentation available on project website. BASIC USAGE The approach used by OWNER APIs, is to define a Java interface associated to a properties file. Suppose your properties file is defined as ServerConfig.properties: port=80 hostname=foobar.com maxThreads=100 To access this property you need to define a convenient Java interface in ServerConfig.java: public interface ServerConfig extends Config {     int port();     String hostname();     int maxThreads(); } We'll call this interface the Properties Mapping Interface or just Mapping Interface since its goal is to map Properties into a an easy to use piece of code. Then, you can use it from inside your code: public class MyApp {     public static void main(String[] args) {         ServerConfig cfg = ConfigFactory.create(ServerConfig.class);         System.out.println(""Server "" + cfg.hostname() + "":"" + cfg.port() +                            "" will run "" + cfg.maxThreads());     } } But this is just the tip of the iceberg. Continue reading here: Basic usage. DOWNLOAD Public Releases can be downloaded from GitHub Releases page or Maven Central Repository. DOCUMENTATION Make sure to have a look at the documentation on project website to learn how flexible and powerful OWNER is, and why you may need it! Chinese documentation is provided by Yunfeng Cheng via a GitHub independent project at this address. LICENSE OWNER is released under the BSD license. See LICENSE file included for the details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lviggiano/owner"	"Reduces boilerplate of properties."	"true"
"Constraint Satisfaction Problem Solver"	"Choco"	"http://choco-solver.org/"	"Off-the-shelf constraint satisfaction problem solver, which uses constraint programming techniques."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"161"	"26"	"51"	"GitHub - chocoteam/choco-solver: An open-source Java library for Constraint Programming Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 161 Fork 51 chocoteam/choco-solver Code Issues 26 Pull requests 0 Wiki Pulse Graphs An open-source Java library for Constraint Programming http://choco-solver.org/ 3,905 commits 5 branches 13 releases Fetching contributors Java 98.9% TeX 0.6% Python 0.2% Makefile 0.1% Batchfile 0.1% Shell 0.1% Java TeX Python Makefile Batchfile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coverity_scan develop-cpru develop gh-pages master Nothing to show choco-13.03 choco-3.3.3 choco-3.3.2 choco-3.3.1 choco-3.3.1-j7 choco-3.3.0 choco-3.2.2 choco-3.2.1 choco-3.2.0 choco-3.1.1 choco-3.1.0 CP12 4.0.0.a Nothing to show New pull request Latest commit fe2d8b3 Jul 13, 2016 cprudhom add setter to solution Permalink Failed to load latest commit information. .travis prepare pre-release: no javadoc/jar nor source.jar on snapshot release Jun 13, 2016 bin after pre-release: patch scripts Jun 13, 2016 src add setter to solution Jul 13, 2016 .gitignore rename scripts into bin Apr 22, 2016 .travis.yml prepare pre-release: add condition on release (only when 10s tests su… Jun 13, 2016 AUTHORS modify FullyRandom Apr 28, 2016 CHANGES.md initiate release 4.0.0.a Jun 13, 2016 CONTRIBUTION.md prepare migration to master Jun 1, 2016 CONTRIBUTORS deal with 0-size array in singleton constraints May 4, 2016 LICENSE initiate release 4.0.0.a Jun 13, 2016 README.md initiate release 4.0.0.a Jun 13, 2016 pom.xml Prepare the code for the next version Jun 13, 2016 user_guide.pdf initiate release 4.0.0.a Jun 13, 2016 README.md Documentation, Support and Issues Contributing Download and installation Choco-solver is an open-source Java library for Constraint Programming. Choco-solver is not the continuation of Choco2, but a completely rewritten version and there is no backward compatibility. Current stable version is 4.0.0.a (13 Jun 2016). Choco-solver comes with: various type of variables (integer, boolean, set, graph and real), various state-of-the-art constraints (alldifferent, count, nvalues, etc.), various search strategies, from basic ones (first_fail, smallest, etc.) to most complex (impact-based and activity-based search), explanation-based engine, that enables conflict-based back jumping, dynamic backtracking and path repair, But also, facilities to interact with the search loop, factories to help modelling, many samples, etc. Choco-solver is distributed under BSD 4-Clause License (Copyright (c) 1999-2016, Ecole des Mines de Nantes). Contact: choco@mines-nantes.fr Overview // 1. Create a Model Model model = new Model(""my first problem""); // 2. Create variables IntVar x = model.intVar(""X"", 0, 5); IntVar y = model.intVar(""Y"", 0, 5); // 3. Create and post constraints by using constraint factories x.add(y).lt(5).post(); // 4. Define the search strategy model.getSolver().setSearch(Search.inputOrderLBSearch(x, y)); // 5. Launch the resolution process model.getSolver().solve(); // 6. Print search statistics model.getSolver().printStatistics(); Documentation, Support and Issues The archive file downloaded from the official website contains both the user guide (pdf) and the apidocs (zip). You can get help on our forum. Most support requests are answered very fast. Use the issue tracker here on GitHub to report issues. As far as possible, provide a Minimal Working Example. Contributing Anyone can contribute to the project, from the source code to the documentation. In order to ease the process, we established a contribution guide that should be reviewed before starting any contribution as it lists the requirements and good practices to ease the contribution process. Promoting is contributing ! Following are code snippets to add on your website to help us promoting Choco-solver. html: <a href=""http://choco-solver.org/?utm_source=badge&utm_medium=badge&utm_campaign=badge""> <img border=""0"" alt=""Choco-solver"" src=""http://choco-solver.org/sites/default/files/banner.svg"" width=""160"" height=""18""> </a> Markdown: [![Choco-solver](http://choco-solver.org/sites/default/files/banner.svg)](http://choco-solver.org/?utm_source=badge&utm_medium=badge&utm_campaign=badge) And thank you for giving back to choco-solver. Please meet our team of cho-coders : @jgFages (Jean-Guillaume Fages) @cprudhom (Charles Prud'homme) Download and installation Requirements: JDK 8+ maven 3+ Choco-solver is available on Maven Central Repository, or directly from the official website. Snapshot releases are also available for curious. In the following, we distinguish two usages of Choco: as a standalone application: the jar file includes all required dependencies, as a library: the jar file excludes all dependencies. The name of the jar file terms the packaging: choco-solver-4.0.0.a-with-dependencies.jar or choco-solver-4.0.0.a.jar. A Changelog file is maintained for each release. Inside a maven project Choco is available on Maven Central Repository. So you only have to edit your pom.xml to declare the following library dependency: <dependency>    <groupId>org.choco-solver</groupId>    <artifactId>choco-solver</artifactId>    <version>4.0.0.a</version> </dependency> Note that if you want to test snapshot release, you should update your pom.xml with : <repository>     <id>sonatype</id>     <url>https://oss.sonatype.org/content/repositories/snapshots/</url>     <snapshots>         <enabled>true</enabled>     </snapshots> </repository> As a stand-alone application The jar file contains all required dependencies. The next step is simply to add the jar file to your classpath of your application. Note that if your program depends on dependencies declared in the jar file, you should consider using choco as a library. As a library The jar file does not contains any dependencies, as of being used as a dependency of another application. The next step is to add the jar file to your classpath of your application and also add the required dependencies. Dependencies The required dependencies for compilation are: dk.brics.automaton:automaton:1.11-8 args4j:args4j:2.33 org.javabits.jgrapht:jgrapht-core:0.9.3 com.github.cp-profiler:cpprof-java:1.1.0 org.choco-solver:choco-sat:1.0.2 net.sf.trove4j:trove4j:3.0.3 org.zeromq:jeromq:0.3.4 com.google.protobuf:protobuf-java:2.6.1  They are available on Maven Repository (http://mvnrepository.com/). Building from sources The source of the released versions are directly available in the Tag section. You can also download them using github features. Once downloaded, move to the source directory then execute the following command to make the jar: $ mvn clean package -DskipTests  If the build succeeded, the resulting jar will be automatically installed in your local maven repository and available in the target sub-folders. The Choco-solver dev team. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chocoteam/choco-solver"	"Off-the-shelf constraint satisfaction problem solver, which uses constraint programming techniques."	"true"
"Constraint Satisfaction Problem Solver"	"JaCoP"	"https://github.com/radsz/jacop/"	"Includes an interface for the FlatZinc language, enabling it to execute MiniZinc models."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"77"	"13"	"33"	"GitHub - radsz/jacop: Java Constraint Programming solver Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 77 Fork 33 radsz/jacop Code Issues 6 Pull requests 5 Pulse Graphs Java Constraint Programming solver 305 commits 3 branches 1 release Fetching contributors Java 96.2% Scala 3.7% Other 0.1% Java Scala Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master travis-test Nothing to show v4.0.0 Nothing to show New pull request Latest commit 1612d3b Jan 4, 2016 radsz Merge branch 'release/4.4.0' Permalink Failed to load latest commit information. src Preparing release, changing version numbers to 4.4 Jan 4, 2016 .gitignore Initial commit from svn repository. Nov 4, 2012 CHANGELOG Preparing release, changing version numbers to 4.4 Jan 4, 2016 GITWORKFLOW.md Initial version of the wiki explaining JaCoP gitflow Jan 5, 2014 INSTALL Performance improvement for Max and Min constraints; specially for la… Jul 15, 2015 README.md Correcting a problem in minizinc that variables in arrays that are in… Sep 8, 2015 change.bash Preparing release, changing version numbers to 4.4 Jan 4, 2016 pom.xml Preparing release, changing version numbers to 4.4 Jan 4, 2016 README.md JaCoP Java Constraint Programming (JaCoP) solver JaCoP solver is Java-based open source solver developed and maintained mainly by two people Krzysztof Kuchcinski, Dept. of Computer Science, Lund University, Sweden. Radoslaw Szymanek - Crossing-Tech, Switzerland and Vistula University, Poland. Moreover a number of students have contributed to the solver by programming first versions of different global constraints and set constraints. The solver is being used in academia for research and teaching as well as in industry for commercial purposes. The most successful use of the solver is within Electronic Design Automation community, since both main authors come from that community. JaCoP provides a significant number of constraints to facilitate modeling as well as modular design of search. This allows to tailor search to characteristics of the problem being addressed. It has currently more than 90,000 lines of code, not including examples and testing code. The examples which are the preferred way to document the abilities of JaCoP have more than 20.000 lines of code. The core developers have been working on JaCoP for past 10 years during their free time as a hobby activity. It has been refactored, transformed, and improved many times. Initial versions of JaCoP were even 3 orders of magnitude slower than the current version. JaCoP implementation has been influenced heavily by more than 20 research articles. Moreover, JaCoP was used as a tool to conduct experiments for CP publications. JaCoP supports finite domains of integers and sets of integers. The major focus of JaCoP are its constraints. These constraints include rich set of primitive, logical, and conditional constraints as well as many global constraints. The most important global constraints are as follows. diff2, cumulative, alldifferent, gcc, extensional support (with three different state-of-the-art approaches)and extensional conflict, among, element, circuit, knapsack, regular, netflow, and geost. JaCoP solver contains also front-end for FlatZinc language that makes it possible to execute MiniZinc models. It allows us to perform extensive testing with the help of other solvers as we can compare results from different solvers. JaCoP is an ongoing activity. We are working on it in our free time. The most recent addition is Scala based DSL so it is easier to create your own constraint programs even in more intuitive manner. JaCoP is also available from maven repository. For details, please check INSTALL file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/radsz/jacop/"	"Includes an interface for the FlatZinc language, enabling it to execute MiniZinc models."	"true"
"Constraint Satisfaction Problem Solver"	"OptaPlanner"	"http://www.optaplanner.org/"	"Business planning and resource scheduling optimization solver."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"412"	"92"	"273"	"GitHub - droolsjbpm/optaplanner: Java planning engine: OptaPlanner optimizes business resource scheduling and planning. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 92 Star 412 Fork 273 droolsjbpm/optaplanner Code Pull requests 5 Pulse Graphs Java planning engine: OptaPlanner optimizes business resource scheduling and planning. http://www.optaplanner.org 5,623 commits 14 branches 68 releases Fetching contributors Java 94.9% JavaScript 3.2% FreeMarker 1.7% Other 0.2% Java JavaScript FreeMarker Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 5.2.x 5.3.x 5.4.x 5.5.x 5.6.x 6.0.x 6.1.x 6.2.x 6.3.x 6.4.x 6.5.x kie_refactory master reteoo_cleanup Nothing to show summit2016 b4_uf_0.5.x 7.0.0.Beta1 6.4.0.Final 6.4.0.CR2 6.4.0.CR1 6.4.0.Beta2 6.4.0.Beta1 6.3.0.Final 6.3.0.CR2 6.3.0.CR1 6.3.0.Beta2 6.3.0.Beta1 6.2.0.Final 6.2.0.CR4 6.2.0.CR3 6.2.0.CR2 6.2.0.CR1 6.2.0.Beta3 6.2.0.Beta2 6.2.0.Beta1 6.1.0.Final 6.1.0.CR2 6.1.0.CR1 6.1.0.Beta4 6.1.0.Beta3 6.1.0.Beta2 6.1.0.Beta1 6.0.1.Final 6.0.0.Final 6.0.0.CR5 6.0.0.CR4 6.0.0.CR4-Pre1 6.0.0.CR3 6.0.0.CR2 6.0.0.CR1 6.0.0.Beta5 6.0.0.Beta4 6.0.0.Beta3 6.0.0.Beta2 6.0.0.Beta1 6.0.0.Alpha9 6.0.0.Alpha8 6.0.0.Alpha7 6.0.0.Alpha4 6.0.0.Alpha3 6.0.0.Alpha1 5.6.0.Final 5.6.0.CR1 5.5.0.Final 5.5.0.CR1 5.5.0.Beta1 5.4.0.Final 5.4.0.CR1 5.4.0.Beta2 5.4.0.Beta1 5.3.5.Final 5.3.4.Final 5.3.3.Final 5.3.2.Final 5.3.1.Final 5.3.0.Final 5.3.0.CR1 5.3.0.Beta1 5.2.1.Final 5.2.0.M2 5.2.0.Final 5.2.0.CR1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. optaplanner-benchmark Mention that the deprecated in 7.x api's will be removed in 8.0 (even… Jul 13, 2016 optaplanner-core PLANNER-482 NonUniqueNotificationVariableListener to forgo unique not… Jul 15, 2016 optaplanner-distribution Upgrade to version 7.0.0-SNAPSHOT Jan 22, 2016 optaplanner-docs PLANNER-482 NonUniqueNotificationVariableListener to forgo unique not… Jul 15, 2016 optaplanner-examples PLANNER-602 Remove <scoreDefinitionType> from the solver configuration Jul 7, 2016 optaplanner-persistence PLANNER-610 Jackson (JSON) Score binders support Jul 4, 2016 optaplanner-test Add optaplanner-test module Jul 4, 2016 optaplanner-webexamples [DROOLS-1216] exclude commons-logging and use jcl-over-slf4j instead (#… Jun 27, 2016 .gitattributes gitattributes: Add pdf to binary files Jul 27, 2015 .gitignore .gitattributes to force unix line endings in this repository May 23, 2013 LICENSE-ASL-2.0.txt JBRULES-2869: Split-off requires license file per repo Feb 15, 2011 README.adoc Added starter issue info to readme Feb 14, 2016 pom.xml Add optaplanner-test module Jul 4, 2016 README.adoc Quick development start To build and run from source: $ mvn clean install -DskipTests $ cd optaplanner-examples $ mvn exec:java To develop with IntelliJ IDEA, Eclipse or NetBeans, open the root pom.xml as a new project and configure a Run/Debug configuration like this: Type: Application Main class: org.optaplanner.examples.app.OptaPlannerExamplesApp VM options: -Xmx2G -server (memory only needed when using the big datasets in the examples) Program arguments: (none) Working directory: $MODULE_DIR$ (must resolve to optaplanner-examples directory) Use classpath of module: optaplanner-examples Starter issues If you’re just starting out with OptaPlanner and want to contribute, take a look at our starter issues. They’re specifically chosen to be easier for first time contributors. To view a complete list of them, go to OptaPlanner’s JIRA issue tracker, click the 'Advanced' search link in the top right and paste this query: project = PLANNER AND status in (Open, Reopened) AND labels = starter Developing Drools, OptaPlanner and jBPM If you want to build or contribute to a droolsjbpm project, read this document. It will save you and us a lot of time by setting up your development environment correctly. It solves all known pitfalls that can disrupt your development. It also describes all guidelines, tips and tricks. If you want your pull requests (or patches) to be merged into master, please respect those guidelines. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/droolsjbpm/optaplanner"	"Business planning and resource scheduling optimization solver."	"true"
"Continuous Integration"	"Bamboo"	"https://www.atlassian.com/software/bamboo"	"Atlassian's solution with good integration of their other products. You can either apply for an open-source license or buy it."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Bamboo - Continuous integration, deployment & release management | Atlassian Atlassian Products JIRA Software Project and issue tracking Confluence Document collaboration Bitbucket Git code management JIRA Service Desk IT and business service desk HipChat Team chat, video, file sharing View all products » Purchase a product » Teams Software Plan, build, and ship amazing products IT Provide great service and support your business Marketing Bring together a winning go-to-market strategy Finance Simplify what it takes to report, measure, and analyze Operations Run your business smoothly and efficiently HR Streamline processes for better people management Legal Securely and reliably manage clients and documents Other Work smart and deliver fast with any team Support Documentation Guides to all our products University Self-paced and live training Enterprise services Support for large teams Answers Community Q&A forum Expert partners Custom professional services My account Manage your Atlassian account View all resources » Create support ticket » Try Buy Company Careers Contact us Build, Test, Deploy Bamboo Server is the choice of professional teams for continuous integration, deployment, and delivery Get started for free Or check out our cloud offering in beta Features Pricing Try it free Continuous delivery, from code to deployment Tie automated builds, tests, and releases together in a single workflow Build Focus on coding and count on Bamboo as your CI and build server! Create multi-stage build plans, set up triggers to start builds upon commits, and assign agents to your critical builds and deployments. Test Testing is a key part of continuous integration. Run automated tests in Bamboo to regress your products thoroughly with each change. Parallel automated tests unleash the power of Agile Development and make catching bugs easier and faster. Deploy Bamboo offers first-class support for the ""delivery"" aspect of continuous delivery. Deployment projects automate the tedium right out of releasing into each environment, while letting you control the flow with per-environment permissions. Connect Bamboo boasts the best integration with JIRA Software, Bitbucket, Fisheye, and HipChat. Also, boost your CI pipeline by choosing from more than a hundred fifty add-ons in our Marketplace or make your own!   Continuous Delivery Microsite Visit our site to learn more about continuous integration & boost your release processs Take me to the microsite Integrations that matter Connect Bamboo with JIRA Software, Bitbucket, Fisheye & Crucible, HipChat and hundreds of other tools! Continuous delivery Deployment projects, and the integrations with AWS CodeDeploy and Docker provide all you need to deliver your final product. Use Docker and AWS CodeDeploy as build or deployment tasks. Release with ease! Development workflow Connect Bamboo with Fisheye and Crucible, Bitbucket, and JIRA Software. Then sit back, relax and watch how the status of builds, deployments and commits gets updated across all the tools. Real-time collaboration Stay on top of failed builds, tests and deployments, and communicate with the team in real-time with notifications delivered to a HipChat room. ""Bamboo, Bitbucket, and JIRA Software are fully integrated and give us full traceability from the time a feature request is made all the way to deployment."" SCOTT CARPENTER, WORK PROGRAM MANAGER view their story Powering product teams at companies of all sizes around the world Boost your release pipeline Bamboo's pricing tiers are based on build slaves, or ""remote agents"" as we call them rather than on user seats. The more agents, the more processes can run concurrently – either steps in the same build, or different builds. Small teams $10* Up to 10 jobs Unlimited local agents No remote agents Download now *All proceeds are donated to the Room to Read charity! Growing teams $800 Unlimited jobs Unlimited local agents 1 remote agent 5 remote agents 10 remote agents 25 remote agents 100 remote agents 250 remote agents Download now No credit card needed   Want to run builds in the cloud? Sign up for Bitbucket Pipelines beta Ship high quality products, faster! Better CI/CD Software teams in every industry are upgrading their continuous integration and delivery pipeline with Bamboo. Easy build import from popular open source tools and native support for Git, Hg, and SVN means you'll be building and deploying like a champ. Dev + Ops We're familiar with the DevOps philosophy and have you covered! Set up CI builds as normal, and feed the artifacts into deployment projects. Combine home-grown scripts, smoke tests, and third-party technologies to define the deployment steps for each environment. Bamboo supports you all the way, from continuous integration, to deployment, to delivery!   Jenkins importer Teams migrating from Jenkins can import builds into Bamboo, slashing the transition time. Build engineers have better things to do than recreate configs click by tedious click. Get the Jenkins vs. Bamboo lowdown here. Full SCM Support In addition to Git, Bamboo hooks into SVN, Mercurial, Perforce, CVS, and repositories in Bitbucket and FishEye. It ties builds to the code changes they contain. Commit messages, authors, reference numbers, and dates are displayed in each build result and one click takes you to the repository viewer to see diffs, history, and browse related code.  Git Bamboo alleviates the pain found at the intersection of continuous integration (CI) and distributed version control systems like Git and Mercurial. New branches are automatically brought under the same CI scheme as master, and any two branches in the repo can be merged automatically before each test run. Wanna Git more? Here is all you need. Continuous Learning With a variety of training, best practices, and support resources, help is never far away. Check out the quick-start guide, Atlassian blog, help docs and Atlassian Answers. Also, Bamboo comes with access to our legendary support team – file a ticket and they'll get back to you fast. Atlassian My account Products Marketplace Community Company Careers Contact us Languages Choose your language English Español Deutsch Français 日本語 Português русский 한국어 Privacy policy Terms of use Trust & Security Copyright © 2016 Atlassian"	"null"	"null"	"Atlassian's solution with good integration of their other products. You can either apply for an open-source license or buy it."	"true"
"Continuous Integration"	"fabric8"	"http://fabric8.io/"	"Integration platform for containers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"649"	"120"	"328"	"GitHub - fabric8io/fabric8: fabric8 is an open source microservices platform based on Docker, Kubernetes and Jenkins Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 120 Star 649 Fork 328 fabric8io/fabric8 Code Issues 500 Pull requests 0 Wiki Pulse Graphs fabric8 is an open source microservices platform based on Docker, Kubernetes and Jenkins http://fabric8.io/ 12,964 commits 11 branches 253 releases 93 contributors Java 93.4% HTML 4.1% Shell 1.7% RAML 0.3% Scala 0.2% CSS 0.1% Other 0.2% Java HTML Shell RAML Scala CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x gh-pages master redhat-fis-2_0 redhat-ipaas redhat use-variable-for-jsch-version versionUpdate4e49521f-5819-4b83-ac30-73e767e8b13a versionUpdate88f76b97-6dd6-4825-8458-731b0ee97ce7 versionUpdated2b35a9f-750f-4336-b694-f846da7f11b0 versionUpdatefc44c703-43b9-403f-a8d1-bb16b7cdf5b0 Nothing to show v2.2.144 v2.2.143 v2.2.142 v2.2.141 v2.2.140 v2.2.139 v2.2.138 v2.2.137 v2.2.136 v2.2.135 v2.2.134 v2.2.133 v2.2.132 v2.2.131 v2.2.130 v2.2.129 v2.2.128 v2.2.127 v2.2.126 v2.2.125 v2.2.124 v2.2.123 v2.2.122 v2.2.121 v2.2.120 v2.2.119 v2.2.118 v2.2.117 v2.2.116 v2.2.115 v2.2.114 v2.2.113 v2.2.112 v2.2.111 v2.2.110 v2.2.109 v2.2.108 v2.2.107 v2.2.106 v2.2.105 v2.2.104 v2.2.103 v2.2.102 v2.2.101 v2.2.100 v2.2.99 v2.2.98 v2.2.97 v2.2.96 v2.2.95 v2.2.94 v2.2.93 v2.2.92 v2.2.91 v2.2.90 v2.2.89 v2.2.88 v2.2.87 v2.2.86 v2.2.85 v2.2.84 v2.2.83 v2.2.82 v2.2.81 v2.2.80 v2.2.79 v2.2.78 v2.2.77 v2.2.76 v2.2.75 v2.2.74 v2.2.73 v2.2.72 v2.2.71 v2.2.70 v2.2.69 v2.2.43 v2.2.42 v2.2.41 v2.2.40 v2.2.39 v2.2.38 v2.2.37 v2.2.36 v2.2.35 v2.2.34 v2.2.33 v2.2.32 v2.2.31 v2.2.30 v2.2.29 v2.2.28 v2.2.27 v2.2.26 v2.2.25 perfectus-fuseenterprise-mq-fuseesb-7-last-release perfectus-fuseenterprise-master-last-release perfectus-fuseenterprise-fuseesb-7-last-release perfectus-fuseenterprise-fabric-fuseesb-7-last-release perfectus-fuseenterprise-esb-fuseesb-7-last-release Nothing to show New pull request Latest commit e9cacf8 Jul 15, 2016 jstrachan added another screenshot Permalink Failed to load latest commit information. bin #4944: remove the jbpm stuff Oct 12, 2015 components Add back gitrepo-resteasy to be used instead of CXF Jul 8, 2016 docs added another screenshot Jul 15, 2016 fabric8-apt Badges, badges, badges .... May 20, 2016 fabric8-maven-plugin avoid throwing an exception if we can't find a kubernetes service for… Jul 15, 2016 hawt-app-maven-plugin use fixed SNAPSHOT version now that we dont increment it in the release Apr 14, 2016 itests use fixed SNAPSHOT version now that we dont increment it in the release Apr 14, 2016 parent use fixed SNAPSHOT version now that we dont increment it in the release Apr 14, 2016 tooling use fixed SNAPSHOT version now that we dont increment it in the release Apr 14, 2016 website switch .net icon to .net foundation icon Jul 9, 2016 .gitignore Ignore .vagrant dir Dec 3, 2014 Changes.md polished the changelog Jul 24, 2015 Contributing.md Changed Contributing.md links to fabric8 FAQ and Community pages. Aug 6, 2015 Jenkinsfile added support for pushing new release versions down to dependent proj… Jul 6, 2016 building.md Fixed building docs Jul 8, 2015 ci-website.sh try fix the website CI issue Jun 2, 2016 circle.yml avoid unnecessary install Apr 8, 2015 fabric-license-header.txt Bump license headers to 2016 Apr 1, 2016 fabric8.properties Add fabric8.properties for JBoss upstream projects page Sep 11, 2014 license.txt [FABRICPRV-66] Changed all license headers to ASL. Jan 25, 2012 pom.xml Upgrade Lombok to version 1.16.10 Jul 15, 2016 readme.md First canary check in for javadoc badges May 20, 2016 release.groovy simplify the PR logic and use the new fabric8-maven-dependencies proj… Jul 8, 2016 readme.md fabric8 fabric8 is an opinionated open source microservices platform based on Docker, Kubernetes and Jenkins fabric8 makes it easy to create microservices, build, test and deploy them via Continuous Delivery pipelines then run and manage them with Continuous Improvement and ChatOps Documentation Overview Blog Differences in 2.x from 1.x Demos Using the fabric8 developer console Creating a project More videos Getting Started Getting Started guides Source code Fabric8 is made up of a number of different git repositories including this one. Please see the docs/projects.md file for a full list of all the github repositories. Building the code Please see the building.md file. Contributing to the project We love contributions and you are very welcome to help. Check out the Community License This project is Apache Licensed Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fabric8io/fabric8"	"Integration platform for containers."	"true"
"Continuous Integration"	"Go"	"https://www.thoughtworks.com/go/"	"ThoughtWork's open-source solution."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Continuous Delivery | GoCD by ThoughtWorks Add-ons Support Pricing Webinars Submit a Ticket Performance. Support. Reliability. GoCD is a critical piece of your infrastructure. We get that. We are committed to providing world-class support for GoCD users. GoCD is Open Source. Learn More Introducing the new GoCD 15.3! Learn Add-ons for advanced deployments. Higher performance database GoCD's OSS distribution uses an embedded database. That's great for getting started. But, if you need to scale beyond a few teams and several pipelines, our PostgreSQL plugin gives you the performance upgrade necessary for hundreds of pipelines and agents. We recommend PostgreSQL for critical deployments. Business Continuity Hard drives fail. This add-on helps ensure you can deliver even when your machine is down. With business continuity, you’ll be able to set up secondary GoCD and PostgreSQL servers to protect against downtime. Automatic redirection of build agents and the ability to store artifacts on network drives is included. Here's what you get with all tiers of paid support... Access to our support team Unlimited support cases per month Access to our GoCD development team Notifications for all bug fixes and security patches Notification of all GoCD Help updates and upgrades; installation of patches and upgrades Pricing Number of pipelines Includes Pricing, per year, USD 1-50 Support only $5,000 51-250 Support + Add-ons $15,000 251-500 Support + Add-ons $25,000 500+ Support + Add-ons Let's Talk Thank you for your interest in GoCD. Someone from our team will reach out to you shortly. Write to us to start your free 30 day trial support... :( Unable to load the 'Contact Us' form Please check your network connection or try calling us. You can also reach us at... America Hours +1 415 463 1900 Europe Hours +44 (0) 20 7497 4500 Asia, Australia & Africa Hours +91 80 4323 3722 Continuous delivery is in our DNA * Well.... not really. Because that would be silly, technically inaccurate and biologically impossible. But you know what we mean! ThoughtWorks has been a key innovator in continuous delivery and has helped thousands deliver software over the past 20 years. We are proud to continue this tradition with GoCD. “The essence of my philosophy to software delivery is to build software so that it is always in a state where it could be put into production. We call this Continuous Delivery because we are continuously running a deployment pipeline that tests if this software is in a state to be delivered.”   — Jez Humble Our Customers Thanks to Nicolas Raymond for the image of Golden Gate Terms Privacy Help & Documentation"	"null"	"null"	"ThoughtWork's open-source solution."	"true"
"Continuous Integration"	"Jenkins"	"http://jenkins-ci.org/"	"Provides server-based deployment services."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Jenkins  Jenkins Downloads LTS Release LTS (Long-Term Support) releases are chosen every 12 weeks from the stream of regular releases as the stable release for that time period. Weekly Release A new release is produced weekly to deliver bug fixes and features to users and plugin developers. 2.7.1 .war Docker FreeBSD Gentoo Mac OS X OpenBSD openSUSE Red Hat/Fedora/CentOS Ubuntu/Debian Windows Changelog | Past Releases 2.13 .war Docker FreeBSD Gentoo Mac OS X OpenBSD openSUSE Red Hat/Fedora/CentOS Ubuntu/Debian Windows Changelog | Past Releases Blog Documentation Plugins Use-cases Android C/C++ Docker Embedded GitHub Java Continuous Delivery Python Ruby Participate Mailing Lists Chat Twitter Events Office Hours /r/jenkinsci Sub-projects Overview Blue Ocean Google Summer of Code Jenkins Area Meetups Resources Account Management Issue Tracker Wiki Security Press Conduct Download Jenkins LTS Release LTS (Long-Term Support) releases are chosen every 12 weeks from the stream of regular releases as the stable release for that time period. Weekly Release A new release is produced weekly to deliver bug fixes and features to users and plugin developers. 2.7.1 .war Docker FreeBSD Gentoo Mac OS X OpenBSD openSUSE Red Hat/Fedora/CentOS Ubuntu/Debian Windows Changelog | Past Releases 2.13 .war Docker FreeBSD Gentoo Mac OS X OpenBSD openSUSE Red Hat/Fedora/CentOS Ubuntu/Debian Windows Changelog | Past Releases Get 2.7.1 LTS .war or the latest 2.13 weekly release Jenkins Automation Server Build great things at any scale The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project. Previous Next Jenkins 2 is here Jenkins 2 brings Pipeline as Code, a new setup experience and other UI improvements while maintaining backwards compatibility with existing Jenkins installations! Learn more Continuous Integration and Continuous Delivery As an extensible automation server, Jenkins can be used as a simple CI server or turned into the continuous delivery hub for any project. Easy installation Jenkins is a self-contained Java-based program, ready to run out-of-the-box, with packages for Windows, Mac OS X and other Unix-like operating systems. Easy configuration Jenkins can be easily set up and configured via its web interface, which includes on-the-fly error checks and built-in help. Plugins With hundreds of plugins in the Update Center, Jenkins integrates with practically every tool in the continuous integration and continuous delivery toolchain. Extensible Jenkins can be extended via its plugin architecture, providing nearly infinite possibilities for what Jenkins can do. Distributed Jenkins can easily distribute work across multiple machines, helping drive builds, tests and deployments across multiple platforms faster. Getting started with Jenkins Step 1 Download Jenkins Pick a package for your platform to get started quickly. Step 2 Create a Pipeline Define a pipeline for automating build, test and delivery of your project. Step 3 Discover Plugins Customize Jenkins with plugins to fit your specific needs. Step 4 Participate Ask questions and contribute to making Jenkins better! Pipeline as Code Use the Pipeline plugin to describe your continuous delivery pipeline with its flexible domain-specific language Learn more Jul 20 Wed 6:00 pm San Francisco JAM Meet Blue Ocean Jul 21 Thu 6:30 pm Dublin JAM Docker and Jenkins Jul 23 Sat 10:00 am Guadalajara JAM Pipeline Plugin Workshop Sep 13 Tue 9:00 am Jenkins World 2016 The largest Jenkins gathering in 2016. Three full days of Jenkins learning and networking with heavy contributors from around the globe. CFP is CLOSED. Recent Blog Posts Jul 14 New packages for Jenkins 2.7.1 We created new native packages for Jenkins 2.7.1 today. These replace the existing packages. Due to a release process issue, the packaging (RPM, etc.) was created the same way as Jenkins 1.x LTS, resulting in problems starting Jenkins on some platforms: While we dropped support for AJP in Jenkins 2.0, some 1.x packages had it enabled by default, resulting in an exception during startup. These... Daniel Beck jenkins2 lts Jul 07 Jenkins 2 hits LTS It’s been almost three months since we’ve released Jenkins 2.0, the first ever major version upgrade for this 10 year old project. The 2.x versions since then has been adopted by more than 20% of the users, but one segment of users who haven’t seen the benefits of Jenkins 2 is those who has been running LTS releases. But that is no more! The new... kohsuke lts jenkins2 Jul 01 Publishing HTML Reports in Pipeline This is a guest post by Liam Newman, Technical Evangelist at Cloudbees. Most projects need more that just JUnit result reporting. Rather than writing a custom plugin for each type of report, we can use the HTML Publisher Plugin. Let’s Make This Quick I’ve found a Ruby project, hermann, I’d like to build using Jenkins Pipeline. I’d also like to have the code coverage results published with each build job. ... Liam Newman pipeline plugins ruby Jun 30 GSoC: External Workspace Manager Plugin alpha version Currently it’s quite difficult to share and reuse the same workspace between multiple jobs and across nodes. There are some possible workarounds for achieving this, but each of them has its own drawback, e.g. stash/unstash pre-made artifacts, Copy Artifacts plugin or advanced job settings. A viable solution for this problem is the External Workspace Manager plugin, which facilitates workspace share and reuse across multiple Jenkins jobs and nodes. It... Alexandru Somai pipeline plugins external-workspace-manager gsoc Jun 29 Migrating from chained Freestyle jobs to Pipelines This is a guest post by R. Tyler Croy, who is a long-time contributor to Jenkins and the primary contact for Jenkins project infrastructure. He is also a Jenkins Evangelist at CloudBees, Inc. For ages I have used the ""Build After"" feature in Jenkins to cobble together what one might refer to as a ""pipeline"" of sorts. The Jenkins project itself, a major consumer of Jenkins, has used these daisy-chained... R. Tyler Croy pipeline infra Jun 21 GSoC: Mid-term presentations by students on June 23 and 24 As you probably know, on this year Jenkins projects participates in Google Summer of Code 2016. You can find more information about the accepted projects on the GSoC subproject page and in the Jenkins Developer mailing list. On this week GSoC students are going to present their projects as a part of mid-term evaluation, which covers one month of community bonding and one month of coding. We would like to... Oleg Nenashev core gsoc plugin general Jun 16 Faster Pipelines with the Parallel Test Executor Plugin This is a guest post by Liam Newman, Technical Evangelist at Cloudbees. In this blog post, I’ll show you how to speed up your pipeline by using the Parallel Test Executor Plugin. So much to do, so little time…​ Every time I’ve moved a team to continuous integration and delivery, one problem we always encounter is how to run all the tests needed to ensure high-quality changes while still keeping pipeline... Liam Newman pipeline plugins Jun 15 Jenkins Pipeline Scalability in the Enterprise This is a guest post by Damien Coraboeuf, Jenkins project contributor and Continuous Delivery consultant. Implementing a CI/CD solution based on Jenkins has become very easy. Dealing with hundreds of jobs? Not so much. Having to scale to thousands of jobs? Now this is a real challenge. This is the story of a journey to get out of the jungle of jobs…​ Start of the journey At the beginning of the... Damien Coraboeuf jenkins scalability dsl Jun 14 Jenkins World Agenda is Live! Join us in Santa Clara, California on September 13-15, 2016! We are excited to announce the Jenkins World agenda is now live. There will be 50+ sessions, keynotes, training, certifications and workshops. Here are a few highlights of what you can expect: High level topics Continuous delivery DevOps Microservices architectures Testing Automation tools Plugin development Pipeline Best practices And much more Additionally, Jenkins World offers great opportunities for hands-on learning, exploring and networking: Plugin Development Workshop Due to its popularity in... Alyssa Tong event Jun 14 GSoC Project Intro: Support Core Plugin Improvements About me I am Minudika Malshan, an undergraduate student in Computer Science and Engineering from University of Moratuwa, Sri Lanka. As a person who is passionate in open source software development and seeking for new knowledge and experience, I am willing to give my contribution for this project. LinkedIn | Twitter Abstract The Support-Core Plugin provides the basic infrastructure for generating ""bundles"" of support information with Jenkins. There are two... Minudika Malshan core gsoc plugin support-core We thank the following organizations for their major commitments to support the Jenkins project. We thank the following organizations for their support of the Jenkins project through free and/or open source licensing programs. Atlassian Contegix Datadog Jet Brains JFrog Mac Cloud PagerDuty XMission Resources Events Documentation Blog Solutions Android C/C++ Docker Embedded GitHub Java Continuous Delivery Python Ruby Project Issue tracker Wiki GitHub Jenkins on Jenkins Community Users mailing list Developers mailing list Twitter Reddit Improve this page | Page history The content driving this site is licensed under the Creative Commons Attribution-ShareAlike 4.0 license."	"null"	"null"	"Provides server-based deployment services."	"true"
"Continuous Integration"	"TeamCity"	"http://www.jetbrains.com/teamcity/"	"JetBrain's CI solution with a free version."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"TeamCity — Your 24/7 Build Engineer All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search TeamCity What's New Features Docs & Demos Plugins Licensing & Upgrade Download Powerful Continuous Integration out of the box Download Free or Take a tour Benefits Why TeamCity is better for you for developers for admins for build engineers for managers for pandas Perform better Do you practice a traditional approach to Continuous Integration, or prefer Feature Branches with Git or Mercurial? Either way TeamCity has got you covered with a wide range of developer-oriented features to take your team's performance to the next level. Start saving your time from day one Whether you develop in Java, .NET or for mobile platforms, TeamCity has the essentials you need to get started in a matter of minutes, right inside the installer package. Extend as you go Whenever you need special additional functionality, choose from over 100 ready-to-use plugins. Or, add custom features by creating your own plugins using the TeamCity Open API. Enjoy all-around customer support Never feel left alone. Get help from various support channels including a public issue tracker, community forum, and comprehensive online documentation. Rely on scalable architecture and licensing TeamCity gets smarter as you get bigger. Its licensing model allows you to start completely free, and smoothly expand your server capacities as you need more power. Integrate and deploy continuously Initially a Continuous Integration server, TeamCity has encompassed all the features you expect from a mature Continuous Deployment platform. Today it is the best choice you can make for both. Pandas love watching your builds turning green even more than they love bamboo. TeamCity makes them happy. Get teamcity It’s absolutely free Professional edition free forever access to all product features support via the forum and issue tracker 20 build configurations 3 build agents perfect for small teams and individual developers Get started now When you feel you’ve grown out of it, you can always move on to Enterprise edition. Features Your 24/7 Build Engineer Powerful Continuous Integration Remote run and pre-tested commit Build, check and run automated tests on the server even before committing your changes – keeping your code base clean at all times. On-the-fly build progress reporting Don’t wait for a build to finish to discover that something is wrong. Smart Configuration Project hierarchy Form your project tree to inherit parent settings and permissions. Templates Create templates with common settings and inherit any number of build configurations from it. Build chains and dependencies Break down a single build procedure into parts that can be run in sequence or in parallel. Comprehensive VCS integration Feature Branches Using feature branches for development? TeamCity will detect and build changes in your branch, as well as merge it to the master. Versioned Settings Synchronize your project settings with VCS, and never lose track of them again. more features What’s new What’s new in TeamCity 9 Move projects among servers Plan less, do more. Preserve full project and changes history, as well as user profiles, when moving your projects from one server to another. Store settings in Version Control Never lose track of your settings! Store your project settings in a Version Control System just like you do with your source code, and use your favorite tool to review and audit them. Always be in control of your building process. Zero maintenance downtime Downtime is no longer an issue. From now on TeamCity runs server clean-up in the background, so that you can enjoy zero downtime and allocate all the server time for you builds. more new features Testi monials 30,000+ customers are building their success with TeamCity You’re in good company! What our customers say @hey__ben Kicked off a build from the pub. I love @teamcity Thank you for such an incredibly good product which is so easy to use and helps make our development team so productive. Tim Kent, BNP Paribas If you really know what you're doing, you can clearly see how superior TC is. Evgeny Goldin, Build Engineer @maspwr In the land of continuous integration, @teamcity has been my best experience thus far. Check it out! @akosma I'm really impressed with JetBrain's @teamcity — outstanding is the word. My new hobby, while struggling with Jenkins, is to check if the thing I'm doing is supported natively in @teamcity (spoiler: it always is). @pauldambra via Twitter Tell me about new product features as they come out Thanks for your request! @teamcity on twitter Bug and issue tracker Community forum TeamCity blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"JetBrain's CI solution with a free version."	"true"
"Continuous Integration"	"Travis"	"https://travis-ci.org"	"Hosted service often used for open-source projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"Hosted service often used for open-source projects."	"true"
"CSV"	"opencsv"	"http://opencsv.sourceforge.net"	"Simple CSV parser with a commercial-friendly license."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"opencsv – General opencsv Last Published: 2016-06-05  | Version: 3.8 opencsv Project Documentation Project Information Dependencies Dependency Information Dependency Management Distribution Management About Issue Tracking Project License Plugin Management Project Plugins Project Team Source Repository Project Summary Project Reports General Opencsv is a very simple csv (comma-separated values) parser library for Java. It was developed because all of current csv parsers I've come across don't have commercial-friendly licenses. FAQ Where can I get it? Source and binaries are available from SourceForge What features does opencsv support? opencsv supports all the basic csv-type things you're likely to want to do: * Arbitrary numbers of values per line. * Ignoring commas in quoted elements. * Handling quoted entries with embedded carriage returns (ie entries that span multiple lines). * Configurable separator and quote characters (or use sensible defaults). * Read all the entries at once, or use an Iterator style modell * Creating csv files from String[] (ie. automatic escaping of embedded quote chars). How do I read and parse a CSV file? If you want to use an Iterator style pattern, you might do something like this:       CSVReader reader = new CSVReader(new FileReader(""yourfile.csv""));      String [] nextLine;      while ((nextLine = reader.readNext()) != null) {         // nextLine[] is an array of values from the line         System.out.println(nextLine[0] + nextLine[1] + ""etc..."");      }      Or, if you might just want to slurp the whole lot into a List, just call readAll()...       CSVReader reader = new CSVReader(new FileReader(""yourfile.csv""));      List myEntries = reader.readAll();      which will give you a List of String[] that you can iterate over. If all else fails, check out the Javadocs. Can I use my own separators and quote characters? Yes. There are constructors that cater for supplying your own separator and quote characters. Say you're using a tab for your separator, you can do something like this:       CSVReader reader = new CSVReader(new FileReader(""yourfile.csv""), '\t');      And if you single quoted your escaped characters rather than double quote them, you can use the three arg constructor:       CSVReader reader = new CSVReader(new FileReader(""yourfile.csv""), '\t', '\'');      You may also skip the first few lines of the file if you know that the content doesn't start till later in the file. So, for example, you can skip the first two lines by doing:       CSVReader reader = new CSVReader(new FileReader(""yourfile.csv""), '\t', '\'', 2);      Can I write csv files with opencsv? Yes. There is a CSVWriter in the same package that follows the same semantics as the CSVReader. For example, to write a tab separated file:       CSVWriter writer = new CSVWriter(new FileWriter(""yourfile.csv""), '\t');      // feed in your array (or convert your data to an array)      String[] entries = ""first#second#third"".split(""#"");      writer.writeNext(entries); 	 writer.close();      If you'd prefer to use your own quote characters, you may use the three arg version of the constructor, which takes a quote character (or feel free to pass in CSVWriter.NO_QUOTE_CHARACTER). You can also customise the line terminators used in the generated file (which is handy when you're exporting from your Linux web application to Windows clients). There is a constructor argument for this purpose. Can I dump out SQL tables to CSV? Yes you can. Sean Sullivan added a neat feature to CSVWriter so you can pass writeAll() a ResultSet.       java.sql.ResultSet myResultSet = ....      writer.writeAll(myResultSet, includeHeaders);      Is there a way to bind my CSV file to a list of Javabeans? Yes there is. Kyle Miller added a set of classes to allow you to bind a CSV file to a list of JavaBeans based on column name, column position, or a custom mapping strategy. You can find the new classes in the com.opencsv.bean package. Here's how you can map to a java bean based on the field positions in your CSV file:      ColumnPositionMappingStrategy strat = new ColumnPositionMappingStrategy();     strat.setType(YourOrderBean.class);     String[] columns = new String[] {""name"", ""orderNumber"", ""id""}; // the fields to bind do in your JavaBean     strat.setColumnMapping(columns);      CsvToBean csv = new CsvToBean();     List list = csv.parse(strat, yourReader);      Tom Squires extended this feature to allow annotation-based binding of CSV file to Java Beans. Consider the following Bean:           import com.opencsv.bean.CsvBind;          import java.util.Date;           public class SimpleAnnotatedMockBean {                @CsvBind                private String name;                @CsvBind                private String orderNumber;                @CsvBind(required = true)                private int num;                private Date someOtherField;                 public String getName() {                    return name;                }                 public String getOrderNumber() {                    return orderNumber;                }                 public int getNum() {                    return num;                }          }        And the following code:           HeaderColumnNameMappingStrategy<SimpleAnnotatedMockBean> strategy = new HeaderColumnNameMappingStrategy<>();          strategy.setType(SimpleAnnotatedMockBean.class);          CsvToBean<SimpleAnnotatedMockBean> csvToBean = new CsvToBean<>();          List<SimpleAnnotatedMockBean> beanList = csvToBean.parse(strategy, createReader());        The resulting beanList variable will contain a List of SimpleAnnotatedMockBean objects with the name, orderNumber and num fields populated. The someOtherField property will not have been populated, because it was not annotated with @CsvBind. For more detailed examples, check out the test cases for each of the available mapping strategies under the /test/java/com/opencsv/bean/. Other Stuff Can I use opencsv in my commercial applications? Yes. opencsv is available under a commercial-friendly Apache 2.0 license. You are free to include it in your commericial applications without any fee or charge, and you are free to modify it to suit your circumstances. To find out more details of the license, read the Apache 2.0 license agreement Can I get the source? More example code? You can view the source from the opencsv source section. The source section also gives you the url to the git repository so you can download source code. There is also a sample addressbook csv reader in the /examples directory. And for extra marks, there's a JUnit test suite in the /test directory. How can I use it in my Maven projects? Add a dependency element to your pom:    <dependency>      <groupId>com.opencsv</groupId>      <artifactId>opencsv</artifactId>      <version>3.7</version>   </dependency>   Who maintains opencsv? opencsv was developed in a couple of hours by Glen Smith. You can read his blog for more info and contact details. Kyle Miller contributed the bean binding work. Sean Sullivan contributed work and was maintainer for a time. Scott Conway has done tons of bug fixing including upgrading the source code to Java 5, and is the current (only) maintainer of the project. Scott took a hiatus in 2012-2014 due to work/family demands but came back when Maciek Opala contacted him for fixes for issues the Groovy language was having using opencsv (that's right - you heard it! Groovy uses opencsv!!). But that was when he realized he was the only one still on the project because none of the other admins stepped in to fix issues :( J.C. Romanda contributed several fixes. Maciek Opala contributed alot of his time modernizing opencsv. He upgraded the code to Java 7, moved the repository to git and fixed several issues. Tom Squires has expanded on the bean work done by Kyle Miller to add annotations. Reporting issues You can report it on the support page at Sourceforge. Please post a sample file that demonstrates your issue. For bonus marks, post a patch too. :-) Copyright © 2016. All rights reserved."	"null"	"null"	"Simple CSV parser with a commercial-friendly license."	"true"
"CSV"	"Super CSV"	"http://super-csv.github.io/super-csv/"	"Powerful CSV parser with support for Dozer, Joda-Time and Java 8."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"150"	"15"	"50"	"GitHub - super-csv/super-csv: A fast, programmer-friendly, free CSV library for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 150 Fork 50 super-csv/super-csv Code Issues 27 Pull requests 5 Wiki Pulse Graphs A fast, programmer-friendly, free CSV library for Java http://super-csv.github.io/super-csv 426 commits 2 branches 13 releases 14 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v2.4.0 v2.3.1 v2.3.0 v2.2.1 v2.2.0 v2.1.0 v2.0.1 v2.0.0 v2.0.0-beta-1 v1.52 v1.50 v1.31 POST_DDV_BRANCH Nothing to show New pull request Latest commit 30ef366 Jun 8, 2016 kbilsted Merge pull request #103 from ash211/escaped_quotes … Quote Escape Character Permalink Failed to load latest commit information. src/site Support quoteEscapeChar in writes May 23, 2016 super-csv-benchmark [maven-release-plugin] prepare for next development iteration Oct 29, 2015 super-csv-distribution [maven-release-plugin] prepare for next development iteration Oct 29, 2015 super-csv-dozer [maven-release-plugin] prepare for next development iteration Oct 29, 2015 super-csv-java8 added missing license headers May 24, 2016 super-csv-joda added missing license headers May 24, 2016 super-csv Update test to accommodate earlier should -> must change in logging Jun 7, 2016 .gitattributes Added git and travis config files Nov 22, 2014 .gitignore Merge remote-tracking branch 'origin/master' into escaped_quotes May 24, 2016 .project * Added new ParseEnum cell processor (patch supplied by Adrian Ber) Nov 19, 2013 .travis.yml Added English locale to build. #18 Jan 30, 2015 LICENSE.txt git-svn-id: http://svn.code.sf.net/p/supercsv/code/trunk@4 01ba9438-b… Sep 5, 2007 README.md Update README.md May 24, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Oct 29, 2015 supercsv_eclipse_cleanup.xml Set svn:eol-style=native on all files and removed all carriage return… Jan 10, 2013 supercsv_eclipse_formatter.xml Set svn:eol-style=native on all files and removed all carriage return… Jan 10, 2013 README.md super-csv Dear super-csv community, we are looking for people to help maintain super-csv. See https://github.com/super-csv/super-csv/issues/47 Super CSV is a fast, programmer-friendly, open-source library for reading and writing CSV files with Java. It is used by a number of large projects and is being downloaded 19000+ times/month from the Maven repository. Documentation: http://super-csv.github.io/super-csv Download Instructions: http://super-csv.github.io/super-csv/downloading.html GitHub: https://github.com/super-csv/super-csv Free software: Apache License, Version 2.0 Requirements: Java 1.5 It is highly configurable, and supports reading and writing with POJOs, Maps and Lists. It also has support for deep-mapping and index-based mapping with POJOs, using the powerful Dozer extension. Its flexible 'Cell Processor' API automates data type conversions (parsing and formatting Dates, Integers, Booleans etc) and enforces constraints (mandatory columns, matching against regular expressions etc) - and it's easy to write your own if required. Super CSV is actively maintained, and the developers are ready and willing to help out if you get stuck :) Please check out the documentation for examples and help getting started. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/super-csv/super-csv"	"Powerful CSV parser with support for Dozer, Joda-Time and Java 8."	"true"
"CSV"	"uniVocity-parsers"	"https://github.com/uniVocity/univocity-parsers"	"One of the fastest and most feature-complete CSV. Also comes with parsers for TSV and fixed width records."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"217"	"26"	"61"	"GitHub - uniVocity/univocity-parsers: uniVocity-parsers is a suite of extremely fast and reliable parsers for Java. It provides a consistent interface for handling different file formats, and a solid framework for the development of new parsers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 217 Fork 61 uniVocity/univocity-parsers Code Issues 3 Pull requests 0 Pulse Graphs uniVocity-parsers is a suite of extremely fast and reliable parsers for Java. It provides a consistent interface for handling different file formats, and a solid framework for the development of new parsers. 454 commits 6 branches 26 releases Fetching contributors Java 99.3% HTML 0.7% Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop hotfix-1.5.4 hotfix-1.5.5 hotfix-1.5.6 hotfix-2.0.1 master Nothing to show v2.1.2 v2.1.1 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v1.5.6 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.0 v1.3.2 v1.3.1 v1.3.0 v1.2.2 v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit bec13c8 Jul 15, 2016 jbax fixed issue in newly refactored method isCustomAnnotation() Permalink Failed to load latest commit information. .settings Fixed broken javadocs discovered when building with JDK 7 Aug 6, 2014 images adjusted path to SettingsExamples.java Jul 12, 2014 src fixed issue in newly refactored method isCustomAnnotation() Jul 15, 2016 .classpath Publishing first stable version of uniVocity-parsers. Jul 12, 2014 .gitignore adding osx's .DS_STORE files to gitignore Feb 15, 2016 .project Publishing first stable version of uniVocity-parsers. Jul 12, 2014 LICENSE-2.0.html formatting & cleaning up code Jul 15, 2015 README.md updating version in README. Jun 9, 2016 pom.xml Corrected version Jul 15, 2016 README.md Welcome to uniVocity-parsers uniVocity-parsers is a collection of extremely fast and reliable parsers for Java. It provides a consistent interface for handling different file formats, and a solid framework for the development of new parsers. Table of contents Introduction Parsers Installation Background Examples Reading CSV To read all rows of a CSV (the quick and easy way) To read all rows of a CSV (iterator-style) Escaping quote escape characters Read all rows of a CSV (the powerful version) Using annotations to map your java beans Using your own conversions in annotations Reading master-detail style files Parsing fixed-width files Parsing TSV files Column selection Reading columns instead of rows Parsing columns from a CSV file Using the batched column processor in a Fixed-With input Reading columns from a TSV while converting the parsed content to Objects Processing rows in parallel Parsing individual Strings Settings Fixed-width settings Format Settings CSV format Fixed width format TSV format Writing Quick and simple CSV writing example TSV writing example Writing row by row, with comments Writing with column selection Writing with value conversions (using ObjectRowWriterProcessor) Writing annotated java beans Writing value by value Introduction The project was started and coded by uniVocity Software, an Australian company that develops uniVocity, a commercial data integration API for Java. It soon became apparent that many parsers out there didn't provide enough flexibility, throughput or reliability for massive and diverse (a nice word for messy) inputs. Another inconvenience was the difficulty in extending these parsers and dealing with a different beast for each format. We decided to then build our own architecture for parsing text files from the ground up. The main goal of this architecture is to provide maximum performance and flexibility while making it easy for anyone to create new parsers. Parsers uniVocity-parsers currently provides parsers for: CSV files (it's the fastest CSV parser for Java you can find) Fixed-width files TSV files We will introduce more parsers over time. Note many delimiter-separated formats, such as pipe-separated, are subsets of CSV and our CSV parser should handle them. We are planning to introduce parsers for this and other specific formats to uniVocity-parsers later on. Please let us know what you need the most by sending and e-mail to parsers@univocity.com. We will introduce parsers for formats that are of public interest. We also documented every single class for you, so you can try to create your own parsers for your own particular purposes. We will help anyone building their own parsers, and offer commercial support for all parsers included in the API (send us an e-mail to support@univocity.com, a dedicated team of experts are ready to assist you). Installation Just download the jar file from here. Or, if you use maven, simply add the following to your pom.xml ... <dependency>     <groupId>com.univocity</groupId>     <artifactId>univocity-parsers</artifactId>     <version>2.1.2</version>     <type>jar</type> </dependency> ...  Background uniVocity-parsers have the following functional requirements: Support parsing and writing of text files in tabular format, especially: 1.1 CSV files 1.2 Fixed-width files 1.3 TSV files Handle common non-standard functions such as 2.1 File comments 2.2 Partial reads 2.3 Record skipping Column selection Annotation based mapping with data conversions Handle edge cases such as multi-line fields and portable newlines Process the input in parallel. And these non-functional requirements: Be fast and flexible. Have no external dependencies to existing libraries. Be simple to use. Provide a consistent API for different parsers. Be flexible and heavily configurable. Be extremely fast and memory efficient - yes, we micro optimize. Provide an extensible architecture: You should be able to write your own parser using ~200 lines of code and have all of the above for free. Examples Reading CSV In the following examples, the example.csv file will be used as the input. It is not as simple as you might think. We've seen some known CSV parsers being unable to read this one correctly:   # This example was extracted from Wikipedia (en.wikipedia.org/wiki/Comma-separated_values) # # 2 double quotes ("""") are used as the escape sequence for quoted fields, as per the RFC4180 standard #    Year,Make,Model,Description,Price 1997,Ford,E350,""ac, abs, moon"",3000.00 1999,Chevy,""Venture """"Extended Edition"""""","""",4900.00  # Look, a multi line value. And blank rows around it!  1996,Jeep,Grand Cherokee,""MUST SELL! air, moon roof, loaded"",4799.00 1999,Chevy,""Venture """"Extended Edition, Very Large"""""",,5000.00 ,,""Venture """"Extended Edition"""""","""",4900.00     All parsers work with an instance of java.io.Reader, so you will see calls such as getReader(""/examples/example.csv"") everywhere. This is just a helper method we use to build the examples (source code here):     public Reader getReader(String relativePath) {         ...         return new InputStreamReader(this.getClass().getResourceAsStream(relativePath), ""UTF-8"");         ...     }   So let's get started! To read all rows of a CSV (the quick and easy way)       CsvParserSettings settings = new CsvParserSettings();     //the file used in the example uses '\n' as the line separator sequence.     //the line separator sequence is defined here to ensure systems such as MacOS and Windows     //are able to process this file correctly (MacOS uses '\r'; and Windows uses '\r\n').     settings.getFormat().setLineSeparator(""\n"");      // creates a CSV parser     CsvParser parser = new CsvParser(settings);      // parses all rows in one go.     List<String[]> allRows = parser.parseAll(getReader(""/examples/example.csv""));     The output will be:      1 [Year, Make, Model, Description, Price]     -----------------------     2 [1997, Ford, E350, ac, abs, moon, 3000.00]     -----------------------     3 [1999, Chevy, Venture ""Extended Edition"", null, 4900.00]     -----------------------     4 [1996, Jeep, Grand Cherokee, MUST SELL!     air, moon roof, loaded, 4799.00]     -----------------------     5 [1999, Chevy, Venture ""Extended Edition, Very Large"", null, 5000.00]     -----------------------     6 [null, null, Venture ""Extended Edition"", null, 4900.00]     -----------------------    To read all rows of a CSV (iterator-style)       // creates a CSV parser     CsvParser parser = new CsvParser(settings);      // call beginParsing to read records one by one, iterator-style.     parser.beginParsing(getReader(""/examples/example.csv""));      String[] row;     while ((row = parser.parseNext()) != null) {         println(out, Arrays.toString(row));     }      // The resources are closed automatically when the end of the input is reached,     // or when an error happens, but you can call stopParsing() at any time.      // You only need to use this if you are not parsing the entire content.     // But it doesn't hurt if you call it anyway.     parser.stopParsing();     Escaping quote escape characters In CSV, quotes inside quoted values must be escaped. For example, the sequence [\""] will a quote character inside a quoted value. But what if your quoted value ends with the backslash? In this case you need to escape the escape character. Consider the following input in escape.csv:      ""You are \""beautiful\""""     ""Yes, \\\""in the inside\""\\""    To parse this properly, you need to define the CharToEscapeQuoteEscaping:      // quotes inside quoted values are escaped as \""     settings.getFormat().setQuoteEscape('\\');      // but if two backslashes are found before a quote symbol they represent a single slash.     settings.getFormat().setCharToEscapeQuoteEscaping('\\');    This way the data will be correctly processed as:      [You are ""beautiful""]     [Yes, \""in the inside""\]    Read all rows of a CSV (the powerful version) To have greater control over the parsing process, use a RowProcessor. uniVocity-parsers provides some useful default implementations but you can always provide your own. The following example uses RowListProcessor, which just stores the rows read from a file into a List:       // The settings object provides many configuration options     CsvParserSettings parserSettings = new CsvParserSettings();      //You can configure the parser to automatically detect what line separator sequence is in the input     parserSettings.setLineSeparatorDetectionEnabled(true);      // A RowListProcessor stores each parsed row in a List.     RowListProcessor rowProcessor = new RowListProcessor();      // You can configure the parser to use a RowProcessor to process the values of each parsed row.     // You will find more RowProcessors in the 'com.univocity.parsers.common.processor' package, but you can also create your own.     parserSettings.setRowProcessor(rowProcessor);      // Let's consider the first parsed row as the headers of each column in the file.     parserSettings.setHeaderExtractionEnabled(true);      // creates a parser instance with the given settings     CsvParser parser = new CsvParser(parserSettings);      // the 'parse' method will parse the file and delegate each parsed row to the RowProcessor you defined     parser.parse(getReader(""/examples/example.csv""));      // get the parsed records from the RowListProcessor here.     // Note that different implementations of RowProcessor will provide different sets of functionalities.     String[] headers = rowProcessor.getHeaders();     List<String[]> rows = rowProcessor.getRows();     Each row will contain:      [Year, Make, Model, Description, Price]     =======================     1 [1997, Ford, E350, ac, abs, moon, 3000.00]     -----------------------     2 [1999, Chevy, Venture ""Extended Edition"", null, 4900.00]     -----------------------     3 [1996, Jeep, Grand Cherokee, MUST SELL!     air, moon roof, loaded, 4799.00]     -----------------------     4 [1999, Chevy, Venture ""Extended Edition, Very Large"", null, 5000.00]     -----------------------     5 [null, null, Venture ""Extended Edition"", null, 4900.00]     -----------------------    You can also use a ObjectRowProcessor, which will produce rows of objects. You can convert values using an implementation of the Conversion interface. The Conversions class provides some useful defaults for you. For convenience, the ObjectRowListProcessor can be used to store all rows into a list.       // ObjectRowProcessor converts the parsed values and gives you the resulting row.     ObjectRowProcessor rowProcessor = new ObjectRowProcessor() {         @Override         public void rowProcessed(Object[] row, ParsingContext context) {             //here is the row. Let's just print it.             println(out, Arrays.toString(row));         }     };      // converts values in the ""Price"" column (index 4) to BigDecimal     rowProcessor.convertIndexes(Conversions.toBigDecimal()).set(4);      // converts the values in columns ""Make, Model and Description"" to lower case, and sets the value ""chevy"" to null.     rowProcessor.convertFields(Conversions.toLowerCase(), Conversions.toNull(""chevy"")).set(""Make"", ""Model"", ""Description"");      // converts the values at index 0 (year) to BigInteger. Nulls are converted to BigInteger.ZERO.     rowProcessor.convertFields(new BigIntegerConversion(BigInteger.ZERO, ""0"")).set(""year"");      CsvParserSettings parserSettings = new CsvParserSettings();     parserSettings.getFormat().setLineSeparator(""\n"");     parserSettings.setRowProcessor(rowProcessor);     parserSettings.setHeaderExtractionEnabled(true);      CsvParser parser = new CsvParser(parserSettings);      //the rowProcessor will be executed here.     parser.parse(getReader(""/examples/example.csv""));     After applying the conversions, the output will be:      [1997, ford, e350, ac, abs, moon, 3000.00]     [1999, null, venture ""extended edition"", null, 4900.00]     [1996, jeep, grand cherokee, must sell!     air, moon roof, loaded, 4799.00]     [1999, null, venture ""extended edition, very large"", null, 5000.00]     [0, null, venture ""extended edition"", null, 4900.00]    Using annotations to map your java beans Use the Parsed annotation to map the property to a field in the CSV file. You can map the property using a field name as declared in the headers, or the column index in the input. Each annotated operation maps to a Conversion and they are executed in the same sequence they are declared. This example works with the csv file bean_test.csv     class TestBean {      // if the value parsed in the quantity column is ""?"" or ""-"", it will be replaced by null.     @NullString(nulls = { ""?"", ""-"" })     // if a value resolves to null, it will be converted to the String ""0"".     @Parsed(defaultNullRead = ""0"")     private Integer quantity;   // The attribute type defines which conversion will be executed when processing the value.     // In this case, IntegerConversion will be used.     // The attribute name will be matched against the column header in the file automatically.      @Trim     @LowerCase     // the value for the comments attribute is in the column at index 4 (0 is the first column, so this means fifth column in the file)     @Parsed(index = 4)     private String comments;      // you can also explicitly give the name of a column in the file.     @Parsed(field = ""amount"")     private BigDecimal amount;      @Trim     @LowerCase     // values ""no"", ""n"" and ""null"" will be converted to false; values ""yes"" and ""y"" will be converted to true     @BooleanString(falseStrings = { ""no"", ""n"", ""null"" }, trueStrings = { ""yes"", ""y"" })     @Parsed     private Boolean pending;      //   Instances of annotated classes are created with by BeanProcessor and BeanListProcessor:      // BeanListProcessor converts each parsed row to an instance of a given class, then stores each instance into a list.     BeanListProcessor<TestBean> rowProcessor = new BeanListProcessor<TestBean>(TestBean.class);      CsvParserSettings parserSettings = new CsvParserSettings();     parserSettings.setRowProcessor(rowProcessor);     parserSettings.setHeaderExtractionEnabled(true);      CsvParser parser = new CsvParser(parserSettings);     parser.parse(getReader(""/examples/bean_test.csv""));      // The BeanListProcessor provides a list of objects extracted from the input.     List<TestBean> beans = rowProcessor.getBeans();     Here is the output produced by the toString() method of each TestBean instance:      [TestBean [quantity=1, comments=?, amount=555.999, pending=true], TestBean [quantity=0, comments="" something "", amount=null, pending=false]]    Using your own conversions in annotations Any implementation of Conversion can be used in fields annotated with Parsed. The following class converts delimited Strings to a set of words (when reading) and a set of words to a delimited String with all words in the set (for writing). To do this, all you need is to introduce a varargs constructor to your class, so it can also be initialized with String... args:     class WordsToSetConversion implements Conversion<String, Set<String>> {      private final String separator;     private final boolean toUpperCase;      public WordsToSetConversion(String... args) {     String separator = "","";     boolean toUpperCase = true;      if (args.length == 1) {         separator = args[0];     }      if (args.length == 2) {         toUpperCase = Boolean.valueOf(args[1]);     }      this.separator = separator;     this.toUpperCase = toUpperCase;     }      public WordsToSetConversion(String separator, boolean toUpperCase) {     this.separator = separator;     this.toUpperCase = toUpperCase;     }      @Override     public Set<String> execute(String input) {     if (input == null) {         return Collections.emptySet();     }      if (toUpperCase) {         input = input.toUpperCase();     }      Set<String> out = new TreeSet<String>();     for (String token : input.split(separator)) {         //extracting words separated by white space as well         for (String word : token.trim().split(""\\s"")) {             out.add(word.trim());         }     }      return out;     }      //   Let's use our beaten up example to create instances of Car from all entries in example.csv. Now we want to split the words in the description field add them to a set of words. All we hate to do is this:     class Car {     @Parsed     private Integer year;      @Convert(conversionClass = WordsToSetConversion.class, args = { "","", ""true"" })     @Parsed     private Set<String> description;      //   uniVocity-parsers will create an instance of WordsToSetConversion using the given arguments. Now, let's use the good old BeanListProcessor to parse and generate a list of Cars from our file      BeanListProcessor<Car> rowProcessor = new BeanListProcessor<Car>(Car.class);     parserSettings.setRowProcessor(rowProcessor);      CsvParser parser = new CsvParser(parserSettings);     parser.parse(getReader(""/examples/example.csv""));      //Let's get our cars     List<Car> cars = rowProcessor.getBeans();     for (Car car : cars) {         // Let's get only those cars that actually have some description         if (!car.getDescription().isEmpty()) {             println(out, car.getDescription() + "" - "" + car.toString());         }     }    After executing this to print only those cars that have a description, the output will be:      [ABS, AC, MOON] - year=1997, make=Ford, model=E350, price=3000.00     [AIR, LOADED, MOON, MUST, ROOF, SELL!] - year=1996, make=Jeep, model=Grand Cherokee, price=4799.00    Reading master-detail style files Use MasterDetailProcessor or MasterDetailListProcessor to produce MasterDetailRecord objects. A simple example a master-detail file is in the master_detail.csv file. Each MasterDetailRecord holds a master record row and its list of associated detail rows.      // 1st, Create a RowProcessor to process all ""detail"" elements     ObjectRowListProcessor detailProcessor = new ObjectRowListProcessor();      // converts values at in the ""Amount"" column (position 1 in the file) to integer.     detailProcessor.convertIndexes(Conversions.toInteger()).set(1);      // 2nd, Create MasterDetailProcessor to identify whether or not a row is the master row.     // the row placement argument indicates whether the master detail row occurs before or after a sequence of ""detail"" rows.     MasterDetailListProcessor masterRowProcessor = new MasterDetailListProcessor(RowPlacement.BOTTOM, detailProcessor) {         @Override         protected boolean isMasterRecord(String[] row, ParsingContext context) {             //Returns true if the parsed row is the master row.             //In this example, rows that have ""Total"" in the first column are master rows.             return ""Total"".equals(row[0]);         }     };     // We want our master rows to store BigIntegers in the ""Amount"" column     masterRowProcessor.convertIndexes(Conversions.toBigInteger()).set(1);      CsvParserSettings parserSettings = new CsvParserSettings();     parserSettings.setHeaderExtractionEnabled(true);      // Set the RowProcessor to the masterRowProcessor.     parserSettings.setRowProcessor(masterRowProcessor);      CsvParser parser = new CsvParser(parserSettings);     parser.parse(getReader(""/examples/master_detail.csv""));      // Here we get the MasterDetailRecord elements.     List<MasterDetailRecord> rows = masterRowProcessor.getRecords();     MasterDetailRecord masterRecord = rows.get(0);      // The master record has one master row and multiple detail rows.     Object[] masterRow = masterRecord.getMasterRow();     List<Object[]> detailRows = masterRecord.getDetailRows();    After printing the master row and its details rows, the output is:      [Total, 100]     =======================     1 [Item1, 50]     -----------------------     2 [Item2, 40]     -----------------------     3 [Item3, 10]     -----------------------    Parsing fixed-width files All functionalities you have with the CSV file format are available for the fixed-width format (and any other parser we introduce in the future). In the example.txt fixed-width file, we chose to fill the unwritten spaces with underscores ('_'), so in the parser settings we set the padding to underscore:       YearMake_Model___________________________________Description_____________________________Price___     1997Ford_E350____________________________________ac, abs, moon___________________________3000.00_     1999ChevyVenture ""Extended Edition""______________________________________________________4900.00_     1996Jeep_Grand Cherokee__________________________MUST SELL!     air, moon roof, loaded_______4799.00_     1999ChevyVenture ""Extended Edition, Very Large""__________________________________________5000.00_     _________Venture ""Extended Edition""______________________________________________________4900.00_    The only thing you need to do is to instantiate a different parser:       // creates the sequence of field lengths in the file to be parsed     FixedWidthFieldLengths lengths = new FixedWidthFieldLengths(4, 5, 40, 40, 8);      // creates the default settings for a fixed width parser     FixedWidthParserSettings settings = new FixedWidthParserSettings(lengths);      //sets the character used for padding unwritten spaces in the file     settings.getFormat().setPadding('_');      //the file used in the example uses '\n' as the line separator sequence.     //the line separator sequence is defined here to ensure systems such as MacOS and Windows     //are able to process this file correctly (MacOS uses '\r'; and Windows uses '\r\n').     settings.getFormat().setLineSeparator(""\n"");      // creates a fixed-width parser with the given settings     FixedWidthParser parser = new FixedWidthParser(settings);      // parses all rows in one go.     List<String[]> allRows = parser.parseAll(getReader(""/examples/example.txt""));     Use FixedWidthFieldLengths to define what is the length of each field in the input. With that information we can then create the FixedWidthParserSettings. The output will be:      1 [Year, Make, Model, Description, Price]     -----------------------     2 [1997, Ford, E350, ac, abs, moon, 3000.00]     -----------------------     3 [1999, Chevy, Venture ""Extended Edition"", null, 4900.00]     -----------------------     4 [1996, Jeep, Grand Cherokee, MUST SELL!     air, moon roof, loaded, 4799.00]     -----------------------     5 [1999, Chevy, Venture ""Extended Edition, Very Large"", null, 5000.00]     -----------------------     6 [null, null, Venture ""Extended Edition"", null, 4900.00]     -----------------------    All the rest is the same as with CSV parsers. You can use all RowProcessors for annotations, conversions, master-detail records and anything else we (or you) might introduce in the future. We created a set of examples using fixed with parsing in the FixedWidthParserExamples.java Parsing TSV files To parse TSV files, simply use a TsvParser. As we keep saying, the API is essentially same for every parser. This is the input: # TSV's can also have comments # Multi-line records are escaped with \n. # Accepted escape sequences are: \n, \t, \r and \\     Year    Make    Model   Description Price 1997    Ford    E350    ac, abs, moon   3000.00 1999    Chevy   Venture ""Extended Edition""      4900.00  # Look   a multi line value. And blank rows around it!  1996    Jeep    Grand Cherokee  MUST SELL!\nair, moon roof, loaded  4799.00 1999    Chevy   Venture ""Extended Edition, Very Large""      5000.00         Venture ""Extended Edition""      4900.00  This is the code:       TsvParserSettings settings = new TsvParserSettings();     //the file used in the example uses '\n' as the line separator sequence.     //the line separator sequence is defined here to ensure systems such as MacOS and Windows     //are able to process this file correctly (MacOS uses '\r'; and Windows uses '\r\n').     settings.getFormat().setLineSeparator(""\n"");      // creates a TSV parser     TsvParser parser = new TsvParser(settings);      // parses all rows in one go.     List<String[]> allRows = parser.parseAll(getReader(""/examples/example.tsv""));     The output will be:      1 [Year, Make, Model, Description, Price]     -----------------------     2 [1997, Ford, E350, ac, abs, moon, 3000.00]     -----------------------     3 [1999, Chevy, Venture ""Extended Edition"", null, 4900.00]     -----------------------     4 [1996, Jeep, Grand Cherokee, MUST SELL!     air, moon roof, loaded, 4799.00]     -----------------------     5 [1999, Chevy, Venture ""Extended Edition, Very Large"", null, 5000.00]     -----------------------     6 [null, null, Venture ""Extended Edition"", null, 4900.00]     -----------------------    Column selection Parsing the entire content of each record in a file is a waste of CPU and memory when you are not interested in all columns. uniVocity-parsers lets you choose the columns you need, so values you don't want are simply bypassed. The following examples can be found in the example class SettingsExamples: Consider the example.csv file with:       Year,Make,Model,Description,Price     1997,Ford,E350,""ac, abs, moon"",3000.00     1999,Chevy,""Venture """"Extended Edition"""""","""",4900.00      ...    And the following selection:      // Here we select only the columns ""Price"", ""Year"" and ""Make"".     // The parser just skips the other fields     parserSettings.selectFields(""Price"", ""Year"", ""Make"");      // let's parse with these settings and print the parsed rows.     List<String[]> parsedRows = parseWithSettings(parserSettings);    The output will be:      1 [3000.00, 1997, Ford]     -----------------------     2 [4900.00, 1999, Chevy]     -----------------------     ...    The same output will be obtained with index-based selection.      // Here we select only the columns by their indexes.     // The parser just skips the values in other columns     parserSettings.selectIndexes(4, 0, 1);      // let's parse with these settings and print the parsed rows.     List<String[]> parsedRows = parseWithSettings(parserSettings);    You can also opt to keep the original row format with all columns, but only the values you are interested in being processed:      // Here we select only the columns ""Price"", ""Year"" and ""Make"".     // The parser just skips the other fields     parserSettings.selectFields(""Price"", ""Year"", ""Make"");      // Column reordering is enabled by default. When you disable it,     // all columns will be produced in the order they are defined in the file.     // Fields that were not selected will be null, as they are not processed by the parser     parserSettings.setColumnReorderingEnabled(false);      // Let's parse with these settings and print the parsed rows.     List<String[]> parsedRows = parseWithSettings(parserSettings);    Now the output will be:      1 [1997, Ford, null, null, 3000.00]     -----------------------     2 [1999, Chevy, null, null, 4900.00]     -----------------------     3 [1996, Jeep, null, null, 4799.00]     ...    Reading columns instead of rows Since uniVocity-parsers 1.3.0, a few special types of RowProcessors have been introduced to collect the values of columns instead of rows: ColumnProcessor - reads values of all columns as plain Strings. ObjectColumnProcessor - reads column values as Objects. Any sequence of Conversions can be used to convert the parsed values to the desired object. To avoid problems with memory when processing large inputs, we also introduced the following column processors. These will return the column values processed after a batch of a given number of rows: BatchedColumnProcessor - BatchedObjectColumnProcessor Here are some examples on how to use them: Parsing columns from a CSV file      CsvParserSettings parserSettings = new CsvParserSettings();     parserSettings.getFormat().setLineSeparator(""\n"");     parserSettings.setHeaderExtractionEnabled(true);      // To get the values of all columns, use a column processor     ColumnProcessor rowProcessor = new ColumnProcessor();     parserSettings.setRowProcessor(rowProcessor);      CsvParser parser = new CsvParser(parserSettings);      //This will kick in our column processor     parser.parse(getReader(""/examples/example.csv""));      //Finally, we can get the column values:     Map<String, List<String>> columnValues = rowProcessor.getColumnValuesAsMapOfNames();     Let's see the output. Each row displays the column name and the values parsed on each:      Year -> [1997, 1999, 1996, 1999, null]     Description -> [ac, abs, moon, null, MUST SELL!     air, moon roof, loaded, null, null]     Model -> [E350, Venture ""Extended Edition"", Grand Cherokee, Venture ""Extended Edition, Very Large"", Venture ""Extended Edition""]     Price -> [3000.00, 4900.00, 4799.00, 5000.00, 4900.00]     Make -> [Ford, Chevy, Jeep, Chevy, null]    Using the batched column processor in a Fixed-With input       //To process larger inputs, we can use a batched column processor.     //Here we set the batch size to 3, meaning we'll get the column values of at most 3 rows in each batch.     settings.setRowProcessor(new BatchedColumnProcessor(3) {          @Override         public void batchProcessed(int rowsInThisBatch) {             List<List<String>> columnValues = getColumnValuesAsList();              println(out, ""Batch "" + getBatchesProcessed() + "":"");             int i = 0;             for (List<String> column : columnValues) {                 println(out, ""Column "" + (i++) + "":"" + column);             }         }     });      FixedWidthParser parser = new FixedWidthParser(settings);     parser.parse(getReader(""/examples/example.txt""));     Here we print the column values from each batch of 3 rows. As we have 5 rows in the input, the last batch will have 2 values per column:      Batch 0:     Column 0:[1997, 1999, 1996]     Column 1:[Ford, Chevy, Jeep]     Column 2:[E350, Venture ""Extended Edition"", Grand Cherokee]     Column 3:[ac, abs, moon, null, MUST SELL!     air, moon roof, loaded]     Column 4:[3000.00, 4900.00, 4799.00]     Batch 1:     Column 0:[1999, null]     Column 1:[Chevy, null]     Column 2:[Venture ""Extended Edition, Very Large"", Venture ""Extended Edition""]     Column 3:[null, null]     Column 4:[5000.00, 4900.00]    Reading columns from a TSV while converting the parsed content to Objects       // ObjectColumnProcessor converts the parsed values and stores them in columns     // Use BatchedObjectColumnProcessor to process columns in batches     ObjectColumnProcessor rowProcessor = new ObjectColumnProcessor();      // converts values in the ""Price"" column (index 4) to BigDecimal     rowProcessor.convertIndexes(Conversions.toBigDecimal()).set(4);      // converts the values in columns ""Make, Model and Description"" to lower case, and sets the value ""chevy"" to null.     rowProcessor.convertFields(Conversions.toLowerCase(), Conversions.toNull(""chevy"")).set(""Make"", ""Model"", ""Description"");      // converts the values at index 0 (year) to BigInteger. Nulls are converted to BigInteger.ZERO.     rowProcessor.convertFields(new BigIntegerConversion(BigInteger.ZERO, ""0"")).set(""year"");      parserSettings.setRowProcessor(rowProcessor);      TsvParser parser = new TsvParser(parserSettings);      //the rowProcessor will be executed here.     parser.parse(getReader(""/examples/example.tsv""));      //Let's get the column values:     Map<Integer, List<Object>> columnValues = rowProcessor.getColumnValuesAsMapOfIndexes();     Now we will print the column indexes and their values:      0 -> [1997, 1999, 1996, 1999, 0]     1 -> [ford, null, jeep, null, null]     2 -> [e350, venture ""extended edition"", grand cherokee, venture ""extended edition, very large"", venture ""extended edition""]     3 -> [ac, abs, moon, null, must sell!     air, moon roof, loaded, null, null]     4 -> [3000.00, 4900.00, 4799.00, 5000.00, 4900.00]    Processing rows in parallel As of uniVocity-parsers 1.4.0 you can process rows as they are parsed in a separate thread easily. All you've got to do is to wrap your RowProcessor in a ConcurrentRowProcessor:      parserSettings.setRowProcessor(new ConcurrentRowProcessor(rowProcessor));    Note that this may not always produce faster processing times. uniVocity-parsers is highly optimized and processing your data sequentially will still be faster than in parallel in many cases. We recommend you to profile your particular processing scenario before blindly deciding whether to use this feature. Parsing individual Strings If you are getting rows from an external source, and just need to parse each one, you can simply use the parseLine(String) method. The following example parses TSV lines:      // creates a TSV parser     TsvParser parser = new TsvParser(new TsvParserSettings());      String[] line;     line = parser.parseLine(""A  B   C"");     println(out, Arrays.toString(line));      line = parser.parseLine(""1  2   3   4"");     println(out, Arrays.toString(line));    Which yields:      [A, B, C]     [1, 2, 3, 4]    Settings Each parser has its own settings class, but many configuration options are common across all parsers. The following snippet demonstrates how to use each one of them:      //You can configure the parser to automatically detect what line separator sequence is in the input     parserSettings.setLineSeparatorDetectionEnabled(true);      // sets what is the default value to use when the parsed value is null     parserSettings.setNullValue(""<NULL>"");      // sets what is the default value to use when the parsed value is empty     parserSettings.setEmptyValue(""<EMPTY>""); // for CSV only      // sets the headers of the parsed file. If the headers are set then 'setHeaderExtractionEnabled(true)'     // will make the parser simply ignore the first input row.     parserSettings.setHeaders(""a"", ""b"", ""c"", ""d"", ""e"");      // prints the columns in reverse order.     // NOTE: when fields are selected, all rows produced will have the exact same number of columns     parserSettings.selectFields(""e"", ""d"", ""c"", ""b"", ""a"");      // does not skip leading whitespaces     parserSettings.setIgnoreLeadingWhitespaces(false);      // does not skip trailing whitespaces     parserSettings.setIgnoreTrailingWhitespaces(false);      // reads a fixed number of records then stop and close any resources     parserSettings.setNumberOfRecordsToRead(9);      // does not skip empty lines     parserSettings.setSkipEmptyLines(false);      // sets the maximum number of characters to read in each column.     // The default is 4096 characters. You need this to avoid OutOfMemoryErrors in case a file     // does not have a valid format. In such cases the parser might just keep reading from the input     // until its end or the memory is exhausted. This sets a limit which avoids unwanted JVM crashes.     parserSettings.setMaxCharsPerColumn(100);      // for the same reasons as above, this sets a hard limit on how many columns an input row can have.     // The default is 512.     parserSettings.setMaxColumns(10);      // Sets the number of characters held by the parser's buffer at any given time.     parserSettings.setInputBufferSize(1000);      // Disables the separate thread that loads the input buffer. By default, the input is going to be loaded incrementally     // on a separate thread if the available processor number is greater than 1. Leave this enabled to get better performance     // when parsing big files (> 100 Mb).     parserSettings.setReadInputOnSeparateThread(false);      // let's parse with these settings and print the parsed rows.     List<String[]> parsedRows = parseWithSettings(parserSettings);    The output of the CSV parser with all these settings will be:      1 [<NULL>, <NULL>, <NULL>, <NULL>, <NULL>]     -----------------------     2 [Price, Description, Model, Make, Year]     -----------------------     3 [3000.00, ac, abs, moon, E350, Ford, 1997]     -----------------------     4 [4900.00, <EMPTY>, Venture ""Extended Edition"", Chevy, 1999]     -----------------------     5 [<NULL>, <NULL>, <NULL>, <NULL>,    ]     -----------------------     6 [<NULL>, <NULL>, <NULL>, <NULL>,      ]     -----------------------     7 [4799.00, MUST SELL!     air, moon roof, loaded, Grand Cherokee, Jeep, 1996]     -----------------------     8 [5000.00, <NULL>, Venture ""Extended Edition, Very Large"", Chevy, 1999]     -----------------------     9 [4900.00, <EMPTY>, Venture ""Extended Edition"", <NULL>, <NULL>]     -----------------------     ...    Fixed-width settings      // For the sake of the example, we will not read the last 8 characters (for the Year column).     // We will also NOT set the padding character to '_' so the output makes more sense for reading     // and you can see what characters are being processed     FixedWidthParserSettings parserSettings = new FixedWidthParserSettings(new FixedWidthFieldLengths(4, 5, 40, 40 /*, 8*/));      //the file used in the example uses '\n' as the line separator sequence.     //the line separator sequence is defined here to ensure systems such as MacOS and Windows     //are able to process this file correctly (MacOS uses '\r'; and Windows uses '\r\n').     parserSettings.getFormat().setLineSeparator(""\n"");      // The fixed width parser settings has most of the settings for CSV.     // These are the only extra settings you need:      // If a row has more characters than what is defined, skip them until the end of the line.     parserSettings.setSkipTrailingCharsUntilNewline(true);      // If a record has less characters than what is expected and a new line is found,     // this record is considered parsed. Data in the next row will be parsed as a new record.     parserSettings.setRecordEndsOnNewline(true);      RowListProcessor rowProcessor = new RowListProcessor();      parserSettings.setRowProcessor(rowProcessor);     parserSettings.setHeaderExtractionEnabled(true);      FixedWidthParser parser = new FixedWidthParser(parserSettings);     parser.parse(getReader(""/examples/example.txt""));      List<String[]> rows = rowProcessor.getRows();    The parser output with such configuration for parsing the example.txt file will be:      1 [1997, Ford_, E350____________________________________, ac, abs, moon___________________________]     -----------------------     2 [1999, Chevy, Venture ""Extended Edition""______________, ________________________________________]     -----------------------     3 [1996, Jeep_, Grand Cherokee__________________________, MUST SELL!]     -----------------------     4 [air,, moon, roof, loaded_______4799.00_]     -----------------------     5 [1999, Chevy, Venture ""Extended Edition, Very Large""__, ________________________________________]     -----------------------     6 [____, _____, Venture ""Extended Edition""______________, ________________________________________]     -----------------------    As recordEndsOnNewline = true, lines 3 and 4 are considered different records, instead of a single, multi-line record. To clarity: in line 4, the value of the first column is 'air,', the second column has value 'moon', and the third is 'roof, loaded_______4799.00_'. Format Settings All parser settings have a default format definition. The following attributes are set by default for all parsers: lineSeparator (default System.getProperty(""line.separator"");): this is an array of 1 or 2 characters with the sequence that indicates the end of a line. Using this, you should be able to handle files produced by different operating systems. Of course, if you want your line separator to be ""#$"", you can. normalizedNewline (default \n): used to represent the sequence of 2 characters used as a line separator (e.g. \r\n in Windows). It is used by our parsers/writers to easily handle portable line separators. When parsing, if the sequence of characters defined in lineSeparator is found while reading from the input, it will be transparently replaced by the normalizedNewline character. When writing, normalizedNewline is replaced by the lineSeparator sequence. comment (default #): if the first character of a line of text matches the comment character, then the row will be considered a comment and discarded from the input. CSV format delimiter (default ,): value used to separate individual fields in the input. quote (default ""): value used for escaping values where the field delimiter is part of the value (e.g. the value "" a , b "" is parsed as a , b). quoteEscape (default ""): value used for escaping the quote character inside an already escaped value (e.g. the value "" """" a , b """" "" is parsed as "" a , b ""). Fixed width format In addition to the default format definition, the fixed with format contains: padding (default ' '): value used for filling unwritten spaces. TSV format The TSV format lets you set the default escape character for values that contain \n, \r, \t and \. escapeChar (default \): value used to escape special characters in TSV. Writing As you can see in WriterExamples.java, writing is quite straightforward. All you need is an instance of java.io.Writer (to write the values you provide to some output resource) and a settings object with the configuration of how the values should be written. Quick and simple CSV writing example You can write your data in CSV format using just 3 lines of code:       // All you need is to create an instance of CsvWriter with the default CsvWriterSettings.     // By default, only values that contain a field separator are enclosed within quotes.     // If quotes are part of the value, they are escaped automatically as well.     // Empty rows are discarded automatically.     CsvWriter writer = new CsvWriter(outputWriter, new CsvWriterSettings());      // Write the record headers of this file     writer.writeHeaders(""Year"", ""Make"", ""Model"", ""Description"", ""Price"");      // Here we just tell the writer to write everything and close the given output Writer instance.     writer.writeRowsAndClose(rows);     This will produce the following output:      Year,Make,Model,Description,Price     1997,Ford,E350,""ac, abs, moon"",3000.00     1999,Chevy,Venture ""Extended Edition"",,4900.00     1996,Jeep,Grand Cherokee,""MUST SELL!     air, moon roof, loaded"",4799.00     1999,Chevy,""Venture """"Extended Edition, Very Large"""""",,5000.00     ,,Venture ""Extended Edition"",,4900.00    If you want to write the same content in fixed width format, all you need is to create an instance of FixedWidthWriter instead. The remainder of the code remains the same. This will be the case for any other writers/parsers we might introduce in the future, and applies to all examples presented here. TSV writing example This is exactly the same as the CSV example seen above. All you need is to instantiate a new writer:       // As with the CsvWriter, all you need is to create an instance of TsvWriter with the default TsvWriterSettings.     TsvWriter writer = new TsvWriter(outputWriter, new TsvWriterSettings());      // Write the record headers of this file     writer.writeHeaders(""Year"", ""Make"", ""Model"", ""Description"", ""Price"");      // Here we just tell the writer to write everything and close the given output Writer instance.     writer.writeRowsAndClose(rows);     This will produce the following output:      Year    Make    Model   Description Price     1997    Ford    E350    ac, abs, moon   3000.00     1999    Chevy   Venture ""Extended Edition""      4900.00     1996    Jeep    Grand Cherokee  MUST SELL!\nair, moon roof, loaded  4799.00     1999    Chevy   Venture ""Extended Edition, Very Large""      5000.00     Venture ""Extended Edition""      4900.00    Writing row by row, with comments      CsvWriterSettings settings = new CsvWriterSettings();     // Sets the character sequence to write for the values that are null.     settings.setNullValue(""?"");      //Changes the comment character to -     settings.getFormat().setComment('-');      // Sets the character sequence to write for the values that are empty.     settings.setEmptyValue(""!"");      // writes empty lines as well.     settings.setSkipEmptyLines(false);      // Creates a writer with the above settings;     CsvWriter writer = new CsvWriter(outputWriter, settings);      // writes the file headers     writer.writeHeaders(""a"", ""b"", ""c"", ""d"", ""e"");      // Let's write the rows one by one (the first row will be skipped)     for (int i = 1; i < rows.size(); i++) {         // You can write comments above each row         writer.commentRow(""This is row "" + i);         // writes the row         writer.writeRow(rows.get(i));     }      // we must close the writer. This also closes the java.io.Writer you used to create the CsvWriter instance     // note no checked exceptions are thrown here. If anything bad happens you'll get an IllegalStateException wrapping the original error.     writer.close();    The output of the above code should be:      a,b,c,d,e     -This is row 1     1999,Chevy,Venture ""Extended Edition"",!,4900.00     -This is row 2     1996,Jeep,Grand Cherokee,""MUST SELL!     ...    Writing with column selection You can write transparently to some fields of a CSV file, while keeping the output format consistent. Let's say you have a CSV file with 5 columns but only have data for 3 of them, in a different order. All you have to do is configure the file headers and select what fields you have values for.      CsvWriterSettings settings = new CsvWriterSettings();      // when writing, nulls are printed using the empty value (defaults to """").     // Here we configure the writer to print ? to describe null values.     settings.setNullValue(""?"");      // if the value is not null, but is empty (e.g. """"), the writer will can be configured to     // print some default representation for a non-null/empty value     settings.setEmptyValue(""!"");      // Encloses all records within quotes even when they are not required.     settings.setQuoteAllFields(true);      // Sets the file headers (used for selection, these values won't be written automatically)     settings.setHeaders(""Year"", ""Make"", ""Model"", ""Description"", ""Price"");      // Selects which fields from the input should be written. In this case, fields ""make"" and ""model"" will be empty     // The field selection is not case sensitive     settings.selectFields(""description"", ""price"", ""year"");      // Creates a writer with the above settings;     CsvWriter writer = new CsvWriter(outputWriter, settings);      // Writes the headers specified in the settings     writer.writeHeaders();      // writes each row providing values for the selected fields (note the values and field selection order must match)     writer.writeRow(""ac, abs, moon"", 3000.00, 1997);     writer.writeRow("""", 4900.00, 1999); // NOTE: empty string will be replaced by ""!"" as per configured emptyQuotedValue.     writer.writeRow(""MUST SELL!\nair, moon roof, loaded"", 4799.00, 1996);      writer.close();    The output of such setting will be:      ""Year"",""Make"",""Model"",""Description"",""Price""     ""1997"",""?"",""?"",""ac, abs, moon"",""3000.0""     ""1999"",""?"",""?"",""!"",""4900.0""     ""1996"",""?"",""?"",""MUST SELL!     ...    Writing with value conversions (using ObjectRowWriterProcessor) All writers have a settings object that accepts an instance of RowWriterProcessor. Use the writer methods prefixed with ""processRecord"" to execute the RowWriterProcessor against your input. In the following example, we use ObjectRowWriterProcessor to execute custom value conversions on each element of a row of objects. This object executes a sequence of Conversion actions on the row elements before they are written.      FixedWidthFieldLengths lengths = new FixedWidthFieldLengths(15, 10, 35);     FixedWidthWriterSettings settings = new FixedWidthWriterSettings(lengths);      // Any null values will be written as ?     settings.setNullValue(""nil"");     settings.getFormat().setPadding('_');     settings.setIgnoreLeadingWhitespaces(false);     settings.setIgnoreTrailingWhitespaces(false);      // Creates an ObjectRowWriterProcessor that handles annotated fields in the TestBean class.     ObjectRowWriterProcessor processor = new ObjectRowWriterProcessor();     settings.setRowWriterProcessor(processor);      // Converts objects in the ""date"" field using the yyyy-MMM-dd format.     processor.convertFields(Conversions.toDate("" yyyy MMM dd ""), Conversions.trim()).add(""date"");      // Trims Strings at position 2 of the input row.     processor.convertIndexes(Conversions.trim(), Conversions.toUpperCase()).add(2);      // Sets the file headers so the writer knows the correct order when writing values taken from a TestBean instance     settings.setHeaders(""date"", ""quantity"", ""comments"");      // Creates a writer with the above settings;     FixedWidthWriter writer = new FixedWidthWriter(outputWriter, settings);      // Writes the headers specified in the settings     writer.writeHeaders();      // writes a Fixed Width row with the values set in ""bean"". Notice that there's no annotated     // attribute for the ""date"" column, so it will just be null (an then converted to ? a )     writer.processRecord(new Date(0), null, ""  a comment  "");     writer.processRecord(null, 1000, """");      writer.close();    The output will be:      date___________quantity__comments___________________________     1970 Jan 01____nil_______A COMMENT__________________________     nil____________1000_________________________________________    Writing annotated java beans If you have a java class with fields annotated with the annotations defined in package com.univocity.parsers.annotations, you can use a BeanWriterProcessor to map its attributes directly to the output. A RowWriterProcessor is just an interface that ""knows"" how to map a given object to a sequence of values. By default, uniVocity-parsers provides the BeanWriterProcessor to map annotated beans to rows. The following example writes instances of TestBean:      FixedWidthFieldLengths lengths = new FixedWidthFieldLengths(10, 10, 35, 10, 40);     FixedWidthWriterSettings settings = new FixedWidthWriterSettings(lengths);      // Any null values will be written as ?     settings.setNullValue(""?"");      // Creates a BeanWriterProcessor that handles annotated fields in the TestBean class.     settings.setRowWriterProcessor(new BeanWriterProcessor<TestBean>(TestBean.class));      // Sets the file headers so the writer knows the correct order when writing values taken from a TestBean instance     settings.setHeaders(""amount"", ""pending"", ""date"", ""quantity"", ""comments"");      // Creates a writer with the above settings;     FixedWidthWriter writer = new FixedWidthWriter(outputWriter, settings);      // Writes the headers specified in the settings     writer.writeHeaders();      // writes a fixed width row with empty values (as nothing was set in the TestBean instance).     writer.processRecord(new TestBean());      TestBean bean = new TestBean();     bean.setAmount(new BigDecimal(""500.33""));     bean.setComments(""Blah,blah"");     bean.setPending(false);     bean.setQuantity(100);      // writes a Fixed Width row with the values set in ""bean"". Notice that there's no annotated     // attribute for the ""date"" column, so it will just be null (an then converted to ?, as we have settings.setNullValue(""?"");)     writer.processRecord(bean);      // you can still write rows passing in its values directly.     writer.writeRow(BigDecimal.ONE, true, ""1990-01-10"", 3, null);      writer.close();    The resulting output of the above code should be:      amount    pending   date                               quantity  comments     ?         ?         ?                                  ?         ?     500.33    no        ?                                  100       blah,blah     1         true      1990-01-10                         3         ?    Writing value by value If you don't have entire rows available when writing your data, you can simply define the values of each row one by one.      TsvWriter writer = new TsvWriter(outputWriter, new TsvWriterSettings());      writer.writeHeaders(""A"", ""B"", ""C"", ""D"", ""E"");      //writes a value to the first column     writer.writeValue(10);      //writes a value to the second column     writer.writeValue(20);      //writes a value to the fourth column (index 3 represents the 4th column - the one with header ""D"")     writer.writeValue(3, 40);      //overrides the value in the first column. ""A"" indicates the header name.     writer.writeValue(""A"", 100.0);      //flushes all values to the output, creating a row.     writer.writeValuesToRow();     Which will produce:      A   B   C   D   E     100.0   20      40    Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/uniVocity/univocity-parsers"	"One of the fastest and most feature-complete CSV. Also comes with parsers for TSV and fixed width records."	"true"
"Database"	"Apache Hive"	"https://hive.apache.org/"	"Data warehouse infrastructure built on top of Hadoop."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Hive TM General¶ Home Downloads License Privacy Policy Documentation¶ Language Manual Javadoc Wiki Community¶ Becoming a Committer Edit Website How to Contribute Resources for contributors Issue Tracking Mailing Lists People Development¶ Builds Design Docs FAQ Hive JIRA Precommit Patch Testing Version Control PMC¶ ByLaws How to Release ASF¶ Donations Sponsorship Thanks Website Apache Hive TM The Apache Hive ™ data warehouse software facilitates reading, writing, and managing large datasets residing in distributed storage using SQL. Structure can be projected onto data already in storage. A command line tool and JDBC driver are provided to connect users to Hive. Getting Started With Apache Hive Software¶ Check out the Getting Started Guide on the Hive wiki. Learn more About Hive's Functionality on our wiki Read the Getting Started Guide to learn how to install Hive The User and Hive SQL documentation shows how to program Hive Getting Involved With The Apache Hive Community¶ Apache Hive is an open source project run by volunteers at the Apache Software Foundation. Previously it was a subproject of Apache® Hadoop®, but has now graduated to become a top-level project of its own. We encourage you to learn about the project and contribute your expertise. Give us feedback or submit bug reports: What can we do better? Join the mailing list and meet our community Read through our Contributor's Guides about where to find the source or submit patches Become a Hive Fan on Facebook Follow @ApacheHive on Twitter Copyright © 2011-2014 The Apache Software Foundation Licensed under the Apache License, Version 2.0 Apache Hive, Hive, Apache, the Apache feather logo, and the Apache Hive project logo are trademarks of The Apache Software Foundation. Other names appearing on the site may be trademarks of their respective owners."	"null"	"null"	"Data warehouse infrastructure built on top of Hadoop."	"true"
"Database"	"Apache Phoenix"	"http://phoenix.apache.org/"	"High performance relational database layer over HBase for low latency applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Overview | Apache Phoenix About Overview Who is Using New Features Roadmap Performance Team Presentations Mailing Lists Source Repository Issue Tracking Download Installation How to Contribute How to Develop How to Update Website How to Release License Using F.A.Q. Quick Start Building Tuning Backward Compatibility Release Notes Performance Testing Apache Spark Integration Apache Pig Integration Map Reduce Integration Apache Flume Plugin Phoenix on Amazon EMR Phoenix Adapter for Python Phoenix ORM Library Features Transactions User-defined Functions Secondary Indexes Statistics Collection Row Timestamp Column Salted Tables Skip Scan Views Multi tenancy Dynamic Columns Bulk Loading Query Server Tracing Metrics Reference Grammar Functions Datatypes ARRAY type Row Value Constructors Sequences Joins Subqueries OLTP and operational analytics for Apache Hadoop Download latest Apache Phoenix binary and source release artifacts Browse through Apache Phoenix JIRAs Sync and build Apache Phoenix from source code News: Support now available for latest Apache Phoenix in Amazon EMR                         Overview Apache Phoenix enables OLTP and operational analytics in Hadoop for low latency applications by combining the best of both worlds: the power of standard SQL and JDBC APIs with full ACID transaction capabilities and the flexibility of late-bound, schema-on-read capabilities from the NoSQL world by leveraging HBase as its backing store Apache Phoenix is fully integrated with other Hadoop products such as Spark, Hive, Pig, Flume, and Map Reduce. Who is using Apache Phoenix? Read more here... Mission Become the trusted data platform for OLTP and operational analytics for Hadoop through well-defined, industry standard APIs. Quick Start Tired of reading already and just want to get started? Take a look at our FAQs, listen to the Apache Phoenix talk from Hadoop Summit 2015, review the overview presentation, and jump over to our quick start guide here. SQL Support Apache Phoenix takes your SQL query, compiles it into a series of HBase scans, and orchestrates the running of those scans to produce regular JDBC result sets. Direct use of the HBase API, along with coprocessors and custom filters, results in performance on the order of milliseconds for small queries, or seconds for tens of millions of rows. To see a complete list of what is supported, go to our language reference. All standard SQL query constructs are supported, including SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, etc. It also supports a full set of DML commands as well as table creation and versioned incremental alterations through our DDL commands. Here’s a list of what is currently not supported: Relational operators. Intersect, Minus. Miscellaneous built-in functions. These are easy to add - read this blog for step by step instructions. Connection Use JDBC to get a connection to an HBase cluster like this: Connection conn = DriverManager.getConnection(""jdbc:phoenix:server1,server2:3333"",props); where props are optional properties which may include Phoenix and HBase configuration properties, and the connection string which is composed of: jdbc:phoenix [ :<zookeeper quorum> [ :<port number> ] [ :<root node> ] [ :<principal> ] [ :<keytab file> ] ] For any omitted parts, the relevant property value, hbase.zookeeper.quorum, hbase.zookeeper.property.clientPort, and zookeeper.znode.parent will be used from hbase-site.xml configuration file. The optional principal and keytab file may be used to connect to a Kerberos secured cluster. If only principal is specified, then this defines the user name with each distinct user having their own dedicated HBase connection (HConnection). This provides a means of having multiple, different connections each with different configuration properties on the same JVM. For example, the following connection string might be used for longer running queries, where the longRunningProps specifies Phoenix and HBase configuration properties with longer timeouts: Connection conn = DriverManager.getConnection(“jdbc:phoenix:my_server:longRunning”, longRunningProps); while the following connection string might be used for shorter running queries: Connection conn = DriverManager.getConnection(""jdbc:phoenix:my_server:shortRunning"", shortRunningProps); Transactions To enable full ACID transactions, a beta feature available in the 4.7.0 release, set the phoenix.transactions.enabled property to true. In this case, you’ll also need to run the transaction manager that’s included in the distribution. Once enabled, a table may optionally be declared as transactional (see here for directions). Commits over transactional tables will have an all-or-none behavior - either all data will be committed (including any updates to secondary indexes) or none of it will (and an exception will be thrown). Both cross table and cross row transactions are supported. In addition, transactional tables will see their own uncommitted data when querying. An optimistic concurrency model is used to detect row level conflicts with first commit wins semantics. The later commit would produce an exception indicating that a conflict was detected. A transaction is started implicitly when a transactional table is referenced in a statement, at which point you will not see updates from other connections until either a commit or rollback occurs. Non transactional tables have no guarantees above and beyond the HBase guarantee of row level atomicity (see here). In addition, non transactional tables will not see their updates until after a commit has occurred. The DML commands of Apache Phoenix, UPSERT VALUES, UPSERT SELECT and DELETE, batch pending changes to HBase tables on the client side. The changes are sent to the server when the transaction is committed and discarded when the transaction is rolled back. If auto commit is turned on for a connection, then Phoenix will, whenever possible, execute the entire DML command through a coprocessor on the server-side, so performance will improve. Timestamps Most commonly, an application will let HBase manage timestamps. However, under some circumstances, an application needs to control the timestamps itself. In this case, the CurrentSCN property may be specified at connection time to control timestamps for any DDL, DML, or query. This capability may be used to run snapshot queries against prior row values, since Phoenix uses the value of this connection property as the max timestamp of scans. Timestamps may not be controlled for transactional tables. Instead, the transaction manager assigns timestamps which become the HBase cell timestamps after a commit. Timestamps still correspond to wall clock time, however they are multiplied by 1,000,000 to ensure enough granularity for uniqueness across the cluster. Schema Apache Phoenix supports table creation and versioned incremental alterations through DDL commands. The table metadata is stored in an HBase table and versioned, such that snapshot queries over prior versions will automatically use the correct schema. A Phoenix table is created through the CREATE TABLE command and can either be: built from scratch, in which case the HBase table and column families will be created automatically. mapped to an existing HBase table, by creating either a read-write TABLE or a read-only VIEW, with the caveat that the binary representation of the row key and key values must match that of the Phoenix data types (see Data Types reference for the detail on the binary representation). For a read-write TABLE, column families will be created automatically if they don’t already exist. An empty key value will be added to the first column family of each existing row to minimize the size of the projection for queries. For a read-only VIEW, all column families must already exist. The only change made to the HBase table will be the addition of the Phoenix coprocessors used for query processing. The primary use case for a VIEW is to transfer existing data into a Phoenix table, since data modification are not allowed on a VIEW and query performance will likely be less than as with a TABLE. All schema is versioned (with up to 1000 versions being kept). Snapshot queries over older data will pick up and use the correct schema based on the time at which you’ve connected (based on the CurrentSCN property). Altering A Phoenix table may be altered through the ALTER TABLE command. When a SQL statement is run which references a table, Phoenix will by default check with the server to ensure it has the most up to date table metadata and statistics. This RPC may not be necessary when you know in advance that the structure of a table may never change. The UPDATE_CACHE_FREQUENCY property was added in Phoenix 4.7 to allow the user to declare how often the server will be checked for meta data updates (for example, the addition or removal of a table column or the updates of table statistics). Possible values are ALWAYS (the default), NEVER, and a millisecond numeric value. An ALWAYS value will cause the client to check with the server each time a statement is executed that references a table (or once per commit for an UPSERT VALUES statement). A millisecond value indicates how long the client will hold on to its cached version of the metadata before checking back with the server for updates. For example, the following DDL command would create table FOO and declare that a client should only check for updates to the table or its statistics every 15 minutes: CREATE TABLE FOO (k BIGINT PRIMARY KEY, v VARCHAR) UPDATE_CACHE_FREQUENCY=900000; Views Phoenix supports updatable views on top of tables with the unique feature leveraging the schemaless capabilities of HBase of being able to add columns to them. All views all share the same underlying physical HBase table and may even be indexed independently. For more read here. Multi-tenancy Built on top of view support, Phoenix also supports multi-tenancy. Just as with views, a multi-tenant view may add columns which are defined solely for that user. Schema at Read-time Another schema-related feature allows columns to be defined dynamically at query time. This is useful in situations where you don’t know in advance all of the columns at create time. You’ll find more details on this feature here. Mapping to an Existing HBase Table Apache Phoenix supports mapping to an existing HBase table through the CREATE TABLE and CREATE VIEW DDL statements. In both cases, the HBase metadata is left as-is, except for with CREATE TABLE the KEEP_DELETED_CELLS option is enabled to allow for flashback queries to work correctly. For CREATE TABLE, any HBase metadata (table, column families) that doesn’t already exist will be created. Note that the table and column family names are case sensitive, with Phoenix upper-casing all names. To make a name case sensitive in the DDL statement, surround it with double quotes as shown below: CREATE VIEW “MyTable” (“a”.ID VARCHAR PRIMARY KEY) For CREATE TABLE, an empty key value will also be added for each row so that queries behave as expected (without requiring all columns to be projected during scans). For CREATE VIEW, this will not be done, nor will any HBase metadata be created. Instead the existing HBase metadata must match the metadata specified in the DDL statement or a ERROR 505 (42000): Table is read only will be thrown. The other caveat is that the way the bytes were serialized in HBase must match the way the bytes are expected to be serialized by Phoenix. For VARCHAR,CHAR, and UNSIGNED_* types, Phoenix uses the HBase Bytes utility methods to perform serialization. The CHAR type expects only single-byte characters and the UNSIGNED types expect values greater than or equal to zero. Our composite row keys are formed by simply concatenating the values together, with a zero byte character used as a separator after a variable length type. For more information on our type system, see the Data Type. Salting A table could also be declared as salted to prevent HBase region hot spotting. You just need to declare how many salt buckets your table has, and Phoenix will transparently manage the salting for you. You’ll find more detail on this feature here, along with a nice comparison on write throughput between salted and unsalted tables here. APIs The catalog of tables, their columns, primary keys, and types may be retrieved via the java.sql metadata interfaces: DatabaseMetaData, ParameterMetaData, and ResultSetMetaData. For retrieving schemas, tables, and columns through the DatabaseMetaData interface, the schema pattern, table pattern, and column pattern are specified as in a LIKE expression (i.e. % and _ are wildcards escaped through the character). The table catalog argument in the metadata APIs is used to filter based on the tenant ID for multi-tenant tables. About Overview Who is Using New Features Roadmap Performance Team Presentations Mailing Lists Source Repository Issue Tracking Download Installation How to Contribute How to Develop How to Update Website How to Release License Using F.A.Q. Quick Start Building Tuning Backward Compatibility Release Notes Performance Testing Apache Spark Integration Apache Pig Integration Map Reduce Integration Apache Flume Plugin Phoenix on Amazon EMR Phoenix Adapter for Python Phoenix ORM Library Features Transactions User-defined Functions Secondary Indexes Statistics Collection Row Timestamp Column Salted Tables Skip Scan Views Multi tenancy Dynamic Columns Bulk Loading Query Server Tracing Metrics Reference Grammar Functions Datatypes ARRAY type Row Value Constructors Sequences Joins Subqueries Back to top Copyright ©2016 Apache Software Foundation. All Rights Reserved."	"null"	"null"	"High performance relational database layer over HBase for low latency applications."	"true"
"Database"	"eXist"	"https://github.com/eXist-db/exist"	"A NoSQL document database and application platform."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"137"	"58"	"83"	"GitHub - eXist-db/exist: eXist Native XML Database and Application Platform Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 137 Fork 83 eXist-db/exist Code Issues 202 Pull requests 19 Pulse Graphs eXist Native XML Database and Application Platform http://www.exist-db.org 17,270 commits 12 branches 27 releases 45 contributors Java 94.1% XQuery 2.8% JavaScript 1.4% GAP 0.8% HTML 0.4% XSLT 0.1% Other 0.4% Java XQuery JavaScript GAP HTML XSLT Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags api/Collection.removeDocument develop dln/eXist-1.0 eXist-1.0-trunk eXist-1.0.x eXist-1.0 eXist-1.2.x eXist-1.4.x eXist-2.0.x log4j-2.6.1 master xpdl-extensions Nothing to show eXist-3.0.RC1 eXist-2.2 eXist-2.2.RC2 eXist-2.2.RC1 eXist-2.1 eXist-2.0 eXist-2.0.RC2 eXist-2.0.RC1 eXist-2.0.Alpha1 eXist-1.4.3 eXist-1.4.1 eXist-1.4 eXist-1.3 eXist-1.2.6 eXist-1.2.5 eXist-1.2.4 eXist-1.2.3 eXist-1.2.2 eXist-1.2.1 eXist-1.2 eXist-1.1.1 eXist-1.1 eXist-1.1.RC2 eXist-1.0.1 eXist-1.0 eXist-1.0.RC2 eXist-1.0.RC1 Nothing to show New pull request Latest commit e9e2f90 Jul 13, 2016 dizzzz committed on GitHub Merge pull request #1065 from adamretter/launcher-jetty-9 … Launcher jetty 9 Permalink Failed to load latest commit information. .idea update IDE settings May 24, 2016 .settings Switch Eclipse project to Java 8 Feb 14, 2015 bin [bugfix] Make sure to normalize exist.home Jun 15, 2016 build/scripts [refactor] Switch to using JUnit Rule for starting and stopping Jetty Jul 12, 2016 extensions [bugfix] Update the version of betterForm so that is compatible with … Jul 12, 2016 installer [feature] Update Ant from 1.9.4 to 1.9.7 Jun 17, 2016 jdee-project [ignore] removing old tags file not needed any more. Dec 18, 2012 lib [fetaure] Start of working on updating to Jetty 9 Jul 10, 2016 nbproject [bugfix] Fix the startup sequence of Jetty-9 and move eXist WebAppCon… Jul 12, 2016 samples remove XACML code May 6, 2016 schema [feature] Make the HTML to XML Parser configurable, supports any comp… May 24, 2016 src [bugfix] Normalize paths Jul 13, 2016 test/src [refactor] Switch to using JUnit Rule for starting and stopping Jetty Jul 12, 2016 tools [refactor] Update the config files for the portal webapp Jul 12, 2016 webapp [refactor] Switch to Servlet 3.1 API config Jul 12, 2016 .classpath [bugfix] Fix the startup sequence of Jetty-9 and move eXist WebAppCon… Jul 12, 2016 .gitignore [ignore] Add generated yajsw files to gitignore May 18, 2016 .project [bugfix] Bring the Eclipse project up to date with various library Jan 27, 2015 .travis.yml added hipchat notifications May 7, 2015 LICENSE Updated license file Jul 6, 2006 README [ignore] test commit over HTTPs Aug 15, 2012 README.md Add BinTray download button Jul 7, 2015 VERSION.txt.tmpl Template version properties into a VERSION.txt file during the build Oct 14, 2014 atom-example.xq Added atom configuration files Jul 6, 2006 atom-services.xml Updates to support latest namespace change and media type change. Jul 13, 2007 backup.properties Merge remote-tracking branch 'eXist/develop' into develop Apr 30, 2014 build.bat [feature] Update Ant from 1.9.4 to 1.9.7 Jun 17, 2016 build.properties Bump exist version to upcoming RC2 Jan 3, 2016 build.sh [feature] Update Ant from 1.9.4 to 1.9.7 Jun 17, 2016 build.xml Remove outdated 'quality' script ; was not used anyway Jan 10, 2016 client.properties.tmpl Merge remote-tracking branch 'eXist/develop' into develop Apr 30, 2014 collection.xconf.init [merge] merge of revisions 16954:16957 inclusive from old eXist Subve… Aug 17, 2012 conf.xml.tmpl custom filters for backup May 26, 2016 descriptor.xml.tmpl Merge remote-tracking branch 'eXist/develop' into develop Apr 30, 2014 eXist-db.iml update IDE settings May 24, 2016 icon.png Icon Jun 5, 2011 log4j2.xml remove XACML code May 5, 2016 mime-types.xml.tmpl add .odd as an XML file extension Mar 27, 2015 nbbuild.xml [feature] Update AspectJ from 1.8.4 to 1.8.9 Jun 17, 2016 vm.properties Remove tanuki's service wrapper May 18, 2016 README.md eXist Native XML Database This is the GitHub for the eXist Native XML Database. If you're looking to work with the eXist source code, you've come to the right place. If not, you're probably looking for the eXist Documentation. The latest eXist release is available from http://www.exist-db.org, alternatively if you want the bleeding-edge then nightly builds are also available. If you're looking for help or discussion, visit the eXist community mailing lists or consider purchasing the eXist book from O'Reilly. Information for Developers If you wish to work on the eXist source code we're now using Git (and GitHub) for our source code management. If you're not familiar with Git, we recommend this excellent online interactive tutorial. Building eXist from Source eXist itself is written in Java 8. The build system is Apache Ant. To build eXist: Checkout the Git Repository Execute Ant to compile eXist $ git clone git@github.com:eXist-db/exist.git $ cd exist $ git checkout master $ ./build.sh NOTE: In the above example, we switched the current (checked-out) branch from develop to master. We use the GitFlow for eXist process: develop is the current (and stable) work-in-progress (the next release) master is the latest release The choice of which to use is up to you. HINT: In the example above, we use the SSH form of the GitHub repo URL to clone eXist. However, if you're behind a HTTP proxy and your organisation doesn't allow outgoing SSH connections, try the HTTPS URL for our GitHub repo https://github.com/eXist-db/exist.git. From here, you now have a compiled version of eXist that you may use just as you would an installed version of eXist, however it may be desirable to package this up for easy installation elsewhere. If you wish to create a simple ZIP distribution of eXist, run: $ ./build.sh dist-zip To build a full Installer for eXist, you'll need to have IzPack installed. Set your path to IzPack in exist/build.properties and run: $ ./build.sh installer Otherwise, you may wish to deploy eXist into a Web Application Server as a WAR file. We provide a build for that, too: $ ./build.sh dist-war For more build options, see the eXist Build Documentation. Contributing to eXist We welcome all contributions to eXist! We strongly suggest that you join the eXist-development mailing list and also subscribe to the eXist-commits mailing list, so that you can collaborate with the eXist team and be kept up to date with changes to the codebase. eXist uses the GitFlow branching model for development. Specifically, we're using the AVH Edition of GitFlow tools version. If you're not familiar with GitFlow, check out some of the good tutorials linked in ""Getting Started"" of the GitFlow AVH Edition page. There's also a very good git-flow cheatsheet. If you wish to contribute, the general approach is: Fork the repo on GitHub git clone your fork Make sure you've GitFlow AVH Edition installed Run git flow init on the cloned repo using these settings. Use Git Flow to start a hotfix or feature i.e. git flow feature start my-feature. Do your stuff! :-) Commit to your repo. We like small, atomic commits that don't mix concerns. Do NOT finish the hotfix or feature with GitFlow. Make sure your branch is based on the latest eXist develop branch before making a pull-request. This will ensure that we can easily merge in your changes. See Syncing a Fork. Push your hotfix or feature branch to your GitHub using GitFlow: git flow feature publish my-feature. Send us a Pull Request on GitHub from your branch to our develop branch. Once the Pull Request is merged you can delete your branch, you need not finish or merge it, you will however want to sync your develop branch to bring back your changes. See Syncing a Fork. Pull Requests are reviewed and tested before they're merged by the core development team. However, we have one golden rule, even within the core team: never merge your own pull request. This simple-but-important rule ensures that at least two people have considered the change. Although the following are taken from our Developer Manifesto and Code Review Guide, the main things that get a Pull Request accepted are: Only change what you need to. If you must reformat code, keep it in a separate commit to any syntax or functionality changes. Test. If you fix something prove it, write a test that illustrates the issue before you fix the issue and validate the test. If you add a new feature it needs tests, so that we can understand its intent and try to avoid regressions in future as much as possible. Make sure the appropriate licence header appears at the top of your source code file. We use LGPL v2.1 for eXist and strongly encourage that, but ultimately any compatible OSI approved license without further restrictions may be used. Run the full eXist test suite. We don't accept code that causes regressions. Do I work on a bug-fix using a feature or a hotfix? If you want to contribute a bug-fix, you need to consider whether this is a feature or a hotfix in GitFlow terminology. Making the determination involves considering how the bug-fix is to be applied and how it is to be applied. First, you should carefully read the ""Feature branches"" and ""Hotfix branches"" sections from A successful Git branching model. If you're still unsure, consider: The bug-fix is a hotfix if it is critical and needs to go into a very soon to be released revision version i.e. 2.1.n to address an immediate production issue. Otherwise it is a feature, i.e. its just standard development towards the next release of eXist. Even for a bug-fix you should most probably use a feature. If you're certain you want to create a hotfix, please consider discussing first via the exist-development mailing list. Help! I am a human, what does this all mean? You work in features using GitFlow in your own fork of our repo. If you want to push your feature to your fork before you have finished it locally, i.e. for the purposes of backup or collaboration, you can use git flow feature publish my-feature. You will only ever send Pull Requests between your 'develop' branch and our 'develop' branch. i.e. finished features. If you follow the details above and make it easy for us to accept your Pull Requests, they will get accepted and merged quickly! Syncing a Fork Your fork will eventually become out of sync with the upstream repo as others contribute to eXist. To pull upstream changes into your fork, you have two options: Merging. Rebasing. Rebasing leads to a cleaner revision history which is much easier to follow and is our preferred approach. However, git rebase is a very sharp tool and must be used with care. For those new to rebase, we would suggest having a backup of your local (and possibly remote) git repos before continuing. Read on to learn how to sync using rebase. Rebase Example Lets say that you have a fork of eXist's GitHub repo, and you have been working in your feature branch called my-feature for sometime, you are happy with how your work is progressing, but you want to sync so that your changes are based on the latest and greatest changes from eXist. The way to do this using git rebase is as follows: If you have any un-committed changes you need to stash them using: git stash save ""changes before rebase"". If you have not added eXist's GitHub as an upstream remote, you need to do so by running git remote add upstream https://github.com/exist-db/exist.git. You can view your existing remotes, by running git remote -v. You need to fetch the latest changes from eXist's GitHub: git fetch upstream. This will not yet change your local branches in any way. You should first sync your develop branch with eXist's develop branch. As you always work in feature branches, this should a simple fast-forward by running: git checkout develop and then git rebase upstream/develop. If all goes well in (4) then you can push your develop branch to your remote server (e.g. GitHub) with git push origin develop. You can then replay your work in your feature branch my-feature atop the lastest changes from the develop branch by running: git checkout feature/my-feature and then git rebase develop. Should you encounter any conflicts during (5) you can resolve them using git mergetool and then git rebase --continue. If all goes well in (5), and take care to check your history is correct with git log, then you can force push your feature/my-feature branch to your remote server (e.g. GitHub) with git push -f origin feature/my-feature. NOTE the reason you need to use the -f to force the push is because the commit ids of your revisions will have changed after the rebase. Note that it is worth syncing your branches that you are working on relatively frequently to prevent any large rebases which could lead to resolving many conflicting changes where your branch has diverged over a long period of time. Our git-flow init settings When we started working with the eXist repo we needed to configure it for GitFlow: $ git flow init  Which branch should be used for bringing forth production releases?    - master Branch name for production releases: [master]  Branch name for ""next release"" development: [develop]   How to name your supporting branch prefixes? Feature branches? [feature/]  Release branches? [release/]  Hotfix branches? [hotfix/]  Support branches? [support/]  Version tag prefix? [] eXist- Hooks and filters directory? [.git/hooks] A new develop branch is created, and checked out. Verify it like this: $ git status # On branch develop As we have already started with GitFlow, when you run git flow init, you'll get slightly different prompts--but the same answers apply! You must use the following settings: $ git flow init  Which branch should be used for bringing forth production releases?    - develop Branch name for production releases: [] master  Which branch should be used for integration of the ""next release""?    - develop Branch name for ""next release"" development: [develop]   How to name your supporting branch prefixes? Feature branches? [feature/]  Release branches? [release/]  Hotfix branches? [hotfix/]  Support branches? [support/]  Version tag prefix? [] eXist- Hooks and filters directory? [.git/hooks] Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/eXist-db/exist"	"A NoSQL document database and application platform."	"true"
"Database"	"FlexyPool"	"https://github.com/vladmihalcea/flexy-pool"	"Brings metrics and failover strategies to the most common connection pooling solutions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"210"	"19"	"28"	"GitHub - vladmihalcea/flexy-pool: FlexyPool adds metrics and failover strategies to a given Connection Pool, allowing it to resize on demand. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 210 Fork 28 vladmihalcea/flexy-pool Code Issues 4 Pull requests 0 Wiki Pulse Graphs FlexyPool adds metrics and failover strategies to a given Connection Pool, allowing it to resize on demand. 242 commits 1 branch 15 releases 2 contributors Java 99.9% Batchfile 0.1% Java Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show flexy-pool-parent-1.2.4 flexy-pool-parent-1.2.3 flexy-pool-parent-1.2.2 flexy-pool-parent-1.2.1 flexy-pool-parent-1.2.0 flexy-pool-parent-1.1.1 flexy-pool-parent-1.1.0 flexy-pool-parent-1.0.7 flexy-pool-parent-1.0.6 flexy-pool-parent-1.0.5 flexy-pool-parent-1.0.4 flexy-pool-parent-1.0.3 flexy-pool-parent-1.0.2 flexy-pool-parent-1.0.1 flexy-pool-parent-1.0 Nothing to show New pull request Latest commit 7126544 Jan 4, 2016 vladmihalcea Merge pull request #29 from valery1707/javadoc-badge-url … Javadoc badge service moved to new domain Permalink Failed to load latest commit information. flexy-atomikos [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-bonecp [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-btm #21 Add support for event notifications Jul 7, 2015 flexy-c3p0 [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-codahale-metrics [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-common-adapter [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-dbcp [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-dbcp2 [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-dropwizard-metrics [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-glassfish [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-hikaricp [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-java-ee [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-pool-core-java7 [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-pool-core [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-tests [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-tomcatcp [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-tomee [maven-release-plugin] prepare for next development iteration Jul 7, 2015 flexy-vibur [maven-release-plugin] prepare for next development iteration Jul 7, 2015 .gitignore Add Maven plugin versions and ignore Atomikos generated files Jun 30, 2015 .travis.yml #12 Add code coverage support for the Travic-CI integration Jun 30, 2015 LICENSE Initial commit Feb 9, 2014 README.md Javadoc badge service moved to new domain Jan 4, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jul 7, 2015 release-perform.bat #25 Add a Developer Guide wiki page Jul 9, 2015 release-prepare.bat #25 Add a Developer Guide wiki page Jul 9, 2015 README.md Introduction The FlexyPool library adds metrics and flexible strategies to a given Connection Pool, allowing it to resize on demand. This is very handy since most connection pools offer a limited set of dynamic configuration strategies. Features multiple environment options Stand-alone (Spring, Guice) Java EE extensive connection pool support Apache DBCP Apache DBCP2 C3P0 BoneCP HikariCP Tomcat CP Vibur DBCP Bitronix Transaction Manager Atomikos TransactionsEssentials statistics support concurrent connections histogram concurrent connection requests histogram data source connection acquiring time histogram connection lease time histogram maximum pool size histogram total connection acquiring time histogram overflow pool size histogram retries attempts histogram Documentation Installation Guide User Guide Developer Guide In the Press FlexyPool is explained in great details in the ""High-Performance Java Persistence"" book: The anatomy of Connection Pooling FlexyPool, reactive connection pooling Professional connection pool sizing The simple scalability equation How to monitor a Java EE DataSource How does FlexyPool support the Dropwizard Metrics package renaming How does FlexyPool support both Connection proxies and decorators Who uses FlexyPool is the leading real estate portal in Finland. New Etuovi.com has used FlexyPool in production since early 2014. The library has proven to be reliable and allows our infrastructure to handle temporary spikes much better. We use it everywhere in our stack, ranging from our frontends to the backend services. -- Antti Koivisto, Software Architect, Etuovi.com software company specializing in products and services for health care. Mitch&Mates uses FlexyPool in all it's environments. It gives us the ability to measure performance and scalability, detect potential flaws and improve intensive loads. Additionally, we compared several connection pool libraries which decided us to switch to another provider. -- Bram Mommaerts, Software Engineer, Mitch&Mates NV Requirements Java 1.6 or above for all modules but the flexy-dbcp2 which requires at least Java 1.7 SLF4J Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vladmihalcea/flexy-pool"	"Brings metrics and failover strategies to the most common connection pooling solutions."	"true"
"Database"	"Flyway"	"https://flywaydb.org/"	"Simple database migration tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1419"	"106"	"456"	"GitHub - flyway/flyway: Flyway by Boxfuse • Database Migrations Made Easy. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 106 Star 1,419 Fork 456 flyway/flyway Code Issues 147 Pull requests 27 Pulse Graphs Flyway by Boxfuse • Database Migrations Made Easy. https://flywaydb.org 1,603 commits 2 branches 14 releases Fetching contributors Java 91.6% PLSQL 2.9% Groovy 2.1% Scala 1.6% SQLPL 0.8% Batchfile 0.4% Other 0.6% Java PLSQL Groovy Scala SQLPL Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master revert-1157-master Nothing to show flyway-4.0.3 flyway-4.0.2 flyway-4.0.1 flyway-4.0 flyway-3.2.1 flyway-3.2 flyway-3.1 flyway-3.0 flyway-2.3.1 flyway-2.3 flyway-2.2.1 flyway-2.2 flyway-2.1.1 flyway-2.1 Nothing to show New pull request Latest commit b5145eb Jun 17, 2016 axelfontaine committed on GitHub Merge pull request #1341 from aaltergot/sqlitesystable … SQLite system table no drop Permalink Failed to load latest commit information. flyway-ant-largetest Fixed tests Feb 23, 2016 flyway-ant Fixed #1312 Clarify validate javadoc Jun 8, 2016 flyway-commandline-largetest Fixed tests Feb 23, 2016 flyway-commandline Fixed #724 Mar 14, 2016 flyway-core Merge pull request #1341 from aaltergot/sqlitesystable Jun 17, 2016 flyway-gradle-plugin-largetest Fixed tests Feb 23, 2016 flyway-gradle-plugin Fixed #1312 Clarify validate javadoc Jun 8, 2016 flyway-maven-plugin-largetest Fixed tests Feb 23, 2016 flyway-maven-plugin Fixed #1312 Clarify validate javadoc Jun 8, 2016 flyway-osgi-largetest Updated copyright to 2016 Feb 1, 2016 flyway-sample-osgi-fragment Updated copyright to 2016 Feb 1, 2016 flyway-sample-osgi Updated copyright to 2016 Feb 1, 2016 flyway-sample-webapp Updated copyright to 2016 Feb 1, 2016 flyway-sample Updated copyright to 2016 Feb 1, 2016 flyway-sbt-largetest Updated copyright to 2016 Feb 1, 2016 flyway-sbt Fixed #1312 Clarify validate javadoc Jun 8, 2016 .gitattributes Added line ending definitions Jan 16, 2013 .gitignore added temporary db files to ignore Jan 20, 2016 .travis.yml Fixed #732 Package private JRE with command-line tool Feb 27, 2015 CONTRIBUTING.md Added basic contributing info Mar 1, 2016 ISSUE_TEMPLATE.md Added issue template Mar 1, 2016 LICENSE Updated license Dec 29, 2015 LICENSE.txt Updated copyright to 2016 Feb 1, 2016 README.md Update README.md Jun 17, 2016 README.txt Fixed https references Mar 1, 2016 createDBs.cmd Updated copyright to 2016 Feb 1, 2016 dropDBs.cmd Updated copyright to 2016 Feb 1, 2016 pom.xml Fixed #1319 Update MariaDB driver to latest version Jun 8, 2016 start-db-services.cmd Updated copyright to 2016 Feb 1, 2016 stop-db-services.cmd Updated copyright to 2016 Feb 1, 2016 README.md Flyway by Boxfuse Database Migrations Made Easy. Evolve your database schema easily and reliably across all your instances. Simple, focused and powerful. Works on Windows, Mac OSX, Linux, Java and Android Supported build tools Maven, Gradle, Ant and SBT Supported databases Oracle, SQL Server, SQL Azure, DB2, DB2 z/OS, MySQL, MariaDB, Google Cloud SQL, PostgreSQL, Redshift, Vertica, H2, Hsql, Derby, SQLite Third party plugins Grails, Play!, Grunt, Griffon, Ninja, ... Documentation https://flywaydb.org How to contribute https://flywaydb.org/documentation/contribute/ About Flyway is brought to you by Axel Fontaine and Boxfuse with the help of many contributors. License Copyright (C) 2010-2016 Boxfuse GmbH Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Trademark Flyway is a registered trademark of Boxfuse GmbH. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/flyway/flyway"	"Simple database migration tool."	"true"
"Database"	"H2"	"http://h2database.com/"	"Small SQL Database notable for its in-memory functionality."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"H2 Database Engine (redirect)  H2 Database Engine Welcome to H2, the free SQL database. The main feature of H2 are: It is free to use for everybody, source code is included Written in Java, but also available as native executable JDBC and (partial) ODBC API Embedded and client/server modes Clustering is supported A web client is included No Javascript If you are not automatically redirected to the main page, then Javascript is currently disabled or your browser does not support Javascript. Some features (for example the integrated search) require Javascript. Please enable Javascript, or go ahead without it: H2 Database Engine"	"null"	"null"	"Small SQL Database notable for its in-memory functionality."	"true"
"Database"	"HikariCP"	"https://github.com/brettwooldridge/HikariCP"	"High performance JDBC connection pool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3002"	"260"	"412"	"GitHub - brettwooldridge/HikariCP: 光 HikariCP・A solid high-performance JDBC connection pool at last. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 260 Star 3,002 Fork 412 brettwooldridge/HikariCP Code Issues 33 Pull requests 2 Wiki Pulse Graphs 光 HikariCP・A solid high-performance JDBC connection pool at last. http://brettwooldridge.github.io/HikariCP 2,255 commits 6 branches 63 releases 47 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: dev Switch branches/tags Branches Tags 2.3.x 2.3.0 dev experimental gh-pages master Nothing to show HikariCP-2.4.7 HikariCP-2.4.6 HikariCP-2.4.5 HikariCP-2.4.4 HikariCP-2.4.4-RC2 HikariCP-2.4.4-RC1 HikariCP-2.4.3 HikariCP-2.4.2 HikariCP-2.4.1 HikariCP-2.4.0 HikariCP-2.4.0-rc1 HikariCP-2.3.13 HikariCP-2.3.12 HikariCP-2.3.11 HikariCP-2.3.10 HikariCP-2.3.9 HikariCP-2.3.8 HikariCP-2.3.7 HikariCP-2.3.6 HikariCP-2.3.5 HikariCP-2.3.4 HikariCP-2.3.3 HikariCP-2.3.2 HikariCP-2.3.1 HikariCP-2.3.0 HikariCP-2.2.5 HikariCP-2.2.4 HikariCP-2.2.3 HikariCP-2.2.2 HikariCP-2.2.1 HikariCP-2.2.0 HikariCP-2.1.0 HikariCP-2.0.1 HikariCP-2.0.0 HikariCP-1.4.0 HikariCP-1.3.9 HikariCP-1.3.8 HikariCP-1.3.7 HikariCP-1.3.6 HikariCP-1.3.5 HikariCP-1.3.4 HikariCP-1.3.3 HikariCP-1.3.2 HikariCP-1.3.1 HikariCP-1.3.0 HikariCP-1.2.9 HikariCP-1.2.8 HikariCP-1.2.7 HikariCP-1.2.6 HikariCP-1.2.5 HikariCP-1.2.4 HikariCP-1.2.3 HikariCP-1.2.2 HikariCP-1.2.1 HikariCP-1.1.9 HikariCP-1.1.8 HikariCP-1.1.7 HikariCP-1.1.6 HikariCP-1.1.5 HikariCP-1.1.4 HikariCP-1.1.3 HikariCP-1.1.2 HikariCP-1.1.1 Nothing to show New pull request Latest commit 54c1cba Jul 13, 2016 brettwooldridge Fix incorrect parameter order in thread starvation warning. Permalink Failed to load latest commit information. src Fix incorrect parameter order in thread starvation warning. Jul 13, 2016 .editorconfig Add EditorConfig Jan 17, 2016 .gitignore Ignore IntelliJ 'out' directory. Apr 1, 2015 .travis.yml Update .travis.yml Jul 16, 2015 CHANGES Update change log Jul 6, 2016 LICENSE Initial commit Oct 7, 2013 README.md Update README.md Jul 6, 2016 TODO.md Update TODO.md Apr 23, 2014 eclipse.code.format.xml Add eclipse code formatter import file. Jul 31, 2014 pom.xml [maven-release-plugin] prepare for next development iteration Jul 6, 2016 README.md HikariCP It's Faster.Hi·ka·ri [hi·ka·'lē] (Origin: Japanese): light; ray. Fast, simple, reliable. HikariCP is a ""zero-overhead"" production ready JDBC connection pool. At roughly 90Kb, the library is very light. Read about how we do it here.    ""Simplicity is prerequisite for reliability.""          - Edsger Dijkstra Java 7 and Java 8 maven artifact:     <dependency>         <groupId>com.zaxxer</groupId>         <artifactId>HikariCP</artifactId>         <version>2.4.7</version>     </dependency> Java 6 maven artifact (maintenance mode):     <dependency>         <groupId>com.zaxxer</groupId>         <artifactId>HikariCP-java6</artifactId>         <version>2.3.13</version>     </dependency> Or download from here. JMH Benchmarks Microbenchmarks were created to isolate and measure the overhead of pools using the JMH microbenchmark framework developed by the Oracle JVM performance team. You can checkout the HikariCP benchmark project for details and review/run the benchmarks yourself. One Connection Cycle is defined as single DataSource.getConnection()/Connection.close(). In Unconstrained benchmark, connections > threads. In Constrained benchmark, threads > connections (2:1). One Statement Cycle is defined as single Connection.prepareStatement(), Statement.execute(), Statement.close(). 1 Versions: HikariCP 2.4.0, commons-dbcp2 2.1, Tomcat 8.0.23, Vibur 3.0, c3p0 0.9.5.1, Java 8u45 2 Java options: -server -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -Xmx512m User Testimonials In the words of the guys over at Edulify, ""HikariCP is supposed to be the fastest connection pool in Java land. But we did not start to use it because of speed, but because of its reliability. Here is a cool graph that shows connections opened to PostgreSQL. As you can see, the pool is way more stable. Also it is keeping its size at the minimum since we deploy it."" WIX Engineering Analysis We'd like to thank the guys over at WIX for the unsolicited and deep write-up about HikariCP on their engineering blog. Take a look if you have time. Failure: Pools behaving badly Read our interesting ""Database down"" pool challenge. You're [probably] doing it wrong. AKA ""What you probably didn't know about connection pool sizing"". Read on to find out. Configuration (knobs, baby!) HikariCP comes with sane defaults that perform well in most deployments without additional tweaking. Every property is optional, except for the ""essentials"" marked below. 📎 HikariCP uses milliseconds for all time values. Essentials 🔠dataSourceClassName This is the name of the DataSource class provided by the JDBC driver. Consult the documentation for your specific JDBC driver to get this class name, or see the table below. Note XA data sources are not supported. XA requires a real transaction manager like bitronix. Note that you do not need this property if you are using jdbcUrl for ""old-school"" DriverManager-based JDBC driver configuration. Default: none - or - 🔠jdbcUrl This property directs HikariCP to use ""DriverManager-based"" configuration. We feel that DataSource-based configuration (above) is superior for a variety of reasons (see below), but for many deployments there is little significant difference. When using this property with ""old"" drivers, you may also need to set the driverClassName property, but try it first without. Note that if this property is used, you may still use DataSource properties to configure your driver and is in fact recommended over driver parameters specified in the URL itself. Default: none 🔠username This property sets the default authentication username used when obtaining Connections from the underlying driver. Note that for DataSources this works in a very deterministic fashion by calling DataSource.getConnection(*username*, password) on the underlying DataSource. However, for Driver-based configurations, every driver is different. In the case of Driver-based, HikariCP will use this username property to set a user property in the Properties passed to the driver's DriverManager.getConnection(jdbcUrl, props) call. If this is not what you need, skip this method entirely and call addDataSourceProperty(""username"", ...), for example. Default: none 🔠password This property sets the default authentication password used when obtaining Connections from the underlying driver. Note that for DataSources this works in a very deterministic fashion by calling DataSource.getConnection(username, *password*) on the underlying DataSource. However, for Driver-based configurations, every driver is different. In the case of Driver-based, HikariCP will use this password property to set a password property in the Properties passed to the driver's DriverManager.getConnection(jdbcUrl, props) call. If this is not what you need, skip this method entirely and call addDataSourceProperty(""pass"", ...), for example. Default: none Frequently used ✅autoCommit This property controls the default auto-commit behavior of connections returned from the pool. It is a boolean value. Default: true ⌚connectionTimeout This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown. 1000ms is the minimum value. Default: 30000 (30 seconds) ⌚idleTimeout This property controls the maximum amount of time that a connection is allowed to sit idle in the pool. This setting only applies when minimumIdle is defined to be less than maximumPoolSize. Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation of +15 seconds. A connection will never be retired as idle before this timeout. A value of 0 means that idle connections are never removed from the pool. Default: 600000 (10 minutes) ⌚maxLifetime This property controls the maximum lifetime of a connection in the pool. When a connection reaches this timeout it will be retired from the pool, subject to a maximum variation of +30 seconds. An in-use connection will never be retired, only when it is closed will it then be removed. We strongly recommend setting this value, and it should be at least 30 seconds less than any database-level connection timeout. A value of 0 indicates no maximum lifetime (infinite lifetime), subject of course to the idleTimeout setting. Default: 1800000 (30 minutes) 🔠connectionTestQuery If your driver supports JDBC4 we strongly recommend not setting this property. This is for ""legacy"" databases that do not support the JDBC4 Connection.isValid() API. This is the query that will be executed just before a connection is given to you from the pool to validate that the connection to the database is still alive. Again, try running the pool without this property, HikariCP will log an error if your driver is not JDBC4 compliant to let you know. Default: none 🔢minimumIdle This property controls the minimum number of idle connections that HikariCP tries to maintain in the pool. If the idle connections dip below this value, HikariCP will make a best effort to add additional connections quickly and efficiently. However, for maximum performance and responsiveness to spike demands, we recommend not setting this value and instead allowing HikariCP to act as a fixed size connection pool. Default: same as maximumPoolSize 🔢maximumPoolSize This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections. Basically this value will determine the maximum number of actual connections to the database backend. A reasonable value for this is best determined by your execution environment. When the pool reaches this size, and no idle connections are available, calls to getConnection() will block for up to connectionTimeout milliseconds before timing out. Default: 10 📈metricRegistry This property is only available via programmatic configuration or IoC container. This property allows you to specify an instance of a Codahale/Dropwizard MetricRegistry to be used by the pool to record various metrics. See the Metrics wiki page for details. Default: none 📈healthCheckRegistry This property is only available via programmatic configuration or IoC container. This property allows you to specify an instance of a Codahale/Dropwizard HealthCheckRegistry to be used by the pool to report current health information. See the Health Checks wiki page for details. Default: none 🔠poolName This property represents a user-defined name for the connection pool and appears mainly in logging and JMX management consoles to identify pools and pool configurations. Default: auto-generated Infrequently used ✅initializationFailFast This property controls whether the pool will ""fail fast"" if the pool cannot be seeded with initial connections successfully. If you want your application to start even when the database is down/unavailable, set this property to false. Default: true ❎isolateInternalQueries This property determines whether HikariCP isolates internal pool queries, such as the connection alive test, in their own transaction. Since these are typically read-only queries, it is rarely necessary to encapsulate them in their own transaction. This property only applies if autoCommit is disabled. Default: false ❎allowPoolSuspension This property controls whether the pool can be suspended and resumed through JMX. This is useful for certain failover automation scenarios. When the pool is suspended, calls to getConnection() will not timeout and will be held until the pool is resumed. Default: false ❎readOnly This property controls whether Connections obtained from the pool are in read-only mode by default. Note some databases do not support the concept of read-only mode, while others provide query optimizations when the Connection is set to read-only. Whether you need this property or not will depend largely on your application and database. Default: false ❎registerMbeans This property controls whether or not JMX Management Beans (""MBeans"") are registered or not. Default: false 🔠catalog This property sets the default catalog for databases that support the concept of catalogs. If this property is not specified, the default catalog defined by the JDBC driver is used. Default: driver default 🔠connectionInitSql This property sets a SQL statement that will be executed after every new connection creation before adding it to the pool. If this SQL is not valid or throws an exception, it will be treated as a connection failure and the standard retry logic will be followed. Default: none 🔠driverClassName HikariCP will attempt to resolve a driver through the DriverManager based solely on the jdbcUrl, but for some older drivers the driverClassName must also be specified. Omit this property unless you get an obvious error message indicating that the driver was not found. Default: none 🔠transactionIsolation This property controls the default transaction isolation level of connections returned from the pool. If this property is not specified, the default transaction isolation level defined by the JDBC driver is used. Only use this property if you have specific isolation requirements that are common for all queries. The value of this property is the constant name from the Connection class such as TRANSACTION_READ_COMMITTED, TRANSACTION_REPEATABLE_READ, etc. Default: driver default ⌚validationTimeout This property controls the maximum amount of time that a connection will be tested for aliveness. This value must be less than the connectionTimeout. The lowest accepted validation timeout is 1000ms (1 second). Default: 5000 ⌚leakDetectionThreshold This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak. A value of 0 means leak detection is disabled. Lowest acceptable value for enabling leak detection is 2000 (2 secs). Default: 0 ➡dataSource This property is only available via programmatic configuration or IoC container. This property allows you to directly set the instance of the DataSource to be wrapped by the pool, rather than having HikariCP construct it via reflection. This can be useful in some dependency injection frameworks. When this property is specified, the dataSourceClassName property and all DataSource-specific properties will be ignored. Default: none ➡threadFactory This property is only available via programmatic configuration or IoC container. This property allows you to set the instance of the java.util.concurrent.ThreadFactory that will be used for creating all threads used by the pool. It is needed in some restricted execution environments where threads can only be created through a ThreadFactory provided by the application container. Default: none Missing Knobs HikariCP has plenty of ""knobs"" to turn as you can see above, but comparatively less than some other pools. This is a design philosophy. The HikariCP design aesthetic is Minimalism. In keeping with the simple is better or less is more design philosophy, some configuration axis are intentionally left out. Statement Cache Many connection pools, including Apache DBCP, Vibur, CP30 and others offer PreparedStatement caching. HikariCP does not. Why? At the connection pool layer PreparedStatements can only be cached per connection. If your application has 250 commonly executed queries and a pool of 20 connections you are asking your database to hold on to 5000 query execution plans -- and similarly the pool must cache this many PreparedStatements and their related graph of objects. Most major database JDBC drivers already have a Statement cache that can be configured, including PostgreSQL, Oracle, Derby, MySQL, DB2, and many others. JDBC drivers are in a unique position to exploit database specific features, and nearly all of the caching implementations are capable of sharing execution plans across connections. This means that instead of 5000 statements in memory and associated execution plans, your 250 commonly executed queries result in exactly 250 execution plans in the database. Clever implementations do not even retain PreparedStatement objects in memory at the driver-level but instead merely attach new instances to existing plan IDs. Using a statement cache at the pooling layer is an anti-pattern, and will negatively impact your application performance compared to driver-provided caches. Log Statement Text / Slow Query Logging Like Statement caching, most major database vendors support statement logging through properties of their own driver. This includes Oracle, MySQL, Derby, MSSQL, and others. Some even support slow query logging. For those few databases that do not support it, log4jdbc or jdbcdslog-exp are good options. Initialization You can use the HikariConfig class like so: HikariConfig config = new HikariConfig(); config.setJdbcUrl(""jdbc:mysql://localhost:3306/simpsons""); config.setUsername(""bart""); config.setPassword(""51mp50n""); config.addDataSourceProperty(""cachePrepStmts"", ""true""); config.addDataSourceProperty(""prepStmtCacheSize"", ""250""); config.addDataSourceProperty(""prepStmtCacheSqlLimit"", ""2048"");  HikariDataSource ds = new HikariDataSource(config); or directly instantiate a HikariDataSource like so: HikariDataSource ds = new HikariDataSource(); ds.setJdbcUrl(""jdbc:mysql://localhost:3306/simpsons""); ds.setUsername(""bart""); ds.setPassword(""51mp50n""); ... or property file based: HikariConfig config = new HikariConfig(""some/path/hikari.properties""); HikariDataSource ds = new HikariDataSource(config); Example property file: dataSourceClassName=org.postgresql.ds.PGSimpleDataSource dataSource.user=test dataSource.password=test dataSource.databaseName=mydb dataSource.portNumber=5432 dataSource.serverName=localhost or java.util.Properties based: Properties props = new Properties(); props.setProperty(""dataSourceClassName"", ""org.postgresql.ds.PGSimpleDataSource""); props.setProperty(""dataSource.user"", ""test""); props.setProperty(""dataSource.password"", ""test""); props.setProperty(""dataSource.databaseName"", ""mydb""); props.put(""dataSource.logWriter"", new PrintWriter(System.out));  HikariConfig config = new HikariConfig(props); HikariDataSource ds = new HikariDataSource(config); There is also a System property available, hikaricp.configurationFile, that can be used to specify the location of a properties file. If you intend to use this option, construct a HikariConfig or HikariDataSource instance using the default constructor and the properties file will be loaded. Popular DataSource Class Names We recommended using dataSourceClassName instead of jdbcUrl, but both are acceptable. We'll say that again, both are acceptable. Note: Spring Boot auto-configuration users, you need to use jdbcUrl-based configuration. Here is a list of JDBC DataSource classes for popular databases: Database Driver DataSource class Apache Derby Derby org.apache.derby.jdbc.ClientDataSource Firebird Jaybird org.firebirdsql.pool.FBSimpleDataSource H2 H2 org.h2.jdbcx.JdbcDataSource HSQLDB HSQLDB org.hsqldb.jdbc.JDBCDataSource IBM DB2 IBM JCC com.ibm.db2.jcc.DB2SimpleDataSource IBM Informix IBM Informix com.informix.jdbcx.IfxDataSource MS SQL Server Microsoft com.microsoft.sqlserver.jdbc.SQLServerDataSource MySQL Connector/J com.mysql.jdbc.jdbc2.optional.MysqlDataSource MySQL/MariaDB MariaDB org.mariadb.jdbc.MySQLDataSource Oracle Oracle oracle.jdbc.pool.OracleDataSource OrientDB OrientDB com.orientechnologies.orient.jdbc.OrientDataSource PostgreSQL pgjdbc-ng com.impossibl.postgres.jdbc.PGDataSource PostgreSQL PostgreSQL org.postgresql.ds.PGSimpleDataSource SAP MaxDB SAP com.sap.dbtech.jdbc.DriverSapDB SQLite xerial org.sqlite.SQLiteDataSource SyBase jConnect com.sybase.jdbc4.jdbc.SybDataSource Play Framework Plugin Note Play 2.4 now uses HikariCP by default. A new plugin has come up for the the Play framework; play-hikaricp. If you're using the excellent Play framework, your application deserves HikariCP. Thanks Edulify Team! Clojure Wrapper A new Clojure wrapper has been created by tomekw and can be found here. Support 💬 Google discussion group HikariCP here, growing FAQ.   Wiki Don't forget the Wiki for additional information such as: FAQ Hibernate 4.x Configuration MySQL Configuration Tips etc. Requirements ⇒ Java 7 and above ⇒ slf4j library Sponsors YourKit supports open source projects with its full-featured Java Profiler. Click the YourKit logo below to learn more. Contributions Please perform changes and submit pull requests from the dev branch instead of master. Please set your editor to use spaces instead of tabs, and adhere to the apparent style of the code you are editing. The dev branch is always more ""current"" than the master if you are looking to live life on the edge. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brettwooldridge/HikariCP"	"High performance JDBC connection pool."	"true"
"Database"	"JDBI"	"http://jdbi.org/"	"Convenient abstraction of JDBC."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"659"	"64"	"152"	"GitHub - jdbi/jdbi: jDBI is designed to provide convenient tabular data access in Java(tm). It uses the Java collections framework for query results, provides a convenient means of externalizing sql statements, and provides named parameter support for any database being used. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 64 Star 659 Fork 152 jdbi/jdbi Code Issues 38 Pull requests 8 Pulse Graphs jDBI is designed to provide convenient tabular data access in Java(tm). It uses the Java collections framework for query results, provides a convenient means of externalizing sql statements, and provides named parameter support for any database being used. http://jdbi.org/ 1,148 commits 6 branches 141 releases Fetching contributors Java 95.8% HTML 4.0% GAP 0.2% Java HTML GAP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages jdbi3-doc-outline jdbi3-transaction-all-the-things jdbi3 master sql-naming Nothing to show trunk_at_2.0_pre2 jdbi3-3.0.0-alpha0 jdbi-2.73 jdbi-2.72 jdbi-2.71 jdbi-2.70 jdbi-2.69-alpha jdbi-2.63.1 jdbi-2.63 jdbi-2.62 jdbi-2.61 jdbi-2.60 jdbi-2.59 jdbi-2.58 jdbi-2.57 jdbi-2.56 jdbi-2.55 jdbi-2.54 jdbi-2.53 jdbi-2.52 jdbi-2.51 jdbi-2.50 jdbi-2.49 jdbi-2.48.2 jdbi-2.48.1 jdbi-2.48 jdbi-2.47 jdbi-2.46 jdbi-2.45 jdbi-2.44 jdbi-2.43.1 jdbi-2.43 jdbi-2.42 jdbi-2.41.2 jdbi-2.41.1 jdbi-2.41 jdbi-2.40 jdbi-2.39.1 jdbi-2.39 jdbi-2.38.1 jdbi-2.38 jdbi-2.37.2 jdbi-2.37.1 jdbi-2.37 jdbi-2.36.2 jdbi-2.36.1 jdbi-2.35 jdbi-2.34.1 jdbi-2.34 jdbi-2.33.3 jdbi-2.33.2 jdbi-2.33.1 jdbi-2.33 jdbi-2.32 jdbi-2.31.3 jdbi-2.31.2 jdbi-2.31.1 jdbi-2.31 jdbi-2.30 jdbi-2.29 jdbi-2.28 jdbi-2.27 jdbi-2.26 jdbi-2.25 jdbi-2.24 jdbi-2.23 jdbi-2.22 jdbi-2.21 jdbi-2.20 jdbi-2.19 jdbi-2.18 jdbi-2.17 jdbi-2.16 jdbi-2.15 jdbi-2.14.1 jdbi-2.14 jdbi-2.13 jdbi-2.12 jdbi-2.11 jdbi-2.10.2 jdbi-2.10.1 jdbi-2.10.0 jdbi-2.9.4 jdbi-2.9.3 jdbi-2.9.1 jdbi-2.9.0 jdbi-2.8.0 jdbi-2.7.1 jdbi-2.7.0 jdbi-2.6.0 jdbi-2.5.0 jdbi-2.4.9 jdbi-2.4.8 jdbi-2.4.7 jdbi-2.4.6 jdbi-2.4.5 jdbi-2.4.4 jdbi-2.4.3 jdbi-2.4.2 jdbi-2.4.1 Nothing to show New pull request Latest commit 837fa09 Jul 14, 2016 qualidafial committed on GitHub Merge pull request #406 from stevenschlansker/out-param-index … @OutParameter annotation for @SqlCall methods Permalink Failed to load latest commit information. src Add OutParameter annotation and test case, fixes #405 Jul 11, 2016 .gitignore Update to basepom-8 Jan 2, 2015 .travis.yml Cache maven repo to speed builds on Travis Dec 26, 2015 CHANGES_PLANNED_FOR_3_0 Add replacing Class with Type task to 3.0 wishlist Sep 11, 2015 CONTRIBUTORS update copyright headers, add support for DML, add attach() for build… Feb 17, 2011 COPYRIGHT.md remove copyright lines from source code Sep 16, 2015 LICENSE Initial Jan 22, 2005 NOTICE update copyright headers, add support for DML, add attach() for build… Feb 17, 2011 README.md Improve Travis status to link to Travis page. Dec 31, 2014 RELEASE_NOTES Add OutParameter annotation and test case, fixes #405 Jul 11, 2016 pom.xml cglib 3.2.2, asm 5.1 May 10, 2016 README.md jDBI provides a convenience interface for SQL operations in Java. It is not intended as an abstraction layer, but rather a library which makes the common things easy and the hard things possible, to paraphrase Larry Wall. Documentation is at http://jdbi.org/ There is a mailing list at http://groups.google.com/group/jdbi Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brianm/jdbi"	"Convenient abstraction of JDBC."	"true"
"Database"	"Jedis"	"https://github.com/xetorthio/jedis"	"A small client for interaction with redis, with methods for commands."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3887"	"522"	"1808"	"GitHub - xetorthio/jedis: A blazingly small and sane redis java client Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 522 Star 3,887 Fork 1,808 xetorthio/jedis Code Issues 89 Pull requests 37 Wiki Pulse Graphs A blazingly small and sane redis java client 1,365 commits 22 branches 33 releases 114 contributors Java 98.3% C 1.1% Makefile 0.6% Java C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.6 2.7 2.8 2.9 allanwax-localhost-fix cluster_password cluster gh-pages hll infinite_fix integration jdk1.5 loadable_modules marcosnils-cluster master module_fix mvn-repo photoni-zadd-map-fix-clean pool_exception sharded-pubsub travis_maven_cache use_cluster_slots Nothing to show v1.0.0 jedis-2.8.1 jedis-2.8.0 jedis-2.7.3 jedis-2.7.2 jedis-2.7.1 jedis-2.7.0 jedis-2.6.3 jedis-2.6.2 jedis-2.6.1 jedis-2.6.0 jedis-2.5.2 jedis-2.5.1 jedis-2.5.0 jedis-2.4.2 jedis-2.4.1 jedis-2.4.0 jedis-2.3.1 jedis-2.3.0 jedis-2.2.1 jedis-2.2.0 jedis-2.1.0 jedis-2.0.0 jedis-1.5.2 jedis-1.5.1 jedis-1.5.0 jedis-1.5.0-RC2 jedis-1.5.0-RC1 jedis-1.4.0 jedis-1.3.1 jedis-1.3.0 3.0-f 2.3.0 Nothing to show New pull request Latest commit b145a83 Jul 14, 2016 harshmoorjani committed with marcosnils Added initial size (and load factor) for HashMaps - to avoid it being… … … resized when Redis Hash has too many keys. (#1343) Permalink Failed to load latest commit information. .github Add issue template Feb 24, 2016 src Added initial size (and load factor) for HashMaps - to avoid it being… Jul 14, 2016 .gitignore Implemented a HashTag version of SCAN methods for Redis Cluster (#1335) Jul 7, 2016 .travis.yml Omit ModuleTest to avoid redis crashing Jun 8, 2016 LICENSE.txt Updated license Sep 22, 2010 Makefile Add support to set password in JedisCluster (#1269) Jun 1, 2016 README.md Update README.md Jan 19, 2016 hbase-formatter.xml Apply Maven2 Java Formatter Plugin to pom.xml (hbase formatter) Dec 11, 2014 pom.xml Upgrade the JDK versin to 1.7 #1333 (#1334) Jul 3, 2016 README.md Jedis Jedis is a blazingly small and sane Redis java client. Jedis was conceived to be EASY to use. Jedis is fully compatible with redis 2.8.x and 3.0.x. Community Meet us on IRC: ##jedis on freenode.net Join the mailing-list at http://groups.google.com/group/jedis_redis So what can I do with Jedis? All of the following redis features are supported: Sorting Connection handling Commands operating on any kind of values Commands operating on string values Commands operating on hashes Commands operating on lists Commands operating on sets Commands operating on sorted sets Transactions Pipelining Publish/Subscribe Persistence control commands Remote server control commands Connection pooling Sharding (MD5, MurmurHash) Key-tags for sharding Sharding with pipelining Scripting with pipelining Redis Cluster How do I use it? You can download the latest build at: http://github.com/xetorthio/jedis/releases Or use it as a maven dependency: <dependency>     <groupId>redis.clients</groupId>     <artifactId>jedis</artifactId>     <version>2.8.0</version>     <type>jar</type>     <scope>compile</scope> </dependency> To use it just: Jedis jedis = new Jedis(""localhost""); jedis.set(""foo"", ""bar""); String value = jedis.get(""foo""); For more usage examples check the tests. Please check the wiki. There are lots of cool things you should know, including information about connection pooling. And you are done! Jedis Cluster Redis cluster specification (still under development) is implemented Set<HostAndPort> jedisClusterNodes = new HashSet<HostAndPort>(); //Jedis Cluster will attempt to discover cluster nodes automatically jedisClusterNodes.add(new HostAndPort(""127.0.0.1"", 7379)); JedisCluster jc = new JedisCluster(jedisClusterNodes); jc.set(""foo"", ""bar""); String value = jc.get(""foo""); FAQ Do you have strange stack traces? You're getting errors when running jedis in multi-threaded environments? Do you need further instructions about pipelining, transactions or sentinel? Please check the WIKI for more useful information. I want to contribute! That is great! Please see CONTRIBUTING.md on project's root directory for follow up how to contribute to Jedis project. Thanks for helping! Sponsorship YourKit supports open source projects with its full-featured Java Profiler. YourKit, LLC is the creator of YourKit Java Profiler and YourKit .NET Profiler, innovative and intelligent tools for profiling Java and .NET applications. License Copyright (c) 2011 Jonathan Leibiusky Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xetorthio/jedis"	"A small client for interaction with redis, with methods for commands."	"true"
"Database"	"jOOQ"	"http://www.jooq.org/"	"Generates typesafe code based on SQL schema."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1288"	"104"	"319"	"GitHub - jOOQ/jOOQ: jOOQ is an innovative solution for a better integration of Java applications with popular databases like Oracle, Microsoft SQL Server, IBM DB2, or SAP Sybase. When using jOOQ, our customers benefit from a significant added value and ROI as their software developers can express database queries in a much simpler and faster way. From our experience, this leads to a 10% - 20% decrease of programming effort, which again leads to higher quality and to a lower error rate in program code, and thus in the entire application. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 104 Star 1,288 Fork 319 jOOQ/jOOQ Code Issues 1,096 Pull requests 4 Wiki Pulse Graphs jOOQ is an innovative solution for a better integration of Java applications with popular databases like Oracle, Microsoft SQL Server, IBM DB2, or SAP Sybase. When using jOOQ, our customers benefit from a significant added value and ROI as their software developers can express database queries in a much simpler and faster way. From our experienc… http://www.jooq.org 4,887 commits 10 branches 39 releases 35 contributors Java 95.6% Xtend 1.7% PLpgSQL 1.1% XSLT 0.6% Scala 0.5% PLSQL 0.3% Other 0.2% Java Xtend PLpgSQL XSLT Scala PLSQL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master revert-4459-art/fix-html-injection revert-4562-master version-3.2.0-branch version-3.3.0-branch version-3.4.0-branch version-3.5.0-branch version-3.6.0-branch version-3.7.0-branch version-3.8.0-branch Nothing to show version-3.8.4 version-3.8.3 version-3.8.2 version-3.8.1 version-3.8.0 version-3.7.4 version-3.7.3 version-3.7.2 version-3.7.1 version-3.7.0 version-3.6.4 version-3.6.3 version-3.6.2 version-3.6.1 version-3.6.0 version-3.5.4 version-3.5.3 version-3.5.2 version-3.5.1 version-3.5.0 version-3.4.5 version-3.4.4 version-3.4.3 version-3.4.2 version-3.4.1 version-3.4.0 version-3.3.4 version-3.3.3 version-3.3.2 version-3.3.1 version-3.3.0 version-3.2.7 version-3.2.6 version-3.2.5 version-3.2.4 version-3.2.3 version-3.2.2 version-3.2.0 push Nothing to show New pull request Latest commit 5f93366 Jul 14, 2016 lukaseder Merge branch 'master' of https://github.com/jOOQ/jOOQ Permalink Failed to load latest commit information. jOOQ-checker [#5245] Improved @Require behaviour and spec May 15, 2016 jOOQ-codegen-maven [#5286] Add more meaningful error handling when Maven code generator … May 21, 2016 jOOQ-codegen [#5349] Wrong defaults for <tableValuedFunctions/> in jOOQ Open Sourc… Jul 4, 2016 jOOQ-examples Update README.md Jun 30, 2016 jOOQ-manual/src/main/resources/org/jooq/web [#5415] Recommend using third party Gradle plugin for jOOQ instead of… Jul 14, 2016 jOOQ-meta-extensions [#5410] Update Hibernate dependency to 5.2.1 in jooq-meta-extensions Jul 12, 2016 jOOQ-meta [#5302] Unmarshal warning : cvc-complex-type.2.4.b: The content of el… Jul 4, 2016 jOOQ-release Release 3.8.4 Jul 14, 2016 jOOQ-scala [#5399] Conversions.scala returns Option[_] instead of Option[T] or O… Jul 6, 2016 jOOQ-xtend/src/main/xtend/org/jooq/xtend [#4889] Update copyright to 2016 Jan 4, 2016 jOOQ [#5416] Bad update count on Oracle UPDATE .. RETURNING emulation Jul 14, 2016 .gitignore whitespace change Jan 29, 2015 .travis.yml ... Mar 10, 2016 CONTRIBUTING.md Blank out rather than mask [pro] code to avoid confusion with users Dec 31, 2015 LICENSE [#4889] Update copyright to 2016 Jan 4, 2016 README.md Whitespace changes Feb 3, 2014 authors.txt Whitespace changes Feb 3, 2014 pom.xml Release 3.9.0-SNAPSHOT May 4, 2016 README.md jOOQ's reason for being - compared to JPA Java and SQL have come a long way. SQL is an ""ancient"", yet established and well-understood technology. Java is a legacy too, although its platform JVM allows for many new and contemporary languages built on top of it. Yet, after all these years, libraries dealing with the interface between SQL and Java have come and gone, leaving JPA to be a standard that is accepted only with doubts, short of any surviving options. So far, there had been only few database abstraction frameworks or libraries, that truly respected SQL as a first class citizen among languages. Most frameworks, including the industry standards JPA, EJB, Hibernate, JDO, Criteria Query, and many others try to hide SQL itself, minimising its scope to things called JPQL, HQL, JDOQL and various other inferior query languages jOOQ has come to fill this gap. jOOQ's reason of being - compared to LINQ Other platforms incorporate ideas such as LINQ (with LINQ-to-SQL), or Scala's SLICK, or also Java's QueryDSL to better integrate querying as a concept into their respective language. By querying, they understand querying of arbitrary targets, such as SQL, XML, Collections and other heterogeneous data stores. jOOQ claims that this is going the wrong way too. In more advanced querying use-cases (more than simple CRUD and the occasional JOIN), people will want to profit from the expressivity of SQL. Due to the relational nature of SQL, this is quite different from what object-oriented and partially functional languages such as C#, Scala, or Java can offer. It is very hard to formally express and validate joins and the ad-hoc table expression types they create. It gets even harder when you want support for more advanced table expressions, such as pivot tables, unnested cursors, or just arbitrary projections from derived tables. With a very strong object-oriented typing model, these features will probably stay out of scope. In essence, the decision of creating an API that looks like SQL or one that looks like C#, Scala, Java is a definite decision in favour of one or the other platform. While it will be easier to evolve SLICK in similar ways as LINQ (or QueryDSL in the Java world), SQL feature scope that clearly communicates its underlying intent will be very hard to add, later on (e.g. how would you model Oracle's partitioned outer join syntax? How would you model ANSI/ISO SQL:1999 grouping sets? How can you support scalar subquery caching? etc...). jOOQ has come to fill this gap. jOOQ is different SQL was never meant to be abstracted. To be confined in the narrow boundaries of heavy mappers, hiding the beauty and simplicity of relational data. SQL was never meant to be object-oriented. SQL was never meant to be anything other than... SQL! For more details please visit jooq.org. Follow jOOQ on Twitter and on Wordpress. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jOOQ/jOOQ"	"Generates typesafe code based on SQL schema."	"true"
"Database"	"Liquibase"	"http://www.liquibase.org/"	"Database-independent library for tracking, managing and applying database schema changes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"7"	"40"	"GitHub - liquibase/liquibase.github.com Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 17 Fork 40 liquibase/liquibase.github.com Code Issues 9 Pull requests 8 Pulse Graphs No description or website provided. 386 commits 4 branches 0 releases Fetching contributors HTML 84.6% CSS 9.6% Java 5.5% Other 0.3% HTML CSS Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.3 master rexmorrow-master role_pages Nothing to show Nothing to show New pull request Latest commit 176bcbc Jul 12, 2016 nvoxland Blog post: expanding database support Permalink Failed to load latest commit information. _doc_generators Updated change docs for 3.1.0 Jan 9, 2014 _includes No longer need {{pageRoot}} Feb 17, 2016 _layouts Fixed broken navigation from jekyll 3.0 upgrade Feb 17, 2016 _posts Blog post: expanding database support Jul 12, 2016 blog Blog post Oct 27, 2015 community Moved blog content to site Jun 18, 2015 converters Imported earlier work that added titles, changed header syntax, etc. Jan 23, 2013 css Moved blog content to site Jun 18, 2015 custom_images 2015 survey results blog post Sep 25, 2015 dbdoc Added dbdoc example May 30, 2013 development - Add info to README.md on techs used for the site. Jan 10, 2014 documentation 3.5 release Apr 21, 2016 download 3.5.1 release May 11, 2016 extensions Wrote utility to check links then cleaned up links Feb 25, 2013 forum Added in maven docs and forum redirect Apr 24, 2013 images Created role pages Nov 4, 2015 javadoc 3.5 release Apr 21, 2016 js Updated jquery Mar 26, 2013 manual Added redirect for old page Apr 22, 2013 xml/ns Updated for 3.5 release Apr 6, 2016 .gitignore First round of vagrant info Feb 10, 2014 404.html Moved blog content to site Jun 18, 2015 CNAME Added cname page and removed robots.txt for putting site live Apr 18, 2013 README.md - Add info to README.md, on building the site locally using Jekyll. Jan 12, 2014 _config.yml No longer need {{pageRoot}} Feb 17, 2016 about.md 3.3.4 release plus new twitter account links May 27, 2015 apache_derby.md Fixed issues with new jekyll version Jan 7, 2014 atom.xml Moved blog content to site Jun 18, 2015 bestpractices.md Analytics updates May 4, 2015 databases.md Add info to databases.md on support for less common databases, that were Jan 12, 2014 dba.md Role page edits Nov 5, 2015 developer.md Role page edits Nov 5, 2015 faq.md Tweaking changes from Rex, restored analytics event tracking May 4, 2015 feed Trying to fix /feed redirect Jun 18, 2015 googlea4067c3092b963ad.html Added webmaster tools verification file Feb 18, 2014 index.md Created role pages Nov 4, 2015 informix.md Doumentation cleanup. Filled in recent history Oct 9, 2013 qa.md Edited QA page and posted as a blog post Feb 15, 2016 quickstart.md Analytics updates May 4, 2015 release_manager.md Role page edits Nov 5, 2015 rss.xml Trying to fix /feed redirect Jun 18, 2015 sqlite.md Doumentation cleanup. Filled in recent history Oct 9, 2013 tutorial-using-oracle.md Tweaking changes from Rex, restored analytics event tracking May 4, 2015 v2_features.md Moved blog content to site Jun 18, 2015 v2_upgrade.md Created 3.1 upgrade guide and updated download page for 3.1 Jan 8, 2014 v3_1_upgrade.md Added note for CORE-1675 Jan 9, 2014 v3_2_upgrade.md Created upgrade guide Jun 2, 2014 v3_3_upgrade.md Added 3.3 upgrade guide Nov 19, 2014 v3_upgrade.md Created 3.1 upgrade guide and updated download page for 3.1 Jan 8, 2014 README.md liquibase.github.io Documentation for the liquibase.org site. Please send pull requests! The Liquibase site is hosted using GitHub Pages, and generated using Jekyll. Pages are written in MarkDown documents, making use of Liquid template tags. To build the site for local testing, install Jekyll and its dependencies, including Ruby, the kramdown gem, Python 2.7, and the Pygments package. If you're developing on Windows, there is a handy Portable package of Jekyll you can use. You may still need to fiddle around a bit to get it working, such as installing the kramdown gem (""gem install kramdown"") and editing ""setpath.cmd"". Once Jekyll is installed, just navigate to this repo's directory, and run jekyll serve. You can then access the site from http://localhost:4000. If you're using a MarkDown editor with a ""live preview"" feature, be aware that it's unlikely to support Liquid's syntax highlighting tags, such as ""{% highlight xml %}"". Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/liquibase/liquibase.github.com"	"Database-independent library for tracking, managing and applying database schema changes."	"true"
"Database"	"MapDB"	"http://www.mapdb.org/"	"Embedded database engine that provides concurrent collections backed on disk or in off-heap memory."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2030"	"251"	"484"	"GitHub - jankotek/mapdb: MapDB provides concurrent Maps, Sets and Queues backed by disk storage or off-heap-memory. It is a fast and easy to use embedded Java database engine. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 251 Star 2,030 Fork 484 jankotek/mapdb Code Issues 33 Pull requests 0 Pulse Graphs MapDB provides concurrent Maps, Sets and Queues backed by disk storage or off-heap-memory. It is a fast and easy to use embedded Java database engine. http://www.mapdb.org 1,907 commits 6 branches 77 releases 34 contributors Java 71.0% Kotlin 29.0% Java Kotlin Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags mapdb3-port-tests master release-1.0 release-2.0 release-misc store2 Nothing to show mapdb-renamed-2.0-beta12 mapdb-renamed-2.0-beta11 mapdb-renamed-2.0-beta10 mapdb-renamed-2.0-beta8 mapdb-renamed-2.0-beta7 mapdb-renamed-2.0-beta6 mapdb-renamed-2.0-beta5 mapdb-renamed-2.0-beta4 mapdb-renamed-2.0-beta3 mapdb-renamed-2.0-beta2 mapdb-renamed-1.0.8 mapdb-renamed-1.0.6 mapdb-nounsafe-2.0-beta12 mapdb-nounsafe-2.0-beta11 mapdb-nounsafe-2.0-beta10 mapdb-noassert-2.0-beta12 mapdb-noassert-2.0-beta11 mapdb-noassert-2.0-beta10 mapdb-debug-2.0-beta12 mapdb-debug-2.0-beta11 mapdb-debug-2.0-beta10 mapdb-3.0.0 mapdb-3.0.0-beta5 mapdb-3.0.0-beta4 mapdb-3.0.0-beta3 mapdb-3.0.0-beta2 mapdb-3.0.0-beta1 mapdb-3.0.0-RC2 mapdb-3.0.0-RC1 mapdb-3.0.0-M6 mapdb-3.0.0-M5 mapdb-3.0.0-M4 mapdb-3.0.0-M3 mapdb-3.0.0-M2 mapdb-3.0.0-M1 mapdb-2.0-beta13 mapdb-2.0-beta12 mapdb-2.0-beta11 mapdb-2.0-beta10 mapdb-2.0-beta9 mapdb-2.0-beta8 mapdb-2.0-beta7 mapdb-2.0-beta6 mapdb-2.0-beta5 mapdb-2.0-beta4 mapdb-2.0-beta3 mapdb-2.0-beta2 mapdb-2.0-beta1 mapdb-2.0-alpha3 mapdb-2.0-alpha2 mapdb-2.0-alpha1 mapdb-1.0.9 mapdb-1.0.8 mapdb-1.0.7 mapdb-1.0.6 mapdb-1.0.5 mapdb-1.0.4 mapdb-1.0.3 mapdb-1.0.3-b mapdb-1.0.2 mapdb-1.0.1 mapdb-1.0.0 mapdb-0.9.13 mapdb-0.9.12 mapdb-0.9.11 mapdb-0.9.10 mapdb-0.9.9 mapdb-0.9.8 mapdb-0.9.7 mapdb-0.9.6 mapdb-0.9.5 mapdb-0.9.4 mapdb-0.9.3 mapdb-0.9.2 mapdb-0.9.1 mapdb-0.9.0 jdbm-4.001-alpha Nothing to show New pull request Latest commit cb7ae10 Jul 11, 2016 jankotek committed on GitHub Update README.md Permalink Failed to load latest commit information. src Merge pull request #734 from minborg/master Jun 28, 2016 .gitignore .gitignore update Aug 3, 2015 .travis.yml Travis: use Java8 Mar 3, 2016 LICENSE.txt mapdb3 initial commit Mar 3, 2016 README.md Update README.md Jul 11, 2016 logger.properties Update logger.properties. Jul 29, 2015 pom.xml [maven-release-plugin] prepare for next development iteration Jun 29, 2016 README.md MapDB: database engine MapDB combines embedded database engine and Java collections. It is free under Apache 2 license. MapDB is fplexible and can be used in many roles: Drop-in replacement for Maps, Lists, Queues and other collections. Off-heap collections not affected by Garbage Collector Multilevel cache with expiration and disk overflow. RDBMs replacement with transactions, MVCC, incremental backups etc… Local data processing and filtering. MapDB has utilities to process huge quantities of data in reasonable time. Hello world Maven snippet, VERSION is <dependency>     <groupId>org.mapdb</groupId>     <artifactId>mapdb</artifactId>     <version>VERSION</version> </dependency>  Hello world:     //import org.mapdb.*     DB db = DBMaker.memoryDB().make();     ConcurrentMap map = db.hashMap(""map"").make();     map.put(""something"", ""here"");  Continue at Quick Start or at Documentation. Support More details. Development MapDB is written in Kotlin. You will need Intellij Idea 15 Community Edition to edit it. Use Maven to build MapDB: mvn install MapDB comes with extensive unit tests, by default only tiny fraction is executed, so build finishes under 10 minutes. Full test suite has over million test cases and runs several hours/days. To run full test suite set -Dmdbtest=1 property. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jankotek/mapdb"	"Embedded database engine that provides concurrent collections backed on disk or in off-heap memory."	"true"
"Database"	"Presto"	"https://github.com/prestodb/presto"	"Distributed SQL query engine for big data."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4919"	"630"	"1477"	"GitHub - prestodb/presto: Distributed SQL query engine for big data Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 630 Star 4,919 Fork 1,477 prestodb/presto Code Issues 476 Pull requests 133 Wiki Pulse Graphs Distributed SQL query engine for big data https://prestodb.io 7,948 commits 2 branches 158 releases 141 contributors Java 98.8% JavaScript 0.6% HTML 0.4% ANTLR 0.1% Shell 0.1% CSS 0.0% Java JavaScript HTML ANTLR Shell CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags hotfix-0.144 master Nothing to show 0.150 0.149 0.148 0.147 0.146 0.145 0.144.6 0.144.5 0.144.4 0.144.3 0.144.2 0.144.1 0.144 0.143 0.142 0.141 0.140 0.139 0.138 0.137 0.136 0.135 0.134 0.133 0.132 0.131 0.130 0.129 0.128 0.127 0.126 0.125 0.124 0.123 0.122 0.121 0.119 0.118 0.117 0.116 0.115 0.114 0.113 0.112 0.111 0.110 0.109 0.108 0.107 0.106 0.105 0.104 0.103 0.102 0.101 0.100 0.99 0.98 0.97 0.96 0.95 0.94 0.93 0.92 0.91 0.90 0.89 0.88 0.87 0.86 0.85 0.84 0.83 0.82 0.81 0.80 0.79 0.78 0.77 0.76 0.75 0.74 0.73 0.72 0.71 0.70 0.69 0.68 0.67 0.66 0.65 0.64 0.63 0.62 0.61 0.60 0.59 0.58 0.57 0.56 Nothing to show New pull request Latest commit f835160 Jul 11, 2016 kokosing committed with martint Test for pushdown of join condition conjuncts to inner side Permalink Failed to load latest commit information. .mvn Fix formatting Jun 13, 2016 presto-atop Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-base-jdbc Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-benchmark-driver [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-benchmark Move static aggregation instances out of implementation classes Jul 12, 2016 presto-blackhole Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-bytecode [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-cassandra Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-cli [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-client Add load balancer resource for coordinator Jul 12, 2016 presto-docs Document hive.security property Jul 13, 2016 presto-example-http Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-hive-cdh4 [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-hive-cdh5 [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-hive-hadoop1 [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-hive-hadoop2 [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-hive Fix aggregation split in AddLocalExchanges Jul 13, 2016 presto-jdbc [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-jmx Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-kafka Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-local-file Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-main Test for pushdown of join condition conjuncts to inner side Jul 14, 2016 presto-ml Remove parameterizedTypeName utility method Jul 12, 2016 presto-mongodb Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-mysql Fix build for JDBC connector Jul 7, 2016 presto-orc [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-parser Add Support EXISTS expression Jul 13, 2016 presto-postgresql Fix build for JDBC connector Jul 7, 2016 presto-product-tests Add product test for GRANT and REVOKE Jul 13, 2016 presto-raptor Fix SQL injection in Raptor ShardMetadataRecordCursor Jul 11, 2016 presto-record-decoder [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-redis Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-server-rpm Fix presto-server-rpm output name Jul 13, 2016 presto-server [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-spi Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-teradata-functions [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-testing-server-launcher [maven-release-plugin] prepare for next development iteration Jul 6, 2016 presto-tests Add Support EXISTS expression Jul 13, 2016 presto-tpch Remove unused connector ID from FixedSplitSource Jul 7, 2016 presto-verifier Support shadowing writes in verifier Jul 8, 2016 src Fix formatting Jun 13, 2016 .gitignore Refactor product test configuration Apr 14, 2016 .travis.yml Add product test for GRANT and REVOKE Jul 13, 2016 CONTRIBUTING.md New CLA form Apr 22, 2014 LICENSE Add LICENSE file Oct 1, 2013 README.md Add a Developers section w/ style guidelines to README Jun 6, 2016 mvnw Add the Maven Wrapper to Presto Nov 9, 2015 pom.xml Upgrade to Sphinx 1.4 Jul 8, 2016 README.md Presto Presto is a distributed SQL query engine for big data. See the User Manual for deployment instructions and end user documentation. Requirements Mac OS X or Linux Java 8 Update 60 or higher (8u60+), 64-bit Maven 3.3.9+ (for building) Python 2.4+ (for running with the launcher script) Building Presto Presto is a standard Maven project. Simply run the following command from the project root directory: mvn clean install  On the first build, Maven will download all the dependencies from the internet and cache them in the local repository (~/.m2/repository), which can take a considerable amount of time. Subsequent builds will be faster. Presto has a comprehensive set of unit tests that can take several minutes to run. You can disable the tests when building: mvn clean install -DskipTests  Running Presto in your IDE Overview After building Presto for the first time, you can load the project into your IDE and run the server. We recommend using IntelliJ IDEA. Because Presto is a standard Maven project, you can import it into your IDE using the root pom.xml file. In IntelliJ, choose Open Project from the Quick Start box or choose Open from the File menu and select the root pom.xml file. After opening the project in IntelliJ, double check that the Java SDK is properly configured for the project: Open the File menu and select Project Structure In the SDKs section, ensure that a 1.8 JDK is selected (create one if none exist) In the Project section, ensure the Project language level is set to 8.0 as Presto makes use of several Java 8 language features Presto comes with sample configuration that should work out-of-the-box for development. Use the following options to create a run configuration: Main Class: com.facebook.presto.server.PrestoServer VM Options: -ea -Xmx2G -Dconfig=etc/config.properties -Dlog.levels-file=etc/log.properties Working directory: $MODULE_DIR$ Use classpath of module: presto-main The working directory should be the presto-main subdirectory. In IntelliJ, using $MODULE_DIR$ accomplishes this automatically. Additionally, the Hive plugin must be configured with location of your Hive metastore Thrift service. Add the following to the list of VM options, replacing localhost:9083 with the correct host and port (or use the below value if you do not have a Hive metastore): -Dhive.metastore.uri=thrift://localhost:9083  Using SOCKS for Hive or HDFS If your Hive metastore or HDFS cluster is not directly accessible to your local machine, you can use SSH port forwarding to access it. Setup a dynamic SOCKS proxy with SSH listening on local port 1080: ssh -v -N -D 1080 server  Then add the following to the list of VM options: -Dhive.metastore.thrift.client.socks-proxy=localhost:1080  Running the CLI Start the CLI to connect to the server and run SQL queries: presto-cli/target/presto-cli-*-executable.jar  Run a query to see the nodes in the cluster: SELECT * FROM system.runtime.nodes;  In the sample configuration, the Hive connector is mounted in the hive catalog, so you can run the following queries to show the tables in the Hive database default: SHOW TABLES FROM hive.default;  Developers We recommend you use IntelliJ as your IDE. The code style template for the project can be found in the codestyle repository along with our general programming and Java guidelines. In addition to those you should also adhere to the following: Alphabetize sections in the documentation source files (both in table of contents files and other regular documentation files). In general, alphabetize methods/variables/sections if such ordering already exists in the surrounding code. When appropriate, use the Java 8 stream API. However, note that the stream implementation does not perform well so avoid using it in inner loops or otherwise performance sensitive sections. Categorize errors when throwing exceptions. For example, PrestoException takes an error code as an argument, PrestoException(HIVE_TOO_MANY_OPEN_PARTITIONS). This categorization lets you generate reports so you can monitor the frequency of various failures. Ensure that all files have the appropriate license header; you can generate the license by running mvn license:format. Consider using String formatting (printf style formatting using the Java Formatter class): format(""Session property %s is invalid: %s"", name, value) (note that format() should always be statically imported). Sometimes, if you only need to append something, consider using the + operator. Avoid using the ternary operator except for trivial expressions. Use an assertion from Airlift's Assertions class if there is one that covers your case rather than writing the assertion by hand. Over time we may move over to more fluent assertions like AssertJ. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/prestodb/presto"	"Distributed SQL query engine for big data."	"true"
"Database"	"Querydsl"	"http://www.querydsl.com/"	"Typesafe unified queries."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"936"	"101"	"252"	"GitHub - querydsl/querydsl: Unified Queries for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 101 Star 936 Fork 252 querydsl/querydsl Code Issues 127 Pull requests 14 Wiki Pulse Graphs Unified Queries for Java http://www.querydsl.com 6,976 commits 29 branches 248 releases 54 contributors Java 97.1% Scala 2.2% XSLT 0.6% CSS 0.1% Shell 0.0% Clojure 0.0% Java Scala XSLT CSS Shell Clojure Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags QUERYDSL_3 checkstyle-arrayorder delete-rawtypes examples-connectionpool i1293 i1376 i1411-oracle-datediff i1425 i1433 i1559 i1614 i1621-hibernate5-codegen i1766 i1781 i1838 i1846-querydsl3 i1870 i1888 jvm-tuning lucene-boost-operator master normalization-fix-issue normalization_initial_capacity packageverification-querydsl3 readme-examples revert-1704-skip-cubrid shell-provisioner syntax-examples timezonerule Nothing to show QUERYDSL_20110111 QUERYDSL_20090609 QUERYDSL_20090528 QUERYDSL_20090521 QUERYDSL_20081212 QUERYDSL_4_1_3 QUERYDSL_4_1_2 QUERYDSL_4_1_1 QUERYDSL_4_1_0 QUERYDSL_4_0_9 QUERYDSL_4_0_8 QUERYDSL_4_0_7 QUERYDSL_4_0_6 QUERYDSL_4_0_5 QUERYDSL_4_0_4 QUERYDSL_4_0_3 QUERYDSL_4_0_2 QUERYDSL_4_0_1 QUERYDSL_4_0_0 QUERYDSL_3_7_4 QUERYDSL_3_7_3 QUERYDSL_3_7_2 QUERYDSL_3_7_1 QUERYDSL_3_7_0 QUERYDSL_3_6_9 QUERYDSL_3_6_8 QUERYDSL_3_6_7 QUERYDSL_3_6_6 QUERYDSL_3_6_5 QUERYDSL_3_6_4 QUERYDSL_3_6_3 QUERYDSL_3_6_2 QUERYDSL_3_6_1 QUERYDSL_3_6_0 QUERYDSL_3_5_1 QUERYDSL_3_5_0 QUERYDSL_3_4_3 QUERYDSL_3_4_2 QUERYDSL_3_4_1 QUERYDSL_3_4_0 QUERYDSL_3_3_4 QUERYDSL_3_3_3 QUERYDSL_3_3_2 QUERYDSL_3_3_1 QUERYDSL_3_3_0 QUERYDSL_3_3_0_BETA2 QUERYDSL_3_3_0_BETA1 QUERYDSL_3_2_4 QUERYDSL_3_2_3 QUERYDSL_3_2_2 QUERYDSL_3_2_1 QUERYDSL_3_2_0 QUERYDSL_3_1_1 QUERYDSL_3_1_0 QUERYDSL_3_0_0 QUERYDSL_3_0_0_BETA2 QUERYDSL_3_0_0_BETA1 QUERYDSL_2_9_0 QUERYDSL_2_8_2 QUERYDSL_2_8_1 QUERYDSL_2_8_0 QUERYDSL_2_7_2 QUERYDSL_2_7_1 QUERYDSL_2_7_0 QUERYDSL_2_6_0 QUERYDSL_2_5_0 QUERYDSL_2_3_3 QUERYDSL_2_3_2 QUERYDSL_2_3_1 QUERYDSL_2_3_0 QUERYDSL_2_2_5 QUERYDSL_2_2_4 QUERYDSL_2_2_3 QUERYDSL_2_2_2 QUERYDSL_2_2_1 QUERYDSL_2_2_0 QUERYDSL_2_2_0_BETA5 QUERYDSL_2_2_0_BETA4 QUERYDSL_2_2_0_BETA3 QUERYDSL_2_2_0_BETA2 QUERYDSL_2_2_0_BETA1 QUERYDSL_2_1_2 QUERYDSL_2_1_1 QUERYDSL_2_1_0 QUERYDSL_2_1_0_BETA3 QUERYDSL_2_1_0_BETA2 QUERYDSL_2_1_0_BETA1 QUERYDSL_2_1_0_BETA_1 QUERYDSL_2_0_9 QUERYDSL_2_0_8 QUERYDSL_2_0_7 QUERYDSL_2_0_6 QUERYDSL_2_0_5 QUERYDSL_2_0_4 QUERYDSL_2_0_3 QUERYDSL_2_0_2 QUERYDSL_2_0_0 QUERYDSL_2_0_0_BETA_2 QUERYDSL_2_0_0_BETA_1 QUERYDSL_2_0_0_ALPHA_2 Nothing to show New pull request Latest commit e6de9d1 Jul 11, 2016 timowest committed on GitHub Merge pull request #1960 from querydsl/pull-approve3 … Add explanation for the `progress` labels Permalink Failed to load latest commit information. devops Fix config Jun 15, 2014 querydsl-ant-test Normalize line endings to lf Dec 13, 2015 querydsl-apt Bump version Jul 1, 2016 querydsl-codegen Bump version Jul 1, 2016 querydsl-collections Bump version Jul 1, 2016 querydsl-core Bump version Jul 1, 2016 querydsl-docs Bump version Jul 1, 2016 querydsl-examples Bump version Jul 1, 2016 querydsl-hibernate-search Bump version Jul 1, 2016 querydsl-jdo Bump version Jul 1, 2016 querydsl-jpa-codegen Bump version Jul 1, 2016 querydsl-jpa Bump version Jul 1, 2016 querydsl-lucene3 Bump version Jul 1, 2016 querydsl-lucene4 Bump version Jul 1, 2016 querydsl-lucene5 Bump version Jul 1, 2016 querydsl-maven-plugin Bump version Jul 1, 2016 querydsl-mongodb Bump version Jul 1, 2016 querydsl-scala Bump version Jul 1, 2016 querydsl-spatial Bump version Jul 1, 2016 querydsl-sql-codegen #1955 Fix ignoring foreign keys in MetadataExporter Jul 6, 2016 querydsl-sql-spatial Bump version Jul 1, 2016 querydsl-sql-spring Bump version Jul 1, 2016 querydsl-sql Bump version Jul 1, 2016 src/main Prevent junit.framework usage Dec 26, 2015 travis Reorder cubrid install steps Dec 15, 2015 .gitattributes Normalize line endings to lf Dec 13, 2015 .gitignore Ignore project configuration files for NetBeans Jun 17, 2014 .pullapprove.yml Add explanation for the `progress` labels Jul 5, 2016 .travis.yml Add caching for m2 folder May 5, 2016 LICENSE.txt Normalize line endings to lf Dec 13, 2015 README.md Use quickbuild in README.md Apr 21, 2016 dist.sh Querydsl 4.1.2 May 31, 2016 pom.xml Bump version Jul 1, 2016 release.sh Improve release script Jun 5, 2016 README.md Querydsl Querydsl is a framework which enables the construction of type-safe SQL-like queries for multiple backends including JPA, MongoDB and SQL in Java. Instead of writing queries as inline strings or externalizing them into XML files they are constructed via a fluent API. Getting started Use these tutorials to get started Querying JPA Querying SQL Querying Mongodb Querying Lucene Querying Collections Querydsl Spatial Querying JDO Examples Querydsl example projects Support Free support is provided in the Querydsl Google Group and on StackOverflow. How to build Querydsl provides releases via public Maven repositories, but you can also build the sources yourself like this $ mvn -Pquickbuild,{projectname} clean install Where projectname is one of the Maven profiles (e.g. jpa, sql, mongodb, etc. or all) For more information visit the project homepage at http://www.querydsl.com/. Vagrant/Puppet setup For running tests, a Vagrant/Puppet setup is provided. It is based on Ubuntu 12.04 and comes with the following databases: Oracle Express Edition 11g PostgreSQL 9.1.10 MySQL 5.5.34 Cubrid 9.2 You will need to install VirtualBox, Puppet, Vagrant, the vagrant-vbguest plugin and librarian-puppet. You will also need to download the Oracle XE 11g installer file (oracle-xe-11.2.0-1.0.x86_64.rpm.zip) manually and place it in the devops directory. To launch the virtual machine: $ cd devops $ librarian-puppet install $ vagrant up All of the databases' default ports are forwarded to the host machine. See the Vagrantfile for details. How to contribute GitHub pull requests are the way to contribute to Querydsl. If you are unsure about the details of a contribution, ask on the Querydsl Google Group or create a ticket on GitHub. Continuous integration Querydsl uses Cloudbees for Jenkins based CI As well as Travis CI for pull request validation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/querydsl/querydsl"	"Typesafe unified queries."	"true"
"Database"	"Realm"	"https://github.com/realm/realm-java"	"Mobile database to run directly inside phones, tablets or wearables."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5512"	"334"	"765"	"GitHub - realm/realm-java: Realm is a mobile database: a replacement for SQLite & ORMs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 334 Star 5,512 Fork 765 realm/realm-java Code Issues 239 Pull requests 36 Wiki Pulse Graphs Realm is a mobile database: a replacement for SQLite & ORMs http://realm.io 5,911 commits 112 branches 98 releases 56 contributors Java 87.4% C++ 8.6% Makefile 2.8% Groovy 0.9% Kotlin 0.2% HTML 0.1% Java C++ Makefile Groovy Kotlin HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bp-file-system bp-new-data-sort bp-performance-test cm-android-package cm-cm-migration-examples cm-cursor-example cm-cursor cm-dynamic-doc cm-example-syncadapter cm-lab-rxjava cm/arm64-encryption-stresstest cm/backlink-query-rfc cm/better-objects-benchmark cm/bug/async-unittests cm/bug/attach-snapshot-sources cm/bug/callbackorder-async-complete cm/bug/changelistener-new-object cm/bug/docker-adb cm/bug/dynamicrealmlist cm/bug/findfirstasync-notifychange cm/bug/iterators cm/bug/onchange-listener cm/cm/bug/default-values cm/cm/bug/transform-unittests cm/feature-rxjava-realmquery cm/lab/reuse-object cm/lab/spanner-benchmarks cm/rxjava cm/template-cleanup ez-bytecode-ap ez-distribution ez-modify-class-files ez-referencequeue ez/abi-splits ez/fix-lint-warnings ez/jenkinsfile-fixes ez/jenkinsfile feature-rxjava feature/backlinks feature/example/store_password feature/object-store feature/objectid infra-standard-jenkinsfile kg-add-unit-tests kg-add-version-to-exceptions kg-bug-linkquery-between kg-createobjectwithvalues kg-distinct kg-file-location kg-fix-tablequery kg-revert-to-core-utf-handling kg-upload-to-sonartype kg/bug/compacting-encrypted-realms kg/bug/compacting kg/compile-with-gcc4.9 kg/experiment/link-query kg/feature/os-schema kg/issue2759 kg/jni/object-store kg/jni/use-ndk-r11c-and-clang kg/support-mix-lang kg/test/copyFromRealm_useAfterClose km-tracking-components lk/query-for-list-membership lk/robolectric master mc-ci-testing-dummy-commit mc-default-module-fix mc-emulate-null-1241 mc-multi-process mc/bug/1851 mc/bye-bye-finalizer mc/cmake mc/core-update-1.4.0 mc/disable-optional-api-transformer mc/feature/os-schema mc/feature/os-shared-realm mc/hotfix-merge-back/0.85.1 mc/merge/0.87_e9bfbe7f_test mc/merge/0.90_82e0e0d1 mc/merge/0.91_4c48038a mc/merge/1.0_6c66b4de mc/msg-invalid-db mc/optimize-finalizer-2 mc/optional-api mc/static-handover-method mc/test/ci-native-crash-2 mc/test/ci-native-crash my-japanese_javadoc my/clean_up_tests my/issue_3077 my/lint/encryptionExample my/lint/jsonExample nh/fixing_#3105 nh/lint/gridViewExample nh/lint/moduleExample nh/lint/threadExample nh/refresh_send_realmchanged release/v0.82.2 release/0.83 release/0.84 release/0.85 release/0.86 release/0.87 releases rw-content-provider rw-loader-example rw-performance-comparison stk/bug/closedrealm stk/bug/pkforclassrename stk/distinct_chainedcall tg-rxjava Nothing to show v1.1.0 v1.0.1 v1.0.0 v0.91.1 v0.91.0 v0.90.1 v0.90.0 v0.89.1 v0.89.0 v0.88.3 v0.88.2 v0.88.1 v0.88.0 v0.87.5 v0.87.4 v0.87.3 v0.87.2 v0.87.1 v0.87.0 v0.86.1 v0.86.0 v0.85.1 v0.85.0 v0.84.2 v0.84.1 v0.84.0 v0.83.1 v0.83.0 v0.82.2 v0.82.1 v0.82.0 v0.81.1 v0.81.0 v0.80.3 v0.80.2 v0.80.1 v0.80.0 v0.79.1 v0.79.0 v0.78.0 v0.77.0 v0.76.0 v0.75.1 v0.74.0 v0.73.1 v0.73.0 v0.72.0 v0.71.0 v0.70.1 v0.70.0 v0.10.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 before-object-store b30 b29 b28 b27 b26 b25 b24 b24b b23 b22 b21 b20 b19 b18 b17 b16 b15 b14 b13 b12 b11 b10 b9 b8 b7 b6 b5 b4 b3 alpha-0.1.0 NEW-JNI JAVA-REL-0-1 DLL-Ver-2 BUG Nothing to show New pull request Latest commit 1b56dc0 Jul 13, 2016 zaki50 committed on GitHub Merge pull request #3151 from devholic/kotlin-1.0.3 … update kotlin version in example to 1.0.3 Permalink Failed to load latest commit information. .github Minimise headers and visual noise Mar 9, 2016 examples update kotlin version in example to 1.0.3 Jul 11, 2016 gradle-plugin Disable optional api transformer Jun 19, 2016 gradle/wrapper Upgraded Gradle to latest version Jan 5, 2016 integration-tests update compileSdkVersion and build tools to 24 Jun 24, 2016 realm-annotations Remove optional APIs if dependencies don't meet (#2727) Jun 1, 2016 realm-transformer Remove optional APIs if dependencies don't meet (#2727) Jun 1, 2016 realm Merge 3fecbbc into master Jul 8, 2016 .gitignore Remove an unnecessary directory of .gitignore Nov 10, 2015 CHANGELOG.md Upgrading to Realm Core 1.3.0. (#3155) Jul 8, 2016 CONTRIBUTING.md Objects not in Realm are now called unmananged everywhere. (#2828) May 18, 2016 Dockerfile Don't rely on dir() in docker containers in the Jenkinsfile (#3150) Jul 7, 2016 Jenkinsfile Fix metrics collection (#3158) Jul 7, 2016 LICENSE [README][LICENSE] added Crimea to list of prohibited regions Aug 25, 2015 README.md update compileSdkVersion and build tools to 24 Jun 24, 2016 build.gradle Fix some issues regarding Jenkinsfile and master (#3153) Jul 7, 2016 gradle.properties Increase XX:MaxPermSize to avoid PermGen space problem. Oct 31, 2015 gradlew Major rewrite of the build scripts Sep 30, 2015 gradlew.bat Big reorganisation and initial conversion to Gradle Aug 29, 2014 logo.png update realm logo (#2924) Jun 8, 2016 realm.properties Split the NDK version string before the dash Dec 22, 2015 settings.gradle Merge remote-tracking branch 'origin/master' into ez/rewrite-build-sc… Oct 12, 2015 version.txt Prepare next dev iteration Jul 1, 2016 README.md Realm is a mobile database that runs directly inside phones, tablets or wearables. This repository holds the source code for the Java version of Realm, which currently runs only on Android. Features Mobile-first: Realm is the first database built from the ground up to run directly inside phones, tablets and wearables. Simple: Data is directly exposed as objects and queryable by code, removing the need for ORM's riddled with performance & maintenance issues. Plus, we've worked hard to keep our API down to very few classes: most of our users pick it up intuitively, getting simple apps up & running in minutes. Modern: Realm supports easy thread-safety, relationships & encryption. Fast: Realm is faster than even raw SQLite on common operations, while maintaining an extremely rich feature set. Getting Started Please see the detailed instructions in our docs to add Realm to your project. Documentation Documentation for Realm can be found at realm.io/docs/java. The API reference is located at realm.io/docs/java/api. Getting Help Need help with your code?: Look for previous questions on the #realm tag — or ask a new question. We activtely monitor & answer questions on SO! Have a bug to report? Open an issue. If possible, include the version of Realm, a full log, the Realm file, and a project that shows the issue. Have a feature request? Open an issue. Tell us what the feature should do, and why you want the feature. Sign up for our Community Newsletter to get regular tips, learn about other use-cases and get alerted of blogposts and tutorials about Realm. Using Snapshots If you want to test recent bugfixes or features that have not been packaged in an official release yet, you can use a -SNAPSHOT release of the current development version of Realm via Gradle, available on OJO buildscript {     repositories {         maven {             url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'         }     }     dependencies {         classpath ""io.realm:realm-gradle-plugin:<version>-SNAPSHOT""     } }  repositories {     maven {         url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'     } } See version.txt for the latest version number. Building Realm In case you don't want to use the precompiled version, you can build Realm yourself from source. Prerequisites: Make sure make is available in your $PATH Download the JDK 7 or JDK 8 from Oracle and install it. Download & install the Android SDK Build-Tools 24.0.0, Android N (API 24) (for example through Android Studio’s Android SDK Manager) Download the Android NDK (= r10e) for OS X or Linux. Or you can use Hombrew-versions to install Android NDK for Mac: brew tap homebrew/versions brew install android-ndk-r10e  Add two environment variables to your profile: export ANDROID_HOME=~/Library/Android/sdk export NDK_HOME=/usr/local/Cellar/android-ndk-r10e/r10e  If you are using OS X, you'd be better to add following lines to ~/.profile (or ~/.zprofile if the login shell is zsh) in order for Android Studio to see those environment variables. launchctl setenv ANDROID_HOME ""$ANDROID_HOME"" launchctl setenv NDK_HOME ""$NDK_HOME""  And if you'd like to specify the location to store the archives of Realm's core, set REALM_CORE_DOWNLOAD_DIR environment variable. It enables you to keep core's archive when executing git clean -xfd. export REALM_CORE_DOWNLOAD_DIR=~/.realmCore  OS X users should also add following line to ~/.profile (or ~/.zprofile if the login shell is zsh) in order for Android Studio to see this environment variable.. launchctl setenv REALM_CORE_DOWNLOAD_DIR ""$REALM_CORE_DOWNLOAD_DIR""  Once you have completed all the pre-requisites building Realm is done with a simple command ./gradlew assemble  That command will generate: a jar file for the Realm Gradle plugin an aar file for the Realm library a jar file for the annotations a jar file for the annotations processor Other Commands ./gradlew tasks will show all the available tasks ./gradlew javadoc will generate the Javadocs ./gradlew monkeyExamples will run the monkey tests on all the examples ./gradlew installRealmJava will install the Realm library and plugin to mavenLocal() ./gradlew clean -PdontCleanJniFiles will remove all generated files except for JNI related files. This saves recompilation time a lot. ./gradlew connectedUnitTests -PbuildTargetABIs=$(adb shell getprop ro.product.cpu.abi) will build JNI files only for the ABI which corresponds to the connected device. Generating the Javadoc using the command above will report a large number of warnings. The Javadoc is generated, and we will fix the issue in the near future. Gotchas The repository is organized in six Gradle projects: realm: it contains the actual library (including the JNI layer) and the annotations processor. realm-annotations: it contains the annotations defined by Realm. realm-transformer: it contains the bytecode transformer. gradle-plugin: it contains the Gradle plugin. examples: it contains the example projects. This project directly depends on gradle-plugin which adds a dependency to the artifacts produced by realm. The root folder is another Gradle project and all it does is orchestrating the other jobs This means that ./gradlew clean and ./gradlew cleanExamples will fail if assembleExamples has not been executed first. Note that IntelliJ does not support multiple projects in the same window so each sub-project must be opened in its own window. Contributing See CONTRIBUTING.md for more details! This project adheres to the Contributor Covenant Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to info@realm.io. License Realm Java is published under the Apache 2.0 license. The underlying core is available under the Realm Core Binary License while we work to open-source it under the Apache 2.0 license. This product is not being made available to any person located in Cuba, Iran, North Korea, Sudan, Syria or the Crimea region, or to any other person that is not eligible to receive the product under U.S. law. Feedback If you use Realm and are happy with it, all we ask is that you please consider sending out a tweet mentioning @realm, announce your app on our mailing-list, or email help@realm.io to let us know about it! And if you don't like it, please let us know what you would like improved, so we can fix it! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/realm/realm-java"	"Mobile database to run directly inside phones, tablets or wearables."	"true"
"Database"	"Redisson"	"https://github.com/mrniko/redisson"	"Allows for distributed and scalable data structures on top of a Redis server."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1329"	"202"	"434"	"GitHub - mrniko/redisson: Redisson - distributed Java objects (Set, SetMultimap, ScoredSortedSet, SortedSet, Map, ConcurrentMap, List, ListMultimap, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, ReadWriteLock, AtomicLong, CountDownLatch, Publish / Subscribe, HyperLogLog, Bloom filter, BitSet), Redis pipelining on top of Redis server. Java Redis client. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 202 Star 1,329 Fork 434 mrniko/redisson Code Issues 56 Pull requests 1 Wiki Pulse Graphs Redisson - distributed Java objects (Set, SetMultimap, ScoredSortedSet, SortedSet, Map, ConcurrentMap, List, ListMultimap, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, ReadWriteLock, AtomicLong, CountDownLatch, Publish / Subscribe, HyperLogLog, Bloom filter, BitSet), Redis pipelining on top of Redis server. Java Redis client. http://redisson.org 1,912 commits 2 branches 47 releases 32 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0.0 master Nothing to show redisson-2.2.20 redisson-2.2.19 redisson-2.2.18 redisson-2.2.17 redisson-2.2.16 redisson-2.2.15 redisson-2.2.14 redisson-2.2.13 redisson-2.2.12 redisson-2.2.11 redisson-2.2.10 redisson-2.2.9 redisson-2.2.8 redisson-2.2.7 redisson-2.2.6 redisson-2.2.5 redisson-2.2.4 redisson-2.2.3 redisson-2.2.2 redisson-2.2.1 redisson-2.2.0 redisson-2.1.7 redisson-2.1.6 redisson-2.1.5 redisson-2.1.4 redisson-2.1.3 redisson-2.1.2 redisson-2.1.1 redisson-2.1.0 redisson-2.0.0 redisson-1.3.1 redisson-1.3.0 redisson-1.2.1 redisson-1.2.0 redisson-1.1.7 redisson-1.1.6 redisson-1.1.5 redisson-1.1.4 redisson-1.1.3 redisson-1.1.2 redisson-1.1.1 redisson-1.1.0 redisson-1.0.4 redisson-1.0.3 redisson-1.0.2 redisson-1.0.1 redisson-1.0.0 Nothing to show New pull request Latest commit 0777e04 Jul 15, 2016 Nikita Merge branch 'master' of github.com:mrniko/redisson Permalink Failed to load latest commit information. src RLock, RSemaphore, RCountDownLatch can blocks forever under some cond… Jul 15, 2016 .gitignore Refactor and bug fix Mar 31, 2016 .travis.yml Added RedissonFairLockTest to travis job list May 27, 2016 CHANGELOG.md Update CHANGELOG.md Jul 14, 2016 CONTRIBUTING.md remove travis env Jun 23, 2016 LICENSE.txt Shutdown optimization. Maven build fixed. Jan 3, 2014 README.md Update README.md Jul 14, 2016 checkstyle.xml checkstyle.xml fixes Feb 12, 2016 header.txt License updated Jun 30, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jul 14, 2016 README.md Redis based In-Memory Data Grid for Java. Redisson. Use familiar Java data structures with power of Redis. Based on high-performance async and lock-free Java Redis client and Netty 4 framework. Redis 2.8+ and JDK 1.6+ compatible. Please read documentation for more details. Redisson releases history. Licensed under the Apache License 2.0. Welcome to support chat - Please take part in Redisson survey Try Redisson PRO edition Features AWS ElastiCache servers mode: automatic new master server discovery automatic new slave servers discovery Cluster servers mode: automatic master and slave servers discovery automatic new master server discovery automatic new slave servers discovery automatic slave servers offline/online discovery automatic slots change discovery Sentinel servers mode: automatic master and slave servers discovery automatic new master server discovery automatic new slave servers discovery automatic slave servers offline/online discovery automatic sentinel servers discovery Master with Slave servers mode: read data using slave servers, write data using master server Single server mode: read and write data using single server Lua scripting Distributed implementation of java.util.BitSet Distributed implementation of java.util.List Distributed implementation of java.util.Set with TTL support for each entry Distributed implementation of java.util.SortedSet Distributed implementation of java.util.Queue Distributed implementation of java.util.concurrent.BlockingQueue Distributed implementation of java.util.Deque Distributed implementation of java.util.concurrent.BlockingDeque Distributed implementation of java.util.Map with TTL support for each entry Distributed implementation of java.util.concurrent.ConcurrentMap with TTL support for each entry Distributed implementation of reentrant java.util.concurrent.locks.Lock with TTL support Distributed implementation of reentrant java.util.concurrent.locks.ReadWriteLock with TTL support Distributed alternative to the java.util.concurrent.atomic.AtomicLong Distributed alternative to the java.util.concurrent.CountDownLatch Distributed alternative to the java.util.concurrent.Semaphore Distributed publish/subscribe messaging via org.redisson.core.RTopic Distributed HyperLogLog via org.redisson.core.RHyperLogLog Asynchronous interface for each object Asynchronous connection pool Thread-safe implementation All commands executes in an atomic way Spring cache integration Supports Reactive Streams Supports Redis pipelining (command batches) Supports Remote services Supports Android platform Supports auto-reconnect Supports failed to send command auto-retry Supports OSGi Supports many popular codecs (Jackson JSON, CBOR, MsgPack, Kryo, FST, LZ4, Snappy and JDK Serialization) With over 500 unit tests Projects using Redisson Setronica, Monits, Brookhaven National Laboratory, Netflix Dyno client, 武林Q传, Ocous, Invaluable, Clover Maven Include the following to your dependency list: <dependency>    <groupId>org.redisson</groupId>    <artifactId>redisson</artifactId>    <version>2.2.20</version> </dependency>  Gradle compile 'org.redisson:redisson:2.2.20'  Supported by YourKit is kindly supporting this open source project with its full-featured Java Profiler. YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications. Take a look at YourKit's leading software products: YourKit Java Profiler and YourKit .NET Profiler. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mrniko/redisson"	"Allows for distributed and scalable data structures on top of a Redis server."	"true"
"Database"	"Speedment"	"https://github.com/speedment/speedment"	"A database access library that utilizes the Java 8 Stream API for querying."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"556"	"81"	"83"	"GitHub - speedment/speedment: Wrap your database into Java 8 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 81 Star 556 Fork 83 speedment/speedment Code Issues 68 Pull requests 1 Wiki Pulse Graphs Wrap your database into Java 8 http://www.speedment.org 1,417 commits 7 branches 15 releases Fetching contributors Java 99.6% CSS 0.4% Java CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop-advanced-gui develop-crud-streams develop-modules develop-nosql develop-transactions develop master Nothing to show 2.3.5 2.3.4 2.3.3 2.3.2 2.3.1 2.3.0 2.2.3 2.2.2 2.2.1 2.2.0 2.1.2 2.1.1 2.1.0 2.0.0-EA2 2.0.0-EA Nothing to show New pull request Latest commit 94879f9 Jun 13, 2016 minborg committed on GitHub Update README.md Permalink Failed to load latest commit information. requirements Wrong year... .__. Jan 11, 2016 src Bump version to 2.3.5 Jun 13, 2016 .gitignore Improve .gitIgnore May 18, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Apr 20, 2016 CONTRIBUTOR_LICENSE_AGREEMENT Fix typo Nov 12, 2015 DISCLAIMER Move disclaimer to separate file May 26, 2015 LICENSE Change copyright year in LICENSE file Apr 29, 2016 README.md Update README.md Jun 13, 2016 THIRD_PARTY_LICENSES Fix: #125 Remove JDBC drivers from core project Feb 4, 2016 license_header.txt Added POM and license text Jan 19, 2015 nbactions.xml Update deploy goal Apr 29, 2016 pom.xml Bump version to 2.3.5 Jun 13, 2016 README.md Wrap your database into Java 8! Speedment accelerates your development speed and makes programming so easy and fun! When you use Speedment for database querying, you do not have to learn a new APIs or use complex ORMs. Everything is standard Java 8 and works out of the box! This site covers the Speedment Open Source project available under the Apache 2 license. If you are interested in the enterprise product with support for commercial databases and in-memory acceleration, check out www.speedment.com! Documentation You can read the the API quick start here! Tutorials Tutorial 1 - Get started with the UI Tutorial 2 - Hello Speedment Tutorial 3 - Build a Social Network Tutorial 4 - Log errors in a database Tutorial 5 - Using Speedment with Java EE Tutorial 6 - Writing your own extensions Tutorial 7 - Plug-in a Custom TypeMapper Examples Here are a few examples of how you could use Speedment from your code: Easy initialization A HareApplication class is generated from the database. Speedment speedment = new HareApplication().withPassword(""myPwd729"").build(); Manager<Hare> hares = speedment.managerOf(Hare.class); Optimised predicate short-circuit Search for Hares by a certain age: // Searches are optimized in the background! Optional<Hare> harry = hares.stream()     .filter(NAME.equal(""Harry"").and(AGE.lessThan(5)))     .findAny(); Results in the following SQL query: SELECT * FROM `Hare`      WHERE `Hare`.`name` = ""Harry""     AND `Hare`.`age` < 5     LIMIT 1; Easy persistence Entities can be persisted in a database using the ""Active Record Pattern"" Hare dbHarry = hares.newEmptyEntity()     .setName(""Harry"")     .setColor(""Gray"")     .setAge(3)     .persist(); JPA-style persistance if you prefer that over the ""Active Record Pattern"". Hare harry = hares.newEmptyEntity()     .setName(""Harry"")     .setColor(""Gray"")     .setAge(3);  Hare dbHarry = EntityManager.get(speedment).persist(harry); Entities are linked No need for complicated joins! Optional<Carrot> carrot = hares.stream()     .filter(NAME.equal(""Harry""))     .flatMap(Hare::findCarrots) // Carrot is a foreign key table.     .findAny(); Convert to JSON // List all hares in JSON format hares.stream()     .map(Hare::toJson)     .forEach(System.out::println); Or collect the entire stream // List all hares as one JSON object String json = hares.stream()     .collect(CollectorUtil.toJson()); Features Here are some of the many features packed into the Speedment framework! Database centric Speedment is using the database as the source-of-truth, both when it comes to the domain model and the actual data itself. Perfect if you are tired of configuring and debuging complex ORMs. After all, your data is more important than programming tools, is it not? Code generation Speedment inspects your database and can automatically generate code that reflects the latest state of your database. Nice if you have changed the data structure (like columns or tables) in your database. Optionally, you can change the way code is generated using an intuitive UI or programatically using your own code. Modular Design Speedment is built with the ambition to be completely modular! If you don't like the current implementation of a certain function, plug in you own! Do you have a suggestion for an alternative way of solving a complex problem? Share it with the community! Type Safety When the database structure changes during development of a software there is always a risk that bugs sneak into the application. Thats why type-safety is such a big deal! With Speedment, you will notice if something is wrong seconds after you generate your code instead of weeks into the testing phase. Null Protection Ever seen a NullPointerException suddenly casted out of nowhere? Null-pointers have been called the billion-dollar-mistake of java, but at the same time they are used in almost every software project out there. To minimize the production risks of using null values, Speedment analyzes if null values are allowed by a column in the database and wraps the values as appropriate in Java 8 Optionals. Using Maven The easiest way to get started with Speedment and Maven is to use one of the existing archetypes. An archetype is similar to a template project. When you start a new project, it will add all the dependencies you need to your pom.xml-file so that you can begin program immetiatly. If you do not want to use an archetype, for an example if you already have a project you want to use Speedment with, you can always write your pom.xml-file manually. Just add the following lines (between the ... marker lines) to your project's pom.xml file, and then assign values to the parameters in the <properties>-section of the file. <build>     <plugins>         ...         <plugin>             <groupId>com.speedment</groupId>             <artifactId>speedment-maven-plugin</artifactId>             <version>${speedment.version}</version>             <dependencies>                 <dependency>                     <groupId>${db.groupId}</groupId>                     <artifactId>${db.artifactId}</artifactId>                     <version>${db.version}</version>                 </dependency>             </dependencies>          </plugin>         ...     </plugins> </build> <dependencies>     ...     <dependency>         <groupId>com.speedment</groupId>         <artifactId>speedment</artifactId>         <version>${speedment.version}</version>     </dependency>     <dependency>         <groupId>${db.groupId}</groupId>         <artifactId>${db.artifactId}</artifactId>         <version>${db.version}</version>     </dependency>     ... </dependencies> To set which database connector you want to use to communicate with your database, please add one of the following to your <properties>-section in the pom.xml-file: MySQL <properties>     <speedment.version>2.3.5</speedment.version>     <db.groupId>mysql</db.groupId>     <db.artifactId>mysql-connector-java</db.artifactId>     <db.version>5.1.38</db.version> </properties> PostgreSQL <properties>     <speedment.version>2.3.5</speedment.version>     <db.groupId>org.postgresql</db.groupId>     <db.artifactId>postgresql</db.artifactId>     <db.version>9.4-1206-jdbc4</db.version> </properties> MariaDB <properties>     <speedment.version>2.3.5</speedment.version>     <db.groupId>org.mariadb.jdbc</db.groupId>     <db.artifactId>mariadb-java-client</db.artifactId>     <db.version>1.4.0</db.version> </properties> Make sure that you use the latest ${speedment.version} available. Requirements Speedment comes with support for the following databases out-of-the-box: MySQL MariaDB PostgreSQL Support for commercial databases like Oracle DB can be added using enterprise plugins. Visit www.speedment.com for more information on commercial alternatives. As of version 2.0, Speedment requires Java 8 or later. Make sure your IDE configured to use JDK 8 (version 1.8.0_40 or newer). License Speedment is available under the Apache 2 License. Copyright Copyright (c) 2015, Speedment, Inc. All Rights Reserved. Visit www.speedment.org for more info. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/speedment/speedment"	"A database access library that utilizes the Java 8 Stream API for querying."	"true"
"Database"	"Vibur DBCP"	"http://www.vibur.org/"	"JDBC connection pool library which offers advanced performance monitoring capabilities."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"5"	"2"	"GitHub - vibur/vibur-dbcp: Vibur DBCP - concurrent and dynamic JDBC connection pool Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 33 Fork 2 vibur/vibur-dbcp Code Issues 1 Pull requests 0 Pulse Graphs Vibur DBCP - concurrent and dynamic JDBC connection pool http://www.vibur.org 404 commits 2 branches 19 releases Fetching contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master restricted-connection Nothing to show 9.0 8.0 7.0 6.1 6.0 5.0 4.0 3.0 1.2.0 1.1.1 1.1.0 1.0.0 0.8.3 0.8.2 0.8.1 0.8.0 0.7.2 0.7.1 0.7.0 Nothing to show New pull request Latest commit 3f3e9a5 Jun 26, 2016 simeonmalchev refactoring and class renames, source simplification Permalink Failed to load latest commit information. src refactoring and class renames, source simplification Jun 26, 2016 CHANGELOG changelog update May 2, 2016 CONTRIBUTORS simple refactoring and update May 7, 2014 LICENSE initial import Mar 7, 2013 NOTICE Preparing version 3.0 cut. Jun 3, 2015 README.md Update README.md Apr 30, 2016 pom.xml osgi version update May 2, 2016 README.md Vibur DBCP is concurrent, fast, and fully-featured JDBC connection pool, which provides advanced performance monitoring capabilities, including slow SQL queries detection and logging, a non-starvation guarantee for application threads, statement caching, and Hibernate integration, among other features. The project home page contains a full list of its features, including various configuration examples with Hibernate and Spring, all configuration options, and more. Vibur DBCP is built on top of Vibur Object Pool - a general-purpose concurrent Java object pool. The project maven coordinates are: <dependency>   <groupId>org.vibur</groupId>   <artifactId>vibur-dbcp</artifactId>   <version>9.0</version> </dependency>     Originally released in July 2013 on code.google.com, the project was migrated to GitHub in March 2015. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vibur/vibur-dbcp"	"JDBC connection pool library which offers advanced performance monitoring capabilities."	"true"
"Data structures"	"Apache Avro"	"https://avro.apache.org/"	"Data interchange format featuring among others: dynamic typing, untagged data, absence of manually assigned IDs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome to Apache Avro!   Project Wiki   Project Releases News Credits License Privacy Policy Security Donate Thanks Documentation Current 1.8.1 1.7.7 Developers Mailing Lists Issue Tracking Version Control IRC Channel Welcome to Apache Avro! Apache Avro is a data serialization system. To learn more about Avro, please read the current documentation. To download Avro, please visit the releases page. Developers interested in getting more involved with Avro may join the mailing lists, report bugs, retrieve code from the version control system, and make contributions.   Copyright © 2012 The Apache Software Foundation. Apache Hadoop, Hadoop, Apache, the Apache feather logo, and the Apache Hadoop project logo are either registered trademarks or trademarks of the Apache Software Foundation in the United States and other countries."	"null"	"null"	"Data interchange format featuring among others: dynamic typing, untagged data, absence of manually assigned IDs."	"true"
"Data structures"	"Apache Orc"	"https://orc.apache.org/"	"Fast and efficient columnar storage format for hadoop based workloads."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache ORC • High-Performance Columnar Storage for Hadoop Home Docs umentation Talks News Help Develop Apache ORC Home Docs umentation Talks News Help Develop the smallest, fastest columnar storage for Hadoop workloads. ACID Support Includes support for ACID transactions and snapshot isolation ACID support → Built-in Indexes Jump to the right row with indexes including minimum, maximum, and bloom filters for each column. ORC's indexes → Complex Types Supports all of Hive's types including the compound types: structs, lists, maps, and unions ORC's types → Download the current ORC release. Quickstart Documentation Using with Hive Using with Hadoop MapRed Using with Hadoop MapReduce Using Core ORC from Java ORC is an Apache project. Apache is a non-profit organization helping open-source software projects released under the Apache License and managed with open governance. We'd like to thank the Apache sponsors and encourage others to donate. The contents of this website are © 2016 Apache Software Foundation under the terms of the Apache License v2. Apache ORC and its logo are trademarks of the Apache Software Foundation."	"null"	"null"	"Fast and efficient columnar storage format for hadoop based workloads."	"true"
"Data structures"	"Apache Parquet"	"http://parquet.apache.org/"	"Columnar storage format based on assembly algorithms from the Dremel paper by Google."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"258"	"49"	"232"	"GitHub - apache/parquet-mr: Mirror of Apache Parquet Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 258 Fork 232 apache/parquet-mr mirrored from git://git.apache.org/parquet-mr.git Code Pull requests 51 Pulse Graphs Mirror of Apache Parquet 1,795 commits 31 branches 39 releases 77 contributors Java 98.4% Other 1.6% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags CheckPages ParquetThriftStorer RLE_BOOLEAN alexlevenson/RLE-threshold-tuning avoid_convert_thrift_scrooge_class_when_projection_is_not_specified block_size_128 bugfix_failed_convert_to_scrooge_struct_when_enum_is_optional check_read_length_avoid_oom context_error cut_page_by_raw_data_size delta_binary_packing delta_strings_with_binpack efficient_group fix_concurency_problem fix_null_stats fsa_codegen2 generate_splits_by_min_max_size gh-pages ioexception master null_header pages_refactoring parquet-1.6.0rc3 parquet-1.7.0 parquet_properties pig_projection_test scrooge_runtime tweak_semver twitter working write_pig_meta_data_only_when_pig_is_avaliable Nothing to show parquet-1.8.0rc1 parquet-1.6.0rc7 parquet-1.6.0rc6 parquet-1.6.0rc5 parquet-1.6.0rc4 parquet-1.6.0rc3 parquet-1.6.0rc2 parquet-1.6.0rc1 parquet-1.5.0 parquet-1.4.3 parquet-1.4.2 parquet-1.4.1 parquet-1.4.0 parquet-1.3.2 parquet-1.3.1 parquet-1.3.0 parquet-1.2.10 parquet-1.2.9 parquet-1.2.8 parquet-1.2.7 parquet-1.2.6 parquet-1.2.5 parquet-1.2.4 parquet-1.2.3 parquet-1.2.2 parquet-1.2.1 parquet-1.2.0 parquet-1.1.2 parquet-1.1.1 parquet-1.1.0 parquet-1.0.1 parquet-1.0.0 parquet-1.0.0-t3 parquet-1.0.0-t2 parquet-1.0.0-t1 apache-parquet-mr-1.6.0-incubating apache-parquet-1.8.1 apache-parquet-1.8.0 apache-parquet-1.7.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. dev PARQUET-410: Fix hanging subprocess call in merge script. Feb 3, 2016 doc/dremel_paper removed old doc Mar 11, 2013 parquet-avro PARQUET-642: Improve performance of ByteBuffer based read / write paths Jun 30, 2016 parquet-benchmarks PARQUET-305: Update logging to SLF4J. Dec 8, 2015 parquet-cascading-common23/src PARQUET-480: Update for Cascading 3.0 Jan 31, 2016 parquet-cascading PARQUET-540: Fix Cascading 3 build thrift and SLF4J. Jul 15, 2016 parquet-cascading3 PARQUET-540: Fix Cascading 3 build thrift and SLF4J. Jul 15, 2016 parquet-column PARQUET-389: Support predicate push down on missing columns. Jul 15, 2016 parquet-common PARQUET-225: Add support for INT64 delta encoding. Apr 21, 2016 parquet-encoding PARQUET-225: Add support for INT64 delta encoding. Apr 21, 2016 parquet-generator PARQUET-225: Add support for INT64 delta encoding. Apr 21, 2016 parquet-hadoop-bundle [maven-release-plugin] prepare for next development iteration Jul 17, 2015 parquet-hadoop PARQUET-389: Support predicate push down on missing columns. Jul 15, 2016 parquet-hive-bundle [maven-release-plugin] prepare for next development iteration Jul 17, 2015 parquet-hive [maven-release-plugin] prepare for next development iteration Jul 17, 2015 parquet-jackson [maven-release-plugin] prepare for next development iteration Jul 17, 2015 parquet-pig-bundle [maven-release-plugin] prepare for next development iteration Jul 17, 2015 parquet-pig PARQUET-397: Implement Pig predicate pushdown Feb 26, 2016 parquet-protobuf PARQUET-305: Update logging to SLF4J. Dec 8, 2015 parquet-scala PARQUET-305: Update logging to SLF4J. Dec 8, 2015 parquet-scrooge PARQUET-540: Fix Cascading 3 build thrift and SLF4J. Jul 15, 2016 parquet-thrift PARQUET-540: Fix Cascading 3 build thrift and SLF4J. Jul 15, 2016 parquet-tools PARQUET-367: ""parquet-cat -j"" doesn't show all records. May 5, 2016 src adding back the license header used by the maven plugin Mar 12, 2013 .gitignore PARQUET-480: Update for Cascading 3.0 Feb 1, 2016 .travis.yml PARQUET-612: Add compression codec to FileEncodingsIT. Jun 30, 2016 CHANGES.md Update CHANGES for 1.8.1 release Jul 17, 2015 KEYS PARQUET-339: Add Alex Levenson to KEYS file Jul 16, 2015 LICENSE PARQUET-358: Add support for Avro's logical types API. Apr 20, 2016 NOTICE PARQUET-358: Add support for Avro's logical types API. Apr 20, 2016 PoweredBy.md PARQUET-111: Updates for apache release Feb 2, 2015 README.md PARQUET-663: Update README.md Jul 15, 2016 changelog.sh PARQUET-252 : support nested container type for parquet-scrooge May 4, 2015 parquet_cascading.md PARQUET-480: Update for Cascading 3.0 Feb 1, 2016 pom.xml PARQUET-540: Fix Cascading 3 build thrift and SLF4J. Jul 15, 2016 README.md Parquet MR Parquet-MR contains the java implementation of the Parquet format. Parquet is a columnar storage format for Hadoop; it provides efficient storage and encoding of data. Parquet uses the record shredding and assembly algorithm described in the Dremel paper to represent nested structures. You can find some details about the format and intended use cases in our Hadoop Summit 2013 presentation Building Parquet-MR uses Maven to build and depends on both the thrift and protoc compilers. Install Protobuf To build and install the protobuf compiler, run: wget http://protobuf.googlecode.com/files/protobuf-2.5.0.tar.gz tar xzf protobuf-2.5.0.tar.gz cd  protobuf-2.5.0 ./configure make sudo make install sudo ldconfig  Install Thrift To build and install the thrift compiler, run: wget -nv http://archive.apache.org/dist/thrift/0.7.0/thrift-0.7.0.tar.gz tar xzf thrift-0.7.0.tar.gz cd thrift-0.7.0 chmod +x ./configure ./configure --disable-gen-erl --disable-gen-hs --without-ruby --without-haskell --without-erlang sudo make install  Build Parquet with Maven Once protobuf and thrift are available in your path, you can build the project by running: LC_ALL=C mvn clean install  Features Parquet is a very active project, and new features are being added quickly; below is the state as of June 2013. Feature In trunk In dev Planned Expected release Type-specific encoding YES 1.0 Hive integration YES (28) 1.0 Pig integration YES 1.0 Cascading integration YES 1.0 Crunch integration YES (CRUNCH-277) 1.0 Impala integration YES (non-nested) 1.0 Java Map/Reduce API YES 1.0 Native Avro support YES 1.0 Native Thrift support YES 1.0 Complex structure support YES 1.0 Future-proofed versioning YES 1.0 RLE YES 1.0 Bit Packing YES 1.0 Adaptive dictionary encoding YES 1.0 Predicate pushdown YES (68) 1.0 Column stats YES 2.0 Delta encoding YES 2.0 Native Protocol Buffers support YES 1.0 Index pages YES 2.0 Map/Reduce integration Input and Output formats. Note that to use an Input or Output format, you need to implement a WriteSupport or ReadSupport class, which will implement the conversion of your object to and from a Parquet schema. We've implemented this for 2 popular data formats to provide a clean migration path as well: Thrift Thrift integration is provided by the parquet-thrift sub-project. If you are using Thrift through Scala, you may be using Twitter's Scrooge. If that's the case, not to worry -- we took care of the Scrooge/Apache Thrift glue for you in the parquet-scrooge sub-project. Avro Avro conversion is implemented via the parquet-avro sub-project. Create your own objects The ParquetOutputFormat can be provided a WriteSupport to write your own objects to an event based RecordConsumer. the ParquetInputFormat can be provided a ReadSupport to materialize your own objects by implementing a RecordMaterializer See the APIs: Record conversion API Hadoop API Apache Pig integration A Loader and a Storer are provided to read and write Parquet files with Apache Pig Storing data into Parquet in Pig is simple: -- options you might want to fiddle with SET parquet.page.size 1048576 -- default. this is your min read/write unit. SET parquet.block.size 134217728 -- default. your memory budget for buffering data SET parquet.compression lzo -- or you can use none, gzip, snappy STORE mydata into '/some/path' USING parquet.pig.ParquetStorer;  Reading in Pig is also simple: mydata = LOAD '/some/path' USING parquet.pig.ParquetLoader();  If the data was stored using Pig, things will ""just work"". If the data was stored using another method, you will need to provide the Pig schema equivalent to the data you stored (you can also write the schema to the file footer while writing it -- but that's pretty advanced). We will provide a basic automatic schema conversion soon. Hive integration Hive integration is provided via the parquet-hive sub-project. Build to run the unit tests: mvn test to build the jars: mvn package The build runs in Travis CI: Add Parquet as a dependency in Maven The current release is version 1.8.1   <dependencies>     <dependency>       <groupId>org.apache.parquet</groupId>       <artifactId>parquet-common</artifactId>       <version>1.8.1</version>     </dependency>     <dependency>       <groupId>org.apache.parquet</groupId>       <artifactId>parquet-encoding</artifactId>       <version>1.8.1</version>     </dependency>     <dependency>       <groupId>org.apache.parquet</groupId>       <artifactId>parquet-column</artifactId>       <version>1.8.1</version>     </dependency>     <dependency>       <groupId>org.apache.parquet</groupId>       <artifactId>parquet-hadoop</artifactId>       <version>1.8.1</version>     </dependency>   </dependencies> How To Contribute We prefer to receive contributions in the form of GitHub pull requests. Please send pull requests against the github.com/apache/parquet-mr repository. If you've previously forked Parquet from its old location, you will need to add a remote or update your origin remote to https://github.com/apache/parquet-mr.git If you are looking for some ideas on what to contribute, check out jira issues for this project labeled ""pick-me-up"". Comment on the issue and/or contact dev@parquet.apache.org with your questions and ideas. If you’d like to report a bug but don’t have time to fix it, you can still post it to our issue tracker, or email the mailing list dev@parquet.apache.org To contribute a patch: Break your work into small, single-purpose patches if possible. It’s much harder to merge in a large change with a lot of disjoint features. Create a JIRA for your patch on the Parquet Project JIRA. Submit the patch as a GitHub pull request against the master branch. For a tutorial, see the GitHub guides on forking a repo and sending a pull request. Prefix your pull request name with the JIRA name (ex: https://github.com/apache/parquet-mr/pull/240). Make sure that your code passes the unit tests. You can run the tests with mvn test in the root directory. Add new unit tests for your code. We tend to do fairly close readings of pull requests, and you may get a lot of comments. Some common issues that are not code structure related, but still important: Use 2 spaces for whitespace. Not tabs, not 4 spaces. The number of the spacing shall be 2. Give your operators some room. Not a+b but a + b and not foo(int a,int b) but foo(int a, int b). Generally speaking, stick to the Sun Java Code Conventions Make sure tests pass! Thank you for getting involved! Authors and contributors Julien Le Dem @J_ https://github.com/julienledem Tom White https://github.com/tomwhite Mickaël Lacour https://github.com/mickaellcr Remy Pecqueur https://github.com/Lordshinjo Avi Bryant https://github.com/avibryant Dmitriy Ryaboy @squarecog https://github.com/dvryaboy Jonathan Coveney http://twitter.com/jco Brock Noland https://github.com/brockn Tianshuo Deng https://github.com/tsdeng and many others -- see the Contributor report Code of Conduct We hold ourselves and the Parquet developer community to two codes of conduct: The Apache Software Foundation Code of Conduct The Twitter OSS Code of Conduct Discussions Mailing list: dev@parquet.apache.org Bug trackter: jira Discussions also take place in github pull requests License Licensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0 See also: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/apache/parquet-mr"	"Columnar storage format based on assembly algorithms from the Dremel paper by Google."	"true"
"Data structures"	"Apache Thrift"	"https://thrift.apache.org/"	"Data interchange format that originated at Facebook."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Thrift - Home Apache Thrift ™ Download Documentation Developers Libraries Tutorial Test Suite About Apache Apache Home Apache License v2.0 Donate Thanks Security The Apache Thrift software framework, for scalable cross-language services development, combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi and other languages. Getting Started Download Apache Thrift To get started, download a copy of Thrift. Build and Install the Apache Thrift compiler You will then need to build the Apache Thrift compiler and install it. See the installing Thrift guide for any help with this step. Writing a .thrift file After the Thrift compiler is installed you will need to create a thrift file. This file is an interface definition made up of thrift types and Services. The services you define in this file are implemented by the server and are called by any clients. The Thrift compiler is used to generate your Thrift File into source code which is used by the different client libraries and the server you write. To generate the source from a thrift file run thrift --gen <language> <Thrift filename> The sample tutorial.thrift file used for all the client and server tutorials can be found here. To learn more about Apache Thrift Read the Whitepaper Download Apache Thrift v0.9.3 Download v0.9.3 MD5 | PGP [Other Downloads] Example Apache Thrift allows you to define data types and service interfaces in a simple definition file. Taking that file as input, the compiler generates code to be used to easily build RPC clients and servers that communicate seamlessly across programming languages. Instead of writing a load of boilerplate code to serialize and transport your objects and invoke remote methods, you can get right down to business. The following example is a simple service to store user objects for a web front end. Thrift Definition File Python Client Java Server service Calculator extends shared.SharedService {    /**    * A method definition looks like C code. It has a return type, arguments,    * and optionally a list of exceptions that it may throw. Note that argument    * lists and exception lists are specified using the exact same syntax as    * field lists in struct or exception definitions.    */     void ping(),     i32 add(1:i32 num1, 2:i32 num2),     i32 calculate(1:i32 logid, 2:Work w) throws (1:InvalidOperation ouch),     /**     * This method has a oneway modifier. That means the client only makes     * a request and does not listen for any response at all. Oneway methods     * must be void.     */    oneway void zip()  }  This snippet was generated by Apache Thrift's source tree docs: tutorial/tutorial.thrift def main():     # Make socket     transport = TSocket.TSocket('localhost', 9090)      # Buffering is critical. Raw sockets are very slow     transport = TTransport.TBufferedTransport(transport)      # Wrap in a protocol     protocol = TBinaryProtocol.TBinaryProtocol(transport)      # Create a client to use the protocol encoder     client = Calculator.Client(protocol)      # Connect!     transport.open()      client.ping()     print('ping()')      sum = client.add(1, 1)  This snippet was generated by Apache Thrift's source tree docs: tutorial/py/PythonClient.py Initialize the Server:     try {       TServerTransport serverTransport = new TServerSocket(9090);       TServer server = new TSimpleServer(new Args(serverTransport).processor(processor));        // Use this for a multithreaded server       // TServer server = new TThreadPoolServer(new TThreadPoolServer.Args(serverTransport).processor(processor));        System.out.println(""Starting the simple server..."");       server.serve();     } catch (Exception e) {       e.printStackTrace();     }  This snippet was generated by Apache Thrift's source tree docs: tutorial/java/src/JavaServer.java The CalculatorHandler: public class CalculatorHandler implements Calculator.Iface {    private HashMap<Integer,SharedStruct> log;    public CalculatorHandler() {     log = new HashMap<Integer, SharedStruct>();   }    public void ping() {     System.out.println(""ping()"");   }    public int add(int n1, int n2) {     System.out.println(""add("" + n1 + "","" + n2 + "")"");     return n1 + n2;   }    public int calculate(int logid, Work work) throws InvalidOperation {     System.out.println(""calculate("" + logid + "", {"" + work.op + "","" + work.num1 + "","" + work.num2 + ""})"");     int val = 0;     switch (work.op) {     case ADD:       val = work.num1 + work.num2;       break;     case SUBTRACT:       val = work.num1 - work.num2;       break;     case MULTIPLY:       val = work.num1 * work.num2;       break;     case DIVIDE:       if (work.num2 == 0) {         InvalidOperation io = new InvalidOperation();         io.whatOp = work.op.getValue();         io.why = ""Cannot divide by 0"";         throw io;       }       val = work.num1 / work.num2;       break;     default:       InvalidOperation io = new InvalidOperation();       io.whatOp = work.op.getValue();       io.why = ""Unknown operation"";       throw io;     }      SharedStruct entry = new SharedStruct();     entry.key = logid;     entry.value = Integer.toString(val);     log.put(logid, entry);      return val;   }    public SharedStruct getStruct(int key) {     System.out.println(""getStruct("" + key + "")"");     return log.get(key);   }    public void zip() {     System.out.println(""zip()"");   }  }  This snippet was generated by Apache Thrift's source tree docs: tutorial/java/src/CalculatorHandler.java Links Download Developers Tutorials Sitemap Get Involved Mailing Lists Issue Tracking How To Contribute Copyright 2016 Apache Software Foundation. Licensed under the Apache License v2.0. Apache, Apache Thrift, and the Apache feather logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Data interchange format that originated at Facebook."	"true"
"Data structures"	"Persistent Collection"	"http://pcollections.org/"	"Persistent and immutable analogue of the Java Collections Framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"233"	"21"	"21"	"GitHub - hrldcpr/pcollections: A Persistent Java Collections Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 233 Fork 21 hrldcpr/pcollections Code Issues 15 Pull requests 6 Pulse Graphs A Persistent Java Collections Library 61 commits 2 branches 8 releases 7 contributors Java 99.5% HTML 0.5% Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v2.1.2 v2.1.1 v2.1.0 v2.0.2 v2.0.1 v2.0.0 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 7ec9ac1 Jan 15, 2016 hrldcpr Merge pull request #34 from valery1707/badges … Add some useful badges with automatic version detection: Maven and Javadoc Permalink Failed to load latest commit information. docs better CHANGING. javadoc. Oct 30, 2011 gradle/wrapper add gradle wrapper files to enable build with gradle Sep 17, 2015 src add jmh for benchmarking Sep 17, 2015 .gitignore add gradle wrapper files to enable build with gradle Sep 17, 2015 AUTHORS Work around a type inference change in javac Sep 14, 2015 CHANGING better CHANGING. javadoc. Oct 30, 2011 LICENSE Work around a type inference change in javac Sep 14, 2015 README.md Add some useful badges with automatic version detection: Maven and Ja… Jan 14, 2016 VERSION switched from eclipse/ant to maven Jun 7, 2010 build.gradle add jmh for benchmarking Sep 17, 2015 gradlew initial gradle build Sep 16, 2015 gradlew.bat initial gradle build Sep 16, 2015 pom.xml better CHANGING. javadoc. Oct 30, 2011 settings.gradle initial gradle build Sep 16, 2015 README.md PCollections A Persistent Java Collections Library Overview PCollections serves as a persistent and immutable analogue of the Java Collections Framework. This includes efficient, thread-safe, generic, immutable, and persistent stacks, maps, vectors, sets, and bags, compatible with their Java Collections counterparts. Persistent and immutable datatypes are increasingly appreciated as a simple, design-friendly, concurrency-friendly, and sometimes more time- and space-efficient alternative to mutable datatypes. Persistent versus Unmodifiable Note that these immutable collections are very different from the immutable collections returned by Java's Collections.unmodifiableCollection() and similar methods. The difference is that Java's unmodifiable collections have no producers, whereas PCollections have very efficient producers. Thus if you have an unmodifiable Collection x and you want a new Collection x2 consisting of the elements of x in addition to some element e, you would have to do something like: Collection x2 = new HashSet(x); x2.add(e); which involves copying all of x, using linear time and space. If, on the other hand, you have a PCollection y you can simply say: PCollection y2 = y.plus(e); which still leaves y untouched but generally requires little or no copying, using time and space much more efficiently. Usage PCollections are created using producers and static factory methods. Some example static factory methods are HashTreePSet.empty() which returns an empty PSet, while HashTreePSet.singleton(e) returns a PSet containing just the element e, and HashTreePSet.from(collection) returns a PSet containing the same elements as collection. See 'Example Code' below for an example of using producers. The same empty(), singleton(), and from() factory methods are found in each of the PCollections implementations, which currently include one concrete implementation for each abstract type: HashTreePMap provides a PMap implementation, analogous to Java's HashMap. ConsPStack provides a PStack implementation, analogous to Java's LinkedList. TreePVector provides a PVector implementation, analogous to Java's ArrayList. HashTreePSet provides a PSet implementation, analogous to Java's HashSet. HashTreePBag provides a PBag implementation, which is unordered like a set but can contain duplicate elements. PCollections are highly interoperable with Java Collections: every PCollection is a java.util.Collection, every PMap is a java.util.Map, every PSequence — including every PStack and PVector — is a java.util.List, and every PSet is a java.util.Set. PCollections uses Semantic Versioning, which establishes a strong correspondence between API changes and version numbering. PCollections is in the Maven Central repository, under org.pcollections. Thus the Maven coordinates for PCollections are: <dependency>     <groupId>org.pcollections</groupId>     <artifactId>pcollections</artifactId>     <version>2.1.2</version> </dependency> Example Code The following gives a very simple example of using PCollections, including the static factory method HashTreePSet.empty() and the producer plus(e): import pcollections.*; public class Example {   public static void main(String... args) {     PSet<String> set = HashTreePSet.empty();     set = set.plus(""something"");     System.out.println(set);     System.out.println(set.plus(""something else""));     System.out.println(set);   } } Running this program gives the following output: [something]  [something else, something]  [something]  Building form source For building the project from source clone the repository and then execute  ./gradlew build  This will compile all files, execute the tests and create a jar in ./build/libs. usefull targets are: jar - to create the jar clean - to clean all build files, including the jar test - to build the project and run the test files compileJava - to only compile the Java files Related Work Clojure also provides persistent collections in Java, but for now they are less interoperable with Java Collections, and seem more designed to be used within the Clojure language itself. Both Guava and Java's Collections utility class provide immutable collections but they are not persistent, that is they do not provide efficient producers, so they are not nearly as useful. See Persistent versus Unmodifiable above. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hrldcpr/pcollections"	"Persistent and immutable analogue of the Java Collections Framework."	"true"
"Data structures"	"Protobuf"	"https://github.com/google/protobuf"	"Google's data interchange format."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10085"	"1052"	"3050"	"GitHub - google/protobuf: Protocol Buffers - Google's data interchange format Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,052 Star 10,085 Fork 3,050 google/protobuf Code Issues 346 Pull requests 99 Wiki Pulse Graphs Protocol Buffers - Google's data interchange format https://developers.google.com/protocol-buffers/ 3,657 commits 11 branches 20 releases 169 contributors C++ 40.4% Java 17.2% Objective-C 12.1% C# 9.4% Protocol Buffer 7.2% C 5.2% Other 8.5% C++ Java Objective-C C# Protocol Buffer C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0.0-beta-3 3.0.0-beta-4 3.0.0-pre benchmarks gh-pages integrate_base integrate master objc-framework-fix package-json rubypackagecap Nothing to show v3.0.0-beta-3.3 v3.0.0-beta-3.2 v3.0.0-beta-3.1 v3.0.0-beta-3 v3.0.0-beta-3-pre-1 v3.0.0-beta-2 v3.0.0-beta-1.1 v3.0.0-beta-1 v3.0.0-beta-1-bzl-fix v3.0.0-alpha-4.1 v3.0.0-alpha-4 v3.0.0-alpha-3.1 v3.0.0-alpha-3 v3.0.0-alpha-2 v3.0.0-alpha-1 v2.6.1 v2.6.1rc1 v2.6.0 v2.5.0 v2.4.1 Nothing to show New pull request Latest commit 10a8fb4 Jul 14, 2016 jskeet committed on GitHub Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… … …rget platform (#1727)  Move to dotnet cli for building, and .NET Core (netstandard1.0) as target platform  This also updates the version number to 3.0.0-beta4 Permalink Failed to load latest commit information. benchmarks Add the missing maintiner-clean entry for benchmarks May 6, 2016 cmake Fix a bad variable dereference causing <package>_FIND_VERSION_PRERELE… Jul 12, 2016 conformance Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 csharp Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 docs Add https://github.com/os72/protobuf-dynamic May 31, 2016 editors down-integrate internal changes May 21, 2015 examples Use ExternalProject_Add to build the examples in a stand-alone fashion. Jun 6, 2016 java Fix spelling in strings and comments Jul 3, 2016 javanano Fix spelling in strings and comments Jul 3, 2016 jenkins Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 js Fixed failing JS tests Jul 6, 2016 m4 Merge pull request #789 from motahan/solaris64_fix Jan 20, 2016 more_tests Add makefile for extended tests to be run before release. Jan 12, 2010 objectivec Drop the performace baselines. Jul 8, 2016 php Fix spelling in strings and comments Jul 3, 2016 protoc-artifacts Merge pull request #1559 from google/beta-3 May 18, 2016 python Fix spelling in strings and comments Jul 3, 2016 ruby Fix spelling in strings and comments Jul 3, 2016 src Merge pull request #1735 from jskeet/attribute-placement Jul 7, 2016 util/python Remove hack for building Python support with Bazel. Feb 25, 2016 .gitignore Expand the OS X/Xcode gitignores May 19, 2016 .travis.yml Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 BUILD Bazel build: Keep generated sources and Python runtime in the same di… May 25, 2016 CHANGES.txt Update changes for lite May 16, 2016 CONTRIBUTORS.txt Add nano proto authors and update LICENSE file to include Android.mk. Nov 20, 2014 LICENSE Add support for POWER Linux Nov 3, 2015 Makefile.am Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 Protobuf.podspec Don't #import the .m files. Jul 7, 2016 README.md Fix typos in README.md Jan 25, 2016 WORKSPACE add java/util support based on java/util/pom.xml Mar 11, 2016 appveyor.bat Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 appveyor.yml Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 autogen.sh Add support for arguments. Oct 13, 2015 configure.ac Update the list of places where the version is stored. May 28, 2016 generate_descriptor_proto.sh Merge branch 'master' of github.com:google/protobuf Mar 30, 2016 gmock.BUILD Fix headers for gmock.BUILD Dec 1, 2015 post_process_dist.sh Add js to post_process_dist.sh. Dec 28, 2015 protobuf-lite.pc.in Uncomment conflict fields from pkg-config files. May 12, 2015 protobuf.bzl Bazel build: Keep generated sources and Python runtime in the same di… May 26, 2016 protobuf.pc.in Uncomment conflict fields from pkg-config files. May 12, 2015 six.BUILD Add srcs_version = ""PY2AND3"" in BUILD files Dec 3, 2015 tests.sh Move to dotnet cli for building, and .NET Core (netstandard1.0) as ta… Jul 14, 2016 update_file_lists.sh Fix bugs on windows Aug 25, 2015 README.md Protocol Buffers - Google's data interchange format Copyright 2008 Google Inc. https://developers.google.com/protocol-buffers/ Overview Protocol Buffers (a.k.a., protobuf) are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data. You can find protobuf's documentation on the Google Developers site. This README file contains protobuf installation instructions. To install protobuf, you need to install the protocol compiler (used to compile .proto files) and the protobuf runtime for your chosen programming language. Protocol Compiler Installation The protocol compiler is written in C++. If you are using C++, please follow the C++ Installation Instructions to install protoc along with the C++ runtime. For non-C++ users, the simplest way to install the protocol compiler is to download a pre-built binary from our release page: https://github.com/google/protobuf/releases In the downloads section of each release, you can find pre-built binaries in zip packages: protoc-$VERSION-$PLATFORM.zip. It contains the protoc binary as well as a set of standard .proto files distributed along with protobuf. If you are looking for an old version that is not available in the release page, check out the maven repo here: http://repo1.maven.org/maven2/com/google/protobuf/protoc/ These pre-built binaries are only provided for released versions. If you want to use the github master version at HEAD, or you need to modify protobuf code, or you are using C++, it's recommended to build your own protoc binary from source. If you would like to build protoc binary from source, see the C++ Installation Instructions. Protobuf Runtime Installation Protobuf supports several different programming languages. For each programming language, you can find instructions in the corresponding source directory about how to install protobuf runtime for that specific language: Language Source C++ (include C++ runtime and protoc) src Java java Python python Objective-C objectivec C# csharp JavaNano javanano JavaScript js Ruby ruby Go golang/protobuf PHP TBD Usage The complete documentation for Protocol Buffers is available via the web at: https://developers.google.com/protocol-buffers/  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/protobuf"	"Google's data interchange format."	"true"
"Data structures"	"SBE"	"https://github.com/real-logic/simple-binary-encoding"	"Simple Binary Encoding, one of the fastest message formats around."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"861"	"143"	"159"	"GitHub - real-logic/simple-binary-encoding: Simple Binary Encoding (SBE) - High Performance Message Codec Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 143 Star 861 Fork 159 real-logic/simple-binary-encoding Code Issues 11 Pull requests 1 Wiki Pulse Graphs Simple Binary Encoding (SBE) - High Performance Message Codec 1,448 commits 1 branch 18 releases 25 contributors Java 70.2% C++ 28.9% Other 0.9% Java C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.4.2-RC4 1.4.1-RC4 1.4.0-RC4 1.3.5-RC3 1.3.4-RC3 1.3.3-RC3 1.3.2-RC3 1.3.1-RC3 1.3-RC3 1.1.7-RC2 1.1.6-RC2 1.1.5-RC2 1.1.4-RC2 1.1.3-RC2 1.1.2-RC2 1.1.1-RC2 1.1-RC2 1.0.3-RC2 Nothing to show New pull request Latest commit 960b9ec Jul 15, 2016 mjpt777 [Java] Depend on Agrona 0.5.3-SNAPSHOT. Permalink Failed to load latest commit information. config [Java] Improve Java code generation style. Apr 13, 2016 cppbuild [C++]: add VS2015 build script and make it build and run unit tests. Jan 2, 2016 gradle/wrapper [Java] Upgrade to Gradle 2.14. Jun 14, 2016 sbe-benchmarks/src/main [Java] Update to sbe.xsd 1.0 final. Jul 15, 2016 sbe-samples/src/main [Java] Update to sbe.xsd 1.0 final. Jul 15, 2016 sbe-tool/src [Java] Update to sbe.xsd 1.0 final. Jul 15, 2016 .gitignore rework directory layout, gradle build, and C++ build to modularize. Dec 1, 2015 CHANGELOG.md bump to 1.0.2-RC2-SNAPSHOT Jun 17, 2014 CMakeLists.txt 1.4.0-RC4 released Apr 22, 2016 LICENSE Initial commit Sep 3, 2013 README.md [Java] Update to sbe.xsd 1.0 final. Jul 15, 2016 build.gradle [Java] Depend on Agrona 0.5.3-SNAPSHOT. Jul 15, 2016 gradlew [Java] Upgrade to Gradle 2.13. May 4, 2016 gradlew.bat [Java] Upgrade to Gradle 2.13. May 4, 2016 settings.gradle rework directory layout, gradle build, and C++ build to modularize. Dec 1, 2015 README.md Simple Binary Encoding (SBE) SBE is an OSI layer 6 presentation for encoding and decoding binary application messages for low-latency financial applications. This repository contains the reference implementations in Java and C++. Further details on the background and usage of SBE can be found on the Wiki. An XSD for SBE specs can be found here For the latest version information and changes see the Change Log with downloads at Maven Central. This SBE implementation is designed with work very efficiently with the Aeron messaging system for low-latency and high-throughput communications. SBE has a dependency on Agrona for its buffer implementations. License (See LICENSE file for full license) Copyright 2014 - 2016 Real Logic Limited Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Binaries Binaries and dependency information for Maven, Ivy, Gradle, and others can be found at http://search.maven.org. Example for Maven: <dependency>     <groupId>uk.co.real-logic</groupId>     <artifactId>sbe-all</artifactId>     <version>1.4.2-RC4</version> </dependency> Directory Layout Main source code sbe-tool/src/main  Unit tests sbe-tool/src/test  Samples of usage sbe-samples/src/main  Build The project is built with Gradle using this build.gradle file. Full clean build: $ ./gradlew  Run the Java examples $ ./gradlew runJavaExamples  Distribution Jars for the executable, source, and javadoc for the various modules can be found in <module>/build/libs  C++ Build using CMake NOTE: Linux, Mac OS, and Windows only for the moment. See FAQ. Windows builds have been tested with Visual Studio Express 12. First build using gradle to generate the SBE jar. $ ./gradlew  For convenience, a script is provided that does a full clean, build, and test of all targets as a Release build. $ ./cppbuild/cppbuild  If you are comfortable with using CMake, then a full clean, build, and test looks like: $ mkdir -p cppbuild/Debug $ cd cppbuild/Debug $ cmake ../.. $ cmake --build . --clean-first $ ctest  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/real-logic/simple-binary-encoding"	"Simple Binary Encoding, one of the fastest message formats around."	"true"
"Data structures"	"Wire"	"https://github.com/square/wire"	"Clean, lightweight protocol buffers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1576"	"129"	"236"	"GitHub - square/wire: Clean, lightweight protocol buffers for Android and Java. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 129 Star 1,576 Fork 236 square/wire Code Issues 22 Pull requests 4 Pulse Graphs Clean, lightweight protocol buffers for Android and Java. 1,244 commits 32 branches 35 releases 31 contributors Java 95.8% Protocol Buffer 3.9% Shell 0.3% Java Protocol Buffer Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages jw/android-compact jw/copy jw/decode-order jw/delimited jw/generate-enum-adapters jw/gson jw/local-name-allocators jw/next jw/para jw/parcel-enums jw/retain-redacted jw/super jw/unused-exceptions jwilson.0502.okio180 jwilson.0714.mojo master matthewdu/concurrent-java-generation matthewdu/no-pojo rice/blank_comment_lines rice/cli_builder rice/get_message_name rice/gson_field_numbers rice/interceptors rice/java_codegen rice/optimization_attempt rice/parse_visitor rice/test_nested_scopes rice/windows_compatibility version-two wire_18 wire_21 Nothing to show wire-2.2.0 wire-2.1.2 wire-2.1.1 wire-2.1.0 wire-2.0.3 wire-2.0.2 wire-2.0.1 wire-2.0.0 wire-2.0.0-BETA10 wire-2.0.0-BETA9 wire-2.0.0-BETA8 wire-2.0.0-BETA7 wire-2.0.0-BETA6 wire-2.0.0-BETA5 wire-2.0.0-BETA4 wire-2.0.0-BETA3 wire-2.0.0-BETA2 wire-2.0.0-BETA1 wire-1.8.0 wire-1.7.0 wire-1.6.1 wire-1.6.0 wire-1.5.2 wire-1.5.1 wire-1.5.0 wire-1.4.0 wire-1.3.3 wire-1.3.2 wire-1.3.1 wire-1.3.0 wire-1.2.0 wire-1.1.1 wire-1.1.0 wire-1.0.1 wire-1.0.0 Nothing to show New pull request Latest commit a3d03f7 Jul 15, 2016 swankjesse committed on GitHub Merge pull request #611 from square/jwilson.0714.mojo … Implement Maven support for custom type adapters. Permalink Failed to load latest commit information. .buildscript Errors fail the deploy script. Dec 20, 2014 sample [maven-release-plugin] prepare for next development iteration Jun 14, 2016 wire-codegen-sample [maven-release-plugin] prepare for next development iteration Jun 14, 2016 wire-compiler Implement Maven support for custom type adapters. Jul 15, 2016 wire-gson-support Update to Gson 2.7. Jun 15, 2016 wire-java-generator Implement Maven support for custom type adapters. Jul 15, 2016 wire-maven-plugin Implement Maven support for custom type adapters. Jul 15, 2016 wire-runtime Implement Maven support for custom type adapters. Jul 15, 2016 wire-schema-tests Generate *ProtoFields classes instead of value objects. Jun 25, 2016 wire-schema Optimize imports. Jun 27, 2016 wire-testing Generate *ProtoFields classes instead of value objects. Jun 25, 2016 .gitignore Re-structure project a bit. Jul 15, 2013 .travis.yml Use -e so newline actually shows. Sep 26, 2015 BUG-BOUNTY.md Includes this repo in our open source bug bounty program. May 11, 2015 CHANGELOG.md Prepare version 2.2.0. Jun 14, 2016 CONTRIBUTING.md Cleanup Jul 9, 2013 LICENSE.txt Cleanup Jul 9, 2013 README.md Prepare version 2.2.0. Jun 14, 2016 checkstyle.xml Implement Maven support for custom type adapters. Jul 15, 2016 gen_tests.sh Add support for map in the runtime. Jun 14, 2016 pom.xml Generate *ProtoFields classes instead of value objects. Jun 25, 2016 README.md Wire Protocol Buffers “A man got to have a code!” - Omar Little As our teams and programs grow, the variety and volume of data also grows. Success will turn your simple data models into complex ones! Whether your application is storing data to disk or transmitting it over a network, the structure and interpretation of that data should be clear. Consumers work best with data they understand! Schemas describe and document data models. If you have data, you should have a schema. Protocol Buffers Google's Protocol Buffers are built around a great schema language: It's cross platform and language independent. Whatever programming language you use, you'll be able to use proto schemas with your application. Proto schemas are backwards-compatible and future-proof. You can evolve your schema as your application loses old features and gains new ones. It's focused. Proto schemas describe your data models. That's it. Here's a sample message definition: syntax = ""proto2"";  package squareup.dinosaurs;  option java_package = ""com.squareup.dinosaurs"";  import ""squareup/geology/period.proto"";  message Dinosaur {   // Common name of this dinosaur, like ""Stegosaurus"".   optional string name = 1;    // URLs with images of this dinosaur.   repeated string picture_urls = 2;    optional squareup.geology.Period period = 5; } And here's an enum definition: syntax = ""proto2"";  package squareup.geology;  option java_package = ""com.squareup.geology"";  enum Period {   // 145.5 million years ago — 66.0 million years ago.   CRETACEOUS = 1;    // 201.3 million years ago — 145.0 million years ago.   JURASSIC = 2;    // 252.17 million years ago — 201.3 million years ago.   TRIASSIC = 3; } This schema language is Protocol Buffers' best feature. You might even use it purely for documentation purposes, such as to describe a JSON API. Protocol Buffers also defines a compact binary encoding of messages that conform to the schema. This encoding is fast to encode, fast to decode, small to transmit, and small to store. The binary encoding uses numeric tags from the schema, like the 5 for period above. For example, let's encode this dinosaur: {   name: ""Stegosaurus"",   period: JURASSIC }  The encoded value is just 15 bytes: Hex  Description  0a  tag: name(1), field encoding: LENGTH_DELIMITED(2). 1 << 3 | 2  0b  ""Stegosaurus"".length()  53  'S'  74  't'  65  'e'  67  'g'  6f  'o'  73  's'  61  'a'  75  'u'  72  'r'  75  'u'  73  's'  28  tag: period(5), field encoding: VARINT(0). 5 << 3 | 0  02  JURASSIC(2)  Why Wire? The Protocol Buffers schema language and binary encoding are both defined by Google. Wire is an independent implementation from Square that's specifically designed for Android and Java. For each message type defined in the schema, Wire generates an immutable model class and its builder. The generated code looks like code you'd write by hand: it's documented, formatted, and simple. Wire's APIs should feel at home to programmers who like Effective Java. That said, there are some interesting design decisions in Wire: Wire messages declare public final fields instead of the usual getter methods. This cuts down on both code generated and code executed. Less code is particularly beneficial for Android programs. Wire avoids case mapping. A field declared as picture_urls in a schema yields a Java field picture_urls and not the conventional pictureUrls camel case. Though the name feels awkward at first, it's fantastic whenever you use grep or more sophisticated search tools. No more mapping when navigating between schema, Java source code, and data. It also provides a gentle reminder to calling code that proto messages are a bit special. Primitive types are always boxed. If a field is absent, its value is null. This is used for naturally optional fields, such as a dinosaur whose period is unknown. A field may also be null due to schema evolution: if tomorrow we add a carnivore boolean to our message definition, today's data won’t have a value for that field. Here's the compact generated code for the Dinosaur message defined above: // Code generated by Wire protocol buffer compiler, do not edit. // Source file: squareup/dinosaurs/dinosaur.proto at 9:1 package com.squareup.dinosaurs;  import com.squareup.geology.Period; import com.squareup.wire.Message; import com.squareup.wire.ProtoAdapter; import com.squareup.wire.WireField; import java.util.List; import okio.ByteString;  public final class Dinosaur extends Message<Dinosaur, Dinosaur.Builder> {   public static final ProtoAdapter<Dinosaur> ADAPTER = ProtoAdapter.newMessageAdapter(Dinosaur.class);    private static final long serialVersionUID = 0L;    public static final String DEFAULT_NAME = """";    public static final Period DEFAULT_PERIOD = Period.CRETACEOUS;    /**    * Common name of this dinosaur, like ""Stegosaurus"".    */   @WireField(       tag = 1,       adapter = ""com.squareup.wire.ProtoAdapter#STRING""   )   public final String name;    /**    * URLs with images of this dinosaur.    */   @WireField(       tag = 2,       adapter = ""com.squareup.wire.ProtoAdapter#STRING"",       label = WireField.Label.REPEATED   )   public final List<String> picture_urls;    @WireField(       tag = 5,       adapter = ""com.squareup.geology.Period#ADAPTER""   )   public final Period period;    public Dinosaur(String name, List<String> picture_urls, Period period) {     this(name, picture_urls, period, ByteString.EMPTY);   }    public Dinosaur(String name, List<String> picture_urls, Period period, ByteString unknownFields) {     super(unknownFields);     this.name = name;     this.picture_urls = immutableCopyOf(""picture_urls"", picture_urls);     this.period = period;   }    @Override   public Builder newBuilder() {     Builder builder = new Builder();     builder.name = name;     builder.picture_urls = copyOf(""picture_urls"", picture_urls);     builder.period = period;     builder.addUnknownFields(unknownFields());     return builder;   }    @Override   public boolean equals(Object other) {     if (other == this) return true;     if (!(other instanceof Dinosaur)) return false;     Dinosaur o = (Dinosaur) other;     return equals(unknownFields(), o.unknownFields())         && equals(name, o.name)         && equals(picture_urls, o.picture_urls)         && equals(period, o.period);   }    @Override   public int hashCode() {     int result = super.hashCode;     if (result == 0) {       result = unknownFields().hashCode();       result = result * 37 + (name != null ? name.hashCode() : 0);       result = result * 37 + (picture_urls != null ? picture_urls.hashCode() : 1);       result = result * 37 + (period != null ? period.hashCode() : 0);       super.hashCode = result;     }     return result;   }    public static final class Builder extends com.squareup.wire.Message.Builder<Dinosaur, Builder> {     public String name;      public List<String> picture_urls;      public Period period;      public Builder() {       picture_urls = newMutableList();     }      /**      * Common name of this dinosaur, like ""Stegosaurus"".      */     public Builder name(String name) {       this.name = name;       return this;     }      /**      * URLs with images of this dinosaur.      */     public Builder picture_urls(List<String> picture_urls) {       checkElementsNotNull(picture_urls);       this.picture_urls = picture_urls;       return this;     }      public Builder period(Period period) {       this.period = period;       return this;     }      @Override     public Dinosaur build() {       return new Dinosaur(name, picture_urls, period, buildUnknownFields());     }   } } The Java code to create and access proto models is compact and readable: Dinosaur stegosaurus = new Dinosaur.Builder()     .name(""Stegosaurus"")     .period(Period.JURASSIC)     .build();  System.out.println(""My favorite dinosaur existed in the "" + stegosaurus.period + "" period.""); Each type has a corresponding ProtoAdapter that can encode a message to bytes and decode bytes back into a message. Dinosaur stegosaurus = ... byte[] stegosaurusBytes = Dinosaur.ADAPTER.encode(stegosaurus);  byte[] tyrannosaurusBytes = ... Dinosaur tyrannosaurus = Dinosaur.ADAPTER.decode(tyrannosaurusBytes); When accessing a field, use Wire.get() to replace null values with the corresponding default: Period period = Wire.get(stegosaurus.period, Dinosaur.DEFAULT_PERIOD); This is equivalent to the following: Period period = stegosaurus.period != null ? stegosaurus.period : Dinosaur.DEFAULT_PERIOD;  Generating Code With Wire Wire's compiler is available via a Maven plugin. Put .proto sources in your project's src/main/proto directory, then use the plugin to generate .java files. The plugin will automatically add the generated Java code to your project's source roots. <build>   <plugins>     <plugin>       <groupId>com.squareup.wire</groupId>       <artifactId>wire-maven-plugin</artifactId>       <version>${project.version}</version>       <executions>         <execution>           <phase>generate-sources</phase>           <goals>             <goal>generate-sources</goal>           </goals>           <configuration>             <protoFiles>               <param>squareup/dinosaurs/dinosaur.proto</param>               <param>squareup/geology/period.proto</param>             </protoFiles>           </configuration>         </execution>       </executions>     </plugin>   </plugins> </build> Wire can read .proto files from the local file system and from within .jar files. The compiler can optionally prune your schema to a subset of root types and their transitive dependencies. This is useful when sharing a schema between projects: a Java service and Android app may each use a subset of a larger shared schema. If you don't use Maven, the compiler also has a command line interface. Just substitute wire-compiler-VERSION-jar-with-dependencies.jar with the path to your jar. % java -jar wire-compiler-VERSION-jar-with-dependencies.jar \     --proto_path=src/main/proto \     --java_out=out \     squareup/dinosaurs/dinosaur.proto \     squareup/geology/period.proto Writing com.squareup.dinosaurs.Dinosaur to out Writing com.squareup.geology.Period to out  If you use Proguard, then you need to add keep rules. The simplest option is to tell Proguard not to touch the Wire runtime library and your generated protocol buffers (of course these simple rules will miss opportunities to shrink and optimize the code): -keep class com.squareup.wire.** { *; } -keep class com.yourcompany.yourgeneratedcode.** { *; }  Get Wire The wire-runtime package contains runtime support libraries that must be included in applications that use Wire-generated code. With Maven: <dependency>   <groupId>com.squareup.wire</groupId>   <artifactId>wire-runtime</artifactId>   <version>2.2.0</version> </dependency> With Gradle: compile 'com.squareup.wire:wire-runtime:2.2.0' Snapshots of the development version are available in Sonatype's snapshots repository. Unsupported Wire does not support: Groups - they are skipped when parsing binary input data Wire supports custom options on messages and fields. Other custom options are ignored. Pass --excludes=google.protobuf.* to the compiler to omit options from the generated code. Further Documentation See Google's excellent documentation on the structure and syntax of proto schemas. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/square/wire"	"Clean, lightweight protocol buffers."	"true"
"Date and Time"	"Almanac Converter"	"https://github.com/hypotemoose/almanac-converter"	"Simple conversion between different calendar systems."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"3"	"0"	"GitHub - hypotemoose/almanac-converter: A Java-based calendar converter Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 7 Fork 0 hypotemoose/almanac-converter Code Issues 4 Pull requests 0 Wiki Pulse Graphs A Java-based calendar converter 210 commits 1 branch 0 releases Fetching contributors Java 98.6% Python 1.4% Java Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 06a720d May 22, 2016 chrisengelsma committed with chrisengelsma Supports 4 leap-year-rules, as well as astronomical vs. civil calenda… … …r epochs. Permalink Failed to load latest commit information. gradle/wrapper Added support for Hebrew Calendar week day names May 10, 2016 libs Added Joda Library Sep 27, 2015 src Supports 4 leap-year-rules, as well as astronomical vs. civil calenda… May 22, 2016 .codeclimate.yml Create .codeclimate.yml Sep 22, 2015 .gitignore git Sep 29, 2015 .travis.yml Updated travis.yml Oct 23, 2015 LICENSE Create LICENSE Oct 1, 2015 README.md Code cleanup, added PersianCalendar May 18, 2016 build.gradle Added support for Hebrew Calendar week day names May 10, 2016 build.xml Initial commit Aug 1, 2015 gradlew Added support for Hebrew Calendar week day names May 10, 2016 gradlew.bat Added support for Hebrew Calendar week day names May 10, 2016 README.md Almanac Converter An easy-to-use Java-based calendar converter - able to convert between various known calendars. Requirements Java Development Kit (JDK) 1.7.0 + Gradle 2.6+ Installation To install, you will need Gradle or Apache Ant. cd to the cloned repository Run gradlew build Impress your friends with some date conversions. See the wiki for examples. Inspiration While there exists other Java-based date-time handlers, Almanac converter's central focus is around converting between historical dates. As such, its design approach is different. First, it uses the Julian Day as the backbone behind the conversions. Secondly, constructing and converting is very simple and direct. Supported Calendars Gregorian Calendar The Gregorian Calendar is internationally the most widely used civil calendar. It was named for Pope Gregory XIII who introduced it on October 15, 1582. The calendar was a refinement to the Julian Calendar, with the motivation of setting the Easter holiday to a specific date instead of the spring equinox, which naturally drifted dates. Each year is divided into 12 months, with a varied number of days per month. To account for the drift in seasons, a leap year occurs which introduces an additional day in February. These leap years happen every year that's divisible by 4, except years that are divisible by 100 but not divisible by 400. For example: 1700, 1800 and 1900 are NOT leap years, but 2000 is a leap year. Julian Calendar The Julian Calendar is a calendar introduced under Julius Caesar in 46 BC. It very closely resembled the Gregorian Calendar in that it was comprised of years of 365 days long divided into 12 months. The main difference is that leap years are simply computed every 4 years (no 100-400 year rule). This calendar is still in use by some Orthodox churches (although it is primarily referred to as the ""Old Style""). French Republican Calendar The French Republican Calendar (or, erroneously, French Revolutionary Calendar) was a calendar created and used during the French Revolution. It was only used in practice for 12 years starting in late 1793 until it was abolished by Napoleon Bonaparte as an effort to reinstate the catholic church within France. This calendar was later picked up, albeit briefly, during the Paris Commune of 1871. Each year is divided into 12 months (mois), with each month being an equal 30 days long, divided out further into 3 weeks (décades) 10 days long. Every year begins on the autumnal equinox as observed in Paris. The slight variation in seaons required the use of 5-6 additional ""Sans-culottides"" days. While the calendar was adopted on October 24, 1793 (3 Brumaire, An II), the official epoch was set to September 22, 1792 (1 Vendemiaire, An I) to commemorate the founding of the republic. To further reduce the influence of the Church, a Rural Calendar was introduced, naming each day of the year after various crops, minerals, animals and work tools to reflect the changing of the seasons. Maya Calendar The Maya calendar is not one calendar per se, but rather a system of calendars employed by pre-Columbian Mesoamerica. In many modern communities in Guatemala and Mexico, this calendar is still used today. The Maya calendar consists of several cycles (or counts) of different lengths. The 260-day calendar, or Tzolk'in, was combined with the 365-day calendar, or Haab' to form a synchronized cycle lasting for 52 Haab' called the Calendar Round. To measure periods longer than this, the Maya used the Long Count calendar. Islamic Calendar The Islamic calendar, or Hijri calendar, is a lunar calendar currently used in many Muslim countries and also used by Muslims to determine the proper days on which to observing the annual fasting, to attend Hajj, and to celebrate other Islamic holidays and festivals. The calendar consists of 12 months with a year of 354 days. The lengths of the months are determined by the birth of a new lunar cycle, which historically resulted in each month being 29 or 30 days depending on the visibility of the moon. However, certain sects and groups now use a tabular Islamic calendar, in which odd-numbered months have thirty days, and even months have 29. Hebrew Calendar The Hebrew (Jewish) calendar is a calendar used predominantly for Jewish religious observances. It determines the dates for Jewish holidays and the appropriate public reading of Torah portions. In Israel, it is used for religious purposes, provides a time frame for agriculture and is an official calendar used for civil purposes. Persian Calendar Julian Day The Julian Day is the continuous count of days since the beginning of the Julian Period used primarily by astronomers. The Julian Period is a chronological interval of 7980 years beginning in 4713 BC, and has been used since 1583 to convert between different calendars. The next Julian Period begins in the year 3268 AD. Android App - Almaniac This library is now being implemented in the wild in Almaniac found on the Google Play store. Roadmap * Julian Day                 [100%] DONE * Gregorian Calendar         [100%] DONE * Julian Calendar            [100%] DONE * French Republican Calendar [100%] DONE * Mayan Calendar             [100%] DONE * Islamic Calendar           [100%] DONE * Hebrew Calendar            [100%] DONE * Persian Calendar           [100%] DONE * Indian Civil Calendar      [ 10%] IN PROGRESS * Coptic Calendar            [  0%] PLANNING * Chinese Calendar           [  0%] PLANNING * Soviet Calendar            [  0%] PLANNING * Dangun Calendar            [  0%] PLANNING * Juche Calendar             [  0%] PLANNING * More...  Credits Inspired by Fourmilab's javascript-based calendar converter and astronomical equations by Jean Meeus. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hypotemoose/almanac-converter"	"Simple conversion between different calendar systems."	"true"
"Date and Time"	"Joda-Time"	"http://www.joda.org/joda-time/"	"De facto standard date/time-library before Java 8."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2269"	"189"	"531"	"GitHub - JodaOrg/joda-time: Joda-Time is the widely used replacement for the Java date and time classes prior to Java SE 8. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 189 Star 2,269 Fork 531 JodaOrg/joda-time Code Issues 21 Pull requests 1 Pulse Graphs Joda-Time is the widely used replacement for the Java date and time classes prior to Java SE 8. http://www.joda.org/joda-time/ 1,971 commits 6 branches 49 releases 52 contributors Java 99.7% Other 0.3% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags FORMAT_REFACTOR LOCAL_DATES master topic/quarters v1.2_BRANCH v1.6_BRANCH Nothing to show v2.9.4 v2.9.3 v2.9.2 v2.9.1 v2.9 v2.8.2 v2.8.1 v2.8 v2.7 v2.6 v2.5 v2.4 v2.3 v2.2 v2.1 v2.0 v2.0-RC1 v1.6.2 v1.6.1 v1.6.0 v1.5.2 v1.5.1 v1.5 v1.4 v1.3 v1.2.1 v1.2 v1.1 v1.0 v0.9.9 v0.9.8 v0.9.5 v0.9 WITH_MILLIS_DURATION PRE_PARTIAL_REFACTOR PRE_FORMAT_REFACTOR PRE_FORMAT_INTEGRATE PRE_ASF2_LICENSE PRE_ABSTRACT_REFACTOR POST_ASF2_LICENSE JSPTAGS_v1.0.2 JSPTAGS_v1.0.1 JSPTAGS_v1.0 JSPTAGS_v0.9 JSPTAGS_v0.8 HIBERNATE_v1.2 HIBERNATE_v1.1 HIBERNATE_v1.0 HIBERNATE_v0.8 Nothing to show New pull request Latest commit 1e86b1e Jun 13, 2016 jodastephen Merge branch 'duration-divide' Permalink Failed to load latest commit information. .github Update templates Feb 21, 2016 src Add Duration.dividedBy(long,RoundingMode) Jun 13, 2016 .gitignore Ignore time-zone data Oct 5, 2013 .travis.yml Update Travis to new infrastructure Oct 27, 2015 LICENSE.txt Remove JodaTime folder moving files to top level May 16, 2011 NOTICE.txt Remove JodaTime folder moving files to top level May 16, 2011 README.md Release v2.9.4 May 27, 2016 RELEASE-NOTES.txt Add Duration.dividedBy(long,RoundingMode) Jun 13, 2016 pom.xml Add Duration.dividedBy(long,RoundingMode) Jun 13, 2016 README.md Joda-Time Joda-Time provides a quality replacement for the Java date and time classes. The design allows for multiple calendar systems, while still providing a simple API. The 'default' calendar is the ISO8601 standard which is used by XML. The Gregorian, Julian, Buddhist, Coptic, Ethiopic and Islamic systems are also included, and we welcome further additions. Supporting classes include time zone, duration, format and parsing. As a flavour of Joda-Time, here's some example code: public boolean isAfterPayDay(DateTime datetime) {   if (datetime.getMonthOfYear() == 2) {   // February is month 2!!     return datetime.getDayOfMonth() > 26;   }   return datetime.getDayOfMonth() > 28; }  public Days daysToNewYear(LocalDate fromDate) {   LocalDate newYear = fromDate.plusYears(1).withDayOfYear(1);   return Days.daysBetween(fromDate, newYear); }  public boolean isRentalOverdue(DateTime datetimeRented) {   Period rentalPeriod = new Period().withDays(2).withHours(12);   return datetimeRented.plus(rentalPeriod).isBeforeNow(); }  public String getBirthMonthText(LocalDate dateOfBirth) {   return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH); } Joda-Time is licensed under the business-friendly Apache 2.0 licence. Documentation Various documentation is available: The home page Two user guides - quick and full The Javadoc The FAQ list Information on downloading and installing Joda-Time including release notes Releases Release 2.9.4 is the current latest release. This release is considered stable and worthy of the 2.x tag. It depends on JDK 1.5 or later. Available in the Maven Central repository Maven configuration: <dependency>   <groupId>joda-time</groupId>   <artifactId>joda-time</artifactId>   <version>2.9.4</version> </dependency> Gradle configuration: compile 'joda-time:joda-time:2.9.4' Related projects Related projects at GitHub: https://github.com/JodaOrg/joda-time-hibernate https://github.com/JodaOrg/joda-time-jsptags https://github.com/JodaOrg/joda-time-i18n Other related projects: http://www.joda.org/joda-time/related.html Support Please use GitHub issues and Pull Requests for support. History Issue tracking and active development is at GitHub. Historically, the project was at Sourceforge. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JodaOrg/joda-time"	"De facto standard date/time-library before Java 8."	"true"
"Date and Time"	"ThreeTenBP"	"https://github.com/ThreeTen/threetenbp"	"Port of JSR 310 (java.time package) by the author of Joda-Time."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"210"	"25"	"42"	"GitHub - ThreeTen/threetenbp: Backport of functionality based on JSR-310 to Java SE 6 and 7. This is NOT an implementation of JSR-310. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 210 Fork 42 ThreeTen/threetenbp Code Issues 0 Pull requests 0 Pulse Graphs Backport of functionality based on JSR-310 to Java SE 6 and 7. This is NOT an implementation of JSR-310. http://www.threeten.org/threetenbp/ 3,051 commits 51 branches 12 releases 22 contributors Java 99.5% Other 0.5% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags EDR_2010_02 backport-M7 explore/durationperf explore/extrafields explore/fractionofsecond explore/generics explore/issupported explore/jdk7 explore/nocalobj explore/periodenhance explore/periodinterface explore/query explore/removeodt explore/resolver explore/safeadjuster explore/separateodt explore/timescale explore/uuuu explore/whiterabbit explore/zoneruleslong master no-tzdb strategy/bettermerge strategy/calendricala strategy/calendricalb strategy/decimal strategy/epsecs strategy/longchild strategy/longrules strategy/mixed strategy/neutraldt strategy/neutralsecs strategy/noisounit strategy/noresolver strategy/pair strategy/pirate strategy/piratecalobj strategy/piratecalobjfull strategy/piratenorules strategy/pirateplus strategy/piratesinglecal strategy/prepirate strategy/radical strategy/radicalb strategy/separaterule strategy/simpler v0.6.x wip/fractionpp wip/fulldatetime wip/period wip/removeodt Nothing to show v1.3.2 v1.3.1 v1.3 v1.2 v1.1 v1.0 v0.9 v0.8.1 v0.8 v0.7.2 v0.7.1 v0.7 Nothing to show New pull request Latest commit 151be55 Jun 30, 2016 jodastephen Bump version Permalink Failed to load latest commit information. src Release v1.3.2 Jun 30, 2016 .gitattributes Manage line endings centrally Jul 24, 2012 .gitignore Avoid LocalDate.ofEpochDay() out of range Jun 30, 2016 .travis.yml Fix comment Oct 13, 2014 LICENSE.txt Update maven and general tidy Feb 21, 2014 README.md Release v1.3.1 Sep 1, 2015 RELEASE-NOTES.md Update documentation May 13, 2014 pom.xml Bump version Jun 30, 2016 README.md ThreeTen backport project JSR-310 provides a new date and time library for Java SE 8. This project is the backport to Java SE 6 and 7. See the main home page of the project. The backport is NOT an implementation of JSR-310, as that would require jumping through lots of unnecessary hoops. Instead, this is a simple backport intended to allow users to quickly use the JSR-310 API on Java SE 6 and 7. The backport should be referred to using the ""ThreeTen"" name. Active development on JSR-310 is at OpenJDK: This GitHub repository is a fork of that originally used to create JSR-310. That repository used the same BSD 3-clause license as this repository. Issues about the backport should be reported here at GitHub. Pull requests and issues will only be considered so far as matching the behaviour of the real Java SE 8. Additional requested features will be rejected. Building This project builds using maven. Time-zone data The time-zone database is stored as a pre-compiled dat file that is included in the built jar. The version of the time-zone data used is stored within the dat file (near the start). Updating the time-zone database involves using the TzdbZoneRulesCompiler class and re-compiling the jar file. Pull requests with later versions of the dat file will be accepted. FAQs What version of Java SE 8 does this project map to? This project currently maps to the expected contents of release Java SE 8u20. Will the backport be kept up to date? There are no plans for further releases. However if bugs are found, or pull requests received then a release may occur. Is this project derived from OpenJDK? No. This project is derived from the Reference Implementation previously hosted on GitHub. That project had a BSD license, which has been preserved here. Thus, this project is a fork of the original code before entry to OpenJDK. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ThreeTen/threetenbp"	"Port of JSR 310 (java.time package) by the author of Joda-Time."	"true"
"Date and Time"	"Time4J"	"https://github.com/MenoData/Time4J"	"Advanced date and time library."	"null"	"null"	"null"	"Inversion of Control"	"https://en.wikipedia.org/wiki/Inversion_of_control"	"null"	"null"	"83"	"11"	"16"	"GitHub - MenoData/Time4J: Advanced date, time and interval library for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 83 Fork 16 MenoData/Time4J Code Issues 11 Pull requests 0 Pulse Graphs Advanced date, time and interval library for Java 1,702 commits 2 branches 35 releases 1 contributor Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags level6 master Nothing to show v4.17 v4.16 v4.15 v4.14 v4.13 v4.12 v4.11 v4.10 v4.9 v4.8 v4.7 v4.6 v4.5 v4.4 v4.3 v4.2 v4.1 v4.0 v3.21 v3.20 v3.19 v3.18 v3.17 v3.16 v3.15 v3.14 v3.13 v3.12 v3.11 v3.10 v3.9 v3.8 v3.7 v3.6 v3.5 Nothing to show New pull request Latest commit 292eb2c Jul 15, 2016 MenoData small optimization Permalink Failed to load latest commit information. calendar improved javadoc of HijriCalendar Jul 14, 2016 core new leap second Jul 7, 2016 i18n small optimization Jul 15, 2016 misc refactoring of Clock.inPlatformView() Jun 30, 2016 olson prepare next development iteration Jun 21, 2016 range javadoc fix Jul 11, 2016 .gitattributes configure .gitignore Mar 29, 2015 .gitignore configure .gitignore Mar 29, 2015 CHANGELOG.md Update CHANGELOG.md Jul 15, 2016 LICENSE Change license to LGPL-v2.1 May 28, 2014 README.md Update README.md Jun 20, 2016 pom.xml prepare next development iteration Jun 21, 2016 README.md Time4J Advanced date, time and interval library for Java Motivation: Time4J is thought as a complete and high-end replacement for old java classes around java.util.Date, java.util.Calendar and java.text.SimpleDateFormat. This project is also intended as first-class alternative to the popular libraries JodaTime and its successor JSR-310 (Threeten) since the target audience of Time4J will not only be business Java developers, but also developers with a more scientific background (for example extended time scale support including leap seconds or historically accurate dates). Although the new JSR-310 (built in Java 8) is certainly a very useful library for many business developers it also has some severe and intentional limitations. Time4J intends to fill all gaps in the future so justifying its co-existence. The interoperability with java.time-package is supported by easily available conversion methods. Current state and introduction: On 2016-06-20 the version v4.17 of Time4J has been finished and released. It requires Java-8. The older version line v3.x will be continued however and is based on Java 6+7. The previous version lines v1.x and v2.x are no longer recommended (due to several backward incompatibilities) and have reached end-of-life. Time4J is organized in modules. The module time4j-core is always necessary. Other modules are optional and include: time4j-olson contains predefined timezone identifiers as enums, enables parsing of localized timezone names and also offers access to historized data of Sun/Oracle-timezones in Java. time4j-tzdata is the timezone repository of Time4J based on the IANA-TZDB time4j-i18n for enhanced localization, formatting and history support time4j-calendar for handling alternative non-iso calendars (needs i18n-module) time4j-range for handling intervals (needs i18n-module) time4j-misc miscellaneous features like xml-support, alternative clocks or military timezones For Android support please refer to the sister project Time4A. Standard use cases will be covered by the main package ""net.time4j"". It offers four basic temporal types. PlainDate = calendar date strictly following ISO-8601 PlainTime = wall time (on an analogous clock) including 24:00-support and flexible dayperiods PlainTimestamp = local timestamp as composition of calendar date and wall time Moment = global timestamp which refers to true UTC standard including leapsecond-support Here some examples as a flavour of how Time4J-code looks like (shown code valid for v3.0 or later): import net.time4j.*; import net.time4j.format.TextWidth; import net.time4j.format.expert.PatternType; import net.time4j.tz.olson.*;  import java.util.Locale;  import static net.time4j.CalendarUnit.MONTHS; import static net.time4j.PlainDate.DAY_OF_MONTH; import static net.time4j.PlainDate.DAY_OF_WEEK; import static net.time4j.PlainTime.MINUTE_OF_HOUR; import static net.time4j.Weekday.WEDNESDAY;  public class Demo {   public static void main(String... args) {     // What is the last day of overnext month?     System.out.println(         SystemClock.inLocalView().today().plus(2, MONTHS).with(DAY_OF_MONTH.maximized()));      // When is next wednesday?     PlainDate today = SystemClock.inLocalView().today();     PlainDate nextWednesday = today.with(DAY_OF_WEEK.setToNext(WEDNESDAY));     System.out.println(nextWednesday);      // What is the current wall time rounded down to multiples of 5 minutes?     PlainTimestamp currentLocalTimestamp = SystemClock.inZonalView(EUROPE.BERLIN).now();     PlainTime roundedTime =         currentLocalTimestamp.getWallTime() // T22:06:52,688         .with(MINUTE_OF_HOUR.atFloor()) // T22:06         .with(MINUTE_OF_HOUR.roundedDown(5)); // T22:05     System.out.println(""Rounded wall time: "" + roundedTime);      // Example for flexible dayperiods     PlainTime eveningTime = PlainTime.of(20, 45);     ChronoFormatter<PlainTime> formatter =         ChronoFormatter.ofTimePattern(""h:mm B"", PatternType.CLDR, Locale.ENGLISH);     System.out.println(         ""12-hour-format with dayperiod: ""          + formatter.format(eveningTime)); // 8:45 in the evening      // How does last UTC-leapsecond look like in Japan?     Moment leapsecondUTC =         PlainDate.of(2012, Month.JUNE, 30)         .at(PlainTime.midnightAtEndOfDay()) // 2012-06-30T24 => 2012-07-01T00         .atUTC().minus(1, SI.SECONDS);     System.out.println(leapsecondUTC); // 2012-06-30T23:59:60Z      System.out.println(         ""Japan-Time: ""         + ChronoFormatter.ofMomentPattern(              ""uuuu-MM-dd'T'HH:mm:ssXX"",               PatternType.CLDR,               Locale.ROOT,               ASIA.TOKYO           ).format(leapsecondUTC)     ); // Japan-Time: 2012-07-01T08:59:60+0900      // duration in seconds normalized to hours, minutes and seconds     Duration<?> dur = Duration.of(337540, ClockUnit.SECONDS).with(Duration.STD_CLOCK_PERIOD);      // custom duration format => hh:mm:ss     String s1 = Duration.Formatter.ofPattern(""hh:mm:ss"").format(dur);     System.out.println(s1); // output: 93:45:40      // localized duration format for french     String s2 = PrettyTime.of(Locale.FRANCE).print(dur, TextWidth.WIDE);     System.out.println(s2); // output: 93 heures, 45 minutes et 40 secondes      // following code requires v4.x and Java-8 using java.time.LocalDate     ChronoFormatter<PlainDate> formatter =         ChronoFormatter.setUp(PlainDate.class, new Locale(""en"", ""SE""))             .addPattern(""GGGG yyyy, MMMM "", PatternType.CLDR)             .addEnglishOrdinal(ChronoHistory.ofSweden().dayOfMonth())             .build();     System.out.println(formatter.formatThreeten(LocalDate.of(1712, 3, 11)));     // output: Anno Domini 1712, February 30th   } } Design remarks: a) Type-safety: Although Time4J is strongly generified users will not really use any generics in their application code as demonstrated in example code, but are more or less type-safe at compile-time. For example, it is impossible to add clock units to a calendar date. This is in contrast to JSR-310 which heavily relies on runtime exceptions. Otherwise Time4J shares the advantages like immutability and non-tolerant null-handling. b) Explicit: In contrast to most other libraries Time4J does not like implicit defaults. Users have to explicitly specify what locale or time zone they want. And even if they want the default then they spell it so in methods like: inLocalView() or localFormatter(...) or inStdTimezone(). This philosophy is also the reason why the class PlainDate is missing a static method like today(). This method instead exists in the class ZonalClock making clear that you cannot achieve the current local date and time without specifying the time zone. c) Manipulations based on elements: Time4J offers a lot of manipulations of date and time by an element-centric approach. Every basic type registers some elements (similar to fields in other libraries) which serve as access key to chronological partial data. These elements like ""MINUTE_OF_HOUR"" offer many different manipulation methods, called operators using the strategy pattern idea. With this design it is possible to manipulate a PlainTime in about 179 different ways. Another advantage of this design: Despite the size of features the count of methods in most classes is still not too big, PlainTime has less than 50 methods including the inherited methods from super classes. d) Temporal arithmetic: Another way of manipulation is date/time-arithmetic along a time axis. All four basic types have their time axis. For example roughly spoken Moment is defined as an elapsed count of SI-seconds since UTC epoch while a calendar date (here: PlainDate) maps dates to julian days - another kind of time axis. The essentials of this time arithmetic are realized via the abstract super class TimePoint. So all four basic types inherit methods like plus(n, units), until(...) etc for supporting adding, subtracting and evaluating durations. Multi-unit-durations are handled by the classes Duration and MachineTime. e) Global versus local: Time4J rejects the design idea of JSR-310 to separate between ""machine time"" and ""human time"". This is considered as artificial. So all four basic types offer both aspects in one. For example a calendar date is simultaneously a human time consisting of several meaningful elements like year, month etc. and also a kind of machine or technical time counter because you can define a single incrementing number represented by julian days. In a similar way a UTC-moment has both a technical counter (the number of SI-seconds since UTC-epoch) AND a human representation visible in its canonical output produced by toString()-method (example: 2014-04-21T19:45:30Z). However, Time4J emphasizes the difference between local and global types. Conversion between these types always require a timezone or an offset. f) Internationalization: Time4J defines its own i18n-resources for many languages (80 languages in version 4.17) in order to defend its i18n-behaviour against poor or insufficient platform resources (which only serve as fallback). Especially localized formatting of durations is not a supported feature on any platform, so Time4J fills an important gap. g) Powerful format engine: The built-in format engine located in format/expert-package offers overwhelmingly many features, general interfaces for customization and outstanding parsing performance (better than in Joda-Time or JSR-310). Plans for next releases: There are no fixed predictions when some features will be introduced in which release. However, you can follow the milestone page to get a rough estimation - see https://github.com/MenoData/Time4J/milestones. While the main focus of the next releases are standard business use cases, you can expect later more exciting features like other calendar systems, more support for historical dates and astronomically related calendar issues. Time4J will be a long-term running project. Downloads and Requirements: You can find the latest downloads on the release page. Alternatively you can use the maven central repository. If you consider building the version line v3.x yourself from the sources then you need a Java7-compiler (not 6!) with options ""-source 1.6 -target 1.6"". This is necessary to ensure that generified code will correctly compile. Please also read the installation notes on Time4J-tutorial. Feedback: Feedback is welcome. You can best use following page for feedback: https://github.com/MenoData/Time4J/issues Tutorials: English tutorials and code examples are presented on the website ""http://www.time4j.net/"". Blog: If you are capable of German language you can also read my blog ""http://www.menodata.de/blog/"" where I sometimes post my views about Java and Time, for example my review of JSR-310. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MenoData/Time4J"	"Advanced date and time library."	"true"
"Dependency Injection"	"Apache DeltaSpike"	"https://deltaspike.apache.org/"	"CDI extension framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache DeltaSpike - Apache DeltaSpike Apache DeltaSpike Home Documentation Javadoc Source Download Community News Migration About Apache DeltaSpike DeltaSpike consists of a number of portable CDI extensions that provide useful features for Java application developers. We will also ensure true portability! We are testing DeltaSpike on different CDI implementations like Apache OpenWebBeans and JBoss Weld, and also on different Java EE servers like Apache Tomcat and TomEE, JBoss AS7, WildFly 8.x and 9.x, Oracle GlassFish 3.1+ and 4.x+, IBM WebSphere 8.x, Oracle WebLogic Server 12c, Jetty, and others. View details » Latest Award In 2014, DeltaSpike became a Duke’s Choice Award winner. The Duke's Choice Awards celebrate extreme innovation in the world of Java technology and are granted to the most innovative projects using the Java platform. News Apache DeltaSpike 1.7.0 is now out! View details » Modules CDI extensions created by the Apache DeltaSpike community are packaged as modules. They offer additional functionality not provided out of the box by the CDI spec (Security, JPA, ...) View details » Examples See the following examples which are part of the project to discover how to use DeltaSpike project. View details » Copyright © 2011-2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache and the Apache feather logo are trademarks of The Apache Software Foundation."	"null"	"null"	"CDI extension framework."	"true"
"Dependency Injection"	"Dagger2"	"http://google.github.io/dagger/"	"Compile-time injection framework without reflection."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Dagger ‡ A fast dependency injector for Android and Java. Project Pages Resources Dagger Dagger is a fully static, compile-time dependency injection framework for both Java and Android. It is an adaptation of an earlier version created by Square and now maintained by Google. Dagger aims to address many of the development and performance issues that have plagued reflection-based solutions. More details can be found in this talk(slides) by +Gregory Kick. Where are the docs? User documentation Dagger API @ HEAD Where is the code? https://github.com/google/dagger Have a question? Ask it on Stack Overflow with the dagger-2 tag Send an email to dagger-discuss@googlegroups.com"	"null"	"null"	"Compile-time injection framework without reflection."	"true"
"Dependency Injection"	"Guice"	"https://github.com/google/guice"	"Lightweight but powerful framework that completes Dagger."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3579"	"364"	"602"	"GitHub - google/guice: Guice (pronounced 'juice') is a lightweight dependency injection framework for Java 6 and above, brought to you by Google. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 364 Star 3,579 Fork 602 google/guice Code Issues 209 Pull requests 19 Wiki Pulse Graphs Guice (pronounced 'juice') is a lightweight dependency injection framework for Java 6 and above, brought to you by Google. https://github.com/google/guice 1,514 commits 3 branches 24 releases 28 contributors Java 99.8% Shell 0.2% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master travis Nothing to show snapshot20101120 snapshot20101031 snapshot20090706 snapshot20090512 snapshot20090205 snapshot20081123 snapshot20081016 snapshot20080818 snapshot20080713 snapshot20080611 snapshot20080429 before_injectorbuilder_on_commands 4.1 4.0 4.0-beta5 4.0-beta4 4.0-beta 3.0 3.0-rc3 3.0-rc2 3.0-rc1 2.0 1.0 1.0-maven Nothing to show New pull request Latest commit abf1214 Jun 17, 2016 sameb update versions. Permalink Failed to load latest commit information. bom update versions. Jun 17, 2016 core update versions. Jun 17, 2016 examples/src/example/xml Remove all .iml and .ipr IntelliJ project files and add IntelliJ proj… Oct 20, 2014 extensions update versions. Jun 17, 2016 jdk8-tests update versions. Jun 17, 2016 latest-api-diffs update versions. Jun 17, 2016 lib roll back to cglib 3.2.0. 3.2.1+ is too buggy right now. Jun 17, 2016 util Explicitly mark sh files as executable. Oct 20, 2014 .gitattributes Add a .gitattributes file to force consistent line endings in text fi… Oct 20, 2014 .gitignore ignore everything in extensions' build dir Jan 16, 2016 .travis.yml Quiesce the continuous integration builds a bit by running maven in b… Jan 12, 2016 CONTRIBUTING.md Create CONTRIBUTING.md, copied from Truth's. Jul 16, 2014 COPYING Initial checkin. Aug 25, 2006 README.md update versions. Jun 17, 2016 build.properties Create a dagger/guice interoperability library, which permits (with l… Feb 24, 2015 build.xml update versions. Jun 17, 2016 common.xml roll back to cglib 3.2.0. 3.2.1+ is too buggy right now. Jun 17, 2016 pom.xml update versions. Jun 17, 2016 README.md Guice Latest release: 4.1 Documentation: User Guide, 4.1 javadocs, Latest javadocs Continuous Integration: Mailing Lists: User Mailing List License: Apache 2.0 Put simply, Guice alleviates the need for factories and the use of new in your Java code. Think of Guice's @Inject as the new new. You will still need to write factories in some cases, but your code will not depend directly on them. Your code will be easier to change, unit test and reuse in other contexts. Guice embraces Java's type safe nature, especially when it comes to features introduced in Java 5 such as generics and annotations. You might think of Guice as filling in missing features for core Java. Ideally, the language itself would provide most of the same features, but until such a language comes along, we have Guice. Guice helps you design better APIs, and the Guice API itself sets a good example. Guice is not a kitchen sink. We justify each feature with at least three use cases. When in doubt, we leave it out. We build general functionality which enables you to extend Guice rather than adding every feature to the core framework. Guice aims to make development and debugging easier and faster, not harder and slower. In that vein, Guice steers clear of surprises and magic. You should be able to understand code with or without tools, though tools can make things even easier. When errors do occur, Guice goes the extra mile to generate helpful messages. For an introduction to Guice and a comparison to new and the factory pattern, see Bob Lee's video presentation. After that, check out our user's guide. We've been running Guice in mission critical applications since 2006, and now you can, too. We hope you enjoy it as much as we do. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/guice"	"Lightweight but powerful framework that completes Dagger."	"true"
"Dependency Injection"	"HK2"	"https://hk2.java.net"	"Light-weight and dynamic dependency injection framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"HK2 This page redirects to the latest version of HK2 website."	"null"	"null"	"Light-weight and dynamic dependency injection framework."	"true"
"Development"	"ADT4J"	"https://github.com/sviperll/adt4j"	"JSR-269 code generator for algebraic data types."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"74"	"9"	"2"	"GitHub - sviperll/adt4j: adt4j - Algebraic Data Types for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 74 Fork 2 sviperll/adt4j Code Issues 12 Pull requests 0 Wiki Pulse Graphs adt4j - Algebraic Data Types for Java 280 commits 5 branches 32 releases 4 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.1 codemodel-reimplementation feature-error-types gh-pages master Nothing to show adt4j-maven-parent-0.10 adt4j-3.2-beta1 adt4j-3.2-alpha1 adt4j-3.1 adt4j-3.1-beta1 adt4j-3.0.2 adt4j-3.0.1 adt4j-3.0 adt4j-3.0-rc2 adt4j-3.0-rc1 adt4j-2.0.2 adt4j-2.0.1 adt4j-2.0.1-rc7 adt4j-2.0.1-rc6 adt4j-2.0.1-rc5 adt4j-2.0.1-rc4 adt4j-2.0.1-rc3 adt4j-2.0.1-rc2 adt4j-2.0.1-rc1 adt4j-2.0 adt4j-1.3 adt4j-1.3-beta1 adt4j-1.2 adt4j-1.1 adt4j-1.0 adt4j-0.14 adt4j-0.13 adt4j-0.12 adt4j-0.11 adt4j-0.11b2 adt4j-0.11b1 adt4j-0.9 Nothing to show New pull request Latest commit 912f786 Jul 11, 2016 sviperll committed on GitHub Merge pull request #41 from ritschwumm/patch-1 … Update Getter.java Permalink Failed to load latest commit information. adt4j-examples [maven-release-plugin] prepare for next development iteration Apr 26, 2016 adt4j-shaded [maven-release-plugin] prepare for next development iteration Apr 26, 2016 adt4j Update Getter.java Jul 9, 2016 .gitignore Do not track dependency-reduced-pom.xml in version control Jul 15, 2015 LICENSE Add proper reference to applied license (BSD3) May 13, 2014 NEWS.md Update NEWS.md Jul 10, 2016 README.md [maven-release-plugin] update release version information Apr 26, 2016 README.md.mustache Rename @WrapsValueClass to @WrapsGeneratedValueClass, validate it. Jan 19, 2016 license-BSD3.txt Switch to maven as a build system Oct 8, 2014 nbactions.xml Simplify POM configuration Jul 15, 2015 pom.xml [maven-release-plugin] prepare for next development iteration Apr 26, 2016 project.properties [maven-release-plugin] update release version information Apr 26, 2016 README.md adt4j - Algebraic Data Types for Java This library implements Algebraic Data Types for Java. ADT4J provides annotation processor for @GenerateValueClassForVisitor annotation. ADT4J generates new class for each @GenerateValueClassForVisitor annotation. It allows you to easily define custom data types. Like this:     // Define Expression data type     @WrapsGeneratedValueClass(visitor = ExpressionVisitor.class)     // ExpressionBase class will be automatically generated by annotation processor     // You can use any other name instead of ExpressionBase, like VeryLongNameThatYouShouldNeverActuallyUse     class Expression extends ExpressionBase {         public static void main(String[] args) {             // Static constructor methods are automatically generated for Expression class             Expression e = mul(sum(lit(5), lit(1)), lit(2));              // Reasonable default toString implementation is provided:             System.out.println(e + "" = "" + e.eval());         }          // This is the required boilerplate for wrapper-class         Expression(ExpressionBase base) {             super(base);         }          // Example of ""pattern-matching""         int eval() {             return accept(new ExpressionVisitor<Integer>() {                 Integer lit(int i) {                     return i;                 }                 Integer sum(Expression e1, Expression e2) {                     return e1.eval() + e2.eval();                 }                 Integer mul(Expression e1, Expression e2) {                     return e1.eval() * e2.eval();                 }             });         }          // Actual data-type definition         // Data type is recursive. No special treatment of recursive definition is required.         @GenerateValueClassForVisitor(wrapperClass = Expression.class)         @Visitor(resultVariableName=""R"")         interface ExpressionVisitor<R> {             @GeneratePredicate(name = ""isLiteral"");             R lit(int i);              R sum(@Getter(name = ""leftOperand"") Expression e1, @Getter(name = ""rightOperand"") Expression e2);             R mul(@Getter(name = ""leftOperand"") Expression e1, @Getter(name = ""rightOperand"") Expression e2);         }      } Features Support recursive data types Generate hashCode, equals and toString implementations with value semantics Generate predicates, getters and ""updaters"" with additional annotations Fully customizable API: custom names and access levels for generated methods Optionally generate Comparable implementation with precise compile-time type-check if it is possible Optionally generate serializable classes with precise compile-time type-check if it is possible Sensible error messages Support generated class extention through standard Java's inheritance. Reasonably fast Known Issues maven-compiler-plugin version 3.2 and later doesn't work nicely with annotation processors, see MCOMPILER-235. Only clean builds work. Repeated compilation causes duplicate class errors. It is possible to support explicit recursive data-types definitions without selfReferenceVariableName hack, but javac bug prevents it from working. It works when no type-parameters are used, see (IntListVisitor.java example)[https://github.com/sviperll/adt4j/blob/master/adt4j-examples/src/main/java/com/github/sviperll/adt4j/examples/IntListVisitor.java]. License ADT4J is under BSD 3-clause license. Flattr Installation Use maven dependency to use ADT4J:     <dependency>         <groupId>com.github.sviperll</groupId>         <artifactId>adt4j</artifactId>         <version>3.1</version>     </dependency> Or use latest unstable version instead:     <dependency>         <groupId>com.github.sviperll</groupId>         <artifactId>adt4j</artifactId>         <version>3.2-beta1</version>     </dependency> You can use adt4j-shaded artifact to simplify deployment and to avoid dependencies' conflicts. adt4j-shaded has no dependencies and does not pollute classpath. All java-packages provided by adt4j-shaded are rooted at com.github.sviperll.adt4j package.     <dependency>         <groupId>com.github.sviperll</groupId>         <artifactId>adt4j-shaded</artifactId>         <version>3.1</version>     </dependency> Changelog See NEWS file. Usage See Tutorial Build $ git clone git@github.com:sviperll/adt4j.git $ cd adt4j $ mvn test  Check for errors and warnings. ADT4J is built to be compatible with Java 7. See universal-maven-parent project's documentation for instructions about building projects compatible with JDK7. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sviperll/adt4j"	"JSR-269 code generator for algebraic data types."	"true"
"Development"	"AspectJ"	"https://eclipse.org/aspectj/"	"Seamless aspect-oriented programming extension."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The AspectJ Project Skip to main content Create account Log in Donate Download Getting Started Members Projects Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM More Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM Toggle navigation Breadcrumbs Home Projects aspectj AspectJ     About This Project     Team     Plans Users     Downloads     Docs     Bugs     FAQ     Mailing lists Developers    Git Repo    Mailing list   a seamless aspect-oriented extension to the Javatm programming language Java platform compatible easy to learn and use   clean modularization of crosscutting concerns, such as error checking and handling, synchronization, context-sensitive behavior, performance optimizations, monitoring and logging, debugging support, and multi-object protocols Quick Links For Eclipse development: AJDT: The AspectJ Development Tools Blog: AspectJ Programming Blog Popular AspectJ downloads: Latest development build | Latest stable release | More downloads... Popular AspectJ docs: AspectJ 5 Developer's Notebook | Programming Guide | More docs... Eclipse AspectJ: the book, by some of the leading AspectJ committers News and Events AspectJ 1.8.9 is now available for download. See the readme for more information. posted 14-Mar-16 AspectJ 1.8.8 is now available for download. See the readme for more information. posted 7-Jan-16 AspectJ 1.8.7 is now available for download. See the readme for more information. posted 9-Sep-15 AspectJ 1.8.6 is now available for download. See the readme for more information. posted 8-Jun-15 AspectJ 1.8.5 is now available for download. See the readme for more information. posted 28-Jan-15 AspectJ 1.8.4 is now available for download. See the readme for more information. posted 6-Nov-14 AspectJ 1.8.3 is now available for download. See the readme for more information. posted 23-Oct-14 AspectJ 1.8.2 is now available for download. See the readme for more information. posted 14-Aug-14 AspectJ 1.8.1 is now available for download. See the readme for more information. posted 20-Jun-14 AspectJ 1.8.0 is now available for download. See the readme for more information. posted 17-Apr-14 AspectJ 1.7.4 is now available for download. See the readme for more information. posted 25-Oct-13 AspectJ 1.8.0.M1 is now available for download. See the readme for more information. posted 29-Jul-13 AspectJ 1.7.3 is now available for download. See the readme for more information. posted 13-Jun-13 AspectJ 1.7.2 is now available for download. See the readme for more information. posted 15-Feb-13 AspectJ 1.7.1 is now available for download. See the readme for more information. posted 10-Sep-12 AspectJ 1.7.0 is now available for download. See the readme for more information. This version of AspectJ is compatible with Java7 - enabling the usage of Java7 constructs in AspectJ source as well as the weaving of Java7 created bytecode. posted 2-Jul-12 AspectJ 1.7.0.RC1 is now available for download. See the readme for more information. The AspectJ weaver will now cope with bytecode containing invokedynamic. posted 25-May-12 AspectJ 1.7.0.M1 is now available for download. See the readme for more information. This is our first Java7 compiler based milestone. posted 16-Dec-11 AspectJ 1.6.12 is now available for download. See the readme for more information. posted 18-Oct-11 AspectJ 1.6.12.RC1 is now available for download. See the readme for more information. posted 3-Oct-11 AspectJ 1.6.12.M2 is now available for download. See the readme for more information. posted 18-Aug-11 AspectJ 1.6.12.M1 is now available for download. See the readme for more information. posted 7-Jun-11 AspectJ 1.6.11 is now available for download. See the readme for more information. posted 15-Mar-11 AspectJ 1.6.11 milestone 2 is now available for download. See the readme for more information. posted 22-Feb-11 AspectJ 1.6.11 milestone 1 is now available for download. See the readme for more information. posted 9-Dec-10 AspectJ 1.6.10 is now available for download. See the readme for more information. posted 25-Oct-10 AspectJ 1.6.10 release candidate 1 is now available for download. See the readme for more information. posted 8-Oct-10 AspectJ 1.6.9 is now available for download. See the readme for more information. posted 5-Jul-10 AspectJ 1.6.9 release candidate 3 is now available for download. Please try it out! See the readme for more information. This includes 1 bug fixes beyond RC2: 318397: caching in EclipseSourceType too aggressive posted 30-Jun-10 AspectJ 1.6.9 release candidate 2 is now available for download. Please try it out! See the readme for more information. This includes 3 bug fixes beyond RC1: 317743: improved type lookup and import handling for pointcut type references 318241: race condition when declare parents using annotation matching 317139: NPE hides a real problem with a non-abstract generic annotation style aspect posted 29-Jun-10 AspectJ 1.6.9 release candidate 1 is now available for download. Please try it out! See the readme for more information. posted 23-Jun-10 AspectJ 1.6.9 milestone 2 is now available for download. Please try it out! See the readme for more information. This release includes bug fixes, some 'overweaving' enhancements (see for more info), and load-time weaving aspect scoping. posted 13-May-10 Two new blogs are online for learning more about AJDT and tips and tricks with AspectJ. AspectJ Programming Contraptions for Programming posted 01-Mar-09 Ramnivas Laddad has updated ""AspectJ in Action""! ""AspectJ in Action, Second Edition is a revised and updated edition of the bestselling first edition. This book, now covering AspectJ 6 and Spring 2.5, will guide you through AOP and AspectJ using practical applications so you can create systems that are easier to understand, implement, and maintain."" AspectJ in Action, Second Edition March 2009 by Ramnivas Laddad posted 01-Mar-09 AspectJ 1.6.3 is now available for download. Please try it out! See the readme for more information. posted 23-Dec-08 AspectJ 1.6.2 is now available for download. Please try it out! See the readme for more information. For this release we are also making available the src jar from the download page. posted 03-10-08 AspectJ 1.6.1 is now available for download. Please try it out! See the readme for more information. This release contains over 60 bug fixes as well as a refactored weaver that weaves faster using less memory. posted 03-07-08 AspectJ 1.6.1rc1 is now available for download. posted 25-06-08 AspectJ 1.6.0 final is now available for download. See the readme for more information. This release supports parameter annotation matching and annotation value matching (see the readme for more information). posted 23-04-08 AspectJ 1.5.4 is now available for download. It includes numerous fixes that have been incorporated since the 1.5.3 release. posted 20-12-07 The AspeCt-oriented C (ACC) team have released version 0.7 of their compiler and toolset. The project can be found here. The highlights are described in the release notes. posted 25-09-07 AspectJ 1.5.3 is now available for download. It includes over 80 fixes and enhancements that have been incorporated since the 1.5.2 release. For a description of some of the notable changes in 1.5.3, see the 1.5.3 README. posted 22-11-06 AspectJ 1.5.2 is now available for download. It includes approximately 60 fixes and enhancements that have been incorporated since the 1.5.1a release. For full details see the 1.5.2 README. posted 30-06-06 AspectJ 1.5.1 is now available for download. This release contains a number of bug fixes and minor enhancements from 1.5.0, together with performance and memory usage improvements resulting in greatly reduced memory usage when building from within AJDT (and noticeable improvements outside of AJDT too). For full details see the 1.5.1 README. posted 04-04-06 Recent Books and Articles AspectJ in Action, Second Edition March 2009 by Ramnivas Laddad Making AspectJ development easier with AJDT by Matt Chapman RegDeveloper: Aspect oriented programming with Java by John Hunt Introducing AJDT: The AspectJ Development Tools by Matt Chapman ""AOP@Work: Component Design with Contract4J"" by Dean Wampler ""AOP@Work series on IBM developerWorks"" Series lead: Nicholas Lesiecki ""Introduction to AOP"" in ObjectiveView Issue 9 by Alex Ruiz ""AOP@Work: AOP myths and realities"" by Ramnivas Laddad ""AOP@Work: Check out library aspects with AspectJ 5"" by Wes Isberg ""AOP@Work: Dependency Injection with AspectJ and Spring"" by Adrian Colyer Back to the top Eclipse Foundation About us Contact Us Donate Governance Logo and Artwork Board of Directors Legal Privacy Policy Updated Terms of Use Updated Copyright Agent Eclipse Public License Legal Resources Useful Links Report a Bug Documentation How to Contribute Mailing Lists Forums Marketplace Other IDE and Tools Community of Projects Working Groups Copyright © 2016 The Eclipse Foundation. All Rights Reserved. Back to the top"	"null"	"null"	"Seamless aspect-oriented programming extension."	"true"
"Development"	"Auto"	"https://github.com/google/auto"	"Collection of source code generators."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3225"	"219"	"337"	"GitHub - google/auto: A collection of source code generators for Java. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 219 Star 3,225 Fork 337 google/auto Code Issues 68 Pull requests 20 Pulse Graphs A collection of source code generators for Java. 668 commits 6 branches 22 releases 30 contributors Java 99.8% Shell 0.2% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags eclipsehack_exceptions gh-pages master release_1_2_branch source_retention update_user_guide Nothing to show auto-value-1.3-rc2 auto-value-1.3-rc1 auto-value-1.2 auto-value-1.2-rc1 auto-value-1.1 auto-value-1.0 auto-value-1.0-rc4 auto-value-1.0-rc3 auto-value-1.0-rc2 auto-value-1.0-rc1 auto-service-1.0-rc2 auto-service-1.0-rc1 auto-parent-2 auto-parent-1.0-rc1 auto-factory-1.0-beta3 auto-factory-0.1-beta1 auto-common-0.6 auto-common-0.5 auto-common-0.4 auto-common-0.3 auto-common-0.2 auto-common-0.1 Nothing to show New pull request Latest commit 73452e4 Jun 15, 2016 eamonnmcmanus committed on GitHub Merge pull request #346 from eamonnmcmanus/update-2016-06-15 … Update 2016-06-15 Permalink Failed to load latest commit information. common Add text to the specification of MoreElements.getLocalAndInheritedMet… May 31, 2016 factory Add a note that states that you have to use @Qualifier instead of @Bi… May 31, 2016 service Update to Guava 19 May 10, 2016 util Move to a sonatype profile for release Apr 24, 2015 value When scanning a Builder for referenced types, don't include non-abstr… Jun 15, 2016 .gitignore Ignore dependency-reduced pom spam Dec 19, 2014 .travis.yml Support for TYPE_USE @Nullable. May 10, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Jan 17, 2014 LICENSE.txt An initial project and an initial continuous integration system confi… May 22, 2013 README.md Bump documentation to auto-value-1.2, add (tested) gradle instruction… Apr 5, 2016 build-pom.xml Add a local tmp-file based repository for distrpibution of the build-… Feb 24, 2015 checkstyle.xml Fix extraneous non-unix line endings (`^M`) in checkstyle and strip e… Feb 26, 2014 pom.xml Restore next snapshot development version. Apr 24, 2015 README.md Auto A collection of source code generators for Java. Auto‽ Java is full of code that is mechanical, repetitive, typically untested and sometimes the source of subtle bugs. Sounds like a job for robots! The Auto subprojects are a collection of code generators that automate those types of tasks. They create the code you would have written, but without the bugs. Save time. Save code. Save sanity. Subprojects AutoFactory - JSR-330-compatible factories Latest version: 0.1-beta3 AutoService - Provider-configuration files for ServiceLoader Latest version: 1.0-rc2 AutoValue - Immutable value-type code generation for Java 1.6+. Latest version: 1.2 Common - Helper utilities for writing annotation processors. Latest version: 0.6 License Copyright 2013 Google, Inc.  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at     http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/auto"	"Collection of source code generators."	"true"
"Development"	"DCEVM"	"http://dcevm.github.io/"	"Modification of the JVM that allows unlimited redefinition of loaded classes at runtime."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DCEVM by dcevm DCEVM Enhanced class redefinition for Java DCEVM This project is a fork of original DCEVM project. The purpose of the project is to maintain enhanced class redefinition functionality for OpenJDK HotSpot 7/8 and Oracle JVM. Binaries Light: Java 7 update 79, build 3 Java 8 update 92, build 1 Full: Java 7 update 79, build 8 Full version supports more features (for example, it supports removal of superclasses), but is harder to maintain. Thus, it is only supported for fewer versions of OpenJDK. Light version supports less features (still, it is pretty advanced compared to OpenJDK out-of-the box redefinition functionality), but is easier to keep up with the OpenJDK HotSpot. Sources Sources of the patches are available here. Usage Run java -jar installer.jar Follow the instructions to install DCEVM into existing JDK/JRE This page was generated by GitHub Pages using the Cayman theme by Jason Long."	"null"	"null"	"Modification of the JVM that allows unlimited redefinition of loaded classes at runtime."	"true"
"Development"	"HotswapAgent"	"https://github.com/HotswapProjects/HotswapAgent"	"Unlimited runtime class and resource redefinition."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"453"	"89"	"96"	"GitHub - HotswapProjects/HotswapAgent: Java unlimited redefinition of classes at runtime. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 89 Star 453 Fork 96 HotswapProjects/HotswapAgent Code Issues 39 Pull requests 3 Wiki Pulse Graphs Java unlimited redefinition of classes at runtime. 316 commits 2 branches 8 releases 15 contributors Java 99.7% Other 0.3% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags RELEASE-0.2 master Nothing to show v0.2 RELEASE-0.3 0.3.0-SNAPSHOT@2016/02/15 0.1-beta4 0.1-beta3 0.1-beta2 0.1-beta1 0.1-SNAPSHOT Nothing to show New pull request Latest commit 373dfb5 Jun 13, 2016 edudant committed on GitHub Merge pull request #133 from msalman86/spring4.2-support … fix #90 - added support for spring 4.2+ Permalink Failed to load latest commit information. hotswap-agent-core WeldPlugin - BeanArchive path is resolved primary from beans.xml (using Mar 30, 2016 hotswap-agent-parent Fix unit-tests Nov 26, 2015 hotswap-agent Initial implementation for Hibernate3. Apr 9, 2016 plugin fix #90 - added support for spring 4.2+ Jun 11, 2016 .gitignore Initial implementation for Hibernate3. Apr 8, 2016 .travis.yml Travis Apr 10, 2016 LICENSE Initial commit Nov 20, 2013 README.md Add travis-ci.org badge Jun 9, 2016 pom.xml Resteasy registry plugin Apr 9, 2016 run-tests.sh Resteasy registry plugin Apr 9, 2016 README.md Hotswap Agent Java unlimited runtime class and resource redefinition. The main purpose of this project is to avoid infamous change->restart + wait->check development lifecycle. Save&Reload during development should be standard and many other languages (including C#) contain this feature. This project is still in a beta version. Easy to start Download and install latest DCEVM Java patch + agent jar and launch your application server with options -XXaltjvm=dcevm -javaagent:hotswap-agent.jar to get basic setup. Optionally add hotswap-agent.properties to your application to configure plugins and agent behaviour. Plugins Each application framework (Spring, Hibernate, Logback, ...) needs special reloading mechanism to keep up-to-date after class redefinition (e.g. Hibernate configuration reload after new entity class is introduced). Hotswap agent works as a plugin system and ships preconfigured with all major framework plugins. It is easy to write your custom plugin even as part of your application. Contribute This project is very complex due to lot of supported frameworks and various versions. Community contribution is mandatory to keep it alive. You can start by creating a plugin inside your application or by writing an example/integration test. There is always need for documentation improvement :-). Thank you for any help! Quick start: Install download latest release of DCEVM Java patch and launch the installer (e.g. java -jar installer-light.jar). Currently you need to select correct installer for Java major version (7/8). select java installation directory on your disc and press ""Install DCEVM as altjvm"" button. Java 1.7+ versions are supported. download latest release of Hotswap agent jar, unpack hotswap-agent.jar and put it anywhere on your disc. For example: C:\java\hotswap-agent.jar Run your application add following command line java attributes: -XXaltjvm=dcevm -javaagent:PATH_TO_AGENT\hotswap-agent.jar (you need to replace PATH_TO_AGENT with an actual) directory. For example java -XXaltjvm=dcevm -javaagent:c:\java\hotswap-agent.jar YourApp. See IntelliJ IDEA and Netbeans forum threads for IDE specific setup guides. (optional) create a file named ""hotswap-agent.properties"" inside your resources directory, see available properties and default values: https://github.com/HotswapProjects/HotswapAgent/blob/master/hotswap-agent-core/src/main/resources/hotswap-agent.properties start the application in debug mode, check that the agent and plugins are initialized correctly: HOTSWAP AGENT: 9:49:29.548 INFO (org.hotswap.agent.HotswapAgent) - Loading Hotswap agent - unlimited runtime class redefinition. HOTSWAP AGENT: 9:49:29.725 INFO (org.hotswap.agent.config.PluginRegistry) - Discovered plugins: [org.hotswap.agent.plugin.hotswapper.HotswapperPlugin, org.hotswap.agent.plugin.jvm.AnonymousClassPatchPlugin, org.hotswap.agent.plugin.hibernate.HibernatePlugin, org.hotswap.agent.plugin.spring.SpringPlugin, org.hotswap.agent.plugin.jetty.JettyPlugin, org.hotswap.agent.plugin.tomcat.TomcatPlugin, org.hotswap.agent.plugin.zk.ZkPlugin, org.hotswap.agent.plugin.logback.LogbackPlugin] ... HOTSWAP AGENT: 9:49:38.700 INFO (org.hotswap.agent.plugin.spring.SpringPlugin) - Spring plugin initialized - Spring core version '3.2.3.RELEASE'  save a changed resource and/or use the HotSwap feature of your IDE to reload changes What is available? Enhanced Java Hotswap - change method body, add/rename a method, field, ... The only unsupported operation is hierarchy change (change the superclass or remove an interface). You can use standard Java Hotswap from IDE in debug mode to reload changed class or set autoHotswap property -XXaltjvm=dcevm -javaagent:PATH_TO_AGENT\hotswap-agent.jar=autoHotswap=true to reload changed classes after compilation. This setup allows even reload on production system without restart. Automatic configuration - all local classes and resources known to the running Java application are automatically discovered and watched for reload (all files on local filesystem, not inside JAR file). Extra classpath - Need change a runtime class inside dependent JAR? Use extraClasspath property to add any directory as a classpath to watch for class files. Reload resource after a change - resources from webapp directory are usually reloaded by application server. But what about other resources like src/main/resources? Use watchResources property to add any directory to watch for a resource change. Framework support - through plugin system, many frameworks are supported. New plugins can be easily added. Fast - until the plugin is initialized, it does not consume any resources or slow down the application (see Runtime overhead for more information) Should you have any problems or questions, ask at HotswapAgent forum. This project is similar to JRebel. Main differences are: HotswapAgent (DCEVM) supports Java8! HotswapAgent does not need any additional configuration for basic project setup. JRebel is currently more mature and contains more plugins. JRebel is neither open source nor free. JRebel modifies bytecode of all classes on reload. You need special IDE plugin to fix debugging. HotswapAgent extraClasspath is similar to JRebel configuration HotswapAgent adds watchResources configuration Examples See HotswapAgentExamples GitHub project. The purpose of an example application is: complex automate integration tests (check various configurations before a release, see run-tests.sh script) to check ""real world"" plugin usage during plugin development (i.e. inside container) to provide working solution for typical application setups sandbox to simulate issues for existing or new setups Feel free to fork/branch and create an application for your setup (functional, but as simple as possible). General setups will be merged into the master. IDE support None needed :) Really, all changes are transparent and all you need to do is to download patch+agent and setup your application / application server. Because we use standard java hotswap behaviour, your IDE will work as expected. However, we work on IDE plugins to help with download & configuration. Configuration The basic configuration set to reload classes and resources from classpath known to the running application (classloader). If you need a different configuration, add hotswap-agent.properties file to the classpath root (e.g. src/main/resources/hotswap-agent.properties). Detail documentation of available properties and default values can be found in the agent properties file Hotswap agent command line options Full syntax of command line options is: -javaagent:[yourpath/]hotswap-agent.jar=[option1]=[value1],[option2]=[value2]  Hotswap agent accepts following options: autoHotswap=true - watch all .class files for change and automatically Hotswap the class in the running application (instead of running Hotswap from your IDE debugging session) disablePlugin=[pluginName] - disable a plugin. Note that this will completely forbid the plugin to load (opposite to disablePlugin option in hotswap-agent.properties, which will only disable the plugin for a classloader. You can repeat this option for every plugin to disable. How does it work? DCEVM Hotswap agent does the work of reloading resources and framework configuration (Spring, Hibernate, ...), but it depends on standard Java hotswap mechanism to actually reload classes. Standard Java hotswap allows only method body change , which makes it practically unusable. DCEVM is a JRE patch witch allows almost any structural class change on hotswap (with an exception of a hierarchy change). Although hotswap agent works even with standard java, we recommend to use DCEVM (and all tutorials use DCEVM as target JVM). Hotswap agent Hotswap agent is a plugin container with plugin manager, plugin registry, and several agent services (e.g. to watch for class/resource change). It helps with common tasks and classloading issues. It scans classpath for class annotated with @Plugin annotation, injects agent services and registers reloading hooks. Runtime bytecode modification is provided by javaasist library. Plugins Plugins administered by Hotswap agent are usually targeted towards a specific framework. For example Spring plugin uses agent services to: Modify root Spring classes to get Spring contexts and registered scan path Watch for any resource change on a scan path Watch for a hotswap of a class file within a scan path package Reload bean definition after a change ... and many other Packaged plugins: Hibernate (4x) - Reload Hibernate configuration after entity create/change. Spring (3x) - Reload Spring configuration after class definition/change. Jetty - add extra classpath to the app classloader. All versions supporting WebAppContext.getExtraClasspath should be supported. ZK (5x-7x) - ZK Framework (http://www.zkoss.org/). Change library properties default values to disable caches, maintains Label cache and bean resolver cache. Logback - Logback configuration reload Hotswapper - Watch for any class file change and reload (hotswap) it on the fly via Java Platform Debugger Architecture (JPDA) AnonymousClassPatch - Swap anonymous inner class names to avoid not compatible changes. ELResolver 2.2 (JuelEL, Appache Commons EL, Oracle EL 3.0)- clear ELResolver cache on class change. Support hotswap for #{...} expressions. Seam (2.2, 2.3) - flush JBoss reference cache. Support for properties file change (messages[]) JBossModules - add extra class path to JBoss's module class loader. JSF (mojarra 2.1, 2.2) - support for application resource bundle files change (properties files). OsgiEquinox - Hotswap support for Eclipse plugin or Eclipse platform development. RESTEasy (2.x, 3.x) - reload @Path annotated classes on class create/change CDI/Weld - reload bean class definition after class create(managed beans)/change. Proxy bean redefinition after proxied class change. EAR support. WebObjects - Clear key value coding, component, action and validation caches after class change. Find a detail documentation of each plugin in the plugin project main README.md file. Runtime overhead It really depends on how many frameworks you use and which caches are disabled. Example measurements for a large, real world enterprise application based on Spring + Hibernate, run on Jetty. Setup Startup time Run (plain Java) 23s Debug (plain Java) 24s Debug (plain DCEVM) 28s Agent - disabled all plugins 31s Agent - all plugins 35s How to write a plugin You can write plugin directly as a part of your application. Set pluginPackages=your.plugin.package inside your hotswap-agent.properties configuration to discover @Plugin annotated classes. You will also need agent JAR dependency to compile, but be careful NOT to add the JAR to your application, it must be loaded only as a javaagent. Maven dependency:     <dependency>         <groupId>org.hotswap.agent</groupId>         <artifactId>HotswapAgent</artifactId>         <version>${project.version}</version>         <scope>provided</scope>     </dependency>  (Note that the JAR is not yet in central maven repository - you need to build it from source first). See ExamplePlugin (part of TestApplication) to go through a commented simple plugin. Read agent readme to understand agent concepts. Check existing plugins source code for more examples. Creating Release Launch run-tests.sh script in the main directory. Currently you have to setup JAVA_HOME location directory manually. At least Java 7 and Java 8 with DCEVM should be checked before a release. All automatic tests are set to fail the whole script in case of any single test failure. Go to directory representing repository root. In case DCEVM is named dcevm mvn release:prepare mvn release:perform  In case your DCEVM is named differently i.e. server mvn release:prepare -Darguments=""-Ddcevm=server"" mvn release:perform -Darguments=""-Ddcevm=server""  Plugin specific settings OsgiEquinox / Eclipse RCP OsgiEquinox / Eclipse plugin provides hotswap support for Eclipse plugin or Eclipse platform development (Do not confuse it with common development in Eclipse!). Following options should be setup in eclipse.ini for debugee Eclipse instance:  # use application classloader for the framework -Dosgi.frameworkParentClassloader=app  # development classpath that is added to each plugin classpath -Dosgi.dev=[extra_classpath]  # use dcevm as JVM -XXaltjvm=dcevm  # enable hotswapagent -javaagent:PATH_TO_AGENT/hotswap-agent.jar  # enable remote debugging on port 8000 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000  extra_classpath points to directory with compiled classes. When a new class is compiled it is sent by remote debugger to HotswapAgent. HotswapAgent stores this file into extra_classpath directory. It is also necessary to setup following hotswap-agent.properties: extraClasspath=[extra_classpath] osgiEquinox.debugMode=true  then connect the IDE debugger (eclipse, netbeans or idea) to port 8000 and happy hotswapping! Credits Hotswap agent: Jiri Bubnik - project coordinator, initial implementation Erki Ehtla - Spring plugin, Proxy plugin Vladimir Dvorak - Seam, ELResolver, JSF, OsgiEquinox, Weld plugins implementation Sergey Lysenko - Weld plugin Samuel Pelletier - WebObjects plugin Jan Tecl - web design DCEVM: Ivan Dubrov - current project coordinator, update to Java7+Java8, patches, build system (Gradle) Thomas Würthinger - initial implementation. Kerstin Breitender – contributor. Christoph Wimberger – contributor. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/HotswapProjects/HotswapAgent"	"Unlimited runtime class and resource redefinition."	"true"
"Development"	"Immutables"	"http://immutables.github.io/"	"Scala-like case classes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1033"	"50"	"64"	"GitHub - immutables/immutables: Annotation processor to create immutable objects and builders. Feels like Guava's immutable collections but for regular value objects. JSON, Jackson, Gson, JAX-RS integrations included Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 1,033 Fork 64 immutables/immutables Code Issues 57 Pull requests 0 Pulse Graphs Annotation processor to create immutable objects and builders. Feels like Guava's immutable collections but for regular value objects. JSON, Jackson, Gson, JAX-RS integrations included http://immutables.org 1,086 commits 2 branches 77 releases 19 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.1.X master Nothing to show root-0.18 root-0.17 root-0.16 root-0.14 root-0.13 root-0.12 root-0.11 immutables-2.2.10 immutables-2.2.9 immutables-2.2.8 immutables-2.2.7 immutables-2.2.6 immutables-2.2.5 immutables-2.2.4 immutables-2.2.3 immutables-2.2.2 immutables-2.2.1 immutables-2.2 immutables-2.2-beta immutables-2.2-beta-5 immutables-2.2-beta-4 immutables-2.2-beta-3 immutables-2.2-beta-2 immutables-2.1.19 immutables-2.1.18 immutables-2.1.17 immutables-2.1.16 immutables-2.1.15 immutables-2.1.14 immutables-2.1.13 immutables-2.1.12 immutables-2.1.11 immutables-2.1.10 immutables-2.1.9 immutables-2.1.8 immutables-2.1.7 immutables-2.1.6 immutables-2.1.5 immutables-2.1.4 immutables-2.1.3 immutables-2.1.2 immutables-2.1.1 immutables-2.1.0 immutables-2.1.0.alpha immutables-2.0.21 immutables-2.0.20 immutables-2.0.19 immutables-2.0.17 immutables-2.0.16 immutables-2.0.15 immutables-2.0.14 immutables-2.0.13 immutables-2.0.12 immutables-2.0.11 immutables-2.0.10 immutables-2.0.9 immutables-2.0.8 immutables-2.0.7 immutables-2.0.6 immutables-2.0.5 immutables-2.0.4 immutables-2.0.3 immutables-2.0.2 immutables-2.0.1 immutables-2.0 immutables-2.0-rc immutables-1.1.3 immutables-1.1.0-rc1 immutables-1.1 immutables-1.0.1 immutables-1.0 immutables-0.99 2.0.18 2.0.17 2.0.7 1.1.2 1.1.1 Nothing to show New pull request Latest commit 63ba27c Jul 14, 2016 elucash committed on GitHub Merge pull request #398 from zsolt-donca/CR396 … Added a new case to the 'annotation passing to constructor' test... Permalink Failed to load latest commit information. android-stub [maven-release-plugin] prepare for next development iteration Jul 3, 2016 builder [maven-release-plugin] prepare for next development iteration Jul 3, 2016 cases [maven-release-plugin] prepare for next development iteration Jul 3, 2016 encode created sketch of type handling Jul 7, 2016 func [maven-release-plugin] prepare for next development iteration Jul 3, 2016 generator-fixture [maven-release-plugin] prepare for next development iteration Jul 3, 2016 generator-processor updated retro version dependency for self bootstrapping. Jul 6, 2016 generator encodings: a solution for #363 #383 #194 #201 and alike. 3/5 completed Jul 12, 2016 gson [maven-release-plugin] prepare for next development iteration Jul 3, 2016 metainf updated retro version dependency for self bootstrapping. Jul 7, 2016 mirror [maven-release-plugin] prepare for next development iteration Jul 3, 2016 mongo [maven-release-plugin] prepare for next development iteration Jul 3, 2016 ordinal [maven-release-plugin] prepare for next development iteration Jul 3, 2016 serial [maven-release-plugin] prepare for next development iteration Jul 3, 2016 testing [maven-release-plugin] prepare for next development iteration Jul 3, 2016 utility [maven-release-plugin] prepare for next development iteration Jul 3, 2016 value-fixture Added a new case to the 'annotation passing to constructor' test with… Jul 14, 2016 value-processor #396 Fixing the generation of constructor annotations by using the el… Jul 13, 2016 value [maven-release-plugin] prepare for next development iteration Jul 3, 2016 .gitattributes Fix build on windows Dec 30, 2014 .gitignore restructuring and fixing, getting ready for something to release Oct 23, 2014 .travis.yml #251 changes for javadoc linting Feb 2, 2016 LICENSE placed auxiliary asf2 license copy Dec 21, 2014 README.md 2.2.10 changelog Jul 3, 2016 pom.xml updated retro version dependency for self bootstrapping. Jul 7, 2016 settings.xml Deploy snapshots from master travis build Nov 25, 2014 README.md // Define abstract value type using interface, abstract class or annotation @Value.Immutable public interface ValueObject extend WithValueObject {   // extend not-yet-generated WithValueObject to inherit `with*` method signatures   String getName();   List<Integer> getCounts();   Optional<String> getDescription();    class Builder extends ImmutableValueObject.Builder {}   // ImmutableValueObject.Builder will be generated and   // our builder will inherit and reexport methods as it's own }  // Use generated immutable implementation and builder ValueObject v =     new ValueObject.Builder()         .name(""Nameless"")         .description(""present"")         .addCounts(1)         .addCounts(2)         .build();  v = v.withName(""Doe""); Read full documentation at http://immutables.org License    Copyright 2013-2016 Immutables Authors and Contributors     Licensed under the Apache License, Version 2.0 (the ""License"");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at         http://www.apache.org/licenses/LICENSE-2.0     Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an ""AS IS"" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.  Changelog 2.2.10 (2016-07-03) Hotfix release. Thanks to issue reporters! Issues 2.2.9 (2016-07-01) Thanks to issue reporters and contributors! Issues 2.2.7 (2016-06-19) Thanks to issue reporters! Issues 2.2.7 (2016-06-19) Thanks to issue reporters! Issues 2.2.5 (2016-06-09) Thanks to contributors and issue reporters! Bugfix and minor enhancement release Numerous fixes for generics and interactions with other features SkipNulls and Nullable elements in maps and collections if you really need them (#349) With* interface generation to finely hide implementation classes while still having with* methods in API Straw man support for custom collections (see /META-INF/extensions/org.immutables.collect) Issues 2.2.2 (2016-06-03) Thanks to contributors and issue reporters! Bugfix release Running in Eclipse Neon RC due to APT classloading changes Issues 2.2.1 (2016-05-27) Thanks to contributors and issue reporters! Bugfixes and functionality refinements Can disable generation of META-INF/services for Gson adapters Gson.TypeAdapters.metainfServices = false Gson Adapters may be configured to skip nulls in favor of default values. Gson.TypeAdapters.nullAsDefault = true Numerous bug fixes Issues 2.2 (2016-05-16) Thanks to contributors and issue reporters! Improvements Generic parameters support for Immutable objects! Modifiables are supported (likely). Jackson/Gson Adapters support for generics Collections now can be nullable and/or also @Value.Default. Default attributes can be nullable, yet allowing arbitrary default values. Depluralization dictionaries can be specified on multiple levels (type, package, meta-annotation). All applicable dictionary entries will be merged. Backward compatibility should be preserved. Issues 2.1.19 (2016-05-04) Minor Hotfix, Thank you! Issues 2.1.18 (2016-04-26) Minor Bugfixes, Thank you! Issues 2.1.16 (2016-04-14) Thanks to contributors and issue reporters, important bugfixes were made! Issues Minor enhancements Javaslang Option support More compact toString, omitting non-present Optionals and nulls Cancel-out individual parameters when allParameters = true 2.1.14 (2016-03-12) Bugfix and minor improvement release. Output package pattern can be configured using style Ad-Hoc normalization using Value.Check Style(deepImmutablesDetection = true) behavior refined Refined JsonSerialize enclosing top-level type annotation handling Thanks to contributors and issue reporters! Issues 2.1.12 (2016-02-29) Bugfix and minor changes release. Findbugs' SuppressFBWarnings placed on immutable implementation if found in the classpath Primitive wrapper types and strings have an equals comparison now in with* methods in short-circuiting check to return this. Fixed some Eclipse specific compilation bugs. Thanks to contributors and issue reporters! Issues 2.1.11 (2016-02-18) Bugfix and Minor improvement release: Depluralization for add* and put* methods enabled with Style(depluralize, depluralizeDictionary) Fixed regression while using java.util.Optional* with Builder.Factory caused by auto-unboxing to nullable fields in 2.1.9 Improved handling for some internal problems in the processor Thanks to contributors and issue reporters! Issues 2.1.10 (2016-02-02) Bugfix release: License headers, added missing, plus some cleanup Fixed override of final method in some cases Javadoc linting to fix javadocs in generated code Thanks to contributors and issue reporters! Issues 2.1.9 (2016-01-26) Bugfix and Minor improvement release: Automatic unboxing and boxing of java.util.Optional to nullable A fields Thanks to contributors and issue reporters! Issues 2.1.8 (2016-01-15) Bugfix and Minor improvement release: New 'func' module: Functions and predicate generator (for Guava, pre java 8) @Builder.Parameter and @Builder.Switch are working on value attributes now New 'android-stub' module, may be useful to compile android libraries using Immutables for API level < 19 Thanks to contributors and issue reporters! Issues 2.1.5 (2016-01-02) Bugfix and Minor improvement release. Thanks to contributors and issue reporters! Issues Public constructors style 2.1.4 (2015-12-10) Bugfix and Minor improvement release. Thanks to contributors and issue reporters! Issues Gson 2.5 support for SerializedName annotation including alternate names 2.1.1 (2015-12-03) Bugfix and Minor improvement release. Many thanks to all user and contributors for issue reports, PRs and suggestions! Notable JSON fixes. Courtesy of @ldriscoll Generated Javadocs corrections and proofreading. Courtesy of @io7m and @trask Atlassian Fugue 2.x and 3.x Option support. Courtesy of @mzeijen Issues 2.1.0 (2015-10-23) Added Value.Modifiable annotation to create modifiable companion classes, which may serve as uber-builder or instead of buildPartial in other builder toolkits. Added number of minor styles and feature flags and refinements of existing functionality Numerous bugfixes Issues 2.0.18 (2015-08-13) Bugfix and minor enhancement release Issues 2.0.17 (2015-08-06) Bugfix and minor enhancement release Issues 2.0.16 (2015-07-09) Bugfix release Issues 2.0.15 (2015-07-02) Bugfixes and minor improvements Issues 2.0.14 (2015-06-18) Bugfixes and minor improvements Issues 2.0.13 (2015-06-14) Added new experimental serialization module with advanced structural binary serialization, which is based on the standard java binary serialization that allows for object evolution to some degree. Bugfixes along with minor refinements of annotation handling. Issues 2.0.10 (2015-04-28) Bugfix release along with other 2.0.X. Issues 2.0 (2015-03-24) Many thanks to all contributors who helped to make it happen. Thanks to the community for making feature requests, bug reports, questions and suggestions. Note versions 1.1.x are still supported, there's no rush to switch to 2.0 if you are not ready. Thanks to @augustotravillio for implementing JDK-only code generation. Useful on Android or when Guava is not available. Thanks to @ivysharev for a lot more precise imports post-processor. Features Support for java 8, including new Optional* classes, default methods. But type annotation support is rudimentary (works only in some cases). Java 7 is still required for compilation Multiset, Multimap, SetMultimap, ListMultimap are now supported. Full-featured Gson support with generated TypeAdapters which use no reflection during serialization/deserialization. Builder now can be generated as ""strict"" (Style#strictBuilder). Strict builders prevents initialization errors: addition only collection initializer and regular initializers could be called only once. Now, there's no required dependencies, plain JDK will suffice. Guava still has first class support. Processor now enjoy improved repackaging (using forked and patched maven-shade-plugin) Added @Builder.Switch annotation Numerous API and behavior refinements, resulting in lot less WTF. Changes Main annotation and processor artifact changed to be org.immutables:value. There's no confusing value-standalone or whatsoever. common artifact was removed, all compile and runtime dependencies have been modularized. While annotation processor itself is pretty monolithic, now compile and optional runtime dependencies are externalized to dedicated artifacts. Some notable modules: gson Gson support module mongo MongoDB support module builder Module with annotations for generating builder from static factory methods ordinal Module to generate more exotic enum-like values and efficiently handle them, etc JSON infrastructure underwent overhaul. See guide at http://immutables.org/json.html JAX-RS support switched to Gson, for Jackson integration there's no need to integrate anything, its own provider will fully work. MongoDB repository generation was refined and adjusted following JSON changes. See guide at http://immutables.org/mongo.html Temporarily removed JDBI integration. It may be resurrected later. Direct inheritance of @Value.Immutable from another @Value.Immutable is discouraged. Limited (and constrained to same level) inheritance of @Value.Parameter attributes. Builder now has method to set/reset collection content (in non-strict mode) Package style now also applies to all classes in sub-packages unless overridden Constructor parameters for collections now accept more liberal input. List<T> parameter accepts Iterable<? extends T> etc. Removed sample style annotation like @BeanStyle.Accessors in favor of documentation and samples @Value.Nested was renamed to @Value.Enclosing @Value.Immutable#visibility was moved to style @Value.Style#visibility @Value.Immutable.Include was moved to @Value.Include Moved @Value.Builder to builder module where it is called @Builder.Factory. Added @Builder.Parameter and @Builder.Switch to fine-tune generation of builders for factory methods. 1.1 (2014-12-27) Features #53 Implemented SortedSet/NavigableSet/SortedMap/NavigableMap attributes specifying @Value.NaturalOrder or @Value.ReverseOrder annotation. Idea contributed by Facebook Buck team. Thanks! #63 @Value.Builder: implemented standalone builder generations for static factory methods. This makes it possible to create builders for arbitrary factory methods, including google/AutoValue create methods! #38 @Value.Immutable.Include: Ability to include other classes even from different packages and libraries as abstract value types. Think of generating immutable implementation of annotations from different library! #33 @Value.Style: insanely flexible style customization infrastructure now allows to tailor generated immutable types and builders to wide range of style and preferences! @BeanStyle.Accessors is example of style annotations - allows accessors to be detected from with 'get' and 'is' prefixes, so prefix will be stripped on builder and in toString. #35 @Nullable attributes. Support any annotation named Nullable. Thanks to John Wood for this and other valuable feature and bug reports! #44 Ability to run generated classes on JDK6 (including runtime support library common). JDK7 is still required to run annotation processor. Credits to Trask Stalnaker for the contribution! Improved code generation: more clean code, more useful javadocs, dozens of fixes to edge cases, more correctness for customized value types. #64 org.immutables.json-runtime minimal JSON runtime jar, extracted from common with only necessary transitive Jackson dependencies. #54 Support for including Jackson marshaled POJOs as attributes of @Json.Marshaled immutable objects. Together with @Jackson.Mapped this provides round-tripping from Immutables' marshalers to Jackson and back. Changes Dozens of fixes, including #61 Partially fixed @Value.Default methods on Java 8 implemented with interface default methods. Known issue is with more complex interface inheritance #67 #48 JDBI marshaling fixes #50 Support for older versions of Guava, which did not have MoreObjects for example, detected from classpath. Checked with Guava v12, v16 Fixed resolution of accesors inherited from couple of interfaces. (Still do not take into account most specific covariant override) Deprecations Deprecated @Value.Immutable(nonpublic) in favor of @Value.Immutable(visibility), nonpublic not working now, but it should not break Deprecated @Value.Immutable(withers) in favor of @Value.Immutable(copy) Deprecated @Value.Getters in favor of using @Value.Style. May be undeprecated if found really useful Removed underdeveloped annotations and processors to be reintroduced later (Transformer, Visitor, Parboiled) Incompatibilites Upgrade to Jackson 2.4.4 for Jackson ObjectMapper cross-marshaling to work Possible incompatibity: @Json.Marshaled now is required on each nested @Value.Immutable, marshaled annotation on @Value.Nested will not have effect #59 @Value.Default on collection attributes now issues warning, that makes collection attribute generated as plain regular attributes without any special collection support in builder 1.0.1 Fixes Improper unchecked suppressions in generated files #36 fixed/refined underwriting of methods: hashCode, equals, toString #37 Fixed duplication of instanceof checks in Transfromers Fixed implementation of nDeprecationsonpublic=true (package private) immutable classes Changes Internal: using released 1.0 ‘value-standalone’ for self-compiling, rather than 'retrovalue' system/jar Internal: made marshaling binding problems IOException instead of runtime 1.0 Release with all of what was developed, including reengineering of template engine, project/module restructuring and annotation API changes Changes Immutable generation annotation now nested below umbrella annotation @org.immutables.value.Value which provided grouping and namespacing for the nested annotations. @GenerateImmutable is now @Value.Immutable @GenerateConstructorParameter is now @Value.Parameter ... and so on, see website and API documentation for the details See other umbrella annotations in org.immutables.value.* package: @Json, @Mongo, @Jackson Main standalone artifact for the annotation processor is now org.immutables:value-standalone:1.0. There's is quick start module with transitive dependencies for integrations — to not pick dependencies one by one — org.immutables:quickstart:1.0 Most notable generated API changes Added ImmutableValue.copyOf methods Added array attributes Added Builder.addAttribute(T...) overload for collection attributes Removed ImmutableValue.Builder.copy methods Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/immutables/immutables"	"Scala-like case classes."	"true"
"Development"	"JHipster"	"https://github.com/jhipster/generator-jhipster"	"Yeoman source code generator to create applications based on Spring Boot and AngularJS."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4497"	"393"	"988"	"GitHub - jhipster/generator-jhipster: Open Source application generator for creating Spring Boot + AngularJS projects in seconds! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 393 Star 4,497 Fork 988 jhipster/generator-jhipster Code Issues 30 Pull requests 11 Pulse Graphs Open Source application generator for creating Spring Boot + AngularJS projects in seconds! http://jhipster.github.io 6,418 commits 4 branches 104 releases 237 contributors JavaScript 48.0% Java 36.7% HTML 11.7% Shell 1.5% CSS 1.4% Scala 0.4% Other 0.3% JavaScript Java HTML Shell CSS Scala Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags angular-2 master v1.x_maintenance v2.x_maintenance Nothing to show v3.4.2 v3.4.1 v3.4.0 v3.3.0 v3.2.1 v3.2.0 v3.1.0 v3.0.0 v2.27.2 v2.27.1 v2.27.0 v2.26.2 v2.26.1 v2.26.0 v2.25.0 v2.24.0 v2.23.1 v2.23.0 v2.22.0 v2.21.1 v2.21.0 v2.20.0 v2.19.0 v2.18.0 v2.17.0 v2.16.1 v2.16.0 v2.15.2 v2.15.1 v2.15.0 v2.14.2 v2.14.1 v2.13.1 v2.13.0 v2.12.0 v2.11.1 v2.11.0 v2.10.1 v2.10.0 v2.9.2 v2.9.1 v2.9.0 v2.8.0 v2.7.0 v2.6.0 v2.5.2 v2.5.1 v2.5.0 v2.4.0 v2.3.0 v2.2.0 v2.1.1 v2.1.0 v2.0.0 v1.10.2 v1.10.1 v1.10.0 v1.9.0 v1.8.1 v1.8.0 v1.7.1 v1.7.0 v1.6.0 v1.5.0 v1.4.0 v1.3.0 v1.2.2 v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.0 v0.18.1 v0.18.0 v0.17.2 v0.17.1 v0.17.0 v0.16.0 v0.15.0 v0.14.0 v0.13.0 v0.12.0 v0.11.0 v0.10.1 v0.10.0 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.2 Nothing to show New pull request Latest commit c6d43ad Jul 15, 2016 deepu105 committed on GitHub Merge pull request #3824 from ruddell/remove-undefined-token-check … remove undefined token checks Permalink Failed to load latest commit information. .github correct typo errors Jul 9, 2016 generators Merge pull request #3824 from ruddell/remove-undefined-token-check Jul 15, 2016 test add test for multiple jdl Jul 13, 2016 travis stop the entity generator when error occurs instead of continuing to … Jun 21, 2016 .editorconfig Change bower.json and package.json to 2 spaces Oct 3, 2014 .eslintignore polish aws sub generator Apr 13, 2016 .eslintrc.json fix merge conflict Apr 1, 2016 .gitattributes Added more binary formats to .gitattributes May 12, 2015 .gitignore Add more IntelliJ files to .gitignore Feb 17, 2016 .travis.yml Upgrade gulp-angular-templatecache to fix package in prod profile (#3741 Jun 19, 2016 CONTRIBUTING.md polish docker-compose generator May 5, 2016 Dockerfile fix Dockerfile to properly clean apt repository (#3709) Jun 14, 2016 LICENSE Apache license, version 2.0 Feb 6, 2014 README.md Typo fix Apr 25, 2016 package.json update core to 1.1.1 Jul 13, 2016 README.md Greetings, Java Hipster! Full documentation and information is available on our website at http://jhipster.github.io/ Please read our guidelines before submitting an issue. If your issue is a bug, please use the bug template pre populated here. For feature requests and queries you can use this template. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jhipster/generator-jhipster"	"Yeoman source code generator to create applications based on Spring Boot and AngularJS."	"true"
"Development"	"JRebel"	"http://zeroturnaround.com/software/jrebel/"	"Commercial software that instantly reloads code and configuration changes without redeploys."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JRebel Java Plugin: Eclipse, IntelliJ, NetBeans | zeroturnaround.com Search the site Find it! JRebel XRebel RebelLabs Blog Forum Company Why JRebel Features Pricing Documentation Download Try JRebel for Free Reload code changes instantly Skip the build and redeploy process. JRebel reloads changes to Java classes, resources, and over 90 frameworks. Try JRebel now Watch it in action Looking for JRebel for Android? Stop wasting time Stop waiting for build and deploy to make code changes. Write code and refresh your browser, done. Works with all Java applications. Desktop, Web, Services, and Enterprise. Reload changes on local servers, remote servers and in the cloud. How much time will I save? My redeploys take minutes And I restart my app / hour JRebel saves me 62 minutes per day Remote and virtual server support With JRebel you can develop on virtual machines, remote servers and cloud environments as fast and easily as you do locally. Find out more about JRebel support for remote servers Environments Application Servers Tomcat, JBoss EAP/Wildfly, Jetty, WebLogic, WebSphere, GlassFish, and OSGi Frameworks Spring, Java EE, Hibernate, Guice, Struts, Wicket, GWT, Grails, LifeRay, Hybris, and 100+ more IDEs Eclipse, IntelliJ, NetBeans, STS, RAD, and MyEclipse JVM Languages Java, Scala, Groovy, JRuby, and Clojure How does it work? JRebel is a JVM Java Agent that integrates with application servers, making classes reloadable with existing class loaders. Only changed classes are recompiled and instantly reloaded in the running application. JRebel plugs into IDEs and build systems. Classes and static resources are loaded straight from the workspace. JRebel integrates with over 100 frameworks. Dedicated JRebel plugins will rebuild caches, rewire components and apply configuration to the runtime as necessary. 65,000 happy users Are you still redeploying? Try JRebel Company Careers Contact Us Our story Resources JRebel White Paper (PDF) Devs Productivity Report IT Ops & DevOps Productivity Report Rocket powered Java development XRebel ROI White Paper All rights reserved. Copyright © 2007-2015 ZeroTurnaround. Website Terms & Conditions / Trademarks Twitter Facebook LinkedIn RSS By using our site you understand and agree that zeroturnaround.com website uses various cookies. More info available in website terms and conditions. OK close Questions? Feedback? powered by Olark live chat software"	"null"	"null"	"Commercial software that instantly reloads code and configuration changes without redeploys."	"true"
"Development"	"Lombok"	"https://projectlombok.org/"	"Code-generator which aims to reduce the verbosity."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2811"	"200"	"640"	"GitHub - rzwitserloot/lombok: Very spicy additions to the Java programming language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 200 Star 2,811 Fork 640 rzwitserloot/lombok Code Issues 366 Pull requests 18 Pulse Graphs Very spicy additions to the Java programming language. http://projectlombok.org/ 1,870 commits 4 branches 45 releases 31 contributors Java 91.8% HTML 7.8% Other 0.4% Java HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master sclExpansionUpdate summertest updatesite Nothing to show v1.16.10 v1.16.8 v1.16.6 v1.16.4 v1.16.2 v1.16.0 v1.14.8 v1.14.6 v1.14.4 v1.14.2 v1.14.0 v1.12.6 v1.12.4 v1.12.2 v0.12.0 v0.11.8 v0.11.6 v0.11.4 v0.11.2 v0.11.0 v0.10.8 v0.10.6 v0.10.4 v0.10.2 v0.10.1 v0.10.0 v0.10.0-RC3 v0.10.0-RC2 v0.10.0-RC1 v0.10.0-BETA2 v0.10.0-BETA1 v0.9.3 v0.9.2 v0.9.2-BETA3 v0.9.2-BETA2 v0.9.2-BETA1 v0.9.1 v0.9.0 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.1 onX-removal edge Nothing to show New pull request Latest commit c0d563d Jul 15, 2016 rzwitserloot post-release version bump Permalink Failed to load latest commit information. buildScripts Added support for JBoss Logging v3.3.0-Final via @JBossLog [Issue #1103] May 6, 2016 doc post-release version bump Jul 15, 2016 experimental yet another patcher-sourced fix, heh. Version-a-day! Mar 1, 2014 src post-release version bump Jul 15, 2016 test fix broken test for configuration that contained the wrong line numbers Jun 29, 2016 usage_examples [builder] Added clearX() functionality for `@Singular` annotations fo… Nov 16, 2015 website Fixed the HTML title tags of the experimental pages; they were incons… Jun 2, 2016 winsrc Changed copyright notices Nov 7, 2011 .gitignore Adds the IntelliJ IDEA output directory `/out` to .gitignore Oct 2, 2015 AUTHORS always return ShadowClassLoader. Jun 27, 2016 LICENSE pre-release version bump Apr 14, 2015 README Remove twitter handle May 24, 2016 build.xml #1117: add claiming annotation processor Jun 9, 2016 README Project Lombok makes java a spicier language by adding 'handlers' that know how to build and compile simple, boilerplate-free, not-quite-java code. See LICENSE for the Project Lombok license.   To start, run:  ant -projecthelp  HINT: If you'd like to develop lombok in eclipse, run 'ant eclipse' first. It creates the necessary project infrastructure and downloads dependencies. Note that, in order to run ""LombokizedEclipse.launch"", you need to have ""Eclipse SDK"" installed.  For a list of all authors, see the AUTHORS file.   Project Lombok was started by:   Reinier Zwitserloot twitter: @surial home: http://zwitserloot.com/  Roel Spilker  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rzwitserloot/lombok"	"Code-generator which aims to reduce the verbosity."	"true"
"Development"	"Spring Loaded"	"https://github.com/spring-projects/spring-loaded"	"Class reloading agent."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1236"	"151"	"245"	"GitHub - spring-projects/spring-loaded: Java agent that enables class reloading in a running JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 151 Star 1,236 Fork 245 spring-projects/spring-loaded Code Issues 97 Pull requests 9 Wiki Pulse Graphs Java agent that enables class reloading in a running JVM 221 commits 9 branches 14 releases 12 contributors Java 98.9% Groovy 1.1% Java Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1.5.RC1 1.1.5.RELEASE 1.2.0.M1 1.2.0 1.2.1.RELEASE 1.2.1 fix-version j8 master Nothing to show v1.1.5.RELEASE v1.1.5.RC1 V1_1_5 V1_1_3 V1_1_2 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.1.RELEASE 1.2.0 1.2.0.M1 Nothing to show New pull request Latest commit 658a867 Jun 24, 2016 Andy Clement Fix #155: adjust to new proxy generator method Permalink Failed to load latest commit information. .settings/gradle gradle build Sep 5, 2013 gradle sorting out pom dependencies Apr 24, 2014 springloaded Fix #155: adjust to new proxy generator method Jun 24, 2016 testdata-aspectj Working Java8 build! Feb 20, 2014 testdata-groovy Serialization handling - see github issue #24 Mar 11, 2014 testdata-java8 WIP: default method reloading Jan 18, 2016 testdata-plugin Valid .project/.classpaths for eclipse import Jan 22, 2014 testdata-subloader Performance work May 20, 2014 testdata-superloader Performance work May 20, 2014 testdata Reworking split package related changes. Jul 20, 2015 .gitattributes suggestion for windows Mar 15, 2015 .gitignore Build a separate -agent jar which contains the embedded asm dependency Feb 20, 2013 LICENSE copy of license at project root Dec 7, 2012 README.md Change path to 1.2.6 snapshots Dec 3, 2015 build.gradle resolving merge conflicts with j8 branch Feb 24, 2014 gradle.properties [artifactory-release] Next development version Apr 11, 2016 gradlew add executable bit to gradlew script Sep 8, 2013 gradlew.bat update gradle build Sep 3, 2013 settings.gradle Working Java8 build! Feb 20, 2014 README.md Welcome to Spring-Loaded What is Spring Loaded? Spring Loaded is a JVM agent for reloading class file changes whilst a JVM is running. It transforms classes at loadtime to make them amenable to later reloading. Unlike 'hot code replace' which only allows simple changes once a JVM is running (e.g. changes to method bodies), Spring Loaded allows you to add/modify/delete methods/fields/constructors. The annotations on types/methods/fields/constructors can also be modified and it is possible to add/remove/change values in enum types. Spring Loaded is usable on any bytecode that may run on a JVM, and is actually the reloading system used in Grails 2. Installation 1.2.5 has now been released: springloaded-1.2.5.RELEASE.jar 1.2.6 snapshots are in this repo area (grab the most recently built .jar): repo.spring.io The download is the agent jar and needs no further unpacking before use. Running with reloading java -javaagent:<pathTo>/springloaded-{VERSION}.jar -noverify SomeJavaClass  The verifier is being turned off because some of the bytecode rewriting stretches the meaning of some of the bytecodes - in ways the JVM doesn't mind but the verifier doesn't like. Once up and running what effectively happens is that any classes loaded from jar files (dependencies) are not treated as reloadable, whilst anything loaded from .class files on disk is made reloadable. Once loaded the .class file will be watched (once a second) and should a new version appear SpringLoaded will pick it up. Any live instances of that class will immediately see the new form of the object, the instances do not need to be discarded and recreated. No doubt that raises a lot of questions and hopefully a proper FAQ will appear here shortly! But in the meantime, here are some basic Qs and As: Q. Does it reload anything that might change in a class file? A. No, you can't change the hierarchy of a type. Also there are certain constructor patterns of usage it can't actually handle right now. Q. With objects changing shape, what happens with respect to reflection? A. Reflection results change over time as the objects are reloaded. For example, modifying a class with a new method and calling getDeclaredMethods() after reloading has occurred will mean you see the new method in the results. But this does mean if you have existing caches in your system that stash reflective information assuming it never changes, those will need to be cleared after a reload. Q. How do I know when a reload has occurred so I can clear my state? A. You can write a plugin that is called when reloads occur and you can then take the appropriate action. Create an implementation of ReloadEventProcessorPlugin and then register it via SpringLoadedPreProcessor.registerGlobalPlugin(plugin). (There are other ways to register plugins, which will hopefully get some documentation!) Q. What's the state of the codebase? A. The technology is successfully being used by Grails for reloading. It does need some performance work and a few smacks with a refactoring hammer. It needs upgrading here and there to tolerate the invokedynamic instruction and associated new constant pool entries that arrived in Java 7. Working with the code git clone https://github.com/spring-projects/spring-loaded  Once cloned there will be some projects suitable for import into eclipse. The main project and some test projects. One of the test projects is an AspectJ project (containing both Java and AspectJ code), and one is a Groovy project. To compile these test projects in Eclipse you will need the relevant eclipse plugins: AJDT: update site: http://download.eclipse.org/tools/ajdt/42/dev/update Groovy-Eclipse: update site: http://dist.springsource.org/snapshot/GRECLIPSE/e4.2/ After importing them you can run the tests. There are two kinds of tests, hand crafted and generated. Running all the tests including the generated ones can take a while. To run just the hand crafted ones supply this to the JVM when launching the tests: -Dspringloaded.tests.generatedTests=false  NOTE: When running the tests you need to pass -noverify to the JVM also. Two launch configurations are already included if you are importing these projects into eclipse, which run with or without the generated tests. A gradle build script is included, run './gradlew build' to rebuild the agent - it will be created as something like: springloaded/build/libs/springloaded-1.1.5.BUILD-SNAPSHOT.jar Can I contribute? Sure! Just press Fork at the top of this github page and get coding. Before we accept pull requests we just need you to sign a simple contributor's agreement - which you can find here. Signing the contributor's agreement does not grant anyone commit rights to the main repository, but it does mean that we can accept your contributions, and you will get an author credit if we do. Active contributors might be asked to join the core team, and given the ability to merge pull requests. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spring-projects/spring-loaded"	"Class reloading agent."	"true"
"Distributed Applications"	"Akka"	"http://akka.io"	"Toolkit and runtime for building concurrent, distributed, and fault tolerant event-driven applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5762"	"535"	"1817"	"GitHub - akka/akka: Akka Project Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 535 Star 5,762 Fork 1,817 akka/akka Code Issues 647 Pull requests 24 Pulse Graphs Akka Project http://akka.io 19,359 commits 69 branches 195 releases 341 contributors Scala 80.2% Java 17.7% HTML 1.0% CSS 0.4% Shell 0.3% JavaScript 0.2% Other 0.2% Scala Java HTML CSS Shell JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags artery-dev doc-remove-tracking-2 doc-remove-tracking ktoso-patch-2 master release-1.1.3 release-1.1.4 release-1.2 release-1.3 release-1.3.1 release-2.0 release-2.1 release-2.2 release-2.3 release-2.4 stream-http-2.0 streams-on-their-way-to-master trace-spi wip-2996-make-things-compile-and-test-on-ppc-j9-ban wip-3751-send-serialized-instance-√ wip-15086-lazy-actor-materialization-ban wip-15086-lazy-actor-materialization-patriknw wip-15716-http-new-dsl-internally-ban wip-15762-patriknw wip-15802-ticksource-workaround-patriknw wip-16051-allow-balance-to-wait-for-all-downstreams-ban wip-16224-RestartNode2Spec-patriknw wip-16262-mark-as-pending-johanandren wip-16346-QuarantineLeakSpec-patriknw wip-16911-repeat-tests-patriknw wip-17239-japi-function-master-patriknw wip-17380-java8-debug-patriknw wip-18989-make-akka-with-docker-googlable-johanandren wip-19315-document-websocket-client-johanandren wip-19469-better-stream-error-logging-johanandren wip-19530-FlowConcatSpec-RK wip-19547-make-stages-overview-complete-johanandren wip-19616-remove-unused-udp-setting-johanandren wip-19623-early-response-errors-johanandren wip-19623-subsource-cannot-push-twice-johanandren wip-19664-incorrect-framing-docs-johanandren wip-19873-MetricsBasedResizerSpec-RK wip-19964-broken-link-WebSocket-example-RK wip-20591-scalariform-patriknw wip-20639-restarting-node-patriknw wip-20831-migration-guide-patriknw wip-20856-netty-3.10.6-patriknw wip-artery-bench-patriknw wip-artery-perf-patriknw wip-changes-for-java6-generics-errors-on-mac-ban wip-cover-java-http-interface-with-tests-johanandren wip-debug-15439-patriknw wip-harden-ClusterShardingSpec-debug-patriknw wip-junit-patriknw wip-managed-blocking-for-tpe-√ wip-merge-hookup-patriknw wip-minor-framing-touchups-√ wip-minor-touchups-3000-√ wip-misc-doc-fixes-RK wip-new-Typed-Impl-RK wip-nicer-JournalSpec-RK wip-optimize-fusing-RK wip-release-2.11-patriknw wip-remove-jdk7-class-ref wip-rp-docs wip-streams-improvements-√ wip-typed-Java8-∂π wip-unbreak-master-√ wip-zip-dsl-patriknw Nothing to show v2.4.8 v2.4.7 v2.4.6_2.12-M4 v2.4.6 v2.4.5_2.12-M4 v2.4.5 v2.4.4 v2.4.3 v2.4.2 v2.4.2_with_search v2.4.2-RC3 v2.4.2-RC2 v2.4.2-RC1 v2.4.1 v2.4.1_with_search v2.4.0 v2.4.0_with_search v2.4.0-rp16i01p01 v2.4.0-RC3 v2.4.0-RC2 v2.4.0-RC1 v2.4-M3 v2.4-M2 v2.4-M1_2.12.0-M1 v2.4-M1 v2.4-ARTERY-M3 v2.4-ARTERY-M2 v2.4-ARTERY-M1 v2.3.15 v2.3.14 v2.3.13 v2.3.12 v2.3.11 v2.3.11-rp15v01p05 v2.3.11-rp15v01p04 v2.3.10 v2.3.9 v2.3.8 v2.3.7 v2.3.6_2.11.2 v2.3.6 v2.3.5_2.11.2 v2.3.5 v2.3.4_2.11.1 v2.3.4 v2.3.3_2.11.1 v2.3.3 v2.3.2_2.11.0 v2.3.2_2.11.0_b v2.3.2 v2.3.2_issue_tracking v2.3.1 v2.3.0_2.11.0-RC4 v2.3.0_2.11.0-RC3 v2.3.0 v2.3.0-RC4_2.11.0-RC1 v2.3.0-RC4 v2.3.0-RC3 v2.3.0-RC2 v2.3.0-RC1 v2.3-M2 v2.3-M1 v2.2.5 v2.2.4 v2.2.4_sbt-0.13 v2.2.3_2.11.0-M8 v2.2.3_2.11.0-M7 v2.2.3 v2.2.3_sbt-0.13 v2.2.2 v2.2.1_2.11.0-M5 v2.2.1 v2.2.1_sbt-0.13 v2.2.0_2.11.0-M3 v2.2.0 v2.2.0-RC2_2.11.0-M3 v2.2.0-RC2 v2.2.0-RC1_2.11.0-M3 v2.2.0-RC1 v2.2-M5 v2.2-M4 v2.2-M3 v2.2-M2 v2.2-M1 v2.1.4 v2.1.4-scala2.11 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.1.0-RC6 v2.1.0-RC5 v2.1.0-RC4 v2.1.0-RC3 v2.1.0-RC2 v2.1.0-RC1 v2.1-M2 v2.1-M1 v2.0.5 v2.0.4 Nothing to show New pull request Latest commit e986989 Jul 15, 2016 ktoso committed on GitHub =htp fix typo in latency spec using AB (#20965) Permalink Failed to load latest commit information. akka-actor-tests +act #20936 add CompletionStage API to CircuitBreaker (#20937) Jul 14, 2016 akka-actor additional debug logging for fsm #20952 Jul 15, 2016 akka-agent #18765 Update to latest MiMa which is now an AutoPlugin. Mar 10, 2016 akka-bench-jmh =act #20910 optimize ByteString#copyToBuffer (#20911) Jul 11, 2016 akka-camel Update to a working version of Scalariform Jun 2, 2016 akka-cluster-metrics Update to a working version of Scalariform Jun 2, 2016 akka-cluster-sharding Update to a working version of Scalariform Jun 2, 2016 akka-cluster-tools Merge pull request #20828 from choffmeister/choffmeister-20826-unregi… Jul 5, 2016 akka-cluster recovery timeout for persistent actors #20698 Jun 3, 2016 akka-contrib Update to a working version of Scalariform Jun 2, 2016 akka-distributed-data =htc, doc replace usages of deprecated methods of FileIO (#20928) Jul 10, 2016 akka-docs Nikdon 20535 check same origin (#20962) Jul 15, 2016 akka-http-core Nikdon 20535 check same origin (#20962) Jul 15, 2016 akka-http-marshallers-java/akka-http-jackson !htp #18919 #19519 New JavaDSL for Akka HTTP (#20518) May 16, 2016 akka-http-marshallers-scala !htp #18919 #19519 New JavaDSL for Akka HTTP (#20518) May 16, 2016 akka-http-testkit =htp #20915 fix too small timing issue in DirectivesSpec (#20916) Jul 8, 2016 akka-http-tests =htp fix typo in latency spec using AB (#20965) Jul 15, 2016 akka-http Nikdon 20535 check same origin (#20962) Jul 15, 2016 akka-kernel Improve error when Cluster MBean is gone #2033 Mar 22, 2016 akka-multi-node-testkit Update to a working version of Scalariform Jun 2, 2016 akka-osgi Publish akka-osgi but do not include it in dist #20548 (#20549) May 19, 2016 akka-parsing Update to a working version of Scalariform Jun 2, 2016 akka-persistence-query Update to a working version of Scalariform Jun 2, 2016 akka-persistence-shared #18765 Update to latest MiMa which is now an AutoPlugin. Mar 10, 2016 akka-persistence-tck remove JUnitRunner annotation, #16112 Apr 5, 2016 akka-persistence additional debug logging for fsm #20952 Jul 15, 2016 akka-protobuf Remove 'the' duplicates Mar 31, 2016 akka-remote-tests =htp multinode latency spec for HTTP (#20964) Jul 15, 2016 akka-remote +rem Support serialization of scala Some and None (#20801) Jun 19, 2016 akka-samples Update to a working version of Scalariform Jun 2, 2016 akka-slf4j Update to a working version of Scalariform Jun 2, 2016 akka-stream-testkit =str switch to java std lib ThreadLocalRandom. (#20877) Jul 5, 2016 akka-stream-tests-tck Add basic support for Java 7 NIO file systems (#20293) Apr 25, 2016 akka-stream-tests migrate Fold, Sliding, Grouped to GraphStage (#20914) Jul 8, 2016 akka-stream =htc, doc replace usages of deprecated methods of FileIO (#20928) Jul 10, 2016 akka-testkit Update to a working version of Scalariform Jun 2, 2016 akka-typed Update to a working version of Scalariform Jun 2, 2016 project =htp multinode latency spec for HTTP (#20964) Jul 15, 2016 scripts included script for finding fixed tickets #20475 May 10, 2016 src/main/ls Update ls.implicit.ly sbt settings Mar 10, 2012 .gitignore splitting up TLS APIs Feb 16, 2016 .java-version +act #19085 adds Java API ByteString#createBuilder Dec 4, 2015 CONTRIBUTING.md Improved CONTRIBUTING.md (#20895) Jul 6, 2016 COPYING.protobuf =all #13783 replace protobuf dependency by embedded version Sep 4, 2015 LICENSE Update copyrights and links to the new company name #19851 Feb 23, 2016 README.md Add news link Jul 11, 2016 build.sbt #18765 Update to latest MiMa which is now an AutoPlugin. Mar 10, 2016 README.md Akka We believe that writing correct concurrent & distributed, resilient and elastic applications is too hard. Most of the time it's because we are using the wrong tools and the wrong level of abstraction. Akka is here to change that. Using the Actor Model we raise the abstraction level and provide a better platform to build correct concurrent and scalable applications. This model is a perfect match for the principles laid out in the Reactive Manifesto. For resilience we adopt the ""Let it crash"" model which the telecom industry has used with great success to build applications that self-heal and systems that never stop. Actors also provide the abstraction for transparent distribution and the basis for truly scalable and fault-tolerant applications. Learn more at akka.io. Reference Documentation The reference documentation is available at doc.akka.io, for Scala and Java. Community You can join these groups and chats to discuss and ask Akka related questions: Mailing list: Chat room about using Akka: Issue tracker: In addition to that, you may enjoy following: The news section of the page, which is updated whenever a new version is released The Akka Team Blog @akkateam on Twitter Questions tagged #akka on StackOverflow Contributing Contributions are very welcome! If you see an issue that you'd like to see fixed, the best way to make it happen is to help out by submitting a PullRequest implementing it. Refer to the CONTRIBUTING.md file for more details about the workflow, and general hints how to prepare your pull request. You can also chat ask for clarifications or guidance in github issues directly, or in the akka/dev chat if a more real time communication would be of benefit. A chat room is available for all questions related to developing and contributing to Akka: License Akka is Open Source and available under the Apache 2 License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/akka/akka"	"Toolkit and runtime for building concurrent, distributed, and fault tolerant event-driven applications."	"true"
"Distributed Applications"	"Apache Storm"	"http://storm.apache.org/"	"Realtime computation system."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Storm Download Home Getting Help Project Information Documentation 2.0.0-SNAPSHOT 1.0.1 1.0.0 0.10.1 0.10.0 0.9.6 Talks and Slideshows Community Contributing People ByLaws News Apache Storm Latest News Storm 1.0.1 Released (06 May 2016) Storm 0.10.1 Released (05 May 2016) Storm 1.0.0 released (12 Apr 2016) Storm 0.9.6 released (05 Nov 2015) Storm 0.10.0 released (05 Nov 2015) Storm 0.10.0 Beta Released (15 Jun 2015) Storm 0.9.5 released (04 Jun 2015) More News Why use Storm? Apache Storm is a free and open source distributed realtime computation system. Storm makes it easy to reliably process unbounded streams of data, doing for realtime processing what Hadoop did for batch processing. Storm is simple, can be used with any programming language, and is a lot of fun to use! Storm has many use cases: realtime analytics, online machine learning, continuous computation, distributed RPC, ETL, and more. Storm is fast: a benchmark clocked it at over a million tuples processed per second per node. It is scalable, fault-tolerant, guarantees your data will be processed, and is easy to set up and operate. Storm integrates with the queueing and database technologies you already use. A Storm topology consumes streams of data and processes those streams in arbitrarily complex ways, repartitioning the streams between each stage of the computation however needed. Read more in the tutorial. Tweets and many others Meetups Apache Storm & Apache Kafka (Sunnyvale, CA) Apache Storm & Kafka Users (Seattle, WA) NYC Storm User Group (New York, NY) Bay Area Stream Processing (Emeryville, CA) Boston Realtime Data (Boston, MA) London Storm User Group (London, UK) About Storm Storm integrates with any queueing system and any database system. Storm's spout abstraction makes it easy to integrate a new queuing system. Likewise, integrating Storm with database systems is easy. First Look Rationale Tutorial Setting up development environment Creating a new Storm project Documentation Index Javadoc FAQ Copyright © 2015 Apache Software Foundation. All Rights Reserved. Apache Storm, Apache, the Apache feather logo, and the Apache Storm project logos are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners."	"null"	"null"	"Realtime computation system."	"true"
"Distributed Applications"	"Apache ZooKeeper"	"http://zookeeper.apache.org/"	"Coordination service with distributed configuration, synchronization, and naming registry for large distributed systems."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache ZooKeeper - Home Apache ZooKeeper™ Welcome to Apache ZooKeeper™ Apache ZooKeeper is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination. What is ZooKeeper? ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. All of these kinds of services are used in some form or another by distributed applications. Each time they are implemented there is a lot of work that goes into fixing the bugs and race conditions that are inevitable. Because of the difficulty of implementing these kinds of services, applications initially usually skimp on them ,which make them brittle in the presence of change and difficult to manage. Even when done correctly, different implementations of these services lead to management complexity when the applications are deployed. Learn more about ZooKeeper on the ZooKeeper Wiki. Getting Started Start by installing ZooKeeper on a single machine or a very small cluster. Learn about ZooKeeper by reading the documentation. Download ZooKeeper from the release page. Getting Involved Apache ZooKeeper is an open source volunteer project under the Apache Software Foundation. We encourage you to learn about the project and contribute your expertise. Here are some starter links: See our How to Contribute to ZooKeeper page. Give us feedback: What can we do better? Join the mailing list: Meet the community.   Project News Releases Wiki Credits Bylaws License Privacy Policy Sponsorship Security Thanks Subprojects BookKeeper (with Hedwig) Documentation Release 3.5.1-alpha Release 3.5.0-alpha Release 3.4.8(stable) Release 3.4.8(current) Release 3.4.6 Release 3.4.5 Release 3.4.3 Release 3.4.2 Release 3.4.1 Release 3.3.6(stable) Release 3.3.5 Release 3.3.4 Release 3.3.3 Release 3.3.2 Release 3.2.2 Release 3.1.2 Trunk Developers Mailing Lists IRC Channel Version Control Issue Tracker Copyright © 2010-2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache ZooKeeper, ZooKeeper, Apache, the Apache feather logo, and the Apache ZooKeeper project logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Coordination service with distributed configuration, synchronization, and naming registry for large distributed systems."	"true"
"Distributed Applications"	"Atomix"	"http://atomix.io/atomix/"	"Fault-tolerant distributed coordination framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Atomix - Fault-tolerant distributed coordination framework for Java 8 Atomix Projects Atomix Copycat Catalyst Documentation Community Atomix Fault-tolerant distributed coordination framework for Java 8 Get Started Atomix is an event-driven framework for coordinating fault-tolerant distributed systems built on the Raft consensus algorithm. It provides the building blocks that solve many common distributed systems problems including group membership, leader election, distributed concurrency control, partitioning, and replication. Value Long Map MultiMap Set Queue Lock Group Membership Direct Messaging Publish-Subscribe Request-Reply Leader Election // Get or create a DistributedValue and block until the resource is created DistributedValue<String> value = atomix.getValue(""value"").join();  // Set the value and wait for completion of the operation value.set(""Hello world!"").join();  // Read the value and call the provided callback on response value.get().thenAccept(result -> {   System.out.println(""The value is "" + result); });  // Get or create a DistributedLong and block until the resource is created DistributedLong value = atomix.getLong(""long"").join();  // Increment the value and call the provided callback on response value.incrementAndGet().thenAccept(result -> {   assert result == 1; });  // Get or create a DistributedMap and block until the resource is created DistributedMap<String, String> map = atomix.getMap(""map"").join();  // Put a value in the map and call the completion callback on response map.put(""bar"", ""Hello world!"").thenRun(() -> {   // Get the value of the map and block until it's received   String value = map.get(""bar"").join(); });  // Get or create a DistributedMultiMap and block until the resource is created DistributedMultiMap<String, String> multimap = atomix.getMultiMap(""multimap"").join();  // Put a value in the map and call the completion callback on response multimap.put(""bar"", ""Hello world!"").thenRun(() -> {   // Put another value in the map and call the completion callback on response   multimap.put(""bar"", ""Hello world again!"").thenRun(() -> {     // Get the values for the ""bar"" key and block until received     Collection<String> values = multimap.get(""bar"").join();   }); });  // Get or create a DistributedSet and block until the resource is created DistributedSet<String> set = atomix.getSet(""set"").join();  // Add a value to the set and call the completion callback on response set.add(""foo"").thenRun(() -> {   // Check whether the set contains the added value and block until the response is received   if (set.contains(""foo"").join()) {     // The set contains ""foo""   } });  // Get or create a DistributedQueue and block until the resource is created DistributedQueue<Integer> queue = atomix.getQueue(""queue"").join();  // Add two values to the queue and block until both are added CompletableFuture.allOf(queue.offer(1), queue.offer(2)).join();  // Pull the first item off the queue and call the completion callback once it's received queue.poll().thenAccept(value -> {   System.out.println(""retrieved "" + value); });  // Get or create a DistributedLock and block until the resource is created DistributedLock lock = atomix.getLock(""foo"").join();  // Acquire the lock and call the completion callback once the lock is acquired lock.lock().thenRun(() -> {   System.out.println(""Acquired a lock!"");    // Release the lock and block until complete   lock.unlock().join(); });  // Get or create a DistributedGroup and block until the resource is created DistributedGroup group = atomix.getGroup(""group"").join();  // Join the group and block until the join is complete LocalMember member = group.join().join();  // When a member joins the group, print a message group.onJoin(member -> {   System.out.println(member + "" joined the group""); });  // Iterate over the set of members in the group group.members().forEach(member -> {   // ... });  // Get or create a DistributedGroup and block until the resource is created DistributedGroup group = atomix.getGroup(""group"").join();  // Register an election listener group.election().onElection(term -> {   System.out.println(term.leader() + "" elected leader for term "" + term.term()); });  // Join the group to get elected leader LocalMember member = group.join().join();  // Get or create a DistributedGroup and block until the resource is created DistributedGroup group = atomix.getGroup(""group"").join();  // Get a member of the group by name Member member = group.member(""foo"");  // Create a direct synchronous message producer MessageProducer.Options options = new MessageProducer.Options()   .withExecution(Execution.SYNC)   .withDelivery(Delivery.DIRECT); MessageProducer<String> producer = member.messaging().producer(""hello"");  // Send a direct message to the member and await acknowledgement producer.send(""Hello world!"").thenAccept(reply -> {   System.out.println(reply); });  // Join the group and block until the join is complete LocalMember localMember = group.join().join();  // Create a message consumer and ack messages when received for this member MessageConsumer<String> consumer = localMember.messaging().consumer(""hello""); consumer.onMessage(message -> {   // ...   message.ack(); });  // Get or create a DistributedGroup and block until the resource is created DistributedGroup group = atomix.getGroup(""group"").join();  // Create an asynchroous broadcast message producer MessageProducer.Options options = new MessageProducer.Options()   .withExecution(Execution.ASYNC)   .withDelivery(Delivery.BROADCAST); MessageProducer<String> producer = group.messaging().producer(""events"", options);  // Publish a message to all members of the group producer.send(""change"").thenRun(() -> {   // Change event has been published });  // Join the group and block until the join is complete LocalMember localMember = group.join().join();  // Create a message consumer and ack messages when received for this member MessageConsumer<String> consumer = localMember.messaging().consumer(""events""); consumer.onMessage(message -> {   if (message.body().equals(""change"")) {     message.ack();   } });  // Get or create a DistributedGroup and block until the resource is created DistributedGroup group = atomix.getGroup(""group"").join();  // Get a member of the group by name Member member = group.member(""foo"");  // Create a direct request-reply message producer MessageProducer.Options options = new MessageProducer.Options()   .withExecution(Execution.REQUEST_REPLY); MessageProducer<String> producer = member.messaging().producer(""hello"");  // Send a message to the member and await a reply producer.send(""Hello world!"").thenAccept(reply -> {   System.out.println(reply); });  // Join the group and block until the join is complete LocalMember localMember = group.join().join();  // Create a message consumer for messages sent to this member MessageConsumer<String> consumer = localMember.messaging().consumer(""hello""); consumer.onMessage(message -> {   if (message.body().equals(""Hello world!"")) {     messages.reply(""Hello world back!"");   } });  Simple Atomix provides a collection of dead simple, asynchronous APIs for sharing mission critical state and solving a variety of common distributed systems problems. Reliable Atomix features reliable data consistency guarantees that are maintained even when machine or network failures occur. Resilient Atomix clusters are resilient to failure, automatically replacing failed replicas as needed without any data loss. Scalable Copycat scales along with the rest of your system, providing high read throughput while maintaining strong write consistency. Ready to learn more? Explore the Docs Projects Atomix Copycat Catalyst Documentation Core Stack Integrations Language Bindings Community Support Contributing People The Atomix stack is brought to you by the Atomix crew along with our excellent contributors. The Atomix stack is open source and is licensed under the Apache 2.0 License."	"null"	"null"	"Fault-tolerant distributed coordination framework."	"true"
"Distributed Applications"	"Axon Framework"	"http://www.axonframework.org/"	"Framework for creating CQRS applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"AxonFramework Home About Downloads & Docs Frequently asked Issues Contact Axon Framework Java Framework for scalable and high-performance applications. Go fast, faster Increase speed of your application by spending CPU resources on what’s needed most. Build highly scalable applications Scale up -and down- dynamically at runtime according to the load on your systems. Keep it safe Don’t stop at authentication and authorization. Keep track of everything your users do. Grow large, but stay agile Don’t allow increasing size and complexity of your application to slow you down. You’re never on your own Integrate with third parties without any impact on your application’s core. Framework for scalable, high performance applications The axon framework is focussed on making life easier for developers that want to create a java application based on the CQRS principles. The framework is used in a lot of environments …. Download the latest Axon version from our download page, and get started…. To the Quick Start Guide → Announcing Axon 3 release planning Work has started on the next major release of Axon Framework: 3.0! We are currently targeting a release date in Q1 of 2016. In the coming weeks, we will start providing more details about the contents of this release. Stay tuned…. Documentation Read about commands, events, event sourcing and sagas here.  Source code Axon Framework is open source and is hosted at Github. Training & Support Check the support page for more information about Trifork’s training and support services. Samples There is a number of sample applications if you need some inspiration. Upcoming Events We have planned numerous events throughout the year. Quickstart guide Ready to get started? Check out our quick start guide. Interview InfoQ interviews Allard Buijze on CQRS and Axon Framework Special thanks to… For providing free licenses to YouTrack.   Latest news Axon 2.4.3 Released Axon 2.4.3 has been released. It contains fixes for a few issues found in 2.4.2. Under certain circumstances, it was… Axon 2.4.2 Released Axon 2.4.2 has been released. It contains fixes for a few issues found in 2.4.1, as well as a usability improvement…. What others have said about Axon I am currently with a team working on an online casino platform launching our brand Casumo this summer. The domain and platform is built using Axon Framework and so far it has served us solidly. S. Ganslandt, Casumo Thank you also for developing Axon. It is a fantastic framework and has vastly improved our development time and teaching application concepts to junior developers. S. Venasse Being able to build a new reporting component one year after the project is launched and instantly get reports on data from the time of the project launch and onwards is awesome! P. Wiklander Download Axon Framework Get started by downloading the Full Package Download Recent Tweets @Marleine_ apparently, our budget was limited. But nonetheless... 22 hours RT @Marleine_: Subtle sponsoring at #Euro2016Final #porfra by @axonframework? https://t.co/7DHfi7o1AK 22 hours Follow @axonframework Recent news Axon 2.4.3 Released Axon 2.4.2 Released Upcoming events No events to show Copyright © 2012-2013 Axon Framework. All rights reserved. Scroll to Top"	"null"	"null"	"Framework for creating CQRS applications."	"true"
"Distributed Applications"	"Copycat"	"http://atomix.io/copycat/"	"Fault-tolerant state machine replication framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Copycat - Novel implementation of the Raft consensus algorithm for Java 8 Copycat Projects Atomix Copycat Catalyst Documentation Community Copycat Novel implementation of the Raft consensus algorithm for Java 8 Get Started Copycat is a fault-tolerant state machine replication framework. Built on the Raft consensus algorithm, it handles replication and persistence and enforces strict ordering of inputs and outputs, allowing developers to focus on single-threaded application logic. Its event-driven model allows for efficient client communication with replicated state machines, from simple key-value stores to wait-free locks and leader elections. You supply the state machine and Copycat takes care of the rest, making it easy to build robust, safe distributed systems. Simple Copycat's simple but powerful programming model allows single-threaded state machines to be transparently scaled across a cluster. Sophisticated Copycat is built on one of the most advanced implementations of the Raft consensus algorithm, supporting membership changes, incremental compaction, snapshots, session-based client communication, state machine events, and more. Scalable Copycat clusters are resilient to failure and can be scaled to virtually any size, and read capacity can be scaled independently of write capacity. Reactive Copycat's event framework allows for efficient, wait-free interaction with replicated state machines while maintaining the same fault-tolerance and consistency guarantees. Ready to learn more? Explore the Docs Projects Atomix Copycat Catalyst Documentation Core Stack Integrations Language Bindings Community Support Contributing People The Atomix stack is brought to you by the Atomix crew along with our excellent contributors. The Atomix stack is open source and is licensed under the Apache 2.0 License."	"null"	"null"	"Fault-tolerant state machine replication framework."	"true"
"Distributed Applications"	"Ehcache"	"http://www.ehcache.org/"	"Distributed general purpose cache."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"451"	"96"	"245"	"GitHub - ehcache/ehcache3: Ehcache 3.x line Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 96 Star 451 Fork 245 ehcache/ehcache3 Code Issues 76 Pull requests 7 Wiki Pulse Graphs Ehcache 3.x line http://www.ehcache.org 2,302 commits 2 branches 14 releases 22 contributors Java 99.7% Groovy 0.3% Java Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master release/3.0 Nothing to show v3.1.0 v3.0.2 v3.0.1 v3.0.1-docfix v3.0.0 v3.0.0.rc3 v3.0.0.rc2 v3.0.0.rc1 v3.0.0.m5 v3.0.0.m4 v3.0.0.m3 v3.0.0.m2 v3.0.0.m1 v3.0.0.Alpha Nothing to show New pull request Latest commit 466c431 Jul 15, 2016 chrisdennis committed on GitHub Merge pull request #1313 from ljacomet/issue-1156-master … [master] Fixes #1156 - JSR-107 integration support Permalink Failed to load latest commit information. 107 Merge branch 'master' into issue-1156-master Jul 15, 2016 api Merge branch 'issue-1109-umc' into issue-1109-master Jun 23, 2016 buildSrc Conditional disable flag for generation of SPI javadocs and jar Jun 30, 2016 clustered Refactor to encapsulate all state of stores #1206 Jul 14, 2016 config Checkstyle: enforce no trailing whitespaces Feb 24, 2016 core-spi-test #1030 Add invalidation SPI tests May 17, 2016 core Closes #1276 Add TIMEOUT as an operation outcome for get operation stats Jul 14, 2016 demos Issue #683 Move impl classes around Feb 18, 2016 dist Issue #1163 rework ehcache distribution jars Jun 23, 2016 docs Closes #1280 Document the constructor contract change for persistent … Jul 13, 2016 gradle/wrapper Move to Gradle 2.14 Jun 15, 2016 impl 🐛 Fixes #1297 Initialise index during load Jul 14, 2016 integration-test 🐛 #884 Use TemporaryFolder to ensure cleanup on tearDown Jun 16, 2016 management 🐎 #1004 Improving collector speed and auto-start it when it Jul 11, 2016 osgi-test Issue #357 No resource pools default Apr 7, 2016 spi-tester Prepare for no trailing whitespaces Feb 24, 2016 transactions closes #1253: validate XA clustered cache Jun 29, 2016 xml ➕ Close #1150 - Management XML config Jul 5, 2016 .gitattributes Move to Gradle 2.14 Jun 15, 2016 .gitignore Changed to coderay for source-highlighting, including bundling the CS… Apr 15, 2016 CONTRIBUTING.adoc Issue #844 Javadoc wording improvements Mar 22, 2016 LICENSE Added (c) headers and license info Mar 7, 2014 NOTICE update year Jun 24, 2016 README.adoc 📝 #69 Update README following 3.0.2 release Jun 6, 2016 build.gradle Conditionally disable TerminatedServerTest concurrency Jul 12, 2016 gradle.properties Issue #659 Bump to Gradle 2.8 and enable parallel build Nov 5, 2015 gradlew Move to Gradle 2.14 Jun 15, 2016 gradlew.bat Move to Gradle 2.14 Jun 15, 2016 settings.gradle Issue #1163 rework ehcache distribution jars Jun 23, 2016 README.adoc The Ehcache 3.x line is currently the development line. Status of the build: For more information, you might want to go check the wiki. Getting started with the new API For samples, documentation, and usage information, please see http://ehcache.org. Current release We released 3.0.2 on June 6th 2016. The release notes contain the links to the artifacts and the documentation to help you get started. Current development & next release We are now working on the clustering tier of Ehcache 3 which will be included in the 3.1.0 release. You can also expect bug fix releases on the 3.0.x line. See the milestones on GitHub for more details on the current status. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ehcache/ehcache3"	"Distributed general purpose cache."	"true"
"Distributed Applications"	"Hazelcast"	"http://hazelcast.org/"	"Highly scalable in-memory datagrid."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1634"	"220"	"774"	"GitHub - hazelcast/hazelcast: Open Source In-Memory Data Grid Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 220 Star 1,634 Fork 774 hazelcast/hazelcast Code Issues 500 Pull requests 42 Pulse Graphs Open Source In-Memory Data Grid http://www.hazelcast.com 20,265 commits 4 branches 113 releases 127 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.5.6 maintenance-2.x maintenance-3.x master Nothing to show vpersistence-prototype v3.7-EA v3.6.4 v3.6.3 v3.6.2 v3.6.1 v3.6 v3.6-WITH-SYNC v3.6-RC2 v3.6-RC1 v3.6-EA3 v3.6-EA2 v3.6-EA v3.6-BEFORE-SYNC v3.5.5 v3.5.4 v3.5.3 v3.5.2 v3.5.1 v3.5.1-stale v3.5 v3.5-EA v3.4.8 v3.4.7 v3.4.6 v3.4.5 v3.4.4 v3.4.3 v3.4.2 v3.4.1 v3.4 v3.4-EA v3.3.6 v3.3.5 v3.3.4 v3.3.3 v3.3.2 v3.3.1 v3.3 v3.3-RC3 v3.3-RC2 v3.3-RC1 v3.3-EA2 v3.3-EA v3.2.7 v3.2.6 v3.2.5 v3.2.4 v3.2.3 v3.2.2 v3.2.1 v3.2 v3.2-RC2 v3.2-RC1 v3.1.8 v3.1.7 v3.1.6 v3.1.5 v3.1.4 v3.1.3 v3.1.2 v3.1.1 v3.1 v3.0.3 v3.0.2 v3.0.1 v3.0 v3.0-RC2 v3.0-RC1 v2.6.10 v2.6.9 v2.6.8 v2.6.7 v2.6.6 v2.6.5 v2.6.4 v2.6.3 v2.6.2 v2.6.1 v2.6 v2.5.1 v2.5 v2.4.1 v2.4 v2.3.1 v2.3 v2.2 v2.1.3 v2.1.2 v2.1.1 v2.1 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0 v1.9.4.9 v1.9.4.8 v1.9.4.6 v1.9.4.4 Nothing to show New pull request Latest commit e1b8431 Jul 15, 2016 metanet Fix partition lost listener test runner classes Permalink Failed to load latest commit information. checkstyle Apply consistency fixes to replicated map Jul 13, 2016 findbugs findbugs and checkstyle Sep 18, 2014 hazelcast-all updated dependencies to the latest plugin versions Jun 16, 2016 hazelcast-build-utils change copyright date to 2016 Feb 3, 2016 hazelcast-client Merge pull request #8519 from gurbuzali/durable-test-coverage Jul 15, 2016 hazelcast-spring introduced DurableExecutorService Jun 29, 2016 hazelcast Fix partition lost listener test runner classes Jul 15, 2016 src Deleted package-info.java in wrong path. May 24, 2016 .gitignore Renamed the performancemonitor to diagnostics May 5, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Dec 9, 2014 NOTICE Improve hash functions for primitive hashtables Nov 24, 2015 README.md Hazelcast is now a universal platform with clients for various langua… Apr 20, 2016 pom.xml Introduced Partition Iterator to Cache and Map Jun 15, 2016 README.md Hazelcast is a clustering and highly scalable data distribution platform. With its various distributed data structures, distributed caching capabilities, elastic nature, memcache support, integration with Spring and Hibernate and more importantly with so many happy users, Hazelcast is feature-rich, enterprise-ready and developer-friendly in-memory data grid solution. Features: Distributed implementations of java.util.{Queue, Set, List, Map}. Distributed implementation of java.util.concurrent.locks.Lock. Distributed implementation of java.util.concurrent.ExecutorService. Distributed MultiMap for one-to-many relationships. Distributed Topic for publish/subscribe messaging. Distributed Query, MapReduce and Aggregators. Synchronous (write-through) and asynchronous (write-behind) persistence. Transaction support. Specification compliant JCache implementation. Native Java, .NET, C++ clients, Memcache and REST clients. Socket level encryption support for secure clusters. Second level cache provider for Hibernate. Monitoring and management of the cluster via JMX. Dynamic HTTP session clustering. Support for cluster info and membership events. Dynamic discovery, scaling, partitioning with backups and fail-over. Getting Started See Getting Started Guide Documentation See documentation at www.hazelcast.org Code Samples See Hazelcast Code Samples Releases Download from www.hazelcast.org Or use Maven snippet: <dependency>     <groupId>com.hazelcast</groupId>     <artifactId>hazelcast</artifactId>     <version>${hazelcast.version}</version> </dependency> Snapshot Releases Maven snippet: <dependency>     <groupId>com.hazelcast</groupId>     <artifactId>hazelcast</artifactId>     <version>${hazelcast.version}</version> </dependency> <repository>     <id>sonatype-snapshots</id>     <name>Sonatype Snapshot Repository</name>     <url>https://oss.sonatype.org/content/repositories/snapshots</url>     <releases>         <enabled>false</enabled>     </releases>     <snapshots>         <enabled>true</enabled>     </snapshots> </repository> Building From Source Pull latest from repo git pull origin master and use Maven install (or package) to build mvn clean install. Testing Hazelcast has 3 testing profiles: Default: Type mvn test to run quick/integration tests (those can be run in-parallel without using network). Slow Tests: Type mvn test -P slow-test to run tests those are either slow or cannot be run in-parallel. All Tests: Type mvn test -P all-tests to run all test serially using network. Checkstyle and Findbugs In each Pull Request, we do static analyzing on the changes. Run the following commands locally to check if your contribution is checkstyle and findbugs compatible. mvn clean compile -P findbugs  mvn clean validate -P checkstyle  Contributing to Hazelcast We encourage pull requests and process them promptly. To contribute: see Developing with Git for our Git process complete the Hazelcast Contributor Agreement For an enhancement or larger feature, create a GitHub issue first to discuss. Mail Group Please join the mail group if you are interested in using or developing Hazelcast. http://groups.google.com/group/hazelcast License Hazelcast is available under the Apache 2 License. Please see the Licensing section for more information. Copyright Copyright (c) 2008-2016, Hazelcast, Inc. All Rights Reserved. Visit www.hazelcast.com for more info. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hazelcast/hazelcast"	"Highly scalable in-memory datagrid."	"true"
"Distributed Applications"	"Hystrix"	"https://github.com/Netflix/Hystrix"	"Provides latency and fault tolerance."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6450"	"813"	"1198"	"GitHub - Netflix/Hystrix: Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable. Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 813 Star 6,450 Fork 1,198 Netflix/Hystrix Code Issues 48 Pull requests 3 Wiki Pulse Graphs Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable. 1,830 commits 5 branches 105 releases 79 contributors Java 96.4% Clojure 1.4% Other 2.2% Java Clojure Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.4.x 2.0.x contributing gh-pages master Nothing to show v1.5.3 v1.5.3-rc.2 v1.5.3-rc.1 v1.5.2 v1.5.1 v1.5.0 v1.5.0-rc.5 v1.5.0-rc.4 v1.5.0-rc.3 v1.5.0-rc.2 v1.5.0-rc.1 v1.4.26 v1.4.25 v1.4.24 v1.4.23 v1.4.22 v1.4.21 v1.4.20 v1.4.19 v1.4.18 v1.4.17 v1.4.16 v1.4.15 v1.4.14 v1.4.13 v1.4.12 v1.4.11 v1.4.10 v1.4.10-rc.1 v1.4.9 v1.4.8 v1.4.7 v1.4.6 v1.4.5 v1.4.4 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.4.0-rc.9 v1.4.0-rc.8 v1.4.0-rc.7 v1.4.0-rc.6 v1.4.0-rc.5 v1.3.20 1.4.0-RC6 1.4.0-RC5 1.4.0-RC4 1.4.0-RC3 1.4.0-RC2 1.4.0-RC1 1.3.20 1.3.19 1.3.18 1.3.17 1.3.16 1.3.15 1.3.14 1.3.13 1.3.12 1.3.11 1.3.10 1.3.9 1.3.8 1.3.7 1.3.6 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.3.0.RC2 1.3.0.RC1 1.2.18 1.2.17 1.2.16 1.2.15 1.2.14 1.2.13 1.2.12 1.2.11 1.2.10 1.2.9 1.2.8 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.1.7 1.1.6 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 Nothing to show New pull request Latest commit e336976 Jul 13, 2016 mattrjacobs committed on GitHub Merge pull request #1273 from jbojar/bugfix/ignore-exceptions-generic… … …-observable-command  Corrected ignoreExceptions for Observable returning methods. Permalink Failed to load latest commit information. codequality Build changes for nebula.netflixoss Jan 9, 2015 gradle added test and enum findby id May 19, 2016 hystrix-contrib Merge pull request #1273 from jbojar/bugfix/ignore-exceptions-generic… Jul 13, 2016 hystrix-core Prevent duplicate arguments from getting into a single collapser Requ… Jul 13, 2016 hystrix-dashboard Merge pull request #1197 from diegopacheco/master Jul 13, 2016 hystrix-examples-reactivesocket Deprecated HystrixUtilizationJsonStream in favor of compositional ser… Jun 22, 2016 hystrix-examples-webapp Added buffered SSE request stream that emits a collection of requests… Jan 23, 2016 hystrix-examples Merge pull request #1176 from nurkiewicz/patch-2 Jul 13, 2016 hystrix-serialization Rework hystrix-data-stream module to just include serialization logic… Jul 6, 2016 .gitignore Changed gitignore definition of build output directories so they are … Dec 30, 2012 .travis.yml Perform Travis builds with Java8 May 26, 2016 CHANGELOG.md Add v1.5.3 to CHANGELOG May 25, 2016 CONTRIBUTING.md Rename LICENSE in order to be referred to README Mar 3, 2016 LICENSE-2.0.txt Rename LICENSE in order to be referred to README Mar 2, 2016 OSSMETADATA adding OSSMETADATA for NetflixOSS tracking Dec 11, 2015 README.md Remove release badge, as it doesn't track the actual highest release Mar 25, 2016 build.gradle Removed dashboard references to latenctTotal_mean Feb 16, 2016 gradle.properties iss-907: revert modified files Oct 16, 2015 gradlew Upgrading to Gradle 1.4 Mar 22, 2013 gradlew.bat Version 1.0.0 Nov 21, 2012 settings.gradle Rework hystrix-data-stream module to just include serialization logic… Jul 7, 2016 README.md Hystrix: Latency and Fault Tolerance for Distributed Systems Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable. Full Documentation See the Wiki for full documentation, examples, operational details and other information. See the Javadoc for the API. Communication Google Group: HystrixOSS Twitter: @HystrixOSS GitHub Issues What does it do? 1) Latency and Fault Tolerance Stop cascading failures. Fallbacks and graceful degradation. Fail fast and rapid recovery. Thread and semaphore isolation with circuit breakers. 2) Realtime Operations Realtime monitoring and configuration changes. Watch service and property changes take effect immediately as they spread across a fleet. Be alerted, make decisions, affect change and see results in seconds. 3) Concurrency Parallel execution. Concurrency aware request caching. Automated batching through request collapsing. Hello World! Code to be isolated is wrapped inside the run() method of a HystrixCommand similar to the following: public class CommandHelloWorld extends HystrixCommand<String> {      private final String name;      public CommandHelloWorld(String name) {         super(HystrixCommandGroupKey.Factory.asKey(""ExampleGroup""));         this.name = name;     }      @Override     protected String run() {         return ""Hello "" + name + ""!"";     } } This command could be used like this: String s = new CommandHelloWorld(""Bob"").execute(); Future<String> s = new CommandHelloWorld(""Bob"").queue(); Observable<String> s = new CommandHelloWorld(""Bob"").observe(); More examples and information can be found in the How To Use section. Example source code can be found in the hystrix-examples module. Binaries Binaries and dependency information for Maven, Ivy, Gradle and others can be found at http://search.maven.org. Change history and version numbers => CHANGELOG.md Example for Maven: <dependency>     <groupId>com.netflix.hystrix</groupId>     <artifactId>hystrix-core</artifactId>     <version>x.y.z</version> </dependency> and for Ivy: <dependency org=""com.netflix.hystrix"" name=""hystrix-core"" rev=""x.y.z"" /> If you need to download the jars instead of using a build system, create a Maven pom file like this with the desired version: <?xml version=""1.0""?> <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">     <modelVersion>4.0.0</modelVersion>     <groupId>com.netflix.hystrix.download</groupId>     <artifactId>hystrix-download</artifactId>     <version>1.0-SNAPSHOT</version>     <name>Simple POM to download hystrix-core and dependencies</name>     <url>http://github.com/Netflix/Hystrix</url>     <dependencies>         <dependency>             <groupId>com.netflix.hystrix</groupId>             <artifactId>hystrix-core</artifactId>             <version>x.y.z</version>             <scope/>         </dependency>     </dependencies> </project> Then execute: mvn -f download-hystrix-pom.xml dependency:copy-dependencies  It will download hystrix-core-*.jar and its dependencies into ./target/dependency/. You need Java 6 or later. Build To build: $ git clone git@github.com:Netflix/Hystrix.git $ cd Hystrix/ $ ./gradlew build  Futher details on building can be found on the Getting Started page of the wiki. Run Demo To run a demo app do the following: $ git clone git@github.com:Netflix/Hystrix.git $ cd Hystrix/ ./gradlew runDemo  You will see output similar to the following: Request => GetUserAccountCommand[SUCCESS][8ms], GetPaymentInformationCommand[SUCCESS][20ms], GetUserAccountCommand[SUCCESS, RESPONSE_FROM_CACHE][0ms]x2, GetOrderCommand[SUCCESS][101ms], CreditCardCommand[SUCCESS][1075ms] Request => GetUserAccountCommand[FAILURE, FALLBACK_SUCCESS][2ms], GetPaymentInformationCommand[SUCCESS][22ms], GetUserAccountCommand[FAILURE, FALLBACK_SUCCESS, RESPONSE_FROM_CACHE][0ms]x2, GetOrderCommand[SUCCESS][130ms], CreditCardCommand[SUCCESS][1050ms] Request => GetUserAccountCommand[FAILURE, FALLBACK_SUCCESS][4ms], GetPaymentInformationCommand[SUCCESS][19ms], GetUserAccountCommand[FAILURE, FALLBACK_SUCCESS, RESPONSE_FROM_CACHE][0ms]x2, GetOrderCommand[SUCCESS][145ms], CreditCardCommand[SUCCESS][1301ms] Request => GetUserAccountCommand[SUCCESS][4ms], GetPaymentInformationCommand[SUCCESS][11ms], GetUserAccountCommand[SUCCESS, RESPONSE_FROM_CACHE][0ms]x2, GetOrderCommand[SUCCESS][93ms], CreditCardCommand[SUCCESS][1409ms]  ##################################################################################### # CreditCardCommand: Requests: 17 Errors: 0 (0%)   Mean: 1171 75th: 1391 90th: 1470 99th: 1486  # GetOrderCommand: Requests: 21 Errors: 0 (0%)   Mean: 100 75th: 144 90th: 207 99th: 230  # GetUserAccountCommand: Requests: 21 Errors: 4 (19%)   Mean: 8 75th: 11 90th: 46 99th: 51  # GetPaymentInformationCommand: Requests: 21 Errors: 0 (0%)   Mean: 18 75th: 21 90th: 24 99th: 25  #####################################################################################  Request => GetUserAccountCommand[SUCCESS][10ms], GetPaymentInformationCommand[SUCCESS][16ms], GetUserAccountCommand[SUCCESS, RESPONSE_FROM_CACHE][0ms]x2, GetOrderCommand[SUCCESS][51ms], CreditCardCommand[SUCCESS][922ms] Request => GetUserAccountCommand[SUCCESS][12ms], GetPaymentInformationCommand[SUCCESS][12ms], GetUserAccountCommand[SUCCESS, RESPONSE_FROM_CACHE][0ms]x2, GetOrderCommand[SUCCESS][68ms], CreditCardCommand[SUCCESS][1257ms] Request => GetUserAccountCommand[SUCCESS][10ms], GetPaymentInformationCommand[SUCCESS][11ms], GetUserAccountCommand[SUCCESS, RESPONSE_FROM_CACHE][0ms]x2, GetOrderCommand[SUCCESS][78ms], CreditCardCommand[SUCCESS][1295ms] Request => GetUserAccountCommand[FAILURE, FALLBACK_SUCCESS][6ms], GetPaymentInformationCommand[SUCCESS][11ms], GetUserAccountCommand[FAILURE, FALLBACK_SUCCESS, RESPONSE_FROM_CACHE][0ms]x2, GetOrderCommand[SUCCESS][153ms], CreditCardCommand[SUCCESS][1321ms]  This demo simulates 4 different HystrixCommand implementations with failures, latency, timeouts and duplicate calls in a multi-threaded environment. It logs the results of HystrixRequestLog and metrics from HystrixCommandMetrics. Dashboard A dashboard for monitoring applications using Hystrix is available in the hystrix-dashboard module. More information can be found on the Dashboard Wiki. Bugs and Feedback For bugs, questions and discussions please use the Github Issues. LICENSE Copyright 2013 Netflix, Inc. Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Netflix/Hystrix"	"Provides latency and fault tolerance."	"true"
"Distributed Applications"	"JGroups"	"http://www.jgroups.org/"	"Toolkit for reliable messaging and creating clusters."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"441"	"71"	"268"	"GitHub - belaban/JGroups: The JGroups project Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 71 Star 441 Fork 268 belaban/JGroups Code Pull requests 1 Wiki Pulse Graphs The JGroups project http://www.jgroups.org 18,039 commits 107 branches 184 releases 49 contributors Java 99.8% Other 0.2% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.3 3.4 3.5 3.6 BRANCH_JGROUPS_2_2_8_JDK_1_3_CDC BRANCH_JGROUPS_2_2_9_1_CDC Branch_JG_2_2_1 Branch_JG_2_2_7_SOLOMIO_3231 Branch_JGroups_2_2_7 Branch_JGroups_2_2_9_1 Branch_JGroups_2_3 Branch_JGroups_2_4 Branch_JGroups_2_5 Branch_JGroups_2_6 Branch_JGroups_2_7 Branch_JGroups_2_8_LogicalAddresses Branch_JGroups_2_8 Branch_JGroups_2_9 Branch_JGroups_2_10 Branch_JGroups_2_11 Branch_JGroups_2_12 Branch_JGroups_3_0 Branch_JGroups_3_2 Branch_2_8_temp JGROUPS_2_2_8 JGRP-1396-2 JGRP-1396 JGRP-1401 JGRP-1407 JGRP-1411 JGRP-1412 JGRP-1413 JGRP-1416 JGRP-1417 JGRP-1428 JGRP-1433 JGRP-1441 JGRP-1443 JGRP-1444 JGRP-1449.reopen JGRP-1451 JGRP-1455 JGRP-1461 JGRP-1466 JGRP-1468 JGRP-1475 JGRP-1484 JGRP-1502 JGRP-1508 JGRP-1528 JGRP-1539 JGRP-1542 JGRP-1547 JGRP-1551 JGRP-1555 JGRP-1557 JGRP-1564 JGRP-1581 JGRP-1587 JGRP-1588 JGRP-1599 JGRP-1603 JGRP-1632 JGRP-1649 JGRP-1660 JGRP-1662 JGRP-1675 JGRP-1687 JGRP-1710 JGRP-1716 JGRP-1742 JGRP-1789 JGRP-1821 JGRP-1877 JGRP-2065 JGroups_2_4_5_GA_JGRP-983 JGroups_2_4_5_GA_JGRP-1000 JGroups_2_4_5_GA_JGRP-1060 JGroups_2_4_5_GA_JGRP_549 JGroups_2_4_7_GA_JGRP-1207 JGroups_2_4_7_GA_JGRP-1279_JGRP-1311 JGroups_2_4_7_GA_JGRP-1279 JGroups_2_4_10_Final_JGRP-1382 JGroups_2_6_13_GA_JGRP-1205_JGRP-1282 JGroups_2_6_13_GA_JGRP-1228 JGroups_2_6_16_JGRP-1205_JGRP-1254 JGroups_2_6_16_JGRP-1205 JGroups_2_6_16_JGRP-1383 JGroups_2_6_19_GA_JGRP-1383 JGroups_2_6_20_JGRP-1383_JGRP-1497 JGroups_2_6_20_JGRP-1383 bunder_perf_cclq bundler_perf cache-details daisy hpdrago-prio ids master_with_javadoc master mfc2 newdoc origin revert-156-fd-host-falsesuspect t_jgrp_1007 testng treemesh uuperf Nothing to show show bla2 JGroups_3_3_0_Alpha2 JGroups_3_2_7_Final JGroups_3_2_6_Final JGroups_3_2_5_Final JGroups_3_2_4_Final JGroups_3_2_3_Final JGroups_3_2_2_Final JGroups_3_2_1_Final JGroups_3_2_0_Final JGroups_3_2_0_CR2 JGroups_3_2_0_CR1 JGroups_3_2_0_Beta1 JGroups_3_2_0_Alpha1 JGroups_3_1_0_Final JGroups_3_1_0_Beta1 JGroups_3_1_0_Alpha3 JGroups_3_1_0_Alpha2 JGroups_3_0_16_Final JGroups_3_0_14_Final JGroups_3_0_13_Final JGroups_3_0_12_Final JGroups_3_0_11_Final JGroups_3_0_10_Final JGroups_3_0_9_Final JGroups_3_0_8_Final JGroups_3_0_7_Final JGroups_3_0_6_Final JGroups_3_0_5_Final JGroups_3_0_4_Final JGroups_3_0_3_Final JGroups_3_0_2_Final JGroups_3_0_1_Final JGroups_3_0_0_Final JGroups_3_0_0_CR5 JGroups_3_0_0_CR4 JGroups_2_12_2_Final JGroups_2_12_1_3 JGroups_2_12_1_2 JGroups_2_12_1_1 JGroups_2_12_1 JGroups_2_12_0_Final JGroups_2_12_0_Beta1 JGroups_2_11_1_Final JGroups_2_11_0_GA JGroups_2_11_0_Alpha4 JGroups_2_11_0_Alpha1 JGroups_2_10_0_GA JGroups_2_10_0_CR1 JGroups_2_10_0_Beta1 JGroups_2_10_0_Alpha2 JGroups_2_10_0_Alpha1 JGroups_2_9_0_GA JGroups_2_8_0_GA JGroups_2_8_0_CR6 JGroups_2_8_0_CR4 JGroups_2_8_0_CR2 JGroups_2_8_0_CR1 JGroups_2_8_Beta_2 JGroups_2_8_Beta1 JGroups_2_7 JGroups_2_7_Beta1 JGroups_2_6_22_Final JGroups_2_6_21_Final JGroups_2_6_20 JGroups_2_6_19_GA JGroups_2_6_17_GA JGroups_2_6_16 JGroups_2_6_15_GA JGroups_2_6_13_GA JGroups_2_6_13_CR2 JGroups_2_6_13_CR1 JGroups_2_6_12_GA JGroups_2_6_11_GA JGroups_2_6_10_GA JGroups_2_6_9_GA JGroups_2_6_8_GA JGroups_2_6_7_GA JGroups_2_6_6_GA JGroups_2_6_5_GA JGroups_2_6_4_GA JGroups_2_6_4_CR1 JGroups_2_6_3_GA JGroups_2_6_3_CR2 JGroups_2_6_3_CR1 JGroups_2_6_2 JGroups_2_6_1 JGroups_2_6_beta_1 JGroups_2_6_CR1 JGroups_2_5_2 JGroups_2_5_0_PREVIEW JGroups_2_5 JGroups_2_5_CR_1 JGroups_2_5_BETA_2 JGroups_2_5_BETA_1 JGroups_2_5_ALPHA1 JGroups_2_4_10_Final JGroups_2_4_9_GA JGroups_2_4_7_GA Nothing to show New pull request Latest commit fe38817 Jul 15, 2016 belaban ns Permalink Failed to load latest commit information. bin - Added constant IDs to all header subclasses (matching the IDs in Jul 14, 2016 conf - Added constant IDs to all header subclasses (matching the IDs in Jul 14, 2016 doc Added section on KUBE_PING Jul 13, 2016 src/org/jgroups Made timer's thread pool and thread pool queue configurable: https://… Jul 15, 2016 tests ns Jul 15, 2016 .gitignore Git ignore .ant-targets-build.xml Apr 7, 2016 INSTALL.html - Changed JGroups version to 4.0.0-SNAPSHOT Jan 22, 2016 LICENSE Changed license to Apache License 2.0 (https://issues.jboss.org/brows… Jul 1, 2013 README Fix typo in root README Jan 14, 2014 build.properties.template Added nexus user/password info to build.properties template Jun 16, 2015 build.properties.template.ipv6 first check-in to Git Nov 7, 2010 build.xml Removed src in Message constructor: not needed and can be set via src() Jul 7, 2016 ivy.xml - Removed shared transport (https://issues.jboss.org/browse/JGRP-1844) Jan 25, 2016 ivysettings.xml - Removed shared transport (https://issues.jboss.org/browse/JGRP-1844) Jan 25, 2016 pom.xml Updated dependencies in pom.xml Jul 7, 2016 project.properties - Changed JGroups version to 4.0.0-SNAPSHOT Jan 22, 2016 README           JGroups - A Framework for Group Communication in Java        ========================================================  			    March 3, 1998  			       Bela Ban 			   4114 Upson Hall 			  Cornell University 			   Ithaca, NY 14853 			  bba@cs.cornell.edu 		       belaban@yahoo.com   JGroups is a Java library for reliable group communication. It consists of 3 parts: (1) a socket-like API for application development, (2) a protocol stack, which implements reliable communication, and (3) a set of building blocks, which give the developer high-level abstractions (e.g. ReplicatedHashMap, an implementation of java.util.Map).  The API (a channel) looks like a socket: there are methods for joining and leaving groups, sending and receiving messages, getting the shared group state, and registering for notifications when a member joins, or an existing member leaves or crashes.  The protocol stack is a list of protocols, through which each message passes. Each protocol implements an up() and down() method, and may modify, reorder, encrypt, fragment/unfragment, drop, or pass a message up/down. The protocol stack is created according to a specification given when a channel is created. New protocols can be plugged into the stack easily.  Building blocks hide the channel and provide a higher abstraction. Example: ReplicatedHashMap implements java.util.Map and implements all methods that change the map (clear(), put(), remove()). Those methods are invoked on all hashmap instances in the same group simultaneously, so that all hashmaps have the same state. A new hashmap uses a state transfer protocol to initially obtain the shared group state from an existing member. This allows for  replication of data structures across processes.    Group communication is important in the following situations:   - A service has to be replicated for availability. As long as at    least one of the servers remains operational, the service itself    remains operational   - Service requests have to be balanced between a set of servers   - A large number of objects have to be managed as one entity (e.g. a    management domain)   - Notification service / push technology: receivers subscribe to a    channel, senders send data to the channels, channels distribute    data to all receivers subscribed to the channel.    Used for example for video distribution, videoconferencing 	 	 JGroups deliberately models a rather low-level message-oriented middleware (MOM) model. The reason is that we don't want to impose a one-size-fits-all model on the programmer, who usually will want to extend the model in various (previously unconceived) ways anyway.  Providing low level Java classes allows the programmer to extend/replace classes at will, as the granularity of the system is finer.      Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/belaban/JGroups"	"Toolkit for reliable messaging and creating clusters."	"true"
"Distributed Applications"	"Lagom"	"https://www.lightbend.com/lagom"	"Framework for creating microservice-based systems."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"750"	"107"	"107"	"GitHub - lagom/lagom: Reactive Microservices for the JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 107 Star 750 Fork 107 lagom/lagom Code Issues 34 Pull requests 3 Pulse Graphs Reactive Microservices for the JVM https://lightbend.com/lagom 142 commits 2 branches 4 releases 22 contributors Scala 56.8% Java 42.6% Groff 0.5% HTML 0.1% Protocol Buffer 0.0% CSS 0.0% Scala Java Groff HTML Protocol Buffer CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master swagger Nothing to show 1.0.0 1.0.0-RC1 1.0.0-M2 1.0.0-M1 Nothing to show New pull request Latest commit 4f78af4 Jun 28, 2016 dotta committed on GitHub Merge pull request #129 from markusjura/bump-sbt-conductr … Doc: Bump sbt-conductr to 2.1.4 Permalink Failed to load latest commit information. .github Make template lagom specific and add ""WorkingWithGit.md"" Mar 11, 2016 api-tools/src API improvements (#117) Jun 1, 2016 api/src API improvements (#117) Jun 1, 2016 client/src/main API improvements (#117) Jun 1, 2016 cluster/src/main Not too big, not too small. Lagom. Mar 10, 2016 core/src/main/java/com/lightbend/lagom/internal/guice Not too big, not too small. Lagom. Mar 10, 2016 dev Fix : Stopping runAll task takes too much time (#66) (#119) Jun 7, 2016 docs Doc: Bump sbt-conductr to 2.1.4 Jun 28, 2016 immutables/src/main/java/com/lightbend/lagom/javadsl/immutable Not too big, not too small. Lagom. Mar 10, 2016 integration-client/src/main/java/com/lightbend/lagom/javadsl/client/integration Added full details to exceptions when in dev mode May 27, 2016 jackson/src Added full details to exceptions when in dev mode May 27, 2016 logback/src/main Not too big, not too small. Lagom. Mar 10, 2016 persistence API improvements (#117) Jun 1, 2016 project Link to frames version of javadocs Apr 9, 2016 pubsub/src Not too big, not too small. Lagom. Mar 10, 2016 server/src/main API improvements (#117) Jun 1, 2016 service-integration-tests/src/test API improvements (#117) Jun 1, 2016 spi/src/main Not too big, not too small. Lagom. Mar 10, 2016 testkit/src Moved circuit breakers to service locators May 27, 2016 .gitignore harden PersistentEntityActorSpec Mar 10, 2016 .travis-jvmopts Updated travis.yml Mar 10, 2016 .travis.yml Updated travis.yml Mar 10, 2016 CONTRIBUTING.md Added GitHub contributing/templates/readme pages Mar 10, 2016 LICENSE Not too big, not too small. Lagom. Mar 10, 2016 README.md Merge pull request #127 from mjkrumlauf/patch-1 Jun 23, 2016 WorkingWithGit.md Make template lagom specific and add ""WorkingWithGit.md"" Mar 11, 2016 build.sbt Updated documentation for new website (#124) Jun 20, 2016 version.sbt Setting version to 1.0.1-SNAPSHOT Jun 20, 2016 README.md Lagom Framework - The Reactive Microservices Framework Lagom is a Swedish word meaning just right, sufficient. Microservices are about creating services that are just the right size, that is, they have just the right level of functionality and isolation to be able to adequately implement a scalable and resilient system. Lagom focuses on ensuring that your application realises the full potential of the Reactive Manifesto, while delivering a high productivity development environment, and seamless production deployment experience. Learn More Website Documentation Installation Community Chat Mailing list Get help Contributors Chat License This software is licensed under the Apache 2 license, quoted below. Copyright (C) 2009-2016 Lightbend Inc. (https://www.lightbend.com). Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this project except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lagom/lagom"	"Framework for creating microservice-based systems."	"true"
"Distributed Applications"	"Orbit"	"http://www.orbit.cloud/"	"Virtual Actors, adding another level of abstraction to traditional actors."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"885"	"67"	"97"	"GitHub - orbit/orbit: Orbit - Virtual actor framework for building distributed systems Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 885 Fork 97 orbit/orbit Code Issues 0 Pull requests 1 Wiki Pulse Graphs Orbit - Virtual actor framework for building distributed systems 1,348 commits 3 branches 34 releases 15 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bugfix/classpath-search gh-pages master Nothing to show v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.2 v0.8.1 v0.8.0 v0.8.0-preview1 v0.7.1 v0.7.0 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4.5 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.1 v0.3.0 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit c200b35 Jul 11, 2016 johnou committed with JoeHegarty Remove dead code from prototype. (#177) Permalink Failed to load latest commit information. .idea Setting intellij copyright defaults. Apr 10, 2015 actors Remove dead code from prototype. (#177) Jul 10, 2016 commons Mainline to 0.9.6-SNAPSHOT Jun 28, 2016 .gitignore Adding .DS_Store to gitignore May 27, 2015 .travis.yml Update .travis.yml Apr 29, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Sep 2, 2015 LICENSE Update LICENSE Jan 4, 2016 README.md Update README.md May 18, 2016 eclipse-code-style.epf Refactor paths Mar 30, 2016 pom.xml Mainline to 0.9.6-SNAPSHOT Jun 28, 2016 README.md Orbit is a framework to write distributed systems using virtual actors on the JVM. It allows developers to write highly distributed and scalable applications while greatly simplifying clustering, discovery, networking, state management, actor lifetime and more. Full Documentation See the Wiki for full documentation, examples and other information. Developer & License This project was developed by Electronic Arts and is licensed under the BSD 3-Clause License. Simple Example Java public interface Hello extends Actor {     Task<String> sayHello(String greeting); }  public class HelloActor extends AbstractActor implements Hello {     public Task<String> sayHello(String greeting)     {         getLogger().info(""Here: "" + greeting);         return Task.fromValue(""Hello There"");     } }  Actor.getReference(Hello.class, ""0"").sayHello(""Meep Meep""); Scala trait Hello extends Actor  {   def sayHello(greeting: String): Task[String] }  class HelloActor extends AbstractActor[AnyRef] with Hello  {   def sayHello(greeting: String): Task[String] =    {     getLogger.info(""Here: "" + greeting)     Task.fromValue(""Hello There"")   } }  Actor.getReference(classOf[Hello], ""0"").sayHello(""Meep Meep"") Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/orbit/orbit"	"Virtual Actors, adding another level of abstraction to traditional actors."	"true"
"Distributed Applications"	"Pinpoint"	"https://github.com/naver/pinpoint"	"Application performance management tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1925"	"301"	"594"	"GitHub - naver/pinpoint: Pinpoint is an open source APM (Application Performance Management) tool for large-scale distributed systems written in Java. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 301 Star 1,925 Fork 594 naver/pinpoint Code Issues 80 Pull requests 4 Wiki Pulse Graphs Pinpoint is an open source APM (Application Performance Management) tool for large-scale distributed systems written in Java. 8,341 commits 5 branches 8 releases 34 contributors Java 65.6% JavaScript 28.2% HTML 4.3% CSS 1.2% Shell 0.3% Batchfile 0.2% Other 0.2% Java JavaScript HTML CSS Shell Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.x 1.1.x 1.5.x 1.5.0-branch master Nothing to show 1.5.2 1.5.1 1.5.0 1.1.2 1.1.1 1.1.0 1.0.5 1.0.4 Nothing to show New pull request Latest commit 385fb1c Jul 15, 2016 koo-taejin committed on GitHub Merge pull request #1911 from koo-taejin/#1883 … added to insert a number of agent into rdb periodically. #1883 Permalink Failed to load latest commit information. agent Fix test for Gson 1.1 (#1849) Jun 15, 2016 bootstrap-core #1756 Support CPU usage collection on IBM jvms Jun 3, 2016 bootstrap #1811 add bytecodedump option May 27, 2016 collector Regression introduced with #1804 Jul 4, 2016 commons-hbase change artifactId May 23, 2016 commons-server [no issue] fix test case. Jul 14, 2016 commons added to insert a number of agent into rdb periodically. #1883 Jul 8, 2016 doc Add instructions to deploy web as root application Jun 14, 2016 hbase change artifactId May 23, 2016 plugins remove old code. Jul 5, 2016 profiler-optional #1756 Support CPU usage collection on IBM jvms Jun 3, 2016 profiler #1879 Fix type checking for arrays Jun 29, 2016 quickstart Add explicit jdk7 requirement Jul 12, 2016 rpc change artifactId May 23, 2016 test change artifactId May 23, 2016 thrift change artifactId May 23, 2016 tools extract tools module #1774 May 30, 2016 web Merge pull request #1911 from koo-taejin/#1883 Jul 15, 2016 .gitignore Update .gitignore Jun 17, 2016 .travis.yml merge .ravis.yml Dec 23, 2015 LICENSE Update LICENSE Dec 27, 2014 NOTICE Update NOTICE Jan 12, 2015 README.md Add explicit jdk7 requirement Jul 12, 2016 checkstyle-UTF8(ver0.6).xml Merge branch 'master' of http://yobi.navercorp.com/pinpoint/pinpoint Sep 24, 2014 checkstyle-suppressions.xml Merge branch 'master' of http://yobi.navercorp.com/pinpoint/pinpoint Sep 24, 2014 clover.license #114 convert clover license. (free trial -> opensource) Jan 19, 2015 docker-compose.yml Add mysql component and make it configurable through start-web.sh May 16, 2016 filefilter.txt #138 added klocwork exclude Apr 16, 2015 findbugs-exclude.xml no issue Mar 16, 2016 pom.xml Bump animal-sniffer-maven-plugin version to 1.15 Jun 10, 2016 README.md Pinpoint is an APM (Application Performance Management) tool for large-scale distributed systems written in Java. Modelled after Dapper, Pinpoint provides a solution to help analyze the overall structure of the system and how components within them are interconnected by tracing transactions across distributed applications. Install agents without changing a single line of code Minimal impact on performance (approximately 3% increase in resource usage) Latest Release (2016/04/08) We're happy to announce the release of Pinpoint v1.5.2. Please check the release note at (https://github.com/naver/pinpoint/releases/tag/1.5.2) We're now focusing on developing v1.6.0. Special shout out to dawidmalina, majinkai, jart and many others for your contribution and feedback. Without your help, we would not have been able to reach our current level of product maturity. We are extremely grateful for all your help and will continue to try our very best to provide you with the best possible experience using Pinpoint. We look forward to working with you as we enter the next chapter in development. Thank you. Plugin Development Guide (2016/03/18) We now have a plugin development guide. Yay! Overview Services nowadays often consist of many different components, communicating amongst themselves as well as making API calls to external services. How each and every transaction gets executed is often left as a blackbox. Pinpoint traces transaction flows between these components and provides a clear view to identify problem areas and potential bottlenecks. For a more intimate guide, please check out our Introduction to Pinpoint video clip. ServerMap - Understand the topology of any distributed systems by visualizing how their components are interconnected. Clicking on a node reveals details about the component, such as its current status, and transaction count. Realtime Active Thread Chart - Monitor active threads inside applications in real-time. Request/Response Scatter Chart - Visualize request count and response patterns over time to identify potential problems. Transactions can be selected for additional detail by dragging over the chart. CallStack - Gain code-level visibility to every transaction in a distributed environment, identifying bottlenecks and points of failure in a single view. Inspector - View additional details on the application such as CPU usage, Memory/Garbage Collection, TPS, and JVM arguments. Architecture Supported Modules JDK 6+ Tomcat 6/7/8, Jetty 8/9 Spring, Spring Boot Apache HTTP Client 3.x/4.x, JDK HttpConnector, GoogleHttpClient, OkHttpClient, NingAsyncHttpClient Thrift Client, Thrift Service, DUBBO PROVIDER, DUBBO CONSUMER MySQL, Oracle, MSSQL, CUBRID, DBCP, POSTGRESQL, MARIA Arcus, Memcached, Redis, CASSANDRA iBATIS, MyBatis gson, Jackson, Json Lib log4j, Logback Quick Start You may run a sample Pinpoint instance in your own machine by running four simple scripts for each components: Collector, Web, Sample TestApp, HBase. Once the components are running, you should be able to visit http://localhost:28080 to view the Pinpoint Web UI, and http://localhost:28081 to generate transactions on the Sample TestApp. For details, please refer to the quick-start guide. Installation Build Requirements JDK 6 installed (jdk1.6_45) JDK 7 installed JDK 8 installed Maven 3.2.x+ installed JAVA_6_HOME environment variable set to JDK 6 home directory. JAVA_7_HOME environment variable set to JDK 7 home directory. JAVA_8_HOME environment variable set to JDK 8+ home directory. Prerequisites Java version required to run Pinpoint: Pinpoint Version Agent Collector Web 1.0.x 6+ 6+ 6+ 1.1.x 6+ 7+ 7+ 1.5.x 6+ 7+ 7+ 1.6.x 6+ 8+ 8+ HBase compatibility table: Pinpoint Version HBase 0.94.x HBase 0.98.x HBase 1.0.x HBase 1.1.x HBase 1.2.x 1.0.x yes no no no no 1.1.x no not tested yes not tested not tested 1.5.x no not tested yes not tested not tested 1.6.x no not tested not tested not tested yes Agent compatibility table: Agent Version Collector 1.0.x Collector 1.1.x Collector 1.5.x Collector 1.6.x 1.0.x yes yes yes yes 1.1.x not tested yes yes yes 1.5.x no no yes Yes 1.6.x no no not tested Yes Installation To set up your very own Pinpoint instance you can either download the build results from our latest release, or manually build from your Git clone. Take a look at our installation guide for further instructions. Issues For feature requests and bug reports, feel free to post them here. User Group For Q/A and discussion here. Wiki We have a wiki page for roadmap, user guide, and some documentation. We welcome any documentation contribution. Contribution We welcome any and all suggestions. For plugin development, take a look at our plugin development guide, along with plugin samples project to get an idea of how we do instrumentation. The samples will provide you with example codes to help you get started. Please follow our guideline when making pull-requests for new plugins. For everything else, please make a pull-request against our master branch. Please note that you will have to complete a CLA for your first pull-request. We would love to see additional tracing support for libraries such as Storm, HBase, as well as profiler support for additional languages (.NET, C++). License Pinpoint is licensed under the Apache License, Version 2.0. See LICENSE for full license text. Copyright 2015 Naver Corp.  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/naver/pinpoint"	"Application performance management tool."	"true"
"Distributed Applications"	"Quasar"	"http://www.paralleluniverse.co/quasar/"	"Lightweight threads and actors for the JVM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1975"	"181"	"212"	"GitHub - puniverse/quasar: Fibers, Channels and Actors for the JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 181 Star 1,975 Fork 212 puniverse/quasar Code Issues 37 Pull requests 3 Pulse Graphs Fibers, Channels and Actors for the JVM http://docs.paralleluniverse.co/quasar/ 2,293 commits 14 branches 14 releases 17 contributors Java 98.6% Kotlin 1.3% Shell 0.1% Java Kotlin Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.6.2 0.7.0 better-troubleshoot cont-alt cont cont2 fiberasync-lambda fiberio-select-park fiberio-select fluent-transform gh-pages jdk9 kotlin-api master Nothing to show v0.7.5 v0.7.4 v0.7.3 v0.7.2 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 521cab9 Jun 26, 2016 circlespainter 🐛 Fix #200: `CheckInstrumentationVisitor` doesn't skip anymore source… … …/debug info so classifiers can use it AOT too Permalink Failed to load latest commit information. baselib upgrade HdrHistogram Jan 22, 2015 docs 📝 Improve docs Jun 22, 2016 quasar-actors - May 10, 2016 quasar-core 🐛 Fix #200: `CheckInstrumentationVisitor` doesn't skip anymore source… Jun 26, 2016 quasar-disruptor Move disruptor channels to quasar-disruptor project Jan 18, 2016 quasar-galaxy Create grade files to appease NetBeans plugin Jan 11, 2016 quasar-kotlin 📝 Remove stale comments in Kotlin tests [ci skip] Jun 14, 2016 quasar-reactive-streams Create grade files to appease NetBeans plugin Jan 11, 2016 travis 💚 Try to upgrade Travis env. and fix build Jun 20, 2016 .gitignore gitignore [ci skip] Jun 8, 2015 .travis.yml 💚 Try to upgrade Travis env. and fix build Jun 20, 2016 CONTRIBUTING.md Added CONTRIBUTING.md [ci skip] Jan 14, 2014 COPYING Added license, notice May 2, 2013 COPYING.LESSER Added license, notice May 2, 2013 LICENSE Copyright notice Jan 9, 2014 NOTICE Update NOTICE [ci skip] Jun 9, 2015 README.md 📝 Docs improvements Jun 20, 2016 build.gradle Upgrade Kotlin to `1.0.2` May 15, 2016 epl-1.0.txt Added license, notice May 2, 2013 settings.gradle Move disruptor channels to quasar-disruptor project Jan 18, 2016 README.md Quasar Fibers, Channels and Actors for the JVM Getting started Add the following Maven/Gradle dependencies: Feature Artifact Core (required) co.paralleluniverse:quasar-core:0.7.5[:jdk8] (for JDK 8 optionally add the jdk8 classifier) Actors co.paralleluniverse:quasar-actors:0.7.5 Clustering co.paralleluniverse:quasar-galaxy:0.7.5 Reactive Streams co.paralleluniverse:quasar-reactive-streams:0.7.5 Disruptor Channels co.paralleluniverse:quasar-disruptor:0.7.5 Kotlin co.paralleluniverse:quasar-kotlin:0.7.5 Or, build from sources by running: gradle install  Usage Documentation Javadoc You can also study the examples here. You can also read the introductory blog post. When running code that uses Quasar, the instrumentation agent must be run by adding this to the java command line: -javaagent:path-to-quasar-jar.jar  Related Projects Pulsar is Quasar's extra-cool Clojure API Comsat integrates Quasar with the JVM's web APIs Getting help Please make sure to double-check the System Requirements and Troubleshooting sections of the docs, as well as at currently open issues. Questions and suggestions are welcome at this forum/mailing list. You can also open a new GitHub issue especially for bug reports and feature requests but if you're not sure please first get in touch with the community through the forum/mailing list. License Quasar is free software published under the following license: Copyright (c) 2013-2016, Parallel Universe Software Co. All rights reserved.  This program and the accompanying materials are dual-licensed under either the terms of the Eclipse Public License v1.0 as published by the Eclipse Foundation    or (per the licensee's choosing)  under the terms of the GNU Lesser General Public License version 3.0 as published by the Free Software Foundation.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/puniverse/quasar"	"Lightweight threads and actors for the JVM."	"true"
"Distributed Databases"	"Apache Cassandra"	"http://cassandra.apache.org"	"Column-oriented and providing high availability with no single point of failure."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Apache Cassandra Project Cassandra Home Download Getting Started Planet Cassandra Contribute Welcome Video Slides Welcome to Apache Cassandra ™ The Apache Cassandra database is the right choice when you need scalability and high availability without compromising performance. Linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data. Cassandra's support for replicating across multiple datacenters is best-in-class, providing lower latency for your users and the peace of mind of knowing that you can survive regional outages. Cassandra's data model offers the convenience of column indexes with the performance of log-structured updates, strong support for denormalization and materialized views, and powerful built-in caching. Cassandra at NoSql Matters 2012 from jbellis Download Tick-Tock release 3.7 (Changes) 3.0.x release 3.0.8 (Changes) 2.2.x release 2.2.7 (Changes) Download options Overview Proven Cassandra is in use at Constant Contact, CERN, Comcast, eBay, GitHub, GoDaddy, Hulu, Instagram, Intuit, Netflix, Reddit, The Weather Channel, and over 1500 more companies that have large, active data sets. One of the largest production deployments is Apple's, with over 75,000 nodes storing over 10 PB of data. Other large Cassandra installations include Netflix (2,500 nodes, 420 TB, over 1 trillion requests per day), Chinese search engine Easou (270 nodes, 300 TB, over 800 million reqests per day), and eBay (over 100 nodes, 250 TB). Fault Tolerant Data is automatically replicated to multiple nodes for fault-tolerance. Replication across multiple data centers is supported. Failed nodes can be replaced with no downtime. Performant Cassandra consistently outperforms popular NoSQL alternatives in benchmarks and real applications, primarily because of fundamental architectural choices. Decentralized There are no single points of failure. There are no network bottlenecks. Every node in the cluster is identical. Durable Cassandra is suitable for applications that can't afford to lose data, even when an entire data center goes down. You're in Control Choose between synchronous or asynchronous replication for each update. Highly available asynchronous operations are optimized with features like Hinted Handoff and Read Repair. Elastic Read and write throughput both increase linearly as new machines are added, with no downtime or interruption to applications. Professionally Supported Cassandra support contracts and services are available from third parties. Learn More On The Web Getting Started News and articles FAQ Wiki Discussion Stack Overflow – Q&A about using Cassandra. Users list – General mailing list for users. Subscribe | Unsubscribe | Archives Developers list – Development related mailing list. Subscribe | Unsubscribe | Archives Commits list – Commit notifications. Subscribe | Unsubscribe | Archives Chat Many of the Cassandra developers and community members hang out in the #cassandra channel on irc.freenode.net. If you are new to IRC, you can use a web-based client. Dead Trees Cassandra: The Definitive Guide, 2nd Edition, by Jeff Carpenter and Eben Hewitt. Updated for Cassandra 3.0 Copyright © 2015 The Apache Software Foundation. Licensed under the Apache License, Version 2.0. Apache and the Apache feather logo are trademarks of The Apache Software Foundation. Privacy Policy."	"null"	"null"	"Column-oriented and providing high availability with no single point of failure."	"true"
"Distributed Databases"	"Apache HBase"	"http://hbase.apache.org"	"Hadoop database for big data."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache HBase – Apache HBase™ Home Apache HBase Project Overview License Downloads Release Notes Code Of Conduct Blog Mailing Lists Team ReviewBoard Thanks Powered by HBase Other resources Project Information Project Summary Dependency Information Team Source Repository Issue Tracking Dependency Management Dependencies Dependency Convergence Continuous Integration Plugin Management Plugins Documentation and API Reference Guide Reference Guide (PDF) Getting Started User API User API (Test) Developer API Developer API (Test) X-Ref X-Ref (Test) 中文参考指南(单页) FAQ Videos/Presentations Wiki ACID Semantics Bulk Loads Metrics HBase on Windows Cluster replication 0.94 Documentation API X-Ref Ref Guide (single-page) ASF Apache Software Foundation How Apache Works Sponsoring Apache Welcome to Apache HBase™ Apache HBase™ is the Hadoop database, a distributed, scalable, big data store. Use Apache HBase™ when you need random, realtime read/write access to your Big Data. This project's goal is the hosting of very large tables -- billions of rows X millions of columns -- atop clusters of commodity hardware. Apache HBase is an open-source, distributed, versioned, non-relational database modeled after Google's Bigtable: A Distributed Storage System for Structured Data by Chang et al. Just as Bigtable leverages the distributed data storage provided by the Google File System, Apache HBase provides Bigtable-like capabilities on top of Hadoop and HDFS. Download Click here to download Apache HBase™. Features Linear and modular scalability. Strictly consistent reads and writes. Automatic and configurable sharding of tables Automatic failover support between RegionServers. Convenient base classes for backing Hadoop MapReduce jobs with Apache HBase tables. Easy to use Java API for client access. Block cache and Bloom Filters for real-time queries. Query predicate push down via server side Filters Thrift gateway and a REST-ful Web service that supports XML, Protobuf, and binary data encoding options Extensible jruby-based (JIRB) shell Support for exporting metrics via the Hadoop metrics subsystem to files or Ganglia; or via JMX More Info See the Architecture Overview, the Apache HBase Reference Guide FAQ, and the other documentation links. Export Control The HBase distribution includes cryptographic software. See the export control notice here Code Of Conduct We expect participants in discussions on the HBase project mailing lists, IRC channels, and JIRA issues to abide by the Apache Software Foundation's Code of Conduct. More information can be found here. News May 24th, 2016 HBaseCon2016 at The Village, 969 Market, San Francisco June 25th, 2015 HBase Summer Meetup 2015 in Tokyo May 7th, 2015 HBaseCon2015 in San Francisco February 17th, 2015 HBase meetup around Strata+Hadoop World in San Jose January 15th, 2015 HBase meetup @ AppDynamics in San Francisco November 20th, 2014 HBase meetup @ WANdisco in San Ramon October 27th, 2014 HBase Meetup @ Apple in Cupertino October 15th, 2014 HBase Meetup @ Google on the night before Strata/HW in NYC September 25th, 2014 HBase Meetup @ Continuuity in Palo Alto August 28th, 2014 HBase Meetup @ Sift Science in San Francisco July 17th, 2014 HBase Meetup @ HP in Sunnyvale June 5th, 2014 HBase BOF at Hadoop Summit, San Jose Convention Center May 5th, 2014 HBaseCon2014 at the Hilton San Francisco on Union Square March 12th, 2014 HBase Meetup @ Ancestry.com in San Francisco Old News Copyright © 2007–2016 The Apache Software Foundation. All rights reserved. Last Published: 2016-07-14"	"null"	"null"	"Hadoop database for big data."	"true"
"Distributed Databases"	"Druid"	"http://druid.io"	"Real-time and historical OLAP data store that excel at aggregation and approximation queries."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3456"	"341"	"786"	"GitHub - druid-io/druid: Column oriented distributed data store ideal for powering interactive applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 341 Star 3,456 Fork 786 druid-io/druid Code Issues 381 Pull requests 92 Wiki Pulse Graphs Column oriented distributed data store ideal for powering interactive applications http://druid.io 7,318 commits 16 branches 387 releases 130 contributors Java 93.6% TeX 3.5% JavaScript 2.5% HTML 0.2% R 0.1% CSS 0.1% Java TeX JavaScript HTML R CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.5.x 0.6.x 0.7.x 0.7.1.x 0.7.2.x 0.8.0 0.8.1 0.8.2 0.8.3 0.9.0 0.9.1 gpudruid master new-columns script-engine-aggregators support-variance-aggregator Nothing to show druid-0.9.1.1 druid-0.9.1 druid-0.9.1-rc4 druid-0.9.1-rc3 druid-0.9.1-rc2 druid-0.9.1-rc1 druid-0.9.0 druid-0.9.0-rc3 druid-0.9.0-rc2 druid-0.9.0-rc1 druid-0.8.3 druid-0.8.3-rc5 druid-0.8.3-rc4 druid-0.8.3-rc3 druid-0.8.3-rc2 druid-0.8.3-rc1 druid-0.8.2 druid-0.8.2-rc2 druid-0.8.2-rc1 druid-0.8.1 druid-0.8.1-rc3 druid-0.8.1-rc2 druid-0.8.1-rc1 druid-0.8.0 druid-0.8.0-rc2 druid-0.8.0-rc1 druid-0.7.3 druid-0.7.2 druid-0.7.1.1 druid-0.7.1 druid-0.7.1-rc1 druid-0.7.0 druid-0.7.0-rc3 druid-0.7.0-rc2 druid-0.7.0-rc1 druid-0.6.174 druid-0.6.173 druid-0.6.172 druid-0.6.171 druid-0.6.170 druid-0.6.169 druid-0.6.167 druid-0.6.166 druid-0.6.165 druid-0.6.164 druid-0.6.163 druid-0.6.162 druid-0.6.161 druid-0.6.160 druid-0.6.159 druid-0.6.158 druid-0.6.157 druid-0.6.156 druid-0.6.155 druid-0.6.154 druid-0.6.153 druid-0.6.152 druid-0.6.151 druid-0.6.150 druid-0.6.149 druid-0.6.148 druid-0.6.147 druid-0.6.146 druid-0.6.145 druid-0.6.144 druid-0.6.143 druid-0.6.142 druid-0.6.141 druid-0.6.140 druid-0.6.139 druid-0.6.138 druid-0.6.137 druid-0.6.136 druid-0.6.135 druid-0.6.134 druid-0.6.133 druid-0.6.132 druid-0.6.131 druid-0.6.130 druid-0.6.129 druid-0.6.128 druid-0.6.127 druid-0.6.126 druid-0.6.125 druid-0.6.124 druid-0.6.123 druid-0.6.122 druid-0.6.121.3 druid-0.6.121.2 druid-0.6.121.1 druid-0.6.121 druid-0.6.120 druid-0.6.119 druid-0.6.118 druid-0.6.117 druid-0.6.116 druid-0.6.115 druid-0.6.114 druid-0.6.113 druid-0.6.112 Nothing to show New pull request Latest commit 6cd1f53 Jul 14, 2016 gianm committed with fjy Better harmonized dimensions for query metrics. (#3245) … All query metrics now start with toolChest.makeMetricBuilder, and all of *those* now start with DruidMetrics.makePartialQueryTimeMetric. Also, ""id"" moved to common code, since all query metrics added it anyway.  In particular this will add query-type specific dimensions like ""threshold"" and ""numDimensions"" to servlet-originated metrics like query/time. Permalink Failed to load latest commit information. api Replace deprecated usage for StringInputRowParser and JSONParseSpec (#… Jul 14, 2016 aws-common Update master version to 0.9.2-SNAPSHOT. (#3133) Jun 13, 2016 benchmarks BenchmarkDataGenerator: Don't generate timestamps at the end instant … Jul 14, 2016 common Alternative groupBy strategy. (#2998) Jun 24, 2016 distribution Caffeine cache extension (#3028) Jul 6, 2016 docs Fix ingest/persist/backPressure docs. (#3243) Jul 13, 2016 examples Druid launch script improvements (#3175) Jun 24, 2016 extensions-contrib remove datasource from hadoop output path (#3196) Jun 29, 2016 extensions-core Caffeine cache extension (#3028) Jul 6, 2016 indexing-hadoop Replace deprecated usage for StringInputRowParser and JSONParseSpec (#… Jul 14, 2016 indexing-service Replace deprecated usage for StringInputRowParser and JSONParseSpec (#… Jul 14, 2016 integration-tests Make integration test dependency copy run in batch mode (#3152) Jun 16, 2016 processing Better harmonized dimensions for query metrics. (#3245) Jul 14, 2016 publications Support min/max values for metadata query (#2208) Feb 12, 2016 server Better harmonized dimensions for query metrics. (#3245) Jul 14, 2016 services Better harmonized dimensions for query metrics. (#3245) Jul 14, 2016 .gitignore move distribution artifacts to distribution/target Oct 30, 2015 .travis.yml Disable cobertura travis portion (#3122) Jun 13, 2016 CONTRIBUTING.md Add doc link to eclipse formatting settings as well (#3131) Jun 24, 2016 DruidCorporateCLA.pdf fix CLA email / mailing address Apr 17, 2014 DruidIndividualCLA.pdf fix CLA email / mailing address Apr 17, 2014 LICENSE Clean up README and license Feb 18, 2015 NOTICE Two-stage filtering (#3018) Jun 22, 2016 README.md update readme (#2830) Apr 13, 2016 druid_intellij_formatting.xml Make formatting IntelliJ 2016 friendly (#2978) May 18, 2016 eclipse.importorder Merge pull request #2905 from javasoze/eclipse_formatting Apr 29, 2016 eclipse_formatting.xml Merge pull request #2905 from javasoze/eclipse_formatting Apr 30, 2016 pom.xml Caffeine cache extension (#3028) Jul 6, 2016 upload.sh upload.sh: Use awscli if s3cmd is not available. (#3114) Jun 8, 2016 README.md Druid Druid is a distributed, column-oriented, real-time analytics data store that is commonly used to power exploratory dashboards in multi-tenant environments. Druid excels as a data warehousing solution for fast aggregate queries on petabyte sized data sets. Druid supports a variety of flexible filters, exact calculations, approximate algorithms, and other useful calculations. Druid can load both streaming and batch data and integrates with Samza, Kafka, Storm, Spark, and Hadoop. License Apache License, Version 2.0 More Information More information about Druid can be found on http://www.druid.io. Documentation You can find the documentation for the latest Druid release on the project website. If you would like to contribute documentation, please do so under /docs/content in this repository and submit a pull request. Getting Started You can get started with Druid with our quickstart. Reporting Issues If you find any bugs, please file a GitHub issue. Community Community support is available on the druid-user mailing list(druid-user@googlegroups.com). Development discussions occur on the druid-development list(druid-development@googlegroups.com). We also have a couple people hanging out on IRC in #druid-dev on irc.freenode.net. Contributing Please follow the guidelines listed here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/druid-io/druid"	"Real-time and historical OLAP data store that excel at aggregation and approximation queries."	"true"
"Distributed Databases"	"Infinispan"	"http://infinispan.org/"	"Highly concurrent key/value datastore used for caching."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"15"	"14"	"GitHub - infinispan/infinispan.github.io: Current public website Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 1 Fork 14 infinispan/infinispan.github.io Code Issues 0 Pull requests 2 Pulse Graphs Current public website 308 commits 6 branches 0 releases Fetching contributors HTML 88.3% Ruby 10.9% Other 0.8% HTML Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags develop hadoop_release master preview_fix remove_ruby_racer search_version Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. _config _ext _layouts _partials bin cache/static.jboss.org/theme/js/libs images javascripts tutorials .awestruct_ignore .gitignore .htaccess .nojekyll 404.html.haml CONTRIBUTING.md Gemfile LICENSE.md README.md Rakefile TODO.txt about.html.haml cache-store-implementations.html.haml community.html.haml documentation.html.haml download.html.haml experiments.html.haml features.html.haml getinvolved.html.haml google62cca8acaf60584e.html hotrod-clients.html.haml index.html.haml integrations.html.haml references.html.haml release-notes.html.haml roadmap.html.haml swatch.html.haml tutorials.html.haml README.md Introduction This is the source code for the Infinispan.org website. This is based on templates created by the JBoss Community using Awestruct and Bootstrap. System Requirements Ruby 1.9.2 or above Use the instructions from Awestruct to install Ruby, Awestruct and Bundler GNU WGet 1.14 Note: If you are using Mac OS X, you need to have the following setup: XCode. After installing XCode, you should go to XCode -> Preferences -> Download and install the command line (CLI) tools. MacPorts You can install WGet using MacPorts: sudo port install wget You need libxml2 and libxslt: sudo port install libxml2 libxslt You will need Ruby >= 1.9.2. Mac OS Mountain Lion comes with 1.8.x. Using RVM and JewelryBox is probably the best way to manage and install several different versions of Ruby on OS X. 1. Build the website Run Awestruct in development mode from the top-level directory to build the website and host it using a local web server: $ bin/run_dev.sh 2. View the website locally Use a web browser to visit http://localhost:4242 where you can see the site. 3. Stage the website Staging is published on OpenShift. To do this, you must have SSH access to Infinispan's OpenShift account. After that, you must: Run $ bin/publish_staging.sh Browse to http://stg-ispn.rhcloud.com to test Permissions. To be able to publish to staging, you must: Have the following in your ~/.ssh/config:     Host *.rhcloud.com         IdentityFile ~/.ssh/libra_id_rsa         VerifyHostKeyDNS yes         StrictHostKeyChecking no         UserKnownHostsFile ~/.ssh/libra_known_hosts  Have libra_id_rsa, libra_id_rsa.pub and libra_known_hosts in your ~/.ssh directory. Contact Infinispan project leads for these files. 4. Publish the website If everyone is happy with staging then: Run $ bin/publish_production.sh Browse to http://www.infinispan.org Permissions. To be able to publish to production, you must have git push rights on http://github.com/infinispan/infinispan.github.io. Contact Infinispan project leads for such permissions. Contribute to issues on Infinispan.org Feel like contributing? Great! Read this page on how to contribute. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/infinispan/infinispan.github.io"	"Highly concurrent key/value datastore used for caching."	"true"
"Distributed Databases"	"OpenTSDB"	"http://opentsdb.net"	"Scalable and distributed time series database written on top of Apache HBase."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2088"	"277"	"702"	"GitHub - OpenTSDB/opentsdb: A scalable, distributed Time Series Database. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 277 Star 2,088 Fork 702 OpenTSDB/opentsdb Code Issues 237 Pull requests 26 Wiki Pulse Graphs A scalable, distributed Time Series Database. http://opentsdb.net 1,166 commits 8 branches 19 releases 76 contributors Java 98.5% Other 1.5% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ISSUE-817 PR-776 maintenance master next_lastdp next_storage next put Nothing to show v2.3.0RC1 v2.2.0 v2.2.0RC3 v2.2.0RC2 v2.2.0RC1 v2.1.4 v2.1.3 v2.1.2 v2.1.0 v2.1.0RC2 v2.1.0RC1 v2.0.1 v2.0.0 v2.0.0RC3 v2.0.0RC2 v2.0.0RC1 v1.1.0 v1.0.0 2.1.1 Nothing to show New pull request Latest commit 6582775 Jul 7, 2016 thatsafunnyname committed with manolama Use thread safe ConcurrentHashMap. (#3) … For #823 Concurrent use of a HashSet can trigger race conditions and an infinite loop(s), use the thread-safe ConcurrentHashMap to avoid this. Making the change just for the thread stack seen looping.  Signed-off-by: Chris Larsen <clarsen@yahoo-inc.com> Permalink Failed to load latest commit information. build-aux A few fixes for deb and rpm opentsdb.conf options May 1, 2016 src Use thread safe ConcurrentHashMap. (#3) Jul 13, 2016 test Fix issue #778 by allowing the creating of a TSMeta object without May 1, 2016 third_party Removing the Zookeeper jar. How'd that get in there !?!?!? Feb 16, 2016 tools Use /usr/bin/env in shebang line Apr 5, 2016 .dir-locals.el Set the indent style for Emacs users. Jan 30, 2013 .gitignore Fix #642 by sorting the tags properly on the bytes, NOT the string Dec 14, 2015 .travis.yml Add the ""short-hostname"" flag to travis to help the builds. Apr 25, 2016 AUTHORS OpenTSDB 2.1.0 RC2 Apr 4, 2015 COPYING Add the license files (LGPL). Oct 22, 2010 COPYING.LESSER Licensing adjustment: allow LGPLv2.1+ instead of LGPLv3+. Feb 4, 2012 Makefile.am Rollback 6d2102a as I was mistaken Feb 14, 2016 NEWS Fix TSDB write data around the TSMeta and TSUID incrementation. Apr 18, 2016 README Extra space Jun 22, 2016 THANKS Cut 2.2.0 Feb 14, 2016 bootstrap Licensing adjustment: allow LGPLv2.1+ instead of LGPLv3+. Feb 4, 2012 build.sh Fix build on FreeBSD (#209) Nov 9, 2014 configure.ac Bump to 2.2.1-SNAPSHOT Apr 18, 2016 opentsdb.spec.in Merge branch 'put' into next May 6, 2015 pom.xml.in Link to the new GWT Theme jar. Dec 16, 2015 tsdb.in Pointing tsdb at /usr/share/opentsdb/bin/tsdb.local in packaged distr… Mar 1, 2015 README        ___                 _____ ____  ____  ____       / _ \ _ __   ___ _ _|_   _/ ___||  _ \| __ )      | | | | '_ \ / _ \ '_ \| | \___ \| | | |  _ \      | |_| | |_) |  __/ | | | |  ___) | |_| | |_) |       \___/| .__/ \___|_| |_|_| |____/|____/|____/            |_|    The modern time series database.  OpenTSDB is a distributed, scalable Time Series Database (TSDB) written on top of HBase.  OpenTSDB was written to address a common need: store, index and serve metrics collected from computer systems (network gear, operating systems, applications) at a large scale, and make this data easily accessible and graphable.  Thanks to HBase's scalability, OpenTSDB allows you to collect thousands of metrics from tens of thousands of hosts and applications, at a high rate (every few seconds). OpenTSDB will never delete or downsample data and can easily store hundreds of billions of data points.  OpenTSDB is free software and is available under both LGPLv2.1+ and GPLv3+. Find more about OpenTSDB at http://opentsdb.net  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OpenTSDB/opentsdb"	"Scalable and distributed time series database written on top of Apache HBase."	"true"
"Distribution"	"Bintray"	"https://bintray.com/"	"Version control for binaries which handles the publishing. Can also be used with Maven or Gradle and has a free plan for open-source software or several business plans."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Bintray - Download Center Automation & Distribution w. Private Repositories Bintray Pricing Blog Sign In Distribution made easy! Your package hosting and download center infrastructure for automated software distribution (Serving 418,622 packages in 207,982 repositories) Get Started For Free What is Bintray? Made for Developers Bintray's powerful feature set supports full automation when distributing your software: Private Repositories Distribute private content securely Manage teams and permissions Manage organization memberships Signed, one-off download URLs with optional expiry Manage entitlements with download keys that integrate with your existing authorization system 100% Automated Rich REST API Integrates with your GitHub teams and repositories Integrates with your CI and development ecosystem The ultimate backend for your Download Center Searchable metadata Push release artifacts for distribution directly from Artifactory Stats & Logs Advanced download stats, including geography, organization and version information REST-enabled download stats and logs Callbacks for specific file downloads Callbacks for new version releases Fast & Reliable Globally deployed on both US and Europe clusters Ultra-fast downloads over CDN (Akamai & Cloudfront) Data is backed up and replicated across multiple cloud providers SLA support Powering the Distribution of OSS Savvy - Always! Free for OSS distribution Credits and exposes OSS contributors Smart package sharing via inter-repo package inclusion Seamlessly integrates with your GitHub tags and releases Serves the most popular, high bandwidth packages Hosts JCenter, the biggest Java library repo out there Extended stats for OSS packages Blog Contact Terms of Service Privacy Policy Security User Manual REST API Status JFrog Bintray | © 2016 Bintray All rights reserved Apache Maven and Maven are trademarks of the Apache Software Foundation. RPM is a trademark of Red Hat, Inc. Debian is a registered trademark of Software in the Public Interest, Inc. Docker and Docker logo are trademarks or registered trademarks of Docker, Inc. in the United States and/or other countries. Docker, Inc. and other parties may also have trademark rights in other terms used herein."	"null"	"null"	"Version control for binaries which handles the publishing. Can also be used with Maven or Gradle and has a free plan for open-source software or several business plans."	"true"
"Distribution"	"Boxfuse"	"https://boxfuse.com"	"Deployment of JVM application to AWS using the principles of Immutable Infrastructure."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Boxfuse • Immutable Infrastructure Made Easy Learn More Get Started Pricing Documentation Events Blog About Log in / Sign up Deploy your JVM and Node.js apps to AWS. Effortlessly. Build minimal fully-provisioned images in seconds. Test on VirtualBox, deploy atomically to AWS. No legacy OS. No containers. No drift. Start Deploying Effortlessly The End of Application Deployment as you know it Minimal Images Boxfuse generates minimal images for your application in seconds. They boot directly on virtual hardware. There is no classic OS and no container runtime. Immutable Instances Boxfuse images are fully-provisioned at build time. Instances are immutable and identical in all environments, both on your local machine and on AWS. Atomic Deployments Boxfuse deployments to AWS are atomic blue/green deployments with zero downtime using either Elastic IPs or Elastic Load Balancers. Why Immutable Infrastructure? For containerization of our core api, we use Boxfuse. The Boxfuse service supports Dropwizard applications out of the box and provides a highly efficient method of building deployable images that are optimized for speed and space. We have found Boxfuse to produce smaller images than Docker ... and it’s also 10x easier to use. Andrew Schwabe, Founder and CEO, Formatic.ly Why you'll love Boxfuse. Efficient, powerful and robust to make your life easier Images measured in MB, not GB Boxfuse analyses your application and generates the smallest possible image to run it. A Node.js Boxfuse image without your application is only 13 MB and a Java 8 one around 40 MB. The image is directly bootable on virtual hardware and includes a bootloader, a kernel, a JVM or Node.js runtime and your application. Boxfuse generates the image on-the-fly in 5 seconds on Windows, Mac and Linux. Deep and powerful integration Boxfuse integrates with frameworks like Node.js, Spring Boot, Grails, Dropwizard and Play. It uses their native configuration files to automatically set up health checks, port definitions and AWS resources like security groups and elastic load balancers. No additional configuration is required on your part. All settings are auto-detected and applied intelligently for you. Secure and production-ready by design Boxfuse images have the smallest possible attack surface. They are always hardened and capable of doing exactly one thing: running your application as efficiently and securely as possible. There is no SSH on board and all instances are guaranteed to be identical across all environments. Made for Continuous Deployment In addition to its command-line client, Boxfuse comes with plugins for popular build tools like Maven or Gradle so you can generate, integration test and deploy images directly from your build script. Boxfuse also comes with a secure online repository for your images called the Boxfuse Vault. Combine this with your favorite CI server and Boxfuse's blue/green deployments and you have the perfect continuous deployment pipeline. Atomic Blue/Green Deployments on AWS Boxfuse always deploys your application on AWS using blue/green deployments. All deployments are atomic. A new version of the application is only put into service once it has passed the configured health checks. Only then does Boxfuse take the old version offline. Boxfuse enables these zero-downtime upgrades regardless of whether you choose to use an AWS Elastic IP or and Elastic Load Balancer. The entire process is fully automatic and requires no manual intervention on your behalf. How does Boxfuse work? With Boxfuse we can focus on development. The Maven integration in our automated build allows us to deliver our software continuously, reliably and with great ease. We especially like the immutable infrastructure mindset and the zero effort integration with AWS. Armin Gattung, Co-founder and CTO, Groupify Built for the Open Technologies You Trust No Lock In. No Walled Gardens. No Proprietary Formats. Works with Sign up for Boxfuse Free forever for development and one application in production on AWS. Paid plans start at $25/month. INTRO Why Immutable Infrastructure? How Boxfuse works GET STARTED Spring Boot Grails Dropwizard Play Tomcat TomEE Executable Jar Node.js COMPARE TO Docker Packer STAY UPDATED Sign up for our monthly newsletter © 2016 Boxfuse GmbH - All rights reserved - Impressum - Terms (AGB) - Privacy (Datenschutzerklärung) Made with in München Boxfuse and Flyway are registered trademarks of Boxfuse GmbH All other trademarks, trade names, logos or service marks mentioned on this site belong to their respective owners. This site collects anonymous usage information through Google Analytics."	"null"	"null"	"Deployment of JVM application to AWS using the principles of Immutable Infrastructure."	"true"
"Distribution"	"Capsule"	"http://www.capsule.io/"	"Simple and powerful packaging and deployment. A fat JAR on steroids or a ""Docker for Java"" that supports JVM-optimized containers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"947"	"56"	"60"	"GitHub - puniverse/capsule: Dead-Simple Packaging and Deployment for JVM Apps Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 947 Fork 60 puniverse/capsule Code Issues 4 Pull requests 2 Pulse Graphs Dead-Simple Packaging and Deployment for JVM Apps http://capsule.io 1,118 commits 2 branches 19 releases 11 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags jdk8 master Nothing to show v1.0.2 v1.0.1 v1.0.0 v1.0-rc1 v0.10.0 v0.9.0 v0.8.0 v0.7.1 v0.7.0 v0.6.1 v0.6.0 v0.5.0 v0.4.2 v0.4.1 v0.4.0 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 2b9a20c Jun 28, 2016 pron committed on GitHub Merge pull request #105 from artnowo/master … Fixed handling jdk-* and jre-* Java installation paths Permalink Failed to load latest commit information. capsule-util/src Revert to Capsule-In-Class-Path default being `true` Sep 6, 2015 capsule/src Fixed handling jdk-* and jre-* Java installation paths Jun 28, 2016 .gitignore - Sep 10, 2015 .travis.yml abandon codecov... again; go back to coveralls... again May 3, 2016 LICENSE license, notice, build Apr 20, 2014 README.md Prepare release 1.0.2 Apr 8, 2016 build.gradle - May 5, 2016 settings.gradle move capsule-container into a separate high-level project Feb 21, 2015 README.md Capsule Dead-Simple Packaging and Deployment for JVM Applications Capsule is a packaging and deployment tool for JVM applications. A capsule is a single executable JAR that contains everything your application needs to run either in the form of embedded files or as declarative metadata. It can contain your JAR artifacts, your dependencies and resources, native libraries, the require JRE version, the JVM flags required to run the application well, Java or native agents and more. In short, a capsule is a self-contained JAR that knows everything there is to know about how to run your application the way it's meant to run. One way of thinking about a capsule is as a fat JAR on steroids (that also allows native libraries and never interferes with your dependencies) and a declarative startup script rolled into one; another, is to see it is as the deploy-time counterpart to your build tool. Just as a build tool manages your build, Capsule manages the launching of your application. But while plain capsules are cool and let you ship any JVM application -- no matter how complex -- as a single executable JAR, caplets make capsules even more powerful. Documentation Capsule website Support Discuss Capsule on the capsule-user Google Group/Mailing List Getting Started Download or: co.paralleluniverse:capsule:1.0.2  or: Clone the repository and gradle install  License Copyright (c) 2014-2015, Parallel Universe Software Co. and Contributors. All rights reserved.  This program and the accompanying materials are licensed under the terms of the Eclipse Public License v1.0 as published by the Eclipse Foundation.      http://www.eclipse.org/legal/epl-v10.html  As Capsule does not link in any way with any of the code bundled in the JAR file, and simply treats it as raw data, Capsule is no different from a self-extracting ZIP file (especially as manually unzipping and examining the JAR's contents is extremely easy). Capsule's own license, therefore, does not interfere with the licensing of the bundled software. In particular, even though Capsule's license is incompatible with the GPL/LGPL, it is permitted to distribute GPL programs packaged as capsules, as Capsule is simply a packaging medium and an activation script, and does not restrict access to the packaged GPL code. Capsule does not add any capability to, nor removes any from the bundled application. It therefore falls under the definition of an ""aggregate"" in the GPL's terminology. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/puniverse/capsule"	"Simple and powerful packaging and deployment. A fat JAR on steroids or a ""Docker for Java"" that supports JVM-optimized containers."	"true"
"Distribution"	"Central Repository"	"http://search.maven.org/"	"Largest binary component repository available as a free service to the open-source community. Default used by Apache Maven and available in all other build tools."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Central Repository Search Engine You May Already Be Registered! If you have an account with one of the following Sonatype services, you can use your existing credentials for that account to log in: Sonatype JIRA (https://issues.sonatype.org) OSS Repository Hosting Service (https://oss.sonatype.org) Sonatype Support Account (i.e. you've purchased a Sonatype Professional product) Why Should I Register? The Central Repository team is constantly collecting useful information about artifacts. Register today, and you get free access to artifact license information. If you have an idea for new types of artifact metadata, click on the Feedback tab on the right-hand side of the page to share it with us! Member Login (Register Now) Username: Password: Invalid credentials supplied!   Hello Guest! | Log In | Register Close Panel Logout   SEARCH    |    ADVANCED SEARCH    |    BROWSE    |    QUICK STATS    |    FAQ The Search Engine for The Central Repository New: About Central Advanced Search   |   API Guide   |   Help The Central Repository Browser Advanced Search Use the forms below and your advanced search query will appear here By Coordinate GroupId: ArtifactId: Version: Packaging: Classifier: By Classname Classname: By SHA-1 Checksum SHA-1 Checksum: Search Results Search for Browse About Sonatype About Content Sonatype Blogs Subscribe to RSS headline updates from: Powered by FeedBurner Apache Maven Resources Resources Content Tweets by @sonatype_ops Search Help Help API Guide API Quick Statistics for The Central Repository Quick Stats Frequently Asked Questions FAQ Apache Maven Resources   |   About Sonatype   |   Privacy Policy   |   Terms of Service Apache and Apache Maven are trademarks of the Apache Software Foundation. The Central Repository is a service mark of Sonatype, Inc. The Central Repository is intended to complement Apache Maven and should not be confused with Apache Maven. Copyright ©2011 Sonatype, Inc."	"null"	"null"	"Largest binary component repository available as a free service to the open-source community. Default used by Apache Maven and available in all other build tools."	"true"
"Distribution"	"IzPack"	"http://izpack.org/"	"Setup authoring tool for cross-platform deployments."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IzPack - Package once. Deploy everywhere. IzPack Downloads News Wiki Bugs and Wishes More Get involved Mailing lists They love IzPack Bug tracker archive (Codehaus) IzPack is a widely used tool for packaging applications on the Java platform. Easily make installers that work seamlessly on Microsoft Windows, Linux, Solaris and Mac OS X. Keep your users happy just right before they get their hands on your software for the first time. Read what our users say »   Download IzPack » Opensource, since 2001 IzPack is published under the terms of the Apache Software License, Version 2.0, meaning that you can adapt it to your needs with very minimal constraints. IzPack is developed by a community of benevolent contributors. We encourage contributions with minimal bureaucracy. Come and help us! Hack on IzPack » Customizable IzPack does not predefine a rigid installation canvas. You can freely pick the elements that you would like to assemble. You can choose how your installer should look like. Oh, and you can always extend it shall you not find the features you would be looking for! Read the documentation » Cross-platform The very same installer works on any operating system where a Java SE 6+ virtual machine exists. IzPack-generated installers also provide optional native integration such as creating desktop shortcuts, manipulating a system registry or switching to an administrator account during the installation. Download IzPack » Follow @izpack Follow IzPackon Subscribe to our mailing lists IzPack is © 2001 – 2016 Julien Ponge, René Krell and many others. This page is hosted on GitHub Pages. The IzPack public website by http://izpack.org/ is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License."	"null"	"null"	"Setup authoring tool for cross-platform deployments."	"true"
"Distribution"	"JitPack"	"https://jitpack.io/"	"Easy to use package repository for GitHub. Builds Maven/Gradle projects on demand and publishes ready-to-use packages."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"586"	"19"	"20"	"GitHub - jitpack/jitpack.io: Documentation and issues of https://jitpack.io Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 586 Fork 20 jitpack/jitpack.io Code Issues 193 Pull requests 1 Pulse Graphs Documentation and issues of https://jitpack.io 176 commits 2 branches 0 releases 2 contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags android master Nothing to show Nothing to show New pull request Latest commit 04414df Jul 6, 2016 jitpack-io committed on GitHub Update README.md Permalink Failed to load latest commit information. img BitBucket Api key Jan 4, 2016 .gitignore Update docs Jul 17, 2015 ANDROID.md Update ANDROID.md Mar 20, 2016 API.md Documenting which builds can be deleted Apr 9, 2016 BUILDING.md cross origin api access Jun 26, 2016 FAQ.md Update FAQ.md Mar 5, 2016 LICENSE Update LICENSE Oct 4, 2015 PRIVATE.md Update PRIVATE.md Jan 26, 2016 README.md Update README.md Jul 6, 2016 README.md JitPack.io JitPack is a novel package repository for JVM and Android projects. It builds Git projects on demand and provides you with ready-to-use artifacts (jar, aar). If you want your library to be available to the world there is no need to go through project build and upload steps. All you need to do is push your project to GitHub and JitPack will take care of the rest. That’s really it! Need help setting up a repo? Come to In case your project is already on GitHub JitPack makes sure it can be built by anyone. Want to use a GitHub library in your project project? Follow the simple steps explained in the ‘Building with Jitpack’ section. For issues and enhancements please use the JitPack GitHub repository. The repository contains this documentation and contributions are welcome there as well. Building with JitPack If you are using Gradle to get a GitHub project into your build you will need to: Step 1. Add the JitPack maven repository to the list of repositories:     url ""https://jitpack.io"" Step 2. Add the dependency information: Group: com.github.Username Artifact: Repository Name Version: Release tag, commit hash or -SNAPSHOT That's it! The first time you request a project JitPack checks out the code, builds it and sends the Jar files back to you. To see an example head to jitpack.io and 'Look Up' a GitHub repository by url. Gradle example:     allprojects {         repositories {             jcenter()             maven { url ""https://jitpack.io"" }         }    }    dependencies {         compile 'com.github.User:Repo:Version'    } Note: when using multiple repositories in build.gradle it is recommended to add JitPack at the end. Gradle will go through all repositories in order until it finds a dependency. Snapshots Snapshot versions are useful during development. A snapshot is a version that has not been released. The difference between a real version and a snapshot is that snapshot might still get updates. Snapshot versions are useful during development process and JitPack provides two ways to get them. You can specify a version for your dependency as: commit hash branch-SNAPSHOT (replace 'branch' with any branch name, e.g. master) For example:     // dependency on the latest commit in the master branch     compile 'com.github.jitpack:gradle-simple:master-SNAPSHOT' Adding -SNAPSHOT will build the latest commit on the master branch. Gradle can cache the SNAPSHOT builds. You could add the following configuration in your build.gradle file in order to ensure Gradle always picks up the 'freshest' version of the build. configurations.all {     resolutionStrategy.cacheChangingModulesFor 0, 'seconds' } Or you could also run Gradle from the command line with the --refresh-dependencies flag. See the Gradle documentation for more information on how to configure caching for changing dependencies. Note If using Android Studio don't forget to press File->Synchronize after updating to a newer snapshot. See also the Guide to building for more details and for instructions on building multi-module projects. If the project doesn't have any GitHub Releases you can get the latest snapshot build. In this case use the short commit id as the version. You can also place tags on other branches and then build using those tags. Tip: You can also automate GitHub releases with Gradle release & version management plugin Publishing on JitPack Publishing your library on JitPack is very simple: Create a GitHub Release As long as there's a build file in your repository and it can install your library in the local Maven repository, it is sufficient for JitPack. See the Guide to building on how to publish JVM libraries and Guide to Android on how to publish Android libraries. Tip: You can try out your code before a release by using the commit hash as the version. ** Some extras to consider ** Add dependency information in your README. Tell the world where to get your library:    repositories {         jcenter()         maven { url ""https://jitpack.io"" }    }    dependencies {          compile 'com.github.jitpack:gradle-simple:1.0'    } Add sources jar. Creating the sources jar makes it easier for others to use your code and contribute. Show up-to-date version in HTML. If your project has a website or GitHub pages then you can display the latest release using this script Features Javadoc publishing. If the project produces a javadoc.jar then you can browse the javadoc files directly at: https://jitpack.io/com/github/USER/REPO/VERSION/javadoc/ See the example projects on how to configure your build file. Android example Private repositories Dynamic versions. You can youse Gradle's dynamic version '1.+' and Maven's version ranges for releases. They resolve to releases that have already been built. JitPack periodically checks for new releases and builds them ahead-of-time. Build by tag, commit id or anyBranch-SNAPSHOT. You can also use your own domain name for groupId Other Git hosts JitPack also works with other Git hosting providers. The only difference is the groupId of your artifacts: BitBucket: org.bitbucket.Username:Repo:Tag GitLab: com.gitlab.Username:Repo:Tag Too see an example head to https://jitpack.io and 'Look Up' a Git repository by url. Custom domain name If you want to use your own domain name as the groupId instead of com.github.yourcompany, you can. We support mapping your domain name to your GitHub organization. Then instead of 'com.github.yourcompany' groupId you can use 'com.yourcompany' while the name of the project and version remains the same. To enable your own domain name: Add a DNS TXT record that maps git.yourcompany.com to https://github.com/yourcompany. This needs to be configured at your domain name provider such as GoDaddy. For example see How to add a TXT record. Go to https://jitpack.io/#com.example/yourrepo and click Look up. If DNS resolution worked then you should see a list of versions. Select the version you want and click 'Get it' to see Maven/Gradle instructions. Example: https://jitpack.io/#io.jitpack/gradle-simple To check that the DNS TXT record was added run the command dig txt git.yourcompany.com. For example: ~$ dig txt git.jitpack.io ... ;; ANSWER SECTION: git.jitpack.io.     600 IN  TXT ""https://github.com/jitpack""  Badges Add this line to your README.md to show a status badge with the latest release: [![Release](https://jitpack.io/v/User/Repo.svg)](https://jitpack.io/#User/Repo) If you are using a custom domain or BitBucket then use: [![Release](https://jitpack.io/v/com.example/Repo.svg)](https://jitpack.io/#com.example/Repo) [![Release](https://jitpack.io/v/org.bitbucket.User/Repo.svg)](https://jitpack.io/#org.bitbucket.User/Repo) Or if you prefer the flat-squared style: https://jitpack.io/v/User/Repo.svg?style=flat-square FAQ See the FAQ page Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jitpack/jitpack.io"	"Easy to use package repository for GitHub. Builds Maven/Gradle projects on demand and publishes ready-to-use packages."	"true"
"Distribution"	"Nexus"	"http://www.sonatype.com/nexus/solution-overview"	"Binary management with proxy and caching capabilities."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Nexus | Repository, Firewall, Lifecycle - Sonatype <iframe src=""//www.googletagmanager.com/ns.html?id=GTM-TT8R4P"" height=""0"" width=""0"" style=""display:none;visibility:hidden""> New Research: 2016 State of the Software Supply Chain - Download the Report About Blog Partners Community Support Products Overview Nexus Lifecycle Nexus Firewall Nexus Auditor Nexus Repository Pro Nexus Repository OSS Pricing Innovators CEO DevOps Security Development Governance Personal Journeys Customers Overview Learn Overview Data Services Application Health Check Events Training White Papers Webinars Documentation Get Nexus Nexus Products Overview Start here for a healthy software supply chain. 2016 State of the Software Supply Chain Get the Report  Component Management Powered by Repository Manager Component Intelligence Powered by IQ Server Nexus Repository OSS Nexus Repository Pro Nexus Firewall Nexus Lifecycle A free repository manager with universal support for popular component formats. Basic component intelligence Supports Maven, Docker, NuGet, npm, PyPI, Bower, and more The enterprise-grade solution for managing software components. Advanced Component Intelligence High availability powered by Component Fabric Enterprise-level support and training Automatically stop risky components from entering your software supply chain. Custom policy for repositories Detailed repository reporting Integrates seamlessly with Nexus Repository Pro Surface component intelligence throughout your entire software supply chain. Custom policy for applications Detailed application reporting Integrates seamlessly with popular development tools Continuously monitor applications in production Download Learn More Learn More Learn More What's included in the Nexus Software Supply Chain Platform? Click on a feature to learn more. Docker npm NuGet Maven P2 Support YUM RubyGems OSGi Bundle Smart Proxy Unlimited Deployment Component Intelligence Component Search MetaData Repository REST Repository Plugins Repository Integrations Authentication/Token Custom Access Controls Enterprise LDAP Atlassian Crowd Staging and Release Community Support Enterprise Support Java .Net JavaScript Eclipse IntelliJ IDEA Jenkins Atlassian Bamboo SonarQube Repository Integration Maven Plugin Security LDAP IQ REST API Sonatype Data Services Application Hieararchy Application Monitoring Actions and Notifications Component Labels Application Categories Adhoc Evaluation Command Line Policy Management Threat Level License Threat Groups Issue Status Application Composition Report Dashboard Bill of Materials Component Matching Repository Manager Features & Integrations Docker Support includes Docker registries as the Docker repository format for hosted and proxy repositories. You can expose these repositories to the client-side tools directly or as a repository group, which is a repository that merges and exposes the contents of multiple repositories in one convenient URL. User Documentation npm Node.js developers, Grunt users, and others can use Nexus Repository Manager to proxy npmjs.org and others as well as easily host their own packages. User Documentation NuGet .Net developers can take advantage of the NuGet package manager and the integration in VisualStudio to manage their own and third-party packages. User Documentation Maven The Maven 2 repository format is supported by tools such as Apache Maven, Apache Ant, Apache Ivy, Eclipse Aether, Gradle, SBT, Leiningen and others.If you still rely on Maven 1 repositories, Nexus Repository Manager can expose them in Maven 2 format to help with your migration efforts. User Documentation Bower Register your own packages to a private Bower registry as a hosted repository on the repository manager and then expose the remote and private repositories to Bower as a repository group. This provides a repository that merges and exposes the contents of multiple repositories in one convenient URL. User Documentation P2 Support Provide P2 repositories to your Eclipse IDE users or distribute your Eclipse RCP application by proxying and hosting P2 repositories. User Documentation YUM Establish a deployment pipeline from your Maven build to your Linux servers using RPM packages and YUM repositories. User Documentation RubyGems Ruby, Rails, JRuby, Torquebox users and others using gem or Bundler can enjoy the benefits of proxying and hosting gem repositories. User Documentation OSGI Bundle Use Nexus Repository Manager to proxy and host OSGi bundle repositories. User Documentation Smart Proxy Smart Proxy enables immediate deployment notification to downstream Nexus servers. This allows you toto scale to as many Nexus instances as you desire quickly and efficiently, getting components right to where your teams need them, as fast as possible. User Documentation Unlimited Deployment Scale your organization and deployment to as many servers and datacenters as you like without worrying about licensing. User Documentation Component Search A valuable tool for discovering the latest versions and what is available remotely. Component Search provides a variety of search critera including by keyword. Additional features include the ability to display all the transitive dependencies of your component without the necessitiy to use any external tools, as well as ddd any key-value pair annotations to components and find them via search. User Documentation Component Intelligence Access a range of component intelligence data including age, popularity, security vulnerabilities and license issues for components in your repositories. User Documentation MetaData Add any key-value pair annotations to compoentns and find them via search. User Documentation Repository REST Integrate Nexus Repository Manager with any tool that can work with plain HTTP or REST API's. A number of open source integrations with common tools are already available and supported by the robust Nexus Repository OSS community. User Documentation Repository Plugins Add support for a new repository format, a new scheduled task, a new staging rule or any other extensions of Nexus Repository Manager you can think of. In some instances, we may even include your plugin as part of Nexus Repository Manager (e.g. RubyGems or Yum). User Documentation Repository Integrations A large number of integrations and extensions such as Docker images, Chef and Puppet support, command line interface already exist. Expanding this even further are many more available through the active Nexus Repository Manager open source community. User Documentation Authentication/Token Support The built-in security system provides authentication and authorization control out of the box. We've even made sure you can avoid clear text storage of username and passwords on developer machines and CI servers. User Documentation Custom Access Controls Grant users create, read, update, and delete access to user interface features, or even specific components. User Documentation Enterprise LDAP Going beyond standard LDAP, Enterprise LDAP functionality includes support for caching, multiple LDAP servers, templates, failover and more. User Documentation Atlassian Crowd Connect Nexus Repository Manager to the same security backend as Confluence, Bamboo and JIRA. User Documentation Staging and Release Deploy directly to the desired repository with your choice of build or deployment tool, or via straight HTTP. Includes dedicated security setup, automated rule validation, notifications and ability to re-run release. User Documentation Community Support Around the clock, around the world. We are here to help. From supporting the popular community Q&A site to exchange experiences with other users and be notified of releases and more. Chat to the developers and support staff in realtime. The free book Repository Management with Nexus is available online and constantly updated. Access in-depth information from our support team at your fingertips. Public and private classes making you a Nexus Repository Manager champion. Blog posts, videos and everything that goes on in the community around Nexus products. User Documentation Enterprise Support While all users of Nexus Repositor7 Manager (include Nexus Repository OSS) have access to documentation, knowledge base articles, and community-based support. Enterprise support includes direct access to our Nexust Repository Manager experts, with option 24/7 access if desired. User Documentation IQ Server Features & Integrations Java Available in all IQ Server powered products, and continuously updated, component intelligence for the Java ecosystem includes security, license, age, and popularity. When applicable detailed security findings, including suggested paths to remediation are also included. .Net Available in all IQ Server powered products, and continuosly updated, component intelligence for the .Net ecosystem includes support for NuGet packages. For supported components, security and license data help your teams identify risk associated with identified components, with the ability to define policy and automate actions associated with the presence of policy violations. JavaScript Available in all IQ Server powered products, and continuously updated, component intelligence for the JavaScript ecosystem includes security data, as well as the ability to define policy that empowers your teams to easily identify risk associated with identified components. Added to this is the ability to define policy and automate actions associated with the presence of policy violations. Eclipse Nexus IQ for the Eclipse IDE provides development teams with always-on access to Soantype's full range of component intelligence directly within the Eclipse user interface. This includes the ability to evaluate applictions against an organizations policy as well as the ability to retreive component data across any known versions of a component. In addition to the automatic policy violation, security, license, and quality information for components, any required dependencies (including transitive) will be evaluated as well. Features specific to Ecipse include component comparison across a variety of facets including potential policy violations, security vulnerabilities, license issues, and quality information as well as the ability to easily migrate to different version of components when necessary. User Documentation IntelliJ IDEA Nexus IQ for IntelliJ IDEA provides always-on access to security vulnerability, license issue, and other quality related data, including paths to remediation, directly inside the IDEA user interface. This integration also provides detailed evaluation of applications against an organization's established component policy, instantly letting development teams understand which components are intriducing risk, or could cause potential issues in the future. Bringing this all together, component data is not isolated to a single version, but all known versions of a component. User Documentation Jenkins IQ Server integration with Jenkins enables software supply chain automation at the CI level with options to warn and/or fail builds, as well as notify team members, when components out of compliance with defined policy are found in your applications. In addition, summary-level information is provided at the time of build evaluation, and directly inside the Jenkins interface, with links to detailed report located on IQ Server. User Documentation Atlassian Bamboo IQ Server integration for Bamboo enables software supply chain automation at the CI level with options to warn and/or fail builds, as well notify team members, when components out of compliance with defined policy are found in your applicatons. In addition, summary-level information is provided at the time of build evaluation, and directly inside the Bamboo interface, with links to detailed report located on IQ Server. User Documentation Nexus Repository Integration Direct integration with Nexus Repository Pro provides the ability to audit the quality of components entering your supply chain, as well as evaluate components found in applications being staged or released. Using the native Quarantine feature, you can define automated policy to recognize and block unwanted components by their attributes. This stops these unwanted components from finding their way into your applications and the rework later to remove them. In addition, a summary level overview for policy violations by repository is included directly inside Nexus Repository Manager, with access to a detailed view of components found in your repositories. User Documentation Maven Plugin Using the provided Nexus IQ for Maven plugin, users have the ability to support their Maven builds with the world's best component intelligence. In addition you can set builds to fail due to violations, including those found in transitive dependencies. User Documentation SonarQube SonarQube has become a defacto standard for helping teams engineer quality into their applications. The SonarQube integration provides always-on component intelligence directly in SonarQube projects and Dashboards, ensuring teams are evaluating every facet of high-quality application development. User Documentation Sonatype Data Services IQ Server is directly integrated with Sonatype Data Services, our proprietary approach to component intelligence. To learn more check out the Sonatype Data Services area in the Learn section of our site. Security Grant different users access only to user interface features they should use. Grant different users access only to specific components with create, read, update and delete restrictions. User Documentation IQ REST API IQ Server includes a full suite of public REST APIs you can use to integrate with your own in-house applications, or customize for integration with tools we don't currently support. The range of data you'll have access to includes on-demand evaluation of individual components and/or applications, component search and intelligence, and deatiled policy information and management. User Documentation Application Hieararchy The customized structure of IQ Server's application management is based on a tree-like structure allowing you to provid global policy for all teams, and then refine that down to individual teams, and even specific applications. Additional features like application categories provide a way to insure applications of a specific type will always be evaluated against the right policies. User Documentation Application Monitoring After applications go to production, it's likely new vulnerabilities or other quality related issued will be discovered. IQ Server's application monitoring provides continuous, ongoing component intelligence for applications in production, with the ability to notify members of your team when issues are identified. User Documentation Actions and Notifications Integrations into tools your teams already use (e.g. Eclipse, IntelliJ, Jenkins, Bamboo, Nexus Repository Pro), is a central part of IQ Server. A number of automated actions are provided that allow you to notify team members when issues are detected. In more extreme cases actions can prevent components from being downloaded into a repository, being built, or moving to production. As with policy this can be managed globally or down to the specific application. User Documentation Component Labels Not everyone on your team will be as intimately familiar with a specific components as the next person. For this reason, the IQ Server provides teams with the ability to create a component label and a corresponding description. This flexibility is further extended with the ability to manage labels globally and by specific application. IQ Server even lets you base policy on the presence (or absence) of a specific component label. User Documentation Application Categories Not every application will have the same exposure or have a similar attack surface for vulnerabilities. The Application Categories feature in IQ Server lets you make sure applications are always evaluated against the right set of policies. User Documentation Ad hoc Evaluation Not every application follows a modern development or build process. In some cases, you may not even have access to anything other than a completed application. For these situations, and any others that arise, the IQ Server allows ad hoc evaluation of any application. This can be done via the user interface, directly at the IQ Server level, from the command line, or a range of plugins and APIs. User Documentation Command Line For those with a tool we don't currently integrate with (we add more each release), or in cases when your development team prefers to interact with the IQ Server from the Command Line, you'll have for support and endless expandability with our CLI (Command Line Interface) tool. Of course, IQ Server already provides direct integrations with a variety of today's most popular tools (e.g. Nexus Repository, Eclipse, Atlassian Bamboo, IntelliJ by IDEA, and Jenkins). User Documentation Policy Management Managing component usage in the modern Software Supply Chain isn't simply about defining what components a team should use. That's not scalable and generally results in inefficient development. Instead, defining what bad components look like, and delivering that information directly to development teams and decision makers becomes a critical path forward. This becomes the key differentiator between micromanaging development and empowering teams to move quickly and efficiently, stopping risk before it's ever introduced. User Documentation Threat Level Not every component introduces the same amount of risk. In some cases they may not present any risk at all, and instead simply provide a check to ensure overall quality. With the ability to customize a policy's threat level, you can organize policy violations by the most severe, ensuring teams know exactly which issues they need to tackle first. User Documentation License Threat Groups Even for experts, software licensing can be a complex subject. For development teams unfamiliar with this type of risk, determining which licenses associated with a component present risk can be equally difficult. License Threat Groups allow your internal experts to define which licenses pose a potential threat, and convey that in an easy-to-understand and view format for development teams. Additionally, you can set policy based on License Threat Groups, which can be enforced throughout your software supply chain. User Documentation Issue Status Every evaluation of an application provides a detailed report (i.e. The Application Composition Report). While this report is the central source of determining the health of an application, it's not static. The included ability to set the Issue Status of identified security vulnerabilities and license issues, provides a way for your team to automate the flow, as well as build policy around these statuses. User Documentation Application Composition Report Every application evalutation performed by IQ Server produces a detailed, application composition report. This report includes summary level security, license, quality, and policy data along with the ability to dive into the details of every component identified. In addition, teams will have the ability to label and waive components, review remediation recommendations, and assign status to any indentified issues. User Documentation Dashboard The IQ Server's main view provides a top level view of the health of your applications. Identified policy violations, organized by their assigned threat provide a path to peel back layers all the way to specific components, the application they were found in, and exactly where they were found. User Documentation Bill of Materials As part of every evaluation, IQ Server provides a detailed list of every component identied inside an application. If desired this can be exported to PDF for easy distribution. User Documentation LDAP In addition to a robust, built-in user management and role-based permission system, products powered by IQ Server include the ability to support integration for users via LDAP. User Documentation Component Matching Not only does Sonatype provide the most in-depth and unique component intelligence, our approach to exact component matching greatly reduces the possibility of false positives. This is accomplished through precise identification, and is at the heart of our automated approach. Using patented, proprietary matching algorithms our products intelligently match what's found in your applications, not just to known open source, claimed, and proprietary components, but also in cases where just a part of the component resembles something known to Sonatype's vast collection of component data. User Documentation Already using Nexus products? Twitter LinkedIn Facebook Google+ YouTube Products Nexus Lifecycle Nexus Firewall Nexus Auditor Nexus Repository Pro Nexus Repository OSS Innovators CEO DevOps Security Development Governance Customers Overview Learn Overview Data Services Training White papers Webinars Documentation Company About Blog Community Partners Support Contact Us Terms of Service    Privacy Policy Copyright © 2008-present, Sonatype Inc. All rights reserved. Includes the third-party code listed here. Sonatype and Sonatype Nexus are trademarks of Sonatype, Inc. Apache Maven and Maven are trademarks of the Apache Software Foundation. M2Eclipse is a trademark of the Eclipse Foundation. All other trademarks are the property of their respective owners. Sonatype Headquarters - 8161 Maple Lawn Blvd #250, Fulton, MD 20759 Tysons Office - 8251 Greensboro Blvd #610, McLean, VA 22102"	"null"	"null"	"Binary management with proxy and caching capabilities."	"true"
"Distribution"	"packr"	"https://github.com/libgdx/packr/"	"Packs JARs, assets and the JVM for native distribution on Windows, Linux and Mac OS X."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1418"	"60"	"63"	"GitHub - libgdx/packr: Packages your JAR, assets and a JVM for distribution on Windows, Linux and Mac OS X Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 1,418 Fork 63 libgdx/packr Code Issues 14 Pull requests 2 Pulse Graphs Packages your JAR, assets and a JVM for distribution on Windows, Linux and Mac OS X 177 commits 1 branch 3 releases 14 contributors Java 48.1% C++ 47.0% CMake 1.7% Shell 1.6% Other 1.6% Java C++ CMake Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show packr-1.2 packr-1.1 packr-1.0 Nothing to show New pull request Latest commit 08a74d4 Jun 18, 2016 code-disaster committed on GitHub Merge pull request #64 from code-disaster/osx-app-store … MacOS: Updated bundle structure to meet Mac App Store requirements Permalink Failed to load latest commit information. src/main MacOS: use Contents/Resources as default working directory. Jun 13, 2016 .gitignore Ignore VS files. Nov 1, 2014 AUTHORS Refactored Java code. Feb 25, 2016 LICENSE added license May 5, 2014 README.md MacOS: output everything but executable to Contents/Resources. Jun 13, 2016 example-config-linux.json Refactored Java code. Feb 25, 2016 example-config-mac.json Refactored Java code. Feb 25, 2016 example-config-windows.json Refactored Java code. Feb 25, 2016 pom.xml Refactored Java code. Feb 25, 2016 README.md packr Public Service Announcement: With packr v2.0, command line interfaces to both packr.jar and the native executable have changed, as well as the format of minimize profiles! If you upgrade from a previous version, please read this documentation again to make sure you've updated your configuration(s) accordingly. About Packages your JAR, assets and a JVM for distribution on Windows, Linux and Mac OS X, adding a native executable file to make it appear like a native app. Packr is most suitable for GUI applications, such as games made with libGDX. Download Packr Usage You point packr at your JAR file(s) containing your code and assets, some configuration parameters, and a URL or local file location to a JDK build for your target platform. Invoking packr from the command line may look like this: java -jar packr.jar \      --platform mac \      --jdk openjdk-1.7.0-u45-unofficial-icedtea-2.4.3-macosx-x86_64-image.zip \      --executable myapp \      --classpath myapp.jar \      --mainclass com.my.app.MainClass \      --vmargs Xmx1G \      --resources src/main/resources path/to/other/assets \      --minimizejre soft \      --output out-mac Parameter Meaning platform one of ""windows32"", ""windows64"", ""linux32"", ""linux64"", ""mac"" jdk ZIP file location or URL to an OpenJDK or Oracle JDK build containing a JRE. Prebuild OpenJDK packages can be found at https://github.com/alexkasko/openjdk-unofficial-builds executable name of the native executable, without extension such as "".exe"" classpath file locations of the JAR files to package mainclass the fully qualified name of the main class, using dots to delimit package names vmargs list of arguments for the JVM, without leading dashes, e.g. ""Xmx1G"" resources (optional) list of files and directories to be packaged next to the native executable minimizejre minimize the JRE by removing directories and files as specified by an additional config file. Comes with a few config files out of the box. See below for details on the minimization config file. output the output directory icon (optional, OS X) location of an AppBundle icon resource (.icns file) bundleidentifier (optional, OS X) the bundle identifier of your Java application, e.g. ""com.my.app"" verbose prints more status information during processing, which can be useful for debugging help shows the command line interface help Alternatively, you can put all the command line arguments into a JSON file which might look like this: {     ""platform"": ""mac"",     ""jdk"": ""/Users/badlogic/Downloads/openjdk-1.7.0-u45-unofficial-icedtea-2.4.3-macosx-x86_64-image.zip"",     ""executable"": ""myapp"",     ""classpath"": [         ""myapp.jar""     ],     ""mainclass"": ""com.my.app.MainClass"",     ""vmargs"": [        ""Xmx1G""     ],     ""resources"": [         ""src/main/resources"",         ""path/to/other/assets""     ],     ""minimizejre"": ""soft"",     ""output"": ""out-mac"" } You can then invoke the tool like this: java -jar packr.jar my-packr-config.json It is possible to combine a JSON configuration and the command line. For single options, the command line parameter overrides the equivalent JSON option. For multi-options (e.g. classpath or vmargs), the options are merged. This is an example which overrides the output folder and adds another VM argument. Note that the config file name is delimited by -- because the option prior to it, --vmargs, allows multiple arguments: java -jar packr.jar --output target/out-mac --vmargs Xms256m -- my-packr-config.json Finally, you can use packr from within your Java code. Just add the JAR file to your project, either manually, or via the following Maven dependency: <dependency>    <groupId>com.badlogicgames.packr</groupId>    <artifactId>packr</artifactId>    <version>2.0</version> </dependency> To invoke packr, you need to create an instance of PackrConfig and pass it to Packr.pack(): PackrConfig config = new PackrConfig(); config.platform = PackrConfig.Platform.Windows32; config.jdk = ""/User/badlogic/Downloads/openjdk-for-mac.zip""; config.executable = ""myapp""; config.classpath = Arrays.asList(""myjar.jar""); config.mainClass = ""com.my.app.MainClass""; config.vmArgs = Arrays.asList(""Xmx1G""); config.minimizeJre = ""soft""; config.outDir = ""out-mac"";  new Packr().pack(config); Minimization JRE A standard OpenJDK JRE weighs about 90 mb unpacked. Packr helps you cut down on that size, thus also reducing the download size of your app. To minimize the JRE that is bundled with your app, you have to specify a minimization configuration file via the minimizejre flag you supply to Packr. A minimization configuration is a JSON file containing paths to files and directories within the JRE to be removed. As an example, have a look at the soft profile configuration: {   ""reduce"": [     {       ""archive"": ""jre/lib/rt.jar"",       ""paths"": [         ""com/sun/corba"",         ""com/sun/jndi"",         ""com/sun/media"",         ""com/sun/naming"",         ""com/sun/rowset"",         ""sun/applet"",         ""sun/corba"",         ""sun/management""       ]     }   ],   ""remove"": [     {       ""platform"": ""*"",       ""paths"": [         ""jre/lib/rhino.jar""       ]     },     {       ""platform"": ""windows"",       ""paths"": [         ""jre/bin/*.exe"",         ""jre/bin/client""       ]     }   ] } This configuration will unpack rt.jar, remove all the listed packages and classes in com.sun.* and sun.*, then repack rt.jar again. By default, the JRE uses zero-compression on its JAR files to make application startup a little faster, so this step will reduce the size of rt.jar substantially. Then, rhino.jar (about 1.1MB) and, in case of a Windows JRE, all executable files in jre/bin/ and the folder jre/bin/client/ will be removed. Packr comes with two such configurations out of the box, soft and hard. The hard profile removes a few more files, and repacks some additional JAR files. There's also a new, experimental configuration, oraclejre8, which reduces size of an Oracle 8 JRE following Oracle's redistribution rules described here. It also repacks JAR files, reducing (unpacked) JRE size from about 180 mb to 70 mb. This version is pretty much untested, so please use with care! Classpath Minimization aside, packr also removes all dynamic libraries which do not match the target platform from your project JAR file(s): platform files removed Windows *.dylib, *.so Linux *.dll, *.dylib MacOS *.dll, *.so Output When packing for Windows, the following folder structure will be generated outdir/    executable.exe    yourjar.jar    config.json    jre/  Linux outdir/    executable    yourjar.jar    config.json    jre/  Mac OS X outdir/    Contents/       Info.plist       MacOS/          executable       Resources/          yourjar.jar          config.json          jre/          icons.icns [if config.icon is set]  You can further modify the Info.plist to your liking, e.g. add icons, a bundle identifier etc. If your output folder has the .app extension it will be treated as an application bundle by Mac OS X. Executable command line interface By default, the native executables forward any command line parameters to your Java application's main() function. So, with the configurations above, ./myapp -x y.z is passed as com.my.app.MainClass.main(new String[] {""-x"", ""y.z"" }). The executables themselves expose an own interface, which has to be enabled explicitly by passing -c or --cli as the very first parameter. In this case, the special delimiter parameter -- is used to separate the native CLI from parameters to be passed to Java. In this case, the example above would be equal to ./myapp -c [arguments] -- -x y.z. Try ./myapp -c --help for a list of available options. They are also listed here. Note: On Windows, the executable does not show any output by default. Here you can use myapp.exe -c --console [arguments] to spawn a console window, making terminal output visible. Building from source code If you want to modify the Java code only, it's sufficient to invoke Maven. mvn clean package  This will create a packr-VERSION.jar file in target which you can invoke as described in the Usage section above. If you want to compile the native executables, please follow these instructions. Each of the build scripts will create executable files for the specific platform and copy them to src/main/resources. Limitations Icons aren't set yet on Windows and Linux, you need to do that manually. Minimum platform requirement on MacOS is OS X 10.7. JRE minimization is very conservative. Depending on your app, you can carve out stuff from a JRE yourself, disable minimization and pass your custom JRE to packr. On MacOS, the JVM is spawned in its own thread by default, which is a requirement of AWT. This does not work with code based on LWJGL3/GLFW, which needs the JVM be spawned on the main thread. You can enforce the latter with adding the -XstartOnFirstThread VM argument to your MacOS packr config. License & Contributions The code is licensed under the Apache 2 license. By contributing to this repository, you automatically agree that your contribution can be distributed under the Apache 2 license by the author of this project. You will not be able to revoke this right once your contribution has been merged into this repository. Security Distributing a bundled JVM has security implications, just like bundling any other runtimes like Mono, Air, etc. Make sure you understand the implications before deciding to use this tool. Here's a discussion on the topic. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libgdx/packr/"	"Packs JARs, assets and the JVM for native distribution on Windows, Linux and Mac OS X."	"true"
"Document Processing"	"Apache POI"	"http://poi.apache.org/"	"Supports OOXML (XLSX, DOCX, PPTX) as well as OLE2 (XLS, DOC or PPT)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache POI - the Java API for Microsoft Documents Apache | POI Home | Overview Home Download Components Text Extraction Encryption support Case Studies Related projects Legal Help Javadocs FAQ Mailing Lists Bug Database Changelog Getting Involved Subversion Repository How To Build Contribution Guidelines Who We Are Component APIs Excel (SS=HSSF+XSSF) Word (HWPF+XWPF) PowerPoint (HSLF+XSLF) OpenXML4J (OOXML) OLE2 Filesystem (POIFS) OLE2 Document Props (HPSF) Outlook (HSMF) Visio (HDGF+XDGF) TNEF (HMEF) Publisher (HPBF) Logging framework Apache Wide Apache Software Foundation License Sponsorship Thanks Security Search Apache POI Apache POI - the Java API for Microsoft Documents Project News 02 July 2016 - POI 3.15-beta2 available The Apache POI team is pleased to announce the release of 3.15-beta1. Featured are a handful of new areas of functionality and numerous bug fixes. A summary of changes is available in the Release Notes. A full list of changes is available in the change log. People interested should also follow the dev list to track progress. See the downloads page for more details. 05 March 2016 - POI 3.14 available The Apache POI team is pleased to announce the release of 3.14, our next stable release. Featured are a several new areas of functionality, and numerous bug fixes. A summary of changes is available in the Release Notes. A full list of changes is available in the change log. People interested should also follow the dev mailing list to track further progress. See the downloads page for more details. 12 January 2016 - New case study - Deutsche Bahn A new case study by Deutsche Bahn was published here. It describes how Deutsche Bahn Netz AG (the owner of the German rail infrastructure) uses POI to process specification documents for a European-wide railroad cooperation effort (openETCS). The description contains links to more detailed information so take a look! Mission Statement The Apache POI Project's mission is to create and maintain Java APIs for manipulating various file formats based upon the Office Open XML standards (OOXML) and Microsoft's OLE 2 Compound Document format (OLE2). In short, you can read and write MS Excel files using Java. In addition, you can read and write MS Word and MS PowerPoint files using Java. Apache POI is your Java Excel solution (for Excel 97-2008). We have a complete API for porting other OOXML and OLE2 formats and welcome others to participate. OLE2 files include most Microsoft Office files such as XLS, DOC, and PPT as well as MFC serialization API based file formats. The project provides APIs for the OLE2 Filesystem (POIFS) and OLE2 Document Properties (HPSF). Office OpenXML Format is the new standards based XML file format found in Microsoft Office 2007 and 2008. This includes XLSX, DOCX and PPTX. The project provides a low level API to support the Open Packaging Conventions using openxml4j. For each MS Office application there exists a component module that attempts to provide a common high level Java api to both OLE2 and OOXML document formats. This is most developed for Excel workbooks (SS=HSSF+XSSF). Work is progressing for Word documents (HWPF+XWPF) and PowerPoint presentations (HSLF+XSLF). The project has some support for Outlook (HSMF). Microsoft opened the specifications to this format in October 2007. We would welcome contributions. There are also projects for Visio (HDGF and XDGF), TNEF (HMEF), and Publisher (HPBF). As a general policy we collaborate as much as possible with other projects to provide this functionality. Examples include: Cocoon for which there are serializers for HSSF; Open Office.org with whom we collaborate in documenting the XLS format; and Tika / Lucene, for which we provide format interpretors. When practical, we donate components directly to those projects for POI-enabling them. Why should I use Apache POI? A major use of the Apache POI api is for Text Extraction applications such as web spiders, index builders, and content management systems. So why should you use POIFS, HSSF or XSSF? You'd use POIFS if you had a document written in OLE 2 Compound Document Format, probably written using MFC, that you needed to read in Java. Alternatively, you'd use POIFS to write OLE 2 Compound Document Format if you needed to inter-operate with software running on the Windows platform. We are not just bragging when we say that POIFS is the most complete and correct implementation of this file format to date! You'd use HSSF if you needed to read or write an Excel file using Java (XLS). You'd use XSSF if you need to read or write an OOXML Excel file using Java (XLSX). The combined SS interface allows you to easily read and write all kinds of Excel files (XLS and XLSX) using Java. Additionally there is a specialized SXSSF implementation which allows to write very large Excel (XLSX) files in a memory optimized way. Components The Apache POI Project provides several component modules some of which may not be of interest to you. Use the information on our Components page to determine which jar files to include in your classpath. Contributing So you'd like to contribute to the project? Great! We need enthusiastic, hard-working, talented folks to help us on the project, no matter your background. So if you're motivated, ready, and have the time: Download the source from the Subversion Repository, build the code, join the mailing lists, and we'll be happy to help you get started on the project! To view the ""Help Wanted"" tasks, an internet connection is required. Please read our Contribution Guidelines. When your contribution is ready submit a patch to our Bug Database. by Andrew C. Oliver, Glen Stampoultzis, Avik Sengupta, Rainer Klute, David Fisher Copyright © 2002-2016 The Apache Software Foundation. All rights reserved. Apache, Apache POI, and the Apache POI logo are registered trademarks or trademarks of The Apache Software Foundation in the U.S. and/or other countries."	"null"	"null"	"Supports OOXML (XLSX, DOCX, PPTX) as well as OLE2 (XLS, DOC or PPT)."	"true"
"Document Processing"	"documents4j"	"http://documents4j.com"	"API for document format conversion using third-party converters such as MS Word."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"documents4j - A document format converter for Java documents4j documents4j is a Java library for converting documents into another document format. This is achieved by delegating the conversion to any native application which understands the conversion of the given file into the desired target format. documents4j comes with adaptations for MS Word and MS Excel for Windows what allows for example for the conversion of a docx file into a pdf file without the usual distortions in the resulting document which are often observed for conversions that were conducted using non-Microsoft products. Toggle navigation documents4j {{item.name}} Need for support? Questions Feel free to ask questions about documents4j on Stack Overflow and tag them with documents4j. We are monitoring questions with this tag and will normally answer as quickly as possible. We think that Stack Overflow is a great place to share knowledge which is why we decided to not maintain our own support platform. If you have a question that does not fit into Stack Overflow's Q&A format, please ask your question on our mailing list instead. Bugs and feature requests You can register any bug or misbehavior in documents4j's issue tracker. If possible, please provide a code sample that reproduces the bug. Furthermore, you should include information on the Java version that you were using. If you have a suggestion for a new feature, you can also use the issue tracker. If you want to discuss this feature first, start such a discussion on out mailing list. Development If you have fixed a bug or developed a feature for documents4j that you want to share, simply create a pull request for it. If you are planning to implement an extensive feature for documents4j, please get in touch before starting its development. This way, we can coordinate the development process. You can find more information on our development page. Thank you for improving documents4j! Discover documents4j was originally a project for the city municipality of Oslo and was developed by Kantega AS. It was later open-sourced and is now maintained by Rafael Winterhalter. It was first published in 2013. Thank you for spreading the word! Thank-you note I want to thank the city municipality of Oslo and Kantega AS for their support of open-sourcing this project. I further want to thank Dean who created the logo for documents4j. Legal © Rafael Winterhalter, Scienta AS, Arbinsgate 11, 0253 Oslo, Norway"	"null"	"https://github.com/raphw/documents4j"	"API for document format conversion using third-party converters such as MS Word."	"true"
"Document Processing"	"docx4j"	"http://www.docx4java.org/trac/docx4j"	"Creating and manipulating Microsoft Open XML files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"docx4j     Search Forums Blog Downloads Contact ""I've had more success with docx4j than anything else"" ""congratulations for the great job, I can do things that I cannot with POI or OpenOffice API !!"" ""Now armed with docx4j, it was much easier to use the approach I envisioned to generate Word documents."" ""I have been using docx4j over the last month on a new product, and I'm impressed and thankful for how much docx4j does."" ""This library gives you everything you need to create/load/edit/write Word docx documents from Java, and comes with a Maven repo, online Javadoc, and nice set of Sample code. What more could you ask for? :-)"" ""With docx4j we analyze and enrich each paragraph of a law project containing more than 3000 paragraphs and this is done in less than 10 seconds."" ""thanks a lot for your good work. docx4j is easy to use and I like it."" Welcome to docx4j docx4j is an open source (ASLv2) Java library for creating and manipulating Microsoft Open XML (Word docx, Powerpoint pptx, and Excel xlsx) files. It is similar to Microsoft's OpenXML SDK, but for Java. docx4j uses JAXB to create the in-memory object representation. Its emphasis is on power: if the file format supports it, you can do it with docx4j. But first, you'll need to take the time to understand JAXB, and the Open XML file structure docx4j was created by Plutext Pty Ltd in 2008 - using OpenXML4J for the OPC piece. Plutext still drives the project, but since then docx4j has benefited from contributions from many individuals. The contributors are listed in docx4j's pom.xml. Key links  Download docx4j, or compare the  Docx4j Enterprise Edition View sample code for  docx4j,  pptx4j, and  xlsx4j docx4j documentation: cheat sheet ( PDF,  PNG); and  Getting Started (PDF) Search  Open XML spec documentation View the structure of your docx/xsx/pptx, and generate code via our webapp or for docx, locally with our Word AddIn Get help via our  forums,  StackOverflow, or  commercially News 11 May 2016: Docx4jHelper Word AddIn v3.3.0 is released. More information. 21 April 2016: docx4j 3.3.0 is available. More information. 15 April 2016: docx4j 3.3.0 release candidate is available. More information. 4 Sept 2015: docx4j 3.2.2 is released. More information. 10 Feb 2015: High fidelity PDF output. 28 Dec 2014: docx4j-ImportXHTML 3.2.2 is released. More information. 4 Dec 2014: Docx4jHelper Word AddIn is released. More information. 4 October 2014: in-browser editing? See the blog post/demo, and tell us what you want! 3 October 2014: docx4j 3.2.1 is released. More information. 26 August 2014: docx4j 3.2.0 is released. More information. June 2014: docx4j face to face: London, Budapest, Berlin. More information. 11 May 2014: David Gohel of Lysis Consultants has developed graphical devices for R (statistics package) to DrawingML, using docx4j 23 April 2014: docx4j 3.1.0 released. More information. 21 March 2014: Improvements to Google  site search here and across  Open XML spec documentation 6 March 2014: docx4j-ImportXHTML.NET 3.0.1 for .NET/C# project on  GitHub and in  Nuget 5 March 2014: docx4j.NET 3.0.1 for .NET/C# project on  GitHub and in  Nuget 12 Feb 2014:  Docx4j Enterprise Edition consolidates Plutext's MergeDocx, MergePPtx, OLE Helper etc into a single product 10 Feb 2014:  docx4j 3.0.1 is available 26 Nov 2013:  docx4j 3.0 is available 15 July 2013:  Import XHTML code moved into separate project (LGPL) 14 May 2013:  docx4j online webapp which can generate docx4j code for you 15 Feb 2013:  Commercial support offerings available from Plutext Getting started A single A4 page reference/overview of docx4j aka a cheat sheet is available, in  PDF or  PNG format. It condenses much of the Getting Started guide to a single page. Our Getting Started guide is available in  HTML and  PDF, and in Russian ( HTML ,  PDF). The HTML version is also available in some other  languages (these are machine translations, and from April 2010, so they are a bit dated now): docx4j ecosystem  docx4all is an open source cross platform WYSIWYG editor for docx files, written in Java Swing and JavaFX Script, released under the GPL  DocxEditorKit can open docx files and display the content in JEditorPane (or JTextPane), and save back to docx format. docx4j for  eclipse-scout. See the  HowTo  GDocx is a fluent interface for docx4j.  XPages PDF output Articles about docx4j lvdpal's  Creating Word documents with Docx4j, which covers tables in some detail Jos Dirksen's  Create complex Word (.docx) documents programatically with docx4j Glen Smith's  Creating Word docx documents dynamically from Grails (or Java)  Свое представление (view) в Spring MVC (Russian) Thanks people for taking the time to write these articles..."	"null"	"null"	"Creating and manipulating Microsoft Open XML files."	"true"
"Formal Verification"	"CATG"	"https://github.com/ksen007/janala2"	"Concolic unit testing engine. Automatically generates unit tests using formal methods."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"10"	"18"	"GitHub - ksen007/janala2: a concolic testing engine for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 38 Fork 18 ksen007/janala2 Code Issues 4 Pull requests 0 Pulse Graphs a concolic testing engine for Java 218 commits 2 branches 4 releases Fetching contributors Java 90.4% Groovy 8.6% Other 1.0% Java Groovy Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags indexing master Nothing to show v1.03 v1.01 v1.0 pointer-constraint Nothing to show New pull request Latest commit af09b59 Oct 29, 2015 zhihan Refactoring to remove some lint warning. Reorganize tests into packages Permalink Failed to load latest commit information. .idea updated LICENSE file. Sep 13, 2012 src Refactoring to remove some lint warning. Reorganize tests into packages Oct 29, 2015 testdata new testdata Jan 14, 2013 tests/database/table updated LICENSE file. Sep 14, 2012 .travis.yml Added gradle build file, Travis configuration, setup script and updat… Oct 16, 2015 COPYRIGHT COPYRIGHT and LICENCE placeholders Jul 5, 2012 Janala.iml changed API for data annotations Jan 14, 2015 LICENSE Fixed CastException bug. Sep 13, 2012 Manifest.txt first commit Jun 3, 2012 README.md Small fix. remove brackets. Oct 16, 2015 asmify updated LICENSE file. Sep 14, 2012 build.gradle Added gradle build file, Travis configuration, setup script and updat… Oct 17, 2015 build.xml Update build.xml Mar 13, 2015 catg.conf Integrated with emma coverage tool Jan 15, 2015 concolic direct concolic execution mode (single phase) implemented. See ./dcon… Mar 2, 2014 concolic.cygwin string constraints Nov 29, 2012 concolic.py Added gradle build file, Travis configuration, setup script and updat… Oct 17, 2015 dconcolic direct concolic execution mode (single phase) implemented. See ./dcon… Mar 2, 2014 janala.pptx partly ported to cvc4. some tests are failing. May 23, 2014 setup.sh Added gradle build file, Travis configuration, setup script and updat… Oct 17, 2015 testall Prediction failure is now handled by backtracking. Mar 8, 2014 testall.py fixed bugs in path regex annotations and state equivalence annotation… Jan 14, 2015 tracify updated LICENSE file. Sep 14, 2012 README.md CATG CATG is a concolic unit testing engine for Java programs. The implementation uses ASM for instrumentation. ASM instrumentation instruments (see janala.instrument.) class files at runtime and dumps (see janala.logger.) to a file a log of all instructions executed by the program and all values loaded from local stacks and heaps. A concolic execution engine (see janala.interpreters.*) then takes the log and performs both symbolic and concrete interpretation of the logged instructions. You must have java, gradle, cvc4 (http://cvc4.cs.nyu.edu/downloads/), and python 2.7 in your PATH. Two extra jar files are needed to run the tool. Create a lib directory in the root directory and download two jar files asm-all-5.0.4.jar: http://mvnrepository.com/artifact/org.ow2.asm/asm-all/5.0.4 automaton-1.11-8.jar: http://mvnrepository.com/artifact/dk.brics.automaton/automaton/1.11-8 place them in the lib directory. Then invoke gradle build  and gradle integrationTest  To run the the full integration tests, use ./setup.sh  # This builds CATG and copy it to lib/ python testall.py  To run tests and see coverage report, use gradle build gradle jacocoTestReport  This runs the tests using online concolic execution. To run tests with offline concolic execution, use python --offline testall.py  If you want to generate tests on a Java class file having a main method, you need to use the concolic.py script. For example, the following command generates test inputs for the class tests.Testme (the java source of this class can be found in src/integration/java/tests/Testme.java. python concolic.py --coverage 100 tests.Testme  Usage python janala/concolic.py -h usage: concolic.py [-h] [--offline] [-v] [-c] [-D D] maxIterations className [arguments [arguments ...]] positional arguments: maxIterations   Maximum number of times the program under test can be               executed. className       Java class to be tested. arguments       Arguments passed to the program under test.  optional arguments: -h, --help      show this help message and exit --offline       Perform concolic testing offline. An intermediate trace file               is generated during the execution of the program. offilne               mode results in 2X slowdown that non-offline mode -v, --verbose   Print commands that are executed. -c, --coverage  Compute detailed coverage by rerunning tests. -D D            JVM options  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ksen007/janala2"	"Concolic unit testing engine. Automatically generates unit tests using formal methods."	"true"
"Formal Verification"	"Checker Framework"	"http://types.cs.washington.edu/checker-framework/"	"Pluggable type systems. Includes nullness types, physical units, immutability types and more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"14"	"9"	"GitHub - typetools/annotation-tools: Tools for type annotations in Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 8 Fork 9 typetools/annotation-tools Code Issues 31 Pull requests 1 Pulse Graphs Tools for type annotations in Java http://types.cs.washington.edu/annotation-file-utilities/ 1,503 commits 3 branches 43 releases Fetching contributors Java 94.6% TeX 2.7% HTML 1.8% Other 0.9% Java TeX HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags asm5-final inherited-methods master Nothing to show 3.7.2 3.7.1 3.7.0 3.6.30 3.6.29 3.6.28 3.6.27 3.6.26 3.6.25 3.6.24 3.6.23 3.6.22 3.6.21 3.6.20 3.6.19 3.6.18 3.6.17 3.6.16 3.6.15 3.6.14 3.6.13 3.6.9 3.6.8 3.6.7 3.6.6 3.6.5 3.6.4 3.6.3 3.6.2 3.6.1 3.6.0 3.5.9 3.5.7 3.5.6 3.5.5 3.5.4 3.5.3 3.5.2 3.5 3.4 3.3 3.2 3.1 Nothing to show New pull request Latest commit a3fed4c Jul 6, 2016 mernst Merge branch 'master' of github.com:typetools/annotation-tools Permalink Failed to load latest commit information. annotation-file-utilities new release 3.6.30 Jul 1, 2016 asmx Previous commit was unfinished Jun 27, 2016 buildtest Remove mentions of IGJ and Javari Apr 20, 2016 scene-lib Instructions for creating a new test case Jul 2, 2016 .gitignore Ignore generated files Jul 4, 2016 .travis-build-without-test.sh Execute ""hg clone"" in correct directory Feb 12, 2016 .travis-build.sh Avoid errors rather than moving past them Feb 11, 2016 .travis.yml Use Travis standard email notification scheme May 9, 2016 LICENSE.txt Add LICENSE.txt file (MIT license) Dec 8, 2015 README.txt Another download location for ASM 2.2.2 Oct 12, 2010 build.xml Create top-level Emacs TAGS table Jun 29, 2016 global.build.properties Remove mentions of IGJ and Javari Apr 21, 2016 notes-openjdk-build.txt Change 'Sun' to 'Oracle' Sep 19, 2010 user.build.properties Remove mentions of IGJ and Javari Apr 21, 2016 README.txt Annotation Tools README file ----------------------------  This directory contains the Annotation Tools. When distributed, this is known as the Annotation File Utilities, which is one of its components; see the annotation-file-utilities subdirectory.  The Annotation File Utilities homepage is:   http://types.cs.washington.edu/annotation-file-utilities/ and it also appears in this directory as:   annotation-file-utilities/annotation-file-utilities.html   asmx ----  asmx contains modifications to asm to allow it to read and write JSR 308 annotations to/from class files.  The most modified classes are (in org.objectweb.asm):  * ClassReader  * ClassWriter  * ExtendedAnnotationVisitor  * ExtendedAnnotationWriter  Most of the changes are delimited by //jaime // end jaime  asmx was branched off of asm 2.2.2, available at either of these locations:   http://forge.objectweb.org/project/download.php?group_id=23&file_id=5769   http://download.forge.objectweb.org/asm/asm-2.2.2.tar.gz To see the changes, diff the current source files against the 2.2.2 files.  The diffs are complicated by the fact that in a few cases, a post-2.2.2 version of a file was added to asmx. One example is file src/org/objectweb/asm/optimizer/shrink.properties.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/typetools/annotation-tools"	"Pluggable type systems. Includes nullness types, physical units, immutability types and more."	"true"
"Formal Verification"	"Daikon"	"http://plse.cs.washington.edu/daikon/"	"Daikon detects likely program invariants and can generate JML specs based on those invariats."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Daikon dynamic invariant detector [ Home | FAQ | Download | Documentation | Publications | Mailing lists ] The Daikon invariant detector Daikon is an implementation of dynamic detection of likely invariants; that is, the Daikon invariant detector reports likely program invariants. An invariant is a property that holds at a certain point or points in a program; these are often seen in assert statements, documentation, and formal specifications. Invariants can be useful in program understanding and a host of other applications. Examples include “x.field > abs(y)”; “y = 2*x+3”; “array a is sorted”; “for all list objects lst, lst.next.prev = lst”; “for all treenode objects n, n.left.value < n.right.value”; “p != null => p.content in myArray”; and many more. You can extend Daikon to add new properties (see Enhancing Daikon output, or see New invariants in Daikon Developer Manual). Dynamic invariant detection runs a program, observes the values that the program computes, and then reports properties that were true over the observed executions. Daikon can detect properties in C, C++, C#, Eiffel, F#, Java, Perl, and Visual Basic programs; in spreadsheet files; and in other data sources. (Dynamic invariant detection is a machine learning technique that can be applied to arbitrary data.) It is easy to extend Daikon to other applications. Daikon is freely available for download from http://plse.cs.washington.edu/daikon/download. The distribution includes both source code and documentation, and Daikon’s license permits unrestricted use (see License). Many researchers and practitioners have used Daikon; those uses, and Daikon itself, are described in various publications. [ Home | FAQ | Download | Documentation | Publications | Mailing lists ] UW Program Languages and Software Engineering Group"	"null"	"null"	"Daikon detects likely program invariants and can generate JML specs based on those invariats."	"true"
"Formal Verification"	"Java Path Finder (JPF)"	"http://babelfish.arc.nasa.gov/trac/jpf"	"JVM formal verification tool containing a model checker and more. Created by NASA."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Java Path Finder     Java Path Finder Search: Login Preferences JPF-Wiki Timeline Roadmap View Tickets Ticket Stats Search Blog wiki:WikiStart Context Navigation Start Page Index History TracNav JPFWiki - Welcome Page Introduction... Installing JPF... User Guide... Developer Guide... Modules... Summer Projects External Projects Change(B)log About... Events Presentations Papers FAQ History? Support Playground Table of Context Latest JPF News 06/01/2016 ​JPF Workshop 2016 will be co-located with ​FSE 2016 in Seattle, WA, on November 18, 2016. Please consider submitting a paper. 04/22/2016 JPF student proposals accepted for GSoC 2016 ​announced - Congratulations to the students! 02/29/2016 JPF got accepted for ​GSoC 2016. Please visit our ​ideas page, and let us know if you would like to propose a project. 17/08/2015 JPF Workshop 2015 Accepted Papers are announced. Please visit ​ASE 2015 for registration, date and venue information. 10/03/2014 JPF Workshop 2014 Accepted Papers. Please visit ​SOAR Lab for registration, date and venue information. 10/01/2013 JPF Workshop 2013 Accepted Papers. Please note ​JPF Workshop 2013 website is down due to the shutdown, please visit ​ASE 2013 for registration, date and venue information. 06/20/2013 ​JPF Workshop 2013 will be co-located with ​ASE 2013 Please submit papers. 05/27/2013 JPF student proposals accepted for GSoC 2013 ​announced - Congratulations to the students! 04/08/2013 The show is on - JPF got accepted for GSoC 2013. Please visit the ​GSoC project ideas page or let us know about your own project suggestions. 06/07/2012 ​JPF Workshop 2012 is co-located with ​FSE 2012, November 11 and 12. We solicit submissions for the ​JPF Workshop 2012. 04/23/2012 JPF student proposals accepted for GSoC 2012 ​announced - Congratulations to the students! 03/26/2012 GSoC Student Applications period is open until April 6. Please submit your proposal at ​JPF GSoC page. 03/16/2012 JPF has been accepted as mentoring org. for GSoC 2012. Visit our ideas page. 10/14/2011 A hands-on JPF tutorial will be held on Nov 7th at Lawrence, Kansas co-located with ​ASE 2011. 05/26/2011 ​JPF Workshop is co-located with ​ASE 2011, Lawrence, Kansas - Submit papers on your work. 03/25/2011 JPF student proposals accepted for GSoC 2011 ​announced - Congratulations to the students! 03/18/2011 JPF has been accepted as mentoring org. for GSoC 2011. Visit our ideas page. 11/30/2010 ​JPF version 6 released - update your jpf-core. 09/20/2010 ​ASE 2010 Tutorial on Automated Component-Based Verification ​Slides. 08/02/2010 summer project presentations set for 08/13/2010 - see summer summit event page. 04/29/2010 Selected summer projects announced 02/14/2010 ​ISSTA 2010 Tutorial on Automated Testing with Java PathFinder announced. 02/12/2010 Call for Google Summer of Code 2010 project proposals out - visit our SoC page. 01/30/2010 ​JPF Google group replaces old mailing lists. 01/12/2010 ​Fujitsu press announcement released about using and extending Symbolic PathFinder (projects/jpf-symbc) for comprehensive testing of Java web applications. 09/02/2009 JPF server on ​http://babelfish.arc.nasa.gov/trac/jpf goes live, featuring the JPFWiki and separate Mercurial repositories for JPF core and extension projects. 07/22/2009 JPF wins the 2009 ""Outstanding Technology Development Award"" of the Federal Laboratory Consortium (FLC), Far West Division. Welcome to the JPF Wiki This is the main page for Java™ Pathfinder, or ""JPF"" as we call it from here. JPF is a highly customizable execution environment for verification of Java™ bytecode programs. The system was developed at the ​NASA Ames Research Center, open sourced in 2005, and is freely available from this server under the ​NOSA 1.3 license. The JPFWiki is our primary source of documentation. It is divided into the following sections (which you will always see in the TOC menu to the right): What is JPF? -- a brief introduction into JPF and what sets it part from normal testing software model checking examples (as one possible JPF application) How to obtain and install JPF -- everything to get it running on your machine System requirements repository access from shell, Eclipse? or NetBeans? installing the Eclipse or NetBeans plugins How to use JPF -- essentially the user manual for JPF JPF application types and runtime components configuring and running JPF understanding JPF output using the Verify API Developer guide -- what's under the hood the toplevel design key mechanisms like ChoiceGenerators and partial order reduction extension mechanisms? like Listeners, Search Strategies?, Model Java Interface (MJI), Bytecode Factories, Property checks?, Publishers? running JPF from within your application directory structure? and coding conventions writing JPF tests Projects -- descriptions of available JPF projects and repositories Related Research and publications About -- how are artifacts and work organized About this Wiki About the Development Process? About the source repositories? How to contribute How to get a JPF contributor account FAQ -- answers to all your questions (eventually) History? -- how did we get here Support -- who supports this project People? -- who does or did contribute News? -- what's going on right now Future Plans? -- where do we want to go Java and all Java-based marks are trademarks or registered trademarks of Sun Microsystems, Inc. and its subsidiaries in the U.S. and other countries Last modified 6 weeks ago Last modified on 06/01/2016 09:46:01 AM Attachments (8) ItsAWrap.tiff​ (114.5 KB) - added by frankrimlinger@… 7 years ago. CV-ASE10-final.pdf​ (3.5 MB) - added by dgiannak@… 6 years ago. ASE 2010 Tutorial JPF.jpg​ (7.7 KB) - added by nrungta@… 5 years ago. jpf-fmss-11-lab.key​ (1.3 MB) - added by pmehlitz@… 5 years ago. JPF Formal Method Summer School Lab Session 2011 jpf-fmss-11-lab.pdf​ (1.1 MB) - added by pmehlitz@… 5 years ago. JPF Formal Method Summer School Lab Session 2011 jpf-fmss-lecture-2.key​ (2.6 MB) - added by pmehlitz@… 5 years ago. JPF Formal Method Summer School Lecture 2 2011 jpf-fmss-lecture-2.pdf​ (2.6 MB) - added by pmehlitz@… 5 years ago. JPF Formal Methods Summer School Lecture 2 2011 jpf-lab.zip​ (100.9 KB) - added by pmehlitz@… 5 years ago. JPF Formal Methods Summer School Lab Session 2011 - Example Project Download in other formats: Plain Text PDF Article PDF Book Printable HTML Powered by Trac 1.0.1 By Edgewall Software. Privacy Policy and Important Notices Curator: ASANI Solutions NASA Official: Sonie Lau Last Updated: October 30, 2007"	"null"	"null"	"JVM formal verification tool containing a model checker and more. Created by NASA."	"true"
"Formal Verification"	"JMLOK 2.0"	"http://massoni.computacao.ufcg.edu.br/home/jmlok"	"Detects nonconformances between code and JML specification through the feedback-directed random tests generation, and suggests a likely cause for each nonconformance detected."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"7"	"1"	"GitHub - alyssonfm/jmlok: Tool for detecting and classifying nonconformances in Java/JML projects. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 1 Fork 1 alyssonfm/jmlok Code Issues 0 Pull requests 0 Wiki Pulse Graphs Tool for detecting and classifying nonconformances in Java/JML projects. http://massoni.computacao.ufcg.edu.br/home/jmlok 54 commits 4 branches 1 release Fetching contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags alyssonfm biancasllima igor master Nothing to show v2.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. ant doc lib src .gitignore JMLOK 2.0.zip LICENSE.txt README.md README.md JmlOk2 JmlOk2 is a tool for detecting and classifying nonconformances in contract-based programs, tailored by Java/JML. More details can be found in tool's website: http://massoni.computacao.ufcg.edu.br/home/jmlok Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alyssonfm/jmlok"	"Detects nonconformances between code and JML specification through the feedback-directed random tests generation, and suggests a likely cause for each nonconformance detected."	"true"
"Formal Verification"	"KeY"	"http://key-project.org/"	"The KeY System is a formal software development tool that aims to integrate design, implementation, formal specification, and formal verification of object-oriented software as seamlessly as possible. Uses JML for specification and symbolic execution for verification."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"KeY Project: Integrated Deductive Software Design Home / About People Publications The KeY Book Download Teaching Case Studies & Tutorials Address/Contact Intranet The KeY Project Integrated Deductive Software Design The KeY System is a formal software development tool that aims to integrate design, implementation, formal specification, and formal verification of object-oriented software as seamlessly as possible. At the core of the system is a novel theorem prover for the first-order Dynamic Logic for Java with a user-friendly graphical interface. The project was started in November 1998 at the University of Karlsruhe. It is now a joint project of Karlsruhe Institute of Technology and Chalmers University of Technology, Gothenburg and TU Darmstadt. The KeY tool is available for download. News The 15th International KeY Symposium takes place 25th July - 28th July, 2016 Tutorial about The Sequent Calculus of the KeY Tool presented at CADE-25 The 14th International KeY Symposium takes place 27th July - 29th July, 2015 Blog post with a brief introduction to KeY published Proving that Android's, Java's and Python's sorting algorithm is broken (and showing how to fix it) KeY 2.4.1 has been released on February 19, 2015. Download it now! Older News / Events Webmaster 13-May-2016"	"null"	"null"	"The KeY System is a formal software development tool that aims to integrate design, implementation, formal specification, and formal verification of object-oriented software as seamlessly as possible. Uses JML for specification and symbolic execution for verification."	"true"
"Formal Verification"	"OpenJML"	"http://openjml.github.io/"	"Translates JML specifications into SMT-LIB format and passes the proof problems implied by the program to backend solvers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"9"	"5"	"GitHub - OpenJML/OpenJML: The primary repository for the OpenJML project Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 8 Fork 5 OpenJML/OpenJML Code Issues 124 Pull requests 3 Wiki Pulse Graphs The primary repository for the OpenJML project http://www.openjml.org 756 commits 15 branches 1 release 4 contributors Java 75.2% HTML 24.4% Other 0.4% Java HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags HMCSummer2014 OpenJMLUI buildRelease-migration feature-ast-viewer flowspec jdk8u-jls-work jdk8u jdk8 jml-attr-bugfix jmldoc-work mars-fixes master prover-configuration v0.6.3 #413 Nothing to show 0.6.3 Nothing to show New pull request Latest commit 5b515c4 Jul 12, 2016 davidcok committed on GitHub Merge pull request #453 from OpenJML/jml-attr-bugfix … Fix for testRuntime3 Permalink Failed to load latest commit information. OpenJDK Fixed linnks among projects after converting to git. Jun 30, 2015 OpenJML Merge pull request #453 from OpenJML/jml-attr-bugfix Jul 12, 2016 OpenJMLFeature V0.6.3 Apr 6, 2015 OpenJMLGUITests Synching changes. Oct 27, 2015 OpenJMLTest Merge pull request #453 from OpenJML/jml-attr-bugfix Jul 12, 2016 OpenJMLUI New version of jsmtlib to improve communication with Z3 Jul 6, 2016 vendor Moved vendor to be in line with other projects for repo reorg. Jun 30, 2015 .gitattributes Adding .gitattributes Oct 27, 2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OpenJML/OpenJML"	"Translates JML specifications into SMT-LIB format and passes the proof problems implied by the program to backend solvers."	"true"
"Functional Programming"	"cyclops-react"	"https://github.com/aol/cyclops-react"	"Monad and stream utilities, comprehensions, pattern matching, functional extensions for all JDK collections, future streams, trampolines and much more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"450"	"71"	"37"	"GitHub - aol/cyclops-react: A comprehensive functional reactive platform for JDK8 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 71 Star 450 Fork 37 aol/cyclops-react Code Issues 39 Pull requests 2 Wiki Pulse Graphs A comprehensive functional reactive platform for JDK8 1,530 commits 30 branches 30 releases 15 contributors Java 99.8% Groovy 0.2% Java Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags AnyMonadTransformers agrora-non-blocking-queue bugfix/#194-incorrectly-returns-empty contravariant creational-methods cyclops-react enhancement/javadoc experimental-replacement-future-split experimental-replacement-future exponential-retry-reactiveseq foldable-validate-lazy for-comp-fix futurew-recover generator-methods gh-pages jool-0.9.11 lazy-collectionXs master performance-experiments performance-wip reactive-streams-enhancement reactive-streams-java8 reactive-streams-prototype schedule-future super-type-test-cases test-coverage tosequence-assequence type-fixes v0.99 value-collect Nothing to show v1.0.0-RC2.2 v1.0.0-RC1 v0.99.7 v0.99.6 v0.99.5 v0.99.4 v0.99.3 v0.99.2 v0.99.1 v0.99 v0.98 v0.97 v0.95 v0.86 v0.85 v0.84 v0.82 v0.81 v0.80 v0.70 v0.60 v0.41 v0.5 v0.4 v0.3 head 1.0.0-RC4 1.0.0-RC3 0.96 0.83 Nothing to show New pull request Latest commit ea4e643 Jun 19, 2016 johnmcclean-aol committed on GitHub Update readme.md Permalink Failed to load latest commit information. gradle more unit tests and api clean up Apr 8, 2015 src Merge pull request #247 from aol/fluentfunctions-memoize Jun 14, 2016 user-guide Update readme.md Feb 20, 2016 .gitignore tests passing: Jun 18, 2015 .java-version clean up Feb 20, 2016 .travis.yml for comprehension tests for transformers Apr 7, 2016 build.gradle talk changes May 23, 2016 gradle.properties bump version Jun 6, 2016 license-for-derived-quartz-cronrexpression.md Create license-for-derived-quartz-cronrexpression.md Feb 22, 2016 readme.md Update readme.md Jun 19, 2016 readme.md Future & functional based programming via JDK compatible extensions for Java 8 and above. Getting cyclops-react Stackoverflow tag cyclops-react Gradle where x.y.z represents the latest version compile 'com.aol.simplereact:cyclops-react:x.y.z' Maven <dependency>     <groupId>com.aol.simplereact</groupId>     <artifactId>cyclops-react</artifactId>     <version>x.y.z</version> </dependency> Features Used in Aol to build robust, performant & scalable asynchronous systems : features include Compatible extensions to JDK interfaces (Collections, Streams, Functions) Built with jOOλ, reactive-streams ,Agrona and pCollections Extensions for efficient JDK compatible persistent collections (pCollections) FutureStreams for managing aggregates for Future Tasks (e.g. for multi-threaded execution of large numbers of I/O tasks) Single-threaded asynchronous streaming Scheduling of data emission Powerful extended type hierarchy for aggregrations (Collections & Streams) and single values Powerful functional-style control structures, implemented in Java friendly manner (Maybe, Eval, FutureW, Xor, Ior, Try, AnyM, structural & guard based pattern matching, for-comprehensions) Execute functions between wrapped values (Optional / CompletableFutre etc) without tedious unwrapping (Java friendly Applicative support). Java friendly abstractions for wrapping any Monad type (Stream, CompletableFuture, Optional, cyclops-react types and types from other Java projects too). AnyM and it's two subtypes AnyMSeq for aggregates (Steam, List etc) and AnyMValue for Values Monad Transformers - for manipulating nesting monadic types (e.g. Optionals within a Stream as if it were just an Optional) Applicatives - apply functions across wrapped types (e.g. Optional / Maybe / Xor) without unwrapping & aggregate without terminate on failure Structural pattern matching & pattern matching via Guards (see Matchable and Matchables) Full strength for comprehensions / generators (reference elements from other generators) Tight integration with reactive-streams : collections, streams and datatypes are publishers & can be generated via subscribers Very Extensible & integration with other projects via cyclops-integration modules. Documentation user-guide : work in progress simple-react wiki cyclops wiki javadoc Articles Reactive programming with Java 8 and simple-react: The Tutorial JDK Collection eXtensions Awesome Fluent Functions Articles on medium Introducting the Cyclops Monad API Easier Try with Cyclops 4 flavors of Java 8 Functions Memoise Functions in Java 8 Strategy Pattern in Java 8 Straightfoward structural Pattern Matching in Java 8 Functional Feature Toggling Dependency injection using the Reader Monad in Java8 Scheduling a Stream Neophytes guide to Java 8 : Welcome to the Future JDBC Processing Options with cyclops-react Deterministic and Non-Deterministic Finite State Machines with Cyclops Old simple-react landing page OSCON 2016 slides License cyclops-react is licensed under the Apache 2.0 license. http://www.apache.org/licenses/LICENSE-2.0 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aol/cyclops-react"	"Monad and stream utilities, comprehensions, pattern matching, functional extensions for all JDK collections, future streams, trampolines and much more."	"true"
"Functional Programming"	"derive4j"	"https://github.com/derive4j/derive4j"	"Java 8 annotation processor and framework for deriving algebraic data types constructors, pattern-matching, morphisms."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"156"	"18"	"12"	"GitHub - derive4j/derive4j: Java 8 annotation processor and framework for deriving algebraic data types constructors, pattern-matching, morphisms, (near future: optics and typeclasses) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 156 Fork 12 derive4j/derive4j Code Issues 10 Pull requests 0 Wiki Pulse Graphs Java 8 annotation processor and framework for deriving algebraic data types constructors, pattern-matching, morphisms, (near future: optics and typeclasses) 116 commits 1 branch 12 releases 3 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.8.2 v0.8.1 v0.8 v0.7 v0.6.3 v0.6.2 v0.6.1 v0.6 v0.5 v0.4 v0.3 v0.2 Nothing to show New pull request Latest commit 1ed6a2d Jul 5, 2016 jbgi prepare next iteration Permalink Failed to load latest commit information. annotation Refactoring/code cleanup. Fix #34: allow visitor subtyping. Fix #32. May 29, 2016 etc Refactoring/code cleanup. Fix #34: allow visitor subtyping. Fix #32. May 29, 2016 examples Auto Type unification might not always be wanted. Fix #37 May 30, 2016 gradle/wrapper Update gradle and dependencies May 10, 2016 processor-api Fix #36: allow repeated usage of a type variable in a given argument. May 29, 2016 processor Fix #40: use universal (Object) equality instead of reference equalit… Jul 5, 2016 .gitignore Fix travis Oct 14, 2015 .travis.yml Setup upload of snapshots to OJO Oct 15, 2015 LICENSES LICENSE: fix module name and license version Oct 18, 2015 README.md Document HighJ flavour. Jul 5, 2016 build.gradle prepare next iteration Jul 5, 2016 gradle.properties Setup upload of snapshots to OJO Oct 15, 2015 gradlew Initial import Oct 14, 2015 gradlew.bat Initial import Oct 14, 2015 lib.gradle Fix license path in pom Oct 17, 2015 settings.gradle renamed 'api' module to 'annotation' Oct 14, 2015 README.md Derive4J: Java 8 annotation processor for deriving algebraic data types constructors, pattern matching and more! Table of contents Example: a 'Visitor' for HTTP Request Constructors equals, hashCode, toString? Pattern matching syntax Accessors (getters) Functional setters ('withers') First class laziness Flavours Optics (functional lenses) Updating deeply nested immutable data structure Popular use-case: domain specific languages Catamorphisms But what exactly is generated? Parametric polymorphism Generalized Algebraic Data Types Use it in your project Changelog Contributing Contact Caution: if you are not familiar with Algebraic Data Types (aka ""Sum Types"" / ""Tagged Unions"") or the ""visitor pattern"" then you should learn a bit about them before further reading of this page: http://eng.wealthfront.com/2015/02/pattern-matching-in-java-with-visitor.html https://en.wikipedia.org/wiki/Algebraic_data_type https://en.wikipedia.org/wiki/Tagged_union http://blog.higher-order.com/blog/2009/08/21/structural-pattern-matching-in-java/ http://tomasp.net/blog/types-and-math.aspx/ http://fsharpforfunandprofit.com/posts/type-size-and-design/ https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/ This project has a special dedication to Tony Morris' blog post Debut with a catamorphism. I'm also very thankful to @sviperll and his adt4j project which was the initial inspiration for Derive4J. So. What can this project do for us, poor functional programmers stuck with a legacy language called Java? A good deal of what is available for free in better languages like Haskell: pattern matching, laziness... An example being worth a thousand words... Example: a 'Visitor' for HTTP Request Let's say we want to modelize an HTTP request. For the sake of the example let's say that an http request can either be a GET on a given path a DELETE on a given path a POST of a content body on a given path a PUT of a content body on a given path and nothing else! You could then use the corrected visitor pattern and write the following class in Java: package org.derive4j.example;  /** A data type to modelize an http request. */ @Data public abstract class Request {    /** the Request 'visitor' interface, R being the return type    *  used by the 'accept' method : */   interface Cases<R> {     // A request can either be a 'GET' (of a path):     R GET(String path);     // or a 'DELETE' (of a path):     R DELETE(String path);     // or a 'PUT' (on a path, with a body):     R PUT(String path, String body);     // or a 'POST' (on a path, with a body):     R POST(String path, String body);     // and nothing else!   }    // the 'accept' method of the visitor pattern:   public abstract <R> R match(Cases<R> cases);    /**    * Alternatively and equivalently to the visitor pattern above, if you prefer a more FP style,    * you can define a catamorphism instead. (see examples)    * (most useful for standard data type like Option, Either, List...)    */ } Constructors Without Derive4J, you would have to create subclasses of Request for all four cases. That is, write at the minimum something like:   public static Request GET(String path) {     return new Request() {       @Override       public <R> R match(Cases<R> cases) {         return cases.GET(path);       }     };} for each case. But thanks to the @Data annotation, Derive4j will do that for you! That is, it will generate a Requests class (the name is configurable, the class is generated by default in target/generated-sources/annotations when using Maven) with four static factory methods (what we call 'constructors' in FP):   public static Request GET(String path) {...}   public static Request DELETE(String path) {...}   public static Request PUT(String path, String body) {...}   public static Request POST(String path, String body) {...} You can also ask Derive4J to generate null checks with: @Data(arguments = ArgOption.checkedNotNull) equals, hashCode, toString? Derive4J philosophy is to be as safe and consistent as possible. That is why Object.{equals, hashCode, toString} are not implemented by generated classes by default. Nonetheless, as a concession to legacy, it is possible to force Derive4J to implement them, by declaring them abstract. Eg by adding the following in your annotated class:   @Override   public abstract int hashCode();   @Override   public abstract boolean equals(Object obj);   @Override   public abstract String toString(); The safer solution would be to never use those methods and use 'type classes' instead, eg. Equal, Hash and Show. The project Derive4J for Functiona Java aims at generating them automatically. Pattern matching syntax Now let's say that you want a function that returns the body size of a Request. Without Derive4J you would write something like:   static final Function<Request, Integer> getBodySize = request ->        request.match(new Cases<Integer>() {         public Integer GET(String path) {           return 0;         }         public Integer DELETE(String path) {           return 0;         }         public Integer PUT(String path, String body) {           return body.length();         }         public Integer POST(String path, String body) {           return body.length();         }       }); With Derive4J you can do that a lot less verbosely, thanks to a generated fluent structural pattern matching syntax! And it does exhaustivity check! (you must handle all cases). The above can be rewritten into: static final Function<Request, Integer> getBodySize = Requests.cases()       .GET(path          -> 0)       .DELETE(path       -> 0)       .PUT((path, body)  -> body.length())       .POST((path, body) -> body.length()) or even (because you don't care of GET and DELETE cases): static final Function<Request, Integer> getBodySize = Requests.cases()       .PUT((path, body)  -> body.length())       .POST((path, body) -> body.length())       .otherwise(0) Accessors (getters) Now, patterning matching every time you want to inspect an instance of Request is a bit tedious. For this reason Derive4J generates 'getter' static methods for all fields. For the path and body fields, Derive4J will generate the following methods in the Requests class:   public static String getPath(Request request){     return Requests.cases()         .GET(path          -> path)         .DELETE(path       -> path)         .PUT((path, body)  -> path)         .POST((path, body) -> path)         .apply(request);   }   // return an Optional because the body is not present in the GET and DELETE cases:   static Optional<String> getBody(Request request){     return Requests.cases()         .PUT((path, body)  -> body)         .POST((path, body) -> body)         .otherwiseEmpty()         .apply(request);   } (Actually the generated code is equivalent but more efficient) Using the generated getBody methods we can rewrite our getBodySize function into: static final Function<Request, Integer> getBodySize = request ->       Requests.getBody(request)               .map(String::length)               .orElse(0); Functional setters ('withers') The most painful part of immutable data structures (like the one generated by Derive4J) is updating them. Scala case classes have copy methods for that. Derive4J generates similar modifier and setter methods in the Requests class:   public static Function<Request, Request> setPath(String newPath){     return Requests.cases()             .GET(path          -> Requests.GET(newPath))             .DELETE(path       -> Requests.DELETE(newPath))             .PUT((path, body)  -> Requests.PUT(newPath, body))             .POST((path, body) -> Requests.POST(newPath, body)));   }   public static Function<Request, Request> modPath(Function<String, String> pathMapper){     return Requests.cases()             .GET(path          -> Requests.GET(pathMapper.apply(path)))             .DELETE(path       -> Requests.DELETE(pathMapper.apply(path)))             .PUT((path, body)  -> Requests.PUT(pathMapper.apply(path), body))             .POST((path, body) -> Requests.POST(pathMapper.apply(path), body)));   }   public static Function<Request, Request> setBody(String newBody){     return Requests.cases()             .GET(path          -> Requests.GET(path))    // identity function for GET             .DELETE(path       -> Requests.DELETE(path)) // and DELETE cases.             .PUT((path, body)  -> Requests.PUT(path, newBody))             .POST((path, body) -> Requests.POST(path, newBody)));   }   ... By returning a function, modifiers and setters allow for a lightweight syntax when updating deeply nested immutable data structures. First class laziness Languages like Haskell provide laziness by default, which simplifies a lot of algorithms. In traditional Java you would have to declare a method argument as Supplier<Request> (and do memoization) to emulate laziness. With Derive4J that is no more necessary as it generates a lazy constructor that gives you transparent lazy evaluation for all consumers of your data type:   // the requestExpression will be lazy-evaluated on the first call   // to the 'match' method of the returned Request instance:   public static Request lazy(Supplier<Request> requestExpression) {     ...   } Have a look at List for how to implement a lazy cons list in Java using Derive4J (you may also want to see the associated generated code). Flavours In the example above, we have used the default JDK flavour. Also available are FJ (Functional Java), Fugue (Fugue), Javaslang (Javaslang) and HighJ (HighJ) flavours. When using those alternative flavours, Derive4J will use eg. the specific Option implementations from those projects instead of the jdk Optional class. Optics (functional lenses) If you are not familiar with optics, have a look at Monocle (for scala, but Functional Java provides similar abstraction). Using Derive4J generated code, defining optics is a breeze (you need to use the FJ flavour by specifying @Data(flavour = Flavour.FJ):   /**    * Lenses: optics focused on a field present for all data type constructors    * (getter cannot 'failed'):    */   public static final Lens<Request, String> _path = lens(       Requests::getPath,       Requests::setPath);   /**    * Optional: optics focused on a field that may not be present for all constructors    * (getter return an 'Option'):    */   public static final Optional<Request, String> _body = optional(       Requests::getBody,       Requests::setBody);   /**    * Prism: optics focused on a specific constructor:    */   public static final Prism<Request, String> _GET = prism(       // Getter function       Requests.cases()           .GET(fj.data.Option::some)           .otherwise(Option::none),       // Reverse Get function (aka constructor)       Requests::GET);    // If there is more than one field, we use a tuple as the prism target:   public static final Prism<Request, P2<String, String>> _POST = prism(       // Getter:       Requests.cases()           .POST((path, body) -> p(path, body))           .otherwiseNone(),       // reverse get (construct a POST request given a P2<String, String>):       p2 -> Requests.POST(p2._1(), p2._2())); } Updating deeply nested immutable data structure Let's say you want to modelize a CRM. Each client is a Person which can be contacted either by email, telephone or postal mail. With Derive4J you could write the following: import org.derive4j.*; import java.util.function.BiFunction;  @Data public abstract class Address {   public abstract <R> R match(@FieldNames({""number"", ""street""})                    BiFunction<Integer, String, R> Address); } import org.derive4j.Data;  @Data public abstract class Contact {     interface Cases<R> {       R byEmail(String email);       R byPhone(String phoneNumber);       R byMail(Address postalAddress);     }     public abstract <R> R match(Cases<R> cases); } import org.derive4j.*; import java.util.function.BiFunction;  @Data public abstract class Person {   public abstract <R> R match(@FieldNames({""name"", ""contact""})                               BiFunction<String, Contact, R> Person); } But now we have a problem: All clients have been imported from a legacy database with an off-by-one error for the street number! We must create a function that increments each person street number (if it exists) by one. And without modifying the original data structure (because it is immutable). With Derive4J, writing such a function is trivial: import java.util.Optional; import java.util.function.Function;  import static org.derive4j.example.Addresss.Address; import static org.derive4j.example.Addresss.getNumber; import static org.derive4j.example.Addresss.modNumber; import static org.derive4j.example.Contacts.getPostalAddress; import static org.derive4j.example.Contacts.modPostalAddress; import static org.derive4j.example.Persons.Person; import static org.derive4j.example.Persons.getContact; import static org.derive4j.example.Persons.modContact;    public static void main(String[] args) {      Person joe = Person(""Joe"", Contacts.byMail(Address(10, ""Main St"")));      Function<Person, Person> incrementStreetNumber = modContact(                                    modPostalAddress(                                      modNumber(number -> number + 1)));      // newP is a copy of p with the street number incremented:     Person correctedJoe = incrementStreetNumber.apply(joe);      Optional<Integer> newStreetNumber = getPostalAddress(getContact(correctedJoe))         .map(postalAddress -> getNumber(postalAddress));      System.out.println(newStreetNumber); // print ""Optional[11]"" !!   } Popular use-case: domain specific languages Algebraic data types are particulary well fitted for creating DSLs. Like a calculator for arithmetic expressions: import java.util.function.Function; import org.derive4j.Data; import static org.derive4j.example.Expressions.*;  @Data public abstract class Expression {      interface Cases<R> {         R Const(Integer value);         R Add(Expression left, Expression right);         R Mult(Expression left, Expression right);         R Neg(Expression expr);     }      public abstract <R> R match(Cases<R> cases);      private static Function<Expression, Integer> eval = Expressions         .cases()             .Const(value        -> value)             .Add((left, right)  -> eval(left) + eval(right))             .Mult((left, right) -> eval(left) * eval(right))             .Neg(expr           -> -eval(expr));      public static Integer eval(Expression expression) {         return eval.apply(expression);     }      public static void main(String[] args) {         Expression expr = Add(Const(1), Mult(Const(2), Mult(Const(3), Const(3))));         System.out.println(eval(expr)); // (1+(2*(3*3))) = 19     } } Catamorphisms are generated for recursively defined datatypes. So that you can rewrite the above eval method into:     public static Integer eval(Expression expression) {         Expressions              .cata(                 value -> value,                 (left, right) -> left.get() + right.get(),                 (left, right) -> left.get() * right.get(),                 expr -> -expr.get()              )              .apply(expression)     } But beware that for very deep structure it may blow the stack! (unless you make good use of lazy constructors...) But what exactly is generated? This is a very legitimate question. Here is the Expressions.java file that is generated for the above @Data Expression class. Parametric polymorphism ... works as expected. Eg. you can write the following: import java.util.function.Function; import java.util.function.Supplier; import org.derive4j.Data;  @Data public abstract class Option<A> {      public abstract <R> R cata(Supplier<R> none, Function<A, R> some);      public final <B> Option<B> map(final Function<A, B> mapper) {         return Options.modSome(mapper).apply(this);     } } => The generated modifier method modSome allows polymorphic update and is incidentaly the functor for our Option! Generalized Algebraic Data Types GADTs are also supported out of the box by Derive4J (within the limitations of Java type system). Have a look at this gist to know how to define GADTs in Java and how they can help create type-safe DSL: https://gist.github.com/jbgi/208a1733f15cdcf78eb5 Use it in your project Derive4J should be declared as a compile-time only dependency (not needed at runtime). So while derive4j is (L)GPL-licensed, the generated code is not linked to derive4j, and thus derive4j can be used in any project (proprietary or not). Maven: <dependency>   <groupId>org.derive4j</groupId>   <artifactId>derive4j</artifactId>   <version>0.8.2</version>   <optional>true</optional> </dependency> Gradle compile(group: 'org.derive4j', name: 'derive4j', version: '0.8.2', ext: 'jar')  or better using the gradle-apt-plugin: compileOnly ""org.derive4j:derive4j-annotation:0.8.2"" apt ""org.derive4j:derive4j:0.8.2""  Contributing Bug reports and feature requests are welcome, as well as contributions to improve documentation. Right now the codebase is not ready for external contribution (many blocks of codes are more complicated than should be). So you may better wait for resolution of #2 before trying to dig into the codebase. Contact jb@giraudeau.info, @jb9i or use the project github issues. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/derive4j/derive4j"	"Java 8 annotation processor and framework for deriving algebraic data types constructors, pattern-matching, morphisms."	"true"
"Functional Programming"	"Fugue"	"https://bitbucket.org/atlassian/fugue"	"Functional extensions to Guava."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"atlassian / fugue   — Bitbucket  Bitbucket Features Pricing owner/repository English English 日本語 Sign up Log in fugue Actions Clone Compare Fork Navigation Overview Source Commits Branches 3 Pull requests 9 Issues Wiki Downloads Pipelines Settings HTTPS HTTPS SSH Need help cloning? Learn how to clone a repository. Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. Atlassian Project: Atlassian fugue Overview Clone in SourceTree Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. HTTPS HTTPS SSH Last updated 2016-07-04 Language Java Access level Read 13 Branches 51 Tags 18 Forks 49 Watchers fugue Functional Extensions Java 8 has standardised some of the basic function interfaces, but does not include quite a few more tools that a functional programmer may expect to be available. This library attempts to fill in some of the gaps when using Java 8. In particular it provides Option and Either types as well as a Pair. There also additional helper classes for common Function, Supplier, and Iterable operations. Issue Tracking Issues are tracked in the fugue project on bitbucket. Change log Changes are documented in changelog.md. Getting fugue Add fugue as a dependency to your pom.xml: <dependencies>     ...     <dependency>         <groupId>io.atlassian.fugue</groupId>         <artifactId>fugue</artifactId>         <version>3.0.0</version>     </dependency>     ... </dependencies>  For Gradle add fugue as a dependency to your dependencies section: compile 'io.atlassian.fugue:fugue:3.0.0'  Building fugue To build and install to local Maven repo, run from project root folder: $ mvn clean install  To generate javadocs: $ mvn clean install javadoc:javadoc  This will generate javadocs for each project module in <module-dir>/target/site/apidocs/. Guava compatibility In the past Guava was a core dependency. That dependency has been removed in favor of a new module fugue-guava. Code requiring direct interaction with Guava types can be found there. Scala integration From 2.2 there is a fugue-scala module that adds some helper methods in Scala to convert common Fugue and Guava classes into their Scala equivalents and vice-versa. For instance, to convert a scala function f to a Java Function<A, B> there is syntax .toJava available and to go the other way you can use .toScala. To enable this syntax you need to add the following to your scope: import io.atlassian.fugue.converters.ScalaConverters._  Android Please use 2.x releases for projects requiring JDK 1.6. The latest release 2.x release is v2.6.1. Migrating from Fugue v2.x to v3.x See changelog.md for a list of changes. The root package changed from com to io to allow a more gradual inclusion of the breaking changes introduced between v2 and v3. All the functional interfaces that came from Guava in v2 have been replaced with their equivalents in the Java 8 util.functions package. Replacing instances of com.google.common.base.Function with java.util.function.Function will address that change. The Fugue Iterables class in v2 added some missing functionality to the Guava Iterables class in a complementary rather than replacement fashion. This required one of the two Iterables classes to be imported by it's fully qualified name when both were needed in a single source file. Immutable maps have been moved to the fugue-guava module along with the com.atlassian.retry package, Throwables, and the Function2 interface. The Scala type conversion code has been migrated from using, and clashing on, asScala to toScala. Many of the previously existing deprecations have been removed. Replace com.google.common.base.Function with java.util.function.Function for each of: Function, Supplier, and Predicate Replace com.atlassian.fugue.Function2 with java.util.function.BiFunction See changelog.md for new implementations of functions on Iterables to reduce the places where you need to import io.atlassian.fugue.Iterables by it's FQN Find io.atlassian.fugue.retry.*, ImmutableMaps, Function2, and Throwables in the fugue-guava module Replace usages of asScala/asJava with toScala/toJava When conversion between a JDK and a Guava functional interface is required use of a method reference on the abstract method is recommended See the changelog.md for further changes Contributors Source code should be formatted according to the local style, which is encoded in the formatter rules in: src/etc/eclipse/formatter.xml  This can be applied by running maven-formatter-plugin for Java and maven-scalariform-plugin for Scala: mvn formatter:format mvn scalariform:format  Source code should must be accompanied by tests covering new functionality. Run tests with: mvn verify  For test coverage and other Clover checks run (highly recommended): mvn clean clover2:setup test clover2:aggregate clover2:clover  If you are having any issues with the provided clover license (e.g. it has expired), please raise an issue and a member of the team will renew it. Note: It is not recommended to install/deploy classes that are instrumented for coverage. It is better to separate the builds for coverage verification and install/deploy. For more details read the Clover documentation. Unlimited private and public hosted repositories. Free for small teams! Sign up for free Close Recent activity Made Option#forall() final since it was the only non-final method for no apparent reason Pull request #72 created in atlassian/fugue Dos Moonen · Added Either lift* / liftM* helpers. Pull request #71 commented on in atlassian/fugue Adam Evans · Added Either lift* / liftM* helpers. Pull request #71 commented on in atlassian/fugue Anund McKague · Added Either lift* / liftM* helpers. Pull request #71 commented on in atlassian/fugue Anund McKague · Added Either lift* / liftM* helpers. Pull request #71 commented on in atlassian/fugue Anund McKague · Added Either lift* / liftM* helpers. Pull request #71 commented on in atlassian/fugue Anund McKague · Added Either lift* / liftM* helpers. Pull request #71 updated in atlassian/fugue Adam Evans · Added Either lift* / liftM* helpers. Pull request #71 created in atlassian/fugue Adam Evans · Shouldn't Option.map return Option.option(<result>)? Issue #55 commented on in atlassian/fugue SkittishSloth · Shouldn't Option.map return Option.option(<result>)? Issue #55 commented on in atlassian/fugue Jean-Baptiste Giraudeau · Shouldn't Option.map return Option.option(<result>)? Issue #55 commented on in atlassian/fugue SkittishSloth · Blog Support Plans & pricing Documentation API Site status Version info Terms of service Privacy policy English Git 2.7.4.1.g5468f9e Mercurial 3.6.3 Django 1.7.11 Python 2.7.3 53f44cd8792e / 53f44cd8792e @ app-104 JIRA Software Confluence Bamboo SourceTree HipChat Atlassian Help Online help Learn Git Keyboard shortcuts Latest features Bitbucket tutorials Site status Support"	"null"	"null"	"Functional extensions to Guava."	"true"
"Functional Programming"	"Functional Java"	"http://www.functionaljava.org"	"Implements numerous basic and advanced programming abstractions that assist composition-oriented development."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Functional Java     Toggle navigation  Functional Java Docs Community Download Feed Overview Functional Java is an open source library facilitating functional programming in Java. The library implements numerous basic and advanced programming abstractions that assist composition oriented development. Functional Java also serves as a platform for learning functional programming concepts by introducing these concepts using a familiar language. The library is intended for use in production applications and is thoroughly tested using the technique of automated specification-based testing with ScalaCheck and Functional Java’s Quickcheck module. Functional Java is compiled with Java 8 targeting Java 6 bytecode. The use of lambdas within the project are backported with the Retro Lambda library, supporting Java versions 5 to 8 and beyond. Features Functional Java provides abstractions for the following types: Basic Data Structures - total and partial functions, products, unit, option, unbiased and right biased unions (either and validation), void. Immutable Collections - array, list, vector, stream, set, map, finger tree, priority queue, heterogenous list, difference lists. Other Abstractions - monoid, semigroup, natural, random number generator, reader, writer, state, input/output, parser, zipper, specification based testing, actors, concurrency, optics (lens, prism, fold, traversal and others) and type conversion. See the features page for a brief description of each of these types. Example Read the quick start guide for how to add FunctionalJava to your project and get started with a full example. Functional Java includes numerous usage examples, this example maps a function over an array, adding 42 to each element (imports omitted). final Array<Integer> a = array(1, 2, 3); final Array<Integer> b = a.map(i -> i + 42); arrayShow(intShow).println(b); // {43,44,45}  // combine into a single step arrayShow(intShow).println(array(1, 2, 3).map(i -> i + 42)); © 2014 | Mixed with Bootstrap v3.1.1 | Baked with JBake v2.4.0 | top"	"null"	"null"	"Implements numerous basic and advanced programming abstractions that assist composition-oriented development."	"true"
"Functional Programming"	"Javaslang"	"http://www.javaslang.io/"	"Functional component library that provides persistent data types and functional control structures."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1038"	"69"	"120"	"GitHub - javaslang/javaslang: A functional library for Java 8+ that provides persistent data types and functional control structures. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 69 Star 1,038 Fork 120 javaslang/javaslang Code Issues 96 Pull requests 6 Pulse Graphs A functional library for Java 8+ that provides persistent data types and functional control structures. http://javaslang.io 3,361 commits 4 branches 13 releases 42 contributors Java 94.2% Scala 5.7% Other 0.1% Java Scala Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0.0 master parser v2.0.x Nothing to show v2.0.2 v2.0.1 v2.0.0 v2.0.0-beta v2.0.0-RC4 v2.0.0-RC3 v2.0.0-RC2 v2.0.0-RC1 v1.2.2 v1.2.1 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit c767c61 Jul 15, 2016 danieldietrich committed on GitHub Merge pull request #1442 from jorander/126_euler_number_25 … Added solution for Euler number 25. Had to upgrade the return type of… Permalink Failed to load latest commit information. .ide updated file template, using actual year Feb 28, 2016 .travis move script to .travis folder May 27, 2016 javaslang-benchmark SCM: updated version to 3.0.0-SNAPSHOT Jul 10, 2016 javaslang-gwt GWT Support #1393 Jul 6, 2016 javaslang-match SCM: updated version to 3.0.0-SNAPSHOT Jul 10, 2016 javaslang-pure SCM: updated version to 3.0.0-SNAPSHOT Jul 10, 2016 javaslang-test SCM: updated version to 3.0.0-SNAPSHOT Jul 10, 2016 javaslang Merge pull request #1442 from jorander/126_euler_number_25 Jul 15, 2016 .gitignore Changed project structure to maven multi-module Jan 22, 2016 .travis.yml move script to .travis folder May 27, 2016 CONTRIBUTING.md added hint for release Mar 31, 2016 LICENSE Updated urls and versions and contribution notes. Mar 20, 2016 README.md Organized badges May 25, 2016 pom.xml SCM: updated version to 3.0.0-SNAPSHOT Jul 10, 2016 update_copyright.sh added new-year update script Feb 28, 2016 README.md Javaslang Feature-rich & self-contained functional programming in Java™ 8 and above. Javaslang is a functional library for Java 8+ that provides persistent data types and functional control structures. Because Javaslang does not depend on any libraries (other than the JVM) you can easily add it as standalone .jar to your classpath. To stay up to date please follow the blog. Using Javaslang See User Guide Useful Maven Goals Executing tests: mvn clean test Executing doclint: mvn javadoc:javadoc Executing code coverage report: mvn -P ci clean test jacoco:report Create -javadoc.jar: mvn javadoc:jar Create -source.jar: mvn source:jar Update version properties: mvn versions:update-properties Check for new plugin version: mvn versions:display-plugin-updates Benchmarks Currently only basic microbenchmarks are available. To run mvn clean test -Pbenchmark  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/javaslang/javaslang"	"Functional component library that provides persistent data types and functional control structures."	"true"
"Functional Programming"	"jOOλ"	"https://github.com/jOOQ/jOOL"	"Extension to Java 8 which aims to fix gaps in lambda, providing numerous missing types and a rich set of sequential Stream API additions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"648"	"56"	"64"	"GitHub - jOOQ/jOOL: jOOλ - The Missing Parts in Java 8 jOOλ improves the JDK libraries in areas where the Expert Group's focus was elsewhere. It adds tuple support, function support, and a lot of additional functionality around sequential Streams. The JDK 8's main efforts (default methods, lambdas, and the Stream API) were focused around maintaining backwards compatibility and implementing a functional API for parallelism. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 648 Fork 64 jOOQ/jOOL Code Issues 29 Pull requests 1 Pulse Graphs jOOλ - The Missing Parts in Java 8 jOOλ improves the JDK libraries in areas where the Expert Group's focus was elsewhere. It adds tuple support, function support, and a lot of additional functionality around sequential Streams. The JDK 8's main efforts (default methods, lambdas, and the Stream API) were focused around maintaining backwards compa… http://www.jooq.org/products 421 commits 1 branch 11 releases 17 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show version-0.9.11 version-0.9.10 version-0.9.9 version-0.9.8 version-0.9.7 version-0.9.5 version-0.9.4 version-0.9.3 version-0.9.2 version-0.9.1 version-0.9.0 Nothing to show New pull request Latest commit 9614d6f Jun 28, 2016 lukaseder [#238] Use Function and BiFunction in Tuple.map Permalink Failed to load latest commit information. .settings [#146] Update copyright to 2016 Jan 2, 2016 src [#238] Use Function and BiFunction in Tuple.map Jun 28, 2016 .classpath Create .classpath Feb 25, 2016 .gitignore Initial commit Mar 2, 2014 .project Create .project Feb 25, 2016 .travis.yml There is no openjdk8 for Travis Jan 22, 2015 LICENSE.txt Renamed LICENSE.txt file Apr 30, 2015 README.md Update version in README.md's Maven section Jun 14, 2016 pom.xml Release 0.9.12-SNAPSHOT Apr 15, 2016 README.md jOOλ jOOλ is part of the jOOQ series (along with jOOQ, jOOX, jOOR, jOOU) providing some useful extensions to Java 8 lambdas. It contains these classes: org.jooq.lambda.function Why only Function and BiFunction? We have also included support for Function1 through Function16. org.jooq.lambda.tuple Tuple support is essential in functional programming. A variety of things can be modelled as tuples, e.g. function argument lists. This is why we support type safe Tuple1 through Tuple16 types. org.jooq.lambda.Seq The new Streams API was implemented to provide filter/map/reduce-like operations leveraging the new lambdas. Many of the useful methods that we know from other functional languages (e.g Scala) are missing. This is why jOOλ knows a Seq (short of Sequential) interface that extends Stream and adds a variety of additional methods to. Please note that all Seq's are sequential and ordered streams, so don't bother to call parallel() on it, it will return the same Seq. Seq adds a handful of useful methods, such as: // (1, 2, 3, 4, 5, 6) Seq.of(1, 2, 3).concat(Seq.of(4, 5, 6));  // true Seq.of(1, 2, 3, 4).contains(2);  // true Seq.of(1, 2, 3, 4).containsAll(2, 3);  // true Seq.of(1, 2, 3, 4).containsAny(2, 5);  // (tuple(1, ""A""), tuple(1, ""B""), tuple(2, ""A""), tuple(2, ""B"")) Seq.of(1, 2).crossJoin(Seq.of(""A"", ""B""));  // (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, ...) Seq.of(1, 2, 3).cycle();  // tuple((1, 2, 3), (1, 2, 3)) Seq.of(1, 2, 3).duplicate();  // ""!abc"" Seq.of(""a"", ""b"", ""c"").foldLeft(""!"", (u, t) -> u + t);  // ""abc!"" Seq.of(""a"", ""b"", ""c"").foldRight(""!"", (t, u) -> t + u);  // { 1 = (1, 3), 0 = (2, 4) } Seq.of(1, 2, 3, 4).groupBy(i -> i % 2);  // (tuple(1, (1, 3)), tuple(0, (2, 4))) Seq.of(1, 2, 3, 4).grouped(i -> i % 2);  // (tuple(1, 1), tuple(2, 2)) Seq.of(1, 2, 4).innerJoin(Seq.of(1, 2, 3), (a, b) -> a == b);  // (1, 0, 2, 0, 3, 0, 4) Seq.of(1, 2, 3, 4).intersperse(0);  // ""123"" Seq.of(1, 2, 3).join();  // ""1, 2, 3"" Seq.of(1, 2, 3).join("", "");  // ""^1|2|3$"" Seq.of(1, 2, 3).join(""|"", ""^"", ""$"");   // (tuple(1, 1), tuple(2, 2), tuple(4, null)) Seq.of(1, 2, 4).leftOuterJoin(Seq.of(1, 2, 3), (a, b) -> a == b);  // (1, 2) Seq.of(1, 2, 3, 4, 5).limitWhile(i -> i < 3);  // (1, 2) Seq.of(1, 2, 3, 4, 5).limitUntil(i -> i == 3);  // (1, 2L) Seq.of(new Object(), 1, ""B"", 2L).ofType(Number.class);  // (tuple(1, 1), tuple(2, 2), tuple(null, 3)) Seq.of(1, 2, 4).rightOuterJoin(Seq.of(1, 2, 3), (a, b) -> a == b);  // tuple((1, 3), (2, 4)) Seq.of(1, 2, 3, 4).partition(i -> i % 2 != 0);  // (1, 3, 4) Seq.of(1, 2, 3, 4).remove(2);  // (1, 4) Seq.of(1, 2, 3, 4).removeAll(2, 3, 5);  // (2, 3) Seq.of(1, 2, 3, 4).retainAll(2, 3, 5);  // (4, 3, 2, 1) Seq.of(1, 2, 3, 4).reverse();  // (3, 1, 4, 5, 2) for example Seq.of(1, 2, 3, 4, 5).shuffle();  // (3, 4, 5) Seq.of(1, 2, 3, 4, 5).skipWhile(i -> i < 3);  // (3, 4, 5) Seq.of(1, 2, 3, 4, 5).skipUntil(i -> i == 3);  // (2, 3) Seq.of(1, 2, 3, 4, 5).slice(1, 3)  // tuple((1, 2), (3, 4, 5)) Seq.of(1, 2, 3, 4, 5).splitAt(2);  // tuple(1, (2, 3, 4, 5)) Seq.of(1, 2, 3, 4, 5).splitAtHead();  // tuple((1, 2, 3), (a, b, c)) Seq.unzip(Seq.of(tuple(1, ""a""), tuple(2, ""b""), tuple(3, ""c"")));  // (tuple(1, ""a""), tuple(2, ""b""), tuple(3, ""c"")) Seq.of(1, 2, 3).zip(Seq.of(""a"", ""b"", ""c""));  // (""1:a"", ""2:b"", ""3:c"") Seq.of(1, 2, 3).zip(Seq.of(""a"", ""b"", ""c""), (x, y) -> x + "":"" + y);  // (tuple(""a"", 0), tuple(""b"", 1), tuple(""c"", 2)) Seq.of(""a"", ""b"", ""c"").zipWithIndex(); org.jooq.lambda.Unchecked Lambda expressions and checked exceptions are a major pain. Even before going live with Java 8, there are a lot of Stack Overflow questions related to the subject: http://stackoverflow.com/q/18198176/521799 http://stackoverflow.com/q/19757300/521799 http://stackoverflow.com/q/14039995/521799 The Unchecked class can be used to wrap common @FunctionalInterfaces in equivalent ones that are allowed to throw checked exceptions. E.g. this painful beast: Arrays.stream(dir.listFiles()).forEach(file -> {     try {         System.out.println(file.getCanonicalPath());     }     catch (IOException e) {         throw new RuntimeException(e);     }      // Ouch, my fingers hurt! All this typing! }); ... will become this beauty: Arrays.stream(dir.listFiles()).forEach(     Unchecked.consumer(file -> { System.out.println(file.getCanonicalPath()); }) ); Maven <dependency>     <groupId>org.jooq</groupId>     <artifactId>jool</artifactId>     <version>0.9.11</version> </dependency>  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jOOQ/jOOL"	"Extension to Java 8 which aims to fix gaps in lambda, providing numerous missing types and a rich set of sequential Stream API additions."	"true"
"Game Development"	"jMonkeyEngine"	"https://jmonkeyengine.org/"	"Game engine for modern 3D development."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Game engine for modern 3D development."	"false"
"Game Development"	"libGDX"	"https://libgdx.badlogicgames.com/"	"All-round cross-platform, high-level framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9161"	"1090"	"4709"	"GitHub - libgdx/libgdx: Desktop/Android/HTML5/iOS Java game development framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,090 Star 9,161 Fork 4,709 libgdx/libgdx Code Issues 155 Pull requests 35 Wiki Pulse Graphs Desktop/Android/HTML5/iOS Java game development framework http://www.libgdx.com/ 12,492 commits 5 branches 39 releases 349 contributors Java 39.1% C++ 30.4% C 24.0% HTML 3.2% Shell 1.0% Python 0.5% Other 1.8% Java C++ C HTML Shell Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags lwjgl3 master newspritebatch revert-3802-camera_helper revert-3903-patch-1 Nothing to show gdx-parent-1.5.0 gdx-parent-1.2.0 1.9.3 1.9.2 1.9.1 1.9.0 1.8.0 1.7.2 1.7.1 1.7.0 1.6.5 1.6.4 1.6.3 1.6.2 1.6.1 1.6.0 1.5.6 1.5.5 1.5.4 1.5.3 1.5.2 1.5.1 1.5.0 1.4.1 1.4.0 1.3.1 1.3.0 1.1.0 1.0.1 1.0.0 0.9.9 0.9.9-xamarin 0.9.8 0.9.7 0.9.6 0.9.3 0.9.2 0.9.1 0.9 Nothing to show New pull request Latest commit c12c490 Jul 13, 2016 Tom-Ski Lets not do that.. Permalink Failed to load latest commit information. backends Lets not do that.. Jul 13, 2016 extensions set gdx-dialogs extension version to 1.1.0 (#4184) Jul 12, 2016 gdx Don't clear implicit end row flag just because the size was recomputed. Jul 3, 2016 tests Add robovm tests via gradle, update gradle scripts to 2.2.0-SNAPSHOT … Jul 13, 2016 .gitattributes Perhaps this helps solving merge conflicts, see http://krlmlr.github.… Jan 23, 2016 .gitignore Merge branch 'moe' May 11, 2016 AUTHORS files, need to update contributors Jul 7, 2013 CC-LICENSE files, need to update contributors Jul 6, 2013 CCLA.txt Create CCLA.txt Apr 1, 2016 CHANGES Wrapping for HorizontalGroup and VerticalGroup. Jun 22, 2016 CLA.txt Update CLA.txt Apr 1, 2016 CONTRIBUTING.md Grammar fixes Dec 31, 2015 CONTRIBUTORS Improve performance of glReadPixels() and ScreenUtils on GWT Apr 23, 2016 ISSUE_TEMPLATE.md Update issue template May 31, 2016 LICENSE files, need to update contributors Jul 6, 2013 README.md Fix robovm logo being stretched unproportionally Jun 9, 2015 build-mac-ios.xml added box2d to mac/ios build Apr 17, 2014 build-template.xml Bump up compiler options in ant to 1.8 to fix lwjgl3 issues. May 31, 2016 build.gradle Add robovm tests via gradle, update gradle scripts to 2.2.0-SNAPSHOT … Jul 13, 2016 build.xml Added LWJGL3 controllers backend Jan 4, 2016 eclipse-formatter.xml Updated eclipse formatter. Jun 27, 2012 fetch.xml make sure controller-native jar get downloaded Mar 19, 2016 libgdx_logo.svg added libgdx logo Aug 5, 2014 pom.xml Update Lwjgl3 to 3.0.0 release. Jun 9, 2016 settings.gradle Update MOE backend for MOE 1.0.648 May 6, 2016 README.md libGDX is a cross-platform Java game development framework based on OpenGL (ES) that works on Windows, Linux, Mac OS X, Android, your WebGL enabled browser and iOS. Getting Started Setup your development environment (Eclipse, Intellij IDEA, NetBeans) Create a libGDX project Import, Run, Debug and Package your project Eclipse Intellij IDEA NetBeans Commandline Read the Wiki Downloads As we switched to Gradle, there's no need to download libGDX itself anymore. For those of you who still prefer the old way of doing things, you can get libGDX from the official download site. Documentation The Wiki contains all the information you'll need to write a libGDX game. You can contribute to the Wiki directly here on GitHub! We also provide Javadocs online. The Javadocs are also bundled as source Jars with every libGDX distribution for consumption in your favorite IDE. News & Community You can follow the latest news about libGDX on the blog. Follow @badlogicgames for real-time updates. You can get help on our forum and talk to other libGDX users on our IRC channel #libgdx at irc.freenode.net. Reporting Issues Use the issue tracker here on GitHub to report issues. Make sure you read the Getting Help article that walks you through the process or properly reporting an issue. Contributing & Working from Source libGDX has a strong developer community constantly improving the code base. We love to get any and all help we can. The Contributing article describes the process of helping libGDX to become even better. To contribute, you need to work with libGDX' sources directly, something normal users do not have to go through. The Working with the Source article will give you directions. You can also contribute financially to our infrastructure (build server, web server, test devices) via our Patreon! License libGDX is licensed under the Apache 2 License, meaning you can use it free of charge, without strings attached in commercial and non-commercial projects. We love to get (non-mandatory) credit in case you release a game or app using libgdx! Supported By libGDX is supported by helpful 3rd parties via code contributions, free licenses, test devices and so forth. Make our supporters happy and visit their sites! Intel and the Intel logo are trademarks of Intel Corporation in the U.S. and/or other countries. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libGDX/libGDX"	"All-round cross-platform, high-level framework."	"true"
"Game Development"	"LWJGL"	"https://www.lwjgl.org/"	"Robust framework that abstracts libraries like OpenGL/CL/AL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"839"	"130"	"162"	"GitHub - LWJGL/lwjgl3: LWJGL is a Java library that enables cross-platform access to popular native APIs useful in the development of graphics (OpenGL), audio (OpenAL) and parallel computing (OpenCL) applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 130 Star 839 Fork 162 LWJGL/lwjgl3 Code Issues 30 Pull requests 0 Wiki Pulse Graphs LWJGL is a Java library that enables cross-platform access to popular native APIs useful in the development of graphics (OpenGL), audio (OpenAL) and parallel computing (OpenCL) applications. https://www.lwjgl.org 1,709 commits 5 branches 3 releases 15 contributors Kotlin 61.6% C 19.8% Java 9.8% C++ 8.5% Other 0.3% Kotlin C Java C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gamepad hwloc jmh-experiments master odbc Nothing to show 3.0.0 3.0.0b 3.0.0a Nothing to show New pull request Latest commit 9c79c5c Jul 13, 2016 Spasi Refactor allocator setup to avoid loading libraries more than once Permalink Failed to load latest commit information. config Add Advapi32 dependency Jul 2, 2016 doc Update 3.0.1 release notes Jul 2, 2016 gradle/wrapper Refactor Gradle build and add gradle wrapper Jul 1, 2015 modules Refactor allocator setup to avoid loading libraries more than once Jul 13, 2016 .gitignore Add NanoVG bindings. Close #99 Dec 9, 2015 LICENSE.md Move license to root, convert to markdown and update copyright May 10, 2016 README.md Add badges Jul 2, 2016 build.gradle Change URLs to https Jun 11, 2016 build.xml Remove wrong license Jul 2, 2016 gradle.properties Bump version to 3.0.1 Jun 4, 2016 gradlew Refactor Gradle build and add gradle wrapper Jul 1, 2015 gradlew.bat Add gradlew.bat Jul 1, 2015 update-dependencies.xml Update kotlinc to 1.0.3 Jun 30, 2016 README.md LWJGL - Lightweight Java Game Library 3 This repository hosts LWJGL 3, the complete rewrite and next major version of LWJGL. Everything you need to know about the project can be found in the Wiki. Other useful links: Release Notes Forum JavaDoc Blog Twitter For a quick overview of the project structure, installation instructions and configuration options, see doc/README. For migrating LWJGL 2 code to LWJGL 3, see the Migration Guide. LWJGL 3 can be used with Maven/Gradle/Ivy, with the following dependencies: org.lwjgl:lwjgl:${version} org.lwjgl:lwjgl-platform:${version}:natives-windows org.lwjgl:lwjgl-platform:${version}:natives-linux org.lwjgl:lwjgl-platform:${version}:natives-osx  where ${version} is a version (e.g. 3.0.0) released on Maven Central. Nightly builds are also available from the Sonatype Nexus repository, with a snapshot build version (e.g. 3.0.1-SNAPSHOT). LWJGL 3 requires Java 8 or later to build and run and currently supports the following platforms/architectures: Linux x64 MacOS X x64 Windows x86 Windows x64 Example code: Test suite (simple samples covering basic usage of LWJGL bindings) Demo suite (includes advanced OpenGL and Vulkan demos) Wiki tutorials LWJGL 3 includes the following bindings: Khronos APIs Library Description EGL An interface between Khronos rendering APIs such as OpenGL ES or OpenVG and the underlying native platform window system. OpenCL An open, royalty-free standard for cross-platform, parallel programming of diverse processors found in personal computers, servers, mobile devices and embedded platforms. OpenGL The most widely adopted 2D and 3D graphics API in the industry, bringing thousands of applications to a wide variety of computer platforms. OpenGL ES A royalty-free, cross-platform API for full-function 2D and 3D graphics on embedded systems - including consoles, phones, appliances and vehicles. Vulkan A new generation graphics and compute API that provides high-efficiency, cross-platform access to modern GPUs used in a wide variety of devices from PCs and consoles to mobile phones and embedded platforms. Display and Input Library Description GLFW Create multiple windows, handle user input (keyboard, mouse, gaming peripherals) and manage contexts. Also features multi-monitor support, clipboard access, file drag-n-drop, and much more. JAWT The AWT native interface. LibOVR The API of the Oculus SDK. nfd A tiny, neat C library that portably invokes native file open and save dialogs. Audio Library Description OpenAL A cross-platform 3D audio API appropriate for use with gaming applications and many other types of audio applications. OpenAL Soft An LGPL-licensed, cross-platform, software implementation of the OpenAL 3D audio API. Graphics Library Description NanoVG A small antialiased vector graphics rendering library for OpenGL. par_shapes Generate parametric surfaces and other simple shapes. stb - single-file public domain libraries for C/C++ Library Description stb_easy_font Quick-and-dirty easy-to-deploy bitmap font for printing frame rate, etc. stb_image Image loading/decoding from file/memory: JPG, PNG, TGA, BMP, PSD, GIF, HDR, PIC stb_image_resize Resize images larger/smaller with good quality. stb_image_write Image writing to disk: PNG, TGA, BMP stb_perlin Revised Perlin noise (3D input, 1D output). stb_rect_pack Simple 2D rectangle packer with decent quality. stb_truetype Parse, decode, and rasterize characters from truetype fonts. stb_vorbis Decode ogg vorbis files from file/memory to float/16-bit signed output. Other Library Description dyncall Encapsulates architecture-, OS- and compiler-specific function call semantics in a virtual bind argument parameters from left to right and then call interface allowing programmers to call C functions in a completely dynamic manner. jemalloc A general purpose malloc implementation that emphasizes fragmentation avoidance and scalable concurrency support. xxHash An Extremely fast Hash algorithm, running at RAM speed limits. Use of a binding is subject to the terms of the corresponding license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/LWJGL/lwjgl3"	"Robust framework that abstracts libraries like OpenGL/CL/AL."	"true"
"Geospatial"	"Apache SIS"	"http://sis.apache.org/"	"Library for developing geospatial applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Apache SIS™ library Apache SIS™ About Mailing Lists Project License Project Team Project Documentation Developer guide Online Javadoc Downloads Source Code Code patterns FAQ Issue Tracker ASF The Foundation Thanks Become a Sponsor Security Home Mailing Lists Project License Project Team Project Documentation Developer guide Online Javadoc Downloads Source Code Code patterns FAQ Issue Tracker ASF The Foundation Thanks Become a Sponsor Security The Apache SIS™ library Apache Spatial Information System (SIS) is a free software, Java language library for developing geospatial applications. SIS enables better representation of coordinates for searching, data clustering, archiving, or other relevant spatial needs. The library is an implementation of GeoAPI 3.0 interfaces and can be used for desktop or server applications. SIS provides data structures for geographic data and associated metadata along with methods to manipulate those data structures. The SIS metadata module forms the base of the library and enables the creation of metadata objects which comply with the model of international standards. The SIS referencing module enable the construction of geodetic data structures for geospatial referencing such as axis, projection and coordinate reference system definitions, along with the associated operations which enable the mathematical conversion of coordinates between different systems of reference. The SIS storage modules will provide a common approach to the reading and writing of grid coverages applicable to simple imagery as to many dimensional data structures. Some Apache SIS features are: Geographic metadata (ISO 19115-1:2014) Can be read from or written to ISO 19139 compliant XML documents. Automatic conversions between the model published in 2003 and the revision published in 2014. Referencing by coordinates (ISO 19111:2007) Well Known Text (WKT) version 1 and 2 (ISO 19162:2015). Geographic Markup Language (GML) version 3.2 (ISO 19136:2007). EPSG geodetic dataset for geodetic definitions and for coordinate operations. See the list of supported coordinate reference systems. Mercator, Transverse Mercator, Lambert Conic Conformal and stereographic map projections. See the list of supported operation methods. Using Apache SIS¶ The latest SIS release is 0.7, released May 2016. Apache SIS requires a Java 6 Runtime Environment. The EPSG geodetic dataset (optional but recommended) can be installed separately. Apache SIS is a Java library for use by other applications. Leveraging the full SIS capabilities or getting the best performance require that users write their own applications on top of SIS. However a command-line tool is provided for allowing users to experiment some SIS functionalities before writing code. Downloads as a zip files, or as Maven dependencies. Developer guide (English | French) — note that this is work in progress. Online Javadoc for API documentation. Command-line interface for an overview of the command-line tool. SIS Wiki for ""drawing board"" and roadmap. Recommended code patterns for writing more robust applications. Apache SIS developer documentation¶ Following links are for those who wish to contribute to Apache SIS: New contributor: background knowledge. Source code: fetching the code, opening in an IDE, formatting. Build: build from the source, create the PACK200 file. Branches: trunk, JDK6, JDK7, JDK8. Issue tracking: JIRA. Code review Release management (for release managers) Web site management (for release managers and site maintainers) Copyright © 2013-2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache SIS, Apache, the Apache feather logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Library for developing geospatial applications."	"true"
"Geospatial"	"Geo"	"https://github.com/davidmoten/geo/"	"GeoHash utilities in Java."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"148"	"23"	"34"	"GitHub - davidmoten/geo: Geohash utitlies in java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 148 Fork 34 davidmoten/geo Code Issues 3 Pull requests 1 Pulse Graphs Geohash utitlies in java 349 commits 4 branches 10 releases 5 contributors Java 99.8% Shell 0.2% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags abstract-encode cover-world master remove-synchronized Nothing to show geo-0.6.7 geo-0.6.6 geo-0.6.5 geo-0.6 geo-0.5 0.7.4 0.7.1 0.7 0.6.10 0.6.8 Nothing to show New pull request Latest commit b724a8a Nov 10, 2015 davidmoten update README to fix #21 Permalink Failed to load latest commit information. src add benchmark for decodeHash Nov 4, 2015 .gitignore add .gitignore Jun 20, 2013 .travis.yml Create .travis.yml Dec 8, 2014 LICENSE Fixes #4 by adding License file. Aug 27, 2013 README.md update README to fix #21 Nov 10, 2015 generate-site.sh add generate-site.sh script Jan 17, 2015 pom.xml add benchmarks Nov 4, 2015 README.md geo Java utility methods for geohashing. Status: production, available on Maven Central Maven site reports are here including javadoc. Add this to your pom: <dependency>     <groupId>com.github.davidmoten</groupId>     <artifactId>geo</artifactId>     <version>0.7.1</version> </dependency>  Release Notes 0.7 - performance improvements to GeoHash.encodeHash and others (#13), (#14), thanks @niqueco 0.6.10 - compiled to java 1.6 for Android compatibility 0.6.8 - get Position class from grumpy-core artifact which includes Position.longitudeDiff fix. 0.6.7 - Base32.encodeBase32 now pads to max hash length which is a breaking change (#9), thanks @gnellzynga, fixed use of DEFAULT_MAX_HASHES in doco (#10). 0.6.6 - fixes #8 boundary hash calculations should match geohash.org reference implementation (thanks D J Hagberg) 0.6.5 - fixes issue #6 GeoHash.coverBoundingBox fails when extent is larger than that covered by a single 1 letter hash 0.6 - handles neighbour calculations on borders, removed guava dependency, minor api additions 0.5 - first release to Maven Central Features simple api encodes geohashes from latitude, longitude to arbitrary length (GeoHash.encodeHash) decodes latitude, longitude from geohashes (GeoHash.decodeHash) finds adjacent hash in any direction (GeoHash.adjacentHash), works on borders including the poles too finds all 8 adjacent hashes to a hash (GeoHash.neighbours) calculates hash length to enclose a bounding box (GeoHash.hashLengthToCoverBoundingBox) calculates geohashes of given length to cover a bounding box. Returns coverage ratio as well (GeoHash.coverBoundingBox) calculates height and width of geohashes in degrees (GeoHash.heightDegrees and GeoHash.widthDegrees) encodes and decodes long values from geohashes (Base32.encodeBase32 and Base32.decodeBase32) good performance (~3 million GeoHash.encodeHash calls per second on an I7, single thread) no mutable types exposed by api threadsafe 100% unit test coverage (for what that's worth of course!) Apache 2.0 licence Published to Maven Central Bounding box searches using geohashing What is the problem? Databases of events at specific times occurring at specific places on the earth's surface are likely to be queried in terms of ranges of time and position. One such query is a bounding box query involving a time range and position constraint defined by a bounding lat-long box. The challenge is to make your database run these queries quickly. Some databases may either not support or suffer significant performance degradation when large datasets are queried with inequality conditions on more than one variable. For example, a search for all ship reports within a time range and within a bounding box could be achieved with a range condition on time combined with a range condition on latitude combined with a range condition on longitude ( combined with = logical AND). This type of query can perform badly on many database types, SQL and NoSQL. On Google App Engine Datastore for instance only one variable with inequality conditions is allowed per query. This is a sensible step to take to meet scalability guarantees. What is a solution? The bounding box query with a time range can be rewritten using geohashes so that only one variable is subject to a range condition: time. The method is: store geohashes of all lengths (depends on the indexing strategies available, a single full length hash may be enough) in indexed fields against each lat long position in the database. Note that storing hashes as a single long integer value may be advantageous (see Base32.decodeBase32 to convert a hash to a long). calculate a set of geohashes that wholly covers the bounding box perform the query using the time range and equality against the geohashes. For example: (startTime <= t < finishTime) and (hash3='drt' or hash3='dr2')  filter the results of the query to include only those results within the bounding box The last step is necessary because the set of geohashes contains the bounding box but may be larger than it. What hash length to use? So how long should the hashes be that we try to cover the bounding box with? This will depend on your aims which might be one or more of minimizing: cpu, url fetch time, financial cost, total data transferred from datastore, database load, 2nd tier load, or a heap of other possible metrics. Calling GeoHash.coverBoundingBox with just the bounding points and no additional parameters will return hashes of a length such that the number of hashes is as many as possible but less than or equal to GeoHash.DEFAULT_MAX_HASHES (12). You can explicitly control maxHashes by calling GeoHash.coverBoundingBoxMaxHashes. As a quick example, for a bounding box proportioned more a less like a screen with Schenectady NY and Hartford CT in USA at the corners: Here are the hash counts for different hash lengths: m is the size in square degrees of the total hashed area and a is the area of the bounding box. length  numHashes m/a     1           1     1694    2           1       53      3           4        6.6     4          30        1.6     5         667        1.08    6       20227        1.02     Only testing against your database and your preferrably real life data will determine what the optimal maxHashes value is. In the benchmarks section below a test with H2 database found that optimal query time was when maxHashes is about 700. I doubt that this would be the case for many other databases. A rigorous exploration of this topic would be fun to do or see. Let me know if you've done it or have a link and I'll update this page! Hash height and width formulas This is the relationship between a hash of length n and its height and width in degrees: First define this function:     parity(n) = 0 if n is even otherwise 1 Then     width = 180 / 2(5n+parity(n)-2)/2 degrees     height = 180 / 2(5n-parity(n))/2 degrees The height and width in kilometres will be dependent on what part of the earth the hash is on and can be calculated using Position.getDistanceToKm. For example at (lat,lon): double distancePerDegreeWidth =      new Position(lat,lon).getDistanceToKm(new Position(lat, lon+1)); Benchmarks Inserted 10,000,000 records into an embedded H2 filesystem database which uses B-tree indexes. The records were geographically randomly distributed across a region then a bounding box of 1/50th the area of the region was chosen. Query performed as follows (time is the time to run the query and iterate the results): hashLength numHashes  found   from  time(s)  2          2          200K    10m   56.0     3          6          200k    1.2m  10.5 4          49         200k    303k   4.5 5          1128       200k    217K   3.6 none       none       200k    200k  31.1 (multiple range query)  I was pleasantly surprised that H2 allowed me to put over 1000 conditions in the where clause. I tried with the next higher hash length as well with over 22,000 hashes but H2 understandably threw a StackOverFlowError. To run the benchmark: mvn clean test -Dn=10000000  Running with n=1,000,000 is much quicker to run and yields the same primary result: multiple range query is 10X slower than geohash lookup if the hash length is chosen judiciously  Links Core geohash encoding code was a translation to java of https://github.com/davetroy/geohash-js/blob/master/geohash.js. Immutable R-tree implementation in java by the same author Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/davidmoten/geo/"	"GeoHash utilities in Java."	"true"
"Geospatial"	"Geotoolkit.org"	"http://www.geotoolkit.org/"	"Library for developing geospatial applications. Built on top of the Apache SIS project."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"19"	"15"	"GitHub - Geomatys/geotoolkit: Geotoolkit.org (abridged Geotk) is a free software, Java language library for developing geospatial applications. The library can be used for desktop or server applications.  Geotk is built on top of Apache SIS and is used as a laboratory for the later. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 14 Fork 15 Geomatys/geotoolkit Code Issues 0 Pull requests 0 Pulse Graphs Geotoolkit.org (abridged Geotk) is a free software, Java language library for developing geospatial applications. The library can be used for desktop or server applications. Geotk is built on top of Apache SIS and is used as a laboratory for the later. http://www.geotoolkit.org/ 9,469 commits 1 branch 6 releases 19 contributors Java 99.6% PLpgSQL 0.2% HTML 0.1% CSS 0.1% ANTLR 0.0% XSLT 0.0% Java PLpgSQL HTML CSS ANTLR XSLT Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 4.0-M5 4.0-M4 4.0-M3 4.0-M2 4.0-M1 4.0-M0 Nothing to show New pull request Latest commit 1e3952e Jul 1, 2016 desruisseaux chore(Referencing): replace some calls to CRS.forCode(""a constant"") b… … …y calls to CommonCRS.something(). Permalink Failed to load latest commit information. build chore(Referencing): remove the Maven plugin for OpenOffice add-in, wh… Jun 17, 2016 demos chore(Referencing): replace some calls to CRS.forCode(""a constant"") b… Jul 1, 2016 modules chore(Referencing): replace some calls to CRS.forCode(""a constant"") b… Jul 1, 2016 server Merged geotk-metadata module into geotk-utility since it was almost e… Sep 26, 2014 src chore(Referencing): removal of more deprecated geotk CRS methods. Jul 1, 2016 .gitignore Display : ignore maven shade auto generated pom, and minor refactoring. Jan 23, 2015 pom.xml chore(Referencing): replacement of geotk-epsg module by sis-epsg. May 30, 2016 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Geomatys/geotoolkit.git"	"Library for developing geospatial applications. Built on top of the Apache SIS project."	"true"
"Geospatial"	"GeoTools"	"http://geotools.org/"	"Library that provides tools for geospatial data."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"303"	"72"	"445"	"GitHub - geotools/geotools: Official GeoTools repository Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 303 Fork 445 geotools/geotools Code Pull requests 9 Wiki Pulse Graphs Official GeoTools repository http://geotools.org 5,175 commits 23 branches 75 releases Fetching contributors Java 98.4% Scheme 0.8% HTML 0.7% CSS 0.1% SuperCollider 0.0% Shell 0.0% Java Scheme HTML CSS SuperCollider Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.7.x 8.x 9.x 9.0-M1 10.x 11.x 12.x 12.0.1 13.x 14.x 15.x GEOT-4934 featurecollection_cleanup_origional featurecollection_cleanup foss4g_backup foss4g master process-raster-algebra rel_8.x rel_11.0 revert-970-arcgrid-ascii revert-1030-addGetStyles wfs-ng-improvements-2.0 Nothing to show 15.0 15-beta2 15-beta 15-RC1 14.4 14.3 14.2 14.1 14.0 14-beta 14-RC1 14-M0 13.6 13.5 13.4 13.3 13.2 13.1 13.0 13-RC1 12.5 12.4 12.3 12.2 12.1 12.0 12-RC1 11.5 11.4 11.3 11.2 11.1 11.0 11-beta 11-RC2 11-RC1 10.8 10.7 10.6 10.5 10.4 10.3 10.2 10.1 10.0 10-RC2 10-RC1 9.5 9.4 9.3 9.2 9.1 9.0 9.0-beta1 9.0-RC1 9.0-M1 9.0-M0 8.7 8.6 8.5 8.4 8.3 8.2 8.1 8.0 8.0-RC2 8.0-RC1 8.0-M4 2.7.4 2.7.4a 2.7.3 2.7.2 2.7.1 2.7.0 2.6.6 Nothing to show New pull request Latest commit a9eeefa Jul 12, 2016 dromagnoli committed on GitHub Merge pull request #1237 from dromagnoli/GEOT-5377 … GEOT-5377:Declaring some jai-ext dependencies as explicit since jar-c… Permalink Failed to load latest commit information. build Updated version to 16-SNAPSHOT Apr 29, 2016 docs Merge pull request #1235 from ianturton/svg Jul 8, 2016 licenses Assorted build glitches Jul 20, 2014 modules GEOT-5377:Declaring some jai-ext dependencies as explicit since jar-c… Jul 12, 2016 src/site Fix javadoc link too Oct 26, 2014 .gitignore removed h2-db artifacts from git Aug 21, 2015 .travis.yml Back to single jdk8 build here Dec 30, 2015 CONTRIBUTING.md Amending copyright header management as per recent proposal Jun 27, 2016 README-geotools-logo.png Assorted build glitches Jul 20, 2014 README.html Upgrade to Java 8 Dec 22, 2015 README.md Replaced header with GeoTools logo in Readme.md Sep 8, 2015 VERSION.txt ensuring git revision picked up by VERSION.txt Sep 18, 2012 pom.xml GEOT-5377:Declaring some jai-ext dependencies as explicit since jar-c… Jul 12, 2016 README.md GeoTools is an open source Java library that provides tools for geospatial data. Our Users guide provides an overview of the core features, supported formats and standards support. License GeoTools licensed under the LGPL. The user guide license page describes the less restrictive license for documentation and source code examples. Contributing The developers guide outlines ways to contribute to GeoTools using patches, pull requests and setting up new modules. If you are already experienced with GitHub please check our pull request page before you start! Building GeoTools uses Apache Maven for a build system. To build the library run maven from the root of the repository. % mvn clean install  See the user guide for more details. Bugs GeoTools uses JIRA, hosted by Atlassian, for issue tracking. Mailing Lists The user list is for all questions related to GeoTools usage. The dev list is for questions related to hacking on the GeoTools library itself. More Information Visit the website or read the docs. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/geotools/geotools"	"Library that provides tools for geospatial data."	"true"
"Geospatial"	"H2GIS"	"http://www.h2gis.org/"	"A spatial extension of the H2 database."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"6"	"19"	"GitHub - orbisgis/h2gis: A spatial extension of the H2 database. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 33 Fork 19 orbisgis/h2gis Code Issues 38 Pull requests 0 Wiki Pulse Graphs A spatial extension of the H2 database. http://www.h2gis.org 1,845 commits 8 branches 9 releases 8 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1.X FixesDriverPostgres ebocher-patch-1 gh-pages master newH2Release raster/1.3.X revert-676-prepare_release Nothing to show v1.3.0 v1.2.4 v1.2.3 v1.2.2 v1.2.0 v1.1.1 v1.1.0 v1.0.2 v1.0.1 Nothing to show New pull request Latest commit 568f55f Jun 23, 2016 SPalominos committed on GitHub New h2 release … This PR updates the H2 database from 190 to 192. Thank you, @nicolas-f, for having pointed out to me the index pb. Permalink Failed to load latest commit information. Licenses Merge origin/master into newLicense May 25, 2016 doxygen Add key word for writing config file Nov 30, 2015 h2gis-api Merge origin/master into newH2Release Jun 21, 2016 h2gis-dist [maven-release-plugin] prepare for next development iteration Jun 21, 2016 h2gis-ext-osgi [maven-release-plugin] prepare for next development iteration Jun 21, 2016 h2gis-ext [maven-release-plugin] prepare for next development iteration Jun 21, 2016 h2gis-functions-osgi Merge origin/master into newH2Release Jun 21, 2016 h2gis-functions fix unit test, rely on default ordering of database, use ORDER BY dir… Jun 22, 2016 h2gis-network Merge origin/master into newH2Release Jun 21, 2016 h2gis-test-utilities Merge origin/master into newH2Release Jun 21, 2016 h2gis-test Fixes the dependencies error on h2gis-test. Jun 21, 2016 h2gis-utilities [maven-release-plugin] prepare for next development iteration Jun 21, 2016 jts-osgi [maven-release-plugin] prepare for next development iteration Jun 21, 2016 .gitignore Update gitignore Apr 1, 2014 .travis.yml H2GIS JDBC is java 6 Api only. Nov 5, 2015 README.md Update README.md Jun 20, 2016 pom.xml Merge origin/master into newH2Release Jun 21, 2016 travis-build.sh Add automatic travis build of OrbisGIS Jul 3, 2015 README.md H2GIS H2GIS is a spatial extension of the H2 database engine in the spirit of PostGIS. It adds support for managing spatial features and operations on the new Geometry type of H2, the Open Geospatial Consortium (OGC) Simple Features for SQL (SFSQL) functions and additional spatial functions that we (the CNRS) develop. H2GIS is the root project for the new OrbisGIS data management library. It contains tools to execute geometry analysis and read/write geospatial file formats. H2GIS is licensed under the LGPL 3 license terms. h2gis-functions h2gis-functions is the main module of the H2GIS distribution. It extends H2 by adding spatial storage and analysis capabilities,including a constraint on Geometry data type storing POINT, CURVE and SURFACE types in WKB representations spatial operators (ST_Intersection, ST_Difference, etc.) spatial predicates (ST_Intersects, ST_Contains, etc.) additional spatial SQL functions that are not in Simple Features for SQL (SFSQL) Ex: ST_Extent, ST_Explode, ST_MakeGrid It contains a set of driver functions (I/O)) to read/write file formats such as .shp, .dbf, .geojson, .gpx This I/O package include 2 implementation of TableEngine that allow you to immediatly 'link' a table with a shape file. It include also file copy functions (import): SHPREAD( ) and SHPWRITE( ) to read and write Esri shape files. DBFREAD( ) and DBFWRITE( ) to read and write DBase III files. GeoJsonRead() and GeoJsonWrite() to read and write GeoJSON files. GPXRead() to read GPX files. Usage For now, H2GIS requires Java 6. Run maven clean install -P standalone in the H2GIS's root directory. In the folder h2gis-dist/target/ you will find a zip file h2gis-standalone-bin.zip.Unzip the file then open h2gis-dist-xxx.jar It will open a browser based console application. ~ $ unzip h2gis-standalone-bin.zip ~ $ cd h2gis-standalone ~/h2gis-standalone $ java -jar h2gis-dist-xxx.jar Click Connect in the web interface Create a database and run the following commands to add spatial features (do it only after the creation of a new database): CREATE ALIAS IF NOT EXISTS H2GIS_EXTENSION FOR ""org.h2gis.ext.H2GISExtension.load""; CALL H2GIS_EXTENSION(); Note : This command load all H2GIS functions : spatial, drivers and network. If you don't want to install the network functions please use : CREATE ALIAS IF NOT EXISTS H2GIS_SPATIAL FOR ""org.h2gis.functions.H2GISFunctions.load""; CALL H2GIS_SPATIAL(); When the functions are installed you can open a shapefile by calling the following SQL request: CALL FILE_TABLE('/home/user/myshapefile.shp', 'tablename'); This special table will be immediatly created (no matter the file size). The content will allways be synchronized with the file content. You can also copy the content of the file into a regular H2 table: CALL SHPREAD('/home/user/myshapefile.shp', 'tablename'); Or copy the content of a spatial table in a new shape file: CALL SHPWRITE('/home/user/newshapefile.shp', 'tablename'); Contributing For legal reasons, contributors are asked to provide a contributor license agreement. We invite each contributor to send a mail to the H2GIS developer mailing list. The mail need to include the following statement: ""I wrote the code, it's mine, and I'm contributing it to H2GIS for distribution licensed under the LGPL 3.0."" For a significant contribution, send a PR on GitHub and refer it in your message. For a single contribution join a patch to your mail. Acknowledgements The H2GIS team utilizes open source software. Specifically, we would like to thank : Thomas Mueller and Noel Grandin from the H2 database community. Martin Davis from the JTS community. Supporters Many thanks for those who reported bugs or provide patches... Steve Hruda aka shruda PR #453 Ivo Šmíd aka bedla PR #556, PR #695 Team H2GIS is composed of four qualified professionals in GIS and informatic sciences. Erwan Bocher leads the project. Nicolas Fortin is the lead programmer. Sylvain Palominos is the lead programmer of the OrbisGIS platform. Gwendall Petit is in charge of the documentation and manages all public relations with the community users. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/orbisgis/h2gis"	"A spatial extension of the H2 database."	"true"
"Geospatial"	"Jgeohash"	"http://astrapi69.github.io/jgeohash/"	"Library that can assist Java developers in using the GeoHash algorithm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Jgeohash by astrapi69 Jgeohash View on GitHub Download .zip Download .tar.gz jgeohash An easy-to-implement library that can assist Java developers in using the GeoHash algorithm in order to create geocodes based on custom latitude and longitude values. With the help of jGeohash, Java developers will be able to quickly and easily generate a geohash code using user-defined latitude and longitude values. By using the GeoHash algorithm, the space can be divided into multiple grid shapes. This library is a basic implementation from the GeoHash algorithm written in the java and can be applied to generate from the latitude and longitude a geohash code and reverse. The library is kept simple and have no dependencies to other libraries. Maven dependency To add the dependency to your maven project you have to add to the section repositories(in pom.xml or settings.xml) following repository: <repositories>     <repository>         <id>jgeohash-mvn-repo</id>         <url>https://raw.github.com/astrapi69/jgeohash/mvn-repo/</url>         <snapshots>             <enabled>true</enabled>             <updatePolicy>always</updatePolicy>         </snapshots>     </repository> </repositories>  Than you can add the dependency to your dependencies: <dependencies>     <dependency>         <groupId>jGeohash</groupId>         <artifactId>jgeohash</artifactId>         <version>${jgeohash.version}</version>     </dependency>    </dependencies>  License The source code is under the Apache License V2.0 as published by the Apache Foundation. If you have suggestions or improvements of bugfixes please contribute back via github. Examples See the wiki page. Last changes Version 1.4.3 Extend functionality to calculate distance from two Points, Positions, coordinate values(latitude, longitude) or two geohash values in meters. Created a new class for keeping data of the neighbors cells from the given geohash to cardinal directions for the first and second ring region. Version 1.4.2 Added new interface Position for the class Point. Created new class that calculates distance from two Points or two geohash values in km or miles. Version 1.4.1 Added method to get getAdjacent from multiply directions. Added functionality for get first and second ring neighbors from a geohash cell. Jgeohash is maintained by astrapi69. This page was generated by GitHub Pages using the Cayman theme by Jason Long."	"null"	"null"	"Library that can assist Java developers in using the GeoHash algorithm."	"true"
"Geospatial"	"Mapsforge"	"https://github.com/mapsforge/mapsforge/"	"Software for the rendering of maps based on OpenStreetMap data."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"318"	"53"	"148"	"GitHub - mapsforge/mapsforge: The new home of mapsforge. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 53 Star 318 Fork 148 mapsforge/mapsforge Code Issues 50 Pull requests 0 Wiki Pulse Graphs The new home of mapsforge. 1,583 commits 2 branches 30 releases 14 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master rotation Nothing to show list 0.6.1 0.6.1-rc2 0.6.1-rc1 0.6.0 0.6.0-rc3 0.6.0-rc2 0.6.0-rc1 0.5.2 0.5.2-rc3 0.5.2-rc2 0.5.2-rc1 0.5.1 0.5.1-rc4 0.5.1-rc3 0.5.1-rc2 0.5.1-rc1 0.5.0 0.5.0-rc4 0.5.0-rc3 0.5.0-rc2 0.5.0-rc1 0.4.3 0.4.2 0.4.1 0.4.0 0.4.0-rc2 0.4.0-rc1 0.4.0-RELEASETEST 0.3.1 Nothing to show New pull request Latest commit 207a902 Jul 14, 2016 devemux86 Make some extensions comparison more versatile Permalink Failed to load latest commit information. .github Drop 'dev' branch Jun 11, 2016 config Improve code / xml formatting, #782 Jul 12, 2016 docs Improve code / xml formatting, #782 Jul 12, 2016 eclipse-config Update Eclipse config with space indentation, remove obsolete 1.6 #782 Feb 6, 2016 gradle/wrapper Upgrade Gradle to 2.10 and Gradle plugin to 2.0.0 Apr 8, 2016 mapsforge-core Deprecate Maven build, closes #852 Jul 8, 2016 mapsforge-map-android-extras Android Support Library: use provided scope, closes #854 Jul 9, 2016 mapsforge-map-android Improve code / xml formatting, #782 Jul 12, 2016 mapsforge-map-awt Deprecate Maven build, closes #852 Jul 8, 2016 mapsforge-map-reader Deprecate Maven build, closes #852 Jul 8, 2016 mapsforge-map-writer Deprecate Maven build, closes #852 Jul 8, 2016 mapsforge-map Make some extensions comparison more versatile Jul 14, 2016 mapsforge-poi-android Deprecate Maven build, closes #852 Jul 8, 2016 mapsforge-poi-awt Deprecate Maven build, closes #852 Jul 8, 2016 mapsforge-poi-writer Improve code / xml formatting, #782 Jul 12, 2016 mapsforge-poi Deprecate Maven build, closes #852 Jul 8, 2016 mapsforge-samples-android Make some extensions comparison more versatile Jul 14, 2016 mapsforge-samples-awt Deprecate Maven build, closes #852 Jul 8, 2016 mapsforge-themes Deprecate Maven build, closes #852 Jul 8, 2016 resources Rendertheme V5: scale numerics per zoom level #814 Apr 1, 2016 spatialite-android Improve code / xml formatting, #782 Jul 12, 2016 .gitattributes Normalize all the line endings Oct 24, 2015 .gitignore POI: use SpatiaLite 3.0.1 in Android implementation #807 Mar 22, 2016 .travis.yml Improve Travis builds Jun 23, 2016 COPYING Provide properly the license Mar 22, 2016 COPYING.LESSER Provide properly the license Mar 22, 2016 README.md Fix license badge Jun 13, 2016 build.gradle Gradle build with Java 8, fixes #853 Jul 8, 2016 deploy.gradle Gradle: minor improvements Jul 3, 2016 gradle.properties Gradle properties: use default settings May 5, 2016 gradlew Gradle: advance to 2.8 / 1.5.0 Nov 20, 2015 gradlew.bat Gradle: update version, include wrapper Oct 3, 2015 settings.gradle Internal render themes own module, closes #848 Jun 30, 2016 README.md The mapsforge project provides free and open software for the rendering of maps based on OpenStreetMap data. Currently, we offer a library for ad-hoc map rendering on Android devices and in Java stand-alone applications. The current stable release is 0.6.1. See the integration guide and changelog, download official binaries. The mapsforge project uses a compact file format for fast ad-hoc rendering of OpenStreetMap data. We provide tools to compile your own maps with detailed instructions and also precompiled maps. It provides simple boilerplate code to build applications for Android that display OpenStreetMap-based maps. It provides a library to build standalone applications in Java. Mapsforge maps can be flexibly styled with XML style files (render themes). We provide tools / library for POI search (beta) and also precompiled POI. Mapsforge supports Android 2.3.3 (API level 10) and above. It has been tested on Android 6 Marshmallow. Mapsforge is used by many applications. Mapsforge is in active development: changelog, contributors. API documentation. Official binary releases. Latest builds from CI server. Mapsforge is free and open source, licensed under the LGPL3 license. Mapsforge Talks. Mailing List. Screenshots: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mapsforge/mapsforge/"	"Software for the rendering of maps based on OpenStreetMap data."	"true"
"Geospatial"	"Spatial4j"	"https://github.com/locationtech/spatial4j/"	"General purpose spatial/geospatial ASL licensed open-source Java library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"306"	"46"	"87"	"GitHub - locationtech/spatial4j: A Geospatial Library for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 306 Fork 87 locationtech/spatial4j Code Issues 50 Pull requests 1 Pulse Graphs A Geospatial Library for Java 134 commits 11 branches 12 releases 4 contributors Java 99.9% HTML 0.1% Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.5-release ShapeFactory gh-pages master multi-project-jackson _old/chilling-precision _old/dateWrapIssue _old/master _old/spatial4j-cm-fixes _old/sttawm-dateline with_jackson Nothing to show spatial4j-parent-0.2 spatial4j-0.6 spatial4j-0.5 spatial4j-0.4.1 spatial4j-0.4 spatial4j-0.3 _old/spatial4j-parent-0.2 _old/spatial4j-0.4.1 _old/spatial4j-0.4 _old/spatial4j-0.3 _old/eclipse_initial _old/LocationTech-Premerge Nothing to show New pull request Latest commit f1683da Mar 14, 2016 ryantxu update Voyager GIS to Voyager Search Permalink Failed to load latest commit information. src Fix Java 8 javadoc errors, but not warnings Feb 26, 2016 .gitignore New initial commit by Webmaster Jun 29, 2015 .travis.yml #114 put back the debug info Aug 14, 2015 CHANGES.md CHANGES.md: Date release 0.6 to today Feb 26, 2016 CONTRIBUTING.md Update CONTRIBUTOR.md to note the CLA Jan 29, 2016 FORMATS.md Update FORMATS.md Sep 16, 2015 README.md Update the maven badge (now locationtech) Mar 10, 2016 about.md CQ8417: add 'about' file in Markdown format. Aug 14, 2015 asl-v20.txt Rename license file to comply with Eclipse standards. Aug 14, 2015 devnotes.md pom.xml: updated release process devnotes Feb 26, 2016 eclipse New initial commit by Webmaster Jun 29, 2015 notice.md CQ8417: Standard Eclipse ""Notice File (Software User Agreement) Aug 14, 2015 pom.xml update Voyager GIS to Voyager Search Mar 14, 2016 README.md Spatial4j (note: Spatial4j's official home page is at LocationTech: https://www.locationtech.org/projects/technology.spatial4j but this README has richer information) Spatial4j is a general purpose spatial / geospatial ASL licensed open-source Java library. It's core capabilities are 3-fold: to provide common shapes that can work in Euclidean and geodesic (surface of sphere) world models, to provide distance calculations and other math, and to read & write shapes from formats like WKT and GeoJSON. Spatial4j is a project of the LocationTech Industry Working Group of the Eclipse Foundation. If you are working with spatial grid-square indexing schemes, be it Geohash or something custom, then you are likely to find especially high utility from Spatial4j -- doubly-so for Apache Software Foundation projects due to restrictions on use of LGPL software there (Spatial4j is ASL but JTS is still LGPL). Spatial4j is well tested; it's monitored via Travis-CI continuous integration (plus another Hudson build) and we use Codecov for code coverage. If you are interested in contributing to Spatial4j please review the contribution guidelines. Shapes and Other Features The main part of Spatial4j is its collection of shapes. Shapes in Spatial4j have these features: Compute its lat-lon bounding box. Compute an area. For some shapes its more of an estimate. Compute if it contains a provided point. Compute the relationship to a lat-lon rectangle. Relationships are: CONTAINS, WITHIN, DISJOINT, INTERSECTS. Note that Spatial4j doesn't have a notion of ""touching"". Spatial4j has a variety of shapes that operate in Euclidean-space -- i.e. a flat 2D plane. Most shapes are augmented to support a wrap-around at X -180/+180 for compatibility with latitude & longitudes, which is effectively a cylindrical model. But the real bonus is its circle (i.e. point-radius shape that can operate on a surface-of-a-sphere model. See below for further info. The term ""geodetic"" or ""geodesic"" or ""geo"" is used here as synonymous with that model but technically those words have a more broad meaning. Shape Euclidean Cylindrical Spherical Point Y Y Y Rectangle Y Y Y Circle Y N Y LineString Y N N Buffered L/S Y N N Polygon Y Y N ShapeCollection Y Y Y The Rectangle shape exists in the spherical model as a lat-lon rectangle, which basically means it's math is no different than cylindrical. Polygons don't support pole-wrap (sorry, no Antarctica polygon); just dateline-cross. Polygons are supported by wrapping JTS's Geometry, which is to say that most of the fundamental logic for that shape is implemented by JTS. Other Features Read and write Shapes as WKT. Include the ENVELOPE extension from CQL, plus a Spatial4j custom BUFFER operation. Buffering a point gets you a Circle. Read and write Shapes as GeoJSON. Read and write Shapes as Polyshape. 3 great-circle distance calculators: Law of Cosines, Haversine, Vincenty For more information on the formats supported, see FORMATS.md. Dependencies Spatial4j runs on Java -- version 1.7 or better. Otherwise, all dependencies listed in the maven pom.xml are either marked optional or for testing. The optional dependencies are: JTS: You need JTS if you use polygons, or obviously if you use any of the classes prefixed with ""Jts"". Noggit: The Noggit JSON parsing library is only needed for GeoJSON parsing (not required for writing). Why not use JTS? Why should you use Spatial4j? Spatial4j was born out of an unmet need from other open-source Java software. JTS is the most popular spatial library in Java. JTS is powerful but it only supports Euclidean geometry (no geodesics), it has no Circle shape, and it is LGPL licensed (which is planned to change soon). Spatial4j has a geodesic circle implementation, and it wraps JTS geometries to add dateline-wrap support (no pole wrap yet). A geodesic circle implementation (i.e. point-radius on surface of a sphere), has been non-trivial; see for yourself and look at the extensive testing. Presumably many applications will use a polygon substitute for a circle, however note that not only is it an approximation, but common algorithms inscribe instead of circumscribe the circle. The result is a polygon that doesn't quite completely cover the intended shape, potentially resulting in not finding desired data when applied to the information-retrieval domain (e.g. indexing/search in Apache Lucene) where it is usually better to find a false match versus not find a positive match when making approximations. Also, Spatial4j's implementation goes to some lengths to be efficient by only calculating the great-circle-distance a minimum number of times in order to find the intersection relationship with a rectangle. Even computing the bounding-box of this shape was non-obvious, as the initial algorithm lifted from the web at a popular site turned out to be false. Getting Started Javadoc API The facade to all of Spatial4j is the SpatialContext. It acts as a factory for shapes and it holds references to most other classes you might use and/or it has convenience methods for them. For example you can get a DistanceCalculator but if you just want to calculate the distance then the context has a method for that. To get a SpatialContext (or just ""context"" for short), you could use a global singleton SpatialContext.GEO or JtsSpatialContext.GEO which both use geodesic surface-of-sphere calculations (when available); the JTS one principally adds Polygon support. If you want a non-geodesic implementation or you want to customize one of many options, then instantiate a SpatialContextFactory (or JtsSpatialContextFactory), set the options, then invoke newSpatialContext(). If you have a set of name-value string pairs, perhaps from a java properties file, then instead use the static makeSpatialContext(map, classLoader) method which adds a lot of flexibility to the configuration initialization versus hard-coding it. You should generally avoid calling constructors for anything in Spatial4j except for the SpatialContextFactory. Constructors aren't strictly forbidden but the factories are there to provide an extension point / abstraction, so don't side-step them unless there's a deliberate reason. Miscellaneous Discuss Spatial4j on our mailing list (note: old list is here). View metadata about the project as generated by Maven: maven site. Spatial4j has been ported to .NET (C#) where it is appropriately named Spatial4n. Future Road Map Ideas Support for projections by incorporating Proj4j More surface-of-sphere implemented shapes (LineString, Polygon), such as by using Geo3D Polygon pole wrap Multi-dimensional? History Before Spatial4j, there was Lucene Spatial Playground (LSP) and from this work a generic core spatial library emerged, independent of Lucene: Spatial4j. The other parts of LSP were either merged into Lucene / Solr itself or were migrated to Spatial Solr Sandbox. On February 26th 2016, with release 0.6, Spatial4j became a LocationTech project (a part of Eclipse) following a long incubation period. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/locationtech/spatial4j/"	"General purpose spatial/geospatial ASL licensed open-source Java library."	"true"
"GUI"	"JavaFX"	"http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html"	"The successor of Swing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JavaFX Developer Home     Oracle Country Country Communities I am a... I want to... Welcome Account Sign Out Sign In/Register Help Products Solutions Downloads Store Support Training Partners About OTN Oracle Technology Network Java Java SE Overview Java SE Java EE Java ME Java SE Support Java SE Advanced & Suite Java Embedded Java DB Web Tier Java Card Java TV New to Java Community Java Magazine Overview Downloads Documentation Community Technologies Training JavaFX - The Rich Client Platform JavaFX is the next step in the evolution of Java as a rich client platform. It is designed to provide a lightweight, hardware-accelerated Java UI platform for enterprise business applications. With JavaFX, developers can preserve existing investments by reusing Java libraries in their applications. They can even access native system capabilities, or seamlessly connect to server-based middleware applications. As of JDK 7u6 JavaFX is included with the standard JDK and JRE bundles.  Please download the JDK or JRE to use JavaFX.   ANNOUNCEMENTS JDK 8 (with JavaFX) Now Available - Use JavaFX to build rich applications.   Download Scene Builder 2.0 early access is now available   Download    IN THE SPOTLIGHT Featured story - Facewizz leverages JavaFX for facial surgery planning. Featured utility - JideFX is a suite of UI Controls for JDK 8 that is being developed by JIDE Software.     VIDEOS JavaFX 2.2 Graphics Tips and Tricks       More Videos   Introducing JavaFX 2.0 Effects and Transitions Overview The JavaFX Canvas node Graphics Building my First JavaFX Application using NetBeans 7.1 Properties, Events, and Binding     Part 1      Part 2      Part 3 Embedding Web Content Getting Started with JavaFX Scene Builder Animations Using Scene Builder with NetBeans IDE 7.2      WHY USE JAVAFX? JavaFX provides a powerful Java-based UI platform capable of handling large-scale data-driven business applications. JavaFX applications are completely developed in Java, one of the most widely deployed technologies with one of the largest developer communities in the world, while leveraging the power of standards-based programming practices and design patterns. JavaFX provides a rich set of UI controls, graphics and media API with high-performance hardware-accelerated graphics and media engines to simplify development of immersive visual applications. Learn More        Data Sheet Features Benefits Java APIs for JavaFX. JavaFX 2.0 applications are completely developed in Java Developers can use their favorite Java development tools Leverage thousands of existing Java libraries Developers can use popular JVM-based scripting languages, such as Groovy, JRuby and Scala FXML, a scriptable, XML-based markup language for defining user interfaces. Develop and maintain complex user interfaces easily Web rendering engine Seamlessly mix and match native Java capabilities and the dynamic capabilities of web technologies in your applications Seamless integration into Swing applications Existing Swing applications can be updated easily with new JavaFX features, such as rich graphics API, media playback, and embedded Web content High-performance hardware accelerated graphics pipeline JavaFX applications featuring data visualizations and complex user interfaces can leverage modern graphics cards for optimal performance High-performance media engine Playback video and audio content in popular formats within your application Over 60 charts, form and layout components, easily customizable through the use of Cascading Style Sheets (CSS). JavaFX provides all the major UI controls required for the development of a full featured application. Components can be easily skinned using standard Web technologies such as CSS Ubiquitous deployment via the Java Runtime Environment (JRE) The JavaFX Runtime is installed with the Java Runtime Environment, ensuring its availability on more than 97% of enterprise desktops worldwide [Source: Forrester, November 2009: Enterprise Platform Trends, H1 2009] RESOURCES  Download FAQ JavaFX Samples JavaFX OTN Forum Jira OpenJFX   Java SDKs and Tools Java SE Java EE and Glassfish Java ME Java Card NetBeans IDE Java Mission Control Java Resources Java APIs Technical Articles Demos and Videos Forums Java Magazine Java.net Developer Training Tutorials Java.com     E-mail this page     Printer View   Oracle Cloud Learn About Oracle Cloud Computing Get a Free Trial Learn About DaaS Learn About SaaS Learn About PaaS Learn About IaaS Learn About Private Cloud Learn About Managed Cloud Java Learn About Java Download Java for Consumers Download Java for Developers Java Resources for Developers Java Cloud Service Java Magazine Customers and Events Explore and Read Customer Stories All Oracle Events Oracle OpenWorld JavaOne Email Subscriptions Subscribe to Oracle Communications Subscription Center Communities Blogs Discussion Forums Wikis Oracle ACEs User Groups Social Media Channels Services and Store Log In to My Oracle Support Training and Certification Become a Partner Find a Partner Solution Purchase from the Oracle Store Contact and Chat US Sales: +1.800.633.0738 Global Contacts Oracle Support Partner Support   Integrated Cloud Applications and Platform Services © Oracle Subscribe Careers Contact Us Site Maps Legal Notices Terms of Use Privacy   Ad Choices Oracle Mobile Facebook LinkedIn Twitter Google+ YouTube Oracle RSS Feed  "	"null"	"null"	"The successor of Swing."	"true"
"GUI"	"Scene Builder"	"http://gluonhq.com/open-source/scene-builder/"	"Visual layout tool for JavaFX applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Scene Builder - Gluon Products Gluon Mobile Gluon CloudLink Gluon Desktop Scene Builder Gluon Labs JavaFXPorts Gluon Connect Gluon Ignite Gluon Maps Gluon VM Services Support News About Contact Us Newsletter Founders Home » Gluon Labs » Scene Builder Scene Builder Drag & Drop, Rapid Application Development. Download Now   Integrated Scene Builder works with the JavaFX ecosystem – official controls, community projects, and Gluon offerings including Gluon Mobile, Gluon Desktop, and Gluon CloudLink.   Simple Drag & Drop user interface design allows for rapid iteration. Separation of design and logic files allows for team members to quickly and easily focus on their specific layer of application development.   Supported Scene Builder is free and open source, but is backed by Gluon. Commercial support offerings are available, including training and custom consultancy services. Download Scene Builder The latest version of Scene Builder is 8.2.0, it was released on May 18, 2016. To be kept informed of Scene Builder releases, consider subscribing to the Gluon Newsletter. Product Platform Download Scene Builder Executable Jar Download Scene Builder Windows Installer (x86) info Download Scene Builder Windows Installer (x64) info Download Scene Builder Mac OS X dmg Download Scene Builder Linux RPM (64-bit) Download Scene Builder Linux Deb (64-bit) Download Scene Builder Linux RPM (32-bit) Download Scene Builder Linux Deb (32-bit) Download Scene Builder Kit info Jar File Download License: Scene Builder is licensed under the BSD license. · © 2016 Gluon ·           · Contact Us · Back to top"	"null"	"null"	"Visual layout tool for JavaFX applications."	"true"
"GUI"	"SWT"	"http://www.eclipse.org/swt/"	"The Standard Widget Toolkit (SWT) is a graphical widget toolkit for use with the Java platform."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SWT: The Standard Widget Toolkit Skip to main content Create account Log in Donate Eclipse Platform SWT About Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM More Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM Toggle navigation Breadcrumbs Home Projects swt SWT Home Widgets Snippets Examples FAQ Tools Javadoc Documentation Community Bugs Contact Us SWT: The Standard Widget Toolkit SWT is an open source widget toolkit for Java designed to provide efficient, portable access to the user-interface facilities of the operating systems on which it is implemented. Welcome Welcome to SWT! You may have come to this page looking for snippets (little code examples) or examples (big code examples like ControlExample); widget snapshots or documentation. Or maybe you want to request a feature, report a bug, or ask a question. Whatever the reason, you will find many resources here. Enjoy! Releases Stable Windows, Linux, OS X, more... 4.5 Release - June 3, 2015 New and Noteworthy Development 4.6 Integration Builds For links to SWT Binary and Source for all platforms, select current 4.6 Integration Build and then scroll to bottom of page. Articles How to develop SWT applications in Eclipse How to run the ControlExample and other SWT examples How to deploy SWT applications on Mac OS X How to deploy SWT applications using Java Web Start How to use SWT from Git How to generate the SWT JNI Code How to generate the SWT JNI Code for Cocoa Using OpenGL in SWT Applications How to help with the SWT Cocoa port How to contribute a bug fix to SWT Many more articles about SWT on Eclipse Corner at eclipse.org Full list of articles and documentation Resources Widget screenshots with links to documentation Snippets, helpful little code examples Examples, helpful big code examples The SWT FAQ answers many common questions Tools and Plug-ins for SWT developers Online Javadoc Books and additional documentation Test Plan for SWT SWT Community Page SWTBot, UI/functional testing tool for SWT and Eclipse based applications. Eclipse/SWT Accessibility wiki Contact Us The SWT newsgroup [register] is a very active user discussion and help forum. See the Eclipse Community Forums page (expand Eclipse Projects to see SWT) for information on this and other newsgroups. SWT development is discussed and tracked in the Eclipse bugzilla under the Platform/SWT component. You can subscribe to the new bug inbox by watching platform-swt-inbox@eclipse.org from your bugzilla email preferences. If you are modifying or porting SWT and have questions, try the SWT developer mailing list [archive, search]. Older Releases SWT 4.4.2, 4 February 2015. New and Noteworthy items for each milestone SWT 4.3.2, 21 February 2014. New and Noteworthy items for each milestone SWT 3.8.2/4.2.2, 6 February 2013. New and Noteworthy items for each milestone SWT 3.7.2, 8 February 2012. New and Noteworthy items for each milestone SWT 3.6.2, 11 February 2011. New and Noteworthy items for each milestone SWT 3.5.2, 12 February 2010. New and Noteworthy items for each milestone SWT 3.4.2, 13 February 2009. New and Noteworthy items for each milestone SWT 3.3.2, 22 February 2008. New and Noteworthy items for each milestone SWT 3.2.2, 12 February 2007. New and Noteworthy items for each milestone SWT 3.1.2, 19 January 2006. New and Noteworthy items for each milestone SWT 3.0.2, 11 March 2005. New and Noteworthy items for each milestone source Back to the top Eclipse Foundation About us Contact Us Donate Governance Logo and Artwork Board of Directors Legal Privacy Policy Updated Terms of Use Updated Copyright Agent Eclipse Public License Legal Resources Useful Links Report a Bug Documentation How to Contribute Mailing Lists Forums Marketplace Other IDE and Tools Community of Projects Working Groups Copyright © 2016 The Eclipse Foundation. All Rights Reserved. Back to the top"	"null"	"null"	"The Standard Widget Toolkit (SWT) is a graphical widget toolkit for use with the Java platform."	"true"
"High Performance"	"Agrona"	"https://github.com/real-logic/Agrona"	"Data structures and utility methods that are common in high-performance applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"461"	"72"	"74"	"GitHub - real-logic/Agrona: High Performance data structures and utility methods for Java and C++ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 461 Fork 74 real-logic/Agrona Code Issues 4 Pull requests 0 Wiki Pulse Graphs High Performance data structures and utility methods for Java and C++ 584 commits 2 branches 19 releases 12 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags longs-experiment master Nothing to show 0.5.2 0.5.1 0.5 0.4.13 0.4.12 0.4.11 0.4.10 0.4.9 0.4.8 0.4.7 0.4.6 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4 0.3.1 0.3 Nothing to show New pull request Latest commit 3f4ec91 Jul 15, 2016 mjpt777 [Java] Support read-only heap ByteBuffers from direct buffer implemen… … …tations. Issue #66. Permalink Failed to load latest commit information. config/checkstyle [Java] Added indentation checkstyle and fix errors. Jan 11, 2016 gradle/wrapper [Java] Upgrade to Gradle 2.14. Jun 14, 2016 src [Java] Support read-only heap ByteBuffers from direct buffer implemen… Jul 15, 2016 .gitignore [Java] ignore eclipse classes dir Oct 11, 2015 LICENSE Initial commit Nov 3, 2014 README.md Merge remote-tracking branch 'origin/master' Apr 26, 2016 build.gradle [Java] Upgrade to Checkstyle 7.0. Jul 14, 2016 gradlew [Java] Upgrade to Gradle 2.13. May 4, 2016 gradlew.bat [Java] Upgrade to Gradle 2.13. May 4, 2016 settings.gradle [Java] Update grade settings. Nov 4, 2014 README.md Agrona Agrona provides a library of data structures and utility methods that are a common need when building high-performance applications in Java. Many of these utilities are used in the Aeron efficient reliable UDP unicast, multicast, and IPC message transport and provides high-performance buffer implementations to support the Simple Binary Encoding Message Codec. For the latest version information and changes see the Change Log. The latest release and downloads can be found in Maven Central. Utilities Included: Buffers - Thread safe direct and atomic for working with on and off heap memory with memory ordering semantics. Maps - Open addressing and linear probing with int/long primitive keys to object reference values. Maps - Open addressing and linear probing with int/long primitive keys to int/long values. Sets - Open addressing and linear probing for int/long primitives. Cache - Set Associative with int/long primitive keys to object reference values. Queues - Lock-less implementations for low-latency applications. Ring/Broadcast Buffers - implemented off-heap for IPC communication. Basic Agent framework. Signal handling to support ""Ctrl + c"" in a server application. Scalable Timer Wheel. Basic code generation from annotated implementations that can vary on primitive types. Off-heap counters implementation for application telemetry. Implementations of InputStream and OutputStream that can wrap direct buffers. DistinctErrorLog: A log of distinct errors to avoid filling disks with existing logging approaches. License (See LICENSE file for full license) Copyright 2014 - 2016 Real Logic Limited Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Build Java Build The project is built with Gradle using this build.gradle file. You require the following to build Agrona: Latest stable Oracle JDK 8 Full clean, build, and install into local maven repository $ ./gradlew  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/real-logic/Agrona"	"Data structures and utility methods that are common in high-performance applications."	"true"
"High Performance"	"Disruptor"	"http://lmax-exchange.github.io/disruptor/"	"Inter-thread messaging library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Disruptor by LMAX-Exchange LMAX Disruptor High Performance Inter-Thread Messaging Library View on GitHub Download here... Discussion, Blogs & Other Useful Links Disruptor Google Group Bad Concurrency (Michael Barker) LMAX (Planet) LMAX Exchange Disruptor presentation @ QCon SF Disruptor Technical Paper Mechanical Sympathy (Martin Thompson) Martin Fowler's Technical Review .NET Disruptor Port Presentations Introduction to the Disruptor Read This First To understand the problem the Disruptor is trying to solve, and to get a feel for why this concurrency framework is so fast, read the Technical Paper. It also contains detailed performance results. And now for some words from our sponsors... LMAX are recruiting once again. If you are interested in working with a great team, with some amazing technology, and think you can add something to the mix then please check out our jobs page. What is the Disruptor? LMAX aims to be the fastest trading platform in the world. Clearly, in order to achieve this we needed to do something special to achieve very low-latency and high-throughput with our Java platform. Performance testing showed that using queues to pass data between stages of the system was introducing latency, so we focused on optimising this area. The Disruptor is the result of our research and testing. We found that cache misses at the CPU-level, and locks requiring kernel arbitration are both extremely costly, so we created a framework which has ""mechanical sympathy"" for the hardware it's running on, and that's lock-free. This is not a specialist solution, it's not designed to work only for a financial application. The Disruptor is a general-purpose mechanism for solving a difficult problem in concurrent programming. It works in a different way to more conventional approaches, so you use it a little differently than you might be used to. For example, applying the pattern to your system is not as simple as replacing all your queues with the magic ring buffer. We've got code samples to guide you, a growing number of blogs and articles giving an overview of how it works, the technical paper goes into some detail as you'd expect, and the performance tests give examples of how to use the Disruptor: If you prefer real, live people explaining things instead of a dry paper or content-heavy website, there's always the presentation Mike and Martin gave at QCon San Francisco. If you fancy a natter with the folks involved head over to our Discussion Group. Martin will also witter on occasionally about performance in his Mechanical Sympathy blog. Martin Fowler has also done a great review of the Disruptor's application at LMAX. What's the big deal? It's fast. Very fast. Note that this is a log-log scale, not linear. If we tried to plot the comparisons on a linear scale, we'd run out of space very quickly. We have performance results of the test that produced these results, plus others of throughput testing. Great What do I do next? Getting Started – how to check out the code, build it and run the performance tests Read the API documentation Download the latest jar Take a look at the Change Log Check out our Frequently Asked Questions Disruptor is maintained by LMAX-Exchange This page was generated by GitHub Pages. Tactile theme by Jason Long."	"null"	"null"	"Inter-thread messaging library."	"true"
"High Performance"	"fastutil"	"http://fastutil.di.unimi.it/"	"Fast and compact type-specific collections."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"220"	"30"	"31"	"GitHub - vigna/fastutil: fastutil extends the Java™ Collections Framework by providing type-specific maps, sets, lists and queues. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 220 Fork 31 vigna/fastutil Code Issues 7 Pull requests 0 Pulse Graphs fastutil extends the Java™ Collections Framework by providing type-specific maps, sets, lists and queues. 944 commits 1 branch 7 releases 6 contributors Java 86.7% HTML 6.5% Shell 3.8% Makefile 3.0% Java HTML Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 7.0.12 7.0.11 7.0.10 7.0.7 7.0.6 7.0.5 7.0.4 Nothing to show New pull request Latest commit ee0d0da Apr 15, 2016 vigna Fixed toArray(Object[]) for empty sets Permalink Failed to load latest commit information. drv Fixed toArray(Object[]) for empty sets Apr 15, 2016 src Eliminated false statement Mar 7, 2016 test/it/unimi/dsi/fastutil Fixed toArray(Object[]) for empty sets Apr 15, 2016 .gitignore Created markdown README and removed references to old driver files May 11, 2015 .svnignore Tweaking Mar 22, 2006 CHANGES Fixed lack of test for null/wrong class when testing entries Apr 6, 2016 LICENSE-2.0 Moved to Apache License 2.0 Nov 18, 2010 README.md Added group May 11, 2015 TODO Added remove() methods to iterators in array-based containers Feb 18, 2016 build.properties Fixed lack of test for null/wrong class when testing entries Apr 6, 2016 build.xml Reverted pernicious pull request Feb 28, 2016 fastutil.bnd Tweaking Jan 13, 2015 gencsource.sh Converted to standard C preprocessor Apr 7, 2016 ivy.xml Tweaking Jan 13, 2015 makefile Converted to standard C preprocessor Apr 7, 2016 pom-model.xml Tweaking Aug 3, 2013 pom.xml We now check for gcc being gcc Apr 7, 2016 test.sh Fixed problem with correlation in hash tables of different sizes Aug 3, 2013 README.md Welcome to fastutil. fastutil is a collection of type-specific Java classes that extend the Java Collections Framework by providing several containers, such as maps, sets, lists and prority queues, implementing the interfaces of the java.util package; it provides also big (64-bit) arrays, sets and lists, and fast, practical I/O classes for binary and text files. fastutil provides a huge collection of specialized classes generated starting from a parameterized version; the classes are much more compact and much faster than the general ones. Please read the package documentation for more information. The compiled code is contained in the jar file, and should be installed where you keep Java extensions. Note that the jar file is huge, due to the large number of classes: if you plan to ship your own jar with some fastutil classes included, you should look at AutoJar or similar tools to extract automatically the necessary classes. You have to ""make sources"" to get the actual Java sources; finally, ""ant jar"" and ""ant javadoc"" will generate the jar file and the API documentation. The Java sources are generated using a C preprocessor. The gencsource.sh script reads in a driver file, that is, a Java source that uses some preprocessor-defined symbols and some conditional compilation, and produces a (fake) C source, which includes the driver code and some definitions that customize the environment. seba (sebastiano.vigna@unimi.it) fastutil@googlegroups.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vigna/fastutil"	"Fast and compact type-specific collections."	"true"
"High Performance"	"GS Collections"	"https://github.com/goldmansachs/gs-collections"	"Collection framework inspired by Smalltalk."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1552"	"197"	"232"	"GitHub - goldmansachs/gs-collections: A supplement or replacement for the Java Collections Framework.  We are pleased to announce that GS Collections has been migrated to the Eclipse Foundation, re-branded as Eclipse Collections. Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 197 Star 1,552 Fork 232 goldmansachs/gs-collections Code Issues 3 Pull requests 1 Wiki Pulse Graphs A supplement or replacement for the Java Collections Framework. We are pleased to announce that GS Collections has been migrated to the Eclipse Foundation, re-branded as Eclipse Collections. https://www.eclipse.org/collections/ 912 commits 1 branch 20 releases 11 contributors Java 98.7% Scala 1.3% Java Scala Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 7.0.3 7.0.2 7.0.1 7.0.0 6.2.0 6.1.0 6.0.0 5.1.0 5.0.0 4.2.0 4.1.0 4.0.0 3.2.0 3.1.0 3.0.1 3.0.0 2.0.0 1.2.0 1.1.0 1.0.1 Nothing to show New pull request Latest commit fa8bf3e Feb 19, 2016 itohro [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. … git-svn-id: svn+ssh://gscollections.svn.services.gs.com/svnroot/gscollections-svn/trunk@938 d5c9223b-1aff-41ac-aadd-f810b4a99ac4 Permalink Failed to load latest commit information. .idea [GSCOLLECT-1521] Fix the iteration order of several iteration patterns. Jan 17, 2015 .settings [GSCOLLECT-35] Initial import. Jan 5, 2012 acceptance-tests [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 collections-api [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 collections-testutils [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 collections [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 gs-collections-code-generator-ant [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 gs-collections-code-generator-maven-plugin [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 gs-collections-code-generator [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 gs-collections-forkjoin [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 jmh-scala-tests [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 jmh-tests [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 junit-trait-runner [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 memory-tests [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 performance-tests [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 scala-unit-tests [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 serialization-tests [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 unit-tests-java8 [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 unit-tests [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 .classpath [GSCOLLECT-35] Initial import. Jan 5, 2012 .gitignore [GSCOLLECT-625] Add .gitignore file. Feb 9, 2012 .project [GSCOLLECT-35] Initial import. Jan 5, 2012 .travis.yml [GSCOLLECT-1584] Configure Travis CI build. Mar 1, 2015 LICENSE-2.0.txt [GSCOLLECT-35] Initial import. Jan 5, 2012 NOTICE [GSCOLLECT-1671] Remove unnecessary references from NOTICE file. Feb 17, 2016 README.md [GSCOLLECT-1668] Update README.md to navigate users to Eclipse Collec… Feb 15, 2016 build.xml [GSCOLLECT-1325] Change test modules to use Java 8 and replace anonym… Mar 8, 2014 checkstyle-configuration.xml [GSCOLLECT-1653] Update versions of dependencies. Oct 6, 2015 checkstyle-suppressions.xml [GSCOLLECT-1653] Update versions of dependencies. Oct 6, 2015 collections-parent.iml [GSCOLLECT-1278] Update versions of dependencies. Feb 26, 2014 common-build.xml [GSCOLLECT-42] Configure deployment to Maven Central. Sep 25, 2013 deploy.properties [GSCOLLECT-1674] Update version number to 7.0.3 in the build. Feb 19, 2016 findbugs-exclude.xml [GSCOLLECT-1212] Implement ObjectPrimitiveHashMapWithHashingStrategy. Oct 2, 2015 java.header [GSCOLLECT-898] Change the CheckStyle header regular expression to al… Mar 22, 2013 pom-template [GSCOLLECT-42] Configure deployment to Maven Central. Sep 26, 2013 pom.xml [GSCOLLECT-1675] Update version number to 7.0.4-SNAPSHOT in the build. Feb 19, 2016 version.properties [GSCOLLECT-1594] Update versions of dependencies. Mar 25, 2015 README.md GS Collections is now Eclipse Collections We are pleased to announce that GS Collections has been migrated to the Eclipse Foundation, re-branded as Eclipse Collections. Eclipse Collections 7.0 has the exact same feature set as GS Collections 7.0. Going forward, any new features will be developed in Eclipse Collections. We will only port critical bug fixes to GS Collections. To support smooth migration for users, we implemented a conversion application gsc-ec-converter. Please plan your migration accordingly from GS Collections to Eclipse Collections. GS Collections GS Collections is a collections framework for Java. It has JDK-compatible List, Set and Map implementations with a rich API and set of utility classes that work with any JDK compatible Collections, Arrays, Maps or Strings. The iteration protocol was inspired by the Smalltalk collection framework. The library modules in GS Collections are compatible with Java 5 (gs-collections-api, gs-collections, and gs-collections-testutils). Quick Example GS Collections puts iteration methods on the container types. Lambdas are simulated using anonymous inner classes. Here's a code example that demonstrates the usual style of programming with GS Collections. MutableList<Person> people = FastList.newListWith(person1, person2, person3); MutableList<String> sortedLastNames = people.collect(Person.TO_LAST_NAME).sortThis(); System.out.println(""Comma separated, sorted last names: "" + sortedLastNames.makeString()); Person.TO_LAST_NAME is defined as a constant Function in the Person class. public static final Function<Person, String> TO_LAST_NAME = new Function<Person, String>() {     public String valueOf(Person person)     {         return person.lastName;     } };  In Java 8, the Function can be replaced with a lambda: MutableList<String> sortedLastNames = people.collect(person -> person.getLastName()).sortThis(); Or, a method reference: MutableList<String> sortedLastNames = people.collect(Person::getLastName).sortThis(); Why GS Collections? Improves readability and reduces duplication of iteration code (enforces DRY/OAOO) Implements several, high-level iteration patterns (select, reject, collect, inject into, etc.) on ""humane"" container interfaces which are extensions of the JDK interfaces Provides a consistent mechanism for iterating over Collections, Arrays, Maps, and Strings Provides replacements for ArrayList, HashSet, and HashMap optimized for performance and memory usage Performs more ""behind-the-scene"" optimizations in utility classes Encapsulates a lot of the structural complexity of parallel iteration and lazy evaluation Adds new containers including Bag, Interval, Multimap, BiMap, and immutable versions of all types Has been under active development since 2005 and is a mature library Documentation The best way to learn about GS Collections is to dive into the code kata. The kata is a fun way to learn idiomatic GS Collections usage and hone your skills through practice. Please refer to the wiki for more details. For more comprehensive documentation, take a look at the Reference Guide. Contributions We currently do all development in an internal Subversion repository and are not prepared to take external contributions. However, we watch the issue tracker for bug reports and feature requests. FAQ Why is Goldman Sachs open-sourcing GS Collections? We believe that GS Collections offers a significant advantage over existing solutions. We hope others will benefit from it. We believe in the power of the technical community to help improve GS Collections. Technology is a huge part of what we do at Goldman Sachs. GS Collections exemplifies our commitment to technology. We use open source software in many of our operations. We have benefited from the work of others and we'd like to give something back. Does Goldman Sachs use GS Collections? Yes, we use GS Collections in many of our internal applications. Acquiring GS Collections Download Version 7.0.0 Older versions Maven <dependency>   <groupId>com.goldmansachs</groupId>   <artifactId>gs-collections-api</artifactId>   <version>7.0.0</version> </dependency>  <dependency>   <groupId>com.goldmansachs</groupId>   <artifactId>gs-collections</artifactId>   <version>7.0.0</version> </dependency>  <dependency>   <groupId>com.goldmansachs</groupId>   <artifactId>gs-collections-testutils</artifactId>   <version>7.0.0</version>   <scope>test</scope> </dependency>  <dependency>   <groupId>com.goldmansachs</groupId>   <artifactId>gs-collections-forkjoin</artifactId>   <version>7.0.0</version> </dependency> Gradle compile 'com.goldmansachs:gs-collections-api:7.0.0' compile 'com.goldmansachs:gs-collections:7.0.0' testCompile 'com.goldmansachs:gs-collections-testutils:7.0.0' compile 'com.goldmansachs:gs-collections-forkjoin:7.0.0' Ivy <dependency org=""com.goldmansachs"" name=""gs-collections-api"" rev=""7.0.0"" /> <dependency org=""com.goldmansachs"" name=""gs-collections"" rev=""7.0.0"" /> <dependency org=""com.goldmansachs"" name=""gs-collections-testutils"" rev=""7.0.0"" /> <dependency org=""com.goldmansachs"" name=""gs-collections-forkjoin"" rev=""7.0.0""/> Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/goldmansachs/gs-collections"	"Collection framework inspired by Smalltalk."	"true"
"High Performance"	"HPPC"	"http://labs.carrotsearch.com/hppc.html"	"Primitive collections."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"298"	"46"	"52"	"GitHub - carrotsearch/hppc: High Performance Primitive Collections for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 298 Fork 52 carrotsearch/hppc Code Pull requests 0 Wiki Pulse Graphs High Performance Primitive Collections for Java http://labs.carrotsearch.com 473 commits 9 branches 19 releases Fetching contributors Java 95.6% ANTLR 4.4% Java ANTLR Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3.x 0.4.x 0.5.x 0.7.x dweiss gh-pages hash-avalanche master structs Nothing to show 0.7.1 0.7.0 0.6.1 0.6.0 0.5.3 0.5.2 0.5.1 0.5.0 0.4.3 0.4.2 0.4.1 0.4.0 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 11a226e Jan 14, 2016 dweiss Add changes entry for PR # 5 Permalink Failed to load latest commit information. etc HPPC-149: Recognize tests.seed as the initialization seed for randomi… May 4, 2015 hppc-benchmarks Bumping version to 0.8.0-SNAPSHOT. May 6, 2015 hppc-examples Typo. May 18, 2015 hppc-template-processor Bumping version to 0.8.0-SNAPSHOT. May 6, 2015 hppc Merge pull request #5 from gdelafosse/osgi Jan 14, 2016 .gitignore Setup external tool builder to invoke template builders. Mar 9, 2015 ALTERNATIVES.txt Be less cool. May 4, 2015 CHANGES.txt Add changes entry for PR # 5 Jan 14, 2016 INSTALL.txt HPPC-101: added some rudimentary JMH benchmarks and sanity checks. Apr 23, 2015 LICENSE.txt HPPC-109: moved author acks to NOTICE.txt Mar 12, 2015 NOTICE.txt HPPC-109: moved author acks to NOTICE.txt Mar 12, 2015 README.txt Added a link to JIRA. May 6, 2015 pom.xml make hppc a valid OSGI bundle Jan 6, 2016 README.txt  HPPC: High Performance Primitive Collections --------------------------------------------  Collections of primitive types (maps, sets, stacks, lists)  with open internals and an API twist  (no java.util.collections.* compatibility).  See the following for more information:   Wiki: https://github.com/carrotsearch/hppc/wiki   Bugs: http://issues.carrot2.org/browse/HPPC/  See ALTERNATIVES.txt if you're just shopping around.  See LICENSE.txt to make your company's lawyer happy.  See CHANGES.txt for API changes and updates.  (c) Carrot Search s.c., http://carrotsearch.com/  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/carrotsearch/hppc"	"Primitive collections."	"true"
"High Performance"	"JCTools"	"https://github.com/JCTools/JCTools"	"Concurrency tools currently missing from the JDK."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"672"	"91"	"95"	"GitHub - JCTools/JCTools Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 91 Star 672 Fork 95 JCTools/JCTools Code Issues 25 Pull requests 2 Pulse Graphs http://jctools.github.io/JCTools 480 commits 3 branches 5 releases Fetching contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 gh-pages master Nothing to show v1.2.1 v1.2 v1.1 v1.1-alpha v1.0 Nothing to show New pull request Latest commit f74fa5c Jun 25, 2016 nitsanw spelling error fix Permalink Failed to load latest commit information. ides/eclipse move formatter to IDE specific location May 30, 2014 jctools-benchmarks Merge branch 'master' of https://github.com/JCTools/JCTools.git May 25, 2016 jctools-core improve javadoc Jun 25, 2016 jctools-experimental Merge branch 'master' of https://github.com/JCTools/JCTools Apr 18, 2016 resources rename Jul 1, 2014 .gitignore Tidy up poms after release, move up version to 1.2 Oct 19, 2015 .travis.yml travis CI Apr 15, 2015 LICENSE Initial commit Nov 10, 2013 README.md Update versions in readme Apr 30, 2016 RELEASE-NOTES.md spelling error fix Jun 25, 2016 pom.xml Move to 1.3-SNAPSHOT Mar 15, 2016 README.md JCTools Java Concurrency Tools for the JVM. This project aims to offer some concurrent data structures currently missing from the JDK: SPSC/MPSC/SPMC/MPMC variations for concurrent queues: SPSC - Single Producer Single Consumer (Wait Free, bounded and unbounded) MPSC - Multi Producer Single Consumer (Lock less, bounded and unbounded) SPMC - Single Producer Multi Consumer (Lock less, bounded) MPMC - Multi Producer Multi Consumer (Lock less, bounded) An expanded queue interface (MessagePassingQueue): relaxedOffer/Peek/Poll: trade off conflated guarantee on full/empty queue state with improved performance. drain/fill: batch read and write methods for increased throughput and reduced contention There's more to come and contributions/suggestions are most welcome. JCTools offers excellent performance at a reasonable price (FREE! under the Apache 2.0 License). It's stable and in use by such distiguished frameworks as Netty, RxJava and others. JCTools is also used by commercial products to great result. Get it NOW! Add the latest version as a dependency using Maven:         <dependency>             <groupId>org.jctools</groupId>             <artifactId>jctools-core</artifactId>             <version>1.2</version>         </dependency> Or use the awesome, built from source, https://jitpack.io/ version, you'll need to add the Jitpack repository:         <repository>           <id>jitpack.io</id>            <url>https://jitpack.io</url>         </repository> And setup the following dependency:         <dependency>             <groupId>com.github.JCTools.JCTools</groupId>             <artifactId>jctools-core</artifactId>             <version>1.2</version>         </dependency> You can also depend on latest snapshot from this repository (live on the edge) by setting the version to '1.3-SNAPSHOT'. Build it from source JCTools is maven built and requires an existing Maven installation and JDK8 (only for building, runtime is 1.6 compliant). With 'MAVEN_HOME/bin' on the path and JDK8 set to your 'JAVA_HOME' you should be able to run ""mvn install"" from this directory. Benchmarks JCTools is benchmarked using both JMH benchmarks and handrolled harnesses. The benchmarks and related instructions can be found in the jctools-benchmarks module README. Go wild and please let us know how it did on your hardware. Come up to the lab... Experimental work is available under the jctools-experimental module. Most of the stuff is developed with an eye to eventually porting it to the core where it will be stabilized and released, but some implementations are kept purely for reference and some may never graduate. Beware the Jabberwock my child. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JCTools/JCTools"	"Concurrency tools currently missing from the JDK."	"true"
"High Performance"	"Koloboke"	"https://github.com/OpenHFT/Koloboke"	"Hash sets and hash maps."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"513"	"73"	"66"	"GitHub - leventov/Koloboke: Java Collections till the last breadcrumb of memory and performance Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 73 Star 513 Fork 66 leventov/Koloboke Code Issues 21 Pull requests 0 Wiki Pulse Graphs Java Collections till the last breadcrumb of memory and performance https://koloboke.com/ 337 commits 2 branches 14 releases 3 contributors Java 92.4% Kotlin 7.5% HTML 0.1% Java Kotlin HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show lib-1.0.0 compile-0.5.1 compile-0.5 0.6.8 0.6.7 0.6.6 0.6.5 0.6.4 0.6.3 0.6.2 0.6.1 0.6 0.5.1 0.5 Nothing to show New pull request Latest commit 302e6d5 Jul 1, 2016 leventov Fix a bug in Cursor.setValue() generation, current value is not updat… … …ed (#49) Permalink Failed to load latest commit information. .idea Update IDEA dictionary May 25, 2016 benchmarks Use term 'growth factor' instead of grammatically incorrect 'grow fac… May 11, 2016 compile Add StaticNestedKeysAndValues Koloboke Compile test Jun 6, 2016 gradle/wrapper Updated Gradle wrapper for better Intellij IDEA experience Oct 1, 2014 jpsg Add ability to switch off parallelization in JPSG core May 25, 2016 lib Fix a bug in Cursor.setValue() generation, current value is not updat… Jul 1, 2016 .gitignore Refactored project structure (also a step towards #6) May 28, 2014 README.md Koloboke Compile 0.5.1 May 31, 2016 build.gradle Little refactor of dependency version management May 25, 2016 gradle.properties Move from net.openhft to com.koloboke groupID May 8, 2016 gradlew Moved to Gradle 2.0, added gradle wrapper, some fixes to gradle scripts Jul 6, 2014 gradlew.bat Moved to Gradle 2.0, added gradle wrapper, some fixes to gradle scripts Jul 6, 2014 methods.gradle Some changes that probably fix infinite recursion issues with gradle … May 20, 2016 settings.gradle Split extract impl-common project from impl to support compile project May 3, 2016 README.md Koloboke A family of projects around collections in Java (so far). The Koloboke Collections API A carefully designed extension of the Java Collections Framework with primitive specializations and more. Java 6+. Apache 2.0 license. Compatibility with the Java Collections Framework All primitive specialization collections extend basic interfaces (Collection, Set, Map), hence could be used as drop-in replacements of slow collections of boxed values API for Java 6 and 7 is forward-compatible with all methods new in Java 8 JavaDoc: Java 6 | Java 7 | Java 8 Koloboke Compile An annotation processor, generates implementations for collection-like abstract classes or interfaces. API agnostic, may be used to generate implementation for classes or interfaces, extending interfaces from the Koloboke Collections API, or, for example, interfaces from the Trove collections library. ""Embeddable version"" of the Koloboke implementation library. Quick start Add the following dependencies in your Maven pom.xml:   <dependency>     <groupId>com.koloboke</groupId>     <artifactId>koloboke-compile</artifactId>     <version>0.5.1</version>     <scope>provided</scope>   </dependency>   <dependency>     <groupId>com.koloboke</groupId>     <!-- `jdk6-7` instead of `jdk8` if you use Java 6 or 7 -->     <artifactId>koloboke-impl-common-jdk8</artifactId>     <version>1.0.0</version>   </dependency> Or in your Gradle build script, you should first apply the propdeps Gradle plugin to enable provided dependencies, and then configure the dependencies block: dependencies {     provided 'com.koloboke:koloboke-compile:0.5.1'     // `jdk6-7` instead of `jdk8` if you use Java 6 or 7     compile 'com.koloboke:koloboke-impl-common-jdk8:1.0.0' } Next step: read the Koloboke Compile tutorial. Javadocs The Koloboke implementation library An efficient implementation of the Koloboke Collections API. Compatibility with the Java Collections Framework Fail-fast semantics everywhere null keys are (optionally) supported, just like in java.util.HashMap Float.NaN and Double.NaN keys are treated consistently with boxed version (all NaNs are considered equal) Quick start Add the following dependencies in your Maven pom.xml:   <dependencies>     <dependency>       <groupId>com.koloboke</groupId>       <artifactId>koloboke-api-jdk8</artifactId>       <version>1.0.0</version>     </dependency>     <dependency>       <groupId>com.koloboke</groupId>       <artifactId>koloboke-impl-jdk8</artifactId>       <version>1.0.0</version>       <scope>runtime</scope>     </dependency>   <dependencies> Or to your Gradle build script: dependencies {     // `jdk6-7` instead of `jdk8` if you use Java 7 or older     compile 'com.koloboke:koloboke-api-jdk8:1.0.0'     runtime 'com.koloboke:koloboke-impl-jdk8:1.0.0' } Or similarly for your favourite build system. Then you can start using collections. Replace all lines like Map<Integer, Integer> map = new HashMap<>();  with Map<Integer, Integer> map = HashIntIntMaps.newMutableMap();  Next step: see the table of equivalents of JDK collection patterns. Releases (with changelog) Contributing, Feedback & Support Use issues or ask a question on StackOverflow. How to build and develop Gradle build requires Java 8 compiler, set JAVA_HOME environment variable to the JDK 8 location. Next to your JDK 8 location (i. e. a jdk1.8 directory), JDK 9 installation has to be present in a jdk-9 directory. For meta projects development, JDK 6 and JDK 7 also have to be present in jdk1.6 and jdk1.7 directories sibling to the jdk1.8 directory. Then $ git clone git@github.com:leventov/Koloboke.git $ cd Koloboke $ ./gradlew :buildMeta $ ./gradlew buildMain -x test -x findbugsMain -x findbugsTest $ ./gradlew idea  Then you can open the project in IntelliJ IDEA. To rebuild meta projects (code generators), run from the project root dir: $ ./gradlew :cleanMeta :buildMeta  To rebuild either the lib, benchmarks or both, run $ ./gradlew cleanMain buildMain  from the lib, benchmarks subdir or the root project dir respectively. To build the lib for Java 8, run $ ../gradlew cleanMain buildMain -PlibTargetJava=8  from the lib subdir. If you want to generate proper Javadocs, especially for Java 6 or 7, you should specify javadocExecutable and jdkSrc build properties (see Gradle docs for how to do that). Typical javadocExecutable value is JAVA_HOME/bin/javadoc[.exe], jdkSrc should point to a directory which contain uncompressed JDK sources, i. e. package structure starting from java, javax, sun, etc. subdirs. Project name history Trove (This project was started as a Trove fork, but has nothing in common with Trove for already very long time.) UntitledCollectionsProject, UCP Higher Frequency Trading Collections, OpenHFT Collections, HFT Collections, HFTC Koloboke (Collections) -- current name! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OpenHFT/Koloboke"	"Hash sets and hash maps."	"true"
"IDE"	"Eclipse"	"http://www.eclipse.org/"	"Established, open-souce project with support for lots of plugins and languages."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Eclipse Neon Skip to main content Create account Log in Download Download Getting Started Members Projects Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM More Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM Toggle navigation neon Download Other Package Downloads Click here to continue to eclipse.org Highlights 1 New tools for JavaScript developers, including a JSON editor, support for Grunt/Gulp and new Chromium V8 Debugger. 2 Key Eclipse Platform improvements include HiDPI support and autosave. JDT's Content Assist now highlights matched characters and provides substring completion. 3 New Eclipse PDT 4.0 release for PHP developers with complete support for PHP 7 and improved performance. 4 The Eclipse Automated Error Reporting client can now be integrated into any third-party Eclipse plug-in or standalone RCP application. 5 Eclipse users can now save settings, like Marketplace Favorites, with their Eclipse account. 6 New Projects: Eclipse Plug-ins for Gradle (first prime release), EGerrit, Paho, Andmore - Eclipse Android Tooling, EMF Parsley and Eclipse Tools for Cloud Foundry. 7 Improved support for Docker tooling. Resources Features Projects Donate Get your limited edition Neon T-Shirt! Let's get Social Press Release 2016/06/22 Eclipse Neon Release Train Now Available News 2016/06/22 Eclipse's annual release train focuses on JavaScript, PHP 2016/06/22 Eclipse Foundation Releases Neon Webinar Series Details can be found here, or register below. 001 Eclipse Neon and Beyond - The JDT Perspective Watch Now 002 JSDT 2.0 Watch Now 003 The Eclipse User Storage Service: Creating a Better User Experience for Developers Watch Now 004 Eclipse Tools for Cloud Foundry Overview Watch Now 005 What's New for PHP Developers in Eclipse Neon? Watch Now 006 Docker Tooling for Eclipse Neon Watch Now 007 Automated Error Reporting (AERI) now available for any Eclipse Plugin Watch Now #EclipseNeon #eclipseneon Tweets Back to the top Eclipse Foundation About us Contact Us Donate Governance Logo and Artwork Board of Directors Legal Privacy Policy Updated Terms of Use Updated Copyright Agent Eclipse Public License Legal Resources Useful Links Report a Bug Documentation How to Contribute Mailing Lists Forums Marketplace Other IDE and Tools Community of Projects Working Groups Copyright © 2016 The Eclipse Foundation. All Rights Reserved. Back to the top"	"null"	"null"	"Established, open-souce project with support for lots of plugins and languages."	"true"
"IDE"	"IntelliJ IDEA"	"http://www.jetbrains.com/idea/"	"Supports a lot of JVM languages and provides good options for Android development. The commercial edition targets the enterprise sector."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IntelliJ IDEA the Java IDE All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search IntelliJ IDEA What's New Features Learn Buy Download Capable and Ergonomic Java * IDE Download *Actually, much more than just Java Features Enjoy productive java Every aspect of IntelliJ IDEA is specifically designed to maximize developer productivity. Together, powerful static code analysis and ergonomic design make development not only productive but also an enjoyable experience. Take a tour Deep intelligence After IntelliJ IDEA's indexed your source code, it offers blazing fast and intelligent experience by giving relevant suggestions in every context: instant and clever code completion, on-the-fly code analysis and reliable refactoring tools. Out-of-the-box experience Mission-critical tools such as integrated version controls systems and a wide variety of supported languages and frameworks are at hand — no plugin hustle included. Smart code completion While the basic completion suggests names of classes, methods, fields, and keywords within the visibility scope, the smart completion suggests only those types that are expected in the current context. Framework-specific assistance While IntelliJ IDEA is an IDE for Java, it also understands and provides intelligent coding assistance for a large variety of other languages such as SQL, JPQL, HTML, JavaScript, etc., even when the language expression is injected into a String literal in your Java code. Productivity boosters The IDE predicts your needs and automates the tedious and repetitive development tasks so you can stay focused on the big picture. Developer ergonomics In every design and implementation decision that we make, we keep in mind the risk of interrupting the developer's flow and do our best to eliminate or minimize it. The IDE follows your context and brings up the corresponding tools automatically. Unobtrusive intelligence The coding assistance in IntelliJ IDEA is not about only the editor: it helps you stay productive when dealing with its other parts as well: e.g. filling a field, searching over a list of elements; accessing a tool window; or toggling for a setting, etc. Built-in tools and supported frameworks Built-in tools Build tools Version control Decompiler Coverage Database tools/SQL JVM languages Java Scala Groovy Kotlin Enterprise frameworks Spring Java EE GWT/Vaadin JBoss Play Grails App Servers/Clouds Mobile development Android PhoneGap/Cordova/ Ionic Web development JavaScript HTML/CSS AngularJS React Node.js Discover all features New Features User interface Font ligatures Breadcrumb for Java Background Image in Editor and IDE Frame Notication popups got compact and moved to the right-bottom corner Version control Log for Git and Mercurial now loads data in the background, gets a handy loading progress indicator and a shortcut to navigate to the filter field Unversioned files in Commit dialog Case-only rename in Git for Windows and OS X Patches can now be applied from the clipboard or by dragging a file into the IDE; and IntelliJ offers help when applying patches with conflicts Frameworks Support for JUnit 5 Better coding assistance for React Support for AngularJS 2 Spring 4.3 core features, new inspections, and better performance Coding assistance for Spring Caching Code completion and navigation in FreeMarker and Velocity templates for variables defined in Spring controllers And much more… Choose your edition Choose your edition Community For JVM and Android development Ultimate For web and enterprise development Java, Kotlin, Groovy, Scala Android ? Maven, Gradle, SBT Git, SVN, Mercurial, CVS Perforce, ClearCase, TFS JavaScript, TypeScript ? Java EE, Spring, GWT, Vaadin, Play, Grails, Other Frameworks ? Database Tools, SQL Compare editions Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free download Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free 30-day trial Tell me about new product features as they come out Thanks for your request! Community forum Plugin repository Bug and issue tracker IntelliJ IDEA blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"Supports a lot of JVM languages and provides good options for Android development. The commercial edition targets the enterprise sector."	"true"
"IDE"	"NetBeans"	"https://netbeans.org/"	"Provides integration for several Java SE and EE features from database access to HTML5."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome to NetBeans Choose page language Albanian Arabic Brazilian Portuguese Czech Dutch Finnish French Georgian German Greek Hebrew Hungarian Indonesian Italian Japanese Korean Persian Polish Portuguese Romanian Russian Simplified Chinese Slovak Spanish Swedish Traditional Chinese Turkish Vietnamese NetBeans IDE NetBeans Platform Enterprise Plugins Docs & Support Community NetBeans IDE Fits the Pieces Together Quickly and easily develop desktop, mobile and web applications with Java, JavaScript, HTML5, PHP, C/C++ and more. NetBeans IDE is FREE, open source, and has a worldwide community of users and developers. See All News Featured News: Help Us Stabilize NetBeans IDE 8.2 - Join NetCAT 8.2! Join the Free OTN Summit on July 12, 2016! Hybrid Mobile Development with Cordova and Oracle JET Trip Report: NetBeans Day India 31 May 2016: NetBeans Day in London Build with NetBeans IDE, Deploy to Oracle Java Cloud Service Best Support for Latest Java Technologies More Fast & Smart Code Editing More New: Darcula Look & Feel Theme More Easy & Efficient Project Management More Rapid User Interface Development More Write Bug Free Code More Powerful Tools for JavaScript, HTML5, and CSS3 More Cross Platform Support More Support for Multiple Languages More Rich Set of Community Provided Plugins More SiteMap About Us Contact Legal & Licences By use of this website, you agree to the NetBeans Policies and Terms of Use. © 2016, Oracle Corporation and/or its affiliates. Sponsored by"	"null"	"null"	"Provides integration for several Java SE and EE features from database access to HTML5."	"true"
"Imagery"	"Imgscalr"	"https://github.com/thebuzzmedia/imgscalr"	"Simple and efficient hardware-accelerated image-scaling library implemented in pure Java 2D."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"641"	"58"	"143"	"GitHub - thebuzzmedia/imgscalr: Simple Java image-scaling library implementing Chris Campbell's incremental scaling algorithm as well as Java2D's ""best-practices"" image-scaling techniques. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 641 Fork 143 thebuzzmedia/imgscalr Code Issues 26 Pull requests 7 Pulse Graphs Simple Java image-scaling library implementing Chris Campbell's incremental scaling algorithm as well as Java2D's ""best-practices"" image-scaling techniques. http://www.thebuzzmedia.com/software/imgscalr-java-image-scaling-library/ 137 commits 1 branch 11 releases 4 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show release-4.1 release-4.0 release-4.0-maven release-3.2 release-3.1 release-3.0 release-2.1 release-2.0 release-1.2 release-1.1 4.2-release Nothing to show New pull request Latest commit e1e1da7 Jun 29, 2015 thebuzzmedia Merge pull request #111 from silvpol/master … AsyncScalrMultiThreadTest fails with OOM on Mac OSX Permalink Failed to load latest commit information. src Fix AsyncScalrMultiThreadTest OOM on Mac OSX due to thread limit bein… Jun 28, 2015 .gitignore Ignoring build resources. Nov 28, 2011 LICENSE Added license information. Dec 24, 2010 README Updated fix notes for 4.2 release. Jan 11, 2012 build.xml Updated fix notes for 4.2 release. Jan 11, 2012 pom.xml [maven-release-plugin] prepare for next development iteration Jan 11, 2012 README imgscalr - Java Image-Scaling Library http://www.thebuzzmedia.com/software/imgscalr-java-image-scaling-library/   				================================================= 				  See imgscalr in action at http://imgscalr.com 				=================================================   Changelog --------- 4.2 	* Added support for a new Method.ULTRA_QUALITY scaling method. 	 	This new method uses 3.5x more incremental steps when scaling an image down 	than the QUALITY method, providing a much more accurate result. This is 	especially noticeable in thumbnails that have diagonal lines that get jagged 	during down-sizing with QUALITY or lower methods. 	 	The quality of the ULTRA_QUALITY scaling method is almost on par with the 	image resize functionality built into Mac OS X; that is to say it is better 	than GIMP's Lancsoz3 and Windows 7 built-in resize. 	 	https://github.com/thebuzzmedia/imgscalr/issues/61 	 	* Fixed subtle bug with incremental scaling and Mode.FIT_EXACT causing the 	incremental scaling to stop too soon resulting in the wrong-sized result 	image. 	 	The stop-condition for incremental scaling assumed that in every case the 	width AND height would be shrinking each iteration; when using  	Mode.FIT_EXACT this is not necessarily true as one dimension may not change 	at all or stop changing before another. 	 	https://github.com/thebuzzmedia/imgscalr/issues/65   4.1 	* Fixed NullPointerException that occurred when debugging was enabled 	https://github.com/thebuzzmedia/imgscalr/issues/60 	 	Required a patch-release due to the show-stopping nature of the bug.  4.0 	* [BREAKING] Package has changed from com.thebuzzmedia.imgscalr to  	org.imgscalr - I am sorry for the inconvenience of this, but this is 	necessary. There will be a family of imgscalr-based Java utilities coming 	out in the future (ExifTool is next) that will all be under this umbrella. 	 	* [BREAKING] Java 6 is now required for using imgscalr.  	 	The reason for this is because imgscalr includes specific types of  	ResizeOp and ColorConvertOps that actually segfault the latest Java 5 VM  	when applied, but run fine in Java 6 and 7. 	 	imgscalr cannot knowingly ship VM-segfaulting code that could would  	introduce a potentially	devastating situation into client applications. 	 	This decision was not made lightly, but with Java 5 end-of-lifed and Java 6 	being out for 5 years, it seemed like a reasonable requirement.  	* [BREAKING] Rotation enum was totally redefined. All rotations were  	redefined in terms of 90,180,270 quadrant rotations as well as h/v FLIP. 	 	* [BREAKING] All resize(...) methods that accepted Rotation enums are  	removed. All graphic operations are now separate and discrete, but can be 	easily combined when multiple effects are wanted. 	 	* Added apply() support for applying an arbitrary list of BufferedImageOps 	SAFELY and efficiently working around all the bugs in the JDK pertaining 	to BufferedImageOps (also used internally when applying any optionally  	specified ops). 	 	* Added crop() support. 	 	* Added pad() support. 	 	* Added rotate() support. 	 	* All graphic operations (even new ones) were modified to allow the  	application of 1 or more BufferedImageOps to a final image result before 	returning it for convenience. 	 	* Support for all the new operations (apply, crop, pad, rotate) were all  	added to AsyncScalr so these operations can all be asynchronously performed  	as well. 	 	* Added support for horizontal and vertical flipping of the image via the 	Rotation enum and new rotate() method. 	 	* Added pre-defined OP_DARKER and OP_BRIGHTER operations that can be applied 	to any image to make them darker or brighter (respectively) by 10%. 	 	* Added Mode.FIT_EXACT to support (for the first time) scaling images  	forced into a specific given dimension instead of honoring the image's 	orientation and proportions automatically.  	 	* AsyncScalr's use of ExecutorService was rewritten; no more support for 	passing in custom ExecutorService implementations or modifying existing ones 	on the fly and having the class do something magic to them under the 	covers (that was bad) -- just extend the class and specify your own logic. 	 	* AsyncScalr can be easily customized now through a single method: 	 		- createService() 		  OR 		- createService(ThreadFactory) 		 	* AsyncScalr provides two custom ThreadFactory implementations for subclasses 	to use if they want to customize the types of Threads generated and used  	internally for async scale operations. 	 		- DefaultThreadFactory creates default threads with all default settings. 		- ServerThreadFactory generates threads that are optimized to execute in 		  a server environment (daemon threads w/ LOW_PRIORITY). 	 	* AsyncScalr.DEFAULT_THREAD_COUNT was removed and replaced with THREAD_COUNT 	that can be customized and set via system properties. 	 	* AsyncScalr.THREAD_COUNT's property name was separated into a String constant 	to make it easier to work with. 	 	* Simplified the resize() calls as a result of making all operations discrete; 	8 duplicate methods accepting ""rotation"" arguments were removed. 	 	* Optimized the application of BufferedImageOps. 	 	* Fixed a bug in the application of BufferedImageOps which could have led 	to an ImagingOpException bubbling up from native Java2D or a corrupt (black) 	image for poorly supported image types. 	 	* Memory optimized the application of 2 or more BufferedImageOps (interim 	images are explicitly cleaned up just like in incremental scaling). 	 	* Optimized log() implementation to avoid StringBuilder creation and string 	concatenation. Should be significant run-time savings over time if you are 	running in an environment with debugging turned on. 	 	* Removed the identity-return functionality in each method to throw an  	exception instead of silently returning ""src"" unchanged. 	 	This was done intentionally to avoid users getting caught in the situation 	where they have code that automatically calls flush() on ""src"" after an 	imgscalr method has returned (assuming they NOW have a modified copy to work 	with).  	 	In the case of sending in invalid or null arguments, previously imgscalr 	would return ""src"" unchanged, which means the caller would be calling 	flush() on a perfectly good image they still needed and not a copy as was 	assumed by using imgscalr (And there would be no way to tell if imgscalr had 	created a copy or not without using an == check with EVERY returned image 	result). 	 	Instead, invalid or missing arguments passed to any imgscalr method are 	now considered an exception so the caller knows IMMEDIATELY when something 	is wrong and won't get magically different/unexpected behavior. 	 	* Exposed the potential for every method to fire an ImagingOpException if 	one of the BufferedImageOps fails to apply using the hardware-accelerated 	underlying Java2D code path. These exceptions were previously hidden in the 	guts of Java2D and could bubble up unexpectedly, now they are clearly defined 	directly on the imgscalr API so they can be cause and handled IF the caller 	wants or needs to do that when using custom BufferedImageOps. 	 	* Detailed notations about performance optimizations the caller can make to 	ensure their handling of images are as performant as possible were added to 	all the methods as a convenience. 	 	* Defined DEBUG system property name as a public constant that can be used 	to help avoid misspellings when trying to set debugging on. 	 	* Modified LOG_PREFIX so it can now be set via the ""imgscalr.logPrefix""  	system property value now. 	 	* Rewrote imgscalr test suite to specifically test all discrete operations 	and all variations of the operations as well. 	 	* Added AllTests test suite so all tests can be easily run at one time to 	verify the release. 	 	* Rewrote Javadoc covering a lot of the return and exception conditions for 	all the methods to more clearly communicate what is happening inside the 	method and to the original images. 	  3.2 	* Added support for asynchronous & rate-limited scaling operations via the 	AsyncScalr class. 	 	The AsyncScalr class wraps the parent Scalr class and submits scale jobs to 	an internal ExecutorService. The executor service can be used to serialize 	and queue up scaling operations to avoid blowing the heap and overloading the 	underlying host on a busy, multi-user system (e.g. a web app running imgscalr). 	 	AsyncScalr by default uses a fixed-size ThreadPoolExecutor that can be modified 	at run time to any tuned level of threads the caller desires (default 2). The 	default settings are intended to be safe/efficient to use out of the box on  	most all systems. 	 	Additionally, AsyncScalr can be configured to use *any* ExecutorService  	implementation passed to it so callers have ultimate control over how the  	AsyncScalr processes jobs if they need/want it. 	 	Typically it is a good idea to roughly map # of Scaling Threads to the # of  	Cores on the server, especially on a server with plenty of memory and a large 	heap for the VM. 	 	If you are running inside of a smaller VM heap or lower-memory server (regardless 	of core count) you will want to limit the number of simultaneous scale operations 	so as not to saturate the heap during scaling when the images are read into 	internal BufferedImage instances in VM memory.  	* Added support for Rotation to the library. You can now specify the following 	rotations to be applied to your image: 	 	Rotation.NONE - No rotation. 	Rotation.CLOCKWISE - Clockwise (90 degrees to the right) rotation. 	Rotation.COUNTER_CLOCKWISE - Counter-clockwise (90 degrees to the left) rotation. 	Rotation.FLIP - Flip the image (180 degrees rotation). 	 	The rotation is performed as tightly and efficiently as possible, explicitly 	cleaning up temporary resources created during the operation. 	 	* API was simplified as duplicate methods without the vararg parameter were 	removed (these were effectively duplicates of the vararg methods make the 	API longer than it needed to be). 	 	* Corrected a multitude of incorrect Javadoc comments pertaining to @throws 	conditions. 	 	* Rewrote the method Javadoc. Manually reviewing uncovered too many copy-paste 	discrepancies that left out important information that would be helpful in 	a  Javadoc popup in an IDE while using imgscalr. 	 	* All new code heavily commented.  3.1 	* You can now specify Mode.FIT_TO_WIDTH or Mode.FIT_TO_HEIGHT behaviors 	when resizing an image to get imgscalr to treat one dimension as the primary 	and recalculate the other dimension to best fit it, regardless of the image's 	orientation. Previously this was decided automatically for you by the 	orientation of the image. 	 	* resize methods now accept 0 or more BufferedImageOps as var-arg arguments. 	 	* Workaround for a 10-year-old JDK bug that causes RasterExceptions to get 	thrown from inside of Java2D when using BufferedImageOps was built directly 	into imgscalr so you don't have to worry about RasterExceptions. More 	info here: https://github.com/thebuzzmedia/imgscalr/issues/closed#issue/23 	 	* API was made more strict and an IAE is thrown if 'src' is null to any of 	the resize operations; a user reported that he spent a while debugging why 	""imgscalr wasn't working"" only to find out it was silently returning due to 	a null source image. Would have been helpful if imgscalr had notified him of 	the issue immediately.  3.0 	* Big thanks to Magnus Kvalheim from http://www.movellas.com/ for help with 	this release! 	 	* Support for hardware-accelerated BufferedImageOp's was added to the library. 	You can now provide an optional BufferedImageOp to many of the methods in the 	imgscalr library and it will be applied to the resultant image before returning 	it.  	 	* Most common request was for imgscalr to apply an ""anti-aliasing"" filter to 	results before returning them; this was achieved by adding support for 	BufferedImageOps and providing a hand-tuned ConvolveOp to provide a good 	default that can be applied easily by folks that want the effect but don't 	want to learn all about BufferedImageOps and what ""convolve"" even means. 	 	* Speed/Balance/Quality THRESHOLD values were adjusted for more optimal results 	when relying on Method.AUTOMATIC to give good-looking results. 	 	* Javadoc was updated to clarify hardware acceleration behaviors.  2.1 	* Scaling of certain image types (and byte layouts) could result in very poor 	looking scaled images (""pixelated"" look, discolored dithering, etc.). This was 	corrected by imgscalr forcibly scaling all source images into the most well-supported 	image types by Java2D, resulting in excellent scale result quality regardless 	of the Method specified. 	 	* The issue of scaling of poorly supported (by Java2D) image-types can lead  	to unexpectedly poor performance was also corrected as a side-effect of this 	because all source images are converted to the most commonly supported image 	type for Java2D.  2.0 	* API-break: resize(BufferedImage, Method, int, int, boolean, boolean) was removed and 	replaced by resize(BufferedImage, Method, int, int). 	 	* DEBUG system variable added; set 'imgscalr.debug' to true to trigger debugging output 	in the console. The boolean debug and elapsedTime arguments to the resize method 	have been removed. 	 	* New BALANCED method added. Provides a better result than SPEED faster than QUALITY. 	 	* Added 2 optimized thresholds (in pixels) that the API uses to select the best Method 	for scaling when the user specifies AUTOMATIC (or doesn't specify a method). This helps 	provide much better results out of the box by default and tightens up the performance of the 	API a bit more. 	 	* Image comparison generator utility (ComparisonGenerator test class) added. 	 	* Functional portions of API broken into static protected methods that can be 	easily overridden by implementors to customize the API without needing to rewrite 	the resize methods. 	 	* Consolidated 5 locations of duplicated rendering code into a single method (scaleImage). 	 	* Tightened up image scaling operation to do everything possible to avoid memory leaks (every native 	resource is disposed or released explicitly) 	 	* Detailed logging information integrated. If the 'imgscalr.debug' system property is 	true, the API outputs exactly what it's doing, what argument values it is processing and 	how long it is taking to do each scale operation. 	 	* When AUTOMATIC method is specified, the API is more intelligent about selecting 	SPEED, BALANCED or QUALITY based on the images primary dimension only (more accurate). 	 	* Copious amounts of Javadoc added to new methods, new code and existing code.  	 	Issues Resolved in 2.0: 	https://github.com/thebuzzmedia/imgscalr/issues/closed  1.2 	* Default proportional-scaling logic is more straight forward. If an image is 	landscape then width is the preferred dimension and the given height is ignored 	(and recalculated) and visa-versa if the image is portrait oriented. This gives 	much better ""default behavior"" results. 	 	* Added new convenience method resize(BufferedImage,int,int) 	 	* Modified build.xml to output Maven-friendly artifact names. 	 	* Library now available from the http://maven.thebuzzmedia.com Maven repo, see 	""Maven"" section on this page for more information: 	http://www.thebuzzmedia.com/software/imgscalr-java-image-scaling-library/ 	 	* Javadoc is now available on the web at: 	http://www.thebuzzmedia.com/downloads/software/imgscalr/javadoc/index.html 	 	Issues Resolved in 1.2: 	https://github.com/thebuzzmedia/imgscalr/issues/closed  1.1 	* Initial public release.   License ------- This library is released under the Apache 2 License. See LICENSE.   Description ----------- A class implementing performant (hardware accelerated), good-looking and  intelligent image-scaling algorithms in pure Java 2D. This class implements the  Java2D ""best practices"" when it comes to scaling images as well as Chris  Campbell's incremental scaling algorithm proposed as the best method for  down-sizes images for use as thumbnails (along with some additional minor  optimizations).  imgscalr also provides support for applying arbitrary BufferedImageOps against resultant images directly in the library.  TIP: imgscalr provides a default ""anti-aliasing"" Op that will very lightly soften an image; this was a common request. Check Scalr.OP_ANTIALIAS  TIP: All resizing operations maintain the original images proportions.  TIP: You can ask imgscalr to fit an image to a specific width or height regardless  of its orientation using a Mode argument.  This class attempts to make scaling images in Java as simple as possible by providing a handful of approaches tuned for scaling as fast as possible or as best-looking  as possible and the ability to let the algorithm choose for you to optionally create  the best-looking scaled image as fast as possible without boring you with the details  if you don't want them.   Example ------- In the simplest use-case where an image needs to be scaled to proportionally fit  a specific width (say 150px for a thumbnail) and the class is left to decide which  method will look the best, the code would look like this:    BufferedImage srcImage = ImageIO.read(...); // Load image   BufferedImage scaledImage = Scalr.resize(srcImage, 150); // Scale image  You could even flatten that out further if you simply wanted to scale the image  and write out the scaled result immediately to a single line:    ImageIO.write(Scalr.resize(ImageIO.read(...), 150));   Working with GIFs ----------------- Java's support for writing GIF is... terrible. In Java 5 is was patent-encumbered which made it mostly totally broken. In Java 6 the quantizer used to downsample colors to the most accurate 256 colors was fast but inaccurate, yielding  poor-looking results. The handling of an alpha channel (transparency) while writing out GIF files (e.g. ImageIO.write(...)) was non-existent in Java 5 and in Java 6 would remove the alpha channel completely and replace it with solid BLACK.  In Java 7, support for writing out the alpha channel was added but unfortunately many of the remaining image operations (like ConvoleOp) still corrupt the resulting image when written out as a GIF.  NOTE: Support for scaling animated GIFs don't work at all in any version.  My recommendation for working with GIFs is as follows in order of preference:  1. Save the resulting BufferedImage from imgscalr as a PNG; it looks better as no quantizer needs to be used to cull down the color space and  transparency is maintained.   2. If you mostly need GIF, check the resulting BufferedImage.getType() to see if it is TYPE_INT_RGB (no transparency) or TYPE_INT_ARGB (transparency); if the type is ARGB, then save the image as a PNG to maintain the alpha channel, if not, you can safely save it as a GIF.  3. If you MUST have GIF, upgrade your runtime to Java 7 and save your images as GIF. If you run Java 6, any GIF using transparency will have the transparent channel replaced with BLACK and in Java 5 I think the images will most all be corrupt/invalid.  REMINDER: Even in Java 7, applying some BufferedImageOps (like ConvolveOp) to the scaled GIF before saving it totally corrupts it; so you would need to avoid that if you didn't want to save it as a PNG. If you decide to save as a PNG, you can apply any Ops you want.    Troubleshooting --------------- Image-manipulation in Java can take more memory than the size of the source image because the image has to be ""decoded"" into raw ARGB bytes when loaded into the BufferedImage instance; fortunately on most platforms this is a hardware-accelerated operation by the video card.  If you are running into OutOfMemoryExceptions when using this library (e.g. if you dealing with 10+ MB source images from an ultra-high-MP DSLR) try and up the  heap size using the ""-Xmx"" command line argument to your Java process.  An example of how to do this looks like:    java -Xmx128m com.site.MyApp     Reference --------- Chris Campbell Incremental Scaling - http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html   Related Projects ---------------- ExifTool for Java - http://www.thebuzzmedia.com/software/exiftool-enhanced-java-integration-for-exiftool/   Contact ------- If you have questions, comments or bug reports for this software please contact us at: software@thebuzzmedia.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thebuzzmedia/imgscalr"	"Simple and efficient hardware-accelerated image-scaling library implemented in pure Java 2D."	"true"
"Imagery"	"Thumbnailator"	"https://github.com/coobird/thumbnailator"	"Thumbnailator is a high-quality thumbnail generation library for Java."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"378"	"40"	"111"	"GitHub - coobird/thumbnailator: Thumbnailator - a thumbnail generation library for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 40 Star 378 Fork 111 coobird/thumbnailator Code Issues 33 Pull requests 5 Wiki Pulse Graphs Thumbnailator - a thumbnail generation library for Java 502 commits 2 branches 30 releases 1 contributor Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.4.8 0.4.7 0.4.6 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.10 0.3.9 0.3.8 0.3.7 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.9 0.2.8 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 Nothing to show New pull request Latest commit a234b6e Jul 26, 2015 coobird Allow automated upload of javadocs to GitHub. Permalink Failed to load latest commit information. javadoc Updated javadoc for 0.4.8. Dec 1, 2014 src Added tests to check whether the `OutOfMemoryError` workaround for Is… Nov 15, 2014 .gitignore Removed `.hgignore` and added `.gitignore` file. Apr 6, 2015 LICENSE Updated copyright years for `LICENSE`. Apr 6, 2015 README.md Added a README which has been migrated from Google Project Hosting. Jul 26, 2015 pom.xml Allow automated upload of javadocs to GitHub. Jul 26, 2015 README.md December 1, 2014: Thumbnailator 0.4.8 has just been released! See Changes for details. Thumbnailator is now available through Maven! What is Thumbnailator? Thumbnailator is a thumbnail generation library for Java. Why Thumbnailator? Making high-quality thumbnails in Java can be a fairly difficult task. Learning how to use the Image I/O API, Java 2D API, image processing, image scaling techniques, ... but fear not! Thumbnailator will take care of all those things for you! Thumbnailator is a single JAR file with no dependencies to external libraries, making development and deployment simple and easy. It is also available on the Maven Central Repository for easy inclusion in Maven projects. How simple is Thumbnailator? Thumbnailator's fluent interface can be used to perform fairly complicated thumbnail processing task in one simple step. For example, creating JPEG thumbnails of image files in a directory, all resized to a maximum dimension of 640 pixels by 480 pixels while preserving the aspect ratio of the original image can be performed by the following: Thumbnails.of(new File(""path/to/directory"").listFiles())     .size(640, 480)     .outputFormat(""jpg"")     .toFiles(Rename.PREFIX_DOT_THUMBNAIL);  The fluent interface provided by the Thumbnailator simplifies the task of making thumbnails into a single method call! No need to access the Image I/O API and manually manipulate BufferedImages through Graphics2D objects. Thumbnailator does all of that for you. What can Thumbnailator do? The following pages have more information on what Thumbnailator can do: Features Examples Thumbnailator API Documentation Disclaimer Thumbnailator is still early in its development, and the APIs are subject to change at any time. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/coobird/thumbnailator"	"Thumbnailator is a high-quality thumbnail generation library for Java."	"true"
"Imagery"	"TwelveMonkeys"	"https://github.com/haraldk/TwelveMonkeys"	"Collection of plugins which extend the number of supported image file formats."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"354"	"58"	"100"	"GitHub - haraldk/TwelveMonkeys: TwelveMonkeys ImageIO: Additional plug-ins and extensions for Java's ImageIO Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 354 Fork 100 haraldk/TwelveMonkeys Code Issues 16 Pull requests 2 Pulse Graphs TwelveMonkeys ImageIO: Additional plug-ins and extensions for Java's ImageIO http://haraldk.github.io/TwelveMonkeys/ 893 commits 6 branches 12 releases 14 contributors Java 99.3% Other 0.7% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0-bugfix 3.1-bugfix 3.2-bugfix camera-raw gh-pages master Nothing to show twelvemonkeys-3.2.1 twelvemonkeys-3.2 twelvemonkeys-3.1.2 twelvemonkeys-3.1.1 twelvemonkeys-3.1.0 twelvemonkeys-3.0.2 twelvemonkeys-3.0 twelvemonkeys-3.0-rc7 twelvemonkeys-3.0-rc5 3.0.1 2.3 2.2 Nothing to show New pull request Latest commit c188931 Jul 7, 2016 haraldk #228: TIFFImageWriter now correctly writes images with sample model t… … …ranslation. Permalink Failed to load latest commit information. bom [maven-release-plugin] prepare for next development iteration Nov 1, 2015 common #249 Remove unnecessary part of test that breaks on 8u60+ May 25, 2016 contrib TIFFPage.write did not expect subIFDs which do not contain image data May 3, 2016 imageio #228: TIFFImageWriter now correctly writes images with sample model t… Jul 7, 2016 sandbox Re-added test case lost in large merge Jun 29, 2016 servlet Re-added test case lost in large merge Jun 29, 2016 twelvemonkeys-servlet/src/test/java/com/twelvemonkeys/servlet/image/aoi Re-added test case lost in large merge Jun 29, 2016 .gitignore Adding some usesful ignore files Sep 3, 2009 .travis.yml Disabling OpenJDK in Travis for now. Oct 16, 2015 README.md Fixed release date. Jan 4, 2016 pom.xml Re-added test case lost in large merge Jun 29, 2016 README.md Latest Master branch build status: TwelveMonkeys ImageIO 3.2.1 is released (Dec. 11th, 2015). About TwelveMonkeys ImageIO is a collection of plugins and extensions for Java's ImageIO. These plugins extends the number of image file formats supported in Java, using the javax.imageio.* package. The main purpose of this project is to provide support for formats not covered by the JRE itself. Support for formats is important, both to be able to read data found ""in the wild"", as well as to maintain access to data in legacy formats. Because there is lots of legacy data out there, we see the need for open implementations of readers for popular formats. The goal is to create a set of efficient and robust ImageIO plug-ins, that can be distributed independently. Features Mainstream format support BMP - MS Windows/IBM OS/2 Device Independent Bitmap Read support for all known versions of the DIB/BMP format Indexed color, 1, 4 and 8 bit, including 4 and 8 bit RLE RGB, 16, 24 and 32 bit Embedded PNG and JPEG data Windows and OS/2 versions Native and standard metadata format JPEG Read support for the following JPEG ""flavors"": All JFIF compliant JPEGs All Exif compliant JPEGs YCbCr JPEGs without JFIF segment (converted to RGB, using embedded ICC profile) CMYK JPEGs (converted to RGB by default or as CMYK, using embedded ICC profile) Adobe YCCK JPEGs (converted to RGB by default or as CMYK, using embedded ICC profile) JPEGs containing ICC profiles with interpretation other than 'Perceptual' or class other than 'Display' JPEGs containing ICC profiles that are incompatible with stream data, corrupted ICC profiles or corrupted ICC_PROFILE segments JPEGs using non-standard color spaces, unsupported by Java 2D JPEGs with APP14/Adobe segments with length other than 14 bytes 8 bit JPEGs with 16 bit DQT segments Issues warnings instead of throwing exceptions in cases of corrupted or non-conformant data where ever the image data can still be read in a reasonable way Thumbnail support: JFIF thumbnails (even if stream contains ""inconsistent metadata"") JFXX thumbnails (JPEG, Indexed and RGB) EXIF thumbnails (JPEG, RGB and YCbCr) Metadata support: JPEG metadata in both standard and native formats (even if stream contains ""inconsistent metadata"") javax_imageio_jpeg_image_1.0 format (currently as native format, may change in the future) Non-conforming combinations of JFIF, Exif and Adobe markers, using ""unknown"" segments in the ""MarkerSequence"" tag for the unsupported segments (for javax_imageio_jpeg_image_1.0 format) Extended write support in progress: CMYK JPEGs YCCK JPEGs JPEG-2000 Possibly coming in the future, pending some license issues. If you are one of the authors, or know one of the authors and/or the current license holders of either the original jj2000 package or the JAI ImageIO project, please contact me (I've tried to get in touch in various ways, without success so far). Alternatively, if you have or know of a JPEG-2000 implementation in Java with a suitable license, get in touch. :-) PNM - NetPBM Portable Any Map Read support for the following file types: PBM in 'P1' (ASCII) and 'P4' (binary) formats, 1 bit per pixel PGM in 'P2' (ASCII) and 'P5' (binary) formats, up to 16/32 bits per pixel PPM in 'P3' (ASCII) and 'P6' (binary) formats, up to 16/32 bits per pixel component PAM in 'P7' (binary) format up to 32 bits per pixel component Limited support for PFM in 'Pf' (gray) and 'PF' (RGB) formats, 32 bits floating point Write support for the following formats: PPM in 'P6' (binary) format PAM in 'P7' (binary) format Standard metadata support PSD - Adobe Photoshop Document Read support for the following file types: Monochrome, 1 channel, 1 bit Indexed, 1 channel, 8 bit Gray, 1 channel, 8, 16 and 32 bit Duotone, 1 channel, 8, 16 and 32 bit RGB, 3-4 channels, 8, 16 and 32 bit CMYK, 4-5 channels, 8, 16 and 32 bit Read support for the following compression types: Uncompressed RLE (PackBits)< Layer support Image layers only, in all of the above types Thumbnail support JPEG RAW (RGB) Support for ""Large Document Format"" (PSB) Native and Standard metadata support TIFF - Aldus/Adobe Tagged Image File Format Read support for the following ""Baseline"" TIFF file types: Class B (Bi-level), all relevant compression types, 1 bit per sample Class G (Gray), all relevant compression types, 2, 4, 8, 16 or 32 bits per sample, unsigned integer Class P (Palette/indexed color), all relevant compression types, 1, 2, 4, 8 or 16 bits per sample, unsigned integer Class R (RGB), all relevant compression types, 8 or 16 bits per sample, unsigned integer Read support for the following TIFF extensions: Tiling Class F (Facsimile), CCITT Modified Huffman RLE, T4 and T6 (type 2, 3 and 4) compressions. LZW Compression (type 5) ""Old-style"" JPEG Compression (type 6), as a best effort, as the spec is not well-defined JPEG Compression (type 7) ZLib (aka Adobe-style Deflate) Compression (type 8) Deflate Compression (type 32946) Horizontal differencing Predictor (type 2) for LZW, ZLib, Deflate and PackBits compression Alpha channel (ExtraSamples type 1/Associated Alpha and type 2/Unassociated Alpha) CMYK data (PhotometricInterpretation type 5/Separated) YCbCr data (PhotometricInterpretation type 6/YCbCr) for JPEG CIELab data in TIFF, ITU and ICC variants (PhotometricInterpretation type 9, 10 and 11) Planar data (PlanarConfiguration type 2/Planar) ICC profiles (ICCProfile) BitsPerSample values up to 16 for most PhotometricInterpretations Multiple images (pages) in one file Write support for most ""Baseline"" TIFF options Uncompressed, PackBits, ZLib and Deflate Additional support for CCITT T4 and and T6 compressions. Additional support for LZW and JPEG (type 7) compressions Horizontal differencing Predictor (type 2) for LZW, ZLib, Deflate Native and Standard metadata support Legacy formats HDR - Radiance High Dynamic Range RGBE Format Read support for the most common RGBE (.hdr) format Samples are converted to 32 bit floating point (float) and normalized using a global tone mapper by default. Support for custom global tone mappers Alternatively, use a ""null-tone mapper"", for unnormalized data (allows local tone mapping) Unconverted RGBE samples accessible using readRaster Standard metadata support IFF - Commodore Amiga/Electronic Arts Interchange File Format Legacy format, allows reading popular image format from the Commodore Amiga computer. Read support for the following file types: ILBM Indexed color, 1-8 interleaved bit planes, including 6 bit EHB ILBM Gray, 8 bit interleaved bit planes ILBM RGB, 24 and 32 bit interleaved bit planes ILBM HAM6 and HAM8 PBM Indexed color, 1-8 bit, PBM Gray, 8 bit PBM RGB, 24 and 32 bit PBM HAM6 and HAM8 Write support ILBM Indexed color, 1-8 bits per sample, 8 bit gray, 24 and 32 bit true color. Support for the following compression types (read/write): Uncompressed RLE (PackBits) PCX - ZSoft Paintbrush Format Read support for the following file types: Indexed color, 1, 2, 4 or 8 bits per pixel, bit planes or interleaved Grayscale, 8 bits per pixel Color (RGB), 8 bits per pixel component Read support for DCX (multi-page) fax format, containing any of the above types Support for the following compression types: Uncompressed (experimental) RLE compressed Standard metadata support PICT - Apple Mac Paint Picture Format Legacy format, especially useful for reading OS X clipboard data. Read support for the following file types: QuickDraw (format support is not complete, but supports most OS X clipboard data as well as RGB pixel data) QuickDraw bitmap QuickDraw pixmap QuickTime stills Write support for RGB pixel data: QuickDraw pixmap SGI - Silicon Graphics Image Format Read support for the following file types: 1, 2, 3 or 4 channel image data 8 or 16 bits per pixel component Support for the following compression types: Uncompressed RLE compressed Standard metadata support TGA - Truevision TGA Image Format Read support for the following file types: ColorMapped Monochrome TrueColor Support for the following compression types: Uncompressed RLE compressed Standard metadata support Icon/other formats ICNS - Apple Icon Image Read support for the following icon types: All known ""native"" icon types Large PNG encoded icons Large JPEG 2000 encoded icons (requires JPEG 2000 ImageIO plugin or fallback to sips command line tool) ICO & CUR - MS Windows Icon and Cursor Formats Read support for the following file types: ICO Indexed color, 1, 4 and 8 bit ICO RGB, 16, 24 and 32 bit CUR Indexed color, 1, 4 and 8 bit CUR RGB, 16, 24 and 32 bit 3.1 Note: These formats are now part of the BMP plugin Thumbs.db - MS Windows Thumbs DB Read support Other formats, using 3rd party libraries SVG - Scalable Vector Graphics Read-only support using Batik WMF - MS Windows MetaFile Limited read-only support using Batik Important note on using Batik: Please read The Apache™ XML Graphics Project - Security, and make sure you use either version 1.6.1, 1.7.1 or 1.8+. Basic usage Most of the time, all you need to do is simply include the plugins in your project and write: BufferedImage image = ImageIO.read(file);  This will load the first image of the file, entirely into memory. The basic and simplest form of writing is: if (!ImageIO.write(image, format, file)) {    // Handle image not written case }  This will write the entire image into a single file, using the default settings for the given format. The plugins are discovered automatically at run time. See the FAQ for more info on how this mechanism works. Advanced usage If you need more control of read parameters and the reading process, the common idiom for reading is something like: // Create input stream ImageInputStream input = ImageIO.createImageInputStream(file);  try {     // Get the reader     Iterator<ImageReader> readers = ImageIO.getImageReaders(input);      if (!readers.hasNext()) {         throw new IllegalArgumentException(""No reader for: "" + file);     }      ImageReader reader = readers.next();      try {         reader.setInput(input);          // Optionally, listen for read warnings, progress, etc.         reader.addIIOReadWarningListener(...);         reader.addIIOReadProgressListener(...);          ImageReadParam param = reader.getDefaultReadParam();          // Optionally, control read settings like sub sampling, source region or destination etc.         param.setSourceSubsampling(...);         param.setSourceRegion(...);         param.setDestination(...);         // ...          // Finally read the image, using settings from param         BufferedImage image = reader.read(0, param);          // Optionally, read thumbnails, meta data, etc...         int numThumbs = reader.getNumThumbnails(0);         // ...     }     finally {         // Dispose reader in finally block to avoid memory leaks         reader.dispose();     } } finally {     // Close stream in finally block to avoid resource leaks     input.close(); }  Query the reader for source image dimensions using reader.getWidth(n) and reader.getHeight(n) without reading the entire image into memory first. It's also possible to read multiple images from the same file in a loop, using reader.getNumImages(). If you need more control of write parameters and the writing process, the common idiom for writing is something like: // Get the writer Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(format);  if (!writers.hasNext()) {     throw new IllegalArgumentException(""No writer for: "" + format); }  ImageWriter writer = writers.next();  try {     // Create output stream     ImageOutputStream output = ImageIO.createImageOutputStream(file);      try {         writer.setOutput(output);          // Optionally, listen to progress, warnings, etc.          ImageWriteParam param = writer.getDefaultWriteParam();          // Optionally, control format specific settings of param (requires casting), or         // control generic write settings like sub sampling, source region, output type etc.          // Optionally, provide thumbnails and image/stream metadata         writer.write(..., new IIOImage(..., image, ...), param);     }     finally {         // Close stream in finally block to avoid resource leaks         output.close();     } } finally {     // Dispose writer in finally block to avoid memory leaks     writer.dispose(); }  For more advanced usage, and information on how to use the ImageIO API, I suggest you read the Java Image I/O API Guide from Oracle. Deploying the plugins in a web app Because the ImageIO plugin registry (the IIORegistry) is ""VM global"", it doesn't by default work well with servlet contexts. This is especially evident if you load plugins from the WEB-INF/lib or classes folder. Unless you add ImageIO.scanForPlugins() somewhere in your code, the plugins might never be available at all. I addition, servlet contexts dynamically loads and unloads classes (using a new class loader per context). If you restart your application, old classes will by default remain in memory forever (because the next time scanForPlugins is called, it's another ClassLoader that scans/loads classes, and thus they will be new instances in the registry). If a read is attempted using one of the remaining ""old"" readers, weird exceptions (like NullPointerExceptions when accessing static final initialized fields or NoClassDefFoundErrors for uninitialized inner classes) may occur. To work around both the discovery problem and the resource leak, it is strongly recommended to use the IIOProviderContextListener that implements dynamic loading and unloading of ImageIO plugins for web applications. <web-app ...>  ...      <listener>         <display-name>ImageIO service provider loader/unloader</display-name>         <listener-class>com.twelvemonkeys.servlet.image.IIOProviderContextListener</listener-class>     </listener>  ...  </web-app>  Loading plugins from WEB-INF/lib without the context listener installed is unsupported and will not work correctly. The context listener has no dependencies to the TwelveMonkeys ImageIO plugins, and may be used with JAI ImageIO or other ImageIO plugins as well. Another safe option, is to place the JAR files in the application server's shared or common lib folder. Using the ResampleOp The library comes with a resampling (image resizing) operation, that contains many different algorithms to provide excellent results at reasonable speed. import com.twelvemonkeys.image.ResampleOp;  ...  BufferedImage input = ...; // Image to resample int width, height = ...; // new width/height  BufferedImageOp resampler = new ResampleOp(width, height, ResampleOp.FILTER_LANCZOS); // A good default filter, see class documentation for more info BufferedImage output = resampler.filter(input, null);  Using the DiffusionDither The library comes with a dithering operation, that can be used to convert BufferedImages to IndexColorModel using Floyd-Steinberg error-diffusion dither. import com.twelvemonkeys.image.DiffusionDither;  ...  BufferedImage input = ...; // Image to dither  BufferedImageOp ditherer = new DiffusionDither(); BufferedImage output = ditherer.filter(input, null);  Building Download the project (using Git): $ git clone git@github.com:haraldk/TwelveMonkeys.git  This should create a folder named TwelveMonkeys in your current directory. Change directory to the TwelveMonkeys folder, and issue the command below to build. Build the project (using Maven): $ mvn package  Currently, the recommended JDK for making a build is Oracle JDK 7.x or 8.x. It's possible to build using OpenJDK, but some tests might fail due to some minor differences between the color management systems used. You will need to either disable the tests in question, or build without tests altogether. Because the unit tests needs quite a bit of memory to run, you might have to set the environment variable MAVEN_OPTS to give the Java process that runs Maven more memory. I suggest something like -Xmx512m -XX:MaxPermSize=256m. Optionally, you can install the project in your local Maven repository using: $ mvn install  Installing To install the plug-ins, either use Maven and add the necessary dependencies to your project, or manually add the needed JARs along with required dependencies in class-path. The ImageIO registry and service lookup mechanism will make sure the plugins are available for use. To verify that the JPEG plugin is installed and used at run-time, you could use the following code: Iterator<ImageReader> readers = ImageIO.getImageReadersByFormatName(""JPEG""); while (readers.hasNext()) {     System.out.println(""reader: "" + readers.next()); }  The first line should print: reader: com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageReader@somehash  Maven dependency example To depend on the JPEG and TIFF plugin using Maven, add the following to your POM: ... <dependencies>     ...     <dependency>         <groupId>com.twelvemonkeys.imageio</groupId>         <artifactId>imageio-jpeg</artifactId>         <version>3.2.1</version> <!-- Alternatively, build your own version -->     </dependency>     <dependency>         <groupId>com.twelvemonkeys.imageio</groupId>         <artifactId>imageio-tiff</artifactId>         <version>3.2.1</version> <!-- Alternatively, build your own version -->     </dependency> </dependencies>  Manual dependency example To depend on the JPEG and TIFF plugin in your IDE or program, add all of the following JARs to your class path: twelvemonkeys-common-lang-3.2.1.jar twelvemonkeys-common-io-3.2.1.jar twelvemonkeys-common-image-3.2.1.jar twelvemonkeys-imageio-core-3.2.1.jar twelvemonkeys-imageio-metadata-3.2.1.jar twelvemonkeys-imageio-jpeg-3.2.1.jar twelvemonkeys-imageio-tiff-3.2.1.jar  Links to prebuilt binaries Latest version (3.2.x) Requires Java 7 or later. Common dependencies common-lang-3.2.1.jar common-io-3.2.1.jar common-image-3.2.1.jar ImageIO dependencies imageio-core-3.2.1.jar imageio-metadata-3.2.1.jar ImageIO plugins imageio-bmp-3.2.1.jar imageio-jpeg-3.2.1.jar imageio-tiff-3.2.1.jar imageio-pnm-3.2.1.jar imageio-psd-3.2.1.jar imageio-hdr-3.2.1.jar imageio-iff-3.2.1.jar imageio-pcx-3.2.1.jar imageio-pict-3.2.1.jar imageio-sgi-3.2.1.jar imageio-tga-3.2.1.jar imageio-icns-3.2.1.jar imageio-thumbsdb-3.2.1.jar ImageIO plugins requiring 3rd party libs imageio-batik-3.2.1.jar Photoshop Path support for ImageIO imageio-clippath-3.2.1.jar Servlet support servlet-3.2.1.jar Old version (3.0.x) Use this version for projects that requires Java 6 or need the JMagick support. Does not support Java 8. Common dependencies common-lang-3.0.2.jar common-io-3.0.2.jar common-image-3.0.2.jar ImageIO dependencies imageio-core-3.0.2.jar imageio-metadata-3.0.2.jar ImageIO plugins imageio-jpeg-3.0.2.jar imageio-tiff-3.0.2.jar imageio-psd-3.0.2.jar imageio-pict-3.0.2.jar imageio-iff-3.0.2.jar imageio-icns-3.0.2.jar imageio-ico-3.0.2.jar imageio-thumbsdb-3.0.2.jar ImageIO plugins requiring 3rd party libs imageio-batik-3.0.2.jar imageio-jmagick-3.0.2.jar Servlet support servlet-3.0.2.jar License The project is distributed under the OSI approved BSD license: Copyright (c) 2008-2015, Harald Kuhr All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  o Redistributions of source code must retain the above copyright   notice, this list of conditions and the following disclaimer.  o Redistributions in binary form must reproduce the above copyright   notice, this list of conditions and the following disclaimer in the   documentation and/or other materials provided with the distribution.  o Neither the name ""TwelveMonkeys"" nor the   names of its contributors may be used to endorse or promote products   derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  FAQ q: How do I use it? a: The easiest way is to build your own project using Maven, and just add dependencies to the specific plug-ins you need. If you don't use Maven, make sure you have all the necessary JARs in classpath. See the Install section above. q: What changes do I have to make to my code in order to use the plug-ins? a: The short answer is: None. For basic usage, like ImageIO.read(...) or ImageIO.getImageReaders(...), there is no need to change your code. Most of the functionality is available through standard ImageIO APIs, and great care has been taken not to introduce extra API where none is necessary. Should you want to use very specific/advanced features of some of the formats, you might have to use specific APIs, like setting base URL for an SVG image that consists of multiple files, or controlling the output compression of a TIFF file. q: How does it work? a: The TwelveMonkeys ImageIO project contains plug-ins for ImageIO. ImageIO uses a service lookup mechanism, to discover plug-ins at runtime. All you have have to do, is to make sure you have the TwelveMonkeys JARs in your classpath. You can read more about the registry and the lookup mechanism in the IIORegistry API doc. The fine print: The TwelveMonkeys service providers for JPEG, BMP and TIFF, overrides the onRegistration method, and utilizes the pairwise partial ordering mechanism of the IIOServiceRegistry to make sure it is installed before the Sun/Oracle provided JPEGImageReader and BMPImageReader, and the Apple provided TIFFImageReader on OS X, respectively. Using the pairwise ordering will not remove any functionality form these implementations, but in most cases you'll end up using the TwelveMonkeys plug-ins instead. q: What about JAI? Several of the formats are already supported by JAI. a: While JAI (and jai-imageio in particular) have support for some of the formats, JAI has some major issues. The most obvious being: It's not actively developed. No issues has been fixed for years. To get full format support, you need native libs. Native libs does not exist for several popular platforms/architectures, and further the native libs are not open source. Some environments may also prevent deployment of native libs, which brings us back to square one. q: What about JMagick or IM4Java? Can't you just use what´s already available? a: While great libraries with a wide range of formats support, the ImageMagick-based libraries has some disadvantages compared to ImageIO. No real stream support, these libraries only work with files. No easy access to pixel data through standard Java2D/BufferedImage API. Not a pure Java solution, requires system specific native libs. We did it Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/haraldk/TwelveMonkeys"	"Collection of plugins which extend the number of supported image file formats."	"true"
"Imagery"	"ZXing"	"https://github.com/zxing/zxing"	"Multi-format 1D/2D barcode image processing library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9612"	"1152"	"5237"	"GitHub - zxing/zxing: Official ZXing (""Zebra Crossing"") project home Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,152 Star 9,612 Fork 5,237 zxing/zxing Code Issues 13 Pull requests 2 Wiki Pulse Graphs Official ZXing (""Zebra Crossing"") project home 3,250 commits 3 branches 19 releases 57 contributors Java 96.1% HTML 3.8% CSS 0.1% Java HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags coverity_scan gh-pages master Nothing to show zxing-3.2.1 zxing-3.2.0 zxing-3.1.0 zxing-3.0.1 zxing-3.0.0 zxing-2.3.0 ZXingTest-1.4.1 BSGlass-0.2.1 BSGlass-0.2.0 BS-4.7.5 BS-4.7.4 BS-4.7.3 BS-4.7.0 BS-4.6.4 BS-4.6.3 BS-4.6.2 BS-4.6.1 BS-4.6.0 BS-4.5.1 Nothing to show New pull request Latest commit d3dd182 Jul 8, 2016 srowen Don't interpret very long strings.with.dots.like.this to be interpret… … …ed as URIs Permalink Failed to load latest commit information. .github Add issue template and move supported files to .github Mar 2, 2016 android-core [maven-release-plugin] prepare for next development iteration Aug 19, 2015 android-integration Remove unneeded .gitignore, and unneeded libs copy step for Android t… Jun 8, 2016 android Implement more style checks around whitespace Jun 24, 2016 androidtest Skip javadoc for Android apps, always Jun 22, 2016 core Don't interpret very long strings.with.dots.like.this to be interpret… Jul 8, 2016 glass Skip javadoc for Android apps, always Jun 22, 2016 javase Implement more style checks around whitespace Jun 24, 2016 src Implement more style checks around whitespace Jun 24, 2016 zxing.appspot.com Crush some PNGs that could benefit from it Jul 2, 2016 zxingorg Skip javadoc for Android apps, always Jun 22, 2016 .gitattributes Added .gitattributes to define how git handles the line endings Jul 17, 2014 .gitignore Remove Thumbs.db from gitignore Mar 6, 2014 .travis.yml Allow building of Android apps on Travis Jun 24, 2016 AUTHORS Added a Code 93 encoder Oct 18, 2015 CHANGES Update to target Android 23; brief 3.2.1 release note Aug 19, 2015 LICENSE Update jai-imageio license; remove unneeded gwt-servlet dep; update c… Sep 25, 2015 NOTICE Use JCommander for CommandLineRunner args May 3, 2015 README.md Use HTTPS for all zxing.org / zxing.appspot.com links Jun 20, 2016 pom.xml Don't interpret very long strings.with.dots.like.this to be interpret… Jul 8, 2016 README.md Get Started Developing To get started, please visit: https://github.com/zxing/zxing/wiki/Getting-Started-Developing ZXing (""zebra crossing"") is an open-source, multi-format 1D/2D barcode image processing library implemented in Java, with ports to other languages. Supported Formats 1D product 1D industrial 2D UPC-A Code 39 QR Code UPC-E Code 93 Data Matrix EAN-8 Code 128 Aztec (beta) EAN-13 Codabar PDF 417 (beta) ITF RSS-14 RSS-Expanded Components Active Module Description core The core image decoding library, and test code javase JavaSE-specific client code android Android client Barcode Scanner androidtest Android test app, ZXing Test android-integration Supports integration with Barcode Scanner via Intent android-core Android-related code shared among android, androidtest, glass glass Simple Google Glass application zxingorg The source behind zxing.org zxing.appspot.com The source behind web-based barcode generator at zxing.appspot.com Available in previous releases Module Description cpp C++ port iphone iPhone client objc Objective C port actionscript Partial ActionScript port jruby JRuby wrapper ZXing-based third-party open source projects Module Description QZXing port to Qt framework zxing-cpp port to C++ (forked from the deprecated official C++ port) zxing_cpp.rb bindings for Ruby (not just JRuby), powered by zxing-cpp python-zxing bindings for Python ZXing .NET port to .NET and C#, and related Windows platform php-qrcode-detector-decoder port to PHP Other related third-party open source projects Module Description Barcode4J Generator library in Java ZBar Reader library in C99 OkapiBarcode Links Online Decoder QR Code Generator Javadoc Documentation Site Contacting Post to the discussion forum or tag a question with zxing on StackOverflow. Etcetera QR code is trademarked by Denso Wave, inc. Thanks to Haase & Martin OHG for contributing the logo. Optimized with Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zxing/zxing"	"Multi-format 1D/2D barcode image processing library."	"true"
"JSON"	"Genson"	"http://owlike.github.io/genson/"	"Powerful and easy to use Java to JSON conversion library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"116"	"16"	"27"	"GitHub - owlike/genson: Genson a fast & modular Java <> Json library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 116 Fork 27 owlike/genson Code Issues 32 Pull requests 0 Pulse Graphs Genson a fast & modular Java <> Json library http://owlike.github.io/genson/ 328 commits 8 branches 7 releases 8 contributors Java 88.6% Scala 4.9% HTML 2.8% CSS 2.7% Shell 1.0% Java Scala HTML CSS Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cross-build-scala fix-62-escape-names genson-1.3 genson-1.4 gh-pages issue_64 jodatime-bundle master Nothing to show genson-parent-1.2 genson-parent-1.2-RC1 genson-parent-1.1 genson-parent-1.1-RC2 genson-parent-1.1-RC1 genson-parent-1.0 genson-parent-1.0-RC Nothing to show New pull request Latest commit 8f6d549 Jul 8, 2016 EugenCepoi An attempt to solve issue #99 where the wrong member is resolved in t… … …he JaxbBundle Permalink Failed to load latest commit information. genson-scala Fixes the use of filters defined on GensonBuilder and the ScalaBundle Jul 8, 2016 genson An attempt to solve issue #99 where the wrong member is resolved in t… Jul 8, 2016 website Documentation fixes Apr 22, 2016 .gitattributes jsr 353 support : first version JsonGenerator+tests Aug 7, 2013 .gitignore updating readme with all website and removing .settings folder May 11, 2014 .travis.yml Fixes #52 Apr 6, 2015 README.md Added Gitter badge Apr 15, 2015 make-release.sh Updating release script Mar 27, 2016 pom.xml [Release] - 1.4, update from dev version 1.4-SNAPSHOT to 1.5-SNAPSHOT Mar 27, 2016 README.md Genson Genson is a complete json <-> java conversion library, providing full databinding, streaming and much more. Gensons main strengths? Easy to use and just works! Its modular and configurable architecture. Speed and controlled small memory foot print making it scale. Online Documentation Checkout our new website - http://owlike.github.io/genson/. The old website at http://code.google.com/p/genson/, hosts the documentation and javadoc until release 0.99 inclusive. But starting with 1.0 everything has been moved to github and the new website. Motivation You might wonder, why create another Json databinding lib for Java? Well...most libraries, miss of important features or have a lot of features but you can hardly add new features by yourself. Gensons initial motivation is to solve those problems by trying to come with useful features out of the box and stay as much as possible open to extension. Features you will like Easy to use, fast, highly configurable, lightweight and all that into a single small jar! Full databinding and streaming support for efficient read/write Support for polymorphic types (able to deserialize to an unknown type) Does not require a default no arg constructor and really passes the values not just null, encouraging immutability. It can even be used with factory methods instead of constructors! Full support for generic types Easy to filter/include properties without requiring the use of annotations or mixins Genson provides a complete implementation of JSR 353 Starting with Genson 0.95 JAXB annotations and types are supported! Automatic support for JSON in JAX-RS implementations Serialization and Deserialization of maps with complex keys Goals Be as much extensible as possible by allowing users to add new features in a clean and easy way. Genson applies the philosophy that ""We can not think of every use case, so give to users the ability to do it by them self in a easy way"". Provide an easy to use API. Try to be as fast and scalable or even faster than the most performant librairies. Full support of Java generics. Provide the ability to work with classes of which you don't have the source code. Provide an efficient streaming API. Download Genson is provided as a all in one solution containing all the features. It provides also a couple of extensions and integrations with different other libraries such JAX-RS implementations, Spring, Joda time, Scala available out of the box. These libraries are of course not included in Genson and if you are using maven won't be pulled transitively (they are marked as optional). To get you running you can download it manually from maven central or add the dependency to your pom if you use Maven. <dependency>   <groupId>com.owlike</groupId>   <artifactId>genson</artifactId>   <version>{{latest_version}}</version> </dependency> You can also build it from the sources using Maven. POJO databinding The main entry point in Genson library is the Genson class. It provides methods to serialize Java objects to JSON and deserialize JSON streams to Java objects. Instances of Genson are immutable and thread safe, you should reuse them. In general the recommended way is to have a single instance per configuration type. The common way to use Genson is to read JSON and map it to some POJO and vice versa, read the POJO and write JSON. Genson genson = new Genson();  // read from a String, byte array, input stream or reader Person person = genson.deserialize(""{\""age\"":28,\""name\"":\""Foo\""}"", Person.class);  String json = genson.serialize(person); // or produce a byte array byte[] jsonBytes = genson.serializeBytes(person); // or serialize to a output stream or writer genson.serialize(person, outputStream);  public class Person {   public String name;   public int age; } Java collections But you can also work with standard Java collections such as Map and Lists. If you don't tell Genson what type to use, it will deserialize JSON Arrays to Java List and JSON Objects to Map, numbers to Long and Double. Using Java standard types instead of POJO can be a easy way to start learning JSON. In that case you will deal only with List, Map, Long, Double, String, Boolean and null. // will be deserialized to a list of maps List<Object> persons = genson.deserialize(""[{\""age\"":28,\""name\"":\""Foo\""}]"", List.class); // will produce same result as Object persons = genson.deserialize(""[{\""age\"":28,\""name\"":\""Foo\""}]"", Object.class); Instead of using the previous Person class we can use a Map. By default if you don't specify the type of the keys, Genson will deserialize to String and serialize using toString method of the key. Map<String, Object> person = new HashMap<String, Object>() {{   put(""name"", ""Foo"");   put(""age"", 28); }};  // {""age"":28,""name"":""Foo""} String singlePersonJson = genson.serialize(person); // will contain a long for the age and a String for the name Map<String, Object> map = genson.deserialize(singlePersonJson, Map.class); Deserialize generic types You can also deserialize to generic types such as a list of Pojos. String json = ""[{\""age\"":28,\""name\"":\""Foo\""}]"";  List<Person> persons = genson.deserialize(json, new GenericType<List<Person>>(){});  // or lets say we want to use something else than String as the keys of our Map. Map<Integer, Object> map = genson.deserialize(   ""{\""1\"":28, \""2\"":\""Foo\""}"",   new GenericType<Map<Integer, Object>>(){} ); Note in the previous example we defined the keys (1, 2) as json strings. JSON specification allows only strings as object property names, but Genson allows to map this keys to some - limited - other types. Customizing Genson If the default configuration of Genson does not fit your needs you can customize it via the GensonBuilder. For example to enable indentation of the output, serialize all objects using their runtime type and deserialize to classes that don't provide a default no argument constructor can be achieved with following configuration. Genson genson = new GensonBuilder()   .useIndentation(true)   .useRuntimeType(true)   .useConstructorWithArguments(true)   .create(); You are ready to rock the JSON! :) Copyright and license Copyright 2011-2014 Genson - Cepoi Eugen Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/owlike/genson"	"Powerful and easy to use Java to JSON conversion library."	"true"
"JSON"	"Gson"	"https://github.com/google/gson"	"Serializes objects to JSON and vice versa. Good performance with on-the-fly usage."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5223"	"397"	"1252"	"GitHub - google/gson: A Java serialization/deserialization library that can convert Java Objects into JSON and back. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 397 Star 5,223 Fork 1,252 google/gson Code Issues 171 Pull requests 20 Pulse Graphs A Java serialization/deserialization library that can convert Java Objects into JSON and back. 1,292 commits 15 branches 33 releases 42 contributors HTML 53.6% Java 46.2% Other 0.2% HTML Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 722 819 JsonArrayImplementsList date duplicate_keys_in_map gh-pages gsoncontext_refactoring jdk16_regression jsonadapter_refactoring jw/boxed-boolean jw/on-deque jw/string-strategy jwilson_0421_831 master revert-669-inet-address-test-failure Nothing to show gson-parent-2.7 gson-parent-2.6.2 gson-parent-2.6.1 gson-parent-2.6 gson-parent-2.5 gson-parent-2.4 gson-2.4 gson-2.3.1 gson-2.3 gson-2.2.4 gson-2.2.3 gson-2.2.2 gson-2.2.1 gson-2.2 gson-2.1 gson-2.0 gson-1.7.2 gson-1.7.1 1.7 1.6 1.5 1.4-beta 1.3 1.3beta3 1.3beta2 1.3-beta 1.2.3 1.2.2 1.2.1 1.2 1.1.1 1.1 1.0 Nothing to show New pull request Latest commit 8b46423 Jul 3, 2016 inder123 committed on GitHub Merge pull request #881 from testcenter/master … made nullSafe wrapper of JsonAdapter optional Permalink Failed to load latest commit information. codegen Followup to r1175. Use the same copyright holder for all files. Sep 30, 2012 examples/android-proguard-example Fixed code style to remove explicit casting op. Feb 14, 2016 extras The method registerTypeAdapterFactory accepts a TypeAdapterFactory in… May 25, 2016 gson made nullSafe wrapper of JsonAdapter optional Jun 28, 2016 lib moved lib at the top-level to share eclipse styles. Sep 1, 2008 metrics Replace switch with if/else when processing whitespace. If/else is fa… Aug 27, 2012 proto handle explicit null values in JSON May 23, 2016 .gitignore fixed pom and .gitignore Oct 3, 2015 .travis.yml Add Travis CI build. Jun 17, 2015 CHANGELOG.md ChangeLog for 2.7 Jun 14, 2016 GsonDesignDocument.md Imported Gson design document from Nov 24, 2015 LICENSE Add full license text for Apache License 2.0 Nov 27, 2015 README.md revised Gson download link to maven central Mar 25, 2016 ReleaseProcess.md deleted Javadoc updating process since we are now using javadoc.io Mar 25, 2016 UserGuide.md Updated to 2.7 Jun 14, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jun 14, 2016 README.md google-gson Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object. Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of. There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. Gson Goals Provide simple toJson() and fromJson() methods to convert Java objects to JSON and vice-versa Allow pre-existing unmodifiable objects to be converted to and from JSON Extensive support of Java Generics Allow custom representations for objects Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types) Gson Download and Maven Gson Download downloads at Maven Central For Maven check ""Dependency Information"" tab, on the left side. Gson Documentation Gson API: Javadocs for the current Gson release Gson user guide: This guide contains examples on how to use Gson in your code. Gson Roadmap: Details of changes in the recent versions Gson design document: This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion Please use the google-gson Google group to discuss Gson, or to post questions. Gson-related Content Created by Third Parties Gson Tutorial by StudyTrails License Gson is released under the Apache 2.0 license. Copyright 2008 Google Inc.  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/gson"	"Serializes objects to JSON and vice versa. Good performance with on-the-fly usage."	"true"
"JSON"	"Jackson"	"http://wiki.fasterxml.com/JacksonHome"	"Similar to GSON but has performance gains if you need to instantiate the library more often."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JacksonHome - FasterXML Wiki Search: Login JacksonHome RecentChanges FindPage HelpContents JacksonHome Immutable Page Comments Info Attachments More Actions: Raw Text Print View Render as Docbook Delete Cache ------------------------ Check Spelling Like Pages Local Site Map ------------------------ Rename Page Delete Page ------------------------ Subscribe User ------------------------ Remove Spam Revert to this revision Package Pages Sync Pages ------------------------ Load Save Jackson JSON Processor Wiki Inspired by the quality and variety of XML tooling available for the Java platform (StAX, JAXB, etc.), the Jackson is a multi-purpose Java library for processing JSON data format. Jackson aims to be the best possible combination of fast, correct, lightweight, and ergonomic for developers. Introduction First things first: Jackson Tutorial gives you reasonable overview of basic usage Licensing page outlines what Open Source licenses are used with Jackson (ASL, LGPL) Jackson FAQ covers various other aspects, including common usage cases. Documentation hub -- place where most new documentation should be added, esp. links to external documentation, and presentations by Jackson development team and community. Download page is where you can find downloadable artifacts and related info (Maven group, artifact ids) Jackson Users Group is the place to learn even more about Jackson community, things other users do and share, as well as future development plans. Project pages: Jackson 2.x home pages are at GitHub; most notably: Jackson Core contains streaming parser, generator Jackson Annotations for annotation-based configuration (used by data-bind) Jackson databind for data binding, tree model (builds on streaming core) LEGACY: Jackson 1.x project home page remains at Codehaus -- NOTE: do NOT link to this any more, unless specifically referring to Jackson 1.x versions. Testimonials After introduction, you may want to know who is already using Jackson for production work: Sampling of current users gives an idea of Jackson adoption Get it! And then it may be time to check Jackson out: Download page has the artifacts (jars, sources) you need; specifically, 2.2 which is the latest official version. Project In addition to the core project pages (listed above), there are numerous extensions that provide additional functionality and support for third-party libraries and data types: Jackson Modules are pluggable components that extend out-of-box functionality to support additional data types or JVM languages. Check out Module projects page for complete listing of known module projects. There are also projects that offer support for alternative data formats beyond JSON (like XML, BSON); see Jackson outside of JSON page to learn more. Bug reports and requests for new features are handled via: For Jackson 2.x, sub-projects have their own Issue trackers; for example: Jackson-core Issues (basic Streaming API) Jackson-databind Issues (data-binding functionality) Jackson 1.x Jira for Jackson 1.x issues More to Learn And if (when!) this all looks good, there is plenty more to learn: Jackson Documentation has plenty more to guide you through more advance usage TODO covers areas that could use contributions from new contributors... Future plans: work towards version 2.1 (big backwards-incompatible changes -- but happily co-exists with Jackson 1.x) Other Beyond these first steps, you may want to investigate these resources: CowTalk Blog has blog entries related to Jackson usage, development. Jackson Mailing lists Jackson Users Group site has discussion forums, additional blogs. CategoryJackson JacksonHome (last edited 2013-04-30 22:19:40 by TatuSaloranta) Copyright ©2009 FasterXML, LLC Immutable Page Comments Info Attachments More Actions: Raw Text Print View Render as Docbook Delete Cache ------------------------ Check Spelling Like Pages Local Site Map ------------------------ Rename Page Delete Page ------------------------ Subscribe User ------------------------ Remove Spam Revert to this revision Package Pages Sync Pages ------------------------ Load Save MoinMoin Powered Python Powered GPL licensed Valid HTML 4.01"	"null"	"null"	"Similar to GSON but has performance gains if you need to instantiate the library more often."	"true"
"JSON"	"JSON-io"	"https://github.com/jdereg/json-io"	"Convert Java to JSON. Convert JSON to Java. Pretty print JSON. Java JSON serializer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"164"	"26"	"57"	"GitHub - jdereg/json-io: Convert Java to JSON. Convert JSON to Java.  Pretty print JSON.  Java JSON serializer. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 164 Fork 57 jdereg/json-io Code Issues 5 Pull requests 1 Wiki Pulse Graphs Convert Java to JSON. Convert JSON to Java. Pretty print JSON. Java JSON serializer. 879 commits 1 branch 111 releases 13 contributors Groovy 60.0% Java 39.1% JavaScript 0.9% Groovy Java JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show json-io-2.9.1 json-io-2.5.2 json-io-2.4.4 json-io-2.4.0.6 json-io-2.4.0.5 json-io-2.4.0.4 json-io-2.4.0.1 json-io-2.4.0 json-io-2.3.0 json-io-2.2.34 json-io-2.2.33.1 json-io-2.2.33 json-io-2.2.32 json-io-2.2.32.final json-io-2.2.31 json-io-2.2.30 json-io-2.2.29 json-io-2.2.25 json-io-2.2.24 json-io-2.2.23 json-io-2.2.22 json-io-2.2.21 json-io-2.2.20 json-io-2.2.19 json-io-2.2.18 json-io-2.2.17 json-io-2.2.16 json-io-2.2.15 json-io-2.2.14 json-io-2.2.13 json-io-2.2.12 json-io-2.2.11 json-io-2.2.10 json-io-2.2.9 4.1.6.201508011954 4.1.6.201508011953 4.1.5.201507310830 4.1.4.201507160016 4.1.3.201507140121 4.1.2.201507080209 4.1.1.201507020838 4.1.0.201507010954 4.0.1.201506210150 4.0.0.201506060000 3.3.2.201506050226 3.3.1.201506031656 3.3.0.201506020022 3.2.3.201505291444 3.2.2.201505282238 3.2.1.201505272240 3.2.0.201505261155 3.1.3.201505251338 3.1.2.201505241134 3.1.1.201505211710 3.1.0.201505190040 3.0.2.201504230932 3.0.1.201503151126 3.0.0.201503071035 2.9.4.201502231114 2.9.3.201502090840 2.9.2.201502080204 2.9.0.201501151929 2.8.1.201501150035 2.8.0.201501042123 2.7.6.201412291112 2.7.5.201412222208 2.7.4.201412220938 2.7.3.201411162309 2.7.2.201410311523 2.7.1.201409021957 2.7.0.201408011057 2.7.0.201408011056 2.6.1.201407060846 2.6.0.201404280004 2.5.2.201403382356 2.5.2.201403290222 2.5.2.201403290014 2.5.2.201403282327 2.5.1.201402192244 2.5.0.20140219203 2.4.5.201402081123 2.4.4.201402061510 2.4.4.201402061508 2.4.3.201402061457 2.4.2.201401311522 2.4.1.201401061310 2.4.0.12211500 2.4.0.12181538 2.4.0.12181352 2.4.0.12181347 2.4.0.12181344 2.4.0.12161153 2.4.0.12161150 2.4.0.12161053 2.4.0.12161051 2.4.0.12151700 2.4.0.12151657 2.4.0.1652 2.4.0.1546 2.4.0.1540 Nothing to show New pull request Latest commit a409226 Jul 11, 2016 jdereg - Fix Javadoc issues Permalink Failed to load latest commit information. src - Fix Javadoc issues Jul 11, 2016 .gitignore added .gitignore Apr 29, 2015 LICENSE Initial commit Sep 4, 2013 README.md Update README.md Jun 28, 2016 jsonUtil.js moving jsonUtil.js to resource folder Dec 7, 2015 pom.xml Merge branch 'master' of https://github.com/jdereg/json-io Jul 10, 2016 README.md json-io Perfect Java serialization to and from JSON format (available on Maven Central). To include in your project: <dependency>   <groupId>com.cedarsoftware</groupId>   <artifactId>json-io</artifactId>   <version>4.4.0</version> </dependency>  Like json-io and find it useful? Tip bitcoin: 1MeozsfDpUALpnu3DntHWXxoPJXvSAXmQA Sponsors YourKit supports open source projects with its full-featured Java Profiler. YourKit, LLC is the creator of YourKit Java Profiler and YourKit .NET Profiler, innovative and intelligent tools for profiling Java and .NET applications. json-io consists of two main classes, a reader (JsonReader) and a writer (JsonWriter). json-io eliminates the need for using ObjectInputStream / ObjectOutputStream to serialize Java and instead uses the JSON format. There is a 3rd optional class (JsonObject) see 'Non-typed Usage' below. json-io does not require that Java classes implement Serializable or Externalizable to be serialized, unlike ObjectInputStream / ObjectOutputStream. It will serialize any Java object graph into JSON and retain complete graph semantics / shape and object types. This includes supporting private fields, private inner classes (static or non-static), of any depth. It also includes handling cyclic references. Objects do not need to have public constructors to be serialized. The output JSON will not include transient fields, identical to the ObjectOutputStream behavior. The JsonReader / JsonWriter code does not depend on any native or 3rd party libraries. For useful Java utilities, check out java-util at http://github.com/jdereg/java-util Format json-io uses proper JSON format. As little type information is included in the JSON format to keep it compact as possible. When an object's class can be inferred from a field type or array type, the object's type information is left out of the stream. For example, a String[] looks like [""abc"", ""xyz""]. When an object's type must be emitted, it is emitted as a meta-object field ""@type"":""package.class"" in the object. When read, this tells the JsonReader what class to instantiate. (@type output can be turned off - see options below). If an object is referenced more than once, or references an object that has not yet been defined, (say A points to B, and B points to C, and C points to A), it emits a ""@ref"":n where 'n' is the object's integer identity (with a corresponding meta entry ""@id"":n defined on the referenced object). Only referenced objects have IDs in the JSON output, reducing the JSON String length. Performance json-io was written with performance in mind. In most cases json-io is faster than the JDK's ObjectInputStream / ObjectOutputStream. As the tests run, a log is written of the time it takes to serialize / deserialize and compares it to ObjectInputStream / ObjectOutputStream (if the static variable _debug is true in TestUtil). Usage json-io can be used directly on JSON Strings or with Java's Streams. Example 1: String to Java object String json = // some JSON content Object obj = JsonReader.jsonToJava(json);     // optional 2nd 'options' argument (see below)  This will convert the JSON String to a Java Object graph. Example 2: Java object to JSON String Employee emp; // Emp fetched from database String json = JsonWriter.objectToJson(emp);     // optional 2nd 'options' argument (see below)  This example will convert the Employee instance to a JSON String. If the JsonReader were used on this String, it would reconstitute a Java Employee instance. Example 3: InputStream to Java object Employee emp = (Employee) JsonReader.jsonToJava(stream);  // optional 2nd 'options' argument (see below)  In this example, an InputStream (could be from a File, the Network, etc.) is supplying an unknown amount of JSON. If you want, you can use the JsonReader to wrap the stream to parse it, and return the Java object graph it represents. See constructors that take a Stream argument. Example 4: Java Object to OutputStream Employee emp; // emp obtained from database JsonWriter jw = new JsonWriter(outputStream);       // optional 2nd 'options' argument (see below) jw.write(emp); jw.close();  In this example, a Java object is written to an output stream in JSON format. Non-typed Usage json-io provides the choice to use the generic ""Map of Maps"" representation of an object, akin to a Javascript associative array. When reading from a JSON String or InputStream of JSON, the JsonReader can be constructed like this: // shown using Groovy short-hand for Map of options.  See options below. String json = // some JSON obtained from wherever Object obj = JsonReader.jsonToJava(json, [(JsonReader.USE_MAPS): true])      This will return an untyped object representation of the JSON String as a Map of Maps, where the fields are the Map keys (Strings), and the field values are the associated Map's values. In this representation the returned data consists of Maps, Arrays (Object[]), and JSON values. The Maps are actually a JsonObject instance (from json-io). This JsonObject implements the Map interface permitting access to the entire object. Cast to a JsonObject, you can see the type information, position within the JSON stream, and other information. This 'Maps' representation can be re-written to a JSON String or Stream and the output JSON will exactly match the original input JSON stream. This permits a JVM receiving JSON strings / streams that contain class references which do not exist in the JVM that is parsing the JSON, to completely read / write the stream. Additionally, the Maps can be modified before being written, and the entire graph can be re-written in one collective write. Any object model can be read, modified, and then re-written by a JVM that does not contain any of the classes in the JSON data. The optional values below are public constants from JsonWriter, used by placing them as keys in the arguments map. CUSTOM_WRITER_MAP       // Set to Map<Class, JsonWriter.JsonClassWriterEx> to                         // override the default JSON output for a given class.  NOT_CUSTOM_WRITER_MAP   // Set to Collection<Class> to indicate classes that should                         // not be written by a custom writer. DATE_FORMAT             // Set this format string to control the format dates are                          // written. Example: ""yyyy/MM/dd HH:mm"".  Can also be a                          // DateFormat instance.  Can also be the constant                          // JsonWriter.ISO_DATE_FORMAT or                          // JsonWriter.ISO_DATE_TIME_FORMAT  TYPE                    // Set to boolean true to force all data types to be                          // output, even where they could have been omitted. Set                         // to false to prevent @type to be written. Do not set                         // in order to minimize the number of @type's emitted. PRETTY_PRINT            // Force nicely formatted JSON output                          // (See http://jsoneditoronline.org for example format) FIELD_SPECIFIERS        // Set to a Map<Class, List<String>> which is used to                          // control which fields of a class are output. FIELD_NAME_BLACK_LIST   // Set value to a Map<Class, List<String>> which will be used                         // to control which fields on a class are not output. Black                          // list has always priority to FIELD_SPECIFIERS                          ENUM_PUBLIC_ONLY        // If set, indicates that private variables of ENUMs are not                          // serialized. WRITE_LONGS_AS_STRINGS  // If set, longs are written in quotes (Javascript safe).                         // JsonReader will automatically convert Strings back                         // to longs.  Any Number can be set from a String. TYPE_NAME_MAP           // If set, this map will be used when writing @type values.                         // Allows short-hand abbreviations for type names. SHORT_META_KEYS         // If set, then @type => @t, @keys => @k, @items => @e,                         // @ref => @r, and @id => @i SKIP_NULL_FIELDS        // Do not write fields that have null as their value                               The optional values below are public constants from JsonReader, used by placing them as keys in the arguments map. CUSTOM_READER_MAP       // Set to Map<Class, JsonReader.JsonClassReaderEx> to                         // override the default JSON reader for a given class.  NOT_CUSTOM_READER_MAP   // Set to Collection<Class> to indicate classes that should                         // not be read by a custom reader. USE_MAPS                // If set to boolean true, the read-in JSON will be                          // turned into a Map of Maps (JsonObject) representation. Note                         // that calling the JsonWriter on this root Map will indeed                         // write the equivalent JSON stream as was read. TYPE_NAME_MAP           // If set, this map will be used when writing @type values.                          // Allows short-hand abbreviations of type names. UNKNOWN_TYPE            // Set to null (or leave out), unknown objects are returned                         // as Maps.  Set to String class name, and unknown objects                          // will be created as with this class name, and the fields                          // will be set on it. Set to false, and an exception will be                          // thrown when an unknown object type is encountered.  The                          // location in the JSON will be given.  Customization Customization technique 1: Drop unwanted fields White-List support: Let's say a class that you want to serialize has a field on it that you do not want written out, like a ClassLoader reference. Use the JsonWriter.FIELD_SPECIFIERS to associate a List of String field names to a particular Class C. When the class is being written, only the fields you list will be written. Black-List support: Let's say a class that you want to serialize has a field on it that you do not want written out, like a ClassLoader reference. Use the JsonWriter.FIELD_NAME_BLACK_LIST to associate a List of String field names to a particular Class C. When the class is being written, any field listed here will not be written. Black-listed fields take priority over white listed fields. Customization technique 2: Custom instantiator JsonReader.assignInstantiator(Class c, ClassFactoryEx) There are times when json-io cannot instantiate a particular class even though it makes many attempts to instantiate a class, including looping through all the constructors (public, private) and invoking them with default values, etc. However, sometimes a class just cannot be constructed, for example, one that has a constructor that throws an exception if particular parameters are not passed into it. In these instances, use the JsonReader.assignInstantiator(class, Factory) to assign a ClassFactory or ClassFactoryEx that you implement to instantiate the class. json-io will call your ClassFactory.newInstance(Class c) (or ClassFactoryEx.newInstance(Class c, Map args)) to create the class that it could not construct. Your ClassFactory will be called to create the instance. In case you need values from the object being instantiated in order to construct it, use the ClassFactoryEx to instantiate it. This class factory has the API newInstance(Class c, Map args) which will be called with the Class to instantiate and the JSON object that represents it (already read in). In the args Map, the key 'jsonObj' will have the associated JsonObject (Map) that is currently being read. You can pull field values from this object to create and return the instance. After your code creates the instance, json-io will reflectively stuff the values from the jsonObj (JsonObject) into the instance you create. Customization technique 3: Shorter meta-keys (@type -> @t, @id -> @i, @ref -> @r, @keys -> @k, @items -> @e) Set JsonWriter.SHORT_META_KEYS to true to see the single-letter meta keys used in the outputted JSON. In addition to the shorter meta keys, you can and a list of substitutions of your own to use. For example, you may want to see alist instead of java.util.ArrayList. This is only applicable if you are writing with @types in the JSON.   Map args = [           (JsonWriter.SHORT_META_KEYS):true,           (JsonWriter.TYPE_NAME_MAP):[               'java.util.ArrayList':'alist',                'java.util.LinkedHashMap':'lmap',                (TestObject.class.getName()):'testO'           ]   ]   String json = JsonWriter.objectToJson(list, args)  In this example, we create an 'args' Map, set the key JsonWriter.SHORT_META_KEYS to true and set the JsonWriter.TYPE_NAME_MAP to a Map that will be used to substitute class names for short-hand names. Customization technique 4: Custom serializer New APIs have been added to allow you to associate a custom reader / writer class to a particular class if you want it to be read / written specially in the JSON output. The json-io approach allows you to customize the JSON format for classes for which you do not have the source code. Example (in Groovy). Note the Person has a List of pets, and in this case, it re-uses  JsonWriter to write that part of the class out (no need to customize it):  static class CustomPersonWriter implements JsonWriter.JsonClassWriterEx {     void write(Object o, boolean showType, Writer output, Map<String, Object> args) throws IOException     {         Person p = (Person) o         output.write('""first"":""')         output.write(p.getFirstName())         output.write('"",""last"":""')         output.write(p.getLastName())         JsonWriter writer = Support.getWriter(args)         writer.writeImpl(p.getPets(), true)     } }  Customization technique 5: Processing JSON from external sources. When reading JSON from external sources, you may want to start with: in Groovy: Object data = JsonReader.jsonToJava(json, [(JsonReader.USE_MAPS): true])  In Java: Map args = new HashMap(); args.put(JsonReader.USE_MAPS, true); Object data = JsonReader.jsonToJava(json, args);  This will get the JSON read into memory, in a Map-of-Maps format, similar to how JSON is read into memory in Javascript. This will get you going right away. To write 'generic' JSON (without @type or @items, etc.) entries, use: in Groovy: String json = JsonWriter.objectToJson(objToWrite, [(JsonWriter.TYPE):false])  In Java: Map args = new HashMap(); args.put(JsonWriter.TYPE, false); String json = JsonWriter.objectToJson(objToWrite, args);  Objects will not include the @type flags or @items. This JSON passes nicely to non-Java receivers, like Javascript. Keep in mind, you will be working with the JSON as generic object.field and object[index] with this approach. Please note that if you write your object graph out with JsonWriter.TYPE: false, the shape of the graph will be maintained. What this means, is that if two different places in your object graph point to the same object, the first reference will write the actual object, the 2nd and later references will write a reference (@ref) to the first instance. This will read in just fine with JsonReader.jsonToJava(), and the appropriate Map reference will be placed in all referenced locations. If reading this in Javascript, make sure to use the included jsonUtil.js to parse the read in JSON so that it can perform the substitutions of the @ref's. (See src/test/resource folder for jsonUtil.js). Javascript Included is a small Javascript utility (jsonUtil.js in the src/test/resources folder) that will take a JSON output stream created by the JSON writer and substitute all @ref's for the actual pointed to object. It's a one-line call - resolveRefs(json). This will substitute @ref tags in the JSON for the actual pointed-to object. What's next? Even though json-io is perfect for Java / Javascript serialization, there are other great uses for it: Cloning Many projects use JsonWriter to write an object to JSON, then use the JsonReader to read it in, perfectly cloning the original object graph: Employee emp; // emp obtained from database Employee deepCopy = (Employee) cloneObject(emp);  public Object cloneObject(Object root) {     return JsonReader.jsonToJava(JsonWriter.objectToJson(root)); }  Debugging Instead of doing System.out.println() debugging, call JsonWriter.objectToJson(obj) and dump that String out. It will reveal the object in all it's glory. Pretty-Printing JSON Use JsonWriter.formatJson() API to format a passed in JSON string to a nice, human readable format. Also, when writing JSON data, use the JsonWriter.objectToJson(o, args) API, where args is a Map with a key of JsonWriter.PRETTY_PRINT and a value of 'true' (boolean or String). When run this way, the JSON written by the JsonWriter will be formatted in a nice, human readable format. RESTful support json-io can be used as the fundamental data transfer method between a Javascript / JQuery / Ajax client and a web server in a RESTful fashion. Used this way, you can create more active sites like Google's GMail, MyOtherDrive online backup, etc. See https://github.com/jdereg/json-command-servlet for a light-weight servlet that processes Ajax / XHR calls. Featured on http://json.org. Revision History 4.5.0 (still under development) Black-list support for excluding fields. Submitted by @sgandon Pretty-print with support for options. Submitted by @dtracers 4.4.0 JsonReader.jsonToMaps() API is no longer recommended (not yet deprecated). These can easily be turned into JsonReader.jsonToJava(json, [(JsonReader.USE_MAPS):true]). The one difference is the return value will match the return value type of the JSON (not always be a Map). 4.3.1 Enhancement: Skip null fields. When this flag is set on the JsonWriter optional arguments, fields which have a null value are not written in the JSON output. 4.3.0 Double / Float Nan and inifinity are now written as null, per RFC 4627 JsonReader.jsonToJava() can now be used to read input into Maps only (as opposed to attempting to create specific Java objects. Using this API allows the return value to support an array [], object, string, double, long, null as opposed to the JsonReader.jsonToMaps() API which forces the return value to be a Map. May deprecate JsonReader.jsonToMaps() in the future. 4.2.1 Bug fix: The error message showing any parsing errors put the first character of the message at the end of the message (off by one error on a ring buffer). Parsing exceptions always include the line number and column number (there were a couple of places in the code that did not do this). 4.2.0 Enhancement: In Map of Maps mode, all fields are kept, even if they start with @. In the past fields starting with @ were skipped. Ehancement: No longer throws ClassNotFound exception when the class associated to the @type is not found. Instead it returns a LinkedHashMap, which works well in Map of Maps mode. In Object mode, it may work if the field can have the Map set into it, otherwise an error will be thrown indicating that a Map cannot be set into field of type 'x'. Bug fix: In Map of Maps mode, Object[] were being added with an @items field. The object[] is now stored directly in the field holding it. If an Object[] is 'pointed to' (re-used), then it will be written as an object { } with an @id identifying the object, and an @items field containing the array's elements. 4.1.10 Enhancement: Java's EnumSet support added (submitted by @francisu) without need for using custom instantiator. Enhancement: Added support for additional instantiator, ClassFactory2 that takes the Class (c) and the JsonObject which the instance will be filled from. Useful for custom readers. 4.1.9 Bug fix: When writing a Map that has all String keys, the keys were not being escaped for quotes (UTF-8 characters in general). 4.1.8 Bug fix: 4.1.7 skipped ALL transient fields. If a transient field is listed in the field specifiers map, then it must be traced. 4.1.7 Bug fix: Transient fields are skipped during reference tracing. (fix submitted by Francis Upton, @francisu). Some transient fields could cause an exception to be thrown when being trace for references, stopping serialization. 4.1.6 Better support for primitive output when 'never show type' is set. (submitted by @KaiHufenbach) 4.1.5 Tests updated to use Groovy 2.4.4 Deserialization updated to handle objects where the referencing class uses an Object pointer and writes the value out as single primitive value, using the 'value' key. (submitted by @KaiHufenbach) pom filed updated to use a maven bundle plugin (Apache Felix) to generate OSGI headers (submitted by @KaiHufenbach) 4.1.4 Bug fix: Custom readers will now always have the .target field set if a JsonObject is passed to them. The custom reader's read() method was being called before the .target field was set on the JsonObject. 4.1.3 Made JsonReader / JsonWriter getObjectsReferenced() API public (allows custom reader / writers access to these) Resolver.createJavaObjectInstance(), used to create the correct Java object for a JsonObject peer, no longer calls the .read() API for objects's with custom readers. 4.1.2 All objects in the graph are 'traced' (JsonWriter.traceReferences) except references. The code used to not trace fields on objects that were handled by custom writers. 4.1.1 JDK 1.6 support - Use of ReflectiveOperationException changed to InvocationTargetException. 4.1.0 JDK 1.6 support restored. Keeping 1.6 support for Android developers. Submitted by @kkalisz 4.0.1 To prevent @type from being written, set the optional argument JsonWriter.TYPE = false. This is generally not recommended, as the output JSON may not be able to be re-read into Java objects. However, if the JSON is destined for a non-Java system, this can be useful. 4.0.0 Custom readers / writers are set now per-instance of JsonReader / JsonWriter, not static. This allows using different customization for cloning, for example, than for serialization to client. JsonReader.jsonToJava() and JsonReader.jsonToMaps() now allow an InputStream to be used. Custom readers / writers can now be set all-at-once through the optional 'args' Map. 'notCustom' readers / writers can now be set all-at-once through the optional 'args' Map. The removeReader(), removeWriter(), removeNotCustomReader(), and removeNotCustomWriter() APIs have been removed since customizers are set per-instance. 3.3.2 Added new JsonObject.isReference() API which will return 'true' if the JsonObject is currently representing a reference @ref Added new JsonReader.getRefTarget(jsonObject) API which will follow the @ref links until it resolves to the referenced (target) instance. Added new JsonReader() constructor that only takes the args (Map). It is expected that you will call JsonReader.jsonObjectsToJava(rootJsonObject) which will parse the passed in JsonObject graph. Added new JsonReader.removeReader() API to remove a custom reader association to a given class. Added new JsonWriter.removeWriter() API to remove a custom writer association to a given class. Added new JsonReader.removeNotCustomReader() API to remove a not custom reader - if a notCustom() reader has been added (preventing inherited object from using custom reader), the association can be eliminated using this API. Added new JsonWriter.removeNotCustomWriter() API to remove a not custom writer - if a notCustom() writer has been added (preventing inherited object from using custom writer), the association can be eliminated using this API. 3.3.1 Re-entrancy issue fixed. If a CustomReader (or CustomWriter) instantiated another copy of JsonReader or JsonWriter (indirectly, through recursion, for example), the 2nd instance of JsonReader or JsonWriter would clobber the ThreadLocal values inside JsonReader / JsonWriter. Those ThreadLocal values have been removed and converted to per-instance member variables. 3.3.0 Consolidate all 3.2.x changes Last snippet read no longer shows 'boxes' for unused internal buffer characters. JsonWriter - moved reference check 'up' to writeImpl() so that each specific 'write' routine did not have to test / call writeOptionalReference(). If you have a custom reader that does not bother to resolve references from 'deeper' internal JsonObject maps, an exception will no longer be thrown. It is OK for a custom reader not to 'care' about internal deeper fields if it wants to ignore them. 3.2.3 Cache Map's for custom reader's updated to be ConcurrentMap instead of Map. 3.2.2 JsonCustomReaderEx added, which passes the 'args' Map through to the custom reader. Both JsonCustomReaderEx and JsonCustomWriterEx have a Map as the last argument in their single method that is implemented by the custom reader / writer. This Map is the same as the 'args' Ma passed into to the JsonReader / JsonWriter, with the added JSON_READER or JSON_WRITER key and associated value of the calling JsonReader / JsonWriter instance. 3.2.1 Made Support.getWriter() method public static so that CustomWriters can easily use it Changed JsonCustomWriterEx to no longer inherit from JsonCustomWriter and instead added a common parent (JsonCustomWriterBase). This allows only one method to be overridden to create a JsonCustomWriterEx. 3.2.0 New JsonCustomWriterEx interface which adds the JsonWriter access to the implementing class so that it can call back and use jsonWriter.writeImpl() API. Change JsonWriter.writeImpl() from protected to public 3.1.3 Performance improvement: No longer using .classForName() inside JsonObject to determine isMap() or isCollection(). Reading JSON into Map of Maps mode significantly faster. 3.1.2 Bug fix: Version 3.1.1 introduced a bug where it would always run as though it was in JSON to Java mode always (as opposed to supporting JSON to Maps). This has been fixed. 3.1.1 JsonReader.UNKNOWN_OBJECT added as an option to indicate what to do when an unknown object is encountered in the JSON. Default is a Map will be created. However, you can set this argument to a String class name to instantiate, or set it to false to force an exception to be thrown. 3.1.0 New Feature: Short class names to reduce the size of the output JSON. This allows you to, for example, substitute java.util.HashMap with hmap so that it will appear in the JSON as ""@type"":""hmap"". Pass the substitution map to the JsonWriter (or reader) as an entry in the args Map with the key of JsonWriter.TYPE_NAME_MAP and the value as a Map instance with String class names as the keys and short-names as the values. The same map can be passed to the JsonReader and it will properly read the substituted types. New Feature: Short meta-key names to reduce the size of the output JSON. The @type key name will be shortened to @t, @id => @i, @ref => @r, @keys => @k, @items => @e. Put a key in the args Map as JsonWriter.SHORT_META_KEYS with the value true. 3.0.2 Bug fix: Using a CustomReader in a Collection with at least two identical elements causes an exception (submitted by @KaiHufenbach). 3.0.1 Added new flag JsonWriter.WRITE_LONGS_AS_STRINGS which forces long/Long's to be written as Strings. When sending JSON data to a Javascript, longs can lose precision because Javascript only maintains 53-bits of info (Javascript uses IEEE 754 double for numbers). The precision is lost due to some of the bits used for maintaining an exponent. With this flag set, longs will be sent as Strings, however, on return back to a Java server, json-io allows Strings to be set right back into long (fields, array elements, collections, etc.) 3.0.0 Performance improvement: caching the custom readers and writes associated to given classes. Ease of use: json-io throws a JsonIoException (unchecked) instead of checked exception IOException. This allows more flexibility in terms of error handling for the user. Code cleanup: Moved reflection related code from JsonReader into separate MetaUtils class. Code cleanup: Moved FastPushbackReader from JsonReader into separate class. Code cleanup: Moved JSON parsing code from JsonReader into separate JsonParser class. Code cleanup: Moved built-in readers from JsonReader to separate Readers class. Code cleanup: Moved resolver code (marshals map of maps to Java instances) into separate Resolver classes. 2.9.4 JsonReader.newInstance() API made public Bumped version of junit from 4.11 to 4.12 Added additional tests to ensure that null and """" can be properly assigned to primitive values (matching behavior of java-util's Converter.convert() API). 2.9.3 Bug fix: When writing a Map with JSON primitive keys (String, Long, Double, or Boolean), a ClassCastException was being thrown if the type was Long, Double, or Boolean. This has been fixed with test added. 2.9.2 Android: Rearranged [:.] to [.:] in regular expressions for Android compatibility. Technically, it should not matter, but [:.] was causing java.util.regex.PatternSyntaxException: Syntax error U_ILLEGAL_ARGUMENT_ERROR on Android JVM. Bug fix: When using the JsonWriter arguments Map with FIELD_SPECIFIERS, if you specified a field that was transient, it was not serialized. This has been corrected. When you specify the field list for a given class, the Map can contain any non-static fields in the class, including transient fields. All JUnit tests converted to Groovy. 2.9.1 Bug fix: Parameterized types are only internally stamped onto generic Maps (Maps read with no @type) if the field that points to the Map is a template variable or it has template arguments. Performance optimization: tracing references specially handles Collection and Map. By avoiding internal structures, the reference trace is much faster. 2.9.0 Unmodifiable Collections and Maps can now be serialized. Added tests to ensure that JsonReader.jsonToMaps() coerces the RHS values when logical primitives, to the optional associated @type's fields. More tests and improved code-coverage. 2.8.1 Bug fix: JsonReader.jsonToMaps() API was incorrectly attempting to instantiate peer objects (specified by ""@type"" field in the JSON) when in 'maps' mode. This made JsonReader.jsonToMaps() fail if all referenced class names did not exist in the JVM. This has been fixed. Minor Javadoc cleanup (Daniel Darabos @darabos) Began migration of tests from one monolithic Java class (TestJsonReaderWriter) to individual Groovy test classes. 2.8.0 Additional attempt to instantiate classes via sun.misc.Unsafe added (optional must be turned on by calling JsonReader.setUseUnsafe(true)). json-io already tries all constructors (private or public) with varying arguments, etc. If this fails and unsafe is true, it will try sun.misc.Unsafe.allocateInstance() which effectively does a C-style malloc(). This is OK, because the rest of JsonReader fills in the member variables from the serialized content. (Submitted by @KaiHufenbach). 2.7.6 Performance optimizations. Use of switch statement instead of if-else chains. JDK 1.7 for source code and target JVM. 2.7.5 Bug fix: ArrayIndexOutOfBounds could still occur when serializing a class with multiple Templated fields. The exception has been fixed. 2.7.4 Bug fix: ArrayIndexOutOfBounds exception occurring when serializing non-static inner class with nested template parameters. JsonReader was incorrectly passing on the 'this$0' field for further template argument processing when it should not have. 2.7.3 JsonReader executes faster (more efficiently manages internal 'snippet' buffer and last line and column read.) Improved date parsing: day of week support (long or short name), days with suffix (3rd, 25th, etc.), Java's default .toString() output for Date now parses, full time zone support, extra whitespace allowed within the date string. Added ability to have custom JSON writers for interfaces (submitted by @KaiHufenbach). 2.7.2 When writing JSON, less memory is used to manage referenced objects. JsonWriter requires a smaller memory foot print during writing. New option available to JsonWriter that allows you to force enums to not write private variables. First you can make them transient. However, if you do not own the code or cannot change it, you can set the JsonWriter.getArgs().put(ENUM_PUBLIC_ONLY, true), and then only public fields on enums will be emitted. 2.7.1 BigDecimal and BigInteger are now always written as a primitive (immutable, non-referenced) value. This uniformizes their output. 2.7.0 Updated to support JSON root of String, Integer, Floating point, and Boolean, per the updated JSON RFP. Example, the String ""football"" is considered valid JSON. The JsonReader.readObject() API and JsonReader.jsonToJava() will return a String in this case. The JsonReader.jsonToMaps() API will still return a Map (JsonObject), and the @items key will contain an Object[] with the single value (String, Integer, Double, Boolean) in it. When a Java Map has only String keys in it, json-io will use the JSON object keys directly and associate the values to the keys as expected. For example, the Map ['Football':true] would be written {""Football"":true}. However, if the keys are non-Strings, then Maps will be written as a JSON object with {""@keys"":[...], ""@items"":[...]}, where @keys is an array [] of all the keys, and the @items is an array [] of all the values. Entry 0 of @keys matches with Entry 0 in the @items array, and so on. Thanks for Christian Reuschling for making the request and then supplying the implementation. Change some APIs from private to protected to allow for subclasses to more easily override the default behavior. 2.6.1 Bug fix: An internal Map that kept meta-information about a Java Class, changed to ConcurrentHashMap from HashMap. 2.6.0 Added support for specifying which fields on a class will be serialized. Use the JsonWriter.FIELD_SPECIFIERS key and assign the value to a Map<Class, List<String>>, where the keys of the Map are classes (e.g. Bingo.class) and the values are List<String>, which indicates the fields to serialize for the class. This provides a way to reduce the number of fields written for a given class. For example, you may encounter a 3rd Party class which fails to serialize because it has an oddball field like a ClassLoader reference as a non-static, non-transient field. You may not have access to the source code to mark the field as transient. In this case, add the appropriate entries in the FIELD_SPECIFIERS map. Voila, problem solved. Use the JsonWriter API that takes optionalArgs Map. The key for this Map is JsonWriter.FIELD_SPECIFIER and the value is Map<Class, List<String>>. 2.5.2 java.net.URL can now be used as a constructor argument. The reader was throwing an exception instantiating a constructor with a URL parameter. java.lang.Object parameters in constructor arguments are now tried with both null and new Object() now. 2.5.1 Fixed a bug (introduced in 2.5.0) in the processing of a Map that has a Collection as a key. 2.5.0 New 'Pretty-Print' option available. If the 'args' Map passed to JsonWriter.objectToJson(o, args) contains the key JsonWriter.PRETTY_PRINT and the value 'true' (boolean or String), the JsonWriter output will be formatted in a nice human readable format. Convert a JSON String to Pretty-Print format using JsonWriter.formatJson(String json). A String will be returned with the JSON formatted in a nice, human readable format. If a Field contains Parameterized types (e.g., Map<String, Set<Long>>, and so on), JsonReader will use those fields to process objects deep within Maps, Collections, etc. and still create the proper Java class. 2.4.5 Allow """" to be set into Date field, setting the Date field (or Date array element) as null. 2.4.4 Allow """" to be set into BigInteger or BigDecimal when return value is Map (JsonObject). """" to non-String fields will be null, except for primitives and primitive wrappers, that will result in JVM default value. 2.4.2 Allow """" to be set into non-String fields, when doing so, null is set on Object type fields; on primitive fields, the JVM default value is set. This is for when converting JSON to Java objects directly. 2.4.1 Added support to allow primitives and String to be assigned to abstract / interface / base type field on an object (Serializable, Comparable, Object, etc.). Primitives can now be 'set' into these fields, without any additional type information. 2.4.0 Primitives can be set from Strings Strings can be set from primitives BigDecimal and BigInteger can be set from primitives, Strings, BigDecimal, or BigInteger 2.3.0 Maps and Collections (Lists, Set, etc.) can be read in, even when there are no @keys or @items as would come from a Javascript client. json-io will now use the generic info on a Map<Foo, Bar> or Collection<Foo> object's field when the @type information is not included. json-io will then know to create Foo instances, Bar instances, etc. within the Collection or Map. All parsing error messages now output the last 100 characters read, making it easier to locate the problem in JSON text. Furthermore, line and column number are now included (before it was a single position number). This allows you to immediately find the offending location. You can now force @type to be written (not recommended) by putting the JsonWriter.TYPE key in the JsonWriter args map, and assigning the associated value to true. 2.2.32 Date/Time format can be customized when writing JSON output. New optional Map args parameter added to main API of JsonWriter that specifies additional parameters for JsonWriter. Set the key to JsonWriter.DATE_FORMAT and the value to a SimpleDateFormat string. Two ISO formats are available for convenience as constants on JsonWriter, JsonWriter.ISO_DATE_FORMAT and JsonWriter.ISO_DATE_TIME_FORMAT. JsonReader updated to read many different date/time formats. When JsonReader encounters a class that cannot be constructed, you can associate a ClassFactory to the class, so that then the un-instantiable class is encountered, your factory class will be called to create the class. New API: JsonReader.assignInstantiator(Class c, ClassFactory factory) 2.2.31 Adds ability to instantiate a wider range of constructors. This was done by attempting construction with both null and non-null values for many common class types (Collections, String, Date, Timezone, etc.) 2.2.30 java.sql.Date when read in, was instantiated as a java.util.Date. This has been corrected. 2.2.29 First official release through Maven Central by John DeRegnaucourt Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jdereg/json-io"	"Convert Java to JSON. Convert JSON to Java. Pretty print JSON. Java JSON serializer."	"true"
"JSON"	"LoganSquare"	"https://github.com/bluelinelabs/LoganSquare"	"JSON parsing and serializing library based on Jackson's streaming API. Outperforms GSON & Jackson's library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2386"	"110"	"231"	"GitHub - bluelinelabs/LoganSquare: Screaming fast JSON parsing and serialization library for Android. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 110 Star 2,386 Fork 231 bluelinelabs/LoganSquare Code Issues 29 Pull requests 6 Wiki Pulse Graphs Screaming fast JSON parsing and serialization library for Android. 142 commits 5 branches 18 releases 8 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development Switch branches/tags Branches Tags development feature/generics feature/loader_optimizations master revert-139-master Nothing to show v1.3.4 v1.3.1 v1.2.9 v1.2.6 v1.2.5 v.1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.1.0 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.1 1.3.7 1.3.6 1.3.5 Nothing to show New pull request Latest commit 6c5ec52 Mar 10, 2016 EricKuck Version bump Permalink Failed to load latest commit information. BenchmarkDemo Version bump Mar 10, 2016 core Fixed issue with the default date converter reusing date formatters a… Mar 10, 2016 docs Merge branch 'development' May 16, 2015 gradle/wrapper Gradle update Nov 28, 2015 processor Merge branch 'master' into development Mar 10, 2016 .gitignore first commit Feb 16, 2015 .travis.yml Added missing script line Nov 28, 2015 CHANGELOG.md Documentation updates May 15, 2015 LICENSE.txt first commit Feb 17, 2015 README.md Version bump Mar 10, 2016 build.gradle Version bump Mar 10, 2016 gradlew Gradle update Nov 28, 2015 gradlew.bat Gradle update Nov 28, 2015 settings.gradle first commit Feb 17, 2015 README.md LoganSquare The fastest JSON parsing and serializing library available for Android. Based on Jackson's streaming API, LoganSquare is able to consistently outperform GSON and Jackson's Databind library by 400% or more1. By relying on compile-time annotation processing to generate code, you know that your JSON will parse and serialize faster than any other method available. By using this library, you'll be able to utilize the power of Jackson's streaming API without having to code tedius, low-level code involving JsonParsers or JsonGenerators. Instead, just annotate your model objects as a @JsonObject and your fields as @JsonFields and we'll do the heavy lifting for you. Don't believe it could improve upon Jackson Databind's or GSON's performance that much? Well, then check out the nifty graphs below for yourself. Not convinced? Feel free to build and run the BenchmarkDemo app included in this repository. 1 Note: Our ""400% or more"" performance improvement metric was determined using ART. While LoganSquare still comes out on top with Dalvik, it seems as though the comparison is much closer. The benchmarks shown are actual screenshots taken from a 2nd gen Moto X. Download Note that Gradle is the only supported build configuration for LoganSquare. To add the library to your app's build.gradle file. buildscript {     repositories {         jcenter()     }     dependencies {         classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'     } } apply plugin: 'com.neenbedankt.android-apt'  dependencies {     apt 'com.bluelinelabs:logansquare-compiler:1.3.6'     compile 'com.bluelinelabs:logansquare:1.3.6' }  For the curious, the buildscript and apply plugin lines add the apt plugin, which is what allows us to do compile-time annotation processing. The first dependency is what tells Gradle to process your JSON annotations, and the second dependency is our tiny 19kb runtime library that interfaces with the generated code for you. Usage Using LoganSquare is about as easy as it gets. Here are a few docs to get you started: Creating your models Parsing from JSON Serializing to JSON Supporting custom types Proguard Like all libraries that generate dynamic code, Proguard might think some classes are unused and remove them. To prevent this, the following lines can be added to your proguard config file. -keep class com.bluelinelabs.logansquare.** { *; } -keep @com.bluelinelabs.logansquare.annotation.JsonObject class * -keep class **$$JsonObjectMapper { *; }  Why LoganSquare? We're BlueLine Labs, a mobile app development company based in Chicago. We love this city so much that we named our company after the blue line of the iconic 'L.' And what's one of the most popular stops on the blue line? Well, that would be Logan Square of course. Does it have anything to do with JSON? Nope, but we're okay with that. Props Jackson's streaming API for being a super-fast, awesome base for this project. Instagram's ig-json-parser for giving us the idea for this project. Jake Wharton's Butterknife for being a great reference for annotation processing and code generation. License Copyright 2015 BlueLine Labs, Inc.  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at     http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bluelinelabs/LoganSquare"	"JSON parsing and serializing library based on Jackson's streaming API. Outperforms GSON & Jackson's library."	"true"
"JSON Processing"	"fastjson"	"https://github.com/alibaba/fastjson"	"Very fast processor with no additional dependencies and full data binding."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5696"	"737"	"2248"	"GitHub - alibaba/fastjson: A fast JSON parser/generator for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 737 Star 5,696 Fork 2,248 alibaba/fastjson Code Issues 74 Pull requests 2 Wiki Pulse Graphs 🚄 A fast JSON parser/generator for Java https://github.com/alibaba/fastjson/wiki 1,709 commits 12 branches 42 releases 41 contributors Java 99.9% Other 0.1% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1.33-android 1.1.42_android 1.1.43-android 1.1.44-android 1.1.44 1.1.45-android 1.1.45 1.1.46-android 1.1.46 android dev-1.2.0 master Nothing to show 1.2.13 1.2.12 1.2.11_release 1.2.10 1.2.9 1.2.8 1.2.7 1.2.6 1.2.4 1.2.2 1.2.1 1.2.0 1.1.52.android 1.1.51-android 1.1.50-android 1.1.49-android 1.1.48-android 1.1.47-android 1.1.46 1.1.46-android 1.1.45 1.1.45.android 1.1.44 1.1.44.android 1.1.43 1.1.43.android 1.1.42 1.1.42.android 1.1.36 1.1.35 1.1.34 1.1.34.android 1.1.33 1.1.32 1.1.31 1.1.27 1.1.26 1.1.25 1.1.23 1.1.22 1.1.21 1.1.20 Nothing to show New pull request Latest commit a931f0d Jul 15, 2016 wenshao json path support deepscan, such as '$..id'. issue #725 Permalink Failed to load latest commit information. src json path support deepscan, such as '$..id'. issue #725 Jul 15, 2016 .gitignore add testcase Apr 4, 2016 .travis.yml add travis-ci Apr 16, 2016 README.md Update README.md May 22, 2016 license.txt Update license year range to 2016 Jan 18, 2016 logo.jpg add logo Jul 9, 2013 pom.xml 1.2.14-SNAPSHOT Jun 28, 2016 rfc4627.txt change mode Apr 27, 2013 vtune.sh perf tunning Jan 11, 2013 x.sh bug fixed Feb 27, 2013 README.md fastjson Fastjson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object. Fastjson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of. Fastjson Goals Provide best performance in server side and android client. Provide simple toJSONString() and parseObject() methods to convert Java objects to JSON and vice-versa Allow pre-existing unmodifiable objects to be converted to and from JSON Extensive support of Java Generics Allow custom representations for objects Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types) Documentation Documentation Home Frequently Asked Questions Benchmark https://github.com/eishay/jvm-serializers/wiki Download http://repo1.maven.org/maven2/com/alibaba/fastjson/ Maven <dependency>     <groupId>com.alibaba</groupId>     <artifactId>fastjson</artifactId>     <version>1.2.12</version> </dependency> <dependency>     <groupId>com.alibaba</groupId>     <artifactId>fastjson</artifactId>     <version>1.1.52.android</version> </dependency> License Fastjson is released under the Apache 2.0 license. Copyright 1999-2016 Alibaba Group Holding Ltd.  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alibaba/fastjson"	"Very fast processor with no additional dependencies and full data binding."	"true"
"JSON Processing"	"Jolt"	"https://github.com/bazaarvoice/jolt"	"JSON to JSON transformation tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"179"	"33"	"51"	"GitHub - bazaarvoice/jolt: JSON to JSON transformation library written in Java. Skip to content Personal Open source Business Explore Join GitHub Sign in Pricing Blog Support Search GitHub This repository Watch 33 Star 179 Fork 51 bazaarvoice/jolt Code Issues 39 Pull requests 2 Pulse Graphs JSON to JSON transformation library written in Java. http://bazaarvoice.github.io/jolt/ 327 commits 2 branches 20 releases Fetching contributors Java 99.9% Shell 0.1% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show jolt-0.0.22 jolt-0.0.21 jolt-0.0.20 jolt-0.0.19 jolt-0.0.18 jolt-0.0.17 jolt-0.0.16 jolt-0.0.15 jolt-0.0.14 jolt-0.0.13 jolt-0.0.12 jolt-0.0.11 jolt-0.0.10 jolt-0.0.9 jolt-0.0.8 jolt-0.0.7 jolt-0.0.6 jolt-0.0.5 jolt-0.0.4 jolt-0.0.3 Nothing to show New pull request Latest commit d150f2e Jul 14, 2016 jenkins branch admin -prepare for next development iteration Permalink Failed to load latest commit information. bin Update Java Version and Dependencies Mar 8, 2015 cli branch admin -prepare for next development iteration Jul 14, 2016 complete branch admin -prepare for next development iteration Jul 14, 2016 guice branch admin -prepare for next development iteration Jul 14, 2016 jolt-core branch admin -prepare for next development iteration Jul 14, 2016 json-utils branch admin -prepare for next development iteration Jul 14, 2016 parent branch admin -prepare for next development iteration Jul 14, 2016 .gitignore Update Java Version and Dependencies Mar 8, 2015 .travis.yml implemented function feature Jul 6, 2016 LICENSE Update license Apr 15, 2014 OWNERS Added an OWNERS file Dec 1, 2015 README.md Doc and version updates Dec 27, 2015 contributing.md Updated docs. Jun 19, 2013 gettingStarted.md Doc and version updates Dec 27, 2015 pom.xml branch admin -prepare for next development iteration Jul 14, 2016 README.md Jolt JSON to JSON transformation library written in Java where the ""specification"" for the transform is itself a JSON document. Useful For Transforming JSON data from ElasticSearch, MongoDb, Cassandra, etc before sending it off to the world Extracting data from a large JSON documents for your own consumption Table of Contents 1 Overview 2 Documentation 3 Shiftr Transform DSL 4 Demo 5 Getting Started 6 Getting Transform Help 7 Why Jolt Exists 8 Alternatives 9 Performance 10 CLI 11 Code Coverage 12 Release Notes Overview Jolt : provides a set of transforms, that can be ""chained"" together to form the overall JSON to JSON transform. focuses on transforming the structure of your JSON data, not manipulating specific values The idea being: use Jolt to get most of the structure right, then write code to fix values consumes and produces ""hydrated"" JSON : in-memory tree of Maps, Lists, Strings, etc. use Jackson (or whatever) to serialize and deserialize the JSON text Stock Transforms The Stock transforms are: shift       : copy data from the input tree and put it the output tree default     : apply default values to the tree remove      : remove data from the tree sort        : sort the Map key values alphabetically ( for debugging and human readability ) cardinality : ""fix"" the cardinality of input data.  Eg, the ""urls"" element is usually a List, but if there is only one, then it is a String  Each transform has it's own DSL (Domain Specific Language) in order to facilitate it's narrow job. Currently, all the Stock transforms just effect the ""structure"" of the data. To do data manipulation, you will need to write Java code. If you write your Java ""data manipulation"" code to implement the Transform interface, then you can insert your code in the transform chain. The out-of-the-box Jolt transforms should be able to do most of your structural transformation, with custom Java Transforms implementing your data manipulation. Documentation Jolt Slide Deck : covers motivation, development, and transforms. Javadoc explaining each transform DSL : shift default remove cardinality sort full qualified Java ClassName : Class implements the Transform or ContextualTransform interfaces, and can optionally be SpecDriven (marker interface) Transform interface SpecDriven where the ""input"" is ""hydrated"" Java version of your JSON Data Running a Jolt transform means creating an instance of Chainr with a list of transforms. The JSON spec for Chainr looks like : unit test. The Java side looks like : Chainr chainr = JsonUtils.classpathToList( ""/path/to/chainr/spec.json"" );  Object input = elasticSearchHit.getSource(); // ElasticSearch already returns hydrated JSon  Object output = chainr.transform( input );  return output;  Shiftr Transform DSL The Shiftr transform generally does most of the ""heavy lifting"" in the transform chain. To see the Shiftr DSL in action, please look at our unit tests (shiftr tests) for nice bite sized transform examples, and read the extensive Shiftr javadoc. Our unit tests follow the pattern : {     ""input"": {         // sample input     },      ""spec"": {         // transform spec     },      ""expected"": {         // what the output of the transform looks like     } }  We read in ""input"", apply the ""spec"", and Diffy it against the ""expected"". To learn the Shiftr DSL, examine ""input"" and ""output"" json, get an understanding of how data is moving, and then look at the transform spec to see how it facilitates the transform. For reference, this was the very first test we wrote. Demo There is a demo available at jolt-demo.appspot.com. You can paste in JSON input data and a Spec, and it will post the data to server and run the transform. Note it is hosted on a free Google App Engine instance, so it may take a minute to spin up. it validates in input JSON and spec client side. Getting Started Getting started code wise has it's own doc. Getting Transform Help If you can't get a transform working and you need help, create and Issue in Jolt (for now). Make sure you include what your ""input"" is, and what you want your ""output"" to be. Why Jolt Exists Aside from writing your own custom code to do a transform, there are two general approaches to doing a JSON to JSON transforms in Java. 1) JSON -> XML -> XSLT or STX -> XML -> JSON Aside from being a Rube Goldberg approach, XSLT is more complicated than Jolt because it is trying to do the whole transform with a single DSL. 2) Write a Template (Velocity, FreeMarker, etc) that take hydrated JSON input and write textual JSON output With this approach you are working from the output format backwards to the input, which is complex for any non-trivial transform. Eg, the structure of your template will be dictated by the output JSON format, and you will end up coding a parallel tree walk of the input data and the output format in your template. Jolt works forward from the input data to the output format which is simpler, and it does the parallel tree walk for you. Alternatives Being in the Java JSON processing ""space"", here are some other interesting JSON manipulation tools to look at / consider : jq - Awesome command line tool to extract data from JSON files (use it all the time, available via brew) JsonPath - Java : Extract data from JSON using XPATH like syntax. JsonSurfer - Java : Streaming JsonPath processor dedicated to processing big and complicated JSON data. Performance The primary goal of Jolt was to improve ""developer speed"" by providing the ability to have a declarative rather than imperative transforms. That said, Jolt should have a better runtime than the alternatives listed above. Work has been done to make the stock Jolt transforms fast: Transforms can be initialized once with their spec, and re-used many times in a multi-threaded environment. We reuse initialized Jolt transforms to service multiple web requests from a DropWizard service. ""*"" wildcard logic was redone to reduce the use of Regex in the common case, which was a dramatic speed improvement. The parallel tree walk performed by Shiftr was optimized. Two things to be aware of : Jolt is not ""stream"" based, so if you have a very large Json document to transform you need to have enough memory to hold it. The transform process will create and discard a lot of objects, so the garbage collector will have work to do. Jolt CLI Jolt Transforms and tools can be run from the command line. Command line interface doc here. Code Coverage For the moment we have Cobertura configured in our poms. mvn cobertura:cobertura open jolt-core/target/site/cobertura/index.html  Currently, for the jolt-core artifact, code coverage is at 89% line, and 83% branch. Release Notes Versions and Release Notes available here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bazaarvoice/jolt"	"JSON to JSON transformation tool."	"true"
"JSON Processing"	"JsonPath"	"https://github.com/jayway/JsonPath"	"Extract data from JSON using XPATH like syntax."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"991"	"94"	"277"	"GitHub - jayway/JsonPath: Java JsonPath implementation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 94 Star 991 Fork 277 jayway/JsonPath Code Issues 42 Pull requests 3 Pulse Graphs Java JsonPath implementation 679 commits 2 branches 17 releases 27 contributors Java 96.4% HTML 2.2% Other 1.4% Java HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master production Nothing to show json-path-parent-0.8.1 json-path-parent-0.8.0 json-path-parent-0.5.6 json-path-parent-0.5.5 json-path-parent-0.5.4 json-path-parent-0.5.3 json-path-parent-0.5.2 json-path-parent-0.5.1 json-path-parent-0.5.0 json-path-2.1.0 json-path-2.0.0 json-path-1.2.0 json-path-1.1.0 json-path-1.0.0 json-path-0.9.1 json-path-0.9.0 2.2.0 Nothing to show New pull request Latest commit c2c1686 Jul 7, 2016 kallestenflo committed on GitHub Merge pull request #244 from jmlamare/master … Jettison Integration Permalink Failed to load latest commit information. gradle update Gradle wrapper and shadow plugin Feb 12, 2016 json-path-assert Get rid of Java 7 dependencies May 29, 2016 json-path-web-test Added JsonOrgJsonProvider. Nov 20, 2015 json-path Jettison Integration Jun 30, 2016 .gitignore add Eclipse build directory to .gitignore Aug 13, 2015 .travis.yml build and test with Java 7, cache Gradle home between executions Nov 5, 2015 LICENSE initial commit Jan 24, 2011 Procfile Fixed Heroku proc file. Mar 19, 2015 README.md Update README.md Feb 29, 2016 build.gradle Add support for Jettison Jun 30, 2016 changelog.md Prepared release 2.2.0 Feb 29, 2016 gradlew update Gradle wrapper to 2.8 Nov 5, 2015 gradlew.bat update Gradle wrapper and shadow plugin Feb 12, 2016 jsonpath.png improvements Feb 7, 2011 settings.gradle Gradle build migration. Oct 3, 2014 system.properties Need Java 1.7 for Heroku web app. Sep 17, 2014 README.md Jayway JsonPath A Java DSL for reading JSON documents. Jayway JsonPath is a Java port of Stefan Goessner JsonPath implementation. News 29 Feb 2016 - Released JsonPath 2.2.0 22 Nov 2015 - Released JsonPath 2.1.0 19 Mar 2015 - Released JsonPath 2.0.0 11 Nov 2014 - Released JsonPath 1.2.0 01 Oct 2014 - Released JsonPath 1.1.0 26 Sep 2014 - Released JsonPath 1.0.0 For details see change log. Getting Started JsonPath is available at the Central Maven Repository. Maven users add this to your POM. <dependency>     <groupId>com.jayway.jsonpath</groupId>     <artifactId>json-path</artifactId>     <version>2.2.0</version> </dependency> If you need help ask questions at the google group. JsonPath expressions always refer to a JSON structure in the same way as XPath expression are used in combination with an XML document. The ""root member object"" in JsonPath is always referred to as $ regardless if it is an object or array. JsonPath expressions can use the dot–notation $.store.book[0].title or the bracket–notation $['store']['book'][0]['title'] Operators Operator Description $ The root element to query. This starts all path expressions. @ The current node being processed by a filter predicate. * Wildcard. Available anywhere a name or numeric are required. .. Deep scan. Available anywhere a name is required. .<name> Dot-notated child ['<name>' (, '<name>')] Bracket-notated child or children [<number> (, <number>)] Array index or indexes [start:end] Array slice operator [?(<expression>)] Filter expression. Expression must evaluate to a boolean value. Functions Functions can be invoked at the tail end of a path - the input to a function is the output of the path expression. The function output is dictated by the function itself. Function Description Output min() Provides the min value of an array of numbers Double max() Provides the max value of an array of numbers Double avg() Provides the average value of an array of numbers Double stddev() Provides the standard deviation value of an array of numbers Double length() Provides the length of an array Integer Filter Operators Filters are logical expressions used to filter arrays. A typical filter would be [?(@.age > 18)] where @ represents the current item being processed. More complex filters can be created with logical operators && and ||. String literals must be enclosed by single or double quotes ([?(@.color == 'blue')] or [?(@.color == ""blue"")]). Operator Description == left is equal to right (note that 1 is not equal to '1') != left is not equal to right < left is less than right <= left is less or equal to right > left is greater than right >= left is greater than or equal to right =~ left matches regular expression [?(@.name =~ /foo.*?/i)] in left exists in right [?(@.size in ['S', 'M'])] nin left does not exists in right size size of left (array or string) should match right empty left (array or string) should be empty Path Examples Given the json {     ""store"": {         ""book"": [             {                 ""category"": ""reference"",                 ""author"": ""Nigel Rees"",                 ""title"": ""Sayings of the Century"",                 ""price"": 8.95             },             {                 ""category"": ""fiction"",                 ""author"": ""Evelyn Waugh"",                 ""title"": ""Sword of Honour"",                 ""price"": 12.99             },             {                 ""category"": ""fiction"",                 ""author"": ""Herman Melville"",                 ""title"": ""Moby Dick"",                 ""isbn"": ""0-553-21311-3"",                 ""price"": 8.99             },             {                 ""category"": ""fiction"",                 ""author"": ""J. R. R. Tolkien"",                 ""title"": ""The Lord of the Rings"",                 ""isbn"": ""0-395-19395-8"",                 ""price"": 22.99             }         ],         ""bicycle"": {             ""color"": ""red"",             ""price"": 19.95         }     },     ""expensive"": 10 } JsonPath (click link to try) Result $.store.book[*].author The authors of all books $..author All authors $.store.* All things, both books and bicycles $.store..price The price of everything $..book[2] The third book $..book[0,1] The first two books $..book[:2] All books from index 0 (inclusive) until index 2 (exclusive) $..book[1:2] All books from index 1 (inclusive) until index 2 (exclusive) $..book[-2:] Last two books $..book[2:] Book number two from tail $..book[?(@.isbn)] All books with an ISBN number $.store.book[?(@.price < 10)] All books in store cheaper than 10 $..book[?(@.price <= $['expensive'])] All books in store that are not ""expensive"" $..book[?(@.author =~ /.*REES/i)] All books matching regex (ignore case) $..* Give me every thing $..book.length() The number of books Reading a Document The simplest most straight forward way to use JsonPath is via the static read API. String json = ""..."";  List<String> authors = JsonPath.read(json, ""$.store.book[*].author""); If you only want to read once this is OK. In case you need to read an other path as well this is not the way to go since the document will be parsed every time you call JsonPath.read(...). To avoid the problem you can parse the json first. String json = ""...""; Object document = Configuration.defaultConfiguration().jsonProvider().parse(json);  String author0 = JsonPath.read(document, ""$.store.book[0].author""); String author1 = JsonPath.read(document, ""$.store.book[1].author""); JsonPath also provides a fluent API. This is also the most flexible one. String json = ""..."";  ReadContext ctx = JsonPath.parse(json);  List<String> authorsOfBooksWithISBN = ctx.read(""$.store.book[?(@.isbn)].author"");   List<Map<String, Object>> expensiveBooks = JsonPath                             .using(configuration)                             .parse(json)                             .read(""$.store.book[?(@.price > 10)]"", List.class); What is Returned When? When using JsonPath in java its important to know what type you expect in your result. JsonPath will automatically try to cast the result to the type expected by the invoker. //Will throw an java.lang.ClassCastException     List<String> list = JsonPath.parse(json).read(""$.store.book[0].author"")  //Works fine String author = JsonPath.parse(json).read(""$.store.book[0].author"") When evaluating a path you need to understand the concept of when a path is definite. A path is indefinite if it contains: .. - a deep scan operator ?(<expression>) - an expression [<number>, <number> (, <number>)] - multiple array indexes Indefinite paths always returns a list (as represented by current JsonProvider). By default a simple object mapper is provided by the MappingProvider SPI. This allows you to specify the return type you want and the MappingProvider will try to perform the mapping. In the example below mapping between Long and Date is demonstrated. String json = ""{\""date_as_long\"" : 1411455611975}"";  Date date = JsonPath.parse(json).read(""$['date_as_long']"", Date.class); If you configure JsonPath to use the JacksonMappingProvider you can even map your JsonPath output directly into POJO's. Book book = JsonPath.parse(json).read(""$.store.book[0]"", Book.class); Predicates There are three different ways to create filter predicates in JsonPath. Inline Predicates Inline predicates are the ones defined in the path. List<Map<String, Object>> books =  JsonPath.parse(json)                                      .read(""$.store.book[?(@.price < 10)]""); You can use && and || to combine multiple predicates [?(@.price < 10 && @.category == 'fiction')] , [?(@.category == 'reference' || @.price > 10)]. Filter Predicates Predicates can be built using the Filter API as shown below: import static com.jayway.jsonpath.JsonPath.parse; import static com.jayway.jsonpath.Criteria.where; import static com.jayway.jsonpath.Filter.filter; ... ...  Filter cheapFictionFilter = filter(    where(""category"").is(""fiction"").and(""price"").lte(10D) );  List<Map<String, Object>> books =      parse(json).read(""$.store.book[?]"", cheapFictionFilter);  Notice the placeholder ? for the filter in the path. When multiple filters are provided they are applied in order where the number of placeholders must match the number of provided filters. You can specify multiple predicate placeholders in one filter operation [?, ?], both predicates must match. Filters can also be combined with 'OR' and 'AND' Filter fooOrBar = filter(    where(""foo"").exists(true)).or(where(""bar"").exists(true) );  Filter fooAndBar = filter(    where(""foo"").exists(true)).and(where(""bar"").exists(true) ); Roll Your Own Third option is to implement your own predicates Predicate booksWithISBN = new Predicate() {     @Override     public boolean apply(PredicateContext ctx) {         return ctx.item(Map.class).containsKey(""isbn"");     } };  List<Map<String, Object>> books =     reader.read(""$.store.book[?].isbn"", List.class, booksWithISBN); Path vs Value In the Goessner implementation a JsonPath can return either Path or Value. Value is the default and what all the examples above are returning. If you rather have the path of the elements our query is hitting this can be acheived with an option. Configuration conf = Configuration.builder()    .options(Option.AS_PATH_LIST).build();  List<String> pathList = using(conf).parse(json).read(""$..author"");  assertThat(pathList).containsExactly(     ""$['store']['book'][0]['author']"",     ""$['store']['book'][1]['author']"",     ""$['store']['book'][2]['author']"",     ""$['store']['book'][3]['author']""); Tweaking Configuration Options When creating your Configuration there are a few option flags that can alter the default behaviour. DEFAULT_PATH_LEAF_TO_NULL This option makes JsonPath return null for missing leafs. Consider the following json [    {       ""name"" : ""john"",       ""gender"" : ""male""    },    {       ""name"" : ""ben""    } ] Configuration conf = Configuration.defaultConfiguration();  //Works fine String gender0 = JsonPath.using(conf).parse(json).read(""$[0]['gender']""); //PathNotFoundException thrown String gender1 = JsonPath.using(conf).parse(json).read(""$[1]['gender']"");  Configuration conf2 = conf.addOptions(Option.DEFAULT_PATH_LEAF_TO_NULL);  //Works fine String gender0 = JsonPath.using(conf2).parse(json).read(""$[0]['gender']""); //Works fine (null is returned) String gender1 = JsonPath.using(conf2).parse(json).read(""$[1]['gender']""); ALWAYS_RETURN_LIST This option configures JsonPath to return a list even when the path is definite. Configuration conf = Configuration.defaultConfiguration();  //Works fine List<String> genders0 = JsonPath.using(conf).parse(json).read(""$[0]['gender']""); //PathNotFoundException thrown List<String> genders1 = JsonPath.using(conf).parse(json).read(""$[1]['gender']""); SUPPRESS_EXCEPTIONS This option makes sure no exceptions are propagated from path evaluation. It follows these simple rules: If option ALWAYS_RETURN_LIST is present an empty list will be returned If option ALWAYS_RETURN_LIST is NOT present null returned JsonProvider SPI JsonPath is shipped with three different JsonProviders: JsonSmartJsonProvider (default) JacksonJsonProvider JacksonJsonNodeJsonProvider GsonJsonProvider JsonOrgJsonProvider Changing the configuration defaults as demonstrated should only be done when your application is being initialized. Changes during runtime is strongly discouraged, especially in multi threaded applications. Configuration.setDefaults(new Configuration.Defaults() {      private final JsonProvider jsonProvider = new JacksonJsonProvider();     private final MappingProvider mappingProvider = new JacksonMappingProvider();      @Override     public JsonProvider jsonProvider() {         return jsonProvider;     }      @Override     public MappingProvider mappingProvider() {         return mappingProvider;     }      @Override     public Set<Option> options() {         return EnumSet.noneOf(Option.class);     } }); Note that the JacksonJsonProvider requires com.fasterxml.jackson.core:jackson-databind:2.4.5 and the GsonJsonProvider requires com.google.code.gson:gson:2.3.1 on your classpath. Cache SPI In JsonPath 2.1.0 a new Cache SPI was introduced. This allows API consumers to configure path caching in a way that suits their needs. The cache must be configured before it is accesses for the first time or a JsonPathException is thrown. JsonPath ships with two cache implementations com.jayway.jsonpath.spi.cache.LRUCache (default, thread safe) com.jayway.jsonpath.spi.cache.NOOPCache (no cache) If you want to implement your own cache the API is simple. CacheProvider.setCache(new Cache() {     //Not thread safe simple cache     private Map<String, JsonPath> map = new HashMap<String, JsonPath>();      @Override     public JsonPath get(String key) {         return map.get(key);     }      @Override     public void put(String key, JsonPath jsonPath) {         map.put(key, jsonPath);     } }); Sponsored by: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jayway/JsonPath"	"Extract data from JSON using XPATH like syntax."	"true"
"JSON Processing"	"JsonSurfer"	"https://github.com/jsurfer/JsonSurfer"	"Streaming JsonPath processor dedicated to processing big and complicated JSON data."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"4"	"4"	"GitHub - jsurfer/JsonSurfer: A streaming JsonPath processor in Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 14 Fork 4 jsurfer/JsonSurfer Code Issues 3 Pull requests 0 Pulse Graphs A streaming JsonPath processor in Java 135 commits 2 branches 6 releases Fetching contributors Java 99.5% ANTLR 0.5% Java ANTLR Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master refactor-dom-builder Nothing to show v1.2.7 v1.2.6 v1.2.3 v1.2.1 1.2 1.1 Nothing to show New pull request Latest commit 3021b3d Jun 15, 2016 wanglingsong FIx out of range exception Permalink Failed to load latest commit information. jsurfer-benchmark Rename API and bump version Nov 12, 2015 jsurfer-core FIx out of range exception Jun 15, 2016 .gitignore Initial project Mar 19, 2015 .travis.yml 1. Add travis file Mar 27, 2015 README.md [ci skip] Nov 12, 2015 pom.xml Rename API and bump version Nov 12, 2015 README.md JsonSurfer - Let's surf on Json! Why JsonSurfer Jsonsurfer is dedicated in processing big and complicated json data with three major features. Streaming No need to deserialize entire json into memory JsonPath Selectively extract json data by the power of JsonPath Stoppable JsonSurfer is built on stoppable SAX-like interface that allows the processor to stop itself if necessary. Getting started What is JsonPath? JsonSurfer supports imcomplete JsonPath feature at current version: Operator Description Supported $ root YES @ current node Not yet * wildcard YES .. recursive descent YES .<name> child YES ['<name>' (, '<name>')] child/children YES [<number> (, <number>)] index/indices YES [start:end] array slice YES [?(<expression>)] expression Not yet JsonSurfer is available in cetral maven repository. <dependency>     <groupId>com.github.jsurfer</groupId>     <artifactId>jsurfer-core</artifactId>     <version>1.2.7</version> </dependency> Required dependencies JsonSurfer supports Gson, Jackson and JsonSimple but does not transitively include Gson and Jackson. Please choose and declare them in POM by yourself. <dependency>     <groupId>com.google.code.gson</groupId>     <artifactId>gson</artifactId>     <version>2.3.1</version> </dependency> <dependency>     <groupId>com.fasterxml.jackson.core</groupId>     <artifactId>jackson-databind</artifactId>     <version>2.6.0</version> </dependency> Surfing API: ""Surfing"" in Json DOM tree collecting matched value in the listeners         JsonSurfer surfer = new JsonSurfer(GsonParser.INSTANCE, JavaCollectionProvider.INSTANCE);         surfer.configBuilder()                 .bind(""$.store.book[*]"", new JsonPathListener() {                     @Override                     public void onValue(Object value, ParsingContext context) throws Exception {                         System.out.println(value);                     }                 })                 .buildAndSurf(sample); Repeated surfing with same binding         JsonSurfer surfer = new JsonSurfer(GsonParser.INSTANCE, JavaCollectionProvider.INSTANCE);         SurfingConfiguration config = surfer.configBuilder()                 .bind(""$.store.book[*]"", new JsonPathListener() {                     @Override                     public void onValue(Object value, ParsingContext context) throws Exception {                         System.out.println(value);                     }                 })                 .build();                 surfer.surf(sample1, config);         surfer.surf(sample2, config); Collect the first matched value         JsonSurfer jsonSurfer = JsonSurfer.gson();         Object singleResult = jsonSurfer.collectOne(sample, ""$.store.book[0]""); Colllect every matched value         JsonSurfer jsonSurfer = JsonSurfer.gson();         Collection<Object> multipleResults = jsonSurfer.collectAll(sample, ""$.store.book[*]""); Resolver API: As of 1.2.6, JsonSurfer provides another way of processing json. You can directly resolve value with JsonPath from a well-built DOM like HashMap or even POJO:         Book book = new Book();         book.setAuthor(""Leo"");         book.setCategory(""Fiction"");         book.setPrice(100.0d);         book.setTitle(""JsonSurfer is great!"");         System.out.print(compile(""$.author"").resolve(book, new PoJoResolver())); which prints ""Leo"".         List<String> list = Arrays.asList(""foo"", ""bar"");         HashMap<String, Object> map = new HashMap<String, Object>();         map.put(""list"", list);         System.out.println(compile(""$.list[1]"").resolve(map, JavaCollectionProvider.INSTANCE)); which prints ""bar"". Other API: JsonSurfer provides flexible plug-in interface, you can choose your library for parsing and modeling. For example:         // use json-simple parser (Json-Simple dependency is included by default)         // transform json into json-simple model i.e.org.json.simple.JSONObject or org.json.simple.JSONArray         JsonSurfer surfer = new JsonSurfer(JsonSimpleParser.INSTANCE, JsonSimpleProvider.INSTANCE);         // or JsonSurfer surfer = JsonSurfer.simple();         // use gson parser (You need to explicitly declare Gson dependency in you pom)         // transform json into gson model i.e.com.google.gson.JsonElement         JsonSurfer surfer = new JsonSurfer(GsonParser.INSTANCE, GsonProvider.INSTANCE);         // or JsonSurfer surfer = JsonSurfer.gson(); Stop parsing on the fly. Refer to Stoppable parsing More code Examples Sample Json: {     ""store"": {         ""book"": [             {                 ""category"": ""reference"",                 ""author"": ""Nigel Rees"",                 ""title"": ""Sayings of the Century"",                 ""price"": 8.95             },             {                 ""category"": ""fiction"",                 ""author"": ""Evelyn Waugh"",                 ""title"": ""Sword of Honour"",                 ""price"": 12.99             },             {                 ""category"": ""fiction"",                 ""author"": ""Herman Melville"",                 ""title"": ""Moby Dick"",                 ""isbn"": ""0-553-21311-3"",                 ""price"": 8.99             },             {                 ""category"": ""fiction"",                 ""author"": ""J. R. R. Tolkien"",                 ""title"": ""The Lord of the Rings"",                 ""isbn"": ""0-395-19395-8"",                 ""price"": 22.99             }         ],         ""bicycle"": {             ""color"": ""red"",             ""price"": 19.95         }     },     ""expensive"": 10 } Find the authors of all books: $.store.book[*].author         JsonSurfer surfer = JsonSurfer.gson();         surfer.configBuilder()                 .bind(""$.store.book[*].author"", new JsonPathListener() {                     @Override                     public void onValue(Object value, ParsingContext context) {                         System.out.println(value);                     }                 })                 .buildAndSurf(sample); Output ""Nigel Rees"" ""Evelyn Waugh"" ""Herman Melville"" ""J. R. R. Tolkien""  All authors $..author         JsonSurfer surfer = JsonSurfer.gson();         surfer.configBuilder()                 .bind(""$..author"", new JsonPathListener() {                     @Override                     public void onValue(Object value, ParsingContext context) {                         System.out.println(value);                     }                 })                 .buildAndSurf(sample); Output ""Nigel Rees"" ""Evelyn Waugh"" ""Herman Melville"" ""J. R. R. Tolkien""  All things in store $.store.*         JsonSurfer surfer = JsonSurfer.gson();         surfer.configBuilder()                 .bind(""$.store.*"", new JsonPathListener() {                     @Override                     public void onValue(Object value, ParsingContext context) {                         System.out.println(value);                     }                 })                 .buildAndSurf(sample); Output [{""category"":""reference"",""author"":""Nigel Rees"",""title"":""Sayings of the Century"",""price"":8.95},{""category"":""fiction"",""author"":""Evelyn Waugh"",""title"":""Sword of Honour"",""price"":12.99},{""category"":""fiction"",""author"":""Herman Melville"",""title"":""Moby Dick"",""isbn"":""0-553-21311-3"",""price"":8.99},{""category"":""fiction"",""author"":""J. R. R. Tolkien"",""title"":""The Lord of the Rings"",""isbn"":""0-395-19395-8"",""price"":22.99}] {""color"":""red"",""price"":19.95}  The price of everything in the store $.store..price         JsonSurfer surfer = JsonSurfer.gson();         surfer.configBuilder()                 .bind(""$.store..price"", new JsonPathListener() {                     @Override                     public void onValue(Object value, ParsingContext context) {                         System.out.println(value);                     }                 })                 .buildAndSurf(sample); Output 8.95 12.99 8.99 22.99 19.95  The thrid book $..book[2]         JsonSurfer surfer = JsonSurfer.gson();         surfer.configBuilder()                 .bind(""$..book[2]"", new JsonPathListener() {                     @Override                     public void onValue(Object value, ParsingContext context) {                         System.out.println(value);                     }                 })                 .buildAndSurf(sample); Output {""category"":""fiction"",""author"":""Herman Melville"",""title"":""Moby Dick"",""isbn"":""0-553-21311-3"",""price"":8.99}  The first two books $..book[0,1]         JsonSurfer surfer = JsonSurfer.gson();         surfer.configBuilder()                 .bind(""$..book[0,1]"", new JsonPathListener() {                     @Override                     public void onValue(Object value, ParsingContext context) {                         System.out.println(value);                     }                 })                 .buildAndSurf(sample); Output {""category"":""reference"",""author"":""Nigel Rees"",""title"":""Sayings of the Century"",""price"":8.95} {""category"":""fiction"",""author"":""Evelyn Waugh"",""title"":""Sword of Honour"",""price"":12.99}  Stoppable parsing The parsing is stopped when the first book found and printed. $..book[0,1]         JsonSurfer surfer = JsonSurfer.gson();         surfer.configBuilder()                 .bind(""$..book[0,1]"", new JsonPathListener() {                     @Override                     public void onValue(Object value, ParsingContext context) {                                                 System.out.println(value);                         context.stopParsing();                     }                 })                 .buildAndSurf(sample); Output {""category"":""reference"",""author"":""Nigel Rees"",""title"":""Sayings of the Century"",""price"":8.95}  Benchmark JsonSurfer is fast !!! The benchmark is powered by JMH Benchmark                                            Mode  Cnt       Score      Error  Units BenchmarkCollectSingleValue.benchmarkGson           thrpt   10  176764.763 ± 1104.124  ops/s BenchmarkCollectSingleValue.benchmarkGsonSurfer     thrpt   10  740780.577 ± 5342.493  ops/s BenchmarkCollectSingleValue.benchmarkJackson        thrpt   10  190154.310 ±  929.849  ops/s BenchmarkCollectSingleValue.benchmarkJacksonSurfer  thrpt   10  521919.374 ± 2685.533  ops/s BenchmarkCollectSingleValue.benchmarkSimpleSurfer   thrpt   10  219732.696 ± 3476.744  ops/s  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jsurfer/JsonSurfer"	"Streaming JsonPath processor dedicated to processing big and complicated JSON data."	"true"
"JVM and JDK"	"Avian"	"https://github.com/ReadyTalk/avian"	"JVM with both a JIT & AOT modes. Includes an iOS port."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"751"	"87"	"111"	"GitHub - ReadyTalk/avian: Avian is a lightweight virtual machine and class library designed to provide a useful subset of Java's features, suitable for building self-contained applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 87 Star 751 Fork 111 ReadyTalk/avian Code Issues 20 Pull requests 0 Wiki Pulse Graphs Avian is a lightweight virtual machine and class library designed to provide a useful subset of Java's features, suitable for building self-contained applications. https://readytalk.github.io/avian/ 4,672 commits 9 branches 19 releases 39 contributors C++ 61.9% Java 33.1% Makefile 2.5% Assembly 1.6% Prolog 0.5% C 0.2% Other 0.2% C++ Java Makefile Assembly Prolog C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags IcmpSendEcho2Ex darwinjavahome gh-pages invokeinterface master release_1.0.4 sgoings tag104 timestamps Nothing to show v1.2.0 v1.1 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0 v0.7.1.1 v0.7.1 v0.7 v0.6 v0.5 v0.4 v0.3 v0.2 v0.1.1 v0.1 v0.0.1 v0.0 Nothing to show New pull request Latest commit f9928ac Jul 2, 2016 joshuawarner32 committed on GitHub Merge pull request #492 from ReadyTalk/IcmpSendEcho2Ex … patch Inet4AddressImpl.c to declare IcmpSendEcho2Ex Permalink Failed to load latest commit information. .utility push javadoc pages to ReadyTalk/readytalk.github.io instead of gh-pages Apr 23, 2014 classpath add sun.misc.Unsafe.putDouble(Object,long,double) Mar 1, 2016 cmake fix zlib headers / linking for windows Jul 30, 2014 docker Change Avian src volume path to match Dockerfile Dec 22, 2015 gradle/wrapper Add better publishing intended for Travis + establish packages for wi… Jan 2, 2015 include/avian optionally specify reentrancy when creating a System object Sep 12, 2015 openjdk-patches patch Inet4AddressImpl.c to declare IcmpSendEcho2Ex Jul 1, 2016 src Don't access potentially mis-aligned, non-existent length field for n… May 26, 2016 test add sun.misc.Unsafe.putDouble(Object,long,double) Mar 2, 2016 unittest update copyright years Mar 13, 2015 .clang-format Specify formatting style via .clang-format config file Dec 18, 2013 .gitignore add /cmake-build to gitignore Jul 24, 2014 .mailmap Attribute <anonymous@example.com> to Anonymous, instead of Joel Dice Nov 6, 2013 .travis.yml disable TravisCI artifact publication Oct 12, 2015 CMakeLists.txt first pass at cmake + visual studio support Jul 30, 2014 LICENSE.txt add license title and capitalize filename Jul 1, 2016 README.md remove MSYS instructions from README.md Apr 26, 2016 android.pro fix crash in Posix_getaddrinfo for ProGuarded Android build Aug 7, 2014 build.gradle fix incorrectly specified extensions for binaryToObject and lzma May 12, 2015 gradle.properties update version to 1.3.0-SNAPSHOT Mar 16, 2015 gradlew Add Gradle wrapper build on top of project to enable publishing to Bi… Jul 23, 2014 gradlew.bat Add Gradle wrapper build on top of project to enable publishing to Bi… Jul 23, 2014 makefile fix timestamp-related bug in makefile Jun 21, 2016 openjdk-src.mk replace preprocessor __try/__except hack with patch Jan 13, 2016 openjdk.ld add JVM_GetResourceLookupCacheURLs Mar 12, 2015 openjdk.pro fix iOS OpenJDK and simulator builds May 18, 2014 settings.gradle Add Gradle wrapper build on top of project to enable publishing to Bi… Jul 23, 2014 valgrind.supp update valgrind.supp to suppress ld-2.6.so warnings May 18, 2008 vm.pro Add UnknownHostException to proguard config May 20, 2014 README.md Avian - A lightweight Java Virtual Machine (JVM) Quick Start These are examples of building Avian on various operating systems for the x86_64 architecture. You may need to modify JAVA_HOME according to where the JDK is installed on your system. In all cases, be sure to use forward slashes in the path. on Linux: $ export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64 $ make $ build/linux-x86_64/avian -cp build/linux-x86_64/test Hello  on Mac OS X: $ export JAVA_HOME=$(/usr/libexec/java_home) $ make $ build/macosx-x86_64/avian -cp build/macosx-x86_64/test Hello  on Windows (Cygwin): $ git clone git@github.com:ReadyTalk/win64.git ../win64 $ export JAVA_HOME=""/cygdrive/c/Program Files/Java/jdk1.7.0_45"" $ make $ build/windows-x86_64/avian -cp build/windows-x86_64/test Hello  on FreeBSD: $ export JAVA_HOME=/usr/local/openjdk7 $ gmake $ build/freebsd-x86_64/avian -cp build/freebsd-x86_64/test Hello  Introduction Avian is a lightweight virtual machine and class library designed to provide a useful subset of Java's features, suitable for building self-contained applications. More information is available at the project web site. If you have any trouble building, running, or embedding Avian, please post a message to our discussion group. That's also the place for any other questions, comments, or suggestions you might have. Supported Platforms Avian can currently target the following platforms: Linux (i386, x86_64, ARM, and ARM64) Windows (i386 and x86_64) Mac OS X (i386 and x86_64) Apple iOS (i386, x86_64, ARM, and ARM64) FreeBSD (i386, x86_64) Building Build requirements include: GNU make 3.80 or later GCC 4.6 or later or LLVM Clang 3.1 or later (see use-clang option below) JDK 1.6 or later MinGW 3.4 or later (only if compiling for Windows) zlib 1.2.3 or later Earlier versions of some of these packages may also work but have not been tested. The build is directed by a single makefile and may be influenced via certain flags described below, all of which are optional. $ make \     platform={linux,windows,macosx,ios,freebsd} \     arch={i386,x86_64,arm,arm64} \     process={compile,interpret} \     mode={debug,debug-fast,fast,small} \     lzma=<lzma source directory> \     bootimage={true,false} \     tails={true,false} \     continuations={true,false} \     use-clang={true,false} \     openjdk=<openjdk installation directory> \     openjdk-src=<openjdk source directory> \     android=<android source directory>  platform - the target platform default: output of $(uname -s | tr [:upper:] [:lower:]), normalized in some cases (e.g. CYGWIN_NT-5.1 -> windows) arch - the target architecture default: output of $(uname -m), normalized in some cases (e.g. i686 -> i386) process - choice between pure interpreter or JIT compiler default: compile mode - which set of compilation flags to use to determine optimization level, debug symbols, and whether to enable assertions default: fast lzma - if set, support use of LZMA to compress embedded JARs and boot images. The value of this option should be a directory containing a recent LZMA SDK (available here). Currently, only version 9.20 of the SDK has been tested, but other versions might work. default: not set armv6 - if true, don't use any instructions newer than armv6. By default, we assume the target is armv7 or later, and thus requires explicit memory barrier instructions to ensure cache coherency bootimage - if true, create a boot image containing the pre-parsed class library and ahead-of-time compiled methods. This option is only valid for process=compile builds. Note that you may need to specify both build-arch=x86_64 and arch=x86_64 on 64-bit systems where ""uname -m"" prints ""i386"". default: false tails - if true, optimize each tail call by replacing the caller's stack frame with the callee's. This convention ensures proper tail recursion, suitable for languages such as Scheme. This option is only valid for process=compile builds. default: false continuations - if true, support continuations via the avian.Continuations methods callWithCurrentContinuation and dynamicWind. See Continuations.java for details. This option is only valid for process=compile builds. default: false use-clang - if true, use LLVM's clang instead of GCC to build. Note that this does not currently affect cross compiles, only native builds. default: false openjdk - if set, use the OpenJDK class library instead of the default Avian class library. See ""Building with the OpenJDK Class Library"" below for details. default: not set openjdk-src - if this and the openjdk option above are both set, build an embeddable VM using the OpenJDK class library. The JNI components of the OpenJDK class library will be built from the sources found under the specified directory. See ""Building with the OpenJDK Class Library"" below for details. default: not set android - if set, use the Android class library instead of the default Avian class library. See ""Building with the Android Class Library"" below for details. default: not set These flags determine the name of the directory used for the build. The name always starts with ${platform}-${arch}, and each non-default build option is appended to the name. For example, a debug build with bootimage enabled on Linux/x86_64 would be built in build/linux-x86_64-debug-bootimage. This allows you to build with several different sets of options independently and even simultaneously without doing a clean build each time. Note that not all combinations of these flags are valid. For instance, non-jailbroken iOS devices do not allow JIT compilation, so only process=interpret or bootimage=true builds will run on such devices. See here for an example of an Xcode project for iOS which uses Avian. If you are compiling for Windows, you may either cross-compile using MinGW or build natively on Windows under Cygwin. Installing Cygwin: 1. Download and run setup.exe from cygwin's website, installing the base system and these packages: make, gcc-mingw-g++, mingw64-i686-gcc-g++, mingw64-x86_64-gcc-g++, and (optionally) git. You may also find our win32 repository useful: (run this from the directory containing the avian directory) $ git clone git@github.com:ReadyTalk/win32.git  This gives you the Windows JNI headers, zlib headers and library, and a few other useful libraries like OpenSSL, libjpeg, and libpng. There's also a win64 repository for 64-bit builds:   $ git clone git@github.com:ReadyTalk/win64.git  Building with the Microsoft Visual C++ Compiler You can also build using the MSVC compiler, which makes debugging with tools like WinDbg and Visual Studio much easier. Note that you will still need to have GCC installed - MSVC is only used to compile the C++ portions of the VM, while the assembly code and helper tools are built using GCC. Note that the MSVC build isn't tested regularly, so is fairly likely to be broken. Avian targets MSVC 11 and above (it uses c++ features not available in older versions). To build with MSVC, install Cygwin as described above and set the following environment variables: $ export PATH=""/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/cygdrive/c/Program Files/Microsoft Visual Studio 11.0/Common7/IDE:/cygdrive/c/Program Files/Microsoft Visual Studio 11.0/VC/BIN:/cygdrive/c/Program Files/Microsoft Visual Studio 11.0/Common7/Tools:/cygdrive/c/WINDOWS/Microsoft.NET/Framework/v3.5:/cygdrive/c/WINDOWS/Microsoft.NET/Framework/v2.0.50727:/cygdrive/c/Program Files/Microsoft Visual Studio 11.0/VC/VCPackages:/cygdrive/c/Program Files/Microsoft SDKs/Windows/v6.0A/bin:/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS:/cygdrive/c/WINDOWS/System32/Wbem"" $ export LIBPATH=""C:\WINDOWS\Microsoft.NET\Framework\v3.5;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727;C:\Program Files\Microsoft Visual Studio 11.0\VC\LIB;"" $ export VCINSTALLDIR=""C:\Program Files\Microsoft Visual Studio 11.0\VC"" $ export LIB=""C:\Program Files\Microsoft Visual Studio 11.0\VC\LIB;C:\Program Files\Microsoft SDKs\Windows\v6.0A\lib;"" $ export INCLUDE=""C:\Program Files\Microsoft Visual Studio 11.0\VC\INCLUDE;C:\Program Files\Microsoft SDKs\Windows\v6.0A\include;""  Adjust these definitions as necessary according to your MSVC installation. Finally, build with the msvc flag set to the MSVC tool directory: $ make msvc=""/cygdrive/c/Program Files/Microsoft Visual Studio 11.0/VC""  Building with the OpenJDK Class Library By default, Avian uses its own lightweight class library. However, that library only contains a relatively small subset of the classes and methods included in the JRE. If your application requires features beyond that subset, you may want to tell Avian to use OpenJDK's class library instead. To do so, specify the directory where OpenJDK is installed, e.g.: $ make openjdk=/usr/lib/jvm/java-7-openjdk  This will build Avian as a conventional JVM (e.g. libjvm.so) which loads its boot class library and native libraries (e.g. libjava.so) from /usr/lib/jvm/java-7-openjdk/jre at runtime. Note that you must use an absolute path here, or else the result will not work when run from other directories. In this configuration, OpenJDK needs to remain installed for Avian to work, and you can run applications like this: $ build/linux-x86_64-openjdk/avian-dynamic -cp /path/to/my/application \     com.example.MyApplication  Alternatively, you can enable a stand-alone build using OpenJDK by specifying the location of the OpenJDK source code, e.g.: $ make openjdk=$(pwd)/../jdk7/build/linux-amd64/j2sdk-image \     openjdk-src=$(pwd)/../jdk7/jdk/src  You must ensure that the path specified for openjdk-src does not have any spaces in it; make gets confused when dependency paths include spaces, and we haven't found away around that except to avoid paths with spaces entirely. The result of such a build is a self-contained binary which does not depend on external libraries, jars, or other files. In this case, the specified paths are used only at build time; anything needed at runtime is embedded in the binary. Thus, the process of running an application is simplified: $ build/linux-x86_64-openjdk-src/avian -cp /path/to/my/application \     com.example.MyApplication  Note that the resulting binary will be very large due to the size of OpenJDK's class library. This can be mitigated using UPX, preferably an LZMA-enabled version: $ upx --lzma --best build/linux-x86_64-openjdk-src/avian  You can reduce the size futher for embedded builds by using ProGuard and the supplied openjdk.pro configuration file (see ""Embedding with ProGuard and a Boot Image"" below). Note that you'll still need to use vm.pro in that case -- openjdk.pro just adds additional constraints specific to the OpenJDK port. Also see app.mk in the avian-swt-examples project for an example of using Avian, OpenJDK, ProGuard, and UPX in concert. Here are some examples of how to install OpenJDK and build Avian with it on various OSes: Debian-based Linux: Conventional build: $ apt-get install openjdk-7-jdk $ make openjdk=/usr/lib/jvm/java-7-openjdk test  Stand-alone build: $ apt-get install openjdk-7-jdk $ apt-get source openjdk-7-jdk $ apt-get build-dep openjdk-7-jdk $ (cd openjdk-7-7~b147-2.0 && dpkg-buildpackage) $ make openjdk=/usr/lib/jvm/java-7-openjdk \     openjdk-src=$(pwd)/openjdk-7-7~b147-2.0/build/openjdk/jdk/src \     test  Mac OS X: Prerequisite: Build OpenJDK 7 according to this site. Conventional build: $ make openjdk=$(pwd)/../jdk7u-dev/build/macosx-amd64/j2sdk-image test  Stand-alone build: $ make openjdk=$(pwd)/../jdk7u-dev/build/macosx-amd64/j2sdk-image \     openjdk-src=$(pwd)/../p/jdk7u-dev/jdk/src test  Windows (Cygwin): Prerequisite: Build OpenJDK 7 according to this site. Alternatively, use https://github.com/alexkasko/openjdk-unofficial-builds. Conventional build: $ make openjdk=$(pwd)/../jdk7u-dev/build/windows-i586/j2sdk-image test  Stand-alone build: $ make openjdk=$(pwd)/../jdk7u-dev/build/windows-i586/j2sdk-image \     openjdk-src=$(pwd)/../p/jdk7u-dev/jdk/src test  Currently, only OpenJDK 7 is supported. Later versions might work, but have not yet been tested. Building with the Android Class Library As an alternative to both the Avian and OpenJDK class libaries, you can also build with the Android class library. Now it should work on Linux, OS X and Windows. The simpliest way to build Avian with Android classpath is to use avian-pack project: https://github.com/bigfatbrowncat/avian-pack Avian-pack consists of Avian itself with some Android components (such as libcore and icu4c). Note that we use the upstream OpenSSL repository and apply the Android patches to it. This is because it is not clear how to build the Android fork of OpenSSL directly without checking out and building the entire platform. As of this writing, the patches apply cleanly against OpenSSL 1.0.1h, so that's the tag we check out, but this may change in the future when the Android fork rebases against a new OpenSSL version. Installing Installing Avian is as simple as copying the executable to the desired directory: $ cp build/${platform}-${arch}/avian ~/bin/  Embedding The following series of commands illustrates how to produce a stand-alone executable out of a Java application using Avian. Note: if you are building on Cygwin, prepend ""x86_64-w64-mingw32-"" or ""i686-w64-mingw32-"" to the ar, g++, gcc, strip, and dlltool commands below (e.g. x86_64-w64-mingw32-gcc). 1. Build Avian, create a new directory, and populate it with the VM object files and bootstrap classpath jar. $ make $ mkdir hello $ cd hello $ ar x ../build/${platform}-${arch}/libavian.a $ cp ../build/${platform}-${arch}/classpath.jar boot.jar  2. Build the Java code and add it to the jar. $ cat >Hello.java <<EOF public class Hello {   public static void main(String[] args) {     System.out.println(""hello, world!"");   } } EOF  $ javac -bootclasspath boot.jar Hello.java  $ jar u0f boot.jar Hello.class  3. Make an object file out of the jar. $ ../build/${platform}-${arch}/binaryToObject/binaryToObject boot.jar \      boot-jar.o _binary_boot_jar_start _binary_boot_jar_end ${platform} ${arch}  If you've built Avian using the lzma option, you may optionally compress the jar before generating the object:   ../build/$(platform}-${arch}-lzma/lzma/lzma encode boot.jar boot.jar.lzma      && ../build/${platform}-${arch}-lzma/binaryToObject/binaryToObject \        boot.jar.lzma boot-jar.o _binary_boot_jar_start _binary_boot_jar_end \        ${platform} ${arch}  Note that you'll need to specify ""-Xbootclasspath:[lzma.bootJar]"" instead of ""-Xbootclasspath:[bootJar]"" in the next step if you've used LZMA to compress the jar. 4. Write a driver which starts the VM and runs the desired main method. Note the bootJar function, which will be called by the VM to get a handle to the embedded jar. We tell the VM about this jar by setting the boot classpath to ""[bootJar]"". $ cat >embedded-jar-main.cpp <<EOF #include ""stdint.h"" #include ""jni.h"" #include ""stdlib.h""  #if (defined __MINGW32__) || (defined _MSC_VER) #  define EXPORT __declspec(dllexport) #else #  define EXPORT __attribute__ ((visibility(""default""))) \   __attribute__ ((used)) #endif  #if (! defined __x86_64__) && ((defined __MINGW32__) || (defined _MSC_VER)) #  define SYMBOL(x) binary_boot_jar_##x #else #  define SYMBOL(x) _binary_boot_jar_##x #endif  extern ""C"" {    extern const uint8_t SYMBOL(start)[];   extern const uint8_t SYMBOL(end)[];    EXPORT const uint8_t*   bootJar(size_t* size)   {     *size = SYMBOL(end) - SYMBOL(start);     return SYMBOL(start);   }  } // extern ""C""  extern ""C"" void __cxa_pure_virtual(void) { abort(); }  int main(int ac, const char** av) {   JavaVMInitArgs vmArgs;   vmArgs.version = JNI_VERSION_1_2;   vmArgs.nOptions = 1;   vmArgs.ignoreUnrecognized = JNI_TRUE;    JavaVMOption options[vmArgs.nOptions];   vmArgs.options = options;    options[0].optionString = const_cast<char*>(""-Xbootclasspath:[bootJar]"");    JavaVM* vm;   void* env;   JNI_CreateJavaVM(&vm, &env, &vmArgs);   JNIEnv* e = static_cast<JNIEnv*>(env);    jclass c = e->FindClass(""Hello"");   if (not e->ExceptionCheck()) {     jmethodID m = e->GetStaticMethodID(c, ""main"", ""([Ljava/lang/String;)V"");     if (not e->ExceptionCheck()) {       jclass stringClass = e->FindClass(""java/lang/String"");       if (not e->ExceptionCheck()) {         jobjectArray a = e->NewObjectArray(ac-1, stringClass, 0);         if (not e->ExceptionCheck()) {           for (int i = 1; i < ac; ++i) {             e->SetObjectArrayElement(a, i-1, e->NewStringUTF(av[i]));           }            e->CallStaticVoidMethod(c, m, a);         }       }     }   }    int exitCode = 0;   if (e->ExceptionCheck()) {     exitCode = -1;     e->ExceptionDescribe();   }    vm->DestroyJavaVM();    return exitCode; } EOF  on Linux:  $ g++ -I$JAVA_HOME/include -I$JAVA_HOME/include/linux \      -D_JNI_IMPLEMENTATION_ -c embedded-jar-main.cpp -o main.o  on Mac OS X:  $ g++ -I$JAVA_HOME/include -I$JAVA_HOME/include/darwin \      -D_JNI_IMPLEMENTATION_ -c embedded-jar-main.cpp -o main.o  on Windows:  $ g++ -fno-exceptions -fno-rtti -I""$JAVA_HOME/include"" -I""$JAVA_HOME/include/win32"" \      -D_JNI_IMPLEMENTATION_ -c embedded-jar-main.cpp -o main.o  5. Link the objects produced above to produce the final executable, and optionally strip its symbols. on Linux: $ g++ -rdynamic *.o -ldl -lpthread -lz -o hello $ strip --strip-all hello  on Mac OS X: $ g++ -rdynamic *.o -ldl -lpthread -lz -o hello -framework CoreFoundation $ strip -S -x hello  on Windows: $ dlltool -z hello.def *.o $ dlltool -d hello.def -e hello.exp $ gcc hello.exp *.o -L../../win32/lib -lmingwthrd -lm -lz -lws2_32 \     -lIphlpapi -mwindows -mconsole -o hello.exe $ strip --strip-all hello.exe  Embedding with ProGuard and a Boot Image The following illustrates how to embed an application as above, except this time we preprocess the code using ProGuard and build a boot image from it for quicker startup. The pros and cons of using ProGuard are as follow: Pros: ProGuard will eliminate unused code, optimize the rest, and obfuscate it as well for maximum space savings Cons: increased build time, especially for large applications, and extra effort needed to configure it for applications which rely heavily on reflection and/or calls to Java from native code For boot image builds: Pros: the boot image build pre-parses all the classes and compiles all the methods, obviating the need for JIT compilation at runtime. This also makes garbage collection faster, since the pre-parsed classes are never visited. Cons: the pre-parsed classes and AOT-compiled methods take up more space in the executable than the equivalent class files. In practice, this can make the executable 30-50% larger. Also, AOT compilation does not yet yield significantly faster or smaller code than JIT compilation. Finally, floating point code may be slower on 32-bit x86 since the compiler cannot assume SSE2 support will be available at runtime, and the x87 FPU is not supported except via out-of-line helper functions. Note you can use ProGuard without using a boot image and vice-versa, as desired. The following instructions assume we are building for Linux/x86_64. Please refer to the previous example for guidance on other platforms. 1. Build Avian, create a new directory, and populate it with the VM object files. $ make bootimage=true $ mkdir hello $ cd hello $ ar x ../build/linux-x86_64-bootimage/libavian.a  2. Create a stage1 directory and extract the contents of the class library jar into it. $ mkdir stage1 $ (cd stage1 && jar xf ../../build/linux-x86_64-bootimage/classpath.jar)  3. Build the Java code and add it to stage1.  $ cat >Hello.java <<EOF public class Hello {   public static void main(String[] args) {     System.out.println(""hello, world!"");   } } EOF  $ javac -bootclasspath stage1 -d stage1 Hello.java  4. Create a ProGuard configuration file specifying Hello.main as the entry point.  $ cat >hello.pro <<EOF -keep class Hello {    public static void main(java.lang.String[]);  } EOF  5. Run ProGuard with stage1 as input and stage2 as output.  $ java -jar ../../proguard4.6/lib/proguard.jar \      -dontusemixedcaseclassnames -injars stage1 -outjars stage2 \      @../vm.pro @hello.pro  (note: The -dontusemixedcaseclassnames option is only needed when building on systems with case-insensitive filesystems such as Windows and OS X. Also, you'll need to add -ignorewarnings if you use the OpenJDK class library since the openjdk-src build does not include all the JARs from OpenJDK, and thus ProGuard will not be able to resolve all referenced classes. If you actually plan to use such classes at runtime, you'll need to add them to stage1 before running ProGuard. Finally, you'll need to add @../openjdk.pro to the above command when using the OpenJDK library.) 6. Build the boot and code images.  $ ../build/linux-x86_64-bootimage/bootimage-generator \     -cp stage2 \     -bootimage bootimage-bin.o \     -codeimage codeimage-bin.o \     -hostvm ../build/linux-x86_64-interpret/libjvm.so  Note that you can override the default names for the start and end symbols in the boot/code image by also passing: -bootimage-symbols my_bootimage_start:my_bootimage_end \ -codeimage-symbols my_codeimage_start:my_codeimage_end  7. Write a driver which starts the VM and runs the desired main method. Note the bootimageBin function, which will be called by the VM to get a handle to the embedded boot image. We tell the VM about this function via the ""avian.bootimage"" property. Note also that this example includes no resources besides class files. If our application loaded resources such as images and properties files via the classloader, we would also need to embed the jar file containing them. See the previous example for instructions. $ cat >bootimage-main.cpp <<EOF #include ""stdint.h"" #include ""jni.h""  #if (defined __MINGW32__) || (defined _MSC_VER) #  define EXPORT __declspec(dllexport) #else #  define EXPORT __attribute__ ((visibility(""default""))) #endif  #if (! defined __x86_64__) && ((defined __MINGW32__) || (defined _MSC_VER)) #  define BOOTIMAGE_BIN(x) binary_bootimage_bin_##x #  define CODEIMAGE_BIN(x) binary_codeimage_bin_##x #else #  define BOOTIMAGE_BIN(x) _binary_bootimage_bin_##x #  define CODEIMAGE_BIN(x) _binary_codeimage_bin_##x #endif  extern ""C"" {    extern const uint8_t BOOTIMAGE_BIN(start)[];   extern const uint8_t BOOTIMAGE_BIN(end)[];    EXPORT const uint8_t*   bootimageBin(size_t* size)   {     *size = BOOTIMAGE_BIN(end) - BOOTIMAGE_BIN(start);     return BOOTIMAGE_BIN(start);   }    extern const uint8_t CODEIMAGE_BIN(start)[];   extern const uint8_t CODEIMAGE_BIN(end)[];    EXPORT const uint8_t*   codeimageBin(size_t* size)   {     *size = CODEIMAGE_BIN(end) - CODEIMAGE_BIN(start);     return CODEIMAGE_BIN(start);   }  } // extern ""C""  int main(int ac, const char** av) {   JavaVMInitArgs vmArgs;   vmArgs.version = JNI_VERSION_1_2;   vmArgs.nOptions = 2;   vmArgs.ignoreUnrecognized = JNI_TRUE;    JavaVMOption options[vmArgs.nOptions];   vmArgs.options = options;    options[0].optionString     = const_cast<char*>(""-Davian.bootimage=bootimageBin"");    options[1].optionString     = const_cast<char*>(""-Davian.codeimage=codeimageBin"");    JavaVM* vm;   void* env;   JNI_CreateJavaVM(&vm, &env, &vmArgs);   JNIEnv* e = static_cast<JNIEnv*>(env);    jclass c = e->FindClass(""Hello"");   if (not e->ExceptionCheck()) {     jmethodID m = e->GetStaticMethodID(c, ""main"", ""([Ljava/lang/String;)V"");     if (not e->ExceptionCheck()) {       jclass stringClass = e->FindClass(""java/lang/String"");       if (not e->ExceptionCheck()) {         jobjectArray a = e->NewObjectArray(ac-1, stringClass, 0);         if (not e->ExceptionCheck()) {           for (int i = 1; i < ac; ++i) {             e->SetObjectArrayElement(a, i-1, e->NewStringUTF(av[i]));           }            e->CallStaticVoidMethod(c, m, a);         }       }     }   }    int exitCode = 0;   if (e->ExceptionCheck()) {     exitCode = -1;     e->ExceptionDescribe();   }    vm->DestroyJavaVM();    return exitCode; } EOF   $ g++ -I$JAVA_HOME/include -I$JAVA_HOME/include/linux \      -D_JNI_IMPLEMENTATION_ -c bootimage-main.cpp -o main.o  8. Link the objects produced above to produce the final executable, and optionally strip its symbols. $ g++ -rdynamic *.o -ldl -lpthread -lz -o hello $ strip --strip-all hello  Trademarks Oracle and Java are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks of their respective owners. The Avian project is not affiliated with Oracle. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ReadyTalk/avian"	"JVM with both a JIT & AOT modes. Includes an iOS port."	"true"
"JVM and JDK"	"JDK 9"	"https://jdk9.java.net/"	"Early access releases of JDK 9."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JDK 9 Snapshots — Project Kenai Login | Register | Help | Log out | Help JDK 9 Downloads Feedback Forum OpenJDK Planet JDK JDK 9 Project Building the next generation of the JDK platform Download JDK 9    JDK 9 Schedule and Features JDK 9 Early Access / snapshot builds Project Jigsaw latest changes with JDK 9 Source code (instructions) Early Access Build Test Results (instructions) JDK 9 Early Access Now Available! Try it out today!    We Want Contributions! Frustrated with a bug that never got fixed? Have a great idea for improving the Java SE platform? See how to contribute for information on making contributions to the platform. Feedback Please use the Project Feedback forum if you have suggestions for or encounter issues using JDK 9. If you find bugs in a release, please submit them using the usual Java SE bug reporting channels, not with the Issue tracker accompanying this project. Be sure to include complete version information from the output of the  java -version  command. Terms of Use; Privacy Policy; Copyright ©2013-2016 (revision 20160325.c4a3dc8)     Done Please Confirm   No Yes"	"null"	"null"	"Early access releases of JDK 9."	"true"
"JVM and JDK"	"OpenJDK"	"http://openjdk.java.net/"	"Open-source implementation for Linux."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OpenJDK What is this? The place to collaborate on an open-source implementation of the Java Platform, Standard Edition, and related projects. (Learn more.) Download and install the open-source JDK 8 for most popular Linux distributions. If you came here looking for Oracle JDK 8 product binaries for Solaris, Linux, Mac OS X, or Windows, which are based largely on the same code, you can download them from java.oracle.com. Learn how to use the JDK to write applications for a wide range of environments, from desktop to server. Hack on the JDK itself, right here in the growing OpenJDK Community: Browse the code on the web, clone a Mercurial repository to make a local copy, learn how to build and hack on the code with the NetBeans IDE, and contribute a patch to fix a bug, enhance an existing component, or define a new feature.   via Planet JDK Latest blogs OpenJDK FAQ Installing Contributing Sponsoring Developers' Guide Mailing lists IRC · Wiki Bylaws · Census Legal JEP Process Source code Mercurial Bundles (6) Groups (overview) 2D Graphics Adoption AWT Build Compiler Conformance Core Libraries Governing Board HotSpot Internationalization JMX Members Networking NetBeans Projects Porters Quality Security Serviceability Sound Swing Web Projects (overview) Annotations Pipeline 2.0 Audio Engine Build Infrastructure Caciocavallo Closures Code Tools Coin Common VM Interface Compiler Grammar Device I/O Font Scaler Framebuffer Toolkit Graal Graphics Rasterizer HarfBuzz Integration IcedTea JDK 6 JDK 7 JDK 7 Updates JDK 8 · Java SE 8 JDK 8 Updates JDK 9 JavaDoc.Next Jigsaw Kona Kulla Lambda Locale Enhancement Memory Model Update Mobile Modules Multi-Language VM Nashorn New I/O OpenJFX Panama Penrose Port: AArch32 Port: AArch64 Port: BSD Port: Haiku Port: Mac OS X Port: MIPS Port: PowerPC/AIX Port: s390x SCTP Shenandoah Sumatra ThreeTen Tiered Attribution Type Annotations XRender Pipeline Valhalla Verona VisualVM Zero Tools Java SE Mercurial NetBeans jtreg harness Community Planet JDK blogs The Aquarium java.net java.sun.com Java Community Process Related JDK Snapshots (8u, 9) GlassFish IoT © 2016 Oracle Corporation and/or its affiliates Terms of Use · License: GPLv2 · Privacy · Trademarks"	"null"	"null"	"Open-source implementation for Linux."	"true"
"JVM and JDK"	"ParparVM"	"https://github.com/codenameone/CodenameOne/tree/master/vm"	"VM with non-blocking concurrent GC for iOS."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"343"	"55"	"96"	"CodenameOne/vm at master · codenameone/CodenameOne · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 343 Fork 96 codenameone/CodenameOne Code Issues 366 Pull requests 1 Wiki Pulse Graphs Branch: master Switch branches/tags Branches Tags FloatingButton PeerComponentRefactor StylePaintCache Version-3.0 Version-3.1 Version-3.2 Version-3.3 Version-3.4 background-exec gh-pages master revert-1580-master Nothing to show v3.4 v3.3 3.2 3.1 3.0 Nothing to show Create new file Find file History CodenameOne/vm/ Latest commit 84e8f41 Jul 13, 2016 codenameone Added support for GMT timezone Permalink .. Failed to load latest commit information. ByteCodeTranslator Fix for race condition that occurs if the gc stop doesn't complete un… Jun 27, 2016 JavaAPI Added support for GMT timezone Jul 14, 2016 README.md Fixed spelling issue Feb 7, 2016 README.md ParparVM The safe simple & easy way to build native iOS apps in Java ParparVM is the VM developed by Codename One to replace the defunct XMLVM with which it was originally built. We took our extensive experience both in JIT's and native OS development and built something that is both simple, conservative and performant. ParparVM was designed as a client side VM and features a concurrent GC that doesn't block the current execution thread. In order to accomplish such concurrence a small penalty is paid during usage but this allows for smoother runtime. Usage The ByteCodeTranslator and JavaAPI projects are designed as a NetBeans project although it should be possible to work with any Java IDE or ant directly. It requires asm 5.0.3 which you can find in the cn1-binaries project. You can run the translation process using:  java -jar ByteCodeTranslator.jar ios path_to_stub_class:path_to/vm/JavaAPI/build/classes;path_to_your_classes  dest_build_dir MainClassName com.package.name ""Title For Project"" ""1.0"" ios none Once the translation process succeeds you should have a valid xcode project that you can run and use as usual. You will need a Mac for this to work. The main class name is expected to have a public static void main(String[]) method and it is assumed to reside in the com.package.name directory (figuratively, you need to replace com.package.name with your actual package passed to the translator). Why Another VM for iOS? There are many VM's on the market and a few open source ones but none of the ones that translate to C are actively maintained. None of the other VM's have a non-blocking concurrent GC either at this time. J2ObjC is an excellent tool for porting libraries to Objective-C but it isn't designed to be a full scale VM (no GC etc.). The other VM's (Avian & RoboVM) are pretty impressive technically since they compile directly to ARM/LLVM bitcode. That is a very problematic approach: While this is an impressive feat Apple doesn't officially support this route. That means that with every transition Apple makes (64bit, bitcode etc.) hurdles occur. This isn't some theoretical issue but something that has created serious stumbling blocks to such projects. ParparVM had a seamless migration to iOS 9 (no code changes!) and had a relatively easy 64 bit transition! By comparison RoboVM's CEO wrote this: ""Our work to add full support for iOS 9 in time for its public release was one of the most daunting challenges we’ve faced in our existence"" These VM's use the entire Android class libraries resulting in relatively large apps. They also take longer to compile. Xcode's tools can't be used to their full extent with such tools, with ParparVM you can just use Xcodes amazing profiler and related tools out of the box since all the code is C code Hacking these tools requires some deep VM/ASM/LLVM knowledge. ParparVM is trivial by comparison and requires a bit of Java bytecode knowledege and some C. Besides these advantages ParparVM also embeds the a concurrent GC logic directly into the code, this is very similar to ARC in some aspects. The ParparVM GC is concurrent and doesn't need to ""stop the world"" for typical code, its relatively trivial and written entirely in C. Performance Since the Xcode C compiler is VERY fast the performance of ParparVM should be pretty good. However, it performs badly and sometimes horribly in microbenchmarks. However, its performance in ""real life"" situations is generally very good. GC Overhead Normally VM's separate the GC to a completely separate thread and disconnect from it. ParparVM doesn't do that and so you end up with an overhead that is paid in user threads in order to reduce GC stalls. This is a price we gladly pay, it removes the UI stalls normally associated with GC code in favor of theoretical method performance. Method Overhead & Stack ParparVM uses code that mimics the JVM stack bytecodes, this makes the translation process very fast and simple. It also makes the GC easy since the stacks are maintained ""as is"" but maintaining a software stack has a slight overhead that prevents the compiler from truly optimizing away some cases. We have handcoded optimization methods that optimize away common use cases, e.g. getters/setters are effectively free under ParparVM. But this work should probably be extended further. Java Level Support We aimed the VM at Java 5 support and overlay the Java 8 support with retrolambda, it should work for some Java 8 syntax out of the box simply because of ASM's ability to parse newer class files. The API is relatively limited in scope to keep the size low, we would like to add additional API's ideally with very concise implementations to avoid bringing over the full JDK. Relation To Codename One ParparVM is used by Codename One internally, its open source and we have no intention to change that. Parpar has no dependency on Codename One itself that we know of but some might exist inadvertantly since Codename One is the only target we have. Support We try to answer all questions tagged codenameone on stackoverflow but since these questions might be esoteric its possible that we won't be able to answer some of them. The Codename One discussion group is generally aimed at Codename One development and not at using the source code/native. Since these are advanced topics they might dillute the discussion there. Areas Of Interest Performance We would like to improve the performance of the VM further while keeping source/binary size down and reducing compilation time (tall order). This can be accomplished by: Additional optimization options - stack elimination, method init elimination. Exception processing - currently we don't rely on CPU code for exception detection. We can rely on some processor specific behavior to implement null pointer, array index out of bounds etc. Better dead code elimination and better inlining logic Better handling of interfaces which have a big overhead Crash handling Currently VM crashes arn't graceful, it should be pretty easy to extract VM state and log it to a file that can be used on next launch. Since most of the code related to the stack tracking is in C it should be accessible and easy to log this on a crash. Ports When we started this work we envisioned a C# compilation target as well. However, with the changes to Windows Phone 8 C might be a better target for Windows development. Porting the VM to other OS's could be very interesting, we tried to keep the code portable but quite a few things are specific to Objective-C it should be possible to adapt most of those things. The Name Parpar is a butterfly in Hebrew. Initially when we worked at Sun and produced LWUIT we wanted to call it Morpho (butterfly) but marketing shot it down. Unfortunately MorphoVM is already taken so we decided to go with ParparVM instead. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/codenameone/CodenameOne/tree/master/vm"	"VM with non-blocking concurrent GC for iOS."	"true"
"JVM and JDK"	"Zulu OpenJDK 9"	"http://zulu.org/zulu-9-pre-release-downloads/"	"Early access OpenJDK 9 builds for Windows, Linux, and Mac OS X."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Zulu 9 Early Access Downloads          <iframe src=""//www.googletagmanager.com/ns.html?id=GTM-WVJHFN"" height=""0"" width=""0"" style=""display:none;visibility:hidden""> Toggle navigation Download Home Zulu Community Zulu Release Notes Zulu Installation Guide Zulu Forum Community Events Video Resources Developer Resources Java Standards Commercial Compatibility Docker Eclipse Foundation Get Help Ask this community Zulu system specs Zulu Installation Guide Contact Zulu 9 Early Access Downloads Zulu 9 Early Access Zulu 9.x is an early access (EA) build of OpenJDK 9. Zulu 9.x is 100% open source and freely downloadable. Zulu 9.x EA JDK binary build images are provided for evaluation, development, and testing purposes; early access, pre-release or evaluation builds should not be used in production environments prior to full release. We encourage you to follow the OpenJDK 9 project. Details and latest news remain available on the project website at http://openjdk.java.net/projects/jdk9/ . Zulu 9.x builds reflect snapshots of the OpenJDK 9 source tree at http://hg.openjdk.java.net/jdk9. Download the latest snapshot build below, and feel free to discuss Zulu 9.x in the Zulu forum. We plan to do a forum topic for each new snapshot. So check out the most recent topic and feel free to post your reflections. zulu version platform dependency openjdk version filename and md5 checksum download 9.x Prerelease 9.0.0.6 Linux System: glibc v2.5 and higher 9 zulu9.0.0.6-ea-jdk9.0.0-linux_x64.tar.gz 82438d833c6029ecbceee7ff1e00d210 download zip 9.x Prerelease 9.0.0.6 Windows Server: 2016, 2012 R2 Client: 10, 8.1, 8. 7. 9 zulu9.0.0.6-ea-jdk9.0.0-win_x64.zip d112c33c70c6bf2e009c04c971953e7c download zip 9.x Prerelease 9.0.0.6 Mac OS X OS Level: 10.11 El Capitan, 10.10 Yosemite, 10.9 Mavericks 9 zulu9.0.0.6-ea-jdk9.0.0-macosx_x64.zip 254c6667ebb18577cec4078283b926ef download zip Download Zulu join the community Community T&Cs Powered by ©2016 Azul Systems. All rights reserved. Privacy Policy | Legal | Terms of Use"	"null"	"null"	"Early access OpenJDK 9 builds for Windows, Linux, and Mac OS X."	"true"
"JVM and JDK"	"Zulu OpenJDK"	"http://www.azul.com/downloads/zulu/"	"OpenJDK builds for Windows, Linux, and Mac OS X through Java 8."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Zulu® - Azul Systems, Inc.      Azul Systems, Inc.    Toggle navigation Products Product Overview Zing® Zulu® and Zulu Enterprise Zulu® Embedded Vega® Azul Technology Open Source Tools Solutions Solutions Overview Technologies: Industries: Big Data & Analytics Capital Markets Cassandra Digital Advertising Cloud Deployment Digital Travel Embedded and IoT Omnichannel Commerce In-memory Computing Telecom & Wireless Search Software as a Service Resources Resources Overview Customer Success Data Sheets White Papers Presentations and Webinars Infographics e-books Videos Open Source Tools Support Company Company Overview Leadership Press Releases In the News Events Awards Investors Tech Partners and Alliances Careers Blog Contact Us Get Started Download Zulu® Zulu® is Free to Download and Use. Zulu® is a certified build of OpenJDK that is fully compliant with the Java SE standard. Zulu® is 100% open source and freely downloadable. Now Java developers, system administrators and end users can enjoy the full benefits of open source Java with deployment flexibility and control over upgrade timing. Zulu® Enterprise adds the comfort of cost-effective world-class, subscription-based Java support plans. Need Java in a custom form factor? Zulu® Embedded is available for OEMs, makers and embedded device manufacturers. Download Zulu®, deploy on Linux (including Docker containers), Windows, Mac and Cloud environments and choose your free or subscription-based (Zulu® Enterprise) support package. By downloading software from this page, you agree to the Terms of Use.  Azul recommends always using the latest version of Java available which includes important bug fixes and fixes for security vulnerabilities, and to remove older versions of Java from your systems. Want to find out if Zulu® will work on your system? Check out the Zulu® System Requirements.   Interested in an early look at OpenJDK 9? You can download EA builds of Zulu 9 for Windows, Mac and Linux from a dedicated page on the Zulu Community site. Zulu® for Windows® GET STARTED Zulu® for Linux GET STARTED Zulu® for Mac OS X GET STARTED Zulu® Installation Guide Zulu® Installation Guide Zulu® Release Notes and History Release Notes & History Microsoft Azure Installation Instructions Azure Installation Zulu® Dockerfiles Zulu® Dockerfiles Zulu® Yum and APT Repositories Zulu® Repositories Zulu® on Canonical’s Juju Charm Store Juju Charm Store Azul Systems, the industry’s only company exclusively focused on Java and the Java Virtual Machine (JVM), builds fully supported, standards-compliant runtimes that help enable Java-based businesses. Search Company About Us Awards Investors Careers Products Zing® Zulu® Zulu® Embedded Vega® Open Source Tools Partners Tech Partners and Alliances News & Events Press Releases In the News Events Connect Support Contact Us Azul Blog Solutions Solutions Technology Related Links Java SE Iot Java Garbage Collection Options Java For Microcontrollers JVM Performance Comparison JVM and Apache Cassandra What Is Garbage Collection In Java Garbage Collection Programming Java Force Garbage Collection Java IoT © Azul Systems, Inc. 2016 All rights reserved. | Privacy Policy | Legal | Terms of Use"	"null"	"null"	"OpenJDK builds for Windows, Linux, and Mac OS X through Java 8."	"true"
"Logging"	"Apache Log4j 2"	"http://logging.apache.org/log4j/"	"Complete rewrite with a powerful plugin and configuration architecture."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"null"	"null"	"Complete rewrite with a powerful plugin and configuration architecture."	"true"
"Logging"	"Graylog"	"https://www.graylog.org/"	"Open-source aggregator suited for extended role and permission management."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1991"	"127"	"318"	"GitHub - Graylog2/graylog2-server: Free and open source log management Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 127 Star 1,991 Fork 318 Graylog2/graylog2-server Code Issues 328 Pull requests 6 Pulse Graphs Free and open source log management https://www.graylog.org/ 11,784 commits 32 branches 123 releases 61 contributors Java 70.2% JavaScript 24.7% TypeScript 3.2% CSS 1.7% Shell 0.1% HTML 0.1% Java JavaScript TypeScript CSS Shell HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.20 0.90 0.91+perfFixes 0.91 0.92 1.0 1.1 1.2 1.3 2.0 add-ordering-and-decoration-stats benchmarks dashboard-integration-tests docker-integration-tests elasticsearch-5.x email-alarm-configuration extract-eslint-config-module feature-stream-crud-events fix-plugin-resource-injection hzclustering issue-2391 jersey-2.23 master old-issue-1321 pluggable-auth poc-fix-issue-1830 rawmessage-memory-vis search-response-decorators server-react-dashboards update-jquery-ui update-react-bootstrap-and-router user-lowercase Nothing to show v0.20.0-rc.1-1 v0.20.0-preview.1 2.1.0-alpha.2 2.1.0-alpha.1 2.0.3 2.0.2 2.0.1 2.0.0 2.0.0-rc.1 2.0.0-beta.3 2.0.0-beta.2 2.0.0-beta.1 2.0.0-alpha.5 2.0.0-alpha.4 2.0.0-alpha.3 2.0.0-alpha.2 2.0.0-alpha.1 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.3.0-beta.2 1.3.0-beta.1 1.2.2 1.2.1 1.2.0 1.2.0-rc.4 1.2.0-rc.3 1.2.0-rc.2 1.2.0-rc.1 1.1.6 1.1.5 1.1.4 1.1.3 1.1.2 1.1.1 1.1.0 1.1.0-rc.3 1.1.0-rc.2 1.1.0-rc.1 1.1.0-beta.3 1.1.0-beta.2 1.1.0-beta.1 1.0.2 1.0.1 1.0.0 1.0.0-rc.4 1.0.0-rc.3 1.0.0-rc.2 1.0.0-rc.1 1.0.0-beta.3 1.0.0-beta.2 1.0.0-beta.1 0.92.4 0.92.3 0.92.2 0.92.1 0.92.1-rc.1 0.92.0 0.92.0-rc.1 0.92.0-beta.1 0.91.3 0.91.2 0.91.1 0.91.0-rc.1 0.90.3 0.90.2 0.90.1 0.90.0 0.21.0-rc.1 0.21.0-beta4 0.21.0-beta3 0.21.0-beta2 0.21.0-beta1 0.20.6 0.20.5 0.20.4 0.20.3 0.20.2 0.20.2-snapshot.2 0.20.2-snapshot 0.20.2-rc.1 0.20.1 0.20.0 0.20.0-rc.3 0.20.0-rc.2 0.20.0-rc.1 0.20.0-rc.1-1 0.20.0-preview.8 0.20.0-preview.7 0.20.0-preview.6 0.20.0-preview.5 0.20.0-preview.4 0.20.0-preview.3 0.20.0-preview.2 0.20.0-preview.1 0.13.0-rc.1 0.12.0 0.12.0-rc.1 Nothing to show New pull request Latest commit 90a110b Jul 15, 2016 bernd committed with joschi Fix group membership lookup if DN contains whitespace (#2484) … Normalize the DN before comparing the strings to avoid mapping problems if the DNs have different whitespace formatting.  Fixes #1790 Permalink Failed to load latest commit information. .github Add browser version to issue template Mar 11, 2016 bin Remove PermSize and MaxPermSize JVM parameters from graylogctl Feb 1, 2016 config Add some useful FindBugs plugins (#2447) Jul 4, 2016 docker Migrate to Elasticsearch 2.1.0 Dec 4, 2015 graylog2-server Fix group membership lookup if DN contains whitespace (#2484) Jul 15, 2016 graylog2-web-interface Add whitespace replacement and prefix options to JSON extractor (#2481) Jul 15, 2016 integration-tests Use normal MongoDB Java Driver instead of Uber JAR Jul 12, 2016 lib/sigar-1.6.4 Add SIGAR 1.6.4 Dec 30, 2014 misc Remove deprecated MongoDB metrics reporter (#2443) Jul 1, 2016 .editorconfig Add EditorConfig for more consistent source formatting Feb 22, 2016 .gitignore Add resource to serve static files or default response. Dec 7, 2015 .mailmap Add Gary Bot to .mailmap file Feb 3, 2015 .travis.yml Add '1.3' and '2.0' to Travis CI branch list Apr 27, 2016 AUTHORS added common files May 17, 2010 CODE_OF_CONDUCT.md Add contact email in code of conduct Feb 3, 2016 CONTRIBUTING.md Use new get-involved URL Mar 7, 2016 COPYING zomg COPYING file was missing Oct 12, 2011 README.markdown Small improvements to README.md (#2251) May 18, 2016 UPGRADING.rst Remove obsolete BuffersResource (#2460) Jul 14, 2016 manifest.mf netbeans project files Jun 25, 2010 pom.xml Upgrade to Mockito 2.0.86-beta Jul 13, 2016 README.markdown Graylog Welcome! Graylog is an open source log management platform. You can read more about the project on our website and check out the documentation on the documentation site. Issue Tracking Found a bug? Have an idea for an improvement? Feel free to add an issue. Contributing Help us build the future of log management and be part of a project that is used by thousands of people out there every day. Follow the contributors guide and read the contributing instructions to get started. Staying in Touch Come chat with us in the #graylog channel on freenode IRC or write an email to the mailing list. Miscellaneous YourKit supports our open source project by sponsoring its full-featured Java Profiler. YourKit, LLC is the creator of YourKit Java Profiler and YourKit .NET Profiler, innovative and intelligent tools for profiling Java and .NET applications. License Graylog is released under version 3.0 of the GNU General Public License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Graylog2/graylog2-server"	"Open-source aggregator suited for extended role and permission management."	"true"
"Logging"	"Kibana"	"https://www.elastic.co/products/kibana"	"Analyzes and visualizes log files. Some features require payment."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Kibana: Explore, Visualize, Discover Data | Elastic Questions? Feedback? powered by Olark live chat software Products EN English Français Deutsch 日本語 한국어 Products Cloud Services Customers Learn downloads contact EN English Français Deutsch 日本語 한국어 Kibana Kibana Kibana Explore & Visualize Your Data See the Value in Your Data Flexible analytics and visualization platform Real-time summary and charting of streaming data Intuitive interface for a variety of users Instant sharing and embedding of dashboards Download | Subscriptions Get Product Updates What's New? The latest release of Kibana is compatible with the latest version of Elasticsearch and features custom labels, color palette selection in the user interface, and native authentication screen and session management with Shield (security). Learn more. Seamless Integration with Elasticsearch Architected to work with Elasticsearch, Kibana gives shape to any kind of data — structured and unstructured — indexed into Elasticsearch. It also benefits from Elasticsearch's powerful search and analytics capabilities. Give Shape to Your Data To better understand large volumes of data, easily create bar charts, line and scatter plots, histograms, pie charts, and maps. Sophisticated Analytics Leverage the power of Elasticsearch analytics capabilities to analyze your data intelligently, perform mathematical transformations, and slice and dice your data as you see fit. Empower More Team Members Visualizing data in a powerful interface empowers every line of business to make practical use of your data collection. Flexible Interface, Easy to Share Easily create, save, share, and embed your visualized data for quick and smart communication. Easy Setup Simple and friendly setup and startup. Kibana 4 ships with its own web server to help you get up and running quickly. Visualize Data from Many Sources Easily visualize data pushed into Elasticsearch from Logstash, ES-Hadoop, Beats, or third-party technologies like Apache Flume, Fluentd, and many others. Simple Data Export Easily export interesting bits of data to merge and meld with other data sets to quickly prototype new analyses and discover something new. Visually Interact with Elasticsearch REST APIs Sense is a visual console that provides auto-complete, auto-indentation, and syntax checking all through a Kibana plugin. Enhance the way that you interact with the Elasticsearch APIs by installing now. Get Kibana Your data is just about to get more beautiful — and valuable — with Kibana. Download Kibana 4 Tour Explore the new look and feel, improved workflow, and powerful Elasticsearch analytics. Watch Video Secure Kibana Ensure the right people are viewing the right data in your Kibana dashboards. Add Security Be in the know with the latest and greatest from Elastic. Thanks for subscribing! We'll keep you updated with new releases. Products > Elasticsearch Kibana Logstash Beats Elastic Cloud Shield (Security) Watcher (Alerting) Marvel (Monitoring) Graph ES-Hadoop Resources Blog Community Customers & Use Cases Documentation Elastic{ON} Events Forums Meetups Subscriptions Support Portal Videos & Webinars Training About > Careers/Jobs Contact Leadership Partners Press Language English Français Deutsch 日本語 한국어 Trademarks Terms of Use Privacy Cookie Policy Brand © 2016. All Rights Reserved - Elasticsearch Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the Apache Software Foundation in the United States and/or other countries."	"null"	"null"	"Analyzes and visualizes log files. Some features require payment."	"true"
"Logging"	"Logback"	"http://logback.qos.ch/"	"Robust logging library with interesting configuration options via Groovy."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Logback Home Please turn on Javascript to view this menu Logback Project Logback is intended as a successor to the popular log4j project, picking up where log4j leaves off. Logback's architecture is sufficiently generic so as to apply under different circumstances. At present time, logback is divided into three modules, logback-core, logback-classic and logback-access. The logback-core module lays the groundwork for the other two modules. The logback-classic module can be assimilated to a significantly improved version of log4j. Moreover, logback-classic natively implements the SLF4J API so that you can readily switch back and forth between logback and other logging frameworks such as log4j or java.util.logging (JUL). The logback-access module integrates with Servlet containers, such as Tomcat and Jetty, to provide HTTP-access log functionality. Note that you could easily build your own module on top of logback-core. Sister projects The logback-audit project is designed for processing logging events having long-term business significance. Logback-audit is based on logback-core. Projects known to rely on logback Here is a non-exhaustive list of open-source projects known to depend on logback, in alphabetical order: Akka Apache Airvata Apache Camel Apache Cocoon 3 Apache Jackrabbit Apache OpenMeetings Apache S4 Apache Syncope Apache Tobago Artifactory Bootique Citizen Intelligence Agency dCache Dropwizard Geomajas Gradle Grinder Gyrex JAOP JMX Monitor JWebUnit Lift Metrics OpenGDA OpenRDF OpenTSDB Play Framework PSI probe Red5 Scalate Scalatra Shibboleth Sonar SpringSource dm Server StreamBase Virgo Web Server XtremeMP Xuggler Xwiki Zabbix"	"null"	"null"	"Robust logging library with interesting configuration options via Groovy."	"true"
"Logging"	"Logstash"	"https://www.elastic.co/products/logstash"	"Tool for managing log files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Logstash | Elastic Questions? Feedback? powered by Olark live chat software Products EN English Français Deutsch 日本語 한국어 Products Cloud Services Customers Learn downloads contact EN English Français Deutsch 日本語 한국어 Logstash Logstash Logstash Collect, Enrich & Transport Data Process Any Data, From Any Source Centralize data processing of all types Normalize varying schema and formats Quickly extend to custom log formats Easily add plugins for custom data sources Download | Subscriptions Get Product Updates What's New? The Logstash 2.3 release enables the ability to dynamically reload pipelines on the fly, enables environment variable injection, ingests from CloudWatch APIs, and packs some significant performance gains. Learn more. Centralize Data Processing of All Types Logstash is a data pipeline that helps you process logs and other event data from a variety of systems. With 200 plugins and counting, Logstash can connect to a variety of sources and stream data at scale to a central analytics system. Normalize Varying Schema Business-critical data is often scattered among different systems, each in its own format. Logstash allows you to parse this data and converge on a common format before inserting it into your analytics datastore of choice. Extend to Custom Log Formats Most logs written by infrastructure and applications have custom formats. Logstash provides a fast and convenient way to custom logic for parsing these logs at scale. Add Plugins for Custom Sources Built with extensibility in mind, Logstash provides an API for rapid plugin development by the community. With recent improvements to the plugin ecosystem, contributors can publish new plugins at any time. Get Logstash How many logs can a Logstash stash? Find out with the latest version. Download Logstash Basics Install and configure Logstash, explore the plugin ecosystem, and more. Watch Video Secure Your Data Manage who accesses your data flowing from Logstash to Elasticsearch. Add Security Be in the know with the latest and greatest from Elastic. Thanks for subscribing! We'll keep you updated with new releases. Products > Elasticsearch Kibana Logstash Beats Elastic Cloud Shield (Security) Watcher (Alerting) Marvel (Monitoring) Graph ES-Hadoop Resources Blog Community Customers & Use Cases Documentation Elastic{ON} Events Forums Meetups Subscriptions Support Portal Videos & Webinars Training About > Careers/Jobs Contact Leadership Partners Press Language English Français Deutsch 日本語 한국어 Trademarks Terms of Use Privacy Cookie Policy Brand © 2016. All Rights Reserved - Elasticsearch Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the Apache Software Foundation in the United States and/or other countries."	"null"	"null"	"Tool for managing log files."	"true"
"Logging"	"SLF4J"	"http://www.slf4j.org/"	"Abstraction layer which is to be used with an implementation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SLF4J Please turn on Javascript to view this menu Simple Logging Facade for Java (SLF4J) The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging, logback, log4j) allowing the end user to plug in the desired logging framework at deployment time. Before you start using SLF4J, we highly recommend that you read the two-page SLF4J user manual. Note that SLF4J-enabling your library implies the addition of only a single mandatory dependency, namely slf4j-api.jar. If no binding is found on the class path, then SLF4J will default to a no-operation implementation. In case you wish to migrate your Java source files to SLF4J, consider our migrator tool which can migrate your project to use the SLF4J API in just a few minutes. In case an externally-maintained component you depend on uses a logging API other than SLF4J, such as commons logging, log4j or java.util.logging, have a look at SLF4J's binary-support for legacy APIs. Projects depending on SLF4J Here is a non-exhaustive list of projects known to depend on SLF4J, in alphabetical order: Apache ActiveMQ Apache Archiva Apache Camel Apache Directory Apache FTPServer Apache Geronimo Apache Graffito Apache Jackrabbit Apache Mina Apache Qpid Apache ServiceMix Apache Sling Apache Solr Apache Tapestry Apache Wicket Aperture Apogee Artifactory AsyncWeb DbUnit Display tag Ehcache GMaven Gradle GreenMail GumTree H2 Database HA-JDBC Hibernate Igenko Jabsorb Jetty v6 jLynx JMesa JODConverter JTrac JWebUnit 2.x JQuantLib LIFERAY Lift log4jdbc Magnolia MRCP4J Mindquarry Mugshot Mule Nexus Novocode NetCDF OpenMeetings OpenRDF Penrose PSI Probe PZFileReader Quartz Scheduler QuickFIX/J Sonar SMSJ Spring-OSGi SpringSource dm Server™ StreamBase TimeFinder WTFIGO YASL Xooctory XWiki"	"null"	"null"	"Abstraction layer which is to be used with an implementation."	"true"
"Logging"	"tinylog"	"http://www.tinylog.org/"	"Lightweight logging framework with static logger class."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"57"	"9"	"11"	"GitHub - pmwmedia/tinylog: tinylog is a lightweight logging framework for Java, optimized for ease of use Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 57 Fork 11 pmwmedia/tinylog Code Issues 3 Pull requests 0 Pulse Graphs tinylog is a lightweight logging framework for Java, optimized for ease of use http://www.tinylog.org/ 567 commits 4 branches 31 releases Fetching contributors Java 99.9% HTML 0.1% Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v1.0 v1.1 v1.2 Nothing to show 1.2-alpha1 1.1 1.1-rc4 1.1-rc3 1.1-rc2 1.1-rc1 1.1-beta3 1.1-beta2 1.1-beta1 1.1-alpha2 1.1-alpha1 1.0.4 1.0.3 1.0.2 1.0.1 1.0 1.0-rc3 1.0-rc2 1.0-rc1 0.9.1 0.9 0.8.1 0.8 0.7.1 0.7 0.6 0.5 0.4 0.3 0.2 0.1 Nothing to show New pull request Latest commit 75ce04b Apr 28, 2016 pmwmedia Replace button for code coverage Permalink Failed to load latest commit information. benchmark Fixed typo Apr 10, 2016 configuration Fixed FindBugs excludes for JUnit tests Mar 31, 2016 jcl-binding Declare JMockit dependency before JUnit for proper mock initialization Mar 24, 2016 log4j-facade Declare JMockit dependency before JUnit for proper mock initialization Mar 24, 2016 slf4j-binding Declare JMockit dependency before JUnit for proper mock initialization Mar 24, 2016 tinylog Fixed line delimiters Mar 31, 2016 .gitignore Simplify .gitignore, exclude IntelliJ files. Dec 14, 2015 .travis.yml Fixed spaces Mar 22, 2016 distribution.xml Fixed Maven warnings for distribution on Windows Dec 30, 2015 license.txt Create OSGi bundles and Maven artifacts Jan 31, 2013 pom.xml Add AssertJ dependency for tests Mar 24, 2016 readme.md Replace button for code coverage Apr 28, 2016 readme.md tinylog Example import org.tinylog.Logger;  public class Application {      public static void main(String[] args) {         Logger.info(""Hello World!"");     }  }  Projects benchmark Contains a benchmark for comparing logging frameworks jcl-binding: Contains the Apache Commons Logging (JCL) binding, implementing the JCL logging API log4j-facade: Contains the log4j facade, an Apache Log4j 1.x compatible logging API replacement slf4j-binding: Contains the SLF4J binding, implementing the SLF4J logging API tinylog Contains tinylog All projects can be imported as Eclipse Java project. Other folders configuration Contains configuration files for formatting, Checkstyle and FindBugs Support A detailed user manual and the Javadoc documentation can be found on http://www.tinylog.org/. Bug reports and feature requests are welcome and can be created via GitHub issues. License Copyright 2012 Martin Winandy Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pmwmedia/tinylog"	"Lightweight logging framework with static logger class."	"true"
"Machine Learning"	"Apache Flink"	"https://flink.apache.org/"	"Fast and reliable large-scale data processing engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1436"	"222"	"934"	"GitHub - apache/flink: Mirror of Apache Flink Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 222 Star 1,436 Fork 934 apache/flink mirrored from git://git.apache.org/flink.git Code Pull requests 111 Pulse Graphs Mirror of Apache Flink 9,175 commits 59 branches 20 releases 206 contributors Java 85.5% Scala 13.1% Python 0.6% HTML 0.3% CoffeeScript 0.2% Shell 0.2% Other 0.1% Java Scala Python HTML CoffeeScript Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master release-0.4-alpha.0 release-0.4-alpha.1 release-0.4-alpha.2 release-0.4-alpha.3 release-0.4-rc1 release-0.4 release-0.5-rc1 release-0.5 release-0.5.1 release-0.6-rc7 release-0.6 release-0.6.1-rc0 release-0.6.1 release-0.6.2 release-0.7 release-0.7.0 release-0.8-rc3 release-0.8 release-0.8.1-rc1 release-0.8.1-rc2 release-0.9 release-0.9.0-milestone-1-rc1 release-0.9.0-milestone-1 release-0.9.0-rc1 release-0.9.0-rc2 release-0.9.0-rc3 release-0.9.0-rc4 release-0.9.1-rc0 release-0.9.1-rc1 release-0.10 release-0.10.0-milestone-1-rc1 release-0.10.0-milestone-1 release-0.10.0-rc0 release-0.10.0-rc1 release-0.10.0-rc2 release-0.10.0-rc3 release-0.10.0-rc4 release-0.10.0-rc5 release-0.10.0-rc6 release-0.10.0-rc7 release-0.10.0-rc8 release-0.10.1-rc1 release-0.10.2-rc1 release-0.10.2-rc2 release-1.0 release-1.0.0-rc1 release-1.0.0-rc2 release-1.0.0-rc3 release-1.0.0-rc4 release-1.0.0-rc5 release-1.0.1-rc1 release-1.0.2-rc1 release-1.0.2-rc2 release-1.0.2-rc3 release-1.0.3-rc1 release-1.0.3-rc2 release-1.0.3-rc3 travis_test Nothing to show v0.4-rc1 release-1.0.3 release-1.0.2 release-1.0.1 release-1.0.0 release-0.10.2 release-0.10.1 release-0.10.0 release-0.9.1 release-0.9.0 release-0.8.1 release-0.8.0 release-0.7.0 release-0.6 release-0.5 release-0.5-rc3 release-0.5-rc2 release-0.5-rc1 release-0.4 pre-apache-rename Nothing to show New pull request Latest commit e9f660d Jul 13, 2016 StephanEwen [FLINK-3466] [runtime] Make state handles cancelable. … State handles are cancelable, to make sure long running checkpoint restore operations do finish early on cancallation, even if the code does not properly react to interrupts.  This is especially important since HDFS client code is so buggy that it deadlocks when interrupted without closing. Permalink Failed to load latest commit information. docs [FLINK-4017] [py] Add Aggregation support to Python API Jul 15, 2016 flink-annotations [FLINK-3129] Bring infrastructure for ensuring interface stability in… May 27, 2016 flink-batch-connectors [FLINK-3995] [build] Properly structure test scopes and dependencies Jul 5, 2016 flink-clients [FLINK-3995] [build] Properly structure test scopes and dependencies Jul 5, 2016 flink-contrib [FLINK-3466] [runtime] Make state handles cancelable. Jul 15, 2016 flink-core [FLINK-3466] [runtime] Make state handles cancelable. Jul 15, 2016 flink-dist [FLINK-3675][yarn] improvements to library shipping Jul 1, 2016 flink-examples [FLINK-3995] [build] Properly structure test scopes and dependencies Jul 5, 2016 flink-fs-tests [FLINK-3995] [build] Fix failing tests and add missing dependencies Jul 5, 2016 flink-java [FLINK-3477] [runtime] Add hash-based combine strategy for ReduceFunc… Jul 13, 2016 flink-java8 [FLINK-3995] [build] Properly structure test scopes and dependencies Jul 5, 2016 flink-libraries [FLINK-4017] [py] Add Aggregation support to Python API Jul 15, 2016 flink-metrics [FLINK-4184] [metrics] Replace invalid characters in ScheduledDropwiz… Jul 15, 2016 flink-optimizer [FLINK-3477] [runtime] Add hash-based combine strategy for ReduceFunc… Jul 13, 2016 flink-quickstart [FLINK-4159] Remove Quickstart exclusions for unused dependencies Jul 13, 2016 flink-runtime-web [FLINK-4214] [web dashboard] Properly increment the exceptions counter Jul 14, 2016 flink-runtime [FLINK-3466] [runtime] Make state handles cancelable. Jul 15, 2016 flink-scala-shell [FLINK-4111] [table] Flink Table & SQL doesn't work in very simple ex… Jul 12, 2016 flink-scala [FLINK-3477] [runtime] Add hash-based combine strategy for ReduceFunc… Jul 13, 2016 flink-shaded-curator [FLINK-3129] Bring infrastructure for ensuring interface stability in… May 27, 2016 flink-shaded-hadoop [FLINK-3129] Bring infrastructure for ensuring interface stability in… May 27, 2016 flink-streaming-connectors [FLINK-4186] Use Flink metrics to report Kafka metrics Jul 15, 2016 flink-streaming-java [FLINK-3466] [runtime] Make state handles cancelable. Jul 15, 2016 flink-streaming-scala [FLINK-4111] [table] Flink Table & SQL doesn't work in very simple ex… Jul 12, 2016 flink-test-utils-parent [FLINK-3995] [build] Fix failing tests and add missing dependencies Jul 5, 2016 flink-tests [FLINK-3466] [tests] Add serialization validation for state handles Jul 15, 2016 flink-yarn-tests [FLINK-4127] Check API compatbility for 1.1 in flink-core Jul 13, 2016 flink-yarn [FLINK-4127] Check API compatbility for 1.1 in flink-core Jul 13, 2016 tools [tools] Update copy files function in release script Jul 7, 2016 .editorconfig [tools] add more defaults to .editorconfig Nov 27, 2015 .gitattributes [hotfix] Fix repository language statistics by adjusting .gitattributes Aug 10, 2015 .gitignore [FLINK-3887] improve dependency management for building docs May 31, 2016 .travis.yml [hotfix] [build] Include Kinesis tests in CI builds Jul 7, 2016 CONTRIBUTING.md FLINK-3529 Add template for pull requests Apr 6, 2016 LICENSE [licenses] Remove not included dependency from LICENSE Jul 15, 2016 NOTICE [FLINK-2358] [dashboard] Adding comments to web dashboard files, add … Jul 21, 2015 PULL_REQUEST_TEMPLATE.md [FLINK-3428] Minor fixes Apr 28, 2016 README.md [FLINK-2544] [docs] Add Java 8 version for building PowerMock tests t… Apr 15, 2016 deploysettings.xml Updated all JobManager and TaskManager relevant test cases to work wi… Dec 18, 2014 pom.xml [FLINK-4111] [table] Flink Table & SQL doesn't work in very simple ex… Jul 12, 2016 README.md Apache Flink Apache Flink is an open source stream processing framework with powerful stream- and batch-processing capabilities. Learn more about Flink at http://flink.apache.org/ Features A streaming-first runtime that supports both batch processing and data streaming programs Elegant and fluent APIs in Java and Scala A runtime that supports very high throughput and low event latency at the same time Support for event time and out-of-order processing in the DataStream API, based on the Dataflow Model Flexible windowing (time, count, sessions, custom triggers) accross different time semantics (event time, processing time) Fault-tolerance with exactly-once processing guarantees Natural back-pressure in streaming programs Libraries for Graph processing (batch), Machine Learning (batch), and Complex Event Processing (streaming) Built-in support for iterative programs (BSP) in the DataSet (batch) API Custom memory management for efficient and robust switching between in-memory and out-of-core data processing algorithms Compatibility layers for Apache Hadoop MapReduce and Apache Storm Integration with YARN, HDFS, HBase, and other components of the Apache Hadoop ecosystem Streaming Example case class WordWithCount(word: String, count: Long)  val text = env.socketTextStream(host, port, '\n')  val windowCounts = text.flatMap { w => w.split(""\\s"") }   .map { w => WordWithCount(w, 1) }   .keyBy(""word"")   .timeWindow(Time.seconds(5))   .sum(""count"")  windowCounts.print() Batch Example case class WordWithCount(word: String, count: Long)  val text = env.readTextFile(path)  val counts = text.flatMap { w => w.split(""\\s"") }   .map { w => WordWithCount(w, 1) }   .groupBy(""word"")   .sum(""count"")  counts.writeAsCsv(outputPath) Building Apache Flink from Source Prerequisites for building Flink: Unix-like environment (We use Linux, Mac OS X, Cygwin) git Maven (we recommend version 3.0.4) Java 7 or 8 git clone https://github.com/apache/flink.git cd flink mvn clean package -DskipTests # this will take up to 10 minutes  Flink is now installed in build-target NOTE: Maven 3.3.x can build Flink, but will not properly shade away certain dependencies. Maven 3.0.3 creates the libraries properly. To build unit tests with Java 8, use Java 8u51 or above to prevent failures in unit tests that use the PowerMock runner. Developing Flink The Flink committers use IntelliJ IDEA and Eclipse IDE to develop the Flink codebase. We recommend IntelliJ IDEA for developing projects that involve Scala code. Minimal requirements for an IDE are: Support for Java and Scala (also mixed projects) Support for Maven with Java and Scala IntelliJ IDEA The IntelliJ IDE supports Maven out of the box and offers a plugin for Scala development. IntelliJ download: https://www.jetbrains.com/idea/ IntelliJ Scala Plugin: http://plugins.jetbrains.com/plugin/?id=1347 Check out our Setting up IntelliJ guide for details. Eclipse Scala IDE For Eclipse users, we recommend using Scala IDE 3.0.3, based on Eclipse Kepler. While this is a slightly older version, we found it to be the version that works most robustly for a complex project like Flink. Further details, and a guide to newer Scala IDE versions can be found in the How to setup Eclipse docs. Note: Before following this setup, make sure to run the build from the command line once (mvn clean install -DskipTests, see above) Download the Scala IDE (preferred) or install the plugin to Eclipse Kepler. See How to setup Eclipse for download links and instructions. Add the ""macroparadise"" compiler plugin to the Scala compiler. Open ""Window"" -> ""Preferences"" -> ""Scala"" -> ""Compiler"" -> ""Advanced"" and put into the ""Xplugin"" field the path to the macroparadise jar file (typically ""/home/-your-user-/.m2/repository/org/scalamacros/paradise_2.10.4/2.0.1/paradise_2.10.4-2.0.1.jar""). Note: If you do not have the jar file, you probably did not run the command line build. Import the Flink Maven projects (""File"" -> ""Import"" -> ""Maven"" -> ""Existing Maven Projects"") During the import, Eclipse will ask to automatically install additional Maven build helper plugins. Close the ""flink-java8"" project. Since Eclipse Kepler does not support Java 8, you cannot develop this project. Support Don’t hesitate to ask! Contact the developers and community on the mailing lists if you need any help. Open an issue if you found a bug in Flink. Documentation The documentation of Apache Flink is located on the website: http://flink.apache.org or in the docs/ directory of the source code. Fork and Contribute This is an active open-source project. We are always open to people who want to use the system or contribute to it. Contact us if you are looking for implementation tasks that fit your skills. This article describes how to contribute to Apache Flink. About Apache Flink is an open source project of The Apache Software Foundation (ASF). The Apache Flink project originated from the Stratosphere research project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/apache/flink"	"Fast and reliable large-scale data processing engine."	"true"
"Machine Learning"	"Apache Mahout"	"https://mahout.apache.org/"	"Scalable algorithms focused on collaborative filtering, clustering and classification."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Mahout: Scalable machine learning and data mining General Downloads Who we are Mailing Lists Release Notes Books, Tutorials, Talks Powered By Mahout Professional Support Resources Reference Reading FAQ Legal License Security Privacy Policy Developers Developer resources Version control Build from source Issue tracker Code quality reports Contributions How to contribute How to become a committer GSoC For committers How to update the website Patch check list Handling Github PRs How to release Third party dependencies Mahout-Samsara Scala & Spark Bindings Overview FAQ Flink Bindings Overview Engines Spark H2O Flink References In-Core Algebraic DSL Reference Distributed Algebraic DSL Reference Tutorials Playing with Mahout's Spark Shell How to build an app Building a text classifier in Mahout's Spark Shell Algorithms List of algorithms Distributed Matrix Decomposition Cholesky QR SSVD Recommendations Recommender Overview Intro to cooccurrence-based recommendations with Spark Classification Spark Naive Bayes MapReduce Basics List of algorithms Overview Working with text Creating vectors from text Collocations Dimensionality reduction Singular Value Decomposition Stochastic SVD Topic Models Latent Dirichlet Allocation Mahout MapReduce Classification Naive Bayes Hidden Markov Models Logistic Regression (Single Machine) Random Forest Classification Examples Breiman example 20 newsgroups example SGD classifier bank marketing Wikipedia XML parser and classifier Clustering k-Means Canopy Fuzzy k-Means Streaming KMeans Spectral Clustering Clustering Commandline usage Options for k-Means Options for Canopy Options for Fuzzy k-Means Clustering Examples Synthetic data Cluster Post processing Cluster Dumper tool Cluster visualisation Recommendations First Timer FAQ A user-based recommender in 5 minutes Matrix factorization-based recommenders Overview Intro to item-based recommendations with Hadoop Intro to ALS recommendations with Hadoop Twitter Tweets by @ApacheMahout Apache Software Foundation How the ASF works Get Involved Developer Resources Sponsorship Thanks Related Projects Apache Lucene Apache Hadoop Apache Bigtop Apache Spark Apache Flink What is Apache Mahout? The Apache Mahout™ project's goal is to build an environment for quickly creating scalable performant machine learning applications. Latest release version 0.12.2 has Apache Mahout Samsara Environment includes Distributed Algebraic optimizer R-Like DSL Scala API Linear algebra operations Ops are extensions to Scala IScala REPL based interactive shell Integrates with compatible libraries like MLLib Runs on distributed Spark, H2O, and Flink fastutil to speed up sparse matrix and vector computations Matrix to tsv conversions for integration with Apache Zeppelin Apache Mahout Samsara Algorithms included Stochastic Singular Value Decomposition (ssvd, dssvd) Stochastic Principal Component Analysis (spca, dspca) Distributed Cholesky QR (thinQR) Distributed regularized Alternating Least Squares (dals) Collaborative Filtering: Item and Row Similarity Naive Bayes Classification Distributed and in-core Apache Mahout software provides three major features: A simple and extensible programming environment and framework for building scalable algorithms A wide variety of premade algorithms for Scala + Apache Spark, H2O, Apache Flink Samsara, a vector math experimentation environment with R-like syntax which works at scale Read an Overview of programming a Mahout Samsara Application, learn How To Contribute to Mahout, report an issue, bug, or suggestion in our JIRA, see the Samsara bindings for Scala and Spark, and contact us on our mailing lists. 13 Jun 2016 - Apache Mahout 0.12.2 released Mahout 0.12.2 is a minor release following 0.12.1 that provides Matrix exports for Apache Zeppelin integration along with a few minor bug fixes and dependency upgrades. 19 May 2016 - ""Visualizing Apache Mahout in R via Apache Zeppelin"" posted A tutorial on connecting Mahout, R, Spark, and Zeppelin by Trevor Grant showing how to plot results in Apache Zeppelin. 18 May 2016 - Apache Mahout 0.12.1 released Mahout 0.12.1 is a minor release following 0.12.0 that fixes issues in the newly added Flink backend and supports Flink 1.0.3. 11 Apr 2016 - Apache Mahout 0.12.0 released The Mahout 0.12.0 release marks a major milestone for the “Samsara” environment’s goal of providing an engine neutral math platform by now supporting Flink. While still experimental, the mahout Flink bindings now offer all of the R-Like semantics for linear algebra operations, matrix decompositions, and algorithms of the “Samsara” platform for execution on a Flink back-end. 12 Mar 2016 - Apache Mahout 0.11.2 released Apache Mahout introduces a new math environment called Samsara, for its theme of universal renewal. It reflects a fundamental rethinking of how scalable machine learning algorithms are built and customized. Mahout-Samsara is here to help people create their own math while providing some off-the-shelf algorithm implementations. At its core are general linear algebra and statistical operations along with the data structures to support them. You can use is as a library or customize it in Scala with Mahout-specific extensions that look something like R. Mahout-Samsara comes with an interactive shell that runs distributed operations on an Apache Spark cluster. This make prototyping or task submission much easier and allows users to customize algorithms with a whole new degree of freedom. Mahout Algorithms include many new implementations built for speed on Mahout-Samsara. They run on Spark 1.3+, Flink 1.0.1, and some on H2O, which means as much as a 10x speed increase. You’ll find robust matrix decomposition algorithms as well as a Naive Bayes classifier and collaborative filtering. The new spark-itemsimilarity enables the next generation of cooccurrence recommenders that can use entire user click streams and context in making recommendations. Our release notes have details. Interested in helping? Join the Mailing lists. Mahout News¶ 13 June 2016 - Apache Mahout 0.12.2 released¶ 18 May 2016 - Apache Mahout 0.12.1 released¶ 11 April 2016 - Apache Mahout 0.12.0 released¶ 12 March 2016 - Apache Mahout 0.11.2 released¶ 23 February 2016 - New Apache Mahout Book - ""Apache Mahout: Beyond MapReduce"" by D.Lyubimov and A.Palumbo released. See Mahout ""Samsara"" Book Is Out¶ 6 November 2015 - Apache Mahout 0.11.1 released¶ 7 August 2015 - Apache Mahout 0.11.0 released¶ 6 August 2015 - Apache Mahout 0.10.2 released¶ 31 May 2015 - Apache Mahout 0.10.1 released¶ 11 April 2015 - Apache Mahout 0.10.0 released¶ 1 February 2014 - Apache Mahout 0.9 released¶ Visit our release notes page for details. 25 July 2013 - Apache Mahout 0.8 released¶ Visit our release notes page for details. 16 June 2012 - Apache Mahout 0.7 released¶ Visit our release notes page for details. 6 Feb 2012 - Apache Mahout 0.6 released¶ Visit our release notes page for details. 9 Oct 2011 - Mahout in Action released¶ The book Mahout in Action is available in print. Sean Owen, Robin Anil, Ted Dunning and Ellen Friedman thank the community (especially those who were reviewers) for input during the process and hope it is enjoyable. Find Mahout in Action at your favorite bookstore, or order print and eBook copies from Manning -- use discount code ""mahout37"" for 37% off. Copyright © 2014-2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache Mahout, Mahout, Apache, the Apache feather logo, and the elephant rider logo are either registered trademarks or trademarks of The Apache Software Foundation in the United States and other countries."	"null"	"null"	"Scalable algorithms focused on collaborative filtering, clustering and classification."	"true"
"Machine Learning"	"Apache Spark"	"http://spark.apache.org/"	"Data analytics cluster computing framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Spark™ - Lightning-Fast Cluster Computing        Lightning-fast cluster computing Toggle navigation Download Libraries SQL and DataFrames Spark Streaming MLlib (machine learning) GraphX (graph) Third-Party Packages Documentation Latest Release (Spark 1.6.2) Other Resources Examples Community Mailing Lists Events and Meetups Project History Powered By Project Committers Issue Tracker FAQ Apache Software Foundation Apache Homepage License Sponsorship Thanks Security Latest News Spark 1.6.2 released (Jun 25, 2016) Call for Presentations for Spark Summit EU is Open (Jun 16, 2016) Preview release of Spark 2.0 (May 26, 2016) Spark Summit (June 6, 2016, San Francisco) agenda posted (Apr 17, 2016) Archive Download Spark Built-in Libraries: SQL and DataFrames Spark Streaming MLlib (machine learning) GraphX (graph) Third-Party Packages Apache Spark™ is a fast and general engine for large-scale data processing. Speed Run programs up to 100x faster than Hadoop MapReduce in memory, or 10x faster on disk. Apache Spark has an advanced DAG execution engine that supports cyclic data flow and in-memory computing. Logistic regression in Hadoop and Spark Ease of Use Write applications quickly in Java, Scala, Python, R. Spark offers over 80 high-level operators that make it easy to build parallel apps. And you can use it interactively from the Scala, Python and R shells. text_file = spark.textFile(""hdfs://..."")   text_file.flatMap(lambda line: line.split())     .map(lambda word: (word, 1))     .reduceByKey(lambda a, b: a+b) Word count in Spark's Python API Generality Combine SQL, streaming, and complex analytics. Spark powers a stack of libraries including SQL and DataFrames, MLlib for machine learning, GraphX, and Spark Streaming. You can combine these libraries seamlessly in the same application. Runs Everywhere Spark runs on Hadoop, Mesos, standalone, or in the cloud. It can access diverse data sources including HDFS, Cassandra, HBase, and S3. You can run Spark using its standalone cluster mode, on EC2, on Hadoop YARN, or on Apache Mesos. Access data in HDFS, Cassandra, HBase, Hive, Tachyon, and any Hadoop data source. Community Spark is used at a wide range of organizations to process large datasets. You can find example use cases at the Spark Summit conference, or on the Powered By page. There are many ways to reach the community: Use the mailing lists to ask questions. In-person events include numerous meetup groups and Spark Summit. We use JIRA for issue tracking. Contributors Apache Spark is built by a wide set of developers from over 200 companies. Since 2009, more than 1000 developers have contributed to Spark! The project's committers come from 19 organizations. If you'd like to participate in Spark, or contribute to the libraries on top of it, learn how to contribute. Getting Started Learning Spark is easy whether you come from a Java or Python background: Download the latest release — you can run Spark locally on your laptop. Read the quick start guide. Spark Summit 2014 contained free training videos and exercises. Learn how to deploy Spark on a cluster. Download Apache Spark Apache Spark, Spark, Apache, and the Spark logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Data analytics cluster computing framework."	"true"
"Machine Learning"	"DeepDive"	"http://deepdive.stanford.edu"	"Creates structured information from unstructured data and integrates it into an existing database."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"918"	"131"	"255"	"GitHub - HazyResearch/deepdive: DeepDive Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 131 Star 918 Fork 255 HazyResearch/deepdive Code Issues 38 Pull requests 1 Wiki Pulse Graphs DeepDive http://deepdive.stanford.edu 3,651 commits 38 branches 13 releases 32 contributors Shell 80.5% Python 14.5% JSONiq 3.3% Makefile 1.7% Shell Python JSONiq Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags balance_example brett-drill-db-driver build-inside-docker cat_test chain_exmaple cpp-includes-macros-support data-programming-pipelined data-programming ddlib-additions deepdive-corenlp df_schema_support doc_theo feiran-partition fix-distributed-by-greenplum fix_cat_grounding fusion jdbc_removal master matteo-snowball netj-installer-utils nifty-ddlog-compiler paleoutil pip quality-branch raphael-impala raphael-oneistrue-factor schema_support_dev schema_support tab-separated-jsons thomas-ddlib tutorial-in-a-notebook v0.6.x v0.7.x v0.8.x yuke zifei-nlp-extractor zifei-pgxl zifei-stable Nothing to show v0.8.0 v0.8-STABLE v0.7.1 v0.7.0 v0.6.0 v0.0.3-alpha.1 UNSTABLE 0.05-RELEASE 0.04.1-RELEASE 0.04-RELEASE 0.03.2-RELEASE 0.0.3-alpha.1 0.0.3-alpha Nothing to show New pull request Latest commit 8e20e16 Jul 11, 2016 alldefector committed on GitHub Merge pull request #561 from HazyResearch/fix_cat_grounding … Fix categorical grounding: GROUP_BY non_category_weight_cols Permalink Failed to load latest commit information. compiler ddlog master Jul 11, 2016 database Supresses noise from db-driver during create table/view Jul 6, 2016 ddlib ddlib.util.PGTSVParser to fails fast on unsupported types Jul 5, 2016 doc Updates sampler documentation (fixes #516) Jul 5, 2016 examples remove phony skip chain factor from chunking example Jul 11, 2016 extern python-virtualenv should ignore bin/activate_this.py Jul 5, 2016 inference Add chain example: illustrate bad Gibbs and bad linear semantics Jul 7, 2016 runner Fixes local compute-driver to show the non-zero exit status Jul 6, 2016 shell Fixes to correctly activate python virtualenv Jul 6, 2016 test remove phony skip chain factor from chunking example Jul 12, 2016 util Decides to set LC_ALL=en_US.UTF-8 internally Jul 6, 2016 .gitignore Purge ""multinomial"" Jun 19, 2016 .gitmodules hocon2json switches to pyhocon Jul 4, 2016 .travis.tar.enc Fixes Travis encrypted files Feb 25, 2016 .travis.yml Fixes travis config that broke testing PRs from forks Jul 5, 2016 LICENSE-2.0.txt Add license Feb 11, 2014 Makefile hocon2json switches to pyhocon Jul 5, 2016 README.md Adds installer one-liner command to README May 25, 2016 stage.sh Makes `deepdive do` non-interactive by default Jul 5, 2016 README.md DeepDive See deepdive.stanford.edu or doc/ to learn how to install and use DeepDive. Or, just start with this one-liner command: bash <(curl -fsSL git.io/getdeepdive) Read the DeepDive developer's guide to learn more about this source tree and how to contribute. Licensed under Apache License, Version 2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/HazyResearch/deepdive"	"Creates structured information from unstructured data and integrates it into an existing database."	"true"
"Machine Learning"	"Deeplearning4j"	"http://deeplearning4j.org/"	"Distributed and multi-threaded deep learning library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Deeplearning4j · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization Deeplearning4j Open-source, distributed deep learning for the JVM on Spark with GPUs San Francisco, Outer Space http://deeplearning4j.org help@skymind.io Repositories People 6 Filters Sources Forks Java 3,375 1,183 deeplearning4j Deep Learning for Java, Scala & Clojure on Hadoop & Spark With GPUs - From Skymind Updated Jul 15, 2016 Scala 2 5 lagom-service-locator-zookeeper forked from jboner/lagom-service-locator-zookeeper Lagom Service Locator for ZooKeeper Updated Jul 15, 2016 Java 475 209 nd4j Fast, Scientific and Numerical Computing for the JVM (NDArrays) Updated Jul 15, 2016 C++ 21 22 libnd4j The C++ engine that powers the scientific computing library ND4J - n-dimensional arrays for Java Updated Jul 14, 2016 Java 111 213 dl4j-0.4-examples Please use these examples based on deeplearning4j 0.4.* release. Updated Jul 14, 2016 Java 10 9 ImageNet-Example Work in progress and based on SNAPSHOT. This repository includes standard models and examples to run the ImageNet dataset. Updated Jul 12, 2016 Java 104 81 Canova forked from jpatanooga/Canova General Vectorization Lib for Machine Learning Tools Updated Jul 11, 2016 Java 3 1 DataVec ETL Library for Machine Learning Updated Jul 11, 2016 Java 6 8 ComputerVision-examples Uses SNAPSHOT (code in development). Computer vision focused examples. Updated Jul 11, 2016 Java 29 29 dl4j-spark-cdh5-examples Examples to run on CDH5 with Spark Updated Jul 11, 2016 Java 7 8 Arbiter A platform agnostic Evaluation tool for Machine Learning algorithms Updated Jul 11, 2016 Shell 1 1 dl4j-test-resources Repo for the testa data used in dl4j's tests. This is meant to be a standalone repo so this repo is only used during tests Updated Jul 11, 2016 Java 4 5 model-configurations Neural net models for machine vision and other tasks Updated Jul 8, 2016 Java 0 0 hadoop-summit-scenes Updated Jun 29, 2016 Java 11 5 dl4j-streaming Updated Jun 28, 2016 Scala 134 23 nd4s ND4S: N-Dimensional Arrays for Scala. Scientific Computing a la Numpy. Based on ND4J. Updated May 31, 2016 Makefile 1 1 docker Updated Mar 21, 2016 Java 0 0 gradientcheck-tests Updated Mar 16, 2016 JavaScript 1 0 UiServer Standalone UiServer for DeepLearning4j Updated Mar 3, 2016 Java 4 7 nd4j-benchmark Updated Feb 18, 2016 Previous 1 2 3 Next 6 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/deeplearning4j/"	"Distributed and multi-threaded deep learning library."	"true"
"Machine Learning"	"H2O"	"http://www.h2o.ai/"	"Analytics engine for statistics over big data."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"H2O.ai · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization H2O.ai Fast Scalable Machine Learning For Smarter Applications Mountain View, CA http://h2o.ai support@0xdata.com Repositories People 3 Filters Sources Forks C++ 4 0 deepwater Deep Learning in H2O using Native GPU Backends Updated Jul 15, 2016 Java 1,195 499 h2o-3 Open Source Fast Scalable Machine Learning API For Smarter Applications (Deep Learning, Gradient Boosting, Random Forest, Generalized Linear Modeling (Logistic Regression, Elastic Net), K-Means, PCA...) Updated Jul 15, 2016 JavaScript 50 27 h2o-flow Web based interactive computing environment for H2O Updated Jul 14, 2016 Scala 333 131 sparkling-water Sparkling Water provides H2O functionality inside Spark cluster Updated Jul 14, 2016 Jupyter Notebook 48 37 h2o-meetups Updated Jul 13, 2016 Java 13 10 h2o-droplets Templates for projects based on top of H2O. Updated Jul 5, 2016 Jupyter Notebook 101 109 h2o-tutorials Tutorials and training material Updated Jun 30, 2016 Java 36 29 h2o-world-2014-training training material Updated Jun 24, 2016 Java 0 72 incubator-metron forked from apache/incubator-metron Mirror of Apache Metron (Incubating) Updated Jun 9, 2016 Java 2,004 531 h2o-2 h2o = fast statistical, machine learning & math runtime for bigdata Updated Apr 18, 2016 HTML 2 1 app-malicious-domains Domain name classifier looking for good vs. possibly malicious providers Updated Mar 17, 2016 CSS 16 8 data-science-examples A collection of data science examples implemented across a variety of languages and libraries. Updated Jan 14, 2016 3 44 docker-python forked from Kaggle/docker-python Kaggle Python docker image Updated Dec 9, 2015 Java 9 6 qcon2015 Repository for SF QConf 2015 Workshop Updated Nov 20, 2015 HTML 5 9 app-consumer-loan Updated Nov 6, 2015 Scala 1 0 app-ask-craig Ask Craig application Updated Oct 21, 2015 Java 0 0 h2o-scoring-service Scoring service backend by model POJOs. Updated Oct 2, 2015 HTML 0 0 app-titanic Updated Sep 28, 2015 Scala 2 5 app-news-classification Updated Sep 25, 2015 CoffeeScript 3 0 fluid Rapid application development for a more... civilized age. Updated Sep 9, 2015 Previous 1 2 Next 3 People arnocandel Arno Candel ashrith Ashrith Barthur ledell Erin LeDell Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/h2oai/"	"Analytics engine for statistics over big data."	"true"
"Machine Learning"	"JSAT"	"https://github.com/EdwardRaff/JSAT"	"Algorithms for pre-processing, classification, regression, and clustering with support for multi-threaded execution."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"176"	"31"	"57"	"GitHub - EdwardRaff/JSAT: Java Statistical Analysis Tool, a Java library for Machine Learning Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 176 Fork 57 EdwardRaff/JSAT Code Issues 7 Pull requests 1 Wiki Pulse Graphs Java Statistical Analysis Tool, a Java library for Machine Learning 1,272 commits 2 branches 5 releases 8 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags WarmStartDev master Nothing to show 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit 02b8154 Jul 11, 2016 EdwardRaff Improved PAM test reliability, made it repeat. Permalink Failed to load latest commit information. JSAT Improved PAM test reliability, made it repeat. Jul 11, 2016 .gitignore Converting project from to Maven Mar 24, 2015 LICENSE.txt Create LICENSE.txt Mar 24, 2015 README.md Incrementing version number May 30, 2016 README.md Java Statistical Analysis Tool JSAT is a library for quickly getting started with Machine Learning problems. It is developed in my free time, and made available for use under the GPL 3. Part of the library is for self education, as such - all code is self contained. JSAT has no external dependencies, and is pure Java. I also aim to make the library suitably fast for small to medium size problems. As such, much of the code supports parallel execution. Get JSAT You can download JSAT from maven central, add the below to your pom file <dependencies>   <dependency>     <groupId>com.edwardraff</groupId>     <artifactId>JSAT</artifactId>     <version>0.0.5</version>   </dependency> </dependencies> I will also host a snapshot directory, to access it - change ""maven-repo"" to ""maven-snapshot-repo"" for the ""<url>"" tag. Why use JSAT? For reasarch and specialized needs, JSAT has one of the largest collections of algorithms available in any framework. See an incomplete list here. Additional, there are unfortunately not as many ML tools for Java as there are for other lanagues. Compared to Weka, JSAT is usually faster. If you want to use JSAT and the GPL is not something that will work for you, let me know and we can discuss the issue. See the wiki for more information as well as some examples on how to use JSAT. Note Updates to JSAT may be slowed as I begin a PhD program in Computer Science. The project isn’t abandoned! I just have limited free time, and will be balancing my PhD work with a full time job. If you discover more hours in the day, please let me know! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/EdwardRaff/JSAT"	"Algorithms for pre-processing, classification, regression, and clustering with support for multi-threaded execution."	"true"
"Machine Learning"	"Oryx 2"	"https://github.com/OryxProject/oryx"	"A framework for building real-time large scale machine learning applications, which also includes end-to-end applications for collaborative filtering, classification, regression, and clustering."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"833"	"146"	"220"	"GitHub - OryxProject/oryx: Oryx 2: Lambda architecture on Apache Spark, Apache Kafka for real-time large scale machine learning Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 146 Star 833 Fork 220 OryxProject/oryx Code Issues 4 Pull requests 1 Pulse Graphs Oryx 2: Lambda architecture on Apache Spark, Apache Kafka for real-time large scale machine learning http://oryx.io 921 commits 6 branches 12 releases 10 contributors Java 97.6% Shell 1.3% Scala 1.1% Java Shell Scala Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0.x 2.1.x 2.2.x coverity_scan gh-pages master Nothing to show oryx-2.2.0 oryx-2.1.2 oryx-2.1.1 oryx-2.1.0 oryx-2.0.2 oryx-2.0.1 oryx-2.0.0 oryx-2.0.0-beta-3 oryx-2.0.0-beta-2 oryx-2.0.0-beta-1 oryx-2.0.0-alpha-2 oryx-2.0.0-alpha-1 Nothing to show New pull request Latest commit c2f9601 Jul 14, 2016 srowen Update perf benchmark for 2.2 Permalink Failed to load latest commit information. .github Add PR / issue template; update plugins, SLF4J, JPMML, snappy Apr 19, 2016 app Update perf benchmark for 2.2 Jul 14, 2016 deploy Update master to 2.3.0-SNAPSHOT Apr 22, 2016 framework Tomcat 8.5 will allow non-existent server header now Jul 2, 2016 src Update perf benchmark for 2.2 Jul 14, 2016 .gitignore Added checkstyle, classpath, project, and settings to gitignore Jun 8, 2015 .travis.yml Add CDH 5.8 test config; update plugins Jul 14, 2016 LICENSE Update Apache licensed deps in NOTICE; inline BSD/MIT licenses in LIC… Sep 25, 2015 NOTICE Update Apache licensed deps in NOTICE; inline BSD/MIT licenses in LIC… Sep 25, 2015 README.md Closes #243 : allow JVM args to be set on driver / executor; reenable… Sep 1, 2015 pom.xml Add CDH 5.8 test config; update plugins Jul 14, 2016 README.md Oryx 2 is a realization of the lambda architecture built on Apache Spark and Apache Kafka, but with specialization for real-time large scale machine learning. It is a framework for building applications, but also includes packaged, end-to-end applications for collaborative filtering, classification, regression and clustering. Proceed to the Oryx 2 site for full documentation. Just looking to deploy a ready-made, end-to-end application for collaborative filtering, clustering or classification? Easy. Proceed directly to: Prepare your Hadoop cluster with Cluster Setup Get a Release Prepare a config file from the Configuration Reference Run the binaries with Running Oryx Learn about the REST API endpoints you can call in the API Endpoint Reference Developers can consume Oryx 2 as a framework for building custom applications as well. Following the architecture overview below, proceed to Making an Oryx App to learn how to create a new application. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OryxProject/oryx"	"A framework for building real-time large scale machine learning applications, which also includes end-to-end applications for collaborative filtering, classification, regression, and clustering."	"true"
"Machine Learning"	"Smile"	"http://haifengl.github.io/smile/"	"The Statistical Machine Intelligence and Learning Engine provides a set of machine learning algorithms and a visualization library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2602"	"173"	"346"	"GitHub - haifengl/smile: Statistical Machine Intelligence & Learning Engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 173 Star 2,602 Fork 346 haifengl/smile Code Issues 9 Pull requests 1 Wiki Pulse Graphs Statistical Machine Intelligence & Learning Engine http://haifengl.github.io/smile/ 586 commits 2 branches 1 release 12 contributors Java 85.8% HTML 7.1% Scala 6.9% CSS 0.1% JavaScript 0.1% Shell 0.0% Java HTML Scala CSS JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.1.0 Nothing to show New pull request Latest commit 4b23aff Jul 13, 2016 haifengl committed on GitHub Merge pull request #106 from cranst0n/master … Update README.md Permalink Failed to load latest commit information. benchmark remove unnecessary import May 11, 2016 core support SoftClassifier by Platt Scaling Jun 30, 2016 data Fix: squid:RedundantThrowsDeclarationCheck, Throws declarations shoul… Jun 27, 2016 demo Merge branch 'master' into release/replace-synchronized-classes-fix-1 Jun 27, 2016 graph Fix: squid:RedundantThrowsDeclarationCheck, Throws declarations shoul… Jun 27, 2016 interpolation remove pom.xml Apr 29, 2016 math add abstract interface DenseMatrix Jun 29, 2016 nlp Merge branch 'master' into release/replace-synchronized-classes-fix-1 Jun 27, 2016 plot Fix: squid:RedundantThrowsDeclarationCheck, Throws declarations shoul… Jun 27, 2016 project make pgp plugin local May 11, 2016 scala provide SVD-based least square to handle rank deficient Jun 16, 2016 shell slf4j 1.7.21 Jun 24, 2016 .gitignore move src/universal to shell/src/universal Dec 28, 2015 LICENSE Initial commit Nov 20, 2014 README.md Update README.md Jul 13, 2016 build.sbt add slf4j-simple for test Jun 24, 2016 docker.sh clean up images and exit container automatically Jun 23, 2016 pkg.sh publish signed Mar 17, 2016 smile.sh run smile from stage directory May 2, 2016 smile.snb smile notebook for spark-notebook Jul 1, 2016 README.md Smile Smile (Statistical Machine Intelligence and Learning Engine) is a fast and comprehensive machine learning system. With advanced data structures and algorithms, Smile delivers state-of-art performance. Smile covers every aspect of machine learning, including classification, regression, clustering, association rule mining, feature selection, manifold learning, multidimensional scaling, genetic algorithms, missing value imputation, efficient nearest neighbor search, etc. The core algorithms are implemented in Java and self contained. Core The core machine learning library. Scala The high level operators in Scala. Math Linear algebra, statistical distribution, hypothesis tests, random number generators, sorting, special functions, various kernels, distance and rbf functions. Data Parsers for arff, libsvm, delimited text, sparse matrix, microarray gene expression data. Graph Graph algorithms on adjacency list and matrix. Interpolation One and two dimensional interpolation. NLP Natural language processing. Plot Swing-based data visualization library. Smile is well documented and please check out the project website for programming guides and more information. You can use the libraries through Maven central repository by adding the following to your project pom.xml file.     <dependency>       <groupId>com.github.haifengl</groupId>       <artifactId>smile-core</artifactId>       <version>1.1.0</version>     </dependency>  For NLP, use the artifactId smile-nlp. For Scala API, please use     <dependency>       <groupId>com.github.haifengl</groupId>       <artifactId>smile-scala_2.11</artifactId>       <version>1.1.0</version>     </dependency>  Smile comes with an interactive shell. Download pre-packaged Smile from the releases page. In the home directory of Smile, type     ./bin/smile  to enter the shell, which is based on Scala interpreter. So you can run any valid Scala expressions in the shell. In the simplest case, you can use it as a calculator. Besides, all high-level Smile operators are predefined in the shell. Be default, the shell uses up to 4GB memory. If you need more memory to handle large data, use the option -J-Xmx. For example,     ./bin/smile -J-Xmx8192M  You can also modify the configuration file ./conf/application.ini for the memory and other JVM settings. For detailed helps, checkout the project website. Smile implements the following major machine learning algorithms: Classification Support Vector Machines, Decision Trees, AdaBoost, Gradient Boosting, Random Forest, Logistic Regression, Neural Networks, RBF Networks, Maximum Entropy Classifier, KNN, Naïve Bayesian, Fisher/Linear/Quadratic/Regularized Discriminant Analysis. Regression Support Vector Regression, Gaussian Process, Regression Trees, Gradient Boosting, Random Forest, RBF Networks, OLS, LASSO, Ridge Regression. Feature Selection Genetic Algorithm based Feature Selection, Ensemble Learning based Feature Selection, Signal Noise ratio, Sum Squares ratio. Clustering BIRCH, CLARANS, DBScan, DENCLUE, Deterministic Annealing, K-Means, X-Means, G-Means, Neural Gas, Growing Neural Gas, Hierarchical Clustering, Sequential Information Bottleneck, Self-Organizing Maps, Spectral Clustering, Minimum Entropy Clustering. Association Rule & Frequent Itemset Mining FP-growth mining algorithm Manifold learning IsoMap, LLE, Laplacian Eigenmap, PCA, Kernel PCA, Probabilistic PCA, GHA, Random Projection Multi-Dimensional Scaling Classical MDS, Isotonic MDS, Sammon Mapping Nearest Neighbor Search BK-Tree, Cover Tree, KD-Tree, LSH Sequence Learning Hidden Markov Model, Conditional Random Field. Natural Language Processing Sentence Splitter and Tokenizer, Bigram Statistical Test, Phrase Extractor, Keyword Extractor, Stemmer, POS Tagging, Relevance Ranking Model Serialization You may notice that most models support the Java Serializable interface (all classifiers do support Serializable interface). It is because the exact format is hard to keep stable, class changes can easily make your serialized data unreadable, reading/writing the data in non-Java code is almost impossible. Currently, we suggest XStream to serialize the trained models. XStream is a simple library to serialize objects to XML and back again. XStream is easy to use and doesn't require mappings (actually requires no modifications to objects). Protostuff is a nice alternative that supports forward-backward compatibility (schema evolution) and validation. Beyond XML, Protostuff supports many other formats such as JSON, YAML, protobuf, etc. For some predictive models, we look forward to supporting PMML (Predictive Model Markup Language), an XML-based file format developed by the Data Mining Group. Smile Scala API provides read and write functions in package smile.io to read and save models by XStream. SmilePlot Smile also has a Swing-based data visualization library SmilePlot, which provides scatter plot, line plot, staircase plot, bar plot, box plot, histogram, 3D histogram, dendrogram, heatmap, hexmap, QQ plot, contour plot, surface, and wireframe. The class PlotCanvas provides builtin functions such as zoom in/out, export, print, customization, etc. SmilePlot requires SwingX library for JXTable. But if your environment cannot use SwingX, it is easy to remove this dependency by using JTable. To use SmilePlot, add the following to dependencies     <dependency>       <groupId>com.github.haifengl</groupId>       <artifactId>smile-plot</artifactId>       <version>1.1.0</version>     </dependency>  Demo Gallery Kernel PCA IsoMap Multi-Dimensional Scaling SOM Neural Network SVM Agglomerative Clustering X-Means DBScan Neural Gas Wavelet Exponential Family Mixture Tutorial This tutorial shows how to use the Smile Java API for predictive modeling (classification and regression). It includes loading data, training and testing the model, and applying the model. If you use Scala, we strongly recommend the new high level Scala API, which is similar to R and Matlab. The programming guide with Scala API is available at project website. Load Data Most Smile algorithms take simple double[] as input so you can use your favorite methods or library to import the data as long as the samples are in double arrays. To make life easier, Smile does provide a couple of parsers for popular data formats, such as Weka's ARFF files, LibSVM's file format, delimited text files, and binary sparse data. These classes are in the package smile.data.parser. The package smile.data.parser.microarray also provides several parsers for microarray gene expression datasets, including GCT, PCL, RES, and TXT files. In the following example, we use the ARFF parser to load the weather dataset: ArffParser arffParser = new ArffParser(); arffParser.setResponseIndex(4); AttributeDataset weather = arffParser.parse(new FileInputStream(""data/weka/weather.nominal.arff"")); double[][] x = weather.toArray(new double[weather.size()][]); int[] y = weather.toArray(new int[weather.size()]); Note that the data file weather.nominal.arff is in Smile distribution package. After unpacking the package, there is a lot of testing data in the directory of $smile/data, where $smile is the the root of Smile package. In the second line, we use setResponseIndex to set the column index (starting at 0) of the dependent/response variable. In supervised learning, we need a response variable for each sample to train the model. Basically, it is the y in the mathematical model. For classification, it is the class label. For regression, it is of real value. Without setting it, the data assumes no response variable. In that case, the data can be used for testing or unsupervised learning. The parse method can take a URI, File, path string, or InputStream as an input argument. And it returns an AttributeDataset object, which is a dataset of a number of attributes. All attribute values are stored as double even if the attribute may be nominal, ordinal, string, or date. The first call of toArray taking a double[][] argument fills the array with all the parsed data and returns it, of which each row is a sample/object. The second call of toArray taking an int array fills it with the class labels of the samples and then returns it. The AttributeDataset.attributes method returns the list of Attribute objects in the dataset. The Attribute object contains the type information (and optional weight), which is needed in some algorithms (e.g. decision trees). The Attribute object also contains variable name and description, which are useful in the output or UI. Similar to ArffParser, we can also use the DelimitedTextParser class to parse plain delimited text files. By default, the parser expects a white-space-separated-values file. Each line in the file corresponds to a row in the table. Within a line, fields are separated by white spaces, each field belonging to one table column. This class can also be used to read other text tabular files by setting the delimiter character such as ','. The file may contain comment lines (starting with '%') and missing values (indicated by placeholder '?'), which can both be parameterized. DelimitedTextParser parser = new DelimitedTextParser(); parser.setResponseIndex(new NominalAttribute(""class""), 0); AttributeDataset usps = parser.parse(""USPS Train"", new FileInputStream(""data/usps/zip.train"")); where the setResponseIndex also takes an extra parameter about the attribute of the response variable. Because this is a classification problem, we set it to a NominalAttribute with name ""class"". In case of regression, we should use NumericAttribute instead. If your input data contains different types of attributes (e.g. NumericAttribute, NominalAttribute, StringAttribute, DateAttribute, etc), you should pass an array of Attribute[] to the constructor of DelimitedTextParser to indicate the data types of each column. By default, DelimitedTextParser assumes all columns as NumericAttribute. Train The Model Smile implements a variety of classification and regression algorithms. In what follows, we train a support vector machine (SVM) on the USPS zip code handwriting dataset. The SVM employs a Gaussian kernel and one-to-one strategy as this is a multi-class problem. Different from LibSVM or other popular SVM library, Smile implements an online learning algorithm for training SVM. The method learn trains the SVM with the given dataset for one epoch. The caller may call this method multiple times to obtain better accuracy although one epoch is usually sufficient. Note that after calling learn, we need to call the finish method, which processes support vectors until they converge. As it is an online algorithm, the user may update the model anytime by calling learn even after calling the finish method. In the example, we show another way of learning by working on single sample. As shown in the example, we simply call the predict method on a testing sample. Both learn and predict methods are generic for all classification and regression algorithms. DelimitedTextParser parser = new DelimitedTextParser(); parser.setResponseIndex(new NominalAttribute(""class""), 0); try {     AttributeDataset train = parser.parse(""USPS Train"", new FileInputStream(""/data/usps/zip.train""));     AttributeDataset test = parser.parse(""USPS Test"", new FileInputStream(""/data/usps/zip.test""));      double[][] x = train.toArray(new double[train.size()][]);     int[] y = train.toArray(new int[train.size()]);     double[][] testx = test.toArray(new double[test.size()][]);     int[] testy = test.toArray(new int[test.size()]);      SVM<double[]> svm = new SVM<double[]>(new GaussianKernel(8.0), 5.0, Math.max(y)+1, SVM.Multiclass.ONE_VS_ONE);     svm.learn(x, y);     svm.finish();      int error = 0;     for (int i = 0; i < testx.length; i++) {         if (svm.predict(testx[i]) != testy[i]) {             error++;         }     }      System.out.format(""USPS error rate = %.2f%%\n"", 100.0 * error / testx.length);      System.out.println(""USPS one more epoch..."");     for (int i = 0; i < x.length; i++) {         int j = Math.randomInt(x.length);         svm.learn(x[j], y[j]);     }      svm.finish();      error = 0;     for (int i = 0; i < testx.length; i++) {         if (svm.predict(testx[i]) != testy[i]) {             error++;         }     }     System.out.format(""USPS error rate = %.2f%%\n"", 100.0 * error / testx.length); } catch (Exception ex) {     System.err.println(ex); } As aforementioned, tree based methods need the type information of attributes. In the next example, we train an AdaBoost model on the weather dataset. ArffParser arffParser = new ArffParser(); arffParser.setResponseIndex(4); AttributeDataset weather = arffParser.parse(new FileInputStream(""/data/weka/weather.nominal.arff"")); double[][] x = weather.toArray(new double[weather.size()][]); int[] y = weather.toArray(new int[weather.size()]);  AdaBoost forest = new AdaBoost(weather.attributes(), x, y, 200, 4); In the example, we set the number of trees to 200 and the maximum number of leaf nodes in the trees to 4, which works as a regularization control. Model Validation In the example of USPS, we have both training and test datasets. However, we frequently have only a single dataset for building models. For model validation, Smile provide LOOCV (leave-one-out cross validation), cross validation, and bootstrap in the package smile.validation. Additionally, the package also has various measures to evaluate classification, regression, and clustering. For example, we have accuracy, fallout, FDR, F-measure (F1 score or F-score), precision, recall, sensitivity, specificity for classification; absolute deviation, MSE, RMSE, RSS for regression; rand index, adjust rand index for clustering. The following is an example how to use LOOCV. double[][] x = weather.toArray(new double[weather.size()][]); int[] y = weather.toArray(new int[weather.size()]);  int n = x.length; LOOCV loocv = new LOOCV(n); int error = 0; for (int i = 0; i < n; i++) {     double[][] trainx = Math.slice(x, loocv.train[i]);     int[] trainy = Math.slice(y, loocv.train[i]);      AdaBoost forest = new AdaBoost(weather.attributes(), trainx, trainy, 200, 4);     if (y[loocv.test[i]] != forest.predict(x[loocv.test[i]]))         error++; }  System.out.println(""Decision Tree error = "" + error); Use The Trained Model All classifiers in Smile implement the following interface. public interface Classifier<T> {     public int predict(T x);     public int predict(T x, double[] posteriori); } To use the trained model, we can apply the method predict on a new sample. Besides just returning the class label, many methods (e.g. neural networks) can also output the posteriori probabilities of each class. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/haifengl/smile"	"The Statistical Machine Intelligence and Learning Engine provides a set of machine learning algorithms and a visualization library."	"true"
"Machine Learning"	"Weka"	"http://www.cs.waikato.ac.nz/ml/weka/"	"Collection of algorithms for data mining tasks ranging from pre-processing to visualization."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Weka 3 - Data Mining with Open Source Machine Learning Software in Java Machine Learning Group at the University of Waikato Project Software Book Publications People Related Weka 3: Data Mining Software in Java Weka is a collection of machine learning algorithms for data mining tasks. The algorithms can either be applied directly to a dataset or called from your own Java code. Weka contains tools for data pre-processing, classification, regression, clustering, association rules, and visualization. It is also well-suited for developing new machine learning schemes. Found only on the islands of New Zealand, the Weka is a flightless bird with an inquisitive nature. The name is pronounced like this, and the bird sounds like this. Weka is open source software issued under the GNU General Public License. We have put together several free online courses that teach machine learning and data mining using WEKA. Check out the website for the courses for details on when and how to enrol. The videos for the courses are available on Youtube. Yes, it is possible to apply Weka to big data! Getting started Requirements Download Documentation FAQ Getting Help Further information Citing Weka Datasets Related Projects Miscellaneous Code Other Literature Developers Development History Subversion Contributors"	"null"	"null"	"Collection of algorithms for data mining tasks ranging from pre-processing to visualization."	"true"
"Messaging"	"Aeron"	"https://github.com/real-logic/Aeron"	"Efficient reliable unicast and multicast message transport."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1949"	"256"	"236"	"GitHub - real-logic/Aeron: Efficient reliable UDP unicast, UDP multicast, and IPC message transport Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 256 Star 1,949 Fork 236 real-logic/Aeron Code Issues 20 Pull requests 0 Wiki Pulse Graphs Efficient reliable UDP unicast, UDP multicast, and IPC message transport 4,100 commits 3 branches 20 releases 31 contributors Java 61.3% C++ 36.8% Other 1.9% Java C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fakeit-experiment longs-experiment master Nothing to show 0.9.9 0.9.8 0.9.7 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9 0.2.3 0.2.2 0.2.1 0.2 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1 Nothing to show New pull request Latest commit d31a838 Jul 14, 2016 mjpt777 [Java] Styling. Permalink Failed to load latest commit information. aeron-agent/src [Java] Naming and increase size of event buffer to 2MB. Jul 1, 2016 aeron-all Update Copyright. Feb 22, 2016 aeron-client [Java] Styling. Jul 14, 2016 aeron-driver [Java] Use concrete typed position counters in status package. Jul 12, 2016 aeron-samples [C++]: reflect tail counters being moved into log meta data buffer. Jul 7, 2016 aeron-system-tests [Java] Mock on interface rather than concrete class. Jun 17, 2016 config/checkstyle [Java] Add checkstyle indentation rule and fix errors. Jan 11, 2016 cppbuild [C++]: invert grep Apr 20, 2016 gradle/wrapper [Java] Upgrade to Gradle 2.14. Jun 14, 2016 .gitignore [Java]: Remove redundant entries. Jun 7, 2015 CMakeLists.txt [C++]: Switch to CMake project version parsed from version.txt May 31, 2016 LICENSE added LICENSE. added initial maven setup. added gitignore. Feb 8, 2014 README.md [Java] README. Jul 11, 2016 build.gradle [Java] Styling. Jul 14, 2016 gradlew [Java] Update to Gradle 2.13. May 4, 2016 gradlew.bat [Java] Update to Gradle 2.13. May 4, 2016 settings.gradle [Java]: moved event log to be all static and removed from MediaDriver… Mar 16, 2016 version.txt post release bump Jun 29, 2016 README.md Aeron To chat with other Aeron users and the contributors. Efficient reliable UDP unicast, UDP multicast, and IPC message transport. Java and C++ clients are available in this repository via a third party .NET client. All three clients can exchanges messages across machines or on the same machine via IPC very efficiently. Performance is the key focus. Aeron is designed to be the highest throughput with the lowest and most predictable latency possible of any messaging system. Aeron integrates with Simple Binary Encoding (SBE) for the best possible performance in message encoding and decoding. Many of the data structures used in the creation of Aeron have been factored out to the Agrona project. For details of usage, protocol specification, FAQ, etc. please check out the Wiki. For those who prefer to watch a video then try Aeron Messaging from StrangeLoop 2014. Things have moved on quite a bit with performance and some features but the basic design still applies. For the latest version information and changes see the Change Log with downloads at Maven Central. How do I use Aeron? Java Programming Guide C++11 Programming Guide Best Practices Guide Monitoring and Debugging Configuration Options Channel Specific Configuration How does Aeron work? Protocol Specification Design Overview Design Principles Flow Control Semantics Media Driver Operation How do I hack on Aeron? Hacking on Aeron Performance Testing License (See LICENSE file for full license) Copyright 2014 - 2016 Real Logic Limited Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Directory Structure Client API and common classes aeron-client  Samples aeron-samples  Media Driver aeron-driver  Build Java Build The project is built with Gradle using this build.gradle file. You require the following to build Aeron: Latest stable Oracle JDK 8 You must first build and install Agrona into the local maven repository $ ./gradlew  After Agrona is compiled and installed, then you can build Aeron. Full clean and build of all modules $ ./gradlew  C++ Build You require the following to build the C++ API for Aeron: 3.0.2 or higher of CMake C++11 supported compiler for the supported platform Requirements to build HdrHistogram_c. HdrHistogram requires clang and zlib.h currently. NOTE: Aeron is supported on Linux, Mac, and Windows. Windows builds require Visual Studio and are being developed with Visual Studio 2013 and 2015 with 64-bit builds only. Cygwin, MSys, etc. may work, but are not maintained at this time. For convenience, a script is provided that does a full clean, build, and test of all targets as a Release build. $ ./cppbuild/cppbuild  If you are comfortable with using CMake, then a full clean, build, and test looks like: $ mkdir -p cppbuild/Debug $ cd cppbuild/Debug $ cmake ../.. $ cmake --build . --clean-first $ ctest  If you have doxygen installed and want to build the Doxygen doc, there is a nice doc target that can be used. $ make doc  If you would like a packaged version of the compiled API, there is the package target that uses CPack. If the doc has been built previous to the packaging, it will be included. Packages created are ""TGZ;STGZ"", but can be changed by running cpack directly. $ make package  Running Samples Start up a media driver which will create the data and conductor directories. On Linux, this will probably be in /dev/shm/aeron or /tmp/aeron. $ java -cp aeron-samples/build/libs/samples.jar io.aeron.driver.MediaDriver  Alternatively, specify the data and conductor directories. The following example uses the shared memory 'directory' on Linux, but you could just as easily point to the regular filesystem. $ java -cp aeron-samples/build/libs/samples.jar -Daeron.dir=/dev/shm/aeron io.aeron.driver.MediaDriver  You can run the BasicSubscriber from a command line. On Linux, this will be pointing to the /dev/shm shared memory directory, so be sure your MediaDriver is doing the same! $ java -cp aeron-samples/build/libs/samples.jar io.aeron.samples.BasicSubscriber  You can run the BasicPublisher from a command line. On Linux, this will be pointing to the /dev/shm shared memory directory, so be sure your MediaDriver is doing the same! $ java -cp aeron-samples/build/libs/samples.jar io.aeron.samples.BasicPublisher  You can run the AeronStat utility to read system counters from a command line $ java -cp aeron-samples/build/libs/samples.jar io.aeron.samples.AeronStat  Media Driver Packaging The Media Driver is packaged by the default build into an application that can be found here aeron-driver/build/distributions/aeron-driver-${VERSION}.zip  Troubleshooting On linux, the subscriber sample throws an exception java.lang.InternalError(a fault occurred in a recent unsafe memory access operation in compiled Java code) This is actually an out of disk space issue. To alleviate, check to make sure you have enough disk space. In the samples, on Linux, this will probably be either at /dev/shm/aeron or /tmp/aeron (depending on your settings). See this thread for a similar problem. Note: if you are trying to run this inside a Linux Docker, be aware that, by default, Docker only allocates 64 MB to the shared memory space at /dev/shm. However, the samples will quickly outgrow this. You can work around this issue by running your Docker container in privileged mode and running this command: mount -t tmpfs -o remount,rw,nosuid,nodev,noexec,relatime,size=1024M tmpfs /dev/shm This will increase the size of /dev/shm to 1 GB. Hopefully you have enough memory :) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/real-logic/Aeron"	"Efficient reliable unicast and multicast message transport."	"true"
"Messaging"	"Apache ActiveMQ"	"http://activemq.apache.org/"	"Message broker that implements JMS and converts synchronous to asynchronous communication."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache ActiveMQ ™ -- Index     ActiveMQ ™ ASF Index Download | JavaDocs More... | Source | Forums | Support Download ActiveMQ 5.13.3 Today! Apache ActiveMQ ™ is the most popular and powerful open source messaging and Integration Patterns server. Apache ActiveMQ is fast, supports many Cross Language Clients and Protocols, comes with easy to use Enterprise Integration Patterns and many advanced features while fully supporting JMS 1.1 and J2EE 1.4. Apache ActiveMQ is released under the Apache 2.0 License Grab yourself a Download, try our Getting Started Guide, surf our FAQ or start Contributing and join us on our Discussion Forums. Features Supports a variety of Cross Language Clients and Protocols from Java, C, C++, C#, Ruby, Perl, Python, PHP OpenWire for high performance clients in Java, C, C++, C# Stomp support so that clients can be written easily in C, Ruby, Perl, Python, PHP, ActionScript/Flash, Smalltalk to talk to ActiveMQ as well as any other popular Message Broker AMQP v1.0 support MQTT v3.1 support allowing for connections in an IoT environment. full support for the Enterprise Integration Patterns both in the JMS client and the Message Broker Supports many advanced features such as Message Groups, Virtual Destinations, Wildcards and Composite Destinations Fully supports JMS 1.1 and J2EE 1.4 with support for transient, persistent, transactional and XA messaging Spring Support so that ActiveMQ can be easily embedded into Spring applications and configured using Spring's XML configuration mechanism Tested inside popular J2EE servers such as TomEE, Geronimo, JBoss, GlassFish and WebLogic Includes JCA 1.5 resource adaptors for inbound & outbound messaging so that ActiveMQ should auto-deploy in any J2EE 1.4 compliant server Supports pluggable transport protocols such as in-VM, TCP, SSL, NIO, UDP, multicast, JGroups and JXTA transports Supports very fast persistence using JDBC along with a high performance journal Designed for high performance clustering, client-server, peer based communication REST API to provide technology agnostic and language neutral web based API to messaging Ajax to support web streaming support to web browsers using pure DHTML, allowing web browsers to be part of the messaging fabric CXF and Axis Support so that ActiveMQ can be easily dropped into either of these web service stacks to provide reliable messaging Can be used as an in memory JMS provider, ideal for unit testing JMS News Apache ActiveMQ 5.13.3 Released Christopher L. Shannon posted on May 03, 2016 The ActiveMQ team is pleased to announce the release of ActiveMQ 5.13.3 A big thanks to everyone who contributed to this release. We look forward to your feedback. Apache ActiveMQ 5.13.2 Released Christopher L. Shannon posted on Mar 07, 2016 The ActiveMQ team is pleased to announce the release of ActiveMQ 5.13.2 A big thanks to everyone who contributed to this release. We look forward to your feedback. Apache ActiveMQ 5.13.1 Released Christopher L. Shannon posted on Feb 08, 2016 The ActiveMQ team is pleased to announce the release of ActiveMQ 5.13.1 A big thanks to everyone who contributed to this release. We look forward to your feedback. Apache ActiveMQ 5.12.2 Released Christopher L. Shannon posted on Jan 13, 2016 The ActiveMQ team is pleased to announce the release of ActiveMQ 5.12.2 A big thanks to everyone who contributed to this release. We look forward to your feedback. Apache ActiveMQ 5.13.0 Released Christopher L. Shannon posted on Dec 03, 2015 The ActiveMQ team is pleased to announce the release of ActiveMQ 5.13.0 A hearty thanks to everyone who contributed to this release. We look forward to your feedback. More News Get all the latest Apache ActiveMQ News Here! Overview Index News New Features Getting Started FAQ Articles Books Download License Search Sub Projects Artemis Apollo CMS NMS Community Support Contributing Discussion Forums Mailing Lists IRC IRC Log Security Advisories Site Sponsorship Projects Using ActiveMQ Users Team Thanks Features Advisory Message Clustering Cross Language Clients Enterprise Integration Patterns JMX JMS to JMS Bridge MasterSlave Message Groups Networks of Brokers Performance Persistence Security Virtual Destinations Visualisation More ... Connectivity Ajax AMQP Axis and CXF Support C Integration C++ C# and .Net Integration CMS J2EE JBoss Integration Jetty JNDI Support NMS REST RSS and Atom Spring Support Stomp Tomcat Unix Service WebLogic Integration XMPP More ... Using ActiveMQ 5 Getting Started Initial Configuration Running a Broker Embedded Brokers Command Line Tools Configuring Transports Examples Web Samples Monitoring the Broker Xml Configuration Xml Reference More ... Tools Web Console Maven2 Performance Plugin Support Issues Roadmap Change log Developers Source Building Developer Guide Becoming a committer Code Overview Wire Protocol Release Guide Tests Maven2 Performance Plugin Benchmark Tests JMeter System Tests JMeter Performance Tests Integration Tests Project Reports JUnit Reports Source XRef Test Source XRef Xml Reference Privacy Policy - (edit this page) © 2004-2011 The Apache Software Foundation. Apache ActiveMQ, ActiveMQ, Apache, the Apache feather logo, and the Apache ActiveMQ project logo are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners. Graphic Design By Hiram"	"null"	"null"	"Message broker that implements JMS and converts synchronous to asynchronous communication."	"true"
"Messaging"	"Apache Camel"	"http://camel.apache.org/"	"Glues together different transport APIs via Enterprise Integration Patterns."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Camel: Index     Camel Apache Apache Camel > Index Download | JavaDoc | Source | Forums | Support Download it Today! Apache Camel ™ is a versatile open-source integration framework based on known Enterprise Integration Patterns. Camel empowers you to define routing and mediation rules in a variety of domain-specific languages, including a Java-based Fluent API, Spring or Blueprint XML Configuration files, and a Scala DSL. This means you get smart completion of routing rules in your IDE, whether in a Java, Scala or XML editor. Apache Camel uses URIs to work directly with any kind of Transport or messaging model such as HTTP, ActiveMQ, JMS, JBI, SCA, MINA or CXF, as well as pluggable Components and Data Format options. Apache Camel is a small library with minimal dependencies for easy embedding in any Java application. Apache Camel lets you work with the same API regardless which kind of Transport is used - so learn the API once and you can interact with all the Components provided out-of-box. Apache Camel provides support for Bean Binding and seamless integration with popular frameworks such as CDI, Spring, Blueprint and Guice. Camel also has extensive support for unit testing your routes. The following projects can leverage Apache Camel as a routing and mediation engine: Apache ServiceMix - a popular distributed open source ESB and JBI container Apache ActiveMQ - a mature, widely used open source message broker Apache CXF - a smart web services suite (JAX-WS and JAX-RS) Apache Karaf - a small OSGi based runtime in which applications can be deployed Apache MINA - a high-performance NIO-driven networking framework So don't get the hump - try Camel today! Too many buzzwords - what exactly is Camel? Okay, so the description above is technology focused. There's a great discussion about Camel at Stack Overflow. We suggest you view the post, read the comments, and browse the suggested links for more details. News Apache Camel 2.17.2 Released Gregor Zurowski posted on Jul 01, 2016 The Camel community announces the immediate availability of the new patch release Camel 2.17.2. This release contains 58 fixes applied in the past few weeks by the community on the Camel 2.17.x maintenance branch. The artifacts are published and ready for you to download either from the Apache mirrors or from the Central Maven repository. For more details please take a look at the release notes. Many thanks to all who made this release possible. On behalf of the Camel PMC, Gregor Zurowski Apache 2.17.1 Released Gregor Zurowski posted on May 08, 2016 The Camel community announces the immediate availability of the new patch release Camel 2.17.1. This release contains 94 fixes applied in the past few weeks by the community on the Camel 2.17.x maintenance branch. The artifacts are published and ready for you to download either from the Apache mirrors or from the Central Maven repository. For more details please take a look at the release notes. Many thanks to all who made this release possible. On behalf of the Camel PMC, Gregor Zurowski Welcome Stephan Siano as Camel committer Christian Mueller posted on Apr 26, 2016 The Apache Camel PMC is pleased to introduce Stephan Siano as a new committer. We are very happy with the sustained growth of the project and look forward to continued contributions from the community and adding to the ranks of Camel Riders. Stephan was involved with Camel for well over long time now. He contributed to the code a lot and got involved with the community on the mailing lists.   On behalf of the Camel PMC, welcome aboard and we expect more great things coming from you!   Christian Müller, VP, Apache Camel The Camel Riders Welcome Luca Burgazzoli As New Committer Christian Mueller posted on Apr 10, 2016 The Apache Camel project is growing at the same steady pace we got used to with strong support from our community. The project would not be what it is without the community contributions.   Some contributors stand out not only because of the high quality of the contributions, but also due to the commitment to the project and the time and energy spend on helping other users be as successful in using Camel. This is the case now with another rider: Luca Burgazzoli. In recognition of his skills and passion the Camel community is proudly announcing him becoming a committer.   On behalf of the Camel PMC, welcome aboard Luca and we expect more great things coming from you! Christian Apache Camel 2.16.3 Released Gregor Zurowski posted on Apr 09, 2016 The Camel community announces the immediate availability of the new patch release Camel 2.16.3. This release contains over 75 fixes applied in the past few weeks by the community on the Camel 2.16.x maintenance branch. The artifacts are published and ready for you to download either from the Apache mirrors or from the Central Maven repository. For more details please take a look at the release notes. Many thanks to all who made this release possible. On behalf of the Camel PMC, Gregor Zurowski  Apache Camel 2.15.6 Released Gregor Zurowski posted on Mar 31, 2016 The Camel community announces the immediate availability of the new patch release Camel 2.15.6, the last planned release for the 2.15.x branch. This release contains a total of 37 bug fixes and improvements applied in the past months by the community on the Camel 2.15.x branch. The artifacts are published and ready for you to download either from the Apache mirrors or from the Central Maven repository. For more details please take a look at the release notes. Many thanks to all who made this release possible. On behalf of the Camel PMC, Gregor Zurowski RSS Feed Links Getting Started Architecture User Guide Enterprise Integration Patterns More News Overview Home Download Getting Started FAQ Documentation User Guide Manual Books Tutorials Examples Cookbook Architecture Enterprise Integration Patterns DSL Components Data Format Languages Security Security Advisories Search Community Support Contributing Discussion Forums Mailing Lists User Stories News Articles Site Team Camel Extra Developers Developer Guide Source Building JavaDoc IRC Room Apache Software Foundation License Sponsorship Thanks Security Privacy Policy - (edit page) (add comment) © 2004-2015 The Apache Software Foundation. Apache Camel, Camel, Apache, the Apache feather logo, and the Apache Camel project logo are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners. Graphic Design By Hiram"	"null"	"null"	"Glues together different transport APIs via Enterprise Integration Patterns."	"true"
"Messaging"	"Apache Kafka"	"http://kafka.apache.org/"	"High-throughput distributed messaging system."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Kafka Apache Kafka A high-throughput distributed messaging system. download introduction uses documentation quickstart performance clients ecosystem security faq project twitter wiki bugs mailing lists committers powered by papers & talks developers code projects contributing coding guide protocol guide unit tests Apache Kafka is publish-subscribe messaging rethought as a distributed commit log. Fast A single Kafka broker can handle hundreds of megabytes of reads and writes per second from thousands of clients. Scalable Kafka is designed to allow a single cluster to serve as the central data backbone for a large organization. It can be elastically and transparently expanded without downtime. Data streams are partitioned and spread over a cluster of machines to allow data streams larger than the capability of any single machine and to allow clusters of co-ordinated consumers Durable Messages are persisted on disk and replicated within the cluster to prevent data loss. Each broker can handle terabytes of messages without performance impact. Distributed by Design Kafka has a modern cluster-centric design that offers strong durability and fault-tolerance guarantees."	"null"	"null"	"High-throughput distributed messaging system."	"true"
"Messaging"	"Hermes"	"http://hermes.allegro.tech"	"Fast and reliable message broker built on top of Kafka."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"185"	"25"	"35"	"GitHub - allegro/hermes: Fast and reliable message broker built on top of Kafka. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 185 Fork 35 allegro/hermes Code Issues 43 Pull requests 4 Pulse Graphs Fast and reliable message broker built on top of Kafka. http://hermes.allegro.tech 730 commits 11 branches 28 releases 23 contributors Java 85.9% Groovy 6.8% JavaScript 3.8% HTML 3.1% Shell 0.2% Ruby 0.2% Java Groovy JavaScript HTML Shell Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 438_request_timeout_lock 467_assignment_executor_blocked 503_frontend_performance IM-16788-frontend-with-no-kafka develop docs-upgrade master publishing-docs-update remove_unused_zk_factory revert-510-508_abnormal_delivery_do_not_log_throwable_message_fix testing-sputnik Nothing to show hermes-0.8.9 hermes-0.8.8 hermes-0.8.7 hermes-0.8.7-hotfix1 hermes-0.8.6 hermes-0.8.6-hotfix5 hermes-0.8.6-hotfix4 hermes-0.8.6-hotfix3 hermes-0.8.6-hotfix2 hermes-0.8.6-hotfix1 hermes-0.8.5 hermes-0.8.5-hotfix2 hermes-0.8.5-hotfix1 hermes-0.8.4 hermes-0.8.3 hermes-0.8.3-hotfix1 hermes-0.8.2 hermes-0.8.2-rc2 hermes-0.8.2-rc1 hermes-0.8.1 hermes-0.8.0 hermes-0.7.6 hermes-0.7.5 hermes-0.7.4 hermes-0.7.3 hermes-0.7.2 hermes-0.7.1 hermes-0.7.0 Nothing to show New pull request Latest commit 0b357bc Jul 6, 2016 Technical User Opbox Release version: 0.8.9 Permalink Failed to load latest commit information. config Subscription metadata Jun 28, 2016 docker vagrant setup Jan 5, 2016 docs Filtering, metadata docs Jul 6, 2016 gradle/wrapper Content-Type is set in Java Client Feb 8, 2016 hermes-api Filtering, metadata docs Jul 6, 2016 hermes-client Merge branch 'master' into develop May 9, 2016 hermes-common Configuration entry label fix Jul 5, 2016 hermes-console Release version: 0.8.9 Jul 6, 2016 hermes-consumers Subscription metadata Jun 28, 2016 hermes-frontend 512 undertow updated to 1.3.23.Final Jun 20, 2016 hermes-management Subscription headers refactor Jun 1, 2016 hermes-metrics 204 indroduced 'selective' workload alg Nov 12, 2015 hermes-test-helper Subscription metadata Jun 28, 2016 hermes-tracker-elasticsearch #425 | Fix for hermes management fails to start when no daily index f… Apr 28, 2016 hermes-tracker-mongo 312 message filtering (part 2/2, co-authored by kornel) Apr 14, 2016 hermes-tracker Merge branch 'master' into develop Apr 28, 2016 integration Subscription headers refactor Jun 1, 2016 vagrant_provisioning fixing Vagrant setup May 6, 2016 .gitignore #372 | Broadcast mode in subscription May 9, 2016 .travis.yml Sputnik.ci integration. RedundantThrows rule removed from checkstyle … May 30, 2016 CONTRIBUTING.md contribution guide updates May 4, 2016 README.md s/docker/Vagrant/ Feb 18, 2016 RELEASE_FLOW.md added release and versioning model description Jan 15, 2016 Vagrantfile Added Graphite to Vagrant image Feb 26, 2016 build.gradle resolves #195 | topic preview implementation May 4, 2016 circle.yml configuring circle ci Jan 29, 2016 gradle.properties initial OpenSource commit May 15, 2015 gradlew Content-Type is set in Java Client Feb 8, 2016 gradlew.bat initial OpenSource commit May 15, 2015 mkdocs.yml Release version: 0.8.9 Jul 6, 2016 settings.gradle external schema repository implementation Aug 7, 2015 README.md Hermes Hermes is an asynchronous message broker built on top of Kafka. We provide reliable, fault tolerant REST interface for message publishing and adaptive push mechanisms for message sending. See our 10-minute getting started guide with Vagrant: Getting started Visit our page: hermes.allegro.tech See our full documentation: http://hermes-pubsub.readthedocs.org/en/latest/ See how we work: Waffle Dashboard Questions? gitter mailing list License hermes is published under Apache License 2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/allegro/hermes"	"Fast and reliable message broker built on top of Kafka."	"true"
"Messaging"	"Nakadi"	"https://github.com/zalando/nakadi"	"Provides a RESTful API on top of Kafka."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25"	"22"	"19"	"GitHub - zalando/nakadi: A distributed event bus that implements a RESTful API abstraction instead of Kafka-like queues Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 25 Fork 19 zalando/nakadi Code Issues 12 Pull requests 7 Pulse Graphs A distributed event bus that implements a RESTful API abstraction instead of Kafka-like queues 1,439 commits 78 branches 23 releases 12 contributors Java 99.8% Other 0.2% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: nakadi-jvm Switch branches/tags Branches Tags ARUHA-117 ARUHA-145-examined-build ARUHA-145 ARUHA-157-recognise-new-kafka-brokers ARUHA-159-reduce-kafka-logs-verbosity ARUHA-164 ARUHA-188 ARUHA-190-hila-api-latest ARUHA-190-hila-api-offsets ARUHA-190-hila-api ARUHA-190-hila-get-subscriptions ARUHA-190-hila-start-stream ARUHA-192-improve-logging ARUHA-193 ARUHA-197-status-code-meters ARUHA-202-subscription-persistence ARUHA-203-zmon-actuator ARUHA-215-after-merge ARUHA-215-merge-part2 ARUHA-215-merge ARUHA-215-ut ARUHA-215 ARUHA-230-adjustments ARUHA-230-fix-response-code ARUHA-230 ARUHA-233-feature-toggle ARUHA-237-uncompress-request-body ARUHA-238-fix-short-circuit-bug ARUHA-238-offsets-commit ARUHA-245 ARUHA-259-hila-event-delivered-twice ARUHA-260-fix-Hila-swagger ARUHA-266-null-handling-strategy ARUHA-267-hila-acceptance-tests ARUHA-268-subscription-start-from-lowercase ARUHA-271 ARUHA-272-window-not-sliding ARUHA-277 ARUHA-282-switch-off-codacy ARUHA-283-switch-on-codacy ARUHA-292-crutch-for-hila ARUHA-293 LappleApple-patch-1 R2016_03_30_17_08 aruha-136-expose-effective-schema aruha-191-getting-started aruha-205-add-scm-to-poc-dockerfile aruha-249-decouple-event-type-from-kafka-topic aruha-253-fix-statistics-api bugfix/ARUHA-275 checkstyle-experiment eventstore-api-fixed eventstore-latest feature/ARUHA-190-subscription-api feature/ARUHA-225 feature/ARUHA-279 feature/ARUHA-289 feature/event-validation feature/removed-unused-files hila-streaming-preparations master nakadi-jvm nakadi-low-level-api-review nakadi-on-play new-streaming-format release/R16_00_10 release/R2016_04_13_11_02 release/R2016_04_21_09_37 release/R2016_05_04 release/R2016_05_12 release/R2016_05_26 release/R2016_06_20 release/R2016_07_12 remove-inmemory-repository-and-use-mockito remove-reviewNinja-badge revert-318-feature/ARUHA-279 satisfy-findbugs versioned-topologies Nothing to show subscription-001 release/R2016_03_30_17_08 release/R16_00_10 R2016_07_12 R2016_07_12_rc4 R2016_07_12_rc3 R2016_07_12_rc2 R2016_07_12_rc1 R2016.07.12_rc R2016_06_20 R2016_06_20-2 R2016_06_20-1 R2016_05_26_rc R2016_05_12_rc R2016_05_04_rc.2 R2016_05_04_rc.1 R2016_05_04_rc R2016_04_21_09_37_rc R2016_03_30_17_08-rc1 R2016_03_24_16_46-rc1 R2016_03_24_10_11-rc1 R16_00_10-rc1 ARUHA-193-2 Nothing to show New pull request Latest commit fe9ab38 Jul 15, 2016 v-stepanov committed on GitHub Merge pull request #341 from zalando/ARUHA-292-crutch-for-hila … Aruha 292 crutch for hila Permalink Failed to load latest commit information. api ARUHA-225: namings again + changed sequence of the processing in the … Jul 12, 2016 database Merge branch 'release/R2016_07_12' into nakadi-jvm Jul 13, 2016 docs better description for the Event Oct 19, 2015 gradle/wrapper ARUHA-280: added gradle task + fixed travis Jul 8, 2016 src Merge pull request #341 from zalando/ARUHA-292-crutch-for-hila Jul 15, 2016 tools switching to kafka client API to fetch offsets info Feb 12, 2016 .gitignore ARUHA-152: refactor event type controller, add client annotation to r… Jul 12, 2016 .travis.yml ARUHA-283: switched on codacy back Jul 11, 2016 .zappr.yaml ARUHA-278: reduce variants Jul 6, 2016 Dockerfile aruha-212 update docker base image Jun 1, 2016 LICENSE Initial commit Oct 14, 2015 README.md Remove reviewNinja badge from the project README Jul 12, 2016 build.gradle ARUHA-277: add checkstyle for acceptance tests Jul 14, 2016 checkstyle.xml ARUHA-291: add final modifier check Jul 13, 2016 docker-compose.yml Merge branch 'nakadi-jvm' into feature/ARUHA-280 Jul 9, 2016 gradlew Added gradle wrapper Feb 12, 2016 gradlew.bat Added gradle wrapper Feb 12, 2016 README.md Table of Contents Nakadi Event Broker Quickstart Running a Server Stopping a Server Mac OS Docker Settings API Overview and Usage Events and Event Types Creating Event Types Create an Event Type List Event Types View an Event Type List Partitions for an Event Type View a Partition for an Event Type Publishing Events Posting one or more Events Consuming Events Opening an Event Stream Event Stream Structure Cursors, Offsets and Partitions Event Stream Keepalives Build and Development Building Dependencies What does the project already implement? Contributing Nakadi Event Broker The goal of Nakadi (ნაკადი means ""stream"" in Georgian) is to provide an event broker infrastructure to: Abstract event delivery via a secured RESTful API. This allows microservices teams to maintain service boundaries, and not directly depend on any specific message broker technology. Access to the API can be managed and secured using OAuth scopes. Enable convenient development of event-driven applications and asynchronous microservices. Event types can be defined with schemas and managed via a registry. Nakadi also has optional support for events describing business processes and data changes using standard primitives for identity, timestamps, event types, and causality. Efficient low latency event delivery. Once a publisher sends an event using a simple HTTP POST, consumers can be pushed to via a streaming HTTP connection, allowing near real-time event processing. The consumer connection has keepalive controls and support for managing stream offsets. The project also provides compatability with the STUPS project. Additional features that we plan to cover in the future are: Discoverability of the resource structures flowing into the broker. A managed API that allows consumers to subscribe and have stream offsets stored by the server. Filtering of events for subscribing consumers. Role base access control to data. Support for different streaming technologies and engines. Nakadi currently uses Apache Kafka as its broker, but other providers (such as Kinesis) will be possible. More detailed information can be found on the manual. Quickstart You can run the project locally using Docker. Running a Server From the project's home directory you can start Nakadi via Gradle: ./gradlew startNakadi This will build the project and run docker compose with 4 services: Nakadi (8080) PostgreSQL (5432) Kafka (9092) Zookeeper (2181) Stopping a Server To stop the running Nakadi: ./gradlew stopNakadi Mac OS Docker Settings Since Docker for Mac OS runs inside Virtual Box, you will want to expose some ports first to allow Nakadi to access its dependencies: docker-machine ssh default \ -L 9092:localhost:9092 \ -L 8080:localhost:8080 \ -L 5432:localhost:5432 \ -L 2181:localhost:2181 Alternatively you can set up port forwarding on the ""default"" machine through its network settings in the VirtualBox UI. If you get the message ""Is the docker daemon running on this host?"" but you know Docker and VirtualBox are running, you might want to run this command: eval ""$(docker-machine env default)"" Note: Docker Beta for Mac OS (1.12.0-rc3-beta18) currently is not supported due to the bug in networking host configuration. API Overview and Usage Events and Event Types The Nakadi API allows the publishing and consuming of events over HTTP. To do this the producer must register an event type with the Nakadi schema registry. The event type contains information such as the name, the owning application, strategies for partitioning and enriching data, and a JSON schema. Once the event type is created, a publishing resource becomes available that will accept events for the type, and consumers can also read from the event stream. There are three main categories of event type defined by Nakadi - Undefined: A free form category suitable for events that are entirely custom to the producer. Data: an event that represents a change to a record or other item, or a new item. Change events are associated with a create, update, delete, or snapshot operation. Business: an event that is part of, or drives a business process, such as a state transition in a customer order. The events for the business and data change helper categories follow a generic Nakadi event schema as well as a schema custom to the event data. The generic schema pre-defines common fields for an event and the custom schema for the event is defined when the event type is created. When a JSON event for one of these categories is posted to the server, it is expected to conform to the combination of the generic schema for the category and to the custom schema defined for the event type. This combination is called the effective schema and is validated by Nakadi. The undefined category is also required to have a JSON schema on creation, but this can be as simple as { ""\additionalProperties\"": true } to allow arbitrary JSON. Unlike the business and data categories, the schema for an undefined type is not checked by Nakadi when an event is posted, but it can be used by a consumer to validate data on the stream. Creating Event Types Create an Event Type An event type can be created by posting to the event-types resource. Each event type must have a unique name. If the event type already exists a 409 Conflict response will be returned. Otherwise a successful request will result in a 201 Created response. The exact required fields depend on the event type's category, but name, owning_application and schema are always expected. The schema value should only declare the custom part of the event - the generic schema is implicit and doesn't need to be defined. The combination of the two (the ""effective schema"") will be checked when events are submitted for the event type. This example shows a business category event type with a simple schema for an order number - curl -v -XPOST http://localhost:8080/event-types -d '{   ""name"": ""order.ORDER_RECEIVED"",   ""owning_application"": ""order-service"",   ""category"": ""business"",   ""partition_strategy"": ""random"",   ""enrichment_strategies"": [""metadata_enrichment""],   ""schema"": {     ""type"": ""json_schema"",     ""schema"": ""{ \""properties\"": { \""order_number\"": { \""type\"": \""string\"" } } }""   } }' This example shows an undefined category event type with a wilcard schema - curl -v -XPOST http://localhost:8080/event-types -d '{   ""name"": ""undef"",   ""owning_application"": ""jinteki"",   ""category"": ""undefined"",   ""partition_strategy"": ""random"",   ""schema"": {     ""type"": ""json_schema"",     ""schema"": ""{ \""additionalProperties\"": true }""   } }' An undefined event does not accept a value for enrichment_strategies. List Event Types curl -v http://localhost:8080/event-types   HTTP/1.1 200 OK Content-Type: application/json;charset=UTF-8  [   {     ""category"": ""business"",     ""default_statistic"": null,     ""enrichment_strategies"": [""metadata_enrichment""],     ""name"": ""order.ORDER_RECEIVED"",     ""owning_application"": ""order-service"",     ""partition_key_fields"": [],     ""partition_strategy"": ""random"",     ""schema"": {       ""schema"": ""{ \""properties\"": { \""order_number\"": { \""type\"": \""string\"" } } }"",       ""type"": ""json_schema""     }   } ] View an Event Type Each event type registered with Nakadi has a URI based on its name - curl -v http://localhost:8080/event-types/order.ORDER_RECEIVED   HTTP/1.1 200 OK Content-Type: application/json;charset=UTF-8  {   ""category"": ""business"",   ""default_statistic"": null,   ""enrichment_strategies"": [""metadata_enrichment""],   ""name"": ""order.ORDER_RECEIVED"",   ""owning_application"": ""order-service"",   ""partition_key_fields"": [],   ""partition_strategy"": ""random"",   ""schema"": {     ""schema"": ""{ \""properties\"": { \""order_number\"": { \""type\"": \""string\"" } } }"",     ""type"": ""json_schema""   } } List Partitions for an Event Type The partitions for an event type are available via its /partitions resource: curl -v http://localhost:8080/event-types/order.ORDER_RECEIVED/partitions    HTTP/1.1 200 OK Content-Type: application/json;charset=UTF-8  [   {     ""newest_available_offset"": ""BEGIN"",     ""oldest_available_offset"": ""0"",     ""partition"": ""0""   } ] View a Partition for an Event Type Each partition for an event type has a URI based on its partition value: curl -v http://localhost:8080/event-types/order.ORDER_RECEIVED/partitions/0    HTTP/1.1 200 OK Content-Type: application/json;charset=UTF-8  {   ""newest_available_offset"": ""BEGIN"",   ""oldest_available_offset"": ""0"",   ""partition"": ""0"" } Publishing Events Posting one or more Events Events for an event type can be published by posting to its ""events"" collection: curl -v -XPOST http://localhost:8080/event-types/order.ORDER_RECEIVED/events -d '[   {     ""order_number"": ""24873243241"",     ""metadata"": {       ""eid"": ""d765de34-09c0-4bbb-8b1e-7160a33a0791"",       ""occurred_at"": ""2016-03-15T23:47:15+01:00""     }   }, {     ""order_number"": ""24873243242"",     ""metadata"": {       ""eid"": ""a7671c51-49d1-48e6-bb03-b50dcf14f3d3"",       ""occurred_at"": ""2016-03-15T23:47:16+01:00""     }   }]'   HTTP/1.1 200 OK  The events collection accepts an array of events. As well as the fields defined in the event type's schema, the posted event must also contain a metadata object with an eid and occurred_at fields. The eid is a UUID that uniquely identifies an event and the occurred_at field identifies the time of creation of the Event defined by the producer. Note that the order of events in the posted array will be the order they are published onto the event stream and seen by consumers. They are not re-ordered based on their occurred_at or other data values. Consuming Events Opening an Event Stream You can open a stream for an Event Type via the events sub-resource: curl -v http://localhost:8080/event-types/order.ORDER_RECEIVED/events Event Stream Structure The stream response groups events into batches. Batches in the response are separated by a newline and each batch will be emitted on a single line, but a pretty-printed batch object looks like this - {   ""cursor"": {     ""partition"": ""0"",     ""offset"": ""4""   },   ""events"": [{     ""order_number"": ""24873243241"",     ""metadata"": {       ""eid"": ""d765de34-09c0-4bbb-8b1e-7160a33a0791"",       ""occurred_at"": ""2016-03-15T23:47:15+01:00""     }   }, {     ""order_number"": ""24873243242"",     ""metadata"": {       ""eid"": ""a7671c51-49d1-48e6-bb03-b50dcf14f3d3"",       ""occurred_at"": ""2016-03-15T23:47:16+01:00""     }   }] } The cursor object describes the partition and the offset for this batch of events. The cursor allow clients to checkpoint which events have already been consumed and navigate through the stream - individual events in the stream don't have cursors. The events array contains a list of events that were published in the order they were posted by the producer. Each event will contain a metadata field as well as the custom data defined by the event type's schema. The HTTP response then will look something like this - curl -v http://localhost:8080/event-types/order.ORDER_RECEIVED/events    HTTP/1.1 200 OK  {""cursor"":{""partition"":""0"",""offset"":""4""},""events"":[{""order_number"": ""ORDER_001"", ""metadata"": {""eid"": ""4ae5011e-eb01-11e5-8b4a-1c6f65464fc6"", ""occurred_at"": ""2016-03-15T23:56:11+01:00""}}]} {""cursor"":{""partition"":""0"",""offset"":""5""},""events"":[{""order_number"": ""ORDER_002"", ""metadata"": {""eid"": ""4bea74a4-eb01-11e5-9efa-1c6f65464fc6"", ""occurred_at"": ""2016-03-15T23:57:15+01:00""}}]} {""cursor"":{""partition"":""0"",""offset"":""6""},""events"":[{""order_number"": ""ORDER_003"", ""metadata"": {""eid"": ""4cc6d2f0-eb01-11e5-b606-1c6f65464fc6"", ""occurred_at"": ""2016-03-15T23:58:15+01:00""}}]} Cursors, Offsets and Partitions By default the events resource will consume from all partitions of an event type and from the end (or ""tail"") of the stream. To select only particular partitions and a position where in the stream to start, you can supply an X-Nakadi-Cursors header in the request: curl -v http://localhost:8080/event-types/order.ORDER_RECEIVED/events \   -H 'X-Nakadi-Cursors: [{""partition"": ""0"", ""offset"":""12""}]' The header value is a JSON array of cursors. Each cursor in the array describes its partition for the stream and an offset to stream from. Note that events within the same partition maintain their overall order. The offset value of the cursor allows you select where the in the stream you want to consume from. This can be any known offset value, or the dedicated value BEGIN which will start the stream from the beginning. For example, to read from partition 0 from the beginning: curl -v http://localhost:8080/event-types/order.ORDER_RECEIVED/events \   -H 'X-Nakadi-Cursors:[{""partition"": ""0"", ""offset"":""BEGIN""}]' The details of the partitions and their offsets for an event type are available via its partitions resource. Event Stream Keepalives If there are no events to be delivered Nakadi will keep a streaming connection open by periodically sending a batch with no events but which contains a cursor pointing to the current offset. For example: curl -v http://localhost:8080/event-types/order.ORDER_RECEIVED/events    HTTP/1.1 200 OK  {""cursor"":{""partition"":""0"",""offset"":""6""},""events"":[{""order_number"": ""ORDER_003"", ""metadata"": {""eid"": ""4cc6d2f0-eb01-11e5-b606-1c6f65464fc6"", ""occurred_at"": ""2016-03-15T23:58:15+01:00""}}]} {""cursor"":{""partition"":""0"",""offset"":""6""}} {""cursor"":{""partition"":""0"",""offset"":""6""}} {""cursor"":{""partition"":""0"",""offset"":""6""}} {""cursor"":{""partition"":""0"",""offset"":""6""}} This can be treated as a keep-alive control for some load balancers. Build and Development Building The project is built with Gradle. The ./gradlew wrapper script will bootstrap the right Gradle version if it's not already installed. The gradle setup is fairly standard, the main tasks are: ./gradlew build: run a build and test ./gradlew clean: clean down the build Some other useful tasks are: ./gradlew acceptanceTest: run the ATs ./gradlew fullAcceptanceTest: run the ATs in the context of Docker ./gradlew dbBootstrap: set up the database ./gradlew cleanDb: clear down the database ./gradlew startDockerContainer: start the docker containers (and download images if needed) ./gradlew stopAndRemoveDockerContainer: shutdown the docker processes ./gradlew startStoragesInDocker: start the storage container (handy for running Nakadi directly or in your IDE) For working with an IDE, the eclipse IDE task is available and you'll be able to import the build.gradle into Intellij IDEA directly. Dependencies The Nakadi server is a Java 8 Spring Boot application. It uses Kafka 0.9 as its broker and PostgreSQL 9.5 as its supporting database. What does the project already implement? REST abstraction over Kafka-like queues Support of event filtering per subscriptions creation of event types low-level interface manual client side partition management is needed no support of commits high-level interface automatic redistribution of partitions between consuming clients commits should be issued to move server-side cursors Contributing Nakadi accepts contributions from the open-source community. Please see the issue tracker for things to work on. Before making a contribution, please let us know by posting a comment to the relevant issue. And if you would like to propose a new feature, do start a new issue explaining the feature you’d like to contribute. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zalando/nakadi"	"Provides a RESTful API on top of Kafka."	"true"
"Messaging"	"JeroMQ"	"https://github.com/zeromq/jeromq"	"Implementation of ZeroMQ."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1046"	"136"	"250"	"GitHub - zeromq/jeromq: Pure Java ZeroMQ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 136 Star 1,046 Fork 250 zeromq/jeromq Code Issues 75 Pull requests 5 Wiki Pulse Graphs Pure Java ZeroMQ 504 commits 1 branch 8 releases 38 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 196f9cc Mar 5, 2016 c-rack Merge pull request #333 from trevorbernard/remove-benjyz … Problem: benjyz no longer wants to be associated to JeroMQ Permalink Failed to load latest commit information. src Avoid extra byte copies in Pub/Sub when Msg contains DirectByteBuffer or Feb 8, 2016 .gitignore Ignore .checkstyle file Nov 19, 2014 .java-version Problem: Project does not have jenv integration Jan 27, 2016 .travis.yml Fix travis ci build Jan 16, 2016 AUTHORS Add ZBeacon implementation Oct 31, 2014 CHANGELOG.md Update CHANGELOG.md Jul 15, 2015 COPYING cleanup license contents Sep 3, 2012 COPYING.LESSER cleanup license contents Sep 3, 2012 README.md Revert ""typo readme"" Mar 5, 2016 pom.xml Revert ""pom.xml: missing bracket"" Mar 5, 2016 README.md JeroMQ Pure Java implementation of libzmq (http://zeromq.org). Features Based on libzmq 3.2.5. ZMTP/2.0 (http://rfc.zeromq.org/spec:15). tcp:// protocol and inproc:// is compatible with zeromq. ipc:// protocol works only between jeromq (uses tcp://127.0.0.1:port internally). Not too bad performance compared to zeromq. 4.5M messages (100B) per sec. Performance. Exactly same developer experience with zeromq and jzmq. Not supported Features ipc:// protocol with zeromq. Java doesn't support UNIX domain socket. pgm:// protocol. Cannot find a pgm Java implementation. Extended Features Build your own StreamEngine's Decoder/Encoder: TestProxyTcp Proxy Contribution Process This project uses the C4 process for all code changes. ""Everyone, without distinction or discrimination, SHALL have an equal right to become a Contributor under the terms of this contract."" Usage Add it to your Maven project's pom.xml:     <dependency>       <groupId>org.zeromq</groupId>       <artifactId>jeromq</artifactId>       <version>0.3.5</version>     </dependency>      <!-- for the latest SNAPSHOT -->     <dependency>       <groupId>org.zeromq</groupId>       <artifactId>jeromq</artifactId>       <version>0.3.6-SNAPSHOT</version>     </dependency>      <!-- If you can't find the latest snapshot -->     <repositories>       <repository>         <id>sonatype-nexus-snapshots</id>         <url>https://oss.sonatype.org/content/repositories/snapshots</url>         <releases>           <enabled>false</enabled>         </releases>         <snapshots>           <enabled>true</enabled>         </snapshots>        </repository>     </repositories> Using ANT To generate an ant build file from pom.xml, issue the following command: mvn ant:ant Also please refer the Wiki. Copying Free use of this software is granted under the terms of the GNU Lesser General Public License (LGPL). For details see the files COPYING and COPYING.LESSER included with the JeroMQ distribution. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zeromq/jeromq"	"Implementation of ZeroMQ."	"true"
"Messaging"	"Smack"	"https://github.com/igniterealtime/Smack/"	"Cross-platform XMPP client library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"975"	"158"	"479"	"GitHub - igniterealtime/Smack: A highly modular and portable open source XMPP client library written in Java for JVMs and Android Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 158 Star 975 Fork 479 igniterealtime/Smack Code Pull requests 7 Wiki Pulse Graphs A highly modular and portable open source XMPP client library written in Java for JVMs and Android http://www.igniterealtime.org/projects/smack/ 2,841 commits 3 branches 25 releases 39 contributors Java 98.6% HTML 1.4% Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.0 4.1 master Nothing to show 4.1.7 4.1.6 4.1.5 4.1.4 4.1.3 4.1.2 4.1.1 4.1.0 4.0.7 4.0.6 4.0.5 4.0.4 4.0.3 4.0.2 4.0.1 4.0.0 4.0.0-rc2 4.0.0-rc1 3.4.1 3.4.0 3.3.1 3.3.0 3.2.2 3.2.1 3.2.0 Nothing to show New pull request Latest commit d1fe5c2 Jul 8, 2016 Flowdalic Use loopback address for Socks5 unit tests … to prevent using an address that is not reachable for whatever reason. Permalink Failed to load latest commit information. config Add checkstyle rule for StringBuilder.append(char) Jul 27, 2015 documentation Fix messaging.md Jun 21, 2016 resources Smack 4.1.7 Apr 14, 2016 smack-android-extensions Merge tag '4.1.2' Jun 27, 2015 smack-android Add Android jar to classpath Apr 12, 2016 smack-bosh SASL Proxy Auth support Sep 21, 2015 smack-compression-jzlib Add JavadocPackage checkstyle Apr 4, 2015 smack-core Implement flexible port selection in Socks5ClientTest Jul 8, 2016 smack-debug-slf4j Fix 'test' dependencies Feb 10, 2016 smack-debug Add Message.toString() providing a short description May 25, 2016 smack-experimental Fix 'test' dependencies Feb 10, 2016 smack-extensions Use loopback address for Socks5 unit tests Jul 8, 2016 smack-im Add support for ""Caps Optimizations"" Jun 30, 2016 smack-integration-test Add support for ""Caps Optimizations"" Jun 30, 2016 smack-java7 Add errorprone check and fix found errors Sep 13, 2015 smack-jingle-old Fix 'test' dependencies Feb 10, 2016 smack-legacy Fix 'test' dependencies Feb 10, 2016 smack-repl Switch to Ammonite REPL Feb 23, 2016 smack-resolver-dnsjava Add JavadocPackage checkstyle Apr 4, 2015 smack-resolver-javax Add JavadocPackage checkstyle Apr 4, 2015 smack-resolver-minidns Merge tag '4.1.7' Apr 14, 2016 smack-sasl-javax Fix 'test' dependencies Feb 10, 2016 smack-sasl-provided Fix 'test' dependencies Feb 10, 2016 smack-tcp Do not re-use the Socket after connect() failed Jun 21, 2016 .gitignore Re-implementing the vCard provider using a pull parser. Extended unit… Feb 9, 2015 .travis.yml Travis-CI: Use Gradle 2.12 Apr 8, 2016 LICENSE Add LICENSE Dec 27, 2014 README.md README: Add #smack IRC badge from kiwiirc Jan 15, 2016 build.gradle build.gradle: Record branch in version string Jun 21, 2016 package-info.java Add JavadocPackage checkstyle Apr 4, 2015 repl repl: cd into PROJECT_ROOT Jun 9, 2016 settings.gradle Add a REPL for Smack (smack-repl) Feb 10, 2016 version.gradle Smack 4.2.0-beta2-SNAPSHOT Apr 15, 2016 README.md Smack Instructions how to use Smack in your Java or Android project are provided in the Smack 4.1 Readme and Upgrade Guide. About Smack is an open source, cross-platform, easy to use, Java XMPP client library. A pure Java library, it can be embedded into your applications to create anything from a full XMPP client to simple XMPP integrations such as sending notification messages and presence-enabling devices. Smack and XMPP allows you to easily exchange data, in various ways e.g. fire-and-forget, publish-subscribe, between human and non-human endpoints. Confused? Have a look at the Overview. Smack - an Ignite Realtime community project. Bug Reporting Only a few users have access for for filling bugs in the tracker. New users should: Read ""How to ask for help or report an issue"" Create a forums account (only e-mail is a requirement, you can skip all the other fields). Login to the forum account Press New in your toolbar and choose Discussion Choose the Smack Developers Forum of Smack and add the tag 'bug_report' to your new post Please search for your issues in the bug tracker before reporting. Contact The developers hang around in #smack (freenode, IRC) and open_chat@conference.igniterealtime.org (XMPP MUC room). Remember that it may take some time (~hours) to get a response. You can also reach us via the Smack Users Forum if you have questions or need support, or the Smack Developers Forum if you want to discuss Smack development. Contributing If you want to start developing for Smack and eventually contribute code back, then please have a look at the Guidelines for Smack Developers and Contributors. The guidelines also contain development quickstart instructions. Resources Bug Tracker: http://issues.igniterealtime.org/browse/SMACK JaCoCo Coverage Reports: https://www.igniterealtime.org/builds/smack/dailybuilds/jacoco/html/ Nightly Builds: http://www.igniterealtime.org/downloads/nightly_smack.jsp Nightly Javadoc: http://www.igniterealtime.org/builds/smack/dailybuilds/javadoc/ Nightly Documentation: http://www.igniterealtime.org/builds/smack/dailybuilds/documentation/ User Forum: http://community.igniterealtime.org/community/support/smack_users Dev Forum: http://community.igniterealtime.org/community/developers/smack Maven Releases: https://oss.sonatype.org/content/repositories/releases/org/igniterealtime/smack/ Maven Snapshots: https://oss.sonatype.org/content/repositories/snapshots/org/igniterealtime/smack/ Donate If you find Smack useful and feel like donating, then you can use one of the following systems: Donate via Flattr Donate via Bitcoin: 1D4k11bsPxRB6rS51fxDty8QYfRVUt5JMB Ignite Realtime Ignite Realtime is an Open Source community composed of end-users and developers around the world who are interested in applying innovative, open-standards-based Real Time Collaboration to their businesses and organizations. We're aimed at disrupting proprietary, non-open standards-based systems and invite you to participate in what's already one of the biggest and most active Open Source communities. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/igniterealtime/Smack/"	"Cross-platform XMPP client library."	"true"
"Miscellaneous"	"Codename One"	"https://www.codenameone.com/"	"Cross platform solution for writing native mobile (iOS, Android, etc.)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"343"	"55"	"96"	"GitHub - codenameone/CodenameOne: Write once run anywhere native mobile apps using a subset of Java 8 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 343 Fork 96 codenameone/CodenameOne Code Issues 366 Pull requests 1 Wiki Pulse Graphs Write once run anywhere native mobile apps using a subset of Java 8 https://www.codenameone.com/ 3,535 commits 12 branches 5 releases Fetching contributors Java 85.7% C# 8.0% Objective-C 3.8% HTML 1.1% C 0.9% C++ 0.3% Other 0.2% Java C# Objective-C HTML C C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags FloatingButton PeerComponentRefactor StylePaintCache Version-3.0 Version-3.1 Version-3.2 Version-3.3 Version-3.4 background-exec gh-pages master revert-1580-master Nothing to show v3.4 v3.3 3.2 3.1 3.0 Nothing to show New pull request Latest commit 38cbf62 Jul 14, 2016 codenameone Added hover support to allow tooltips Permalink Failed to load latest commit information. CodenameOne Added hover support to allow tooltips Jul 14, 2016 CodenameOneDesigner Added some improvements to the general demo preview Jun 23, 2016 Factory Updated paths Mar 29, 2015 Ports Added hover support to allow tooltips Jul 14, 2016 Themes another fix for the combo issue Apr 10, 2016 vm Added support for GMT timezone Jul 14, 2016 .gitignore reverted the build.xml from ignore files Mar 21, 2016 .travis.yml Update .travis.yml Jun 13, 2016 LICENSE License commit Jan 30, 2012 README.md Fix typos in README.md Dec 28, 2015 README.md Codename One Write Once Run Anywhere Native Mobile Apps Using Java Codename One allows Java developers to write their app once and have it work on all mobile devices (iOS, Android etc.). It features a simulator, designer (visual theme/builder) and ports to multiple OS's. Codename One is a mature open source project and its roots go back to Sun Microsystems (2006) where one of its core underlying components was developed and open sourced. This open source project includes the libraries, native OS ports, resource editor & native VM code for Codename One. It also includes themes and there are separate related projects containing demos, skins etc. Codename One can be extended easily using 3rd party libraries that can include native OS code there is an extensive list of these libraries (cn1libs) here. You can learn more about Codename One and its capabilities at the main site and you can read additional documentation here. You can also check out this introduction to Codename One video: Setup & Getting Started With The Code Setup is covered in depth in this article and video. Notice that this covers debugging the simulator and working with the code for that which requires the Codename One plugin for NetBeans. You can install that by installing NetBeans and typing ""Codename One"" in the plugin search section see the getting started tutorial. While Codename One itself works with all major IDE's the code in this repository was designed to work with NetBeans (ex-Sun guys). ParparVM Codename One's iOS VM is quite unique and is open source as well. You can read more about it in its dedicated folder in this repository. ParparVM is a uniquely conservative VM that translates Java bytecode to C code. Thus providing native performance and access while still providing a safety net. This approach is unique to Codename One and is essential for future compatibility! Apple has a tendency to change things abruptly e.g. 64bit support, bitcode etc. Since ParparVM just generates a standard Xcode project there were no code changes required for any of these tectonic shifts. It's as if you handcoded the project yourself! More traditional compilers fall flat in these cases, furthermore they can't use Apple's native tools to their full extent e.g. profilers etc. Getting Help & FAQ We provide support over at StackOverflow when you tag using codenameone, you can ask anything there and we try to be pretty responsive. The StackOverflow link also serves as an excellent community driven FAQ since it literally maps user questions to answers. Codename One has a discussion group where you can post questions. However, due to the nature of that group we try to limit discussions over the source. The discussion forum is intended for simpler usage and more complex source code hacks/native compilation might create noise there. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/codenameone/CodenameOne"	"Cross platform solution for writing native mobile (iOS, Android, etc.)"	"true"
"Miscellaneous"	"Design Patterns"	"https://github.com/iluwatar/java-design-patterns"	"Implementation and explanation of the most common design patterns."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12428"	"1384"	"4157"	"GitHub - iluwatar/java-design-patterns: Design patterns implemented in Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,384 Star 12,428 Fork 4,157 iluwatar/java-design-patterns Code Issues 150 Pull requests 4 Wiki Pulse Graphs Design patterns implemented in Java http://java-design-patterns.com 1,359 commits 4 branches 6 releases 58 contributors Java 98.7% Other 1.3% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages hexagonal-blog master urm Nothing to show 1.12.0 1.11.0 1.10.0 1.9.0 1.8.0 1.7.0 Nothing to show New pull request Latest commit 9f0320a Jul 13, 2016 iluwatar Add some tags to Page Object Permalink Failed to load latest commit information. abstract-document Set version number for next development iteration Jun 30, 2016 abstract-factory Set version number for next development iteration Jun 30, 2016 adapter Set version number for next development iteration Jun 30, 2016 aggregator-microservices Set version number for next development iteration Jun 30, 2016 api-gateway Set version number for next development iteration Jun 30, 2016 async-method-invocation Set version number for next development iteration Jun 30, 2016 bridge Set version number for next development iteration Jun 30, 2016 builder Set version number for next development iteration Jun 30, 2016 business-delegate Set version number for next development iteration Jun 30, 2016 caching Set version number for next development iteration Jun 30, 2016 callback Set version number for next development iteration Jun 30, 2016 chain Set version number for next development iteration Jun 30, 2016 command Set version number for next development iteration Jun 30, 2016 composite Set version number for next development iteration Jun 30, 2016 dao Set version number for next development iteration Jun 30, 2016 data-mapper Set version number for next development iteration Jun 30, 2016 decorator Set version number for next development iteration Jun 30, 2016 delegation Set version number for next development iteration Jun 30, 2016 dependency-injection Set version number for next development iteration Jun 30, 2016 double-checked-locking Set version number for next development iteration Jun 30, 2016 double-dispatch Set version number for next development iteration Jun 30, 2016 event-aggregator Set version number for next development iteration Jun 30, 2016 event-driven-architecture Set version number for next development iteration Jun 30, 2016 execute-around Set version number for next development iteration Jun 30, 2016 facade Set version number for next development iteration Jun 30, 2016 factory-kit Set version number for next development iteration Jun 30, 2016 factory-method Fix formatting Jul 4, 2016 feature-toggle Set version number for next development iteration Jun 30, 2016 fluentinterface Set version number for next development iteration Jun 30, 2016 flux Set version number for next development iteration Jun 30, 2016 flyweight Set version number for next development iteration Jun 30, 2016 front-controller Set version number for next development iteration Jun 30, 2016 half-sync-half-async Set version number for next development iteration Jun 30, 2016 hexagonal Set version number for next development iteration Jun 30, 2016 intercepting-filter Set version number for next development iteration Jun 30, 2016 interpreter Set version number for next development iteration Jun 30, 2016 iterator Set version number for next development iteration Jun 30, 2016 layers Set version number for next development iteration Jun 30, 2016 lazy-loading Set version number for next development iteration Jun 30, 2016 mediator Set version number for next development iteration Jun 30, 2016 memento Set version number for next development iteration Jun 30, 2016 message-channel Set version number for next development iteration Jun 30, 2016 model-view-controller Set version number for next development iteration Jun 30, 2016 model-view-presenter Set version number for next development iteration Jun 30, 2016 monad Set version number for next development iteration Jun 30, 2016 monostate Set version number for next development iteration Jun 30, 2016 multiton Set version number for next development iteration Jun 30, 2016 mute-idiom Set version number for next development iteration Jun 30, 2016 mutex Set version number for next development iteration Jun 30, 2016 naked-objects Set version number for next development iteration Jun 30, 2016 null-object Set version number for next development iteration Jun 30, 2016 object-pool Set version number for next development iteration Jun 30, 2016 observer Set version number for next development iteration Jun 30, 2016 page-object Add some tags to Page Object Jul 13, 2016 poison-pill Set version number for next development iteration Jun 30, 2016 private-class-data Set version number for next development iteration Jun 30, 2016 producer-consumer Set version number for next development iteration Jun 30, 2016 property Set version number for next development iteration Jun 30, 2016 prototype Set version number for next development iteration Jun 30, 2016 proxy Set version number for next development iteration Jun 30, 2016 publish-subscribe Set version number for next development iteration Jun 30, 2016 reactor Set version number for next development iteration Jun 30, 2016 reader-writer-lock Set version number for next development iteration Jun 30, 2016 repository Set version number for next development iteration Jun 30, 2016 resource-acquisition-is-initialization Set version number for next development iteration Jun 30, 2016 semaphore Set version number for next development iteration Jun 30, 2016 servant Set version number for next development iteration Jun 30, 2016 service-layer Set version number for next development iteration Jun 30, 2016 service-locator Set version number for next development iteration Jun 30, 2016 singleton Set version number for next development iteration Jun 30, 2016 specification Add aliases for Specification pattern Jul 7, 2016 state Set version number for next development iteration Jun 30, 2016 step-builder Set version number for next development iteration Jun 30, 2016 strategy Set version number for next development iteration Jun 30, 2016 template-method Set version number for next development iteration Jun 30, 2016 thread-pool Set version number for next development iteration Jun 30, 2016 tolerant-reader Set version number for next development iteration Jun 30, 2016 twin Set version number for next development iteration Jun 30, 2016 value-object Set version number for next development iteration Jun 30, 2016 visitor Set version number for next development iteration Jun 30, 2016 .gitignore build check style error-- Apr 19, 2016 .travis.yml Test commit for #255 Apr 3, 2016 CODE_COVERAGE.md Added capability for test coverage report generation and steps to do so. Nov 22, 2015 CONTRIBUTING.MD Update CONTRIBUTING.MD Dec 27, 2015 LICENSE.md Update license year from 2014 to range '2014-2016' Feb 3, 2016 README.md Add License Shield Apr 24, 2016 checkstyle-suppressions.xml #358 Added license to all files using plugin Jan 27, 2016 checkstyle.xml #358 Added license to all files using plugin Jan 27, 2016 exclude-pmd.properties #358 Added license to all files using plugin Jan 27, 2016 faq.md Changed page-index to 1 for a better structured navbar Dec 19, 2015 pom.xml exclude library class from jacoco code coverage Jul 9, 2016 update-ghpages.sh #358 Added license to all files using plugin Jan 27, 2016 README.md Design patterns implemented in Java Introduction Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system. Design patterns can speed up the development process by providing tested, proven development paradigms. Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns. Getting started Before you dive into the material, you should be familiar with various Programming/Software Design Principles. All designs should be as simple as possible. You should start with KISS, YAGNI, and Do The Simplest Thing That Could Possibly Work principles. Complexity and patterns should only be introduced when they are needed for practical extensibility. Once you are familiar with these concepts you can start drilling down into patterns by any of the following approaches Using difficulty tags, Difficulty-Beginner, Difficulty-Intermediate & Difficulty-Expert. Using pattern categories, Creational, Behavioral and others. Search for a specific pattern. Can't find one? Please report a new pattern here. How to contribute If you are willing to contribute to the project you will find the relevant information in our developer wiki. We will help you and answer your questions in the Gitter chatroom. License This project is licensed under the terms of the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/iluwatar/java-design-patterns"	"Implementation and explanation of the most common design patterns."	"true"
"Miscellaneous"	"Failsafe"	"https://github.com/jhalterman/failsafe"	"Simple failure handling with retries and circuit breakers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"689"	"43"	"33"	"GitHub - jhalterman/failsafe: Simple, sophisticated failure handling Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 689 Fork 33 jhalterman/failsafe Code Issues 8 Pull requests 0 Pulse Graphs Simple, sophisticated failure handling 143 commits 4 branches 13 releases 5 contributors Java 99.8% Shell 0.2% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages listeners master typed Nothing to show recurrent-0.7.1 recurrent-0.7.0 recurrent-0.6.0 recurrent-0.5.0 recurrent-0.4.0 recurrent-0.3.3 recurrent-0.3.2 recurrent-0.3.1 recurrent-0.3.0 failsafe-0.8.3 failsafe-0.8.2 failsafe-0.8.1 failsafe-0.8.0 Nothing to show New pull request Latest commit 0209e97 Jul 15, 2016 jhalterman Simplify HalfOpenState transition logic to fail on first failure when… … … a success threshold is configured. Permalink Failed to load latest commit information. bin Refactored for Failsafe. Jun 11, 2016 src Simplify HalfOpenState transition logic to fail on first failure when… Jul 15, 2016 .gitignore initial commit Jun 29, 2015 .travis.yml Enable fast travis builds Mar 30, 2016 CHANGES.md Updated changelog for 0.8.3 Jul 6, 2016 LICENSE Added license file Jul 7, 2015 README.md Added onRetriesExceeded listener Jul 1, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jul 6, 2016 README.md Failsafe Simple, sophisticated failure handling. Introduction Failsafe is a lightweight, zero-dependency library for handling failures. It was designed to be as easy to use as possible, with a concise API for handling everday use cases and the flexibility to handle everything else. Failsafe features: Retries Retry policies Synchronous and asynchronous retries Circuit breakers Configuration Execution context Event listeners Asynchronous API integration CompletableFuture and functional interface integration Execution tracking Supports Java 6+ though the documentation uses lambdas for simplicity. Setup Add the latest Failsafe Maven dependency to your project. Usage Retries One of the core Failsafe features is retries. To start, define a RetryPolicy that expresses when retries should be performed: RetryPolicy retryPolicy = new RetryPolicy()   .retryOn(ConnectException.class)   .withDelay(1, TimeUnit.SECONDS)   .withMaxRetries(3); Then use your RetryPolicy to execute a Runnable or Callable with retries: // Run with retries Failsafe.with(retryPolicy).run(() -> connect());  // Get with retries Connection connection = Failsafe.with(retryPolicy).get(() -> connect()); Java 6 and 7 are also supported: Connection connection = Failsafe.with(retryPolicy).get(new Callable<Connection>() {   public Connection call() {     return connect();   } }); Retry Policies Failsafe's retry policies provide flexibility in allowing you to express when retries should be performed. A policy can allow retries on particular failures: RetryPolicy retryPolicy = new RetryPolicy()   .retryOn(ConnectException.class, SocketException.class);   .retryOn(failure -> failure instanceof ConnectException); And for particular results or conditions: retryPolicy   .retryWhen(null);   .retryIf(result -> result == null);  It can add a fixed delay between retries: retryPolicy.withDelay(1, TimeUnit.SECONDS); Or a delay that backs off exponentially: retryPolicy.withBackoff(1, 30, TimeUnit.SECONDS); It can add a max number of retries and a max retry duration: retryPolicy   .withMaxRetries(100)   .withMaxDuration(5, TimeUnit.MINUTES); It can also specify which results, failures or conditions to abort retries on: retryPolicy   .abortWhen(true)   .abortOn(NoRouteToHostException.class)   .abortIf(result -> result == true) Retry policies support multiple retry or abort conditions of the same type: retryPolicy   .retryWhen(null)   .retryWhen(""""); And of course we can combine any of these things into a single policy. Synchronous Retries With a retry policy defined, we can perform a retryable synchronous execution: // Run with retries Failsafe.with(retryPolicy).run(this::connect);  // Get with retries Connection connection = Failsafe.with(retryPolicy).get(this::connect); Asynchronous Retries Asynchronous executions can be performed and retried on a ScheduledExecutorService or custom Scheduler implementation, and return a FailsafeFuture. When the execution succeeds or the retry policy is exceeded, the future is completed and any registered listeners are called: Failsafe.with(retryPolicy)   .with(executor)   .onSuccess(connection -> log.info(""Connected to {}"", connection))   .onFailure(failure -> log.error(""Connection attempts failed"", failure))   .get(this::connect); Circuit Breakers Circuit breakers are a way of creating systems that fail-fast by temporarily disabling execution as a way of preventing system overload. Creating a CircuitBreaker is straightforward: CircuitBreaker breaker = new CircuitBreaker()   .withFailureThreshold(3, 10)   .withSuccessThreshold(5)   .withDelay(1, TimeUnit.MINUTES); We can then execute a Runnable or Callable with the breaker: Failsafe.with(breaker).run(this::connect); When a configured threshold of execution failures occurs on a circuit breaker, the circuit is opened and further execution requests fail with CircuitBreakerOpenException. After a delay, the circuit is half-opened and trial executions are attempted to determine whether the circuit should be closed or opened again. If the trial executions exceed a success threshold, the breaker is closed again and executions will proceed as normal. Circuit Breaker Configuration Circuit breakers can be flexibly configured to express when the circuit should be opened or closed. A circuit breaker can be configured to open when a successive number of executions have failed: CircuitBreaker breaker = new CircuitBreaker()   .withFailureThreshold(5); Or when, for example, the last 3 out of 5 executions have failed: breaker.withFailureThreshold(3, 5); After opening, a breaker is typically configured to delay before attempting to close again: breaker.withDelay(1, TimeUnit.MINUTES); The breaker can be configured to close again if a number of trial executions succeed, else it will re-open: breaker.withSuccessThreshold(5); The breaker can also be configured to close again if, for example, the last 3 out of 5 executions succeed, else it will re-open: breaker.withSuccessThreshold(3, 5); The breaker can be configured to only recognize certain results, exceptions or conditions as failures: breaker.   .failWhen(true)   .failOn(NoRouteToHostException.class)   .failIf((result, failure) -> result == 500 || failure instanceof NoRouteToHostException); And the breaker can be configured to recognize executions that exceed a certain timeout as failures: breaker.withTimeout(10, TimeUnit.SECONDS); With Retries A CircuitBreaker can be used along with a RetryPolicy: Failsafe.with(retryPolicy).with(breaker).get(this::connect); Execution failures are first retried according to the RetryPolicy, then if the policy is exceeded the failure is recorded by the CircuitBreaker. Failing Together A circuit breaker can and should be shared across code that accesses inter-dependent system components that fail together. This ensures that if the circuit is opened, executions against one component that rely on another component will not be allowed until the circuit is closed again. Standalone Usage A CircuitBreaker can also be manually operated in a standalone way: breaker.open(); breaker.halfOpen(); breaker.close();  if (breaker.allowsExecution()) {   try {     doSomething();     breaker.recordSuccess();   } catch (Exception e) {     breaker.recordFailure(e);   } } Execution Context Failsafe can provide an ExecutionContext containing execution related information such as the number of execution attempts as well as start and elapsed times: Failsafe.with(retryPolicy).run(ctx -> {   log.debug(""Connection attempt #{}"", ctx.getExecutions());   connect(); }); Event Listeners Failsafe supports a variety of execution and retry event listeners: Failsafe.with(retryPolicy)   .onRetry((c, f, stats) -> log.warn(""Failure #{}. Retrying."", stats.getExecutions()))   .onFailedAttempt(failure -> log.error(""Connection attempts failed"", failure))   .onSuccess(cxn -> log.info(""Connected to {}"", cxn))   .get(this::connect); Asynchronous listeners are also supported: Failsafe.with(retryPolicy)   .with(executor)   .onFailureAsync(e -> log.error(""Failed to create connection"", e))   .onSuccessAsync(cxn -> log.info(""Connected to {}"", cxn), anotherExecutor); Java 6 and 7 users can extend the Listeners class and override individual event handlers: Failsafe.with(retryPolicy)   .with(new Listeners<Connection>() {     public void onRetry(Connection cxn, Throwable failure, ExecutionStats stats) {       log.warn(""Failure #{}. Retrying."", stats.getExecutions());     }   }).get(() -> connect()); CircuitBreaker related event listeners can also be registered: circuitBreaker.onOpen(() -> log.info(""The circuit was opened"")); Asynchronous API Integration Failsafe can be integrated with asynchronous code that reports completion via callbacks. The runAsync, getAsync and futureAsync methods provide an AsyncExecution reference that can be used to manually perform retries or completion inside asynchronous callbacks: Failsafe.with(retryPolicy)   .with(executor)   .getAsync(execution -> service.connect().whenComplete((result, failure) -> {     if (execution.complete(result, failure))       log.info(""Connected"");     else if (!execution.retry())       log.error(""Connection attempts failed"", failure);   })); Failsafe can also perform asynchronous executions and retries on 3rd party schedulers via the Scheduler interface. See the Vert.x example for a more detailed implementation. CompletableFuture Integration Java 8 users can use Failsafe to retry CompletableFuture calls: Failsafe.with(retryPolicy)   .with(executor)   .future(this::connectAsync)   .thenApplyAsync(value -> value + ""bar"")   .thenAccept(System.out::println)); Functional Interface Integration Failsafe can be used to create retryable Java 8 functional interfaces: Function<String, Connection> connect = address -> Failsafe.with(retryPolicy).get(() -> connect(address)); We can retry streams: Failsafe.with(retryPolicy).run(() -> Stream.of(""foo"").map(value -> value + ""bar"")); Individual Stream operations: Stream.of(""foo"").map(value -> Failsafe.with(retryPolicy).get(() -> value + ""bar"")); Or individual CompletableFuture stages: CompletableFuture.supplyAsync(() -> Failsafe.with(retryPolicy).get(() -> ""foo""))   .thenApplyAsync(value -> Failsafe.with(retryPolicy).get(() -> value + ""bar"")); Execution Tracking In addition to automatically performing retries, Failsafe can be used to track executions for you, allowing you to manually retry as needed: Execution execution = new Execution(retryPolicy); while (!execution.isComplete()) {   try {     doSomething();     execution.complete();   } catch (ConnectException e) {     execution.recordFailure(e);   } } Execution tracking is also useful for integrating with APIs that have their own retry mechanism: Execution execution = new Execution(retryPolicy);  // On failure if (execution.canRetryOn(someFailure))   service.scheduleRetry(execution.getWaitMillis(), TimeUnit.MILLISECONDS); See the RxJava example for a more detailed implementation. Example Integrations Failsafe was designed to integrate nicely with existing libraries. Here are some example integrations: Java 8 Netty RxJava Vert.x Public API Integration For library developers, Failsafe integrates nicely into public APIs, allowing your users to configure retry policies for different opererations. One integration approach is to subclass the RetryPolicy class, then expose that as part of your API while the rest of Failsafe remains internal. Another approach is to use something like the Maven shade plugin to relocate Failsafe into your project's package structure as desired. Docs JavaDocs are available here. Contribute Failsafe is a volunteer effort. If you use it and you like it, you can help by spreading the word! License Copyright 2015-2016 Jonathan Halterman - Released under the Apache 2.0 license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jhalterman/failsafe"	"Simple failure handling with retries and circuit breakers."	"true"
"Miscellaneous"	"J2ObjC"	"https://github.com/google/j2objc"	"Java to Objective-C translator for porting Android libraries to iOS."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4221"	"288"	"548"	"GitHub - google/j2objc: A Java to iOS Objective-C translation tool and runtime. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 288 Star 4,221 Fork 548 google/j2objc Code Issues 50 Pull requests 1 Wiki Pulse Graphs A Java to iOS Objective-C translation tool and runtime. http://j2objc.org 2,772 commits 2 branches 18 releases 20 contributors Java 90.0% Objective-C 3.9% C 2.7% C++ 1.2% Makefile 1.1% Objective-C++ 0.7% Other 0.4% Java Objective-C C C++ Makefile Objective-C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 1.0.2 1.0.1 1.0.0 0.9.8.2.1 0.9.8.2 0.9.8.1 0.9.8 0.9.7 0.9.6.1 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9 0.8.8 0.8.7 Nothing to show New pull request Latest commit 6ed4ceb Jun 29, 2016 tomball committed on GitHub Merge pull request #760 from Buggaboo/corrected_modulemaps_location_a… … …nd_declaration  corrected modulemaps location and declaration Permalink Failed to load latest commit information. annotations Adds @RetainedWith, which can be used to prevent leaks from certain r… May 27, 2016 cycle_finder Updated project support files. Jun 24, 2016 doc Moved -X options into separate help message, like javac. Jan 11, 2016 examples/Hello Added xctests to hello example, to get presubmit build times. Mar 8, 2016 guava Makefile cleanup, make common IS_CLEAN_GOAL and IS_TEST_GOAL variables. Apr 28, 2016 inject/javax_inject Merged compiler warnings build refs, added -Wmissing-field-initialize… Dec 14, 2015 java_deps Rolled back JDT update, which broke the public build. May 27, 2016 jre_emul Cleaned up previous pull request: formatting, indention, trailing whi… Jun 29, 2016 jsr305 Issue #708: fixed jsr305/Makefile to build with python3. Feb 17, 2016 junit Retry of first OpenJDK step: added android/platform directory, copied… Mar 8, 2016 make corrected_modulemaps_location_and_declaration Jun 17, 2016 protobuf Add overloads for registerAllExtension(ExtensionRegistryLite). Jun 29, 2016 scripts Add metadata updating scripts to public repo. Jun 24, 2016 testing Adds [IOSClass getMethodWithSelector:] and rewrites IosMockMaker.java… Jun 24, 2016 translator Implement DiagnosticListener for logging javac errors. Jun 29, 2016 xalan Update usage of tar to copy header files to use the -C option instead… Feb 4, 2016 .gitignore Added ignore for Mac filesystem .DS_Store files Apr 20, 2016 .travis.yml Updated Travis CI config to use build containers. Jan 6, 2016 AUTHORS Deleted plain-text README. Feb 5, 2014 CONTRIBUTING.md Updated README, added CONTRIBUTING page. Feb 5, 2014 INSTALL Update build requirements and tool links Dec 7, 2015 LICENSE Updated project files. Feb 4, 2014 Makefile Makefile cleanup, make common IS_CLEAN_GOAL and IS_TEST_GOAL variables. Apr 28, 2016 README.md Update build requirements and tool links Dec 7, 2015 README.md J2ObjC: Java to Objective-C Translator and Runtime Project site: http://j2objc.org J2ObjC blog: http://j2objc.blogspot.com Questions and discussion: http://groups.google.com/group/j2objc-discuss What J2ObjC Is J2ObjC is an open-source command-line tool from Google that translates Java source code to Objective-C for the iOS (iPhone/iPad) platform. This tool enables Java source to be part of an iOS application's build, as no editing of the generated files is necessary. The goal is to write an app's non-UI code (such as application logic and data models) in Java, which is then shared by web apps (using GWT), Android apps, and iOS apps. J2ObjC supports most Java language and runtime features required by client-side application developers, including exceptions, inner and anonymous classes, generic types, threads and reflection. JUnit test translation and execution is also supported. J2ObjC is currently beta quality. Several Google projects rely on it, but when new projects first start working with it, they usually find new bugs to be fixed. If you run into issues with your project, please report them! What J2ObjC isn't J2ObjC does not provide any sort of platform-independent UI toolkit, nor are there any plans to do so in the future. We believe that iOS UI code needs to be written in Objective-C, Objective-C++ or Swift using Apple's iOS SDK (Android UIs using Android's API, web app UIs using GWT, etc.). J2ObjC cannot convert Android binary applications. Developers must have source code for their Android app, which they either own or are licensed to use. Requirements JDK 1.7 or higher Mac workstation or laptop OS X 10.10 or higher Xcode 7 or higher License This library is distributed under the Apache 2.0 license found in the LICENSE file with the following exceptions. The protocol buffers library is distributed under the same BSD license as Google's protocol buffers. See README and LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/j2objc"	"Java to Objective-C translator for porting Android libraries to iOS."	"true"
"Miscellaneous"	"jabba"	"https://github.com/shyiko/jabba"	"Java Version Manager inspired by nvm."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"98"	"9"	"7"	"GitHub - shyiko/jabba: Install and manage Java with ease Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 98 Fork 7 shyiko/jabba Code Issues 3 Pull requests 0 Pulse Graphs Install and manage Java with ease 49 commits 2 branches 6 releases 4 contributors Go 82.2% Shell 13.8% Makefile 4.0% Go Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.3.3 0.3.2 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit ffdaec7 Jul 6, 2016 shyiko committed on GitHub Merge pull request #10 from drejmar/patch-1 … Add 1.8.91 Permalink Failed to load latest commit information. cfg Added support for custom registries Mar 26, 2016 command Suppressed verbose output on tgz extraction Mar 30, 2016 semver 0.3.0 Mar 26, 2016 .editorconfig Initial Mar 23, 2016 .gitattributes Initial Mar 24, 2016 .gitignore Initial Mar 24, 2016 .travis.yml Initial Mar 24, 2016 Makefile Added install target to Makefile Mar 26, 2016 changelog.md Added 0.3.3 release notes Mar 31, 2016 glide.lock Initial Mar 24, 2016 glide.yaml Initial Mar 24, 2016 index.json Add 1.8.91 Jul 6, 2016 install.sh Merge remote-tracking branch 'origin/master' Jun 11, 2016 jabba.go Redirected ""current"" from stderr to stdout Mar 26, 2016 readme.md Added proxy usage note (readme.md) Jun 11, 2016 readme.md jabba Java Version Manager inspired by nvm (Node.js). You might have come across similar beauty in Go (gvm) or Ruby (rvm). Supports installation of Oracle JDK (default), Zulu OpenJDK (since 0.3.0) and from custom URLs. Tested on Mac OS X and Linux. Windows support is coming in #1. It's written in Go to make maintenance easier (significantly shorter, easier to understand and less prone to errors compared to pure shell implementation). Plus it enables us to support Windows natively (no Cygwin) without rewriting the whole thing in PowerShell or whatever. The goal is to provide unified pain-free experience of installing (and switching between different versions of) JDK. jabba has a single responsibility - managing different versions of JDK. For an easy way to install Scala/Kotlin/Ceylon/Groovy SBT/Maven/Gradle/Ant (+ a lot more) see SDKMAN. It's an excellent project and I highly recommend you give it a try. Installation (use the same command to upgrade) curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh In fish command looks a little bit different - curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash; and . ~/.jabba/jabba.fish If you don't have curl installed - replace curl -sL with wget -qO-. If you are behind a proxy see - curl / wget manpage. Usually simple http_proxy=http://proxy-server:port https_proxy=http://proxy-server:port curl -sL ... is enough. Usage # install Oracle JDK jabba install 1.8 # ""jabba use 1.8"" will be called automatically    # install Zulu OpenJDK (since 0.3.0) jabba install zulu@1.8.72  # install from custom URL (supported qualifiers: zip (since 0.3.0), tgz, dmg, bin) jabba install 1.8.0-custom=tgz+http://example.com/distribution.tar.gz jabba install 1.8.0-custom=zip+file:///opt/distribution.zip  # list all installed JDK's jabba ls  # switch to a different version of JDK jabba use 1.6.65  # list available JDK's jabba ls-remote  # set default java version on shell (since 0.2.0) jabba alias default 1.6.65 For more information see jabba --help. Development PREREQUISITE: go1.6 git clone https://github.com/shyiko/jabba $GOPATH/src/github.com/shyiko/jabba  cd $GOPATH/src/github.com/shyiko/jabba  make fetch  go run jabba.go  # to test a change make test # or ""test-coverage"" if you want to get a coverage breakdown  # to make a build make build # or ""build-release"" (latter is cross-compiling jabba to different OSs/ARCHs)   FAQ Q: How does it compare to ""apt-get install"" (and alike)? A: Single command (jabba install <version>) works regardless of the OS (so you don't need to remember different ways to install JDK on Mac OS X, Arch and two versions of Debian). Package name no longer matters, as well as, whether LTS is over or not. And you can install ANY version, not just the latest stable one. Eager to try upcoming 1.9.0 release? No need to wait - jabba install 1.9.0-110. How about specific build of 1.8? No problem - jabba install 1.8.73. Q: What if I already have java installed? A: jabba feels perfectly fine in the environment where java has already been installed using some other means. You can continue using system JDK and switch to jabba-provided one only when needed (jabba use 1.6.65). License Apache License, Version 2.0 By using this software you agree to Oracle Binary Code License Agreement for the Java SE Platform Products and JavaFX and Oracle Technology Network Early Adopter Development License Agreement (in case of EA releases) (... and Apple's Software License Agreement in case of ""Java for OS X""). This software is for educational purposes only. Use it at your own risk. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/shyiko/jabba"	"Java Version Manager inspired by nvm."	"true"
"Miscellaneous"	"JBake"	"http://jbake.org"	"Static website generator."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"425"	"66"	"174"	"GitHub - jbake-org/jbake: Java based open source static site/blog generator for developers & designers. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 66 Star 425 Fork 174 jbake-org/jbake Code Issues 68 Pull requests 18 Wiki Pulse Graphs Java based open source static site/blog generator for developers & designers. http://jbake.org 463 commits 2 branches 9 releases 31 contributors Java 86.3% HTML 4.1% Groovy 3.3% FreeMarker 3.1% Smarty 3.1% Shell 0.1% Java HTML Groovy FreeMarker Smarty Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v2.1-maven-release Nothing to show v2.4.0 v2.3.2 v2.3.1 v2.3.0 v2.2.1 v2.2.0 v2.1.1 v2.1 v2.0 Nothing to show New pull request Latest commit 2f6bd13 Jul 5, 2016 jonbullock Fixes #266 - 'alltags' now returns all tags used in by any published … content regardless of type. Permalink Failed to load latest commit information. src Fixes #266 - 'alltags' now returns all tags used in by any published Jul 5, 2016 .gitignore Included LICENSE file in distribution script. Mar 24, 2013 .travis.yml Fixes #251 Feb 21, 2016 CONTRIBUTING.asciidoc #43 - Fixed LICENSE link. Jun 30, 2016 LICENSE Added reference to external contributors. Apr 24, 2013 README.asciidoc Fixed link to Contributing guide. Jun 30, 2016 ROADMAP.txt Fixed Travis build ref. Apr 24, 2013 pom.xml Merged #282 Jul 3, 2016 README.asciidoc JBake JBake JBake is a Java based open source static site/blog generator for developers. Documentation Full documentation is available on jbake.org. Contributing We welcome all contributions to the project both big and small. From new features, bug reports to even spelling mistake corrections in the documentation. Please don’t hesitate to submit an issue. The Contributing guide provides information on how to submit an issue or create a pull request to fix a bug or add a new feature to JBake. Versioning The project has adopted the Semantic Versioning spec from v2.2.0 onwards to maintain an understandable backwards compatibility strategy. The version format is as follows: <major>.<minor>.<patch>-<label> An increment of the major version represents incompatible API changes. An increment of the minor version represents additional functionality in a backwards-compatible manner. An increment of the patch version represents backwards-compatible bug fixes. Existence of a label represents a pre-release or build metadata. Community Talk to the developers behind JBake: Mailing list IRC - #jbake on Freenode Talk to other users of JBake on the forum: Forum Build System The project uses Apache Maven as the build system. To build the JBake distribution ZIP file execute the following command from the root of the repo: $ mvn package This will build a ZIP file in the /dist folder. Alternatively you can run directly from the source code using the Maven exec plugin: mvn exec:java -Dexec.mainClass=org.jbake.launcher.Main -Dexec.args=""/fromFolder /tmp/toFolder/"" Tools & Libraries Used Apache Commons IO, Configuration, Lang & Logging Apache Maven Args4j AsciidoctorJ Eclipse IDE Freemarker JUnit Pegdown Jetty Server OrientDB Groovy Copyright & License Licensed under the MIT License, see the LICENSE[LICENSE] file for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jbake-org/jbake"	"Static website generator."	"true"
"Miscellaneous"	"Jimfs"	"https://github.com/google/jimfs"	"In-memory file system."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1026"	"85"	"133"	"GitHub - google/jimfs: An in-memory file system for Java 7+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 85 Star 1,026 Fork 133 google/jimfs Code Issues 6 Pull requests 3 Pulse Graphs An in-memory file system for Java 7+ 376 commits 3 branches 6 releases 10 contributors Java 99.9% Shell 0.1% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master release Nothing to show v1.1 v1.1-rc1 v1.0 v1.0-rc3 v1.0-rc2 v1.0-rc1 Nothing to show New pull request Latest commit 3299e69 Apr 1, 2016 cgdecker Ignore errors that prevent Jimfs.newFileSystem from working in an env… … …ironment where ServiceLoader doesn't work correctly to load the SystemJimfsFileSystemProvider.  This is in relation to #31... I don't entirely understand what's going on there, but it does seem like an exception being thrown from FileSystems.newFileSystem should not prevent the user from getting the FileSystem that's already been created just because it can't be cached. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=118790127 Permalink Failed to load latest commit information. jimfs Ignore errors that prevent Jimfs.newFileSystem from working in an env… Apr 1, 2016 util Make scripts executable and fix Travis config to use container-based … Jul 13, 2015 .gitignore Clean up pom.xml files and change Jimfs to use auto-service to genera… Jan 24, 2014 .travis.yml Update the travis configurations to only build the ""master"" branch or… Mar 14, 2016 CONTRIBUTING.md Add CONTRIBUTING.md file, which will be shown to users on Github when… May 14, 2014 LICENSE Rename COPYING file to LICENSE Oct 29, 2013 README.md Jimfs 1.1 has been released; update the README. Feb 16, 2016 pom.xml Jimfs 1.1 has been released; update the README. Feb 16, 2016 README.md Jimfs Jimfs is an in-memory file system for Java 7 and above, implementing the java.nio.file abstract file system APIs. Getting started The latest release is 1.1. It is available in Maven Central as com.google.jimfs:jimfs:1.1: <dependency>   <groupId>com.google.jimfs</groupId>   <artifactId>jimfs</artifactId>   <version>1.1</version> </dependency> Basic use The simplest way to use Jimfs is to just get a new FileSystem instance from the Jimfs class and start using it: import com.google.common.jimfs.Configuration; import com.google.common.jimfs.Jimfs; ...  // For a simple file system with Unix-style paths and behavior: FileSystem fs = Jimfs.newFileSystem(Configuration.unix()); Path foo = fs.getPath(""/foo""); Files.createDirectory(foo);  Path hello = foo.resolve(""hello.txt""); // /foo/hello.txt Files.write(hello, ImmutableList.of(""hello world""), StandardCharsets.UTF_8); What's supported? Jimfs supports almost all the APIs under java.nio.file. It supports: Creating, deleting, moving and copying files and directories. Reading and writing files with FileChannel or SeekableByteChannel, InputStream, OutputStream, etc. Symbolic links. Hard links to regular files. SecureDirectoryStream, for operations relative to an open directory. Glob and regex path filtering with PathMatcher. Watching for changes to a directory with a WatchService. File attributes. Built-in attribute views that can be supported include ""basic"", ""owner"", ""posix"", ""unix"", ""dos"", ""acl"" and ""user"". Do note, however, that not all attribute views provide useful attributes. For example, while setting and reading POSIX file permissions is possible with the ""posix"" view, those permissions will not actually affect the behavior of the file system. Jimfs also supports creating file systems that, for example, use Windows-style paths and (to an extent) behavior. In general, however, file system behavior is modeled after UNIX and may not exactly match any particular real file system or platform. License Copyright 2013 Google Inc.  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/jimfs"	"In-memory file system."	"true"
"Miscellaneous"	"JPad"	"http://jpad.io/"	"Snippet runner."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JPad - Java scratchpad, REPL and Snippet Runner JPad Snippets Download Help Community Blog Contact JPad Java Scratchpad - Instantly write java snippets and see nicely formatted results. Download View Video Tour Quick Java Scratchpad and Snippet Runner Instantly test any java snippet Query databases, create guava/apache/java collections and quickly view results Beautiful html or console output formatting. No more java.lang.Object@228ccaaf optional autocompletion and smart package importer Write tiny quick java scripts without cruft Interactive REPL Run Java Snippets Copy-paste a snippet, press F5 and see the result instantly We support CSV/excel exporting to excel of all data Saving of generated view as HTML Charting of Tabular Data In future we want to support a lot more including Expand rendering support of java built-in classes. Smart displaying of images / sound / videos Improved Database support JPad Download Contact G+ Linkedin © 2013 JPad.io . All rights reserved. | Sitemap | rss"	"null"	"null"	"Snippet runner."	"true"
"Miscellaneous"	"Lanterna"	"https://github.com/mabe02/lanterna"	"Easy console text GUI library similar to curses."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"311"	"35"	"46"	"GitHub - mabe02/lanterna: Java library for creating text-based GUIs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 311 Fork 46 mabe02/lanterna Code Issues 8 Pull requests 1 Pulse Graphs Java library for creating text-based GUIs 1,886 commits 12 branches 32 releases 14 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags beta2-hack closed/gui-system-redesign closed/mavenize closed/2.0-prep-work gh-pages kba-master master release/jre142 release/1.0 release/2.0 release/2.1 wiki Nothing to show lanterna-3.0.0-beta3 lanterna-3.0.0-beta2 lanterna-3.0.0-beta1 lanterna-3.0.0-alpha6 lanterna-3.0.0-alpha5 lanterna-3.0.0-alpha4 lanterna-3.0.0-alpha3 lanterna-3.0.0-alpha2 lanterna-3.0.0-alpha1 lanterna-2.1.9 lanterna-2.1.8 lanterna-2.1.7 lanterna-2.1.6 lanterna-2.1.5 lanterna-2.1.4 lanterna-2.1.3 lanterna-2.1.2 lanterna-2.1.1 lanterna-2.1.0 lanterna-2.0.4 lanterna-2.0.3 lanterna-2.0.2 lanterna-2.0.1 lanterna-2.0.0 lanterna-1.0.6 lanterna-1.0.5 lanterna-1.0.4 lanterna-1.0.3 lanterna-1.0.2 lanterna-1.0.1 lanterna-1.0 lanterna-1.0-rc1 Nothing to show New pull request Latest commit fd8f01d Jun 28, 2016 mabe02 committed on GitHub Merge pull request #244 from matomatical/patch-1 … fixed small typo Permalink Failed to load latest commit information. docs fix small error Jun 28, 2016 native-integration Submodule should build with source-level and target-level 6, just lik… May 28, 2016 src Allowing window shadow to be fake-transparent Jun 20, 2016 .gitattributes Attempting to normalize line endings for java files Apr 17, 2016 .gitignore Adding an extra library for native integration with Windows, which is… Mar 27, 2016 License.txt Modifying license to LGPL Oct 16, 2011 README.md Updating version number to beta3 Jun 18, 2016 licenseheader.txt Updating license header to 2016 Mar 26, 2016 pom.xml Re-formatting pom.xml Jun 18, 2016 README.md Lanterna Lanterna is a Java library allowing you to write easy semi-graphical user interfaces in a text-only environment, very similar to the C library curses but with more functionality. Lanterna is supporting xterm compatible terminals and terminal emulators such as konsole, gnome-terminal, putty, xterm and many more. One of the main benefits of lanterna is that it's not dependent on any native library but runs 100% in pure Java. Also, when running Lanterna on computers with a graphical environment (such as Windows or Xorg), a bundled terminal emulator written in Swing will be used rather than standard output. This way, you can develop as usual from your IDE (most of them doesn't support ANSI control characters in their output window) and then deploy to your headless server without changing any code. Lanterna is structured into three layers, each built on top of the other and you can easily choose which one fits your needs best. The first is a low level terminal interface which gives you the most basic control of the terminal text area. You can move around the cursor and enable special modifiers for characters put to the screen. You will find these classes in package com.googlecode.lanterna.terminal. The second level is a full screen buffer, the whole text screen in memory and allowing you to write to this before flushing the changes to the actual terminal. This makes writing to the terminal screen similar to modifying a bitmap. You will find these classes in package com.googlecode.lanterna.screen. The third level is a full GUI toolkit with windows, buttons, labels and some other components. It's using a very simple window management system (basically all windows are modal) that is quick and easy to use. You will find these classes in package com.googlecode.lanterna.gui2. Maven Lanterna is available on Maven Central, through Sonatype OSS hosting. Here's what you want to use:     <dependency>         <groupId>com.googlecode.lanterna</groupId>         <artifactId>lanterna</artifactId>         <version>3.0.0-beta3</version>     </dependency> Discussions There is a google group for discussions and announcements related to Lanterna. Development Guide See docs for examples and guides. JavaDoc is available here: http://mabe02.github.io/lanterna/apidocs/3.0/ The JavaDocs for the previous version (2.1) is also available here: http://mabe02.github.io/lanterna/apidocs/2.1/ See wiki for examples and Development Guide: https://code.google.com/p/lanterna/wiki/DevelopmentGuide Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mabe02/lanterna"	"Easy console text GUI library similar to curses."	"true"
"Miscellaneous"	"LightAdmin"	"http://lightadmin.org/"	"Pluggable CRUD UI library for rapid application development."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"430"	"54"	"180"	"GitHub - la-team/light-admin: [PoC] Pluggable CRUD UI library for Java web applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 54 Star 430 Fork 180 la-team/light-admin Code Issues 73 Pull requests 9 Wiki Pulse Graphs [PoC] Pluggable CRUD UI library for Java web applications http://lightadmin.org 824 commits 4 branches 5 releases Fetching contributors Java 75.9% CSS 19.1% JavaScript 5.0% Java CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.0.X master pr/224 uiTestsTravisIntegration Nothing to show 1.2.0.RC1 1.0.1.RELEASE 1.0.0.RELEASE 1.0.0.RC1 1.0.0.M2 Nothing to show New pull request Latest commit 624e80a Jun 12, 2016 max-dev committed on GitHub Merge pull request #255 from elwin013/principal.username-fix … top-navigation-section.jsp: fix for not existing principal.username w… Permalink Failed to load latest commit information. lightadmin-core top-navigation-section.jsp: fix for not existing principal.username w… May 24, 2016 lightadmin-sandbox new (inner) annotation to define file upload constraints: allowed ext… Jun 9, 2015 lightadmin-tests Filters: case insensitive search on string fields ~> Fixed test Jun 20, 2015 screenshots Screenshots added Mar 8, 2013 .gitignore Merged into 'origin' Dec 25, 2012 .travis.yml Travis added Jan 13, 2014 LICENSE #40 Upgrade Spring Data/Rest to the newest version Feb 21, 2014 README.md Update README.md May 15, 2016 formatting.xml Dynamic Spring Data REST infrastructure Sep 9, 2012 pom.xml [SPRING-PLATFORM] Dependency management moved to lightadmin-parent fo… May 31, 2015 README.md LightAdmin - [PoC] Pluggable CRUD UI library for Java web applications The primary goal of this PoC project is to speed up application development by bringing pluggable fully operational data management back-end for JPA based applications and to relieve your codebase for more important stuff. Features DSL configurations: Allows developers to easily configure their administration user interface Displaying persistent entities: Customizable Listing & Quick Views with paging & sorting capabilities CRUD operations: Complete entities manipulation support (including their associations) Automatic Validation: JSR-303 annotation-based validation rules support Search: Allows users to search entities by text fields, dates, numeric values & associations Filtering Scopes: Use scopes to filter data by predefined criteria Pluggable Security: Authentication based on Spring Security REST API: Enriching your application with REST API based on Spring Data REST Easy integration: Servlet 2.5/3.0 web applications supported Integration examples LightAdmin and Spring Boot LightAdmin and JHipster LightAdmin running on Heroku Documentation & Support Web site: lightadmin.org Documentation & Guides: lightadmin.org/getting-started/ Wiki: github.com/la-team/light-admin/wiki Live demo: lightadmin.org/demo CI Server: lightadmin.org/jenkins Use Google Groups for posting questions: groups.google.com/group/lightadmin Use Stack Overflow for posting questions with lightadmin tag Contact LightAdmin Team directly on Twitter: @lightadm_team Bug Reports Bug Reports: github.com/la-team/light-admin/issues License LightAdmin is released under version 2.0 of the Apache License. Contribute You're interested in contributing to LightAdmin? AWESOME. Here are the basic steps: Fork LightAdmin from here: http://github.com/la-team/light-admin Clone your fork Hack away If necessary, rebase your commits into logical chunks, without errors Verify your code by running the test suite, and adding additional tests if able Push the branch up to GitHub Send a pull request to the la-team/light-admin project We'll do our best to get your changes in! Getting started Declare maven dependency for using with Spring 4.0.X directly from Maven Central <dependency>   <groupId>org.lightadmin</groupId>   <artifactId>lightadmin</artifactId>   <version>1.2.0.RC1</version> </dependency> or <dependency>   <groupId>org.lightadmin</groupId>   <artifactId>lightadmin</artifactId>   <version>1.2.0.BUILD-SNAPSHOT</version> </dependency> For snapshots and LightAdmin compatible with Spring 3.2.X, please declare LA Nexus repositories: <repositories>   <repository>     <id>lightadmin-nexus-releases</id>     <url>http://lightadmin.org/nexus/content/repositories/releases</url>     <releases>       <enabled>true</enabled>       <updatePolicy>always</updatePolicy>     </releases>   </repository>   <repository>     <id>lightadmin-nexus-snapshots</id>     <url>http://lightadmin.org/nexus/content/repositories/snapshots</url>     <snapshots>       <enabled>true</enabled>       <updatePolicy>always</updatePolicy>     </snapshots>   </repository>   </repositories> And dependency <dependency>   <groupId>org.lightadmin</groupId>   <artifactId>lightadmin</artifactId>   <version>1.0.0.M2</version> </dependency> Enable LightAdmin web-module in your web.xml if you have one: <context-param>   <param-name>light:administration:base-url</param-name>   <param-value>/admin</param-value> </context-param>  <context-param>   <param-name>light:administration:security</param-name>   <param-value>true</param-value> </context-param>  <context-param>   <param-name>light:administration:base-package</param-name>   <param-value>[package with @Administration configurations, ex.: org.lightadmin.demo.config]</param-value> </context-param> Or enable LightAdmin web-module in your WebApplicationInitializer: @Override public void onStartup(ServletContext servletContext) throws ServletException {   servletContext.setInitParameter(LIGHT_ADMINISTRATION_BASE_URL, ""/admin"");   servletContext.setInitParameter(LIGHT_ADMINISTRATION_BACK_TO_SITE_URL, ""http://lightadmin.org"");   servletContext.setInitParameter(LIGHT_ADMINISTRATION_BASE_PACKAGE, ""org.lightadmin.administration"");    super.onStartup(servletContext); } Include your JPA persistence provider of choice (Hibernate, EclipseLink, OpenJpa) and setup basic Spring JPA configuration. <?xml version=""1.0"" encoding=""UTF-8""?> <beans xmlns=""http://www.springframework.org/schema/beans""        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""        xmlns:jdbc=""http://www.springframework.org/schema/jdbc""        xmlns:jpa=""http://www.springframework.org/schema/data/jpa""        xsi:schemaLocation=""http://www.springframework.org/schema/jdbc                             http://www.springframework.org/schema/jdbc/spring-jdbc.xsd                            http://www.springframework.org/schema/beans                            http://www.springframework.org/schema/beans/spring-beans.xsd                            http://www.springframework.org/schema/data/jpa                            http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"">    <bean id=""entityManagerFactory"" class=""org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"">     <property name=""dataSource"" ref=""dataSource"" />     <property name=""jpaVendorAdapter"">       <bean class=""org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"" />     </property>   </bean>    <bean id=""transactionManager"" class=""org.springframework.orm.jpa.JpaTransactionManager"">     <property name=""entityManagerFactory"" ref=""entityManagerFactory"" />   </bean>  </beans> Create an entity: @Entity public class User {    @Id   @GeneratedValue(strategy = GenerationType.AUTO)   private Integer id;   private String firstname;   private String lastname;    // Getters and setters } Create an @Administration configuration in the package defined in web.xml previously: public class UserAdministration extends AdministrationConfiguration<User> {    public EntityMetadataConfigurationUnit configuration( EntityMetadataConfigurationUnitBuilder configurationBuilder ) {     return configurationBuilder.nameField( ""firstname"" ).build();   }    public ScreenContextConfigurationUnit screenContext( ScreenContextConfigurationUnitBuilder screenContextBuilder ) {     return screenContextBuilder       .screenName( ""Users Administration"" )       .menuName( ""Users"" )       .build();   }    public FieldSetConfigurationUnit listView( final FieldSetConfigurationUnitBuilder fragmentBuilder ) {     return fragmentBuilder       .field( ""firstname"" ).caption( ""First Name"" )       .field( ""lastname"" ).caption( ""Last Name"" )       .build();   }  Voila! You have a brand new LightAdmin back-end configured. Check Out and Build from Source Clone the repository from GitHub: $ git clone git://github.com/la-team/light-admin.git  Navigate into the cloned repository directory: $ cd light-admin  The project uses Maven to build: $ mvn clean install  Running from the Command Line By default, the app will run in 'embedded' mode which does not require any external setup. The Tomcat 7 Maven plugin is configured for you in the POM file. Navigate into demo application directory: $ cd lightadmin-sandbox  Launch Tomcat from the command line: $ mvn tomcat7:run  Access the deployed webapp at http://localhost:8080/lightadmin-sandbox  LightAdmin integration example We prepared an example how easily you can integrate LightAdmin back-end to existing web application. It's based on Spring Travel reference application. Clone the repository from GitHub: $ git clone git://github.com/la-team/lightadmin-spring-travel.git  Navigate into the cloned repository directory: $ cd lightadmin-spring-travel  The project uses Maven to build: $ mvn clean install  Launch Tomcat from the command line: $ mvn tomcat7:run  Access the deployed webapp at http://localhost:8080/booking-mvc  Screenshots Login to LightAdmin: Dashboard: List of persistent entities configured: Search entities by criteria: Quick view for particular entity: Editing entity: Show entity with all fields: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/highwave-group/light-admin"	"Pluggable CRUD UI library for rapid application development."	"true"
"Miscellaneous"	"Modern Java - A Guide to Java 8"	"https://github.com/winterbe/java8-tutorial"	"Popular Java 8 guide."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5652"	"426"	"794"	"GitHub - winterbe/java8-tutorial: Modern Java - A Guide to Java 8 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 426 Star 5,652 Fork 794 winterbe/java8-tutorial Code Issues 0 Pull requests 2 Pulse Graphs Modern Java - A Guide to Java 8 http://winterbe.com 138 commits 1 branch 0 releases 10 contributors Java 92.1% JavaScript 7.9% Java JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 26c0588 Jul 5, 2016 winterbe committed on GitHub Merge pull request #23 from sboekhoff/sboekhoff … Use class instead of bean. Permalink Failed to load latest commit information. res Inroduce sub packages Mar 17, 2015 src/com/winterbe/java8/samples BiConsumer Example Nov 20, 2015 .gitignore Added package custom Oct 13, 2015 LICENSE Happy new year 2016 Jan 5, 2016 README.md Use class instead of bean. Jul 5, 2016 README.md Modern Java - A Guide to Java 8 “Java is still not dead—and people are starting to figure that out.” Welcome to my introduction to Java 8. This tutorial guides you step by step through all new language features. Backed by short and simple code samples you'll learn how to use default interface methods, lambda expressions, method references and repeatable annotations. At the end of the article you'll be familiar with the most recent API changes like streams, functional interfaces, map extensions and the new Date API. No walls of text, just a bunch of commented code snippets. Enjoy! This article was originally posted on my blog. You should follow me on Twitter. Table of Contents Default Methods for Interfaces Lambda expressions Functional Interfaces Method and Constructor References Lambda Scopes Accessing local variables Accessing fields and static variables Accessing Default Interface Methods Built-in Functional Interfaces Predicates Functions Suppliers Consumers Comparators Optionals Streams Filter Sorted Map Match Count Reduce Parallel Streams Sequential Sort Parallel Sort Maps Date API Clock Timezones LocalTime LocalDate LocalDateTime Annotations Where to go from here? Default Methods for Interfaces Java 8 enables us to add non-abstract method implementations to interfaces by utilizing the default keyword. This feature is also known as virtual extension methods. Here is our first example: interface Formula {     double calculate(int a);      default double sqrt(int a) {         return Math.sqrt(a);     } } Besides the abstract method calculate the interface Formula also defines the default method sqrt. Concrete classes only have to implement the abstract method calculate. The default method sqrt can be used out of the box. Formula formula = new Formula() {     @Override     public double calculate(int a) {         return sqrt(a * 100);     } };  formula.calculate(100);     // 100.0 formula.sqrt(16);           // 4.0 The formula is implemented as an anonymous object. The code is quite verbose: 6 lines of code for such a simple calculation of sqrt(a * 100). As we'll see in the next section, there's a much nicer way of implementing single method objects in Java 8. Lambda expressions Let's start with a simple example of how to sort a list of strings in prior versions of Java: List<String> names = Arrays.asList(""peter"", ""anna"", ""mike"", ""xenia"");  Collections.sort(names, new Comparator<String>() {     @Override     public int compare(String a, String b) {         return b.compareTo(a);     } }); The static utility method Collections.sort accepts a list and a comparator in order to sort the elements of the given list. You often find yourself creating anonymous comparators and pass them to the sort method. Instead of creating anonymous objects all day long, Java 8 comes with a much shorter syntax, lambda expressions: Collections.sort(names, (String a, String b) -> {     return b.compareTo(a); }); As you can see the code is much shorter and easier to read. But it gets even shorter: Collections.sort(names, (String a, String b) -> b.compareTo(a)); For one line method bodies you can skip both the braces {} and the return keyword. But it gets even shorter: names.sort((a, b) -> b.compareTo(a)); List now has a sort method. Also the java compiler is aware of the parameter types so you can skip them as well. Let's dive deeper into how lambda expressions can be used in the wild. Functional Interfaces How does lambda expressions fit into Java's type system? Each lambda corresponds to a given type, specified by an interface. A so called functional interface must contain exactly one abstract method declaration. Each lambda expression of that type will be matched to this abstract method. Since default methods are not abstract you're free to add default methods to your functional interface. We can use arbitrary interfaces as lambda expressions as long as the interface only contains one abstract method. To ensure that your interface meet the requirements, you should add the @FunctionalInterface annotation. The compiler is aware of this annotation and throws a compiler error as soon as you try to add a second abstract method declaration to the interface. Example: @FunctionalInterface interface Converter<F, T> {     T convert(F from); } Converter<String, Integer> converter = (from) -> Integer.valueOf(from); Integer converted = converter.convert(""123""); System.out.println(converted);    // 123 Keep in mind that the code is also valid if the @FunctionalInterface annotation would be omitted. Method and Constructor References The above example code can be further simplified by utilizing static method references: Converter<String, Integer> converter = Integer::valueOf; Integer converted = converter.convert(""123""); System.out.println(converted);   // 123 Java 8 enables you to pass references of methods or constructors via the :: keyword. The above example shows how to reference a static method. But we can also reference object methods: class Something {     String startsWith(String s) {         return String.valueOf(s.charAt(0));     } } Something something = new Something(); Converter<String, String> converter = something::startsWith; String converted = converter.convert(""Java""); System.out.println(converted);    // ""J"" Let's see how the :: keyword works for constructors. First we define an example class with different constructors: class Person {     String firstName;     String lastName;      Person() {}      Person(String firstName, String lastName) {         this.firstName = firstName;         this.lastName = lastName;     } } Next we specify a person factory interface to be used for creating new persons: interface PersonFactory<P extends Person> {     P create(String firstName, String lastName); } Instead of implementing the factory manually, we glue everything together via constructor references: PersonFactory<Person> personFactory = Person::new; Person person = personFactory.create(""Peter"", ""Parker""); We create a reference to the Person constructor via Person::new. The Java compiler automatically chooses the right constructor by matching the signature of PersonFactory.create. Lambda Scopes Accessing outer scope variables from lambda expressions is very similar to anonymous objects. You can access final variables from the local outer scope as well as instance fields and static variables. Accessing local variables We can read final local variables from the outer scope of lambda expressions: final int num = 1; Converter<Integer, String> stringConverter =         (from) -> String.valueOf(from + num);  stringConverter.convert(2);     // 3 But different to anonymous objects the variable num does not have to be declared final. This code is also valid: int num = 1; Converter<Integer, String> stringConverter =         (from) -> String.valueOf(from + num);  stringConverter.convert(2);     // 3 However num must be implicitly final for the code to compile. The following code does not compile: int num = 1; Converter<Integer, String> stringConverter =         (from) -> String.valueOf(from + num); num = 3; Writing to num from within the lambda expression is also prohibited. Accessing fields and static variables In contrast to local variables, we have both read and write access to instance fields and static variables from within lambda expressions. This behaviour is well known from anonymous objects. class Lambda4 {     static int outerStaticNum;     int outerNum;      void testScopes() {         Converter<Integer, String> stringConverter1 = (from) -> {             outerNum = 23;             return String.valueOf(from);         };          Converter<Integer, String> stringConverter2 = (from) -> {             outerStaticNum = 72;             return String.valueOf(from);         };     } } Accessing Default Interface Methods Remember the formula example from the first section? Interface Formula defines a default method sqrt which can be accessed from each formula instance including anonymous objects. This does not work with lambda expressions. Default methods cannot be accessed from within lambda expressions. The following code does not compile: Formula formula = (a) -> sqrt(a * 100); Built-in Functional Interfaces The JDK 1.8 API contains many built-in functional interfaces. Some of them are well known from older versions of Java like Comparator or Runnable. Those existing interfaces are extended to enable Lambda support via the @FunctionalInterface annotation. But the Java 8 API is also full of new functional interfaces to make your life easier. Some of those new interfaces are well known from the Google Guava library. Even if you're familiar with this library you should keep a close eye on how those interfaces are extended by some useful method extensions. Predicates Predicates are boolean-valued functions of one argument. The interface contains various default methods for composing predicates to complex logical terms (and, or, negate) Predicate<String> predicate = (s) -> s.length() > 0;  predicate.test(""foo"");              // true predicate.negate().test(""foo"");     // false  Predicate<Boolean> nonNull = Objects::nonNull; Predicate<Boolean> isNull = Objects::isNull;  Predicate<String> isEmpty = String::isEmpty; Predicate<String> isNotEmpty = isEmpty.negate(); Functions Functions accept one argument and produce a result. Default methods can be used to chain multiple functions together (compose, andThen). Function<String, Integer> toInteger = Integer::valueOf; Function<String, String> backToString = toInteger.andThen(String::valueOf);  backToString.apply(""123"");     // ""123"" Suppliers Suppliers produce a result of a given generic type. Unlike Functions, Suppliers don't accept arguments. Supplier<Person> personSupplier = Person::new; personSupplier.get();   // new Person Consumers Consumers represent operations to be performed on a single input argument. Consumer<Person> greeter = (p) -> System.out.println(""Hello, "" + p.firstName); greeter.accept(new Person(""Luke"", ""Skywalker"")); Comparators Comparators are well known from older versions of Java. Java 8 adds various default methods to the interface. Comparator<Person> comparator = (p1, p2) -> p1.firstName.compareTo(p2.firstName);  Person p1 = new Person(""John"", ""Doe""); Person p2 = new Person(""Alice"", ""Wonderland"");  comparator.compare(p1, p2);             // > 0 comparator.reversed().compare(p1, p2);  // < 0 Optionals Optionals are not functional interfaces, but nifty utilities to prevent NullPointerException. It's an important concept for the next section, so let's have a quick look at how Optionals work. Optional is a simple container for a value which may be null or non-null. Think of a method which may return a non-null result but sometimes return nothing. Instead of returning null you return an Optional in Java 8. Optional<String> optional = Optional.of(""bam"");  optional.isPresent();           // true optional.get();                 // ""bam"" optional.orElse(""fallback"");    // ""bam""  optional.ifPresent((s) -> System.out.println(s.charAt(0)));     // ""b"" Streams A java.util.Stream represents a sequence of elements on which one or more operations can be performed. Stream operations are either intermediate or terminal. While terminal operations return a result of a certain type, intermediate operations return the stream itself so you can chain multiple method calls in a row. Streams are created on a source, e.g. a java.util.Collection like lists or sets (maps are not supported). Stream operations can either be executed sequentially or parallely. Streams are extremely powerful, so I wrote a separate Java 8 Streams Tutorial. You should also check out Stream.js, a JavaScript port of the Java 8 Streams API. Let's first look how sequential streams work. First we create a sample source in form of a list of strings: List<String> stringCollection = new ArrayList<>(); stringCollection.add(""ddd2""); stringCollection.add(""aaa2""); stringCollection.add(""bbb1""); stringCollection.add(""aaa1""); stringCollection.add(""bbb3""); stringCollection.add(""ccc""); stringCollection.add(""bbb2""); stringCollection.add(""ddd1""); Collections in Java 8 are extended so you can simply create streams either by calling Collection.stream() or Collection.parallelStream(). The following sections explain the most common stream operations. Filter Filter accepts a predicate to filter all elements of the stream. This operation is intermediate which enables us to call another stream operation (forEach) on the result. ForEach accepts a consumer to be executed for each element in the filtered stream. ForEach is a terminal operation. It's void, so we cannot call another stream operation. stringCollection     .stream()     .filter((s) -> s.startsWith(""a""))     .forEach(System.out::println);  // ""aaa2"", ""aaa1"" Sorted Sorted is an intermediate operation which returns a sorted view of the stream. The elements are sorted in natural order unless you pass a custom Comparator. stringCollection     .stream()     .sorted()     .filter((s) -> s.startsWith(""a""))     .forEach(System.out::println);  // ""aaa1"", ""aaa2"" Keep in mind that sorted does only create a sorted view of the stream without manipulating the ordering of the backed collection. The ordering of stringCollection is untouched: System.out.println(stringCollection); // ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1 Map The intermediate operation map converts each element into another object via the given function. The following example converts each string into an upper-cased string. But you can also use map to transform each object into another type. The generic type of the resulting stream depends on the generic type of the function you pass to map. stringCollection     .stream()     .map(String::toUpperCase)     .sorted((a, b) -> b.compareTo(a))     .forEach(System.out::println);  // ""DDD2"", ""DDD1"", ""CCC"", ""BBB3"", ""BBB2"", ""AAA2"", ""AAA1"" Match Various matching operations can be used to check whether a certain predicate matches the stream. All of those operations are terminal and return a boolean result. boolean anyStartsWithA =     stringCollection         .stream()         .anyMatch((s) -> s.startsWith(""a""));  System.out.println(anyStartsWithA);      // true  boolean allStartsWithA =     stringCollection         .stream()         .allMatch((s) -> s.startsWith(""a""));  System.out.println(allStartsWithA);      // false  boolean noneStartsWithZ =     stringCollection         .stream()         .noneMatch((s) -> s.startsWith(""z""));  System.out.println(noneStartsWithZ);      // true Count Count is a terminal operation returning the number of elements in the stream as a long. long startsWithB =     stringCollection         .stream()         .filter((s) -> s.startsWith(""b""))         .count();  System.out.println(startsWithB);    // 3 Reduce This terminal operation performs a reduction on the elements of the stream with the given function. The result is an Optional holding the reduced value. Optional<String> reduced =     stringCollection         .stream()         .sorted()         .reduce((s1, s2) -> s1 + ""#"" + s2);  reduced.ifPresent(System.out::println); // ""aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"" Parallel Streams As mentioned above streams can be either sequential or parallel. Operations on sequential streams are performed on a single thread while operations on parallel streams are performed concurrently on multiple threads. The following example demonstrates how easy it is to increase the performance by using parallel streams. First we create a large list of unique elements: int max = 1000000; List<String> values = new ArrayList<>(max); for (int i = 0; i < max; i++) {     UUID uuid = UUID.randomUUID();     values.add(uuid.toString()); } Now we measure the time it takes to sort a stream of this collection. Sequential Sort long t0 = System.nanoTime();  long count = values.stream().sorted().count(); System.out.println(count);  long t1 = System.nanoTime();  long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0); System.out.println(String.format(""sequential sort took: %d ms"", millis));  // sequential sort took: 899 ms Parallel Sort long t0 = System.nanoTime();  long count = values.parallelStream().sorted().count(); System.out.println(count);  long t1 = System.nanoTime();  long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0); System.out.println(String.format(""parallel sort took: %d ms"", millis));  // parallel sort took: 472 ms As you can see both code snippets are almost identical but the parallel sort is roughly 50% faster. All you have to do is change stream() to parallelStream(). Maps As already mentioned maps do not directly support streams. There's no stream() method available on the Map interface itself, however you can create specialized streams upon the keys, values or entries of a map via map.keySet().stream(), map.values().stream() and map.entrySet().stream(). Furthermore maps support various new and useful methods for doing common tasks. Map<Integer, String> map = new HashMap<>();  for (int i = 0; i < 10; i++) {     map.putIfAbsent(i, ""val"" + i); }  map.forEach((id, val) -> System.out.println(val)); The above code should be self-explaining: putIfAbsent prevents us from writing additional if null checks; forEach accepts a consumer to perform operations for each value of the map. This example shows how to compute code on the map by utilizing functions: map.computeIfPresent(3, (num, val) -> val + num); map.get(3);             // val33  map.computeIfPresent(9, (num, val) -> null); map.containsKey(9);     // false  map.computeIfAbsent(23, num -> ""val"" + num); map.containsKey(23);    // true  map.computeIfAbsent(3, num -> ""bam""); map.get(3);             // val33 Next, we learn how to remove entries for a given key, only if it's currently mapped to a given value: map.remove(3, ""val3""); map.get(3);             // val33  map.remove(3, ""val33""); map.get(3);             // null Another helpful method: map.getOrDefault(42, ""not found"");  // not found Merging entries of a map is quite easy: map.merge(9, ""val9"", (value, newValue) -> value.concat(newValue)); map.get(9);             // val9  map.merge(9, ""concat"", (value, newValue) -> value.concat(newValue)); map.get(9);             // val9concat Merge either put the key/value into the map if no entry for the key exists, or the merging function will be called to change the existing value. Date API Java 8 contains a brand new date and time API under the package java.time. The new Date API is comparable with the Joda-Time library, however it's not the same. The following examples cover the most important parts of this new API. Clock Clock provides access to the current date and time. Clocks are aware of a timezone and may be used instead of System.currentTimeMillis() to retrieve the current time in milliseconds since Unix EPOCH. Such an instantaneous point on the time-line is also represented by the class Instant. Instants can be used to create legacy java.util.Date objects. Clock clock = Clock.systemDefaultZone(); long millis = clock.millis();  Instant instant = clock.instant(); Date legacyDate = Date.from(instant);   // legacy java.util.Date Timezones Timezones are represented by a ZoneId. They can easily be accessed via static factory methods. Timezones define the offsets which are important to convert between instants and local dates and times. System.out.println(ZoneId.getAvailableZoneIds()); // prints all available timezone ids  ZoneId zone1 = ZoneId.of(""Europe/Berlin""); ZoneId zone2 = ZoneId.of(""Brazil/East""); System.out.println(zone1.getRules()); System.out.println(zone2.getRules());  // ZoneRules[currentStandardOffset=+01:00] // ZoneRules[currentStandardOffset=-03:00] LocalTime LocalTime represents a time without a timezone, e.g. 10pm or 17:30:15. The following example creates two local times for the timezones defined above. Then we compare both times and calculate the difference in hours and minutes between both times. LocalTime now1 = LocalTime.now(zone1); LocalTime now2 = LocalTime.now(zone2);  System.out.println(now1.isBefore(now2));  // false  long hoursBetween = ChronoUnit.HOURS.between(now1, now2); long minutesBetween = ChronoUnit.MINUTES.between(now1, now2);  System.out.println(hoursBetween);       // -3 System.out.println(minutesBetween);     // -239 LocalTime comes with various factory methods to simplify the creation of new instances, including parsing of time strings. LocalTime late = LocalTime.of(23, 59, 59); System.out.println(late);       // 23:59:59  DateTimeFormatter germanFormatter =     DateTimeFormatter         .ofLocalizedTime(FormatStyle.SHORT)         .withLocale(Locale.GERMAN);  LocalTime leetTime = LocalTime.parse(""13:37"", germanFormatter); System.out.println(leetTime);   // 13:37 LocalDate LocalDate represents a distinct date, e.g. 2014-03-11. It's immutable and works exactly analog to LocalTime. The sample demonstrates how to calculate new dates by adding or subtracting days, months or years. Keep in mind that each manipulation returns a new instance. LocalDate today = LocalDate.now(); LocalDate tomorrow = today.plus(1, ChronoUnit.DAYS); LocalDate yesterday = tomorrow.minusDays(2);  LocalDate independenceDay = LocalDate.of(2014, Month.JULY, 4); DayOfWeek dayOfWeek = independenceDay.getDayOfWeek(); System.out.println(dayOfWeek);    // FRIDAY Parsing a LocalDate from a string is just as simple as parsing a LocalTime: DateTimeFormatter germanFormatter =     DateTimeFormatter         .ofLocalizedDate(FormatStyle.MEDIUM)         .withLocale(Locale.GERMAN);  LocalDate xmas = LocalDate.parse(""24.12.2014"", germanFormatter); System.out.println(xmas);   // 2014-12-24 LocalDateTime LocalDateTime represents a date-time. It combines date and time as seen in the above sections into one instance. LocalDateTime is immutable and works similar to LocalTime and LocalDate. We can utilize methods for retrieving certain fields from a date-time: LocalDateTime sylvester = LocalDateTime.of(2014, Month.DECEMBER, 31, 23, 59, 59);  DayOfWeek dayOfWeek = sylvester.getDayOfWeek(); System.out.println(dayOfWeek);      // WEDNESDAY  Month month = sylvester.getMonth(); System.out.println(month);          // DECEMBER  long minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY); System.out.println(minuteOfDay);    // 1439 With the additional information of a timezone it can be converted to an instant. Instants can easily be converted to legacy dates of type java.util.Date. Instant instant = sylvester         .atZone(ZoneId.systemDefault())         .toInstant();  Date legacyDate = Date.from(instant); System.out.println(legacyDate);     // Wed Dec 31 23:59:59 CET 2014 Formatting date-times works just like formatting dates or times. Instead of using pre-defined formats we can create formatters from custom patterns. DateTimeFormatter formatter =     DateTimeFormatter         .ofPattern(""MMM dd, yyyy - HH:mm"");  LocalDateTime parsed = LocalDateTime.parse(""Nov 03, 2014 - 07:13"", formatter); String string = formatter.format(parsed); System.out.println(string);     // Nov 03, 2014 - 07:13 Unlike java.text.NumberFormat the new DateTimeFormatter is immutable and thread-safe. For details on the pattern syntax read here. Annotations Annotations in Java 8 are repeatable. Let's dive directly into an example to figure that out. First, we define a wrapper annotation which holds an array of the actual annotations: @interface Hints {     Hint[] value(); }  @Repeatable(Hints.class) @interface Hint {     String value(); } Java 8 enables us to use multiple annotations of the same type by declaring the annotation @Repeatable. Variant 1: Using the container annotation (old school) @Hints({@Hint(""hint1""), @Hint(""hint2"")}) class Person {} Variant 2: Using repeatable annotations (new school) @Hint(""hint1"") @Hint(""hint2"") class Person {} Using variant 2 the java compiler implicitly sets up the @Hints annotation under the hood. That's important for reading annotation information via reflection. Hint hint = Person.class.getAnnotation(Hint.class); System.out.println(hint);                   // null  Hints hints1 = Person.class.getAnnotation(Hints.class); System.out.println(hints1.value().length);  // 2  Hint[] hints2 = Person.class.getAnnotationsByType(Hint.class); System.out.println(hints2.length);          // 2 Although we never declared the @Hints annotation on the Person class, it's still readable via getAnnotation(Hints.class). However, the more convenient method is getAnnotationsByType which grants direct access to all annotated @Hint annotations. Furthermore the usage of annotations in Java 8 is expanded to two new targets: @Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE}) @interface MyAnnotation {} Where to go from here? My programming guide to Java 8 ends here. If you want to learn more about all the new classes and features of the JDK 8 API, check out my JDK8 API Explorer. It helps you figuring out all the new classes and hidden gems of JDK 8, like Arrays.parallelSort, StampedLock and CompletableFuture - just to name a few. I've also published a bunch of follow-up articles on my blog that might be interesting to you: Java 8 Stream Tutorial Java 8 Nashorn Tutorial Java 8 Concurrency Tutorial: Threads and Executors Java 8 Concurrency Tutorial: Synchronization and Locks Java 8 Concurrency Tutorial: Atomic Variables and ConcurrentMap Java 8 API by Example: Strings, Numbers, Math and Files Avoid Null Checks in Java 8 Fixing Java 8 Stream Gotchas with IntelliJ IDEA Using Backbone.js with Java 8 Nashorn You should follow me on Twitter. Thanks for reading! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/winterbe/java8-tutorial"	"Popular Java 8 guide."	"true"
"Miscellaneous"	"OpenRefine"	"http://openrefine.org/"	"Tool for working with messy data: cleaning, transforming, extending it with web services and linking it to databases."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3799"	"460"	"669"	"GitHub - OpenRefine/OpenRefine: OpenRefine is a free, open source power tool for working with messy data and improving it Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 460 Star 3,799 Fork 669 OpenRefine/OpenRefine Code Issues 359 Pull requests 15 Wiki Pulse Graphs OpenRefine is a free, open source power tool for working with messy data and improving it 2,148 commits 11 branches 25 releases 30 contributors Java 73.9% JavaScript 19.4% CSS 3.2% HTML 2.5% Shell 0.8% Batchfile 0.1% Ruby 0.1% Java JavaScript CSS HTML Shell Batchfile Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 2.1 contributing-file gh-pages master new-importer-ui new-importing-ui revert-1007-master screwed-refactor split-refactor work Nothing to show v2.6-rc1 v1.0.7 v1.0.6 v1.0.5 v1.0.3 v1.0.2 2.6-rc.2 2.6-beta.1 2.6-alpha.2 2.6-alpha1 2.5 2.5-rc3 2.5-rc1 2.1 2.1-rc1 2.0 1.1 1.0.1 1.0 1.0b1 1.0a4 1.0a3 1.0a2 1.0a1 1.0a Nothing to show New pull request Latest commit aa65bc5 Apr 26, 2016 tfmorris Throw exception on error instead of logging to console Permalink Failed to load latest commit information. .settings Use 4 spaces, no tabs for JS indentation Oct 16, 2015 IDEs/eclipse clean the classpath setting Sep 19, 2015 broker Normalize line endings Mar 23, 2013 conf Issue 630: Change branding from Google Refine to OpenRefine Oct 18, 2012 extensions Merge remote-tracking branch 'upstream/master' Sep 25, 2015 graphics 120 pixel icon for Google OAuth2 registration Feb 10, 2013 licenses Normalize line endings Mar 23, 2013 main Throw exception on error instead of logging to console May 17, 2016 server fix the new line issue Sep 26, 2015 .classpath Update POI to 3.13 - replaces #1029 Sep 25, 2015 .gitattributes Normalize line endings Mar 23, 2013 .gitignore Ignore bin directory Jul 3, 2014 .project Add JavaScript nature Mar 18, 2013 .travis.yml Drop OpenJDK6 from Travis CI suite May 15, 2015 CHANGES.txt Issue 630: Change branding from Google Refine to OpenRefine Oct 18, 2012 CONTRIBUTING.md added uidelines for Reporting a Bug Jan 10, 2016 LICENSE.txt Fixed Issue 488: ISO 8601 dates not supported in cell editing - cell-… Nov 27, 2011 README.md Reorganized README.md Nov 19, 2015 README.txt Changed the more info link to point to the wiki. Dec 8, 2012 build.properties Issue 630: Change branding from Google Refine to OpenRefine Oct 18, 2012 build.xml Update to Java 7 for build May 14, 2015 refine Update launch4j version & filenames Jul 29, 2015 refine.bat Added option for setting form content size on Windows Apr 18, 2015 refine.ini Added item to configuration file for max form content size Nov 7, 2014 unsign Add script to unsign Mac executables Jul 29, 2013 README.md OpenRefine OpenRefine is a power tool that allows you to load data, understand it, clean it up, reconcile it, and augment it with data coming from the web. All with the comfort and privacy of your own computer. Download Latest Beta 2.6 rc2 - Recommended Latest Stable 2.5 Documentation and Videos Documentation Wiki FAQ Official Website and tutorial videos Contributing to the project Donate $ Developers Guide & Architecture Contact us Mailing List Twitter Licensing and legal issues OpenRefine is open source software and is licensed under the BSD license located in the LICENSE.txt. See that file also for information on open source libraries that OpenRefine depends on. Credits This software was created by Metaweb Technologies, Inc. and originally written and conceived by David Huynh dfhuynh@google.com. Metaweb Technologies, Inc. was acquired by Google, Inc. in July 2010 and the product was renamed Google Refine. In October 2012, it was renamed OpenRefine as it transitioned to a community-supported product. This is the full list of contributors (in chronological order): David Huynh dfhuynh@google.com Stefano Mazzocchi stefanom@google.com Vishal Talwar vtalwar@google.com Jeff Fry jfry@google.com Will Moffat wdm@google.com James Home jameshome@google.com Iain Sproat iainsproat@gmail.com Tom Morris tfmorris@gmail.com Heather Campbell campbellh@google.com Thad Guidry thadguidry@gmail.com Paul Makepeace paulm@paulm.com Tomaž Šolc tomaz.solc@zemanta.com Gabriel Sjoberg GabrielSjoberg@gmail.com Rod Salazar rodrod.salazar@gmail.com pxb pxb1988@gmail.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/OpenRefine/OpenRefine"	"Tool for working with messy data: cleaning, transforming, extending it with web services and linking it to databases."	"true"
"Miscellaneous"	"TypeTools"	"https://github.com/jhalterman/typetools"	"Tools for resolving generic types."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"197"	"16"	"29"	"GitHub - jhalterman/typetools: Tools for resolving generic types Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 197 Fork 29 jhalterman/typetools Code Issues 8 Pull requests 1 Pulse Graphs Tools for resolving generic types 133 commits 3 branches 11 releases 6 contributors Java 99.6% Shell 0.4% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags array gh-pages master Nothing to show typetools-0.4.7 typetools-0.4.6 typetools-0.4.5 typetools-0.4.4 typetools-0.4.3 typetools-0.4.2 typetools-0.4.1 typetools-0.4.0 typetools-0.3.1 typetools-0.3.0 typetools-0.2.1 Nothing to show New pull request Latest commit c97c12b Jul 11, 2016 jhalterman [maven-release-plugin] prepare for next development iteration Permalink Failed to load latest commit information. bin Update docs/build for 1.6 targeted release. Jul 7, 2015 src Fixed #27. Jul 11, 2016 .gitignore Javadoc generation scripts Sep 10, 2013 .travis.yml Add code coverage metrics using codecov.io. Mar 29, 2016 BUILDING.txt Notes on building Dec 8, 2014 CHANGELOG.md changelog updates Jul 11, 2016 LICENSE.txt added license and download link Aug 16, 2011 README.md Add license and javadoc badges May 26, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jul 11, 2016 README.md TypeTools A simple, zero-dependency library for working with types. Supports Java 1.6+ and Android. Introduction One of the sore points with Java involves working with type information. In particular, Java's generics do not provide a way to resolve the type information for a given class. TypeTools looks to solve this by fully resolving generic type information declared on any class, interface, lambda expression or method. Usage The TypeResolver class provides the following methods: Class<?>[] resolveRawArguments(Class<T> type, Class<S> subType) Resolves the raw arguments for a type using type variable information from a subType. Class<?> resolveRawArgument(Class<T> type, Class<S> subType) Resolves the raw argument for a type using type variable information from a subType. Type resolveGenericType(Class<?> type, Type subType) Resolves the generic type using type variable information from a subType. Class<?> resolveRawClass(Type genericType, Class<?> subType) Resolves the raw class for a genericType using type variable information from a subType. Examples A typical use case is to resolve arguments for a type, given a sub-type: interface Foo<T1, T2> {} class Bar implements Foo<Integer, String> {}  Class<?>[] typeArgs = TypeResolver.resolveRawArguments(Foo.class, Bar.class);  assert typeArgs[0] == Integer.class; assert typeArgs[1] == String.class; Type arguments can also be resolved from lambda expressions: Function<String, Integer> strToInt = s -> Integer.valueOf(s); Class<?>[] typeArgs = TypeResolver.resolveRawArguments(Function.class, strToInt.getClass());  assert typeArgs[0] == String.class; assert typeArgs[1] == Integer.class; And from method references: Comparator<String> comparator = String::compareToIgnoreCase; Class<?> typeArg = TypeResolver.resolveRawArgument(Comparator.class, comparator.getClass());  assert typeArg == String.class; We can also resolve the raw class for type parameters on fields and methods: class Entity<ID extends Serializable> {   ID id;   void setId(ID id) {} }  class SomeEntity extends Entity<Long> {}  Type fieldType = Entity.class.getDeclaredField(""id"").getGenericType(); Type mutatorType = Entity.class.getDeclaredMethod(""setId"", Serializable.class).getGenericParameterTypes()[0];  assert TypeResolver.resolveRawClass(fieldType, SomeEntity.class) == Long.class; assert TypeResolver.resolveRawClass(mutatorType, SomeEntity.class) == Long.class; Common Use Cases Layer supertypes often utilize type parameters that are populated by subclasses. A common use case for TypeTools is to resolve the type arguments for a layer supertype given a sub-type. Following is an example Generic DAO layer supertype implementation: class Device {} class Router extends Device {}  class GenericDAO<T, ID extends Serializable> {   protected Class<T> persistentClass;   protected Class<ID> idClass;    private GenericDAO() {     Class<?>[] typeArguments = TypeResolver.resolveRawArguments(GenericDAO.class, getClass());     this.persistentClass = (Class<T>) typeArguments[0];     this.idClass = (Class<ID>) typeArguments[1];   } }  class DeviceDAO<T extends Device> extends GenericDAO<T, Long> {} class RouterDAO extends DeviceDAO<Router> {} We can assert that type arguments are resolved as expected: RouterDAO routerDAO = new RouterDAO(); assert routerDAO.persistentClass == Router.class; assert routerDAO.idClass == Long.class; Additional Features By default, type variable information for each resolved type is weakly cached by the TypeResolver. Caching can be enabled/disabled via: TypeResolver.enableCache(); TypeResolver.disableCache(); Additional Notes On Lambda Support Lambda type argument resolution is currently supported for: Oracle JDK 8 Open JDK 8 On Unresolvable Lambda Type Arguments When resolving type arguments with lambda expressions, only type parameters used in the functional interface's method signature can be resolved. Ex: interface ExtraFunction<T, R, Z> extends Function<T, R>{} ExtraFunction<String, Integer, Long> strToInt = s -> Integer.valueOf(s); Class<?>[] typeArgs = TypeResolver.resolveRawArguments(Function.class, strToInt.getClass());  assert typeArgs[0] == String.class; assert typeArgs[1] == Integer.class; assert typeArgs[2] == Unknown.class; Since the type parameter Z in this example is unused by Function, its argument resolves to Unknown.class. On OSGi Support When using TypeTools in an OSGi environment where lambda or method reference type argument resolution is desired, the sun.reflect system package should be exported to the application bundles. For example, for Felix, add the following to your config.properties file: org.osgi.framework.system.packages.extra=sun.reflect  Docs JavaDocs are available here. License Copyright 2010-2016 Jonathan Halterman - Released under the Apache 2.0 license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jhalterman/typetools"	"Tools for resolving generic types."	"true"
"Monitoring"	"AppDynamics"	"https://www.appdynamics.com/"	"Commercial performance monitor."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Application Performance Monitoring & Management | AppDynamics Subscriptions Profile Company Admin Sign out Enablement Services Downloads Support Portal Join us at AppSphere 2016, November 14-17 in Las Vegas. Register before August 5th to get free training. Product APPLICATION INTELLIGENCE PLATFORM Accelerate your company's digital transformation and optimize every customer's experience.LEARN MORE Modules End-User Monitoring Application Performance Management Infrastructure Visibility Application Analytics Pricing Overview Lite vs Pro FAQ Solutions Use Case Unified Monitoring Unified Troubleshooting Unified Analytics DevOps Cloud Migration and Scaling Continuous Delivery Cloud Monitoring Industry Financial Services Government Healthcare Insurance Retail Media and Entertainment Telecom Role IT Operations CIO App Development DevOps Business Owner and Analyst Mobile Development CMO Platform How It Works Extensibility Security and Availability Business Transactions What's New Learning Community AppDynamics University Documentation User Groups Tech Webinars Featured Blog Post Top 5 Performance Metrics for Node.js ApplicationsRead More Customers See All Case Studies RETAIL | Container Store TECHNOLOGY | Cisco Financial Services | Nasdaq Company Why AppDynamics Leadership Press Investors Partners Careers Blog Resources Webinars AppSphere Contact Us Register for AppSphere Register for our largest conference of the year by August 5th and get free training!Register Now START FREE TRIAL Sign in Account  Support  Join us at AppSphere 2016, November 14-17 in Las Vegas. Register before August 5th to get free training. START FREE TRIAL START FREE TRIAL Product  APPLICATION INTELLIGENCE PLATFORM Modules  End-User Monitoring Application Performance Management Infrastructure Visibility Application Analytics Pricing  Overview Lite vs Pro FAQ Solutions  Use Case  Unified Monitoring Unified Troubleshooting Unified Analytics DevOps Cloud Migration and Scaling Continuous Delivery Cloud Monitoring Industry  Financial Services Government Healthcare Insurance Retail Media and Entertainment Telecom Role  IT Operations CIO App Development DevOps Business Owner and Analyst Mobile Development CMO Platform  How It Works Extensibility Security and Availability Business Transactions What's New Learning  Community AppDynamics University Documentation User Groups Tech Webinars Featured Blog Post Customers  See All Case Studies RETAIL | Container Store TECHNOLOGY | Cisco Financial Services | Nasdaq Company  Why AppDynamics Leadership Press Investors Partners Careers Blog Resources Webinars AppSphere Contact Us Register for AppSphere Support  Enablement Services Downloads Support Portal Sign in Account  Subscriptions Profile Sign out The next generation of Application Intelligence has arrived.  Accelerate your company's digital transformation and optimize every customer's experience. Free Trial AppDynamics receives the highest score in every APM use case in new Gartner research.READ THE REPORT Application Intelligence: real-time insights into application performance, user experience, and business outcomes See Faster with Unified MonitoringIdentify customer impacting issues quickly with end-to-end view of real-time application performance. Act Sooner with Unified TroubleshootingCollaborate effectively across Dev and Ops to isolate, resolve and automate the resolution of application issues — in production. Know More with Unified AnalyticsMake better decisions with deep insights into application performance, user data and business outcomes. One Unified Platform: Monitoring, Troubleshooting, and Analytics End User Monitoring Monitor and optimize browser and mobile apps to deliver market-leading user experience Application Performance Management Ensure end-to-end performance of complex distributed applications Infrastructure Visibility See the impact of infrastructure health on application performance Application Analytics Get real-time insights into IT operations, customer experience, and business outcomes Application Performance Management Ensure application performance and user satisfaction by proactively monitoring applications end-to-end. Learn More Application Analytics Get real-time insights into IT operations, customer experience and business outcomes. Learn More Synthetic Monitoring Proactively ensure website availability and performance. Learn More Mobile Real-User Monitoring Optimize the end-user experience of native mobile applications. Learn More Browser Real-User Monitoring Optimize the end-user experience of browser-based applications. Learn More Database Visibility Monitor databases to optimize application performance. Learn More Server Visibility Monitor servers to optimize application performance. Learn More Leading companies depend on Application Intelligence ""AppDynamics was rolled out globally across 23 data centers — deploying a total of 15,000 agents in just one week..."" Nitin Thakur Technical Operations Manager at Cisco Read the case study ""I can actually glow about the support from AppDynamics..."" Stace Baal Director, Engineering at eHarmony Read the case study ""I was happy to see I'd found a solution which met all my requirements...nothing seemed to fit as well as AppDynamics."" Chris Tranter Technical Lead at Hallmark Read the case study ""The selection process for us was really quite easy because we’ve never found a tool that can do what AppDynamics does..."" August Azzarello Quality Engineer at The Container Store Read the case study ""One of the benefits is that our root-cause analysis time has gone from days or hours down to minutes."" Neil Hartner Senior Architect at Overstock.com Read the case study ""Now we're regularly the first to tell our suppliers when they have a problem."" Andrew Mulholland Operations Architect, Expedia Affiliate Network Read the case study Read the case study ""AppDynamics was rolled out globally across 23 data centers — deploying a total of 15,000 agents in just one week..."" Nitin Thakur Technical Operations Manager at Cisco Read the case study ""I can actually glow about the support from AppDynamics..."" Stace Baal Director, Engineering at eHarmony Read the case study ""I was happy to see I'd found a solution which met all my requirements...nothing seemed to fit as well as AppDynamics."" Chris Tranter Technical Lead at Hallmark Read the case study ""The selection process for us was really quite easy because we’ve never found a tool that can do what AppDynamics does..."" August Azzarello Quality Engineer at The Container Store Transforming digital business in 'real time' - Forbes Analyst ReportAppDynamics receives the highest score in every APM use case in new Gartner research. Analyst ReportAppDynamics reaffirms focus on ‘application intelligence’ at AppSphere 2015 Analyst Report4th year a Leader in Gartner's Magic Quadrant for Application Performance Monitoring Analyst ReportEMA and AppDynamics have conducted a survey to determine what IT organizations want from APM providers Start a Free 15 Day Trial Now Continue to Your AppDynamics Account Free Trial Schedule a Demo Go To Your Free Trial Quick Links Platform Pricing Solutions Company Why AppDynamics Careers Partners AppDynamics The alternative to #GPS based geo-location: #beacon technology. Here's how to get started https://t.co/PCQXNwdywT https://t.co/bNYLLjyzyn 13 hours ago See more from @AppDynamics > Latest from the Blog Subscribe to the AppDynamics Blog Thank you! Your submission has been received! Oops! Something went wrong while submitting the form Trending Topics Free Jvm Profiling Windows Monitoring Software Jboss Monitoring Tools Free Website Application Monitoring Software Free Android Application Monitoring Software What Is Application Health Check Apm Software Solutions Php Application Performance Optimization Mobile Apps For Android Help Learning Support Portal Documentation Enablement Contact Us Copyright © 2009 - 2016 AppDynamics. All Rights Reserved. English (UK) English (USA) Deutsche Français 日本語 English (USA)Privacy Policy Cookie Policy Terms of Use"	"null"	"null"	"Commercial performance monitor."	"true"
"Monitoring"	"JavaMelody"	"https://github.com/javamelody/javamelody"	"Performance monitoring and profiling."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"468"	"82"	"156"	"GitHub - javamelody/javamelody: JavaMelody : monitoring of JavaEE applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 82 Star 468 Fork 156 javamelody/javamelody Code Issues 36 Pull requests 0 Wiki Pulse Graphs JavaMelody : monitoring of JavaEE applications 2,672 commits 2 branches 60 releases 5 contributors Java 93.6% HTML 4.5% JavaScript 1.5% CSS 0.4% Java HTML JavaScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master wiki Nothing to show javamelody-core-1.60.0 javamelody-core-1.59.0 javamelody-core-1.58.0 javamelody-core-1.57.1 javamelody-core-1.57.0 javamelody-core-1.56.0 javamelody-core-1.55.0 javamelody-core-1.54.0 javamelody-core-1.53.0 javamelody-core-1.52.0 javamelody-core-1.51.0 javamelody-core-1.50.0 javamelody-core-1.49.0 javamelody-core-1.48.0 javamelody-core-1.47.0 javamelody-core-1.46.0 javamelody-core-1.45.0 javamelody-core-1.44.0 javamelody-core-1.43.0 javamelody-core-1.42.0 javamelody-core-1.41.0 javamelody-core-1.40.0 javamelody-core-1.39.0 javamelody-core-1.38.0 javamelody-core-1.37.0 javamelody-core-1.36.0 javamelody-core-1.35.0 javamelody-core-1.34.0 javamelody-core-1.33.0 javamelody-core-1.32.1 javamelody-core-1.32.0 javamelody-core-1.31.0 javamelody-core-1.30.0 javamelody-core-1.29.1 javamelody-core-1.29.0 javamelody-core-1.28.0 javamelody-core-1.27.0 javamelody-core-1.26.0 javamelody-core-1.25.0 javamelody-core-1.24.1 javamelody-core-1.24.0 javamelody-core-1.23.0 javamelody-core-1.22.0 javamelody-core-1.21.0 javamelody-core-1.20.0 javamelody-core-1.19.0 javamelody-core-1.18.0 javamelody-core-1.17.0 javamelody-core-1.16.1 javamelody-core-1.16.0 javamelody-core-1.15.0 javamelody-core-1.14.0 javamelody-core-1.13.0 javamelody-core-1.12.0 javamelody-core-1.11.1 javamelody-core-1.11.0 javamelody-core-1.10.0 javamelody-core-1.9.0 javamelody-core-1.8.2 1.8.1 Nothing to show New pull request Latest commit 382a31c Jun 15, 2016 evernat suppression code plutôt inutile, pour pmd Permalink Failed to load latest commit information. .settings eclipse settings Dec 18, 2013 javamelody-collector-server 1.61.0-SNAPSHOT Jun 14, 2016 javamelody-core suppression code plutôt inutile, pour pmd Jun 15, 2016 javamelody-demo-webapp ant builds Dec 13, 2014 javamelody-for-spring-boot 1.61.0-SNAPSHOT Jun 14, 2016 javamelody-for-standalone 1.61.0-SNAPSHOT Jun 13, 2016 javamelody-swing 1.61.0-SNAPSHOT Jun 13, 2016 javamelody-test-webapp 1.61.0-SNAPSHOT Jun 13, 2016 .classpath upgrade Eclipse (projects config) Jan 2, 2016 .gitignore ignore intellij idea working files Apr 21, 2016 .project upgrade Eclipse (projects config) Jan 2, 2016 README.md add badge Oct 27, 2015 pom.xml 1.61.0-SNAPSHOT Jun 13, 2016 README.md JavaMelody The goal of JavaMelody is to monitor Java or Java EE applications in QA and production environments. See the Project Home, Screenshots, User's guide and Release notes in the wiki, or see downloads in Releases, Issues and Pull requests. License ASL Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/javamelody/javamelody"	"Performance monitoring and profiling."	"true"
"Monitoring"	"jmxtrans"	"https://github.com/jmxtrans/jmxtrans/"	"Tool to connect to multiple JVMs and to query them for their attributes via JMX. Its query language is based on JSON, which allows non-Java programmers to access the JVMs attributes. Likewise, this tool supports different output writes, including Graphite, Ganglia, StatsD, among others."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"949"	"91"	"296"	"GitHub - jmxtrans/jmxtrans: jmxtrans Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 91 Star 949 Fork 296 jmxtrans/jmxtrans Code Issues 31 Pull requests 9 Wiki Pulse Graphs jmxtrans 1,137 commits 12 branches 21 releases 72 contributors Java 96.6% Shell 2.1% Python 1.2% Ruby 0.1% Java Shell Python Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cleanup-number-utils cluster docker-support fix-sonar-warnings gh-pages improve-elasticsearch-writer jmxtrans-as-service master release travis validation_of_deb_and_rpm willmpls Nothing to show v246 v245 v244 v243 v242 v241 v240 v239 jmxtrans-parent-259 jmxtrans-parent-258 jmxtrans-parent-257 jmxtrans-parent-256 jmxtrans-parent-255 jmxtrans-parent-254 jmxtrans-parent-253 jmxtrans-parent-252 jmxtrans-parent-251 jmxtrans-250 jmxtrans-249 jmxtrans-248 jmxtrans-247 Nothing to show New pull request Latest commit 6a519dc Jul 6, 2016 JmxTrans travis build [maven-release-plugin] prepare for next development iteration Permalink Failed to load latest commit information. jmxtrans-core [maven-release-plugin] prepare for next development iteration Jul 6, 2016 jmxtrans-docker-test [maven-release-plugin] prepare for next development iteration Jul 6, 2016 jmxtrans-examples [maven-release-plugin] prepare for next development iteration Jul 6, 2016 jmxtrans-output [maven-release-plugin] prepare for next development iteration Jul 6, 2016 jmxtrans-test-utils [maven-release-plugin] prepare for next development iteration Jul 6, 2016 jmxtrans-utils [maven-release-plugin] prepare for next development iteration Jul 6, 2016 jmxtrans [maven-release-plugin] prepare for next development iteration Jul 6, 2016 src/etc License plugin has new version of MIT license header. All headers upd… Jun 6, 2016 .gitignore All code split into modules May 10, 2015 .travis.yml re-encrypt all credentials Jul 6, 2016 DEVELOPERS.txt License plugin has new version of MIT license header. All headers upd… Jun 6, 2016 LICENSE.txt License plugin has new version of MIT license header. All headers upd… Jun 6, 2016 README.md Updated SonarQube URL Jun 13, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jul 6, 2016 travis-script.sh debugging git push issues Jul 6, 2016 README.md This is the source code repository for the jmxtrans project. This is effectively the missing connector between speaking to a JVM via JMX on one end and whatever logging / monitoring / graphing package that you can dream up on the other end. jmxtrans is very powerful tool which uses easily generated JSON (or YAML) based configuration files and then outputs the data in whatever format you desire. It does this with a very efficient engine design that will scale to communicating with thousands of machines from a single jmxtrans instance. The core engine is very solid and there are writers for Graphite, StatsD, Ganglia, cacti/rrdtool, OpenTSDB, text files, and stdout. Feel free to suggest more on the discussion group or issue tracker. Download a recent stable build (or a SNAPSHOT one) See the Wiki for full documentation. Join the Google Group if you have anything to discuss or follow the commits. Please don't email Jon directly because he just doesn't have enough time to answer every question individually. People are talking - this is me! (skip to 21:45) and talking and talking (skip to 34:40) and (french) about it. If you are seeing duplication of output data, look for 'typeNames' in the documentation. If you like this project, please tell your friends, blog & tweet. I'd really love your help getting more publicity. Coda Hale did an excellent talk for Pivotal Labs on why metrics matter. Great justification for using a tool like jmxtrans. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jmxtrans/jmxtrans/"	"Tool to connect to multiple JVMs and to query them for their attributes via JMX. Its query language is based on JSON, which allows non-Java programmers to access the JVMs attributes. Likewise, this tool supports different output writes, including Graphite, Ganglia, StatsD, among others."	"true"
"Monitoring"	"Jolokia"	"https://jolokia.org/"	"JMX over REST."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"347"	"47"	"113"	"GitHub - rhuss/jolokia: JMX on Capsaicin Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 347 Fork 113 rhuss/jolokia Code Issues 61 Pull requests 5 Wiki Pulse Graphs JMX on Capsaicin https://www.jolokia.org 1,407 commits 15 branches 30 releases 29 contributors Java 84.8% JavaScript 12.4% XSLT 1.6% Other 1.2% Java JavaScript XSLT Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0-notif-sse 2.0 237-value-format custom-prot forge gh-pages http-client-4.2 jaas-auth jboss-forge master notification proxy-rest search-order spring-request-handler spring Nothing to show v2.0.0-M1 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.95 v0.91 v0.90 v0.83 v0.82 v0.81 v0.80 2.0.0-M2 Nothing to show New pull request Latest commit 69586e7 Jul 6, 2016 rhuss #273 : Add some unit tests and fixed principal match again (according… … … to #272) Permalink Failed to load latest commit information. agent #273 : Add some unit tests and fixed principal match again (according… Jul 6, 2016 client #247, #248: Reworked SSLConnectionFactory support May 4, 2016 it [maven-release-plugin] prepare for next development iteration Feb 16, 2016 src #273 : Add some unit tests and fixed principal match again (according… Jul 6, 2016 tools fixed version Feb 16, 2016 .gitignore Update gitignore Jan 13, 2016 .travis.yml Fix typo May 29, 2016 LICENSE Added license. Oct 9, 2010 NOTICE Further doc tuning, tuned sonar handling. Feb 18, 2011 README.md Fixed link in README May 30, 2016 pom.xml Configured travis for nemo.sonarqube.org May 29, 2016 README.md Jolokia is a fresh way to access JMX MBeans remotely. It is different from JSR-160 connectors in that it is an agent-based approach which uses JSON over HTTP for its communication in a REST-stylish way. Multiple agents are provided for different environments: WAR Agent for deployment as web application in a JEE Server. OSGi Agent for deployment in an OSGi container. This agent is packaged as a bundle and comes in two flavors (minimal, all-in-one). Mule Agent for usage within a Mule ESB JVM JDK6 Agent which can be used with any Oracle/Sun JVM, Version 6 or later and which is able to attach to a running Java process dynamically. Features The agent approach as several advantages: Firewall friendly Since all communication is over HTTP, proxying through firewalls becomes mostly a none-issue (in contrast to RMI communication, which is the default mode for JSR-160) Polyglot No Java installation is required on the client side. E.g. Jmx4Perl provides a rich Perl client library and Perl based tools for accessing the agents. Simple Setup The Setup is done by a simple agent deployment. In contrast, exporting JMX via JSR-160 can be remarkable complicated (see these blog posts for setting up Weblogic and JBoss for native remote JMX exposure setup) Additionally, the agents provide extra features not available with JSR-160 connectors: Bulk requests In contrast to JSR-160 remoting, Jolokia can process many JMX requests with a single round trip. A single HTTP POST request puts those requests in its JSON payload which gets dispatched on the agent side. These bulk requests can increase performance drastically, especially for monitoring solutions. The Nagios plugin check_jmx4perl uses bulk requests for its multi-check feature. Fine grained security In addition to standard HTTP security (SSL, HTTP-Authentication) Jolokia supports a custom policy with fine grained restrictions based on multiple properties like the client's IP address or subnet, and the MBean names, attributes, and operations. The policy is defined in an XML format with support for allow/deny sections and wildcards. Proxy mode Jolokia can operate in an agentless mode where the only requirement on the target platform is the standard JSR-160 export of its MBeanServer. A proxy listens on the front side for Jolokia requests via JSON/HTTP and propagates these to the target server through remote JSR-160 JMX calls. Bulk requests get dispatched into multiple JSR-160 requests on the proxy transparently. Resources The Jolokia Forum can be used for questions about Jolokia (and Jmx4perl). For bug reports, please use the Github Issue tracker. Most of the time, I'm hanging around at Freenode in #jolokia, too. Even more information on Jolokia can be found at www.jolokia.org, including a complete reference manual. Contributions Contributions in form of pull requests are highly appreciated. All your work must be donated under the Apache Public License, too. Please sign-off your work before doing a pull request. The sign-off is a simple line at the end of the patch description, which certifies that you wrote it or otherwise have the right to pass it on as an open-source patch. The rules are very simple: if you can certify the below (from developercertificate.org): Developer Certificate of Origin Version 1.1  Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 660 York Street, Suite 102, San Francisco, CA 94110 USA  Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.  Developer's Certificate of Origin 1.1  By making a contribution to this project, I certify that:  (a) The contribution was created in whole or in part by me and I     have the right to submit it under the open source license     indicated in the file; or  (b) The contribution is based upon previous work that, to the best     of my knowledge, is covered under an appropriate open source     license and I have the right under that license to submit that     work with modifications, whether created in whole or in part     by me, under the same open source license (unless I am     permitted to submit under a different license), as indicated     in the file; or  (c) The contribution was provided directly to me by some other     person who certified (a), (b) or (c) and I have not modified     it.  (d) I understand and agree that this project and the contribution     are public and that a record of the contribution (including all     personal information I submit with it, including my sign-off) is     maintained indefinitely and may be redistributed consistent with     this project or the open source license(s) involved.  Then you just add a line to every git commit message: Signed-off-by: Max Morlock <max.morlock@fcn.de>  Using your real name (sorry, no pseudonyms or anonymous contributions.) If you set your user.name and user.email git configs, you can sign your commit automatically with git commit -s. If you fix some documentation (typos, formatting, ...) you are not required to sign-off. It is possible to sign you commits in retrospective, too if you forgot it the first time. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rhuss/jolokia"	"JMX over REST."	"true"
"Monitoring"	"Kamon"	"http://www.kamon.io/"	"Tool for monitoring applications running on the JVM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"660"	"67"	"145"	"GitHub - kamon-io/Kamon: The Open Source tool for monitoring applications running on the JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 660 Fork 145 kamon-io/Kamon Code Issues 64 Pull requests 8 Pulse Graphs The Open Source tool for monitoring applications running on the JVM http://kamon.io 901 commits 26 branches 28 releases 37 contributors Scala 94.7% Java 5.2% Shell 0.1% Scala Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags errors-stage-1 errors histogram-experiments issue#271/fix-balancing-pool-metrics kamon-agent-new kamon-agent kamon-java8 kamon-jmh kamon-js kamon-weaver make-kamon-test-friendly master netty release-0.2 release-0.3_scala-2.11 release-akka-2.4 release-legacy-akka-2.2 tags-in-traces wip/cleanup-hdr-snapshots wip/decoupling-basic-apis-from-reporters wip/improve-trace-context-and-segments-api wip/influxdb-module wip/kamon-dashboard wip/newrelic-agent-rewrite wip/percentiles-and-histograms-for-newrelic wip/simple-tracing-implementation Nothing to show v0.6.1 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.4.0_akka-2.2 v0.3.5 v0.3.5_scala-2.11 v0.3.4 v0.3.4_scala-2.11 v0.3.3 v0.3.3_scala-2.11 v0.3.2 v0.3.2_scala-2.11 v0.3.1 v0.3.0 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.0.15 v0.0.14 v0.0.13 v0.0.12 v0.0.11 Nothing to show New pull request Latest commit f21aec6 Jul 13, 2016 qkoshelev committed with dpsoft + added tracing metrics support for spm (#369) Permalink Failed to load latest commit information. kamon-akka-remote/src = core: minor refactor Jul 10, 2016 kamon-akka/src correctly differentiate between actors and routers, fixes #271 Mar 28, 2016 kamon-annotation/src Add tags for traces and closes #327 Apr 22, 2016 kamon-autoweave/src/main + kamon-autoweave: add support Attach on IBM J9 and closes #354 Jun 22, 2016 kamon-core/src = core: minor refactor Jul 10, 2016 kamon-datadog/src = statd,datadog: minor formatting changes. Jan 6, 2016 kamon-elasticsearch/src + kamon-elasticsearch: new integration module Mar 17, 2016 kamon-examples = fluentd-example: replace extension-id by extension-class in applica… Mar 6, 2016 kamon-fluentd/src = fluentd: change extension-id by extension-class Feb 7, 2016 kamon-influxdb/src = allow hostname override for influxdb statistics May 4, 2016 kamon-jdbc/src = all: some clean up in jdbc and annotation modules Nov 27, 2015 kamon-jmx/src/main Corrects key name error in reference configuration. Feb 5, 2016 kamon-log-reporter/src/main + log-reporter: include ExecutorServiceMetrics Mar 6, 2016 kamon-newrelic/src wip: merge from master and fix some test Nov 15, 2015 kamon-play-2.3.x/src + play: capture debug method in LoggerLikeInstrumentation Dec 17, 2015 kamon-play-2.4.x/src + play: capture debug method in LoggerLikeInstrumentation Dec 18, 2015 kamon-play-2.5.x/src + kamon-play-25: add play 2.5.x support Jun 15, 2016 kamon-playground/src/main introduce selective instrumentation for akka actors. Mar 14, 2016 kamon-riemann/src + add InfluxDB module May 2, 2016 kamon-scala/src + scala: add support for trace context propagation on Twitter futures (… Jul 8, 2016 kamon-spm/src + added tracing metrics support for spm (#369) Jul 13, 2016 kamon-spray/src + kamon-spray: Add tags in spray spray directives for tracing and clo… Apr 22, 2016 kamon-statsd/src + Kamon-core: introduce finishWithError(Throwable) for Traces and Seg… Jul 8, 2016 kamon-system-metrics/src = system-metrics: runSafe in UlimitMetrics and include a test Mar 3, 2016 kamon-testkit/src/main ! core: move the TraceContext manipulation API to the Tracer companio… Feb 15, 2015 project + added tracing metrics support for spm (#369) Jul 13, 2016 .gitignore ignore ensime-related files. Apr 26, 2016 .travis.yml ! build: filter most of the output from sbt test. Nov 23, 2015 CONTRIBUTING.md + github: contributing guidelines. Oct 12, 2014 LICENSE + site: added changelog and license views Apr 3, 2014 README.md Update README.md May 24, 2015 travis-test.sh ! build: remove even more output of dependency downloads. Nov 25, 2015 version.sbt set version to 0.6.2-SNAPSHOT. Apr 27, 2016 zersion.sbt Releasing 0.6.1 Apr 27, 2016 README.md Kamon Kamon is a set of tools for monitoring applications running on the JVM. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kamon-io/Kamon"	"Tool for monitoring applications running on the JVM."	"true"
"Monitoring"	"Metrics"	"http://metrics.dropwizard.io/"	"Expose metrics via JMX or HTTP and can send them to a database."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Redirecting to http://metrics.dropwizard.io/3.1.0/ If you are not automatically redirected in 5 seconds click here. Available releases: 3.1.0 3.0.2 2.2.0"	"null"	"null"	"Expose metrics via JMX or HTTP and can send them to a database."	"true"
"Monitoring"	"New Relic"	"http://newrelic.com/"	"Commercial performance monitor."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Application Performance Management & Monitoring | New Relic These are the top 10 snapshot results. To see complete query results, hit 'Return'. Why New Relic Working With Us Customer Stories Customer Success Security Products Product Overview Application Monitoring New Relic APM Overview Features Pricing Resources Ruby Java Node.js PHP .NET Python Go Synthetic Monitoring New Relic Synthetics Overview Features Pricing Resources Browser Monitoring New Relic Browser Overview Features Pricing Resources Server Monitoring Mobile Monitoring New Relic Mobile Overview Features Pricing Resources Android iOS Insights New Relic Insights Overview Features Use Cases FAQ Resources Additional Features Alerts Plugins New Relic on iOS and Android Pricing APM Pricing Mobile Pricing Browser Pricing Synthetics Pricing Company About Us Careers at New Relic Contact Us Events Partner Program Investor Relations Leadership Fact Sheet Content Blog Newsroom Resources Latest Resources Webinars Case Studies Videos Datasheets White Papers eBooks Analyst Reports Infographics Tutorials Support Get Support New Relic Status Documentation Community Forum New Relic University Deploying New Relic Search Log In   Sign Up See inside your software. Application performance monitoring for better business. Sign Up for New Relic How Major League Baseball manages performance. With cloud power from AWS and insights from New Relic, Major League Baseball delivers great digital experiences to millions of fans every day. Play ball! New Relic & MLB at FutureStack15   Thrive in the cloud. From adoption to migration, New Relic gives you pinpoint insights for every phase of your cloud journey. As a pure SaaS solution, we’re uniquely poised to deliver accurate metrics—so you can see clearly and instantly how your apps are performing, wherever they are. Shed light on your containers. New Relic for Docker Monitor AWS-based apps. New Relic for AWS Monitor apps within Azure. New Relic for Azure Application monitoring made easy. Build and maintain cutting-edge apps with one comprehensive tool. For any language. In any environment. Improve performance with APM Visibility for your entire stack. From the browser to the back-end. From mobile apps to cloud servers. Get eye-opening insights for every part of your technology business. View all our products “New Relic is all about performance data across all our digital products. All of technologies running under the covers as well the way MLB content is sent out to consumers, is under New Relic’s microscope.” Sean Curtis, Senior Vice President of Engineering, MLBAM All accounts start with 14 days free. Stop guessing. Try New Relic for free and arm yourself with real data for your digital business. No credit card required. Sign up for New Relic Products Product Overview New Relic APM New Relic SYNTHETICS New Relic BROWSER New Relic SERVERS New Relic MOBILE New Relic INSIGHTS Additional Features New Relic ALERTS New Relic PLUGINS New Relic for iOS & Android Why New Relic Overview Our Customers Your Success Plan Your Security Support Get Support New Relic Status Documentation Community Forum New Relic University Deploying New Relic Company About Us Careers Partner Program Investor Relations Leadership Connect Community New Relic Nonprofit Program Selfie Stories Contact Us Content Blog Newsroom Topics DevOps Software Analytics Mobile Solutions Application Development Production Monitoring Real-Time Analytics Mobile Application Management Digital Transformation Cloud Migration Resources Case Studies Videos Datasheets White Papers eBooks Analyst Reports Infographics Tutorials Webinars Latest Resources International newrelic.de (German) br.newrelic.com (Portuguese) ©2008-16 New Relic, Inc. All rights reserved.   Terms of Service   DMCA Policy    Privacy Policy/Your Privacy Rights Want to use our logo? There's a page for that, including instructions and different styles and formats. Sorry about grabbing your right-click. Just trying to be helpful."	"null"	"null"	"Commercial performance monitor."	"true"
"Monitoring"	"Prometheus"	"https://prometheus.io/"	"Provides a multi-dimensional data model, DSL, autonomous server nodes and much more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Prometheus - Monitoring system & time series database Toggle navigation Prometheus Docs Download Community Blog From metrics to insight Power your metrics and alerting with a leading open-source monitoring solution. Get Started Download Dimensional data Prometheus implements a highly dimensional data model. Time series are identified by a metric name and a set of key-value pairs. Powerful queries A flexible query language allows slicing and dicing of collected time series data in order to generate ad-hoc graphs, tables, and alerts. Great visualization Prometheus has multiple modes for visualizing data: a built-in expression browser, Grafana integration, and a console template language. Efficient storage Prometheus stores time series in memory and on local disk in an efficient custom format. Scaling is achieved by functional sharding and federation. Simple operation Each server is independent for reliability, relying only on local storage. Written in Go, all binaries are statically linked and easy to deploy. Precise alerting Alerts are defined based on Prometheus's flexible query language and maintain dimensional information. An alertmanager handles notifications and silencing. Many client libraries Client libraries allow easy instrumentation of services. Currently, Go, Java, and Ruby are supported. Custom libraries are easy to implement. Many integrations Existing exporters allow bridging of third-party data into Prometheus. Examples: system statistics, as well as Docker, HAProxy, StatsD, and JMX metrics. «Even though Borgmon remains internal to Google, the idea of treating time-series data as a data source for generating alerts is now accessible to everyone through those open source tools like Prometheus [...]» — Site Reliability Engineering: How Google Runs Production Systems (O'Reilly Media) Open Source Prometheus is 100% open source and community-driven. All components are available under the Apache 2 License on GitHub. Some of our users include: © Prometheus Authors 2016"	"null"	"null"	"Provides a multi-dimensional data model, DSL, autonomous server nodes and much more."	"true"
"Monitoring"	"SPM"	"https://sematext.com/spm/"	"Commercial performance monitor with distributing transaction tracing for JVM apps."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SPM Performance Monitoring & Alerting Skip to main content Toggle navigation Products SPM Logsene Site Search Analytics Docker Agent All Products Consulting Consulting Overview Solr & Lucene Consulting Elasticsearch Consulting Logging Consulting Support Support Overview Solr & Lucene Support Elasticsearch Support Training Training Overview Elasticsearch Training Solr Training Resources Blog About Company Clients Partners Publications Testimonials Jobs Engineering Contact Free Account / Login Get Free Account Login Bring it Together Your Servers, Apps, Metrics, Logs, Events, Alerts Integrations Database Monitoring App & Infra Maps Tracing & Profiling Alerting & ChatOps Correlation API Free Trial Live Demo Pricing On Premises See All Integrations …and just about any other app you need to monitor Integrations SPM’s over 40 integrations let you collect metrics and events across your whole stack. Get started in minutes with out-of-the-box dashboards, alerts and anomaly detection rules Slice and dice by a number of context-aware filters Solr & SolrCloud, Elasticsearch, Spark, Storm, Kafka, Cassandra, HBase, MongoDB, Hadoop MapReduce, HDFS, YARN, Docker, CoreOS, Node.js, Express, Apache, Nginx (Plus), HAProxy, Redis, Memcached, MySQL, MariaDB, AWS EC2 ELB EBS RDS… See All Integrations… Compare App & Database Monitoring SPM goes beyond just collecting metrics and uncovers your slowest database transactions. Find the slowest DB operation types View full SQL statements See end-to-end HTTP transaction context, through multiple tiers, including full call trace Get top 10 operations by throughput, latency, or time consumed Filter DB operations by type App, Network & Infra Maps SPM shows your whole infrastructure and how it’s all connected, in real-time. View complete, self-organizing infrastructure & network maps See throughput, latency, and error rates for all apps and servers Get detailed info about incoming and outgoing connections and receive/transmit rates Multiple map views with zooming, panning, and filtering Tracing & Profiling SPM instruments your apps and captures your slowest transactions. The on-demand, low impact profiler finds bottlenecks in your code. See end to end HTTP transactions Full HTTP call stack with all request parameters Annotate Java apps for custom method tracing Find slowest HTTP transaction components Customize tracing pointcuts Profile any Java app on demand Find methods using most CPU or wall-clock time Get top controllers by latency, throughput, or total time used See aggregate throughput, latency, errors/exception rates Alerting & ChatOps SPM alerting integrates with ChatOps services and WebHooks. Alert on any metric and any filter combination Alerts based on: thresholds, anomaly detection, app heartbeat Get notified via email, ChatOps, or WebHooks Built-in integrations for PagerDuty, Slack, HipChat, and Nagios Works with VictorOps, OpsGenie, BigPanda, etc. Send Alerts events to any WebHook Pass custom HTTP parameters and headers to WebHooks Correlate Metrics & Logs Metrics are not enough! SPM correlates metrics with application and server logs, events, alerts, anomalies, and more. Really cool and empowering, and a huge time saver! Go from metric spikes to your apps’ and servers’ logs in seconds! Get to the root cause in minutes! Forget about ssh-ing to servers and grepping logs! See any metric any logs in a single unified same view! Find similar metric patterns with built-in metric correlation APIs and Custom Metrics SPM is built by DevOps for DevOps. Custom Metrics? APIs? We’ve got ’em! Open HTTP APIs let you ship Custom Metrics from your apps Instrument your apps and send custom metrics Capture and send app, business, and other events Open-source metrics libraries for Java, Ruby, and Node.js Use APIs for alert automation and more I love SPM because it would usually take an endless amount of time to configure generic JMX-ready monitoring tools to render useful and carefully designed dashboards. With SPM it takes 2-3 minutes from scratch until the data is visible. Alexey Kozhemiakin – EPAM Systems Plans and Pricing Basic Standard Pro Pro Silver Custom Price free $0.035 / server / hour $0.070 / server / hour $0.085 / server / hour Custom Data Retention 30 min 30 days 60 days 180 days Custom Alert Rules 1 25 unlimited unlimited unlimited Transaction Tracing included included included included included Support email/live chat email/live chat email/live chat/phone email/live chat/phone email/live chat/phone Custom Metrics / Month (for additional custom metrics) 10 50 250 500 Custom Custom Datapoints / Month (for additional custom metrics) 500K 10M 50M 250M Custom Events / Day (for additional arbitrary events) 100 5000 5000 5000 Custom Sign up for SPM » Contact us » SPM On Premises Can’t send your metrics or logs to the Cloud? SPM & Logsene are available for On Premises, too! Enterprise Customers, please contact us: Custom Daily Volume and Custom Retention are limited to Enterprise Plans. Contact us at sales@sematext.com for enterprise plan pricing. No credit card required to sign up! +1 (347) 480 1610 sales@sematext.com What happens at the end of my trial? New users get a 30-days free trial for each new SPM App (existing customers get 2 days free trial for each additional App). At the end of the trial the App is automatically switched to the Basic (free) plan, unless you picked a paid plan. If you pick a paid plan before the trial period ends we will honour the full trial period. Can I cancel the service? Of course. You can simply stop sending us metrics, or remove our agents, or switch to the Basic plan. Hourly pricing, no contract, discounts There are no contracts and no commitments. You can cancel any time. Price is metered and based on the running time for the app / server being monitored. Note: if you run Docker, we charge based on the running time of the server/host, not running time of containers or number of containers. We charge at the end of the month. For longer term and large contracts please get in touch. Can I use multiple different plans? Yes. Each SPM App is independent and each SPM can have a different plan. Each user account can have any number of SPM Apps. Moreover, each SPM App can use a different payment method (e.g. a different credit card). Can I run SPM On Premises or in my Cloud? Yes. Everything you see in the Cloud version of SPM is available in an on Premises version, packaged as an RPM, DEB package, or a VM. Please get in touch for more information. How many servers can I monitor? There are no limits to how many servers / instances / nodes / containers you can monitor. Do I have to create my own charts and reports? You don’t have to, though you can. SPM gives you instant gratification. SPM knows what type of application you are monitoring and gives you a number of charts out of the box, neatly grouped into multiple reports and filterable by a number of dimensions appropriate for each collected metric (or tags you can specify). As soon as you install the SPM agent SPM will become immediately useful and usable by your whole team. Can I graph my own custom metrics? Yes. You can send your custom metrics, chart them, alert on them, apply on anomaly detection on them, create custom dashboards with them, correlate them with other metrics, events, and logs. How does SPM compare to New Relic? Datadog? AppDynamics? Marvel? SPM is 4-5 times cheaper than New Relic APM. For more information see SPM vs. New Relic APM. SPM gives you deeper out of the box metric collection and charting, while Datadog requires you to figure out which metrics to collect, how to chart them, build charts and dashboards from scratch, etc. AppDynamics is rich, but very expensive and focused primarily on large enterprises and on premises deployments. Unlike Marvel, SPM is not limited to monitoring Elasticsearch. For more information see SPM vs. Marvel. See SPM in Action Try Live Demo Subscribe to our newsletter Services Consulting Support Training Products Performance Monitoring Site Search Analytics Logsene All Products About Company Blog Jobs Clients Contact +1 347-480-1610 info@sematext.com 540 President St. 3rd Floor Brooklyn, NY 11215, USA © Sematext Group. All rights reserved   Terms Of Service · Privacy Apache Lucene, Apache Solr and their respective logos are trademarks of the Apache Software Foundation. Elasticsearch, Kibana, Logstash, and Beats are trademarks of Elasticsearch BV, registered in the U.S. and in other countries. Sematext Group, Inc. is not affiliated with Elasticsearch BV. Questions? Feedback? powered by Olark live chat software"	"null"	"null"	"Commercial performance monitor with distributing transaction tracing for JVM apps."	"true"
"Monitoring"	"Takipi"	"https://www.takipi.com/"	"Commercial in-production error monitoring and debugging."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"7"	"2"	"GitHub - takipi/takipi-puppet: Takipi puppet module Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 4 Fork 2 takipi/takipi-puppet Code Issues 1 Pull requests 0 Pulse Graphs Takipi puppet module http://www.takipi.com 3 commits 1 branch 0 releases Fetching contributors Puppet 47.5% Ruby 37.2% Shell 15.3% Puppet Ruby Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. manifests spec tests .gitignore README.md Rakefile metadata.json README.md takipi Table of Contents Overview Module Description - What the module does and why it is useful Setup - The basics of getting started with takipi What takipi affects Setup requirements Beginning with takipi Usage - Configuration options and additional functionality Reference - An under-the-hood peek at what the module is doing and how Limitations - OS compatibility, etc. Development - Guide for contributing to the module Testing Changelog Overview This module handles installation of JVM and Takipi agent. Currently supports RPM and DEB-based Linux distributions. Module Description Takipi installs a daemon process and a JVM agent library on your servers. These two components work in tandem to log and send data to Takipi's analysis servers. Together they detect events (such as exceptions or logged errors) happening within your app and automatically create the code needed to log and collect the data you'll need to debug these errors in production. Setup What takipi affects Installs Java on the node that Takipi is to be installed, handled by puppetlabs-java module. Installs Takipi base package. Adds the Takipi secret key (found under /opt/takipi/work/secret.key) and completes package installation. Setup Requirements Requires; puppetlabs-stdlib puppetlabs-java Beginning with takipi Create your account at https://app.takipi.com/account.html and get your secret key. Usage include takipi class {'::takipi':   secret_key => 'YOUR_SECRET_KEY', }  Reference Limitations Does not handle extra functionality apart from installing Takipi. Development Pull requests are greatly appreciated, please keep proper indentation. Beaker tests are awesome, feel free to throw some in. Testing Under tests/ there is a Vagrantfile that can be used to test Takipi module. Currently two boxes are added for tests, Centos 6.5 and Ubuntu 13.10 provided by Puppetlabs. Make sure to add a valid secret key in tests/manifests/takipi.pp. Usage: vagrant up takipi_centos vagrant up takipi_ubuntu Changelog 0.4.0 @pmoust - Initial Release Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/takipi/takipi-puppet"	"Commercial in-production error monitoring and debugging."	"true"
"Native"	"JNA"	"https://github.com/java-native-access/jna"	"Work with native libraries without writing JNI. Also provides interfaces to common system libraries."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2402"	"237"	"707"	"GitHub - java-native-access/jna: Java Native Access Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 237 Star 2,402 Fork 707 java-native-access/jna Code Issues 79 Pull requests 12 Pulse Graphs Java Native Access 3,135 commits 18 branches 42 releases 83 contributors Java 68.3% C 15.9% Assembly 6.7% TeX 4.0% Groff 3.0% M4 0.9% Other 1.2% Java C Assembly TeX Groff M4 Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.2.2 553-stdcall-stack-alignment Honeyfy-539-adding-win32-function-QueryFullProcessImageName akandi-failureConfig amd64-pthread-cleanup dispose-on-unload fix-arm-varargs gh-pages issue-300 javadoc-warning-fixes lwahonen-IShellFolder_support master pinaf-XFetchName support-alt-calling-convention travis-upgrade w32-build-fix w32-platform-cleanup x11-demo-fixes Nothing to show v3.2.1 v3.2 v3.1 v3.0.13 v3.0.12 v3.0.11 v3.0.10 v3.0.9 CVS 4.2.2 4.2.1 4.2.0 4.1.0 4.0 3.5.2 3.5.1 3.5.0 3.4.2 3.4.1 3.4.0 3.4.0-maven 3.3.0 3.2.7 3.2.5 3.2.4 3.2.3 3.2.2 3.2.1 3.2.0 3.1.0 3.0.9 3.0.8 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0 2.5 2.4 Nothing to show New pull request Latest commit b961e5a Jul 5, 2016 bhamail committed on GitHub minor typo Permalink Failed to load latest commit information. contrib Reintroduce ComThread and move base functions into ObjectFactory Jun 23, 2016 dist prep for 4.2.1 release Oct 18, 2015 lib Staticly link the windows jnidispatch.dll when build with MSVC compiler Jun 30, 2016 native Staticly link the windows jnidispatch.dll when build with MSVC compiler Jun 30, 2016 parent License naming changes suggested in review. Jul 5, 2016 src/com/sun/jna Merge pull request #518 from ck2510/master Apr 12, 2016 test/com/sun/jna Merge pull request #518 from ck2510/master Apr 12, 2016 www Prepare publishing binaries to maven central via sonatype OSS reposit… Jun 17, 2016 .classpath Removed dependency on JNA_LIB and contrib paths. Oct 4, 2013 .gitignore Mavenize the build process - Phase 1: building the native code via Maven Feb 16, 2016 .project fix file permissions May 6, 2013 .travis.yml upgrade travis build configuration Sep 9, 2015 AL2.0 Fix Apache License naming as requested by issue #673. Jul 5, 2016 CHANGES.md minor typo Jul 5, 2016 LGPL2.1 remove appendices from licenses Jul 6, 2014 LICENSE License naming changes suggested in review. Jul 5, 2016 LICENSE.AL Fix Apache License naming as requested by issue #673. Jul 5, 2016 LICENSE.LGPL add license info files Jun 8, 2013 OTHERS fix file permissions May 6, 2013 README.md Update README.md Mar 23, 2016 TODO ensure native bits get built for 'native' target and for tests Jul 3, 2013 build.xml Fix Apache License naming as requested by issue #673. Jul 5, 2016 jna.keystore move jnalib up to top level Jun 22, 2011 pom-jna-platform.xml License naming changes suggested in review. Jul 5, 2016 pom-jna.xml License naming changes suggested in review. Jul 5, 2016 w32ce-test.lnk re-enable WCE failing tests, fixes to allow proper phoneME operation … Nov 9, 2011 README.md Java Native Access (JNA) The definitive JNA reference (including an overview and usage details) is in the JavaDoc. Please read the overview. Questions, comments, or exploratory conversations should begin on the mailing list, although you may find it easier to find answers to already-solved problems on StackOverflow. JNA provides Java programs easy access to native shared libraries without writing anything but Java code - no JNI or native code is required. This functionality is comparable to Windows' Platform/Invoke and Python's ctypes. JNA allows you to call directly into native functions using natural Java method invocation. The Java call looks just like the call does in native code. Most calls require no special handling or configuration; no boilerplate or generated code is required. JNA uses a small JNI library stub to dynamically invoke native code. The developer uses a Java interface to describe functions and structures in the target native library. This makes it quite easy to take advantage of native platform features without incurring the high overhead of configuring and building JNI code for multiple platforms. Read this more in-depth description. While significant attention has been paid to performance, correctness and ease of use take priority. In addition, JNA includes a platform library with many native functions already mapped as well as a set of utility interfaces that simplify native access. Projects Using JNA JNA is a mature library with dozens of contributors and hundreds of commercial and non-commercial projects that use it. If you're using JNA, feel free to tell us about it. Include some details about your company, project name, purpose and size and tell us how you use the library. Apache Cassandra: Large-scale NoSQL data store. Rococoa: Java bindings to the Mac OS X Cocoa framework, by Duncan McGregor. jna-posix: Common POSIX Functions for Java. JNAerator: Pronounced ""generator"", auto-generates JNA mappings from C headers, by Olivier Chafik. Freedom for Media in Java by Ken Larson/Dieter Krachtus. gstreamer for Java by Wayne Meissner. Videolan: JVLC Java Multimedia Library. SVNKit: Pure Java Subversion client library. OmegaT Computer-Aided Translation. IntelliJ IDEA by JetBrains. NetBeans IDE. Athena Backup by Doug Patriarche. FileBot Media Renamer by Reinhard Pointner. USB for Java by Mario Boikov. Waffle: Enables SSO on Windows in Java applications, by Daniel Doubrovkine. leveldb-jna: Cross-platform JNA based adapter for LevelDB (used in Keylord). Interesting Investigations/Experiments Drive Lego Mindstorm NXT by Emmanuel Pirsch. A JavaFX Clock by Augusto Sellhorn. Detect User Inactivity by Olivier Chafik. IAXClient Applet provides VOIP for Java, by Wolfgang Pichler. There are also a number of examples and projects within the contrib directory of the JNA project itself. Supported Platforms JNA will build on most linux-like platforms with a reasonable set of GNU tools and a JDK. See the native Makefile for native configurations that have been built and tested. If your platform is supported by libffi, then chances are you can build JNA for it. Pre-built platform support may be found here. Download Version 4.2.2   jna.jar   jna-platform.jar Features Automatic mapping from Java to native functions, with simple mappings for all primitive data types Runs on most platforms which support Java Automatic conversion between C and Java strings, with customizable encoding/decoding Structure and Union arguments/return values, by reference and by value Function Pointers, (callbacks from native code to Java) as arguments and/or members of a struct Auto-generated Java proxies for native function pointers By-reference (pointer-to-type) arguments Java array and NIO Buffer arguments (primitive types and pointers) as pointer-to-buffer Nested structures and arrays Wide (wchar_t-based) strings Native long support (32- or 64-bit as appropriate) Demo applications/examples Supported on 1.4 or later JVMs, including JavaME (earlier VMs may work with stubbed NIO support) Customizable marshalling/unmarshalling (argument and return value conversions) Customizable mapping from Java method to native function name, and customizable invocation to simulate C preprocessor function macros Support for automatic Windows ASCII/UNICODE function mappings Varargs support Type-safety for native pointers VM crash protection (optional) Optimized direct mapping for high-performance applications. COM support for early and late binding. COM/Typelib java code generator. Community and Support All questions should be posted to the jna-users Google group. Issues can be submitted here on Github. When posting to the mailing list, please include the following: What OS/CPU/architecture you're using (e.g. Windows 7 64-bit) Reference to your native interface definitions (i.e. C headers), if available The JNA mapping you're trying to use VM crash logs, if any Example native usage, and your attempted Java usage It's nearly impossible to indicate proper Java usage when there's no native reference to work from. For commercial support, please contact twalljava [at] java [dot] net. Using the Library Getting Started Functional Description. Mapping between Java and Native Using Pointers and Arrays Using Structures and Unions Using By-Reference Arguments Customization of Type Mapping Callbacks/Function Pointers/Closures Dynamically Typed Languages (JRuby/Jython) Platform Library Direct Method Mapping (Optimization) Frequently Asked Questions (FAQ) Avoiding Crashes Primary Documentation (JavaDoc) The definitive JNA reference is in the JavaDoc. Developers Contributing to JNA Setting up a Windows Development Environment Setting up an Android Development Environment Setting up a RaspberryPi Development Environment Setting up a Mac Development Environment Releasing JNA Publishing to Maven Central Contributing You're encouraged to contribute to JNA. Fork the code from https://github.com/java-native-access/jna and submit pull requests. For more information on setting up a development environment see Contributing to JNA. If you are interested in paid support, feel free to say so on the jna-users mailing list. Most simple questions will be answered on the list, but more complicated work, new features or target platforms can be negotiated with any of the JNA developers (this is how several of JNA's features came into being). You may even encounter other users with the same need and be able to cost share the new development. License This library is licensed under the LGPL, version 2.1 or later, and (from version 4.0 onward) the Apache Software License, version 2.0. Commercial license arrangements are negotiable. NOTE: Oracle is not sponsoring this project, even though the package name (com.sun.jna) might imply otherwise. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/java-native-access/jna"	"Work with native libraries without writing JNI. Also provides interfaces to common system libraries."	"true"
"Native"	"JNR"	"https://github.com/jnr/jnr-ffi"	"Work with native libraries without writing JNI. Also provides interfaces to common system libraries. Same goals as JNA, but faster, and serves as the basis for the upcoming."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"282"	"40"	"43"	"GitHub - jnr/jnr-ffi: Java Abstracted Foreign Function Layer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 40 Star 282 Fork 43 jnr/jnr-ffi Code Issues 21 Pull requests 5 Wiki Pulse Graphs Java Abstracted Foreign Function Layer 827 commits 6 branches 52 releases 18 contributors Java 98.5% C 1.3% Makefile 0.2% Java C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3_branch 0.5_branch branches/v1 gh-pages jnr-ffi-0_7 master Nothing to show jnr-ffi-2.0.9 jnr-ffi-2.0.8 2.0.7 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.7.11 0.7.10 0.7.9 0.7.8 0.7.7 0.7.6 0.7.5 0.7.4 0.7.3 0.7.2 0.7.1 0.7.0 0.6.1 0.6.0 0.5.11 0.5.10 0.5.9 0.5.8 0.5.7 0.5.6 0.5.5 0.5.4 0.5.3 0.5.1 0.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3 0.2 0.1 Nothing to show New pull request Latest commit 1deb47d Jun 30, 2016 nirvdrum committed on GitHub Merge pull request #67 from goto1134/patch-1 … Typo fixed Permalink Failed to load latest commit information. libtest Update test files to also have Apache-2.0 header. Apr 29, 2015 src Typo fixed Jun 30, 2016 .gitignore Ignore intellij idea artifacts for now Mar 12, 2010 .travis.yml Fix matrix. Sep 3, 2015 LICENSE Update licence to apache-2.0 Mar 3, 2011 README.md Fix Hello, World example in README Dec 16, 2012 pom.xml [maven-release-plugin] prepare for next development iteration Mar 9, 2016 README.md jnr-ffi jnr-ffi is a java library for loading native libraries without writing JNI code by hand, or using tools such as SWIG. Example package helloworld;  import jnr.ffi.LibraryLoader;  public class HelloWorld {     public static interface LibC {         int puts(String s);     }      public static void main(String[] args) {         LibC libc = LibraryLoader.create(LibC.class).load(""c"");          libc.puts(""Hello, World"");     } }  Supported Types All java primitives are mapped simply to the equivalent C types. byte - 8 bit signed integer short - 16 bit signed integer int - 32 bit signed integer long - natural long (i.e. 32 bits wide on 32 bit systems, 64 bit wide on 64bit systems) float - 32 bit float double - 64 bit float The width and/or signed-ness of these basic types can be specified using one of the type alias annotations. e.g. // Use the correct width for the result from getpid(3) @pid_t long getpid();  // read(2) returns a signed long result, and its length parameter is an unsigned long @ssize_t long read(int fd, Pointer data, @size_t long len);  In addition, the following java types are mapped to a C pointer String - equivalent to ""const char *"" Pointer - equivalent to ""void *"" Buffer - equivalent to ""void *"" Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jnr/jnr-ffi"	"Work with native libraries without writing JNI. Also provides interfaces to common system libraries. Same goals as JNA, but faster, and serves as the basis for the upcoming."	"true"
"Native"	"Project Panama"	"http://openjdk.java.net/projects/panama/"	"Work with native libraries without writing JNI. Also provides interfaces to common system libraries. Same goals as JNA, but faster, and serves as the basis for the upcoming."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OpenJDK: Panama Project Panama: Interconnecting JVM and native code We are improving and enriching the connections between the Java TM virtual machine and well-defined but “foreign” (non-Java) APIs, including many interfaces commonly used by C programmers. To this end, Project Panama will include most or all of these components: native function calling from JVM (C, C++), specifically per JEP 191 native data access from JVM or inside JVM heap new data layouts in JVM heap native metadata definition for JVM header file API extraction tools (see below) native library management APIs native-oriented interpreter and runtime “hooks” class and method resolution “hooks” native-oriented JIT optimizations tooling or wrapper interposition for safety exploratory work with difficult-to-integrate native libraries Community This Project is sponsored by the Hotspot Group. Mailing lists panama-dev — the usual developer list panama-spec-experts — moderated, restricted to specification discussions only Bloggers Charles Nutter John Rose Links new project CFV for Panama JEP 191: Foreign Function Interface example code: Java Native Runtime problem space overview: the isthmus in the VM Workflow Project Panama is designed to incubate a series of components for eventual inclusion in the JDK, via curated merge. Following the experience of Project Lambda, we have our own tree of repositories that parallel the structure of JDK 9. Although this process is local and subject to change, we expect that typical moves will be as follows: Commit rough changesets to JDK and/or JVM code, with ad hoc review, change set format, and testing. (Rough changeset example from Project Lambda) Frequently (goal is nightly), perform private regression tests. Periodically (goal is weekly), resync from JDK 9 master and rebase pending (incubated) changes. (Resync example from Project Lambda) Periodically (goal is weekly), make private builds, marking with distinguished tags like panama-b9042. Create and update JIRA sub-issues to informally manage features by parts, using labels like 9-repo-panama as needed to mark private changes to incubated code. Infrequently, create a “curated” change set targeted at JDK; properly review, test, integrate. (Curated changeset example from Project Lambda) OpenJDK FAQ Installing Contributing Sponsoring Developers' Guide Mailing lists IRC · Wiki Bylaws · Census Legal JEP Process Source code Mercurial Bundles (6) Groups (overview) 2D Graphics Adoption AWT Build Compiler Conformance Core Libraries Governing Board HotSpot Internationalization JMX Members Networking NetBeans Projects Porters Quality Security Serviceability Sound Swing Web Projects (overview) Annotations Pipeline 2.0 Audio Engine Build Infrastructure Caciocavallo Closures Code Tools Coin Common VM Interface Compiler Grammar Device I/O Font Scaler Framebuffer Toolkit Graal Graphics Rasterizer HarfBuzz Integration IcedTea JDK 6 JDK 7 JDK 7 Updates JDK 8 · Java SE 8 JDK 8 Updates JDK 9 JavaDoc.Next Jigsaw Kona Kulla Lambda Locale Enhancement Memory Model Update Mobile Modules Multi-Language VM Nashorn New I/O OpenJFX Panama Penrose Port: AArch32 Port: AArch64 Port: BSD Port: Haiku Port: Mac OS X Port: MIPS Port: PowerPC/AIX Port: s390x SCTP Shenandoah Sumatra ThreeTen Tiered Attribution Type Annotations XRender Pipeline Valhalla Verona VisualVM Zero Tools Java SE Mercurial NetBeans jtreg harness Community Planet JDK blogs The Aquarium java.net java.sun.com Java Community Process Related JDK Snapshots (8u, 9) GlassFish IoT © 2016 Oracle Corporation and/or its affiliates Terms of Use · License: GPLv2 · Privacy · Trademarks"	"null"	"null"	"Work with native libraries without writing JNI. Also provides interfaces to common system libraries. Same goals as JNA, but faster, and serves as the basis for the upcoming."	"true"
"Natural Language Processing"	"CoreNLP"	"http://nlp.stanford.edu/software/corenlp.shtml"	"Stanford's CoreNLP provides a set of fundamental tools for tasks like tagging, named entity recognition, sentiment analysis and many more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2039"	"300"	"753"	"GitHub - stanfordnlp/CoreNLP: Stanford CoreNLP: A Java suite of core NLP tools. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 300 Star 2,039 Fork 753 stanfordnlp/CoreNLP Code Issues 54 Pull requests 4 Wiki Pulse Graphs Stanford CoreNLP: A Java suite of core NLP tools. http://stanfordnlp.github.io/CoreNLP/ 13,103 commits 3 branches 0 releases 49 contributors Java 97.3% Lex 1.5% JavaScript 0.3% Common Lisp 0.2% Shell 0.2% Makefile 0.2% Other 0.3% Java Lex JavaScript Common Lisp Shell Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags chinese-ud gh-pages master Nothing to show Nothing to show New pull request Latest commit 97bff55 Jul 14, 2016 J38 committed with Stanford NLP latest chinese kbp Permalink Failed to load latest commit information. classes Update .gitignore a bit Jan 21, 2014 data Merge branch 'master' of origin Feb 24, 2016 doc merge Jun 16, 2016 itest/src/edu/stanford/nlp latest chinese kbp Jul 14, 2016 lib merge master into gm-character Jan 28, 2016 liblocal merge Jun 16, 2016 libsrc merge Jun 16, 2016 licenses store v2 and v3 of gpl Jul 8, 2016 scripts Merge branch 'master' of jamie.stanford.edu:/u/nlp/git/javanlp Jul 8, 2016 src/edu/stanford/nlp latest chinese kbp Jul 14, 2016 test latest chinese kbp Jul 14, 2016 .gitignore Update .gitignore a bit Jan 21, 2014 CONTRIBUTING.md Merge branch 'master' of jamie.stanford.edu:/u/nlp/git/javanlp Jul 8, 2016 JavaNLP-core.eml working on some propernoun chain creation Jan 28, 2016 JavaNLP-core.iml working on some propernoun chain creation Jan 28, 2016 LICENSE.txt update to v3.0 Jul 13, 2016 README.md merge Jun 16, 2016 build.gradle merge master Jan 28, 2016 build.xml merge Jun 16, 2016 commonbuildjsp.xml Merge remote-tracking branch 'origin/master' Jun 10, 2014 README.md Stanford CoreNLP Stanford CoreNLP provides a set of natural language analysis tools written in Java. It can take raw human language text input and give the base forms of words, their parts of speech, whether they are names of companies, people, etc., normalize and interpret dates, times, and numeric quantities, mark up the structure of sentences in terms of phrases or word dependencies, and indicate which noun phrases refer to the same entities. It was originally developed for English, but now also provides varying levels of support for (Modern Standard) Arabic, (mainland) Chinese, French, German, and Spanish. Stanford CoreNLP is an integrated framework, which make it very easy to apply a bunch of language analysis tools to a piece of text. Starting from plain text, you can run all the tools with just two lines of code. Its analyses provide the foundational building blocks for higher-level and domain-specific text understanding applications. Stanford CoreNLP is a set of stable and well-tested natural language processing tools, widely used by various groups in academia, industry, and government. The tools variously use rule-based, probabilistic machine learning, and deep learning components. The Stanford CoreNLP code is written in Java and licensed under the GNU General Public License (v3 or later). Note that this is the full GPL, which allows many free uses, but not its use in proprietary software that you distribute to others. How To Compile (with ant) cd CoreNLP ; ant How To Create A Jar compile the code cd CoreNLP/classes ; jar -cf ../stanford-corenlp.jar edu You can find releases of Stanford CoreNLP on Maven Central. You can find more explanation and documentation on the Stanford CoreNLP homepage. The most recent models associated with the code in the HEAD of this repository can be found here. Some of the larger (English) models -- like the shift-reduce parser and WikiDict -- are not distributed with our default models jar. The most recent version of these models can be found here. For information about making contributions to Stanford CoreNLP, see the file CONTRIBUTING.md. Questions about CoreNLP can either be posted on StackOverflow with the tag stanford-nlp, or on the mailing lists. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stanfordnlp/CoreNLP"	"Stanford's CoreNLP provides a set of fundamental tools for tasks like tagging, named entity recognition, sentiment analysis and many more."	"true"
"Natural Language Processing"	"DKPro"	"https://dkpro.github.io/"	"A collection of re-usable NLP tools for linguistic pre-processing, machine learning, lexical resources, etc."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"16"	"1"	"GitHub - dkpro/dkpro-c4corpus: DKPro C4CorpusTools is a collection of tools for processing CommonCrawl corpus, including Creative Commons license detection, boilerplate removal, language detection, and near-duplicate removal. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 15 Fork 1 dkpro/dkpro-c4corpus Code Issues 12 Pull requests 2 Pulse Graphs DKPro C4CorpusTools is a collection of tools for processing CommonCrawl corpus, including Creative Commons license detection, boilerplate removal, language detection, and near-duplicate removal. https://dkpro.github.io/dkpro-c4corpus 117 commits 2 branches 1 release Fetching contributors Java 97.0% Python 3.0% Java Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show dkpro-c4corpus-1.0.0 Nothing to show New pull request Latest commit ba4ce78 Jun 22, 2016 habernal committed on GitHub Fixing link to the final C4Corpus Permalink Failed to load latest commit information. dkpro-c4corpus-boilerplate [maven-release-plugin] prepare for next development iteration Apr 15, 2016 dkpro-c4corpus-deduplication [maven-release-plugin] prepare for next development iteration Apr 15, 2016 dkpro-c4corpus-doc Fixing link to the final C4Corpus Jun 22, 2016 dkpro-c4corpus-hadoop Issue #43. Ignoring non-html etc. May 6, 2016 dkpro-c4corpus-language [maven-release-plugin] prepare for next development iteration Apr 15, 2016 dkpro-c4corpus-license [maven-release-plugin] prepare for next development iteration Apr 15, 2016 dkpro-c4corpus-warc-io [maven-release-plugin] prepare for next development iteration Apr 15, 2016 .gitignore No issue. Ignore Eclipse metadata files. Apr 9, 2016 CONTRIBUTING.md No issue. Add CONTRIBUTING.md for contribution notice when opening is… Apr 10, 2016 LICENSE.txt Initial import Feb 17, 2016 README.md No issue. Updating doc. May 26, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Apr 15, 2016 README.md DKPro C4CorpusTools DKPro C4CorpusTools is a collection of tools for processing CommonCrawl corpus, including Creative Commons license detection, boilerplate removal, language detection, and near-duplicate removal. DKPro C4CorpusTools (or C4CorpusTools) refers to the project source codes C4Corpus refers the preprocessed CommonCrawl data set (C4 = Creative Commons from Common Crawl) Please use the following citation if you use C4Corpus or C4CorpusTools @InProceedings{Habernal.et.al.2016.LREC,   author    = {Habernal, Ivan and Zayed, Omnia, and Gurevych, Iryna},   title     = {{C4Corpus: Multilingual Web-size Corpus with Free License}},   booktitle = {Proceedings of the Tenth International Conference on Language Resources                and Evaluation (LREC 2016)},   pages     = {914--922},   month     = {May},   year      = {2016},   address   = {Portoro\v{z}, Slovenia},   publisher = {European Language Resources Association (ELRA)},   editor    = {Nicoletta Calzolari and Khalid Choukri and Thierry Declerck and Marko Grobelnik                and Bente Maegaard and Joseph Mariani and Asuncion Moreno and Jan Odijk                and Stelios Piperidis},   isbn      = {978-2-9517408-9-1},   url       = {http://www.lrec-conf.org/proceedings/lrec2016/pdf/388_Paper.pdf} }  The full LREC article is available at the UKP website. Contact person: Ivan Habernal, habernal@ukp.informatik.tu-darmstadt.de UKP Lab: http://www.ukp.tu-darmstadt.de/ TU Darmstadt: http://www.tu-darmstadt.de/ Consult the official C4CorpusTools documentation which contains C4Corpus Users's Guide How to access C4Corpus at S3 Running boilerplate removal outside Hadoop Examples of simple search in C4Corpus C4Corpus Developers's Guide How to run the full processing pipeline on CommonCrawl Corpus statistics reported in the LREC article Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dkpro/dkpro-c4corpus"	"A collection of re-usable NLP tools for linguistic pre-processing, machine learning, lexical resources, etc."	"true"
"Natural Language Processing"	"LingPipe"	"http://alias-i.com/lingpipe/"	"Toolkit for a variety of tasks ranging from POS tagging to sentiment analysis."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LingPipe Home LingPipe Home home demos license download lingpipe core models docs install tutorials javadoc textbook community customers newsgroup blog bugs sandbox competition citations contact about alias-i by Google How Can We Help You? Get the latest version: Free and Paid Licenses/Downloads Learn how to use LingPipe: Tutorials Get expert help using LingPipe: Services Join us on Facebook What is LingPipe? LingPipe is tool kit for processing text using computational linguistics. LingPipe is used to do tasks like: Find the names of people, organizations or locations in news Automatically classify Twitter search results into categories Suggest correct spellings of queries To get a better idea of the range of possible LingPipe uses, visit our tutorials and sandbox. Architecture LingPipe's architecture is designed to be efficient, scalable, reusable, and robust. Highlights include: Java API with source code and unit tests; multi-lingual, multi-domain, multi-genre models; training with new data for new tasks; n-best output with statistical confidence estimates; online training (learn-a-little, tag-a-little); thread-safe models and decoders for concurrent-read exclusive-write (CREW) synchronization; and character encoding-sensitive I/O. Latest Release: LingPipe 4.1.0 Download Latest: LingPipe 4.1.0 Download page for LingPipe 4.1.0 Entire distribution contains the precompiled jar, javadoc, source, tests, libs, tutorials and demos. Just add Java. Download Last 3.9.x Version LingPipe 3.9.3 Home Page This is a link to another top-level page like this one, which itself contains download links. Intermediate Release The latest release of LingPipe is LingPipe 4.1.0, which is a feature release, as well as patching some bugs. It is fully backward compatible with LingPipe version 4.0.1. Character, Token, and Document Suffix Arrays The largest addition in LingPipe 4.1 is suffix arrays. The package com.aliasi.suffixarray contains classes for suffix arrays of characters, of tokens, or of tokenized documents with links back to the documents from the suffix array. Suffix arrays support finding arbitrary length repeated strings in a large text collection. Serialization for Language Models We also added serializability to a number of the language model implementations which helps them play nicely with our classifiers, taggers, etc. TF/IDF Classifier Access Methods We added methods to TF/IDF classifiers to access the raw IDF values for terms and raw IDF values for term/document pairs. Line Tagging Parser The line tagging parser was updated to handle more general end-of-line markers across platforms. Single-Link Clustering Bug We fixed a bug in single-link clustering which caused elements further away than the distance bound from all other elements to disappear. Tests Fork If you run our top-level API test through Ant, you'll find they're much slower, as in about four times slower. This isn't because LingPipe is slower, but because we rewrote the test call to fork a new process for each test. This allows the tests to succeed out of the box with under 1MB memory on the Macintosh OSX platform with their Java. Migration from LingPipe 3 to LingPipe 4 LingPipe 4.1.0 is not  backward compatible with LingPipe 3.9.3. Programs that compile in LingPipe 3.9.3 without deprecation warnings should compile and run in Lingpipe 4.1.0. Downloading Last 3.9 Version: LingPipe 3.9.3 The last 3.9 version of LingPipe before the major refactoring is available at: Lingpipe 3.9.3 Home © 2003–2011   alias-i"	"null"	"null"	"Toolkit for a variety of tasks ranging from POS tagging to sentiment analysis."	"true"
"Networking"	"Async Http Client"	"https://github.com/AsyncHttpClient/async-http-client"	"Asynchronous HTTP and WebSocket client library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2986"	"284"	"902"	"GitHub - AsyncHttpClient/async-http-client: Asynchronous Http and WebSocket Client library for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 284 Star 2,986 Fork 902 AsyncHttpClient/async-http-client Code Issues 29 Pull requests 2 Wiki Pulse Graphs Asynchronous Http and WebSocket Client library for Java 3,346 commits 9 branches 183 releases 109 contributors Java 99.9% Other 0.1% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.7.x 1.8.x 1.9.x gh-pages master netty-snapshot netty4.1 new-netty-4.1 test-refactoring Nothing to show async-http-client-project-2.0.10 async-http-client-project-2.0.9 async-http-client-project-2.0.8 async-http-client-project-2.0.7 async-http-client-project-2.0.6 async-http-client-project-2.0.5 async-http-client-project-2.0.4 async-http-client-project-2.0.3 async-http-client-project-2.0.2 async-http-client-project-2.0.1 async-http-client-project-2.0.0 async-http-client-project-2.0.0-alpha27 async-http-client-project-2.0.0-alpha26 async-http-client-project-2.0.0-alpha25 async-http-client-project-2.0.0-alpha24 async-http-client-project-2.0.0-alpha23 async-http-client-project-2.0.0-alpha22 async-http-client-project-2.0.0-alpha21 async-http-client-project-2.0.0-alpha20 async-http-client-project-2.0.0-alpha19 async-http-client-project-2.0.0-alpha18 async-http-client-project-2.0.0-alpha17 async-http-client-project-2.0.0-alpha16 async-http-client-project-2.0.0-alpha15 async-http-client-project-2.0.0-alpha14 async-http-client-project-2.0.0-alpha13 async-http-client-project-2.0.0-alpha12 async-http-client-project-2.0.0-alpha11 async-http-client-project-2.0.0-alpha10 async-http-client-project-2.0.0-alpha9 async-http-client-project-2.0.0-RC21 async-http-client-project-2.0.0-RC20 async-http-client-project-2.0.0-RC19 async-http-client-project-2.0.0-RC18 async-http-client-project-2.0.0-RC17 async-http-client-project-2.0.0-RC16 async-http-client-project-2.0.0-RC15 async-http-client-project-2.0.0-RC14 async-http-client-project-2.0.0-RC13 async-http-client-project-2.0.0-RC12 async-http-client-project-2.0.0-RC11 async-http-client-project-2.0.0-RC10 async-http-client-project-2.0.0-RC9 async-http-client-project-2.0.0-RC8 async-http-client-project-2.0.0-RC7 async-http-client-project-2.0.0-RC6 async-http-client-project-2.0.0-RC5 async-http-client-project-2.0.0-RC4 async-http-client-project-2.0.0-RC3 async-http-client-project-2.0.0-RC2 async-http-client-project-2.0.0-RC1 async-http-client-1.9.38 async-http-client-1.9.37 async-http-client-1.9.36 async-http-client-1.9.35 async-http-client-1.9.34 async-http-client-1.9.33 async-http-client-1.9.32 async-http-client-1.9.31 async-http-client-1.9.30 async-http-client-1.9.29 async-http-client-1.9.28 async-http-client-1.9.27 async-http-client-1.9.26 async-http-client-1.9.25 async-http-client-1.9.24 async-http-client-1.9.23 async-http-client-1.9.22 async-http-client-1.9.21 async-http-client-1.9.20 async-http-client-1.9.19 async-http-client-1.9.18 async-http-client-1.9.17 async-http-client-1.9.16 async-http-client-1.9.15 async-http-client-1.9.14 async-http-client-1.9.13 async-http-client-1.9.12 async-http-client-1.9.11 async-http-client-1.9.10 async-http-client-1.9.9 async-http-client-1.9.8 async-http-client-1.9.7 async-http-client-1.9.6 async-http-client-1.9.5 async-http-client-1.9.4 async-http-client-1.9.3 async-http-client-1.9.2 async-http-client-1.9.1 async-http-client-1.9.0 async-http-client-1.9.0-BETA24 async-http-client-1.9.0-BETA23 async-http-client-1.9.0-BETA22 async-http-client-1.9.0-BETA21 async-http-client-1.9.0-BETA20 async-http-client-1.9.0-BETA19 async-http-client-1.9.0-BETA18 async-http-client-1.9.0-BETA17 async-http-client-1.9.0-BETA16 async-http-client-1.9.0-BETA15 Nothing to show New pull request Latest commit ec3a860 Jul 14, 2016 slandelle Request realm should have precedence over config one, close #1211 Permalink Failed to load latest commit information. client Request realm should have precedence over config one, close #1211 Jul 14, 2016 extras [maven-release-plugin] prepare for next development iteration Jul 4, 2016 netty-bp [maven-release-plugin] prepare for next development iteration Jul 4, 2016 travis Increase max number of open files Jun 6, 2016 .gitignore Minor clean up Dec 18, 2012 .travis.yml Reorganize Travis scripts Jun 3, 2016 LICENSE-2.0.txt Add LICENCE/README, get rid of IDEA file Feb 16, 2010 MIGRATION.md Fix compressionEnforced doc in migration guide, close #1050 Dec 2, 2015 README.md Update sample code to use Builder Apr 27, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jul 4, 2016 README.md Async Http Client (@AsyncHttpClient on twitter) Javadoc Getting started, and use WebSockets The Async Http Client library's purpose is to allow Java applications to easily execute HTTP requests and asynchronously process the HTTP responses. The library also supports the WebSocket Protocol. The Async HTTP Client library is simple to use. I's built on top of Netty and currently requires JDK8. Latest version: Installation First, in order to add it to your Maven project, simply download from Maven central or add this dependency: <dependency>     <groupId>org.asynchttpclient</groupId>     <artifactId>async-http-client</artifactId>     <version>LATEST_VERSION</version> </dependency> Usage Then in your code you can simply do import org.asynchttpclient.*; import java.util.concurrent.Future;  AsyncHttpClient asyncHttpClient = new DefaultAsyncHttpClient(); Future<Response> f = asyncHttpClient.prepareGet(""http://www.example.com/"").execute(); Response r = f.get(); Note that in this case all the content must be read fully in memory, even if you used getResponseBodyAsStream() method on returned Response object. You can also accomplish asynchronous (non-blocking) operation without using a Future if you want to receive and process the response in your handler: import org.asynchttpclient.*; import java.util.concurrent.Future;  AsyncHttpClient asyncHttpClient = new DefaultAsyncHttpClient(); asyncHttpClient.prepareGet(""http://www.example.com/"").execute(new AsyncCompletionHandler<Response>(){      @Override     public Response onCompleted(Response response) throws Exception{         // Do something with the Response         // ...         return response;     }      @Override     public void onThrowable(Throwable t){         // Something wrong happened.     } }); (this will also fully read Response in memory before calling onCompleted) You can also mix Future with AsyncHandler to only retrieve part of the asynchronous response import org.asynchttpclient.*; import java.util.concurrent.Future;  AsyncHttpClient asyncHttpClient = new DefaultAsyncHttpClient(); Future<Integer> f = asyncHttpClient.prepareGet(""http://www.example.com/"").execute(    new AsyncCompletionHandler<Integer>(){      @Override     public Integer onCompleted(Response response) throws Exception{         // Do something with the Response         return response.getStatusCode();     }      @Override     public void onThrowable(Throwable t){         // Something wrong happened.     } });  int statusCode = f.get(); which is something you want to do for large responses: this way you can process content as soon as it becomes available, piece by piece, without having to buffer it all in memory. You have full control on the Response life cycle, so you can decide at any moment to stop processing what the server is sending back: import org.asynchttpclient.*; import java.util.concurrent.Future;  AsyncHttpClient c = new DefaultAsyncHttpClient(); Future<String> f = c.prepareGet(""http://www.example.com/"").execute(new AsyncHandler<String>() {     private ByteArrayOutputStream bytes = new ByteArrayOutputStream();      @Override     public STATE onStatusReceived(HttpResponseStatus status) throws Exception {         int statusCode = status.getStatusCode();         // The Status have been read         // If you don't want to read the headers,body or stop processing the response         if (statusCode >= 500) {             return STATE.ABORT;         }     }      @Override     public STATE onHeadersReceived(HttpResponseHeaders h) throws Exception {         Headers headers = h.getHeaders();          // The headers have been read          // If you don't want to read the body, or stop processing the response          return STATE.ABORT;     }      @Override     public STATE onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {          bytes.write(bodyPart.getBodyPartBytes());          return STATE.CONTINUE;     }      @Override     public String onCompleted() throws Exception {          // Will be invoked once the response has been fully read or a ResponseComplete exception          // has been thrown.          // NOTE: should probably use Content-Encoding from headers          return bytes.toString(""UTF-8"");     }      @Override     public void onThrowable(Throwable t) {     } });  String bodyResponse = f.get(); Configuration Finally, you can also configure the AsyncHttpClient via its AsyncHttpClientConfig object: AsyncHttpClientConfig cf = new DefaultAsyncHttpClientConfig.Builder()     .setProxyServer(new ProxyServer.Builder(""127.0.0.1"", 38080)).build();  AsyncHttpClient c = new DefaultAsyncHttpClient(cf); WebSocket Async Http Client also support WebSocket by simply doing: WebSocket websocket = c.prepareGet(getTargetUrl())       .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(           new WebSocketTextListener() {            @Override           public void onMessage(String message) {           }            @Override           public void onOpen(WebSocket websocket) {               websocket.sendTextMessage(""..."").sendMessage(""..."");           }            @Override           public void onClose(WebSocket websocket) {               latch.countDown();           }            @Override           public void onError(Throwable t) {           }       }).build()).get(); User Group Keep up to date on the library development by joining the Asynchronous HTTP Client discussion group Google Group Contributing Of course, Pull Requests are welcome. Here a the few rules we'd like you to respect if you do so: Only edit the code related to the suggested change, so DON'T automatically format the classes you've edited. Respect the formatting rules: Indent with 4 spaces Your PR can contain multiple commits when submitting, but once it's been reviewed, we'll ask you to squash them into a single one Regarding licensing: You must be the original author of the code you suggest. You must give the copyright to ""the AsyncHttpClient Project"" Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/AsyncHttpClient/async-http-client"	"Asynchronous HTTP and WebSocket client library."	"true"
"Networking"	"Comsat"	"https://github.com/puniverse/comsat"	"Integrates standard Java web-related APIs with Quasar fibers and actors."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"323"	"44"	"40"	"GitHub - puniverse/comsat: Fibers and actors for web development Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 323 Fork 40 puniverse/comsat Code Issues 15 Pull requests 0 Pulse Graphs Fibers and actors for web development http://docs.paralleluniverse.co/comsat 845 commits 6 branches 8 releases Fetching contributors Java 95.7% Clojure 2.1% SQLPL 1.0% HTML 0.9% Smarty 0.1% Shell 0.1% Other 0.1% Java Clojure SQLPL HTML Smarty Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.3.0 gh-pages master old-jersey-rs-client redis release Nothing to show v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.3.0 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 8245647 May 19, 2016 circlespainter Control extension API Permalink Failed to load latest commit information. comsat-actors-api/src/main/java/co/paralleluniverse/comsat/webactors Complete and close #50 Mar 16, 2016 comsat-actors-netty/src Implement #56 Apr 26, 2016 comsat-actors-servlet/src Fix `comsat-actors-servlet` concurrency and Undertow leak Apr 24, 2016 comsat-actors-undertow/src - May 11, 2016 comsat-dropwizard/src Attempt fixing build on Jenkins CI with higher timeout Nov 25, 2015 comsat-httpclient/src Close #39 Aug 27, 2015 comsat-httpkit Prepare release `0.7.0` Apr 6, 2016 comsat-jax-rs-client/src Jun 18, 2015 comsat-jdbc/src - [ci skip] Jun 15, 2015 comsat-jdbi/src `comsat-jdbi`: fix uninstrumented warnings with JDBI `2.72` Apr 18, 2016 comsat-jersey-server/src remove AcceptingListener branch Apr 13, 2016 comsat-jetty-loader fix jetty/tomcat loaders build Jul 1, 2015 comsat-jooq/src 🐛 Fix #36 Aug 21, 2015 comsat-kafka/src Upgrade Kafka to `0.9.0.0` Feb 10, 2016 comsat-mongodb-allanbank/src rename mongodb allanbank module [ci skip] Jul 22, 2014 comsat-okhttp/src Initial upgrade of OkHttp to 2.6.0 Nov 25, 2015 comsat-retrofit/src Control extension API May 19, 2016 comsat-ring-jetty9 Prepare release `0.7.0` Apr 6, 2016 comsat-servlet/src - Apr 17, 2016 comsat-shiro/src Add Apache Shiro integration Mar 13, 2016 comsat-spring Try fixing Travis build Apr 5, 2016 comsat-test-utils/src - Apr 3, 2016 comsat-test-war Fix headers [ci skip] Mar 29, 2015 comsat-tomcat-loader Upgrade several deps Apr 5, 2016 docs fix note about jdbc datasource usage May 5, 2016 travis Fix Jekyll version Dec 8, 2015 .gitignore gitignore [ci skip] Jul 1, 2015 .travis.yml Shorten Travis log Apr 17, 2016 CONTRIBUTING.md Added CONTRIBUTING.md [ci skip] Jan 14, 2014 LICENSE async jersey and license headers Aug 6, 2013 NOTICE Underscore notice [ci skip] Jul 13, 2015 README.md Prepare release `0.7.0` Apr 6, 2016 build.gradle Minimal implementation for #48: Add OkHttp client as option to comsat… May 15, 2016 gradle-app.setting docs Oct 31, 2013 settings.gradle Add Apache Shiro integration Mar 13, 2016 README.md COMSAT Scalable, Concurrent Web Apps Getting started Add the following Maven/Gradle dependencies: Feature Artifact Servlet integration for defining fiber-per-request servlets. co.paralleluniverse:comsat-servlet:0.7.0 A fiber-blocking Clojure Ring adapter based on Jetty 9.3. co.paralleluniverse:comsat-ring-jetty9:0.7.0 HTTP Kit-based fiber-blocking HTTP client. co.paralleluniverse:comsat-httpkit:0.7.0 Jersey server integration for defining REST services. co.paralleluniverse:comsat-jersey-server:0.7.0 Dropwizard integration including Jersey, ApacheHttpClient and JDBI. co.paralleluniverse:comsat-dropwizard:0.7.0 Spring Framework Web MVC fiber-blocking controller methods integration. co.paralleluniverse:comsat-spring-webmvc:0.7.0 Spring Boot auto-configuration support for Web MVC controllers. co.paralleluniverse:comsat-spring-boot:0.7.0 Spring Security configuration support for fibers. co.paralleluniverse:comsat-spring-security:0.7.0 JAX-RS client integration for HTTP calls with fibers. co.paralleluniverse:comsat-jax-rs-client:0.7.0 ApacheHttpClient integration for HTTP calls with fibers. co.paralleluniverse:comsat-httpclient:0.7.0 Retrofit integration with fibers. co.paralleluniverse:comsat-retrofit:0.7.0 JDBI integration with fibers. co.paralleluniverse:comsat-jdbi:0.7.0 JDBC integration with fibers. co.paralleluniverse:comsat-jdbc:0.7.0 jOOQ integration with fibers. co.paralleluniverse:comsat-jooq:0.7.0 MongoDB fiber-blocking integration for the Allanbank API. co.paralleluniverse:comsat-mongodb-allanbank:0.7.0 OkHttp HTTP+SPDY client integration. co.paralleluniverse:comsat-okhttp:0.7.0 The Web Actors API. co.paralleluniverse:comsat-actors-api:0.7.0 Deploy HTTP, SSE and WebSocket Web Actors as Undertow handlers. co.paralleluniverse:comsat-actors-undertow:0.7.0 Deploy HTTP, SSE and WebSocket Web Actors as Netty handlers. co.paralleluniverse:comsat-actors-netty:0.7.0 Deploy HTTP, SSE and WebSocket Web Actors in J2EE 7 Servlet and WebSocket (JSR-356) embedded and standalone containers. co.paralleluniverse:comsat-actors-servlet:0.7.0 Use Comsat in the Tomcat servlet container without the java agent. co.paralleluniverse:comsat-tomcat-loader:0.7.0[:jdk8] (for JDK 8 optionally add the jdk8 classifier) Use Comsat in the Jetty servlet container without the java agent. co.paralleluniverse:comsat-jetty-loader:0.7.0[:jdk8] (for JDK 8 optionally add the jdk8 classifier) Spring Framework Web integration allows using fiber-blocking controllers. co.paralleluniverse:comsat-spring-web:0.7.0 Apache Kafka producer integration module. co.paralleluniverse:comsat-kafka:0.7.0 Apache Shiro realms integration module. co.paralleluniverse:comsat-shiro:0.7.0 Or, build and install from sources (after installing Gradle locally) in your local maven repository with: gradle install  The full testsuite can be run with gradle build. Usage Documentation Javadoc A Gradle template project and a Maven archetype using various integration modules and featuring setup with both Dropwizard and standalone Tomcat are also available for jumpstart and study. Both have a without-comsat branch which is useful to clearly see the (minimal, if any) porting effort required (branches comparison works very well for this purporse). There's a Comsat-Ring Clojure Leiningen template as well which includes an auto-instrument branch that doesn't need any explicit suspendable-marking code (suspendable!, defsfn, sfn etc.) thanks to Pulsar's new auto-instrumentation feature. You can also have a look at additional examples. Finally there are several regularly updated third-party bootstrap projects: Comsat + Dropwizard + jOOQ, Comsat Web Actors Stock Quotes (ported from Akka), Spring MVC + Tomcat standalone servlet container. Getting help Questions and suggestions are welcome at this forum/mailing list. License COMSAT is free software published under the following license: Copyright (c) 2013-2016, Parallel Universe Software Co. All rights reserved.  This program and the accompanying materials are dual-licensed under either the terms of the Eclipse Public License v1.0 as published by the Eclipse Foundation    or (per the licensee's choosing)  under the terms of the GNU Lesser General Public License version 3.0 as published by the Free Software Foundation.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/puniverse/comsat"	"Integrates standard Java web-related APIs with Quasar fibers and actors."	"true"
"Networking"	"Finagle"	"https://github.com/twitter/finagle"	"Extensible RPC system used to construct high-concurrency servers. It implements uniform client and server APIs for several protocols, and is protocol agnostic, which simplifies the implementation of new protocols."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4865"	"534"	"920"	"GitHub - twitter/finagle: A fault tolerant, protocol-agnostic RPC system Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 534 Star 4,865 Fork 920 twitter/finagle Code Issues 17 Pull requests 10 Pulse Graphs A fault tolerant, protocol-agnostic RPC system http://twitter.github.io/finagle 4,608 commits 27 branches 60 releases 179 contributors Scala 84.5% Java 13.1% Python 0.8% Ruby 0.5% Thrift 0.4% Shell 0.3% Other 0.4% Scala Java Python Ruby Thrift Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 2.9.2 b3_compatible_tracing copy_channel_buffer_after_decode_line detached-delayed develop divergent-master-2014-12-11 finagle-power-pack-2000 finagle_1_0_x fix-travis fix_race_in_service_to_channel gh-pages gzip_ssl kestrel lahosken-pages master memcache-long native netty new_ostrich ostrich_3 ostrich4 retry_strategies serialization ssl_track_cipher stats_refactoring svc thrift_client_reply_refactor Nothing to show version-1.2.3 version-1.2.2 version-1.1.32 version-1.1.30 version-1.1.29 version-1.1.28 version-1.1.27 version-1.1.26 version-1.1.24 version-1.1.18 version-1.1.17 version-1.1.15 version-1.1.14 version-1.1.13 version-1.1.12 version-1.1.11 version-1.1.10 version-1.1.9 version-1.1.8 version-1.1.7 version-1.1.4 version-1.1.3 version-1.1.2 version-1.1.1 version-1.0.21 version-1.0.20 version-1.0.19 version-1.0.16 version-1.0.15 version-1.0.12 version-1.0.11 version-1.0.9 finagle-6.36.0 finagle-6.35.0 finagle-6.34.0 finagle-6.33.0 finagle-6.31.0 finagle-6.30.0 finagle-6.29.0 finagle-6.28.0 finagle-6.27.0 finagle-6.26.0 finagle-6.25.0 finagle-6.24.0 6.22.0 6.20.0 6.18.0 6.17.0 6.16.0 6.15.0 6.14.0 6.13.1 6.13.0 6.12.2 6.12.1 6.11.1 6.10.0 6.9.0 6.8.1 6.8.0 Nothing to show New pull request Latest commit 23157ca Jul 9, 2016 yinquanteo committed with jenkins Revert ""finagle/finagle-memcached: Decoder on Buf"" … Reverting because it causes ads editor download to fail  This reverts commit dfa87f2fb8785381c06bc58f70b027c81283f2b5.  RB_ID=850427 TBR=true Permalink Failed to load latest commit information. .github Twitter OSS: Add ISSUE_TEMPLATE Jul 7, 2016 bin Make (some of) CI Green Again May 16, 2016 doc csl: Release CSL libraries Jul 7, 2016 finagle-benchmark-thrift/src/main/thrift finagle-benchmark: Move the thrift out to work around the nested obje… Oct 12, 2015 finagle-benchmark finagle-core: Delegate Trace.isActivelyTracing decision to the underl… Jun 27, 2016 finagle-commons-stats source: fix more unused imports for scala 2.11.8 Mar 29, 2016 finagle-core finagle-{core, memcached}: Simplify construction of FailureAccrualFac… Jul 8, 2016 finagle-example finagle-redis: Remove deprecated methods on Client Jun 27, 2016 finagle-exception maven layout goes away Nov 30, 2015 finagle-exp [Finagle-exp; DarkTrafficFilter] Change DarkTrafficFilter to forward … Jun 6, 2016 finagle-http-compat finagle-http: Request and Response don't proxy netty Req/Rep Apr 11, 2016 finagle-http finagle-http: add IoEngineImpl to registry Jun 27, 2016 finagle-http2 finagle-http2: Turn off Http2TransporterTests too Jul 6, 2016 finagle-integration finagle-http: Removes duplicates for StreamTransport versions May 16, 2016 finagle-kestrel Revert ""finagle/finagle-memcached: Decoder on Buf"" Jul 11, 2016 finagle-mdns Fix some Finagle ""Unused import"" warnings May 30, 2016 finagle-memcached Revert ""finagle/finagle-memcached: Decoder on Buf"" Jul 11, 2016 finagle-mux Problem Jul 6, 2016 finagle-mysql finagle-mysql: use direct executor for Caffeine in PrepareCacheTest Jul 8, 2016 finagle-native source: fix more unused imports for scala 2.11.8 Mar 29, 2016 finagle-netty4-http finagle-http: add IoEngineImpl to registry Jun 27, 2016 finagle-netty4 finagle-core: Remove Call of setEnableSessionCreation on SSLEngines Jun 27, 2016 finagle-ostrich4 Unrevert c.t.f.Address and fix finagle-memcached Feb 29, 2016 finagle-redis finagle-redis: Replace CB with Buf in sorted set commands Jun 27, 2016 finagle-serversets finagle: Removed all of the guava caches from finagle Jun 9, 2016 finagle-spdy finagle: Override Codec.protocolLibraryName Jun 7, 2016 finagle-stats finagle-stats: tag flaky tests Jun 27, 2016 finagle-stream finagle: Override Codec.protocolLibraryName Jun 7, 2016 finagle-thrift Problem / Solution Jun 7, 2016 finagle-thriftmux Problem Jul 6, 2016 finagle-toggle finagle-toggle: Make JSON description optional Jul 6, 2016 finagle-zipkin-core finagle-core: Delegate Trace.isActivelyTracing decision to the underl… Jun 27, 2016 finagle-zipkin finagle-zipkin: Accept an explicit client name while constructing a … Jun 29, 2016 project csl: Release CSL libraries Jul 7, 2016 site finagle-site: add link to fintrospect Feb 4, 2016 .gitignore fix broken WatermarkPool link in doc, also add *.pyc to .gitignore Feb 23, 2015 .mailmap add a .mailmap Dec 16, 2011 .travis.yml finagle: Ensure TravisCI configuration is exhaustive Jul 6, 2016 ADOPTERS.md Add Dwango to adopters Jun 1, 2016 CHANGES finagle-{core, memcached}: Simplify construction of FailureAccrualFac… Jul 8, 2016 CONFIG.ini Fix some lint errors in CONFIG.ini and OWNERS - missing newlines - tr… Feb 29, 2016 CONTRIBUTING.md Twitter OSS: Add ISSUE_TEMPLATE Jul 7, 2016 CONTRIBUTORS [split] finagle-doc: beginnings of a finagle user's guide Feb 21, 2013 GROUPS [split] Use new git-review with simplified OWNERS/GROUPS May 18, 2012 LICENSE Project scaffolding Oct 18, 2010 OWNERS Goodbye May 11, 2015 README.md util, ostrich, scrooge, finagle, twitter-server: Update to use codeco… Jun 8, 2016 link-netty.sh [split] finagle-core: introduce Transports and Dispatchers Apr 12, 2012 pushsite.bash finagle: Documentation Generation Cleanup Dec 3, 2015 sbt scrooge-sbt-plugin, finagle: Handle compiling for multiple languages … Jun 29, 2016 README.md Finagle Status This project is used in production at Twitter (and many other organizations), and is being actively developed and maintained. Getting involved Website: https://twitter.github.io/finagle/ Source: https://github.com/twitter/finagle/ Mailing List: finaglers@googlegroups.com IRC: #finagle on Freenode Finagle is an extensible RPC system for the JVM, used to construct high-concurrency servers. Finagle implements uniform client and server APIs for several protocols, and is designed for high performance and concurrency. Most of Finagle’s code is protocol agnostic, simplifying the implementation of new protocols. For extensive documentation, please see the user guide and API documentation websites. Documentation improvements are always welcome, so please send patches our way. Adopters The following are a few of the companies that are using Finagle: Foursquare ING Bank Pinterest SoundCloud Tumblr Twitter For a more complete list, please see our adopter page. If your organization is using Finagle, consider adding a link there and sending us a pull request! Contributing We feel that a welcoming community is important and we ask that you follow Twitter's Open Source Code of Conduct in all interactions with the community. The master branch of this repository contains the latest stable release of Finagle, and weekly snapshots are published to the develop branch. In general pull requests should be submitted against develop. See CONTRIBUTING.md for more details about how to contribute. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/twitter/finagle"	"Extensible RPC system used to construct high-concurrency servers. It implements uniform client and server APIs for several protocols, and is protocol agnostic, which simplifies the implementation of new protocols."	"true"
"Networking"	"Grizzly"	"https://grizzly.java.net/"	"NIO framework. Used as a network layer in Glassfish."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Project Grizzly Project Grizzly Download Download Documentation Overview Dependencies Core Framework Memory Management I/O Strategies Transports and Connections FilterChain and Filters Core configuration Port Unification Monitoring Extras Best Practices Quick Start Samples HTTP Core HTTP Framework HTTP Server Framework HTTP Server Framework Extras Comet JAXWS WebSockets AJP SPDY Javadocs/XREF Grizzly 2.3 Javadoc Grizzly 2.3 XRef Grizzly 2.2 Javadoc Grizzly 2.2 XRef Grizzly 1.9 Javadoc Grizzly 1.9 XRef  Project Grizzly NIO Event Development Simplified Last Published: 2016-06-28 Writing scalable server applications in the Java™ programming language has always been difficult. Before the advent of the Java New I/O API (NIO), thread management issues made it impossible for a server to scale to thousands of users. The Grizzly NIO framework has been designed to help developers to take advantage of the Java™ NIO API. Grizzly’s goal is to help developers to build scalable and robust servers using NIO as well as offering extended framework components: Web Framework (HTTP/S), WebSocket, Comet, and more! Get Started Learn what it takes to get started using Grizzly in your projects. Documentation Read Grizzly's complete documentation online. Download Grizzly offers several modules that may be of interest for your projects. See our list of dependencies for details. Contribute Learn how you can contribute to the project. Need an HTTP Client? We've contributed a Grizzly-based provider to the Async HTTP Client project that, in addition to, HTTP, supports WebSockets and eventually, SPDY. Developer Blogs Grizzly Team Blog Main Home License Who's Using Grizzly Download Download Contribute Contribute StackOverflow Twitter Mailing Lists Project Info Source Control Issue Tracking Mailing Lists Project Team YourKit is kindly supporting open source projects with its full-featured Java Profiler. YourKit Java Profiler Proud fan of Back to top Copyright ©2016. All Rights Reserved."	"null"	"null"	"NIO framework. Used as a network layer in Glassfish."	"true"
"Networking"	"Netty"	"http://netty.io/"	"Framework for building high performance network applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7315"	"1053"	"3730"	"GitHub - netty/netty: Netty project - an event-driven asynchronous network application framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,053 Star 7,315 Fork 3,730 netty/netty Code Issues 288 Pull requests 30 Wiki Pulse Graphs Netty project - an event-driven asynchronous network application framework http://netty.io/ 7,535 commits 34 branches 152 releases 215 contributors Java 99.2% C 0.8% Shell 0.0% Groovy 0.0% Protocol Buffer 0.0% C++ 0.0% Java C Shell Groovy Protocol Buffer C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 4.1 Switch branches/tags Branches Tags 3.2 3.5 3.6 3.7 3.8 3.9 3.10 4.0 4.1 buffered_encoder channel_exception_epoll channel_initializer_test dns_multipe_ip event_executor_metrics executor_chooser header_imp_backport_v2 http_less_gc http_next http2_connection_handler master_deprecated master_with_aio_transport mqtt_encoder nano_time no_bit_wise openssl_finalizer pipeline_fix_4_0 pipeline_npe pkcs8 sasl_server sasl so_linger_cpu support_4_0_system_property websocket_upgrade_handlers write_char_sequence Nothing to show netty-5.0.0.Alpha2 netty-5.0.0.Alpha1 netty-4.1.3.Final netty-4.1.2.Final netty-4.1.1.Final netty-4.1.0.Final netty-4.1.0.CR7 netty-4.1.0.CR6 netty-4.1.0.CR5 netty-4.1.0.CR4 netty-4.1.0.CR3 netty-4.1.0.CR2 netty-4.1.0.CR1 netty-4.1.0.Beta8 netty-4.1.0.Beta7 netty-4.1.0.Beta6 netty-4.1.0.Beta5 netty-4.1.0.Beta4 netty-4.1.0.Beta3 netty-4.1.0.Beta2 netty-4.1.0.Beta1 netty-4.0.39.Final netty-4.0.38.Final netty-4.0.37.Final netty-4.0.36.Final netty-4.0.35.Final netty-4.0.34.Final netty-4.0.33.Final netty-4.0.32.Final netty-4.0.31.Final netty-4.0.30.Final netty-4.0.29.Final netty-4.0.28.Final netty-4.0.27.Final netty-4.0.26.Final netty-4.0.25.Final netty-4.0.24.Final netty-4.0.23.Final netty-4.0.22.Final netty-4.0.21.Final netty-4.0.20.Final netty-4.0.19.Final netty-4.0.18.Final netty-4.0.17.Final netty-4.0.16.Final netty-4.0.15.Final netty-4.0.14.Final netty-4.0.14.Beta1 netty-4.0.13.Final netty-4.0.12.Final netty-4.0.11.Final netty-4.0.10.Final netty-4.0.9.Final netty-4.0.8.Final netty-4.0.7.Final netty-4.0.6.Final netty-4.0.5.Final netty-4.0.4.Final netty-4.0.3.Final netty-4.0.2.Final netty-4.0.1.Final netty-4.0.0.Final netty-4.0.0.CR9 netty-4.0.0.CR8 netty-4.0.0.CR7 netty-4.0.0.CR6 netty-4.0.0.CR5 netty-4.0.0.CR4 netty-4.0.0.CR3 netty-4.0.0.CR2 netty-4.0.0.CR1 netty-4.0.0.Beta3 netty-4.0.0.Beta2 netty-4.0.0.Beta1 netty-4.0.0.Alpha8 netty-4.0.0.Alpha7 netty-4.0.0.Alpha6 netty-4.0.0.Alpha5 netty-4.0.0.Alpha4 netty-4.0.0.Alpha3 netty-4.0.0.Alpha2 netty-4.0.0.Alpha1 netty-3.10.6.Final netty-3.10.5.Final netty-3.10.4.Final netty-3.10.3.Final netty-3.10.2.Final netty-3.10.1.Final netty-3.10.0.Final netty-3.9.9.Final netty-3.9.8.Final netty-3.9.7.Final netty-3.9.6.Final netty-3.9.5.Final netty-3.9.4.Final netty-3.9.3.Final netty-3.9.2.Final netty-3.9.1.1.Final netty-3.9.1.Final netty-3.9.0.Final Nothing to show New pull request Latest commit 3285104 Jul 14, 2016 buchgr committed with normanmaurer Complete ChannelPromise for Http2WindowUpdateFrames in Http2FrameCode… … …c. Fixes #5530  Motivation:  The channel promise of a window update frame is not completed correctly, depending on the failure or success of the operation.  Modification:  Succeed / Fail the promise if the window update succeeds / fails.  Result:  Correctly succeed / fail the promise. Permalink Failed to load latest commit information. all [maven-release-plugin] prepare for next development iteration Jul 15, 2016 buffer [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-dns [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-haproxy [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-http [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-http2 Complete ChannelPromise for Http2WindowUpdateFrames in Http2FrameCode… Jul 15, 2016 codec-memcache [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-mqtt [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-redis [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-smtp [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-socks [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-stomp [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec-xml [maven-release-plugin] prepare for next development iteration Jul 15, 2016 codec [maven-release-plugin] prepare for next development iteration Jul 15, 2016 common [maven-release-plugin] prepare for next development iteration Jul 15, 2016 example [maven-release-plugin] prepare for next development iteration Jul 15, 2016 handler-proxy [maven-release-plugin] prepare for next development iteration Jul 15, 2016 handler [maven-release-plugin] prepare for next development iteration Jul 15, 2016 license added support for Protobuf codec nano runtime Jan 19, 2016 microbench [maven-release-plugin] prepare for next development iteration Jul 15, 2016 resolver-dns [maven-release-plugin] prepare for next development iteration Jul 15, 2016 resolver [maven-release-plugin] prepare for next development iteration Jul 15, 2016 tarball [maven-release-plugin] prepare for next development iteration Jul 15, 2016 testsuite-osgi [maven-release-plugin] prepare for next development iteration Jul 15, 2016 testsuite [maven-release-plugin] prepare for next development iteration Jul 15, 2016 transport-native-epoll [maven-release-plugin] prepare for next development iteration Jul 15, 2016 transport-rxtx [maven-release-plugin] prepare for next development iteration Jul 15, 2016 transport-sctp [maven-release-plugin] prepare for next development iteration Jul 15, 2016 transport-udt [maven-release-plugin] prepare for next development iteration Jul 15, 2016 transport [maven-release-plugin] prepare for next development iteration Jul 15, 2016 .fbprefs Updated Find Bugs configuration Mar 4, 2009 .gitignore Use shaded dependency on JCTools instead of copy and paste Jun 10, 2016 .travis.yml Travis CI branch whitelisting Mar 11, 2013 CONTRIBUTING.md Move the pull request guide to the developer guide Mar 12, 2014 LICENSE.txt Relicensed to Apache License v2 Aug 28, 2009 NOTICE.txt added support for Protobuf codec nano runtime Jan 19, 2016 README.md Updating Branches to look section to match the current branching stru… Mar 10, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jul 15, 2016 run-example.sh Add an example client for codec-redis Apr 23, 2016 README.md Netty Project Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. Links Web Site Downloads Documentation @netty_project How to build For the detailed information about building and developing Netty, please visit the developer guide. This page only gives very basic information. You require the following to build Netty: Latest stable Oracle JDK 7 Latest stable Apache Maven If you are on Linux, you need additional development packages installed on your system, because you'll build the native transport. Note that this is build-time requirement. JDK 5 (for 3.x) or 6 (for 4.0+) is enough to run your Netty-based application. Branches to look Development of all versions takes place in each branch whose name is identical to <majorVersion>.<minorVersion>. For example, the development of 3.9 and 4.0 resides in the branch '3.9' and the branch '4.0' respectively. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/netty/netty"	"Framework for building high performance network applications."	"true"
"Networking"	"Nifty"	"https://github.com/facebook/nifty"	"Implementation of Thrift clients and servers on Netty."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"549"	"134"	"202"	"GitHub - facebook/nifty: Thrift on Netty Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 134 Star 549 Fork 202 facebook/nifty Code Issues 10 Pull requests 9 Wiki Pulse Graphs Thrift on Netty 268 commits 8 branches 24 releases 12 contributors Java 99.6% Thrift 0.4% Java Thrift Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.7.x 0.13.x 0.14.x 0.15.x add_version loadtester-netty-fix-1 master nifty_legacy Nothing to show nifty-parent-0.20.0 nifty-parent-0.19.0 nifty-parent-0.18.0 nifty-parent-0.17.0 nifty-parent-0.16.0 nifty-parent-0.15.1 nifty-parent-0.15.0 nifty-parent-0.14.1 nifty-parent-0.14.0 nifty-parent-0.13.1 nifty-parent-0.13.0 nifty-parent-0.12.0 nifty-parent-0.11.0 nifty-parent-0.10.0 nifty-parent-0.9.0 nifty-parent-0.8.0 nifty-parent-0.7.1 nifty-parent-0.7.0 nifty-parent-0.6.0 nifty-parent-0.5.0 nifty-parent-0.4.0 nifty-parent-0.3.0 nifty-parent-0.0.2 nifty-parent-0.0.1 Nothing to show New pull request Latest commit 89a4dfe Jul 7, 2016 andrewcox [maven-release-plugin] prepare for next development iteration Permalink Failed to load latest commit information. license update license headers Nov 14, 2012 nifty-client [maven-release-plugin] prepare for next development iteration Jul 7, 2016 nifty-core [maven-release-plugin] prepare for next development iteration Jul 7, 2016 nifty-examples [maven-release-plugin] prepare for next development iteration Jul 7, 2016 nifty-load-tester [maven-release-plugin] prepare for next development iteration Jul 7, 2016 nifty-ssl [maven-release-plugin] prepare for next development iteration Jul 7, 2016 src Enable findbugs and PMD Mar 1, 2013 .arcconfig Nifty : Thrift server on Netty May 30, 2012 .gitignore fix running DeafSelectorProvider in test suite Nov 27, 2012 CHANGES.md commit 413e7c2 Nov 22, 2013 LICENSE.txt update license headers Nov 14, 2012 NEWS.md commit 413e7c2 Nov 22, 2013 README.md Updated NettyConfigBuilder to NettyServerConfigBuilder in README.md Nov 26, 2014 pom.xml [maven-release-plugin] prepare for next development iteration Jul 7, 2016 README.md Nifty Nifty is an implementation of Thrift clients and servers on Netty. It is also the implementation used by Swift. Examples To create a basic Thrift server using Nifty, use the Thrift 0.9.0 code generator to generate Java stub code, write a Handler for your service interface, and pass it to Nifty like this: public void startServer() {     // Create the handler     MyService.Iface serviceInterface = new MyServiceHandler();      // Create the processor     TProcessor processor = new MyService.Processor<>(serviceInterface);      // Build the server definition     ThriftServerDef serverDef = new ThriftServerDefBuilder().withProcessor(processor)                                                             .build();      // Create the server transport     final NettyServerTransport server = new NettyServerTransport(serverDef,                                                                  new NettyServerConfigBuilder(),                                                                  new DefaultChannelGroup(),                                                                  new HashedWheelTimer());      // Create netty boss and executor thread pools     ExecutorService bossExecutor = Executors.newCachedThreadPool();     ExecutorService workerExecutor = Executors.newCachedThreadPool();      // Start the server     server.start(bossExecutor, workerExecutor);      // Arrange to stop the server at shutdown     Runtime.getRuntime().addShutdownHook(new Thread() {         @Override         public void run() {             try {                 server.stop();             } catch (InterruptedException e) {                 Thread.currentThread().interrupt();             }         }     }); }  Or the same thing using guice: public void startGuiceServer() {     final NiftyBootstrap bootstrap = Guice.createInjector(         Stage.PRODUCTION,         new NiftyModule() {             @Override             protected void configureNifty() {                 // Create the handler                 MyService.Iface serviceInterface = new MyServiceHandler();                  // Create the processor                 TProcessor processor = new MyService.Processor<>(serviceInterface);                  // Build the server definition                 ThriftServerDef serverDef = new ThriftServerDefBuilder().withProcessor(processor)                                                                         .build();                  // Bind the definition                 bind().toInstance(serverDef);             }         }).getInstance(NiftyBootstrap.class);      // Start the server     bootstrap.start();      // Arrange to stop the server at shutdown     Runtime.getRuntime().addShutdownHook(new Thread() {         @Override         public void run() {             bootstrap.stop();         }     }); }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/facebook/nifty"	"Implementation of Thrift clients and servers on Netty."	"true"
"Networking"	"OkHttp"	"http://square.github.io/okhttp/"	"HTTP+SPDY client."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OkHttp OkHttp Download Latest An HTTP & HTTP/2 client for Android and Java applications Overview HTTP is the way modern applications network. It’s how we exchange data & media. Doing HTTP efficiently makes your stuff load faster and saves bandwidth. OkHttp is an HTTP client that’s efficient by default: HTTP/2 support allows all requests to the same host to share a socket. Connection pooling reduces request latency (if HTTP/2 isn’t available). Transparent GZIP shrinks download sizes. Response caching avoids the network completely for repeat requests. OkHttp perseveres when the network is troublesome: it will silently recover from common connection problems. If your service has multiple IP addresses OkHttp will attempt alternate addresses if the first connect fails. This is necessary for IPv4+IPv6 and for services hosted in redundant data centers. OkHttp initiates new connections with modern TLS features (SNI, ALPN), and falls back to TLS 1.0 if the handshake fails. Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability. It supports both synchronous blocking calls and async calls with callbacks. OkHttp supports Android 2.3 and above. For Java, the minimum requirement is 1.7. Examples Get a URL This program downloads a URL and print its contents as a string. Full source.  OkHttpClient client = new OkHttpClient();  String run(String url) throws IOException {   Request request = new Request.Builder()       .url(url)       .build();    Response response = client.newCall(request).execute();   return response.body().string(); }  Post to a Server This program posts data to a service. Full source.  public static final MediaType JSON     = MediaType.parse(""application/json; charset=utf-8"");  OkHttpClient client = new OkHttpClient();  String post(String url, String json) throws IOException {   RequestBody body = RequestBody.create(JSON, json);   Request request = new Request.Builder()       .url(url)       .post(body)       .build();   Response response = client.newCall(request).execute();   return response.body().string(); }  Download ↓ Latest JAR You'll also need Okio, which OkHttp uses for fast I/O and resizable buffers. Download the latest JAR. The source code to OkHttp, its samples, and this website is available on GitHub. Maven <dependency>   <groupId>com.squareup.okhttp3</groupId>   <artifactId>okhttp</artifactId>   <version>(insert latest version)</version> </dependency> Gradle compile 'com.squareup.okhttp3:okhttp:(insert latest version)' Contributing If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running mvn clean verify. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA). License Copyright 2016 Square, Inc.  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at     http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Overview Examples Download Contributing License Wiki Javadoc StackOverflow"	"null"	"null"	"HTTP+SPDY client."	"true"
"Networking"	"Undertow"	"http://undertow.io/"	"Web server providing both blocking and non-blocking API’s based on NIO. Used as a network layer in WildFly."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Undertow · JBoss Community Home Blog Download Documentation Get Involved Undertow Undertow is a flexible performant web server written in java, providing both blocking and non-blocking API’s based on NIO. Undertow has a composition based architecture that allows you to build a web server by combining small single purpose handlers. The gives you the flexibility to choose between a full Java EE servlet 3.1 container, or a low level non-blocking handler, to anything in between. Undertow is designed to be fully embeddable, with easy to use fluent builder APIs. Undertow’s lifecycle is completely controlled by the embedding application. Undertow is sponsored by JBoss and is the default web server in the Wildfly Application Server. Why Undertow Lightweight Undertow is extremely lightweight, with the Undertow core jar coming in at under 1Mb. It is lightweight at runtime too, with a simple embedded server using less than 4Mb of heap space. HTTP Upgrade Support Support for HTTP upgrade, to allow multiple protocols to be multiplexed over the HTTP port. Web Socket Support Undertow provides full support for Web Sockets, including JSR-356 support. Servlet 3.1 Undertow provides support for Servlet 3.1, including support for embedded servlet. It is also possible to mix both Servlets and native undertow non-blocking handlers in the same deployment. Embeddable Undertow can be embedded in an application or run standalone with just a few lines of code. Flexible An Undertow server is configured by chaining handlers together. It is possible to add as much or as little functionality as you need, so you don’t pay for what you are not using. Show me the code Ok then. Here is a simple Hello World server using Async IO: public class HelloWorldServer {      public static void main(final String[] args) {         Undertow server = Undertow.builder()                 .addHttpListener(8080, ""localhost"")                 .setHandler(new HttpHandler() {                     @Override                     public void handleRequest(final HttpServerExchange exchange) throws Exception {                         exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, ""text/plain"");                         exchange.getResponseSender().send(""Hello World"");                     }                 }).build();         server.start();     } }"	"null"	"null"	"Web server providing both blocking and non-blocking API’s based on NIO. Used as a network layer in WildFly."	"true"
"Networking"	"urnlib"	"https://github.com/slub/urnlib"	"Java library for representing, parsing and encoding URNs as in RFC 2141."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"2"	"1"	"GitHub - slub/urnlib: Java library for representing, parsing and encoding URNs as in RFC2141 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 2 Fork 1 slub/urnlib Code Issues 0 Pull requests 0 Pulse Graphs Java library for representing, parsing and encoding URNs as in RFC2141 47 commits 1 branch 1 release Fetching contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src .gitattributes .gitignore .travis.yml LICENSE README.md pom.xml README.md urnlib Java library for representing, parsing and encoding URNs as in RFC 2141. This library implements the class de.slub.urn.URN, representing an Uniform Resource Name (URN) and the class de.slub.urn.URNSyntaxException. Further it defines and interface de.slub.urn.URNResolver for URN resolving implementations. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slub/urnlib"	"Java library for representing, parsing and encoding URNs as in RFC 2141."	"true"
"ORM"	"Ebean"	"http://ebean-orm.github.io/"	"Provides simple and fast data access."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"344"	"48"	"128"	"GitHub - ebean-orm/avaje-ebeanorm: EbeanORM API and implementation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 48 Star 344 Fork 128 ebean-orm/avaje-ebeanorm Code Issues 21 Pull requests 0 Wiki Pulse Graphs EbeanORM API and implementation https://ebean-orm.github.io/ 1,770 commits 5 branches 109 releases 34 contributors Java 99.7% Other 0.3% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dbmig1 develop-v3 develop-v4 gh-pages master Nothing to show avaje-ebeanorm-server-3.1.2 avaje-ebeanorm-server-3.1.1 avaje-ebeanorm-7.18.1 avaje-ebeanorm-7.17.1 avaje-ebeanorm-7.16.3 avaje-ebeanorm-7.16.2 avaje-ebeanorm-7.16.1 avaje-ebeanorm-7.15.1 avaje-ebeanorm-7.14.1 avaje-ebeanorm-7.13.1 avaje-ebeanorm-7.12.2 avaje-ebeanorm-7.12.1 avaje-ebeanorm-7.11.4 avaje-ebeanorm-7.11.3 avaje-ebeanorm-7.11.2 avaje-ebeanorm-7.11.1 avaje-ebeanorm-7.10.1 avaje-ebeanorm-7.9.1 avaje-ebeanorm-7.8.1 avaje-ebeanorm-7.7.1 avaje-ebeanorm-7.6.1 avaje-ebeanorm-7.5.1 avaje-ebeanorm-7.4.1 avaje-ebeanorm-7.3.1 avaje-ebeanorm-7.2.3 avaje-ebeanorm-7.2.2 avaje-ebeanorm-7.2.1 avaje-ebeanorm-7.1.1 avaje-ebeanorm-6.18.1 avaje-ebeanorm-6.17.3 avaje-ebeanorm-6.17.2 avaje-ebeanorm-6.17.1 avaje-ebeanorm-6.16.5 avaje-ebeanorm-6.16.4 avaje-ebeanorm-6.16.3 avaje-ebeanorm-6.16.2 avaje-ebeanorm-6.16.1 avaje-ebeanorm-6.15.2 avaje-ebeanorm-6.15.1 avaje-ebeanorm-6.14.1 avaje-ebeanorm-6.13.5 avaje-ebeanorm-6.13.4 avaje-ebeanorm-6.13.3 avaje-ebeanorm-6.13.2 avaje-ebeanorm-6.13.1 avaje-ebeanorm-6.12.3 avaje-ebeanorm-6.12.2 avaje-ebeanorm-6.12.1 avaje-ebeanorm-6.11.1 avaje-ebeanorm-6.10.4 avaje-ebeanorm-6.10.3 avaje-ebeanorm-6.10.2 avaje-ebeanorm-6.10.1 avaje-ebeanorm-6.9.1 avaje-ebeanorm-6.8.1 avaje-ebeanorm-6.7.1 avaje-ebeanorm-6.6.1 avaje-ebeanorm-6.5.1 avaje-ebeanorm-6.4.1 avaje-ebeanorm-6.3.1 avaje-ebeanorm-6.2.2 avaje-ebeanorm-6.2.1 avaje-ebeanorm-6.1.1 avaje-ebeanorm-5.1.1 avaje-ebeanorm-4.9.1 avaje-ebeanorm-4.8.1 avaje-ebeanorm-4.7.3 avaje-ebeanorm-4.7.2 avaje-ebeanorm-4.7.1 avaje-ebeanorm-4.6.3 avaje-ebeanorm-4.6.2 avaje-ebeanorm-4.6.1 avaje-ebeanorm-4.5.6 avaje-ebeanorm-4.5.5 avaje-ebeanorm-4.5.4 avaje-ebeanorm-4.5.3 avaje-ebeanorm-4.5.2 avaje-ebeanorm-4.5.1 avaje-ebeanorm-4.4.1 avaje-ebeanorm-4.3.1 avaje-ebeanorm-4.3.0 avaje-ebeanorm-4.2.0 avaje-ebeanorm-4.1.9 avaje-ebeanorm-4.1.8 avaje-ebeanorm-4.1.7 avaje-ebeanorm-4.1.6 avaje-ebeanorm-4.1.5 avaje-ebeanorm-4.1.4 avaje-ebeanorm-4.1.3 avaje-ebeanorm-4.1.2 avaje-ebeanorm-4.1.1 avaje-ebeanorm-4.1.0 avaje-ebeanorm-4.0.4 avaje-ebeanorm-4.0.3 avaje-ebeanorm-4.0.2 avaje-ebeanorm-4.0.1-RC1 avaje-ebeanorm-3.4.2 avaje-ebeanorm-3.4.1 avaje-ebeanorm-3.3.4 avaje-ebeanorm-3.3.3 Nothing to show New pull request Latest commit 5a9193f Jul 15, 2016 rbygrave #779 - Refactor - Tidy internals of DefaultOrmQuery, remove unused St… … …ring query property. Permalink Failed to load latest commit information. .github Update ISSUE_TEMPLATE.md May 4, 2016 .travis Testing CI - .travis - try setup_database Jan 28, 2016 src #779 - Refactor - Tidy internals of DefaultOrmQuery, remove unused St… Jul 15, 2016 .gitignore Refactor / fix .gitignore of test resources Feb 11, 2016 .travis.yml Travis - enable caching .m2 Jun 17, 2016 LICENSE.TXT Change License to Apache2 and reformat code Sep 15, 2012 README.md Update README.md Apr 28, 2016 pom.xml Merge branch 'wip/eql1' into wip/eql2 Jul 12, 2016 README.md Need help? Post questions or issues to the Ebean google group - https://groups.google.com/forum/#!forum/ebean Documentation Goto https://ebean-orm.github.io/ Maven cental links: Maven central - avaje-ebeanorm Maven central - all related projects Current versions - avaje-ebeanorm - avaje-ebeanorm-agent - avaje-ebeanorm-mavenenhancer Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ebean-orm/avaje-ebeanorm"	"Provides simple and fast data access."	"true"
"ORM"	"EclipseLink"	"https://www.eclipse.org/eclipselink/"	"Supports a number of persistence standards: JPA, JAXB, JCA and SDO."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"EclipseLink ECLIPSELINK About Download Documentation More About this project Ask questions Visit the wiki Check-out the source code Learn how to contribute EclipseLink Comprehensive open-source Java persistence solution addressing relational, XML, and database web services. Try it today JPA Provides standards based Object-Relational persistence solution with additional support for many advanced features. EclipseLink JPA provides advanced support for leading relational databases and Java containers. View details » MOXy Enables Java developers to efficiently bind Java classes to XML Schemas. MOXy implements JAXB allowing developers to provide their mapping information through annotations as well as providing support for storing the mappings in XML format. The many advanced mappings enable developers to handle the complex XML structures without having to mirror the schema in their Java class model. View details » DBWS Declarative Web Service solution for accessing relational databases. The DBWS Builder generates the necessary configuration files based on the provided database artifacts so that EclipseLink's relational and persistence services can be combined to handle the requests. View details » Persistence SQL or NOT The EclipseLink JPA provides developers with a standards based Object-Relational persistence solution with additional support for many advanced features. EclipseLink JPA provides advanced support for leading relational databases and Java containers. SQL Basic Configuration Examples Basic examples of configuration necessary when using EclipseLink JPA. Try it. Using EclipseLink JPA in a JSF application. This tutorial illustrates the use of EclipseLink JPA in a JSF application. The tutorial includes configuration and usage information in leading Java EE containers. Try it. Using EclipseLink JPA in an RCP Application. This example provides a simple RCP application that uses EclipseLink JPA. It illustrates the usage of EclipseLink JPA in an Equinox environment. Try it. More JPA Examples See here No-SQL Accessing MongoDB through JPA This example shows how to map and persist an Ordering system object model to an Oracle NoSQL Database (ONDB) and a MongoDB NoSQL database. Try it. Polyglot Persistence (Relational and NoSQL) This example is a variation of the NoSQL Example with some of the entities mapped to MongoDB and some to relational database. Try it. MOXy XML or JSON The EclipseLink MOXy component enables Java developers to efficiently bind Java classes to XML or JSON. MOXy implements JAXB as well as SDO standards allowing developers to provide their mapping information through annotations as well as providing support for storing the mappings in XML format. The many advanced mappings enable developers to handle the complex XML structures without having to mirror the schema in their Java class model. JAXB Manipulating XML using EclipseLink MOXy (JAXB) This examnple walks through the configuration and usage of MOXY's JAXB implementation. Try it. Meet in the Middle Mapping with MOXy This tutorial illustrates for a POJO object model can be mapped to an XML schema using the EclipseLink Workbench and XML mappings with the JAXB runtime API. Try it. JAXB Specification JCP page for Java API for XML Binding specification. Read it. More MOXy Examples See here SDO Generating static Data Objects from XSD Generating a static SDO DataObject model from an XML schema using EclipseLink's SDO compiler. Try it. Using POJOs and JPA Entities with SDO EclipseLink SDO provides Data Access Service (DAS) combining existing POJO object models or JPA entities wrapped within static or dynamic data objects. Try it. EclipseLink SDO Examples This example provides a simple RCP application that uses EclipseLink JPA. It illustrates the usage of EclipseLink JPA in an Equinox environment. Try it. More SDO More Examples OSOA SDO Home SDO Java Specification Home SDO FAQ SDO User guide Database Web Services REST or SOAP The EclipseLink DBWS component enables Java developers a declarative Web Service solution for accessing relational databases. The DBWS Builder generates the necessary configuration files based on the provided database artifacts so that EclipseLink's relational and persistence services can be combined to handle the requests. JPA-RS (REST) JPA-RS Basics The student example is intended to provide a simple example of using JPA-RS with a single entity persistence unit in a web application. Try it. New JPA-RS features Dmitry Kornilov's blog describing slightly more advanced JPA-RS features. Try it. JPA-RS Design Doc Detailed design documentation for EclipseLink 2.6 JPA-RS features. Read it. More JPA-RS Exmples See here. DBWS (SOAP) DBWS Overview Brief walk through of the DBWS configuration files and usage with the DBWSBuilder utility. Try it. Generating a Web Service for accessing a Table Basic example illustrating how a table can easily be exposed as a web service using default CRUD operations. Try it. More DBWS Examples See here Downloads Latest Release: EclipseLink 2.6.3 (May 5th, 2016) New and noteworthy, Getting Started EclipseLink 2.6.3 Installer Zip (38 MB) eclipselink-2.6.3.v20160428-59c81c5.zip EclipseLink NoSQL 2.6.3 Installer Zip (455 K) eclipselink-plugins-nosql-2.6.3.v20160428-59c81c5.zip EclipseLink 2.6.3 OSGi Bundles Zip (25 MB) eclipselink-plugins-2.6.3.v20160428-59c81c5.zip EclipseLink 2.6.3 Source Zip (8.2 MB) eclipselink-src-2.6.3.v20160428-59c81c5.zip EclipseLink in Maven http://wiki.eclipse.org/EclipseLink/Maven EclipseLink in P2 Repository http://download.eclipse.org/rt/eclipselink/updates/ The minimum requirement to run EclipseLink 2.6.x is Java 7. Please ensure that you have Java 7 installed and it's working. The EclipseLink Project's produced contents are dual-licensed under the terms of the Eclipse Public License v1.0 and Eclipse Distribution License v1.0. For the license of dependent libraries included within a distribution please refer to the about.html file within each distribution. Other Downloads Previous releases, milestones, nightlies, ... Previous Releases eclipselink/downloads/previous_releases.php Milestone Builds eclipselink/downloads/milestones.php Nighty builds eclipselink/downloads/nightly.php The minimum requirement to run EclipseLink 2.7.0 is Java 8. Please ensure that you have Java 8 installed and it's working. Documentation General Release Notes ( 2.6 / 2.5 / 2.4 ) Installation, Configuration ( 2.6 / 2.5 / 2.4 ) JavaDocs ( 2.6 / 2.5 / 2.4 ) EclipseLink Wiki FAQ XML Schemas Solution Guides Understanding EclipseLink Concepts ( 2.6 / 2.5 / 2.4 ) Solutions Guide ( 2.6 / 2.5 / 2.4 ) JPA Extensions Reference ( 2.6 / 2.5 / 2.4 ) Developing JAXB Applications Using EclipseLink MOXy ( 2.6 / 2.5 / 2.4 ) EclipseLink NoSQL ( 2.6 / 2.5 / 2.4 ) Developing Persistence Architectures Using EclipseLink Database Web Services ( 2.6 / 2.5 / 2.4 ) Get Help We provide support to our community using the Eclipse Forums. It's a place to ask questions, reach out to committers and/or share your experiences with other members of the community. Visit the EclipseLink forum. © 2015 The Eclipse Foundation. All Rights Reserved. · Privacy · Terms"	"null"	"null"	"Supports a number of persistence standards: JPA, JAXB, JCA and SDO."	"true"
"ORM"	"Hibernate"	"http://hibernate.org/orm/"	"Robust and widely used with an active community."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1908"	"257"	"1537"	"GitHub - hibernate/hibernate-orm: Hibernate's core Object/Relational Mapping functionality Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 257 Star 1,908 Fork 1,537 hibernate/hibernate-orm Code Pull requests 81 Wiki Pulse Graphs Hibernate's core Object/Relational Mapping functionality http://hibernate.org 7,104 commits 16 branches 115 releases 204 contributors Java 99.6% Other 0.4% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.2 3.3 3.5 3.6 4.0 4.1 4.2 4.3 5.0 5.1 master metamodel-old metamodel revert-791-HHH-9300 revert-862-HHH-9556 stable Nothing to show 5.2.1 5.2.0 5.1.0 5.0.9 5.0.8 5.0.7 5.0.6 5.0.5 5.0.4 5.0.3 5.0.2.Final 5.0.1.Final 5.0.0.Final 5.0.0.CR4 5.0.0.CR3 5.0.0.CR2 5.0.0.CR1 5.0.0.Beta2 5.0.0.Beta1 4.3.11.Final 4.3.10.Final 4.3.9.Final 4.3.8.Final 4.3.7.Final 4.3.6.Final 4.3.5.Final 4.3.4.Final 4.3.3.Final 4.3.2.Final 4.3.1.Final 4.3.0.Final 4.3.0.CR2 4.3.0.CR1 4.3.0.Beta5 4.3.0.Beta4 4.3.0.Beta3 4.3.0.Beta2 4.3.0.Beta1 4.2.23.Final 4.2.22.Final 4.2.21.Final 4.2.20.Final 4.2.19.Final 4.2.18.Final 4.2.17.Final 4.2.16.Final 4.2.15.Final 4.2.14.Final 4.2.13.Final 4.2.12.Final 4.2.11.Final 4.2.10.Final 4.2.9.Final 4.2.8.Final 4.2.7.SP1 4.2.7.Final 4.2.6.Final 4.2.5.Final 4.2.4.Final 4.2.3.Final 4.2.2.Final 4.2.1.Final 4.2.0.SP1 4.2.0.Final 4.2.0.CR2 4.2.0.CR1 4.1.12.Final 4.1.11.Final 4.1.10.Final 4.1.9.Final 4.1.8.Final 4.1.7.Final 4.1.6.Final 4.1.5.SP1 4.1.5.Final 4.1.4.Final 4.1.3.Final 4.1.2 4.1.2.Final 4.1.1 4.1.0.Final 4.0.1 4.0.0.Final 4.0.0.CR7 4.0.0.CR6 4.0.0.CR5 4.0.0.CR4 4.0.0.CR3 4.0.0.CR2 4.0.0.CR1 4.0.0.Beta5 4.0.0.Beta4 4.0.0.Beta3 4.0.0.Beta2 4.0.0.Beta1 4.0.0.Alpha3 4.0.0.Alpha2 4.0.0.Alpha1 3.6.10.Final 3.6.9.Final Nothing to show New pull request Latest commit c893577 Jul 13, 2016 gbadner HHH-5393 : MappingException when @MapKeyColumn refers to a column map… … …ped in embeddable map value Permalink Failed to load latest commit information. buildSrc HHH-10812 Adding module ZIP and integration test for using Hibernate … Jun 29, 2016 databases Move access credentials for Oracle testing database to environment va… Jan 17, 2016 documentation HHH-10907 - Fix connection leak problem in hibernate-core tests Jul 14, 2016 etc Cherry pick spelling corrections from #1238 Jan 25, 2016 gradle/wrapper HHH-10864 - Allow ORM to be built with Java 9 Jun 17, 2016 hibernate-c3p0 HHH-10907 - Fix connection leak problem in hibernate-core tests Jul 14, 2016 hibernate-core HHH-5393 : MappingException when @MapKeyColumn refers to a column map… Jul 14, 2016 hibernate-ehcache HHH-10907 - Fix connection leak problem in hibernate-core tests Jul 14, 2016 hibernate-entitymanager HHH-10761 : Moved test case to hibernate-entitymanager Jun 21, 2016 hibernate-envers HHH-9199 - Fixed auditing of embeddable collections using ValidityAud… Jul 12, 2016 hibernate-hikaricp HHH-10907 - Fix connection leak problem in hibernate-core tests Jul 14, 2016 hibernate-infinispan HHH-10807 - Moved isActive from Transaction to TransactionImplementor. Jun 29, 2016 hibernate-java8 HHH-10883 - Fix Restore the Maven artifact hibernate-java8 as an empt… Jun 28, 2016 hibernate-jcache HHH-10907 - Fix connection leak problem in hibernate-core tests Jul 14, 2016 hibernate-orm-modules disable hibernate-orm-modules tests under Java 9 Jul 7, 2016 hibernate-osgi HHH-10864 - Allow ORM to be built with Java 9 Jun 17, 2016 hibernate-proxool HHH-10664 - Prep 6.0 feature branch - merge hibernate-entitymanager i… May 6, 2016 hibernate-spatial HHH-10864 - Allow ORM to be built with Java 9 Jun 18, 2016 hibernate-testing HHH-10907 - Fix connection leak problem in hibernate-core tests Jul 14, 2016 release BinTray generic repo publishing - take 2 Jun 27, 2016 shared HHH-10108 - Substituted checkstyle NewlineAtEndOfFile rule with rules… Sep 22, 2015 tooling HHH-10801 - Bytecode enhancement of @MappedSuperclass Jun 30, 2016 .gitignore HHH-10689 - Fix tests failing when switching to Oracle May 17, 2016 CONTRIBUTING.md HHH-10813 Replace AssertionFailure with HibernateException when colle… Jun 21, 2016 README.md Remove reference to EntityManager in README.md Jun 16, 2016 build.gradle 5.2.1 Jul 1, 2016 changelog.txt 5.2.1 Jun 30, 2016 databases.gradle HHH-10516 - Incorrect coalesce function for InformixDialect Jun 16, 2016 gradlew HHH-10438 - Upgrade the Gradle wrapper to use Gradle version 2.10 Jan 24, 2016 gradlew.bat HHH-8141 - Upgrade to Gradle 1.5 Apr 4, 2013 hibernate_logo.gif SVN layout migration for core/trunk Jun 29, 2007 lgpl.txt SVN layout migration for core/trunk Jun 29, 2007 libraries.gradle HHH-10812 Adding module ZIP and integration test for using Hibernate … Jun 29, 2016 migration-guide.adoc 10664 - Prepare Envers for 5.2 - Deprecated AuditReader getCurrentRev… May 31, 2016 settings.gradle HHH-10812 Adding module ZIP and integration test for using Hibernate … Jun 29, 2016 utilities.gradle HHH-9803 - Checkstyle fix ups - headers May 18, 2015 README.md Hibernate ORM is a component/library providing Object/Relational Mapping (ORM) support to applications and other components/libraries. It is also provides an implementation of the JPA specification, which is the standardized Java specification for ORM. See Hibernate.org for additional information. Quickstart  git clone git://github.com/hibernate/hibernate-orm.git  cd hibernate-orm  ./gradlew clean build  The build requires a Java 8 JDK as JAVA_HOME, but will ensure Java 6 compatibility. Resources Hibernate uses Gradle as its build tool. See the Gradle Primer section below if you are new to Gradle. Contributors should read the Contributing Guide See the guides for setting up IntelliJ or Eclipse as your development environment. Building Hibernate ORM is somewhat outdated, but still has CI Builds Hibernate makes use of Jenkins for its CI needs. The project is built continuous on each push to the upstream repository. Overall there are a few different jobs, all of which can be seen at http://ci.hibernate.org/view/ORM/ Gradle primer This section describes some of the basics developers and contributors new to Gradle might need to know to get productive quickly. The Gradle documentation is very well done; 2 in particular that are indispensable: Gradle User Guide is a typical user guide in that it follows a topical approach to describing all of the capabilities of Gradle. Gradle DSL Guide is quite unique and excellent in quickly getting up to speed on certain aspects of Gradle. Using the Gradle Wrapper For contributors who do not otherwise use Gradle and do not want to install it, Gradle offers a very cool features called the wrapper. It lets you run Gradle builds without a previously installed Gradle distro in a zero-conf manner. Hibernate configures the Gradle wrapper for you. If you would rather use the wrapper and not install Gradle (or to make sure you use the version of Gradle intended for older builds) you would just use the command gradlew (or gradlew.bat) rather than gradle (or gradle.bat) in the following discussions. Note that gradlew is only available in the project's root dir, so depending on your pwd you may need to adjust the path to gradlew as well. Executing Tasks Gradle uses the concept of build tasks (equivalent to Ant targets or Maven phases/goals). You can get a list of available tasks via gradle tasks  To execute a task across all modules, simply perform that task from the root directory. Gradle will visit each sub-project and execute that task if the sub-project defines it. To execute a task in a specific module you can either: cd into that module directory and execute the task name the ""task path"". For example, in order to run the tests for the hibernate-core module from the root directory you could say gradle hibernate-core:test Common Java related tasks build - Assembles (jars) and tests this project buildDependents - Assembles and tests this project and all projects that depend on it. So think of running this in hibernate-core, Gradle would assemble and test hibernate-core as well as hibernate-envers (because envers depends on core) classes - Compiles the main classes testClasses - Compiles the test classes compile (Hibernate addition) - Performs all compilation tasks including staging resources from both main and test jar - Generates a jar archive with all the compiled classes test - Runs the tests publish - Think Maven deploy publishToMavenLocal - Installs the project jar to your local maven cache (aka ~/.m2/repository). Note that Gradle never uses this, but it can be useful for testing your build with other local Maven-based builds. eclipse - Generates an Eclipse project idea - Generates an IntelliJ/IDEA project (although the preferred approach is to use IntelliJ's Gradle import). clean - Cleans the build directory Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hibernate/hibernate-orm"	"Robust and widely used with an active community."	"true"
"ORM"	"MyBatis"	"http://www.mybatis.org/mybatis-3/"	"Couples objects with stored procedures or SQL statements."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3012"	"608"	"2306"	"GitHub - mybatis/mybatis-3: MyBatis SQL mapper framework for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 608 Star 3,012 Fork 2,306 mybatis/mybatis-3 Code Issues 85 Pull requests 12 Wiki Pulse Graphs MyBatis SQL mapper framework for Java http://mybatis.github.io/mybatis-3/ 1,948 commits 5 branches 21 releases 67 contributors Java 99.6% Other 0.4% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.2.x 3.3.x gh-pages lkb2k-assoc-with-param-annotation master Nothing to show mybatis-3.4.1 mybatis-3.4.0 mybatis-3.3.1 mybatis-3.3.0 mybatis-3.2.8 mybatis-3.2.7 mybatis-3.2.6 mybatis-3.2.5 mybatis-3.2.4 mybatis-3.2.3 mybatis-3.2.2 mybatis-3.2.1 mybatis-3.2.0 mybatis-3.1.1 mybatis-3.1.0 mybatis-3.0.6 mybatis-3.0.5 mybatis-3.0.4 mybatis-3.0.3 mybatis-3.0.2 mybatis-3.0.1 Nothing to show New pull request Latest commit 2d0b2be Jul 15, 2016 harawata Invoking GC to prevent WeakCacheTest#shouldDemonstrateObjectsBeingCol… … …lectedAsNeeded from failing when there is a lot of free memory available. Permalink Failed to load latest commit information. src Invoking GC to prevent WeakCacheTest#shouldDemonstrateObjectsBeingCol… Jul 15, 2016 travis SonarQube was not updated even though the build succeeded. Reverting … Jul 14, 2016 .gitattributes Set line endings to auto Apr 15, 2013 .gitignore More complex test for #215 May 26, 2016 .travis.yml A few minor corrections. Jul 11, 2016 CONTRIBUTING.md Update CONTRIBUTING.md Apr 26, 2015 ICLA Correct spelling mistake in ICLA Feb 2, 2015 ISSUE_TEMPLATE.md Updated issue template. [ci skip] Feb 18, 2016 LICENSE Introduce end-of-line normalization Apr 17, 2013 NOTICE Introduce end-of-line normalization Apr 17, 2013 README.md [readme] Add link to snapshots Apr 28, 2016 license.txt Update parent to 27-snapshot and let it update licenses (#632) Apr 12, 2016 pom.xml Upgrade to ognl 3.1.10 (#736) Jul 15, 2016 README.md MyBatis SQL Mapper Framework for Java The MyBatis SQL mapper framework makes it easier to use a relational database with object-oriented applications. MyBatis couples objects with stored procedures or SQL statements using a XML descriptor or annotations. Simplicity is the biggest advantage of the MyBatis data mapper over object relational mapping tools. Essentials See the docs Download Latest Download Snapshot Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mybatis/mybatis-3"	"Couples objects with stored procedures or SQL statements."	"true"
"PDF"	"Apache FOP"	"http://xmlgraphics.apache.org/fop/"	"Creates PDF from XSL-FO."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache(tm) FOP - a print formatter driven by XSL formatting objects (XSL-FO) and an output independent formatter.   Apache™ FOP¶ FOP Home Download Quick Start Guide Compliance Getting Help FAQs Mailing Lists License Resources¶ XSL-FO Examples Bugs Wiki Other Project¶ News Who We Are Status Known Issues Changes Versions¶ FOP Trunk (dev)¶ Overview Upgrading Using Apache™ FOP¶ Build Configure Run Embed Servlets Ant Task Features¶ Accessibility Complex Scripts Events Extensions Fonts Graphics Hyphenation Intermediate Format Metadata Output Targets PDF/A PDF/X PDF Encryption PDF Images Whitespace Management FOP 2.1¶ FOP 2.1 Overview Release Notes Changes (2.1) Known Issues Upgrading Using Apache FOP 2.1¶ Build Configure Run Embed Servlets Ant Task Features¶ Accessibility Complex Scripts Events Extensions Fonts Graphics Hyphenation Intermediate Format Metadata Output Targets PDF/A PDF/X PDF Encryption PDF Images Whitespace Management FOP 2.0¶ FOP 2.0 Overview Release Notes Changes (2.0) Known Issues Upgrading Using Apache FOP 2.0¶ Build Configure Run Embed Servlets Ant Task Features¶ Accessibility Complex Scripts Events Extensions Fonts Graphics Hyphenation Intermediate Format Metadata Output Targets PDF/A PDF/X PDF Encryption PDF Images Whitespace Management FOP 1.1¶ FOP 1.1 Overview Release Notes Changes (1.1) Known Issues Upgrading Using Apache FOP 1.1¶ Build Configure Run Embed Servlets Ant Task Features¶ Accessibility Complex Scripts Events Extensions Fonts Graphics Hyphenation Intermediate Format Metadata Output Targets PDF/A PDF/X PDF Encryption FOP 1.0¶ FOP 1.0 Overview Release Notes Changes (1.0) Known Issues Upgrading Using Apache FOP 1.0¶ Build Configure Run Embed Servlets Ant Task Features¶ Output Targets Intermediate Format PDF Encryption PDF/A PDF/X Graphics Fonts Hyphenation Extensions Events Metadata Accessibility FOP Development¶ General Info Design¶ Design Info Core Process¶ Startup XML Parsing FO Tree Properties Layout Break Possibility Area Tree Renderers Miscellaneous¶ Images PDF Library SVG Embedding Extending Optimisations User Agent Unresolved (Wiki) SVG Extensions Develop¶ Walk-Thru Patch Queue Conventions Test¶ Testing Deploy¶ Doc Mgmt Release Bugs Resources¶ FAQs Tools ViewVC SubPackages¶ RTFlib Apache™ XML Graphics¶ Project Overview¶ Who We Are Legal Stuff Project Charter Mailing Lists Code Repositories ASF Sponsorship Program ASF Thanks Licenses Apache XML Graphics Security ASF Security Sub Projects¶ Apache Batik Apache XML Graphics Commons Search Apache XML Graphics¶ ApacheCon N. America¶ ApacheCon NA Hope to see you there! ApacheCon Europe¶ ApacheCon Europe Hope to see you there! The Apache™ FOP Project Apache™ FOP¶ Introduction¶ Apache™ FOP (Formatting Objects Processor) is a print formatter driven by XSL formatting objects (XSL-FO) and an output independent formatter. It is a Java application that reads a formatting object (FO) tree and renders the resulting pages to a specified output. Output formats currently supported include PDF, PS, PCL, AFP, XML (area tree representation), Print, AWT and PNG, and to a lesser extent, RTF and TXT. The primary output target is PDF. The Apache™ FOP project is part of the Apache™ Software Foundation, which is a wider community of users and developers of open source projects. The latest version of FOP is available at FOP 2.1. Support for each of the standard's objects and properties is detailed in FOP Compliance. Download options include a precompiled version, source code, and many example files to get you started. Resources include links to XSL-FO introductions and many other useful references. A checklist for Getting Help will guide you toward maximizing the usefulness of FOP. FOP is proud to be part of Apache's XML Graphics project. Demonstration¶ This image is a demonstration of a real two page document. The XML data on the left is formatted into the two pages on the right. The document contains static areas that appear on every page, an external graphic, a footnote on the first page, and a table that goes across both pages. FOP uses the standard XSL-FO file format as input, lays the content out into pages, then renders it to the requested output. One great advantage of using XSL-FO as input is that XSL-FO is itself an XML file, which means that it can be conveniently created from a variety of sources. The most common method is to convert semantic XML to XSL-FO, using an XSLT transformation. FOP Objectives¶ The goals of the Apache FOP project are to deliver an XSL-FO to PDF formatter that is compliant to at least the Basic conformance level described in the W3C Recommendation from 05 December 2006, and that complies with the November 2001 Portable Document Format Specification (Version 1.4) from Adobe Systems. Conformance to the XML 1.0 and 1.1 Recommendations, XSLT 1.0 and 2.0 Recommendations and the XML Namespaces Recommendation is understood. Other relevant documents, such as the XPath and XLink Working Drafts, are referenced as necessary. The FOP Project will attempt to use the latest version of evolving specifications. Copyright © 2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache, Apache XML Graphics, Apache FOP, Apache Batik, the Apache feather logo, and the Apache XML Graphics logos are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners."	"null"	"null"	"Creates PDF from XSL-FO."	"true"
"PDF"	"Apache PDFBox"	"http://pdfbox.apache.org/"	"Toolbox for creating and manipulating PDF."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache PDFBox | A Java PDF Library Menu Apache PDFBox Overview Downloads Community Support Mailing Lists Project Team Documentation 2.0 Migration Guide Getting Started Examples Dependencies Cookbook Document Encryption Command Line Tools API Docs 1.8 Architecture Dependencies Cookbook Document Creation Text Extraction Document Encryption Working with Fonts Working with Metadata Working with Attachments PDF/A Validation Creating a PDF/A document Command Line Tools API Docs FAQ Development Building from Source Coding Conventions Update the Website Jenkins Travis CI SonarQube JIRA Ideas External Links Apache Software Foundation Apache Software Foundation ASF Sponsors Security Apache PDFBox® - A Java PDF Library The Apache PDFBox® library is an open source Java tool for working with PDF documents. This project allows creation of new PDF documents, manipulation of existing documents and the ability to extract content from documents. Apache PDFBox also includes several command line utilities. Apache PDFBox is published under the Apache License v2.0. Apache PDFBox 2.0.2 released (2016-06-09) The Apache PDFBox community is pleased to announce the release of Apache PDFBox version 2.0.2. It is available for download at: http://pdfbox.apache.org/download.cgi See the full release notes for details about this release. Getting Help To get help on using PDFBox, please Subscribe to the Users Mailing List and post your questions there. We’re happy to help. The project is a volunteer effort and we’re always looking for interested people to help us improve PDFBox. There are a multitude of ways that you can help us depending on your skills. Subscribe to the Mailing Lists and find out how you can help. Features Extract Text Extract Unicode text from PDF files. Split & Merge Split a single PDF into many files or merge multiple PDF files. Fill Forms Extract data from PDF forms or fill a PDF form. Preflight Validate PDF files against the PDF/A-1b standard. Print Print a PDF file using the standard Java printing API. Save as Image Save PDFs as image files, such as PNG or JPEG. Create PDFs Create a PDF from scratch, with embedded fonts and images. Signing Digitally sign PDF files. News CVE-2016-2175 XML External Entity vulnerability (2016-05-27) Due to a XML External Entity vulnerability we strongly recommend to update to the most recent version of Apache PDFBox. Versions Affected: Apache PDFBox 1.8.0 to 1.8.11 and 2.0.0. Earlier, unsupported versions may be affected as well. Mitigation: Upgrade to Apache PDFBox 1.8.12 respectively 2.0.1 Apache PDFBox 1.8.12 and 2.0.1 released (2016-04-26) The Apache PDFBox community is pleased to announce the release of Apache PDFBox version 1.8.12 and 2.0.1. They are available for download at: http://pdfbox.apache.org/download.cgi See the full release notes 1.8.12 and 2.0.1 for details about this release. Apache PDFBox 2.0.0 released (2016-03-18) After more than 3 years of development the Apache PDFBox community is pleased to announce the release of Apache PDFBox version 2.0.0. It is available for download at: http://pdfbox.apache.org/download.cgi The Migration Guide shall give users coming from PDFBox 1.8 or earlier an overview about things to look at when switching over. More details to come. See the full release notes for details about this release. Apache PDFBox 1.8.11 released (2016-01-18) The Apache PDFBox community is pleased to announce the release of Apache PDFBox version 1.8.11. The release is available for download at: http://pdfbox.apache.org/download.cgi See the full release notes for details about this release. Apache PDFBox 2.0.0 RC3 released (2016-01-15) The Apache PDFBox community is pleased to announce the release of Apache PDFBox version 2.0.0 RC3. The release is available for download at: http://pdfbox.apache.org/download.cgi The numerous feedback on our second release candidate helps us to make this release candidate better again, e. g. optimized font cache, improved text extraction. A lot of bug fixes are included as well. We’d like to thank everybody who helps us to get a step foward. Please have a look at the new release candidate as well, so that the next release hopefully could be the final one. See the full release notes for details about this release. Copyright © 2009–2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache PDFBox, PDFBox, Apache, the Apache feather logo and the Apache PDFBox project logos are trademarks of The Apache Software Foundation."	"null"	"null"	"Toolbox for creating and manipulating PDF."	"true"
"PDF"	"Dyanmic Jasper"	"http://dynamicjasper.com/"	"Abstraction layer to JasperReports."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"47"	"13"	"31"	"GitHub - FDVSolutions/DynamicJasper: Dynamic Reports using Jasper Reports Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 47 Fork 31 FDVSolutions/DynamicJasper Code Issues 1 Pull requests 0 Pulse Graphs Dynamic Reports using Jasper Reports http://dynamicjasper.com 663 commits 12 branches 81 releases Fetching contributors Java 94.4% HTML 3.9% Other 1.7% Java HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags branch_dj4_x branch_3_0_X branch_3_1+ dj-java6 dj_3_2_2_bsd features/jr-6.3.0 issue_15360 jasper4_1 master static-elements test/huge_report watermark Nothing to show release_5_0_9 release_5_0_8 release_5_0_7 release_5_0_6 release_5_0_5 release_5_0_4 release_5_0_3 release_5_0_2 release_5_0_0 release_4_0_3 release_4.0.2 release_4.0.1 release_4.0.0 release_4.0 release_3_2_6 release_3.2.4 release_3_2_3 release_3_2_2 release_3_2_1 release_3_2_0 release_3_1_9 release_3_1_8 release_3_1_5 release_3_1_4 release_3_1_2 release_3_1_0 release_3_0_13 release_3_0_11 release_3_0_11_beta3 release_3_0_11_beta2 release_3_0_8 release_3_0_7 release_3_0_7-b6 release_3_0_7-b4 release_3_0_6 release_3_0_5 release_3_0_4 release_3_0_2 release_3_0_1 release_3_0_0 release_3_0_0_RC1 release_2_1_2 release_2_1_1 release_2_1_0 release_2_0_11 release_2_0_11-SNAPSHOT-3 release_2_0_11-SNAPSHOT-2 release_2_0_11-SNAPSHOT-1 release_2_0_9 release_2_0_8 release_2_0_8_SNAPSHOT_01 release_2_0_7 release_2_0_5 release_2_0_4 release_2_0_3 release_2_0_2 release_2_0_1 release_2_0_0 release_1_4_3-beta1 release_1_4_2 release_1_4_0 release_1_3_3 release_1_3_3-SNAPSHOT1 release_1_3_2 release_1_3_1 release_1_3_0 release_1_3_0-beta2 release_1_3_0-beta1 release_1_2_1 release_1_2_0 release_1_1_3 release_1_1_2 release_1_1_1 release_1_1_0 release_1_0_2 release_1_0_1@36 release_1_0_1@30 release_1_0_1 release-4.0.0_beta3 release-4.0.0-beta1 dj-3.2.4-bsd Nothing to show New pull request Latest commit 992bd03 Jul 9, 2016 juanalvarezg update README.md Permalink Failed to load latest commit information. hsql introducing HSQL Database for testing SQL and Hibernate related stuff Aug 31, 2008 src update change log Jul 9, 2016 .gitignore Watermark with background image Dec 4, 2015 LICENSE.txt git-svn-id: https://dynamicjasper.svn.sourceforge.net/svnroot/dynamic… Feb 5, 2008 README.md update README.md Jul 9, 2016 pom.xml * Support from JasperReports 4.6.0 to 6.3.0 Jul 9, 2016 README.md DynamicJasper DynamicJasper (DJ) is an API that hides the complexity of JasperReports, it helps developers to save time when designing simple/medium complexity reports generating the layout of the report elements automatically. It creates reports dynamically, defining at runtime the columns, column width (auto width), groups, variables, fonts, charts, crosstabs, sub reports (that can also be dynamic), page size and everything else that you can define at design time. DJ keeps full compatibility with Jasper Reports since it's a tool that helps create reports programmatically in a easy way (it only interferes with the creation of the report design doing the layout of the elements). You can use the classic .jrxml files as templates while the content and layout of the report elements are handled by the DJ API. http://dynamicjasper.com/ Maven dependency <dependency>   <groupId>ar.com.fdvs</groupId>   <artifactId>DynamicJasper</artifactId>   <version>5.0.9</version> </dependency>  Documentation and Examples Find documentation and examples at http://dynamicjasper.com/documentation-examples/ Report Concept This API is intended to solve the 99% of the classic reports that consist in a number of fields (that are going to be columns in the report), then the report may have some “repeating groups” defined using a field as a criteria. Some columns may have variables (with operations such as SUM or COUNT) for some of the fields. All this tasks can be done automatically by the DJ through a very easy-to-use API. You can redefine at runtime the column order, “repeating groups”, variables, styles, conditional styles, etc. Its completely dynamic!!! Features Most of the features are provided directly by Jasper Reports (great tool guys!), nevertheless through the DJ API some of the results are achieved with really no effort. 100% pure Java No need to use other tool than you favorite IDE. Friendly and intuitive API. Mature, robust and stable. Dynamic column report: Columns can be defined at runtime, which means you also control (at runtime) the column positioning, width, title, etc. Repeating groups / Breaking groups: Create repeating groups dynamically using simple expressions as criteria or complex custom expressions. Each repeating group may have a header and/or footer, which can have a variable showing the result of an operation (SUM, COUNT or any other provided by Jasper Reports). Automatic report layout: Just define a minimum set of options and DJ will take care of the layout. It’s not an issue to generate the same report for different page sizes and orientation many more! Dynamic Crosstabs: Jasper Report’s popular crosstabs can now be created dynamically in an easy and convenient way. Sub reports Sub reports are supported; they can also be dynamically created. Concatenating many reports in a single one (e.g.: a single PDF) can be a hard task. Using DynamicJasper it is really easy get reports of different nature in a single one. Styles: Each column can have its own style for its title and detail data (defining border, border color, font size, type and color, background color, etc.). Style library from jrxml files are supported. Calculation Variables: Repeating groups can have variables that hold the result of an operation on a given field (column). With DJ adding variables is a 1 line of code task. JRXML template files support: You can use a base template jrxml file in which common styles, company logo, water mark, etc can be pre defined. Conditional Format: DJ provides a very simple way to define conditional formats. You can use simple conditions or custom conditions. Auto text: Add auto text in page header and footer such as ?Page 1 of 10?, ?Generated on Oct. 10th 2007? or a custom text. Charts: Easy to add simple charts. Barcode columns: As simple as adding a regular column. Export to most popular formats: As DJ stands over Jasper Reports, it can export to PDF, XML, HTML, CSV, XLS, RTF, TXT. Clean Excel export: One of the most valuable features that DJ provides is exporting plain reports to excel, with no data formatting, no page break, etc. This is very valuable for end users that use this report to create dynamic tables in Excel, creating these reports just with Jasper Reports can demand a lot of design time. Professional support Alternative professional support available. http://dynamicjasper.com/support/professional-support-eng/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FDVSolutions/DynamicJasper"	"Abstraction layer to JasperReports."	"true"
"PDF"	"DynamicReports"	"http://dynamicreports.org/"	"Simplifies JasperReports."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DynamicReports - Free and open source Java reporting tool DynamicReports free and open source Java reporting tool Home Getting started Documentation Examples Forum Version 4.1.0 Home News Screenshots Features Documentation & examples Getting started Examples Documentation Javadoc External resources Support Forum Project tracker Contact Project info License Requirements Source repository Project team Statistics Links JasperReports iReport Google charts Eclipse Apache Maven Project Free and open source Java reporting tool   DynamicReports is based on JasperReports. It allows to create dynamic report designs and it doesn't need a visual report designer. You can very quickly create reports and produce documents that can be displayed, printed or exported into many popular formats such as PDF, Excel, Word and others. Why should I use DynamicReports? You can get a lot of benefits while using this library, such as Easy to use Very easy to use, which not only saves a lot of your time and money but also increases reporting productivity and decreases training time. Only a very small amount of code is needed to create a report and even more complex reports will be very clear, easy to maintain and understandable. Dynamic report design A design is created by a pure simple Java code. While it is generated at runtime, you can implement any logic in your code which decides how the report will look like, unlike the static reports (jrxml JasperReports templates) where the defined design cannot be changed at runtime. It's ideal for ad hoc reporting where it is needed to create reports dynamically. Inherited report design A design can even be inherited from another design. This is impossible in static report designs designed in visual designers. No need for a visual designer As mentioned above, a design is defined by a java code and hence you don't have to use a visual report designer. Visual designers are quite robust and require more effort and time for report creation. This library enables you to create reports in your favorite IDE at the same speed as you write a java code. Ability to mix dynamic designs with static designs (jasper jrxml templates) You are able to design a part of the report in e.g. iReport and another part in DynamicReports. There are two ways how they can work together: static designs can be embedded in a dynamic design through subreports and placed into any band and any numbers of them static design as a base to which a dynamic design is added Usage DynamicReports is synchronized with a Maven central repository. For Maven projects you just add dependency to your maven configuration. In case you would like to use a development version, add a Sonatype Nexus snapshot repository to your maven configuration. For non Maven projects you have to download a project with dependencies from the Download site. To get started have a look at Getting started step-by-step tutorial which shows the basic usage of the tool. For more examples visit the Examples page where you will find a lot of useful examples. In case you have questions regarding the usage, have a look at the Documentation and Forum. If you didn't get your answers there, feel free to post a question in the forum. To post in the forum you will need an account. If you don't have one, you can register at any time here. If you think the library is missing a feature or has a bug, you can create a feature request or bug report in the Project tracker. Please provide a comprehensive description of your request when you are creating a new issue. Sponsors The DynamicReports project is grateful to the following companies for their donations to the project: HealthFortis sponsored and helped to design the following components: dynamicreports-adhoc project, grouped stacked bar chart, calculating and showing percentages on charts, showing values on charts. Latest News Thu Feb 11 DynamicReports 4.1.0 released Changes in version 4.1.0 upgrade to JasperReports 6.2.0 xyList component, see ComponentsReport for an example Wed Nov 18 DynamicReports 4.0.2 released Changes in version 4.0.2 upgrade to JasperReports 6.1.1 added support for QR Code barcode, see BarcodeReport for a... Mon Aug 03 DynamicReports 4.0.1 released Changes in version 4.0.1 upgrade to JasperReports 6.1.0 downgrade to iText 2.1.7 in pdf exporter horizontal/verti... Home Contact RSS news Webhosting sponsored by WebSupport.sk Copyright © 2010 - 2016 Ricardo Mariaca"	"null"	"null"	"Simplifies JasperReports."	"true"
"PDF"	"flyingsaucer"	"https://github.com/flyingsaucerproject/flyingsaucer"	"XML/XHTML and CSS 2.1 renderer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"672"	"88"	"263"	"GitHub - flyingsaucerproject/flyingsaucer: XML/XHTML and CSS 2.1 renderer in pure Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 88 Star 672 Fork 263 flyingsaucerproject/flyingsaucer Code Pull requests 23 Pulse Graphs XML/XHTML and CSS 2.1 renderer in pure Java http://code.google.com/p/flying-saucer/ 2,582 commits 5 branches 14 releases 30 contributors Java 70.7% HTML 27.0% CSS 2.1% Lex 0.1% AMPL 0.1% Batchfile 0.0% Java HTML CSS Lex AMPL Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags float_painting_fix gh-pages itext5 master premaven Nothing to show flying-saucer-r8-1 flying-saucer-parent-9.0.8 flying-saucer-parent-9.0.7 flying-saucer-parent-9.0.6 flying-saucer-parent-9.0.5 flying-saucer-parent-9.0.4 flying-saucer-parent-9.0.3 flying-saucer-parent-9.0.2 9.0.8 9.0.1 9.0.0 8.99.5 8.99.2 8.99.1 Nothing to show New pull request Latest commit 854e182 Apr 7, 2016 pbrant Update for next development version Permalink Failed to load latest commit information. archive Move Ant build to archive Jun 24, 2012 bin Fix links, menu, add news page Mar 8, 2009 doc Update users-guide-r8.xil Dec 2, 2013 flying-saucer-core Update for next development version Apr 7, 2016 flying-saucer-examples Update for next development version Apr 7, 2016 flying-saucer-log4j Update for next development version Apr 7, 2016 flying-saucer-pdf-itext5 Update for next development version Apr 7, 2016 flying-saucer-pdf Update for next development version Apr 7, 2016 flying-saucer-swt-examples Update for next development version Apr 7, 2016 flying-saucer-swt Update for next development version Apr 7, 2016 lib Move build to Maven Jun 24, 2012 notes Remove Minium anti-aliasing library as sources are not available. Rem… Mar 22, 2009 src Move build to Maven Jun 24, 2012 temp Remove Doctype, causing problems with some loaders Jul 24, 2007 test Work on bringing regression test classes up-to-date. Apr 12, 2009 tests regression snapshot was missing source images, now using Ant to make … Apr 17, 2009 www Reapply changes that cvsps had trouble with Apr 19, 2010 .cvsignore . Apr 13, 2009 .gitignore Update for Bintray deployment Sep 3, 2015 .hgignore Add .hgignore for those using hg-git Aug 7, 2010 LICENSE - change (back) license to 2.1 or later Jul 15, 2015 LICENSE-GPL-2.txt + license text GPL 2 Jul 16, 2015 LICENSE-GPL-3.txt - license update LGPL version 2.1 to 3 Jul 15, 2015 LICENSE-LGPL-2.1.txt - change (back) license to 2.1 or later Jul 15, 2015 LICENSE-LGPL-3.txt - license update LGPL version 2.1 to 3 Jul 15, 2015 LICENSE-W3C-TEST Added license for W3C tests, as requested on tests website. Jul 10, 2007 README - change (back) license to 2.1 or later Jul 15, 2015 pom.xml Update for next development version Apr 7, 2016 README Flying Saucer  http://code.google.com/p/flying-saucer/ Please see project website for links to git, mailing lists, issue tracker, etc.   OVERVIEW -------- Flying Saucer is a pure-Java library for rendering arbitrary well-formed XML  (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels,  PDF, and images.  Comprehensive documentation available in our user's guide, linked from our website at http://code.google.com/p/flying-saucer/ For information on our development releases, please contact us on our mailing lists.  If you end up using Flying Saucer for your own projects, please drop us an email and tell us about it; it helps inform where we go next, and is interesting and inspiring to other developers.   LICENSE ------- Flying Saucer is distributed under the LGPL.  Flying Saucer itself is licensed  under the GNU Lesser General Public License, version 2.1 or later, available at http://www.gnu.org/copyleft/lesser.html. You can use Flying Saucer in any way and for any purpose you want as long as you respect the terms of the  license. A copy of the LGPL license is included as license-lgpl-2.1.txt or license-lgpl-3.txt in our distributions and in our source tree.  Flying Saucer uses a couple of FOSS packages to get the job done. A list of these, along with the license they each have, is listed in the  LICENSE file in our distribution.     GETTING FLYING SAUCER --------------------- New releases of Flying Saucer are distributed through Maven.  The available artifacts are:  org.xhtmlrenderer:flying-saucer-core - Core library and Java2D rendering org.xhtmlrenderer:flying-saucer-pdf - PDF output using iText org.xhtmlrenderer:flying-saucer-swt - SWT output org.xhtmlrenderer:flying-saucer-log4j - Logging plugin for log4j  GETTING STARTED --------------- There is a large amount of sample code under the flying-saucer-demos directory. A pre-configured Eclipse project is provided to run a few of them.    For users of other IDEs, make sure the src/java and resources directories under the about, docbook, svg, and browser directories are available on the build path.  samples/src and splash should also be in the build path.  flying-saucer-core, flying-saucer-pdf, and flying-saucer-swt must also be on the build path as well as the an SWT JAR for your OS.  The Eclipse config files as committed with flying-saucer-swt use a Linux SWT JAR.  You will need to update if using another OS.  org.xhtmlrenderer.demo.browser.BrowserStartup will start the browser demo.  Some good entry points (classes) are: org.xhtmlrenderer.simple.XHTMLPanel org.xhtmlrenderer.simple.PDFRenderer org.xhtmlrenderer.simple.ImageRenderer    Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/flyingsaucerproject/flyingsaucer"	"XML/XHTML and CSS 2.1 renderer."	"true"
"PDF"	"iText"	"http://itextpdf.com/"	"Creates PDF files programmatically but requires a license for commercial purposes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"iText Skip to main content Blog & PR Support About Contact English 日本語 Toggle navigation Search form SearchSearch Blog & PR Support About Contact English 日本語 Home Products iText 7 Suite iText 7 iText 7 - pdfSweep iText 7 - pdfInvoice iText 7 - pdfDebug iText 7 - pdfCalligraph XFA Worker Earlier releases Expertise Insights and thoughts Case Studies iText Customers Event Downloads Speaking Slots Pricing License overview Unit-based Volume-based OEM Distribution Support Partners Find a Partner Become a Partner Developers iText 7: more powerful, efficient and versatile Standards for administration, archiving, invoicing and compliance increasingly rely on PDF. iText is the right partner to help you automate your documentation processes. We offer powerful and flexible tools for PDF creation, editing and inspection, and have been doing so for over 15 years. With the release of iText 7, redesigned from the ground up, even more features and functionalities are now at developers' fingertips. iText serves over 5,000 customers across the world, including finance, governmental, technology and logistics companies. With us, you can truly take your documentation needs to the next level. Our dual license model iText comes with a dual-license model owing to its roots in the open-source community. This means that as long as you respect the AGPL license, you can use the open-source versions of iText. To guard your intellectual property, receive professional support and take advantage of iText's advanced features, however, a commercial license is required. You can check out our quick, one-minute animations shown here to the right why PDF can bring vast benefits to your workflow and why it is worth considering getting iText. Learn more about our products » Get free trial » Why choose iText? Eliminate manual document processes Our solutions are integrated directly into your software to automate database, application and process conversions into PDF. Explore features » Improve workflow performance Reduce cost and time by customizing e-commerce, accounting, CRM, ECM, ERP and other systems Read case studies » Comply with industry and legal standards Automatically create standards compliant PDFs from databases, website forms, code or PDF. Find support » Top 10 ways PDF helps you take control of digital documents Learn the unique features of PDF that make it the de facto standard for automating transactions, personalizing communications, speeding up reviews and approvals, managing big data and legal compliance. Download whitepaper » Featured Items Vote for the iText founders in the European Business Awards Read more November 30, 2015: iText 5.5.8 has been released Read more ""Hoek af"": new book about entrepreneurship with a complete chapter dedicated to iText Read more iText group wins 2nd place in Deloitte's Technology Fast50 2015 Read more Fast 50 winners playing Chess Read more News iText has a new CEO We are proud to announce that iText has a new CEO. Stephan Engelen has been chosen as the... Read more iText nominated for Flemish Export Lion iText has been nominated, among with two other companies from Belgium's region of... Read more JAXenter interviews iText founder Bruno Lowagie JAXenter's Geertjan Wielinga sat down with iText founder and CSO Bruno Lowagie to talk... Read more iText 7 release - programmable PDF libraries redesigned from the ground up to be more powerful, efficient and versatile Leading PDF library company iText Software is proud to announce the official launch of... Read more Events iText at the European Business Awards gala in Milan iText founder and Chief Strategy Officer Bruno Lowagie attended the European Business... Read more PDF Days 2016 have landed Today kicked off the two-day PDF Days event, hosted by the PDF Association. This year,... Read more ISO committee meeting at iText HQ Last week, the ISO committee devoted to PDF standards convened at iText's global HQ in... Read more Advanced typography with iText 7 At GIDS 2016 , we have now just demonstrated one of iText 7's more powerful features: the... Read more iText is a member of the PDF Association. The PDF Association promotes the adoption and use of International Standards related to PDF technology by assisting enterprise content management (ECM), document management system (DMS) and advanced PDF users with the implementation of PDF technology on an organizational level. In order to assist companies in making the most of PDF technology, the PDF Association provides organizations with information and resources on the variety of International Standards available for PDF. iText is attending JavaOne 2016 (September 18-22, San Frasisco, United States). We'd be very happy to see you there! Company About Us Blog Press Releases Events Awards Legal Contact Us Customers Customer Portal Customer Support FAQ How To Buy Explore Pricing Request a Quote Find a Partner Get Products Product Overview Downloads Developers Developer Portal Q&A Release Notes API Docs Asia, Oceania 15 Scotts Road #04-08 Thong Teck Building Singapore 228218 sales.isa@itextpdf.com +65 67 16 97 85 Europe, Middle East, Africa Business Center ""De Punt"" Kerkstraat 108 9050 Gentbrugge (Ghent) Belgium sales.isb@itextpdf.com +32 9 298 02 31 North America, South America 47 3rd Street, Suite 301 Cambridge, MA 02141 USA sales.isc@itextpdf.com +1 617 982 2646 © 2016, iText Group NV"	"null"	"null"	"Creates PDF files programmatically but requires a license for commercial purposes."	"true"
"PDF"	"JasperReports"	"http://community.jaspersoft.com/project/jasperreports-library"	"Complex reporting engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"JasperReports® Library | Jaspersoft Community <img height=""1"" width=""1"" alt="""" style=""display:none"" src=""https://www.facebook.com/tr?id=256158104585084&amp;ev=NoScript""> Skip to main content area Products Solutions Services Resources Search Main menu Products JasperReports Server Jaspersoft Studio JasperReports Library Jaspersoft ETL Visualize.js Answers Exchange Docs Wiki Planet Tracker Jaspersoft.com Support Community Contact Login/Register Download Now ProductsAnswersExchangeDocsWikiPlanetTracker You are here Home » Exchange » JasperReports Library 5 (2 reviews) JasperReports® Library Open Source Java Reporting Library Primary tabs View(active tab) Resources Answers Tracker Reviews Releases The JasperReports Library is the world's most popular open source reporting engine. It is entirely written in Java and it is able to use data coming from any kind of data source and produce pixel-perfect documents that can be viewed, printed or exported in a variety of document formats including HTML, PDF, Excel, OpenOffice and Word. Quick Start What is JasperReports? An introduction to the JasperReports Library and the capabilities it can bring to your Java applications.   Deploy the JasperReports Library Download and deploy the JasperReports Library within your Java Application Deploying your first Report Preparing and deploying your first report within your application. Coming Soon Report Execution and Exporting Execute your report and export it into your desired format. Coming Soon   Download JasperReports® Library View Screenshots (1) Browse Source Code Provider: Jaspersoft Corporation Category: License: LGPL Issues for JasperReports® Library: All Issues:362 open, 1597 totalBug Reports:231 open, 1102 total Inappropriate Content? Tags JasperReports Library Copyright © 2016 TIBCO Software, Inc. All rights reserved. Answers Exchange Documentation Wiki Tracker Privacy Policy User Groups Contribute to our Wiki Request a Feature Report a Bug Share your Extension Terms of Use JasperReports Server JasperReports Library Jaspersoft ETL Jaspersoft Studio Visualize.js Contact Us randomness"	"null"	"null"	"Complex reporting engine."	"true"
"Performance analysis"	"honest-profiler"	"https://github.com/RichardWarburton/honest-profiler"	"An low-overhead, bias-free sampling profiler."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"432"	"51"	"40"	"GitHub - RichardWarburton/honest-profiler: A sampling JVM profiler without the safepoint sample bias Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 432 Fork 40 RichardWarburton/honest-profiler Code Issues 41 Pull requests 4 Wiki Pulse Graphs A sampling JVM profiler without the safepoint sample bias https://github.com/RichardWarburton/honest-profiler/wiki 298 commits 2 branches 0 releases 11 contributors Java 80.3% C++ 15.2% JavaScript 2.2% CMake 1.1% HTML 0.9% Shell 0.2% Other 0.1% Java C++ JavaScript CMake HTML Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master spring-experiment Nothing to show Nothing to show New pull request Latest commit e9dc9b0 Jul 3, 2016 RichardWarburton committed on GitHub Merge pull request #145 from cinquin/remove_obsolete_comment_2 … Remove obsolete comment and TODO (line numbers are collected in a dif… Permalink Failed to load latest commit information. src Merge pull request #145 from cinquin/remove_obsolete_comment_2 Jul 3, 2016 .bowerrc reconfigure karma unit tests for this package layout Jul 8, 2014 .gitignore ignore build/eclipse files May 10, 2016 .jshintrc Add in initial cut of angular ui and switch to webbit for the web runner Jul 8, 2014 AUTHORS first public commit from private repository Feb 17, 2014 CMakeLists.txt Enable sampling to be controlled via a socket Mar 29, 2016 COPYING first public commit from private repository Feb 17, 2014 LICENSE organise imports, clarify copyright Oct 5, 2014 README.md add a clearer link to a binary download Dec 10, 2015 bower.json Add in initial cut of angular ui and switch to webbit for the web runner Jul 8, 2014 package.json reformat code and tidy up integration test runner a bit Nov 5, 2015 pom.xml remove protobuf from the build since it doesn't need to be used Dec 10, 2015 README.md honest-profiler An usable and honest profiler for the JVM. For documentation please refer to The Wiki Download the Binary How to Build Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/RichardWarburton/honest-profiler"	"An low-overhead, bias-free sampling profiler."	"true"
"Performance analysis"	"jHiccup"	"https://github.com/giltene/jHiccup"	"Logs and records platform JVM stalls."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"274"	"30"	"43"	"GitHub - giltene/jHiccup: jHiccup is a non-intrusive instrumentation tool that logs and records platform ""hiccups"" - including the JVM stalls that often happen when Java applications are executed and/or any OS or hardware platform noise that may cause the running application to not be continuously runnable. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 274 Fork 43 giltene/jHiccup Code Issues 3 Pull requests 2 Pulse Graphs jHiccup is a non-intrusive instrumentation tool that logs and records platform ""hiccups"" - including the JVM stalls that often happen when Java applications are executed and/or any OS or hardware platform noise that may cause the running application to not be continuously runnable. 125 commits 1 branch 9 releases 11 contributors Java 72.8% Shell 27.2% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show jHiccup-2.0.6 jHiccup-2.0.5 jHiccup-2.0.4 jHiccup-2.0.2 jHiccup-2.0.1 jHiccup-1.3.8 jHiccup-1.3.7 jHiccup-1.3.6 jHiccup-1.3.5 Nothing to show New pull request Latest commit d2ad019 Nov 10, 2015 Gil Tene Added example plot to readme Permalink Failed to load latest commit information. src/main Add support for start time delay in InputRecorder mode (-f). Nov 9, 2015 .gitignore - updated .gitignore Apr 14, 2014 COPYING.txt First commit Oct 14, 2013 LICENSE.txt Added BSD 2-Clause License to LICENSE file. This is *in addition to* … Mar 10, 2014 README.md Added example plot to readme Nov 10, 2015 examplePlot.png Added example plot to readme Nov 10, 2015 jHiccup Updated to v2.0.5, dependency on HdrHistogram 2.1.0, and HdrHistogram… Dec 11, 2014 jHiccupLogProcessor Updated to v2.0.4 Nov 24, 2014 jHiccupPlotter.xls First commit Oct 13, 2013 pom.xml Updated to using HdrHistogram 2.1.7 (which has a better compressed V2… Sep 10, 2015 README.md jHiccup Written by Gil Tene of Azul Systems, and released to the public domain as explained at http://creativecommons.org/publicdomain/zero/1.0 Version: 2.0.6 jHiccup is a non-intrusive instrumentation tool that logs and records platform ""hiccups"" - including the JVM stalls that often happen when Java applications are executed and/or any OS or hardware platform noise that may cause the running application to not be continuously runnable. jHiccup can be executed in one of three main ways: It can be run as a Java agent (using: java -javaagent:jHiccup.jar) It can be injected into a running application (using: jHiccup -p <pid>) It can also be run using a convenient wrapper command for your existing Java application (using: jHiccup java myProg ...) Example jHiccup plot Using jHiccup as a Java agent: jHiccup is most often used as a Java agent. This is useful for platforms and environments where a Java agent is simpler to integrate into launch scripts, or in environments where using the bash jHiccup wrapper script is not practical (e.g. Windows, and environments where java is not directly launched from the command line). jHiccup.jar can be used as a Java agent using the following launch syntax: % java -javaagent:jHiccup.jar MyProgram  or % java -javaagent:jHiccup.jar=""<options>"" MyProgram.jar -a -b -c  You can find the available options for the Java agent mode by running: % java -javaagent:jHiccup.jar=""-h""  Here is a Java agent usage example with explicit parameters: % java -javaagent:jHiccup.jar=""-d 0 -i 1000 -l hiccuplog -c"" MyProgram.jar -a -b -c  This example will record hiccups experienced during the running of MyProgram.jar in log file hiccuplog, while at the same time recording the hiccups experienced by a control process running in a separate JVM in the log file c.hiccuplog. Measurement will start immediately upon startups (rather than the 30 second default delay), and interval data will be records every 1 second (rather than the default 5 seconds). Useful Java agent related notes: Note 1: When used as a java agent, jHiccup will treat spaces, commas, and semicolons as delimiting characters ([ ,;]+). For example, the option string -d 0 -i 1000 is equivalent to the option string -d,0,-i,1000. This is useful for environments where placing space delimiters into quoted strings is difficult or confusing. Note 2: I find that a common way people add jHiccup as a Java agent is by using the _JAVA_OPTIONS environment variable. This often allows one to add the jHiccup Java agent without significant launch script surgery. For example: export _JAVA_OPTIONS='-javaagent:/path/to/jHiccup/target/jHiccup.jar=""-d 20000 -i 1000""'  Reading and processing the jHiccup log with jHiccupLogProcessor: jHiccup logs hiccup information in a histogram log (see HdrHistogram.org). This histogram log contains a full, high fidelity histogram of all collected result sin each interval, in a highly compressed form (typically using only ~200-400 bytes per interval). However, other than the timestamp and maximum hiccup magnitude found in the given interval, the rest of the log line for each interval is not human readable (it is a base64 encoding of a compressed HdrHistogram). To translate the jHiccup log file to a more human-readable form (identical to the form that jHiccup versions before jHiccup 2.0 had used), the jHiccupLogProcessor utility is provided. In it's simplest form, this utility can be used as such % jHiccupLogProcessor -i mylog.hlog -o mylog  Which will produce log files mylog and mylog.hgrm containing a human readable interval log (with selcted percentiles in each interval), as well as a human readable histogram percentile distribution log. jHiccupLogProcessor can also be used to produce log files for an arbitrary section of the jHiccup log, by using the optional -start and -end parameters. See jHiccupLogProcessor -h for more details. Launching jHiccup by attaching it to existing, running application: The jHiccup agent can be injected into a live, running Java application if the environment supports the java attach API (which is typically available in java environments running Java SE 6 or later). $ jHiccup -p NOTE: In order to attach to a running java application, the running application needs to have ${JAVA_HOME}/lib/tools.jar in it's classpath. While this is commonly the case already for many IDE and desktop environments, and for environments that involve or enable other attachable agents (such as profilers), you may find that it is not included in your application's classpath, and that it needs to be added if attaching jHiccup at runtime is needed (launching jHiccup as a Java agent per the below may be a good alternative). Running jHiccup using the Wrapper Script form: In the wrapper script form, all it takes is adding the word ""jHiccup"" in front of whatever the java invocation command line is. For example, if your program were normally executed as: java <Java args> MyProgram -a -b -c  The launch line would become: jHiccup java <Java args> MyProgram -a -b -c  or, for a program launched with: /usr/bin/java <Java args> -jar MyProgram.jar -a -b -c  The launch line would become: jHiccup /usr/bin/java <Java args> -jar MyProgram.jar -a -b -c  or, to override the defaults by making the recording start delay 60 seconds and log to hlog, it would become: jHiccup -d 60000 -l hlog /usr/bin/java <Java args> -jar MyProgram.jar -a -b -c  The jar file also includes a simple ""Idle"" class to facilitate sanity checks without an external program. Here is a simple sanity test example: jHiccup with a 4 sec delay on recording start, wrapping an Idle run that does nothing for 30 seconds and exits: % jHiccup -d 4000 /usr/bin/java org.jhiccup.Idle -t 30000  [Run jHiccup -h, or see comment in jHiccup script for more details.] Hiccup Charts: Plotting jHiccup results A jHiccupPlotter.xls Excel spreadsheet is included to conveniently plot jHiccup log files produced by jHiccupLogProcessor in ""Hiccup Chart""form. To use the spreadsheet, load it into Excel, (make sure to enable macros), and follow the 2-step instructions in the main menu worksheet to automatically import the log files and produce the Hiccup Chart. Note that jHiccupPlotter.xls reads the log files produced by jHiccupLogProcessor, (the interval log and the .hgrm histogram percentile distribution log), and not the .hlog log format that jHiccup outputs directly. Supported/Tested platforms: The jHiccup command is expected to work and has been tested on the following platforms: Various Linux flavors (Tested on RHEL/CentOS 5.x and 6.x) Mac OS X (tested on Lion, 10.7) Windows with a Cygwin environment installed (tested on Windows 7) Solaris (tested on both SPARC and x86) jHiccup.jar is expected to work as a java agent and has been tested on the following platforms: Various Linux flavors (Tested on RHEL/CentOS 5.x and 6.x) Mac OS X (tested on Lion, 10.7) Windows standard command shell (tested on Windows 7) Solaris (tested on both SPARC and x86) If you use jHiccup on other operating systems and setups, please report back on your experience so that we can expand the list. Using a control process to concurrently record baseline idle load hiccups: It is often useful to compare the hiccup behavior experienced by a running application with a ""control"" hiccup level of an idle workload, running on the same system and at the same time as the observed application. To make such control measurement convenient, jHiccup supports a -c option that will launch a concurrently executing ""control process"" and will separately log hiccup information of an idle workload running on a separate jvm for the duration of the instrumented application run. When selected, the control process log file name will match those used for the launching application, followed with a .c. For example: % jHiccup -l mylog -c /usr/bin/java <Java args> -jar MyProgram.jar -a -b -c  Will produce log file mylog detailing the hiccup behavior during the execution of MyProgram.jar, as well as a log file c.mylog detailing the hiccup behavior of an idle workload running on a separate jvm at the same time. Log file name recognizes and fills in %pid and %date terms When a log file name is specified with the -l option, the terms %pid and %date will be filled in with the appropriate information. The default log file name setting is simply hiccup.%date.%pid. Using jHiccup to process latency log files: jHiccup's HiccupMeter class supports a mode -f that will take latency input from a file instead of recording it. This is useful for producing jHiccup-style text and graphical output for recorded latency data collected by some other means. When provided to the -f option, an input file is expected to contain two white-space delimited values per line (in either integer or real number format), representing a time stamp and a measured latency, both in millisecond units. It's important to note that the default ""expected interval between samples"" resolution in jHiccup and HiccupMeter is 1 millisecond. When processing input files, it is imperative that an appropriate value be supplied to the -r option, and that this value correctly represent the expected interval between samples in the provided input file. HiccupMeter will use this parameter to determine whether additional, artificial values should be added to the histogram recording, between input samples that are farther apart in time than the expected interval specified to the -r option. This behavior corrects for ""coordinated omission"" situations (where long response times lead to ""skipped"" requests that would have typically correlated with ""bad"" response times). A ""large"" value (e.g. -r 100000) can easily be specified to avoid any correction of this situation. Example: adding jHiccup to Tomcat runs: In Tomcat's catalina.sh script, replace the following line: exec ""$_RUNJAVA"" ""$LOGGING_CONFIG"" $JAVA_OPTS $CATALINA_OPTS  with: exec ""$JHICCUP_HOME/jHiccup"" ""$_RUNJAVA"" ""$LOGGING_CONFIG"" $JAVA_OPTS $CATALINA_OPTS  Note: Use of HdrHistogram. jHiccup depends on and makes systemic use of HdrHistogram to collected and report on the statistical distribution of hiccups. This package includes an HdrHistogram.jar jar file to support this functionality. HdrHistogram sources, documentation, and a ready to use jar file can all be found on GitHub, at http://giltene.github.com/HdrHistogram Building jHiccup: jHiccup can be (re)built from source files using Maven: % mvn package  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/giltene/jHiccup"	"Logs and records platform JVM stalls."	"true"
"Performance analysis"	"JProfiler"	"https://www.ej-technologies.com/products/jprofiler/overview.html"	"Commercial profiler."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Java Profiler - JProfiler ej-technologies Home Company News Products JProfiler perfino install4j Download JProfiler perfino install4j exe4j Support Order JProfiler Overview What's New Features Our Users Training Docs Overview What's New Features Our Users Training Docs The Award-Winning All-in-One Java Profiler JProfiler's intuitive UI helps you resolve performance bottlenecks, pin down memory leaks and understand threading issues. Download 9.2 When it comes to profiling, only the best tool is good enough. Check out below what makes JProfiler the top choice for profiling your applications on the JVM: Exceptional ease of use When you profile, you need the most powerful tool you can get. At the same time, you do not want to spend time learning how to use the tool. JProfiler is just that: simple and powerful at the same time. Configuring sessions is straight-forward, third party integrations make getting started a breeze and profiling data is presented in a natural way. On all levels, JProfiler has been carefully designed to help you get started with solving your problems. Database profiling for JDBC, JPA and NoSQL Database calls are the top reasons for performance problems in business applications. JProfiler's JDBC and JPA/Hibernate probes as well as the NoSQL probes for MongoDB, Cassandra and HBase show the reasons for slow database access and how slow statements are called by your code. From the JDBC timeline view that shows you all JDBC connections with their activities, through the hot spots view that shows you slow statements to various telemetry views and a list of single events, the database probes are an essential tool for getting insight into your database layer. Excellent support for Java Enterprise Edition Dedicated support for JEE is present in most views in JProfiler. For example, in the JEE aggregation level you see the call tree in terms of the JEE components in your application. In addition, the call tree is split up for each request URI. Also, JProfiler adds a semantic layer on top of the low-level profiling data, like JDBC, JPA/Hibernate, JMS and JNDI calls that are presented in the CPU profiling views. With its JEE support, JProfiler bridges the gap between a code profiler and a high-level JEE monitoring tool. Higher level profiling data JProfiler has a number of probes that show you higher level data from interesting subsystems in the JRE. In addition to the Java EE subsystems like JDBC, JPA/Hibernate, JSP/Servlets, JMS, web services and JNDI, JProfiler also presents high level information about RMI calls, files, sockets and processes. Each of these probes has its own set of useful views that gives you general insight, highlights performance problems and allows you to trace single events. And what's more, all these views are also available for your own custom probes that you can configure on the fly within JProfiler. Stellar analysis of memory leaks Finding a memory leak can be impossible without the right tool. JProfiler's heap walker offers you an intuitive interface to solve both simple and complex memory problems. 5 different views and lots of inspections show different aspects of the current set of objects. Each view provides you with essential insights on the selected objects and lets you switch to different objects sets. Questions like why objects are not garbage collected are answered with a single click of the mouse. Extensive QA capabilities JProfiler is ideally suited as a QA tool, both during development as well as for dedicated QA teams. The rich functionality around snapshot comparisons makes it easy to track progress. JProfiler has strong support for command line operations. This includes the ability to profile, export snapshot data and create snapshots comparisons from the command line. The ant tasks bundled with JProfiler allow you to perform all command line operations from your build script. Broadest support for platforms, IDEs and application servers JProfiler integrates into your environment: We provide native agent libraries for a wide range of platforms, both for 32-bit and 64-bit JVMs. Integrations into all popular IDEs makes profiling during development as easy as running your application. And the large number of integrations wizards for nearly all application servers on the market ensures that you can get started with a few clicks and not with reading documentation. Low overhead JProfiler records data only when you need it. In fact, you can start your application with the JProfiler agent and attach the JProfiler GUI at a later time. When you do not record any data, the overhead is extremely small. That's what we call on demand profiling. Invariably, there are a lot of things you can adjust in an advanced profiler. JProfiler shows you how your profiling settings will impact performance and offers you templates to quickly select profiling settings for common use cases. The powerful CPU profiler Fixing performance bottlenecks is the most frequent use case for a profiler. However, CPU data can be overwhelming in its level of detail and the way data is collected can make a huge difference in usability. With JProfiler, you have a decisive advantage when trying to find the reason for a problem. Call tree view filters, aggregation levels and thread status selectors are just some examples of JProfiler's versatility in this area. The integrated thread profiler Problems related to threading are much more frequent than one might assume. Without a thread profiler, you only have a minimal chance to tackle such issues. A whole range of otherwise opaque problems can be solved when using JProfiler, such as increasing liveness in a multi-threaded application that uses too much locking. Thread profiling not only has a separate view section in JProfiler, it is also tightly integrated into the CPU profiling views. Supported Platforms JProfiler supports profiling on the following platforms: Windows Mac OS X Linux FreeBSD Solaris AIX HP-UX JProfiler Screencasts We're regularly recording new screencasts for JProfiler in our blog. A filtered list of screencasts for all products can be viewed directly in the blog. Profiling JPA/Hibernate Java profiling across JVM boundaries Inspections in the heap walker WATCH MORE SCREENCASTS Download Order Need server monitoring? Have a look at JProfiler's sibling product perfino. perfino is an APM tool for monitoring production servers. Latest Versions JProfiler 9.2 2016-06-21 Download • Change log perfino 2.0.2 2016-01-21 Download • Change log install4j 6.1.2 2016-06-22 Download • Change log Awards JProfiler Best Java Profiling / Testing Tool ej-technologies Blog • Contact • Terms of Use © Copyright 2001-2016 ej-technologies GmbH ej-technologies Home Company News Products JProfiler perfino install4j Download JProfiler perfino install4j exe4j Support Order"	"null"	"null"	"Commercial profiler."	"true"
"Performance analysis"	"LatencyUtils"	"https://github.com/LatencyUtils/LatencyUtils"	"Utilities for latency measurement and reporting."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"238"	"31"	"24"	"GitHub - LatencyUtils/LatencyUtils: Utilities for latency measurement and reporting Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 238 Fork 24 LatencyUtils/LatencyUtils Code Issues 3 Pull requests 0 Pulse Graphs Utilities for latency measurement and reporting http://LatencyUtils.github.com/LatencyUtils/ 92 commits 2 branches 9 releases 5 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show LatencyUtils-2.0.3 LatencyUtils-2.0.2 LatencyUtils-2.0.1 LatencyUtils-1.1.1 LatencyUtils-1.0.5 LatencyUtils-1.0.4 LatencyUtils-1.0.3 LatencyUtils-1.0.2 LatencyUtils-1.0.1 Nothing to show New pull request Latest commit d8f51f3 Dec 15, 2015 Gil Tene [maven-release-plugin] prepare for next development iteration Permalink Failed to load latest commit information. src fixed JavaDoc typo Apr 21, 2015 .gitignore updated .gitignore Nov 19, 2014 LICENSE Added BSD 2-Clause license to LICENSE file. This is *in addition to* … Mar 10, 2014 README.md Updated to v2.0.1 new API Nov 23, 2014 pom.xml [maven-release-plugin] prepare for next development iteration Dec 15, 2015 README.md LatencyUtils A latency stats tracking package The LatencyUtils package includes useful utilities for tracking latencies. Especially in common in-process recording scenarios, which can exhibit significant coordinated omission sensitivity without proper handling. LatencyStats instances are used to track recorded latencies in the common use case the often follow this pattern:  LatencyStats myOpStats = new LatencyStats();  ...   // During normal operation, record all operation latencies into a LatencyStats instance:   long startTime = System.nanoTime();  // Perform operation:  doMyOperation(...);  // Record operation latency:  myOpStats.recordLatency(System.nanoTime() - startTime);  ...   // Later, report on stats collected:  Histogram intervalHistogram = myOpStats.getIntervalHistogram();   intervalHistogram.getHistogramData().outputPercentileDistribution(System.out, 1000000.0); The problem Latency tracking of in-process operations usually consists simple time sampling around a tracked operation. E.g. a database read operation for which latency statistics are being developed may be surrounded by time measurement operation immediately before and after the operation is performed, with the difference in time recorded in some aggregate statistics gathering form (average, std. deviation, histogram,. etc.) which is later used to report on the experienced latency behavior of the tracked operation. The problem with this extremely common form of latency behavior tracking is that whenever pauses occur in the system, latency statistics become significantly skewed toward falsely-optimistic values. This occurs in two key ways: When a pause occurs during a tracked operation, a single long recorded latency will appear in the recorded values, with no long latencies associated with any pending requests that may be stalled by the pause. When a pause occurs outside of the tracked operation (and outside of the tracked time window) no long latency value would be recorded, even though any requested operation would be stalled by the pause. The Solution The LatencyStats class is designed for simple, drop-in use as a latency behavior recording object in common in-process latency recording and tracking situations. LatencyStats includes under-the-hood tracking and correction of pause effects, compensating for coordinated omission. It does so by using pluggable pause detectors and interval estimators that together with LatencyStats will transparently produce corrected histogram values for the recorded latency behavior. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/LatencyUtils/LatencyUtils"	"Utilities for latency measurement and reporting."	"true"
"Performance analysis"	"XRebel"	"http://zeroturnaround.com/software/xrebel/"	"A commercial profiler for Java Web applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"XRebel - Profiler for Java web apps | zeroturnaround.com Search the site Find it! JRebel XRebel RebelLabs Blog Forum Company Why XRebel Features Documentation Download Buy Try XRebel for free Profiler for Java web applications XRebel is a browser widget that profiles your application server in real time. It raises issues with slow requests and excessive IO, allowing you to quickly find the root cause. Try XRebel now Tell me more Some of our awesome clients XRebel is unique Built for everybody. Useful for experts and junior developers alike. Contextual. Retrieve relevant information for the current page to easily find and fix common performance issues. Rapid feedback. Make performance tweaks continuously for better code quality. Be truly agile. Transactional. Follow transactions starting from the web request through different threads, applications and JVMs. Key features Application profiling Track the time spent on each request. Find slow methods and make them run faster. Messages and jobs Monitor messages and background jobs. Fix resource hogs. Database and NoSQL Get insight into database activity. Spot methods that query too much. Exceptions Discover hidden exceptions. Follow the stack trace and fix the problems. Web services and RMI Get a detailed overview of invocations executed. Detect slow calls. Learn More Get started 1 Download Get your XRebel Trial. It is free. No credit card information needed. 2 Set up Extract the archive. Add xrebel.jar to your server startup (using -javaagent). 3 Run Launch your web application. Find the XRebel toolbar in the bottom left corner of the browser. Company Careers Contact Us Our story Resources JRebel White Paper (PDF) Devs Productivity Report IT Ops & DevOps Productivity Report Rocket powered Java development XRebel ROI White Paper All rights reserved. Copyright © 2007-2015 ZeroTurnaround. Website Terms & Conditions / Trademarks Twitter Facebook LinkedIn RSS By using our site you understand and agree that zeroturnaround.com website uses various cookies. More info available in website terms and conditions. OK close Questions? Feedback? powered by Olark live chat software"	"null"	"null"	"A commercial profiler for Java Web applications."	"true"
"Performance analysis"	"YourKit Java Profiler"	"https://www.yourkit.com/features/"	"Commercial profiler."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Performance and Memory Java Profiler - YourKit Java Profiler Products   Docs   Forum   Company Java Profiler Fully featured low overhead profiler for Java EE and Java SE platforms. Overview & Features Download Buy & Upgrade .NET Profiler Easy to use performance and memory profiler for .NET framework. Supports ASP.NET, Silverlight, .NET Windows services and more. Overview & Features Download Buy & Upgrade Java Profiler Overview & Features   Benefits   Download   Buy & Upgrade   What's New   Early Access   Docs The Industry Leader Among Profiling Tools CPU and memory profiling has never been easier, and smarter at the same time. YourKit has developed a revolutionary approach to profiling applications at both development and production stages, bringing unparalleled benefits to professional Java developers. Ready for your tasks Profile any SE or EE application, server, technology and framework; on multiple platforms; locally and remotely; in development, testing and production. For teams and companies of any size. Profile anywhere Enterprise-ready Controllable overhead Affordable, permissive licensing Comprehensive, Fully featured All-in-one profiler utilizes all of the advanced Java profiling features and capabilities. CPU profiling - investigate performance issues Memory profiling - memory leaks, usage, GC Threads and synchronization Exception profiling Web, database, I/O Easy and User-friendly Straightforward installation process, with the most reasonable defaults; seamless integration with popular IDEs and application servers; minimum extra configuration. Profiling is easy Developer friendly environment Powerful and Intelligent YourKit goes far beyond a traditional profiler's capabilities by offering high-level results and advanced, unique automated analysis. High-level monitoring: web, database, I/O Powerful analysis capabilities Automated profiling Open: export to external formats Profile anywhere You can profile any application running on the JVM, on various platforms. Any kind of application: Java SE, Java EE, WebStart, applet Any framework and technology: EJB, JDBC, JSP/Servlets, Struts, Hibernate, etc. Pure Java as well as JVM languages such as Scala, JRuby and others All popular operating systems: Windows (x86/x64) Mac OS X (x86/x64) Linux (x86/x64, ARMv5/ARMv7/AArch64, ppc/ppc64/ppc64le) AIX (ppc/ppc64) Solaris (SPARC, x86/x64) HP-UX (IA-64) FreeBSD (x86/x64) All popular JVMs: Sun/Oracle HotSpot OpenJDK IBM Java Local and remote profiling [top] Enterprise-ready Profile any EE server: Tomcat, JBoss, WebLogic, WebSphere, GlassFish, Jetty, Geronimo, JRun, and any other. Any framework and technology: EJB, JDBC, JSP/Servlets, Struts, Hibernate, etc. Easily enable profiling with the integration wizard, which supports all popular servers, as well as offers the ""Generic server"" option for any other server Local and remote: easily profile servers running on developer machine as well as on a remote server, including production Built-in SSH tunneling support simplifies profiling in restricted network conditions Fully controllable profiling overhead Permissive license policy allows unlimited number of profiled applications High-level profiling results to see the big picture and low-level detail to pinpoint issues Deobfuscation support: profiler restores original class, method and field names of applications obfuscated with RetroGuard, ProGuard, yGuard, Zelix KlassMaster, Allatori if you provide corresponding obfuscation log [top] Local and remote profiling Profile a remote application as easily as a local one: Remote EE server integration wizard enables profiling in a console mode Remote attach wizard Built-in SSH tunneling support simplifies profiling in restricted network conditions [top] Controllable overhead Full control of imposed profiling overhead by using appropriate startup options and utilizing profiling modes on demand Minor overhead by default: all profiling activities which may cause noticeable overhead are off unless you explicitly turn them on EE server integration wizard suggests even stricter default limitations for production use [top] Affordable, permissive licensing Flexible commercial licensing model: per-seat, floating, enterprise Multi-platform and multi-processor licensing Fair and cost effective: great volume discounts; licensed are profiler client copies, with unlimited profiler agent copies to profile as many applications or servers as you need, in development, testing or production stages - forget the greedy per-CPU licensing Free embedding into production: distribute the profiler agent with your real-world commercial applications free of charge, to ease your product maintenance and improve your customer support. Special offerings to academic and scientific use Open source project developers and maintainers may apply for a free license [top] Profiling is easy Easiest installation and configuration EE server integration wizards IDE support allows you to Profile applications from within Eclipse, IntelliJ IDEA, NetBeans, JDeveloper just like you Run or Debug Attach mode allows on-demand profiling of JVM instances started without the profiler agent If necessary, manually enable profiling of your application by adding a single JVM command line option; no need to tweak classpath etc. [top] Developer friendly environment Profile from within your integrated development environment (IDE): Plugins for Eclipse, IntelliJ IDEA, NetBeans, JDeveloper Profile just as easy as you Run or Debug Open exact source code line from the profiling results in your IDE [top] CPU profiling - investigate performance issues CPU usage graph showing total, kernel and garbage collector times is always available Choose from available profiling modes -- tracing, sampling, call counting -- to balance between result accuracy and fullness and profiling overhead Alternatively, estimate CPU usage retrospectively, basing on recorded thread telemetry data CPU tracing's adaptive mode automatically controls profiling overhead, user no longer needs to explicitly choose filters to exclude methods from profiling as other profilers require CPU views present results as call trees, hot spots, method lists, back traces, merged callees and callees lists High-level profiling available: SQL calls, web requests What-if feature: to concentrate on what's most important, you can exclude particular method calls from the profiling results, or focus on particular calls only Compare snapshots to see what's changed [top] Memory profiling - memory leaks, usage, GC Memory usage graphs show heap and non-heap memory pools, GC activity and, if recorded, object creation rate per-second Comprehensive heap inspection and analysis Object allocation recording to solve garbage collection and memory allocation issues. Available settings allow to balance between result fullness and profiling overhead. In particular, consider the unique object counting mode with almost zero overhead. The richest UI to analyze memory usage and find memory leaks Paths from roots to analyze memory leaks and object retention, with the ability to immediately see what would happen if particular references were excluded (i.e. to test a proposed memory leak fix effect without re-running the application) Find objects holding most memory with dominator tree and class list Dissect objects by category, on and on: Class Class loader Web application (benefit from expert-level knowledge of popular servers' internals!) Generation (time of creation) Reachability (string, weak, soft, pending finalization, dead) Shallow size range Allocation point, if recorded Object explorer to inspect individual objects Garbage collection profiling to estimate garbage collector load, and, if garbage collection takes a significant amount of time, pin-point the problematic code Automatic inspections detect typical problems. Performing this type of analysis by hand would be a very complicated (if at all possible) task. Support of HPROF binary format snapshots and the JVM built-in heap dumper Ability to export the profiler format memory snapshots to HPROF binary format for processing with 3rd party tools Set description language to use in automated memory tests [top] Threads, monitors, exceptions Thread profiling: monitor thread states and stacks, estimate CPU usage in a time range Deadlock detector Exception profiling: where thrown, of what class and how many Monitor profiling: investigate synchronization issues [top] High-level results Event recording: in addition to low level profiling results such as method calls, the profiler can record higher level events with their essential properties such as database queries, web requests and I/O calls. Use built-in probes to recognize typical problems or write your own to inspect specifics of your particular application. Performance charts show basic and higher-level telemetry graphs of web, database, I/O activity. [top] Powerful analysis capabilities Immediately see profiling results as they come, in real time Capture a snapshot for a more sophisticated analysis, to save the results for history records, share them Compare performance or memory snapshots to see what's changed Lightweight basic telemetry graphs are always available. Very useful and unique feature is that the recent telemetry results are remembered inside the profiler agent. This allows you to connect to the profiled application on demand, being able to discover how the application behaved in the past. Automatic inspections detect typical problems. Performing this type of analysis by hand would be a very complicated (if at all possible) task. [top] Automated profiling In addition to the rich UI capabilities for interactive profiling, profiling can also be conducted semi- or fully automatically. Startup options to immediately activate desired profiling modes Triggers to perform actions on events such as particular method call or a monitored value reaching its threshold Probes to execute arbitrary code on invocation of particular methods API to control profiling of this or another application: switch profiling modes and store profiling results Command line tool to perform some profiling tasks without using the UI [top] Export to external formats In addition to the rich analysis capabilities of the profiler, the profiled results can be exported to external form to process with 3rd party tools or share with those not having the profiler. export to XML, HTML, CSV, plain text export from UI export automatically via a command line tool export memory snapshots in the profiler format to widely recognized HPROF binary format in tables and graphs, selected result text can be copied to clipboard [top] What's new February 26, 2016 YourKit Java Profiler 2016.02 released Changes » YourKit Profiler 2016.02 for .NET released Changes » News archive » Awards YourKit Java Profiler received the Java Developer's Journal Editors' Choice Award. Customers Copyright (c) 2003-2016 YourKit. All rights reserved."	"null"	"null"	"Commercial profiler."	"true"
"Platform"	"Spring"	"http://projects.spring.io/spring-framework/"	"Provides many packages ranging from dependency injection to aspect-oriented programming to security."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9515"	"1936"	"7825"	"GitHub - spring-projects/spring-framework: The Spring Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,936 Star 9,515 Fork 7,825 spring-projects/spring-framework Code Pull requests 123 Wiki Pulse Graphs The Spring Framework http://projects.spring.io/spring-framework 12,892 commits 11 branches 91 releases 166 contributors Java 99.5% AspectJ 0.2% Groovy 0.2% HTML 0.1% FreeMarker 0.0% CSS 0.0% Java AspectJ Groovy HTML FreeMarker CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0.x 3.1.x 3.2.x 4.0.x 4.1.x 4.2.x 4.3.x beanbuilder conversation gh-pages master Nothing to show v4.3.1.RELEASE v4.3.0.RELEASE v4.3.0.RC2 v4.3.0.RC1 v4.2.7.RELEASE v4.2.6.RELEASE v4.2.5.RELEASE v4.2.4.RELEASE v4.2.3.RELEASE v4.2.2.RELEASE v4.2.1.RELEASE v4.2.0.RELEASE v4.2.0.RC3 v4.2.0.RC2 v4.2.0.RC1 v4.1.9.RELEASE v4.1.8.RELEASE v4.1.7.RELEASE v4.1.6.RELEASE v4.1.5.RELEASE v4.1.4.RELEASE v4.1.3.RELEASE v4.1.2.RELEASE v4.1.1.RELEASE v4.1.0.RELEASE v4.1.0.RC2 v4.1.0.RC1 v4.0.9.RELEASE v4.0.8.RELEASE v4.0.7.RELEASE v4.0.6.RELEASE v4.0.5.RELEASE v4.0.4.RELEASE v4.0.3.RELEASE v4.0.2.RELEASE v4.0.1.RELEASE v4.0.0.RELEASE v4.0.0.RC2 v4.0.0.RC1 v4.0.0.M3 v4.0.0.M2 v4.0.0.M1 v3.2.17.RELEASE v3.2.16.RELEASE v3.2.15.RELEASE v3.2.14.RELEASE v3.2.13.RELEASE v3.2.12.RELEASE v3.2.11.RELEASE v3.2.10.RELEASE v3.2.9.RELEASE v3.2.8.RELEASE v3.2.7.RELEASE v3.2.6.RELEASE v3.2.5.RELEASE v3.2.4.RELEASE v3.2.3.RELEASE v3.2.2.RELEASE v3.2.1.RELEASE v3.2.0.RELEASE v3.2.0.RC2 v3.2.0.RC2-A v3.2.0.RC1 v3.2.0.M2 v3.2.0.M1 v3.1.4.RELEASE v3.1.3.RELEASE v3.1.2.RELEASE v3.1.1.RELEASE v3.1.0.RELEASE v3.1.0.RC2 v3.1.0.RC1 v3.1.0.M2 v3.1.0.M1 v3.0.7.RELEASE v3.0.6.RELEASE v3.0.5.RELEASE v3.0.4.RELEASE v3.0.3.RELEASE v3.0.2.RELEASE v3.0.1.RELEASE v3.0.1.RELEASE.A v3.0.1.RELEASE-A v3.0.0.RELEASE v3.0.0.RC3 v3.0.0.RC2 v3.0.0.RC1 v3.0.0.M4 v3.0.0.M3 v3.0.0.M2 v3.0.0.M1 Nothing to show New pull request Latest commit 3f317b7 Jul 15, 2016 sbrannen Clean up warnings in spring-web Permalink Failed to load latest commit information. .settings/gradle Remove spring-asm and inline ASM 4 into spring-core Aug 10, 2012 buildSrc/src/main Fix maven dependency scope conflicts in MergePlugin May 11, 2015 gradle Upgrade build to Gradle 2.14 Jul 4, 2016 spring-aop/src Java 8 getParameterCount() instead of getParameterTypes().length Jul 7, 2016 spring-aspects Introduce log4j 2 for Spring's test suite Jul 5, 2016 spring-beans-groovy/src/main Explicit type can be replaced by <> Jul 5, 2016 spring-beans/src Fixed typo: ""occured""->""occurred"" Jul 8, 2016 spring-context-support/src Upgrade tests to EhCache 2.10+ Jul 11, 2016 spring-context ConfigurationClassParser load annotations through source class loader Jul 15, 2016 spring-core/src Consistent alias processing behind AnnotatedTypeMetadata abstraction … Jul 15, 2016 spring-expression StandardTypeConverter initializes default ConversionService against v… Jul 14, 2016 spring-framework-bom Add link to docs Aug 16, 2015 spring-instrument/src Introduce log4j 2 for Spring's test suite Jul 5, 2016 spring-jdbc/src Add @FunctionalInterface on candidate interfaces Jul 6, 2016 spring-jms/src Fixed typo: ""occured""->""occurred"" Jul 8, 2016 spring-messaging/src MessageHeaderAccessor properly removes header even in case of null value Jul 15, 2016 spring-orm/src Unwrap JPA PersistenceException on flush failure (for Hibernate 5.2) Jul 13, 2016 spring-oxm Fixed typo: ""occured""->""occurred"" Jul 8, 2016 spring-test Note in TEL: before/after test exec. callbacks don't work w/ JUnit 4 … Jul 14, 2016 spring-tx/src Aspect actually applies in PersistenceExceptionTranslationPostProcess… Jul 13, 2016 spring-web-reactive Clean up warnings in Gradle build Jul 15, 2016 spring-web/src Clean up warnings in spring-web Jul 15, 2016 spring-webmvc/src Polishing Jul 15, 2016 spring-websocket/src Java 8 getParameterCount() instead of getParameterTypes().length Jul 6, 2016 src Polish doc Jul 14, 2016 .gitignore Add .gradletasknamecache to .gitignore Nov 18, 2013 .mailmap Change gopivotal.com to pivotal.io Oct 5, 2014 CODE_OF_CONDUCT.adoc Add Code of Conduct Feb 1, 2016 CONTRIBUTING-DOCUMENTATION.adoc Hard-wrap CONTRIBUTING-DOCUMENTATION at 90 chars Jan 9, 2014 CONTRIBUTING.md Update link to Spring CLA in CONTRIBUTING doc Jul 12, 2016 README.md Add Code of Conduct Feb 1, 2016 build.gradle Fixed Jaxb2CollectionHttpMessageConverterTests Jul 14, 2016 gradle.properties Next Development Version Jul 4, 2016 gradlew Upgrade to Gradle 2.13 Apr 26, 2016 gradlew.bat Upgrade to Gradle 2.13 Apr 26, 2016 import-into-eclipse.bat Add --no-daemon to Gradle import Apr 15, 2016 import-into-eclipse.sh Add --no-daemon to Gradle import Apr 15, 2016 import-into-idea.md Update IDEA guidelines May 2, 2014 settings.gradle Update build for spring-web-reactive module Jul 14, 2016 README.md Spring Framework The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications -- on any kind of deployment platform. A key element of Spring is infrastructural support at the application level: Spring focuses on the ""plumbing"" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments. The framework also serves as the foundation for Spring Integration, Spring Batch and the rest of the Spring family of projects. Browse the repositories under the Spring organization on GitHub for a full list. Code of Conduct This project adheres to the Contributor Covenant code of conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to spring-code-of-conduct@pivotal.io. Downloading Artifacts See downloading Spring artifacts for Maven repository information. Unable to use Maven or other transitive dependency management tools? See building a distribution with dependencies. Documentation See the current Javadoc and reference docs. Getting Support Check out the spring tags on Stack Overflow. Commercial support is available too. Issue Tracking Report issues via the Spring Framework JIRA. Understand our issue management process by reading about the lifecycle of an issue. Think you've found a bug? Please consider submitting a reproduction project via the spring-framework-issues GitHub repository. The readme there provides simple step-by-step instructions. Building from Source The Spring Framework uses a Gradle-based build system. In the instructions below, ./gradlew is invoked from the root of the source tree and serves as a cross-platform, self-contained bootstrap mechanism for the build. Prerequisites Git and JDK 8 update 20 or later Be sure that your JAVA_HOME environment variable points to the jdk1.8.0 folder extracted from the JDK download. Check out sources git clone git@github.com:spring-projects/spring-framework.git Import sources into your IDE Run ./import-into-eclipse.sh or read import-into-idea.md as appropriate. Note: Per the prerequisites above, ensure that you have JDK 8 configured properly in your IDE. Install all spring-* jars into your local Maven cache ./gradlew install Compile and test; build all jars, distribution zips, and docs ./gradlew build ... and discover more commands with ./gradlew tasks. See also the Gradle build and release FAQ. Contributing Pull requests are welcome; see the contributor guidelines for details. Staying in Touch Follow @SpringCentral as well as @SpringFramework and its team members on Twitter. In-depth articles can be found at The Spring Blog, and releases are announced via our news feed. License The Spring Framework is released under version 2.0 of the Apache License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spring-projects/spring-framework"	"Provides many packages ranging from dependency injection to aspect-oriented programming to security."	"true"
"Reactive libraries"	"Reactive Streams"	"https://github.com/reactive-streams/reactive-streams-jvm/"	"Provide a standard for asynchronous stream processing with non-blocking backpressure."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1178"	"156"	"98"	"GitHub - reactive-streams/reactive-streams-jvm: Reactive Streams Specification for the JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 156 Star 1,178 Fork 98 reactive-streams/reactive-streams-jvm Code Issues 23 Pull requests 4 Pulse Graphs Reactive Streams Specification for the JVM http://www.reactive-streams.org/ 337 commits 7 branches 14 releases 18 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags edit-doc-simplified-types master provide-publisher-ktoso-rebased simplified-api wip-compuatation-fix-√ wip-signing-from-console wip-travis-fix Nothing to show v1.0.0 v1.0.0.RC5 v1.0.0.RC4 v1.0.0.RC3 v1.0.0.RC2 v1.0.0.RC1 v1.0.0.M3 v1.0.0.M2 v1.0.0.M1 v0.4.0 v0.4.0.M2 v0.4.0.M1 v0.3 v0.1 Nothing to show New pull request Latest commit 981c980 Jul 6, 2016 viktorklang committed on GitHub Merge pull request #331 from ktoso/wip-fix-minor-misalignment-with-co… … …mments  =tck fixes minor misalignment between code and comment, found via .NET port Permalink Failed to load latest commit information. api add space to javadoc Mar 23, 2015 examples Rename SyncSybscriber.foreach to whenNext Aug 30, 2015 gradle/wrapper Update to Gradle 2.12 Apr 6, 2016 tck =tck fixes minor misalignment between code and comment, found via .NE… Jun 23, 2016 .gitignore fix #160 Dec 5, 2014 .travis.yml +tck #308 allow configuring ""no events during N time"" separately Apr 5, 2016 CONTRIBUTING.md +TCK verifyNoAsyncErrors now by default waits, fixes spec111 Mar 25, 2015 COPYING Initial implementation Feb 28, 2014 CopyrightWaivers.txt Reintegrate dangling footnote in Publisher section. Apr 8, 2016 LICENSE Initial implementation Feb 28, 2014 README.md Reintegrate dangling footnote in Publisher section. Apr 8, 2016 RELEASE-NOTES.md Adds RELEASE-NOTES.md which is intended to contain release informatio… Sep 29, 2014 build.gradle Log test output events to the console Feb 2, 2016 gradlew fix #96 Nov 22, 2014 gradlew.bat fix #96 Nov 22, 2014 settings.gradle Build improvements. Dec 3, 2014 README.md Reactive Streams The purpose of Reactive Streams is to provide a standard for asynchronous stream processing with non-blocking backpressure. The latest release is available on Maven Central as <dependency>   <groupId>org.reactivestreams</groupId>   <artifactId>reactive-streams</artifactId>   <version>1.0.0</version> </dependency> <dependency>   <groupId>org.reactivestreams</groupId>   <artifactId>reactive-streams-tck</artifactId>   <version>1.0.0</version>   <scope>test</scope> </dependency> Goals, Design and Scope Handling streams of data—especially “live” data whose volume is not predetermined—requires special care in an asynchronous system. The most prominent issue is that resource consumption needs to be carefully controlled such that a fast data source does not overwhelm the stream destination. Asynchrony is needed in order to enable the parallel use of computing resources, on collaborating network hosts or multiple CPU cores within a single machine. The main goal of Reactive Streams is to govern the exchange of stream data across an asynchronous boundary – think passing elements on to another thread or thread-pool — while ensuring that the receiving side is not forced to buffer arbitrary amounts of data. In other words, backpressure is an integral part of this model in order to allow the queues which mediate between threads to be bounded. The benefits of asynchronous processing would be negated if the communication of backpressure were synchronous (see also the Reactive Manifesto), therefore care has been taken to mandate fully non-blocking and asynchronous behavior of all aspects of a Reactive Streams implementation. It is the intention of this specification to allow the creation of many conforming implementations, which by virtue of abiding by the rules will be able to interoperate smoothly, preserving the aforementioned benefits and characteristics across the whole processing graph of a stream application. It should be noted that the precise nature of stream manipulations (transformation, splitting, merging, etc.) is not covered by this specification. Reactive Streams are only concerned with mediating the stream of data between different API Components. In their development care has been taken to ensure that all basic ways of combining streams can be expressed. In summary, Reactive Streams is a standard and specification for Stream-oriented libraries for the JVM that process a potentially unbounded number of elements in sequence, asynchronously passing elements between components, with mandatory non-blocking backpressure. The Reactive Streams specification consists of the following parts: The API specifies the types to implement Reactive Streams and achieve interoperability between different implementations. The Technology Compatibility Kit (TCK) is a standard test suite for conformance testing of implementations. Implementations are free to implement additional features not covered by the specification as long as they conform to the API requirements and pass the tests in the TCK. API Components The API consists of the following components that are required to be provided by Reactive Stream implementations: Publisher Subscriber Subscription Processor A Publisher is a provider of a potentially unbounded number of sequenced elements, publishing them according to the demand received from its Subscriber(s). In response to a call to Publisher.subscribe(Subscriber) the possible invocation sequences for methods on the Subscriber are given by the following protocol: onSubscribe onNext* (onError | onComplete)?  This means that onSubscribe is always signalled, followed by a possibly unbounded number of onNext signals (as requested by Subscriber) followed by an onError signal if there is a failure, or an onComplete signal when no more elements are available—all as long as the Subscription is not cancelled. NOTES The specifications below use binding words in capital letters from https://www.ietf.org/rfc/rfc2119.txt The terms emit, signal or send are interchangeable. The specifications below will use signal. The terms synchronously or synchronous refer to executing in the calling Thread. The term ""return normally"" means ""only throws exceptions that are explicitly allowed by the rule"". SPECIFICATION 1. Publisher (Code) public interface Publisher<T> {     public void subscribe(Subscriber<? super T> s); } ID Rule 1 The total number of onNext signals sent by a Publisher to a Subscriber MUST be less than or equal to the total number of elements requested by that Subscriber´s Subscription at all times. 2 A Publisher MAY signal less onNext than requested and terminate the Subscription by calling onComplete or onError. 3 onSubscribe, onNext, onError and onComplete signaled to a Subscriber MUST be signaled sequentially (no concurrent notifications). 4 If a Publisher fails it MUST signal an onError. 5 If a Publisher terminates successfully (finite stream) it MUST signal an onComplete. 6 If a Publisher signals either onError or onComplete on a Subscriber, that Subscriber’s Subscription MUST be considered cancelled. 7 Once a terminal state has been signaled (onError, onComplete) it is REQUIRED that no further signals occur. 8 If a Subscription is cancelled its Subscriber MUST eventually stop being signaled. 9 Publisher.subscribe MUST call onSubscribe on the provided Subscriber prior to any other signals to that Subscriber and MUST return normally, except when the provided Subscriber is null in which case it MUST throw a java.lang.NullPointerException to the caller, for all other situations [1] the only legal way to signal failure (or reject the Subscriber) is by calling onError (after calling onSubscribe). 10 Publisher.subscribe MAY be called as many times as wanted but MUST be with a different Subscriber each time [see 2.12]. 11 A Publisher MAY support multiple Subscribers and decides whether each Subscription is unicast or multicast. [1] : A stateful Publisher can be overwhelmed, bounded by a finite number of underlying resources, exhausted, shut-down or in a failed state. 2. Subscriber (Code) public interface Subscriber<T> {     public void onSubscribe(Subscription s);     public void onNext(T t);     public void onError(Throwable t);     public void onComplete(); } ID Rule 1 A Subscriber MUST signal demand via Subscription.request(long n) to receive onNext signals. 2 If a Subscriber suspects that its processing of signals will negatively impact its Publisher's responsivity, it is RECOMMENDED that it asynchronously dispatches its signals. 3 Subscriber.onComplete() and Subscriber.onError(Throwable t) MUST NOT call any methods on the Subscription or the Publisher. 4 Subscriber.onComplete() and Subscriber.onError(Throwable t) MUST consider the Subscription cancelled after having received the signal. 5 A Subscriber MUST call Subscription.cancel() on the given Subscription after an onSubscribe signal if it already has an active Subscription. 6 A Subscriber MUST call Subscription.cancel() if it is no longer valid to the Publisher without the Publisher having signaled onError or onComplete. 7 A Subscriber MUST ensure that all calls on its Subscription take place from the same thread or provide for respective external synchronization. 8 A Subscriber MUST be prepared to receive one or more onNext signals after having called Subscription.cancel() if there are still requested elements pending [see 3.12]. Subscription.cancel() does not guarantee to perform the underlying cleaning operations immediately. 9 A Subscriber MUST be prepared to receive an onComplete signal with or without a preceding Subscription.request(long n) call. 10 A Subscriber MUST be prepared to receive an onError signal with or without a preceding Subscription.request(long n) call. 11 A Subscriber MUST make sure that all calls on its onXXX methods happen-before [1] the processing of the respective signals. I.e. the Subscriber must take care of properly publishing the signal to its processing logic. 12 Subscriber.onSubscribe MUST be called at most once for a given Subscriber (based on object equality). 13 Calling onSubscribe, onNext, onError or onComplete MUST return normally except when any provided parameter is null in which case it MUST throw a java.lang.NullPointerException to the caller, for all other situations the only legal way for a Subscriber to signal failure is by cancelling its Subscription. In the case that this rule is violated, any associated Subscription to the Subscriber MUST be considered as cancelled, and the caller MUST raise this error condition in a fashion that is adequate for the runtime environment. [1] : See JMM definition of Happen-Before in section 17.4.5. on http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html 3. Subscription (Code) public interface Subscription {     public void request(long n);     public void cancel(); } ID Rule 1 Subscription.request and Subscription.cancel MUST only be called inside of its Subscriber context. A Subscription represents the unique relationship between a Subscriber and a Publisher [see 2.12]. 2 The Subscription MUST allow the Subscriber to call Subscription.request synchronously from within onNext or onSubscribe. 3 Subscription.request MUST place an upper bound on possible synchronous recursion between Publisher and Subscriber[1]. 4 Subscription.request SHOULD respect the responsivity of its caller by returning in a timely manner[2]. 5 Subscription.cancel MUST respect the responsivity of its caller by returning in a timely manner[2], MUST be idempotent and MUST be thread-safe. 6 After the Subscription is cancelled, additional Subscription.request(long n) MUST be NOPs. 7 After the Subscription is cancelled, additional Subscription.cancel() MUST be NOPs. 8 While the Subscription is not cancelled, Subscription.request(long n) MUST register the given number of additional elements to be produced to the respective subscriber. 9 While the Subscription is not cancelled, Subscription.request(long n) MUST signal onError with a java.lang.IllegalArgumentException if the argument is <= 0. The cause message MUST include a reference to this rule and/or quote the full rule. 10 While the Subscription is not cancelled, Subscription.request(long n) MAY synchronously call onNext on this (or other) subscriber(s). 11 While the Subscription is not cancelled, Subscription.request(long n) MAY synchronously call onComplete or onError on this (or other) subscriber(s). 12 While the Subscription is not cancelled, Subscription.cancel() MUST request the Publisher to eventually stop signaling its Subscriber. The operation is NOT REQUIRED to affect the Subscription immediately. 13 While the Subscription is not cancelled, Subscription.cancel() MUST request the Publisher to eventually drop any references to the corresponding subscriber. Re-subscribing with the same Subscriber object is discouraged [see 2.12], but this specification does not mandate that it is disallowed since that would mean having to store previously cancelled subscriptions indefinitely. 14 While the Subscription is not cancelled, calling Subscription.cancel MAY cause the Publisher, if stateful, to transition into the shut-down state if no other Subscription exists at this point [see 1.9]. 15 Calling Subscription.cancel MUST return normally. The only legal way to signal failure to a Subscriber is via the onError method. 16 Calling Subscription.request MUST return normally. The only legal way to signal failure to a Subscriber is via the onError method. 17 A Subscription MUST support an unbounded number of calls to request and MUST support a demand (sum requested - sum delivered) up to 2^63-1 (java.lang.Long.MAX_VALUE). A demand equal or greater than 2^63-1 (java.lang.Long.MAX_VALUE) MAY be considered by the Publisher as “effectively unbounded”[3]. [1] : An example for undesirable synchronous, open recursion would be Subscriber.onNext -> Subscription.request -> Subscriber.onNext -> …, as it very quickly would result in blowing the calling Thread´s stack. [2] : Avoid heavy computations and other things that would stall the caller´s thread of execution [3] : As it is not feasibly reachable with current or foreseen hardware within a reasonable amount of time (1 element per nanosecond would take 292 years) to fulfill a demand of 2^63-1, it is allowed for a Publisher to stop tracking demand beyond this point. A Subscription is shared by exactly one Publisher and one Subscriber for the purpose of mediating the data exchange between this pair. This is the reason why the subscribe() method does not return the created Subscription, but instead returns void; the Subscription is only passed to the Subscriber via the onSubscribe callback. 4.Processor (Code) public interface Processor<T, R> extends Subscriber<T>, Publisher<R> { } ID Rule 1 A Processor represents a processing stage—which is both a Subscriber and a Publisher and MUST obey the contracts of both. 2 A Processor MAY choose to recover an onError signal. If it chooses to do so, it MUST consider the Subscription cancelled, otherwise it MUST propagate the onError signal to its Subscribers immediately. While not mandated, it can be a good idea to cancel a Processors upstream Subscription when/if its last Subscriber cancels their Subscription, to let the cancellation signal propagate upstream. Asynchronous vs Synchronous Processing The Reactive Streams API prescribes that all processing of elements (onNext) or termination signals (onError, onComplete) MUST NOT block the Publisher. However, each of the on* handlers can process the events synchronously or asynchronously. Take this example: nioSelectorThreadOrigin map(f) filter(p) consumeTo(toNioSelectorOutput)  It has an async origin and an async destination. Let's assume that both origin and destination are selector event loops. The Subscription.request(n) must be chained from the destination to the origin. This is now where each implementation can choose how to do this. The following uses the pipe | character to signal async boundaries (queue and schedule) and R# to represent resources (possibly threads). nioSelectorThreadOrigin | map(f) | filter(p) | consumeTo(toNioSelectorOutput) -------------- R1 ----  | - R2 - | -- R3 --- | ---------- R4 ----------------  In this example each of the 3 consumers, map, filter and consumeTo asynchronously schedule the work. It could be on the same event loop (trampoline), separate threads, whatever. nioSelectorThreadOrigin map(f) filter(p) | consumeTo(toNioSelectorOutput) ------------------- R1 ----------------- | ---------- R2 ----------------  Here it is only the final step that asynchronously schedules, by adding work to the NioSelectorOutput event loop. The map and filter steps are synchronously performed on the origin thread. Or another implementation could fuse the operations to the final consumer: nioSelectorThreadOrigin | map(f) filter(p) consumeTo(toNioSelectorOutput) --------- R1 ---------- | ------------------ R2 -------------------------  All of these variants are ""asynchronous streams"". They all have their place and each has different tradeoffs including performance and implementation complexity. The Reactive Streams contract allows implementations the flexibility to manage resources and scheduling and mix asynchronous and synchronous processing within the bounds of a non-blocking, asynchronous, push-based stream. In order to allow fully asynchronous implementations of all participating API elements—Publisher/Subscription/Subscriber/Processor—all methods defined by these interfaces return void. Subscriber controlled queue bounds One of the underlying design principles is that all buffer sizes are to be bounded and these bounds must be known and controlled by the subscribers. These bounds are expressed in terms of element count (which in turn translates to the invocation count of onNext). Any implementation that aims to support infinite streams (especially high output rate streams) needs to enforce bounds all along the way to avoid out-of-memory errors and constrain resource usage in general. Since back-pressure is mandatory the use of unbounded buffers can be avoided. In general, the only time when a queue might grow without bounds is when the publisher side maintains a higher rate than the subscriber for an extended period of time, but this scenario is handled by backpressure instead. Queue bounds can be controlled by a subscriber signaling demand for the appropriate number of elements. At any point in time the subscriber knows: the total number of elements requested: P the number of elements that have been processed: N Then the maximum number of elements that may arrive—until more demand is signaled to the Publisher—is P - N. In the case that the subscriber also knows the number of elements B in its input buffer then this bound can be refined to P - B - N. These bounds must be respected by a publisher independent of whether the source it represents can be backpressured or not. In the case of sources whose production rate cannot be influenced—for example clock ticks or mouse movement—the publisher must choose to either buffer or drop elements to obey the imposed bounds. Subscribers signaling a demand for one element after the reception of an element effectively implement a Stop-and-Wait protocol where the demand signal is equivalent to acknowledgement. By providing demand for multiple elements the cost of acknowledgement is amortized. It is worth noting that the subscriber is allowed to signal demand at any point in time, allowing it to avoid unnecessary delays between the publisher and the subscriber (i.e. keeping its input buffer filled without having to wait for full round-trips). Legal This project is a collaboration between engineers from Kaazing, Netflix, Pivotal, Red Hat, Twitter, Typesafe and many others. The code is offered to the Public Domain in order to allow free use by interested parties who want to create compatible implementations. For details see COPYING. To the extent possible under law, Reactive Streams Special Interest Group has waived all copyright and related or neighboring rights to Reactive Streams JVM. This work is published from: United States. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/reactive-streams/reactive-streams-jvm/"	"Provide a standard for asynchronous stream processing with non-blocking backpressure."	"true"
"Reactive libraries"	"Reactor"	"http://projectreactor.io/"	"Library for building reactive fast-data applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Project Reactor Project Reactor Home Documentation Github Organization Community Chat Create efficient Reactive systems Reactor is a second-generation Reactive library for building non-blocking applications on the JVM based on the Reactive Streams Specification Reactive Core 2.5.0.M4 Reactor is a fully non-blocking foundation with efficient demand management. It directly interacts with Java 8 functional API, Completable Future, Stream and Duration. Typed [0|1|N] Sequences 2.5.0.M4 Reactor offers 2 reactive composable API Flux [N] and Mono [0|1] extensively implementing Reactive Extensions. It also supports scalable in-memory routing with Bus extensions. Non blocking IO 2.5.0.M1 Suited for Microservices Architecture, Reactor IO offers backpressure-ready network engines for HTTP (including Websockets), TCP and UDP. Reactive Encoding/Decoding is fully supported. Efficient Message Passing Reactor Processors, Operators and Timers can sustain high throughput rates on the order of 10's of millions of messages per second. Plus its low memory footprint should go under most of the radars. Reactor is part of an ongoing research effort to challenge further the possible flow optimizations. Friendly Adoption As a Reactive Engine/SPI, both Reactor Core and IO modules expose reactive streams constructs for focused use cases, eventually combined with Spring, RxJava, Akka Streams, Ratpack... As a Reactive API, reactor framework modules will offer rich consumable features like composition and pub-sub eventing. Guardian of the Latency Scaling-Out to overcome latency and slow microservices is an important tool. Cloud Native apps will have a better chance at effective scale-out with asychronous architectures. To assist such design, Reactor offers non-blocking and backpressure-ready embeddable solutions including local and remote Unicast/Multicast messaging or TCP/HTTP/UDP client & servers. Reactor is Powering Documentation Reactor Core Reactor IO Reactor Addons Reactor 2.0 (previous major release) Family Reactive Streams Commons Pivotal Spring Professional Support Resources ReactiveX Reactive Streams Spring Guides Community Github Twitter Discussion on Gitter Google Group Reactor regroups multiple open source projects licensed under the Apache Software License 2. © 2013-2016 Reactor Project, powered by Pivotal & Spring"	"null"	"null"	"Library for building reactive fast-data applications."	"true"
"Reactive libraries"	"RxJava"	"https://github.com/ReactiveX/RxJava"	"Library for composing asynchronous and event-based programs using observable sequences from the JVM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15239"	"1250"	"2591"	"GitHub - ReactiveX/RxJava: RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,250 Star 15,239 Fork 2,591 ReactiveX/RxJava Code Issues 71 Pull requests 1 Wiki Pulse Graphs RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM. 4,780 commits 3 branches 142 releases 144 contributors Java 99.8% Other 0.2% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.x Switch branches/tags Branches Tags 1.x 2.x gh-pages Nothing to show v2.0.0-DP0 v1.1.7 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.0.16 v1.0.15 v1.0.14 v1.0.13 v1.0.12 v1.0.11 v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0-rc.12 v1.0.0-rc.11 v1.0.0-rc.10 v1.0.0-rc.9 v1.0.0-rc.8 v1.0.0-rc.7 v1.0.0-rc.6 v1.0.0-rc.5 v1.0.0-rc.4 v1.0.0-rc.3 v1.0.0-rc.2 v1.0.0-rc.1 rxjava-0.11.1 rxjava-0.11.0 rxjava-0.10.1 rxjava-0.10.0 rxjava-0.9.2 rxjava-0.9.1 rxjava-0.9.0 rxjava-0.8.4 rxjava-0.8.3 rxjava-0.8.2 rxjava-0.8.1 rxjava-0.8.0 rxjava-0.7.0 rxjava-0.6.3 rxjava-0.6.2 1.1.0 1.0.17 0.20.7 0.20.6 0.20.5 0.20.4 0.20.3 0.20.2 0.20.1 0.20.0 0.20.0-RC6 0.20.0-RC5 0.20.0-RC4 0.20.0-RC3 0.20.0-RC2 0.20.0-RC1 0.19.6 0.19.4 0.19.2 0.19.1 0.19.0 0.18.4 0.18.3 0.18.2 0.18.1 0.18.0 0.17.6 0.17.5 0.17.4 0.17.3 0.17.2 0.17.1 0.17.0 0.17.0-RC7 0.17.0-RC6 0.17.0-RC5 0.17.0-RC4 0.17.0-RC3 0.17.0-RC2 0.17.0-RC1 0.16.1 0.16.0 0.15.1 0.15.0 0.14.11 0.14.10 0.14.9 0.14.8 Nothing to show New pull request Latest commit 65c7070 Jul 11, 2016 bryant1410 committed with akarnokd Fix grammar error in RxJavaHooks javadocs (#4191) Permalink Failed to load latest commit information. gradle 1.x: no need to run gradle assembe by travis (#4183) Jul 9, 2016 src Fix grammar error in RxJavaHooks javadocs (#4191) Jul 11, 2016 .gitattributes GitAttributes for Line Endings Dec 8, 2013 .gitignore 1.x: Ignore local.properties file (#4066) Jun 22, 2016 .travis.yml 1.x: no need to run gradle assembe by travis (#4183) Jul 9, 2016 CHANGES.md Release 1.1.7 changes.md update (#4184) Jul 10, 2016 CONTRIBUTING.md Update branches names in CONTRIBUTING:md (#3943) May 19, 2016 LICENSE Restructure into smaller files Apr 2, 2012 README.md Move status icons to top, add maven version badge. (#4187) Jul 10, 2016 build.gradle 1.x: no need to run gradle assembe by travis (#4183) Jul 9, 2016 gradle.properties Create gradle.properties Feb 6, 2015 gradlew 1.x: Update Gradle to 2.14 (#4018) Jun 17, 2016 gradlew.bat 1.x: Update Gradle to 2.14 (#4018) Jun 17, 2016 pmd.xml 1.x: apply fixes based on PMD suggestions (#4091) Jun 25, 2016 settings.gradle Nebula Build - Single Module Aug 29, 2014 README.md RxJava: Reactive Extensions for the JVM RxJava is a Java VM implementation of Reactive Extensions: a library for composing asynchronous and event-based programs by using observable sequences. It extends the observer pattern to support sequences of data/events and adds operators that allow you to compose sequences together declaratively while abstracting away concerns about things like low-level threading, synchronization, thread-safety and concurrent data structures. Zero Dependencies < 1MB Jar Java 6+ & Android 2.3+ Java 8 lambda support Polyglot (Scala, Groovy, Clojure and Kotlin) Non-opinionated about source of concurrency (threads, pools, event loops, fibers, actors, etc) Async or synchronous execution Virtual time and schedulers for parameterized concurrency Learn more about RxJava on the Wiki Home. Communication Google Group: RxJava Twitter: @RxJava GitHub Issues StackOverflow Versioning Version 1.x is now a stable API and will be supported for several years. Minor 1.x increments (such as 1.1, 1.2, etc) will occur when non-trivial new functionality is added or significant enhancements or bug fixes occur that may have behavioral changes that may affect some edge cases (such as dependence on behavior resulting from a bug). An example of an enhancement that would classify as this is adding reactive pull backpressure support to an operator that previously did not support it. This should be backwards compatible but does behave differently. Patch 1.x.y increments (such as 1.0.0 -> 1.0.1, 1.3.1 -> 1.3.2, etc) will occur for bug fixes and trivial functionality (like adding a method overload). New functionality marked with an @Beta or @Experimental annotation can also be added in patch releases to allow rapid exploration and iteration of unstable new functionality. @Beta APIs marked with the @Beta annotation at the class or method level are subject to change. They can be modified in any way, or even removed in any major or minor release but not in a patch release. If your code is a library itself (i.e. it is used on the CLASSPATH of users outside your own control), you should not use beta APIs, unless you repackage them (e.g. using ProGuard, shading, etc). @Experimental APIs marked with the @Experimental annotation at the class or method level will almost certainly change. They can be modified in any way, or even removed in any major, minor or, patch release. You should not use or rely on them in any production code. They are purely to allow broad testing and feedback. @Deprecated APIs marked with the @Deprecated annotation at the class or method level will remain supported until the next major release but it is recommended to stop using them. APIs marked with @Beta and @Experimental will be marked as deprecated for at least one minor release before they removed in a minor or patch release respectively. rx.internal.* All code inside the rx.internal.* packages is considered private API and should not be relied upon at all. It can change at any time. Full Documentation Wiki Javadoc Binaries Binaries and dependency information for Maven, Ivy, Gradle and others can be found at http://search.maven.org. Example for Gradle: compile 'io.reactivex:rxjava:x.y.z' and for Maven: <dependency>     <groupId>io.reactivex</groupId>     <artifactId>rxjava</artifactId>     <version>x.y.z</version> </dependency> and for Ivy: <dependency org=""io.reactivex"" name=""rxjava"" rev=""x.y.z"" /> Snapshots are available via JFrog: repositories {     maven { url 'https://oss.jfrog.org/libs-snapshot' } }  dependencies {     compile 'io.reactivex:rxjava:1.0.y-SNAPSHOT' } Build To build: $ git clone git@github.com:ReactiveX/RxJava.git $ cd RxJava/ $ ./gradlew build  Futher details on building can be found on the Getting Started page of the wiki. Bugs and Feedback For bugs, questions and discussions please use the Github Issues. LICENSE Copyright 2013 Netflix, Inc. Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ReactiveX/RxJava"	"Library for composing asynchronous and event-based programs using observable sequences from the JVM."	"true"
"Reactive libraries"	"vert.x"	"http://vertx.io/"	"Polyglot event-driven application framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"472"	"98"	"542"	"GitHub - vert-x3/vertx-examples Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 98 Star 472 Fork 542 vert-x3/vertx-examples Code Issues 8 Pull requests 1 Pulse Graphs No description or website provided. 649 commits 14 branches 7 releases 38 contributors Java 40.2% JavaScript 19.9% HTML 16.1% Groovy 7.1% Ruby 6.9% CSS 6.1% Other 3.7% Java JavaScript HTML Groovy Ruby CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.1.0-SNAPSHOT 3.1.0-staging 3.2.0-SNAPSHOT 3.2.0-staging 3.2.1-SNAPSHOT 3.2.1-staging 3.3.0-SNAPSHOT 3.3.0-staging 3.3.0.CR1 3.3.2 codetrans-config master sync vertx-sync Nothing to show 3.3.2 3.3.0 3.2.1 3.2.0 3.0.0 3.0.0-milestone4 3.0.0-milestone3 Nothing to show New pull request Latest commit f3a65b9 Jul 12, 2016 cescoffier Bump version to 3.3.2 Permalink Failed to load latest commit information. amqp-bridge-examples Bump version to 3.3.2 Jul 10, 2016 camel-bridge-examples Bump version to 3.3.2 Jul 10, 2016 ceylon Cleanup Jun 24, 2016 core-examples Bump version to 3.3.2 Jul 10, 2016 docker-examples Bump version to 3.3.2 Jul 12, 2016 examples-utils Bump version to 3.3.2 Jul 10, 2016 fatjar-examples Bump version to 3.3.2 Jul 12, 2016 gradle-redeploy Bump version to 3.3.2 Jul 12, 2016 gradle-simplest Bump version to 3.3.2 Jul 12, 2016 gradle-verticles Bump version to 3.3.2 Jul 12, 2016 heroku-example Bump version to 3.3.2 Jul 10, 2016 ignite-examples Bump version to 3.3.2 Jul 10, 2016 jca-examples Bump version to 3.3.2 Jul 10, 2016 jdbc-examples Bump version to 3.3.2 Jul 10, 2016 jgroups-examples Bump version to 3.3.2 Jul 10, 2016 kotlin-example Bump version to 3.3.2 Jul 12, 2016 mail-examples Bump version to 3.3.2 Jul 12, 2016 maven-service-factory-examples update version of the verticle to deploy Jul 10, 2016 maven-simplest Bump version to 3.3.2 Jul 10, 2016 maven-verticles Bump version to 3.3.2 Jul 10, 2016 metrics-examples Bump version to 3.3.2 Jul 10, 2016 mongo-examples Bump version to 3.3.2 Jul 10, 2016 openshift2-example Bump version to 3.3.2 Jul 10, 2016 openshift3-examples Bump version to 3.3.2 Jul 12, 2016 osgi-examples Bump version to 3.3.2 Jul 10, 2016 redis-examples Bump version to 3.3.2 Jul 10, 2016 rx-examples Bump version to 3.3.2 Jul 10, 2016 service-proxy-examples Bump version to 3.3.2 Jul 12, 2016 shell-examples Bump version to 3.3.2 Jul 10, 2016 spring-examples Bump version to 3.3.2 Jul 10, 2016 sync-examples Bump version to 3.3.2 Jul 10, 2016 unit-examples Bump version to 3.3.2 Jul 10, 2016 web-examples Bump version to 3.3.2 Jul 12, 2016 .gitignore Remove binaries file Jun 6, 2016 LICENSE.txt Create LICENSE.txt Jun 21, 2016 Procfile Bump version Jun 23, 2016 README.adoc Fix #138 Jul 6, 2016 app.json Added app.json and Procfile to work from root Nov 13, 2015 pom.xml Bump version to 3.3.2 Jul 10, 2016 README.adoc Vert.x examples This repository contains a range of examples so you can get up and running easily with Vert.x. Maven users Start with the simplest Maven example to show you how setup a simple Vert.x project that uses Maven. You need to have Java 8 installed and set the JAVA_HOME environment variable to point to your Java 8 installation. Use that as a template for setting up a Maven project with Vert.x. Progress to the simple Maven verticle example to show you how to deploy your code as verticles in a Maven project. Also check Maven verticles examples to show how you can use Maven with Groovy, Ruby and JavaScript verticles. Want to start right away, open the first example in Eclipse Che: Gradle users Start with the simplest Gradle example to show you how setup a simple Vert.x project that uses Gradle. Use that as a template for setting up a Gradle project with Vert.x. Progress to the simple Gradle verticle example to show you how to deploy your code as verticles in a Gradle project Neither Maven nor Gradle users That’s fine too :) You can run most of the examples at the command line using vertx run if you have Vert.x installed (see below). Some examples need examples-utils You may find examples that need examples-utils. You need to build it from link:examples-utils: git clone https://github.com/vert-x3/vertx-examples.git cd vertx-examples cd examples-utils mvn clean install The examples The examples demonstrate how to use all different bits of Vert.x including Vert.x core, Vert.x-Web and various other services and features. Most of the examples have been written as verticles. For more information on verticles please consult the Vert.x core manual. Using verticles allows you to scale and run your code from the command line more easily, but if you prefer to embed, the exact same code in the verticles can also be run embedded if you prefer. It’s really up to you. Verticles are entirely optional in Vert.x. Different languages Most of the examples are available in all the languages that Vert.x supports. You’ll find the examples for the relevant language in a directory src/main/${lang} where lang is an identifier for the language, e.g. java, js, ruby etc. For example you’ll find the Vert.x core Java examples in core-examples/src/main/java and you’ll find the Vert.x core JavaScript examples in core-examples/src/main/js Note All the non-Java examples are automatically generated from the Java examples using our magic code translator. Running the examples Running in your IDE Most of the Java examples can be run directly in your IDE (if you have one!). We provide a main() method in most of the example classes which allows you to conveniently run them directly in your IDE. Just right click the main method or class in your IDE and run as…​ application (supported by all major IDEs). Running at the command line If vertx is installed you can also run any verticle directly on the command line. This way of working may be of interest to you if you don’t want to use Maven or Gradle or perhaps you don’t use an IDE. Or perhaps you’re just a command line kind of person. If you’re coming from using other platforms such as Node.js you might want to work this way. You can think of the vertx command as a bit like the node command in Node.js. Instructions for installing Vert.x are in the next section. Once Vert.x is installed, to run an example, just cd to the example directory and type vertx run followed by the filename of the verticle. For example cd core-examples/src/main/java/io/vertx/example/core vertx run EchoServer.java  cd core-examples/src/main/js/echo vertx run echo_server.js Yes! You can run Java source files directly using Vert.x (no compilation required). Installing Vert.x Note This is only necessary if you want to run Vert.x at the command line. If you’d prefer to work with Maven or Gradle projects then you don’t need to pre-install Vert.x - you just let Maven/Gradle pull in the Vert.x dependencies into your project as you would with any dependency. Pre-requisites: You will need to have Java 8 JDK installed. Download a Vert.x 3 distribution Unzip it somewhere on your disk (e.g. in your home directory) Set your PATH environment variable to include the installation directory Test the install by typing vertx -version. On the download page, you will find several distributions. Each distribution has a different set of components: Min: The min distribution contains only Vert.x Core, the support of the different languages, and the Hazelcast clustering. Full: The full distribution contains all the components of the Vert.x stack. It includes Vert.x web and the different data access technologies. Vert.x core examples The Vert.x core examples contains a wide range of examples using just Vert.x Core. Vert.x-Web examples Vert.x-Web is a toolkit for building web applications using Vert.x The Vert.x-Web examples contains a wide range of examples using Vert.x-Web Vertx unit examples Vertx-unit is a toolkit for writing asynchronous tests. We include some examples of how to use this tool to test your Vert.x (or other asynchronous) applications. The Vert.x Unit examples shows how to use Vert.x Unit. Mail examples The Vert.x Mail examples contains a few examples using Vert.x Mail The mail examples show different ways to create the mail message and send it via tls, ssl etc. The examples either use localhost:25 to send a mail or use host mail.example.com. To actually run the examples you will have to change the mail server and the user credentials in the MailLogin example. Maven Service Factory examples The Vert.x Maven service factory examples shows how to package a verticle that can be deployed using the Maven Service Factory. Such a deployment is also demonstrated using either the command line or the api. Service Proxy Examples The Vert.x Service Proxy examples contains an example of service proxy usage. It depicts how a service provider can be implemented and how the published service can be consumed. OSGi Examples The Vert.x OSGi examples contains a few examples using Vert.x in an OSGi context. Docker examples The Vert.x Docker examples shows how to deploy Vert.x application in Docker containers. It also contains an example of application that can be deployed on Fabric8. Openshift & Kubernetes examples The Vert.x OpenShift 2 example shows how to deploy Vert.x application to OpenShift 2 following the two proposed approaches: using the DIY cartridge or the vert.x 3 cartridge. The Vert.x OpenShift 3 examples shows how to deploy Vert.x applications on Openshift 3 and Kubernetes. It also demonstrates clustering and service discovery. Spring Examples The Vert.x Spring Examples shows how vert.x application can be integrated inside a Spring ecosystem. Redis example The Vert.x Redis Example shows how you can interact with Redis using the vert.x redis client. Mongo example The Vert.x Mongo Example shows how you can interact with MongoDB using the vert.x mongo client. JDBC example The Vert.x JDBC Examples shows how you can interact JDBC Databases using the vert.x JDBC client. JCA example The Vert.x JCA Example project provides a JEE compliant application that enables to you deploy the application into a [Wildfly](http://wildfly.org) application server. While simple in implementation, the JCA examples provides a good point of departure for your own development. AMQP Bridge examples The Vert.x AMQP Bridge Examples show how you can interact with AMQP 1.0 servers using the Vert.x AMQP Bridge. Camel Bridge examples The Vert.x Camel Bridge Examples show how you can use Apache Camel routes from the event bus. Vert.x fatjar examples The Vert.x fatjar Examples show how you can build fatjar with Maven or Gradle. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vert-x3/vertx-examples"	"Polyglot event-driven application framework."	"true"
"REST Frameworks"	"Dropwizard"	"https://dropwizard.github.io/dropwizard/"	"Opinionated framework for setting up modern web applications with Jetty, Jackson, Jersey and Metrics."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Redirecting to http://www.dropwizard.io/0.9.2/docs/ If you are not automatically redirected in 5 seconds click here. Available releases: 0.6.2 0.7.0 0.7.1 0.8.0-rc1 0.8.0-rc2 0.8.0-rc3 0.8.0-rc4 0.8.0-rc5 0.8.0 0.8.1 0.8.2 0.8.4 0.8.5 0.9.0-rc5 0.9.0 0.9.1-rc1 0.9.1 0.9.2 0.9.3"	"null"	"null"	"Opinionated framework for setting up modern web applications with Jetty, Jackson, Jersey and Metrics."	"true"
"REST Frameworks"	"Feign"	"https://github.com/Netflix/feign"	"HTTP client binder inspired by Retrofit, JAXRS-2.0, and WebSocket."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1121"	"270"	"216"	"GitHub - OpenFeign/feign: Feign makes writing java http clients easier Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 270 Star 1,121 Fork 216 OpenFeign/feign Code Issues 45 Pull requests 2 Wiki Pulse Graphs Feign makes writing java http clients easier 486 commits 13 branches 77 releases 53 contributors Java 96.9% Shell 2.1% Batchfile 1.0% Java Shell Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 2.x 3.x 4.x 5.x 6.x 7.x 8.x adrian.benchmarks adrian.no-dagger extend-methodhandler feign-rxjava master Nothing to show v8.18.0 v8.17.0 v8.16.2 v8.16.1 v8.16.0 v8.15.1 v8.15.0 v8.14.4 v8.14.3 v8.14.2 v8.14.1 v8.14.0 v8.13.1 v8.13.0 v8.12.1 v8.12.0 v8.11.0 v8.10.1 v8.10.0 v8.9.1 v8.9.0 v8.8.1 v8.8.0 v8.7.1 v8.7.0 v8.6.1 v8.6.0 v8.5.0 v8.4.1 v8.4.0 v8.3.0 v8.2.0 v8.1.2 v8.1.1 v8.1.0 v8.0.0 v8.0.0-rc.2 v8.0.0-rc.1 v8.0.0-rc.0 v7.6.0 v7.5.0 v7.4.0 v7.3.0 v7.2.1 v7.2.0 v7.1.0 v7.0.0 v6.1.3 v6.0.0 release-9.0.0 9.0.0 6.1.3 6.1.2 6.1.1 6.0.1 6.0.0 5.4.1 5.4.0 5.3.0 5.2.0 5.1.0 5.0.1 5.0.0 4.4.0 4.3.0 4.2.0 4.1.0 4.0.0 3.3.0 3.2.0 3.1.0 3.0.0 2.0.1 2.0.0 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 44d6fd8 Jul 14, 2016 adriancole committed with spencergibb Removes unused gradle build (#420) Permalink Failed to load latest commit information. .mvn Adds maven project under group id io.github.openfeign (#416) Jul 2, 2016 benchmark Adds maven project under group id io.github.openfeign (#416) Jul 2, 2016 codequality Build upgrades Jan 5, 2015 core [maven-release-plugin] prepare for next development iteration Jul 14, 2016 example-github Adds maven project under group id io.github.openfeign (#416) Jul 2, 2016 example-wikipedia Adds maven project under group id io.github.openfeign (#416) Jul 2, 2016 gson [maven-release-plugin] prepare for next development iteration Jul 14, 2016 httpclient [maven-release-plugin] prepare for next development iteration Jul 14, 2016 hystrix [maven-release-plugin] prepare for next development iteration Jul 14, 2016 jackson-jaxb [maven-release-plugin] prepare for next development iteration Jul 14, 2016 jackson [maven-release-plugin] prepare for next development iteration Jul 14, 2016 jaxb [maven-release-plugin] prepare for next development iteration Jul 14, 2016 jaxrs [maven-release-plugin] prepare for next development iteration Jul 14, 2016 okhttp [maven-release-plugin] prepare for next development iteration Jul 14, 2016 ribbon [maven-release-plugin] prepare for next development iteration Jul 14, 2016 sax [maven-release-plugin] prepare for next development iteration Jul 14, 2016 slf4j [maven-release-plugin] prepare for next development iteration Jul 14, 2016 travis Adds travis configuration to publish openfeign (#417) Jul 14, 2016 .gitignore Removes unused gradle build (#420) Jul 13, 2016 .settings.xml Adds travis configuration to publish openfeign (#417) Jul 14, 2016 .travis.yml Re-encrypt keys Jul 14, 2016 CHANGELOG.md Lower case headers in response and use TreeMap to allow case insensit… Jul 11, 2016 CONTRIBUTING.md Adds commit log guidelines Mar 9, 2016 HACKING.md Adds HACKING file, to demystify change to Feign Mar 5, 2016 LICENSE Restructure into smaller files Apr 2, 2012 NOTICE default client: use custom HostnameVerifier if overridden Aug 28, 2013 OSSMETADATA adding OSSMETADATA for NetflixOSS tracking Dec 11, 2015 README.md Update README.md [ci skip] May 27, 2016 mvnw Adds maven project under group id io.github.openfeign (#416) Jul 2, 2016 mvnw.cmd Adds maven project under group id io.github.openfeign (#416) Jul 2, 2016 pom.xml Removes unused gradle build (#420) Jul 14, 2016 README.md Feign makes writing java http clients easier Feign is a java to http client binder inspired by Retrofit, JAXRS-2.0, and WebSocket. Feign's first goal was reducing the complexity of binding Denominator uniformly to http apis regardless of restfulness. Why Feign and not X? You can use tools like Jersey and CXF to write java clients for ReST or SOAP services. You can write your own code on top of http transport libraries like Apache HC. Feign aims to connect your code to http apis with minimal overhead and code. Via customizable decoders and error handling, you should be able to write to any text-based http api. How does Feign work? Feign works by processing annotations into a templatized request. Just before sending it off, arguments are applied to these templates in a straightforward fashion. While this limits Feign to only supporting text-based apis, it dramatically simplified system aspects such as replaying requests. It is also stupid easy to unit test your conversions knowing this. Basics Usage typically looks like this, an adaptation of the canonical Retrofit sample. interface GitHub {   @RequestLine(""GET /repos/{owner}/{repo}/contributors"")   List<Contributor> contributors(@Param(""owner"") String owner, @Param(""repo"") String repo); }  static class Contributor {   String login;   int contributions; }  public static void main(String... args) {   GitHub github = Feign.builder()                        .decoder(new GsonDecoder())                        .target(GitHub.class, ""https://api.github.com"");    // Fetch and print a list of the contributors to this library.   List<Contributor> contributors = github.contributors(""netflix"", ""feign"");   for (Contributor contributor : contributors) {     System.out.println(contributor.login + "" ("" + contributor.contributions + "")"");   } } Customization Feign has several aspects that can be customized. For simple cases, you can use Feign.builder() to construct an API interface with your custom components. For example: interface Bank {   @RequestLine(""POST /account/{id}"")   Account getAccountInfo(@Param(""id"") String id); } ... Bank bank = Feign.builder().decoder(new AccountDecoder()).target(Bank.class, ""https://api.examplebank.com""); Multiple Interfaces Feign can produce multiple api interfaces. These are defined as Target<T> (default HardCodedTarget<T>), which allow for dynamic discovery and decoration of requests prior to execution. For example, the following pattern might decorate each request with the current url and auth token from the identity service. Feign feign = Feign.builder().build(); CloudDNS cloudDNS = feign.target(new CloudIdentityTarget<CloudDNS>(user, apiKey)); Examples Feign includes example GitHub and Wikipedia clients. The denominator project can also be scraped for Feign in practice. Particularly, look at its example daemon. Integrations Feign intends to work well within Netflix and other Open Source communities. Modules are welcome to integrate with your favorite projects! Gson Gson includes an encoder and decoder you can use with a JSON API. Add GsonEncoder and/or GsonDecoder to your Feign.Builder like so: GsonCodec codec = new GsonCodec(); GitHub github = Feign.builder()                      .encoder(new GsonEncoder())                      .decoder(new GsonDecoder())                      .target(GitHub.class, ""https://api.github.com""); Jackson Jackson includes an encoder and decoder you can use with a JSON API. Add JacksonEncoder and/or JacksonDecoder to your Feign.Builder like so: GitHub github = Feign.builder()                      .encoder(new JacksonEncoder())                      .decoder(new JacksonDecoder())                      .target(GitHub.class, ""https://api.github.com""); Sax SaxDecoder allows you to decode XML in a way that is compatible with normal JVM and also Android environments. Here's an example of how to configure Sax response parsing: api = Feign.builder()            .decoder(SAXDecoder.builder()                               .registerContentHandler(UserIdHandler.class)                               .build())            .target(Api.class, ""https://apihost""); JAXB JAXB includes an encoder and decoder you can use with an XML API. Add JAXBEncoder and/or JAXBDecoder to your Feign.Builder like so: api = Feign.builder()            .encoder(new JAXBEncoder())            .decoder(new JAXBDecoder())            .target(Api.class, ""https://apihost""); JAX-RS JAXRSContract overrides annotation processing to instead use standard ones supplied by the JAX-RS specification. This is currently targeted at the 1.1 spec. Here's the example above re-written to use JAX-RS: interface GitHub {   @GET @Path(""/repos/{owner}/{repo}/contributors"")   List<Contributor> contributors(@PathParam(""owner"") String owner, @PathParam(""repo"") String repo); } GitHub github = Feign.builder()                      .contract(new JAXRSContract())                      .target(GitHub.class, ""https://api.github.com""); OkHttp OkHttpClient directs Feign's http requests to OkHttp, which enables SPDY and better network control. To use OkHttp with Feign, add the OkHttp module to your classpath. Then, configure Feign to use the OkHttpClient: GitHub github = Feign.builder()                      .client(new OkHttpClient())                      .target(GitHub.class, ""https://api.github.com""); Ribbon RibbonClient overrides URL resolution of Feign's client, adding smart routing and resiliency capabilities provided by Ribbon. Integration requires you to pass your ribbon client name as the host part of the url, for example myAppProd. MyService api = Feign.builder().client(RibbonClient.create()).target(MyService.class, ""https://myAppProd"");  Hystrix HystrixFeign configures circuit breaker support provided by Hystrix. To use Hystrix with Feign, add the Hystrix module to your classpath. Then use the HystrixFeign builder: MyService api = HystrixFeign.builder().target(MyService.class, ""https://myAppProd"");  SLF4J SLF4JModule allows directing Feign's logging to SLF4J, allowing you to easily use a logging backend of your choice (Logback, Log4J, etc.) To use SLF4J with Feign, add both the SLF4J module and an SLF4J binding of your choice to your classpath. Then, configure Feign to use the Slf4jLogger: GitHub github = Feign.builder()                      .logger(new Slf4jLogger())                      .target(GitHub.class, ""https://api.github.com""); Decoders Feign.builder() allows you to specify additional configuration such as how to decode a response. If any methods in your interface return types besides Response, String, byte[] or void, you'll need to configure a non-default Decoder. Here's how to configure JSON decoding (using the feign-gson extension): GitHub github = Feign.builder()                      .decoder(new GsonDecoder())                      .target(GitHub.class, ""https://api.github.com""); Encoders The simplest way to send a request body to a server is to define a POST method that has a String or byte[] parameter without any annotations on it. You will likely need to add a Content-Type header. interface LoginClient {   @RequestLine(""POST /"")   @Headers(""Content-Type: application/json"")   void login(String content); } ... client.login(""{\""user_name\"": \""denominator\"", \""password\"": \""secret\""}""); By configuring an Encoder, you can send a type-safe request body. Here's an example using the feign-gson extension: static class Credentials {   final String user_name;   final String password;    Credentials(String user_name, String password) {     this.user_name = user_name;     this.password = password;   } }  interface LoginClient {   @RequestLine(""POST /"")   void login(Credentials creds); } ... LoginClient client = Feign.builder()                           .encoder(new GsonEncoder())                           .target(LoginClient.class, ""https://foo.com"");  client.login(new Credentials(""denominator"", ""secret"")); @Body templates The @Body annotation indicates a template to expand using parameters annotated with @Param. You will likely need to add a Content-Type header. interface LoginClient {    @RequestLine(""POST /"")   @Headers(""Content-Type: application/xml"")   @Body(""<login \""user_name\""=\""{user_name}\"" \""password\""=\""{password}\""/>"")   void xml(@Param(""user_name"") String user, @Param(""password"") String password);    @RequestLine(""POST /"")   @Headers(""Content-Type: application/json"")   // json curly braces must be escaped!   @Body(""%7B\""user_name\"": \""{user_name}\"", \""password\"": \""{password}\""%7D"")   void json(@Param(""user_name"") String user, @Param(""password"") String password); } ... client.xml(""denominator"", ""secret""); // <login ""user_name""=""denominator"" ""password""=""secret""/> client.json(""denominator"", ""secret""); // {""user_name"": ""denominator"", ""password"": ""secret""} Headers Feign supports settings headers on requests either as part of the api or as part of the client depending on the use case. Set headers using apis In cases where specific interfaces or calls should always have certain header values set, it makes sense to define headers as part of the api. Static headers can be set on an api interface or method using the @Headers annotation. @Headers(""Accept: application/json"") interface BaseApi<V> {   @Headers(""Content-Type: application/json"")   @RequestLine(""PUT /api/{key}"")   void put(@Param(""key"") String, V value); } Methods can specify dynamic content for static headers using variable expansion in @Headers.  @RequestLine(""POST /"")  @Headers(""X-Ping: {token}"")  void post(@Param(""token"") String token); In cases where both the header field keys and values are dynamic and the range of possible keys cannot be known ahead of time and may vary between different method calls in the same api/client (e.g. custom metadata header fields such as ""x-amz-meta-*"" or ""x-goog-meta-*""), a Map parameter can be annotated with HeaderMap to construct a query that uses the contents of the map as its header parameters.  @RequestLine(""POST /"")  void post(@HeaderMap Map<String, Object> headerMap); These approaches specify header entries as part of the api and do not require any customizations when building the Feign client. Setting headers per target In cases where headers should differ for the same api based on different endpoints or where per-request customization is required, headers can be set as part of the client using a RequestInterceptor or a Target. For an example of setting headers using a RequestInterceptor, see the Request Interceptors section. Headers can be set as part of a custom Target.   static class DynamicAuthTokenTarget<T> implements Target<T> {     public DynamicAuthTokenTarget(Class<T> clazz,                                   UrlAndTokenProvider provider,                                   ThreadLocal<String> requestIdProvider);     ...     @Override     public Request apply(RequestTemplate input) {       TokenIdAndPublicURL urlAndToken = provider.get();       if (input.url().indexOf(""http"") != 0) {         input.insert(0, urlAndToken.publicURL);       }       input.header(""X-Auth-Token"", urlAndToken.tokenId);       input.header(""X-Request-ID"", requestIdProvider.get());        return input.request();     }   }   ...   Bank bank = Feign.builder()           .target(new DynamicAuthTokenTarget(Bank.class, provider, requestIdProvider)); These approaches depend on the custom RequestInterceptor or Target being set on the Feign client when it is built and can be used as a way to set headers on all api calls on a per-client basis. This can be useful for doing things such as setting an authentication token in the header of all api requests on a per-client basis. The methods are run when the api call is made on the thread that invokes the api call, which allows the headers to be set dynamically at call time and in a context-specific manner -- for example, thread-local storage can be used to set different header values depending on the invoking thread, which can be useful for things such as setting thread-specific trace identifiers for requests. Advanced usage Base Apis In many cases, apis for a service follow the same conventions. Feign supports this pattern via single-inheritance interfaces. Consider the example: interface BaseAPI {   @RequestLine(""GET /health"")   String health();    @RequestLine(""GET /all"")   List<Entity> all(); } You can define and target a specific api, inheriting the base methods. interface CustomAPI extends BaseAPI {   @RequestLine(""GET /custom"")   String custom(); } In many cases, resource representations are also consistent. For this reason, type parameters are supported on the base api interface. @Headers(""Accept: application/json"") interface BaseApi<V> {    @RequestLine(""GET /api/{key}"")   V get(@Param(""key"") String);    @RequestLine(""GET /api"")   List<V> list();    @Headers(""Content-Type: application/json"")   @RequestLine(""PUT /api/{key}"")   void put(@Param(""key"") String, V value); }  interface FooApi extends BaseApi<Foo> { }  interface BarApi extends BaseApi<Bar> { } Logging You can log the http messages going to and from the target by setting up a Logger. Here's the easiest way to do that: GitHub github = Feign.builder()                      .decoder(new GsonDecoder())                      .logger(new Logger.JavaLogger().appendToFile(""logs/http.log""))                      .logLevel(Logger.Level.FULL)                      .target(GitHub.class, ""https://api.github.com""); The SLF4JLogger (see above) may also be of interest. Request Interceptors When you need to change all requests, regardless of their target, you'll want to configure a RequestInterceptor. For example, if you are acting as an intermediary, you might want to propagate the X-Forwarded-For header. static class ForwardedForInterceptor implements RequestInterceptor {   @Override public void apply(RequestTemplate template) {     template.header(""X-Forwarded-For"", ""origin.host.com"");   } } ... Bank bank = Feign.builder()                  .decoder(accountDecoder)                  .requestInterceptor(new ForwardedForInterceptor())                  .target(Bank.class, ""https://api.examplebank.com""); Another common example of an interceptor would be authentication, such as using the built-in BasicAuthRequestInterceptor. Bank bank = Feign.builder()                  .decoder(accountDecoder)                  .requestInterceptor(new BasicAuthRequestInterceptor(username, password))                  .target(Bank.class, ""https://api.examplebank.com""); Custom @Param Expansion Parameters annotated with Param expand based on their toString. By specifying a custom Param.Expander, users can control this behavior, for example formatting dates. @RequestLine(""GET /?since={date}"") Result list(@Param(value = ""date"", expander = DateToMillis.class) Date date); Dynamic Query Parameters A Map parameter can be annotated with QueryMap to construct a query that uses the contents of the map as its query parameters. @RequestLine(""GET /find"") V find(@QueryMap Map<String, Object> queryMap); Static and Default Methods Interfaces targeted by Feign may have static or default methods (if using Java 8+). These allows Feign clients to contain logic that is not expressly defined by the underlying API. For example, static methods make it easy to specify common client build configurations; default methods can be used to compose queries or define default parameters. interface GitHub {   @RequestLine(""GET /repos/{owner}/{repo}/contributors"")   List<Contributor> contributors(@Param(""owner"") String owner, @Param(""repo"") String repo);    @RequestLine(""GET /users/{username}/repos?sort={sort}"")   List<Repo> repos(@Param(""username"") String owner, @Param(""sort"") String sort);    default List<Repo> repos(String owner) {     return repos(owner, ""full_name"");   }    /**    * Lists all contributors for all repos owned by a user.    */   default List<Contributor> contributors(String user) {     MergingContributorList contributors = new MergingContributorList();     for(Repo repo : this.repos(owner)) {       contributors.addAll(this.contributors(user, repo.getName()));     }     return contributors.mergeResult();   }    static GitHub connect() {     return Feign.builder()                 .decoder(new GsonDecoder())                 .target(GitHub.class, ""https://api.github.com"");   } } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Netflix/feign"	"HTTP client binder inspired by Retrofit, JAXRS-2.0, and WebSocket."	"true"
"REST Frameworks"	"Jersey"	"https://jersey.java.net/"	"JAX-RS reference implementation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Jersey Jersey - RESTful Web Services in Java. Jersey 2.23.1 Get latest Jersey Documentation User Guide Getting Started Modules and Dependencies API javadoc Jersey RESTful Web Services in Java. About Developing RESTful Web services that seamlessly support exposing your data in a variety of representation media types and abstract away the low-level details of the client-server communication is not an easy task without a good toolkit. In order to simplify development of RESTful Web services and their clients in Java, a standard and portable JAX-RS API has been designed. Jersey RESTful Web Services framework is open source, production quality, framework for developing RESTful Web Services in Java that provides support for JAX-RS APIs and serves as a JAX-RS (JSR 311 & JSR 339) Reference Implementation. Jersey framework is more than the JAX-RS Reference Implementation. Jersey provides it’s own API that extend the JAX-RS toolkit with additional features and utilities to further simplify RESTful service and client development. Jersey also exposes numerous extension SPIs so that developers may extend Jersey to best suit their needs. Goals of Jersey project can be summarized in the following points: Track the JAX-RS API and provide regular releases of production quality Reference Implementations that ships with GlassFish; Provide APIs to extend Jersey & Build a community of users and developers; and finally Make it easy to build RESTful Web services utilising Java and the Java Virtual Machine. The latest stable release of Jersey is 2.23.1. Latest Articles What to do when JAX-RS cannot find it’s Providers aka My message body writer is not used Mar 24, 2015 | Michal Gajdoš JAX-RS Providers on Client and on Server Mar 17, 2015 | Michal Gajdoš Jersey 2.x Client on Android - Take 2 Mar 17, 2015 | Jakub Podlesak Jersey 2.17 Has Been Released Mar 16, 2015 | Jakub Podlesak Jersey CDI Integration - Few Notes and EAR Support Mar 11, 2015 | Michal Gajdoš Older Articles … Get Started Learn how to use Jersey in your projects. Documentation Read latest Jersey User Guide or browse latest Jersey API. Jersey 1.x users may access the Jersey 1.19.1 User Guide and Jersey 1.19.1 API. Download Jersey is distributed mainly via Maven and it offers some extra modules. Check the How to Download page or see our list of dependencies for details. Related Projects List of projects related to Jersey. Contribute Learn how you can contribute to the project by: Reporting issues Submitting patches Reviewing code Developer Blogs Find out what our developers blog about. Main Home License Who's Using Jersey Download Get Jersey Follow Twitter Contribute Contribute StackOverflow Mailing Lists Project Info Source Control Issue Tracking Mailing Lists Project Team Release Notes Member of GlassFish Project Proud fan of YourKit is kindly supporting Jersey with its full-featured Java Profiler. Supported by Back to top Copyright ©2010-2016 Oracle Corporation. All Rights Reserved. Last Published: 2016-06-09."	"null"	"null"	"JAX-RS reference implementation."	"true"
"REST Frameworks"	"Microserver"	"https://github.com/aol/micro-server"	"— A convenient extensible Microservices plugin system for Spring & Spring Boot, with over 30 plugins and growing, that supports both micro-monolith and pure microservices styles."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"582"	"107"	"123"	"GitHub - aol/micro-server: Microserver is a Java 8 native, zero configuration, standards based, battle hardened library to run Java Rest Microservices via a standard Java main class. Supporting pure Microservice or Micro-monolith styles. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 107 Star 582 Fork 123 aol/micro-server Code Issues 23 Pull requests 0 Wiki Pulse Graphs Microserver is a Java 8 native, zero configuration, standards based, battle hardened library to run Java Rest Microservices via a standard Java main class. Supporting pure Microservice or Micro-monolith styles. 613 commits 75 branches 32 releases 11 contributors Java 99.5% Groovy 0.5% Java Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags SpringDataConfig_issue access_log_issue active-events-fix add-aop-api-module-to-lana-api add-directory-cleaner-to-plugin blacklisted-classes-patch configurable-module-no-pollution configurable-nio-client configure-circular-references cross-domain-filter curator-bug-fix curator-readme curly-brace-fix cyclops-bump cyclops-react cylcops-upgrade data_source_max_size distributed-lock-plugin empty-input-stream environment-and-accessLog events-id events-without-thread expose-http-server full-spring-boot host-for-swagger ip-capture-for-register jackson-feature-initialization jdbcconfigdistlock-component-wrong-name jdbcconfigdistlock-wrong-component-name jersey-server-properties-enhancement log-configured-resources log-servlets-filters-listeners logging-level-logging machine-stats make-instance-property-file-name-configurable make-jersey-server-property-configurable master micro-alive-handler micro-client micro-data micro-dbcp-plugin micro-dist-lock micro-events micro-general-exception-wrapper micro-guava micro-log4j-plugin micro-logback-checker micro-logback-plugin micro-metrics micro-reactive-events micro-s3-utils micro-s3 micro-swaggger micro-transactions micro-validation netty niorestclient-exceptions override-jax-rs-packages pr138 provide-s3-transfer-manager reactive-microserver-phase1 s3-cleanup s3-manifest-comparator send-target-name service-props service-registry servlet-request-listener specify-s3-region spring-bean-same-name spring-boot-servlets spring-boot testpull transaction-tests update-deps use-jdk-interfaces Nothing to show v0.87 v0.83 v0.82 v0.81 v0.80 v0.79.2 v0.79.1 v0.79 v0.78 v0.73 v0.71 v0.69 v0.67 v0.65 v0.64 v0.63 v0.62 v0.59 v0.58 v0.57 v0.56 v0.55 v0.54 v0.52 v0.51 v0.5 0.86 0.85.1 0.84 0.77 0.76 0.53 Nothing to show New pull request Latest commit beed526 Jul 8, 2016 johnmcclean-aol committed on GitHub Update readme.md Permalink Failed to load latest commit information. micro-application-register Update readme.md May 27, 2016 micro-async-data-loader configure datacleaner and dataloader conditionally Jul 7, 2016 micro-async-data-writer configure datacleaner and dataloader conditionally Jul 7, 2016 micro-boot FilterConfiguration and ServletConfiguration refactor for better Spri… Jun 8, 2016 micro-client Document units for RestClient timeouts Jun 30, 2016 micro-core micro-errors wip Jul 7, 2016 micro-cors add tests Jul 5, 2016 micro-couchbase configure datacleaner and dataloader conditionally Jul 7, 2016 micro-curator Fix micro-curator unit tests Jun 24, 2016 micro-dbcp cyclops-react migration Mar 7, 2016 micro-dist-lock support multiple distributed locks at once Jul 7, 2016 micro-error-codes 0.87 release Jul 7, 2016 micro-events micro dist lock plugin Jun 1, 2016 micro-general-exception-mapper v0.81 release Mar 7, 2016 micro-grizzly-with-jersey FilterConfiguration and ServletConfiguration refactor for better Spri… Jun 8, 2016 micro-grizzly micro-errors wip Jul 7, 2016 micro-guava interface enhancements May 26, 2016 micro-hibernate hibernate.hbm2ddl.import_files parameter can be set for hibernate Mar 15, 2016 micro-hikaricp cyclops-react migration Mar 7, 2016 micro-ip-tracker FilterConfiguration and ServletConfiguration refactor for better Spri… Jun 8, 2016 micro-jackson-configuration interface enhancements May 25, 2016 micro-javaslang interface enhancements May 25, 2016 micro-jdbc Update readme.md Jul 8, 2016 micro-jersey fix for #186 #32 #27 May 26, 2016 micro-log4j cyclops-react migration Mar 7, 2016 micro-logback cyclops-react migration Mar 7, 2016 micro-machine-stats remove micro-alive-handler-dirs Jun 8, 2016 micro-manifest-comparator Merge pull request #216 from aol/dist-map Jul 7, 2016 micro-metrics cyclops-react migration Mar 7, 2016 micro-mysql support multiple distributed locks at once Jul 6, 2016 micro-reactive 0.87 release Jul 7, 2016 micro-s3 0.87 release Jul 7, 2016 micro-spring-boot temp ignore test May 26, 2016 micro-swagger interface enhancements May 25, 2016 micro-tomcat-with-jersey FilterConfiguration and ServletConfiguration refactor for better Spri… Jun 8, 2016 micro-tomcat 0.87 release Jul 7, 2016 micro-transactions cyclops-react migration Mar 7, 2016 micro-tutorial remove micro-alive-handler-dirs Jun 8, 2016 .DS_Store remove kafka plugin, datasource for mysql Oct 16, 2015 .gitignore more tests Jul 5, 2016 .travis.yml rename travis file Apr 4, 2015 build.gradle FilterConfiguration and ServletConfiguration refactor for better Spri… Jun 8, 2016 gradle.properties support for streaming across microservices Jul 6, 2016 licence.txt remove dependencies files, and add apache 2.0 licence Feb 24, 2015 readme.md Update readme.md Jun 19, 2016 settings.gradle Merge pull request #215 from aol/micro-error-codes Jul 7, 2016 readme.md Microserver A convenient modular engine for Microservices. Microserver plugins offer seamless integration with Spring (core), Jersey, Guava, Tomcat, Grizzly, reactive programming, Hibernate (& Spring Data), Spring Boot, Codahale Metrics, Swagger and more to come! Microserver screencast : getting started with plugins Microsever plugins video Quick start Install Microserver with Grizzly, Jackson and Jersey (Gradle config below)     compile group: 'com.aol.microservices', name:'micro-grizzly-with-jersey', version:'x.yz' Install Microserver with Tomcat, Jackson and Jersey (Gradle config below)     compile group: 'com.aol.microservices', name:'micro-tomcat-with-jersey', version:'x.yz'    Create and run a simple app     @Rest     @Path(""/test"")     public class SimpleApp {          public static void main(String[] args){             new MicroserverApp(()->""test-app"").run();         }         @GET         public String myEndPoint(){             return ""hello world!"";         }     } Browse to http://localhost:8080/test-app/test See the response hello world! Add plugins by adding them to your build file - rerun the app to get new end points, Spring beans and more! Why Microserver? Microserver is a plugin engine for building Spring and Spring Boot based microservices. Microserver supports pure microservice and micro-monolith development styles. The micro-monolith style involves packaging multiple services into a single deployment - offering developers the productivity of microservice development without the operational risk. This can help teams adopt a Microservices architecture on projects that are currently monoliths. Microserver plugins are orthogonal to Microservices. They solve a common problem in Microservice development where by services are broken up and deployed separately but code remains entangled in a monolithic common library. By making use of a plugin system that follows the same modular archictectural principals as microservice development, teams can keep cross-service concerns and infrastructure in properly size, coherent and cohesive plugin modules. Tutorial and overview Tutorial Tutoiral code Note on Fat Jars Microserver (& Cyclops) have a plugin architecture and make use of the Java Service Laoder mechanism. Make sure your Fat Jar implementation is configured to aggreagate services. With the Gradle Shadow Jar you do this with     shadowJar {       mergeServiceFiles()       } Quick start youtube video Note the main launch class has been changed from MicroServerStartup to MicroserverApp Blurb Microserver is a zero configuration, standards based, battle hardened library to run Java Rest Microservices via a standard Java main class. It has been used in production in AOL since July 2014. Get Microserver micro-grizzly-with-jersey micro-tomcat-with-jersey micro-core micro-boot : Microserver driving Spring Boot micro-spring-boot : Spring Boot driving Microserver Info wiki Google Group Example Apps : Microserver Core with Grizzly and Jersey Example Apps : Microserver Boot Java Doc : Microserver Core Java Doc : Microserver Boot Maven dependency Microserver Grizzly with Jersey     <dependency>       <groupId>com.aol.microservices</groupId>       <artifactId>micro-grizzly-with-jersey</artifactId>       <version>x.yz</version>     </dependency> Microserver Spring Boot     <dependency>       <groupId>com.aol.microservices</groupId>       <artifactId>micro-spring-boot</artifactId>       <version>x.yz</version>     </dependency> Gradle dependency Microserver core      compile group: 'com.aol.microservices', name:'micro-core', version:'x.yz' Microserver Spring Boot       compile group: 'com.aol.microservices', name:'micro-spring-boot', version:'x.yz' Tech Stack Microserver core is a lightweight server configuration engine built using Spring, Cyclops and Jackson. Zero Configuration No directory structure is imposed by the server and no XML is required. There is no framework config. Just a jar file and your application. You can of course, configure your application without limit. Example working application :- The main class :-      public class AppRunnerTest {           public static void main(String[] args) throws InterruptedException {             new MicroserverApp(() -> ""test-app"").run();         }      } This will deploy a REST server on port 8080 (configurable by test-app.port in application.properties), it will also automagically capture any Rest end points (Spring & Jersey annotations) that implement the tag interface RestResource (see below for an example). A rest end point     @Rest      @Path(""/status"")     public class StatusResource {        @GET        @Produces(""text/plain"")       @Path(""/ping"")       public String ping() {          return ""ok"";       }      } Configuration Options If you find you need configuration options for your application you have two options. Override some of the available options on the Module interface (ConfigurableModule provides a builder mechanism for this) Implement a custom plugin (the cleanest option, which also promotes reuse across services). Application configuration (for Grizzly with Jersey) The core of Microserver is a Spring 4.x Dependency Injection container which is used to store all the main classes of your Microservice (s). The Spring Dependency Injection container can be configured by the @Microservice Annotation on your main class, or by the Config object (optionally passed as a parameter to startup). Micro-monolith Architectural Overview Each Microservice is a Jersey REST Application, these can deployed independently as pure Microservices or together as a micro-monolith. Multiple Microservices can run on the same server, by adding them to the classpath at runtime. They share a common Spring Dependency Injection container (as they are smaller services, we feel it makes sense to share resources such as ThreadPools, Datasources etc), but act as totally separate Rest applications. When creating embedded Microservices (multiple services colocated on the same JVM and Spring container), the development project should be independent, but the colocated instances should be tested as they will be depolyed in production. There will be more info to follow on the wiki, on how and why we have implemented and scaled this pattern (the goal is to achieve both the benefits of a full Microservice architecture, but minimise the costs as articulated by Robert (Uncle Bob) C. Martin and others - e.g. here: Microservices and Jars . Jersey REST Applications are configured by the Module interface (at least one of which must be specified on startup). Rest configuration The configuration of your Rest end points can be managed via the Module interface. The Module interface has a number of Java 8 default methods and a single abstract method (getContext). It behaves as a functional interface, and can be defined by a lambda expression. When used in this way the lambda represents the context the Microserver will create Rest end points on. e.g.     new MicroserverApp(() -> ""context"").start(); () -> ""context"" is a Module! Configurable Options Module provides the following default methods, that clients can override     default Map<String,String> getPropertyOverrides(){         return Maps.newHashMap();     }     default Set<Class> getSpringConfigurationClasses(){         return Sets.newHashSet(Classes.CORE_CLASSES.getClasses());     }     default List<Class> getRestResourceClasses() {         return Arrays.asList(RestResource.class);     }     default List<Class> getRestAnnotationClasses() {         return Arrays.asList(Rest.class);     }      default List<String> getDefaultJaxRsPackages(){         return Arrays.asList(""com.wordnik.swagger.sample.resource"",                 ""com.wordnik.swagger.sample.util""   );     }      default List<Class> getDefaultResources(){         return Arrays.asList(JacksonFeature.class,                  //SWAGGER CLASSES                 ApiListingResourceJSON.class,JerseyApiDeclarationProvider.class,                 JerseyResourceListingProvider.class);     }      default List<ServletContextListener> getListeners(ServerData data){         return ImmutableList.of(new ContextLoaderListener(data                 .getRootContext()),                 new JerseySpringIntegrationContextListener(data),                 new SwaggerInitializer(data));     }     default Map<String,Filter> getFilters(ServerData data) {         return ImmutableMap.of(""/*"",new QueryIPRetriever());     }     default Map<String,Servlet> getServlets(ServerData data) {         return ImmutableMap.of();     }      default  String getJaxWsRsApplication(){         return JerseyRestApplication.class.getCanonicalName();     }     default String getProviders(){         return ""com.aol.micro.server.rest.providers"";     } RestResource class defines the tag interface used to identify Rest end points for this module. Filters provides a map of Servlet filters and the paths to which they should be applied Providers allows client code to change the Jersey Providers packages JaxWsRsApplication allows client code to completely override the Microserver jax.ws.rs.Application Property file configuration Microserver supports auto-discovery of application.properties. Microserver will assume a default file name of 'application.properties'. Microserver will check for a properties in the following order System property 'application.property.file' and if present will load the property file from disk using that. Otherwise Microserver will look for a System Property 'application.env' and will load the application property file from the classpath using the resource name 'application-${application.env}.properties. Alternatively Microserver will load application.properties directly from the classpath. If still not found Microserver will load application.properties from disk in the current directory The default file name application.properties can be configured by exception (use PropertyFileConfig.setApplicationPropertyFileName(String filename). Microserver application properties loading is configured by the class PropertyFileConfig. You can replace this with your own Spring configuration file to load property files by a different set of rules (by passing in your class to the constructor of Microserver). Embed and colocate Microservices Microserver supports the embedding of multiple microservices within a single Microserver, this is not the default mode of operation and involves a little more work to setup. All Microservices will share a single Spring context, so some care needs to be taken when authoring such Microservices to avoid conflicts. This does mean that they can share resources (such as database connections) where it makes sense to do so. Embedded microservices should be collated at '''runtime only'''. There should be no compile time dependency between embedded microservices (otherwise you are not building microservices but a monolithc application). Embedding microservices is an optimisation that allows better performance, enhanced robustness and reliability and easier management of microservices - while still maintaining the advantages of horizontal scalability offered by the microservices approach. Embeded Microservices example This example will start two different Rest end points - one on context ""test-app"" and another on context ""alternative-app"". ""test-app"" will automagically wire in any Jersey end points that implement TestAppRestResource. ""alternative-app"" will automagically wire in any Jersey end points that implement AltAppRestResource.     @Microserver     public class EmbeddedAppRunnerTest {          public static void main(String[] args) throws InterruptedException {             new MicroserverApp(EmbeddedAppRunnerTest.class,                      new EmbeddedModule(TestAppRestResource.class,""test-app""),                     new EmbeddedModule(AltAppRestResource.class,""alternative-app"")).start();            }     }  Building a 'fat' Jar We recommend the Gradle plugin Shadow Jar. For Gradle 2.0 simply define it in your plugins section -> plugins {   id 'java' // or 'groovy' Must be explicitly applied   id 'com.github.johnrengelman.shadow' version '1.2.0' } Maven users can use Shade plugin or equivalent (Maven assembly plugin). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aol/micro-server"	"— A convenient extensible Microservices plugin system for Spring & Spring Boot, with over 30 plugins and growing, that supports both micro-monolith and pure microservices styles."	"true"
"REST Frameworks"	"RAML"	"http://raml.org/"	"Modeling language to generate REST APIs with contract first."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"156"	"82"	"26"	"GitHub - spotify/ramlfications: Python parser for RAML Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 82 Star 156 Fork 26 spotify/ramlfications Code Issues 18 Pull requests 3 Wiki Pulse Graphs Python parser for RAML https://ramlfications.readthedocs.org 506 commits 2 branches 8 releases 11 contributors RAML 91.1% Python 8.9% RAML Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master v0.2.0-dev Nothing to show 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.3 0.1.2 0.1.1 Nothing to show New pull request Latest commit 59ac389 Jun 15, 2016 econchick committed on GitHub Merge pull request #107 from adamchainz/readthedocs.io … Convert readthedocs links for their .org -> .io migration for hosted projects Permalink Failed to load latest commit information. docs Convert readthedocs links for their .org -> .io migration for hosted … Jun 14, 2016 ramlfications Convert readthedocs links for their .org -> .io migration for hosted … Jun 14, 2016 tests Avoid hardcoding PYTHONHASHSEED in tests (squashed) Feb 28, 2016 .coveragerc new test commands for tox Oct 16, 2015 .gitignore new test commands for tox Oct 16, 2015 .travis.yml Avoid hardcoding PYTHONHASHSEED in tests (squashed) Feb 28, 2016 AUTHORS.rst Avoid hardcoding PYTHONHASHSEED in tests (squashed) Feb 28, 2016 CONTRIBUTING.rst Update dev docs with labels and waffle page Aug 12, 2015 LICENSE Added Apache2 license Oct 24, 2014 MANIFEST.in Add Test for Recursive Include Support May 15, 2015 README.rst Convert readthedocs links for their .org -> .io migration for hosted … Jun 14, 2016 dev-requirements.txt Added and renamed/moved test fixtures Aug 12, 2015 requirements.txt Added and renamed/moved test fixtures Aug 12, 2015 setup.cfg remove nosetests from setup.cfg Apr 17, 2015 setup.py Add Python 3.5 to the test env list Feb 15, 2016 tox-requirements.txt new test commands for tox Oct 16, 2015 tox.ini Avoid hardcoding PYTHONHASHSEED in tests (squashed) Feb 28, 2016 README.rst ramlfications: RAML reference implementation in Python Requirements and Installation User Setup The latest stable version can be found on PyPI, and you can install via pip: $ pip install ramlfications  ramlfications runs on Python 2.6, 2.7, and 3.3+, and PyPy. Both Linux and OS X are supported. Currently, only RAML 0.8 is supported, but there are plans to support 1.0. Continue onto usage to get started on using ramlfications. Developer Setup If you'd like to contribute or develop upon ramlfications, be sure to read How to Contribute first. You can see the progress of ramlfications on our public project management page. System requirements: C Compiler (gcc/clang/etc.) If on Linux - you'll need to install Python headers (e.g. apt-get install python-dev) Python 2.6, 2.7, 3.3+, or PyPy virtualenv Here's how to set your machine up: $ git clone git@github.com:spotify/ramlfications $ cd ramlfications $ virtualenv env $ source env/bin/activate (env) $ pip install -r dev-requirements.txt  Run Tests If you'd like to run tests for all supported Python versions, you must have all Python versions installed on your system. I suggest pyenv to help with that. To run all tests: (env) $ tox  To run a specific test setup (options include: py26, py27, py33, py34, py35, pypy, flake8, verbose, manifest, docs, setup, setupcov): (env) $ tox -e py26  To run tests without tox: (env) $ py.test (env) $ py.test --cov ramlfications --cov-report term-missing  Build Docs Documentation is build with Sphinx, written in rST, uses the Read the Docs theme with a slightly customized CSS, and is hosted on Read the Docs site. To rebuild docs locally, within the parent ramlfications directory: (env) $ tox -e docs  or: (env) $ sphinx-build -b docs/ docs/_build  Then within ramlfications/docs/_build you can open the index.html page in your browser. Still have issues? Feel free to drop by #ramlfications on Freenode (webchat) or ping via Twitter. ""roguelynn"" is the maintainer, a.k.a econchick on GitHub, and based in San Fran. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spotify/ramlfications"	"Modeling language to generate REST APIs with contract first."	"true"
"REST Frameworks"	"Rapidoid"	"http://www.rapidoid.org/"	"A simple, secure and extremely fast framework consisting of embedded HTTP server, GUI components and dependency injection."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"680"	"57"	"55"	"GitHub - rapidoid/rapidoid: Rapidoid - Extremely Fast, Simple and Powerful Java Web Framework and HTTP Server! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 57 Star 680 Fork 55 rapidoid/rapidoid Code Issues 18 Pull requests 0 Pulse Graphs Rapidoid - Extremely Fast, Simple and Powerful Java Web Framework and HTTP Server! http://www.rapidoid.org/ 3,798 commits 5 branches 44 releases 9 contributors Java 96.7% CSS 1.4% HTML 1.2% Other 0.7% Java CSS HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master raft reactive v5.2 websocket Nothing to show rapidoid-4.0.3 rapidoid-4.0.2 rapidoid-4.0.1 rapidoid-4.0.0 rapidoid-3.0.0 rapidoid-2.4.0 rapidoid-2.3.0 rapidoid-2.2.0 rapidoid-2.1.1 rapidoid-2.1.0 rapidoid-2.0.3 rapidoid-2.0.2 rapidoid-2.0.1 rapidoid-2.0.0 rapidoid-1.0.1 rapidoid-1.0.0 rapidoid-0.9.0 5.1.9 5.1.8 5.1.7 5.1.6 5.1.5 5.1.4 5.1.3 5.1.2 5.1.1 5.1.0 5.0.12 5.0.11 5.0.10 5.0.9 5.0.8 5.0.7 5.0.6 5.0.5 5.0.4 5.0.3 5.0.2 5.0.1 5.0.0 4.4.0 4.3.0 4.2.0 4.1.0 Nothing to show New pull request Latest commit ccc05bf Jul 11, 2016 nmihajlovski Roadmap clean-up. Permalink Failed to load latest commit information. assets Supporting cursor-based paging in the ""infinite"" stream. Jul 7, 2016 bin Renamed ""cookiepack"" to ""token"". Jun 27, 2016 docker Simplified the build of ""snapshot"" docker images. Jun 12, 2016 examples/getting-started Request-aware roles provider customization. Jul 8, 2016 rapidoid-buffer Targeting v5.2.0 release. Jul 7, 2016 rapidoid-commons Support for fine-grained JPA setup and customization. Jul 8, 2016 rapidoid-essentials Targeting v5.2.0 release. Jul 7, 2016 rapidoid-fluent Targeting v5.2.0 release. Jul 7, 2016 rapidoid-gui Targeting v5.2.0 release. Jul 7, 2016 rapidoid-html Targeting v5.2.0 release. Jul 7, 2016 rapidoid-http-client Initial utility / DSL for easy expression of data expectations/assert… Jul 8, 2016 rapidoid-http-fast Async setup of the request handler. Jul 11, 2016 rapidoid-http-server Request-aware bean validation customization. Jul 8, 2016 rapidoid-inject Targeting v5.2.0 release. Jul 7, 2016 rapidoid-integrate Customizable templates path. Jul 9, 2016 rapidoid-integration-tests Request-aware bean validation customization. Jul 9, 2016 rapidoid-jpa Support for fine-grained JPA setup and customization. Jul 9, 2016 rapidoid-net Targeting v5.2.0 release. Jul 7, 2016 rapidoid-oauth Request-aware roles provider customization. Jul 9, 2016 rapidoid-quick Targeting v5.2.0 release. Jul 7, 2016 rapidoid-render Customizable templates path. Jul 10, 2016 rapidoid-standalone Targeting v5.2.0 release. Jul 7, 2016 rapidoid-test-commons Targeting v5.2.0 release. Jul 7, 2016 rapidoid-watch Targeting v5.2.0 release. Jul 7, 2016 rapidoid-web Simplified error handling. Jul 10, 2016 .gitignore changed the fallback request content type to json Jun 2, 2016 ASLv2.0.txt Updated license information. May 7, 2015 README.md Roadmap clean-up. Jul 11, 2016 pom.xml Improved the JMustache integration. Jul 8, 2016 sync.bat Improved the repository synchronization script. Jul 23, 2015 sync.sh Improved the repository synchronization script. Jul 23, 2015 README.md Rapidoid - Simple. Powerful. Secure. Fast! Documentation (examples) Please visit the official site: http://www.rapidoid.org/ Apache License v2 The main distribution of the framework is released under the liberal Apache Public License v2, so it is free to use for both commercial and non-commercial projects. Roadmap Better documentation SSL support Contributing Fork (and then git clone https://github.com/<your-username-here>/rapidoid.git). Create a branch (git checkout -b branch_name). Commit your changes (git commit -am ""Description of contribution""). Push the branch (git push origin branch_name). Open a Pull Request. Thank you for your contribution! Wait for a response... Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rapidoid/rapidoid"	"A simple, secure and extremely fast framework consisting of embedded HTTP server, GUI components and dependency injection."	"true"
"REST Frameworks"	"rest.li"	"https://github.com/linkedin/rest.li"	"Framework for building robust, scalable RESTful architectures using type-safe bindings and asynchronous, non-blocking IO with an end-to-end developer workflow that promotes clean practices, uniform interface design and consistent data modeling."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1340"	"165"	"252"	"GitHub - linkedin/rest.li: Rest.li is a REST+JSON framework for building robust, scalable service architectures using dynamic discovery and simple asynchronous APIs. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 165 Star 1,340 Fork 252 linkedin/rest.li Code Issues 9 Pull requests 7 Wiki Pulse Graphs Rest.li is a REST+JSON framework for building robust, scalable service architectures using dynamic discovery and simple asynchronous APIs. http://rest.li 1,377 commits 2 branches 315 releases 35 contributors Java 98.8% Groovy 0.8% R 0.1% Shell 0.1% Scala 0.1% Python 0.1% Java Groovy R Shell Scala Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master restli-1 Nothing to show v6.0.13 v6.0.12 v6.0.11 v6.0.10 v6.0.9 v6.0.8 v6.0.7 v6.0.6 v6.0.5 v6.0.3 v6.0.2 v6.0.1 v6.0.0 v5.0.20 v5.0.19 v5.0.18 v5.0.17 v5.0.16 v5.0.15 v5.0.14 v5.0.13 v5.0.11 v5.0.10 v5.0.9 v5.0.8 v5.0.7 v5.0.6 v5.0.5 v5.0.4 v5.0.3 v5.0.2 v5.0.1 v5.0.0 v4.1.1 v4.1.0 v4.0.0 v3.1.4 v3.1.3 v3.1.2 v3.1.1 v3.1.0 v3.0.2 v3.0.1 v3.0.0 v2.12.7 v2.12.6 v2.12.4 v2.12.3 v2.12.2 v2.12.1 v2.12.0 v2.11.3 v2.11.2 v2.11.1 v2.11.0 v2.10.19 v2.10.18 v2.10.17 v2.10.16 v2.10.15 v2.10.14 v2.10.13 v2.10.11 v2.10.10 v2.10.9 v2.10.8 v2.10.7 v2.10.6 v2.10.5 v2.10.4 v2.10.3 v2.10.1 v2.10.0 v2.9.0 v2.8.0 v2.7.0 v2.6.3 v2.6.2 v2.6.1 v2.6.0 v2.5.1 v2.5.0 v2.4.4 v2.4.3 v2.4.2 v2.4.1 v2.4.0 v2.3.0 v2.2.9 v2.2.8 v2.2.7 v2.2.6 v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.2 v2.1.1 Nothing to show New pull request Latest commit cd83bdb Jun 24, 2016 saponniah Skip decoding simple keys which were passed in the request body for B… … …ATCH UPDATE and PATCH requests.  RB=760311 BUG=SI-2897 G=si-dev R=kbalasub,xma A=kbalasub,xma Permalink Failed to load latest commit information. buildSrc Deprecate Rest.li 1.0 request builders. Nov 20, 2014 build_script Remove unnecessary generator dependency from modules that generates d… May 27, 2015 d2-contrib [pegasus] Remove default values for zkHosts Apr 27, 2016 d2-int-test Bump zookeeper to 3.4.6 and fix a flaky d2 test Apr 20, 2016 d2-schemas Add missing d2 config properties in .pdsc file May 6, 2016 d2 Use parameterized logging to avoid excessive string concatenation Jun 8, 2016 data-avro-1_6 SI-1952: (1) Enable file resolution for SchemaTranslator and (2) prop… Jun 22, 2015 data-avro-generator New finer-grain data template and request builder generator classes a… May 11, 2015 data-avro Add support for alternate schema parsers by introducing DataSchemaPar… Feb 1, 2016 data-transform Added required vs optional validation for partial updates. Aug 4, 2015 data Change the Pegasus compatibility checker to consider the addition of … May 11, 2016 degrader This change introduces R2 streaming support on client side & server s… Dec 4, 2015 examples Bump dependency for example projects and fix build. Apr 29, 2016 generator-test Fix missing custom information for record field and union member. May 9, 2016 generator Refactor code related to custom type. May 10, 2016 gradle-plugins Fix the wiki link for resource compatibility checking in Pegasus plugin. May 18, 2016 gradle/wrapper Bump dependency for example projects and fix build. Apr 29, 2016 li-jersey-uri Remove redundant warning suppressions. Dec 9, 2014 log-test-config Adding log4j-to-log4j2 adapter Apr 20, 2015 multipart-mime Checking in rest.li streaming Apr 6, 2016 pegasus-common Making rest.li requests read-only. Jan 6, 2015 r2-core [pegasus] Add a shared implementation of AsyncPool called AsyncShared… Jun 27, 2016 r2-filter-compression Add support of ""x-snappy-framed"" encoding in rest compression filter Feb 25, 2016 r2-int-test Do not increment rate limiter period when bad object is disposed in Feb 3, 2016 r2-jetty This change introduces R2 streaming support on client side & server s… Dec 4, 2015 r2-netty Save resolved ip address into request context keyed by REMOTE_SERVER_… Mar 31, 2016 r2-perf-test This change introduces R2 streaming support on client side & server s… Dec 4, 2015 r2-sample This change introduces R2 streaming support on client side & server s… Dec 4, 2015 r2-testutils Make CapRep work in streaming when activated Dec 10, 2015 r2 This change introduces R2 streaming support on client side & server s… Dec 4, 2015 restli-client-parseq Pull parseq rest client from parseq project. Apr 6, 2016 restli-client-testutils Removed double quotes for cookie attribute values. Jun 30, 2016 restli-client-util-recorder Factor out PatchRequestRecorder and related classes into a new module. May 18, 2015 restli-client Fixed NPE in RestliRequestOptionsBuilder when no accept type was set. Apr 26, 2016 restli-common-testutils Add custom data comparator and data asserts Jun 13, 2016 restli-common Removed double quotes for cookie attribute values. Jun 30, 2016 restli-contrib-spring Imported pegasus source Sep 18, 2012 restli-docgen Fix doc generation for action methods with custom parameter types. Apr 26, 2016 restli-example-api Produce sorted snapshot files Dec 24, 2014 restli-example-client Factored out Netty. May 13, 2015 restli-example-server Change PhotoResource in restli-example-server to allow dummy ID and U… Jan 14, 2016 restli-extras Factored out Netty. May 13, 2015 restli-guice-bridge Factored out Netty. May 13, 2015 restli-int-test-api Support projections in rest.li schema validation Jun 14, 2016 restli-int-test-client Migrate to log4j2 internally in pegasus Apr 20, 2015 restli-int-test-server Support projections in rest.li schema validation Jun 14, 2016 restli-int-test Support projections in rest.li schema validation Jun 14, 2016 restli-internal-testutils Checking in rest.li streaming Apr 6, 2016 restli-netty-standalone Factored out Netty. May 13, 2015 restli-server-extras Checking in rest.li streaming Apr 6, 2016 restli-server-standalone This change introduces R2 streaming support on client side & server s… Dec 4, 2015 restli-server-testutils This change introduces R2 streaming support on client side & server s… Dec 4, 2015 restli-server Skip decoding simple keys which were passed in the request body for B… Jun 30, 2016 restli-spring-bridge Factored out Netty. May 13, 2015 restli-tools-scala Introduce doc support for action return types Sep 8, 2014 restli-tools Refactor code related to custom type. May 10, 2016 test-util Imported pegasus source Sep 18, 2012 tools Imported pegasus source Sep 18, 2012 .gitignore Add new API to Ring: getIterator(int) Aug 7, 2014 .reviewboardrc Add Review Board support. Sep 18, 2012 CHANGELOG Skip decoding simple keys which were passed in the request body for B… Jun 30, 2016 LICENSE.TXT RB=97682 Add LICENSE.TXT, using version recommended by Alejandro Pere… Nov 30, 2012 README.md Fix spelling Jul 30, 2014 RESTLI-2-RELEASE-NOTES.md Added Rest.li 2.*.* release notes. Dec 17, 2014 URI.md Add protocol 2 URIs for BatchGetRequestBuilderTest. Oct 20, 2014 build.gradle Add custom data comparator and data asserts Jun 13, 2016 checkout-tag Fix glitch of checkout-tag script that print message regardless of gi… Sep 18, 2012 defaultEnvironment.gradle Migrate code from EasyMock 2.4 to 3.1. Nov 30, 2012 gradle.properties Removed double quotes for cookie attribute values. Jun 30, 2016 gradlew Use Gradle 1.12. Jun 19, 2014 gradlew.bat RB=97672 Add gradle-wrapper, to ensure predictable gradle version for… Nov 30, 2012 release-version Fix release-version. Aug 26, 2015 settings.gradle checking in async multipart mime Jan 5, 2016 README.md Rest.li is an open source REST framework for building robust, scalable RESTful architectures using type-safe bindings and asynchronous, non-blocking IO. Rest.li fills a niche for applying RESTful principals at scale with an end-to-end developer workflow for buildings REST APIs that promotes clean REST practices, uniform interface design and consistent data modeling. Source | Documentation | Discussion Group Features End-to-end framework for building RESTful APIs Approachable APIs for writing non-blocking client and server code using ParSeq Type-safe development using generated data and client bindings JAX-RS inspired annotation driven server side resource development Engineered and battle tested for high scalability and high availability Optional Dynamic Discovery subsystem adds client side load balancing and fault tolerance Backward compatibility checking to ensure all API changes are safe Support for batch operations, partial updates and projections Web UI for browsing and searching a catalog of rest.li APIs. Website http://rest.li Documentation See our wiki for full documentation and examples. Community Discussion Group: Linkedin Rest.li Group Follow us on twitter: @rest_li Issue Tracking: github issue tracking Quickstart Guides and Examples Quickstart - a step-by-step tutorial on the basics Guided walkthrough of an example application Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/linkedin/rest.li"	"Framework for building robust, scalable RESTful architectures using type-safe bindings and asynchronous, non-blocking IO with an end-to-end developer workflow that promotes clean practices, uniform interface design and consistent data modeling."	"true"
"REST Frameworks"	"RESTEasy"	"http://resteasy.jboss.org/"	"Fully certified and portable implementation of the JAX-RS specification."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"496"	"67"	"604"	"GitHub - resteasy/Resteasy: REST and JAXRS Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 67 Star 496 Fork 604 resteasy/Resteasy Code Pull requests 21 Pulse Graphs REST and JAXRS http://jboss.org/resteasy 3,179 commits 8 branches 123 releases 95 contributors Java 99.7% Other 0.3% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0.x Branch_2_3 Branch_2_3_7 eap-prod master revert-584-WFLY-2859 revert-623-patch-1 revert-710-RESTEASY-222 Nothing to show RESTEASY_2_3_0_GA@1578 RESTEASY_2_3_0_GA RESTEASY_2_3_RC_1@1573 RESTEASY_2_3_RC_1@1570 RESTEASY_2_3_RC_1 RESTEASY_2_3_BETA_1@1438 RESTEASY_2_3_BETA_1 RESTEASY_2_2_1_GA@1390 RESTEASY_2_2_1_GA RESTEASY_1_2_1_GA@881 RESTEASY_1_2_1_GA RESTEASY_JAXRS_2_3_2_FINAL RESTEASY_JAXRS_2_3_1_GA RESTEASY_JAXRS_2_2_3_GA RESTEASY_JAXRS_2_2_2_GA RESTEASY_JAXRS_2_2_0_GA@1367 RESTEASY_JAXRS_2_2_0_GA@1364 RESTEASY_JAXRS_2_2_0_GA RESTEASY_JAXRS_2_2_RC_1@1360 RESTEASY_JAXRS_2_2_RC_1 RESTEASY_JAXRS_2_2_BETA_1@1324 RESTEASY_JAXRS_2_2_BETA_1 RESTEASY_JAXRS_2_1_0_GA@1282 RESTEASY_JAXRS_2_1_0_GA RESTEASY_JAXRS_2_1_0_GA_CP01 RESTEASY_JAXRS_2_1_BETA_1 RESTEASY_JAXRS_2_0_1_GA@1184 RESTEASY_JAXRS_2_0_1_GA RESTEASY_JAXRS_2_0_0_GA@1122 RESTEASY_JAXRS_2_0_0_GA RESTEASY_JAXRS_2_0_RC1@1115 RESTEASY_JAXRS_2_0_RC1 RESTEASY_JAXRS_2_0_BETA_4@1071 RESTEASY_JAXRS_2_0_BETA_4 RESTEASY_JAXRS_2_0_BETA_3@1068 RESTEASY_JAXRS_2_0_BETA_3 RESTEASY_JAXRS_2_0_BETA_2@991 RESTEASY_JAXRS_2_0_BETA_2 RESTEASY_JAXRS_2_0_BETA_1@911 RESTEASY_JAXRS_2_0_BETA_1 RESTEASY_JAXRS_1_2_1_GA RESTEASY_JAXRS_1_2_1_GA_CP03 RESTEASY_JAXRS_1_2_1_GA_CP02 RESTEASY_JAXRS_1_2_1_GA_CP01 RESTEASY_JAXRS_1_2_GA@861 RESTEASY_JAXRS_1_2_GA RESTEASY_JAXRS_1_2_GA_CP03 RESTEASY_JAXRS_1_2_GA_CP02 RESTEASY_JAXRS_1_2_GA_CP01 RESTEASY_JAXRS_1_1_GA@746 RESTEASY_JAXRS_1_1_GA RESTEASY_JAXRS_1_1_GA_CP03 RESTEASY_JAXRS_1_1_GA_CP02 RESTEASY_JAXRS_1_1_GA_CP01 RESTEASY_JAXRS_1_1-RC2@663 RESTEASY_JAXRS_1_1-RC2 RESTEASY_JAXRS_1_1-RC1@600 RESTEASY_JAXRS_1_1-RC1 RESTEASY_JAXRS_1_0_2_GA RESTEASY_JAXRS_1_0_1_GA RESTEASY_JAXRS_1_0_0_GA@546 RESTEASY_JAXRS_1_0_0_GA RESTEASY_JAXRS_1_0_RC1@540 RESTEASY_JAXRS_1_0_RC1 RESTEASY_JAXRS_1_0_BETA_8@346 RESTEASY_JAXRS_1_0_BETA_8 RESTEASY_JAXRS_1_0_BETA_7@344 RESTEASY_JAXRS_1_0_BETA_7 RESTEASY_JAXRS_1_0_BETA_6@339 RESTEASY_JAXRS_1_0_BETA_6 RESTEASY_JAXRS_1_0_BETA_5@182 RESTEASY_JAXRS_1_0_BETA_5 RESTEASY_JAXRS_1_0_BETA_4@166 RESTEASY_JAXRS_1_0_BETA_4 RESTEASY_JAXRS_1_0_BETA_3@146 RESTEASY_JAXRS_1_0_BETA_3 RESTEASY_JAXRS_1_0_BETA_2@137 RESTEASY_JAXRS_1_0_BETA_2@134 RESTEASY_JAXRS_1_0_BETA_2 RESTEASY_JAXRS_1_0_BETA-9@447 RESTEASY_JAXRS_1_0_BETA-9 RESTEASY_JAXRS_BETA1@99 RESTEASY_JAXRS_BETA1 HORNETQ_REST_1_0_BETA_3@1286 HORNETQ_REST_1_0_BETA_3 HORNETQ_REST_1_0_BETA_2@1261 HORNETQ_REST_1_0_BETA_2 HORNETQ_REST_1_0_BETA_1@1173 HORNETQ_REST_1_0_BETA_1 3.0.18 3.0.17.Final 3.0.16.Final 3.0.15.Final 3.0.14.Final 3.0.13.Final 3.0.12.Final 3.0.11.Final 3.0.10.Final 3.0.9.Final 3.0.8.Final Nothing to show New pull request Latest commit 4de7515 Jul 15, 2016 asoldano committed on GitHub Merge pull request #870 from asoldano/RESTEASY-1338 … [RESTEASY-1338] Upgrading Netty 3 Permalink Failed to load latest commit information. arquillian [RESTEASY-1361] More removal od duplicated / not-needed anymore stuff Jul 8, 2016 as8-mavenized-distro [RESTEASY-1361] Adding a bunch of pom.xml schema declarations May 31, 2016 as8-resteasy [RESTEASY-1361] Adding a bunch of pom.xml schema declarations May 31, 2016 async-http-servlet-3.0 [RESTEASY-1361] Move jboss-logging-annotations version / scope declar… Jun 9, 2016 config [RESTEASY-1361] Removing 'jaxrs' dir May 24, 2016 distribution [RESTEASY-1361] Fix pom schema and assembly plugin version May 31, 2016 docbook Corrected a typo. Jun 7, 2016 eagledns [RESTEASY-1435] Fix eagledns-fork dependency in resteasy-crypto Jul 6, 2016 integration-tests [RESTEASY-1361] Removing unused and duplicated by new testsuite classes Jul 8, 2016 jboss-modules [RESTEASY-1316] Misc fixes on poms Jun 9, 2016 providers [RESTEASY-1402] Moving test to new integration-test area; this closes #… Jul 15, 2016 resteasy-bom [RESTEASY-1361] Removing 'jaxrs' dir May 24, 2016 resteasy-cache [RESTEASY-1409] updated dynamic (code) config and static (xml) config… Jun 13, 2016 resteasy-cdi [RESTEASY-1361] Removing unused and duplicated by new testsuite classes Jul 8, 2016 resteasy-client RESTEASY-1431 SNI support for RestEASY-Netty4 Jul 14, 2016 resteasy-guice [RESTEASY-1361] Renaming and reodering or properties; also added depe… Jun 9, 2016 resteasy-jaxrs-testsuite [RESTEASY-1361] Removing unused test support classes Jul 8, 2016 resteasy-jaxrs [RESTEASY-1439] Moving test together with other unit tests Jul 13, 2016 resteasy-jsapi-testing [RESTEASY-1361] Move jboss-logging-annotations version / scope declar… Jun 9, 2016 resteasy-jsapi [RESTEASY-1361] Move jboss-logging-annotations version / scope declar… Jun 9, 2016 resteasy-links [RESTEASY-1361] Move jboss-logging-annotations version / scope declar… Jun 9, 2016 resteasy-servlet-initializer [RESTEASY-1361] Move jboss-logging-annotations version / scope declar… Jun 9, 2016 resteasy-spring [RESTEASY-1361] Removing unused classes Jul 8, 2016 resteasy-test-data [RESTEASY-1361] Removing 'jaxrs' dir May 24, 2016 resteasy-wadl RESTEASY-1246 Part II Jun 15, 2016 security [RESTEASY-1361] Removing tests duplicated by new testsuite Jul 8, 2016 server-adapters [RESTEASY-1338] Upgrading Netty 3 Jul 15, 2016 testsuite [RESTEASY-1402] Moving test to new integration-test area; this closes #… Jul 15, 2016 tjws [RESTEASY-1410] Added @Deprecated to TJWS classes. Jun 1, 2016 travis-libs [RESTEASY-1436] Adding jce policy jar for Travis to consume it Jul 7, 2016 .gitignore [RESTEASY-1361] Fix maven warnings & few duplications May 25, 2016 .travis.yml [RESTEASY-1436] Use latest JDK 1.8 and manually configure unlimited c… Jul 7, 2016 CONTRIBUTING.md README.md: Getting started guide and Contributing.md Aug 5, 2014 License.html [RESTEASY-1361] Removing 'jaxrs' dir May 24, 2016 README.html [RESTEASY-1361] Removing 'jaxrs' dir May 24, 2016 README.md Update README.md Feb 29, 2016 pom.xml [RESTEASY-1338] Upgrading Netty 3 Jul 15, 2016 README.md Resteasy Resteasy is a JBoss.org project aimed at providing productivity frameworks for developing client and server RESTful applications and services in Java. It is mainly a JAX-RS implementation but you'll find some other experimental code in the repository. The project page can be found at http://resteasy.jboss.org JAX-RS RESTEasy is a JBoss project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications. It is a portable implementation of the JAX-RS specification. JAX-RS is a new JCP specification that provides a Java API for RESTful Web Services over the HTTP protocol. Read the entire specification here The JAX-RS code is in the jaxrs directory. Getting started with RESTEasy Read a book Check out the examples in the repository. Read the documentation. Documentation To read the documentation you can read it online. This is generated automatically from the maven build A wiki exists. You can find it here Issues Issues are kept in JIRA Build After pulling down a clone of the Resteasy repository run mvn install  Currently it can be built only with JDK 1.7. JDK 1.8 breaks ant scriptlets because script engine changed from rhino to nashorn. Requirements Java Cryptography Extension JCE Contribute You are most welcome to contribute to RESTEasy! Read the Contribution guidelines Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/resteasy/Resteasy"	"Fully certified and portable implementation of the JAX-RS specification."	"true"
"REST Frameworks"	"RestExpress"	"https://github.com/RestExpress/RestExpress"	"Thin wrapper on the JBoss Netty HTTP stack to provide scaling and performance."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"634"	"89"	"219"	"GitHub - RestExpress/RestExpress: Minimalist Java framework for rapidly creating scalable, containerless, RESTful microservices. Ship a production-quality, headless, RESTful API in the shortest time possible. Uses Netty for HTTP, Jackson for JSON, Metrics for metrics, properties files for configuration. Sub-projects and plugins enable, NoSQL, Swagger, Auth0, HAL integration, etc. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 89 Star 634 Fork 219 RestExpress/RestExpress forked from tfredrich/RestExpress Code Issues 27 Pull requests 0 Wiki Pulse Graphs Minimalist Java framework for rapidly creating scalable, containerless, RESTful microservices. Ship a production-quality, headless, RESTful API in the shortest time possible. Uses Netty for HTTP, Jackson for JSON, Metrics for metrics, properties files for configuration. Sub-projects and plugins enable, NoSQL, Swagger, Auth0, HAL integration, etc. https://groups.google.com/d/forum/restexpress 884 commits 22 branches 44 releases 9 contributors Java 99.6% Shell 0.4% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9.4.1-ErrorJSONResponse 0.10.6 RestExpress-1.0 content-type-negotiation dead-async-behavior-issue-34 fluent_route_builder gh-pages issue-finally-processors jackson-serialization-issue-52 master netty-40-upgrade reintroduce-gson-support release serialization-to-binary static_file_server streaming_routes urlmatcher_regex v0.7.3 v0.7.4 v0.8.0 v0.8.2 #110-too-many-files-open Nothing to show v0.8.0-20130109-0742 v0.7.4-20121130 v0.7.3-20120712 v0.7.2-20120514 v0.7.1-20110920 v0.6.1.1-20110331 v0.6.1-20110330 v0.6.0.2-20110321 v0.5.6.1-20110311 v0.5.6.1-20110302 restexpress-parent-0.11.3 restexpress-parent-0.11.2 restexpress-parent-0.11.1 restexpress-parent-0.11.0 restexpress-parent-0.10.5 restexpress-parent-0.10.4 restexpress-parent-0.10.3 restexpress-parent-0.10.2 restexpress-parent-0.10.1 restexpress-parent-0.10.0 restexpress-parent-0.9.4.2 restexpress-parent-0.9.4.1 restexpress-parent-0.9.4 restexpress-0.10.6-snapshot final-gson-serialization-20130129 RestX-0_5_6-20110118 RestX-0_5_5-20110112 RestX-0_5_4-20110106 RestX-0_5_4-20101222 RestX-0_5_3-20101216 RestX-0_5_2-20101215 RestX-0_5_1-20101015 RestX-0_5-20101006 RestX-0_4-20100929 RestX-0_3-20100831 RestExpress-0.9.3 RestExpress-0.9.2 RestExpress-0.9.1 RestExpress-0.9.0 RestExpress-0.8.2 RestExpress-0.8.1 RestExpress-0_6_0-20110211 RestExpress-0_6_0-20110210 RestExpress-0_5_6-20110118 Nothing to show New pull request Pull request Compare This branch is 547 commits ahead, 2 commits behind tfredrich:master. Latest commit 5af1eb3 May 6, 2016 tfredrich Fixed timing issues in some tests. Permalink Failed to load latest commit information. common Fixed timing issues in some tests. May 6, 2016 core Fixed timing issues in some tests. May 6, 2016 docs Updated DSL documentation (minor) Sep 17, 2015 images Added RESTExpress logos in images/ directory. Nov 27, 2012 .gitignore Merge branch '0.10.6' Feb 16, 2015 LICENSE Added NOTICE entries for XStream and XPP3. Updated copyright in LICEN… Mar 16, 2010 NOTICE Upgraded dependancies: Netty (3.5.2), GSON (2.2.2), XStream (1.4.2). … Jul 5, 2012 README.md Upgraded Jackson Databind to 2.7.4 and Netty to 4.0.36.final Apr 29, 2016 UPDATE.md Version Change Documentation Jan 8, 2015 pom.xml Fixed timing issues in some tests. May 6, 2016 README.md RestExpress is a thin wrapper on the JBOSS Netty HTTP stack to provide a simple and easy way to create RESTful services in Java that support massive Internet Scale and performance. Born to be simple, only three things are required to wire up a service: The main class which utilizes the RestExpress DSL to create a server instance. Use a DSL for the declaration of supported URLs and HTTP methods of the service(s) (much like routes.rb in a Rails app). Service implementation(s), which is/are a simple POJO--no interface or super class implementation. See: https://github.com/RestExpress/RestExpress-Archetype to get started (there is a README there). Maven Usage Stable:         <dependency>             <groupId>com.strategicgains</groupId>             <artifactId>RestExpress</artifactId>             <version>0.11.3</version>         </dependency> Development:         <dependency>             <groupId>com.strategicgains</groupId>             <artifactId>RestExpress</artifactId>             <version>0.11.4-SNAPSHOT</version>         </dependency> Or download the jar directly from: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22RestExpress%22 Note that to use the SNAPSHOT version, you must enable snapshots and a repository in your pom file as follows (if you already have a profile with repositories in your pom, you can just copy the section):   <profiles>     <profile>        <id>allow-snapshots</id>           <activation><activeByDefault>true</activeByDefault></activation>        <repositories>          <repository>            <id>sonatype-snapshots-repo</id>            <url>https://oss.sonatype.org/content/repositories/snapshots</url>            <releases><enabled>false</enabled></releases>            <snapshots><enabled>true</enabled></snapshots>          </repository>        </repositories>      </profile>   </profiles> A quick tutorial: Please see the Maven Archetypes at https://github.com/RestExpress/RestExpress-Archetype for kick-starting your API. HTTP Methods, if not changed in the fluent (DSL) interface, map to the following: GET --> read(Request, Response) PUT --> update(Request, Response) POST --> create(Request, Response) DELETE --> delete(Request, Response) You can choose to return objects from the methods, if desired, which will be returned to the client in the body of the response. The object will be marshaled into JSON or XML, depending on the default or based on the format in the request (e.g. '.xml' or '?format=xml'). If you choose to not return a value from the method (void methods) and using raw responses, then call response.setResponseNoContent() before returning to set the response HTTP status code to 204 (no content). On successful creation, call response.setResponseCreated() to set the returning HTTP status code to 201. For more real-world examples, see the https://github.com/RestExpress/RestExpress-Examples repo which contains additional projects that setup RestExpress services. Simply do 'mvn exec:java' to run them. Then to see what's available perform a GET on the route: '/routes/metadata' to get a list of all the routes (or endpoints) available (e.g. localhost:8081/routes/metadata in the browser). Change History/Release Notes: Release 0.11.4-SNAPSHOT (in master) Issue #126 - Introduced RestExpress.noCompression() to turns off response GZip and deflate encoding support (the Netty HttpContentCompressor is not put in the pipeline) for speed optimization (e.g. for small payloads). Upgraded Jackson Databind to 2.7.4 Upgraded Netty to 4.0.36.final Release 0.11.3 - 10 Feb 2016 Changed signature of RestExpress.serializationProvider(SerializationProvider) to return the RestExpress server instance to facilitate method chaining. Issue #38 - Produce error on no routes defined for server. Now throws NoRoutesDefinedException on bind() if no routes are defined. Issue #122 - Listen on prescribed local IP address. Issue #123 - Routes Exception when using PATCH method. Issue #125 - Changed DefaultExceptionMapper to map cause for RuntimeException (not sub-classes) so all exceptions get mapped correctly from the mapping settings. Left a version, LegacyExceptionMapper, for old behavior. If you want legacy behavior, simply call server.setExceptionMapping(new LegacyExceptionMapper()); Upgraded to jackson-databind 2.6.0 (from 2.4.2). Minor fixes due to FindBugs report. There were 11 easily fixable issues reported by FindBugs: primarily equals(), hashCode() and compareTo() implementations. Added UnprocessableEntityException (for 422 status code). Upgraded to: Netty 4.0.34.Final, XStream 1.4.8, OWasp Encoder 1.2, Jackson Databind 2.7.1-1, HTTP Client (test) 4.5.1 Release 0.11.2 - 26 Jul 2015 Reduced Java source and target to 1.7 Release 0.11.1 - 24 Jul 2015 Fixed issue #110 - too many files open error. Fixed issue #108 - request.getRemoteAddress() always returns null. Fixed issue #94 - Load configuration properties from classpath (if available) and override with those loaded from file system. Fixed issue #106 - Deprecated RestExpress.setSerializationProvider() and RestExpress.getSerializationProvider() in favor of RestExpress.setDefaultSerializationProvider() and RestExpress.getDefaultSerializationProvider(). Also added new instance methods serializationProvider() to set and get the instance's serialization provider. Fixed issue #89 - Made RouteBuilder.determineActionMethod() protected so subclasses can override. Enhanced to use EPoll if it's available on the underlying OS. Added support for ':in:' operator on query-string in filter operations (e.g. ?filter=name:in:a,b,c). Introduced RestExpress.shutdown(boolean) to enable tests to optionally wait for a complete shutdown. Fix for returning 416 when offset is requested for an empty resultset (from Chamal Nanayakkara). Updated Java destination to 1.8 Release 0.11.0 - 12 Mar 2015 Bug Fix Strip the response body from HEAD requests to conform to RFC 2616(HTTP spec). (from Codey Whitt) Upgraded Netty version from 3.9.5.Final to 4.0.25.Final (from Thomas Colwell and Mathew Leigh). Enhanced QueryRange.asContentRange() and Response.setCollectionResponse() to support output of '*' as max items in range header for count < 0. Added Unit Tests to test RestExpress' ability to compress responses and decompress requests. Added Environment.load(String[], Class) to eliminate the need for Main.loadEnvironments() in all archetype projects. KNOWN ISSUE - Controllers cannot return ReferenceCounted objects that also exist in the Request object. This will cause the transaction to fail with an IllegalReferenceCountException. If a ReferenceCounted object needs to be returned, a separate copy of the object will need to be made (some classes, such as ByteBuf, have a .copy() method to facilitate this). Release 0.10.6-SNAPSHOT - in '0.10.6' branch Bug Fix Strip the response body from HEAD requests to conform to RFC 2616(HTTP spec). (from Codey Whitt) Release 0.10.5 - 2 Dec 2014 Changed FilterComponent.setValue(String) signature to setValue(Object). Added suite of operators (:<:, :<=:, :>:, :>=:, :=:, :!=:, :*: [as starts-with]) to filter operations. Added UnsupportedMediaTypeException which returns 415 HTTP status code. Added ContentType.SIREN Added RoutePlugin.flags() and .parameters() to retrieve flags and parameters, respectively. Altered httpRequest.xxxHeader() calls to use httpRequest.headers().xxx() to eliminate deprecation warnings. Upgraded to Netty 3.9.5 final. Release 0.10.4 - 5 Sep 2014 Upgraded Jackson Databind to version 2.4.1 to fix an issue with incorrect serialization for objects that have embedded objects. Added XSS prevention outbound encoding to GsonJsonProcessor adding GsonEncodingStringSerializer. Added parseFrom(Request, String[]) method to QueryFilters and QueryOrders. Added tests to verify output media type. Added tests for wrapping of exceptions in processing and preprocessors. Fixed bug in AbstractSerializationProvider.resolveRequest() to use best matched Media Type, if available (vs. just the Content-Type header). Introduced _ignore_http_status query-string parameter to force call to return 200 status (even on failure). Introduced Request.getMediaType() and Request.getSerializationSettings(), as well as, Response.getMediaType(). Added new constructor for JacksonJsonProcessor and GsonJsonProcessor to be able to turn off default outbound HTML-encoding behavior. Refactored DefaultRequestHandler.messageReceived() method into two to allow for better instrumentation via java agents like AppDynamics (from Codey Whitt). Upgraded Jackson Databind to 2.4.2 Upgraded XStream to 1.4.7 Upgraded Netty to 3.9.4.Final Upgraded GSON dependency to 2.3 Release 0.10.3 - 27 May 2014 Change URL Pattern matcher to allow URLs with '?' at the end, but no query-string parameters following it. Changed compiler output version to 1.7 (from 1.6). Added SSL support (from Clark Hobbie). Fixed error message in QueryRange.setLimit(int) from 'limit must be >= 0' to 'limit must be > 0' (from GCL). Changed Request.getQueryStringMap() to never return null (from Kevin Williams). Expose the creation of the DefaultRequestHandler (via RestExpress.buildRequestHandler()) to rest engines not using ""main()"" or ""bind()"" (from Ryan Dietrich). Fixed issue with QueryOrders.enforceAllowedProperties() threw erroneous exceptions. Added JacksonEncodingStringSerializer (including it in JacksonJsonProcessor) to outbound HTML Entity encode for possible XSS attacks. Updated to Jackson-Databind 2.3.3 (from 2.1.4). Release 0.10.2 - 3 Apr 2014 Refactored ExceptionMapping into an interface, extracting previous implementation into DefaultExceptionMapper. Added new convenience methods on Request: getBodyAsStream(), getBodyAsBytes(), getBodyAsByteBuffer(). Added new method Request.getNamedPath() that returns only the route path pattern instead of the entire URL, which Request.getNamedUrl() does. Request.getProtocol() now returns the protocol from the underlying HttpRequest instance. Fixed issue in QueryOrders where only a single valid order parameters is supported. Caused IndexOutOfBoundsException. Fixed an issue in RestExpress.java where finally processors were assigned as post processors. This could affect some finally processor implementations, such as timers, etc. since they are now run later in the process. Fixed an issue with finally processors, they are now called before the message is returned to the client (after serialization), or in the finally block (if an error occurs, response is in indeterminite state). Introduced another factory method in ErrorResult, allowing elimination of exceptionType in output. Introduced RequestContext, a Map of name/value pairs much like the Log4j mapped diagnostic contexts (MDC), as an instrument for passing augmentation data from different sources to lower levels in the framework. Can now add supported MediaRange(s) dynamically at startup, such as application/hal+json. ** Breaking Change ** Repackaged org.serialization.xml to org.restexpress.serialization.xml Added ContentType.HAL_JSON and ContentType.HAL_XML plus new RestExpressServerTest tests. Introduced RoutePlugin to simplify plugins that create internal routes. Release 0.10.1 - 24 Jan 2014 Fixed NPE issue when RestExpress.setSerializationProvider() is not called. Fixed misspelling in JsonSerializationProcessor.java for SUPPORTED_MEDIA_TYPES. Enhanced QueryFilters and QueryOrders to support enforcement of appropriate filter/order properties—enabling the verification of appropriate orders and filters. Throws BadRequestException on failure. Removed core StringUtils in favor of common StringUtils. Fixed issue where default serialization processor was not used if setSerializationProcessor() was not called. Changed RestExpress server startup message from “Starting Server on port ” to “ server listening on port ” Release 0.10.0 - 3 Jan 2014 ** Breaking Change ** Repackaged to 'org.restexpress...' from 'com.strategicgains.restexpress...' ** Breaking Change ** Re-added GSON capability from version 0.8.2, making things a little more pluggable with RestExpress.setSerializationProvider(SerializationProvider). DefaultSerializationProvider is the default. GsonSerializationProvider is also available, but requires adding GSON to your pom file. Must refactor your own custom ResponseProcessor class into a SerializationProvider implementor. ** Breaking Change ** Removed RestExpress.putResponseProcessor(), .supportJson(), .supportXml(), .supportTxt(), .noJson(), .noXml(), noTxt() as this is all implemented in the SerializationProvider. Implemented content-type negotiation using Content-Type header for serialization (e.g. Request.getBodyAs(type)) and Accept header for deserialization. Implementation still favors .{format}, but uses content-type negotiation if format not supplied. Added RestExpress.enforceHttpSpec() and .setEnforceHttpSpec(boolean) to enable setting the HTTP specification enforcement. Previously, enforcement was always turned on. Now default is OFF. With it off, RestExpress allows you to create non-standard (per the HTTP specification) responses. Removed com.strategicgains.restexpress.common.util.Callback interface since it wasn't being used. Upgraded Netty to 3.9.0 Final Release 0.9.4.2 - 16 Oct 2013 Added ErrorResultWrapper and ErrorResult to facilitate only wrapping error responses vs. not wrapping or JSEND-style always-wrapped responses. Release 0.9.4 - 17 Jul 2013 Fixed issue for plugins that are dependent on RouteMetadata. Fixed issue with routes that depend on GET, PUT, POST, DELETE as the default--wasn't generating metadata correctly for that corner case. Fixed issue with RouteBuilder metadata generation where it wouldn't include the defaults if none set on route. Updated javadoc for getFullPattern() and getPattern(). Changed Route.getBaseUrl() to perform null check to avoid getting 'null' string in value. Combined RestExpress-Common as a sub-module and moved core RestExpress functionality to the 'core' sub-module. Release 0.9.3 - 14 Jun 2013 Fixed issue with setter getting called in deserialization instead of Jackson deserializer. Removed LogLevel enumeration due to lack of use. Fixed issue #61 - Large Chunked Request Causes Errors. Added HttpChunkAggregator to the pipeline. Added RestExpress.setMaxContentSize(int) to allow limiting of total content length of requests even if chunked. Default max content size is 25K. Added RestExpress.iterateRouteBuilders(Callback callback) to facilitate plugins, etc. augmenting or extracting information from the declared routes. Release 0.9.2 - 27 Mar 2013 DEPRECATED: Request.getUrlDecodedHeader() and Request.getRawHeader() in favor of getHeader(). Since all HTTP headers and query-string parameters are URL decoded before being put on the Request object, these methods are redundant and cause problems. Their functionality was also changed to simply call getHeader()--so no URL decoding is done in getUrlDecodedHeader(). Ensured that parameters extracted from the URL are decoded before setting them as headers on the Request. Now all headers are URL decoded before any call to Request.getHeader(String). Added Request.getRemoteAddress(), which returns the remote address of the request originator. Merged pull request (Issue #58) from amitkarmakar13: add List<String> getHeaders(String) Removed '?' and '#' as valid path segment characters in UrlPattern to conform better with IETF RFC 3986, section 3.3-path. Made '{format}' a first-class element for matching URL route patterns (by using '{format}' instead of a regex to match). Release 0.9.1 - 4 Mar 2013 BREAKING CHANGE: eliminated GSON. RestExpress now uses Jackson for JSON processing. The changes are localized to the 'serialization' package. Simply copy the ObjectIdDeserializer, ObjectIdSerializer and JsonSerializationProcessor from https://github.com/RestExpress/RestExpress-Scaffold/tree/master/mongodb/src/main/java/com/strategicgains/restexpress/scaffold/mongodb/serialization for MongoDB-based projects. Or just the JsonSerializationProcessor from https://github.com/RestExpress/RestExpress-Scaffold/tree/master/minimal/src/main/java/com/strategicgains/restexpress/scaffold/minimal/serialization for a minimal project. BREAKING CHANGE: Removed Chunking and compression settings. RestExpress does not support chunking/streaming uploads. So the setting were superfluous. The facility is still there to support streaming downloads, however, and these will be chunked as necessary. As compression is based on the Accept header, support is always provided--settings are superfluous. NOTE: streaming downloads are not fully implemented yet. BREAKING CHANGE: Removed LoggingHandler from the Netty pipeline and related setter methods. Added HttpBasicAuthenticationPreprocessor to facilitate HTTP Basic Authentication. Added Flags.Auth.PUBLIC_ROUTE, NO_AUTHENTICATION, and NO_AUTHORIZATION to support configuration of HttpBasicAuthenticationPreprocessor (and other authentication/authorization related routes). Release 0.8.2 - 19 Feb 2013 Fixed issue in Request.parseQueryString() to URL decode query-string parameters before putting them in the Request header. Release 0.8.1 - 16 Jan 2013 Removed Ant-build artifacts. Extracted Query-related classes into RestExpress-Common. Fixed maven compile plugin to generate Java target and source for 1.6 Updated Netty dependency to 3.6.2.Final Removed dependency on HyperExpress. Release 0.8.0 - 09 Jan 2013 Pushed to Maven Central repository. Introduced maven build. Merged pull request #49 - Added method to get all headers from a HttpRequest. Fixed issue #40 (https://github.com/RestExpress/RestExpress/issues/40). Introduced route 'aliases' where there are multiple URLs for a given service. Introduced concept of ""finally"" processors, which are executed in the finally block of DefaultRequestHandler and all of them are executed even if an exception is thrown within one of them. This enable the CorsHeaderPlugin to set the appropriate header even on not found errors, etc. Changed to support multiple response types with wrapping or not, etc. Now can support wrapped JSON (.wjson) and XML (.wxml) as well as un-wrapped JSON (.json) and XML (.xml) depending on the format specifier. Now throws BadRequestException (400) if the specified format (e.f. .json) isn't supported by the service suite. Now throws MethodNotAllowedException (405) if the requested URL matches a route but not for the requested HTTP method. Sets the HTTP Allow header to a comma-delimited list of accepted methods. Removed StringUtils.parseQueryString() as it was previously deprecated--use QueryStringParser. Introduced String.join() methods (2). Removed JSONP handling, favoring use of CORS instead, introducing CorsHeaderPlugin and corresponding post-processor. Wraps ETAG header in quotes. Renamed QueryRange.stop to QueryRange.limit. Removed need for RouteDefinition class, moving that functionality into the RestExpress builder. Changed example apps to reflect above elimination of RouteDefinition class. Release 0.7.4 - 30 Nov 2012 (branch 'v0.7.4') Patch release to allow period ('.') as a valid character within URL parameters. Note that this now allows a period to be the last character on the URL whether there is a format-specifier parameter declared for that route, or not. Also, if the route supports the format specifier and there is a period in the last parameter of the URL, anything after the last period will be used as the format for the request--which may NOT be what you want. -- /foo/todd.fredrich --> /foo/{p1}.{format} will use 'fredrich' as the format -- /foo/todd.fredrich.json --> /foo/{p1}.{format} will use 'json' as the format -- /foo/todd. --> /foo/{p1}.{format} will contain 'todd.' for the value of p1 -- /foo/todd. --> /foo/{p1} will contain 'todd.' for the value of p1 Release 0.7.3 - 12 July 2012 (branch 'v0.7.3') Patch release to fix an issue with i18n. Fixed issue with DefaultJsonProcessor.deserialize(ChannelBuffer, Class) where underlying InputStreamReader was not UTF-8. Release 0.7.2 - 14 May 2012 Introduced ExecutionHandler with configuration via RestExpress.setExecutorThreadCount(int) to off-load long-running requests from the NIO workers into a separate thread pool. Introduced CacheControlPlugin which leverages CacheHeaderPostprocessor, DateHeaderPostprocessor and EtagHeaderPostprocessor to respond to GET requests. Introduced EtagHeaderPostprocessor which adds ETag header in response to GET requests. Introduced DateHeaderPostprocessor which adds a Date header to responses to GET requests. Introduced CacheHeaderPostprocessor which support Cache-Control and other caching-related response header best-practices by setting Parameters.Cache.MAX_AGE or Flags.Cache.DONT_CACHE on a route. Changed to use QueryStringParser over StringUtils for query-string and QueryStringDecoder for body parsing. This mitigates HashDoS attacks, since the query-string is parsed before a request is accepted. Deprecated StringUtils in favor of using Netty's QueryStringDecoder or RestExpress's QueryStringParser. Refactored so SerializationProcessor.resolve(Request) is only called once at the end of the request cycle (performance enhancement). Release 0.7.1 - 20 Sep 2011 Added rootCause to ResultWrapper data area. Exposed the XStream object from DefaultXmlProcessor. Renamed Link to XLink. Renamed LinkUtils to XLinkUtils, adding asXLinks() method that utilizes XLinkFactory callback to create the XLink instances. Changed URL Matching to support additional characters: '[', ']', '&' which more closely follows W3C the specification. Added ability to return query string parameters as a Map from the Request. Introduced Request.getBaseUrl() which returns protocol and host, without URL path information. Introduced query criteria capability: filter, order, range (for pagination). Introduced the concept of Plugins. Refactored the console routes to use the new plugin concept. Updated Netty jars (to 3.2.5). Added ability to set the number of worker threads via call to RestExpress.setWorkerThreadCount() before calling bind(). Release 0.7.0 Added gzip request/response handling. On by default. Disable it via call to RestExpress.noCompression() and supportCompression(). Added chunked message handling. On by default. Chunking settings are managed via RestExpress.noChunkingSupport(), supportChunking(), and setMaxChunkSize(int). Release 0.6.1.1 - 31 Mar 2011 Bug fix to patch erroneously writing to already closed channel in DefaultRequestHandler.exceptionCaught(). Release 0.6.1 - 30 Mar 2011 Stability release. Fixed issue when unable to URL Decode query string parameters or URL. Introduced SerializationResolver that defines a getDefault() method. Implemented SerializationResolver in DefaultSerializationResolver. Changed UrlPattern to match format based on non-whitespace vs. word characters. Refactored Request.getHeader() into getRawHeader(String) and getUrlDecodedHeader(String), along with corresponding getRawHeader(String,String) and getUrlDecodedHeader(String,String). Renamed realMethod property to effectiveHttpMethod, along with appropriate accessor/mutator. Removed Request from Response constructor signature. Added FieldNamingPolicy to DefaultJsonProcessor (using LOWER_CASE_WITH_UNDERSCORES). getUrlDecodedHeader(String) throws BadRequestException if URL decoding fails. Release 0.6.0.2 - 21 Mar 2011 Fixed issue with 'connection reset by peer' causing unresponsive behavior. Utilized Netty logging behavior to add logging capabilities to RestExpress. Made socket-level settings externally configurable: tcpNoDelay, KeepAlive, reuseAddress, soLinger, connectTimeoutMillis, receiveBufferSize. Merged in 0.5.6.1 path release changes. Added enforcement of some HTTP 1.1 specification rules: Content-Type, Content-Length and body content for 1xx, 204, 304 are not allow. Now throws HttpSpecificationException if spec. is not honored. Added ability to add 'flags' and 'parameters' to routes, in that, uri().flag(""name"") on Route makes test request.isFlagged(""name"") return true. Also, uri().parameter(""name"", ""value"") makes request.getParamater(""name"") return ""value"". Not returned/marshaled in the response. Useful for setting internal values/flags for preprocessors, controllers, etc. Added .useRawResponse() and .useWrappedResponse() to fluent route DSL. Causes that particular route to wrap the response or not, independent of global response wrap settings. Parameters parsed from the URL and query string arguments are URL decoded before being placed as Request headers. Release 0.6.0.1 Issue #7 - Fixed issue with invalid URL requested where serialization always occurred to the default (JSON). Now serializes to the requested format, if applicable. Issue #11 - Feature enhancement for Kickstart. Now utilizes Rails-inspired configuration environements (e.g. dev, testing, prod, etc.). Issue #12 - Parse URL parameter names out of the URL pattern and include them in the route metadata output. Release 0.6.0 Routes now defined in descendant of RouteDeclaration. Refactored everything into RestExpress object, using builder pattern for configuration. Implemented RestExpress DSL to declare REST server in main(). Added supported formats and default format to RouteBuilder. Added JSEND-style response wrapping (now default). Call RestExpress.useWrappedResponses() to use. Add ability to support raw response return. Call RestExpress.useRawResponses() to use. Implemented /console/routes.{format} route which return metadata about the routes in this service suite. To use, call RestExpress.supportConsoleRoutes(). Exceptions occurring now return in the requested format with the message wrapped and using the appropriate mime type (e.g. application/json or application/xml). Kickstart application has complete build with 'dist' target that builds a runnable jar file and 'run' target that will run the services from the command line. Kickstart application now handles JVM shutdown correctly using JVM shutdown hooks. The method RestExpress.awaitShutdown() uses the DefaultShutdownHook class. RestExpress.shutdown() allows programs to use their own shutdown hooks, calling RestExpress.shutdown() upon shudown to release all resource. Release 0.5.6.1 - 11 Mar 2011 Patch release to fix issue with HTTP response status of 204 (No Content) and 304 (Not Modified) where they would return a body of an empty string and content length of 2 ('\r\n'). No longer serializes for 204 or 304. Also no longer serializes for null body response unless a JSONP header is passed in on the query string. Release 0.5.6 - 18 Jan 2011 Upgraded to Netty 3.2.3 final. Added getProtocol(), getHost(), getPath() to Request Functionality of getUrl() is now getPath() and getUrl() now returns the entire URL string, including protocol, host and port, and path. Release 0.5.5 Added regex URL matching with RouteMapping.regex(String) method. Refactored Route into an abstract class, moving previous functionality into ParameterizedRoute. Added KickStart release artifact to get projects going quickly--simply unzip the kickstart file. Added SimpleMessageObserver which performs simple timings and outputs to System.out. Release 0.5.4 Added alias() capability to DefaultTxtProcessor to facilitate custom text serialization. Updated kickstart application to illustrate latest features. Minor refactoring of constants and their locations (moved to RestExpress.java). Release 0.5.3 Fixed issue with JSON date/timestamp parsing. Fixed issues with XML date/timestamp parsing. Upgraded to GSON 1.6 release. Added correlation ID to Request to facilitate timing, etc. in pipeline. Added alias(String, Class) to DefaultXmlProcessor. By default, alias List and Link in DefaultXmlProcessor. Release 0.5.2 Introduced DateJsonProcessor (sibling to DefaultJsonProcessor) which parses dates vs. time points. Refactored ExceptionMapping.getExceptionFor() signature from Exception to Throwable. Introduced MessageObserver, which accepts notifications of onReceived(), onSuccess(), onException(), onComplete() to facilitate logging, auditing, timing, etc. Changed RouteResolver.resolve() to throw NotFoundException instead of BadRequestException for unresolvable URI. Release 0.5.1 Enhanced support for mark, unreserved and some reserved characters in URL. Specifically, added $-+*()~:!' and %. Still doesn't parse URLs with '.' within the string itself--because of the support for .{format} URL section. Release 0.5 Renamed repository from RestX to RestExpress. Repackaged everything from com.strategicgains.restx... to com.strategicgains.restexpress... Changed DefaultHttpResponseWriter to output resonse headers correctly. Updated javadoc on RouteBuilder to provide some documentation on route DSL. Release 0.4 Fixed error in ""Connection: keep-alive"" processing during normal and error response writing. Can now create route mappings for OPTIONS and HEAD http methods. Added decoding to URL when Request is constructed. Improved pre-processor implementation, including access to resolved route in request. Better null handling here and there to avoid NullPointerException, including serialization resolver. Improved UT coverage. KickStart application builds and is a more accurate template. Release 0.3 Added support for ""method tunneling"" in POST via query string parameter (e.g. _method=PUT or _method=DELETE) Added JSONP support. Use jsonp= in query string. Utilized Builder pattern in DefaultPipelineFactory, which is now PipelineBuilder. Externalized DefaultRequestHandler in PipelineBuilder and now supports pre/post processors (with associated interfaces). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/RestExpress/RestExpress"	"Thin wrapper on the JBoss Netty HTTP stack to provide scaling and performance."	"true"
"REST Frameworks"	"Restlet Framework"	"https://github.com/restlet/restlet-framework-java/"	"Pioneering framework with powerful routing and filtering capabilities, unified client and server API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"452"	"96"	"212"	"GitHub - restlet/restlet-framework-java: Leading RESTful web API framework for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 96 Star 452 Fork 212 restlet/restlet-framework-java Code Issues 781 Pull requests 10 Wiki Pulse Graphs Leading RESTful web API framework for Java http://restlet.com 8,523 commits 16 branches 82 releases Fetching contributors Java 50.7% HTML 47.3% XSLT 0.8% CSS 0.4% NSIS 0.3% Shell 0.2% Other 0.3% Java HTML XSLT CSS NSIS Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 1.1 2.0 2.1 2.2 2.3 3.15 ci customize-jackson-mappers fix/jaxrs_2 issue1009 master merge_as_3.14 proto/v3 readme-update review/oauth_extension Nothing to show oauth-2.0-draft-10 incubator 2.3.7 2.3.6 2.3.5 2.3.4 2.3.3 2.3.2 2.3.1 2.3.0 2.3rc2 2.3rc1 2.3m5 2.3m4 2.3m2 2.3m1 2.2.3 2.2.2 2.2.1 2.2.0 2.2rc3 2.2m6 2.2m5 2.2m4 2.2m3 2.2m2 2.2m1 2.1.6 2.1.5 2.1.3 2.1.2 2.1.1 2.1.0 2.1 2.1rc6 2.1rc5 2.1rc4 2.1rc3 2.1rc2 2.0.15 2.0.14 2.0.13 2.0.12 2.0.11 2.0 1.2 1.01 1.1 1.0.1 1.0.0 1.0 1.00 1.0rc6 1.0rc5 1.0rc4 1.0rc3 1.0rc1 1.0b23 1.0b22 1.0b21 1.0b20 1.0b19 1.0b18 1.0b17 1.0b16 1.0b15 1.0b15a 1.0b14 1.0b13 1.0b12 1.0b11 1.0b10 1.0b9 1.0b8 1.0b7 1.0b6 1.0b5 1.0b4 1.0b3 1.0b2 1.0b1 1A-RC2 Nothing to show New pull request Latest commit 5716362 Apr 9, 2016 thboileau Fixed useless duplicated instruction. Permalink Failed to load latest commit information. build Fixed NPE when OAuth refresh token request when no scope is provided.… Jun 3, 2015 incubator Removed lesser used/maintained extensions (JDBC, JiBX, jSSLUtils, ROM… Dec 19, 2014 libraries Fixed compilation issue, added tests. Jul 17, 2015 modules Fixed useless duplicated instruction. Apr 9, 2016 .gitignore - Removed previous attempts to add asynchronous representation Apr 7, 2015 .travis.yml Create .travis.yml May 16, 2013 README.md Enhanced readme file. Contributed by Guillaume Laforge. Oct 30, 2015 README.md Restlet Framework The leading RESTful Web API framework for Java Thanks to Restlet Framework's powerful routing and filtering capabilities, unified client and server Java API, developers can build secure and scalable RESTful web APIs. It is available in editions for all major platforms (Java SE/EE, Google App Engine, OSGi, GWT, Android) and offers numerous extensions to fit the needs of all developers. It is available under the terms of either the Apache Software License 2.0 or the Eclipse Public License 1.0. http://restlet.com Learn more To learn more about Restlet Framework, please have a look at the following resources: User Guide Tutorials JavaDocs Change Log Download Issue Tracker Mailing List Stack Overflow Copyright 2015 Restlet Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/restlet/restlet-framework-java/"	"Pioneering framework with powerful routing and filtering capabilities, unified client and server API."	"true"
"REST Frameworks"	"Retrofit"	"http://square.github.io/retrofit/"	"Type-safe REST client."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Retrofit Retrofit Download Latest A type-safe HTTP client for Android and Java Introduction Retrofit turns your HTTP API into a Java interface. public interface GitHubService {   @GET(""users/{user}/repos"")   Call<List<Repo>> listRepos(@Path(""user"") String user); } The Retrofit class generates an implementation of the GitHubService interface. Retrofit retrofit = new Retrofit.Builder()     .baseUrl(""https://api.github.com/"")     .build();  GitHubService service = retrofit.create(GitHubService.class); Each Call from the created GitHubService can make a synchronous or asynchronous HTTP request to the remote webserver. Call<List<Repo>> repos = service.listRepos(""octocat""); Use annotations to describe the HTTP request: URL parameter replacement and query parameter support Object conversion to request body (e.g., JSON, protocol buffers) Multipart request body and file upload Note: This site is still in the process of being expanded for the new 2.0 APIs. API Declaration Annotations on the interface methods and its parameters indicate how a request will be handled. Request Method Every method must have an HTTP annotation that provides the request method and relative URL. There are five built-in annotations: GET, POST, PUT, DELETE, and HEAD. The relative URL of the resource is specified in the annotation. @GET(""users/list"") You can also specify query parameters in the URL. @GET(""users/list?sort=desc"") URL Manipulation A request URL can be updated dynamically using replacement blocks and parameters on the method. A replacement block is an alphanumeric string surrounded by { and }. A corresponding parameter must be annotated with @Path using the same string. @GET(""group/{id}/users"") Call<List<User>> groupList(@Path(""id"") int groupId); Query parameters can also be added. @GET(""group/{id}/users"") Call<List<User>> groupList(@Path(""id"") int groupId, @Query(""sort"") String sort); For complex query parameter combinations a Map can be used. @GET(""group/{id}/users"") Call<List<User>> groupList(@Path(""id"") int groupId, @QueryMap Map<String, String> options); Request Body An object can be specified for use as an HTTP request body with the @Body annotation. @POST(""users/new"") Call<User> createUser(@Body User user); The object will also be converted using a converter specified on the Retrofit instance. If no converter is added, only RequestBody can be used. Form Encoded and Multipart Methods can also be declared to send form-encoded and multipart data. Form-encoded data is sent when @FormUrlEncoded is present on the method. Each key-value pair is annotated with @Field containing the name and the object providing the value. @FormUrlEncoded @POST(""user/edit"") Call<User> updateUser(@Field(""first_name"") String first, @Field(""last_name"") String last); Multipart requests are used when @Multipart is present on the method. Parts are declared using the @Part annotation. @Multipart @PUT(""user/photo"") Call<User> updateUser(@Part(""photo"") RequestBody photo, @Part(""description"") RequestBody description); Multipart parts use one of Retrofit's converters or they can implement RequestBody to handle their own serialization. Header Manipulation You can set static headers for a method using the @Headers annotation. @Headers(""Cache-Control: max-age=640000"") @GET(""widget/list"") Call<List<Widget>> widgetList(); @Headers({     ""Accept: application/vnd.github.v3.full+json"",     ""User-Agent: Retrofit-Sample-App"" }) @GET(""users/{username}"") Call<User> getUser(@Path(""username"") String username); Note that headers do not overwrite each other. All headers with the same name will be included in the request. A request Header can be updated dynamically using the @Header annotation. A corresponding parameter must be provided to the @Header. If the value is null, the header will be omitted. Otherwise, toString will be called on the value, and the result used. @GET(""user"") Call<User> getUser(@Header(""Authorization"") String authorization) Headers that need to be added to every request can be specified using an OkHttp interceptor. Synchronous vs. Asynchronous Call instances can be executed either synchronously or asynchronously. Each instance can only be used once, but calling clone() will create a new instance that can be used. On Android, callbacks will be executed on the main thread. On the JVM, callbacks will happen on the same thread that executed the HTTP request. Retrofit Configuration Retrofit is the class through which your API interfaces are turned into callable objects. By default, Retrofit will give you sane defaults for your platform but it allows for customization. Converters By default, Retrofit can only deserialize HTTP bodies into OkHttp's ResponseBody type and it can only accept its RequestBody type for @Body. Converters can be added to support other types. Six sibling modules adapt popular serialization libraries for your convenience. Gson: com.squareup.retrofit2:converter-gson Jackson: com.squareup.retrofit2:converter-jackson Moshi: com.squareup.retrofit2:converter-moshi Protobuf: com.squareup.retrofit2:converter-protobuf Wire: com.squareup.retrofit2:converter-wire Simple XML: com.squareup.retrofit2:converter-simplexml Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars Here's an example of using the GsonConverterFactory class to generate an implementation of the GitHubService interface which uses Gson for its deserialization. Retrofit retrofit = new Retrofit.Builder()     .baseUrl(""https://api.github.com"")     .addConverterFactory(GsonConverterFactory.create())     .build();  GitHubService service = retrofit.create(GitHubService.class); Custom Converters If you need to communicate with an API that uses a content-format that Retrofit does not support out of the box (e.g. YAML, txt, custom format) or you wish to use a different library to implement an existing format, you can easily create your own converter. Create a class that extends the Converter.Factory class and pass in an instance when building your adapter. Download ↓ Latest JAR The source code to the Retrofit, its samples, and this website is available on GitHub. Maven <dependency>   <groupId>com.squareup.retrofit2</groupId>   <artifactId>retrofit</artifactId>   <version>(insert latest version)</version> </dependency> Gradle  compile 'com.squareup.retrofit2:retrofit:(insert latest version)'  Retrofit requires at minimum Java 7 or Android 2.3. ProGuard If you are using Proguard in your project add the following lines to your configuration:  -dontwarn retrofit2.** -keep class retrofit2.** { *; } -keepattributes Signature -keepattributes Exceptions  Contributing If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running mvn clean verify. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA). License Copyright 2013 Square, Inc.  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at     http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Introduction API Declaration Retrofit Configuration Download Contributing License Javadoc StackOverflow"	"null"	"null"	"Type-safe REST client."	"true"
"REST Frameworks"	"Spark"	"http://sparkjava.com/"	"Sinatra inspired framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4510"	"327"	"925"	"GitHub - perwendel/spark: A Sinatra inspired framework for java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 327 Star 4,510 Fork 925 perwendel/spark Code Issues 124 Pull requests 54 Wiki Pulse Graphs A Sinatra inspired framework for java 703 commits 12 branches 9 releases 73 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags extendable-spark master pw-alternative-to-464 pw-gzip-fixes pw-instance-api pw-merge-of-filter-part-of-555 pw-static-files-jar-solution pw-test-refactoring pw-version-2.1-bump pw-websockets-proto remove-cyclic routes-and-filters Nothing to show 2.3 2.2 2.1 2.0.0 1.1.2 1.1.1 1.1 1.0 0.9.9.4 Nothing to show New pull request Latest commit 12774f1 Jul 4, 2016 perwendel committed on GitHub Merge pull request #579 from anttipoi/fix-response-wrapper … add missing delegate methods to ResponseWrapper Permalink Failed to load latest commit information. config Added Spark code style settings for Intellij May 10, 2014 src Merge pull request #579 from anttipoi/fix-response-wrapper Jul 4, 2016 .gitignore Added basic WebSocket support in the embedded server Aug 6, 2015 .travis.yml Remove unnecessary newlines Nov 24, 2015 LICENSE Fixed #233, Add top-level NOTICE file: Jan 28, 2015 NOTICE Refactoring of the webserver package Jan 29, 2016 README.md updated docs and example to use preferred semantic May 15, 2016 pom.xml ->2.6-SNAPSHOT May 3, 2016 README.md Spark - a tiny web framework for Java 8 For more detailed documentation please go to: http://sparkjava.com/documentation NEWS: Spark 2.5 is out! <dependency>     <groupId>com.sparkjava</groupId>     <artifactId>spark-core</artifactId>     <version>2.5</version> </dependency> For questions about using Spark, post on our Google Group: https://groups.google.com/d/forum/sparkjava Temporary javadoc: http://spark.screenisland.com Getting started import static spark.Spark.*;  public class HelloWorld {     public static void main(String[] args) {         get(""/hello"", (request, response) -> ""Hello World!"");     } } View at: http://localhost:4567/hello Check out and try the examples in the source code. You can also check out the javadoc. After getting the source from github run: mvn javadoc:javadoc  The result is put in /target/site/apidocs Examples Simple example showing some basic functionality import static spark.Spark.*;  /**  * A simple example just showing some basic functionality  */ public class SimpleExample {      public static void main(String[] args) {          //  port(5678); <- Uncomment this if you want spark to listen to port 5678 in stead of the default 4567          get(""/hello"", (request, response) -> ""Hello World!"");          post(""/hello"", (request, response) ->             ""Hello World: "" + request.body()         );          get(""/private"", (request, response) -> {             response.status(401);             return ""Go Away!!!"";         });          get(""/users/:name"", (request, response) -> ""Selected user: "" + request.params("":name""));          get(""/news/:section"", (request, response) -> {             response.type(""text/xml"");             return ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><news>"" + request.params(""section"") + ""</news>"";         });          get(""/protected"", (request, response) -> {             halt(403, ""I don't think so!!!"");             return null;         });          get(""/redirect"", (request, response) -> {             response.redirect(""/news/world"");             return null;         });          get(""/"", (request, response) -> ""root"");     } }  A simple CRUD example showing how to create, get, update and delete book resources import static spark.Spark.*;  import java.util.HashMap; import java.util.Map; import java.util.Random;  /**  * A simple CRUD example showing how to create, get, update and delete book resources.  */ public class Books {      /**      * Map holding the books      */     private static Map<String, Book> books = new HashMap<String, Book>();      public static void main(String[] args) {         final Random random = new Random();          // Creates a new book resource, will return the ID to the created resource         // author and title are sent in the post body as x-www-urlencoded values e.g. author=Foo&title=Bar         // you get them by using request.queryParams(""valuename"")         post(""/books"", (request, response) -> {             String author = request.queryParams(""author"");             String title = request.queryParams(""title"");             Book book = new Book(author, title);              int id = random.nextInt(Integer.MAX_VALUE);             books.put(String.valueOf(id), book);              response.status(201); // 201 Created             return id;         });          // Gets the book resource for the provided id         get(""/books/:id"", (request, response) -> {             Book book = books.get(request.params("":id""));             if (book != null) {                 return ""Title: "" + book.getTitle() + "", Author: "" + book.getAuthor();             } else {                 response.status(404); // 404 Not found                 return ""Book not found"";             }         });          // Updates the book resource for the provided id with new information         // author and title are sent in the request body as x-www-urlencoded values e.g. author=Foo&title=Bar         // you get them by using request.queryParams(""valuename"")         put(""/books/:id"", (request, response) -> {             String id = request.params("":id"");             Book book = books.get(id);             if (book != null) {                 String newAuthor = request.queryParams(""author"");                 String newTitle = request.queryParams(""title"");                 if (newAuthor != null) {                     book.setAuthor(newAuthor);                 }                 if (newTitle != null) {                     book.setTitle(newTitle);                 }                 return ""Book with id '"" + id + ""' updated"";             } else {                 response.status(404); // 404 Not found                 return ""Book not found"";             }         });          // Deletes the book resource for the provided id         delete(""/books/:id"", (request, response) -> {             String id = request.params("":id"");             Book book = books.remove(id);             if (book != null) {                 return ""Book with id '"" + id + ""' deleted"";             } else {                 response.status(404); // 404 Not found                 return ""Book not found"";             }         });          // Gets all available book resources (ids)         get(""/books"", (request, response) -> {             String ids = """";             for (String id : books.keySet()) {                 ids += id + "" "";             }             return ids;         });     }      public static class Book {          public String author, title;          public Book(String author, String title) {             this.author = author;             this.title = title;         }          public String getAuthor() {             return author;         }          public void setAuthor(String author) {             this.author = author;         }          public String getTitle() {             return title;         }          public void setTitle(String title) {             this.title = title;         }     } } Example showing a very simple (and stupid) authentication filter that is executed before all other resources import static spark.Spark.*;  import java.util.HashMap; import java.util.Map;  /**  * Example showing a very simple (and stupid) authentication filter that is  * executed before all other resources.  *  * When requesting the resource with e.g.  *     http://localhost:4567/hello?user=some&password=guy  * the filter will stop the execution and the client will get a 401 UNAUTHORIZED with the content 'You are not welcome here'  *  * When requesting the resource with e.g.  *     http://localhost:4567/hello?user=foo&password=bar  * the filter will accept the request and the request will continue to the /hello route.  *  * Note: There is a second ""before filter"" that adds a header to the response  * Note: There is also an ""after filter"" that adds a header to the response  */ public class FilterExample {      private static Map<String, String> usernamePasswords = new HashMap<String, String>();      public static void main(String[] args) {          usernamePasswords.put(""foo"", ""bar"");         usernamePasswords.put(""admin"", ""admin"");          before((request, response) -> {             String user = request.queryParams(""user"");             String password = request.queryParams(""password"");              String dbPassword = usernamePasswords.get(user);             if (!(password != null && password.equals(dbPassword))) {                 halt(401, ""You are not welcome here!!!"");             }         });          before(""/hello"", (request, response) -> response.header(""Foo"", ""Set by second before filter""));          get(""/hello"", (request, response) -> ""Hello World!"");          after(""/hello"", (request, response) -> response.header(""spark"", ""added by after-filter""));     } } Example showing how to use attributes import static spark.Spark.after; import static spark.Spark.get;  /**  * Example showing the use of attributes  */ public class FilterExampleAttributes {      public static void main(String[] args) {         get(""/hi"", (request, response) -> {             request.attribute(""foo"", ""bar"");             return null;         });          after(""/hi"", (request, response) -> {             for (String attr : request.attributes()) {                 System.out.println(""attr: "" + attr);             }         });          after(""/hi"", (request, response) -> {             Object foo = request.attribute(""foo"");             response.body(asXml(""foo"", foo));         });     }      private static String asXml(String name, Object value) {         return ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><"" + name +"">"" + value + ""</""+ name + "">"";     } } Example showing how to serve static resources import static spark.Spark.*;  public class StaticResources {      public static void main(String[] args) {          // Will serve all static file are under ""/public"" in classpath if the route isn't consumed by others routes.         // When using Maven, the ""/public"" folder is assumed to be in ""/main/resources""         staticFileLocation(""/public"");          get(""/hello"", (request, response) -> ""Hello World!"");     } } Example showing how to define content depending on accept type import static spark.Spark.*;  public class JsonAcceptTypeExample {      public static void main(String args[]) {          //Running curl -i -H ""Accept: application/json"" http://localhost:4567/hello json message is read.         //Running curl -i -H ""Accept: text/html"" http://localhost:4567/hello HTTP 404 error is thrown.         get(""/hello"", ""application/json"", (request, response) -> ""{\""message\"": \""Hello World\""}"");     } } Example showing how to render a view from a template. Note that we are using ModelAndView class for setting the object and name/location of template. First of all we define a class which handles and renders output depending on template engine used. In this case FreeMarker. public class FreeMarkerTemplateEngine extends TemplateEngine {      private Configuration configuration;      protected FreeMarkerTemplateEngine() {         this.configuration = createFreemarkerConfiguration();     }      @Override     public String render(ModelAndView modelAndView) {         try {             StringWriter stringWriter = new StringWriter();              Template template = configuration.getTemplate(modelAndView.getViewName());             template.process(modelAndView.getModel(), stringWriter);              return stringWriter.toString();         } catch (IOException e) {             throw new IllegalArgumentException(e);         } catch (TemplateException e) {             throw new IllegalArgumentException(e);         }     }      private Configuration createFreemarkerConfiguration() {         Configuration retVal = new Configuration();         retVal.setClassForTemplateLoading(FreeMarkerTemplateEngine.class, ""freemarker"");         return retVal;     } } Then we can use it to generate our content. Note how we are setting model data and view name. Because we are using FreeMarker, in this case a Map and the name of the template is required: public class FreeMarkerExample {      public static void main(String args[]) {          get(""/hello"", (request, response) -> {             Map<String, Object> attributes = new HashMap<>();             attributes.put(""message"", ""Hello FreeMarker World"");              // The hello.ftl file is located in directory:             // src/test/resources/spark/examples/templateview/freemarker             return modelAndView(attributes, ""hello.ftl"");         }, new FreeMarkerTemplateEngine());     } } Example of using Transformer. First of all we define the transformer class, in this case a class which transforms an object to JSON format using gson API. public class JsonTransformer implements ResponseTransformer {      private Gson gson = new Gson();      @Override     public String render(Object model) {         return gson.toJson(model);     } } And then the code which return a simple POJO to be transformed to JSON: public class TransformerExample {      public static void main(String args[]) {         get(""/hello"", ""application/json"", (request, response) -> {             return new MyMessage(""Hello World"");         }, new JsonTransformer());     } } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/perwendel/spark"	"Sinatra inspired framework."	"true"
"REST Frameworks"	"Swagger"	"http://swagger.io/"	"Swagger is a specification and complete framework implementation for describing, producing, consuming, and visualizing RESTful web services."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5455"	"372"	"3082"	"GitHub - swagger-api/swagger-ui: Swagger UI is a dependency-free collection of HTML, Javascript, and CSS assets that dynamically generate beautiful documentation from a Swagger-compliant API. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 372 Star 5,455 Fork 3,082 swagger-api/swagger-ui Code Issues 373 Pull requests 45 Wiki Pulse Graphs Swagger UI is a dependency-free collection of HTML, Javascript, and CSS assets that dynamically generate beautiful documentation from a Swagger-compliant API. http://swagger.io 1,646 commits 12 branches 56 releases 148 contributors JavaScript 88.1% CSS 10.7% HTML 1.2% JavaScript CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags brentonmcs-master develop_2.0 feature/showBasePathInOperation fix/travis issue-1691 issue-1825 issue-2223 master revert-1650-urlencoded-json-body revert-1900-issue-1899 showcase/built-with-0.10 swagger-js-update Nothing to show v2.1.8-M1 v2.1.7-M1 v2.1.6-M1 v2.1.5-M2 v2.1.5-M1 v2.1.4 v2.1.4-M2 v2.1.4-M1 v2.1.3 v2.1.3-M2 v2.1.3-M1 v2.1.2 v2.1.2-M2 v2.1.2-M1 v2.1.1 v2.1.1-M2 v2.1.1-M1 v2.1.0 v2.1.0-alpha.6 v2.1.0-alpha.5 v2.1.0-alpha.4 v2.1.0-alpha.1 v2.1.0-M2 v2.1.0-M1 v2.0.24 v2.0.22 v2.0.21 v2.0.20 v2.0.19 v2.0.18 v2.0.17 v2.0.16 v2.0.15 v2.0.14 v2.0.12 v2.0.11 v2.0.10 v2.0.9 v2.0.8 v2.0.7 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.1.15 v1.1.7 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.1 v1.0.13 v1.0.12 v1.0.1 v1.0 Nothing to show New pull request Latest commit db1d742 Jul 14, 2016 fehguy rebuilt Permalink Failed to load latest commit information. dist rebuilt Jul 14, 2016 lang Add korean translation file for Swagger UI Jun 22, 2016 lib Fix: redirect_uri is required in oauth2 code flow, but was null Jul 1, 2016 src/main rebuilt Jul 15, 2016 test tests #1186 Render primitive types in ""Response Class"" Feb 22, 2016 .dockerignore merged from develop_2.0 Feb 1, 2015 .gitattributes set ttf files as binary in gitattributes Apr 14, 2016 .gitignore Merge remote-tracking branch 'upstream/master' into JSONEditorMaster Dec 16, 2015 .jshintignore Use SwaggerJS from npm Mar 25, 2015 .jshintrc #1248 Added schema render from swagger-js to swagger-ui Jan 4, 2016 .npmignore updated swagger-js per swagger-api/swagger-js#167 Nov 26, 2014 .travis.yml use node.js v4.2.x in travis tests Nov 21, 2015 CONTRIBUTING.md updated versions for release Jan 6, 2016 Dockerfile - added `nginx.conf` to provide greater flexibility of configuration … May 7, 2016 ISSUE_TEMPLATE.md Create ISSUE_TEMPLATE.md Mar 16, 2016 LICENSE updated versions for release Jan 6, 2016 README.md Clarify auth header documentation Jul 12, 2016 bower.json updated versions for release Jan 6, 2016 gulpfile.js added a steam end to gulp-less to prevent less errors stopping watch Apr 27, 2016 index.js add 'use strict'; to index.js Nov 20, 2015 karma.conf.js fixed running unit tests Feb 24, 2016 nginx.conf - added `nginx.conf` to provide greater flexibility of configuration … May 7, 2016 package.json updated version Jun 27, 2016 README.md Swagger UI Swagger UI is part of the Swagger project. The Swagger project allows you to produce, visualize and consume your OWN RESTful services. No proxy or 3rd party services required. Do it your own way. Swagger UI is a dependency-free collection of HTML, Javascript, and CSS assets that dynamically generate beautiful documentation and sandbox from a Swagger-compliant API. Because Swagger UI has no dependencies, you can host it in any server environment, or on your local machine. What's Swagger? The goal of Swagger™ is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via Swagger, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, Swagger removes the guesswork in calling the service. Check out Swagger-Spec for additional information about the Swagger project, including additional libraries with support for other languages and more. Compatibility The OpenAPI Specification has undergone 4 revisions since initial creation in 2010. Compatibility between swagger-ui and the OpenAPI Specification is as follows: Swagger UI Version Release Date OpenAPI Spec compatibility Notes Status 2.1.4 2016-01-06 1.1, 1.2, 2.0 tag v.2.1.4 2.0.24 2014-09-12 1.1, 1.2 tag v2.0.24 1.0.13 2013-03-08 1.1, 1.2 tag v1.0.13 1.0.1 2011-10-11 1.0, 1.1 tag v1.0.1 How to Use It Download You can use the swagger-ui code AS-IS! No need to build or recompile--just clone this repo and use the pre-built files in the dist folder. If you like swagger-ui as-is, stop here. Browser support Swagger UI works in all evergreen desktop browsers (Chrome, Safari, Firefox). Internet Explorer support is version 8 (IE8) and above. Build You can rebuild swagger-ui on your own to tweak it or just so you can say you did. To do so, follow these steps: Windows Users: Please install Python before follow below guidelines for node-gyp rebuild to run. npm install npm run build You should see the distribution under the dist folder. Open ./dist/index.html to launch Swagger UI in a browser Development Use npm run serve to make a new build, watch for changes, and serve the result at http://localhost:8080/. Build using Docker To build swagger-ui using a docker container: docker build -t swagger-ui-builder . docker run -p 80:8080 swagger-ui-builder  This will start Swagger UI at http://localhost. Use Once you open the Swagger UI, it will load the Swagger Petstore service and show its APIs. You can enter your own server url and click explore to view the API. Customize You may choose to customize Swagger UI for your organization. Here is an overview of what's in its various directories: dist: Contains a distribution which you can deploy on a server or load from your local machine. dist/lang: The swagger localization lib: Contains javascript dependencies which swagger-ui depends on node_modules: Contains node modules which swagger-ui uses for its development. src src/main/templates: handlebars templates used to render swagger-ui src/main/html: the html files, some images and css src/main/javascript: main code SwaggerUi To use swagger-ui you should take a look at the source of swagger-ui html page and customize it. This basically requires you to instantiate a SwaggerUi object and call load() on it as below: var swaggerUi = new SwaggerUi({   url:""http://petstore.swagger.io/v2/swagger.json"",   dom_id:""swagger-ui-container"" });  swaggerUi.load(); Parameters Parameter Name Description url The url pointing to swagger.json (Swagger 2.0) or the resource listing (earlier versions) as per OpenAPI Spec. authorizations An authorization object to be passed to swagger-js. Setting it here will trigger inclusion of any authorization or custom signing logic when fetching the swagger description file. Note the object structure should be { key: AuthorizationObject } spec A JSON object describing the OpenAPI Specification. When used, the url parameter will not be parsed. This is useful for testing manually-generated specifications without hosting them. Works for Swagger 2.0 specs only. validatorUrl By default, Swagger-UI attempts to validate specs against swagger.io's online validator. You can use this parameter to set a different validator URL, for example for locally deployed validators (Validator Badge). Setting it to null will disable validation. This parameter is relevant for Swagger 2.0 specs only. dom_id The id of a dom element inside which SwaggerUi will put the user interface for swagger. booleanValues SwaggerUI renders boolean data types as a dropdown. By default it provides a 'true' and 'false' string as the possible choices. You can use this parameter to change the values in dropdown to be something else, for example 0 and 1 by setting booleanValues to new Array(0, 1). docExpansion Controls how the API listing is displayed. It can be set to 'none' (default), 'list' (shows operations for each resource), or 'full' (fully expanded: shows operations and their details). apisSorter Apply a sort to the API/tags list. It can be 'alpha' (sort by name) or a function (see Array.prototype.sort() to know how sort function works). Default is the order returned by the server unchanged. operationsSorter Apply a sort to the operation list of each API. It can be 'alpha' (sort by paths alphanumerically), 'method' (sort by HTTP method) or a function (see Array.prototype.sort() to know how sort function works). Default is the order returned by the server unchanged. defaultModelRendering Controls how models are shown when the API is first rendered. (The user can always switch the rendering for a given model by clicking the 'Model' and 'Model Schema' links.) It can be set to 'model' or 'schema', and the default is 'schema'. onComplete This is a callback function parameter which can be passed to be notified of when SwaggerUI has completed rendering successfully. onFailure This is a callback function parameter which can be passed to be notified of when SwaggerUI encountered a failure was unable to render. highlightSizeThreshold Any size response below this threshold will be highlighted syntactically, attempting to highlight large responses can lead to browser hangs, not including a threshold will default to highlight all returned responses. supportedSubmitMethods An array of of the HTTP operations that will have the 'Try it out!' option. An empty array disables all operations. This does not filter the operations from the display. oauth2RedirectUrl OAuth redirect URL showRequestHeaders Whether or not to show the headers that were sent when making a request via the 'Try it out!' option. Defaults to false. jsonEditor Enables a graphical view for editing complex bodies. Defaults to false. All other parameters are explained in greater detail below HTTP Methods and API Invocation swagger-ui supports invocation of all HTTP methods APIs including GET, PUT, POST, DELETE, PATCH, OPTIONS. These are handled in the swagger-js project, please see there for specifics on their usage. Header Parameters Header params are supported through a pluggable mechanism in swagger-js. You can see the index.html for a sample of how to dynamically set headers: // add a new SwaggerClient.ApiKeyAuthorization when the api-key changes in the ui. $('#input_apiKey').change(function() {   var key = $('#input_apiKey')[0].value;   if(key && key.trim() != """") {     swaggerUi.api.clientAuthorizations.add(""auth_name"", new SwaggerClient.ApiKeyAuthorization(""api_key"", key, ""header""));   } }) This will add the header api_key with value key on calls that have the auth_name security scheme as part of their swaggerDefinitions. You can substitute query to send the values as a query param. Custom Header Parameters - (For Basic auth etc) If you have some header parameters which you need to send with every request, use the headers as below: swaggerUi.api.clientAuthorizations.add(""key"", new SwaggerClient.ApiKeyAuthorization(""Authorization"", ""XXXX"", ""header"")); Note! You can pass multiple header params on a single request, just use unique names for them (key is used in the above example). Localization and translation The localization files are in the lang directory. Note that language files and translator is not included in SwaggerUI by default. You need to add them manually. To enable translation you should append next two lines in your Swagger's index.html (or another entry point you use) <script src='lang/translator.js' type='text/javascript'></script> <script src='lang/en.js' type='text/javascript'></script> The first line script is a translator and the second one is your language lexemes. If you wish to append support for new language you just need to create lang/your_lang.js and fill it like it's done in existing files. To append new lexemex for translation you should do two things: 1. Add lexeme into the language file. Example of new line: ""new sentence"":""translation of new sentence"". 2. Mark this lexeme in source html with attribute data-sw-translate. Example of changed source: <anyHtmlTag data-sw-translate>new sentence</anyHtmlTag> or <anyHtmlTag data-sw-translate value='new sentence'/> . At this moment only inner html, title-attribute and value-attribute are going to be translated. CORS Support OR: How to deal with ""Can't read from server. It may not have the appropriate access-control-origin settings."" CORS is a technique to prevent websites from doing bad things with your personal data. Most browsers + javascript toolkits not only support CORS but enforce it, which has implications for your API server which supports Swagger. You can read about CORS here: http://www.w3.org/TR/cors. There are two cases where no action is needed for CORS support: swagger-ui is hosted on the same server as the application itself (same host and port). The application is located behind a proxy that enables the required CORS headers. This may already be covered within your organization. Otherwise, CORS support needs to be enabled for: Your Swagger docs. For Swagger 2.0 it's the swagger.json and any externally $refed docs, and for prior version it's the Resource Listing and API Declaration files. For the Try it now button to work, CORS needs to be enabled on your API endpoints as well. Testing CORS Support You can verify CORS support with one of three techniques: Curl your API and inspect the headers. For instance: $ curl -I ""http://petstore.swagger.io/v2/swagger.json"" HTTP/1.1 200 OK Date: Sat, 31 Jan 2015 23:05:44 GMT Access-Control-Allow-Origin: * Access-Control-Allow-Methods: GET, POST, DELETE, PUT, PATCH, OPTIONS Access-Control-Allow-Headers: Content-Type, api_key, Authorization Content-Type: application/json Content-Length: 0 This tells us that the petstore resource listing supports OPTIONS, and the following headers: Content-Type, api_key, Authorization. Try swagger-ui from your file system and look at the debug console. If CORS is not enabled, you'll see something like this: XMLHttpRequest cannot load http://sad.server.com/v2/api-docs. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.  Swagger-UI cannot easily show this error state. Using the http://www.test-cors.org website. Keep in mind this will show a successful result even if Access-Control-Allow-Headers is not available, which is still required for Swagger-UI to function properly. Enabling CORS The method of enabling CORS depends on the server and/or framework you use to host your application. http://enable-cors.org provides information on how to enable CORS in some common web servers. Other servers/frameworks may provide you information on how to enable it specifically in their use case. CORS and Header Parameters Swagger lets you easily send headers as parameters to requests. The name of these headers MUST be supported in your CORS configuration as well. From our example above: Access-Control-Allow-Headers: Content-Type, api_key, Authorization  Only headers with these names will be allowed to be sent by Swagger-UI. How to Improve It Create your own fork of swagger-api/swagger-ui To share your changes, submit a pull request. Change Log Please see releases for change log. License Copyright 2016 SmartBear Software Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/swagger-api/swagger-ui"	"Swagger is a specification and complete framework implementation for describing, producing, consuming, and visualizing RESTful web services."	"true"
"Science"	"DataMelt"	"http://jwork.org/dmelt/"	"Environment for scientific computation, data analysis and data visualization."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Home < DataMelt DataMelt Computation and Visualization Environment Member login Home Features Install Gallery Documentation Examples About Welcome to DataMelt DataMelt is a free mathematics software for scientists, engineers and students. It can be used for numeric computation, statistics, symbolic calculations, data analysis and data visualization. Read more Thank you for using DataMelt! DataMelt, or DMelt, is a software for numeric computation, statistics, analysis of large data volumes (""big data"") and scientific visualization. The program can be used in many areas, such as natural sciences, engineering, modeling and analysis of financial markets. DMelt is a computational platform. It can be used with different programming languages on different operating systems. Unlike other statistical programs, it is not limited by a single programming language. DMelt can be used with several scripting languages, such as Python/Jython, BeanShell, Groovy, Ruby, as well as with Java. Most comprehensive software. It includes more than 30,000 Java classes for computation and visualization. In addition, more than 4000 classes come with Java API, plus 500 Python modules. Not to mention modules of Groovy and Ruby. All libraries are accessed using dynamic scripting. DMelt creates high-quality vector-graphics images (SVG, EPS, PDF etc.) that can be included in LaTeX and other text-processing systems. Supported programming languages DataMelt can be used with several scripting languages for the JAVA platform: Jython (Python programming language), Groovy, JRuby (Ruby programming language) and BeanShell. All scripting languages use common DMelt JAVA API. Data analyses and statistical computations can be done in JAVA. Finally, symbolic calculations can be done using Matlab/Octave high-level interpreted language integrated with JAVA. Supported platforms DataMelt runs on Windows, Linux, Mac and Android operating systems. The Android application is called AWork. Thus the software represents the ultimate analysis framework which can be used on any hardware, such as desktops, laptops, netbooks, production servers and android tablets. Portable, commercial friendly application DataMelt is a portable application. No installation is needed: simply download and unzip the package, and you are ready to run it. One can run it from a hard drive, from a USB flash drive or from any media. DataMelt exists as an open-source portable application, and as JAVA libraries under a commercial friendly license. History DataMelt is a successor of the popular jHepWork (2005-2013) and SCaVis (2013-2015) programs which were under intensive development since 2005. It is fully backward compatible with jHepWork 3.9 and SCaVis 2.3. Links Overview Features Why Java? In depth Manual Java API Example gallery Code examples Reference Books DMelt for Android JMathLab Bug tracking Community Forum FAQ     DataMelt Project DMelt: Computation and Visualization environment. 2005-2016. jWork.ORG and S. Chekanov Community jWork.ORG portal for scientific computations Contact Email: dmelt@jwork.org Copyright © 2016 - DataMelt jWork.ORG"	"null"	"null"	"Environment for scientific computation, data analysis and data visualization."	"true"
"Science"	"GraphStream"	"http://graphstream-project.org/"	"Library for modeling and analysis of dynamic graphs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"173"	"22"	"48"	"GitHub - graphstream/gs-core: Graphstream core Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 173 Fork 48 graphstream/gs-core Code Issues 42 Pull requests 3 Wiki Pulse Graphs Graphstream core http://graphstream-project.org/ 747 commits 8 branches 6 releases Fetching contributors Java 93.7% Groff 5.9% Other 0.4% Java Groff Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 2.x master realtime revert-188-master ui.gobelin update-jdk8 xmlsources Nothing to show 1.3 1.2 1.1.2 1.1.1 1.1 1.0 Nothing to show New pull request Latest commit 6ef469d May 25, 2016 gsavin Merge pull request #190 from graphstream/revert-188-master … Revert ""Fix for issue 187  "" because of compilation error. Permalink Failed to load latest commit information. doc Minor modifications tu UI. Sep 15, 2010 lib Added a simple batch script to add required libraries to the local re… Sep 15, 2011 src-test/org/graphstream Merge pull request #178 from graphstream/xmlsources Mar 7, 2016 src/org/graphstream Revert ""Fix for issue 187  "" May 25, 2016 .gitignore Update licence preamble. Jan 31, 2016 A_DISCUTER - Changes in UI. Jul 23, 2010 CONTRIBUTORS No commit message Aug 8, 2010 COPYING Update licence preamble. Jan 13, 2012 Changelog No commit message Dec 19, 2009 Changelog-1.0-1.1 Add Changelog between 1.0 and 1.1 Nov 11, 2011 Changelog-1.1-1.2 Added changelog from 1.1 to 1.2 Jun 7, 2013 Ideas No commit message Mar 3, 2009 LICENCE.CECILL-C Update licences. Apr 30, 2011 LICENCE.LGPL Update licences. Apr 29, 2011 README.rst Update README.rst Dec 8, 2011 Roadmap Added a way to choose the frame size of the viewer. May 5, 2011 javadoc.xml Change the javadoc build config file to accept @complexity tags. Sep 4, 2010 pom.xml Reverse jdk version to 1.7 until code update-jdk8' branch becomes ready. Apr 29, 2016 README.rst GraphStream Welcome to GraphStream, and thank you for your download, we hope you will find it useful and practical. We are always interested by suggestions on how to make the library more developer friendly, see the website (http://www.graphstream-project.org/) for more information. Installing GraphStream The release comes with a pre-packaged jar file named gs-core.jar that contains the GraphStream classes. To start using GraphStream, simply put it in your class path. Authors This software is made by: Stefan Balev <stefan.balev@graphstream-project.org> Julien Baudry <julien.baudry@graphstream-project.org> Antoine Dutot <antoine.dutot@graphstream-project.org> Yoann Pigné <yoann.pigne@graphstream-project.org> Guilhelm Savin <guilhelm.savin@graphstream-project.org> Contributors: Frédéric Guinand <frederic.guinand@graphstream-project.org> Richard O. Legendi <rlegendi@aitia.ai> Help You may check the documentation on the website (http://www.graphstream-project.org/). You may also share your questions on the mailing list at http://sympa.litislab.fr/sympa/subscribe/graphstream-users Copyright This program is free software distributed under the terms of two licenses, the CeCILL-C license that fits European law, and the GNU Lesser General Public License. You can use, modify and/ or redistribute the software under the terms of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following URL http://www.cecill.info or under the terms of the GNU LGPL as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this program. If not, see http://www.gnu.org/licenses/. The fact that you are presently reading this means that you have had knowledge of the CeCILL-C and LGPL licenses and that you accept their terms. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/graphstream/gs-core"	"Library for modeling and analysis of dynamic graphs."	"true"
"Science"	"JGraphT"	"https://github.com/jgrapht/jgrapht"	"Graph library that provides mathematical graph-theory objects and algorithms."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"699"	"96"	"308"	"GitHub - jgrapht/jgrapht: Master repository for the JGraphT project Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 96 Star 699 Fork 308 jgrapht/jgrapht forked from lingeringsocket/jgrapht Code Issues 53 Pull requests 14 Wiki Pulse Graphs Master repository for the JGraphT project http://www.jgrapht.org 1,259 commits 1 branch 21 releases Fetching contributors Java 99.4% HTML 0.6% Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show ver_0_8_3 ver_0_8_2 ver_0_8_1 ver_0_8_0 ver_0_7_3 ver_0_7_2 ver_0_7_1 ver_0_7_0 ver_0_6_1 ver_0_6_0_1 ver_0_6_0 ver_0_5_3 ver_0_5_2 ver_0_5_1 ver_0_5_0 ver_0_4_1 ver_0_4_0 jgrapht-0.9.2 jgrapht-0.9.1 jgrapht-0.9.0 Root_ivins_Generics_Pre0_7_0 Nothing to show New pull request Pull request Compare This branch is 524 commits ahead of lingeringsocket:master. Latest commit a841d77 Jul 14, 2016 jsichi Credits for last merge. Permalink Failed to load latest commit information. etc Fix FSF address. Apr 12, 2016 jgrapht-core Merge pull request #213 from jkinable/GraphPathExtension Jul 14, 2016 jgrapht-demo Move development to 1.0.0-SNAPSHOT. Apr 16, 2016 jgrapht-dist Move development to 1.0.0-SNAPSHOT. Apr 16, 2016 jgrapht-ext Added support for weighted graphs in GmlExporter Jul 14, 2016 jgrapht-touchgraph Move development to 1.0.0-SNAPSHOT. Apr 16, 2016 .gitignore git-ignored .classpath files Jul 25, 2015 .travis.yml Update Travis too. Apr 3, 2016 CONTRIBUTORS.md Credits for last merge. Jun 22, 2016 HISTORY.md Credits for last merge. Jul 14, 2016 README.md Move development to 1.0.0-SNAPSHOT. Apr 16, 2016 license-EPL.txt Adds dual license information in README.md and poms. Nov 14, 2013 license-LGPL.txt Grr. Apr 12, 2016 pom.xml Move development to 1.0.0-SNAPSHOT. Apr 16, 2016 README.md JGraphT Released: April 3, 2016 Written by Barak Naveh and Contributors (C) Copyright 2003-2016, by Barak Naveh and Contributors. All rights reserved. Please address all contributions, suggestions, and inquiries to the user mailing list Introduction JGraphT is a free Java class library that provides mathematical graph-theory objects and algorithms. It runs on Java 2 Platform (requires JDK 1.8 or later starting with JGraphT 1.0.0). JGraphT may be used under the terms of either the GNU Lesser General Public License (LGPL) 2.1 http://www.gnu.org/licenses/lgpl-2.1.html or the Eclipse Public License (EPL) http://www.eclipse.org/org/documents/epl-v10.php As a recipient of JGraphT, you may choose which license to receive the code under. For a detailed information on the dual license approach, see https://github.com/jgrapht/jgrapht/wiki/Relicensing. A copy of the EPL license and the LPGL license is included in the download. Please note that JGraphT is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Please refer to the license for details. Contents README.md this file CONTRIBUTORS.md list of contributors HISTORY.md changelog license-EPL.txt Eclipse Public License 1.0 license-LGPL.txt GNU Lesser General Public License 2.1 javadoc/ Javadoc documentation lib/ JGraphT libraries: jgrapht-core-x.y.z.jar core library jgrapht-demo-x.y.z.jar demo classes jgrapht-ext-x.y.z.jar extensions jgrapht-ext-x.y.z-uber.jar all libraries rolled into one jgraph-a.b.c.jar JGraph dependency library jgraphx-a.b.c.jar JGraphX dependency library source/ complete source tree used to build this release Getting Started The package org.jgrapht.demo includes small demo applications to help you get started. If you spawn your own demo app and think others can use it, please send it to us and we will add it to that package. To run the graph visualization demo from the downloaded release, try executing this command in the lib directory: java -jar jgrapht-demo-x.y.z.jar  Using via Maven Starting from 0.9.0, every JGraphT release is published to the Maven Central Repository. You can add a dependency from your project as follows:   <groupId>org.jgrapht</groupId>   <artifactId>jgrapht-core</artifactId>   <version>0.9.2</version>  Upgrading Versions To help upgrading, JGraphT maintains a one-version-backwards compatibility. While this compatibility is not a hard promise, it is generally respected. (This policy was not followed for the jump from 0.6.0 to 0.7.0 due to the pervasive changes required for generics.) You can upgrade via: The safe way : compile your app with the JGraphT version that immediately follows your existing version and follow the deprecation notes, if they exist, and modify your application accordingly. Then move to the next version, and on, until you're current. The fast way : go to the latest JGraphT right away - if it works, you're done. Reading the change history is always recommended. Documentation A local copy of the Javadoc HTML files is included in this distribution. The latest version of these files is also available on-line. Dependencies JGraphT requires JDK 1.8 or later to build starting with version 1.0.0. JUnit is a unit testing framework. You need JUnit only if you want to run the unit tests. JUnit is licensed under the terms of the IBM Common Public License. The JUnit tests included with JGraphT have been created using JUnit 3.8.1. XMLUnit extends JUnit with XML capabilities. You need XMLUnit only if you want to run the unit tests. XMLUnit is licensed under the terms of the BSD License. JGraph is a graph visualization and editing component. You need JGraph only if you want to create graph visualizations using the JGraphT-to-JGraph adapter. JGraph is licensed under the terms of the GNU Lesser General Public License (LGPL). JGraphX is the successor to JGraph. You need JGraphX only if you want to use the JGraphXAdapter to visualize the JGraphT graph interactively via JGraphX. JGraphX is licensed under the terms of the BSD license. Touchgraph is a graph visualization and layout component. You need Touchgraph only if you want to create graph visualizations using the JGraphT-to-Touchgraph converter. Touchgraph is licensed under the terms of an Apache-style License. Online Resources The JGraphT website is at http://www.jgrapht.org. You can use this site to: Obtain the latest version: latest version and all previous versions of JGraphT are available online. Report bugs: if you have any comments, suggestions or bugs you want to report. Get support: if you have questions or need help with JGraphT. There is also a wiki set up for everyone in the JGraphT community to share information about the project. Source code is hosted on github. You can send contributions as pull requests there. Your Improvements If you add improvements to JGraphT please send them to us as pull requests on github. We will add them to the next release so that everyone can enjoy them. You might also benefit from it: others may fix bugs in your source files or may continue to enhance them. Thanks With regards from Barak Naveh, JGraphT Project Creator John Sichi, JGraphT Project Administrator Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jgrapht/jgrapht"	"Graph library that provides mathematical graph-theory objects and algorithms."	"true"
"Science"	"JGraphX"	"https://github.com/jgraph/jgraphx"	"Library for visualisation (mainly Swing) and interaction with node-edge graphs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"308"	"66"	"216"	"GitHub - jgraph/jgraphx Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 66 Star 308 Fork 216 jgraph/jgraphx Code Issues 9 Pull requests 2 Wiki Pulse Graphs No description or website provided. 123 commits 1 branch 88 releases 2 contributors Java 99.9% HTML 0.1% Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v3.5.1.4 v3.5.1.3 v3.5.1.2 v3.5.1.1 v3.5.1.0 v3.5.0.0 v3.4.1.3 v3.4.1.2 v3.4.1.1 v3.4.1.0 v3.4.0.3 v3.4.0.2 v3.4.0.1 v3.4.0.0 v3.3.1.1 v3.3.1.0 v3.3.0.1 v3.3.0.0 v3.2.0.0 v3.1.3.0 v3.1.2.2 v3.1.2.1 v3.1.2.0 v3.1.1.1 v3.1.1.0 v3.1.0.1 v3.1.0.0 v3.0.1.1 v3.0.1.0 v3.0.0.0 v2.9.0.1 v2.9.0.0 v2.8.2.0 v2.8.1.0 v2.8.0.0 v2.7.0.0 v2.6.0.0 v2.5.1.1 v2.5.1.0 v2.5.0.3 v2.5.0.2 v2.5.0.1 v2.5.0.0 v2.4.1.0 v2.4.0.4 v2.4.0.3 v2.4.0.2 v2.4.0.1 v2.4.0.0 v2.3.0.5 v2.3.0.4 v2.3.0.3 v2.3.0.2 v2.3.0.1 v2.3.0.0 v2.2.0.5 v2.2.0.4 v2.2.0.3 v2.2.0.2 v2.2.0.1 v2.2.0.0 v2.1.1.2 v2.1.1.1 v2.1.1.0 v2.1.0.9 v2.1.0.8 v2.1.0.7 v2.1.0.6 v2.1.0.5 v2.1.0.4 v2.1.0.3 v2.1.0.2 v2.1.0.1 v2.1.0.0 v2.0.0.1 v1.13.0.0 v1.12.0.2 v1.12.0.1 v1.12.0.0 v1.11.0.0 v1.10.4.3 v1.10.4.2 v1.10.4.1 v1.10.4.0 v1.10.3.2 v1.10.3.1 v1.10.2.1 1.10.3.0 Nothing to show New pull request Latest commit 9e247de Jun 2, 2016 Gaudenz Alder 3.5.1.4 release Permalink Failed to load latest commit information. docs 3.5.1.4 release Jun 2, 2016 examples/com/mxgraph/examples/swing 3.1.2.1 release Jan 5, 2015 lib 3.5.1.4 release Jun 2, 2016 src/com/mxgraph 3.5.1.4 release Jun 2, 2016 README.md Removed g+ community reference Oct 15, 2014 build.xml 3.5.1.4 release Jun 2, 2016 license.txt 2.8.1.0 release Jun 2, 2014 pom.xml 3.5.1.4 release Jun 2, 2016 README.md JGraphX JGraphX is a Java Swing diagramming (graph visualisation) library licensed under the BSD license. Although, the package names use that of 'mxGraph', this library is not called mxGraph. mxGraph is the JavaScript diagramming library that we sell commercially only (it isn't open source) - https://www.jgraph.com. It was originally named JGraph through versions 1-5, this technically is version 6, but we changed the name to reflect the fact that the entire codebase and API was rewritten from scratch. JGraphX provides functionality for visualisation and interaction with node-edge graphs (not charts). Example applications that you might write with it are a workflow editor, an organisational chart, a business process modelling tool, a UML tool, an electronic circuit diagrammer, network/telecoms visualisation (you get the idea, things with nodes and edges that connect those nodes, a mathematical graph). JGraphX also includes functionality like XML stencils support, various import/export and layouting (automatically node/edge positioning). Each tag in github creates a downloadable file at https://github.com/jgraph/jgraphx/tags. Older versions are at https://www.jgraph.com/jgraphdownload.html. There is a user manual https://jgraph.github.io/mxgraph/docs/manual_javavis.html that explains the basic architecture. There are various examples, https://github.com/jgraph/jgraphx/tree/master/examples/com/mxgraph/examples/swing, from the usual HelloWorld to a more complete application example called GraphEditor. There's also the API specifications at https://jgraph.github.io/mxgraph/java/docs/index.html There is a 'jgraphx' tag on Stackoverflow - https://stackoverflow.com/questions/tagged/jgraphx, but please ensure you understand the SO FAQ and posting guidelines prior to posting. To post on SO you must 1) have a question , 2) that question be programming related and 3) use the 'jgraphx' tag. JGraphX shares the changelog and version number of mxGraph, our JavaScript implementation of the same idea. This is because many people use the Java API on the server with mxGraph, so the model APIs have to be identical on each release. You have to filter the changelog, https://www.jgraph.com/mxchangelog.html for ""Java"" in the square brackets at the end of each line to see the changes that only apply to Java. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jgraph/jgraphx"	"Library for visualisation (mainly Swing) and interaction with node-edge graphs."	"true"
"Search"	"Apache Lucene"	"https://lucene.apache.org/"	"High-performance, full-featured cross-platform text search engine library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Lucene - Welcome to Apache Lucene TM @ select provider Lucid Find Search-Lucene Core (Java) Solr PyLucene Ultra-fast Search Library and Server Apache Lucene and Solr set the standard for search and indexing performance Proven search capabilities Our core algorithms along with the Solr search server power applications the world over, ranging from mobile devices to sites like Twitter, Apple and Wikipedia. Large, Vibrant community The goal of Apache Lucene and Solr is to provide world class search capabilities Apache 2.0 licensed Apache Lucene and Solr are distributed under a commercially friendly Apache Software license Next Previous Start Stop Welcome to Apache Lucene The Apache LuceneTM project develops open-source search software, including: Lucene Core, our flagship sub-project, provides Java-based indexing and search technology, as well as spellchecking, hit highlighting and advanced analysis/tokenization capabilities. SolrTM is a high performance search server built using Lucene Core, with XML/HTTP and JSON/Python/Ruby APIs, hit highlighting, faceted search, caching, replication, and a web admin interface. PyLucene is a Python port of the Core project. LuceneTM News¶ 25 June 2016 - Apache Lucene 5.5.2 and Apache Solr 5.5.2 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 5.5.2 and Apache Solr 5.5.2 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.5.2 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.5.2 Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 17 June 2016 - Apache Lucene 6.1.0 and Apache Solr 6.1.0 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 6.1.0 and Apache Solr 6.1.0. Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/6.1.0 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/6.1.0 Highlights of this Lucene release include:¶ Numerous improvements to LatLonPoint, for indexing a latitude/longitude point and searching by polygon, distance or box, or finding nearest neighbors Geo3D now has simple APIs for creating common shape queries, matching LatLonPoint Faster indexing and searching of points. Faster geo-spatial indexing and searching for LatLonPoint, Geo3D and GeoPoint (see http://home.apache.org/~mikemccand/geobench.html ) HardlinkCopyDirectoryWrapper optimizes file copies using hard links In case of contention, the query cache now prefers returning an uncached Scorer rather than waiting on a lock. Highlights of this Solr release include:¶ Added graph traversal support, and new ""sort"" and ""random"" streaming expressions. It's also now possible to create streaming expressions with the Solr Admin UI. Fixed the ENUM faceting method to not be unnecessarily rewritten to FCS, which was causing slowdowns. Reduced garbage creation when creating cache entries. New [subquery] document transformer to obtatin related documents per result doc. EmbeddedSolrServer allocates heap much wisely even with plain document list without callbacks. New GeoJSON response writer for encoding geographic data in query responses. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 28 May 2016 - Apache Lucene 6.0.1 and Apache Solr 6.0.1 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 6.0.1 and Apache Solr 6.0.1 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/6.0.1 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/6.0.1 Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 5 May 2016 - Apache Lucene 5.5.1 and Apache Solr 5.5.1 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 5.5.1 and Apache Solr 5.5.1 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.5.1 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.5.1 Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 8 April 2016 - Apache Lucene 6.0.0 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 6.0.0 and Apache Solr 6.0.0 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/6.0.0 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/6.0.0 Highlights of this Lucene release include:¶ Java 8 is the minimum Java version required. Dimensional points, replacing legacy numeric fields, provides fast and space-efficient support for both single- and multi-dimension range and shape filtering. This includes numeric (int, float, long, double), InetAddress, BigInteger and binary range filtering, as well as geo-spatial shape search over indexed 2D LatLonPoints. See this blog post for details. Dependent classes and modules (e.g., MemoryIndex, Spatial Strategies, Join module) have been refactored to use new point types. Lucene classification module now works on Lucene Documents using a KNearestNeighborClassifier or SimpleNaiveBayesClassifier. The spatial module no longer depends on third-party libraries. Previous spatial classes have been moved to a new spatial-extras module. Spatial4j has been updated to a new 0.6 version hosted by locationtech. TermsQuery performance boost by a more aggressive default query caching policy. IndexSearcher's default Similarity is now changed to BM25Similarity. Easier method of defining custom CharTokenizer instances. Highlights of this Solr release include:¶ Improved defaults for ""Similarity"" used in Solr, in order to provide better default experience for new users. Improved ""Similarity"" defaults for users upgrading: DefaultSimilarityFactory has been removed, implicit default Similarity has been changed to SchemaSimilarityFactory, and SchemaSimilarityFactory has been modified to use BM25Similarity as the default for field types that do not explicitly declare a Similarity. Deprecated GET methods for schema are now accessible through the bulk API. The output has less details and is not backward compatible. Users should set useDocValuesAsStored=""false"" to preserve sort order on multi-valued fields that have both stored=""true"" and docValues=""true"". Formatted date-times are more consistent with ISO-8601. BC dates are now better supported since they are now formatted with a leading '-'. AD years after 9999 have a leading '+'. Parse exceptions have been improved. Deprecated SolrServer and subclasses have been removed, use SolrClient instead. The deprecated configuration in solrconfig.xml has been removed. Users must remove it from solrconfig.xml. SolrClient.shutdown() has been removed, use SolrClient.close() instead. The deprecated zkCredientialsProvider element in solrcloud section of solr.xml is now removed. Use the correct spelling (zkCredentialsProvider) instead. Added support for executing Parallel SQL queries across SolrCloud collections. Includes StreamExpression support and a new JDBC Driver for the SQL Interface. New features and capabilities added to the streaming API. Added support for SELECT DISTINCT queries to the SQL interface. New GraphQuery to enable graph traversal as a query operator. New support for Cross Data Center Replication consisting of active/passive replication for separate SolrClouds hosted in separate data centers. Filter support added to Real-time get. Column alias support added to the Parallel SQL Interface. New command added to switch between non/secure mode in zookeeper. Now possible to use IP fragments in replica placement rules. 22 February 2016 - Apache Lucene 5.5.0 and Apache Solr 5.5.0 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 5.5.0 and Apache Solr 5.5.0 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.5.0 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.5.0 Highlights of this Lucene release include:¶ JoinUtil.createJoinQuery can now join on numeric doc values fields BlendedInfixSuggester now has an exponential reciprocal scoring model, to more strongly favor suggestions with matches closer to the beginning CustomAnalyzer has improved (compile time) type safety DFISimilarity implements the divergence from independence scoring model Fully wrap any other merge policy using MergePolicyWrapper Sandbox geo point queries have graduated into the spatial module, and now use a more efficient binary term encoding for smaller index size, faster indexing, and decreased search-time heap usage BooleanQuery performs some new query optimizations TermsQuery constructors are more GC efficient Highlights of this Solr release include:¶ The schema version has been increased to 1.6, and Solr now returns non-stored doc values fields along with stored fields The PERSIST CoreAdmin action has been removed The mergePolicy element is deprecated in favor of a similar mergePolicyFactory element, in solrconfig.xml CheckIndex now works on HdfsDirectory RuleBasedAuthorizationPlugin now allows wildcards in the role, and accepts an 'all' permission Users can now choose compression mode in SchemaCodecFactory Solr now supports Lucene's XMLQueryParser Collections APIs now have async support Uninverted field faceting is re-enabled, for higher performance on rarely changing indices 23 January 2016 - Apache Lucene 5.3.2 and Apache Solr 5.3.2 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 5.3.2 and Apache Solr 5.3.2 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.3.2 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.3.2 Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 23 January 2016 - Apache Lucene 5.4.1 and Apache Solr 5.4.1 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 5.4.1 and Apache Solr 5.4.1 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.4.1 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.4.1 This release contains an important fix for a corruption bug that was introduced in version 5.4.0. If you are on 5.4.0 and using BINARY, SORTED_NUMERIC or SORTED_SET doc values, upgrading to 5.4.1 is strongly recommended. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 14 December 2015 - Apache Lucene 5.4.0 and Apache Solr 5.4.0 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 5.4.0 and Apache Solr 5.4.0 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.4.0 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.4.0 Highlights of this Lucene release include:¶ API Changes¶ Query.getBoost and Query.setBoost are deprecated in favour of the new BoostQuery The Filter class is deprecated in favour of FILTER clauses in a BooleanQuery DefaultSimilarity has been renamed to ClassicSimilarity to prepare for the move to BM25 in Lucene 6 New features¶ New Serbian token filter New DecimalDigitFilter, to fold unicode digits to latin digits New UnicodeWhitespaceTokenizer, that uses Unicode's whitespace definition and splits on NBSP New GeoPointDistanceRangeQuery to search for geo-points within a ring Query caching is now enabled by default in IndexSearcher, use IndexSearcher.setQueryCache(null) to disable Optimizations¶ MatchAllDocsQuery got faster Doc values now use less memory for multi-valued fields and less disk in case of sparse fields Two-phase iterators got a match cost API so that the costly bits can be checked last Bug fixes¶ PatternTokenizer no longer hangs onto heap sized to the maximum input string it's ever seen. Highlights of this Solr release include:¶ UI Changes¶ The rearchitected Admin UI is now prominently linked to from the existing UI, and includes support for managing collections as well as creating and removing fields via the schema tab. Expect it to be default in the next release. API Features¶ New Collections APIs for migrating from clusterstate.json to per-collection state.json and forcing the election of a leader when all replicas in a shard are down. A new configset management API has been added. Querying Features¶ Filter cache is now accessible via a solr query syntax. ScoreJoins can now refer to a single-sharded collection that is replicated on all nodes. Add boost support, and 'exclude the queried document' in MoreLikeThis QParser. Add a 'sort' local param to the collapse QParser to support using complex sort options to select the representitive doc for each collapsed group. Other Features¶ SolrJ now has support for connecting to Solr using basic authentication. Analyzing suggesters can now filter suggestions by a context field. JSON Facet API: add ""method"" param to terms/field facets to give an execution hint for what method should be used to facet. CloneFieldUpdateProcessorFactory now supports choosing a ""dest"" field name based on a regex pattern and replacement init options. Provide pluggable context tool support for VelocityResponseWriter. 24 September 2015 - Apache Lucene 5.3.1 and Apache Solr 5.3.1 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 5.3.1 and Apache Solr 5.3.1 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.3.1 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.3.1 Highlights of this Lucene release include:¶ Bug Fixes¶ Remove classloader hack in MorfologikFilter UsageTrackingQueryCachingPolicy no longer caches trivial queries like MatchAllDocsQuery Fixed BoostingQuery to rewrite wrapped queries Highlights of this Solr release include:¶ Bug Fixes¶ security.json is not loaded on server start RuleBasedAuthorization plugin does not work for the collection-admin-edit permission VelocityResponseWriter template encoding issue. Templates must be UTF-8 encoded SimplePostTool (also bin/post) -filetypes ""*"" now works properly in 'web' mode example/files update-script.js to be Java 7 and 8 compatible. SolrJ could not make requests to handlers with '/admin/' prefix Use of timeAllowed can cause incomplete filters to be cached and incorrect results to be returned on subsequent requests VelocityResponseWriter's $resource.get(key,baseName,locale) to use specified locale. Resolve XSS issue in Admin UI stats page 24 August 2015 - Apache Lucene 5.3.0 and Apache Solr 5.3.0 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 5.3.0 and Apache Solr 5.3.0. Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.3.0 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.3.0 Highlights of this Lucene release include:¶ API Changes¶ PhraseQuery and BooleanQuery are now immutable New features¶ Added a new org.apache.lucene.search.join.CheckJoinIndex class that can be used to validate that an index has an appropriate structure to run join queries Added a new BlendedTermQuery to blend statistics across several terms New common suggest API that mirrors Lucene's Query/IndexSearcher APIs for Document based suggester. IndexWriter can now be initialized from an already open near-real-time or non-NRT reader Add experimental range tree doc values format and queries, based on a 1D version of the spatial BKD tree, for a faster and smaller alternative to postings-based numeric and binary term filtering. Range trees can also handle values larger than 64 bits. Geo-related features and improvements¶ Added GeoPointField, GeoPointInBBoxQuery, GeoPointInPolygonQuery for simple ""indexed lat/lon point in bbox/shape"" searching Added experimental BKD geospatial tree doc values format and queries, for fast ""bbox/polygon contains lat/lon points"" Use doc values to post-filter GeoPointField hits that fall in boundary cells, resulting in smaller index, faster searches and less heap used for each query Optimizations¶ Reduce RAM usage of FieldInfos, and speed up lookup by number, by using an array instead of TreeMap except in very sparse cases Faster intersection of the terms dictionary with very finite automata, which can be generated eg. by simple regexp queries Various bugfixes and optimizations since the 5.2.0 release. Highlights of this Solr release include:¶ In addition to many other improvements in the security framework, Solr now includes an AuthenticationPlugin implementing HTTP Basic Auth that stores credentials securely in ZooKeeper. This is a simple way to require a username and password for anyone accessing Solr’s admin screen or APIs. In built AuthorizationPlugin that provides fine grained control over implementing ACLs for various resources with permisssion rules which are stored in ZooKeeper. The JSON Facet API can now change the domain for facet commands, essentially doing a block join and moving from parents to children, or children to parents before calculating the facet data. Major improvements in performance of the new Facet Module / JSON Facet API. Query and Range Facets under Pivot Facets. Just like the JSON Facet API, pivot facets can how nest other facet types such as range and query facets. More Like This Query Parser options. The MoreLikeThis QParser now supports all options provided by the MLT Handler. The query parser is much more versatile than the handler as it works in cloud mode as well as anywhere a normal query can be specified. Added Schema API support in SolrJ Added Scoring mode for query-time join and block join. Added Smile response format See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 15 June 2015 - Apache Lucene 5.2.1 and Apache Solr 5.2.1 Available¶ The Lucene PMC is pleased to announce the release of Apache Lucene 5.2.1 and Apache Solr 5.2.1 Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.2.1 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.2.1 Highlights of this Lucene release include:¶ Fix class loading deadlock relating to Codec initialization, default codec and SPI discovery. NRT readers now reflect a new commit even if there is no change to the commit user data Queries now get a dummy Similarity when scores are not needed in order to not load unnecessary information like norms Highlights of this Solr release include:¶ Fix javascript bug introduced by SOLR-7409 that breaks the dataimport screen in the admin UI Faceting on a numeric field with a unique() subfacet function on another numeric field can result in incorrect results or an exception New Facet Module should respect shards.tolerant and process all non-failing shards instead of throwing an exception A request with a json content type but no body caused a null pointer exception SolrOutputFormat creates an invalid solr.xml in the solr home zip for MapReduceIndexerTool Fix new (Angular-based) admin UI Cloud pane The DefaultSolrHighlighter since 5.0 was determining if payloads were present in a way that was slow, especially when lots of fields were highlighted. It's now fast Requests are not distributed evenly if the collection isn't present locally See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 7 June 2015 - Apache Lucene 5.2.0 and Apache Solr 5.2.0 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 5.2.0 and Apache Solr 5.2.0. Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.2.0 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.2.0 Highlights of this Lucene release include:¶ Span queries now share document conjunction/intersection code with boolean queries, and use two-phased iterators for faster intersection by avoiding loading positions in certain cases. Added two-phase support to SpanNotQuery, and SpanPositionCheckQuery and its subclasses: SpanPositionRangeQuery, SpanPayloadCheckQuery, SpanNearPayloadCheckQuery, SpanFirstQuery. Added a new query time join to the join module that uses global ordinals, which is faster for subsequent joins between reopens. New CompositeSpatialStrategy combines speed of RPT with accuracy of SDV. Includes optimized Intersect predicate to avoid many geometry checks. Uses TwoPhaseIterator. New LimitTokenOffsetFilter that limits tokens to those before a configured maximum start offset. New spatial PackedQuadPrefixTree, a generally more efficient choice than QuadPrefixTree, especially for high precision shapes. When used, you should typically disable RPT's pruneLeafyBranches option. Expressions now support bindings keys that look like zero arg functions Add SpanWithinQuery and SpanContainingQuery that return spans inside of / containing another spans. New Spatial ""Geo3d"" API with partial Spatial4j integration. It is a set of shapes implemented using 3D planar geometry for calculating spatial relations on the surface of a sphere. Shapes include Point, BBox, Circle, Path (buffered line string), and Polygon. Various bugfixes and optimizations since the 5.1.0 release. Highlights of this Solr release include:¶ Restore API allows restoring a core from an index backup. JSON Facet API unique() is now implemented for numeric and date fields Optional flatter form via a ""type"" parameter Added support for ""mincount"" parameter in range facets to suppress buckets less than that count Multi-select faceting support for the Facet Module via the ""excludeTags"" parameter which disregards any matching tagged filters for that facet. hll() facet function for distributed cardinality via HyperLogLog algorithm. See examples at http://yonik.com/solr-count-distinct/ A new ""facet.range.method"" parameter to let users choose how to do range faceting between an implementation based on filters (previous algorithm, using ""facet.range.method=filter"") or DocValues (""facet.range.method=dv"") Rule-based Replica assignment during collection, shard, and replica creation. Stats component: New 'cardinality' option for stats.field, uses HyperLogLog to efficiently estimate the cardinality of a field w/bounded RAM. Blog post: https://lucidworks.com/blog/hyperloglog-field-value-cardinality-stats/ stats.field now supports individual local params for 'countDistinct' and 'distinctValues'. 'calcdistinct' is still supported as an alias for both options. Solr security Authentication and Authorization frameworks that define interfaces, and mechanisms to create, load, and use authorization/authentication plugins have been added. A Kerberos authentication plugin which would allow running a Kerberized Solr setup. Solr Streaming Expressions See https://cwiki.apache.org/confluence/display/solr/Streaming+Expressions bin/post (and SimplePostTool in -Dauto=yes mode) now sends rather than skips files without a known content type, as ""application/octet-stream"", provided it still is in the allowed filetypes setting. HDFS transaction log replication factor is now configurable A cluster-wide property can now be be added/edited/deleted using the zkcli script and doesn't require a running Solr instance. New spatial RptWithGeometrySpatialField, based on CompositeSpatialStrategy, which blends RPT indexes for speed with serialized geometry for accuracy. Includes a Lucene segment based in-memory shape cache. Refactored Admin UI using AngularJS. It isn't the default, but a parallel UI interface in this release. Solr has internally been upgraded to use Jetty 9. Both releases contain a number of new features, bug fixes, and optimizations. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 14 April 2015 - Apache Lucene 5.1.0 and Apache Solr 5.1.0 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 5.1.0 and Apache Solr 5.1.0. Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/5.1.0 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/5.1.0 Both releases contain a number of new features, bug fixes, and optimizations. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 5 March 2015 - Apache Lucene 4.10.4 and Apache Solr 4.10.4 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.10.4 and Apache Solr 4.10.4. Lucene can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/java/4.10.4 and Solr can be downloaded from http://www.apache.org/dyn/closer.lua/lucene/solr/4.10.4 Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 20 February 2015 - Apache Lucene 5.0.0 and Apache Solr 5.0.0 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 5.0.0 and Apache Solr 5.0.0. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. Highlights of the Lucene release include:¶ Stronger index safety All file access now uses Java’s NIO.2 APIs which give Lucene stronger index safety in terms of better error handling and safer commits. Every Lucene segment now stores a unique id per-segment and per-commit to aid in accurate replication of index files. During merging, IndexWriter now always checks the incoming segments for corruption before merging. This can mean, on upgrading to 5.0.0, that merging may uncover long-standing latent corruption in an older 4.x index. Reduced heap usage Lucene now supports random-writable and advance-able sparse bitsets (RoaringDocIdSet and SparseFixedBitSet), so the heap required is in proportion to how many bits are set, not how many total documents exist in the index. Heap usage during IndexWriter merging is also much lower with the new Lucene50Codec, since doc values and norms for the segments being merged are no longer fully loaded into heap for all fields; now they are loaded for the one field currently being merged, and then dropped. The default norms format now uses sparse encoding when appropriate, so indices that enable norms for many sparse fields will see a large reduction in required heap at search time. 5.0 has a new API to print a tree structure showing a recursive breakdown of which parts are using how much heap. Other features FieldCache is gone (moved to a dedicated UninvertingReader in the misc module). This means when you intend to sort on a field, you should index that field using doc values, which is much faster and less heap consuming than FieldCache. Tokenizers and Analyzers no longer require Reader on init. NormsFormat now gets its own dedicated NormsConsumer/Producer SortedSetSortField, used to sort on a multi-valued field, is promoted from sandbox to Lucene's core. PostingsFormat now uses a ""pull"" API when writing postings, just like doc values. This is powerful because you can do things in your postings format that require making more than one pass through the postings such as iterating over all postings for each term to decide which compression format it should use. New DateRangeField type enables Indexing and searching of date ranges, particularly multi-valued ones. A new ExitableDirectoryReader extends FilterDirectoryReader and enables exiting requests that take too long to enumerate over terms. Suggesters from multi-valued field can now be built as DocumentDictionary now enumerates each value separately in a multi-valued field. ConcurrentMergeScheduler detects whether the index is on SSD or not and does a better job defaulting its settings. This only works on Linux for now; other OS's will continue to use the previous defaults (tuned for spinning disks). Auto-IO-throttling has been added to ConcurrentMergeScheduler, to rate limit IO writes for each merge depending on incoming merge rate. CustomAnalyzer has been added that allows to configure analyzers like you do in Solr's index schema. This class has a builder API to configure Tokenizers, TokenFilters, and CharFilters based on their SPI names and parameters as documented by the corresponding factories. Memory index now supports payloads. Added a filter cache with a usage tracking policy that caches filters based on frequency of use. The default codec has an option to control BEST_SPEED or BEST_COMPRESSION for stored fields. Stored fields are merged more efficiently, especially when upgrading from previous versions or using SortingMergePolicy Highlights of the Solr release include:¶ Usability improvements that include improved bin scripts and new and restructured examples. Scripts to support installing and running Solr as a service on Linux. Distributed IDF is now supported and can be enabled via the config. Currently, there are four supported implementations for the same: LocalStatsCache: Local document stats. ExactStatsCache: One time use aggregation ExactSharedStatsCache: Stats shared across requests LRUStatsCache: Stats shared in an LRU cache across requests Solr will no longer ship a war file and instead be a downloadable application. SolrJ now has first class support for Collections API. Implicit registration of replication,get and admin handlers. Config API that supports paramsets for easily configuring solr parameters and configuring fields. This API also supports managing of pre-existing request handlers and editing common solrconfig.xml via overlay. API for managing blobs allows uploading request handler jars and registering them via config API. BALANCESHARDUNIQUE Collection API that allows for even distribution of custom replica properties. There's now an option to not shuffle the nodeSet provided during collection creation. Option to configure bandwidth usage by Replication handler to prevent it from using up all the bandwidth. Splitting of clusterstate to per-collection enables scalability improvement in SolrCloud. This is also the default format for new Collections that would be created going forward. timeAllowed is now used to prematurely terminate requests during query expansion and SolrClient request retry. pivot.facet results can now include nested stats.field results constrained by those pivots. stats.field can be used to generate stats over the results of arbitrary numeric functions. It also allows for requesting for statistics for pivot facets using tags. A new DateRangeField has been added for indexing date ranges, especially multi-valued ones. Spatial fields that used to require units=degrees now take distanceUnits=degrees/kilometers miles instead. MoreLikeThis query parser allows requesting for documents similar to an existing document and also works in SolrCloud mode. Logging improvements: Transaction log replay status is now logged Optional logging of slow requests. 29 December 2014 - Apache Lucene 4.10.3 and Apache Solr 4.10.3 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.10.3 and Apache Solr 4.10.3. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. The Solr release includes a security vulnerability fix that you can read about on the Solr news page: http://lucene.apache.org/solr/news.html See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details, and Happy Holidays! 31 October 2014 - Apache Lucene 4.10.2 and Apache Solr 4.10.2 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.10.2 and Apache Solr 4.10.2. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details, and Happy Halloween! 29 September 2014 - Apache Lucene 4.10.1 and Apache Solr 4.10.1 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.10.1 and Apache Solr 4.10.1. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 22 September 2014 - Apache Lucene 4.9.1 and Apache Solr 4.9.1 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.9.1 and Apache Solr 4.9.1. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 03 September 2014 - Apache Lucene 4.10.0 and Apache Solr 4.10.0 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.10.0 and Apache Solr 4.10.0. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. Highlights of the Lucene release include:¶ New TermAutomatonQuery using an automaton for proximity queries. http://blog.mikemccandless.com/2014/08/a-new-proximity-query-for-lucene-using.html New OrdsBlockTree terms dictionary supporting ord lookup. Simplified matchVersion handling for Analyzers with new setVersion method, as well as Analyzer constructors not requiring Version. Fixed possible corruption when opening a 3.x index with NRT reader. Fixed edge case in StandardTokenizer that caused extremely slow parsing times with long text which partially matched grammar rules. Highlights of the Solr release include:¶ This release upgrades Solr Cell's (contrib/extraction) dependency on Apache POI to mitigate 2 security vulnerabilities. Scripts for starting, stopping, and running Solr examples Distributed query support for facet.pivot Interval Faceting for Doc Values fields New ""terms"" QParser for efficiently filtering documents by a list of values 18 August 2014 - Recommendation to update Apache POI in Apache Solr 4.8.0, 4.8.1, and 4.9.0 installations¶ Apache Solr versions 4.8.0, 4.8.1, 4.9.0 bundle Apache POI 3.10-beta2 with its binary release tarball. This version (and all previous ones) of Apache POI are vulnerable to the following issues: CVE-2014-3529 (XML External Entity (XXE) problem in Apache POI's OpenXML parser), CVE-2014-3574 (XML Entity Expansion (XEE) problem in Apache POI's OpenXML parser). The Apache POI PMC released a bugfix version (3.10.1) today. Solr users are affected by these issues, if they enable the ""Apache Solr Content Extraction Library (Solr Cell)"" contrib module from the folder ""contrib/extraction"" of the release tarball. Users of Apache Solr are strongly advised to keep the module disabled if they don't use it. Alternatively, users of Apache Solr 4.8.0, 4.8.1, or 4.9.0 can update the affected libraries by replacing the vulnerable JAR files in the distribution folder. Users of previous versions have to update their Solr release first, patching older versions is impossible. For detailed instructions, see Solr's News 25 June 2014 - Apache Lucene 4.9.0 and Apache Solr 4.9.0 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.9.0 and Apache Solr 4.9.0. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. Highlights of the Lucene release include:¶ New Terms.getMin/Max methods to retrieve the lowest and highest terms per field. New IDVersionPostingsFormat, optimized for ID lookups that associate a monotonically increasing version per ID. Atomic update of a set of doc values fields. Numerous optimizations for doc values search-time performance. New (default) Lucene49NormsFormat to better compress certain cases such as very short fields. New SORTED_NUMERIC docvalues type for efficient processing of multi-valued numeric fields. Indexer passes previous token stream for easier reuse. MoreLikeThis accepts multiple values per field. All classes that estimate their RAM usage now implement a new Accountable interface. Lucene files are now written by (File)OutputStream on all platforms, completely disallowing seeking with simplified IO APIs. Improve the confusing error message when MMapDirectory cannot create a new map. Highlights of the Solr release include:¶ Numerous optimizations for doc values search-time performance Allow a client application to request the minium achieved replication factor for an update request (single or batch) by sending an optional parameter ""min_rf"". Query re-ranking support with the new ReRankingQParserPlugin. A new [child ...] DocTransformer for optionally including Block-Join decendent documents inline in the results of a search. A new (default) Lucene49NormsFormat to better compress certain cases such as very short fields. 11 June 2014 - Open Relevance sub-project closed¶ The Apache Lucene Project Management Committee decided in a vote, that the Apache Lucene sub-project ""Open Relevance"" will be discontinued. There was only modest activity during the last years and the project made no releases. Thank you to all committers for their support in this project! 20 May 2014 - Apache Lucene 4.8.1 and Apache Solr 4.8.1 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.8.1 and Apache Solr 4.8.1. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 28 April 2014 - Apache Lucene 4.8.0 and Apache Solr 4.8.0 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.8.0 and Apache Solr 4.8.0. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases now require Java 7 or greater (recommended is Oracle Java 7 or OpenJDK 7, minimum update 55; earlier versions have known JVM bugs affecting Lucene and Solr). In addition, both are fully compatible with Java 8. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. Highlights of the Lucene release include:¶ All index files now store end-to-end checksums, which are now validated during merging and reading. This ensures that corruptions caused by any bit-flipping hardware problems or bugs in the JVM can be detected earlier. For full detection be sure to enable all checksums during merging (it's disabled by default). Lucene has a new Rescorer/QueryRescorer API to perform second-pass rescoring or reranking of search results using more expensive scoring functions after first-pass hit collection. AnalyzingInfixSuggester now supports near-real-time autosuggest. Simplified impact-sorted postings (using SortingMergePolicy and EarlyTerminatingCollector) to use Lucene's Sort class to express the sort order. Bulk scoring and normal iterator-based scoring were separated, so some queries can do bulk scoring more effectively. Switched to MurmurHash3 to hash terms during indexing. IndexWriter now supports updating of binary doc value fields. HunspellStemFilter now uses 10 to 100x less RAM. It also loads all known OpenOffice dictionaries without error. Lucene now also fsyncs the directory metadata on commits, if the operating system and file system allow it (Linux, MacOSX are known to work). Lucene now uses Java 7 file system functions under the hood, so index files can be deleted on Windows, even when readers are still open. A serious bug in NativeFSLockFactory was fixed, which could allow multiple IndexWriters to acquire the same lock. The lock file is no longer deleted from the index directory even when the lock is not held. Highlights of the Solr release include:¶ <fields> and <types> tags have been deprecated from schema.xml. There is no longer any reason to keep them in the schema file, they may be safely removed. This allows intermixing of <fieldType>, <field> and <copyField> definitions if desired. The new {!complexphrase} query parser supports wildcards, ORs etc. inside Phrase Queries. New Collections API CLUSTERSTATUS action reports the status of collections, shards, and replicas, and also lists collection aliases and cluster properties. Added managed synonym and stopword filter factories, which enable synonym and stopword lists to be dynamically managed via REST API. JSON updates now support nested child documents, enabling {!child} and {!parent} block join queries. Added ExpandComponent to expand results collapsed by the CollapsingQParserPlugin, as well as the parent/child relationship of nested child documents. Long-running Collections API tasks can now be executed asynchronously; the new REQUESTSTATUS action provides status. Added a hl.qparser parameter to allow you to define a query parser for hl.q highlight queries. In Solr single-node mode, cores can now be created using named configsets. New DocExpirationUpdateProcessorFactory supports computing an expiration date for documents from the ""TTL"" expression, as well as automatically deleting expired documents on a periodic basis. 15 April 2014 - Apache Lucene 4.7.2 and Apache Solr 4.7.2 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.7.2 and Apache Solr 4.7.2. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 02 April 2014 - Apache Lucene 4.7.1 and Apache Solr 4.7.1 Available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.7.1 and Apache Solr 4.7.1. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 12 March 2014 - Apache Lucene 4.8 and Apache Solr 4.8 will require Java 7¶ The Apache Lucene/Solr committers decided with a large majority on the vote to require Java 7 for the next minor release of Apache Lucene and Apache Solr (version 4.8)! The next release will also contain some improvements for Java 7: Better file handling (especially on Windows) in the directory implementations. Files can now be deleted on windows, although the index is still open - like it was always possible on Unix environments (delete on last close semantics). Speed improvements in sorting comparators: Sorting now uses Java 7's own comparators for integer and long sorts, which are highly optimized by the Hotspot VM. If you want to stay up-to-date with Lucene and Solr, you should upgrade your infrastructure to Java 7. Please be aware that you must use at least use Java 7u1. The recommended version at the moment is Java 7u25. Later versions like 7u40, 7u45,... have a bug causing index corrumption. Ideally use the Java 7u60 prerelease, which has fixed this bug. Once 7u60 is out, this will be the recommended version. In addition, there is no more Oracle/BEA JRockit available for Java 7, use the official Oracle Java 7. JRockit was never working correctly with Lucene/Solr (causing index corrumption), so this should not be an issue. Please also review our list of JVM bugs: http://wiki.apache.org/lucene-java/JavaBugs EDIT (as of 15 April 2014): The recently released Java 7u55 fixes the above bug causing index corrumption. This version is now the recommended version for running Apache Lucene and Solr. 26 February 2014 - Apache Lucene 4.7.0 and Apache SolrTM 4.7.0 available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.7.0 and Apache Solr 4.7.0. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 28 January 2014 - Apache Lucene 4.6.1 and Apache SolrTM 4.6.1 available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.6.1 and Apache Solr 4.6.1. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 24 November 2013 - Apache Lucene 4.6.0 and Apache SolrTM 4.6.0 available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.6.0 and Apache Solr 4.6.0. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 24 October 2013 - Apache Lucene 4.5.1 and Apache SolrTM 4.5.1 available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.5.1 and Apache Solr 4.5.1. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html Both releases contain a number of bug fixes. See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. 5 October 2013 - Apache Lucene 4.5 and Apache SolrTM 4.5 available¶ The Lucene PMC is pleased to announce the availability of Apache Lucene 4.5 and Apache Solr 4.5. Lucene can be downloaded from http://lucene.apache.org/core/mirrors-core-latest-redir.html and Solr can be downloaded from http://lucene.apache.org/solr/mirrors-solr-latest-redir.html See the Lucene CHANGES.txt and Solr CHANGES.txt files included with the release for a full list of details. Highlights of the Lucene release include:¶ Added support for missing values to DocValues fields through AtomicReader.getDocsWithField. Lucene 4.5 has a new Lucene45Codec with Lucene45DocValues, supporting missing values and with most datastructures residing off-heap. New in-memory DocIdSet implementations which are especially better than FixedBitSet on small sets: WAH8DocIdSet, PFORDeltaDocIdSet and EliasFanoDocIdSet. CachingWrapperFilter now caches filters with WAH8DocIdSet by default, which has the same memory usage as FixedBitSet in the worst case but is smaller and faster on small sets. TokenStreams now set the position increment in end(), so we can handle trailing holes. IndexWriter no longer clones the given IndexWriterConfig. Lucene 4.5 also includes numerous optimizations and bugfixes. Highlights of the Solr release include:¶ Custom sharding support, including the ability to shard by field. DocValue improvements: single valued fields no longer require a default value, allowiing dynamicFields to contain doc values, as well as sortMissingFirst and sortMissingLast on docValue fields. Ability to store solr.xml in ZooKeeper. Multithreaded faceting. CloudSolrServer can now route updates directly to the appropriate shard leader. Solr 4.5 also includes numerous optimizations and bugfixes. The Apache Software Foundation¶ The Apache Software Foundation provides support for the Apache community of open-source software projects. The Apache projects are defined by collaborative consensus based processes, an open, pragmatic software license and a desire to create high quality software that leads the way in its field. Apache Lucene, Apache Solr, Apache PyLucene, Apache Open Relevance Project and their respective logos are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners. Download Click to begin of Apache Lucene 6.1.0 Apache Lucene 6.1.0 Download Click to begin of Apache Solr 6.1.0 Apache Solr 6.1.0 Projects¶ Lucene Core (Java) Solr PyLucene Open Relevance (Discontinued) About¶ License Who We are ASF links¶ Apache Software Foundation Thanks Become a Sponsor Security Editing This Site¶ Instructions ASF CMS ASF CMS Reference/FAQ Markdown Related Projects¶ Apache Hadoop Apache ManifoldCF Apache Lucene.Net Apache Lucy Apache Mahout Apache Nutch Apache OpenNLP Apache Tika Apache Zookeeper Copyright © 2011-2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Privacy Policy Apache and the Apache feather logo are trademarks of The Apache Software Foundation. Apache Lucene, Apache Solr and their respective logos are trademarks of the Apache Software Foundation. Please see the Apache Trademark Policy for more information."	"null"	"null"	"High-performance, full-featured cross-platform text search engine library."	"true"
"Search"	"Apache Solr"	"http://lucene.apache.org/solr/"	"Enterprise search engine optimized for high volume traffic."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Solr - Menu News Features Resources Search - select provider - @ Lucid Find @ Search-Lucene download Lucene ⇧ TLP Apache Solr™ 6.1.0 Solr is the popular, blazing-fast, open source enterprise search platform built on Apache Lucene™.   Learn more about Solr. Solr is highly reliable, scalable and fault tolerant, providing distributed indexing, replication and load-balanced querying, automated failover and recovery, centralized configuration and more. Solr powers the search and navigation features of many of the world's largest internet sites. Features Hundreds of features make Solr incredibly versatile. Learn More Resources From tutorials to in-depth documentation, you'll find it here. Get Started Scaling with Solr Scale with confidence in data integrity and performance. Scale Solr Solr Community Get support and give back. Contribute to the Solr project. Learn More Tested and proven Solr is trusted. Solr powers some of the most heavily-trafficked websites and applications in the world. Other Notable Users AT&T Instagram Buy.com Ticketmaster Netflix The Echo Nest Chegg Disney Adobe eBay Internet Archive SAP Hybris Magento IBM Websphere Commerce Bloomberg Comcast MTV Networks Travelocity Want to see more? Want to see your app or website here? Visit Solr's Public Servers listing page to learn more. Take the first step Getting Started Power your global enterprise or your weekend project. Download Binary Click here to download the Solr binary from the available mirrors. Download Solr Run Through the Tutorial The Solr Quick Start tutorial will help you start working with Solr. Read the Tutorial Level Up Once you've completed the tutorial, continue your mastery with the Solr resource library. More Resources Solr News | 17 June 2016 Apache Solr 6.1.0 available The Lucene PMC is pleased to announce the release of Apache Solr 6.1.0. Download here. Read More News Deep expertise Solr Books The definitive in-depth resource library written by the world's Solr experts. Learn More The Apache Software Foundation The Apache Software Foundation provides support for the Apache community of open-source software projects. The Apache projects are defined by collaborative consensus based processes, an open, pragmatic software license and a desire to create high quality software that leads the way in its field. Apache Lucene, Apache Solr, Apache PyLucene, Apache Open Relevance Project and their respective logos are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners. Features Overview Data Handling Querying Faceting Discovery Plugins and Extensions Statistics and Aggregations Spatial Rich Content Performance Scaling with SolrCloud User Interface Resources Tutorial Docs Books Presentations Videos Solr Community Solr Logos and Assets Download Older Releases Get Started Download Run Through the Tutorial Level Up Related Projects Apache Hadoop Apache ManifoldCF Apache Mahout Apache Nutch Apache OpenNLP Apache Tika Apache Zookeeper Copyright © 2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Privacy Policy Apache and the Apache feather logo are trademarks of The Apache Software Foundation. Apache Lucene, Apache Solr and their respective logos are trademarks of the Apache Software Foundation. Please see the Apache Trademark Policy for more information. All non-Apache logos are the trademarks of their respective owners."	"null"	"null"	"Enterprise search engine optimized for high volume traffic."	"true"
"Search"	"Elasticsearch"	"https://www.elastic.co/"	"Distributed, multitenant-capable full-text search engine with a RESTful web interface and schema-free JSON documents."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elastic · Revealing Insights from Data (Formerly Elasticsearch) | Elastic Questions? Feedback? powered by Olark live chat software EN English Français Deutsch 日本語 한국어 Products Cloud Services Customers Learn downloads contact EN English Français Deutsch 日本語 한국어 A Search Engine Powering Graph Exploration... Imagine That. Read the Blog Install Now Get Started Are you a newcomer to Elasticsearch? Then this is the video for you. Watch Elasticsearch as a Service Want a hosted Elasticsearch cluster that's fully managed? Get started with Elastic Cloud. Launch Secure Elasticsearch Redefine what's possible with Elasticsearch by securing your data with Shield. Learn Training Elastic trainings are taught by core developers and designed to give you the know-how needed to get up and running while learning our open source projects inside and out. Core Elasticsearch: Developer Hands-On Workshop with Elasticsearch, Logstash & Kibana View All Subscriptions Our subscriptions combine commercial products with enterprise-grade support for your projects in development and production. Designed to accelerate project delivery and solve issues quickly, Elastic subscriptions enrich our open source stack. Learn More Products Elastic's open source solutions solve a growing list of search, log analysis, and analytics challenges across virtually every industry. Our commercial security and monitoring products take our open source stack further by broadening what's possible with your data. Learn More Learn Whether you're a newcomer to Elastic or a seasoned veteran, we've got a multitude of resources — from webinars to blog posts, demos, step-by-step tutorials, forums, and more — to help you do great things with data and inspire you to stay curious. Learn More Who We Are Elastic believes getting immediate, actionable insight from data matters. As the company behind the open source projects — Elasticsearch, Logstash, Kibana, and Beats — designed to take data from any source and search, analyze, and visualize it in real time, Elastic is helping people make sense of data. From stock quotes to Twitter streams, Apache logs to WordPress blogs, our products are extending what's possible with data, delivering on the promise that good things come from connecting the dots. Learn More Be in the know with the latest and greatest from Elastic. Thanks for subscribing! We'll keep you updated with new releases. Products > Elasticsearch Kibana Logstash Beats Elastic Cloud Shield (Security) Watcher (Alerting) Marvel (Monitoring) Graph ES-Hadoop Resources Blog Community Customers & Use Cases Documentation Elastic{ON} Events Forums Meetups Subscriptions Support Portal Videos & Webinars Training About > Careers/Jobs Contact Leadership Partners Press Language English Français Deutsch 日本語 한국어 Trademarks Terms of Use Privacy Cookie Policy Brand © 2016. All Rights Reserved - Elasticsearch Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the Apache Software Foundation in the United States and/or other countries."	"null"	"null"	"Distributed, multitenant-capable full-text search engine with a RESTful web interface and schema-free JSON documents."	"true"
"Security"	"Apache Shiro"	"http://shiro.apache.org/"	"Performs authentication, authorization, cryptography and session management."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"386"	"73"	"299"	"GitHub - apache/shiro: Mirror of Apache Shiro Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 73 Star 386 Fork 299 apache/shiro mirrored from git://git.apache.org/shiro.git Code Pull requests 14 Pulse Graphs Mirror of Apache Shiro 1,634 commits 14 branches 16 releases 7 contributors Java 92.3% Groovy 7.7% Java Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 1.0.x 1.2.x 1.3.x 2.0-api-design-changes SHIRO-317b SHIRO-317 asf-infra-test exceptionCatchingModularRealmAuthorizer first-successful-authc-strategy master session_manager_API_change shiro-root-1.0.x shiro-root-1.1.x Nothing to show trunk_pre_session_manager_API_change trunk_pre_SHIRO-317b_integration site-template-before-redesign-20120814 shiro-root-1.2.6 shiro-root-1.2.5 shiro-root-1.2.4 shiro-root-1.2.3 shiro-root-1.2.2 shiro-root-1.2.1 shiro-root-1.2.0 shiro-root-1.2.0-before-rerelease shiro-root-1.1.0 shiro-root-1.1.0_release_first_attempt shiro-root-1.0.0-incubating SHIRO-121_pre_commit 1.2.0 Nothing to show New pull request Latest commit 4ddc3d0 Jul 14, 2016 bdemers Removed call to requireExplicitBindings() in ShiroModule, this is not… … … backwards compatible.  This went in as part of SHIRO-368 Permalink Failed to load latest commit information. all Replaced cobertura with jacoco and added an aggregated coverage report Jul 7, 2016 cache Extracted cache API to its own Maven module. No package names or publ… Sep 28, 2013 config Small bug fix and test for handling classnames in LoggingBeanEventLis… Jul 11, 2016 core Small bug fix and test for handling classnames in LoggingBeanEventLis… Jul 11, 2016 crypto SHIRO-483 always use English locale in ProvidedHashFormat Jul 7, 2016 event Moved event bus related code to its own module May 18, 2013 lang SHIRO-566 Use Collections wrappers to save memory and cpu. Jun 29, 2016 samples Make the apache-rat-plugin ONLY run against the root project. Jun 28, 2016 src/site Dressed up the generated site a little bit with the fluid skin and he… Jul 7, 2016 support Removed call to requireExplicitBindings() in ShiroModule, this is not… Jul 14, 2016 tools Moved crypto code (ciphers, hashes, hash formats and hash service rel… May 18, 2013 web SHIRO-200: Added ability to configure basic authentication for specif… Jul 11, 2016 .gitignore SHIRO-431: added .gitignore. Thanks for the pull request! Apr 17, 2013 CONTRIBUTING.md Replace 'ACS' with 'Apache Shiro' in CONTRIBUTING.md Mar 23, 2016 LICENSE Based on the TLP graduation discussion on general@incubator, restore … Aug 18, 2010 NOTICE Merge from 1.2.x Jul 24, 2012 README SHIRO-195 - removed README.txt to README to be consistent in naming c… Oct 8, 2010 README.md Add README.md to apache-rat-plugin excludes Jun 29, 2016 RELEASE-NOTES SHIRO-213, SHIRO-279, SHIRO-280, SHIRO-302: Added PasswordService and… Dec 2, 2011 pom.xml Replaced cobertura with jacoco and added an aggregated coverage report Jul 7, 2016 shiro.doap.rdf Updating shirt.doap.rdf with missing releases 1.2.4, 1.2.5, 1.2.6 Jul 5, 2016 README.md Apache Shiro Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications. Documentation and Examples http://shiro.apache.org Tutorials 10 Minute Tutorial Web Application License Apache License, Version 2.0 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/apache/shiro"	"Performs authentication, authorization, cryptography and session management."	"true"
"Security"	"Bouncy Castle"	"https://www.bouncycastle.org/java.html"	"All-purpose cryptographic library. JCA provider, wide range of functions from basic helpers to PGP/SMIME operations."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Legion of the Bouncy Castle Java Cryptography APIs The Legion of the Bouncy Castle entry wiki issue tracker donate mailing lists latest releases documentation resources mirroring legal and licencing contributors   Follow us on:       Welcome Welcome to the home of the Legion of the Bouncy Castle Java cryptography APIs. The Bouncy Castle Crypto APIs are looked after by an Australian Charity, the Legion of the Bouncy Castle Inc. which looks after the care and feeding of the Bouncy Castle APIs. If you would like to help support this effort please see our donations page or purchase a support contract through Crypto Workshop. Requests to sponsor specific enhancements and other work on the APIs are also most welcome. The Bouncy Castle Crypto APIs for Java consist of the following: A lightweight cryptography API. A provider for the Java Cryptography Extension and the Java Cryptography Architecture. A clean room implementation of the JCE 1.2.1. A library for reading and writing encoded ASN.1 objects. Lightweight APIs for TLS (RFC 2246, RFC 4346) and DTLS (RFC 4347). Generators for Version 1 and Version 3 X.509 certificates, Version 2 CRLs, and PKCS12 files. Generators for Version 2 X.509 attribute certificates. Generators/Processors for S/MIME and CMS (PKCS7/RFC 3852). Generators/Processors for OCSP (RFC 2560). Generators/Processors for TSP (RFC 3161 & RFC 5544). Generators/Processors for CMP and CRMF (RFC 4210 & RFC 4211). Generators/Processors for OpenPGP (RFC 4880). Generators/Processors for Extended Access Control (EAC). Generators/Processors for Data Validation and Certification Server (DVCS) - RFC 3029. Generators/Processors for DNS-based Authentication of Named Entities (DANE). Signed jar versions suitable for JDK 1.4-1.8 and the Sun JCE. The lightweight API works with everything from the J2ME to the JDK 1.8 and we now provide certificate generation, PKCS/CMS/CRMF/CMP/EAC/DANE/DVCS/TSP/TLS/DTLS and OpenPGP support across the full range of JDKs. Except where otherwise stated, software produced by this site is covered by the following license. Looking for something not listed? Have a look at the projects listed on our resources page. Keep in touch! For those who are interested, there are two mailing lists for participation in this project. To subscribe use the links below. (To unsubscribe, replace subscribe with unsubscribe in the message body) announce-crypto-request@bouncycastle.org with subscribe in the message body. This mailing list is for new release announcements only, general subscribers cannot post to it. dev-crypto-request@bouncycastle.org with subscribe in the message body. This mailing list is for discussion of development of the package. This includes bugs, comments, requests for enhancements, questions about use or operation. NOTE:You need to be subscribed to send mail to the above mailing list. A searchable archive of the dev mailing list is accessible off the mailing lists page. If you want to provide feedback, offers of jobs (or more importantly beer) directly to the members of The Legion then please use feedback-crypto@bouncycastle.org         News Java FIPS API submitted to the CMVP. Friday 8th April 2016 The BC FIPS Java API has now passed algorithm and lab testing and has been submitted to the CMVP. If you are interested in seeing the algorithm set this is built around, the User Guide for BC FIPS Java and the Draft Security Policy are now available. Please contact us at office@bouncycastle.org for further details. Java Release 1.54 is now available for download. Wednesday 30th December 2015 This is primarily a security release concerning (D)TLS 1.2. As a precaution, validation has been added to assure that the signature algorithm received in DigitallySigned structures is actually one of those offered (in signature_algorithms extension or CertificateRequest). With our default TLS configuration, we do not believe there is an exploitable vulnerability in any earlier releases, however users that are customizing the signature_algorithms extension, or running a server supporting client authentication, are advised to double-check that they are not offering any signature algorithms involving MD5. In terms of other changes: the PKCS#7 ANY type and RFC 3370 are now supported by the CMS API, and Blake2b is now supported by the provider. Other bug fixes and improvements have been made as well. For more details go to our latest releases page to download the new version and see the release notes You can also find the latest versions on one of our mirrors: polydistortion.net Sponsored Links   Site hosted by Tau Ceti Co-operative Ltd. Graphics provided by Geoff Hook. Layout and design by Travis Winters. Java and JCE are registered trademarks of Oracle ®. Unless otherwise stated, all content is Copyright © 2013 Legion of the Bouncy Castle Inc. (ABN 84 166 338 567) All rights reserved."	"null"	"null"	"All-purpose cryptographic library. JCA provider, wide range of functions from basic helpers to PGP/SMIME operations."	"true"
"Security"	"Cryptomator"	"https://cryptomator.org/"	"Multiplatform transparent client-side encryption of files in the cloud."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Multiplatform transparent client-side encryption of files in the cloud."	"false"
"Security"	"Google Keyczar"	"https://github.com/google/keyczar"	"Easy to use, yet safe encryption framework with key versioning."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"606"	"64"	"69"	"GitHub - google/keyczar: Easy-to-use crypto toolkit Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 64 Star 606 Fork 69 google/keyczar Code Issues 62 Pull requests 4 Wiki Pulse Graphs Easy-to-use crypto toolkit 688 commits 11 branches 14 releases 19 contributors HTML 41.1% Python 37.4% C++ 12.6% Java 6.8% TeX 0.8% C 0.6% Other 0.7% HTML Python C++ Java TeX C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cpp_pbe_refactor doc_update dsa_issues fix_flaky_signer_test fix_pkcs_cpp fix_rsa_attached_sign java_whitespace_fixes master session_crypter tolerate_strings_as_ints wiki Nothing to show java_release_0.71f java_release_0.71e Python_release_0.716 Python_release_0.715 Python_release_0.71d Python_release_0.71c Python_release_0.71b Java_release_0.71h Java_release_0.71g Java_release_0.71d Java_release_0.71c Java_release_0.71b Cpp_release_0.71 Cpp_release_0.71a Nothing to show New pull request Latest commit 36d7add May 4, 2016 divegeek Java release 0.71h Permalink Failed to load latest commit information. cpp Remove gtest from C++ source base. Apr 30, 2016 docs Fixing message format in latex paper Oct 13, 2015 interop Reformat README as markdown Feb 28, 2015 java Java release 0.71h May 4, 2016 python Python release 0.716 May 4, 2016 site Updating keyczar page a bit. Jul 2, 2009 .gitignore Ignore a few more files to declutter git status. Nov 17, 2011 LICENSE Copy LICENSE to top level. Feb 26, 2015 README.md Fixed a typo in Python docs. Sep 13, 2015 README.md Introducing Keyczar Keyczar is an open source cryptographic toolkit designed to make it easier and safer for developers to use cryptography in their applications. Keyczar supports authentication and encryption with both symmetric and asymmetric keys. Some features of Keyczar include: A simple API Key rotation and versioning Safe default algorithms, modes, and key lengths Automated generation of initialization vectors and ciphertext signatures Java, Python, and C++ implementations International support in Java Keyczar was originally developed by members of the Google Security Team and is released under an Apache 2.0 license. Quick Links Discussion Group Design Document (PDF) Why Keyczar? Cryptography is easy to get wrong. Developers can choose improper cipher modes, use obsolete algorithms, compose primitives in an unsafe manner, or fail to anticipate the need for key rotation. Keyczar abstracts some of these details by choosing safe defaults, automatically tagging outputs with key version information, and providing a simple programming interface. Keyczar is designed to be open, extensible, and cross-platform compatible. It is not intended to replace existing cryptographic libraries like OpenSSL, PyCrypto, or the Java JCE, and in fact is built on these libraries. An illustrative use case Suppose an application needs to encrypt a URL parameter value with a symmetric key. Normally, a developer would need to decide which algorithm to use, the key length to use, the mode of operation, how to handle initialization vectors, how to rotate keys, and how to sign ciphertexts. Keyczar simplifies these choices. Using an existing keyset, a Java developer would need to call the following: Crypter crypter = new Crypter(""/path/to/your/keys""); String ciphertext = crypter.encrypt(""Secret message""); Similarly a Python developer would call the following: crypter = Crypter.Read(""/path/to/your/keys"") ciphertext = crypter.Encrypt(""Secret message"") Get involved Interested in getting involved? We encourage open source developers to contribute to the Keyczar project. Please join us on the Keyczar project and subscribe to the Keyczar discussion group. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/keyczar"	"Easy to use, yet safe encryption framework with key versioning."	"true"
"Security"	"Keycloak"	"http://keycloak.jboss.org/"	"Integrated SSO and IDM for browser apps and RESTful web services."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"582"	"89"	"447"	"GitHub - keycloak/keycloak: Open Source Identity and Access Management For Modern Applications and Services Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 89 Star 582 Fork 447 keycloak/keycloak Code Pull requests 6 Wiki Pulse Graphs Open Source Identity and Access Management For Modern Applications and Services http://www.keycloak.org 7,104 commits 3 branches 75 releases 124 contributors Java 87.7% JavaScript 5.4% HTML 3.7% CSS 2.2% XSLT 0.6% FreeMarker 0.4% Java JavaScript HTML CSS XSLT FreeMarker Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.9.x 2.0.x master Nothing to show 2.0.0.Final 2.0.0.CR1 1.9.8.Final 1.9.7.Final 1.9.6.Final 1.9.5.Final 1.9.4.Final 1.9.3.Final 1.9.2.Test 1.9.2.Final 1.9.1.Final 1.9.0.Final 1.9.0.Final-redhat-1 1.9.0.CR1 1.9.0.CR1-redhat-2 1.9.0.CR1-redhat-1 1.8.2.Final 1.8.2.Final-redhat-1 1.8.1.Final 1.8.1.Final-redhat-1 1.8.0.Final 1.8.0.Final-redhat-1 1.8.0.CR3 1.8.0.CR2 1.8.0.CR2-redhat-1 1.8.0.CR2-redhat-1-EAP-7 1.8.0.CR1 1.8.0.CR1-redhat-2 1.8.0.CR1-redhat-1 1.8.0.Alpha1 1.7.0.Final 1.7.0.Final-redhat-1 1.7.0.CR1 1.7.0.CR1-redhat-1 1.6.1.Final 1.6.1.Final-redhat-1 1.6.0.Final 1.6.0.Final-redhat-1 1.5.1.Final 1.5.1.Final-redhat-2 1.5.1.Final-redhat-1 1.5.0.Final 1.5.0.Final-redhat-1 1.4.0.Final 1.3.1.Final 1.3.0.Final 1.2.0.Final 1.2.0.Final-redhat-2 1.2.0.Final-redhat-1 1.2.0.CR1 1.2.0.CR1-redhat-1 1.2.0.Beta1 1.1.1.Final 1.1.0.Final 1.1.0.Beta2 1.1.0.Beta1 1.0.5.Final 1.0.4.Final 1.0.3.Final 1.0.2.Final 1.0.1.Final 1.0.0.Final 1.0-rc-2 1.0-rc-1 1.0-final 1.0-beta-4 1.0-beta-3 1.0-beta-2 1.0-beta-1 1.0-beta-1-20150523 1.0-beta-1-20150521 1.0-alpha-3 1.0-alpha-2 1.0-alpha-1 1.0-alpha-1-12062013 Nothing to show New pull request Latest commit a42e4af Jul 15, 2016 stianst committed on GitHub Merge pull request #3018 from thomasdarimont/issue/KEYCLOAK-3300-supp… … …ort-jetty-in-spring-boot-adapter  KEYCLOAK-3300 Add support for jetty in spring-boot-adapter Permalink Failed to load latest commit information. adapters Merge pull request #3018 from thomasdarimont/issue/KEYCLOAK-3300-supp… Jul 15, 2016 authz bump version Jun 30, 2016 common bump version Jun 30, 2016 core KEYCLOAK-3237 Change OIDC adapters to use scope=openid as required pe… Jul 14, 2016 dependencies bump version Jun 30, 2016 distribution Merge pull request #3003 from iconoeugen/fix/update_server_spi_module… Jul 15, 2016 examples KEYCLOAK-3220 Improve error handling on adapters Jul 14, 2016 federation bump version Jun 30, 2016 integration bump version Jun 30, 2016 misc Remove link to missing ReleaseProcess.md Jul 14, 2016 model KEYCLOAK-2824 Password Policy SPI Jul 14, 2016 proxy bump version Jun 30, 2016 saml-core-api bump version Jun 30, 2016 saml-core bump version Jun 30, 2016 server-spi KEYCLOAK-3266 password policy NotUsername breaks new user registration Jul 15, 2016 services Merge pull request #3039 from stianst/KEYCLOAK-3192 Jul 15, 2016 testsuite Ignore unstable tests Jul 15, 2016 themes KEYCLOAK-3170 Users with only view-users and impersonate can't impers… Jul 15, 2016 util bump version Jun 30, 2016 wildfly KEYCLOAK-3202 Creating users causes memory leak Jul 5, 2016 .gitattributes KEYCLOAK-1385 Introduce end-of-line normalization Jul 17, 2015 .gitignore Old experiment with keycloak-server.json embedded into standalone.xml Nov 5, 2014 .travis.yml KEYCLOAK-1420 Removed redundant travis build step. Jan 20, 2016 License.html distro Jan 7, 2014 README.md Updated readme Jan 21, 2016 pom.xml Add versions for Jetty 9.3 adapter dists Jul 8, 2016 README.md Keycloak Open Source Identity and Access Management for modern Applications and Services. For more information about Keycloak visit Keycloak homepage and Keycloak blog. Building Ensure you have JDK 8 (or newer), Maven 3.2.1 (or newer) and Git installed java -version mvn -version git --version  First clone the Keycloak repository: git clone https://github.com/keycloak/keycloak.git cd keycloak  To build Keycloak run: mvn install  This will build all modules and run the testsuite. To build the distribution run: mvn install -Pdistribution  Once completed you will find distribution archives in distribution. Starting Keycloak To start Keycloak during development first build as specficied above, then run: mvn -f testsuite/integration/pom.xml exec:java -Pkeycloak-server   To start Keycloak from the appliance distribution first build the distribution it as specified above, then run: tar xfz distribution/appliance-dist/target/keycloak-appliance-dist-all-<VERSION>.tar.gz cd keycloak-appliance-dist-all-<VERSION>/keycloak bin/standalone.sh  To stop the server press Ctrl + C. Help and Documentation Documentation - User Guide, Admin REST API and Javadocs User Mailing List - Mailing list to ask for help and general questions about Keycloak JIRA - Issue tracker for bugs and feature requests Contributing Developer documentation Hacking on Keycloak - How to become a Keycloak contributor Testsuite - Details about testsuite, but also how to quickly run Keycloak during development and a few test tools (OTP generation, LDAP server, Mail server) Database Testing - How to do testing of Keycloak on different databases Updating Database - How to change the Keycloak database Developer Mailing List - Mailing list to discuss development of Keycloak License Apache License, Version 2.0 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/keycloak/keycloak"	"Integrated SSO and IDM for browser apps and RESTful web services."	"true"
"Security"	"OACC"	"http://oaccframework.org/"	"Provides permission-based authorization services."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OACC | Java Application Security Framework Toggle navigation OACC by   Get OACC Documentation Community FAQs OACC Java Application Security Framework Peace of Mind: Knowing your multi-tenant application enforces fine-grained security Get OACC Get Started What is OACC? OACC - pronounced [oak] - is a fully featured API to both enforce and manage your application's authentication and authorization needs. Fully implemented API All the functionality to manage your application's security model, out of the box. Single access-control paradigm Always operate at the resource level. Manage permissions exclusively between resources. Flexible security model Secure any operation between your domain objects and the actors on them. Permission delegation Authorize subjects to delegate their permissions to others with GRANT OPTIONS. Identity delegation Authorize an authenticated subject to securely ""impersonate"" another subject. Efficient query methods Find resources by permission with efficient symmetric query methods. Learn more about all of OACC's authorization and authentication features on the Features page. Supported Environments OACC is compatible with Java™ SE 7 (Java™ version 1.7.0), or higher. OACC persists all security relationships in database tables and currently supports the following databases: IBM DB2 10.5 Microsoft SQL Server 12.0 (2014) Oracle 11g R2 PostgreSQL 9.3 HSQLDB 2.3 MySQL 5.6 / MariaDB 10.0 SQLite 3.8 License OACC is open-source software released under the commercial friendly Apache License 2.0 (tl;dr). News May 17, 2016 New OACC website released New OACC website is now usable on any device. Feb 15, 2016 OACC 2.0.0 rc.7 released Permission factories now cache all permissions. Feb 7, 2016 OACC published on Maven Central OACC is now available from the Maven Central Repository. toggle all news Jan 11, 2016 OACC 2.0.0 rc.6 released Improved serialization support. Nov 17, 2015 OACC 2.0.0 rc.5 released Supports client-specified alternate resource identifier so clients can avoid storing the generated resourceId. Sep 29, 2015 OACC 2.0.0 rc.4 released Expanded database support: now includes profiles for HSQLDB, MySQL and SQLite. Jul 14, 2015 OACC 2.0.0 rc.3 released New API methods to grant/revoke permissions and delete resources and domains; now enforces query authorization; culled overloaded methods. Mar 23, 2015 OACC 2.0.0 rc.2 released New API methods to check permissions; vararg support; only uses unchecked exceptions. Jan 9, 2015 OACC 2.0.0 rc.1 released New API methods to get direct permissions. Nov 18, 2014 OACC 2.0.0 alpha.4 released Comprehensive pluggable authentication module support. Oct 7, 2014 OACC is open-source! OACC open-sourced under the Apache License, Version 2.0. Project website launched. Get OACC Get Started OACC Framework Download Features Release Notes Documentation Getting Started API Overview Javadocs FAQs Community Mailing List Issue Tracking Source Control OACC is an open-source Java application security framework developed by Acciente, released under Apache License 2.0 Copyright © 2014-2016 Acciente, LLC. All Rights Reserved. Acciente, the Acciente logo, and OACC are trademarks of Acciente, LLC. All other trademarks and registered trademarks used are the property of their respective owners. GitHub-corners © 2016 Til Holman and adapted under the MIT License. Responsive timeline © 2013 Bootsnip.com and adapted under the MIT License."	"null"	"null"	"Provides permission-based authorization services."	"true"
"Security"	"pac4j"	"https://github.com/pac4j/pac4j"	"Security engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"610"	"72"	"212"	"GitHub - pac4j/pac4j: Security engine for Java (authentication, authorization, multi frameworks) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 610 Fork 212 pac4j/pac4j Code Issues 21 Pull requests 1 Wiki Pulse Graphs Security engine for Java (authentication, authorization, multi frameworks) http://www.pac4j.org 1,442 commits 7 branches 27 releases 52 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.3.x 1.4.x 1.5.x 1.7.x 1.8.x gh-pages master Nothing to show scribe-up-1.3.1 scribe-up-1.3.0 scribe-up-1.2.0 scribe-up-1.2.0-RC1 scribe-up-1.1.0 scribe-up-1.0.0 pac4j-1.9.0 pac4j-1.8.9 pac4j-1.8.8 pac4j-1.8.7 pac4j-1.8.6 pac4j-1.8.5 pac4j-1.8.4 pac4j-1.8.3 pac4j-1.8.2 pac4j-1.8.1 pac4j-1.8.0 pac4j-1.8.0-RC1 pac4j-1.7.2 pac4j-1.7.1 pac4j-1.7.0 pac4j-1.6.0 pac4j-1.6.0-RC1 pac4j-1.5.1 pac4j-1.5.0 pac4j-1.4.1 pac4j-1.4.0 Nothing to show New pull request Latest commit d4dd666 Jul 13, 2016 leleuj committed on GitHub Merge pull request #604 from leleuj/pac4j-603 … The Authenticator and ProfileCreator should have access to the context Permalink Failed to load latest commit information. pac4j-cas The Authenticator and ProfileCreator should have access to the context Jul 11, 2016 pac4j-config [maven-release-plugin] prepare for next development iteration Jun 7, 2016 pac4j-core The Authenticator and ProfileCreator should have access to the context Jul 11, 2016 pac4j-gae [maven-release-plugin] prepare for next development iteration Jun 7, 2016 pac4j-http The Authenticator and ProfileCreator should have access to the context Jul 11, 2016 pac4j-jwt The Authenticator and ProfileCreator should have access to the context Jul 11, 2016 pac4j-ldap The Authenticator and ProfileCreator should have access to the context Jul 11, 2016 pac4j-mongo The Authenticator and ProfileCreator should have access to the context Jul 11, 2016 pac4j-oauth [maven-release-plugin] prepare for next development iteration Jun 7, 2016 pac4j-oidc [maven-release-plugin] prepare for next development iteration Jun 7, 2016 pac4j-openid [maven-release-plugin] prepare for next development iteration Jun 7, 2016 pac4j-saml [maven-release-plugin] prepare for next development iteration Jun 7, 2016 pac4j-sql The Authenticator and ProfileCreator should have access to the context Jul 11, 2016 pac4j-stormpath The Authenticator and ProfileCreator should have access to the context Jul 11, 2016 travis Remove messed up formatting Mar 8, 2016 .gitignore use CommonProfile instead of UserProfile Apr 1, 2016 .travis.yml Faster build Jan 2, 2016 LICENSE Remove messed up formatting Mar 8, 2016 NOTICE remove header license Feb 24, 2016 README-ADFS.txt verify that crlf goes away Jun 3, 2016 README.md Update README.md Jun 7, 2016 findbugs-exclude.xml second pass findbugs Mar 17, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jun 7, 2016 README.md pac4j is an easy and powerful Java security engine to authenticate users, get their profiles and manage authorizations in order to secure a Java web application. It provides a comprehensive set of concepts and components. It is based on Java 8 and available under the Apache 2 license. It is currently available for most frameworks / tools and supports most authentication / authorization mechanisms. Frameworks / tools implementing pac4j: The framework / tool you develop with The *-pac4j library you must use The demo(s) for tests J2E environment j2e-pac4j j2e-pac4j-demo Spring Web MVC and Spring Boot spring-webmvc-pac4j spring-webmvc-pac4j-demo or spring-webmvc-pac4j-boot-demo Play 2.x framework play-pac4j play-pac4j-java-demo or play-pac4j-scala-demo Vertx vertx-pac4j vertx-pac4j-demo Spark Java framework spark-pac4j spark-pac4j-demo Ratpack ratpack-pac4j ratpack-pac4j-demo Undertow undertow-pac4j undertow-pac4j-demo Jooby framework jooby-pac4j jooby-pac4j-demo Apache Shiro buji-pac4j buji-pac4j-demo Spring Security spring-security-pac4j spring-security-pac4j-demo SSO CAS server cas-server-support-pac4j cas-pac4j-oauth-demo Knox gateway for Hadoop gateway-provider-security-pac4j knox-pac4j-demo You can implement pac4j for a new framework / tool by following these guidelines. Main concepts and components: 1) A client represents an authentication mechanism. It performs the login process and returns a user profile. An indirect client is for UI authentication while a direct client is for web services authentication 2) An authorizer is meant to check authorizations on the authenticated user profile(s) or on the current web context 3) A matcher defines whether the security must apply on a specific url 4) A config defines the security configuration via clients, authorizers and matchers 5) The ""security filter"" (or whatever the mechanism used to intercept HTTP requests) protects an url by checking that the user is authenticated and that the authorizations are valid, according to the clients and authorizers configuration. If the user is not authenticated, it performs authentication for direct clients or starts the login process for indirect clients 6) The ""callback controller"" finishes the login process for an indirect client 7) The application logout controller"" logs out the user from the application. Versions The version 1.9.1-SNAPSHOT is under development. Maven artifacts are built via Travis: and available in the Sonatype snapshots repository. The source code can be cloned and locally built via Maven: git clone git@github.com:pac4j/pac4j.git cd pac4j mvn clean install The latest released version is the , available in the Maven central repository. See the release notes. Read the Javadoc and the technical components documentation for more information. Need help? If you have any question, please use the following mailing lists: pac4j users pac4j developers Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pac4j/pac4j"	"Security engine."	"true"
"Security"	"PicketLink"	"http://picketlink.org/"	"Umbrella project for security and identity management."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"69"	"25"	"96"	"GitHub - picketlink/picketlink: PicketLink is a security framework for securing Java EE applications. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 69 Fork 96 picketlink/picketlink Code Pull requests 4 Pulse Graphs PicketLink is a security framework for securing Java EE applications. 3,136 commits 5 branches 46 releases 28 contributors Java 99.5% Other 0.5% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.6.x PLINK-154 PLINK-629 master travis Nothing to show v3.0.0.Beta2 v3.0.0.Beta1 v3.0.0.Alpha1 v3.0.0-2013Jan24 v3.0.0-2013Jan22 v3.0.0-2013Jan16 v3.0.0-2013Feb20 v3.0-2013Jan04 v3.0-2012Oct30 v3.0-2012Nov26 v3.0-2012Nov21 v3.0-2012Dec14 v2.7.1.Final v2.7.0.Final v2.7.0.CR3 v2.7.0.CR2 v2.7.0.CR2-afsa-1 v2.7.0.CR1 v2.7.0.Beta2 v2.7.0.Beta1 v2.7.0.Beta1-20140731 v2.6.1.Final v2.6.0.Final v2.6.0.CR5 v2.6.0.CR4 v2.6.0.CR3 v2.6.0.CR2 v2.6.0.CR1 v2.6.0.Beta4 v2.6.0.Beta3 v2.5.3.Beta1 v2.5.2.Final v2.5.1.Final v2.5.0.Final v2.5.0.CR2 v2.5.0.CR1 v2.5.0.Beta7 v2.5.0.Beta6 v2.5.0.Beta5 v2.5.0.Beta4 v2.5.0.Beta3 3.0.0-2013Feb08 3.0.0-2013Feb01 2.6.0.Beta3 2.6.0.Beta2 1.0-20120910 Nothing to show New pull request Latest commit ca68ac2 May 31, 2016 pedroigor Merge pull request #503 from pedroigor/master … Fixing version. Permalink Failed to load latest commit information. bom Fixing version. May 31, 2016 build-config Fixing version. May 31, 2016 dist Fixing version. May 31, 2016 docs Fixing version. May 31, 2016 examples/security-console Fixing version. May 31, 2016 forge Fixing version. May 31, 2016 ide-configs asl Feb 12, 2013 maven-plugins/picketlink-jdocbook-style Fixing version. May 31, 2016 modules Fixing version. May 31, 2016 .gitignore Merging META-INF/services from jars. Jun 6, 2014 LICENSE.TXT source headers changed to ASL Feb 12, 2013 README.md Fixing README.md May 12, 2014 RELEASE_PROCEDURE.md Updating release script. Jul 17, 2014 pom.xml Fixing version. May 31, 2016 release.sh Updating release script. Jul 31, 2014 test.txt Testing cloudbees webhook. May 7, 2014 README.md PicketLink http://picketlink.org Java EE Application Security Identity Management Federation Social REST Security Standard-based Security Building Ensure you have JDK 7 (or newer) installed java -version  If you already have Maven 3.1.0 (or newer) installed you can use it directly mvn clean install  Contributing http://picketlink.org Running the Testsuite All tests are enabled by default whe you execute a simple mvn clean install  Some modules provide specific profiles and system properties in order to run a specific set of integration or unit tests. During a build (if tests are not skipped) the integration tests from tests are always executed. Running the PicketLink IDM Testsuite For PicketLink IDM, the following profiles are available: idm-smoke-tests: Core tests that should be run as part of every build. Failures here will fail the build. You also provide some additional system properties as follows: -Dtest.idm.configuration=[all,file,jpa,ldap,jdbc,ldap_jpa]: Specify which category of tests should be run. Usually, they are references to specific configurations for each identity store. -Dtest.idm.jpa.eclipselink.provider=true: Use EclipseLink instead of Hibernate when running the JPA identity store configuration tests. Nightly Builds Nightly Builds are available at http://repository-picketlink.forge.cloudbees.com/snapshot/. Note: Those artitacts are SNAPSHOT versions, they're only suitable to test new features, fixes, etc. License ASLv2 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/picketlink/picketlink"	"Umbrella project for security and identity management."	"true"
"Serialization"	"FlatBuffers"	"https://github.com/google/flatbuffers"	"Memory efficient serialization library that can access serialized data without unpacking and parsing it."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6136"	"431"	"869"	"GitHub - google/flatbuffers: Memory Efficient Serialization Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 431 Star 6,136 Fork 869 google/flatbuffers Code Issues 95 Pull requests 25 Pulse Graphs Memory Efficient Serialization Library http://google.github.io/flatbuffers/ 792 commits 4 branches 7 releases 95 contributors C++ 46.9% C# 11.6% Python 8.6% PHP 8.5% Go 7.4% Java 6.2% Other 10.8% C++ C# Python PHP Go Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags benchmarks fix-277 gh-pages master Nothing to show v1.3.0 v1.2.0 v1.1.0 v1.0.3 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit b22db6e Jul 14, 2016 gwvo committed on GitHub Merge pull request #3905 from bog-dan-ro/master … Verifier computes the buffersize, useful when streaming multiple flatbuffers Permalink Failed to load latest commit information. CMake Add env var for flatc schema compiler cmake module Jun 10, 2016 android Merge ""Removed reference to deprecated NDK toolchain version."" into u… May 23, 2016 biicode Made .sh files all have same comment formatting. May 23, 2016 build_ide Added missing util.cpp to VS project Apr 4, 2016 docs Fixed typo Jul 1, 2016 go Fix heap allocation when reading a string. Apr 23, 2016 grpc Added GRPC code generator to flatc. Jun 29, 2016 include/flatbuffers Verify everything in one shot Jul 14, 2016 java Fix some error Jul 1, 2016 js Fix #3773: Generated JS now avoids the flatbuffers object Feb 25, 2016 net/FlatBuffers Removed BOM marker from some files. May 23, 2016 php Implement __vector_as_bytes and methods to get [ubyte] efficiently Mar 29, 2016 python Added missing licenses to some sh/cs/py files. May 23, 2016 reflection Made .sh files all have same comment formatting. May 23, 2016 samples Verify everything in one shot Jul 14, 2016 src Merge pull request #3905 from bog-dan-ro/master Jul 14, 2016 tests Merge pull request #3905 from bog-dan-ro/master Jul 14, 2016 .gitattributes Initial commit of the FlatBuffers code. Jun 10, 2014 .gitignore Added Visual Studio transient files to .gitignore Jan 18, 2016 .travis.yml Disabled broken biicode builds on Travis for the moment. Feb 22, 2016 CMakeLists.txt Fix some error Jul 1, 2016 CONTRIBUTING.md Rename CONTRIBUTING to CONTRIBUTING.md Jul 13, 2016 LICENSE.txt Fix Visual Studio 2012 build warning. Sep 11, 2015 biicode.conf added .travis.yml file (build with original and biicode building); Apr 15, 2015 composer.json (PHP) add experimental support for PHP language. Nov 18, 2015 readme.md Add C support in README, minor updates in other C doc Mar 26, 2016 readme.md FlatBuffers FlatBuffers is an efficient cross platform serialization library for games and other memory constrained apps. It allows you to directly access serialized data without unpacking/parsing it first, while still having great forwards/backwards compatibility. Go to our landing page to browse our documentation. Supported operating systems Android Windows MacOS X Linux Supported programming languages C++ C# C Go Java JavaScript PHP Python and many more in progress... Contribution FlatBuffers Google Group to discuss FlatBuffers with other developers and users. FlatBuffers Issues Tracker to submit an issue. stackoverflow.com with flatbuffers tag for any questions regarding FlatBuffers. To contribute to this project, see CONTRIBUTING. Integration For applications on Google Play that integrate this tool, usage is tracked. This tracking is done automatically using the embedded version string (flatbuffer_version_string), and helps us continue to optimize it. Aside from consuming a few extra bytes in your application binary, it shouldn't affect your application at all. We use this information to let us know if FlatBuffers is useful and if we should continue to invest in it. Since this is open source, you are free to remove the version string but we would appreciate if you would leave it in. Licensing Flatbuffers is licensed under the Apache License, Version 2.0. See LICENSE for the full license text. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/flatbuffers"	"Memory efficient serialization library that can access serialized data without unpacking and parsing it."	"true"
"Serialization"	"FST"	"https://github.com/RuedigerMoeller/fast-serialization"	"JDK compatible high performance object graph serialization."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"575"	"65"	"119"	"GitHub - RuedigerMoeller/fast-serialization: FST: fast java serialization drop in-replacement http://ruedigermoeller.github.io/fast-serialization/ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 65 Star 575 Fork 119 RuedigerMoeller/fast-serialization Code Issues 38 Pull requests 0 Wiki Pulse Graphs FST: fast java serialization drop in-replacement http://ruedigermoeller.github.io/fast-serialization/ 666 commits 5 branches 62 releases 12 contributors Java 93.5% JavaScript 4.8% HTML 1.7% Java JavaScript HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 2.17 eurex gh-pages master Nothing to show v2.45 v2.43 v2.37 v2.36 v2.35 v2.16 v2.15 v2.14 v2.13 v2.12 v2.10 v1.58 v1.57 v1.56 v1.55 v1.55-1.6 v1.54 v1.53 v1.52 v1.51 v1.50 v1.42 v1.41 v1.40 v1.39 2.47 2.46 2.44 2.42 2.41 2.40 2.39 2.38 2.34 2.33 2.31 2.30 2.29 2.28 2.27 2.26 2.25 2.24 2.23 2.22 2.21 2.20 2.18 2.17 2.09 2.08 2.07 2.05 2.04 2.03 2.02 2.01 2.00 2.0-beta-1 2.00-SNAPSHOT 1.38 1.37 Nothing to show New pull request Latest commit c4474ed Jul 14, 2016 RuedigerMoeller committed on GitHub Merge pull request #140 from john9x/master …  #139 fixes Permalink Failed to load latest commit information. .gradle/1.6/taskArtifacts v1.38 Mar 4, 2014 img . Mar 1, 2014 lib json codec May 26, 2015 src Bugfix for serialization of EnumSet with anonymous enums. Bugfix for … Jun 24, 2016 .gitignore move to netty2go, initial js generation May 27, 2014 .travis.yml Added Travis CI configuration Nov 18, 2015 LICENSE.md license Dec 13, 2014 README.md Update README.md Jun 7, 2016 build.gradle 2.47 May 24, 2016 fst.png Add files via upload May 14, 2016 gradle.properties bump version May 29, 2015 offheap.html passes all tests, fixes, some perf degradation Mar 29, 2014 pom.xml 2.47 May 24, 2016 release.sh 2.47 May 24, 2016 result.html cp mostly done May 4, 2014 result.txt cp mostly done May 4, 2014 structiter.html cleanup test separation, fixed structs (broken) Mar 16, 2014 test.json . May 30, 2015 README.md fast-serialization up to 10 times faster 100% JDK Serialization compatible drop-in replacement (Ok, might be 99% ..). As an example: Lambda Serialization which came with 1.8 worked instantly. Android compatible since version >= 2.17 (use FSTConfiguration.createAndroidConfiguration() both on server and client side. The configuration object has to be passed into FSTObjectIn/Output constructors) OffHeap Maps, Persistent OffHeap maps FSTStructs is very similar to IBM's packed objects. Difference is: You can run it with Oracle JDK today. optionally en/decode any Serializable object graph to JSON (incl. shared references) (since 2.29) for interop Apache 2.0 license since 2.17 Docs: Fast JDK-compatible Serialization Json Serialization OffHeap + Persistent Maps MinBin cross platform binary format Kson: a JSon extension Struct Emulation (currently not covered by tests) mvn note: maven.org might lag 1 day behind after releasing. 2.0 version <dependency>     <groupId>de.ruedigermoeller</groupId>     <artifactId>fst</artifactId>     <version>2.47</version> </dependency> Older version (different package name, 1.6 compatible ..). Fixes are not backported anymore, unsupported. <dependency>     <groupId>de.ruedigermoeller</groupId>     <artifactId>fst</artifactId>     <version>1.63</version> </dependency> Who uses FST ? I am not actively tracking use, maven.org reports more than 4500 distinct IP accesses triggered by maven builds world wide per month. Notable also: used in production in Eurex Exchange's trading back end's middleware JUptr.io's distributed system / NLP engine uses FST Popular Apache Wicket supplementals use FST to speed up Wicket how to build master contains dev branch/trunk. 1.x contains old version The maven build should work out of the box and reproduces the artifact hosted on maven.org To use the gradle build, you need to configure the proxy server in settings.properties (or just set empty if you do not sit behind a proxy). Note that instrumentation done for fst-structs works only if debug info is turned on during compile. Reason is that generating methods at runtime with javassist fails (probably a javassist bug ..). This does not affect the serialization implementation. JDK 1.6 Build 1.x build since v1.62 are still jdk 6 compatible Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/RuedigerMoeller/fast-serialization"	"JDK compatible high performance object graph serialization."	"true"
"Serialization"	"Kryo"	"https://github.com/EsotericSoftware/kryo"	"Fast and efficient object graph serialization framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2004"	"219"	"367"	"GitHub - EsotericSoftware/kryo: Java serialization and cloning: fast, efficient, automatic Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 219 Star 2,004 Fork 367 EsotericSoftware/kryo Code Issues 59 Pull requests 8 Wiki Pulse Graphs Java serialization and cloning: fast, efficient, automatic 669 commits 8 branches 27 releases 33 contributors HTML 56.0% Java 44.0% HTML Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.05 2.02 kryo-1 kryo-1.05 kryo-2.21.x kryo-2.22 master tmp-changelog Nothing to show kryo-parent-4.0.0 kryo-parent-3.0.3 kryo-parent-3.0.2 kryo-parent-3.0.1 kryo-parent-3.0.0 kryo-2.24.0 kryo-2.23.0 kryo-2.22 kryo-2.21.1 kryo-2.21 kryo-2.20 kryo-2.18 kryo-2.16 kryo-2.15 kryo-2.14 kryo-2.11 kryo-2.09 kryo-2.08 kryo-2.07 kryo-2.05 kryo-2.04 kryo-2.02 kryo-1.05 kryo-1.04 kryo-1.03 kryo-1.02 2.02 Nothing to show New pull request Latest commit 65ccbfa Jul 6, 2016 magro [maven-release-plugin] prepare for next development iteration Permalink Failed to load latest commit information. .settings Fixed javadocs warnings. Mar 21, 2013 build Allow null for input/output strings and chars. Apr 7, 2012 compat_reports Kryo 4.0.0: Update README, add compat reports Jul 6, 2016 etc Update assembly descriptor to include all jars (also the original-kryo*) Jan 28, 2014 lib Update lib/* and eclipse .classpath Apr 3, 2015 src/com/esotericsoftware/kryo Disable the optimization of generics serialization and provide an API… Jun 24, 2016 test Disable the optimization of generics serialization and provide an API… Jun 25, 2016 .classpath Update lib/* and eclipse .classpath Apr 3, 2015 .gitignore Fix for #321 EnumNameSerializer Jun 23, 2015 .project Rename project, kryo2 -> kryo. Nov 11, 2013 CHANGES.md Kryo 4.0.0: Update README, add compat reports Jul 5, 2016 CONTRIBUTING.md Added CONTRIBUTING.md, requested by eclipse.org. Jun 27, 2015 README.md Kryo 4.0.0: Update README, add compat reports Jul 5, 2016 a.ser Merge remote-tracking branch 'origin/master' Feb 18, 2015 kryo.dat Merge remote-tracking branch 'origin/master' Feb 18, 2015 license.txt Added BSD license text. Mar 29, 2010 pom-main.xml [maven-release-plugin] prepare for next development iteration Jul 6, 2016 pom-shaded.xml [maven-release-plugin] prepare for next development iteration Jul 5, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jul 5, 2016 project.yaml Update project.yaml to reflect the new development version May 4, 2014 README.md Kryo is a fast and efficient object graph serialization framework for Java. The goals of the project are speed, efficiency, and an easy to use API. The project is useful any time objects need to be persisted, whether to a file, database, or over the network. Kryo can also perform automatic deep and shallow copying/cloning. This is direct copying from object to object, not object->bytes->object. This documentation is for v2+ of Kryo. See V1Documentation for v1.x. If you are planning to use Kryo for network communication, the KryoNet project may prove useful. Contents New in release 4.0.0 Versioning Semantics, Upgrading Installation Integration with Maven Using Kryo without Maven Quickstart IO Unsafe-based IO Serializers Registration Default serializers FieldSerializer KryoSerializable Class fields annotations Java Serialization Reading and writing References Object creation Copying/cloning Context Compression and encryption Chunked encoding Compatibility Interoperability Stack size Threading Pooling Kryo instances Logging Scala Objective-C Benchmarks Projects using Kryo Contact / Mailing list New in release 4.0.0 The 4.0.0 release brings several new features and improvements for stability and performance. Here are some highlights and things you definitely should be aware of (left aside that studying the change log and testing the upgrade carefully is a must anyways). BREAKING (data): Generics handling is more robust now, the former optimization for smaller size (but increased serialization time) is now optional and disabled by default. Important: This change breaks the serialization format of the FieldSerializer for generic fields, therefore generic classes serialized with Kryo 3 and FieldSerializer cannot be deserialized with Kryo 4 by default. To deserialize such Kryo 3 serialized generic classes you have to set kryo.getFieldSerializerConfig().setOptimizedGenerics(true);! In any case, test that (de)serialization works with the upgrade. BREAKING (source/binary): protected Kryo.isClousre is renamed to Kryo.isClosure, Generics is moved to a different package and no longer part of the public api. Since Kryo 4 the public api is reduced. Since java does not allow fine grained settings for visibility, some classes that are public but not considered to be part of the public api are now marked with ""INTERNAL API"". Kryo 4 adds serializers for Java 8 java.time.* and Optional*. Now we test serialization compatibility for the different binary formats and default serializers for every change. Many more improvements and fixes thanks to many contributors! For details check out the Release Notes. Versioning Semantics, Upgrading For a serialization library the most important value is that it can deserialize previously serialized data. With kryo we're following these rules of thumb for versioning: we increase the major version if serialization compatibility is broken (data serialized with the previous version cannot be deserialized with the new version) we increase the minor version if binary or source compatibility of the documented public api is broken Re rule 1.): It's applied if any of the underlying binary formats is changed (see IO and Unsafe-based IO) or if the data written by a commonly used serializer is changed (e.g. some default serializer). Re rule 2.): Due to the limits of java's access modifiers the technical api is broader than the semantic api (documented on this page). Therefore technical binary compatibility may be broken while no user is affected. Keep in mind, that any upgrade of a serialization library is a significant event. When upgrading kryo check the included changes and test thoroughly the new version with your own data structures and your setup. We try to make it as safe and easy as possible: at development time we test serialization compatibility for the different binary formats and default serializers at development time we track binary and source compatibility with clirr for each release we provide a ChangeLog that additionally contains a section reporting the serialization, binary and source compatibilities (for reporting binary and source compatibility we use japi-compliance-checker) Installation Kryo JARs are available on the releases page and at Maven Central. Latest snapshots of Kryo including snapshot builds of master are in the Sonatype Repository. Integration with Maven To use the official release of Kryo, please use the following snippet in your pom.xml     <dependency>         <groupId>com.esotericsoftware</groupId>         <artifactId>kryo</artifactId>         <version>4.0.0</version>     </dependency> If you experience issues because you already have a different version of asm in your classpath, you can use the kryo-shaded jar which has its version of asm included, relocated in a different package:     <dependency>         <groupId>com.esotericsoftware</groupId>         <artifactId>kryo-shaded</artifactId>         <version>4.0.0</version>     </dependency> If you want to test the latest snapshot of Kryo, please use the following snippet in your pom.xml     <repository>        <id>sonatype-snapshots</id>        <name>sonatype snapshots repo</name>        <url>https://oss.sonatype.org/content/repositories/snapshots</url>     </repository>      <dependency>        <groupId>com.esotericsoftware</groupId>        <artifactId>kryo</artifactId>         <version>4.0.1-SNAPSHOT</version>     </dependency> Using Kryo without Maven If you use Kryo without Maven, be aware that Kryo jar file has a couple of external dependencies, whose JARs you need to add to your classpath as well. These dependencies are MinLog logging library and Objenesis library. Quickstart Jumping ahead to show how the library is used:     Kryo kryo = new Kryo();     // ...     Output output = new Output(new FileOutputStream(""file.bin""));     SomeClass someObject = ...     kryo.writeObject(output, someObject);     output.close();     // ...     Input input = new Input(new FileInputStream(""file.bin""));     SomeClass someObject = kryo.readObject(input, SomeClass.class);     input.close(); The Kryo class orchestrates serialization. The Output and Input classes handle buffering bytes and optionally flushing to a stream. The rest of this document details how this works and advanced usage of the library. IO The Output class is an OutputStream that writes data to a byte array buffer. This buffer can be obtained and used directly, if a byte array is desired. If the Output is given an OutputStream, it will flush the bytes to the stream when the buffer becomes full. Output has many methods for efficiently writing primitives and strings to bytes. It provides functionality similar to DataOutputStream, BufferedOutputStream, FilterOutputStream, and ByteArrayOutputStream. Because Output buffers when writing to an OutputStream, be sure to call flush() or close() after writing is complete so the buffered bytes are written to the underlying stream. The Input class is an InputStream that reads data from a byte array buffer. This buffer can be set directly, if reading from a byte array is desired. If the Input is given an InputStream, it will fill the buffer from the stream when the buffer is exhausted. Input has many methods for efficiently reading primitives and strings from bytes. It provides functionality similar to DataInputStream, BufferedInputStream, FilterInputStream, and ByteArrayInputStream. To read from a source or write to a target other than a byte array, simply provide the appropriate InputStream or OutputStream. Unsafe-based IO Kryo provides additional IO classes, which are based on the functionalities exposed by the sun.misc.Unsafe class. These classes are UnsafeInput, UnsafeOutput. They are derived from Kryo's Input and Output classes and therefore can be used as a drop-in replacement on those platforms, which properly support sun.misc.Unsafe. For the case you need to serialize to or deserialize from direct-memory ByteBuffers or even off-heap memory, there are two dedicated classes UnsafeMemoryInput and UnsafeMemoryOutput whose instances can be used for this purpose instead of the usual Input and Output classes. Using Unsafe-based IO may result in a quite significant performance boost (sometimes up-to an order of magnitude), depending on your application. In particular, it helps a lot when serializing large primitive arrays as part of your object graphs. ** DISCLAIMER ABOUT USING UNSAFE-BASED IO ** Unsafe-based IO is not 100% compatible with Kryo's Input and Output streams when it comes to the binary format of serialized data. This means that data written by Unsafe-based output streams can be read only by Unsafe-based input streams, but not by usual Input streams. The same applies on the opposite direction: data written by usual Output streams cannot be correctly read by Unsafe-based input streams. It should be safe to use Unsafe IO streams as long as both serialization and deserialization are using them and are executed on the same processor architecture (more precisely, if the endianness and internal representation of native integer and floating point types is the same). Unsafe IO was extensively tested on X86 hardware. Other processor architectures are not tested to the same extent. For example, there were some bug reports from users trying to use it on SPARC-based platforms. Serializers Kryo is a serialization framework. It doesn't enforce a schema or care what data is written or read. This is left to the serializers themselves. Serializers are provided by default to read and write data in various ways. If these don't meet particular needs, they can be replaced in part or in whole. The provided serializers can read and write most objects but, if necessary, writing a new serializer is easy. The Serializer abstract class defines methods to go from objects to bytes and bytes to objects.     public class ColorSerializer extends Serializer<Color> {         public void write (Kryo kryo, Output output, Color object) {             output.writeInt(object.getRGB());         }          public Color read (Kryo kryo, Input input, Class<Color> type) {             return new Color(input.readInt(), true);         }     } Serializer has two methods that can be implemented. write() writes the object as bytes. read() creates a new instance of the object and reads from the input to populate it. The Kryo instance can be used to write and read nested objects. If Kryo is used to read a nested object in read() then kryo.reference() must first be called with the parent object if it is possible for the nested object to reference the parent object. It is unnecessary to call kryo.reference() if the nested objects can't possibly reference the parent object, Kryo is not being used for nested objects, or references are not being used. If nested objects can use the same serializer, the serializer must be reentrant. Code should not make use of serializers directly, instead the Kryo read and write methods should be used. This allows Kryo to orchestrate serialization and handle features such as references and null objects. By default, serializers do not need to handle the object being null. The Kryo framework will write a byte as needed denoting null or not null. If a serializer wants to be more efficient and handle nulls itself, it can call Serializer#setAcceptsNull(true). This can also be used to avoid writing the null denoting byte when it is known that all instances of a type will never be null. Registration When Kryo writes out an instance of an object, first it may need to write out something that identifies the object's class. By default, the fully qualified class name is written, then the bytes for the object. Subsequent appearances of that object type within the same object graph are written using a variable length int. Writing the class name is somewhat inefficient, so classes can be registered beforehand:     Kryo kryo = new Kryo();     kryo.register(SomeClass.class);     // ...     Output output = ...     SomeClass someObject = ...     kryo.writeObject(output, someObject); Here SomeClass is registered with Kryo, which associates the class with an int ID. When Kryo writes out an instance of SomeClass, it will write out this int ID. This is more efficient than writing out the class name, but requires the classes that will be serialized to be known up front. During deserialization, the registered classes must have the exact same IDs they had during serialization. The register method shown above assigns the next available, lowest integer ID, which means the order classes are registered is important. The ID can also be specified explicitly to make order unimportant:     Kryo kryo = new Kryo();     kryo.register(SomeClass.class, 0);     kryo.register(AnotherClass.class, 1);     kryo.register(YetAnotherClass.class, 2); The IDs are written most efficiently when they are small, positive integers. Negative IDs are not serialized efficiently. -1 and -2 are reserved. Use of registered and unregistered classes can be mixed. All primitives, primitive wrappers, and String are registered by default. Kryo#setRegistrationRequired can be set to true to throw an exception when any unregistered class is encountered. This prevents an application from accidentally using class name strings. If using unregistered classes, short package names could be considered. Default serializers After writing the class identifier, Kryo uses a serializer to write the object's bytes. When a class is registered, a serializer instance can be specified:     Kryo kryo = new Kryo();     kryo.register(SomeClass.class, new SomeSerializer());     kryo.register(AnotherClass.class, new AnotherSerializer()); If a class is not registered or no serializer is specified, a serializer is chosen automatically from a list of ""default serializers"" that maps a class to a serializer. The following classes have a default serializer set by default: boolean Boolean byte Byte char Character short Short int Integer long Long float Float double Double byte[] String BigInteger BigDecimal Collection Date Collections.emptyList Collections.singleton Map StringBuilder TreeMap Collections.emptyMap Collections.emptySet KryoSerializable StringBuffer Class Collections.singletonList Collections.singletonMap Currency Calendar TimeZone Enum EnumSet Additional default serializers can be added:     Kryo kryo = new Kryo();     kryo.addDefaultSerializer(SomeClass.class, SomeSerializer.class);     // ...     Output output = ...     SomeClass someObject = ...     kryo.writeObject(output, someObject); A class can also use the DefaultSerializer annotation:     @DefaultSerializer(SomeClassSerializer.class)     public class SomeClass {        // ...     } If no default serializers match a class, then by default FieldSerializer is used. This can also be changed: Kryo kryo = new Kryo(); kryo.setDefaultSerializer(AnotherGenericSerializer.class);  Some serializers allow extra information to be provided so that the number of bytes output can be reduced:     Kryo kryo = new Kryo();     FieldSerializer someClassSerializer = new FieldSerializer(kryo, SomeClass.class);     CollectionSerializer listSerializer = new CollectionSerializer();     listSerializer.setElementClass(String.class, kryo.getSerializer(String.class));     listSerializer.setElementsCanBeNull(false);     someClassSerializer.getField(""list"").setClass(LinkedList.class, listSerializer);     kryo.register(SomeClass.class, someClassSerializer);     // ...     SomeClass someObject = ...     someObject.list = new LinkedList();     someObject.list.add(""thishitis"");     someObject.list.add(""bananas"");     kryo.writeObject(output, someObject); In this example, FieldSerializer will be used for SomeClass. FieldSerializer is configured so the ""list"" field will always be a LinkedList and will use the specified CollectionSerializer. The CollectionSerializer is configured so each element will be a String and none of the elements will be null. This allows the serializer to be more efficient. In this case, 2 to 3 bytes are saved per element in the list. FieldSerializer By default, most classes will end up using FieldSerializer. It essentially does what hand written serialization would, but does it automatically. FieldSerializer does direct assignment to the object's fields. If the fields are public, protected, or default access (package private) and not marked as final, bytecode generation is used for maximum speed (see ReflectASM). For private fields, setAccessible and cached reflection is used, which is still quite fast. Other general purpose serializes are provided, such as BeanSerializer, TaggedFieldSerializer, CompatibleFieldSerializer, and VersionFieldSerializer. Additional serializers are available in a separate project on github, kryo-serializers. KryoSerializable While FieldSerializer is ideal for most classes, sometimes it is convenient for a class to do its own serialization. This can be done by implementing KryoSerializable interface (similar to the java.io.Externalizable interface in the JDK).     public class SomeClass implements KryoSerializable {        // ...         public void write (Kryo kryo, Output output) {           // ...        }         public void read (Kryo kryo, Input input) {           // ...        }     } Using standard Java Serialization While very rare, some classes cannot be serialized by Kryo. In such situations it is possible to use a fallback solution provided by Kryo's JavaSerializer and use the standard Java Serialization instead. This approach would be as slow as usual Java serialization, but would make your class serialize as long as Java serialization is able to serialize it. Of course, your classs should implement the Serializable or Externalizable interface as it is required by usual Java serialization. If your class impements Java's Serializable interface, then you may want to use Kryo's dedicated JavaSerializer serializer for it:     kryo.register(SomeClass.class, new JavaSerializer()); If your class impements Java's Externalizable interface, then you may want to use Kryo's dedicated ExternalizableSerializer serializer for it:     kryo.register(SomeClass.class, new ExternalizableSerializer()); Class fields annotations Typically, when FieldSerializer is used it is able to automatically guess which serializer should be used for each field of a class. But in certain situations you may want to change a default behavior and customize the way how this field is serialized. Kryo provides a set of annotations that can be used exactly for this purpose. @Bind can be used for any field, @CollectionBind for fields whose type is a collection and @MapBind for fields whose type is a map:     public class SomeClass {        // Use a StringSerializer for this field        @Bind(StringSerializer.class)         Object stringField;         // Use a MapSerializer for this field. Keys should be serialized        // using a StringSerializer, whereas values should be serialized        // using IntArraySerializer        @BindMap(                 valueSerializer = IntArraySerializer.class,                  keySerializer = StringSerializer.class,                  valueClass = int[].class,                  keyClass = String.class,                  keysCanBeNull = false)         Map map;         // Use a CollectionSerializer for this field. Elements should be serialized        // using LongArraySerializer        @BindCollection(                 elementSerializer = LongArraySerializer.class,                 elementClass = long[].class,                  elementsCanBeNull = false)         Collection collection;         // ...     } Reading and writing Kryo has three sets of methods for reading and writing objects. If the concrete class of the object is not known and the object could be null:     kryo.writeClassAndObject(output, object);     // ...     Object object = kryo.readClassAndObject(input);     if (object instanceof SomeClass) {        // ...     } If the class is known and the object could be null:     kryo.writeObjectOrNull(output, someObject);     // ...     SomeClass someObject = kryo.readObjectOrNull(input, SomeClass.class); If the class is known and the object cannot be null:     kryo.writeObject(output, someObject);     // ...     SomeClass someObject = kryo.readObject(input, SomeClass.class); References By default, each appearance of an object in the graph after the first is stored as an integer ordinal. This allows multiple references to the same object and cyclic graphs to be serialized. This has a small amount of overhead and can be disabled to save space if it is not needed:     Kryo kryo = new Kryo();     kryo.setReferences(false);     // ... When writing serializers that use Kryo for nested objects, kryo.reference() must be called in read(). See Serializers for more information. Object creation Serializers for a specific type use Java code to create a new instance of that type. Serializers such as FieldSerializer are generic and must handle creating a new instance of any class. By default, if a class has a zero argument constructor then it is invoked via ReflectASM or reflection, otherwise an exception is thrown. If the zero argument constructor is private, an attempt is made to access it via reflection using setAccessible. If this is acceptable, a private zero argument constructor is a good way to allow Kryo to create instances of a class without affecting the public API. When ReflectASM or reflection cannot be used, Kryo can be configured to use an InstantiatorStrategy to handle creating instances of a class. Objenesis provides StdInstantiatorStrategy which uses JVM specific APIs to create an instance of a class without calling any constructor at all. While this works on many JVMs, a zero argument is generally more portable.     kryo.setInstantiatorStrategy(new StdInstantiatorStrategy()); Note that classes must be designed to be created in this way. If a class expects its constructor to be called, it may be in an uninitialized state when created through this mechanism. In many situations, you may want to have a strategy, where Kryo first tries to find and use a no-arg constructor and if it fails to do so, it should try to use StdInstantiatorStrategy as a fallback, because this one does not invoke any constructor at all. The configuration for this behavior could be expressed like this: kryo.setInstantiatorStrategy(new DefaultInstantiatorStrategy(new StdInstantiatorStrategy())); However, the default behavior is to require a no-arg constructor. Objenesis can also create new objects using Java's built-in serialization mechanism. Using this, the class must implement java.io.Serializable and the first zero argument constructor in a super class is invoked.     kryo.setInstantiatorStrategy(new SerializingInstantiatorStrategy()); You may also write your own InstantiatorStrategy. To customize only how a specific type is created, an ObjectInstantiator can be set. This will override ReflectASM, reflection, and the InstantiatorStrategy.     Registration registration = kryo.register(SomeClass.class);     registration.setObjectInstantiator(...); Alternatively, some serializers provide methods that can be overridden to customize object creation.     kryo.register(SomeClass.class, new FieldSerializer(kryo, SomeClass.class) {        public Object create (Kryo kryo, Input input, Class type) {           return new SomeClass(""some constructor arguments"", 1234);        }     }); Copying/cloning A serialization library needs special knowledge on how to create new instances, get and set values, navigate object graphs, etc. This is nearly everything needed to support copying objects, so it makes sense for Kryo to support automatically making deep and shallow copies of objects. Note Kryo's copying does not serialize to bytes and back, it uses direct assignment.     Kryo kryo = new Kryo();     SomeClass someObject = ...     SomeClass copy1 = kryo.copy(someObject);     SomeClass copy2 = kryo.copyShallow(someObject); The Serializer class has a copy method that does the work. These methods can be ignored when implementing application specific serializers if the copying functionality will not be used. All serializers provided with Kryo support copying. Multiple references to the same object and circular references are handled by the framework automatically. Similar to the read() Serializer method, kryo.reference() must be called before Kryo can be used to copy child objects. See Serializers for more information. Similar to KryoSerializable, classes can implement KryoCopyable to do their own copying:     public class SomeClass implements KryoCopyable<SomeClass> {        // ...         public SomeClass copy (Kryo kryo) {           // Create new instance and copy values from this instance.        }     } Context Kryo has two context methods. getContext() returns a map for storing user data. Because the Kryo instance is available to all serializers, this data is readily available. getGraphContext() is similar, but is cleared after each object graph is serialized or deserialized. This makes it easy to manage per object graph state. Compression and encryption Kryo supports streams, so it is trivial to use compression or encryption on all of the serialized bytes:     OutputStream outputStream = new DeflaterOutputStream(new FileOutputStream(""file.bin""));     Output output = new Output(outputStream);     Kryo kryo = new Kryo();     kryo.writeObject(output, object);     output.close(); If needed, a serializer can be used to compress or encrypt the bytes for only a subset of the bytes for an object graph. For example, see DeflateSerializer or BlowfishSerializer. These serializers wrap another serializer and encode and decode the bytes. Chunked encoding Sometimes it is useful to write the length of some data, then the data. If the length of the data is not known ahead of time, all the data would need to be buffered to determine its length, then the length can be written, then the data. This buffering prevents streaming and potentially requires a very large buffer, which is not ideal. Chunked encoding solves this by using a small buffer. When the buffer is full, its length is written, then the data. This is one chunk of data. The buffer is cleared and this continues until there is no more data to write. A chunk with a length of zero denotes the end of the chunks. Kryo provides classes for easy chunked encoding. OutputChunked is used to write chunked data. It extends Output, so has all the convenient methods to write data. When the OutputChunked buffer is full, it flushes the chunk to the wrapped OutputStream. The endChunks() method is used to mark the end of a set of chunks.     OutputStream outputStream = new FileOutputStream(""file.bin"");     OutputChunked output = new OutputChunked(outputStream, 1024);     // Write data to output...     output.endChunks();     // Write more data to output...     output.endChunks();     // Write even more data to output...     output.close(); To read the chunked data, InputChunked is used. It extends Input, so has all the convenient methods to read data. When reading, InputChunked will appear to hit the end of the data when it reaches the end of a set of chunks. The nextChunks() method advances to the next set of chunks, even if not all the data has been read from the current set of chunks.     InputStream outputStream = new FileInputStream(""file.bin"");     InputChunked input = new InputChunked(inputStream, 1024);     // Read data from first set of chunks...     input.nextChunks();     // Read data from second set of chunks...     input.nextChunks();     // Read data from third set of chunks...     input.close(); Compatibility For some needs, especially long term storage of serialized bytes, it can be important how serialization handles changes to classes. This is known as forward (reading bytes serialized by newer classes) and backward (reading bytes serialized by older classes) compatibility. FieldSerializer is the most commonly used serializer. It is generic and can serialize most classes without any configuration. It is efficient and writes only the field data, without any extra information. It does not support adding, removing, or changing the type of fields without invalidating previously serialized bytes. This can be acceptable in many situations, such as when sending data over a network, but may not be a good choice for long term data storage because the Java classes cannot evolve. Because FieldSerializer attempts to read and write non-public fields by default, it is important to evaluate each class that will be serialized. When no serializer is specified, FieldSerializer is used by default. If necessary, an alternate generic serializer can be used: kryo.setDefaultSerializer(TaggedFieldSerializer.class); BeanSerializer is very similar to FieldSerializer, except it uses bean getter and setter methods rather than direct field access. This slightly slower, but may be safer because it uses the public API to configure the object. VersionFieldSerializer extends FieldSerializer and allows fields to have a @Since(int) annotation to indicate the version they were added. For a particular field, the value in @Since should never change once created. This is less flexible than FieldSerializer, which can handle most classes without needing annotations, but it provides backward compatibility. This means that new fields can be added, but removing, renaming or changing the type of any field will invalidate previous serialized bytes. VersionFieldSerializer has very little overhead (a single additional varint) compared to FieldSerializer. TaggedFieldSerializer extends FieldSerializer to only serialize fields that have a @Tag(int) annotation, providing backward compatibility so new fields can be added. And it also provides forward compatibility by setIgnoreUnknownTags(true), thus any unknown field tags will be ignored. TaggedFieldSerializer has two advantages over VersionFieldSerializer: 1) fields can be renamed and 2) fields marked with the @Deprecated annotation will be ignored when reading old bytes and won't be written to new bytes. Deprecation effectively removes the field from serialization, though the field and @Tag annotation must remain in the class. Deprecated fields can optionally be made private and/or renamed so they don't clutter the class (eg, ignored, ignored2). For these reasons, TaggedFieldSerializer generally provides more flexibility for classes to evolve. The downside is that it has a small amount of additional overhead compared to VersionFieldSerializer (an additional varint per field). CompatibleFieldSerializer extends FieldSerializer to provide both forward and backward compatibility, meaning fields can be added or removed without invalidating previously serialized bytes. Changing the type of a field is not supported. Like FieldSerializer, it can serialize most classes without needing annotations. The forward and backward compatibility comes at a cost: the first time the class is encountered in the serialized bytes, a simple schema is written containing the field name strings. Also, during serialization and deserialization buffers are allocated to perform chunked encoding. This is what enables CompatibleFieldSerializer to skip bytes for fields it does not know about. When Kryo is configured to use references, there can be a problem with CompatibleFieldSerializer if a field is removed. In case your class inheritance hierarchy contains same named fields, use the CachedFieldNameStrategy.EXTENDED strategy. class A {     String a; }  class B extends A {     String a; } ... // use `EXTENDED` name strategy, otherwise serialized object can't be deserialized correctly. Attention, `EXTENDED` strategy increases the serialized footprint. kryo.getFieldSerializerConfig().setCachedFieldNameStrategy(FieldSerializer.CachedFieldNameStrategy.EXTENDED); Additional serializers can easily be developed for forward and backward compatibility, such as a serializer that uses an external, hand written schema. Interoperability The Kryo serializers provided by default assume that Java will be used for deserialization, so they do not explicitly define the format that is written. Serializers could be written using a standardized format that is more easily read by another language, but this is not provided by default. Stack size The serializers Kryo provides use the call stack when serializing nested objects. Kryo does minimize stack calls, but for extremely deep object graphs, a stack overflow can occur. This is a common issue for most serialization libraries, including the built-in Java serialization. The stack size can be increased using -Xss, but note that this is for all threads. Large stack sizes in a JVM with many threads may use a large amount of memory. Threading Kryo is not thread safe. Each thread should have its own Kryo, Input, and Output instances. Also, the byte[] Input uses may be modified and then returned to its original state during deserialization, so the same byte[] ""should not be used concurrently in separate threads. Pooling Kryo instances Because the creation/initialization of Kryo instances is rather expensive, in a multithreaded scenario you should pool Kryo instances. A very simple solution is to bind Kryo instances to Threads using ThreadLocal, like this: // Setup ThreadLocal of Kryo instances private static final ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>() {     protected Kryo initialValue() {         Kryo kryo = new Kryo();         // configure kryo instance, customize settings         return kryo;     }; };  // Somewhere else, use Kryo Kryo k = kryos.get(); ... Alternatively you may want to use the KryoPool provided by kryo. The KryoPool allows to keep references to Kryo instances using SoftReferences, so that Kryo instances can be GC'ed when the JVM starts to run out of memory (of course you could use ThreadLocal with SoftReferences as well). Here's an example that shows how to use the KryoPool: import com.esotericsoftware.kryo.Kryo; import com.esotericsoftware.kryo.pool.*;  KryoFactory factory = new KryoFactory() {   public Kryo create () {     Kryo kryo = new Kryo();     // configure kryo instance, customize settings     return kryo;   } }; // Build pool with SoftReferences enabled (optional) KryoPool pool = new KryoPool.Builder(factory).softReferences().build(); Kryo kryo = pool.borrow(); // do s.th. with kryo here, and afterwards release it pool.release(kryo);  // or use a callback to work with kryo - no need to borrow/release, // that's done by `run`. String value = pool.run(new KryoCallback() {   public String execute(Kryo kryo) {     return kryo.readObject(input, String.class);   } }); Logging Kryo makes use of the low overhead, lightweight MinLog logging library. The logging level can be set by one of the following methods:     Log.ERROR();     Log.WARN();     Log.INFO();     Log.DEBUG();     Log.TRACE(); Kryo does no logging at INFO (the default) and above levels. DEBUG is convenient to use during development. TRACE is good to use when debugging a specific problem, but generally outputs too much information to leave on. MinLog supports a fixed logging level, which causes javac to remove logging statements below that level at compile time. In the Kryo distribution ZIP, the ""debug"" JARs have logging enabled. The ""production"" JARs use a fixed logging level of NONE, which means all logging code has been removed. Scala See the following projects which provide serializers for Scala classes: Twitter's Chill (Kryo serializers for Scala) akka-kryo-serialization (Kryo serializers for Scala and Akka) Twitter's Scalding (Scala API for Cascading) Kryo Serializers (Additional serializers for Java) Clojure Carbonite (Kryo serializers for Clojure) Objective-C See the following project which is an Objective-C port of Kryo: kryococoa Benchmarks Kryo can be compared to many other serialization libraries in the JVM Serializers project. It is difficult to thoroughly compare serialization libraries using a benchmark. They often have different goals and may excel at solving completely different problems. To understand these benchmarks, the code being run and data being serialized should be analyzed and contrasted with your specific needs. Some serializers are highly optimized and use pages of code, others use only a few lines. This is good to show what is possible, but may not be practical for many situations. ""kryo"" is typical Kryo usage, classes are registered and serialization is done automatically. ""kryo-opt"" shows how serializers can be configured to reduce the size for the specific data being serialized, but serialization is still done automatically. ""kryo-manual"" shows how hand written serialization code can be used to optimize for both size and speed while still leveraging Kryo for most of the work. Projects using Kryo There are a number of projects using Kryo. A few are listed below. Please post a message to the mailing list if you'd like your project included here. KryoNet (NIO networking) Twitter's Scalding (Scala API for Cascading) Twitter's Chill (Kryo serializers for Scala) Apache Hive (query plan serialization) Apache Spark (shuffled/cached data serialization) DataNucleus (JDO/JPA persistence framework) CloudPelican Yahoo's S4 (distributed stream computing) Storm (distributed realtime computation system, in turn used by many others) Cascalog (Clojure/Java data processing and querying details) memcached-session-manager (Tomcat high-availability sessions) Mobility-RPC (RPC enabling distributed applications) akka-kryo-serialization (Kryo serializers for Akka) Groupon Jive DestroyAllHumans (controls a robot!) kryo-serializers (additional serializers) Contact / Mailing list You can use the kryo mailing list for questions/discussions/support. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/EsotericSoftware/kryo"	"Fast and efficient object graph serialization framework."	"true"
"Serialization"	"MessagePack"	"https://github.com/msgpack/msgpack-java"	"Efficient binary serialization format."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"612"	"76"	"174"	"GitHub - msgpack/msgpack-java: MessagePack serializer implementation for Java / msgpack.org[Java] Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 76 Star 612 Fork 174 msgpack/msgpack-java Code Issues 21 Pull requests 3 Wiki Pulse Graphs MessagePack serializer implementation for Java / msgpack.org[Java] http://msgpack.org/ 1,362 commits 43 branches 38 releases 28 contributors Java 81.1% Scala 15.4% Shell 3.5% Java Scala Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 0.7.x add-buffer-test bin_and_str_support buffer-packer-flush bulk-skip concept-of-empty-to-array-buffer-input config-method-chain configurable-io-buffer-size develop extension-is-not-raw fix-config-copy fix-to-json fix_prepare_number_buffer gh-pages immutable-config map-builder-preserves-order marenzo-develop master missing-as-value new-map-opt protected-constructor remove_msgpack_value_from_jackson test-str8-disable use-replace-mode-in-packer v06 v07-develop v07-fix-is-fixed-map v07-improve-jackson-benchmark-in-java v07-old v07-optimized-unpacker-buffer v07-remove-value-from-parser v07-value-draft v07-value-impl v07-value-sf v07-value v07-value2 v07 v08-buffer-api-fix-msgformat v08-buffer-api v08-buffer-opt-output v08-buffer-opt v08-remove-value-from-parser value-factory-copy Nothing to show msgpack-0.6.12 msgpack-0.6.11 msgpack-0.6.10 msgpack-0.6.9 msgpack-0.6.8 msgpack-0.6.7 msgpack-0.6.6 msgpack-0.6.5 msgpack-0.6.4 msgpack-0.6.3 msgpack-0.6.2 msgpack-0.6.1 msgpack-0.6.0 0.8.7 0.8.6 0.8.5 0.8.4 0.8.3 0.8.2 0.8.1 0.8.0 0.7.1 0.7.0 0.7.0-p9 0.7.0-p8 0.7.0-p7 0.7.0-p6 0.7.0-p5 0.7.0-p4 0.7.0-p3 0.7.0-p2 0.7.0-p1 0.7.0-M6 0.7.0-M5 0.7.0-M4 0.7.0-M3 0.7.0-M2 0.7.0-M1 Nothing to show New pull request Latest commit c9fd454 Jul 9, 2016 komamitsu committed on GitHub Merge pull request #373 from marenzo/develop … Ignoring unknown properties on de-serializing process Permalink Failed to load latest commit information. .idea/copyright Add copyright setting for IntelliJ Jun 23, 2015 msgpack-core/src Adding bulk skip Jun 20, 2016 msgpack-jackson ignoring unknown properties on de-serializing process with JsonArrayF… Jul 5, 2016 project Add Osgi settings Mar 10, 2016 .gitignore Ignore .idea/copyright/msgpack.xml Jan 7, 2016 .travis.yml Enforce code style check Apr 8, 2016 LICENCE.sbt-extras.txt This commit includes the following changes: May 12, 2014 LICENSE.txt splits repository from msgpack/msgpack.git Jun 29, 2011 NOTICE This commit includes the following changes: May 12, 2014 README.md Revise the introduction Apr 20, 2016 RELEASE_NOTES.md Add release notes for 0.8.7 Apr 27, 2016 build.sbt Remove import package statement Mar 29, 2016 msgpack.org.md Add QuickStart link. Sep 1, 2013 sbt fixed MessageUnpacker.utf8MultibyteCharacterSize Dec 22, 2015 sonatype.sbt Add universal buffer test instead of using jdk6 Jun 23, 2015 version.sbt Setting version to 0.8.8-SNAPSHOT Apr 27, 2016 README.md MessagePack for Java MessagePack is a binary serialization format. If you need a fast and compact alternative of JSON, MessagePack is your friend. For example, a small integer can be encoded in a single byte, and short strings only need a single byte prefix + the original byte array. MessagePack implementation is already available in various lanaguages (See also the list in http://msgpack.org) and works as a universal data format. Message Pack specification: https://github.com/msgpack/msgpack/blob/master/spec.md MessagePack v7 (or later) is a faster implementation of the previous version v06, and supports all of the message pack types, including extension format. Quick Start For Maven users: <dependency>    <groupId>org.msgpack</groupId>    <artifactId>msgpack-core</artifactId>    <version>(version)</version> </dependency>  For sbt users: libraryDependencies += ""org.msgpack"" % ""msgpack-core"" % ""(version)""  For gradle users: repositories {     mavenCentral() }  dependencies {     compile 'org.msgpack:msgpack-core:(version)' }  Usage examples msgpack-java supports serialization and deserialization of Java objects through jackson-databind. For details, see msgpack-jackson/README.md. The template-based serialization mechanism used in v06 is deprecated. Release Notes For MessagePack Developers msgpack-java uses sbt for building the projects. For the basic usage of sbt, see: Building Java projects with sbt Coding style msgpack-java uses the same coding style with Facebook Presto IntelliJ setting file Basic sbt commands Enter the sbt console: $ ./sbt  Here is a list of sbt commands for daily development: > ~compile                                 # Compile source codes > ~test:compile                            # Compile both source and test codes > ~test                                    # Run tests upon source code change > ~test-only *MessagePackTest              # Run tests in the specified class > ~test-only *MessagePackTest -- -n prim   # Run the test tagged as ""prim"" > project msgpack-core                     # Focus on a specific project > package                                  # Create a jar file in the target folder of each project > findbugs                                 # Produce findbugs report in target/findbugs > jacoco:cover                             # Report the code coverage of tests to target/jacoco folder > jcheckStyle                              # Run check style  Publishing > publishLocal            # Install to local .ivy2 repository > publishM2               # Install to local .m2 Maven repository > publish                 # Publishing a snapshot version to the Sonatype repository  > release                 # Run the release procedure (set a new version, run tests, upload artifacts, then deploy to Sonatype)  # If you need to perform the individual release steps manually, use the following commands: > publishSigned           # Publish GPG signed artifacts to the Sonatype repository > sonatypeRelease         # Publish to the Maven Central (It will be synched within less than 4 hours)  For publishing to Maven central, msgpack-java uses sbt-sonatype plugin. Set Sonatype account information (user name and password) in the global sbt settings. To protect your password, never include this file in your project. $HOME/.sbt/(sbt-version)/sonatype.sbt credentials += Credentials(""Sonatype Nexus Repository Manager"",         ""oss.sonatype.org"",         ""(Sonatype user name)"",         ""(Sonatype password)"")  Project Structure msgpack-core                 # Contains packer/unpacker implementation that never uses third-party libraries msgpack-jackson              # Contains jackson-dataformat-java implementation  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/msgpack/msgpack-java"	"Efficient binary serialization format."	"true"
"Server"	"Apache Tomcat"	"http://tomcat.apache.org/"	"Robust all-round server for Servlet and JSP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Tomcat® - Welcome! Apache Tomcat® Search Apache Tomcat Home Taglibs Maven Plugin Download Which version? Tomcat 9 Tomcat 8 Tomcat 7 Tomcat 6 Tomcat Connectors Tomcat Native Taglibs Archives Documentation Tomcat 9.0 Tomcat 8.5 Tomcat 8.0 Tomcat 7.0 Tomcat 6.0 Tomcat Connectors Tomcat Native Wiki Migration Guide Presentations Problems? Security Reports Find help FAQ Mailing Lists Bug Database IRC Get Involved Overview SVN Repositories Buildbot Reviewboard Tools Media Twitter YouTube Blog Misc Who We Are Heritage Apache Home Resources Contact Legal Sponsorship Thanks Content Apache Tomcat The Apache Tomcat® software is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies. The Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket specifications are developed under the Java Community Process. The Apache Tomcat software is developed in an open and participatory environment and released under the Apache License version 2. The Apache Tomcat project is intended to be a collaboration of the best-of-breed developers from around the world. We invite you to participate in this open development project. To learn more about getting involved, click here. Apache Tomcat software powers numerous large-scale, mission-critical web applications across a diverse range of industries and organizations. Some of these users and their stories are listed on the PoweredBy wiki page. Apache Tomcat, Tomcat, Apache, the Apache feather, and the Apache Tomcat project logo are trademarks of the Apache Software Foundation. 2016-07-12 Tomcat 8.5.4 Released The Apache Tomcat Project is proud to announce the release of version 8.5.4 of Apache Tomcat. Apache Tomcat 8.5.x is intended to replace 8.0.x and includes new features pulled forward from Tomcat 9.0.x. The minimum Java version and implemented specification versions remain unchanged. The notable changes compared to 8.5.3 include: Correct a regression in the embedded packaging Add the ability to control the degree of concurrency when processing HTTP/2 connections Update to Tomcat Native 1.2.8 Full details of these changes, and all the other changes, are available in the Tomcat 8.5 changelog. Download 2016-07-12 Tomcat 9.0.0.M9 (alpha) Released The Apache Tomcat Project is proud to announce the release of version 9.0.0.M9 (alpha) of Apache Tomcat. The is a milestone release of the 9.0.x branch and has been made to provide users with early access to the new features in Apache Tomcat 9.0.x so that they may provide feedback. The notable changes compared to 9.0.0.M8 include: Fix the embedded packaging Make it easier to inject custom keystores (for embedded users) Update tc-native to 1.2.8 Add support for wildcard host names and aliases Full details of these changes, and all the other changes, are available in the Tomcat 9 changelog. Download 2016-07-02 Tomcat Native 1.2.8 Released The Apache Tomcat Project is proud to announce the release of version 1.2.8 of Tomcat Native. The notable changes since 1.2.7 include: Improved performance with concurrent loads Correctly enable and disable OCSP in the binaries for Windows Fix a bug in the handling of EAGAIN during non-blocking I/O Note that, unless a regression is discovered in 1.2.x, users should now be using 1.2.x in preference to 1.1.x. Download | ChangeLog for 1.2.8 2016-06-20 Tomcat 7.0.70 Released The Apache Tomcat Project is proud to announce the release of version 7.0.70 of Apache Tomcat. This release contains a number of bug fixes and improvements compared to version 7.0.69. The notable changes since 7.0.69 include: Update the packaged version of the Tomcat Native Library to 1.2.7 to pick up the Windows binaries that are based on OpenSSL 1.0.2h and APR 1.5.2. Remove native code (Windows Service Wrapper, APR/native connector) support for Windows Itanium. Full details of these changes, and all the other changes, are available in the Tomcat 7 changelog. Download | ChangeLog for 7.0.70 2016-06-13 Tomcat 8.0.36 Released The Apache Tomcat Project is proud to announce the release of version 8.0.36 of Apache Tomcat. Apache Tomcat 8.0.36 includes fixes for issues identified in 8.0.35 as well as other enhancements and changes. The notable changes since 8.0.35 include: Ensure an error will not be thrown during deployment when scanning jar files with no or invalid MANIFEST.MF files. Improvements to memory leak detection and prevention. Full details of these changes, and all the other changes, are available in the Tomcat 8 changelog. Download 2016-05-08 Tomcat Native 1.2.7 Released The Apache Tomcat Project is proud to announce the release of version 1.2.7 of Tomcat Native. The notable changes since 1.2.6 include: Windows binaries built with APR 1.5.2 and OpenSSL 1.0.2h. Note that, unless a regression is discovered in 1.2.x, users should now be using 1.2.x in preference to 1.1.x. Download | ChangeLog for 1.2.7 2016-02-11 Tomcat 6.0.45 Released The Apache Tomcat Project is proud to announce the release of version 6.0.45 of Apache Tomcat. This release includes a number of security and bug fixes over Apache Tomcat 6.0.44. The notable changes include: Update to Tomcat Native Library version 1.1.34. Note: End of life date for Apache Tomcat 6.0.x is announced. Read more... Download | ChangeLog for 6.0.45 2015-12-15 Tomcat Native 1.1.34 Released The Apache Tomcat Project is proud to announce the release of version 1.1.34 of Tomcat Native. The notable changes since 1.1.33 include: Unconditionally disable export Ciphers Improve ephemeral key handling for DH and ECDH Various fixes to build with newer OpenSSL versions Note that, unless a regression is discovered in 1.2.x, users should now be using 1.2.x in preference to 1.1.x. Download | ChangeLog for 1.1.34 2015-08-11 Tomcat Connectors 1.2.41 Released The Apache Tomcat Project is proud to announce the release of version 1.2.41 of Apache Tomcat Connectors. This version fixes one security issue (CVE-2014-8111) and a number of bugs found in previous releases. Download | ChangeLog for 1.2.41 2015-03-17 Apache Standard Taglib 1.2.5 Released The Apache Tomcat Project is proud to announce the release of version 1.2.5 of the Standard Taglib. This tag library provides Apache's implementation of the JSTL 1.2 specification. Version 1.2.5 is a minor bug fix release reverting a change made in 1.2.1 where <c:import> modified the HTTP method during POST operations, and fixing an issues that resulted in an AccessControlException during startup unless permission was granted to read the accessExternalEntity property. Please see the Taglibs section for more details. Download | Changes 2013-11-11 Tomcat Maven Plugin 2.2 Released The Apache Tomcat team is pleased to announce the release of Tomcat Maven Plugin 2.2. Changelog available here. The Apache Tomcat Maven Plugin provides goals to manipulate WAR projects within the Apache Tomcat servlet container. The binaries are available from Maven repositories. You should specify the version in your project's plugin configuration:  <plugin>   <groupId>org.apache.tomcat.maven</groupId>   <artifactId>tomcat7-maven-plugin</artifactId>   <version>2.2</version> </plugin>  or  <plugin>   <groupId>org.apache.tomcat.maven</groupId>   <artifactId>tomcat6-maven-plugin</artifactId>   <version>2.2</version> </plugin>  Old news See former announcements. Copyright © 1999-2016, The Apache Software Foundation Apache Tomcat, Tomcat, Apache, the Apache feather, and the Apache Tomcat project logo are trademarks of the Apache Software Foundation."	"null"	"null"	"Robust all-round server for Servlet and JSP."	"true"
"Server"	"Apache TomEE"	"http://tomee.apache.org/"	"Tomcat plus Java EE."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache TomEE & OpenEJB Apache TomEE Apache Apache Home Contact Legal Sponsorship Thanks Security Home Downloads Documentation Examples Support Contribute Security RebelLabs released an annual study with awards to recognize Geeky Excellence for 2014. Tomcat and TomEE were named as one of the 10 Geek Choice Awards winner. For a complete list of winners, check out the report ""10 Kick-Ass Technologies Modern Developers Love"". Read the Report Apache TomEE, pronounced ""Tommy"", is an all-Apache Java EE 6 Web Profile certified application server extends Apache Tomcat. Apache TomEE is assembled from a vanilla Apache Tomcat zip file. We start with Apache Tomcat, add our jars and zip up the rest. The result is Tomcat plus EE features - TomEE. Download Apache TomEE Now »  and get started today! Please note that Apache TomEE releases 1.7.4 and 7.0.1 fixes a vulnerability issue which affects TomEE 7.0.0, please take a look on Security Page for more details about that and upgrade if you are concerned. Please note that Apache TomEE releases 1.7.4 and 7.0.0-M3/7.0.0 fix a vulnerability issue, please take a look on Security Page for more details about that and upgrade if you are concerned. Apache TomEE 7.0.1 is now available! Click here for more information and download links to this release featuring many EE7 capabalities Click here to see the 7.0.1 Release Notes More information about our versions on TomEE download page. TomEE+ Apache TomEE Plus has all the features of TomEE with the addition of JAX-RS (RESTfull Services), JAX-WS (Web Services), JMS (Java Message Service) and JCA (the Java Connector Architecture). The additional functionality is delivered via Apache CXF, Apache ActiveMQ and the Geronimo Connector library View details » OpenEJB Apache OpenEJB is a standalone EJB 3.1 container. It can also be used for adding EJB 3.1 capabilities to Tomcat. View details » Examples See the extensive list of examples being developed for Java EE 6. All are functional and tested before publishing. Some are documented. These also stream from the continuous integration system. View details »   Apache TomEE 1.7.4 March 2016 Web Profile Apache TomEE Web Profile delivers Servlets, JSP, JSF, JTA, JPA, CDI, Bean Validation and EJB Lite Comparison » JAX-RS Apache TomEE JAX-RS (RESTfull Services) delivers the Web Profile plus JAX-RS (RESTfull Services) Comparison » Plus Apache TomEE Plus delivers all that is in the Web Profile and JAX-RS (RESTfull Services), plus EJB Full, Java EE Connector Architecture, JMS (Java Message Service) and JAX-WS (Web Services). Comparison » Plume Apache TomEE Plume delivers all that is in the Plus Profile, but includes Mojarra and EclipseLink support. Comparison » Java EE6 Certified apache-tomee-1.7.4-webprofile.tar.gz (asc - md5) apache-tomee-1.7.4-webprofile.zip (asc - md5) Java EE6 Certified apache-tomee-1.7.4-jaxrs.tar.gz (asc - md5) apache-tomee-1.7.4-jaxrs.zip (asc - md5) NOT Java EE6 Certified apache-tomee-1.7.4-plus.tar.gz (asc - md5) apache-tomee-1.7.4-plus.zip (asc - md5) NOT Java EE6 Certified apache-tomee-1.7.4-plume.tar.gz (asc - md5) apache-tomee-1.7.4-plume.zip (asc - md5) x Thank you for contributing to the documentation! Any help with the documentation is greatly appreciated. All edits are reviewed before going live, so feel free to do much more than fix typos or links. If you see a page that could benefit from an entire rewrite, we'd be thrilled to review it. Don't be surprised if we like it so much we ask you for help with other pages :) NOTICE: unless indicated otherwise on the pages in question, all editable content available from apache.org is presumed to be licensed under the Apache License (AL) version 2.0 and hence all submissions to apache.org treated as formal Contributions under the license terms. Do you have an Apache ID? Yes No Copyright © 1999-2016 The Apache Software Foundation, Licensed under the Apache License, Version 2.0. Apache TomEE, TomEE, Apache, the Apache feather logo, and the Apache TomEE project logo are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners."	"null"	"null"	"Tomcat plus Java EE."	"true"
"Server"	"Jetty"	"http://www.eclipse.org/jetty/"	"Lightweight, small server, often embedded in projects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"907"	"159"	"652"	"GitHub - eclipse/jetty.project: Eclipse Jetty - Web Container & Clients - supports HTTP/2, HTTP/1.1, HTTP/1.0, websocket, servlets, and more Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 159 Star 907 Fork 652 eclipse/jetty.project Code Issues 240 Pull requests 10 Pulse Graphs Eclipse Jetty - Web Container & Clients - supports HTTP/2, HTTP/1.1, HTTP/1.0, websocket, servlets, and more https://www.eclipse.org/jetty 12,145 commits 28 branches 248 releases 36 contributors Java 98.3% HTML 0.5% JavaScript 0.5% AMPL 0.3% XSLT 0.2% Shell 0.1% CSS 0.1% Java HTML JavaScript AMPL XSLT Shell CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: jetty-9.3.x Switch branches/tags Branches Tags apache-jsp-osgi async_onerror bugs/jetty-8-backports bugs/jetty-8-resourcefix bugs/9.2.x-556-backport bugs/207 bugs/654 bugs/723 execution_strategy_low_resources feature/javax.websocket-1.1 feature/jetty-9.2-alt-servlet-mappings feature/wsclient-httpclient gcloud-session-manager infinispan-session-mgr jetty-7 jetty-8-jdk8 jetty-8 jetty-9.1.x jetty-9.2.x jetty-9.3.x-instrumented-HttpChannelState jetty-9.3.x jetty-9.4.x jetty-master-configuration master pr/576 release-9.3.10 revert-460-master revert-606-jetty-9.3.x Nothing to show npn-api-1.1.0.v20120525 npn-api-1.0.0.v20120402 jetty-project-8.0.0.M1 jetty-project-7.6.17.v20150415 jetty-project-7.4.2.vTEST jetty-project-7.0.2.v20100331 jetty-project-7.0.2.RC0 jetty-project-7.0.0.RC3 jetty-project-7.0.0.M1 jetty-9.4.0.M0 jetty-9.3.11.M0 jetty-9.3.10.v20160621 jetty-9.3.10.M0 jetty-9.3.9.v20160517 jetty-9.3.9.M1 jetty-9.3.9.M0 jetty-9.3.8.v20160314 jetty-9.3.8.v20160311 jetty-9.3.8.RC0 jetty-9.3.7.v20160115 jetty-9.3.7.RC1 jetty-9.3.7.RC0 jetty-9.3.6.v20151106 jetty-9.3.5.v20151012 jetty-9.3.4.v20151007 jetty-9.3.4.RC1 jetty-9.3.4.RC0 jetty-9.3.3.v20150827 jetty-9.3.2.v20150730 jetty-9.3.1.v20150714 jetty-9.3.0.v20150612 jetty-9.3.0.RC1 jetty-9.3.0.RC0 jetty-9.3.0.M2 jetty-9.3.0.M1 jetty-9.3.0.M0 jetty-9.2.17.v20160517 jetty-9.2.16.v20160414 jetty-9.2.15.v20160210 jetty-9.2.14.v20151106 jetty-9.2.13.v20150730 jetty-9.2.12.v20150709 jetty-9.2.12.M0 jetty-9.2.11.v20150529 jetty-9.2.11.M0 jetty-9.2.10.v20150310 jetty-9.2.9.v20150224 jetty-9.2.8.v20150217 jetty-9.2.7.v20150116 jetty-9.2.6.v20141205 jetty-9.2.6.v20141203 jetty-9.2.5.v20141112 jetty-9.2.4.v20141103 jetty-9.2.3.v20140905 jetty-9.2.2.v20140723 jetty-9.2.1.v20140609 jetty-9.2.0.v20140526 jetty-9.2.0.v20140523 jetty-9.2.0.RC0 jetty-9.2.0.M1 jetty-9.2.0.M0 jetty-9.1.6.v20160112 jetty-9.1.5.v20140505 jetty-9.1.4.v20140401 jetty-9.1.3.v20140225 jetty-9.1.2.v20140210 jetty-9.1.1.v20140108 jetty-9.1.0.v20131115 jetty-9.1.0.RC2 jetty-9.1.0.RC1 jetty-9.1.0.RC0 jetty-9.1.0.M0 jetty-9.0.7.v20131107 jetty-9.0.7.v20131031 jetty-9.0.6.v20130930 jetty-9.0.6.v20130919 jetty-9.0.5.v20130815 jetty-9.0.5.v20130813 jetty-9.0.4.v20130625 jetty-9.0.4.v20130621 jetty-9.0.3.v20130506 jetty-9.0.2.v20140415 jetty-9.0.2.v20130417 jetty-9.0.1.v20130408 jetty-9.0.0.v20130308 jetty-9.0.0.RC3 jetty-9.0.0.RC2 jetty-9.0.0.RC1 jetty-9.0.0.RC0 jetty-9.0.0.M5 jetty-9.0.0.M4 jetty-9.0.0.M3 jetty-9.0.0.M2 jetty-9.0.0.M1 jetty-9.0.0.M0 jetty-9.0.x jetty-8.1.19.v20160209 jetty-8.1.18.v20150929 jetty-8.1.17.v20150415 jetty-8.1.16.v20140903 Nothing to show New pull request Latest commit 0433a8c Jul 15, 2016 sbordet Issue #730 - ""Slow"" client causes IllegalStateException. … Fixed by allowing state ASYNC to call onWritePossible(). Permalink Failed to load latest commit information. LICENSE-CONTRIBUTOR add cla-tbecker.txt Jul 17, 2012 advisories Adding reference to patched versions of jetty-http jars Feb 25, 2015 aggregates [maven-release-plugin] prepare for next development iteration Jun 22, 2016 apache-jsp [maven-release-plugin] prepare for next development iteration Jun 22, 2016 apache-jstl [maven-release-plugin] prepare for next development iteration Jun 22, 2016 examples Updates to Intro, Chapter 5 and ResourceHandler example for #687. Jul 7, 2016 jetty-alpn [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-annotations Issue #678 Jul 7, 2016 jetty-ant [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-cdi [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-client Added guards against NPE in case HttpField.getValue() returns null. Jul 15, 2016 jetty-continuation [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-deploy Fixes #668 - Introduce optional `jetty.deploy.defaultsDescriptorPath`… Jun 28, 2016 jetty-distribution Issue #663 Jun 24, 2016 jetty-documentation Merge pull request #728 from WalkerWatch/jetty-9.3.x Jul 14, 2016 jetty-fcgi [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-gcloud Issue #658 Jul 7, 2016 jetty-http-spi [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-http Added guards against NPE in case HttpField.getValue() returns null. Jul 15, 2016 jetty-http2 Added guards against NPE in case HttpField.getValue() returns null. Jul 15, 2016 jetty-infinispan [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-io Issue #696 Improve testing of LocalConnector Jul 8, 2016 jetty-jaas [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-jaspi [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-jmx [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-jndi [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-jspc-maven-plugin [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-maven-plugin Issue #690 Jul 6, 2016 jetty-monitor [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-nosql [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-osgi Issue #704 Jul 14, 2016 jetty-overlay-deployer Happy New Year 2016 Jan 4, 2016 jetty-plus [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-proxy [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-quickstart Issue #682 Jul 1, 2016 jetty-rewrite [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-runner [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-security [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-server Issue #730 - ""Slow"" client causes IllegalStateException. Jul 15, 2016 jetty-servlet Issue #730 - ""Slow"" client causes IllegalStateException. Jul 15, 2016 jetty-servlets Fixes #693 - QoSFilterTest failures are not capture by junit Jul 6, 2016 jetty-spring [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-start Issue #706 - Removing org.apache.jasper.compiler.disablejsr199 refere… Jul 12, 2016 jetty-util-ajax [maven-release-plugin] prepare for next development iteration Jun 22, 2016 jetty-util Fix #708 SslContextFactory: newSslServerSocket/newSslSocket are not c… Jul 14, 2016 jetty-webapp Fixes #673 match all classpath pattern Jun 29, 2016 jetty-websocket Fixes #643 - NPE in passing websocket client test. Jun 23, 2016 jetty-xml [maven-release-plugin] prepare for next development iteration Jun 22, 2016 logos Adding logos Jul 8, 2016 scripts Adding release-jetty.sh script (for those that want it) Jun 20, 2016 tests Issue #663 Jul 5, 2016 .gitattributes More fixes for Windows build Nov 4, 2013 .gitignore Adding <c:catch> JSTL test cases Jul 23, 2015 CONTRIBUTING.md Issue #367 Resolve remaining git.eclipse.org build references Feb 26, 2016 LICENSE-eplv10-aslv20.html 392237 renamed license file Oct 18, 2012 NOTICE.txt Happy New Year 2016 Jan 4, 2016 README.TXT testing git-hook May 19, 2016 README.md 459655 - Remove SPDY and NPN. Feb 11, 2015 VERSION.txt set for release Jun 22, 2016 header-template.txt standardize license header blocks Aug 16, 2012 pom.xml Fixing surefire random run definition Jul 6, 2016 README.md Project description Jetty is a lightweight highly scalable java based web server and servlet engine. Our goal is to support web protocols like HTTP, HTTP/2 and WebSocket in a high volume low latency way that provides maximum performance while retaining the ease of use and compatibility with years of servlet development. Jetty is a modern fully async web server that has a long history as a component oriented technology easily embedded into applications while still offering a solid traditional distribution for webapp deployment. https://projects.eclipse.org/projects/rt.jetty Documentation Project documentation is located on our Eclipse website. http://www.eclipse.org/jetty/documentation Professional Services Expert advice and production support are available through http://webtide.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/eclipse/jetty.project"	"Lightweight, small server, often embedded in projects."	"true"
"Server"	"WebSphere Liberty"	"https://developer.ibm.com/wasdev/"	"Lightweight, modular server developed by IBM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"WASdev | Enterprise Java developer community Skip to main content IBM developerWorks / Developer Centers Sign In | Register About Get Started Downloads Docs Source Code Get Help News & Events Search Develop and deploy with WebSphere Liberty   A fast, lightweight, modular Java application server free for developers.   Download July Beta Download Latest Stable Release Developing #WASLiberty apps in Eclipse and deploying them to Liberty in #Docker developer.ibm.com/wasdev/docs… #JavaEE Beta: WebSphere Liberty and tools (July 2016) developer.ibm.com/wasdev/blog… pic.twitter.com/1PAw4Mm9qw MicroProfile an open collaboration for Enterprise Java based Microservices developer.ibm.com/wasdev/blog… pic.twitter.com/NpXMhPF1nE That is Liberty's @notatibm 3rd from the left helping to launch microprofile.io twitter.com/tqvarnst/statu… This is cake. Very good cake. #WASLiberty #JavaEE developer.ibm.com/wasdev/ twitter.com/nic_j_woodward… News Ross Pavitt / June 30, 2016 Beta: WebSphere Liberty and tools (July 2016) The July Beta Liberty beta includes updates to the CDI feature, including Weld Probe Alasdair / June 27, 2016 MicroProfile an open collaboration for Enterprise Java based Microservices Today I learned why they have bright lights shining on the stage for Keynotes. It isn't (as I had assumed) to ensure that the people on stage can be seen. It is to blind the presenters so they can't see just how many people are watching them. Today I was on main stage during the DevNation keynote to launch a... Laura Cowen / June 24, 2016 WebSphere Liberty and tools 16.0.0.2 release A run-down of what's in the new release of Liberty (16.0.0.2). View All News Docs Mark Nuttall / July 13, 2016 Using continuous integration to run WebSphere Liberty applications in Amazon AWS Elastic Beanstalk This article demonstrates continuous integration between a GitHub project, and a Java web application running on WebSphere Liberty in a Docker container in Amazon's AWS Elastic Beanstalk environment. ErinHarris / July 6, 2016 Developing applications using WDT with Liberty in Docker How to develop a simple JDBC application using WebSphere Developer Tools (WDT) for Eclipse on a Liberty runtime in a Docker container. The JDBC application will be based on the Servlet JDBC Sample. tkulik / June 29, 2016 Changing a Liberty application to use dashDB instead DB2 You might be considering switching your Liberty applications to use dashDB instead of DB2 if, for example, you want to use the dashDB service in the cloud. I want to show how easy this transition is because dashDB is very compatible with DB2. View all Docs WAS Liberty A modern application server for hosting Java EE and OSGi applications during development, test, and production. Starts and stops quickly, typically in a few seconds. Requires little memory and disk space. Simple to configure with an XML file. Include only the capabilities required by your applications. Responds dynamically to application updates and server configuration changes. Built using IBM technologies and open source software packages from organizations such as Apache, Eclipse, and OW2. Learn more about Liberty Code Build Test Run Learn more about lifecycle Get in touch Ask on dWAnswers Ask on Stack Overflow Request a feature Brought to you by developers Cheryl_King Kavisuresh Adam_P Katherine Stanley @notatibm Alasdair Follow us on Twitter Google+ Page RSS Feed Contact us Report Abuse Terms of Use Third Party Notice IBM Privacy IBM"	"null"	"null"	"Lightweight, modular server developed by IBM."	"true"
"Server"	"WildFly"	"http://www.wildfly.org/"	"Formerly known as JBoss and developed by Red Hat with extensive Java EE support."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1643"	"191"	"1607"	"GitHub - wildfly/wildfly: WildFly Application Server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 191 Star 1,643 Fork 1,607 wildfly/wildfly Code Issues 1 Pull requests 94 Pulse Graphs WildFly Application Server http://wildfly.org 20,233 commits 10 branches 72 releases 259 contributors Java 99.2% XSLT 0.5% Shell 0.1% HTML 0.1% Batchfile 0.1% PowerShell 0.0% Java XSLT Shell HTML Batchfile PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 7.1-ignore 7.1 8.x-ignore 8.x 9.x-ignore 9.x master-ignore master revert-8145-WFLY-5356_Upgrade_Artemis_1.1.0.RC4 revert-8192-ra-failures Nothing to show web-jboss-metadata 10.0.0.Final 10.0.0.CR5 10.0.0.CR4 10.0.0.CR3 10.0.0.CR2 10.0.0.CR1 10.0.0.Beta2 10.0.0.Beta1 10.0.0.Alpha6 10.0.0.Alpha5 10.0.0.Alpha4 10.0.0.Alpha3 10.0.0.Alpha2 10.0.0.Alpha1 9.0.2.Final 9.0.1.Final 9.0.0.Final 9.0.0.CR2 9.0.0.CR1 9.0.0.Beta2 9.0.0.Beta1 9.0.0.Alpha1 8.2.1.Final 8.2.0.Final 8.1.0.Final 8.1.0.CR5 8.1.0.CR4 8.1.0.CR3 8.1.0.CR2 8.1.0.CR1 8.0.0.Final 8.0.0.CR1 8.0.0.Beta1 8.0.0.Alpha4 8.0.0.Alpha3 8.0.0.Alpha2 8.0.0.Alpha1 7.2.0.Final 7.2.0.Final-testsuite-fix 7.2.0.Final-prerelease1 7.1.3.Final 7.1.3.CR1 7.1.3.Beta1 7.1.2.Final 7.1.2-prerelease 7.1.1.Final 7.1.0.Final 7.1.0.Final-prerelease2 7.1.0.Final-prerelease 7.1.0.CR1 7.1.0.CR1b 7.1.0.Beta1 7.1.0.Beta1b 7.1.0.Beta1b-prerelease 7.1.0.Alpha1 7.0.2.SP1-prerelease 7.0.2.Final 7.0.2.Final-prerelease 7.0.1.Final 7.0.0.Final 7.0.0.Final-prerelease3 7.0.0.Final-prerelease2 7.0.0.Final-prerelease 7.0.0.CR1 7.0.0.Beta3 7.0.0.Beta2 7.0.0.Beta2-prerelease 7.0.0.Beta1 7.0.0.Beta1-prerelease 7.0.0.Alpha1 7.0.0.Alpha1-final Nothing to show New pull request Latest commit 3abded7 Jul 13, 2016 bstansberry committed on GitHub Merge pull request #9032 from aogburn/01660243 … [WFLY-6817] JASPICSecureResponseHandler.handleRequest throws NullPointerException when redirecting for CONFIDENTIAL transport guarantee Permalink Failed to load latest commit information. appclient WFCORE-1347 - fix properties attribute to allow null as it is expecit… Mar 3, 2016 batch [WFLY-6793] Load the batch configuration service on-demand so that th… Jul 5, 2016 bean-validation WFLY-3854 - baseline jdk9 fixes Jun 17, 2016 build Next is 10.1.0.Final Jan 29, 2016 client [WFLY-6450] Fix netty and jgroups dependencies in wildfly-jms-client-bom Apr 1, 2016 clustering Merge pull request #9035 from pferraro/jgroups Jul 12, 2016 connector [WFLY-6790] - Typo in datasource and resource adapters subsystem conf… Jun 29, 2016 dist Next is 10.1.0.Final Jan 30, 2016 ee [WFLY-6402] Propagate startup execution privilege to asynchronous met… Jun 30, 2016 ejb3 [WFLY-6350] Drop comment from EJB subsystem template as it produces a… Jul 11, 2016 feature-pack Merge pull request #8921 from jmesnil/WFLY-3471_JMSContext_injection Jul 7, 2016 iiop-openjdk [WFLY-6350] IIOP subsystem template should follow xsd ordering Jul 11, 2016 jaxrs Next is 10.1.0.Final Jan 30, 2016 jdr [WFLY-5464] JDR report contains reference to AS7 Jul 8, 2016 jpa Don't use deprecated hibernate scanner anymore Jul 11, 2016 jsf Next is 10.1.0.Final Jan 30, 2016 jsr77 Next is 10.1.0.Final Jan 30, 2016 legacy Prepare for new legacy test controllers Jul 4, 2016 mail Next is 10.1.0.Final Jan 30, 2016 messaging-activemq [WFLY-6350] Messaging's legacy-connection-factory persistence should … Jul 12, 2016 mod_cluster WFLY-6680 :read-proxies-configuration and :read-proxies-info fail whe… Jun 10, 2016 naming Merge pull request #8882 from stuartwdouglas/WFLY-3239 Jun 23, 2016 picketlink Merge pull request #8877 from bstansberry/WFLY-6550 Jun 2, 2016 pojo Next is 10.1.0.Final Jan 30, 2016 rts [WFLY-6236] Remove RTS dependency on resteasy-jettison-provider Feb 17, 2016 sar WFLY-6566 SAR deployer uses injected bean's class to resolve method d… May 9, 2016 security-manager [WFLY-6550] Use fromString instead of create when the text may includ… Apr 22, 2016 security Merge pull request #8821 from wwasser/fix_wfly_6434 Jul 7, 2016 servlet-build Next is 10.1.0.Final Jan 30, 2016 servlet-dist Next is 10.1.0.Final Jan 30, 2016 servlet-feature-pack Merge pull request #8762 from ctomc/testsuite-speedup Jul 7, 2016 spec-api Next is 10.1.0.Final Jan 30, 2016 system-jmx Next is 10.1.0.Final Jan 30, 2016 testsuite Merge pull request #8921 from jmesnil/WFLY-3471_JMSContext_injection Jul 8, 2016 tools WFLY-4305: fix broken download-maven.sh script Mar 5, 2015 transactions WFLY-6257 Updated to allow the list of XAOrphanFilters to be overridd… May 16, 2016 undertow Merge pull request #9032 from aogburn/01660243 Jul 13, 2016 web-common Next is 10.1.0.Final Jan 30, 2016 webservices WFLY-3854 - baseline jdk9 fixes Jun 17, 2016 weld [WFLY-6405] Follow up with now allow null class loaders as keys. Thes… Jul 6, 2016 xts Next is 10.1.0.Final Jan 30, 2016 .gitattributes Enable text conversion Aug 17, 2010 .gitignore Merge pull request #7228 from wolfc/WFLY-4305-2 Sep 3, 2015 README.md [WFLY-6664] Clarify the differences between build/ and dist/ directories Jun 1, 2016 build.bat No test arg anymore Aug 22, 2014 build.sh Merge pull request #7228 from wolfc/WFLY-4305-2 Sep 3, 2015 integration-tests.bat change powershell call in integration-tests.bat too Aug 22, 2014 integration-tests.sh WFLY-6295 Wrong header comments on integration-tests.sh script Feb 27, 2016 pom.xml Merge pull request #9037 from asoldano/misc-rest-updates Jul 12, 2016 zanata.xml fix zanata configuration Mar 6, 2012 README.md WildFly Application Server http://wildfly.org Fast Startup Small Footprint Modular Design Unified Configuration and Management And of course Java EE! Building Ensure you have JDK 8 (or newer) installed java -version On *nix-like system use the prepared script ./build.sh On Windows use the corresponding batch script build.bat If you already have Maven 3.2.5 (or newer) installed you can use it directly mvn install Starting and Stopping WildFly Change to the bin directory after a successful build $ cd build/target/wildfly-[version]/bin Start the server in domain mode $ ./domain.sh Start the server in standalone mode $ ./standalone.sh To stop the server, press Ctrl + C, or use the admin console $ ./jboss-cli.sh --connect command=:shutdown More information: https://docs.jboss.org/author/display/WFLY10/Getting+Started+Guide Contributing https://developer.jboss.org/wiki/HackingOnWildFly Build vs. Dist directories After running mvn install, WildFly will be available in two distinct directories, build and dist. The build directory contains a build of WildFly that is based on Maven artifact resolution for module configuration The dist directory, on the other hand, contains a full distributable build of WildFly Using the build directory makes iterating with subsystem or module development easier since there is no need to rebuild the whole of WildFly or copy JAR files around on every change. The dist directory is better suited when a full build of WildFly is needed for development or test purposes. Running the Testsuite The testsuite module contains several submodules including the following: ""smoke"" -- core tests that should be run as part of every build of the AS. Failures here will fail the build. ""api"" -- tests of features that involve end user use of the public JBoss AS 8 API. Should be run with no failures before any major commits. ""cluster"" -- tests of the WildFly HA clustering features. Should be run with no failures before any major commits. ""domain"" -- tests of the domain management features. Should be run with no failures before any major commits. ""integration"" -- tests of a WildFly standalone server's internals. Should be run with no failures before any major commits. ""spec"" -- tests of features that only involve end user use of the Java EE 7 spec APIs. Should be run with no failures before any major commits. To run the basic testsuite including smoke tests from the root directory, run the build script ""./build.sh"" or ""build.bat"": For basic smoke tests, simply: ""./build.sh test"" To run all the tests $ ./build.sh install -DallTests Using Eclipse Install the latest version of eclipse Make sure Xmx in eclipse.ini is at least 1280M, and it's using Java 8 Launch eclipse and install the m2e plugin, make sure it uses your repo configs (get it from: http://www.eclipse.org/m2e/ or install ""Maven Integration for Eclipse"" from the Eclipse Marketplace) In eclipse preferences Java->Compiler->Errors/Warnings->Deprecated and restricted set forbidden reference to WARNING In eclipse preferences Java->Code Style, import the cleanup, templates, and formatter configs in ide-configs/eclipse in the wildfly-core repository. In eclipse preferences Java->Editor->Save Actions enable ""Additional Actions"", and deselect all actions except for ""Remove trailing whitespace"" Use import on the root pom, which will pull in all modules Wait (m2e takes a while on initial import) License GNU Lesser General Public License Version 2.1 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wildfly/wildfly"	"Formerly known as JBoss and developed by Red Hat with extensive Java EE support."	"true"
"Template Engine"	"Handlebars.java"	"http://jknack.github.io/handlebars.java/"	"Logic-less and semantic Mustache templates."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"676"	"58"	"213"	"GitHub - jknack/handlebars.java: Logic-less and semantic Mustache templates with Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 58 Star 676 Fork 213 jknack/handlebars.java Code Issues 23 Pull requests 5 Pulse Graphs Logic-less and semantic Mustache templates with Java http://jknack.github.io/handlebars.java 827 commits 2 branches 44 releases 38 contributors Java 75.9% JavaScript 22.1% Other 2.0% Java JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v4.0.5 v4.0.3 v4.0.0 v2.3.2 v2.3.1 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.0 v2.0.0 v1.3.2 v1.3.1 v1.3.0 v1.2.1 v1.2.0 v1.1.2 v1.1.1 v1.1.0 v1.0.0 v0.12.0 v0.11.0 v0.10.0 v0.9.0 v0.8.0 handlebars.java-0.7.0 handlebars.java-0.6.2 handlebars.java-0.6.1 handlebars.java-0.6.0 handlebars.java-0.5.5 handlebars.java-0.5.4 handlebars.java-0.5.3 handlebars.java-0.5.2 handlebars.java-0.5.1 handlebars.java-0.5.0 handlebars.java-0.4.2 handlebars.java-0.4.1 handlebars.java-0.4.0 handlebars.java-0.3.1 handlebars.java-0.3.0 handlebars.java-0.2.2 handlebars.java-0.2.1 handlebars.java-0.1.0 0.2.0 Nothing to show New pull request Latest commit df8f177 Jul 13, 2016 jknack committed on GitHub Merge pull request #522 from kilink/typesafe-template-methods … Support basic methods in TypeSafeTemplate proxy (toString, hashCode, equals) Permalink Failed to load latest commit information. handlebars-guava-cache prepare for next development cycle Mar 14, 2016 handlebars-helpers use Object instead of CharSequence May 22, 2016 handlebars-humanize use Object instead of CharSequence May 22, 2016 handlebars-jackson2 use Object instead of CharSequence May 22, 2016 handlebars-markdown use Object instead of CharSequence May 22, 2016 handlebars-maven-plugin-tests prepare for next development cycle Mar 15, 2016 handlebars-maven-plugin fix build/checkstyle May 22, 2016 handlebars-proto use Object instead of CharSequence May 22, 2016 handlebars-springmvc use Object instead of CharSequence May 22, 2016 handlebars Fix checkstyle issues Jul 13, 2016 integration-tests prepare for next development cycle Mar 15, 2016 src/etc add Eclipse formatter Jul 9, 2015 .gitignore v2.0.0 Nov 27, 2014 .gitmodules add a git submodule with mustache specs #112 Jan 4, 2013 .travis.yml require Java 7 fixes #426 Nov 1, 2015 LICENSE update license headers Nov 8, 2015 README.md Add reference to isXxx methods in *Using the ValueResolver* Apr 1, 2016 checkstyle.xml some minor performance improvements Jan 7, 2016 pom.xml question/invalid: Performance issues with Partials fix #507 Jul 10, 2016 README.md Handlebars.java Logic-less and semantic Mustache templates with Java Handlebars.java is a Java port of handlebars. Handlebars provides the power necessary to let you build semantic templates effectively with no frustration. Mustache templates are compatible with Handlebars, so you can take a Mustache template, import it into Handlebars, and start taking advantage of the extra Handlebars features. Performance Handlebars.java is a modern and full featured template engine, but also has a very good performance (Hbs): Benchmark source code is available at: https://github.com/mbosecke/template-benchmark Getting Started In general, the syntax of Handlebars templates is a superset of Mustache templates. For basic syntax, check out the Mustache manpage. The Handlebars.java blog is a good place for getting started too. Maven Stable version:   <dependency>     <groupId>com.github.jknack</groupId>     <artifactId>handlebars</artifactId>     <version>${handlebars-version}</version>   </dependency> Development version SNAPSHOT versions are NOT synchronized to Central. If you want to use a snapshot version you need to add the https://oss.sonatype.org/content/repositories/snapshots/ repository to your pom.xml. Hello Handlebars.java Handlebars handlebars = new Handlebars();  Template template = handlebars.compileInline(""Hello {{this}}!"");  System.out.println(template.apply(""Handlebars.java"")); Output: Hello Handlebars.java!  Loading templates Templates are loaded using the TemplateLoader class. Handlebars.java provides three implementations of a TemplateLoader: ClassPathTemplateLoader (default) FileTemplateLoader SpringTemplateLoader (see the handlebars-springmvc module) This example loads mytemplate.hbs from the root of the classpath: mytemplate.hbs: Hello {{this}}!  Handlebars handlebars = new Handlebars();  Template template = handlebars.compile(""mytemplate"");  System.out.println(template.apply(""Handlebars.java"")); Output: Hello Handlebars.java!  You can specify a different TemplateLoader by: TemplateLoader loader = ...; Handlebars handlebars = new Handlebars(loader); Templates prefix and suffix A TemplateLoader provides two important properties: prefix: useful for setting a default prefix where templates are stored. suffix: useful for setting a default suffix or file extension for your templates. Default is: .hbs Example: TemplateLoader loader = new ClassPathTemplateLoader(); loader.setPrefix(""/templates""); loader.setSuffix("".html""); Handlebars handlebars = new Handlebars(loader);  Template template = handlebars.compile(""mytemplate"");  System.out.println(template.apply(""Handlebars.java"")); Handlebars.java will resolve mytemplate to /templates/mytemplate.html and load it. The Handlebars.java Server The handlebars.java server is small application where you can write Mustache/Handlebars template and merge them with data. It is a useful tool for Web Designers. Download from Maven Central: Go here Under the Download section click on jar Maven: <dependency>   <groupId>com.github.jknack</groupId>   <artifactId>handlebars-proto</artifactId>   <version>${current-version}</version> </dependency> Usage: java -jar handlebars-proto-${current-version}.jar -dir myTemplates Example: myTemplates/home.hbs <ul>  {{#items}}  {{name}}  {{/items}} </ul>  myTemplates/home.json {   ""items"": [     {       ""name"": ""Handlebars.java rocks!""     }   ] } or if you prefer YAML myTemplates/home.yml: list:   - name: Handlebars.java rocks! Open a browser a type: http://localhost:6780/home.hbs  enjoy it! Additional options: -dir: set the template directory -prefix: set the template's prefix, default is / -suffix: set the template's suffix, default is .hbs -context: set the context's path, default is / -port: set port number, default is 6780 -content-type: set the content-type header, default is text/html Multiple data sources per template Sometimes you need or want to test multiple datasets over a single template, you can do that by setting a data parameter in the request URI. Example: http://localhost:6780/home.hbs?data=mytestdata  Please note you don't have to specify the extension file. Helpers Built-in helpers: with each if unless log block partial precompile embedded i18n and i18nJs string helpers with, each, if, unless: See the built-in helper documentation. block and partial Block and partial helpers work together to provide you Template Inheritance. Usage:   {{#block ""title""}}     ...   {{/block}}  context: A string literal which defines the region's name. Usage:   {{#partial ""title""}}     ...   {{/partial}}  context: A string literal which defines the region's name. precompile Precompile a Handlebars.java template to JavaScript using handlebars.js user.hbs Hello {{this}}! home.hbs <script type=""text/javascript""> {{precompile ""user""}} </script> Output: <script type=""text/javascript""> (function() {   var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {}; templates['user'] = template(function (Handlebars,depth0,helpers,partials,data) {   helpers = helpers || Handlebars.helpers;   var buffer = """", functionType=""function"", escapeExpression=this.escapeExpression;     buffer += ""Hi "";   depth0 = typeof depth0 === functionType ? depth0() : depth0;   buffer += escapeExpression(depth0) + ""!"";   return buffer;}); })(); </script> You can access the precompiled template with: var template = Handlebars.templates['user'] By default it uses: /handlebars-v1.3.0.js to compile the template. Since handlebars.java 2.x it is also possible to use handlebars.js 2.x Handlebars handlebars = new Handlebars(); handlebars.handlebarsJsFile(""/handlebars-v2.0.0.js""); For more information have a look at the Precompiling Templates documentation. Usage: {{precompile ""template"" [wrapper=""anonymous, amd or none""]}}  context: A template name. Required. wrapper: One of ""anonymous"", ""amd"" or ""none"". Default is: ""anonymous"" There is a maven plugin available too. embedded The embedded helper allow you to ""embedded"" a handlebars template inside a <script> HTML tag: user.hbs <tr>   <td>{{firstName}}</td>   <td>{{lastName}}</td> </tr> home.hbs <html> ... {{embedded ""user""}} ... </html> Output: <html> ... <script id=""user-hbs"" type=""text/x-handlebars""> <tr>   <td>{{firstName}}</td>   <td>{{lastName}}</td> </tr> </script> ... </html> Usage: {{embedded ""template""}}  context: A template name. Required. i18n A helper built on top of a {@link ResourceBundle}. A {@link ResourceBundle} is the most well known mechanism for internationalization (i18n) in Java. Usage: {{i18n ""hello""}} This require a messages.properties in the root of classpath. Using a locale: {{i18n ""hello"" locale=""es_AR""}} This requires a messages_es_AR.properties in the root of classpath. Using a different bundle: {{i18n ""hello"" bundle=""myMessages""}} This requires a myMessages.properties in the root of classpath. Using a message format: {{i18n ""hello"" ""Handlebars.java""}} Where hello is Hola {0}!, results in Hola Handlebars.java!. i18nJs Translate a ResourceBundle into JavaScript code. The generated code assumes you have the I18n in your application. Usage: {{i18nJs [locale] [bundle=messages]}}  If the locale argument is present it will translate that locale to JavaScript. Otherwise, it will use the default locale. The generated code looks like this: <script type=""text/javascript"">   I18n.defaultLocale = 'es_AR';   I18n.locale = 'es_AR';   I18n.translations = I18n.translations || {};   // Spanish (Argentina)   I18n.translations['es_AR'] = {     ""hello"": ""Hi {{arg0}}!""   } </script> Finally, it converts message patterns like: Hi {0} into Hi {{arg0}}. This make possible for the I18n JS library to interpolate variables. string helpers Functions like abbreviate, capitalize, join, dateFormat, yesno, etc., are available from StringHelpers. TypeSafe Templates TypeSafe templates are created by extending the TypeSafeTemplate interface. For example: // 1 public static interface UserTemplate extends TypeSafeTemplate<User> {    // 2   public UserTemplate setAge(int age);    public UserTemplate setRole(String role);  }  // 3 UserTemplate userTmpl = handlebars.compileInline(""{{name}} is {{age}} years old!"")   .as(UserTemplate.class);  userTmpl.setAge(32);  assertEquals(""Edgar is 32 years old!"", userTmpl.apply(new User(""Edgar""))); You extend the TypeSafeTemplate interface. You add all the set method you need. The set method can returns void or TypeSafeTemplate object. You create a new type safe template using the: as() method. Registering Helpers There are two ways of registering helpers. Using the Helper interface handlebars.registerHelper(""blog"", new Helper<Blog>() {   public CharSequence apply(Blog blog, Options options) {     return options.fn(blog);   } }); handlebars.registerHelper(""blog-list"", new Helper<List<Blog>>() {   public CharSequence apply(List<Blog> list, Options options) {     String ret = ""<ul>"";     for (Blog blog: list) {       ret += ""<li>"" + options.fn(blog) + ""</li>"";     }     return new Handlebars.SafeString(ret + ""</ul>"");   } }); Using a HelperSource A helper source is any class with public methods returning an instance of a CharSequence.   public static? CharSequence methodName(context?, parameter*, options?) {   } Where: A method can/can't be static The method's name becomes the helper's name Context, parameters and options are all optionals If context and options are present they must be the first and last arguments of the method All these are valid definitions of helper methods: public class HelperSource {   public String blog(Blog blog, Options options) {     return options.fn(blog);   }    public static String now() {     return new Date().toString();   }    public String render(Blog context, String param0, int param1, boolean param2, Options options) {     return ...   } }  ...  handlebars.registerHelpers(new HelperSource());  Or, if you prefer static methods only: handlebars.registerHelpers(HelperSource.class);  With plain JavaScript That's right since 1.1.0 you can write helpers in JavaScript: helpers.js: Handlebars.registerHelper('hello', function (context) {  return 'Hello ' + context; }) handlebars.registerHelpers(new File(""helpers.js"")); Cool, isn't? Helper Options Parameters handlebars.registerHelper(""blog-list"", new Helper<Blog>() {   public CharSequence apply(List<Blog> list, Options options) {     String p0 = options.param(0);     assertEquals(""param0"", p0);     Integer p1 = options.param(1);     assertEquals(123, p1);     ...   } });  Bean bean = new Bean(); bean.setParam1(123);  Template template = handlebars.compileInline(""{{#blog-list blogs \""param0\"" param1}}{{/blog-list}}""); template.apply(bean); Default parameters handlebars.registerHelper(""blog-list"", new Helper<Blog>() {   public CharSequence apply(List<Blog> list, Options options) {     String p0 = options.param(0, ""param0"");     assertEquals(""param0"", p0);     Integer p1 = options.param(1, 123);     assertEquals(123, p1);     ...   } });  Template template = handlebars.compileInline(""{{#blog-list blogs}}{{/blog-list}}""); Hash handlebars.registerHelper(""blog-list"", new Helper<Blog>() {   public CharSequence apply(List<Blog> list, Options options) {     String class = options.hash(""class"");     assertEquals(""blog-css"", class);     ...   } });  handlebars.compileInline(""{{#blog-list blogs class=\""blog-css\""}}{{/blog-list}}""); Default hash handlebars.registerHelper(""blog-list"", new Helper<Blog>() {   public CharSequence apply(List<Blog> list, Options options) {     String class = options.hash(""class"", ""blog-css"");     assertEquals(""blog-css"", class);     ...   } });  handlebars.compileInline(""{{#blog-list blogs}}{{/blog-list}}""); Error reporting Syntax errors file:line:column: message    evidence    ^ [at file:line:column]  Examples: template.hbs {{value  /templates.hbs:1:8: found 'eof', expected: 'id', 'parameter', 'hash' or '}'     {{value            ^  If a partial isn't found or if it has errors, a call stack is added: /deep1.hbs:1:5: The partial '/deep2.hbs' could not be found     {{> deep2         ^ at /deep1.hbs:1:10 at /deep.hbs:1:10  Helper/Runtime errors Helper or runtime errors are similar to syntax errors, except for two things: The location of the problem may (or may not) be the correct one The stack-trace isn't available Examples: Block helper: public CharSequence apply(final Object context, final Options options) throws IOException {   if (context == null) {     throw new IllegalArgumentException(         ""found 'null', expected 'string'"");   }   if (!(context instanceof String)) {     throw new IllegalArgumentException(         ""found '"" + context + ""', expected 'string'"");   }   ... } base.hbs  {{#block}} {{/block}}  Handlebars.java reports: /base.hbs:2:4: found 'null', expected 'string'     {{#block}} ... {{/block}}  In short, from a helper you can throw an Exception and Handlebars.java will add the filename, line, column and the evidence. Advanced Usage Extending the context stack Let's say you need to access to the current logged-in user in every single view/page. You can publish the current logged in user by hooking into the context-stack. See it in action:   hookContextStack(Object model, Template template) {     User user = ....;// Get the logged-in user from somewhere     Map moreData = ...;     Context context = Context       .newBuilder(model)         .combine(""user"", user)         .combine(moreData)         .build();     template.apply(context);     context.destroy();   } Where is the hookContextStack method? Well, it depends on your application architecture. Using the ValueResolver By default, Handlebars.java use the JavaBean methods (i.e. public getXxx and isXxx methods) and Map as value resolvers. You can choose a different value resolver. This section describe how to do this. The JavaBeanValueResolver Resolves values from public methods prefixed with ""get/is"" Context context = Context   .newBuilder(model)   .resolver(JavaBeanValueResolver.INSTANCE)   .build(); The FieldValueResolver Resolves values from no-static fields. Context context = Context   .newBuilder(model)   .resolver(FieldValueResolver.INSTANCE)   .build(); The MapValueResolver Resolves values from a java.util.Map objects. Context context = Context   .newBuilder(model)   .resolver(MapValueResolver.INSTANCE)   .build(); The MethodValueResolver Resolves values from public methods. Context context = Context   .newBuilder(model)   .resolver(MethodValueResolver.INSTANCE)   .build(); The JsonNodeValueResolver Resolves values from JsonNode objects. Context context = Context   .newBuilder(model)   .resolver(JsonNodeValueResolver.INSTANCE)   .build(); Available in Jackson 1.x and Jackson 2.x modules. Using multiples value resolvers Context context = Context   .newBuilder(model)   .resolver(       MapValueResolver.INSTANCE,       JavaBeanValueResolver.INSTANCE,       FieldValueResolver.INSTANCE   ).build(); The Cache System The cache system is designed to provide scalability and flexibility. Here is a quick view of the TemplateCache system:  public interface TemplateCache {    /**    * Remove all mappings from the cache.    */   void clear();    /**    * Evict the mapping for this source from this cache if it is present.    *    * @param source the source whose mapping is to be removed from the cache    */   void evict(TemplateSource source);    /**    * Return the value to which this cache maps the specified key.    *    * @param source source whose associated template is to be returned.    * @param parser The Handlebars parser.    * @return A template.    * @throws IOException If input can't be parsed.    */   Template get(TemplateSource source, Parser parser) throws IOException; } As you can see, there isn't a put method. All the hard work is done in the get method, which is basically the core of the cache system. By default, Handlebars.java uses a null cache implementation (a.k.a. no cache at all) which looks like: Template get(TemplateSource source, Parser parser) throws IOException {   return parser.parse(source); }  In addition to the null cache, Handlebars.java provides three more implementations: ConcurrentMapTemplateCache: a template cache implementation built on top of a ConcurrentMap that detects changes in files automatically. This implementation works very well in general, but there is a small window where two or more threads can compile the same template. This isn't a huge problem with Handlebars.java because the compiler is very very fast. But if for some reason you don't want this, you can use the HighConcurrencyTemplateCache template cache. HighConcurrencyTemplateCache: a template cache implementation built on top of ConcurrentMap that detects changes in files automatically. This cache implementation eliminates the window created by ConcurrentMapTemplateCache to zero. It follows the patterns described in Java Concurrency in Practice and ensures that a template will be compiled just once regardless of the number of threads. GuavaTemplateCache: a template cache implementation built on top of Google Guava. Available in handlebars-guava-cache module You can configure Handlebars.java to use a cache by: Handlebars hbs = new Handlebars()   .with(new MyCache());  Using a MissingValueResolver (@deprecated) NOTE: MissingValueResolver is available in <= 1.3.0. For > 1.3.0 use Helper Missing. A MissingValueResolver let you use default values for {{variable}} expressions resolved to null.   MissingValueResolver missingValueResolver = new MissingValueResolver() {     public String resolve(Object context, String name) {       //return a default value or throw an exception       ...;     }   };   Handlebars handlebars = new Handlebars().with(missingValueResolver); Helper Missing By default, Handlebars.java throws an java.lang.IllegalArgumentException() if a helper cannot be resolved. You can override the default behaviour by providing a special helper: helperMissing. Example:   handlebars.registerHelperMissing(new Helper<Object>() {     @Override     public CharSequence apply(final Object context, final Options options) throws IOException {       return options.fn.text();     }   }); String form parameters You can access a parameter name if you set the: stringParams: true. Example: {{sayHi this edgar}}   Handlebars handlebars = new Handlebars()     .stringParams(true);    handlebars.registerHelper(""sayHi"", new Helper<Object>() {     public Object apply(Object context, Options options) {       return ""Hello "" + options.param(0) + ""!"";     }   }); results in: Hello edgar!  How does this work? stringParams: true instructs Handlebars.java to resolve a parameter to it's name if the value isn't present in the context stack. Allow Infinite loops By default, Handlebars.java doesn't allow a partial to call itself (directly or indirectly). You can change this by setting the: Handlebars.inifiteLoops(true), but watch out for a StackOverflowError. Pretty Print The Mustache Spec has some rules for removing spaces and new lines. This feature is disabled by default. You can turn this on by setting the: Handlebars.prettyPrint(true). Modules Jackson 1.x Maven:  <dependency>    <groupId>com.github.jknack</groupId>    <artifactId>handlebars-json</artifactId>    <version>${handlebars-version}</version>  </dependency>  Usage:  handlebars.registerHelper(""json"", JacksonHelper.INSTANCE);  {{json context [view=""foo.MyFullyQualifiedClassName""] [escapeHTML=false] [pretty=false]}}  Alternative:  handlebars.registerHelper(""json"", new JacksonHelper().viewAlias(""myView"",    foo.MyFullyQualifiedClassName.class);  {{json context [view=""myView""] [escapeHTML=false] [pretty=false]}}  context: An object, may be null. view: The name of the Jackson View. Optional. escapeHTML: True, if the JSON content contains HTML chars and you need to escaped them. Default is: false. pretty: True, if the JSON content must be formatted. Default is: false. Jackson 2.x Maven:  <dependency>    <groupId>com.github.jknack</groupId>    <artifactId>handlebars-jackson2</artifactId>    <version>${handlebars-version}</version>  </dependency> Same as Jackson1.x, except for the name of the helper: Jackson2Helper Markdown Maven:  <dependency>    <groupId>com.github.jknack</groupId>    <artifactId>handlebars-markdown</artifactId>    <version>${handlebars-version}</version>  </dependency> Usage:  handlebars.registerHelper(""md"", new MarkdownHelper());  {{md context}}  context: An object or null. Required. Humanize Maven:  <dependency>    <groupId>com.github.jknack</groupId>    <artifactId>handlebars-humanize</artifactId>    <version>${handlebars-version}</version>  </dependency> Usage:  // Register all the humanize helpers.  HumanizeHelper.register(handlebars); See the JavaDoc of the HumanizeHelper for more information. SpringMVC Maven:  <dependency>    <groupId>com.github.jknack</groupId>    <artifactId>handlebars-springmvc</artifactId>    <version>${handlebars-version}</version>  </dependency> Using value resolvers:  HandlebarsViewResolver viewResolver = ...;   viewResolver.setValueResolvers(...); In addition, the HandlebarsViewResolver add a message helper that uses the Spring MessageSource class: {{message ""code"" [arg]* [default=""default message""]}}  where: code: the message's code. Required. arg: the message's argument. Optional. default: the default's message. Optional. Checkout the HandlebarsViewResolver. Architecture and API Design Handlebars.java follows the JavaScript API with some minors exceptions due to the nature of the Java language. The parser is built on top of ANTLR v4. Data is provided as primitive types (int, boolean, double, etc.), strings, maps, list or JavaBeans objects. Helpers are type-safe. Handlebars.java is thread-safe. Differences between Handlebars.java and Handlebars.js Handlebars.java scope resolution follows the Mustache Spec. For example: Given: {   ""value"": ""parent"",   ""child"": {   } } and Hello {{#child}}{{value}}{{/child}} will be: Hello parent Now, the same model and template with Handlebars.js is: Hello That is because Handlebars.js doesn't look in the context stack for missing attributes in the current scope (this is consistent with the Mustache Spec). Hopefully, you can turn-off the context stack lookup in Handlebars.java by qualifying the attribute with this.: Hello {{#child}}{{this.value}}{{/child}} Differences between Handlebars.java and Mustache.js Handlebars.java throws a java.io.FileNotFoundException if a partial cannot be loaded. Status Mustache 1.0 Compliant Passes the 123 tests from the Mustache Spec. Tests can be found here comments.yml, delimiters.yml, interpolation.yml, inverted.yml, lambdas.yml, partials.yml, sections.yml Handlebars.js Compliant Passes all the Handlebars.js tests Tests can be found here basic context, string literals, inverted sections, blocks, block helper missing, helper hash, partials Dependencies +- org.apache.commons:commons-lang3:jar:3.1 +- org.antlr:antlr4-runtime:jar:4.5.1-1 +- org.mozilla:rhino:jar:1.7R4 +- org.slf4j:slf4j-api:jar:1.6.4  FAQ Want to contribute? Fork the project on Github. Wondering what to work on? See task/bug list and pick up something you would like to work on. Do you want to donate one or more helpers? See handlebars=helpers a repository for community's helpers. Create an issue or fix one from issues list. If you know the answer to a question posted to our mailing list - don't hesitate to write a reply. Share your ideas or ask questions on mailing list - don't hesitate to write a reply - that helps us improve javadocs/FAQ. If you miss a particular feature - browse or ask on the mailing list - don't hesitate to write a reply, show us some sample code and describe the problem. Write a blog post about how you use or extend handlebars.java. Please suggest changes to javadoc/exception messages when you find something unclear. If you have problems with documentation, find it non intuitive or hard to follow - let us know about it, we'll try to make it better according to your suggestions. Any constructive critique is greatly appreciated. Don't forget that this is an open source project developed and documented in spare time. Help and Support Help and discussion Bugs, Issues and Features Related Projects Handlebars.js Try Handlebars.js Mustache Humanize ANTLRv4 Author Edgar Espina License Apache License 2 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jknack/handlebars.java"	"Logic-less and semantic Mustache templates."	"true"
"Template Engine"	"Thymeleaf"	"http://www.thymeleaf.org/"	"Aims to be a substitute for JSP and works for XML files in general."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Thymeleaf Home Site Menu Home Download Docs Ecosystem FAQ Forum Twitter GitHub Thymeleaf 13 Jul 2016: Thymeleaf 2.1.5 released A new maintenance version of the Thymeleaf 2.1.x branch has been released. Go to the download page to see the Change Log and download this new version. Thymeleaf is a modern server-side Java template engine for both web and standalone environments. Thymeleaf's main goal is to bring elegant natural templates to your development workflow — HTML that can be correctly displayed in browsers and also work as static prototypes, allowing for stronger collaboration in development teams. With modules for Spring Framework, a host of integrations with your favourite tools, and the ability to plug in your own functionality, Thymeleaf is ideal for modern-day HTML5 JVM web development — although there is much more it can do. Natural templates HTML templates written in Thymeleaf still look and work like HTML, letting the actual templates that are run in your application keep working as useful design artifacts. Integrations galore Eclipse, IntelliJ IDEA, Spring, Play, even the up-and-coming Model-View-Controller API for Java EE 8. Write Thymeleaf in your favourite tools, using your favourite web-development framework. Check out our Ecosystem to see more integrations, including community-written plugins to speed-up your development with Thymeleaf. Let's go! Looking to get started? Check out our Download section for getting Thymeleaf, then go to our Docs pages for several tutorials to slowly ease you into using Thymeleaf. Found a bug, or itching to contribute? Then find the GitHub repo for it on our issue tracking page. Stuck? Got a question? Then find us on our Forums and ask away. Who's using Thymeleaf? Lots of people are :) But here are a few who have been kind enough to provide us with testimonials on how they came to Thymeleaf and the ways they are using it. Click through to read what they have to say. On this site Home Download Docs Ecosystem FAQ Issue Tracking The Thymeleaf Team Who's using Thymeleaf? External links Forum Follow us on Twitter Fork us on GitHub Copyright © The Thymeleaf Team Thymeleaf is open source software distributed under the Apache License 2.0 This website (excluding the names and logos of Thymeleaf users) is licensed under the CC BY-SA 3.0 License"	"null"	"null"	"Aims to be a substitute for JSP and works for XML files in general."	"true"
"Testing"	"Apache JMeter"	"http://jmeter.apache.org/"	"Functional testing and performance measurements."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"485"	"104"	"317"	"GitHub - apache/jmeter: Mirror of Apache JMeter Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 104 Star 485 Fork 317 apache/jmeter mirrored from git://git.apache.org/jmeter.git Code Pull requests 6 Pulse Graphs Mirror of Apache JMeter 12,660 commits 26 branches 83 releases Fetching contributors Java 96.4% HTML 1.2% XSLT 0.7% JavaScript 0.7% CSS 0.5% Batchfile 0.3% Shell 0.2% Java HTML XSLT JavaScript CSS Batchfile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: trunk Switch branches/tags Branches Tags HC4 SampleTimeout doc-v2_3_1 doc-v2_3_3 doc-v2_3_4 docs-2.4 docs-2.5 docs-2.5.1 docs-2.6 docs-2.7 docs-2.8 docs-2.9 docs-2.10 docs-2.11 docs-2.12 docs-2.13 docs-3.0 java1.5_prototype-was_trunk jmeter-2.4.x rel-2-1 rel-2-2 rel-2_0 reports test testbeans_experimental_branch trunk Nothing to show v3_0 v3_0_RC5 v3_0_RC4 v3_0_RC3 v3_0_RC2 v3_0_RC1 v2_13 v2_13_RC2 v2_13_RC1 v2_12 v2_12_RC2 v2_12_RC1 v2_11 v2_11_RC2 v2_11_RC1 v2_10 v2_10_RC2 v2_10_RC1 v2_9 v2_9_RC3 v2_9_RC2 v2_9_RC1 v2_8 v2_8_RC2 v2_8_RC1 v2_7 v2_7_RC3 v2_7_RC2 v2_7_RC1 v2_6 v2_6_testRCtemp v2_6_RC2 v2_6_RC1 v2_5_1 v2_5_1_RC3 v2_5 v2_5_RC3 v2_4 v2_3_4 v2_3_4_RC3 v2_3_3 v2_3_3_RC2 v2_3_2 v2_3_1 v2_3 v2_2 v2_1_1 v1_9_1 v1_9 v1_8_1 v1_8 v1_7_3 v1_7_1 v1_7_1a testhead test1157668 test test-bin start_refactorings sas_checkpoint release2-1a rel-2_1 rel-2_0_3 rel-2_0_2 rel-2_0_1 rel-2_0_0 pre_properties merge-2-1 merge-2-0 latest latest-rel-2-1 latest-2-1 jmeter1_7 jmeter1_5 jmeter_1_3 jmeter_1_0 initial avendor apache Root_testbeans_experimental_branch Root_rel-3-1 Root_rel-2-1 JMeter1_0b1 Nothing to show New pull request Latest commit cd36912 Jul 14, 2016 Felix Schumacher Allow multiple selection and delete in HTTP Header Manager. … Based on a patch by Benoit Wiart (b.wiart at ubik-ingenierie.com)  Bugzilla Id: 59816 This closes #213 on github   git-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1752722 13f79535-47bb-0310-9956-ffa450edef68 Permalink Failed to load latest commit information. bin Use jmeter.properties for testing whenever possible Jun 19, 2016 docs Prepare next release 3.0: update docs tree and overview (RC5) May 14, 2016 extras Compress PNGs Apr 19, 2016 lib Updated to tika 1.13 May 29, 2016 licenses Updated to tika 1.13 May 29, 2016 res Updated to tika 1.13 May 29, 2016 src Allow multiple selection and delete in HTTP Header Manager. Jul 14, 2016 test Remove printing to stdout. Jul 13, 2016 xdocs Allow multiple selection and delete in HTTP Header Manager. Jul 14, 2016 .gitignore #resolve #24 Apr 3, 2016 .travis.yml Log file contents in ant.batchtest failure case Apr 3, 2016 LICENSE Updated to tika 1.13 (missing change) May 29, 2016 NOTICE Happy new year 2016 Jan 1, 2016 README Docn Apr 30, 2016 build.properties Updated to tika 1.13 May 29, 2016 build.xml Oops Jun 19, 2016 checkstyle-suppressions.xml Add basic checkstyle suppressions file Dec 9, 2015 checkstyle.xml +=NewlineAtEndOfFile Dec 9, 2015 eclipse.classpath Updated to tika 1.13 May 29, 2016 eclipse.project Bug 58696 - Create Ant task to setup Eclipse project Dec 6, 2015 eclipse.readme Update doc as per recent changes and tests Dec 28, 2014 fb-csv.xsl Update license (remove copyright) Jan 7, 2007 fb-excludes.xml Tab police Mar 17, 2013 rat-excludes.txt Add trailing EOL Dec 15, 2015 README                           A P A C H E   J M E T E R     What is it?   -----------    Apache JMeter is a 100% pure Java application designed to test   and measure performance.  It may be used as a highly portable    server benchmark as well as multiclient load generator.      Apache JMeter features include:    Ability to load and performance test many different server/protocol types:    o  Web - HTTP, HTTPS    o  SOAP / REST    o  FTP    o  Database via JDBC    o  LDAP    o  Message-oriented Middleware (MOM) via JMS    o  Mail - SMTP(S), POP3(S) and IMAP(S)    o  Native commands or shell scripts    o  TCP    Full multithreading framework allows concurrent sampling by many threads   and simultaneous sampling of different functions by separate thread groups.   Careful GUI design allows faster Test Plan building and debugging.   Caching and offline analysis/replaying of test results.   Highly Extensible core:    o  Pluggable Samplers allow unlimited testing capabilities.    o  Several load statistics may be chosen with pluggable timers .    o  Data analysis and visualization plugins allow great extensibility as well as personalization.    o  Functions can be used to provide dynamic input to a test or provide data manipulation.    o  Scriptable Samplers (BeanShell, BSF- and JSR223- compatible languages)       The Latest Version   ------------------    Details of the latest version can be found on the Java Apache    Project web site (http://jmeter.apache.org/).    Requirements   ------------    The following requirements exist for running Apache JMeter:     o  Java Interpreter:        A fully compliant Java 7 (or later) Runtime Environment is required        for Apache JMeter to execute.     o  Optional jars:           Some jars are not included with JMeter.        If required, these should be downloaded and placed in the lib directory           JDBC - available from database supplier       JMS - available from the JMS provider       Bouncy Castle - available from http://www.bouncycastle.org/latest_releases.html       (currently only needed for SMIME Assertion)     o  Java Compiler [OPTIONAL]:        A Java compiler is not needed since the distribution includes a        precompiled Java binary archive. Note that a compiler is required       if you plan to build plugins for Apache JMeter.    Installation Instructions   -------------------------    Note that spaces in directory names can cause problems.    - Release builds   Unpack the binary archive into a suitable directory structure.      Running JMeter   --------------      Change to the bin directory   Run the jmeter (Un*x) or jmeter.bat (Windows) file.      For Windows there are also some other scripts.   Drag-drop a JMX file onto one of them:       jmeter-n.cmd - runs the file as a non-GUI test   jmeter-n-r.cmd - runs the file as a non-GUI remote (client-server) test   jmeter-t.cmd - loads the file ready to run it as a GUI test      Documentation   -------------   The documentation available as of the date of this release is   also included, in HTML format, in the printable_docs/ directory,   and it may be browsed starting from the file called index.html.    Build instructions   ------------------    - Release builds   Unpack the source archive into a suitable directory structure.   Most of the 3rd party library files can be extracted from the binary archive   by unpacking it into the same directory structure.   You can also use Ant to download the required library files:      ant download_jars     Any optional jars (see above) should be placed in lib/opt and/or lib.      Jars in lib/opt will be used for building JMeter and running the unit test,   but won't be used at run-time.   [This is useful for testing what happens if the optional jars are not   downloaded by other JMeter users].    JMeter is built using Ant.      Change to the top-level directory and issue the command:      ant download_jars ! only needs to be done once;                       will download any missing 3rd party jars     ant    This will compile the application and enable you to run jmeter from the bin   directory.    ant test [-Djava.awt.headless=true]      This will compile and run the unit tests.   The optional property definition is required if the system    does not have a suitable GUI display.    Developer information   ---------------------   The code is maintained in SVN at https://svn.apache.org/repos/asf/jmeter/trunk   There is a read-only mirror at GitHub: https://github.com/apache/jmeter    Licensing and legal issues   --------------------------    For legal and licensing issues, please look the files:   LICENSE   NOTICE  Cryptographic Software Notice -----------------------------  This distribution may include software that has been designed for use with cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See <http://www.wassenaar.org/> for more information.  The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this Apache Software Foundation distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.  The following provides more details on the included software that may be subject to export controls on cryptographic software:    Apache JMeter interfaces with the   Java Secure Socket Extension (JSSE) API to provide      - HTTPS support    Apache JMeter interfaces (via Apache HttpClient3) with the   Java Cryptography Extension (JCE) API to provide          - NTLM authentication        Apache JMeter does not include any implementation of JSSE or JCE.     Thank you for using Apache JMeter.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/apache/jmeter"	"Functional testing and performance measurements."	"true"
"Testing"	"Arquillian"	"http://arquillian.org/"	"Integration and functional testing platform for Java EE containers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"72"	"11"	"118"	"GitHub - arquillian/arquillian.github.com: Arquillian website source (develop branch) and hosting (master branch). Baked with Awestruct. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 72 Fork 118 arquillian/arquillian.github.com Code Issues 77 Pull requests 8 Wiki Pulse Graphs Arquillian website source (develop branch) and hosting (master branch). Baked with Awestruct. http://arquillian.org 1,287 commits 7 branches 0 releases 57 contributors Ruby 32.2% HTML 30.8% JavaScript 24.3% CSS 12.0% Shell 0.7% Ruby HTML JavaScript CSS Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 227 datasheet develop docker issue-70 master repost_jacoco Nothing to show Nothing to show New pull request Latest commit c446c16 Jun 1, 2016 aslakknutsen Add github mapping Permalink Failed to load latest commit information. _bin Remove ftests-x and inttests from published artifacts Jan 21, 2014 _config Add github mapping Jun 1, 2016 _ext Add Arquillian Universe Generator beta Feb 16, 2016 _layouts Added link to github help explaining pull requests Apr 28, 2016 _partials Add community member link to post pages author Mar 29, 2014 _templates add template for hack idea post Nov 5, 2012 api/jbossorg remove empty front matter Nov 18, 2013 blog Update Drone/Graphene release date Apr 4, 2016 code notes Dec 11, 2012 community Fixed typo 'nikename' on community/webchat page Apr 27, 2016 features Updated link to Graphene guide from features page Sep 13, 2013 guides Updated JBoss Forge distribution link Apr 26, 2016 images Add Arquillian IN ACTION front page notice Aug 7, 2015 invasion Update Arquillian Wallpaper link Jun 5, 2015 javascripts use retweet symbol for retweets Nov 5, 2012 modules Add BOM & TCK index mapping Oct 9, 2015 spec Add Arquillian Universe Generator beta Feb 16, 2016 stylesheets Say hello to your Community Manager, @bartoszmajsak! Oct 4, 2014 .awestruct_ignore Multiple fixes to reflect unknown project structures Jun 22, 2013 .gitignore post about Jakub's NetflixOSS cloud prize ann at AWS re:Invent Nov 18, 2013 .nojekyll disable jekyll on published site Mar 28, 2012 404.html.haml add .well to all .rally; cleanup 404 page Apr 3, 2012 CNAME add CNAME file to source Mar 29, 2012 CREDITS new flags & langs; tweak flag placement Jan 29, 2012 Gemfile Fix compass version Sep 5, 2014 README.textile Fix missing http:// in 5th line,... Jan 21, 2014 animated-ike.html bring over animated ike from master Sep 26, 2011 datasheet.asciidoc Update DataSheet for JBossWorld/JUDCon Jun 13, 2012 favicon.ico initial check-in of project site prototype Sep 26, 2011 google8ad3dd04249bcf67.html.haml Add verification page for Google Webmaster Tools Sep 23, 2012 index.html.haml Add Arquillian IN ACTION front page notice Aug 7, 2015 license.txt add license file Apr 2, 2012 README.textile Arquillian Website Source This repository contains the source of the Arquillian website (hosted using github pages), to which the arquillian.org hostname resolves. The website is built using Awestruct. The develop branch contains the unprocessed website source. From that content, Awestruct generates a static website under the _site directory. The website is published to the public site by pushing the contents of the _site directory to the master branch. Setting Up Awestruct You need to have Awestruct installed on your machine to preview the website locally. Awestruct is a available as Ruby gem in the GemCutter repository. You can install it into either a native Ruby or a JRuby installation. The instructions here will cover setting up Awestruct in both native Ruby and JRuby installation for Linux environment. Begin by installing the package for Ruby and RubyGems. Installing Ruby and RubyGems on Ubuntu If you have Ubuntu, use this command to install Ruby and RubyGems: $ sudo apt-get install rubygems Ubuntu does not currently add the RubyGems bin directory to your path. Put the following files in your shell configuration file (.bashrc) and restart the shell. $ export GEM_HOME=/var/lib/gems/1.8 \  export PATH=$PATH:$GEM_HOME/bin Now the executables for any gem you install will be available on your path. Installing JRuby on Ubuntu It might happen that you will face similar problem while trying to install awestruct using Ruby on Ubuntu. In that case using JRuby as an alternative might solve it. First, download and unpack latest stable version of JRuby: (The one available in Ubuntu repositories is too old and does not support Awestruct) $ wget http://jruby.org.s3.amazonaws.com/downloads/1.6.7/jruby-bin-1.6.7.tar.gz \ tar -xzvf jruby-bin-1.6.7.tar.gz  Optionally, you can copy it to /usr/lib/jvm and create symbolic link for convenience: $ sudo mv jruby-1.6.7/ /usr/lib/jvm \ cd /usr/lib/jvm/ \ sudo ln -s jruby-1.6.7/ jruby Last step is adding JRuby to path (for instance in .bashrc) $ export JRUBY_HOME=/usr/lib/jvm/jruby \ export PATH=""$JRUBY_HOME/bin:$PATH"" Also, make sure to unset GEM_HOME for your session or else JRuby will try to install gems into your system installation. $ unset GEM_HOME That’s it. Just install all required gems described in subsequent sections and you are ready to run awestruct backed by JRuby! NOTE: Use jgem instead of sudo gem for this purpose. Installing Ruby and RubyGems on Fedora If you have Fedora, use this command to install Ruby and RubyGems: $ sudo yum install ruby ruby-devel ruby-irb rubygems Optionally, you can install RubyGems manually to use a newer version (was once a requirement for installing Awestruct, but has since been fixed): $ wget -q http://production.cf.rubygems.org/rubygems/rubygems-1.8.15.tgz \ tar xzf rubygems-1.8.15.tgz \ cd rubygems-1.8.15 \ sudo ruby setup.rb In Fedora, RubyGems properly links applications such as awestruct to /usr/bin when the corresponding gem is installed, so no need for messing with the PATH. Installing the Awestruct Gem Now you are ready to install awestruct. The remainder of the commands work on any Ruby installation. If you’re using JRuby, remember to use jgem instead of sudo gem. Use this command to install the awestruct gem and its dependencies: $ sudo gem install awestruct If you get a compiler error when RedCloth is installing, use this command instead: $ sudo gem install awestruct -- --with-cflags=\""-O2 -pipe -march=native -Wno-unused-but-set-variable\"" You’re all set! If you’ve previously installed awestruct, make sure you have Awestruct >= 0.2.15. You can update it update it using this command: $ sudo gem update awestruct IMPORTANT: If you’re using JRuby, you’ll need to update your RedCloth gem to support international characters. Follow these steps: Download https://github.com/downloads/mojavelinux/redcloth/redcloth_scan.jar Copy it to $JRUBY_HOME/lib/ruby/gems/*/gems/RedCloth-4.2.9-java/lib/ (overwrite existing file) Additional Required Gems As the website matures, more gems will be required. This section documents the required third-party gems not already installed by Awestruct. Install these Gems using the sudo gem install command (or jgem install command for JRuby) as you did above. rest-client git vpim jruby-openssl (if using jruby) rb-inotify (if using linux) ri_cal tzinfo hpricot RedCloth Installing Awestruct and Required Gems using Bundler Now there’s an even easier way to get setup. First, make sure you have the Bundler gem installed: $ sudo gem install bundler Now Bundler can handle the rest of the setup automatically: $ sudo bundle install At this point, you are ready to pull down the site and run it. Previewing the Site Locally Now that you have awestruct installed, you can preview the website locally by running it in development mode. Development mode uses a file monitor to automatically update the site when you make a change to the source files. To run the site, you first need the source code. Begin by cloning the website source code from git: git clone git://github.com/arquillian/arquillian.github.com.git Then, switch to the develop branch (the master branch holds the published site only): git checkout develop Run the following command to launch the preview server: awestruct -d Visit the following page in your browser: http://localhost:4242 You’re now awestruct! If you only want to generate once when you start the server, use this command: awestruct --server -P development Add the --force flag to either command to regenerate the site from scratch. You can also remove the _tmp and _site directories to clean the generated files. Conventions Haml is the preferred abstract HTML markup language. Haml Reference Textile is the preferred text markup language. Textile Reference Sass and Compass are the preferred CSS frameworks. Sass Reference Compass Reference Source files are indented using 2 spaces. Haml files require the same indentation size throughout. Ruby hashes should have no leading or trailing spaces and options such be seperated by a comma followed by a space (e.g., {:href=>""http://arquillian.org"", title=>""Arquillian Project Site""}). Note: In a HAML document, if you use the equals seperator (=) rather than a greater than equals (=>) in a hash key-value assignment, Awestruct will crash. Page structure #banner h2#logo #navigation #main #intro .hgroup h1 .aside #content .post .header h2.title .byline .body .footer #sidebar #footer #intro #content section#primary aside Writing a Blog Entry Writing a blog entry is very easy. All you have to do is fill in a brief prolog at the top of the file, then just type your content. The rest is handled for you. Filename To write a blog entry, create a new textile document with the file extension .textile in the blog/ folder. The name of the file is important. It determines the date of the blog entry and the URL. The syntax is: YYYY-MM-DD-URL.textile You cannot use dots or spaces in the URL segment. For example: 2011-10-02-announcing-arquillian-1-0.textile Prolog The prolog is a set of name/value pairs defined at the top of the file in between two lines containing three dashes. In this section you define the following metadata: layout (always “blog”) title (use sentence capitalization) author (use github id) tags (array structure, limit to 5, use singular forms as in “release”) Here’s an example (refer to HTML output): --- layout: blog title: Ike is our hero author: aslakknutsen tags: [ announcements, ike ] --- << only copy the hyphens and the lines of text between them If you want the post to appear in the JBoss Central view in JBoss Tools, add jbosscentral to the list of tags. Content Below the prolog, you just type in textile format. Code NOTE: Please follow the JBoss Community syntax conventions when formatting the code (to ensure all posts look consistent). To insert syntax highlighted code, followed by paragraph text, use the following syntax (refer to HTML output of this guide): public class Alien {     public String getName() {         return ""Ike"";     } } This sentence will appear below the code. The language is detected automatically. You don’t normally need to use the p. prefix to enter a paragrah. However, it’s required after a code block to indicate to the parser that the code snippet has ended. If the content following the code is not paragraph text (for instance, a list item), use notextile. instead of p., but include one space at the end of the line. If you are running awestruct in preview mode, you need to touch the blog/index.html.haml file to see the blog show up in the index (likely a bug). Images Images should be put in the images/blog/ folder. An image should be no more than 600px wide. Writing a Release Note Writing a release note is even easier than blog post. There is a template file created for this purpose blog/_github-release-template.textile. Simply name your file using following convention [repository-name]-[versionId].textile (eg. arquillian-core-1.0.0.CR6.textile). Fill in the most important features which are part of this particular release. Other things like JIRA tasks are picked up automatically. If for some reason you are not able to see your release notes on blog/ aggregator page, perform following steps: Delete where tag/release information is read from: rm -rf _tmp/repos/[repo-that-contain-release] Delete the overview from JIRA that contains all released versions: rm -rf _tmp/jira/jira-ARQ.json Then restart awestruct and everything should work nicely. Writing a Guide Writing a guide is much like writing a blog entry (and, as such, just as easy). You need to supply some prolog information, a header stating what the guide covers and content partitioned using level 3 (h3) headings. The rest is handled for you, including the table of contents and listing in the index. IMPORTANT: When committing a guide, put it in a commit by itself and use a commit message that describes to a reader what changed. Commit messages are used as the guide’s changelog. Filename To write a blog entry, create a new textile document with the file extension .textile in the guides/ folder. The name of the file will become the last path in the guide’s URL and thus should closely match the guide’s title. Since it’s part of the URL, the filename should not contain spaces. Prolog The prolog is a set of name/value pairs defined at the top of the file in between two lines containing three dashes. In this section you define the following metadata: layout (always “guide”) title (use title capitalization) authors (comma seperated list of original authors of the guide) translators (comma seperated list, for translations only) tags (comma seperated list) guide_summary (summary text to be used in the guide index) guide_group (numeric; 1 = beginner, 2 = intermediate, 3 = advanced) guide_order (numeric weight; less is more) Here’s an example (refer to HTML output): --- layout: guide title: Getting Started authors: [Dan Allen] tags: [cdi, weld, maven, forge, eclipse] guide_summary: Learn how to add Arquillian to the test suite of your project and write your first Arquillian test. guide_group: 1 guide_order: 10 --- << only copy the hyphens and the lines of text between them Content Below the prolog, you type in textile format. (Don’t use an h2. heading for the title, it will be inserted automatically.) You should begin each guide with a summary that lays out what the guide covers. It should be regular paragraph text surrounding a list of topics. The remainder of the content should be divided into level 3 (h3) headings. The heading title should be no more than 20 characters and use title capitalization. NOTE: Currently, you cannot use acronyms in the heading of a guide section. Code Refer to the instruction for writing a blog entry to learn how to enter code. Images Images should be put in the images/guides/ folder. Textile Extensions You can add emoticons by immediately preceding any of the following smile symbols with tilde (~): :) smile ;) wink :S confused :D happy Here’s an example ~;) Style Classes .last Defines the last column, used to remove the margin & padding to the right .first Defines the first of something, used to remove the margin & padding from the top .bottom Defines the last paragraph, used to remove the margin & padding from the bottom Resources Social Media Icons: http://icondock.com/free/vector-social-media-icons Currently using Google Prettify, could use jQuery wrapper Icons from Faenza Gnome icon theme A pure CSS sticky footer technique: http://ryanfait.com/sticky-footer/ Font typography: http://www.dev-archive.net/articles/typograph1-en.html#Ch23 Ideas for textile plugins: http://octopress.org/docs/plugins/ HTML/CSS/JS ‘fiddle’ tool: http://jsfiddle.net Sass resources: http://thesassway.com/ Language codes: http://joeclark.org/book/sashay/serialization/AppendixB.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/arquillian/arquillian.github.com"	"Integration and functional testing platform for Java EE containers."	"true"
"Testing"	"AssertJ"	"http://joel-costigliola.github.io/assertj/"	"Fluent assertions that improve readability."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"61"	"14"	"37"	"GitHub - joel-costigliola/assertj-examples: Examples illustrating AssertJ assertions Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 61 Fork 37 joel-costigliola/assertj-examples Code Issues 0 Pull requests 0 Pulse Graphs Examples illustrating AssertJ assertions 428 commits 11 branches 8 releases Fetching contributors Java 99.8% Shell 0.2% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags demo java-7-with-snapshots java-7 java-8 master octo-assertj-core-1.5.0 octo-assertj-core-latest-1.6.0-snapshot orion-demo presentation-test with-latest-snapshot-versions with-latest-swing-snapshot Nothing to show built-for-fest-assert-core-2.0M8 built-for-fest-assert-core-2.0M7 assertj-core-1.4.0 assertj-core-1.3.0 assertj-core-1.2.0 assertj-core-1.1.0 assertj-core-1.0.0 assertions-generator-1.1.0 Nothing to show New pull request Latest commit 9b7f1af Jul 3, 2016 joel-costigliola Fix rebase errors Permalink Failed to load latest commit information. assertions-examples Fix rebase errors Jul 3, 2016 assertj-swing-aut joel-costigliola/assertj-swing#70 Add example for editing combobox. Mar 14, 2016 assertj-swing-junit-examples Use AssertJ Swing 3.3.0. Apr 25, 2016 assertj-swing-testng-examples Use AssertJ Swing 3.3.0. Apr 25, 2016 .gitignore Add jEnv configuration to .gitignore. Mar 6, 2014 README.md Update README.md Apr 2, 2016 README.md AssertJ examples AssertJ examples is divided in two : assertions-examples (core, guava and joda assertions) and AssertJ swing modules. The master branch contains examples with the latest released version of AssertJ modules (for Java 8). There are several branches that contain examples for the ongoing development versions of AssertJ modules. That means you have to build the according AssertJ modules by your own before new features compile. The following table contains these special branches that are merged into the master each time the module is released. Branch Modules with-latest-snapshot-versions Core 3.x for Java 8 with-latest-swing-snapshot Swing AssertJ assertions examples assertj-examples/assertions-examples contains executable AssertJ assertions examples that you can run as JUnit tests. Please have a look at assertions examples sources. The master branch contains examples with the latest released version of AssertJ modules for Java 8, similarly the java-7 branch contains examples of AssertJ modules for Java 7. You should be able to build those two branches with mvn clean install command. In your IDE, add src/test/generated-assertions to the project java sources if you IDE shows errors/missing classes. This folder is where custom assertions classes are generated, it shows what you have with the maven assertions generator plugin. Building with-latest-snapshot-versions is a little more complicated : you need to build the needed SNAPSHOT dependencies before - most probably assertj-core and maybe other modules. run mvn clean install in assertj-examples/assertions-examples. In your IDE, add src/test/generated-assertions to the project java sources if you IDE shows errors/missing classes. AssertJ-Swing examples The master branch contains examples with the latest released version of AssertJ modules => you should be able to build it with mvn clean install command. assertj-swing-aut contains the AUT (application under test) that is tested by the examples. assertj-swing-junit-examples contains executable AssertJ-Swing examples that you can inspect and run as JUnit tests. Please have a look at swing-junit-examples sources. assertj-swing-testng-examples contains executable AssertJ-Swing examples that you can inspect and run as TestNG tests. Please have a look at swing-testng-examples sources. Contributing Contributing is easy, only two rules to follow : Checkout the snapshot branch corresponding to your examples, it should be with-latest-snapshot-versions most of the time (not master!) Use AssertJ code Eclipse formatting preferences (for Idea users, it is possible to import it) Add FUN examples ! ;-) Thanks ! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/joel-costigliola/assertj-examples"	"Fluent assertions that improve readability."	"true"
"Testing"	"Awaitility"	"https://github.com/jayway/awaitility"	"DSL for synchronizing asynchronous operations."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"348"	"28"	"41"	"GitHub - awaitility/awaitility: Awaitility is a small Java DSL for synchronizing asynchronous operations Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 348 Fork 41 awaitility/awaitility Code Issues 7 Pull requests 0 Wiki Pulse Graphs Awaitility is a small Java DSL for synchronizing asynchronous operations 394 commits 2 branches 20 releases 20 contributors Java 93.4% Groovy 5.3% Scala 1.3% Java Groovy Scala Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master szpak-topic/java8 Nothing to show awaitility-parent-1.3.3 awaitility-parent-1.3.1 awaitility-parent-1.3 awaitility-2.0.0 awaitility-1.7.0 awaitility-1.6.5 awaitility-1.6.4 awaitility-1.6.3 awaitility-1.6.2 awaitility-1.6.1 awaitility-1.6.0 awaitility-1.5.0 awaitility-1.4.0 awaitility-1.3.5 awaitility-1.3.4 awaitility-1.3.2 awaitility-1.2.1 awaitility-1.2 awaitility-1.1 awaitility-1.0 Nothing to show New pull request Latest commit d680087 Jul 15, 2016 johanhaleby Fixed issue in org.awaitility.Duration which made it depend on Java 7… … … features (issue 50) Permalink Failed to load latest commit information. awaitility-groovy [maven-release-plugin] prepare for next development iteration Jun 17, 2016 awaitility-java8-test [maven-release-plugin] prepare for next development iteration Jun 17, 2016 awaitility-scala [maven-release-plugin] prepare for next development iteration Jun 17, 2016 awaitility Fixed issue in org.awaitility.Duration which made it depend on Java 7… Jul 15, 2016 resources Added logos Jul 19, 2010 .gitignore Add support for using AssertJ assertions Mar 29, 2014 .travis.yml Travis CI support Oct 6, 2014 LICENSE Begun working on javadoc May 6, 2010 README.md Update README.md Jun 17, 2016 changelog.txt Fixed issue in org.awaitility.Duration which made it depend on Java 7… Jul 15, 2016 pom.xml Fixed issue in org.awaitility.Duration which made it depend on Java 7… Jul 15, 2016 README.md Testing asynchronous systems is hard. Not only does it require handling threads, timeouts and concurrency issues, but the intent of the test code can be obscured by all these details. Awaitility is a DSL that allows you to express expectations of an asynchronous system in a concise and easy to read manner. For example: @Test public void updatesCustomerStatus() throws Exception {     // Publish an asynchronous event:     publishEvent(updateCustomerStatusEvent);     // Awaitility lets you wait until the asynchronous operation completes:     await().atMost(5, SECONDS).until(customerStatusIsUpdated());     ... } News 2016-06-17: Awaitility 2.0.0 is released with support for at least expressions as well as upgraded Groovy and Scala support. See release notes for more details. 2016-06-17: Awaitility has a new website, http://www.awaitility.org. Feel free to update your bookmarks. 2015-11-27: Awaitility 1.7.0 is released with support for non-fixed poll intervals. By default Awaitility ships with fibonacci, iterative and ability to roll your own. To simplify custom poll intervals Duration has been updated with methods such as plus, minus, multiply and divide. A new helper method called matches has also been added to Awaitility to reduce boiler plate code when creating lambda expressions that call methods that throws exception. See change log for details and see this blog for additional info. Older news Documentation Getting started Usage Guide Downloads Awaitility Javadoc Links Change log Awaitility on Ohloh Mailing list for questions and support Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jayway/awaitility"	"DSL for synchronizing asynchronous operations."	"true"
"Testing"	"Citrus"	"http://citrusframework.org/"	"Integration testing framework with focus on client- and serverside messaging."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"93"	"23"	"47"	"GitHub - christophd/citrus: Test framework for automated integration tests on enterprise applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 93 Fork 47 christophd/citrus Code Issues 8 Pull requests 2 Pulse Graphs Test framework for automated integration tests on enterprise applications http://www.citrusframework.org 2,567 commits 4 branches 18 releases 12 contributors Java 98.2% XSLT 0.9% CSS 0.5% HTML 0.3% Groovy 0.1% Cucumber 0.0% Java XSLT CSS HTML Groovy Cucumber Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2-6-bugfix master selenium telnet Nothing to show citrus-2.6 citrus-2.5.2 citrus-2.5.1 citrus-2.5 citrus-2.4 citrus-2.3 citrus-2.2 citrus-2.1 citrus-2.0 citrus-1.4.1 citrus-1.4 citrus-1.3.1 citrus-1.3 citrus-1.2 citrus-1.2.M2 citrus-1.2.M1 citrus-1.1 citrus-1.0 Nothing to show New pull request Latest commit 0615140 Jul 3, 2016 christophd Merge branch '2-6-bugfix' Permalink Failed to load latest commit information. modules CITRUS-58 Support variable object paths Jul 1, 2016 src Merge branch '2-6-bugfix' Jul 3, 2016 tools Remove checkstyle and findbugs reports in site generation because thi… Aug 12, 2010 .gitignore Start migrating to gitbook for reference manual Jul 3, 2016 LICENSE.txt Update version information and fix assembly descriptors to use proper… Jan 27, 2016 NOTICE.txt Update version information and fix assembly descriptors to use proper… Jan 27, 2016 README.md Update version information and fix assembly descriptors to use proper… Jan 27, 2016 pom.xml Start migrating to gitbook for reference manual Jul 3, 2016 README.md Citrus Integration Testing Welcome to Citrus Citrus is a test framework written in Java that is able to create fully automated end-to-end use case tests for enterprise SOA applications. Citrus simulates surrounding interface partners supporting a huge set of different transports and protocols like Http, JMS, TCP/IP, FTP, SOAP, XML and JSON. Visit our official website at 'http://www.citrusframework.org' for more information and a detailed documentation. Preconditions You need following software on your machine in order to use the Citrus framework: Java 7 or higher Installed JDK plus JAVA_HOME environment variable set up and pointing to your Java installation directory Java IDE (optional) A Java IDE will help you to manage your Citrus project (e.g. creating and executing test cases). You can use the Java IDE that you like best like Eclipse or IntelliJ IDEA. Maven 3.0.x or higher (optional) Citrus projects will fit best with Maven (http://maven.apache.org). However it is not required to use Maven. You can also run tests using ANT (http://ant.apache.org/) for instance. Installation Download the latest Citrus release archive Extract the archive into an appropriate location on your local storage Use the ANT tutorial in our tutorials section to find out how to run tests using ANT. Read the Maven tutorial to find out how to integrate the Citrus tests into the Maven build lifecycle Release Notes Each release comes with a complete reference documentation. At the beginning of the reference you will find a section about the changes and notes for this release. For detailed description of changed packages and classes do also consult the provided javadoc. Resources Citrus's source repository is hosted on github.com. You can clone the repository with git://github.com/christophd/citrus.git as URL Find our blog and more interesting articles around Citrus on http://labs.consol.de and checkout the various post categories for selecting a specific topic. http://www.citrusframework.org offers tutorials and more information about Citrus framework. Samples Our sample section is still growing. Nevertheless you can find a sample project called 'FlightBookingService' in our distribution. To build and run the sample applications go to the 'samples' directory and run 'build.xml' script with ANT (ant -p). Licensing Copyright 2006-2016 ConSol* Software GmbH. Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Consulting Just in case you need professional support for Citrus have a look at 'http://www.citrusframework.org/contact.html'. Contact user@citrusframework.org directly for any request or questions (or use the contact form at 'http://www.consol.com/contact/') Bugs Please report any bugs and/or feature requests to dev@citrusframework.org or directly to http://github.com/christophd/citrus/issues Team ConSol* Software GmbH Christoph Deppisch christoph.deppisch@consol.de http://www.citrusframework.org Information For more information on Citrus see www.citrusframework.org, including a complete reference manual. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/christophd/citrus"	"Integration testing framework with focus on client- and serverside messaging."	"true"
"Testing"	"ConcurrentUnit"	"https://github.com/jhalterman/concurrentunit"	"Toolkit for testing multi-threaded and asynchronous applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"115"	"11"	"17"	"GitHub - jhalterman/concurrentunit: Toolkit for testing multi-threaded and asynchronous applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 115 Fork 17 jhalterman/concurrentunit Code Issues 4 Pull requests 0 Wiki Pulse Graphs Toolkit for testing multi-threaded and asynchronous applications 113 commits 3 branches 10 releases 2 contributors Java 95.0% Shell 5.0% Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master uncaught Nothing to show concurrentunit-parent-0.2.0 concurrentunit-0.4.2 concurrentunit-0.4.1 concurrentunit-0.4.0 concurrentunit-0.3.5 concurrentunit-0.3.4 concurrentunit-0.3.3 concurrentunit-0.3.2 concurrentunit-0.3.1 concurrentunit-0.3.0 Nothing to show New pull request Latest commit a9e420e Apr 20, 2016 jhalterman Added a few more badges Permalink Failed to load latest commit information. bin Setup travis to auto-build javadoc Oct 11, 2015 src Removed hamcrest reference from ConcurrentTestCase since unit testing… Apr 20, 2016 .gitignore gitignore updates Jun 18, 2011 .travis.yml Setup travis to auto-build javadoc Oct 12, 2015 CHANGES.md Update docs for 0.4.2 Oct 11, 2015 LICENSE.txt formatting and license updates Jun 18, 2011 README.md Added a few more badges Apr 20, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Oct 11, 2015 README.md ConcurrentUnit A simple, zero-dependency toolkit for testing multi-threaded code. Supports Java 1.6+. Introduction ConcurrentUnit was created to help developers test multi-threaded or asynchronous code. It allows you to perform assertions and wait for operations in any thread, with failures being properly reported back to the main test thread. If an assertion fails, your test fails, regardless of which thread the assertion came from. Usage Create a Waiter Use Waiter.await to block the main test thread. Use the Waiter.assert calls from any thread to perform assertions. Once expected assertions are completed, use Waiter.resume call to unblock the awaiting thread. When your test runs, assertion failures will result in the main thread being interrupted and the failure thrown. If an await call times out before all expected resume calls occur, the test will fail with a TimeoutException. Examples Consider a test for a message bus that delivers messages asynchronously: @Test public void shouldDeliverMessage() throws Throwable {   final Waiter waiter = new Waiter();    messageBus.registerHandler(message -> {     // Called on separate thread     waiter.assertEquals(message, ""foo"");     waiter.resume();   };    messageBus.send(""foo"");    // Wait for resume() to be called   waiter.await(1000); } We can also handle wait for multiple resume calls: @Test public void shouldDeliverMessages() throws Throwable {   final Waiter waiter = new Waiter();    messageBus.registerHandler(message -> {     waiter.assertEquals(message, ""foo"");     waiter.resume();   };    messageBus.send(""foo"");   messageBus.send(""foo"");   messageBus.send(""foo"");    // Wait for resume() to be called 3 times   waiter.await(1000, 3); } If an assertion fails in any thread, the test will fail as expected: @Test(expected = AssertionError.class) public void shouldFail() throws Throwable {   final Waiter waiter = new Waiter();    new Thread(() -> {     waiter.assertTrue(false);   }).start();    waiter.await(); } TimeoutException is thrown if resume is not called before the await time is exceeded: @Test(expected = TimeoutException.class) public void shouldTimeout() throws Throwable {   new Waiter().await(1); } Alternatively As a more concise alternative to using the Waiter class, you can extend the ConcurrentTestCase: class SomeTest extends ConcurrentTestCase {   @Test   public void shouldSucceed() throws Throwable {     new Thread(() -> {       doSomeWork();       threadAssertTrue(true);       resume();     }).start();      await(1000);   } } Assertions ConcurrentUnit's Waiter supports the standard assertions along with Hamcrest Matcher assertions: waiter.assertEquals(expected, result); waiter.assertThat(result, is(equalTo(expected))); Since Hamcrest is an optional dependency, users need to explicitly add it to their classpath (via Maven/Gradle/etc). Other Examples More example usages can be found in the WaiterTest or in the following projects: Atomix Lyra Recurrent ExpiringMap Copycat Additional Notes On await / resume Timing Since it is not always possible to ensure that resume is called after await in multi-threaded tests, ConcurrentUnit allows them to be called in either order. If resume is called before await, the resume calls are recorded and await will return immediately if the expected number of resumes have already occurred. This ability comes with a caveat though: it is not possible to detect when additional unexpected resume calls are made since ConcurrentUnit allows an await call to follow. Docs JavaDocs are available here. License Copyright 2011-2016 Jonathan Halterman - Released under the Apache 2.0 license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jhalterman/concurrentunit"	"Toolkit for testing multi-threaded and asynchronous applications."	"true"
"Testing"	"Cucumber"	"https://github.com/cucumber/cucumber-jvm"	"BDD testing framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1283"	"153"	"1114"	"GitHub - cucumber/cucumber-jvm: Cucumber for the JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 153 Star 1,283 Fork 1,114 cucumber/cucumber-jvm Code Issues 134 Pull requests 38 Wiki Pulse Graphs Cucumber for the JVM https://cucumber.io 3,170 commits 61 branches 49 releases 152 contributors Java 92.2% Scala 3.3% Cucumber 1.5% HTML 0.8% Ruby 0.7% Clojure 0.6% Other 0.9% Java Scala Cucumber HTML Ruby Clojure Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 160-options 306-xstream-converter-table-bug BeforeAndAfterClass android background bool brasmusson-spring-stepdef-injection-error check-unique-junit-descriptions classpath-scheme code-completion configurable-xstream-with-more-examples configurable-xstream cucumber_options_improved custom-converter-in-table duplicate-weirdness encoding-hacks ffbit-spring-txn-chap14 gherkin-2.6.0 gherkin-2.6.2 gherkin-2.7.4 gherkin-2.12 gherkin3-take2 gherkin3 guice-module-simplified hook-reporting improved-transform internal-di issue-339 issue-487-multibyte-class-names ivy java-parallel-example java8-fixes java8-state java8-wip java8 jruby_compat_version junit-4.11 junit-delegates-reporting junit-options junit-reporter-scenario-outline-fix list-of-single-value-conversion master options-refactoring resource-loading resource-refactoring run-android-examples-on-travis sabrahams-jython-i18n shellwords simplify-table-conversion spring-ajax stop-uninterruptible-threads-on-timeout succeed-on-no-features table-transform-simplified tables tap4j tsundberg-master unique-junit-descriptions update_scala_versions win-path-fix world_refactor_1 xstream Nothing to show v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.8 v1.1.7 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0 v1.0.14 v1.0.13 v1.0.12 v1.0.11 v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0.RC24 v1.0.0.RC23 v1.0.0.RC22 v1.0.0.RC21 v1.0.0.RC20 v1.0.0.RC19 v1.0.0.RC16 v1.0.0.RC15 v1.0.0.RC14 v1.0.0.RC13 v1.0.0.RC12 v1.0.0.RC11 v1.0.0.RC10 v1.0.0.RC9 v1.0.0.RC8 v1.0.0.RC7 v1.0.0.RC6 v1.0.0.RC4 v1.0.0.RC1 v1.0.0-RC3 Nothing to show New pull request Latest commit 1327806 May 25, 2016 aslakhellesoy Remove year from Copyright Permalink Failed to load latest commit information. android Fixing squid:S1118 - Utility classes should not have public constructors Dec 25, 2015 clojure [maven-release-plugin] prepare for next development iteration Jul 23, 2015 core Merge branch 'add-plugin-option' of https://github.com/brasmusson/cuc… May 11, 2016 doc Fix JavaDoc stylesheet so it works with Java 7. Closes #457 Mar 11, 2013 examples Merge branch 'master' of https://github.com/holtzermann17/cucumber-jvm … May 11, 2016 gosu Adding examples modules back so their versions get bumped on release Jul 24, 2015 groovy Test added: Fixed NPE in List parameter conversion Mar 31, 2016 guice Merge branch 'staging/Utility-classes-should-not-have-public-construc… May 11, 2016 java Merge branch 'staging/Utility-classes-should-not-have-public-construc… May 11, 2016 java8 Remove accidental temp dependency Oct 13, 2015 jruby [maven-release-plugin] prepare for next development iteration Jul 23, 2015 junit Merge branch 'master' into junit-options May 11, 2016 jython [maven-release-plugin] prepare for next development iteration Jul 23, 2015 needle [maven-release-plugin] prepare for next development iteration Jul 23, 2015 openejb [maven-release-plugin] prepare for next development iteration Jul 23, 2015 osgi The package org.ops4j.pax.exam.util is optional for cucumber-osgi Apr 30, 2016 picocontainer #993 tests for Picocontainer lifecycle management May 18, 2016 rhino Fix global variable leak in Rhino Oct 27, 2015 scala [maven-release-plugin] prepare for next development iteration Jul 23, 2015 spring cucumber-spring test fix Jan 20, 2016 testng Merge branch 'staging/Collection.isEmpty-should-be-used-to-test-for-e… May 11, 2016 weld [maven-release-plugin] prepare for next development iteration Jul 23, 2015 .gitignore Git should ignore the TestNG output directory Apr 15, 2016 .travis-settings.xml Add travis config to deploy snapshots to sonatype. May 22, 2013 .travis.yml Merge branch 'travis-deploy-after-success' of https://github.com/bras… May 11, 2016 CONTRIBUTING.md Modify the release-sign-artifacts. Update Contributing.md Jul 8, 2015 History.md Attribution May 24, 2016 LICENCE Remove year from Copyright May 25, 2016 README.md Add version badge May 2, 2016 cobertura.sh Added cobertura code coverage and started to clean up some cruftiness… May 1, 2012 cobertura.xml Added cobertura code coverage and started to clean up some cruftiness… May 1, 2012 pom.xml remove reference to decommissioned repository.codehaus.org repository Mar 1, 2016 README.md Cucumber-JVM is a pure Java implementation of Cucumber that supports the most popular programming languages for the JVM. You can run it with the tool of your choice. Cucumber-JVM also integrates with all the popular Dependency Injection containers. Documentation Start Here. Hello World Check out the simple cucumber-java-skeleton starter project. Downloading / Installation Install Bugs and Feature requests You can register bugs and feature requests in the Github Issue Tracker. You're most likely going to paste code and output, so familiarise yourself with Github Flavored Markdown to make sure it remains readable. At the very least - use triple backticks: ```java // Why doesn't this work? @Given(""I have (\\d+) cukes in my (.*)"") public void some_cukes(int howMany, String what) {     // HALP! } ```  Please consider including the following information if you register a ticket: What cucumber-jvm version you're using What modules you're using (cucumber-java, cucumber-spring, cucumber-groovy etc) What command you ran What output you saw How it can be reproduced How soon will my ticket be fixed? The best way to have a bug fixed or feature request implemented is to fork the cucumber-jvm repo and send a pull request. If the pull request has good tests and follows the coding conventions (see below) it has a good chance of making it into the next release. If you don't fix the bug yourself (or pay someone to do it for you), the bug might never get fixed. If it is a serious bug, other people than you might care enough to provide a fix. In other words, there is no guarantee that a bug or feature request gets fixed. Tickets that are more than 6 months old are likely to be closed to keep the backlog manageable. Contributing fixes See CONTRIBUTING.md Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cucumber/cucumber-jvm"	"BDD testing framework."	"true"
"Testing"	"Cukes-REST"	"https://github.com/ctco/cukes-rest"	"A collection of Gherkin steps for REST-service testing using Cucumber."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"6"	"4"	"GitHub - ctco/cukes-rest: Cucumber DSL for testing RESTful Web Services Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 10 Fork 4 ctco/cukes-rest Code Issues 9 Pull requests 0 Pulse Graphs Cucumber DSL for testing RESTful Web Services 113 commits 1 branch 13 releases 7 contributors Java 85.2% Groovy 8.3% Cucumber 6.5% Java Groovy Cucumber Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show cukes-rest-all-0.2.12 cukes-rest-all-0.2.11 cukes-rest-all-0.2.10 cukes-rest-all-0.2.9 cukes-rest-all-0.2.8 cukes-rest-all-0.2.7 cukes-rest-all-0.2.6 cukes-rest-all-0.2.5 cukes-rest-all-0.2.4 cukes-rest-all-0.2.3 cukes-rest-all-0.2.2 cukes-rest-all-0.2.1 cukes-rest-all-0.2.0 Nothing to show New pull request Latest commit 2fe5bde Jul 1, 2016 AlexeyBuzdin committed on GitHub Updated a sample Scenario in README.md Permalink Failed to load latest commit information. cukes-rest-loadrunner [maven-release-plugin][skip ci]prepare for next development iteration Jun 27, 2016 cukes-rest-sample [maven-release-plugin][skip ci]prepare for next development iteration Jun 27, 2016 cukes-rest [maven-release-plugin][skip ci]prepare for next development iteration Jun 27, 2016 .editorconfig .editorconfig added Nov 15, 2015 .gitignore Initial project structure Oct 30, 2015 .java-version Initial project structure Oct 30, 2015 LICENSE Initial project structure Oct 30, 2015 README.md Updated a sample Scenario in README.md Jul 1, 2016 cukes-rest-logo.png Added cukes-rest logo to README Nov 2, 2015 pom.xml [maven-release-plugin][skip ci]prepare for next development iteration Jun 27, 2016 README.md cukes-rest takes simplicity of Cucumber and provides bindings for HTTP specification. As a sugar on top, cukes-rest adds steps for storing and using request/response content from a file system, variable support in .features, context inflation in all steps and a custom plug-in system to allow users to add additional project specific content. Feature: Gadgets are great!    Scenario: Should create another Gadget object     Given request body from file gadgets/requests/newGadget.json     And content type is ""application/json""      When the client performs POST request on /gadgets     Then status code is 201     And header Location contains ""http://localhost:8080/gadgets/""      When the client performs GET request on {(header.Location)}     Then status code is 200     And response contains property ""id"" with value other than ""2000""     And response contains property ""name"" with value ""Nexus 9""     And response does not contain property ""updatedDate"" Some pretty slides can be found here! Prerequisites JDK 1.6+ Dependency cukes-rest: core dependency with all you need to get started with the framework <dependency>     <groupId>lv.ctco.cukesrest</groupId>     <artifactId>cukes-rest</artifactId>     <version>${cukes-rest.version}</version> </dependency> cukes-rest-loadrunner: experimental plugin for HP LoadRunner script generation out of cukes-rest test case <dependency>     <groupId>lv.ctco.cukesrest</groupId>     <artifactId>cukes-rest-loadrunner</artifactId>     <version>${cukes-rest.version}</version> </dependency> Getting Started There are two options to start local server with Sample Application: Run SampleApplicaiton.java with following params server server.yml from $MODULE_DIR$ Execute Package/Install Maven phase of the parent project cukes-rest-all Running tests Precondition: in order for all tests to pass successfully, please make sure you started fresh instance of Sample Application. To start a specific Feature/Scenario, either change CucumberOption in RunCukesTest.java or run Feature file directly from you IDE To start all tests run RunCukesTest.java from sub-project cukes-rest-sample To start all tests right from Maven, execute test phase in project cukes-rest-sample Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ctco/cukes-rest"	"A collection of Gherkin steps for REST-service testing using Cucumber."	"true"
"Testing"	"Gatling"	"http://gatling.io/"	"Load testing tool designed for ease of use, maintainability and high performance."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Gatling Project, Stress Tool"	"null"	"null"	"Load testing tool designed for ease of use, maintainability and high performance."	"true"
"Testing"	"GreenMail"	"http://www.icegreen.com/greenmail/"	"In-memory email server for integration testing. Supports SMTP, POP3 and IMAP including SSL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GreenMail GreenMail Examples Deployment FAQ Javadocs Download Development GreenMail Open Source suite of lightweight and sand boxed email servers supporting SMTP, POP3 and IMAP. Currently v1.5.1 About GreenMail GreenMail is an open source, intuitive and easy-to-use test suite of email servers for testing purposes. Typical use cases include mail integration testing or a lightweight sand boxed mail server for development. Supports SMTP, POP3 and IMAP including SSL Prevents accidental email leaking to real mail servers Provides different deployment models, such as a simple standalone JVM process, as a WAR module, as a JBoss GreenMail Service or docker image Easily embeddable in JUnit tests for integration testing Lightweight with few dependencies GreenMail is the first and only library that offers a test framework for both receiving and retrieving emails from Java. Scenarios GreenMail is useful in the following scenarios: Test Your Sending Code System testing an application. GreenMail responds like a regular SMTP server but does not deliver any email, which enables it to be used in real life applications and real test cases. Messages can easily be extracted, verified and modified. Support for SMTPS (SSL) is enabled. GreenMail is an excellent choice for unit testing code that needs to send email with a succinct, efficient (non-polling) way to wait for messages to arrive, retrieve, verify, and modify messages. Note that retrieval of emails can be made with a simple java method or through a provided POP3, IMAP retriever helper class. Alternatively you can use a local client like Thunderbird. The example below is using the GreenMail JUnit rule. See examples for hints on how to use GreenMail without the rule.  @Rule public final GreenMailRule greenMail = new GreenMailRule(ServerSetupTest.SMTP);  @Test public void testSend() throws MessagingException {     GreenMailUtil.sendTextEmailTest(""to@localhost.com"", ""from@localhost.com"",         ""some subject"", ""some body""); // --- Place your sending code here instead     assertEquals(""some body"", GreenMailUtil.getBody(greenMail.getReceivedMessages()[0])); }         Test Your Retrieving Code Again GreenMail can be used for system or unit testing an application needing to use POP3 or IMAP by responding like a standard compliant POP3 or IMAP server. Support for POP3S and IMAPS (SSL) is also enabled. Messages can be placed directly in users mailboxes or by using SMTP. GreenMail ships with helper classes for sending and retrieving. See the javadocs for the Retriever.java class  @Rule public final GreenMailRule greenMail = new GreenMailRule(ServerSetupTest.SMTP_IMAP);  @Test public void testReceive() throws MessagingException {     GreenMailUser user = greenMail.setUser(""to@localhost.com"", ""login-id"", ""password"");     user.deliver(createMimeMessage()); // You can either create a more complex message...     GreenMailUtil.sendTextEmailTest(""to@localhost.com"", ""from@localhost.com"",         ""subject"", ""body""); // ...or use the default messages      assertEquals(2, greenMail.getReceivedMessages().length); // // --- Place your POP3 or IMAP retrieve code here }         Sending and Retrieving GreenMail can easily be configured to use all or a combination of ports, protocols, and bind addresses. For example it's possible to run GreenMail on SMTP, POP3, POP3S and IMAPS ports as easily as only SMTP. Many systems might already be running these servers or don't allow non root users to open the default ports which is why GreenMail ships with a special configuration for testing. Mocking a mail server for your development environment GreenMail provides a JBoss GreenMail service for mocking a mail server for development. It safes you the overhead of either installing a full productive server (like Apache James). Check out the possible deployments as webapp, JBoss Service, standalone or standalone docker image. Implementation The implementation is in 100% Java with only a few library dependencies: javamail.jar - JavaMail API activation.jar - Java Activation Framework, required by JavaMail (provided by JDK since 1.6+) slf4j-api.jar - required for logging via Simple Logging Facade for Java junit.jar - required for easy test setup using Rules Source Code You find the source on GitHub including build instructions. GreenMail is open source released under The Apache 2.0 License. GreenMail's protocol source code is based on a cocktail of Foedus and James. Links The following lists provide helpful links related to GreenMail and email integration testing. Projects extending/wrapping GreenMail: Grails Plugin for GreenMail including REST-like GreenMail control interface and UI Play Plugin for GreenMail including REST-like control interface and UI JCA Adapter for GreenMail Deprecated SourceForge GreenMail project location before migration to GitHub in 2014 Articles&Blogs: Integration Testing IMAP, SMTP and POP3 with GreenMail Run Your Tests With GreenMail - A simple Mail Server Integration Testing Mail function with Greenmail and Spock in Grails Unit testing Java mail code Using the GreenMail Java-based In-Memory MailServer in Integration Tests JavaEmail testing with GreenMail Projects using GreenMail include: Alfresco Mule ESB ... and many more. Tell us about your project :-) Related projects to JavaMail and testing/development: Dumbster, a fake SMTP server Wiser alias Subethasmtp, another test SMTP server Apache James, a full blown enterprise mail server DevNullSmtp Mock-javamail JavaMail Mock2 Collection of IMAP related RFCs Thanks Special thanks to all contributors for feedback and patches! Many thanks to and JetBrains for supporting this project with free OSS licenses! Examples The source code of the examples can be found in the test package of GreenMail (greenmail-core/src/test/java/com/icegreen/greenmail/examples/). Using JUnit (Rule based setup)  /** [See code on GitHub](https://github.com/greenmail-mail-test/greenmail/tree/master/greenmail-core/src/test/java/com/icegreen/greenmail/examples/ExampleRuleTest.java) */ @Rule public final GreenMailRule greenMail = new GreenMailRule(ServerSetupTest.ALL);  @Test             public void testSomething() {     GreenMailUtil.sendTextEmailTest(""to@localhost.com"", ""from@localhost.com"", ""subject"", ""body"");     MimeMessage[] emails = greenMail.getReceivedMessages();     assertEquals(1, emails.length);     assertEquals(""subject"", emails[0].getSubject());     assertEquals(""body"", GreenMailUtil.getBody(emails[0]));     // ... }         Testing your sending code (simple)  /** [See code on GitHub](https://github.com/greenmail-mail-test/greenmail/tree/master/greenmail-core/src/test/java/com/icegreen/greenmail/examples/ExampleSendTest.java) */ GreenMail greenMail = new GreenMail(); //uses test ports by default greenMail.start(); GreenMailUtil.sendTextEmailTest(""to@localhost.com"", ""from@localhost.com"", ""some subject"",                                 ""some body""); // --- Place your sending code here assertEquals(""some body"", GreenMailUtil.getBody(greenMail.getReceivedMessages()[0])); greenMail.stop();         Testing your sending code (advanced)  /** [See code on GitHub](https://github.com/greenmail-mail-test/greenmail/tree/master/greenmail-core/src/test/java/com/icegreen/greenmail/examples/ExampleSendNoRuleAdvTest.java) */ GreenMail greenMail = new GreenMail(ServerSetupTest.ALL); greenMail.start();  //Use random content to avoid potential residual lingering problems final String subject = GreenMailUtil.random(); final String body = GreenMailUtil.random();  sendTestMails(subject, body); // --- Place your sending code here  //wait for max 5s for 1 email to arrive //waitForIncomingEmail() is useful if you're sending stuff asynchronously in a separate thread assertTrue(greenMail.waitForIncomingEmail(5000, 2));  //Retrieve using GreenMail API Message[] messages = greenMail.getReceivedMessages(); assertEquals(2, messages.length);  // Simple message assertEquals(subject, messages[0].getSubject()); assertEquals(body, GreenMailUtil.getBody(messages[0]).trim());  //if you send content as a 2 part multipart... assertTrue(messages[1].getContent() instanceof MimeMultipart); MimeMultipart mp = (MimeMultipart) messages[1].getContent(); assertEquals(2, mp.getCount()); assertEquals(""body1"", GreenMailUtil.getBody(mp.getBodyPart(0)).trim()); assertEquals(""body2"", GreenMailUtil.getBody(mp.getBodyPart(1)).trim());  greenMail.stop();         Testing your retrieving code  /** [See code on GitHub](https://github.com/greenmail-mail-test/greenmail/tree/master/greenmail-core/src/test/java/com/icegreen/greenmail/examples/ExampleReceiveTest.java) */ //Start all email servers using non-default ports. GreenMail greenMail = new GreenMail(ServerSetupTest.ALL); greenMail.start();  //Use random content to avoid potential residual lingering problems final String subject = GreenMailUtil.random(); final String body = GreenMailUtil.random(); MimeMessage message = createMimeMessage(subject, body, greenMail); // Construct message GreenMailUser user = greenMail.setUser(""wael@localhost.com"", ""waelc"", ""soooosecret""); user.deliver(message); assertEquals(1, greenMail.getReceivedMessages().length);  // --- Place your retrieve code here greenMail.stop();         Testing using plain JavaMail for sending/retrieving code  /** [See code on GitHub](https://github.com/greenmail-mail-test/greenmail/tree/master/greenmail-core/src/test/java/com/icegreen/greenmail/examples/ExampleJavaMailTest.java) */ @Rule public final GreenMailRule greenMail = new GreenMailRule(ServerSetupTest.SMTP_IMAP);  @Test             public void testSendAndReceive() throws MessagingException, ... {     Session smtpSession = greenMail.getSmtp().createSession();      Message msg = new MimeMessage(smtpSession);     msg.setFrom(new InternetAddress(""foo@example.com""));     msg.addRecipient(Message.RecipientType.TO,             new InternetAddress(""bar@example.com""));     msg.setSubject(""Email sent to GreenMail via plain JavaMail"");     msg.setText(""Fetch me via IMAP"");     Transport.send(msg);      // Create user, as connect verifies pwd     greenMail.setUser(""bar@example.com"", ""bar@example.com"", ""secret-pwd"");      // Alternative 1: Create session and store or ...     Session imapSession = greenMail.getImap().createSession();     Store store = imapSession.getStore(""imap"");     store.connect(""bar@example.com"", ""secret-pwd"");     Folder inbox = store.getFolder(""INBOX"");     inbox.open(Folder.READ_ONLY);     Message msgReceived = inbox.getMessage(1);     assertEquals(msg.getSubject(), msgReceived.getSubject());     ...      // Alternative 2: ... let GreenMail create and configure a store:     IMAPStore imapStore = greenMail.getImap().createStore();     imapStore.connect(""bar@example.com"", ""secret-pwd"");     inbox = imapStore.getFolder(""INBOX"");     inbox.open(Folder.READ_ONLY);     msgReceived = inbox.getMessage(1);     ...      // Alternative 3: ... directly fetch sent message using GreenMail API     assertEquals(1, greenMail.getReceivedMessagesForDomain(""bar@example.com"").length);     msgReceived = greenMail.getReceivedMessagesForDomain(""bar@example.com"")[0];     ... }         Deployment Run GreenMail as standalone java application Running GreenMail as a standalone process is useful if you want a simple sand boxed mail server. All you require is a compatible JRE and the standalone JAR. The standalone JAR already contains all dependencies and a default logging. You can configure GreenMail by setting system properties Starting GreenMail standalone  java [OPTIONS] -jar greenmail-standalone.jar                 GreenMail standalone configuration options Option Description -Dgreenmail.setup.all Uses ServerSetup.ALL configuration to start all default mail services using default ports: SMTP : 25 SMTPS : 465 IMAP : 143 IMAPS : 993 POP3 : 110 POP3S : 995 -Dgreenmail.setup.all -Dgreenmail.setup.test.all Uses ServerSetupTest.ALL configuration to start all default mail services using default ports including offset of 3000: SMTP : 3025 SMTPS : 3465 IMAP : 3143 IMAPS : 3993 POP3 : 3110 POP3S : 3995 -Dgreenmail.setup.test.all -Dgreenmail.PROTOCOL.hostname Configures the hostname (or IP bind address) and activates a server for given protocol. Protocol can be one of smtp smtps imap imaps pop3 pop3s -Dgreenmail.smtp.hostname=127.0.0.1 -Dgreenmail.smtp.port=3025 Note: Requires -Dgreenmail.PROTOCOL.port option! -Dgreenmail.PROTOCOL.port Configures the port for given protocol. Protocol can be one of smtp smtps imap imaps pop3 pop3s -Dgreenmail.smtp.port=3025 -Dgreenmail.smtp.hostname=127.0.0.1 Note: Requires -Dgreenmail.PROTOCOL.hostname option! -Dgreenmail.hostname Configures the default hostname or ip bind address. Note: Hostnames must be DNS resolvable! Note: Default hostname is 127.0.0.1 -Dgreenmail.smtp.port=3025 -Dgreenmail.imap.port=3143 -Dgreenmail.hostname=0.0.0.0 -Dgreenmail.users=user1[, ..., userN] Configures the user mail boxes including password. The list of users is comma separated. A single user is of format logon:password[@domain] , where the domain part is optional. Note: Domain must be DNS resolvable! -Dgreenmail.users=foo:pwd@bar.com,jabber:wocky@monster.local,foo1:bar -Dgreenmail.auth.disabled Disables user authentication check, so that any password works. Useful if you do not want to preconfigure user/passwords. GreenMail automatically creates non existent users. Example: -Dgreenmail.auth.disabled -Dlog4j.configuration Configures log4j using given configuration file. By default, GreenMail standalone runner uses a provided log4j configuration packed into the standalone ueber JAR. This options allows you to override the default log4j configuration by providing your own log4j configuration file. Example: -Dlog4j.configuration=file:///tmp/log4j.xml GreenMail standalone examples Test setup for SMTP/IMAP and one user Starts GreenMail for SMTP (test port 3025) and IMAP (test port 3143) using localhost/127.0.0.1 and a single user test1 with password pwd1 and email test1@localhost :  java -Dgreenmail.setup.test.smtp -Dgreenmail.setup.test.imap \      -Dgreenmail.users=test1:pwd1 -jar greenmail-standalone.jar                 Test setup for SMTP(S)/IMAP(S)/POP3(S) and two user Starts GreenMail for SMTP (test port 3025), SMTPS (test port 3465), IMAP (test port 3143), IMAPS (test port 3993), POP3 (test port 3110) and POP3S (test port 3995) using localhost/127.0.0.1 :  java -Dgreenmail.setup.test.all -Dgreenmail.users=test1:pwd1,test2:pwd2@example.com \      -jar greenmail-standalone.jar                 Test setup for SMTP(S)/IMAP(S)/POP3(S), one user and bound to 0.0.0.0 Starts GreenMail for SMTP (test port 3025), SMTPS (test port 3465), IMAP (test port 3143), IMAPS (test port 3993), POP3 (test port 3110) and POP3S (test port 3995) using 0.0.0.0 :  java -Dgreenmail.setup.test.all -Dgreenmail.users=test1:pwd1 \      -Dgreenmail.hostname=0.0.0.0 \      -jar greenmail-standalone.jar                 SMTP only Starts GreenMail with directly configured SMTP on 127.0.0.1:4025  java -Dgreenmail.smtp.hostname=127.0.0.1 -Dgreenmail.smtp.port=4025 \      -jar greenmail-standalone.jar                 Deploy as a standalone Docker image GreenMail provides a pre-configured Docker image running GreenMail standalone. The image is available via Docker Hub Public Repository, but you can also build it yourself using our Dockerfile. By default GreenMail standalone runs using the GreenMail test setup, using the following ports (default ports plus offset of 3000): Port Description 3025 SMTP 3110 POP3 3143 IMAP 3465 SMTPS 3993 IMAPS 3995 POP3S Using docker to run the image  docker pull greenmail/standalone:1.5.1 docker run -t -i -p 3025:3025 -p 3110:3110 -p 3143:3143 \                  -p 3465:3465 -p 3993:3993 -p 3995:3995 \                  greenmail/standalone                 You might want to modify your mapped ports. If you want to test it, you can do a quick check with telnet (or any other mail program) by connecting to the exposed SMTP port and checking if GreenMail SMTP server responds: Deploy as a webapp (WAR) GreenMail Webapp provides a lightweight Java web application wrapping GreenMail mail server. Like the GreenMail JBoss Service, the usage scenario is a development or test environment where a real mail server is too much overhead. The webapp is application server neutral - you should be able to use it on any JEE application server running und Java 5. With the GreenMail mail service each developer has its own local mail server sandbox - so there's no danger for accidentally leaking test mails into the Internet. Deploy the webapp Simply deploy the webapp like any other Java web application. For Tomcat, just drop the webapp into $CATALINA_HOME/webapps directory. Alternatively, you can create a $CATALINA_HOME/webapps/greenmail, unpack the WAR here and configure the GreenMail service. Configure the webapp You can configure the active mail services and available users by editing WEB-INF/web.xml in the WAR file and modifying the context params. A ServletContextListener starts and stops the GreenMail service when deploying/undeploying. Context Parameters Name Description greenmail.defaultHostname The mail server default hostname (defaults to localhost). greenmail.portOffset Offset added to the standard mail ports. Default is 10000 (so an activated SMTP service would start up on port 10025). greenmail.<PROTOCOL> Starts a server for this mail protocol (using defaultHostname, port offset and default port). Available protocol names include smtp smtps (SMTP via SSL) pop3 pop3s (POP3 via SSL) imap imaps (IMAP via SSL) greenmail.<PROTOCOL>.host Optionally overwrites the default host name (localhost). greenmail.<PROTOCOL>.port Optionally overwrites the default port and port offset for the given protocol. greenmail.users A whitespace/newline/comma separated list of mail users in the form of USER:PWD@DOMAIN. Have a look at the default web.xml. Deploy as a JBoss Service (SAR) GreenMail provides a JBoss Service for easy JBoss integration. The usage scenario is a development or test environment where a real mail server is too much overhead. With the GreenMail mail service each developer has its own local mail server sandbox - so there's no danger for accidentally leaking test mails into the Internet. GreenMail SAR works only up to JBoss AS 6! JBoss introduced a not backward compatible change to the SAR MBean deployment in JBoss AS 7+. As alternative, try out the GreenMail WAR deployment. Deploy the service Download the current service which we distribute as a JBoss SAR (Service Archive). Unjar the service to your server deploy directory. This example uses the default server, where the service is deployed in exploded mode for follow up configuration.  cd ${JBOSS_HOME}/server/default/deploy mkdir greenmail-jboss-service.sar cd greenmail-jboss-service.sar jar xvf /path/to/greenmail-jboss-service-XXX.jar                         Starting JBoss will now automatically also start the GreenMail JBoss Service. You can see a startup message on the console output, including basic configuration data like active protocols and their ports: Opening the JBoss Console, you can see the GreenMail Service JMX Bean: You find two entries, of which the second one holds our interest: loader=greenmail-jboss-service : A loader for isolated class loading inside the JBoss service (as to prevent the greenmail JavaMail to conflict with the application server version). name=GreenMail,type=service,version=... : The GreenMail service bean for managing GreenMail Configurable user accounts The GreenMail service is configured by the file META-INF/jboss-service.xml in the exploded service directory. Send a mail message via JMX Open the JBoss JMX Console in your browser (see the deployment picture). Select the JMX bean of name GreenMail and type service Invoke the sendMail operation: The mail should now be visible by listing the user mails, if there is no automatic polling of the mail box. Send a mail message using your mail client You can use your favorite mail client if you configure it for GreenMail by setting the outgoing mail to the GreenMail SMTP port. By default this is localhost:3025. Of course you can also read created mail by configuring your mail client to use GreenMail POP3 (localhost:3110) or IMAP (localhost:3143). You will probably have to adjust these settings for your specific configuration. List mails for a user via JMX Instead of using your favourite mail client, you can use the JMX GreenMail service for listing all current mails in of a user in the GreenMail server sandbox. Open your browser with the JMX Console and choose the GreenMail service (see sending mail paragraph) Enter the user email for the listMailsForUserHTML operation: Click the invoke button. The browser now shows all emails for the specified user: Note that displaying mails does not modify the user mail box. FAQ How come I don't have to create any accounts to send/retrieve? By default GreenMail accepts all incoming emails. If there is no corresponding existing email account, one is automatically created with login and password being the same as the to-address. What other library dependencies are there? Check out the Maven POM. Dependencies include javamail.jar and activation.jar slf4j-api.jar (for logging) junit.jar (for test rules) How come I don't need to install any SSL/TLS related certificates? GreenMail is designed to be used out of the box with no need to generate, sign or install any certificates into your keystore. GreenMail ships with a builtin keystore with a self signed RSA key. Refer to the source code of DummySSLServerSocketFactory for details. How can I use IMAP quotas? GreenMail supports IMAP quota. Quota capbility can be toggled on and off. For details see ImapServerTest.java quota test How can I create or delete a mail user?  GreenMail greenMail = ... // Create user with login id equals email GreenMailUser user1 = greenMail.setUser(""foo@localhost"", ""some secret pwd""); // Create user with login id different than email GreenMailUser user2 = greenMail.setUser(""foo@localhost"", ""login-id"", ""some secret pwd""); ... greenMail.getManagers().getUserManager().deleteUser(user1); // Delete user  Download Maven Central contains all GreenMail artifacts. Docker images are availalbe on Docker Hub GreenMail Repository, such as for the GreenMail standalone runner. 1.5.1 - July 10th, 2016 This version requires JDK 1.7+ and JavaMail 1.5+ . Name GAV GreenMail Core com.icegreen:greenmail:1.5.1 GreenMail Standalone com.icegreen:greenmail-standalone:1.5.1 (Docker Hub) GreenMail Webapp com.icegreen:greenmail-webapp:1.5.1:war GreenMail JBoss Service com.icegreen:greenmail-jboss-service:1.5.1:jboss-sar GreenMail Spring com.icegreen:greenmail-spring:1.5.1 Latest and recommended version is available via Maven repository or as a ZIP from GitHub. 1.5.0 - March 19th, 2016 This version requires JDK 1.7+ and JavaMail 1.5+ . Name GAV GreenMail Core com.icegreen:greenmail:1.5.0 GreenMail Standalone com.icegreen:greenmail-standalone:1.5.0 (Docker Hub) GreenMail Webapp com.icegreen:greenmail-webapp:1.5.0:war GreenMail JBoss Service com.icegreen:greenmail-jboss-service:1.5.0:jboss-sar GreenMail Spring com.icegreen:greenmail-spring:1.5.0 Latest and recommended version is available via Maven repository or as a ZIP from GitHub. 1.4.1 - April 27th, 2015 This version requires JDK 1.6+ and JavaMail 1.5+ . Name GAV GreenMail Core com.icegreen:greenmail:1.4.1 GreenMail Webapp com.icegreen:greenmail-webapp:1.4.1:war GreenMail JBoss Service com.icegreen:greenmail-jboss-service:1.4.1:jboss-sar GreenMail Spring com.icegreen:greenmail-spring:1.4.1 Download bundle as ZIP from GitHub. 1.4.0 - October 29th, 2014 This version requires JDK 1.6+ and JavaMail 1.5+ . Name GAV GreenMail Core com.icegreen:greenmail:1.4.0 GreenMail Webapp com.icegreen:greenmail-webapp:1.4.0:war GreenMail JBoss Service com.icegreen:greenmail-jboss-service:1.4.0:jboss-sar GreenMail Spring com.icegreen:greenmail-spring:1.4.0 Download bundle as ZIP from GitHub. 1.3.1b - June 14th 2009 This version runs on JDK 1.4+ and JavaMail 1.4 . Name GAV GreenMail Core com.icegreen:greenmail:1.3.1b GreenMail JBoss Service com.icegreen:greenmail-jboss-service:1.3.1b:jboss-sar Older versions You can find older version at the old SourceForge download section About Scenarios Implementation Source code Links and resources Thanks Examples Using JUnit (rule based setup) Testing your sending code (simple) Testing your sending code (advanced) Testing your retrieving code Testing using plain JavaMail for sending/retrieving code Deployments Run as a standalone Java process Run as a docker image Deploy as a webapp (WAR) Deploy as a JBoss Service (SAR) Deploying Configure Send a mail message via JMX Send a mail message using your mail client List mails for a user via JMX FAQ Download 1.5.1 1.5.0 1.4.1 1.4.0 1.3.1b Older versions Back to top Back to top © 2009-2016 Icegreen Technologies"	"null"	"null"	"In-memory email server for integration testing. Supports SMTP, POP3 and IMAP including SSL."	"true"
"Testing"	"Hamcrest"	"http://hamcrest.org/JavaHamcrest/"	"Matchers that can be combined to create flexible expressions of intent."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"886"	"88"	"167"	"GitHub - hamcrest/JavaHamcrest: Java (and original) version of Hamcrest Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 88 Star 886 Fork 167 hamcrest/JavaHamcrest Code Issues 28 Pull requests 10 Wiki Pulse Graphs Java (and original) version of Hamcrest http://hamcrest.org/ 616 commits 6 branches 9 releases 18 contributors Java 99.8% HTML 0.2% Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master revert-123-pr-map-matchers v2.x v2.0.0.0 v7.0 Nothing to show hamcrest-java-1.3 hamcrest-java-1.3RC4 hamcrest-java-1.3RC3 hamcrest-java-1.3RC2 hamcrest-java-1.3RC1 hamcrest-java-1.3RC0 hamcrest-java-1.2 hamcrest-java-1.1 hamcrest-java-1.0 Nothing to show New pull request Latest commit 8f9372a May 20, 2016 sf105 Remove warning. more readable test names. test for inherited fields Permalink Failed to load latest commit information. doc/images rename logo image Jul 18, 2012 gradle/wrapper added test for boolean properties Apr 6, 2016 hamcrest-core Remove warning. more readable test names. test for inherited fields Jun 6, 2016 hamcrest-library Remove warning. more readable test names. test for inherited fields Jun 6, 2016 .gitignore ignore gradle properties Apr 6, 2016 .travis.yml added workaround for broken openjdk7 on travis Apr 6, 2016 BUILDING.txt Added Gradle wrapper so the build instructions are correct. Apr 7, 2015 CHANGES.txt updated changes file Jan 2, 2015 LICENSE.txt Corrected typo in year in license Jan 22, 2015 README.md Fixing up README Jan 2, 2015 build.gradle Merge pull request #98 from josephw/use-osgi-plugin-to-make-jar-into-… Apr 7, 2016 build.xml.original renamed build.xml out of the way Dec 18, 2014 gradlew Added Gradle wrapper so the build instructions are correct. Apr 7, 2015 gradlew.bat Added Gradle wrapper so the build instructions are correct. Apr 7, 2015 README.md Java Hamcrest Licensed under BSD License. What is Hamcrest? Hamcrest is a library of matchers, which can be combined in to create flexible expressions of intent in tests. They've also been used for other purposes. Downloads You can obtain Hamcrest binaries from maven central, or from [google code downloads][]. Extensions For Hamcrest extension projects see the hamcrest extensions page. Documentation Documentation can be found on the Hamcrest site. Reporting Bugs/Issues If you find an issue with Java Hamcrest, please report it via the GitHub issue tracker, after first checking that it hasn't been raised already. Source To build, please read BUILDING.txt Acknowledgements Developers: Joe Walnes Nat Pryce Steve Freeman Contributors: Robert Chatley Tom White Neil Dunn Dan North Magne Rasmussen David Saff Tom Denley Also, thanks to everyone who has worked on DynaMock, nMock, jMock, EasyMock and MiniMock! These libraries inspired Hamcrest. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hamcrest/JavaHamcrest"	"Matchers that can be combined to create flexible expressions of intent."	"true"
"Testing"	"J8Spec"	"https://github.com/j8spec/j8spec/"	"J8Spec is a library that allows tests written in Java to follow the BDD style introduced by RSpec and Jasmine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"3"	"1"	"GitHub - j8spec/j8spec: Library that allows tests written in Java to follow the BDD style introduced by RSpec and Jasmine. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 35 Fork 1 j8spec/j8spec Code Issues 0 Pull requests 0 Wiki Pulse Graphs Library that allows tests written in Java to follow the BDD style introduced by RSpec and Jasmine. https://j8spec.github.io 254 commits 47 branches 3 releases 1 contributor Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags access-modifiers allow-more-before-all-blocks allow-more-before-each-blocks bad-spec-feedback before-all build-tool-setup ci-mode ci-upload-archives context-alias does-allow-describe-with-same-description exceptions expected-exception fdescribe fit fix-before-after-all-hooks fix-context-name-clash fix-junit-runner-ignored-event fix-one-time-hook-upon-exception gh-pages gradlew hooks it-block-with-no-before-each javadoc junit-custom-description junit-runner let-constructions license master random-order readme-update refactoring-class-names refactoring-spec-reading refactoring-unit-tests release-1.0.0 release-1.1.0-snapshot release-2.0.0-snapshot release-2.0.0 release-2.1.0-snapshot release-3.0.0 release-3.1.0-snapshot timeout unsafe-wrapper update-build-status-link update-readme upload-archives-setup xdescribe xit Nothing to show v3.0.0 v2.0.0 v1.0.0 Nothing to show New pull request Latest commit ce941d5 Apr 9, 2016 tprado Merge pull request #55 from j8spec/fix-before-after-all-hooks … Fix before and after all hooks Permalink Failed to load latest commit information. gradle/wrapper Upgrade gradle to 2.12 Apr 7, 2016 src Refactor example tryToExecute method Apr 8, 2016 .gitignore Sets up Gradle. May 22, 2015 .travis.yml Includes gradle wrapper. Jul 25, 2015 LICENSE Adds LICENSE file. Jun 1, 2015 README.md Migrate to j8spec organization Mar 23, 2016 build.gradle Mark JAR as sealed Apr 1, 2016 gradlew Includes gradle wrapper. Jul 25, 2015 gradlew.bat Includes gradle wrapper. Jul 25, 2015 secrets.tar.enc Prepares artifacts to be published. May 31, 2015 README.md J8Spec J8Spec is a library that allows tests written in Java to follow the BDD style introduced by RSpec and Jasmine. More details here: j8spec.github.io. How to build it Requirements: JDK 8 Then run: $ cd j8spec $ ./gradlew  That's it. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/j8spec/j8spec/"	"J8Spec is a library that allows tests written in Java to follow the BDD style introduced by RSpec and Jasmine."	"true"
"Testing"	"JBehave"	"http://jbehave.org/"	"Framework for Behavioural Driven Development."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"What is JBehave? About What is JBehave? Introduction to BDD License Download How to Contribute Tutorials Users' Experiences Reference Guides Core Stable Core Preview Core Latest Web Stable Web Preview Web Latest IDE Integration Eclipse Integration Eclipse Updates Project Info Mailing Lists Issue Tracking Team list What is JBehave? JBehave is a framework for Behaviour-Driven Development (BDD). BDD is an evolution of test-driven development (TDD) and acceptance-test driven design, and is intended to make these practices more accessible and intuitive to newcomers and experts alike. It shifts the vocabulary from being test-based to behaviour-based, and positions itself as a design philosophy. The five-step overview A quick overview in five steps. Clicking on each steps will show more details. Want to learn more? Refer to the reference guides (via the menu on the left-hand side) for the detailed documentation on the Core and Web Distributions. You can get started on the introduction. Version 3.3-SNAPSHOT published on 25/05/2015 © 2003-2015"	"null"	"null"	"Framework for Behavioural Driven Development."	"true"
"Testing"	"JGiven"	"http://jgiven.org"	"Developer-friendly BDD testing framework compatible with JUnit and TestNG."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"88"	"23"	"22"	"GitHub - TNG/JGiven: Behavior-Driven Development in plain Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 88 Fork 22 TNG/JGiven Code Issues 22 Pull requests 1 Pulse Graphs Behavior-Driven Development in plain Java http://jgiven.org 787 commits 7 branches 42 releases Fetching contributors Java 87.3% JavaScript 7.0% HTML 3.9% CSS 1.7% Shell 0.1% Java JavaScript HTML CSS Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags RELEASE-0.8.3 RELEASE-0.8.4 albertofaci-master cucumber fix-overriding-before-stage gh-pages master Nothing to show v0.11.4 v0.11.3 v0.11.2 v0.11.1 v0.11.0 v0.10.1 v0.10.0 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.2 v0.1.7 v0.1.6 v0.1.3 v0.1 jgiven-parent-0.2.4 jgiven-parent-0.2.3 jgiven-parent-0.2.2 jgiven-parent-0.2.1 0.10.1 0.3.0 Nothing to show New pull request Latest commit d34b474 Jul 12, 2016 janschaefer committed on GitHub Merge pull request #215 from Airblader/feature-189 … Extend @As with a provider mechanism. Permalink Failed to load latest commit information. develop introduce checkstyle Aug 17, 2014 examples add scala example Jan 24, 2016 gradle/wrapper Do not use Paranamer library for Java 8. (Fixes #85) Jul 2, 2015 jgiven-core Added a test for using a custom AsProvider with @As. Jul 12, 2016 jgiven-examples Allow tag annotations on stage classes and step methods. Jul 6, 2016 jgiven-html5-report implement new attribute showInNavigation for the IsTag annotation (fi… Jul 3, 2016 jgiven-java8-tests Initial work to enable the parallel execution of testng data providers ( Aug 28, 2015 jgiven-junit Allow tag annotations on stage classes and step methods. Jul 6, 2016 jgiven-maven-plugin fix bug in the maven plugin where the customJsFile parameter set the … Nov 11, 2015 jgiven-scala bump version to 0.12.0-SNAPSHOT May 17, 2016 jgiven-spring Support multiple attachments per step (fixes #194) Jun 19, 2016 jgiven-testng Implement handling of child stages (#202) May 16, 2016 jgiven-tests Support multiple attachments per step (fixes #194) Jun 19, 2016 scripts prepare next release Nov 1, 2015 .gitignore add scala example Jan 24, 2016 .travis.yml speedup travis by caching gradle artefacts and using containerized in… Oct 31, 2015 AUTHORS Update AUTHORS Jul 9, 2015 CHANGELOG.md Extend @As with a provider mechanism. Jul 11, 2016 CONTRIBUTING.md added CONTRIBUTING file Aug 8, 2015 LICENSE added copyright to LICENSE Nov 6, 2014 README.md add gitter badge to readme Jan 23, 2016 build.gradle introduce quickcheck and fix #177 Dec 22, 2015 gradle.properties bump version to 0.12.0-SNAPSHOT May 17, 2016 gradlew added Gradle wrapper (#39) Oct 27, 2014 gradlew.bat added Gradle wrapper (#39) Oct 27, 2014 settings.gradle Introduce new 'style' attribute for '@IsTag' annotation Aug 8, 2015 shippable.yml add shippable file Aug 19, 2014 README.md JGiven is a developer-friendly and pragmatic BDD tool for Java. Developers write scenarios in plain Java using a fluent, domain-specific API, JGiven generates reports that are readable by domain experts. Why another BDD tool? Behavior-Driven Development (BDD) is a development method where business analysts, developers, and testers describe the behavior of a software product in a common language and notation. Behavior is typically described in terms of scenarios, which are written in the Given-When-Then notation. The common language and notation is one cornerstone of BDD. The other cornerstone is that the defined scenarios are executable, form a comprehensive test suite, and a living documentation for the software product. In classical BDD tools for Java like JBehave or Cucumber scenarios are written in plain text files. This allows non-developers to write scenarios, because no programming knowledge is required. To make scenarios executable, developers write so-called step-implementations. To bind plain text to step implementations regular expressions are used. For developers maintaining these executable scenarios has a high overhead that is not required if tests would be directly written in a programming language. Beside the classical BDD tools there are a number of tools for Java to write BDD tests in a programming language like Groovy (easyb) or Scala (ScalaTest). To our knowledge, however, there is no BDD tool where scenarios can be written in plain Java. Finally, there are specification testing frameworks like Spock (Groovy) or LambdaBehave which are very developer-centric and good for unit-testing, but the generated reports are not in Given-When-Then form and are not easily readable by non-developers. BDD with JGiven Scenarios are written in standard Java code using a fluent, domain-specific API (no extra language like Scala or Groovy needed, no IDE plugin needed) Java method names and parameters are parsed during test execution (no extra annotations needed) Scenarios are executed by either JUnit or TestNG (no extra test runner needed) Scenarios consist of so-called stages, which share state by injection, providing a modular way of writing Scenarios. JGiven generates scenario reports for business owners and domain experts Example @Test public void a_pancake_can_be_fried_out_of_an_egg_milk_and_flour() {     given().an_egg().         and().some_milk().         and().the_ingredient( ""flour"" );      when().the_cook_mangles_everything_to_a_dough().         and().the_cook_fries_the_dough_in_a_pan();      then().the_resulting_meal_is_a_pancake(); } The above test can be executed like any JUnit test. During the execution, JSON files are generated that can then be used afterwards to generated test reports. By default, a plain text report is shown in the console, which would look as follows: Scenario: a pancake can be fried out of an egg milk and flour    Given an egg     And some milk     And the ingredient flour    When the cook mangles everything to a dough     And the cook fries the dough in a pan    Then the resulting meal is a pancake  In addition, you can generate a HTML Report. Getting Started Start by reading the documentation section on JGiven's website. See the talk on JGiven held on the TNG Big TechDay Java 8 Note If you are using Java 8 and JGiven version < 0.8.1, you should compile your test code with the -parameters option of the javac compiler. Otherwise JGiven cannot obtain the parameter names of step methods and will generate generic names of the form argX instead. License JGiven is published under the Apache License 2.0, see http://www.apache.org/licenses/LICENSE-2.0 for details. Contributing See CONTRIBUTING Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TNG/JGiven"	"Developer-friendly BDD testing framework compatible with JUnit and TestNG."	"true"
"Testing"	"JMockit"	"http://jmockit.org/"	"Mocks static, final methods and more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"149"	"29"	"100"	"GitHub - jmockit/jmockit1: Codebase for JMockit 1.x releases Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 149 Fork 100 jmockit/jmockit1 Code Issues 17 Pull requests 2 Pulse Graphs Codebase for JMockit 1.x releases 735 commits 1 branch 0 releases Fetching contributors Java 99.6% Other 0.4% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f9cd28a Jul 9, 2016 rliesenfeld Upgraded JUnit 5 dependencies to version 5.0.0-M1. Permalink Failed to load latest commit information. coverageTests Increased version number to 1.26. Jun 30, 2016 main Upgraded JUnit 5 dependencies to version 5.0.0-M1. Jul 9, 2016 samples Upgraded JUnit 5 dependencies to version 5.0.0-M1. Jul 9, 2016 ISSUE_TEMPLATE.txt Create ISSUE_TEMPLATE.txt Feb 24, 2016 LICENSE.txt Removed end year from copyright notices. Jan 16, 2016 NOTICE.txt Updated version of ASM in ""notice"" file. Sep 20, 2014 README.md Updated README. Jun 25, 2016 tasks.xml Updated JUnit 5 integration to latest ""Jupiter"" and ""Platform"" APIs. Jun 25, 2016 version.txt Increased version number to 1.26. Jul 1, 2016 README.md Codebase for JMockit 1.x releases - Documentation - Release notes How to build the project: use JDK 1.8 use Maven 3.3.1 or newer; the following are the top-level modules: main/pom.xml builds jmockit-1.n.jar, running JUnit and TestNG test suites coverageTests/pom.xml runs JUnit tests for the coverage tool others in samples dir various sample test suites Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jmockit/jmockit1"	"Mocks static, final methods and more."	"true"
"Testing"	"junit-dataprovider"	"https://github.com/TNG/junit-dataprovider"	"A TestNG like dataprovider runner for JUnit."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"90"	"21"	"18"	"GitHub - TNG/junit-dataprovider: A TestNG like dataprovider runner for JUnit Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 90 Fork 18 TNG/junit-dataprovider Code Issues 7 Pull requests 0 Wiki Pulse Graphs A TestNG like dataprovider runner for JUnit 328 commits 2 branches 23 releases 8 contributors Java 99.3% Groovy 0.7% Java Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master rules.acceptance.test Nothing to show v1.11.0 v1.10.4 v1.10.3 v1.10.2 v1.10.1 v1.10.0 v1.9.4 v1.9.3 v1.9.2 v1.9.1 v1.9.0 v1.8.0 v1.7.0 v1.6.0 v1.5.2 v1.5.1 v1.5.0 v1.4.1 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit b092400 Apr 12, 2016 aaschmid use Gradles OSGi plugin to create ""MANIFEST.MF"" (#56) Permalink Failed to load latest commit information. gradle/wrapper updated to gradle-wrapper version 2.3 Feb 17, 2015 src adding additional acceptance test for using lists as arguments (#77) Apr 12, 2016 .gitignore ant and mvn should execute tests using different filters Apr 26, 2014 .travis.yml To use new container based travis-ci infrastructur sudo must be false Oct 24, 2015 CONTRIBUTING.md added CONTRIBUTING.md as it is shown in GitHub on opening an issue Aug 31, 2014 LICENSE.TXT added LICENSE.TXT with Apache License 2.0 to fix #13 Mar 4, 2014 README.md added varargs link Jul 7, 2015 build.gradle use Gradles OSGi plugin to create ""MANIFEST.MF"" (#56) Apr 12, 2016 build.xml separated unit and integration / acceptance tests into separate sourc… Dec 29, 2015 gradlew added gradle wrapper 1.5 May 3, 2013 gradlew.bat added gradle wrapper 1.5 May 3, 2013 pom.xml prepared release of 1.11.0 Apr 12, 2016 README.md junit-dataprovider Have a look to this repositories Wiki pages for documenation, usage examples and further information. Table of contents Home What is it Contributing Motivation, Distinction and FAQs Getting started Requirements Download Usage Features Array syntax String syntax List syntax Change @DataProvider location Varargs support @BeforeClass support Customize test method name Access FrameworkMethod in @DP Utility methods Release Notes Eclipse Template Contributing You are very welcome to contribute by providing a patch/pull request, see CONTRIBUTING.md for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TNG/junit-dataprovider"	"A TestNG like dataprovider runner for JUnit."	"true"
"Testing"	"JUnitParams"	"https://pragmatists.github.io/JUnitParams/"	"Creation of readable and maintainable parametrised tests."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Junitparams View on GitHub Junitparams Parameterised tests that don't suck Download this project as a .zip file Download this project as a tar.gz file JUnitParams Parameterised tests that don't suck Example   @Test   @Parameters({""17, false"",                 ""22, true"" })   public void personIsAdult(int age, boolean valid) throws Exception {     assertThat(new Person(age).isAdult(), is(valid));   } About JUnitParams project adds a new runner to JUnit and provides much easier and readable parametrised tests for JUnit >=4.6. Main differences to standard JUnit Parametrised runner: more explicit - params are in test method params, not class fields less code - you don't need a constructor to set up parameters you can mix parametrised with non-parametrised methods in one class params can be passed as a CSV string or from a parameters provider class parameters provider class can have as many parameters providing methods as you want, so that you can group different cases you can have a test method that provides parameters (no external classes or statics anymore) you can see actual parameter values in your IDE (in JUnit's Parametrised it's only consecutive numbers of parameters): Quickstart JUnitParams is available as Maven artifact: <dependency>   <groupId>pl.pragmatists</groupId>   <artifactId>JUnitParams</artifactId>   <version>1.0.5</version> </dependency>  If you want to see just one simple test class with all main ways to use JUnitParams see here: SamplesOfUsageTest.java You can also have a look at Wiki:Quickstart News Latest news are available in our Wiki Junitparams maintained by Pragmatists Published with GitHub Pages"	"null"	"null"	"Creation of readable and maintainable parametrised tests."	"true"
"Testing"	"Mockito"	"https://github.com/mockito/mockito"	"Creation of test double objects in automated unit tests for the purpose of TDD or BDD."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2809"	"202"	"570"	"GitHub - mockito/mockito: Mocking framework for unit tests written in Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 202 Star 2,809 Fork 570 mockito/mockito Code Issues 53 Pull requests 10 Wiki Pulse Graphs Mocking framework for unit tests written in Java http://mockito.org 3,141 commits 6 branches 137 releases 75 contributors Java 98.2% Groovy 1.4% HTML 0.4% Java Groovy HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags code-cov-on-releases deprecate-whitebox gh-pages listener master release-candidate Nothing to show v2.0.86-beta v2.0.85-beta v2.0.84-beta v2.0.83-beta v2.0.82-beta v2.0.81-beta v2.0.80-beta v2.0.79-beta v2.0.78-beta v2.0.77-beta v2.0.76-beta v2.0.74-beta v2.0.73-beta v2.0.72-beta v2.0.71-beta v2.0.70-beta v2.0.69-beta v2.0.68-beta v2.0.67-beta v2.0.66-beta v2.0.65-beta v2.0.64-beta v2.0.63-beta v2.0.62-beta v2.0.61-beta v2.0.60-beta v2.0.59-beta v2.0.58-beta v2.0.57-beta v2.0.56-beta v2.0.55-beta v2.0.54-beta v2.0.53-beta v2.0.52-beta v2.0.51-beta v2.0.50-beta v2.0.49-beta v2.0.48-beta v2.0.47-beta v2.0.46-beta v2.0.45-beta v2.0.44-beta v2.0.43-beta v2.0.42-beta v2.0.41-beta v2.0.40-beta v2.0.39-beta v2.0.38-beta v2.0.37-beta v2.0.36-beta v2.0.35-beta v2.0.34-beta v2.0.33-beta v2.0.32-beta v2.0.26-beta v2.0.25-beta v2.0.24-beta v2.0.23-beta v2.0.22-beta v2.0.21-beta v2.0.20-beta v2.0.19-beta v2.0.18-beta v2.0.17-beta v2.0.16-beta v2.0.15-beta v2.0.14-beta v2.0.12-beta v2.0.11-beta v2.0.10-beta v2.0.9-beta v2.0.8-beta v2.0.7-beta v2.0.6-beta v2.0.5-beta v2.0.4-beta v2.0.3-beta v2.0.2-beta v2.0.1-beta v2.0.0-beta v1.10.45-dev v1.10.44-dev v1.10.43-dev v1.10.42-dev v1.10.41-dev v1.10.40-dev v1.10.38-dev v1.10.35-dev v1.10.33-dev v1.10.32-dev v1.10.31-dev v1.10.30-dev v1.10.29-dev v1.10.28-dev v1.10.19 v1.10.18 v1.10.17 v1.10.16 v1.10.15 v1.10.14 Nothing to show New pull request Latest commit 56ce32a Jul 12, 2016 continuous-delivery-drone Increment version '2.0.86-beta' -> '2.0.87-beta' by Travis CI build 1… … …019 [ci skip] Permalink Failed to load latest commit information. .github Use the new issue/pr templates Mar 9, 2016 buildSrc Clean up issues reported by IntelliJ Jul 7, 2016 doc ""Update release notes by Travis CI build 1019 [ci skip]"" Jul 12, 2016 gradle Exclude mockito internal packages from the Javadoc Jul 6, 2016 src Moves Reporter friendly exception factory to internal package Jul 12, 2016 subprojects Clean up issues reported by IntelliJ Jul 7, 2016 .checkstyle Additional line ending fixes Jun 6, 2015 .gitattributes Add .gitattributes to enforce LF Jun 4, 2015 .gitignore Adds .eml to ignored files Jun 20, 2015 .travis.yml Added workaround for being able to build using Java 6. Jun 20, 2016 LICENSE added refEq matcher based on reflectionEquals from apache commons lang Jan 27, 2008 README.md Use the new issue/pr templates Mar 9, 2016 build.gradle Updated Byte Buddy to version 1.4.8. Jul 6, 2016 dummy-commit.txt removed HandyReturnValues Jun 17, 2016 gradle.properties Enabled parallel build. Apr 12, 2014 gradlew Upgrade to Gradle 1.8 Dec 4, 2013 gradlew.bat Additional line ending fixes Jun 6, 2015 settings.gradle Activate TestNG module Oct 12, 2012 version.properties Increment version '2.0.86-beta' -> '2.0.87-beta' by Travis CI build 1… Jul 12, 2016 README.md Tasty mocking framework for unit tests in Java Current release See the release notes page and latest documentation. Versioning Mockito has an automated release system, which imposed some change on how the version numbers work. While this is similar to semver, there's some differences. Let's look at the following versions 1.10.19 and 2.0.5-beta and 2.0.0 (not yet released). They follow this scheme: major.minor.build-tag  number meaning major major version, with most probably incompatible change in API and behavior minor minor version, important enough change to bump this number build a released build number incremented automatically when a pull request is merged tag will probably be -beta or just nothing (during beta, breaking changes are expected) That means: 2.0.0 and 2.0.5-beta are binary incompatible with 1.10.19. 2.0.5-beta is the fifth release beta of version 2.0.0. 2.0.5-beta is a work in progress, api may change and may not be graduated in version 2.0.0. Looking for support Go to the mockito mailing-list (moderated) Search / Ask question on stackoverflow How to build? To build locally:  ./gradlew build  To develop in IntelliJ IDEA you can use built-in Gradle import wizard in IDEA. Alternatively generate the importable IDEA metadata files using:  ./gradlew idea  Then, open the generated *.ipr file in IDEA. More information All you want to know about Mockito is hosted at The Mockito Site which is Open Source and likes pull requests, too. Want to contribute? Take a look at the Contributing Guide. Enjoy Mockito! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mockito/mockito"	"Creation of test double objects in automated unit tests for the purpose of TDD or BDD."	"true"
"Testing"	"Moco"	"https://github.com/dreamhead/moco"	"Concise web services for stubs and mocks, Duke's Choice Award 2013."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1332"	"178"	"375"	"GitHub - dreamhead/moco: Easy Setup Stub Server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 178 Star 1,332 Fork 375 dreamhead/moco Code Issues 38 Pull requests 3 Pulse Graphs Easy Setup Stub Server 1,627 commits 1 branch 10 releases 21 contributors Java 98.4% Shell 1.4% Groovy 0.2% Java Shell Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.11.0 v0.10.2 v0.10.1 v0.10.0 v0.9.2 v0.9.1 v0.9 v0.8.1 v0.8 v0.7 Nothing to show New pull request Latest commit bb0ea10 Jul 15, 2016 dreamhead upgraded jackson to 2.8.0 Permalink Failed to load latest commit information. gradle/wrapper upgraded gradle to 2.14 Jun 15, 2016 moco-core/src applied request to post content in request action Jul 14, 2016 moco-doc added server type as a section in command line usage Jul 9, 2016 moco-junit added https pojo runner for junit runner Jun 10, 2016 moco-runner added server type as a section in command line usage Jul 9, 2016 moco-shell Update script to remove expr warning on Mac Aug 7, 2015 .gitignore updated gmoco for #45 Feb 1, 2014 .travis.yml refactored to simplify rest id matcher Jan 19, 2016 MIT-LICENSE.txt welcome to 2015 Jan 6, 2015 README.md added rest api link to readme May 22, 2016 build.gradle upgraded jackson to 2.8.0 Jul 15, 2016 gradle.properties fix rt.jar not found error in mac and more detail setting with proguard. Dec 27, 2013 gradlew upgraded gradle to 2.14 Jun 15, 2016 gradlew.bat upgraded gradle to 2.14 Jun 15, 2016 proguard.pro kept jsons for proguard May 11, 2016 settings.gradle introduced moco junit module Sep 19, 2015 README.md Moco Moco is an easy setup stub framework. Latest Release 0.11.0 More details in Release Notes User Voice Let me know if you are using Moco. Join Moco mailing list to discuss. Why Integration, especially based on HTTP protocol, e.g. web service, REST etc, is wildly used in most of our development. In the old days, we just deployed another WAR to an application server, e.g. Jetty or Tomcat etc. As we all know, it's so boring to develop a WAR and deploy it to any application server, even if we use an embeded server. And the WAR needs to be reassembled even if we just want to change a little bit. Quick Start Download Standalone Moco Runner Write your own configuration file to describe your Moco server configuration as follow: [   {     ""response"" :       {         ""text"" : ""Hello, Moco""       }   } ] (foo.json) Run Moco HTTP server with the configuration file. java -jar moco-runner-<version>-standalone.jar http -p 12306 -c foo.json Now, open your favorite browser to visit http://localhost:12306 and you will see ""Hello, Moco"". Documents More Usages Detailed HTTP APIs or Socket APIs Detailed REST API Global Settings for multiple configuration files. Command Line Usages Build Make sure you have JDK and Gradle installed. Clone Moco git clone git@github.com:dreamhead/moco.git Build Moco ./gradlew build Build uberjar ./gradlew uberjar Check code before commit ./gradlew check Contributing Check out what you can help here if you do not have any existing idea. Copyright and license Copyright 2012-2015 ZHENG Ye Licensed under MIT License (the ""License""); You may obtain a copy of the License in the LICENSE file, or at: https://raw.github.com/dreamhead/moco/master/MIT-LICENSE.txt Powered By Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dreamhead/moco"	"Concise web services for stubs and mocks, Duke's Choice Award 2013."	"true"
"Testing"	"PIT"	"http://pitest.org"	"Fast mutation-testing framework for evaluating fault-detection abilities of existing JUnit or TestNG test-suites."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"359"	"27"	"89"	"GitHub - hcoles/pitest: State of the art mutation testing system for the JVM Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 359 Fork 89 hcoles/pitest Code Issues 77 Pull requests 7 Pulse Graphs State of the art mutation testing system for the JVM 1,104 commits 2 branches 13 releases Fetching contributors Java 99.5% Other 0.5% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master maven_annotations Nothing to show pitest-parent-1.1.10 pitest-parent-1.1.9 pitest-parent-1.1.8 pitest-parent-1.1.7 pitest-parent-1.1.6 pitest-parent-1.1.5 pitest-parent-1.1.4 pitest-parent-1.1.3 pitest-parent-1.1.2 pitest-parent-1.1.1 pitest-parent-1.1.0 pitest-parent-1.0.0 pitest-parent-0.33 Nothing to show New pull request Latest commit 991e58b Jun 27, 2016 hcoles committed on GitHub Merge pull request #280 from caarlos0/warn … When a test doesn't pass, the log should be severe Permalink Failed to load latest commit information. pitest-ant [maven-release-plugin] prepare for next development iteration May 14, 2016 pitest-build-config [maven-release-plugin] prepare for next development iteration May 14, 2016 pitest-command-line [maven-release-plugin] prepare for next development iteration May 14, 2016 pitest-groovy-verification [maven-release-plugin] prepare for next development iteration May 14, 2016 pitest-html-report [maven-release-plugin] prepare for next development iteration May 14, 2016 pitest-java8-verification [maven-release-plugin] prepare for next development iteration May 14, 2016 pitest-maven-verification [maven-release-plugin] prepare for next development iteration May 14, 2016 pitest-maven Fix for #269 - not possible to break build on 1 mutant Jun 5, 2016 pitest this should be a severe log Jun 25, 2016 .gitignore Merge branch 'master' into maven_annotations Dec 1, 2015 .travis.yml Move to new travis infrastructure Nov 30, 2015 LICENSE.txt added licence Jun 16, 2013 README.md Post release cleanup May 14, 2016 code_cleanup_profile.xml stop rewriting parameters to be final May 28, 2015 code_format_profile.xml renamed code_format_profile: added .xml extension required by eclipse… Sep 12, 2011 perform_release.sh make release script executable Jan 19, 2016 pom.xml [maven-release-plugin] prepare for next development iteration May 14, 2016 prepare_release.sh Cleanup after 1.1.7 release Sep 28, 2015 README.md Pitest (aka PIT) is a state of the art mutation testing system for Java and the JVM. Read all about it at http://pitest.org Releases 1.1.11-SNAPSHOT Nothing yet 1.1.10 #260 - Initial support for mutating Kotlin code #264 - Support for yatspec runner (thanks @theangrydev) Break build when more than maxSurviving mutants survive 1.1.9 #132 - Allow analysis of only files touched in last commit (thanks Tomasz Luch) 1.1.8 #239 - Provide a shortcut to set history files via maven #240 - Support for regexes (thanks sebi-hgdata) #243 - Use ephemeral ports to communicate with minions 1.1.7 #196 - Raise minimum java version to 1.6 #231 - Process hangs 1.1.6 #10 - Add maven report goal (thanks jasonmfehr) #184 - Remove undocumented project file feature #219 - Performance improvement for report generation (thanks tobiasbaum) #190 - Allow custom properties for plugins Note this release contains a known issue (#231). Please upgrade. 1.1.5 Fix for #148 - Stackoverflow with TestNG data providers when using JMockit Fix for #56 - Not reporting junit incompatibilities Fix for #174 - Invalid linecoverage.xml with static initializers Fix for #183 - Can't run GWTMockito tests Fix for #179 - Broken includeLaunchClasspath=false on Windows #173 - Read exclusions and groups from maven surefire config 1.1.4 #157 - Support maven -DskipTests flag (thanks lkwg82) Fix for #163 - Should not include test tree in coverage threshold #166 - Allow classpath exclusions for maven plugin (thanks TomRK1089) #155 - Restore Java 5 compatibility Fix for #148 - Issue with JMockit + TestNG (thanks estekhin and KyleRogers) 1.1.3 Fix for #158 - Tests incorrectly excluded from mutants Fix for #153 - SCM plugin broken for maven 2 Fix for #152 - Does not work with IBM jdk 1.1.2 Fix for #150 - line coverage under reported 1.1.1 Block based coverage (fixes 79/131) End support for running on Java 5 (java 5 bytecode still supported) Skip flag for maven modules (#106) Stop declaring TestNG as a dependency New parameter propagation mutator (thanks UrsMetz) 1.1.0 Change scheme for identifying mutants (see https://github.com/hcoles/pitest/issues/125) Support alternate test apis via plugin system Report error when supplied mutator name does not match (thanks artspb) Report exit codes from coverage child process (thanks KyleRogers) Treat JUnit tests with ClassRule annotation as one unit (thanks devmop) Please note that any stored history files or sonar results are invalidated by this release. 1.0.0 Switch version numbering scheme Upgrade to ASM 5.0.2 Fix for #114 - fails to run for java 8 when -parameters flag is set #99 Support additionalClasspathElements property in maven plugin (thanks artspb) #98 Do not mutate java 7 try with resources (thanks @artspb) #109 extended remove conditional mutator (thanks @vrthra) 0.33 Move to Github Upgrade of ASM to support Java 8 bytecode (thanks to ""iirekm"") Partial support for JUnit categories (thanks to ""chrisr"") New Remove Increments Mutator (thanks to Rahul Gopinath) Minor logging improvements (thanks to Kyle Rogers aka Stephan Penndorf) Fix for #92 - broken maven 2 support Fix for #75 - incorrectly ignored tests in classes with both @Ignore and @BeforeClass / @AfterClass 0.32 restores java 7 compatibility new remove conditionals mutator support for mutating static initializers with TestNG properly isolate classpaths when running via Ant break builds on coverage threshold allow JVM to be specified support user defined test selection strategies support user defined output format support user defined test prioritisation fix for issue blocking usage with Robolectric Note, setup for Ant based projects changes in this release. See ant setup for details on usage. 0.31 Maven 2 compatibility restored Much faster line coverage calculation Fix for #78 - Error when PowerMockito test stores mock as member This release also changes a number of internal implementation details, some of which may be of interest/importance to those maintaining tools that integrate with PIT. Mutations are now scoped internally as described in https://groups.google.com/forum/#!topic/pitusers/E0-3QZuMYjE A new class (org.pitest.mutationtest.tooling.EntryPoint) has been introduced that removes some of the duplication that existed in the various ways of launching mutation analysis. 0.30 Support for parametrized Spock tests Support for JUnitParams tests Fix for #73 - JUnit parameterised tests calling mutee during setup failing during mutation phase Fix to #63 - ant task fails when empty options supplied Ability to override maven options from command line Ability to fail a build if it does not achieve a given mutation score Performance improvement when tests use @BeforeClass or @AfterClass annotations Slightly improved scheduling over multiple threads Improved maven multi project support Integration with source control for maven users 0.29 Incremental analysis (--historyInputLocation and --historyOutputLocation) Inlined code detection turned on by default Quieter loggging by default Improved Java 7 support Upgrade of ASM from 3.3 to 4 Fix for concurrency issues during coverage collection Fix for #53 - problems with snapshot junit versions Fix for #59 - duplicate dependencies set via maven 0.28 Inlined finally block detection (--detectInlinedCode) New experimental switch statement mutator (contributed by Chris Rimmer) Do not mutate Groovy classes Fix for #33 - set user.dir to match surefire Fix for #43 - optionally suppress timestamped folders (--timestampedReports=true/false) Fix for #44 - concurrent modification exception when gathering coverage Fix for #46 - incorrect setting of flags by ant task Smaller memory footprint for main process Faster coverage gathering for large codebases Faster classpath scanning for large codebases Support for JUnit 3 suite methods Fixes for incorrect detection of JUnit 3 tests Known issue - Fix for #33 may not resolve issue for maven 2 users. Detection of Groovy code has not yet been tested with Groovy 2 which may generate substantially different byte code to earlier versions. 0.27 Much prettier reports Now avoids mutating assert statements Removed inScopeClasses option - use targetClasses and targetTests instead Fix for 100% CPU usage when child JVM crashes Fix for #35 #38 - experimental member variable mutator now corrects stack Fix for #39 - order of classpath elements now maintained when running from maven Upgrading users may need to modify their build due to removal of the inScopeClasses parameter 0.26 Ant support New experimental mutator for member variables Fix for #12 #27 - no longer hangs when code under test launches non daemon threads Fix for #26 - now warns when no test library found on classpath Fix for #30 - now errors if mutated classes have no line or source debug Fix for #32 - now correctly handles of JUnit assumptions Known issue - The new member variable mutator may cause errors in synchronized errors. The mutator is however disabled by default, and the generated errors are correctly handled by PIT. 0.25 TestNG support (experimental) Fix for issue where mutations in nested classes not isolated from each other Fix for broken classpath isolation for projects using xstream Improved handling of JUnit parametrized tests Ability to limit mutations to specific classpath roots (--mutableCodePaths) Ability to add non launch classpath roots (--classPath) (experimental) Read configuration values from XML (experimental) Option to not throw error when no mutations found Consistent ordering of classes in HTML report Statistics written to console Classes no longer loaded during initial classpath scanning New syntax to easily enable all mutation operations 0.24 JMockit support Option to output results in XML or CSV Fix for #11 Improved INLINE_CONSTS mutator 0.23 Fix for issue 7 - source files not located 0.22 Upgrade of Xstream to 1.4.1 to enable OpenJDK 7 support Fix for #5 - corruption of newline character in child processes Ability to set child process launch arguments 0.21 Significant performance improvements Support for powermock via both classloader (requires PowerMockIgnore annotation) and java agent Minor error reporting and usability improvements Fix for major defect around dependency analysis PIT dependencies no longer placed on classpath when running via maven Support for excluding certain classes or tests Support for verbose logging 0.20 Limit number of mutations per class Upgrade xstream to 1.3.1 Make available from maven central 0.19 Built in enum methods now excluded from mutation Fixed bug around reporting of untested classes Support for excluding tests greater than a certain distance from class Support for excluding methods from mutation analysis Performance improvements Removed support for launching mutation reports from JUnit runner 0.18 First public release Credits Pitest is mainly the work of me but has benefited from contributions from many others. Notable contributions not visible here as they were made before this code was migrated to github include Nicolas Rusconi - Ant Task Struan Kerr-Liddell - Improvements to html report Stephan Pendorf - Multiple improvments including improved mutators Although PIT does not incorporate any code from the Jumble project (http://jumble.sourceforge.net/), the Jumble codebase was used as a guide when developing some aspects of PIT. Other stuff The codebase is checked up on in a few places that give slower feedback than the github hooks. maven2 on IBM JDK check Sonarqube analysis Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hcoles/pitest"	"Fast mutation-testing framework for evaluating fault-detection abilities of existing JUnit or TestNG test-suites."	"true"
"Testing"	"PowerMock"	"https://github.com/jayway/powermock"	"Enables mocking of static methods, constructors, final classes and methods, private methods and removal of static initializers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"703"	"70"	"186"	"GitHub - jayway/powermock: PowerMock is a Java framework that allows you to unit test code normally regarded as untestable. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 70 Star 703 Fork 186 jayway/powermock Code Issues 233 Pull requests 2 Wiki Pulse Graphs PowerMock is a Java framework that allows you to unit test code normally regarded as untestable. 1,371 commits 3 branches 8 releases 21 contributors Java 99.4% Other 0.6% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gradle master powermock-610 Nothing to show powermock-1.6.5 powermock-1.6.4 powermock-1.6.3 powermock-1.6.2 powermock-1.6.1 powermock-1.6.0 powermock-1.5.6 powermock-1.5.5 Nothing to show New pull request Latest commit 7537b20 Jul 15, 2016 johanhaleby Excluding certain packages and classes from java compatibility checking Permalink Failed to load latest commit information. .github Add guidelines for managing GitHub issues Feb 29, 2016 api Fixed typo Jun 1, 2016 classloading [maven-release-plugin] prepare for next development iteration Apr 30, 2016 core Fixed Java 6 compatibility issue Jul 15, 2016 examples Excluding certain packages and classes from java compatibility checking Jul 15, 2016 modules Fix #676: Do not mock class annotations Jul 2, 2016 reflect Fix #673: Add support for setting private static final fields Jun 27, 2016 release Including powermock-api-mockito-common to the binary release of Mockito May 3, 2016 src/site Upgraded TestNG dependency to 6.4 Apr 5, 2012 tests Fix #676: Do not mock class annotations Jul 2, 2016 .gitignore Fix #673: Add support for setting private static final fields Jun 27, 2016 .travis.yml Fixed failed Mockito1MockStaticTest Apr 29, 2016 LICENSE.txt Initial sourceforge commit Apr 20, 2008 README.md Update README.md May 1, 2016 changelog.txt Fixed Java 6 compatibility issue Jul 15, 2016 generate_javadoc.sh Added mockito2 and common library to javadoc generation Apr 29, 2016 pom.xml Excluding certain packages and classes from java compatibility checking Jul 15, 2016 powermock.png Adding logo Jul 23, 2015 README.md Usage status: Mockito: Easymock: jUnit: TestNG Writing unit tests can be hard and sometimes good design has to be sacrificed for the sole purpose of testability. Often testability corresponds to good design, but this is not always the case. For example final classes and methods cannot be used, private methods sometimes need to be protected or unnecessarily moved to a collaborator, static methods should be avoided completely and so on simply because of the limitations of existing frameworks. PowerMock is a framework that extends other mock libraries such as EasyMock with more powerful capabilities. PowerMock uses a custom classloader and bytecode manipulation to enable mocking of static methods, constructors, final classes and methods, private methods, removal of static initializers and more. By using a custom classloader no changes need to be done to the IDE or continuous integration servers which simplifies adoption. Developers familiar with the supported mock frameworks will find PowerMock easy to use, since the entire expectation API is the same, both for static methods and constructors. PowerMock aims to extend the existing API's with a small number of methods and annotations to enable the extra features. Currently PowerMock supports EasyMock and Mockito. When writing unit tests it is often useful to bypass encapsulation and therefore PowerMock includes several features that simplifies reflection specifically useful for testing. This allows easy access to internal state, but also simplifies partial and private mocking. Please note that PowerMock is mainly intended for people with expert knowledge in unit testing. Putting it in the hands of junior developers may cause more harm than good. News 2016-05-01: PowerMock 1.6.5 has been released with new features such as @TestSubject support for EasyMock, experimental support for Mockito 2 as well as bug fixes and other imporvements. See release notes and change log for details. We also want to give a warm welcome to our new core committer Arthur Zagretdinov. 2015-12-11: PowerMock 1.6.4 has been released with better support for Jacoco and improvements to the DelegatingPowerMockRunner as well as some other minor fixes. See change log for details. 2015-10-02: PowerMock 1.6.3 has been released with support for EasyMock 3.4 as well as compatibility with ByteBuddy and various other fixes. See change log for details. Older News Documentation Getting Started Downloads Motivation Javadoc EasyMock API extension (PowerMock class) Mockito API extension (PowerMockito class) Mockito2 API extension (PowerMockito class) PowerMock Reflect (Whitebox class) EasyMock Mock Static Mock Final Mock Private Mock New Mock Partial Replay and verify all Mockito Mockito 1.8+ Mockito 1.7 Common Bypass Encapsulation Suppress Unwanted Behavior Test Listeners Mock Policies Mock system classes TestNG Delegate to another JUnit Runner Tutorial Experimental Bootstrap using a JUnit Rule Bootstrap using a Java Agent OSGi Release Notes FAQ Support and discussion Join the mailing-list here for questions, feedback and support. Links Change log PowerMock on Ohloh Mailing list for questions and support Sponsored by: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jayway/powermock"	"Enables mocking of static methods, constructors, final classes and methods, private methods and removal of static initializers."	"true"
"Testing"	"REST Assured"	"https://github.com/jayway/rest-assured"	"Java DSL for easy testing for REST/HTTP services."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1265"	"120"	"334"	"GitHub - rest-assured/rest-assured: Java DSL for easy testing of REST services Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 120 Star 1,265 Fork 334 rest-assured/rest-assured Code Issues 68 Pull requests 3 Wiki Pulse Graphs Java DSL for easy testing of REST services 1,515 commits 5 branches 45 releases 28 contributors Java 81.8% Groovy 17.9% Other 0.3% Java Groovy Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags groovy-2.1 jetty json_xpath master oauth2 Nothing to show rest-assured-3.0.0 rest-assured-2.9.0 rest-assured-2.8.0 rest-assured-2.7.0 rest-assured-2.6.0 rest-assured-2.5.0 rest-assured-2.4.1 rest-assured-2.4.0 rest-assured-2.3.4 rest-assured-2.3.3 rest-assured-2.3.2 rest-assured-2.3.1 rest-assured-2.3.0 rest-assured-2.2.0 rest-assured-2.1.0 rest-assured-2.0.1 rest-assured-2.0.0 rest-assured-1.9.0 rest-assured-1.8.1 rest-assured-1.8.0 rest-assured-1.7.2 rest-assured-1.7.1 rest-assured-1.7 rest-assured-1.6.2 rest-assured-1.6.1 rest-assured-1.6 rest-assured-1.5 rest-assured-1.4.5 rest-assured-1.4 rest-assured-1.3.1 rest-assured-1.3 rest-assured-1.2.3 rest-assured-1.2.2 rest-assured-1.2.1 rest-assured-1.2 rest-assured-1.1.7 rest-assured-1.1.6 rest-assured-1.1.5 rest-assured-1.1.2 rest-assured-1.1.1 rest-assured-1.1 rest-assured-1.0.3 rest-assured-1.0.2 rest-assured-1.0.1 rest-assured-1.0 Nothing to show New pull request Latest commit fc67c02 Jul 15, 2016 johanhaleby Added animal-sniffer maven plugin to catch java compatibility issues Permalink Failed to load latest commit information. dist [maven-release-plugin] prepare for next development iteration Jun 3, 2016 examples Fixed issues with colliding keys in multi-expectations for body and h… Jul 7, 2016 json-path [maven-release-plugin] prepare for next development iteration Jun 3, 2016 modules Fixed issues with colliding keys in multi-expectations for body and h… Jul 7, 2016 rest-assured-common [maven-release-plugin] prepare for next development iteration Jun 3, 2016 rest-assured Removed log.warn(..) messages from internal classes (issue 715) Jul 7, 2016 xml-path [maven-release-plugin] prepare for next development iteration Jun 3, 2016 .gitignore Added lib folder to ignore Jun 5, 2014 .travis.yml Trying to get Travis to run all tests Aug 5, 2015 LICENSE Test works in Intellij but not in Maven Oct 21, 2010 README.md Update README.md Jun 17, 2016 changelog.txt Fixed typo Jul 7, 2016 deploy_bintray.sh Added deploy script Jan 23, 2014 generate_javadoc.sh Preparing for REST Assured 3.0.0 May 21, 2016 mvn_release.sh Fixed typo Aug 9, 2015 pom.xml Added animal-sniffer maven plugin to catch java compatibility issues Jul 15, 2016 rest-assured-logo-green.png Added logo Jul 20, 2015 update_wiki.sh replanced jayway with rest-assured Jun 3, 2016 README.md Testing and validation of REST services in Java is harder than in dynamic languages such as Ruby and Groovy. REST Assured brings the simplicity of using these languages into the Java domain. News 2016-06-17: Bas Dijkstra has been generous enough to open source his REST Assured workshop. You can read more about this here and you can try out, and contribute to, the exercises available in his github repository. 2016-06-03: REST Assured 3.0.0 is released. This is a new major release with lots of updates and new features such as the ability to use any HTTP method, all HTTP methods now supports multipart uploads, improved error messages, improved JsonPath etc. Note The package name has changed to io.restassured and the groupId has changed to io.rest-assured. Please see release notes and getting started guide for more details. 2016-06-01: Spring REST Docs 1.1.0 is released with support for REST Assured. Read more about it here. Older News Examples Here's an example of how to make a GET request and validate the JSON or XML response: get(""/lotto"").then().assertThat().body(""lotto.lottoId"", equalTo(5)); Get and verify all winner ids: get(""/lotto"").then().assertThat().body(""lotto.winners.winnerId"", hasItems(23, 54)); Using parameters: given().     param(""key1"", ""value1"").     param(""key2"", ""value2""). when().     post(""/somewhere""). then().     body(containsString(""OK"")); Using X-Path (XML only): given().     params(""firstName"", ""John"", ""lastName"", ""Doe""). when().     post(""/greetMe""). then().     body(hasXPath(""/greeting/firstName[text()='John']"")). Need authentication? REST Assured provides several authentication mechanisms: given().auth().basic(username, password).when().get(""/secured"").then().statusCode(200); Getting and parsing a response body: // Example with JsonPath String json = get(""/lotto"").asString() List<String> winnderIds = from(json).get(""lotto.winners.winnerId"");  // Example with XmlPath String xml = post(""/shopping"").andReturn().body().asString() Node category = from(xml).get(""shopping.category[0]""); REST Assured supports any HTTP method but has explicit support for POST, GET, PUT, DELETE, OPTIONS, PATCH and HEAD and includes specifying and validating e.g. parameters, headers, cookies and body easily. Documentation Getting started Downloads Usage Guide (click here for legacy documentation) Javadoc Rest Assured Javadoc Rest AssuredMockMvc Javadoc XmlPath Javadoc JsonPath Javadoc Release Notes FAQ Support and discussion Join the mailing list at our Google group. Links Change log REST Assured on Ohloh Mailing list for questions and support Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jayway/rest-assured"	"Java DSL for easy testing for REST/HTTP services."	"true"
"Testing"	"Selenide"	"http://selenide.org/"	"Concise API around Selenium to write stable and readable UI tests."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"341"	"72"	"117"	"GitHub - codeborne/selenide: Concise UI Tests with Java! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 72 Star 341 Fork 117 codeborne/selenide Code Issues 61 Pull requests 2 Wiki Pulse Graphs Concise UI Tests with Java! http://selenide.org 1,531 commits 8 branches 36 releases 21 contributors Java 81.4% JavaScript 11.1% HTML 4.9% XSLT 1.3% Other 1.3% Java JavaScript HTML XSLT Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master pr/141 pr/175 selenide-1.7.1 selenide-1.7.2 selenide-1.7.3 selenide-3.0-commands Nothing to show selenide-3.7 selenide-3.6 selenide-3.5.1 selenide-3.5 selenide-3.4 selenide-3.3 selenide-3.1.3 selenide-3.1 selenide-3.0 selenide-2.25 selenide-2.24 selenide-2.23 selenide-2.22 selenide-2.21 selenide-2.20 selenide-2.19 selenide-2.18 selenide-2.17 selenide-2.16 selenide-2.15 selenide-2.14 selenide-2.13 selenide-2.12 selenide-2.11 selenide-2.10 selenide-2.9 selenide-2.8.1 selenide-2.8 selenide-2.7 selenide-2.6.2 selenide-2.5 selenide-2.4 selenide-2.3 selenide-2.2 selenide-1.9 selenide-1.7 Nothing to show New pull request Latest commit bf132f1 Jul 8, 2016 asolntsev working on selenide 3.8 Permalink Failed to load latest commit information. config javadoc is not needed in tests Feb 2, 2016 gradle-wrapper upgrade to gradle 2.14 Jun 16, 2016 src #345 Selenide should not fail if browser doesn't support JavaScript Jul 7, 2016 .gitignore ignore some screenshots created during the integration tests Jan 15, 2016 .travis.yml Update .travis.yml May 7, 2016 CHANGELOG release selenide 3.7 Jul 7, 2016 LICENSE Change Selenide license from LGPL 3.0 to MIT (less restrictive) Nov 16, 2015 README.md Update README.md Jun 19, 2016 build.gradle working on selenide 3.8 Jul 8, 2016 deploy.gradle update developers Mar 3, 2016 gradle upgrade to Gradle 2.12 Mar 14, 2016 gradle.bat upgrade to Gradle 2.12 Mar 14, 2016 gradle.properties Force using UTF-8 encoding (useful for Windows) Mar 17, 2013 selenide.iml update iml Mar 5, 2016 README.md Selenide = UI Testing Framework powered by Selenium WebDriver What is Selenide? Selenide is a framework for writing easy-to-read and easy-to-maintain automated tests in Java. It defines concise fluent API, natural language assertions and does some magic for ajax-bases applications to let you focus entirely on the business logic of your tests. Selenide is based on and is compatible to Selenium WebDriver 2.0 @Test public void testLogin() {  open(""/login"");  $(By.name(""user.name"")).setValue(""johny"");  $(""#submit"").click();  $(""#username"").shouldHave(text(""Hello, Johny!"")); } Look for for detailed comparison of Selenide and Selenium WebDriver API. Changelog Here is CHANGELOG How to start? Just put selenide.jar to your project and import the following methods: import static com.codeborne.selenide.Selenide.*; Look for Quick Start for details. Resources First of all, selenide.org For bustlers: How to start writing UI tests in 10 minutes For developers: Selenide presentation on Devoxx 2015 For QA engineers: Selenide presentation on SeleniumConf 2015 For russians: Selenide presentation on SeleniumCamp 2015 FAQ See Frequently asked questions How to build Selenide? git clone https://github.com/codeborne/selenide.git cd selenide ./gradle test Feel free to fork, clone, build, run tests and contribute pull requests for Selenide! Authors Selenide was originally designed and developed by Andrei Solntsev in 2011-2015. Thanks Many thanks to these incredible tools that help us creating open-source software: License Selenide is open-source project, and distributed under the MIT license Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/codeborne/selenide"	"Concise API around Selenium to write stable and readable UI tests."	"true"
"Testing"	"Selenium"	"http://docs.seleniumhq.org/"	"Portable software testing framework for web applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3865"	"651"	"1945"	"GitHub - SeleniumHQ/selenium: A browser automation framework and ecosystem. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 651 Star 3,865 Fork 1,945 SeleniumHQ/selenium Code Issues 349 Pull requests 84 Wiki Pulse Graphs A browser automation framework and ecosystem. http://seleniumhq.org/ 19,045 commits 7 branches 85 releases 225 contributors JavaScript 28.4% Java 24.8% C# 16.2% C++ 10.9% HTML 10.5% Ruby 4.5% Other 4.7% JavaScript Java C# C++ HTML Ruby Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags getElementProperty gh-pages jruby-9k jruby-174 leg-rc master safari Nothing to show selenium-2.53.0 selenium-2.52.0 selenium-2.51.0 selenium-2.50.1 selenium-2.50.0 selenium-2.49.1 selenium-2.49.0 selenium-2.48.2 selenium-2.48.1 selenium-2.48.0 selenium-2.47.1 selenium-2.47.0 selenium-2.46.0 selenium-2.45.0 selenium-2.44.0 selenium-2.43.1 selenium-2.43.0 selenium-2.42.2 selenium-2.42.1 selenium-2.42.0 selenium-2.41.0 selenium-2.40.0 selenium-2.39.0 selenium-2.38.0 selenium-2.37.0 selenium-2.36.0 selenium-2.35.0 selenium-2.33.0 selenium-2.32.0 selenium-2.31.0 selenium-2.30.0 selenium-2.29.0 selenium-2.29.0a selenium-2.28.0 selenium-2.27.0 selenium-2.26.0 selenium-2.25.0 selenium-2.24.1 selenium-2.23.1 selenium-2.23.0 selenium-2.22.0 selenium-2.21.0 selenium-2.20.0 selenium-2.19.0 selenium-2.18.0 selenium-2.17.0 selenium-2.16.0 selenium-2.15.0 selenium-2.14.0 selenium-2.13.0 selenium-2.12.0 selenium-2.11.0 selenium-2.10.0 selenium-2.9.0 selenium-2.8.0 selenium-2.7.0 selenium-2.6.0 selenium-2.5.0 selenium-2.4.0 selenium-2.3.0 selenium-2.2.0 selenium-2.1.0 selenium-2.0.0 selenium-2.0-rc1 selenium-2.0-rc-3 selenium-2.0-rc-2 selenium-2.0-beta-3 selenium-2.0-beta-2 selenium-2.0-beta-1 selenium-2.0-alpha-7 selenium-2.0-alpha-6 selenium-2.0-alpha-5 selenium-2.0-alpha-4 selenium-2.0-alpha-3 selenium-2.0-alpha-2 selenium-2.0-alpha-1 rc-1.0 rc-1.0-beta-2 rc-0.9.2 ide-1.0.11 core-1.0.1 core-1.0-beta-1 android-froyo 2.53.1 2.34.0 Nothing to show New pull request Latest commit 0a4b995 Jul 15, 2016 titusfortner rb - fix chrome options for detach (issue 2418) Permalink Failed to load latest commit information. .github no longer need to mention ff 47 in issue template Jul 13, 2016 .idea fixing grid launching with node role and including -browser Jul 13, 2016 common Don't blur when clicking a non-focusable child of the active element. Jun 23, 2016 cpp Adding '/version' command line argument to IEDriverServer.exe Jul 5, 2016 dotnet Enabling tagging of beta releases for .NET bindings Jul 5, 2016 ide Move the guava jar into a directory named after it. Dec 27, 2015 iphone Remove server side of iphone driver. Dec 9, 2013 java updating copyright Jul 13, 2016 javascript updating copyright Jul 13, 2016 py fix syntax error Jul 15, 2016 rake-tasks Add the ability to control how much info is coming out from failures … Jul 8, 2016 rb rb - fix chrome options for detach (issue 2418) Jul 15, 2016 third_party re-add eclipse_compiler, still being used Jul 8, 2016 .OLD_AUTHORS Add target for generating AUTHORS file Dec 9, 2013 .buckconfig Remove an unused alias from the buckconfig Jun 26, 2016 .buckhash updating buck Jul 14, 2016 .buckjavaargs Get org.openqa.selenium.SmallTests building with Buck. Sep 4, 2014 .buckversion updating buck Jul 14, 2016 .editorconfig using 2 spaces for java Mar 18, 2015 .git-fixfiles Fixing .git-fixfiles script for changed directory name. Fixes issue #… Aug 17, 2013 .gitattributes Update .xml in .gitattributes Jun 4, 2015 .gitignore Adding *.VC.db to .gitignore May 24, 2016 .mailmap add mail map entry Feb 10, 2016 .travis.yml use java 8 in travis config Jun 6, 2016 AUTHORS Formalities... Jul 1, 2015 CONTRIBUTING.md Update Contributing.MD Fixed Typo Oct 27, 2015 LICENSE legal: appendix of license not in sync with Apache 2.0 Mar 13, 2015 MANIFEST.in Update MANIFEST.in Feb 5, 2016 NOTICE 2016 Jan 11, 2016 README.md correcting readme for maven info Jul 7, 2016 Rakefile don't require maven credentials when doing a 'maven-install' Jul 14, 2016 SELENIUM_VERSION SNAPSHOT didn't work, also correcting one of the third party maven_co… Jul 7, 2016 WebDriver.snk Reorganizing .NET bindings code structure. Aug 14, 2013 copyiedriver.bat Updating .NET online documentation to new presentation style and upda… Jan 18, 2013 generate_api_docs.sh docs: Automatically push Ruby docs to gh-pages Oct 8, 2015 go fixing java command line options for 'go' MaxPermSize -> MetaspaceSiz… Sep 24, 2015 go.bat KristianRosenvold: Removed windows carriage returns Jan 11, 2013 ide.iml missing file May 26, 2013 ignores.json Delete the original RC server and htmlsuite runner. May 12, 2016 pytest.ini Changing the way test file pattern is specified. Fixes the issue when… Sep 12, 2013 selenium.iml SimonStewart: Break out a server and client module for the IDEA proje… Mar 9, 2012 setup.cfg Fix flake8 issues in Python client Jun 20, 2016 setup.py Fix flake8 issues in Python client Jun 20, 2016 sonar-project.properties Adding Sonarqube configuration for Java modules May 22, 2015 README.md Selenium Selenium is an umbrella project encapsulating a variety of tools and libraries enabling web browser automation. Selenium specifically provides infrastructure for the W3C WebDriver specification — a platform and language-neutral coding interface compatible with all major web browsers. The project is made possible by volunteer contributors who've generously donated thousands of hours in code development and upkeep. Selenium's source code is made available under the Apache 2.0 license. Documentation Narrative documentation: User Manual New Handbook (work in progress) API documentation: C# JavaScript Java Python Ruby Pull Requests Please read CONTRIBUTING.md before submitting your pull requests. Building Selenium uses a custom build system aptly named crazyfun available on all fine platforms (Linux, Mac, Windows). We are in the process of replacing crazyfun with buck, so don't be alarmed if you see directories carrying multiple build directive files. For reference, crazyfun's build files are named build.desc, while buck's are named simply BUCK. Before building ensure that you have the most recent chromedriver available on your $PATH. To build Selenium, in the same directory as this file: ./go The order of building modules is determined by the build system. If you want to build an individual module (assuming all dependent modules have previously been built), try the following: ./go //javascript/atoms:test:run In this case, javascript/atoms is the module directory, test is a target in that directory's build.desc file, and run is the action to run on that target. As you see build targets scroll past in the log, you may want to run them individually. crazyfun can run them individually, by target name as long as :run is appended (see above). To list all available targets, you can append the -T flag: ./go -T Buck Although the plan is to return to a vanilla build of Buck as soon as possible, we currently use a fork hosted at https://github.com/SeleniumHQ/buck To build using Buck, first clone that repo and build using ant. Then add Buck's ""bin"" directory to your PATH. To obtain a list of all available targets: buck targets And build a particular file: buck build //java/client/src/org/openqa/selenium:webdriver-api There are aliases for commonly invoked targets in the .buckconfig file, and these aliases can be invoked directly: buck build htmlunit All buck output is stored under ""buck-out"", with the outputs of build rules in buck-out/gen. If you are doing a number of incremental builds, then you may want to use buckd, which starts a long-lived buck process to watch outputs and input files. If you do this, consider using watchman too, since the Java 7 file watcher isn't terribly efficient. This can be cloned from https://github.com/facebook/watchman Requirements Java 7 JDK java and jar on the PATH Although the build system is based on rake it's strongly advised to rely on the version of JRuby in third_party/ that is invoked by go. The only developer type who would want to deviate from this is the “build maintainer” who's experimenting with a JRuby upgrade. Note that all Selenium Java artefacts are built with Java 7 (mandatory). Those will work with any Java >= 7. Optional Requirements Python 2.6.x to 2.7 (without this, Python tests will be skipped) Ruby 1.9.3 Internet Explorer Driver If you plan to compile the IE driver you also need: Visual Studio 2008 32 and 64 bit cross compilers The build will work on any platform, but the tests for IE will be skipped silently, if you are not building on Windows. Common Tasks For an express build of the binaries we release run the following from the directory containing the Rakefile: ./go clean release All build output is placed under the build directory. The output can be found under build/dist. If an error occurs while running this task complaining about a missing Albacore gem, the chances are you're using rvm. If this is the case, switch to the system ruby: rvm system Of course, building the entire project can take too long. If you just want to build a single driver, then you can run one of these targets: ./go chrome ./go firefox ./go htmlunit ./go ie As the build progresses, you'll see it report where the build outputs are being placed. Of course, just building isn't enough. We should really be able to run the tests too. Try: ./go test_chrome ./go test_firefox ./go test_htmlunit ./go test_ie Note that the test_chrome target requires that you have the separate Chrome Driver binary available on your PATH. If you are interested in a single language binding, try one of: ./go test_java ./go test_dotnet ./go test_rb ./go test_javascript To run all the tests just run: ./go test This will detect your OS and run all the tests that are known to be stable for every browser that's appropriate to use for all language bindings. This can take a healthy amount of time to run. To run the minimal logical Selenium build: ./go test_javascript test_java As a side note, none of the developers run tests using Cygwin. It is very unlikely that the build will work as expected if you try and use it. Tour The code base is generally segmented around the languages used to write the component. Selenium makes extensive use of JavaScript, so let's start there. Working on the JavaScript is easy. First of all, start the development server: ./go debug-server Now navigate to http://localhost:2310/javascript. You'll find the contents of the javascript/ directory being shown. We use the Closure Library for developing much of the javascript, so now navigate to http://localhost:2310/javascript/atoms/test. The tests in this directory are normal HTML files with names ending with _test.html. Click on one to load the page and run the test. You can run all the javascript tests using: ./go test_javascript Maven POM files Here is the public Selenium Maven repository. Build Output ./go only makes a top-level build directory. Outputs are placed under that relative to the target name. Which is probably best described with an example. For the target: ./go //java/client/src/org/openqa/selenium:selenium-api The output is found under: build/java/client/src/org/openqa/selenium/selenium-api.jar If you watch the build, each step should print where its output is going. Java test outputs appear in one of two places: either under build/test_logs for JUnit or in build/build_log.xml for TestNG tests. If you'd like the build to be chattier, just append log=true to the build command line. Help with go More general, but basic, help for go… ./go --help Remember, go is just a wrapper around Rake, so you can use the standard commands such as rake -T to get more information about available targets. Maven per se If it is not clear already, Selenium is not built with Maven, it is built with Buck, though that is invoked with go as outlined above so you do not really have to learn too much about that. That said, it is possible to relatively quickly build selenium pieces for Maven to use. You are only really going to want to do this when you are testing the cutting-edge of Selenium development (which we welcome) against your application. Here is the quickest way to build and deploy into you local maven repository (~/.m2/repository), while skipping Selenium's own tests. ./go maven-install The maven jars should now be in your local ~/.m2/repository. You can also publish directly using Buck: buck publish -r your-repo //java/client/src/org/openqa/selenium:selenium This sequence will push some seven or so jars into your local Maven repository with something like 'selenium-server-3.0.0.jar' as the name. Useful Resources Refer to the Building Web Driver wiki page for the last word on building the bits and pieces of Selenium. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SeleniumHQ/selenium"	"Portable software testing framework for web applications."	"true"
"Testing"	"Spock"	"http://spockframework.github.io/spock/docs/"	"JUnit-compatible framework featuring an expressive Groovy-derived specification language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"null"	"null"	"JUnit-compatible framework featuring an expressive Groovy-derived specification language."	"true"
"Testing"	"Truth"	"https://github.com/google/truth"	"Google's assertion and proposition framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"678"	"62"	"71"	"GitHub - google/truth: Assertion/Proposition framework for Java unit tests Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 62 Star 678 Fork 71 google/truth Code Issues 38 Pull requests 7 Wiki Pulse Graphs Assertion/Proposition framework for Java unit tests http://google.github.io/truth 804 commits 6 branches 24 releases 27 contributors Java 99.1% Other 0.9% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags docs028 gh-pages master sync_internal_pages test_build travis Nothing to show release_0_28 release_0_27 release_0_26 release_0_25 release_0_24 release_0_23 release_0_23_relocation release_0_22 release_0_21 release_0_21_relocation release_0_20 release_0_19 release_0_18 release_0_17 release_0_16 release_0_15 release_0_13 release_0_12 release_0_11 release_0_10 release_0_09 release_0_08 release_0_07 release_0_05_beta1 Nothing to show New pull request Latest commit aabf07e Jul 12, 2016 kluever committed with cpovirk Improve error message for MultimapSubject.containsEntry() … ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=127233406 Permalink Failed to load latest commit information. core Improve error message for MultimapSubject.containsEntry() Jul 12, 2016 extensions Change ProtoLiteSubject to parameterize on MessageLite, not MessageLi… Jul 10, 2016 util Remove trailing whitespace. Jun 23, 2016 .gitignore Add IDEA specific files in .gitignore Jan 28, 2016 .travis.yml Update the travis configurations to only build the ""master"" branch or… Mar 8, 2016 CONTRIBUTING.md delint the .md5 docs Oct 29, 2015 LICENSE Fix the pom files to address Dec 7, 2015 README.md Update readme to 0.28 Dec 9, 2015 pom.xml Run Animal Sniffer for Truth. May 3, 2016 README.md Truth We've made failure a strategy Main Website: google.github.io/truth   Continuous Integration: Latest Release: 0.28   Latest Artifact: org.junit.contrib:truth:jar:0.28 What is Truth? Truth is an assertion/proposition framework appropriate for testing, inspired by FEST, and driven by some extensibility needs, written nearly entirely by Google employees in their spare time or contributing in their capacity as Java core librarians. Truth can be used in place of JUnit's assertions, FEST, or Hamcrest's matchers, or it can be used alongside where other approaches seem more suitable. The full documentation and website for Truth is available at http://google.github.io/truth License Truth is licensed under the open-source Apache 2.0 license. Acknowledgements Thanks to Github and Travis-CI for having a strong commitment to open-source, and providing us with tools so we can provide others with code. And thanks to Google for Guava, for taking on the Truth project and making it part of their core-libraries effort, and for encouraging us to try to solve problems in better ways and share that with the world. Also thanks to the authors of JUnit, TestNG, Hamcrest, FEST, and others for creating testing tools that let us write high-quality code, for inspiring this work and for moving the ball forward in the field of automated software testing. This project works with, works alongside, and sometimes works in competition with the above tools, but owes a debt that everyone owes to those gone before. They paved the way, and we hope this contribution is helpful to the field. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/truth"	"Google's assertion and proposition framework."	"true"
"Testing"	"WireMock"	"http://wiremock.org/"	"Stubbs and mocks web services."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"916"	"74"	"398"	"GitHub - tomakehurst/wiremock: A tool for mocking HTTP services Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 74 Star 916 Fork 398 tomakehurst/wiremock Code Issues 92 Pull requests 15 Pulse Graphs A tool for mocking HTTP services 898 commits 24 branches 47 releases 39 contributors Java 81.3% HTML 7.4% CSS 5.2% JavaScript 4.6% XSLT 1.2% Ruby 0.3% Java HTML CSS JavaScript XSLT Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0-beta-match-scoring 2.0-beta-pooling 2.0-beta 2.0-custom-matchers big-refactor-12-2012 binary-responses case-insensitive-header-keys charset-quotes cookies custom-matchers disable-request-journal dsyer-feature/jetty-isolation extension-points gh-pages httpserver-poc jetty-8 json-equal master record-request-body rob-jetty-refactor rowanhill-2.0-scenario-builder-generics s socket-delays sphinx-docs Nothing to show release-1.25 release-1.14 2.1.7 2.1.6 2.1.5-rc4 2.1.4-rc3 2.1.3-rc2 2.1.2-rc1 2.1.1-beta 2.1.0-beta 2.0.11-beta 2.0.10-beta 2.0.9-beta 2.0.8-beta 2.0.7-beta 2.0.6-beta 2.0.5-beta 2.0.4-beta 2.0.3-beta 2.0.2-beta 2.0.1-beta 2.0.0-beta 1.58 1.57 1.56 1.55 1.54 1.53 1.52 1.52-beta 1.51 1.50 1.49 1.48 1.47 1.46 1.45 1.44 1.43 1.42 1.41 1.40 1.39 1.38 1.37 1.36 1.33 Nothing to show New pull request Latest commit a48315b Jul 11, 2016 tomakehurst Bumped version Permalink Failed to load latest commit information. docs-v2 Bumped version Jul 11, 2016 docs Changed to GA version Jul 8, 2016 gradle/wrapper Updated the Gradle wrapper to v2.6 Aug 24, 2015 sample-war Changed to GA version Jul 8, 2016 src Fix #458 - NPE thrown when using custom matchers and near misses Jul 11, 2016 testlogging Optimised imports May 11, 2013 .gitignore Totally refactored the matching system to introduce the concept of di… Jun 14, 2016 .travis.yml Added jdk 7 back into the Travis config Sep 27, 2015 LICENSE.txt Added apache 2.0 licence Dec 4, 2011 README.md Updated README Jun 29, 2016 Vagrantfile Made HttpAcceptanceTest.rejectWithoutClientCertificate accept SocketE… Feb 24, 2015 build.gradle Bumped version Jul 11, 2016 gen-docs.sh Docs: Added google analytics Dec 4, 2012 gradlew Added gradle wrapper Feb 18, 2014 gradlew.bat Added gradle wrapper Feb 18, 2014 jdepend.xsl Added jdepend to build Dec 29, 2012 notes.txt Totally refactored the matching system to introduce the concept of di… Jun 14, 2016 README.md WireMock - a web service test double for all occasions Key Features HTTP response stubbing, matchable on URL, header and body content patterns Request verification Runs in unit tests, as a standalone process or as a WAR app Configurable via a fluent Java API, JSON files and JSON over HTTP Record/playback of stubs Fault injection Per-request conditional proxying Browser proxying for request inspection and replacement Stateful behaviour simulation Configurable response delays Full documentation can be found at wiremock.org Questions and Issues If you have a question about WireMock, or are experiencing a problem you're not sure is a bug please post a message to the WireMock mailing list. On the other hand if you're pretty certain you've found a bug please open an issue. Contributing We welcome bug fixes and new features in the form of pull requests. If you'd like to contribute, please be mindful of the following guidelines: All changes should include suitable tests, whether to demonstrate the bug or exercise and document the new feature. Please make one change per pull request. If the new feature is significantly large/complex/breaks existing behaviour, please first post a summary of your idea on the mailing list to generate a discussion. This will avoid significant amounts of coding time spent on changes that ultimately get rejected. Try to avoid reformats of files that change the indentation, tabs to spaces etc., as this makes reviewing diffs much more difficult. Building WireMock locally To run all of WireMock's tests: ./gradlew clean test To build both JARs (thin and standalone): ./gradlew jar shadowJar The built JARs will be placed under build/libs. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tomakehurst/wiremock"	"Stubbs and mocks web services."	"true"
"Utility"	"Apache Commons"	"http://commons.apache.org/"	"Provides different general purpose functions like configuration, validation, collections, file upload or XML processing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Commons – Apache Commons Apache Commons ™ Last Published: 14 July 2016 | Version: 18 Components Sandbox Dormant ApacheCon Apache Commons Home License Mailing Lists PMC Components Sandbox Dormant Releases Releases Source Repositories General Information Components Sandbox Dormant General Information Security Volunteering Contributing Patches Building Components Commons Parent Pom Commons Build Plugin Site Publication Releasing Components Wiki ASF How the ASF works Get Involved Developer Resources Code of Conduct Sponsorship Thanks Welcome to Apache Commons Apache Commons is an Apache project focused on all aspects of reusable Java components. The Apache Commons project is composed of three parts: The Commons Proper - A repository of reusable Java components. The Commons Sandbox - A workspace for Java component development. The Commons Dormant - A repository of components that are currently inactive. You may also read our charter, which spells out the goals of the project in greater detail. The Apache Commons source code repositories are writable for all ASF committers. While Apache Commons is a Commit-Then-Review community, we would consider it polite and helpful for contributors to announce their intentions and plans on the dev mailing list before committing code. All contributors should read our contributing guidelines. We accept patches as SVN diff files uploaded to the Apache bugtracker or as pull request via our github mirrors. Apache Commons Proper Commons Proper is dedicated to one principal goal: creating and maintaining reusable Java components. The Commons Proper is a place for collaboration and sharing, where developers from throughout the Apache community can work together on projects to be shared by the Apache projects and Apache users. Commons developers will make an effort to ensure that their components have minimal dependencies on other libraries, so that these components can be deployed easily. In addition, Commons components will keep their interfaces as stable as possible, so that Apache users (including other Apache projects) can implement these components without having to worry about changes in the future. This article gives an overview of (some of) the components which can be found here. We welcome participation from all that are interested, at all skill levels. Coding, documentation and testing are all critical parts of the software development process. If you are interested in participating in any of these aspects, please join us! Components Description Latest Version Released BCEL Byte Code Engineering Library - analyze, create, and manipulate Java class files 6.0 2016-14-07 BeanUtils Easy-to-use wrappers around the Java reflection and introspection APIs. 1.9.2 2014-05-29 BSF Bean Scripting Framework - interface to scripting languages, including JSR-223 3.1 2010-24-06 Chain Chain of Responsibility pattern implemention. 1.2 2008-06-02 CLI Command Line arguments parser. 1.3.1 2015-06-17 Codec General encoding/decoding algorithms (for example phonetic, base64, URL). 1.10 2014-11-09 Collections Extends or augments the Java Collections Framework. 4.1 2015-11-27 Compress Defines an API for working with tar, zip and bzip2 files. 1.12 2016-06-21 Configuration Reading of configuration/preferences files in various formats. 2.0 2016-03-24 Crypto A cryptographic library optimized with AES-NI wrapping Openssl or JCE algorithm implementations. 1.0 2016-??-?? CSV Component for reading and writing comma separated value files. 1.4 2016-05-28 Daemon Alternative invocation mechanism for unix-daemon-like java code. 1.0.15 2013-04-03 DBCP Database connection pooling services. 2.1.1 2015-08-06 DbUtils JDBC helper library. 1.6 2014-07-20 Digester XML-to-Java-object mapping utility. 3.2 2011-12-13 Discovery Tools for locating resources by mapping service/reference names to resource names. 0.5 2011-05-05 EL Interpreter for the Expression Language defined by the JSP 2.0 specification. 1.0 2003-06-18 Email Library for sending e-mail from Java. 1.4 2015-05-23 Exec API for dealing with external process execution and environment management in Java. 1.3 2014-11-06 FileUpload File upload capability for your servlets and web applications. 1.3.2 2016-05-26 Functor A functor is a function that can be manipulated as an object, or an object representing a single, generic function. 1.0 2011-??-?? Imaging (previously called Sanselan) A pure-Java image library. 0.97-incubator 2009-02-20 IO Collection of I/O utilities. 2.5 2016-04-21 JCI Java Compiler Interface 1.1 2013-10-14 JCS Java Caching System 1.3 2007-06-11 Jelly XML based scripting and processing engine. 1.0 2005-06-16 Jexl Expression language which extends the Expression Language of the JSTL. 3.0 2015-12-27 JXPath Utilities for manipulating Java Beans using the XPath syntax. 1.3 2008-08-14 Lang Provides extra functionality for classes in java.lang. 3.4 2015-04-06 Launcher Cross platform Java application launcher. 1.1 2004-08-22 Logging Wrapper around a variety of logging API implementations. 1.2 2014-07-11 Math Lightweight, self-contained mathematics and statistics components. 3.5 2015-04-17 Modeler Mechanisms to create Model MBeans compatible with JMX specification. 2.0.1 2007-06-25 Net Collection of network utilities and protocol implementations. 3.5 2016-05-05 OGNL An Object-Graph Navigation Language 4.0 2013-??-?? Pool Generic object pooling component. 2.4.2 2015-08-01 Proxy Library for creating dynamic proxies. 1.0 2008-02-28 SCXML An implementation of the State Chart XML specification aimed at creating and maintaining a Java SCXML engine. It is capable of executing a state machine defined using a SCXML document, and abstracts out the environment interfaces. 0.9 2008-12-01 Validator Framework to define validators and validation rules in an xml file. 1.5.1 2016-04-30 VFS Virtual File System component for treating files, FTP, SMB, ZIP and such like as a single logical file system. 2.1 2016-05-12 Weaver Provides an easy way to enhance (weave) compiled bytecode. 1.2 2016-02-02 The Commons Sandbox The Commons project also contains a workspace that is open to all Apache committers. It's a place to try out new ideas and prepare for inclusion into the Commons portion of the project or into another Apache project. Users are free to experiment with the components developed in the sandbox, but sandbox components will not necessarily be maintained, particularly in their current state. See here for Sandbox components. The Commons Dormant These are Commons components that have been deemed inactive since they have seen little recent development activity. If you wish to use any of these components, you must build them yourselves. It is best to assume that these components will not be released in the near future. See here for Dormant components. Where do I get releases? The individual components have independent releases. Some releases for some components may be available only through the mirroring system. Some releases for some components (typically the older ones) are not available through the mirroring system. See the individual websites listed above for the specific downloads, or use the Releases menu option. How do I contribute, give feedback, fix bugs and so on? The Commons project really needs and appreciates any contributions, including documentation help, source code and feedback. Discussion occurs on the Commons mailing list. We have an IRC channel on freenode - join #apache-commons. Access to the SVN commons/proper repository is available both online and with a svn client. Access to the SVN commons/sandbox repository is available both online and with a svn client. Access to the SVN commons/dormant repository is available both online and with a svn client. Related Components @Apache The Commons HttpClient project used to be a part of Commons, but is now part of Apache HttpComponents - see Jakarta Commons HttpClient Copyright © 2016 The Apache Software Foundation. All Rights Reserved. Apache Commons, Apache, the Apache feather logo, and the Apache Commons project logos are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners."	"null"	"null"	"Provides different general purpose functions like configuration, validation, collections, file upload or XML processing."	"true"
"Utility"	"CRaSH"	"http://www.crashub.org"	"Provides a shell into a JVM that's running CRaSH. Used by Spring Boot and others."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"557"	"63"	"133"	"GitHub - crashub/crash: The shell for the Java Platform Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 63 Star 557 Fork 133 crashub/crash Code Pull requests 15 Wiki Pulse Graphs The shell for the Java Platform http://www.crashub.org 1,988 commits 4 branches 86 releases 24 contributors Java 81.4% JavaScript 14.3% Groovy 3.9% Shell 0.1% CSS 0.1% HTML 0.1% Batchfile 0.1% Java JavaScript Groovy Shell CSS HTML Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.2.x gh-pages golo master Nothing to show 1.3.2 1.3.1 1.3.0 1.3.0-cr8 1.3.0-cr7 1.3.0-cr6 1.3.0-cr5 1.3.0-cr4 1.3.0-cr3 1.3.0-cr2 1.3.0-cr1 1.3.0-beta23 1.3.0-beta22 1.3.0-beta21 1.3.0-beta20 1.3.0-beta19 1.3.0-beta18 1.3.0-beta17 1.3.0-beta16 1.3.0-beta15 1.3.0-beta14 1.3.0-beta13 1.3.0-beta12 1.3.0-beta11 1.3.0-beta10 1.3.0-beta9 1.3.0-beta8 1.3.0-beta7 1.3.0-beta6 1.3.0-beta5 1.3.0-beta4 1.3.0-beta3 1.3.0-beta2 1.3.0-beta1 1.2.11 1.2.10 1.2.9 1.2.8 1.2.7 1.2.6 1.2.5 1.2.4 1.2.3 1.2.2 1.2.1 1.2.0 1.2.0-cr11 1.2.0-cr10 1.2.0-cr9 1.2.0-cr8 1.2.0-cr7 1.2.0-cr6 1.2.0-cr5 1.2.0-cr4 1.2.0-cr3 1.2.0-cr2 1.2.0-cr1 1.2.0-alpha1 1.1.0 1.1.0-cr1 1.1.0-beta1 1.0.0 1.0.0-cr2 1.0.0-cr1 1.0.0-beta24 1.0.0-beta23 1.0.0-beta22 1.0.0-beta21 1.0.0-beta20 1.0.0-beta19 1.0.0-beta18 1.0.0-beta17 1.0.0-beta16 1.0.0-beta15 1.0.0-beta14 1.0.0-beta13 1.0.0-beta12 1.0.0-beta11 1.0.0-beta10 1.0.0-beta9 1.0.0-beta8 1.0.0-beta7 1.0.0-beta6 1.0.0-beta5 1.0.0-beta4 1.0.0-beta2 Nothing to show New pull request Latest commit 0be41ac Oct 8, 2015 thibaultclem [maven-release-plugin] prepare for next development iteration Permalink Failed to load latest commit information. cli [maven-release-plugin] prepare for next development iteration Oct 8, 2015 connectors [maven-release-plugin] prepare for next development iteration Oct 8, 2015 distrib [maven-release-plugin] prepare for next development iteration Oct 8, 2015 doc [maven-release-plugin] prepare for next development iteration Oct 8, 2015 embed [maven-release-plugin] prepare for next development iteration Oct 8, 2015 packaging [maven-release-plugin] prepare for next development iteration Oct 8, 2015 plugins [maven-release-plugin] prepare for next development iteration Oct 8, 2015 shell [maven-release-plugin] prepare for next development iteration Oct 8, 2015 .gitignore CRASH-193 : Shade jline into shell module May 12, 2014 README.md Update README May 9, 2014 pom.xml [maven-release-plugin] prepare for next development iteration Oct 8, 2015 README.md    ______  .~      ~. |`````````,       .'.                   ..'''' |         | |           |'''|'''''      .''```.              .''       |_________| |           |    `.       .'       `.         ..'          |         |  `.______.' |      `.   .'           `. ....''             |         | The Common Reusable SHell (CRaSH) is a shell designed for extending Java programs and the Java Virtual Machine. Website : http://www.crashub.org JIRA: http://jira.exoplatform.org/browse/CRASH Documentation: http://www.crashub.org Continuous Integration: https://vietj.ci.cloudbees.com/job/CRaSH/ How to build CRaSH Obtaining CRaSH source code CRaSH can be obtained by cloning the Git repository git@github.com:crashub/crash.git git clone git@github.com:crashub/crash.git Building CRaSH CRaSH is built with Maven. mvn package The build produces several archives ready to use: crsh.shell-${version}-standalone.jar : a minimalistic standalone jar (to run with java -jar crsh.shell-${version}-standalone.jar) packaging/target/crsh-${version}-spring.war : the Spring war packaging/target/crsh-${version}.war : the web app war It also produce the distribution: distrib/target/crash-${version}-docs.tar.gz : the documentation distrib/target/crash-${version}.tar.gz : the standalone distribution distrib/target/crash-${version}-war.tar.gz : the web app distribution distrib/target/crash-${version}-spring.tar.gz : the Spring distribution distrib/target/crash-${version}-mule-app.tar.gz : the Mule distribution Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/crashub/crash"	"Provides a shell into a JVM that's running CRaSH. Used by Spring Boot and others."	"true"
"Utility"	"Dex"	"https://github.com/PatMartin/Dex"	"Java/JavaFX tool capable of powerful ETL and data visualization."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"138"	"18"	"16"	"GitHub - PatMartin/Dex: Dex : The data explorer.  A data visualization tool written in java/javafx capable of powerful ETL and publishing D3 and other HTML visualizations. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 138 Fork 16 PatMartin/Dex Code Issues 0 Pull requests 0 Wiki Pulse Graphs Dex : The data explorer. A data visualization tool written in java/javafx capable of powerful ETL and publishing D3 and other HTML visualizations. 55 commits 1 branch 0 releases 1 contributor JavaScript 65.8% C 14.7% HTML 14.3% CSS 2.4% C++ 1.0% Groovy 0.9% Other 0.9% JavaScript C HTML CSS C++ Groovy Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 02f24cd Jul 12, 2016 PatMartin Added margin control to property sheet configuration. Permalink Failed to load latest commit information. data Last wave of commits for tonight. Mar 29, 2016 images Added dex header logo. Apr 2, 2016 javascript Dexjs version update. Jul 12, 2016 lib Lib refresh Apr 23, 2016 licenses Added license files for stuff i use. Mar 29, 2016 project Added support for multiples Apr 23, 2016 resources Added missing icons Apr 30, 2016 scripts Updated controlsfx. Added DockerFile, Changes to TrimColumns, lib ref… Apr 4, 2016 src Added margin control to property sheet configuration. Jul 12, 2016 template/d3 Second wave of file commits. Mar 28, 2016 util Second wave of file commits. Mar 29, 2016 web Removed width/height config. Can't remember why. Jul 12, 2016 .classpath Updated controlsfx. Added DockerFile, Changes to TrimColumns, lib ref… Apr 5, 2016 .gitignore Added some ignores Apr 4, 2016 Dex.0.8.xml Updated controlsfx. Added DockerFile, Changes to TrimColumns, lib ref… Apr 5, 2016 Dex.ico Initial wave of commits. Mar 28, 2016 Dex.jar jar refresh Apr 23, 2016 Dockerfile Updated controlsfx. Added DockerFile, Changes to TrimColumns, lib ref… Apr 5, 2016 LICENSE Initial commit Mar 28, 2016 README.md Update README.md Apr 2, 2016 RELEASE_NOTES.md Updated controlsfx. Added DockerFile, Changes to TrimColumns, lib ref… Apr 5, 2016 build.xml Updated controlsfx. Added DockerFile, Changes to TrimColumns, lib ref… Apr 5, 2016 caspian.css Initial wave of commits. Mar 29, 2016 dex_opts.xml Initial wave of commits. Mar 29, 2016 startDex.sh Second wave of file commits. Mar 29, 2016 style.css Second wave of file commits. Mar 29, 2016 README.md Dex Dex : The data explorer is a data visualization tool written in Java/JavaFX capable of powerful ETL and data visualization. Other Resources Main Site Blog Requirements Java 8 Installation There are 2 main ways to install Dex. Download a stable release Install via Git by following the instructions below. Via Git Download: git clone https://github.com/PatMartin/Dex.git Run cd Dex java -jar Dex.jar Example Visualizations The following are a small sample of the 50+ data visualizations Dex is capable of generating. Ring Network This visualization was created with Dex to visualize the relationships between Dr Who villans and motivations. Maps This visualization was created with Dex to visualize internet use across the world over the past 20 years. Time Visualizations This visualization depicts a small series over time. This visualization depicts a more complex series over time. Chord Visualizations This visualization depicts relationships via a Chord diagram over time. UML Visualizations A Class Diagram of the various battles within the Game of Thrones. A Sequence Diagram of the various battles within the Game of Thrones. Network Visualizations A large network comprised of every word spoken by Donald trump connected by the next word within the Iowa speech. This network visualization is founded on the high performance VivaGraph. A vis.js visualization of the battles between the various houses within the Game of Thrones. Timelines A vis.js timeline visualization of the sequence of events that lead up to, and occurred during World War I. 3D Graphs A 3D graph of some data generated via Dex using a vis.js visual. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PatMartin/Dex"	"Java/JavaFX tool capable of powerful ETL and data visualization."	"true"
"Utility"	"Gephi"	"https://github.com/gephi/gephi/"	"Cross-platform for visualizing and manipulating large graph networks."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1530"	"158"	"965"	"GitHub - gephi/gephi: trunk Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 158 Star 1,530 Fork 965 gephi/gephi Code Issues 307 Pull requests 11 Wiki Pulse Graphs trunk 4,328 commits 9 branches 11 releases 42 contributors Java 99.3% Other 0.7% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.8.1 0.8.2 0.9.0 0.9.1 datalab gh-pages master mvn-thirdparty-repo new-vizengine Nothing to show v0.9.1 v0.9.0 v0.8.2 v0.8.1 v0.8.0 v0.8.0-alpha v0.7.0 v0.7.0-alpha4 v0.7.0-alpha3 v0.7.0-alpha2 v0.7.0-alpha Nothing to show New pull request Latest commit 494bbaf Jun 24, 2016 eduramiba Enable tests in deployment profile Permalink Failed to load latest commit information. .tx Synchronize translations Feb 14, 2016 modules Merge branch '0.9.1' Jun 24, 2016 src Implement #1346 Feb 7, 2016 translations #1214 Synchronized new spanish translations with transifex Dec 14, 2015 .gitignore Debug Appearance UI Jul 28, 2013 .travis.yml Try to reduce noisy maven upload logs so travis log limit is not reached Apr 1, 2016 COPYING.txt Add licences Oct 9, 2012 README.md Update all versions to 0.9.2-SNAPSHOT and README Feb 15, 2016 cddl-1.0.txt Add licences Oct 10, 2012 gpl-3.0.txt Add licences Oct 10, 2012 pom.xml Enable tests in deployment profile Jun 24, 2016 README.md Gephi - The Open Graph Viz Platform Gephi is an award-winning open-source platform for visualizing and manipulating large graphs. It runs on Windows, Mac OS X and Linux. Localization is available in French, Spanish, Japanese, Russian, Brazilian Portuguese, Chinese and Czech. Fast Powered by a built-in OpenGL engine, Gephi is able to push the envelope with very large networks. Visualize networks up to a million elements. All actions (e.g. layout, filter, drag) run in real-time. Simple Easy to install and get started. An UI that is centered around the visualization. Like Photoshop™ for graphs. Modular Extend Gephi with plug-ins. The architecture is built on top of Netbeans Platform and can be extended or reused easily through well-written APIs. Download Gephi for Windows, Mac OS X and Linux and consult the release notes. Example datasets can be found on our wiki. Install and use Gephi Download and Install Gephi on your computer. Get started with the Quick Start and follow the Tutorials. Load a sample dataset and start to play with the data. If you run into any trouble or have questions consult our forum. Latest releases Stable Latest stable release on gephi.org. Nightly builds Current version is 0.9.2-SNAPSHOT gephi-0.9.2-SNAPSHOT-windows.exe (Windows) gephi-0.9.2-SNAPSHOT-macos.dmg (Mac OS X) gephi-0.9.2-SNAPSHOT-linux.tar.gz (Linux) gephi-0.9.2-SNAPSHOT-sources.tar.gz (Sources) Developer Introduction Gephi is developed in Java and uses OpenGL for its visualization engine. Built on the top of Netbeans Platform, it follows a loosely-coupled, modular architecture philosophy. Gephi is split into modules, which depend on other modules through well-written APIs. Plugins can reuse existing APIs, create new services and even replace a default implementation with a new one. Consult the Javadoc for an overview of the APIs. Requirements Java JDK 7 or 8 with preferably Oracle Java JDK. Apache Maven version 3.2.2 or later Checkout and Build the sources Fork the repository and clone git clone git@github.com:username/gephi.git  Run the following command or open the project in Netbeans mvn clean install  Once built, one can test running Gephi cd modules/application mvn nbm:cluster-app nbm:run-platform  Create Plug-ins Gephi is extensible and lets developers create plug-ins to add new features, or to modify existing features. For example, you can create a new layout algorithm, add a metric, create a filter or a tool, support a new file format or database, or modify the visualization. Plugins Portal Plugins Quick Start (5 minutes) Browse the plugins created by the community We've created a Plugins Bootcamp to learn by examples. Gephi Toolkit The Gephi Toolkit project packages essential Gephi modules (Graph, Layout, Filters, IO…) in a standard Java library which any Java project can use for getting things done. It can be used on a server or command-line tool to do the same things Gephi does but automatically. Download GitHub Project Toolkit Portal License Gephi main source code is distributed under the dual license CDDL 1.0 and GNU General Public License v3. Read the Legal FAQs to learn more. Copyright 2011 Gephi Consortium. All rights reserved. The contents of this file are subject to the terms of either the GNU General Public License Version 3 only (""GPL"") or the Common Development and Distribution License(""CDDL"") (collectively, the ""License""). You may not use this file except in compliance with the License. You can obtain a copy of the License at http://gephi.github.io/developers/license/ or /cddl-1.0.txt and /gpl-3.0.txt. See the License for the specific language governing permissions and limitations under the License. When distributing the software, include this License Header Notice in each file and include the License files at /cddl-1.0.txt and /gpl-3.0.txt. If applicable, add the following below the License Header, with the fields enclosed by brackets [] replaced by your own identifying information: ""Portions Copyrighted [year] [name of copyright owner]"" If you wish your version of this file to be governed by only the CDDL or only the GPL Version 3, indicate your decision by adding ""[Contributor] elects to include this software in this distribution under the [CDDL or GPL Version 3] license."" If you do not indicate a single choice of license, a recipient has the option to distribute your version of this file under either the CDDL, the GPL Version 3 or to extend the choice of license to its licensees as provided above. However, if you add GPL Version 3 code and therefore, elected the GPL Version 3 license, then the option applies only if the new code is made subject to such option by the copyright holder. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gephi/gephi/"	"Cross-platform for visualizing and manipulating large graph networks."	"true"
"Utility"	"Guava"	"https://github.com/google/guava"	"Collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O, and so forth."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10444"	"1239"	"2459"	"GitHub - google/guava: Google Core Libraries for Java 6+ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,239 Star 10,444 Fork 2,459 google/guava Code Issues 627 Pull requests 50 Wiki Pulse Graphs Google Core Libraries for Java 6+ 3,554 commits 4 branches 59 releases 66 contributors Java 99.9% Other 0.1% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages jdk5-backport-master jdk5-backport-sync master Nothing to show v19.0 v19.0-rc3 v19.0-rc2 v19.0-rc1 v18.0 v18.0-rc2 v18.0-rc1 v17.0 v17.0-rc2 v17.0-rc1 v16.0.1 v16.0 v16.0-rc1 v15.0 v15.0-rc1 v15.0-cdi1.0 v14.0.1 v14.0 v14.0-rc3 v14.0-rc2 v14.0-rc1 v13.0.1 v13.0 v13.0-rc2 v13.0-rc1 v13.0-final v12.0.1 v12.0 v12.0-rc2 v12.0-rc1 v11.0.2 v11.0.1 v11.0 v11.0-rc1 v10.0.1 v10.0 v10.0-rc3 v10.0-rc2 v10.0-rc1 v9.0 v8.0 v7.0 v6.0 v5.0 v4.0 v3.0 v2.0 v1.0 release jdk5-backport-v17.0 jdk5-backport-v17.0-rc2 jdk5-backport-v17.0-rc1 jdk5-backport-v17.0-post jdk5-backport-v17.0-compatibility jdk5-backport-v16.0 jdk5-backport-v16.0-rc1 jdk5-backport-release jdk5-backport-branch-point jdk5-backport-base Nothing to show New pull request Latest commit 453d921 Jul 15, 2016 Bezier89 committed with cpovirk Rephrase the equals() javadoc in Graph. Remove same statement from Ne… … …twork since there currently are no subinterfaces of Network. Clean up a reference to ""relation"" (that's impressive it snuck in considering we ditched that name long before we actually checked in any code!).  ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=127547695 Permalink Failed to load latest commit information. guava-gwt Increase timeout for each open-source GWT test method from 5 minutes … Jul 8, 2016 guava-testlib Suppress error for comparing objects to themselves Jul 13, 2016 guava-tests More test coverage! Jul 13, 2016 guava Rephrase the equals() javadoc in Graph. Remove same statement from Ne… Jul 15, 2016 util Automatically release snapshots to Maven and Javadoc/JDiff to gh-page… Jun 15, 2015 .gitattributes Add a .gitattributes file to control line ending normalization, which… Nov 4, 2014 .gitignore Add .DS_Store to .gitignore. Mar 30, 2016 .travis.yml Update the travis configurations to only build the ""master"" branch or… Mar 3, 2016 CONTRIBUTING.md Update link to Style Guide. Jul 12, 2016 CONTRIBUTORS fix indentation Apr 14, 2011 COPYING fix indentation Apr 14, 2011 README.md updated readme Mar 22, 2016 cycle_whitelist.txt Push asList() cache down into ImmutableCollection subtypes to avoid h… Jun 7, 2016 javadoc-stylesheet.css Fix a couple of issues with JDK7 javadoc style by using a slightly cu… Jul 17, 2013 pom.xml Change name of Animal Sniffer run. Apr 22, 2016 README.md Guava: Google Core Libraries for Java The Guava project contains several of Google's core libraries that we rely on in our Java-based projects: collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O, and so forth. Requires JDK 1.6 or higher (as of 12.0). Latest release The most recent release is Guava 19.0, released December 9, 2015. 19.0 API Docs: guava, guava-testlib 19.0 API Diffs from 18.0: guava To add a dependency on Guava using Maven, use the following: <dependency>   <groupId>com.google.guava</groupId>   <artifactId>guava</artifactId>   <version>19.0</version> </dependency> To add a dependency using Gradle: dependencies {   compile 'com.google.guava:guava:19.0' }  Snapshots Snapshots of Guava built from the master branch are available through Maven using version 20.0-SNAPSHOT. API documentation and diffs from version 19.0 are available here: Snapshot API Docs: guava Snapshot API Diffs from 19.0: guava Learn about Guava Our users' guide, Guava Explained Presentation slides focusing on base, primitives, and io Presentation slides focusing on cache Presentation slides focusing on util.concurrent A nice collection of other helpful links Links GitHub project Issue tracker: Report a defect or feature request StackOverflow: Ask ""how-to"" and ""why-didn't-it-work"" questions guava-discuss: For open-ended questions and discussion IMPORTANT WARNINGS APIs marked with the @Beta annotation at the class or method level are subject to change. They can be modified in any way, or even removed, at any time. If your code is a library itself (i.e. it is used on the CLASSPATH of users outside your own control), you should not use beta APIs, unless you repackage them (e.g. using ProGuard). Deprecated non-beta APIs will be removed two years after the release in which they are first deprecated. You must fix your references before this time. If you don't, any manner of breakage could result (you are not guaranteed a compilation error). Serialized forms of ALL objects are subject to change unless noted otherwise. Do not persist these and assume they can be read by a future version of the library. Our classes are not designed to protect against a malicious caller. You should not use them for communication between trusted and untrusted code. We unit-test and benchmark the libraries using only OpenJDK 1.7 on Linux. Some features, especially in com.google.common.io, may not work correctly in other environments. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/guava"	"Collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O, and so forth."	"true"
"Utility"	"JADE"	"http://jade.tilab.com/"	"Framework and environment for building and to debugging multi-agent systems."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Framework and environment for building and to debugging multi-agent systems."	"false"
"Utility"	"JavaVerbalExpressions"	"https://github.com/VerbalExpressions/JavaVerbalExpressions"	"A library that helps to construct difficult regular expressions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1204"	"93"	"126"	"GitHub - VerbalExpressions/JavaVerbalExpressions: Java regular expressions made easy. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 93 Star 1,204 Fork 126 VerbalExpressions/JavaVerbalExpressions Code Issues 4 Pull requests 1 Wiki Pulse Graphs Java regular expressions made easy. 105 commits 1 branch 5 releases 20 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.4 v1.3 v1.2 v1.1 v1.0 Nothing to show New pull request Latest commit 6cfe719 Apr 5, 2016 lanwen Merge pull request #54 from gufengwyx8/master … add symbols map for pattern character Permalink Failed to load latest commit information. src add symbols map for pattern character Apr 5, 2016 .gitignore adding oneOf method Feb 1, 2015 .travis.yml Update .travis.yml Jul 19, 2015 LICENSE Update LICENSE Aug 6, 2013 README.md Update README.md Jan 11, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Jan 11, 2016 README.md JavaVerbalExpressions VerbalExpressions is a Java library that helps to construct difficult regular expressions. Getting Started Maven Dependency: <dependency>   <groupId>ru.lanwen.verbalregex</groupId>   <artifactId>java-verbal-expressions</artifactId>   <version>1.4</version> </dependency> You can use SNAPSHOT dependency with adding to pom.xml: <repositories>   <repository>     <id>ossrh</id>     <url>https://oss.sonatype.org/content/repositories/snapshots</url>   </repository> </repositories> Examples VerbalExpression testRegex = VerbalExpression.regex()                                                 .startOfLine().then(""http"").maybe(""s"")                             .then(""://"")                             .maybe(""www."").anythingBut("" "")                             .endOfLine()                             .build();  // Create an example URL String url = ""https://www.google.com"";  // Use VerbalExpression's testExact() method to test if the entire string matches the regex testRegex.testExact(url); //True  testRegex.toString(); // Outputs the regex used:                       // ^(?:http)(?:s)?(?:\:\/\/)(?:www\.)?(?:[^\ ]*)$  VerbalExpression testRegex = VerbalExpression.regex()                                                 .startOfLine().then(""abc"").or(""def"")                                                 .build();  String testString = ""defzzz"";  //Use VerbalExpression's test() method to test if parts if the string match the regex testRegex.test(testString);       // true testRegex.testExact(testString);  // false testRegex.getText(testString);    // returns: def Builder can be cloned: VerbalExpression regex = regex(regex().anything().addModifier('i')).endOfLine().build(); Or can be used in another regex: VerbalExpression.Builder digits = regex().capt().digit().oneOrMore().endCapt().tab(); VerbalExpression regex2 = regex().add(digits).add(digits).build(); Feel free to use any predefined char groups: regex().wordChar().nonWordChar()    .space().nonSpace()    .digit().nonDigit() Define captures: String text = ""aaabcd""; VerbalExpression regex = regex()                 .find(""a"")                 .capture().find(""b"").anything().endCapture().then(""cd"").build();  regex.getText(text)     // returns ""abcd"" regex.getText(text, 1)  // returns ""b"" More complex examples Parse long strings example Other implementations You can view all implementations on VerbalExpressions.github.io [ Javascript - PHP - Python - C# - Objective-C - Ruby - Groovy - Haskell - C++ - ... (moarr) ] Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/VerbalExpressions/JavaVerbalExpressions"	"A library that helps to construct difficult regular expressions."	"true"
"Utility"	"Protégé"	"http://protege.stanford.edu/"	"Provides an ontology editor and a framework to build knowledge-based systems."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"protégé Protégé 5.0.0 is released! Download now! protégé Products Support Community About A free, open-source ontology editor and framework for building intelligent systems Protégé is supported by a strong community of academic, government, and corporate users, who use Protégé to build knowledge-based solutions in areas as diverse as biomedicine, e-commerce, and organizational modeling. Download Now Use webProtégé Trusted by over 305,528 users iProd's aim is to improve the Product Development Process by using an ontology based approach in a backbone software framework. We use Protégé to model the underlying ontologies that connect data integration with business supporting algorithms. It helps us to coordinate the work of an international team by using the possibility to share ontologies via a server and provide diagrams of specific aspects via the Ontoviz plugin. The ontologies will be publicly available after the end of the project and provided upon request. Read More… Roberto d'Ippolito - Research and Development Manager @ Noesis Solutions Protégé-Frames provides the powerful knowledge base for the Essential Project, an open source toolset rated as one of the top Enterprise Architecture Suites in Forrester's latest Wave. Protégé enables us to dynamically extend our meta model (of over 500 classes) and manage complex relationships between all aspects of an organisations' enterprise architecture. Read More… Jonathan Carter - Principal Architect, EAS and co-founder @ The Essential Project We use WebProtégé in ROMULUS, a repository of interchangeable foundational ontologies. ROMULUS allows users to browse foundational ontologies online without the need to install software. Zubeida C. Kahn - PhD Student University of KwaZulu-Natal and UKZN/CSIR-Meraka Centre for Artificial Intelligence Research I'm using Protégé to describe and analyze the ways in which living organisms solve the problems of their existence. These are analyzed and sorted using criteria developed in a general problem-solving system, TRIZ, invented and developed in Russia. The ontology will be able to solve problems in a biomimetic way, driving technology along a route of greater sustainability. The project is in conjunction with Rupert Soar (Freeform Construction) and others. Read More… Julian Vincent - MA PhD DSc FIMechE @ Retired biologist / mechanical engineer We use WebProtégé as a collaborative tool to maintain the glossary in our domain and share knowledge models for specific domains (enterprise architecture, BPM, SOA). We use Protégé as a tool to prepare for the eventual transition from a process-driven to a knowledge-driven execution. Read More… Eddy Vanderlinden - Senior Consultant @ Directorate-General for Informatics (DIGIT) Why Protégé Protégé’s plug-in architecture can be adapted to build both simple and complex ontology-based applications. Developers can integrate the output of Protégé with rule systems or other problem solvers to construct a wide range of intelligent systems. Most important, the Stanford team and the vast Protégé community are here to help. Active Community Protégé is actively supported by a strong community of users and developers that field questions, write documentation, and contribute plug-ins. W3C Standards Support Protégé fully supports the latest OWL 2 Web Ontology Language and RDF specifications from the World Wide Web Consortium. Extensible Open Source Environment Protégé is based on Java, is extensible, and provides a plug-and-play environment that makes it a flexible base for rapid prototyping and application development. Download Now Use webProtégé Follow us on Protégé Home Products Community Support Mailing Lists Documentation Other Options About Our Team BMIR Citing Contact Look no further. The wiki is here. Everything you didn’t know you needed to know about Protégé. Visit the Wiki Copyright © 2016 Stanford Center for Biomedical Informatics Research Protégé is a national resource for biomedical ontologies and knowledge bases supported by the National Institute of General Medical Sciences. Protégé is a core component of The National Center for Biomedical Ontology. Stanford University"	"null"	"null"	"Provides an ontology editor and a framework to build knowledge-based systems."	"true"
"Web Crawling"	"Apache Nutch"	"http://nutch.apache.org/"	"Highly extensible, highly scalable web crawler for production environment."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Nutch™ - Downloads Community Board Reporting Robots Information Contribute Mailing Lists People/Credits Buy Stuff Related Projects Apache Lucene Apache Gora Apache Hadoop Apache Solr Apache Tika Documentation About Nutch Wiki JavaDoc Documentation Nutch Tutorials Nutch FAQs Development Issue Tracker Mailing Lists Nightly Builds Version Control Apache Home Apache License Security Support Thanks Highly extensible, highly scalable Web crawler Nutch is a well matured, production ready Web crawler. Nutch 1.x enables fine grained configuration, relying on Apache Hadoop™ data structures, which are great for batch processing. Download Pluggable parsing, protocols, storage and indexing Being pluggable and modular of course has it's benefits, Nutch provides extensible interfaces such as Parse, Index and ScoringFilter's for custom implementations e.g. Apache Tika™ for parsing. Additonally, pluggable indexing exists for Apache Solr™, Elastic Search, SolrCloud, etc. Learn About Vibrant community, active development Nutch 2.X branch is becoming an emerging alternative taking direct inspiration from 1.X. 2.X differs in one key area; storage is abstracted away from any specific underlying data store by using Apache Gora™ for handling object to persistent data store mappings. Join the Community Tweets by @ApacheNutch ‹ › Apache Nutch News¶ 18 June 2016 - Nutch 1.12 Release¶ The Apache Nutch PMC are pleased to announce the immediate release of Apache Nutch v1.12, we advise all current users and developers of the 1.X series to upgrade to this release. This release is the result of many months of work and over 40 issues addressed. For a complete overview of these issues please see the release report. As usual in the 1.X series, release artifacts are made available as both source and binary and also available within Maven Central as a Maven dependency. The release is available from our DOWNLAODS PAGE. 21 January 2016 - Nutch 2.3.1 Release¶ The Apache Nutch PMC are pleased to announce the immediate release of Apache Nutch v2.3.1, we advise all current users and developers of the 2.X series to upgrade to this release. This bug fix release contains around 40 issues addressed. For a complete overview of these issues please see the release report. As usual in the 2.X series, release artifacts are made available as only source and also available within Maven Central as a Maven dependency. The release is available from our DOWNLAODS PAGE. The recommended Gora backends for this Nutch release are Apache Avro 1.7.6 Apache Hadoop 1.2.1 and 2.5.2 Apache HBase 0.98.8-hadoop2 (although also tested with 1.X) Apache Cassandra 2.0.2 Apache Solr 4.10.3 MongoDB 2.6.X Apache Accumlo 1.5.1 Apache Spark 1.4.1 Thank you to everyone that contributed towards this release. 07 December 2015 - Nutch 1.11 Release¶ The Apache Nutch PMC are pleased to announce the immediate release of Apache Nutch v1.11, we advise all current users and developers of the 1.X series to upgrade to this release. This release is the result of many months of work and around 100 issues addressed. For a complete overview of these issues please see the release report. As usual in the 1.X series, release artifacts are made available as both source and binary and also available within Maven Central as a Maven dependency. The release is available from our DOWNLAODS PAGE. 06 May 2015 - Nutch 1.10 Release¶ The Apache Nutch PMC are pleased to announce the immediate release of Apache Nutch v1.10, we advise all current users and developers of the 1.X series to upgrade to this release. This release is the result of many months of work and well over 100 issues addressed. For a complete overview of these issues please see the release report. As usual in the 1.X series, release artifacts are made available as both source and binary and also available within Maven Central as a Maven dependency. The release is available from our DOWNLAODS PAGE. 23 April 2015 - Apache Nutch Reaches 2000th Jira Issue¶ @ApacheNutch reaches 2000th issue on @TheASF #JIRA with over a decade of #opensource crawling on the #www pic.twitter.com/k3VLhbJQhg— Apache Nutch (@ApacheNutch) April 23, 2015 22 January 2015 - Nutch 2.3 Release¶ The Apache Nutch PMC are pleased to announce the immediate release of Apache Nutch v2.3, we advise all current users and developers of the 2.X series to upgrade to this release. After successful completion of the first Nutch Google Summer of Code project we are pleased to announce that Nutch 2.3 release now comes packaged with a self contained Apache Wicket-based Web Application. This release is the result of many months of work and 143 issues addressed. For a complete overview of these issues please see the release report. As usual in the 2.x series, this release is made available only as source, but is also available within Maven Central as a Maven dependency. The release is available from our DOWNLAODS PAGE. The supported Apache Gora v0.5 backends are; Apache Hadoop 1.0.1 & 2.4.0 Apache Cassandra 2.0.2 Apache HBase 0.94.14 Apache Accumulo 1.5.1 MongoDB 2.12.2 Apache Solr 4.8.1 Apache Avro 1.7.6 Please note that the SQL backend for Gora has been deprecated. 22 September 2014 - Wicket WebApp now part of Nutch 2.x Codebase¶ After successful completion of the first Nutch Google Summer of Code project we are pleased to announce that Nutch 2.X branch now comes packaged with a self contained Apache Wicket-based Web Application. This not only greatly lowers the barrier for direct interaction with the Nutch 2.X REST API but also provides a stepping stone from which we intend to backport this work to the Nutch 1.X (trunk) series. Some of the Web Application features include: Functionality to dynamically load seed URLs in order to bootstrap Nutch crawls Browsable and dynamic editing of Configuration overrides Complete REST API documentation and UML model describing REST API calls, Administration and Job and Configuration Management. The new Web Application feature will be present within the upcoming Nutch 2.3 Release. 16 August 2014 - Apache Nutch v1.9 Released The Apache Nutch PMC are pleased to announce the immediate release of Apache Nutch v1.9, we advise all current users and developers of the 1.X series to upgrade to this release. This release addressed no fewer than 55 issues in total. Please see the list of changes for a full breakdown, or see the release report. As usual in the 1.X series, this release is made available both as source and binary. Additionally developers can find Maven artifacts within Maven Central. The release is available here. 31 July 2014 - Nutch tutorial at upcoming ApacheCon Europe in Budapest The upcoming ApacheCon Europe in Budapest, November 17 - 21, 2014, will offer a one-day Nutch tutorial. Topics will span from Nutch installation and configuration up to plugin development. Both Nutch 1.x and 2.x are covered. The conference is a good opportunity to bring together both users and committers of Nutch and related projects. 01 May 2014 - Apache Nutch Participates in Google Summer of Code For the first time in Nutch project history, we are participating as part of Apache's mentoring efforts in the ever popular Google Summer of Code program. This years project involves the creation of a Apache Wicket-based Web Application for Nutch 2.X branch. Keep your eyes peeled and check here for updates as the project progresses throughout the summer. 07-09 April 2014 - Nutch at ApacheCon 2014, Denver Colorado lots of talk and loads of exposure for this at ApacheCon NA 2014 in the beautiful city of Denver, CO. This year one presentation focused on Building your Big Data Search Stack with Apache Nutch 2.x. You can see presentation slides below and follow the audio (sorry no video) here. 17 March 2014 - Apache Nutch v1.8 Released The Apache Nutch PMC are pleased to announce the immediate release of Apache Nutch v1.8, we advise all current users and developers of the 1.X series to upgrade to this release. Alhough this release includes library upgrades to Crawler Commons 0.3 and Apache Tika 1.5, it also provides over 30 bug fixes as well as 18 improvements. Please see the list of changes for a full breakdown, or see the release report. As usual in the 1.X series, this release is made available both as source and binary. Additionally developers can find Maven artifacts within Maven Central. The release is available here. 02 July 2013 - Apache Nutch v2.2.1 Released The Apache Nutch PMC are pleased to announce the immediate release of Apache Nutch v2.2.1, we advise all current users and developers of the 2.X series to upgrade to this release ASAP. Although this release includes library upgrades to Apache Hadoop 1.2.0 and Apache Tika 1.3, it is predominantly a bug fix for NUTCH-1591 - Incorrect conversion of ByteBuffer to String. Please see the list of changes for a full breakdown, or see the release report. As usual in the 2.x series, this release is made available only as source, but is also available within Maven Central. The release is available here. 24th June 2013 - Apache Nutch v1.7 Released The Apache Nutch PMC are extremely pleased to announce the immediate release of Apache Nutch v1.7. This release includes over 20 bug fixes, as many improvements; most noticeably featuring a new pluggable indexing architecture which currently supports Apache Solr and Elastic Search. Shadowing the recent Nutch 2.2 release, parsing of Robots.txt is now delegated to Crawler-Commons. Key library upgrades have been made to Apache Hadoop 1.2.0 and Apache Tika 1.3. Please see the list of changes or the release report made in this version for a full breakdown. As usual in the 1.x series, the release is made available as binary and source (zip + tar.gz) and is also available within Maven Central. The release is available here. 08 June 2013 - Apache Nutch v2.2 Released The Apache Nutch PMC are extremely pleased to announce the immediate release of Apache Nutch v2.2. This release includes over 30 bug fixes and over 25 improvements representing the third release of increasingly popular 2.x Nutch series. This release features inclusion of Crawler-Commons which Nutch now utilizes for improved robots.txt parsing, library upgrades to Apache Hadoop 1.1.1, Apache Gora 0.3, Apache Tika 1.2 and Automaton 1.11-8. Please see the list of changes or the release report made in this version for a full breakdown. As usual in the 2.x series, this release is made available only as source, but is also available within Maven Central. The release is available here. 06 December 2012 - Apache Nutch v1.6 Released The Apache Nutch PMC are extremely pleased to announce the release of Apache Nutch v1.6. This release includes over 20 bug fixes, the same in improvements, as well as new functionalities including a new HostNormalizer, the ability to dynamically set fetchInterval by MIME-type and functional enhancements to the Indexer API inluding the normalization of URL's and the deletion of robots noIndex documents. Other notable improvements include the upgrade of key dependencies to Tika 1.2 and Automaton 1.11-8. Please see the list of changes or the release report made in this version for a full breakdown. The release is available here. 05 October 2012 - Apache Nutch v2.1 Released The Apache Nutch PMC are very pleased to announce the release of Apache Nutch v2.1. This release continues to provide Nutch users with a simplified Nutch distribution building on the 2.x development drive which is growing in popularity amongst the community. As well as addressing ~20 bugs this release also offers improved properties for better Solr configuration, upgrades to various Gora dependencies and the introduction of the option to build indexes in elastic search. Please see the list of changes made in this version for a full breakdown. The release is available here. 10 August 2012 - Happy 10th Birthday Apache Nutch!! It's official, Apache Nutch is now a decade old! The project has come a long long way since inception, through acceptance into the Apache Incubator way back in Janurary 2005, to the Top Level Project it became on 21st April 2010. Happy birthday Nutch and thanks to all contributors past and present! See Doug Cutting's tweet. 10 July 2012 - Apache Nutch v1.5.1 Released The Apache Nutch PMC are very pleased to announce the release of Apache Nutch v1.5.1. This release is a maintainence release of the popular 1.5.X mainstream version of Nutch which has been widely adopted within the community. Please see the list of changes made in this version for a full breakdown. The release is available here. 07 July 2012 - Apache Nutch v2.0 Released The Apache Nutch PMC are very pleased to announce the release of Apache Nutch v2.0. This release offers users an edition focused on large scale crawling which builds on storage abstraction (via Apache Gora) for big data stores such as Apache Accumulo, Apache Avro, Apache Cassandra, Apache HBase, HDFS, an in memory data store and various high profile SQL stores. After some two years of development Nutch v2.0 also offers all of the mainstream Nutch functionality and it builds on Apache Solr adding web-specifics, such as a crawler, a link-graph database and parsing support handled by Apache Tika for HTML and an array other document formats. Nutch v2.0 shadows the latest stable mainstream release (v1.5.X) based on Apache Hadoop and covers many use cases from small crawls on a single machine to large scale deployments on Hadoop clusters. Please see the list of changes made in this version for a full breakdown. The release is available here. 07 June 2012 - Apache Nutch 1.5 Released The 1.5 release of Nutch is now available. This release includes several improvements including upgrades of several major components including Tika 1.1 and Hadoop 1.0.0, improvements to LinkRank and WebGraph elements as well as a number of new plugins covering blacklisting, filering and parsing to name a few. Please see the list of changes made in this version for a full breakdown of the 50 odd improvements the release boasts. The release is available here. 26 November 2011 - Apache Nutch 1.4 Released The 1.4 release of Nutch is now available. This release includes several improvements including allowing Parsers to declare support for multiple MIME types, configurable Fetcher Queue depth, Fetcher speed improvements, tigther Tika integration, and support for HTTP auth in Solr indexing. Please see the list of changes made in this version. The release is available here. 23 September 2011 - Apache Nutch focuses on 1.x series for main development After some discussion and a vote about the issue, the Nutch development community decided to focus their efforts on maintaining and releasing the 1.x series of Nutch, and to branch the now former Nutch trunk based on Gora, allowing others to try and improve it, while the mainline development goes on. 7 June 2011 - Apache Nutch 1.3 Released The 1.3 release of Nutch is now available. This release includes several improvements (improved RSS parsing support, tighter integration with Apache Tika, external parsing support, improved language identification and an order of magnitude smaller source release tarball -- only about 2MB!). Please see the list of changes made in this version. The release is available here. 24 September 2010 - Apache Nutch 1.2 Released The 1.2 release of Nutch is now available. This release includes several improvements (addition of parse-html as a selectable parser again, configurable per-field indexing), new features (including adding timing information to all Tool classes, and implementation of parser timeouts), and bug fixes (fixing an NPE in distributed search, fixing of XML formatting issues per Document fields). Please see the list of changes made in this version. The release is available here. 06 June 2010 - Apache Nutch 1.1 Released The 1.1 release of Nutch is now available. This release includes several major upgrades of existing libraries (Hadoop, Solr, Tika, etc.) on which Nutch depends. Various bug fixes, and speedups (e.g., to Fetcher2) have also been included. See list of changes made in this version. The release is available here. 21 April 2010 - Apache Nutch graduates to TLP Passed by unanimous approval of the Apache Board, Nutch graduated to TLP status. We are in the process of updating the website, and moving things around, so if you notice anything out of place, please let us know. 14 August 2009 - Lucene at US ApacheCon ApacheCon US is once again in the Bay Area and Lucene is coming along for the ride! The Lucene community has planned two full days of talks, plus a meetup and the usual bevy of training. With a well-balanced mix of first time and veteran ApacheCon speakers, the Lucene track at ApacheCon US promises to have something for everyone. Be sure not to miss: Training: Lucene Boot Camp - A two day training session, Nov. 2nd & 3rd Solr Day - A one day training session, Nov. 2nd Thursday, Nov. 5th Introduction to the Lucene Ecosystem - Grant Ingersoll @ 9:00 Lucene Basics and New Features - Michael Busch @ 10:00 Apache Solr: Out of the Box - Chris Hostetter @ 14:00 Introduction to Nutch - Andrzej Bialecki @ 15:00 Lucene and Solr Performance Tuning - Mark Miller @ 16:30 Friday, Nov. 6th Implementing an Information Retrieval Framework for an Organizational Repository - Sithu D Sudarsan @ 9:00 Apache Mahout - Going from raw data to Information - Isabel Drost @ 10:00 MIME Magic with Apache Tika - Jukka Zitting @ 11:30 Building Intelligent Search Applications with the Lucene Ecosystem - Ted Dunning @ 14:00 Realtime Search - Jason Rutherglen @ 15:00 23 March 2009 - Apache Nutch 1.0 Released The 1.0 release of Nutch is now available. This release includes several major feature improvements such as new indexing framework, new scoring framework, Apache Solr integration just to mention a few. See list of changes made in this version. The release is available here. 09 February 2009 - Lucene at ApacheCon Europe 2009 in Amsterdam Lucene will be extremely well represented at ApacheCon EU 2009 in Amsterdam, Netherlands this March 23-27, 2009: Lucene Boot Camp - A two day training session, March 23 & 24th Solr Boot Camp - A one day training session, March 24th Introducing Apache Mahout - Grant Ingersoll. March 25th @ 10:30 Lucene/Solr Case Studies - Erik Hatcher. March 25th @ 11:30 Advanced Indexing Techniques with Apache Lucene - Michael Busch. March 25th @ 14:00 Apache Solr - A Case Study - Uri Boness. March 26th @ 17:30 Best of breed - httpd, forrest, solr and droids - Thorsten Scherler. March 27th @ 17:30 Apache Droids - an intelligent standalone robot framework - Thorsten Scherler. March 26th @ 15:00 2 April 2007: Nutch 0.9 Released The 0.9 release of Nutch is now available. This is the second release of Nutch based entirely on the underlying Hadoop platform. This release includes several critical bug fixes, as well as key speedups described in more detail at Sami Siren's blog. See list of changes made in this version. The release is available here. 24 September 2006: Nutch 0.8.1 Released The 0.8.1 release of Nutch is now available. This is a maintenance release to 0.8 branch fixing many serous bugs found in version 0.8. See list of changes made in this version. The release is available here. 25 July 2006: Nutch 0.8 Released The 0.8 release of Nutch is now available. This is the first release of Nutch based on hadoop architecure. See CHANGES.txt for list of changes made in this version. The release is available here. 31 March 2006: Nutch 0.7.2 Released The 0.7.2 release of Nutch is now available. This is a bug fix release for 0.7 branch. See CHANGES.txt for details. The release is available here. 1 October 2005: Nutch 0.7.1 Released The 0.7.1 release of Nutch is now available. This is a bug fix release. See CHANGES.txt for details. The release is available here. 17 August 2005: Nutch 0.7 Released This is the first Nutch release as an Apache Lucene sub-project. See CHANGES.txt for details. The release is available here. June 2005: Nutch graduates from Incubator Nutch has now graduated from the Apache incubator, and is now a Subproject of Lucene. January 2005: Nutch Joins Apache Incubator Nutch is a two-year-old open source project, previously hosted at Sourceforge and backed by its own non-profit organization. The non-profit was founded in order to assign copyright, so that we could retain the right to change the license. We have now determined that the Apache license is the appropriate license for Nutch and no longer require the overhead of an independent non-profit organization. Nutch's board of directors and its developers were both polled and supported the move to the Apache foundation. September 2004: Creative Commons launches Nutch-based Search Creative Commons unveiled a beta version of its search engine, which scours the web for text, images, audio, and video free to re-use on certain terms a search refinement offered by no other company or organization. See the Creative Commons Press Release for more details. September 2004: Oregon State University switches to Nutch Oregon State University is converting its searching infrastructure from Googletm to the open source project Nutch. The effort to replace the Googletm will realize significant cost savings for Oregon State University, while promoting both the Nutch Search Engine and transparency in search engine use and management. For more details see the announcement by OSU's Open Source Lab. Photo Attributions¶ The Apache Nutch site was constructed using several photo's fetched from Flickr using Nutch. These photo's are licensed under the Creative Commons Attribution-ShareAlike 2.0 Generic. The photos are as follows Switch - andrewfhart (Flickr) All Systems Go! - andrewfhart (Flickr) Server Rack - mrmuskrat (Flickr) Switched - splorp (Flickr) Back to top Copyright © 2004-2014 The Apache Software Foundation. Licensed under Apache License 2.0. Apache Nutch, Nutch, Apache, the Apache feather logo, and the Apache Nutch project logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Highly extensible, highly scalable web crawler for production environment."	"true"
"Web Crawling"	"Crawler4j"	"https://github.com/yasserg/crawler4j"	"Simple and lightweight web crawler."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1145"	"196"	"787"	"GitHub - yasserg/crawler4j: Open Source Web Crawler for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 196 Star 1,145 Fork 787 yasserg/crawler4j Code Issues 64 Pull requests 26 Wiki Pulse Graphs Open Source Web Crawler for Java 211 commits 1 branch 2 releases 14 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show crawler4j-4.2 crawler4j-4.1 Nothing to show New pull request Latest commit 4a89f0a Apr 4, 2016 yasserg Merge pull request #117 from rvenutolo/robotstxtuseragentlowercase … When checking robots.txt directive user agent against crawler user agent use lowercase. Permalink Failed to load latest commit information. src Converted crawler user agent string to lowercase to address bug with … Apr 2, 2016 .gitignore Added support for NT authentication to support crawling sites protect… Apr 15, 2015 .travis.yml Add travis config May 27, 2015 CHANGES.txt Update CHANGES.txt Feb 2, 2015 LICENSE Add license notice May 27, 2015 README.md Fixed typo at proxy authentication Mar 21, 2016 pom.xml [maven-release-plugin] prepare for next development iteration Dec 2, 2015 README.md crawler4j crawler4j is an open source web crawler for Java which provides a simple interface for crawling the Web. Using it, you can setup a multi-threaded web crawler in few minutes. Installation Using Maven To use the latest release of crawler4j, please use the following snippet in your pom.xml     <dependency>         <groupId>edu.uci.ics</groupId>         <artifactId>crawler4j</artifactId>         <version>4.2</version>     </dependency> Without Maven crawler4j JARs are available on the releases page and at Maven Central. If you use crawler4j without Maven, be aware that crawler4j jar file has a couple of external dependencies. In releases page, you can find a file named crawler4j-X.Y-with-dependencies.jar that includes crawler4j and all of its dependencies as a bundle. You can add download it and add it to your classpath to get all the dependencies covered. Quickstart You need to create a crawler class that extends WebCrawler. This class decides which URLs should be crawled and handles the downloaded page. The following is a sample implementation: public class MyCrawler extends WebCrawler {      private final static Pattern FILTERS = Pattern.compile("".*(\\.(css|js|gif|jpg""                                                            + ""|png|mp3|mp3|zip|gz))$"");      /**      * This method receives two parameters. The first parameter is the page      * in which we have discovered this new url and the second parameter is      * the new url. You should implement this function to specify whether      * the given url should be crawled or not (based on your crawling logic).      * In this example, we are instructing the crawler to ignore urls that      * have css, js, git, ... extensions and to only accept urls that start      * with ""http://www.ics.uci.edu/"". In this case, we didn't need the      * referringPage parameter to make the decision.      */      @Override      public boolean shouldVisit(Page referringPage, WebURL url) {          String href = url.getURL().toLowerCase();          return !FILTERS.matcher(href).matches()                 && href.startsWith(""http://www.ics.uci.edu/"");      }       /**       * This function is called when a page is fetched and ready       * to be processed by your program.       */      @Override      public void visit(Page page) {          String url = page.getWebURL().getURL();          System.out.println(""URL: "" + url);           if (page.getParseData() instanceof HtmlParseData) {              HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();              String text = htmlParseData.getText();              String html = htmlParseData.getHtml();              Set<WebURL> links = htmlParseData.getOutgoingUrls();               System.out.println(""Text length: "" + text.length());              System.out.println(""Html length: "" + html.length());              System.out.println(""Number of outgoing links: "" + links.size());          }     } } As can be seen in the above code, there are two main functions that should be overridden: shouldVisit: This function decides whether the given URL should be crawled or not. In the above example, this example is not allowing .css, .js and media files and only allows pages within 'www.ics.uci.edu' domain. visit: This function is called after the content of a URL is downloaded successfully. You can easily get the url, text, links, html, and unique id of the downloaded page. You should also implement a controller class which specifies the seeds of the crawl, the folder in which intermediate crawl data should be stored and the number of concurrent threads: public class Controller {     public static void main(String[] args) throws Exception {         String crawlStorageFolder = ""/data/crawl/root"";         int numberOfCrawlers = 7;          CrawlConfig config = new CrawlConfig();         config.setCrawlStorageFolder(crawlStorageFolder);          /*          * Instantiate the controller for this crawl.          */         PageFetcher pageFetcher = new PageFetcher(config);         RobotstxtConfig robotstxtConfig = new RobotstxtConfig();         RobotstxtServer robotstxtServer = new RobotstxtServer(robotstxtConfig, pageFetcher);         CrawlController controller = new CrawlController(config, pageFetcher, robotstxtServer);          /*          * For each crawl, you need to add some seed urls. These are the first          * URLs that are fetched and then the crawler starts following links          * which are found in these pages          */         controller.addSeed(""http://www.ics.uci.edu/~lopes/"");         controller.addSeed(""http://www.ics.uci.edu/~welling/"");         controller.addSeed(""http://www.ics.uci.edu/"");          /*          * Start the crawl. This is a blocking operation, meaning that your code          * will reach the line after this only when crawling is finished.          */         controller.start(MyCrawler.class, numberOfCrawlers);     } } More Examples Basic crawler: the full source code of the above example with more details. Image crawler: a simple image crawler that downloads image content from the crawling domain and stores them in a folder. This example demonstrates how binary content can be fetched using crawler4j. Collecting data from threads: this example demonstrates how the controller can collect data/statistics from crawling threads. Multiple crawlers: this is a sample that shows how two distinct crawlers can run concurrently. For example, you might want to split your crawling into different domains and then take different crawling policies for each group. Each crawling controller can have its own configurations. Shutdown crawling: this example shows have crawling can be terminated gracefully by sending the 'shutdown' command to the controller. Configuration Details The controller class has a mandatory parameter of type CrawlConfig. Instances of this class can be used for configuring crawler4j. The following sections describe some details of configurations. Crawl depth By default there is no limit on the depth of crawling. But you can limit the depth of crawling. For example, assume that you have a seed page ""A"", which links to ""B"", which links to ""C"", which links to ""D"". So, we have the following link structure: A -> B -> C -> D Since, ""A"" is a seed page, it will have a depth of 0. ""B"" will have depth of 1 and so on. You can set a limit on the depth of pages that crawler4j crawls. For example, if you set this limit to 2, it won't crawl page ""D"". To set the maximum depth you can use: crawlConfig.setMaxDepthOfCrawling(maxDepthOfCrawling); Maximum number of pages to crawl Although by default there is no limit on the number of pages to crawl, you can set a limit on this: crawlConfig.setMaxPagesToFetch(maxPagesToFetch); Politeness crawler4j is designed very efficiently and has the ability to crawl domains very fast (e.g., it has been able to crawl 200 Wikipedia pages per second). However, since this is against crawling policies and puts huge load on servers (and they might block you!), since version 1.3, by default crawler4j waits at least 200 milliseconds between requests. However, this parameter can be tuned: crawlConfig.setPolitenessDelay(politenessDelay); Proxy Should your crawl run behind a proxy? If so, you can use: crawlConfig.setProxyHost(""proxyserver.example.com""); crawlConfig.setProxyPort(8080); If your proxy also needs authentication: crawlConfig.setProxyUsername(username); crawlConfig.setProxyPassword(password); Resumable Crawling Sometimes you need to run a crawler for a long time. It is possible that the crawler terminates unexpectedly. In such cases, it might be desirable to resume the crawling. You would be able to resume a previously stopped/crashed crawl using the following settings: crawlConfig.setResumableCrawling(true); However, you should note that it might make the crawling slightly slower. User agent string User-agent string is used for representing your crawler to web servers. See here for more details. By default crawler4j uses the following user agent string: ""crawler4j (https://github.com/yasserg/crawler4j/)""  However, you can overwrite it: crawlConfig.setUserAgentString(userAgentString); License Copyright (c) 2010-2015 Yasser Ganjisaffar Published under Apache License 2.0, see LICENSE Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/yasserg/crawler4j"	"Simple and lightweight web crawler."	"true"
"Web Crawling"	"JSoup"	"http://jsoup.org/"	"Scrapes, parses, manipulates and cleans HTML."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3128"	"284"	"1013"	"GitHub - jhy/jsoup: jsoup: Java HTML Parser, with best of DOM, CSS, and jquery Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 284 Star 3,128 Fork 1,013 jhy/jsoup Code Issues 157 Pull requests 36 Pulse Graphs jsoup: Java HTML Parser, with best of DOM, CSS, and jquery http://jsoup.org 917 commits 1 branch 31 releases 45 contributors Java 56.7% HTML 43.3% Java HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show jsoup-1.9.2 jsoup-1.9.1 jsoup-1.9.1a jsoup-1.8.3 jsoup-1.8.3a jsoup-1.8.2 jsoup-1.8.1.a jsoup-1.7.3 jsoup-1.7.2 jsoup-1.7.1 jsoup-1.6.3 jsoup-1.6.2 jsoup-1.6.1 jsoup-1.6.0 jsoup-1.5.2 jsoup-1.5.1 jsoup-1.4.1 jsoup-1.3.3 jsoup-1.3.2 jsoup-1.3.1 jsoup-1.2.3 jsoup-1.2.2 jsoup-1.2.1 jsoup-1.1.1 jsoup-0.3.1 jsoup-0.2.2 jsoup-0.2.1 jsoup-0.2.1b jsoup-0.2.1a jsoup-0.1.2 jsoup-0.1.1 Nothing to show New pull request Latest commit f6a1ef3 May 20, 2016 jhy Update links to https://jsoup.org/ Permalink Failed to load latest commit information. src Update links to https://jsoup.org/ May 20, 2016 .gitignore Updated ignore list Jul 2, 2011 .travis.yml Create .travis.yml May 14, 2014 CHANGES Changelog update for release May 17, 2016 LICENSE Bump copyright year Apr 5, 2016 README Update links to https://jsoup.org/ May 20, 2016 pom.xml Update links to https://jsoup.org/ May 20, 2016 README jsoup: Java HTML parser that makes sense of real-world HTML soup.  jsoup is a Java library for working with real-world HTML. It provides a very convenient API for extracting and manipulating data, using the best of DOM, CSS, and jquery-like methods.  jsoup implements the WHATWG HTML5 specification (http://whatwg.org/html), and parses HTML to the same DOM as modern browsers do.  * parse HTML from a URL, file, or string * find and extract data, using DOM traversal or CSS selectors * manipulate the HTML elements, attributes, and text * clean user-submitted content against a safe white-list, to prevent XSS * output tidy HTML  jsoup is designed to deal with all varieties of HTML found in the wild; from pristine and validating, to invalid tag-soup; jsoup will create a sensible parse tree.  jsoup runs on Java 1.5 and up.  See https://jsoup.org/ for downloads and documentation.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jhy/jsoup"	"Scrapes, parses, manipulates and cleans HTML."	"true"
"Web Frameworks"	"Apache Tapestry"	"http://tapestry.apache.org/"	"Component-oriented framework for creating dynamic, robust, highly scalable web applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Apache Tapestry Home Page       Home Getting Started Documentation Download About Community Apache Sponsorship Thanks A component-oriented framework for creating highly scalable web applications in Java. Java Power Tapestry pages and components are simple Java POJOs, with easy access to all Java language features and the vast Java ecosystem. Thanks to Java's advanced concurrency API, Tapestry handles requests fast without sacrificing security or stability. Scripting Ease Tapestry features live class reloading: change your Java code, refresh the browser and see the changes... instantly! Have your cake and eat it too: the speed and depth of Java, the agile development style of Ruby or Python. Super Productivity  Simple POJO classes, streamlined templates, live class reloading, state-of-the-art exception reporting, first-class Ajax support, and a big library of built-in components: Tapestry is designed from the ground up to give you great productivity. We think you will love Tapestry! Give us 20 minutes and follow our quickstart guide. Download Tapestry   Tapestry5-jQuery Tapestry-security Tapestry-comentd More modules and components... Hotel Booking JumpStart Stitch More demos... What is Tapestry? Pure Java and Polyglot Written in pure Java: code your pages and components in Java, Groovy or Scala. Highly Productive Live class reloading means that the time between seeing an error and providing the fix is seconds, not minutes. Advanced Exception Reporting Gives you all the tools you need to fix your problem: not just a stack trace, but details about what Tapestry was doing and why, what went wrong, and how to fix it. Fast Pure Java; no reflection, not even for property expressions. Built to cleanly support large numbers of concurrent threads without contention. Integrated GZip content compression, JavaScript aggregation and compression, and client-side caching. Convention over Configuration Dependency injection and meta-programming through annotations and naming conventions. Scalable Scales up big on a single server, and works great in a cluster. Keeps session state minimal by design. Testable Committed to testability throughout design; built-in utilities to enhance TDD. Support for Selenium for integration testing. Adaptable and Modular Architecture is open and extensible. There's a clean way to add your own extensions, or override built-in logic. Provides integration with Hibernate, JPA and Spring. Third-party integrations with other tools, such as Quartz and Lucene.  More on Tapestry philosophy - Who uses Tapestry ? #tapestry5 Tweets   Latest news Tapestry 5.4.1 Jochen Kemnade posted on Apr 13, 2016 This is probably old news, but we have created another release in the 5.4.x series. Have a look at the release notes and give the latest version a spin while we pick up pace for Tapestry 5.5. Tapestry 5.4.0 Jochen Kemnade posted on Dec 21, 2015 The long wait is finally over. We are happy to announce the availability of the 5.4.0 release. Although a lot has changed under the hood, for most users, it should be a drop-in replacement for any version of the 5.3 series. Please head over to the Release Notes to read about the numerous changes that the 5.4.0 version brings and that make this release on of the best we ever made. The release is available from the Maven Central Repository, or as a direct download https://tapestry.apache.… Tapestry 5.4 release candidate Jochen Kemnade posted on Oct 30, 2015 After a series of alpha and beta releases, some of which have been released into the wild, we're happy to announce that we created a release candidate for the 5.4 release. We have fixed a couple of bugs, updated some internal libraries and improved performance and stability. This release is available from the Maven Central Repository, or as a direct download https://tapestry.apache.org/download.html. Please give it a spin and let us know how it is working for you. If you find any bugs,…         Apache Tapestry, Tapestry, Apache, the Apache feather logo, and the Apache Tapestry project logo are trademarks of The Apache Software Foundation."	"null"	"null"	"Component-oriented framework for creating dynamic, robust, highly scalable web applications."	"true"
"Web Frameworks"	"Apache Wicket"	"http://wicket.apache.org/"	"Component-based web application framework similar to Tapestry with a stateful GUI."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Home | Apache Wicket Quick Start Download Documentation Support Contribute Community Apache Write maintainable, secure and scalable web applications using just Java and HTML Latest News Get started Live Examples Current release: 7.3.0   Introducing Apache Wicket Invented in 2004, Wicket is one of the few survivors of the Java serverside web framework wars of the mid 2000's. Wicket is an open source, component oriented, serverside, Java web application framework. With a history of over a decade, it is still going strong and has a solid future ahead. Learn why you should consider Wicket for your next web application. Just Java & HTML Leverage what you know about Java or your favourite HTML editor to write Wicket applications. With pure Java code and HTML markup Wicket is the go-to web framework for purists. Secure by Default URLs do not expose sensitive information and all component paths are session-relative. Wicket keeps your model private except those parts you explicitly expose. AJAX Components Write Ajax applications without having to write a single line of JavaScript code. Wicket's Ajax functionality makes it trivial to update selected parts of a UI, and comes with a great selection of basic Ajax components. Open Source with Apache License Since its inception in 2004 Wicket has been an open source project and remains available under one of the most permissive licenses: the Apache Software License. Maintainable code Pages and Components in Wicket are real Java objects that support encapsulation, inheritance and events. Create high level components with ease and bundle its stylesheets, JavaScript and other resources into one reusable package. Internationalized to take on the world With support of over 25 languages out-of-the-box, Wicket let's you get started in your own language, or a second language with no effort. You can provide alternative languages on the application, page, or even component level. Multi-tab and window support No more pain while keeping taps on multiple tabs and windows. Wicket's automatic state storage ensures that your users can open pages in new tabs and windows without causing problems. Work with JavaScript and CSS Global JavaScript libraries and CSS styling mix properly with component local JavaScript and CSS resources. You can use custom component libraries that ship with default JavaScript behaviour and CSS styling, without having to do anything yourself. Creating such self-contained component libraries is as easy as creating a JAR file. Test your pages and components With WicketTester you can achieve testing coverage your QA department can only dream of. Test your pages without having to run inside a browser, or start a container. Test your components directly, check their rendered markup tags, attributes and contents with ease. Injection support Inject your services into your pages and components with the technology of your choosing: Wicket provides integration with CDI (JSR-305), Spring and Guice. JavaEE integration If you are using the Web profile of JavaEE 6 or newer, you can leverage JPA, EJBs, Bean Validation and CDI with Wicket's integrations for these specifications. Projects Using Apache Wicket Many projects use Wicket but are not known for it. Below you find a list of projects that are Powered by Wicket. This list is generated from our Tumblr feed 'Built with Wicket'. You can submit your own project to this list through this form. News about Apache Wicket Get the latest updates to releases, security bulletins, community news and more. Apache Wicket 7.3.0 released 05 May 2016 The Apache Wicket PMC is proud to announce Apache Wicket 7.3.0! Apache Wicket is an open source Java component oriented web application framework that powers thousands of web applications and web sites for governments, stores, universities, cities, banks, email providers, and more. You can find more about Apache Wicket at https://wicket.apache.org This release marks another minor release of Wicket 7. We use semantic versioning for the development of Wicket, and as such no API breaks are present breaks are present in this release compared to 7.0.0. New and noteworthy Wicket Metrics added A new experimental module for integrating with DropWizard’s Metrics project was created. Metrics provides a powerful toolkit of ways to measure the behavior of critical components in your production environment. Using the Metrics integration requires the use of AspectJ (which is licensed under the Eclipse Public License 1.0) You can read more about using the Metrics integration in our user guide’s monitoring chapter. jQuery upgrade Wicket ships standard with it’s own jQuery. With this release jQuery was upgraded to 1.12.3/2.2.3. Read more... Apache Wicket 6.23.0 released 05 May 2016 The Apache Wicket PMC is proud to announce Apache Wicket 6.23.0! Apache Wicket is an open source Java component oriented web application framework that powers thousands of web applications and web sites for governments, stores, universities, cities, banks, email providers, and more. You can find more about Apache Wicket at https://wicket.apache.org This release marks another minor release of Wicket 6. We use semantic versioning for the development of Wicket, and as such no API breaks are present breaks are present in this release compared to 6.0.0. New and noteworthy jQuery upgrade Wicket ships standard with it’s own jQuery. With this release jQuery was upgraded to 1.12.3/2.2.3. Read more... Older news See the archives for all news articles concerning release, security and community updates. Note that you can subscribe to our RSS feed to get updates in your favorite RSS reader the moment they happen. Apache Wicket 6.23.0 released 05 May 2016 The Apache Wicket PMC is proud to announce Apache Wicket 6.23.0! Apache Wicket is an open source Java component oriented web application framework that powers... more CVE-2015-7520 Apache Wicket XSS vulnerability 02 Mar 2016 Severity: Important Vendor: The Apache Software Foundation Versions Affected: Apache Wicket 1.5.x, 6.x and 7.x Description: It is possible for JavaScript statements to break out... more CVE-2015-5347 Apache Wicket XSS vulnerability 01 Mar 2016 Severity: Important Vendor: The Apache Software Foundation Versions Affected: Apache Wicket 1.5.x, 6.x and 7.x Description: It is possible for JavaScript statements to break out... more Apache Wicket 6.22.0 released 19 Feb 2016 The Apache Wicket PMC is proud to announce Apache Wicket 6.22.0! This release marks another minor release of Wicket 6. We use semantic versioning for... more Wicket 1.5.15 released 19 Feb 2016 This is the fifteenth maintenance release of the Wicket 1.5.x series. This release brings over 2 bug fixes. CHANGELOG for 1.5.15: Bug [WICKET-6037] - ModalWindow... more Copyright © 2016 — The Apache Software Foundation. Apache Wicket, Wicket, Apache, the Apache feather logo, and the Apache Wicket project logo are trademarks of The Apache Software Foundation. All other marks mentioned may be trademarks or registered trademarks of their respective owners."	"null"	"null"	"Component-based web application framework similar to Tapestry with a stateful GUI."	"true"
"Web Frameworks"	"Blade"	"https://github.com/biezhi/blade"	"Lightweight, modular framework which aims to be elegant and simple."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1508"	"121"	"294"	"GitHub - biezhi/blade: A Simple, Elegant Java Web Framework! website → Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 121 Star 1,508 Fork 294 biezhi/blade Code Issues 4 Pull requests 0 Wiki Pulse Graphs 🚀 A Simple, Elegant Java Web Framework! website → http://bladejava.com/ 472 commits 2 branches 13 releases 9 contributors Java 100.0% Java Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master Nothing to show 1.5.0 1.5.0-beta 1.4.1 1.4.1-alpha 1.4.0 1.4.0-beta 1.4.0-alpha 1.2.9 1.2.9-beta 1.2.7-beta 1.2.7-alpha 1.2.6 1.2.5 Nothing to show New pull request Latest commit a79d871 Apr 19, 2016 biezhi update readme Permalink Failed to load latest commit information. blade-core update blade to 1.6.2 Apr 12, 2016 blade-kit update readme Apr 11, 2016 blade-startup fix jetty for jdk7 Nov 9, 2015 .coveralls.yml To organize the project structure Jul 9, 2015 .gitignore ignore all classpath/target/.settings etc. Dec 22, 2015 .travis.yml Update .travis.yml Dec 8, 2015 LAST_VERSION.md update blade to 1.6.2 Apr 12, 2016 LICENSE a friendly error message Dec 29, 2015 README.md update readme Apr 19, 2016 README_CN.md update readme Apr 19, 2016 UPDATE_LOG.md update blade to 1.6.2 Apr 12, 2016 pom.xml update blade to 1.6.2 Apr 12, 2016 README.md 中文说明 What Is Blade? Blade is a lightweight MVC framework. It is based on the principles of simplicity and elegance. If you like it, please star and fork it. Thank you! Features Lightweight: the code is simple and the structure is clear Modular (you can choose which components to use) Supports plug-in extension mechanism RESTful style routing interface Supports multiple configuration files (currently properties, json and coding) Embedded jetty server and template engine support Supports JDK 1.6 and up Overview Simplicity: The design is simple, easy to understand and doesn't introduce many layers between you and the standard library. The goal of this project is that the users should be able to understand the whole framework in a single day. Elegance: blade supports the RESTful style routing interface, has no invasive interceptors and provides the writing of DSL grammar. Get Start To get started, first include the Blade library : Grab via Maven： <dependency>     <groupId>com.bladejava</groupId>     <artifactId>blade-core</artifactId>     <version>1.6.2</version> </dependency> <dependency>     <groupId>com.bladejava</groupId>     <artifactId>blade-startup</artifactId>     <version>1.0.1</version> </dependency> or Gradle: compile 'com.bladejava:blade-core:1.6.2' compile 'com.bladejava:blade-startup:1.0.1' Create Main method like this： public class App {      public static void main(String[] args) {         Blade blade = me();         blade.get(""/"", (request, response) -> {             response.html(""<h1>Hello blade!</h1>"");         });         blade.listen(9001).start();     } } Run it and point your browser to http://localhost:9001. There you go, you've just created your first Blade app! API Example public static void main(String[] args) {     Blade blade = me();     blade.get(""/user/21"", getxxx);     blade.post(""/save"", postxxx);     blade.delete(""/del/21"", deletexxx);     blade.put(""/put"", putxxx);     blade.listen(9001).start(); } REST URL Parameters public static void main(String[] args) {     Blade blade = me();     blade.get(""/user/:uid"", (request, response) -> {         Integer uid = request.paramAsInt(""uid"");         response.text(""uid : "" + uid);     });      blade.get(""/users/:uid/post/:pid"", (request, response) -> {         Integer uid = request.paramAsInt(""uid"");         Integer pid = request.paramAsInt(""pid"");         String msg = ""uid = "" + uid + "", pid = "" + pid;         response.text(msg);     });      blade.listen(9001).start(); } Form URL Parameters public static void main(String[] args) {     Blade blade = me();     blade.get(""/user"", (request, response) -> {         Integer uid = request.queryAsInt(""uid"");         response.text(""uid : "" + uid);     });     blade.listen(9001).start(); } Upload File public void upload_img(Request request, Response response){      FileItem[] fileItems = request.files();     if(null != fileItems && fileItems.length > 0){          FileItem fileItem = fileItems[0];         File file = fileItem.getFile();          String fileRealPath = ""your upload file path!"";          nioTransferCopy(file, fileRealPath);     } } Route Config File route.conf GET     /                   IndexRoute.home GET     /signin             IndexRoute.show_signin POST    /signin             IndexRoute.signin GET     /signout            IndexRoute.signout POST    /upload_img         UploadRoute.upload_img Route Intercept public static void main(String[] args) {     Blade blade = me();     blade.before(""/.*"", (request, response) -> {         System.out.println(""before..."");     });     blade.listen(9001).start(); } DSL DB Operation // query List<Post> posts =     AR.find(""where title like ? order by id desc limit ?,?"", title, page, count).list(Post.class);  // save String insertSql = ""insert into t_post (title, content, view_count, create_time) values (?,?,?,?)""; AR.update(insertSql, title, content, 0, new Date()).commit();  // update AR.update(""update t_post set title = ? and content = ? where id = ?"",title, content, id).commit();  // delete AR.update(""delete from t_post where id = ?"",id).commit() You may refer to these examples for additional guidance: Hello Blade BBS WebSite API Doc User Guide Version Changes Examples Plan 1. Add the test code 2. Optimize the code base 3. Optimization of concurrent ability Update update log Contact Blog:https://biezhi.me Mail: biezhi.me@gmail.com Contributor Thank you very much for the developers to help in the project, if you are willing to contribute, welcome! mfarid daimajia shenjie1993 sumory udaykadaboina SyedWasiHaider Awakens shellac SudarAbisheck Licenses Please see Apache License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/biezhi/blade"	"Lightweight, modular framework which aims to be elegant and simple."	"true"
"Web Frameworks"	"Grails"	"https://grails.org/"	"Groovy framework with the aim to provide a highly productive environment by favoring convention over configuration, no XML and support for mixins."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1831"	"198"	"826"	"GitHub - grails/grails-core: The Grails Web Application Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 198 Star 1,831 Fork 826 grails/grails-core Code Issues 230 Pull requests 11 Wiki Pulse Graphs The Grails Web Application Framework http://grails.org 17,155 commits 167 branches 122 releases 187 contributors Java 50.2% Groovy 49.2% CSS 0.3% HTML 0.2% Shell 0.1% Python 0.0% Java Groovy CSS HTML Shell Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.1.x 1.2.x 1.3.x 1.3.0.RC2 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 3.0.x 3.1.x GRAILS-5087 GRAILS-6278 GRAILS-6737-Groovy-1.7.5 GRAILS-6766 GRAILS-8426 GRAILS-9664 GRAILS-9686 GRAILS-9996 GRAILS-9997 GRAILS-10031 GRAILS-10448 GRAILS-10512 GRAILS-10533 GRAILS-10613 GRAILS-10631 GRAILS-10660 GRAILS-10683b GRAILS-10683 GRAILS-10728 GRAILS-10780 GRAILS-10813 GRAILS-10826 GRAILS-10835 GRAILS-10838 GRAILS-10840 GRAILS-10852 GRAILS-10853 GRAILS-10868 GRAILS-10871 GRAILS-10882 GRAILS-10897 GRAILS-10905 GRAILS-10908 GRAILS-10910 GRAILS-10973 GRAILS-11003 GRAILS-11011 GRAILS-11021 GRAILS-11057 GRAILS-11075 GRAILS-11093 GRAILS-11104 GRAILS-11129 GRAILS-11145 GRAILS-11197 GRAILS-11204 GRAILS-11222 GRAILS-11238 GRAILS-11242 GRAILS-11377 GRAILS-11402 GRAILS-11444 GRAILS-11448 GRAILS-11453 GRAILS-11462 GRAILS-11472 GRAILS-11505B GRAILS-11505C GRAILS-11505 GRAILS-11543 GRAILS-11576 GRAILS-11585 GRAILS-11625 GRAILS-11638 GRAILS-11655 GRAILS-11661 GRAILS-11666 GRAILS-11671 GRAILS-11680 GRAILS-11686 GRAILS-11748 GRAILS-11791 GRAILS-11806 GRAILS-11837 GRAILS-11897 GRAILS-11951 GRAILS-11958 GRAILS-11965 GRAILS-11973 GRAILS-11976 GRAILS-11986 GRAILS-12112 GROOVY-6836-ClassCastException Groovy_242_stackmap_frame_error aether alvarosanchez-patch-1 annotation_collector_problem async attempt-to-fix-unit-test-config beanbuilder binding_collection_problem bindingformatimprovement command_object_init compatibility copyrightstatements cs-bug-arrays dependency-management-refactor dont_constrain_readonly_properties expressionevaluationutils filters-traits force_file.encoding_utf8 grails-shell-2 grails-shell-3 grails-shell grails-validation-refactoring grails-views-issue-28 grails-web-splitting-rebased grails-web-splitting grails3-shell grails9190 groovy2 groovy_2.3_jdk8 groovy24 groovy246 gsp-refactoring-merged gsp-split2 issue_610 issue_8974 issue_9079 issue_9129 issue_9172 issue_9183 issue_9363 issue_9365 issue_9478 issue_9749 issue9799 issue_9883 jefftestbranch json_issue jsp-refactor list-plugins-fix master mixedmode mixin_test_rule namespaced_tag_dispatcher owasp plugin_controller_fix reactor-integration reactor referenced_type_for_untyped_collection reloadagent rule_refactoring scb-encoding-support scb-safebuffer spring4 spring_415 springboot springloaded_115 this_variable_expressions token_replacement trait_reorg troubleshootingmasterbranch typechecking webmetautils Nothing to show v3.2.0.M1 v3.1.9 v3.1.8 v3.1.7 v3.1.6 v3.1.5 v3.1.4 v3.1.3 v3.1.2 v3.1.1 v3.1.0 v3.1.0.RC2 v3.1.0.RC1 v3.1.0.M3 v3.1.0.M2 v3.1.0.M1 v3.0.17 v3.0.16 v3.0.15 v3.0.14 v3.0.13 v3.0.12 v3.0.11 v3.0.10 v3.0.9 v3.0.8 v3.0.7 v3.0.6 v3.0.5 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v3.0.0.RC3 v3.0.0.RC2 v3.0.0.RC1 v3.0.0.M2 v3.0.0.M1 v2.5.5 v2.5.4 v2.5.3 v2.5.2 v2.5.1 v2.5.0 v2.4.5 v2.4.4 v2.4.3 v2.4.2 v2.4.1 v2.4.0 v2.4.0.RC2 v2.4.0.RC1 v2.4.0.M2 v2.4.0.M1 v2.3.11 v2.3.10 v2.3.9 v2.3.8 v2.3.7 v2.3.6 v2.3.5 v2.3.4 v2.3.3 v2.3.2 v2.3.1 v2.3.0 v2.3.0.RC2 v2.3.0.RC1 v2.3.0.M2 v2.3.0.M1 v2.2.5 v2.2.4 v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.2.0.RC4 v2.2.0.RC3 v2.2.0.RC2 v2.2.0.RC1 v2.1.5 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.1.0.RC3 v2.1.0.RC2 v2.1.0.RC1 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v2.0.0.RC3 v2.0.0.RC2 v2.0.0.RC1 v2.0.0.M2 v2.0.0.M1 Nothing to show New pull request Latest commit 00ff84d Jul 15, 2016 graemerocher use snapshot versions for plugins Permalink Failed to load latest commit information. buildSrc/src/main/groovy package POM files into GRAILS_HOME/lib Jun 6, 2014 gradle Use Gradle 2.14 Jun 28, 2016 grails-async Merge branch '3.1.x' May 26, 2016 grails-bom use snapshot versions for plugins Jul 15, 2016 grails-bootstrap Merge branch '3.1.x' May 27, 2016 grails-codecs move failing test Dec 14, 2015 grails-compat Delete deprecated classes and the tests that test those classes Jun 9, 2016 grails-console fixes #9522 - grails console: No Session found for current thread Jan 13, 2016 grails-core Upgrade to Spring 4.3 / Spring Boot 1.4 RC1 Jul 5, 2016 grails-databinding Merge branch '3.1.x' Jun 28, 2016 grails-dependencies remove filters dependency Jan 24, 2016 grails-docs Merge branch '3.0.x' into 3.1.x Feb 25, 2016 grails-encoder Merge pull request #9533 from DevFactory/staging/Conditions-should-no… Jan 22, 2016 grails-gradle-model Profiles - profile repository support / read profiles from Maven repos Oct 3, 2015 grails-gradle-plugin Merge branch '3.1.x' Jun 28, 2016 grails-gsp Merge branch '3.1.x' Jun 28, 2016 grails-logging Update LoggingTransformer AST to use SLF4J Mar 24, 2016 grails-plugin-async Use Spring AsyncManager in startAsync to ensure correct handling of a… Apr 11, 2016 grails-plugin-codecs Make 'grails-codecs' a runtime dependency to ensure it gets added to … Jan 27, 2016 grails-plugin-controllers Horrible hack to workaround Tomcat bug. Fixes #9024 Jun 27, 2016 grails-plugin-converters Revert ""Fix test for Grails 3.0.x json format"" Apr 14, 2016 grails-plugin-databinding Added README.md files Jul 18, 2015 grails-plugin-datasource Rework loading of Metadata. Fixes #9375 Nov 26, 2015 grails-plugin-domain-class fix compilation error Jun 28, 2016 grails-plugin-events Fix failing test Jun 28, 2016 grails-plugin-gsp Merge branch '3.1.x' May 26, 2016 grails-plugin-i18n i18n message bundle reloading in fixes in multi project builds Feb 2, 2016 grails-plugin-interceptors Master (#9969) May 30, 2016 grails-plugin-mimetypes fix failing tests Jan 13, 2016 grails-plugin-rest Merge branch '3.1.x' Jun 28, 2016 grails-plugin-services Switching default for transactions in service to require static trans… Mar 9, 2016 grails-plugin-testing Upgrade to Spring 4.3 / Spring Boot 1.4 RC1 Jul 5, 2016 grails-plugin-url-mappings resource tag not resolving correctly - Fixes #9584 Jan 27, 2016 grails-plugin-validation Fix ambiguous method overloading problem Mar 15, 2016 grails-shell Allow creating plugins with the ""plugin"" profile only. Fixes #9988 Jun 27, 2016 grails-spring Merge branch '3.1.x' May 26, 2016 grails-taglib Ensure pre-compiled GSPs honor settings in application.yml. Fixes #9956 May 26, 2016 grails-test-suite-base Delete deprecated classes and the tests that test those classes Jun 9, 2016 grails-test-suite-persistence Delete deprecated classes and the tests that test those classes Jun 9, 2016 grails-test-suite-uber Upgrade to Spring 4.3 / Spring Boot 1.4 RC1 Jul 5, 2016 grails-test-suite-web Delete deprecated classes and the tests that test those classes Jun 9, 2016 grails-test Upgrade to Spring 4.3 / Spring Boot 1.4 RC1 Jul 5, 2016 grails-validation Remove references to deprecated classes Jun 27, 2016 grails-web-boot Plugins - use a source level annotation to provide compiler hint. Fixes May 17, 2016 grails-web-common Support for relative URIs on JBoss. Fixes #9821 May 26, 2016 grails-web-databinding Merge branch '3.1.x' Mar 1, 2016 grails-web-fileupload The word Subproject isn't adding anything here Jul 18, 2015 grails-web-gsp-taglib Make forceEncoding configurable Sep 3, 2015 grails-web-gsp Ensure pre-compiled GSPs honor settings in application.yml. Fixes #9956 May 26, 2016 grails-web-jsp Added README.md files Jul 18, 2015 grails-web-mvc Fix boolean logic Mar 16, 2016 grails-web-sitemesh Merge branch '3.1.x' Mar 1, 2016 grails-web-taglib Merge pull request #9533 from DevFactory/staging/Conditions-should-no… Jan 22, 2016 grails-web-url-mappings Deprecate `resource` URL mapping and replace with `single` #9973 (#1… Jul 9, 2016 grails-web Delete deprecated classes and the tests that test those classes Jun 9, 2016 media vector logos Sep 3, 2014 travis Build matrix to speed up CI build process (#9979) Jun 7, 2016 .gitignore remove references to dsl-support directory May 20, 2014 .springBeans ignoring test temporarily, as due to infrastructure issues it is not … Jun 19, 2012 .travis.yml Build matrix to speed up CI build process (#9979) Jun 7, 2016 INSTALL ignoring test temporarily, as due to infrastructure issues it is not … Jun 19, 2012 ISSUE_TEMPLATE.md Refer to Stack Overflow or Slack Apr 26, 2016 LICENSE Update ant to 1.9.4 Apr 8, 2015 NOTICE update LICENSE and README Sep 9, 2013 README.md Release Grails 3.1.0.RC2 Jan 21, 2016 build.gradle Upgrade to Spring 4.3 / Spring Boot 1.4 RC1 Jul 5, 2016 gradle.properties ignoring test temporarily, as due to infrastructure issues it is not … Jun 19, 2012 gradlew Upgrade to Gradle 2.13 May 10, 2016 gradlew.bat Upgrade to Gradle 2.13 May 10, 2016 pubring.gpg.enc Travis publishing test take 2 Mar 10, 2015 secring.gpg.enc Travis publish take 3 Mar 9, 2015 settings.gradle remove filters support Dec 28, 2015 settings.xml.enc Travis publishing test take 2 Mar 10, 2015 travis-after-failure.sh Merge branch '2.5.x' Nov 29, 2014 travis-build.sh Build matrix to speed up CI build process (#9979) Jun 7, 2016 travis-publish-archives.sh Build matrix to speed up CI build process (#9979) Jun 7, 2016 trigger-dependent-build.sh Build matrix to speed up CI build process (#9979) Jun 7, 2016 README.md Waffle.IO Board Build Status Slack Signup Grails Grails is a framework used to build web applications with the Groovy programming language. The core framework is very extensible and there are numerous plugins available that provide easy integration of add-on features. Grails is sponsored by Object Computing Inc. in St. Louis Missouri. Please contact info@ociweb.com for support inquiries. Getting Started You need a Java Development Kit (JDK) installed, but it is not necessary to install Groovy because it's bundled with the Grails distribution. To install Grails, visit http://grails.org/Download and download the version you would like to use. Set a GRAILS_HOME environment variable to point to the root of the extracted download and add GRAILS_HOME/bin to your executable PATH. Then in a shell, type the following: grails create-app sampleapp cd sampleapp grails run-app  To build Grails, clone this GitHub repository and execute the install Gradle target: git clone https://github.com/grails/grails-core.git cd grails-core ./gradlew install  If you encounter out of memory errors when trying to run the install target, try adjusting Gradle build settings. For example: export GRADLE_OPTS=""-Xmx2G -Xms2G -XX:NewSize=512m -XX:MaxNewSize=512m -XX:MaxPermSize=1G""  Performing a Release Releases of Grails are automated by Travis CI. To create a release perform the following steps. First check that the tests are passing and all is well on Travis. Next, update the Grails version in build.gradle and grails-core/src/test/groovy/grails/util/GrailsUtilTests.java and then push the changes to git: $ git add build.gradle grails-core/src/test/groovy/grails/util/GrailsUtilTests.java $ git commit -m ""Release Grails 3.0.1"" $ git tag v3.0.1 $ git push --tags $ git push  By tagging the release Travis will perform all the necessary steps to release a new version of Grails, just wait for the build to complete. The Travis CI build will automatically upload the tagged release to Github and be available on the Releases page. License Grails and Groovy are licensed under the terms of the Apache License, Version 2.0. YourKit is kindly supporting Grails open source projects with its full-featured Java Profiler. YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications. Take a look at YourKit's leading software products: YourKit Java Profiler and YourKit .NET Profiler. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/grails/grails-core"	"Groovy framework with the aim to provide a highly productive environment by favoring convention over configuration, no XML and support for mixins."	"true"
"Web Frameworks"	"Jooby"	"http://jooby.org"	"Scalable, fast and modular micro framework which offers multiple programming models."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"231"	"30"	"48"	"GitHub - jooby-project/jooby: Scalable, fast and modular micro web framework for Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 231 Fork 48 jooby-project/jooby Code Issues 17 Pull requests 0 Pulse Graphs Scalable, fast and modular micro web framework for Java http://jooby.org 805 commits 2 branches 38 releases 6 contributors Java 99.5% Other 0.5% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.0.0.CR6 v1.0.0.CR5 v1.0.0.CR4 v1.0.0.CR3 v1.0.0.CR2 v1.0.0.CR1 v0.16.0 v0.15.1 v0.15.0 v0.14.0 v0.11.2 v0.11.1 v0.11.0 v0.10.0 v0.9.2 v0.9.1 v0.9.0 v0.8.2 v0.8.1 v0.8.0 v0.7.0 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.3 v0.5.1 v0.5.0 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.1 v0.2.0 v0.1.0 old-site jetty Nothing to show New pull request Latest commit 0ac70c3 Jul 3, 2016 jknack joobyRun gradle plugin fix #412 Permalink Failed to load latest commit information. coverage-report make enum parser case-insensitve fix #409 Jul 1, 2016 jooby-akka prepare for next development cycle Jun 16, 2016 jooby-archetype prepare for next development cycle Jun 16, 2016 jooby-assets-babel prepare for next development cycle Jun 16, 2016 jooby-assets-clean-css prepare for next development cycle Jun 16, 2016 jooby-assets-closure-compiler prepare for next development cycle Jun 16, 2016 jooby-assets-csslint prepare for next development cycle Jun 16, 2016 jooby-assets-j2v8 prepare for next development cycle Jun 16, 2016 jooby-assets-jscs prepare for next development cycle Jun 16, 2016 jooby-assets-jshint prepare for next development cycle Jun 16, 2016 jooby-assets-less prepare for next development cycle Jun 16, 2016 jooby-assets-less4j prepare for next development cycle Jun 16, 2016 jooby-assets-ng-annotate prepare for next development cycle Jun 16, 2016 jooby-assets-requirejs prepare for next development cycle Jun 16, 2016 jooby-assets-rollup prepare for next development cycle Jun 16, 2016 jooby-assets-sass prepare for next development cycle Jun 16, 2016 jooby-assets-uglify prepare for next development cycle Jun 16, 2016 jooby-assets-yui-compressor prepare for next development cycle Jun 16, 2016 jooby-assets prepare for next development cycle Jun 16, 2016 jooby-aws prepare for next development cycle Jun 16, 2016 jooby-banner prepare for next development cycle Jun 16, 2016 jooby-bom rename module jooby-hotreload to jooby-run fix #410 Jul 1, 2016 jooby-camel prepare for next development cycle Jun 16, 2016 jooby-commons-email prepare for next development cycle Jun 16, 2016 jooby-dist prepare for next development cycle Jun 16, 2016 jooby-ebean prepare for next development cycle Jun 16, 2016 jooby-ehcache prepare for next development cycle Jun 16, 2016 jooby-elasticsearch prepare for next development cycle Jun 16, 2016 jooby-executor prepare for next development cycle Jun 16, 2016 jooby-flyway prepare for next development cycle Jun 16, 2016 jooby-ftl prepare for next development cycle Jun 16, 2016 jooby-gradle-plugin joobyRun gradle plugin fix #412 Jul 3, 2016 jooby-gson prepare for next development cycle Jun 16, 2016 jooby-guava-cache prepare for next development cycle Jun 16, 2016 jooby-hazelcast prepare for next development cycle Jun 16, 2016 jooby-hbm prepare for next development cycle Jun 16, 2016 jooby-hbs prepare for next development cycle Jun 16, 2016 jooby-hbv prepare for next development cycle Jun 16, 2016 jooby-jackson prepare for next development cycle Jun 16, 2016 jooby-jade prepare for next development cycle Jun 16, 2016 jooby-jdbc prepare for next development cycle Jun 16, 2016 jooby-jdbi prepare for next development cycle Jun 16, 2016 jooby-jedis prepare for next development cycle Jun 16, 2016 jooby-jetty prepare for next development cycle Jun 16, 2016 jooby-jongo prepare for next development cycle Jun 16, 2016 jooby-jooq prepare for next development cycle Jun 16, 2016 jooby-js v0.8.1 Jul 14, 2015 jooby-maven-plugin jooby:run use file.pathSeparator Jul 2, 2016 jooby-metrics prepare for next development cycle Jun 16, 2016 jooby-mongodb-rx prepare for next development cycle Jun 16, 2016 jooby-mongodb prepare for next development cycle Jun 16, 2016 jooby-morphia prepare for next development cycle Jun 16, 2016 jooby-netty unify absent of HTTP parameter and empty strings fix #407 Jul 1, 2016 jooby-pac4j prepare for next development cycle Jun 16, 2016 jooby-pebble prepare for next development cycle Jun 16, 2016 jooby-quartz prepare for next development cycle Jun 16, 2016 jooby-querydsl prepare for next development cycle Jun 16, 2016 jooby-raml prepare for next development cycle Jun 16, 2016 jooby-reactor prepare for next development cycle Jun 16, 2016 jooby-run joobyRun gradle plugin fix #412 Jul 4, 2016 jooby-rxjava-jdbc prepare for next development cycle Jun 16, 2016 jooby-rxjava prepare for next development cycle Jun 16, 2016 jooby-servlet unify absent of HTTP parameter and empty strings fix #407 Jul 1, 2016 jooby-sitemap prepare for next development cycle Jun 16, 2016 jooby-spec prepare for next development cycle Jun 16, 2016 jooby-spymemcached prepare for next development cycle Jun 16, 2016 jooby-swagger prepare for next development cycle Jun 16, 2016 jooby-undertow unify absent of HTTP parameter and empty strings fix #407 Jul 1, 2016 jooby-whoops whoops: fix build on linux Jul 1, 2016 jooby fix javdoc issues and typos Jul 2, 2016 md joobyRun gradle plugin fix #412 Jul 4, 2016 .gitattributes remove .js and .css from lang stats Mar 14, 2016 .gitignore support dynamic reload of classes in dev environment (hotswap) fix #16 Mar 9, 2015 .travis.yml attempt to make travis build more lightweight Aug 22, 2015 LICENSE Prepare for first maven release Nov 1, 2014 README.md v1.0.0.CR5 Jun 16, 2016 checkstyle.xml Prepare for alpha release Jul 23, 2014 logback-travis.xml doc for hbm module Apr 6, 2015 pom.xml joobyRun gradle plugin fix #412 Jul 4, 2016 release.sh add release.sh to sync jooby release and bom file Jul 2, 2016 README.md ∞ do more, more easily Jooby a scalable, fast and modular micro web framework for Java. Scalable. Stateless application development. Fast!. Thanks to the most popular NIO web servers. Modular. Make it a full stack with modules Simple, effective and easy to learn. Ideal for small but also large scale applications. Ready for modern web, with the awesome and powerful asset module hello world! Java: import org.jooby.Jooby;  public class App extends Jooby {    {     get(""/"", () -> ""Hey Jooby!"");   }    public static void main(final String[] args) throws Throwable {     run(App::new, args);   } }  JavaScript: var app = jooby();  app.get('/', function () 'Hey Jooby!');  killer features Multi-language. Write your application in Java or JavaScript Scripting programming model. Like express.js, Sinatra, etc.. but also MVC programming model. Like Spring controllers or Jersey resources Multi-server. Including Netty, Jetty and Undertow Web-Socket Dependency Injection Hot reload for development requirements Install JDK 8+ Install Maven 3+ quickstart Just paste this into a terminal (make sure Java 8 and Maven 3.x are installed): mvn archetype:generate -B -DgroupId=com.mycompany -DartifactId=my-app -Dversion=1.0-SNAPSHOT -DarchetypeArtifactId=jooby-archetype -DarchetypeGroupId=org.jooby -DarchetypeVersion=1.0.0.CR5 You might want to edit/change: -DgroupId: A Java package's name -DartifactId: A project's name in lower case and without spaces -Dversion: A project's version, like 1.0-SNAPSHOT or 1.0.0-SNAPSHOT Let's try it!: mvn archetype:generate -B -DgroupId=com.mycompany -DartifactId=my-app -Dversion=1.0-SNAPSHOT -DarchetypeArtifactId=jooby-archetype -DarchetypeGroupId=org.jooby -DarchetypeVersion=1.0.0.CR5 cd my-app mvn jooby:run You should see something similar to this at the end of the output: INFO  [2015-03-19 21:34:00,365] Hotswap available on: [my-app/public, my-app/conf, my-app/target/classes] INFO  [2015-03-19 21:34:00,368]   includes: [**/*.class,**/*.conf,**/*.properties] INFO  [2015-03-19 21:34:00,369]   excludes: [] INFO  [2015-03-19 21:34:00,937] [dev@netty]: App server started in 502ms  GET /             [*/*]     [*/*]    (anonymous)  listening on:   http://0.0.0.0:8080/ Jooby! is up and running!!! getting started exploring the newly created project A new directory was created: my-app. Now, let's see how it looks like: . ├── public |   └── (empty) ├── conf |   ├── application.conf |   └── logback.xml └── src     ├── main     |   └── java     |       └── com     |           └── mycompany     |               └── App.java     └── test         └── java             └── com                 └── mycompany                     └── AppTest.java The public folder contains static files like *.html, *.js, *.css, ..., *.png files. The conf folder contains *.conf. The src/main/java folder contains *.java (of course) files. The src/test/java folder contains unit and integration tests. NOTE: The public and conf folders are part of the classpath. App.java import org.jooby.Jooby;  public class App extends Jooby { // 1    {     // 2     get(""/"", () -> ""Hello World!"");   }    public static void main(final String[] args) throws Throwable {     run(App::new, args); // 3. start the application.   }  }  Steps involved are: 1) extends Jooby 2) define some routes 3) call the run method running Just open a console and type: mvn jooby:run  The maven plugin will compile the code (if necessary) and startup the application. Of course, you can generate the IDE metadata from Maven and/or import as a Maven project in your favorite IDE. Then all you have to do is run the: App.java class. After all, this is plain Java application with a main method. where to go now? read the documentation checkout one of our guides versioning Jooby uses semantic versioning for releases. API is considered unstable while release version is: 0.x.x and it might changes and/or broke without previous notification. This might sounds terrible but isn't. Any change on the API will be reported by the Java Compiler and it wont take you a long time to fix it. Finally, API changes can be filtered and displayed it at any time want to contribute? Fork the project on Github. Wondering what to work on? See task/bug list and pick up something you would like to work on. Write unit tests. Create an issue or fix one from issues. If you know the answer to a question posted to our group - don't hesitate to write a reply. Share your ideas or ask questions on the jooby group - don't hesitate to write a reply - that helps us improve javadocs/FAQ. If you miss a particular feature - browse or ask on the group - don't hesitate to write a reply, show us some sample code and describe the problem. Write a blog post about how you use or extend jooby. Please suggest changes to javadoc/exception messages when you find something unclear. If you have problems with documentation, find it non intuitive or hard to follow - let us know about it, we'll try to make it better according to your suggestions. Any constructive critique is greatly appreciated. Don't forget that this is an open source project developed and documented in spare time. useful links jooby.org twitter slack group issues related projects Netty Jetty Undertow Guice Type Safe Logback author Edgar Espina license Apache License 2 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jooby-project/jooby"	"Scalable, fast and modular micro framework which offers multiple programming models."	"true"
"Web Frameworks"	"Ninja"	"http://www.ninjaframework.org/"	"Full stack web framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1416"	"201"	"417"	"GitHub - ninjaframework/ninja: Ninja is a full stack web framework for Java. Rock solid, fast and super productive. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 201 Star 1,416 Fork 417 ninjaframework/ninja Code Issues 79 Pull requests 28 Wiki Pulse Graphs Ninja is a full stack web framework for Java. Rock solid, fast and super productive. http://www.ninjaframework.org 1,827 commits 5 branches 85 releases 61 contributors Java 96.3% HTML 3.3% Other 0.4% Java HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 145-shutdown-hooks-not-executed develop feature-docu-improvements feature/custom-ninja-request-cycle gh-pages Nothing to show ninja-5.7.0 ninja-5.6.0 ninja-5.5.0 ninja-5.4.0 ninja-5.3.1 ninja-5.3.0 ninja-5.2.2 ninja-5.2.1 ninja-5.2.0 ninja-5.1.6 ninja-5.1.5 ninja-5.1.4 ninja-5.1.3 ninja-5.1.2 ninja-5.1.1 ninja-5.1.0 ninja-4.0.6 ninja-4.0.5 ninja-4.0.4 ninja-4.0.3 ninja-4.0.2 ninja-4.0.1 ninja-4.0.0 ninja-3.3.3 ninja-3.3.1 ninja-3.3.0 ninja-3.2.0 ninja-3.1.6 ninja-3.1.5 ninja-3.1.4 ninja-3.1.3 ninja-3.1.2 ninja-3.1.1 ninja-3.1.0 ninja-3.0.3 ninja-3.0.2 ninja-3.0.1 ninja-3.0.0 ninja-3.0.0-rc2 ninja-3.0.0-rc1 ninja-2.5.1 ninja-2.5.0 ninja-2.4.0 ninja-2.3.0 ninja-2.2.0 ninja-2.1.0 ninja-2.0.1 ninja-2.0.0 ninja-2.0.0-rc2 ninja-2.0.0-rc1 ninja-1.6.0 ninja-1.6.0-rc1 ninja-1.5.1 ninja-1.5 ninja-1.4.4 ninja-1.4.3 ninja-1.4.2 ninja-1.4.1 ninja-1.4 ninja-1.3 ninja-1.2.1 ninja-1.1 ninja-1.0.8 ninja-1.0.7 ninja-1.0.6 ninja-1.0.5 ninja-1.0.3 ninja-1.0.2 ninja-1.0.1 ninja-1.0 ninja-0.5.10 ninja-0.5.9 ninja-0.5.8 ninja-0.5.7 ninja-0.5.6 ninja-0.5.5 ninja-0.5.4 ninja-0.5.3 ninja-0.5.2 ninja-0.5.1 ninja-0.5 ninja-0.4.1 ninja-0.4 4.0.0 1.2 Nothing to show New pull request Latest commit ae0ea69 Jul 9, 2016 Raphael A. Bauer Fix tiny typo Permalink Failed to load latest commit information. ninja-annotations/src/main/java/ninja/metrics Bump license headers of all files to year 2016 Jan 11, 2016 ninja-async-machine-beta [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-core [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-jaxy-routes [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-maven-plugin [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-metrics-ganglia [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-metrics-graphite [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-metrics-influxdb [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-metrics-librato [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-metrics [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-servlet-archetype-simple [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-servlet-integration-test [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-servlet-jpa-blog-archetype [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-servlet-jpa-blog-integration-test [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-servlet [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-standalone [maven-release-plugin] prepare for next development iteration Jul 9, 2016 ninja-test-utilities [maven-release-plugin] prepare for next development iteration Jul 9, 2016 src/main/resources Bump license headers of all files to year 2016 Jan 11, 2016 .gitattributes Introduce end-of-line normalization Mar 24, 2014 .gitignore Many, many unit tests, polishing, and javadocs Oct 30, 2015 .travis.yml Travis tests on OpenJDK 7 and Oracle 8 Dec 22, 2015 README.md Switch from to Travis CI (Cloudbees CI no longer available) Dec 15, 2015 changelog.md Set general log level of archetypes and integration tests to ""info"" Nov 6, 2013 eclipse-ninja-format.xml Modules now as separate git projects Aug 17, 2012 license.txt Formatting and license headers. Aug 18, 2012 nb-configuration.xml Removed - files were only needed during dev and Dec 22, 2013 pom.xml Fix tiny typo Jul 9, 2016 README.md  _______  .___ _______        ____.  _____     \      \ |   |\      \      |    | /  _  \    /   |   \|   |/   |   \     |    |/  /_\  \  /    |    \   /    |    \/\__|    /    |    \ \____|__  /___\____|__  /\________\____|__  /      web\/framework   \/                  \/   Ninja - web framework Ninja is a full stack web framework for Java. Rock solid, fast and super productive. Getting started Website with docs: http://www.ninjaframework.org Source: http://github.com/ninjaframework/ninja Continuous integration: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ninjaframework/ninja"	"Full stack web framework."	"true"
"Web Frameworks"	"Pippo"	"http://www.pippo.ro/"	"Small, highly modularized Sinatra-like framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"456"	"32"	"47"	"GitHub - decebals/pippo: Micro Java Web Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 456 Fork 47 decebals/pippo Code Issues 15 Pull requests 4 Pulse Graphs Micro Java Web Framework 1,013 commits 7 branches 11 releases Fetching contributors Java 98.0% Other 2.0% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags compiled_route cookie_session improve_contoller improvement_parameter_value master routing web_socket Nothing to show release-0.8.0 release-0.7.0 release-0.6.1 release-0.6.0 release-0.5.0 release-0.4.2 release-0.4.1 pippo-parent-0.4.0 pippo-parent-0.3.0 pippo-parent-0.2.0 pippo-parent-0.1.0 Nothing to show New pull request Latest commit 5aee4d5 Jul 4, 2016 decebals #291 Permalink Failed to load latest commit information. maven-archetypes/quickstart [maven-release-plugin] prepare for next development iteration Jan 29, 2016 pippo-content-type-parent Pippo Controller Parent Jun 24, 2016 pippo-controller-parent Pippo Controller Parent Jun 24, 2016 pippo-core Fix for #293 Jun 29, 2016 pippo-css-parent #291 Jul 4, 2016 pippo-metrics-parent Pippo Controller Parent Jun 24, 2016 pippo-server-parent Fix for #293 (Tomcat) Jun 29, 2016 pippo-session-parent Pippo Controller Parent Jun 24, 2016 pippo-template-parent Pippo Controller Parent Jun 24, 2016 pippo-test Remove System.out.println from PippoRule Feb 11, 2016 pippo [maven-release-plugin] prepare for next development iteration Jan 29, 2016 .editorconfig add initial version for .editorconfig (see http://editorconfig.org/) Jan 23, 2015 .gitignore Ignore Netbeans files Jun 16, 2016 .travis.yml Update travis jdk to 8 Dec 8, 2015 CHANGELOG.md Make TextPlainEngine return some String-based values Jun 16, 2016 README.md Add missing close parens to sample BasicApp Jun 28, 2016 pom.xml #291 Jul 4, 2016 README.md Micro Java Web Framework It's an open source (Apache License) micro web framework in Java, with minimal dependencies and a quick learning curve. The goal of this project is to create a micro web framework in Java that should be easy to use and hack. Sample code First we must create an Application and add some routes: public class BasicApplication extends Application {      @Override     protected void onInit() {         // send 'Hello World' as response         GET(""/"", (routeContext) -> routeContext.send(""Hello World""));          // send a file as response         GET(""/file"", (routeContext) -> routeContext.send(new File(""pom.xml"")));          // send a json as response         GET(""/json"", (routeContext) -> {             Contact contact = createContact();             routeContext.json().send(contact);         });          // send xml as response         GET(""/xml"", (routeContext) -> {             Contact contact = createContact();             routeContext.xml().send(contact);         });          // send an object and negotiate the Response content-type, default to XML         GET(""/negotiate"", (routeContext) -> {             routeContext.xml().negotiateContentType().send(contact);         });          // send a template as response         GET(""/template"", (routeContext) -> {             routeContext.setLocal(""greeting"", ""Hello"");             routeContext.render(""hello"");                 });     }      private Contact createContact() {         return new Contact()             .setId(12345)             .setName(""John"")             .setPhone(""0733434435"")             .setAddress(""Sunflower Street, No. 6"");      }  } where Contact is a simple POJO: public class Contact  {      private int id;     private String name;     private String phone;     private String address;      // getters and setters  } The second step is to choose your favorite server, template engine and content type engine. For example, I will choose Jetty as server, Freemarker as template engine, Jackson as JSON engine and JAXB as XML engine. My Maven pom.xml looks like: <dependency>     <groupId>ro.pippo</groupId>     <artifactId>pippo-core</artifactId>     <version>${pippo.version}</version> </dependency>  <dependency>     <groupId>ro.pippo</groupId>     <artifactId>pippo-freemarker</artifactId>     <version>${pippo.version}</version> </dependency>  <dependency>     <groupId>ro.pippo</groupId>     <artifactId>pippo-jackson</artifactId>     <version>${pippo.version}</version> </dependency> The last step it's to start Pippo with your application as parameter: public class BasicDemo {      public static void main(String[] args) {         Pippo pippo = new Pippo(new BasicApplication());         pippo.start();     }  } Pippo launches the embedded web server (found in your classpath) and makes the application available on port 8338 (default value). Open your internet browser and check the routes declared in Application: http://localhost:8338 http://localhost:8338/file http://localhost:8338/json http://localhost:8338/xml http://localhost:8338/negotiate http://localhost:8338/template Documentation Documentation is available on pippo.ro Demo Demo applications are available on pippo-demo For a real life application built with Pippo please look at Web Accounting - Pippo Demo Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/decebals/pippo"	"Small, highly modularized Sinatra-like framework."	"true"
"Web Frameworks"	"Play"	"https://www.playframework.com/"	"Uses convention over configuration, hot code reloading and display of errors in the browser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8102"	"755"	"2806"	"GitHub - playframework/playframework: Play Framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 755 Star 8,102 Fork 2,806 playframework/playframework Code Issues 262 Pull requests 24 Pulse Graphs Play Framework http://www.playframework.com/ 7,698 commits 8 branches 105 releases 541 contributors Scala 74.7% Java 23.4% HTML 1.7% Shell 0.1% JavaScript 0.1% Groff 0.0% Scala Java HTML Shell JavaScript Groff Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x fix-5270 master Nothing to show 2.5.4 2.5.3 2.5.2 2.5.1 2.5.0 2.5.0-RC2 2.5.0-RC1 2.5.0-M2 2.5.0-M1 2.4.8 2.4.7 2.4.6 2.4.5 2.4.4 2.4.3 2.4.2 2.4.1 2.4.0 2.4.0-RC5 2.4.0-RC4 2.4.0-RC3 2.4.0-RC2 2.4.0-RC1 2.4.0-M3 2.4.0-M2 2.4.0-M1 2.3.10 2.3.9 2.3.8 2.3.7 2.3.6 2.3.5 2.3.4 2.3.3 2.3.2 2.3.2-RC2 2.3.2-RC1 2.3.1 2.3.0 2.3.0-RC2 2.3.0-RC1 2.3-M1 2.2.6 2.2.5 2.2.4 2.2.3 2.2.3-RC2 2.2.3-RC1 2.2.2 2.2.2-RC4 2.2.2-RC3 2.2.2-RC2 2.2.2-RC1 2.2.1 2.2.1-RC1 2.2.0 2.2.0-RC2 2.2.0-RC1 2.2.0-M3 2.2.0-M2 2.2.0-M1 2.1.6-RC1 2.1.5 2.1.4 2.1.4-RC2 2.1.4-RC1 2.1.3 2.1.3-RC2 2.1.3-RC1 2.1.2 2.1.2-RC2 2.1.2-RC1 2.1.1 2.1.1-RC2 2.1.1-RC1 2.1.1-RC1-2.9.x-backport 2.1.1-2.9.x-backport 2.1.0 2.1-RC4 2.1-RC3 2.1-RC2 2.1-RC1 2.0.8 2.0.7 2.0.6 2.0.5 2.0.5-RC2 2.0.5-RC1 2.0.4 2.0.4-RC2 2.0.4-RC1 2.0.3 2.0.3-RC2 2.0.3-RC1 2.0.2 2.0.2-RC2 2.0.2-RC1 2.0.1 2.0 2.0-beta Nothing to show New pull request Latest commit f8f1883 Jul 15, 2016 richdougherty committed on GitHub Update PR template to say squashing is optional Permalink Failed to load latest commit information. .github Update PR template to say squashing is optional Jul 15, 2016 documentation Don't try to use minified asset in DEV mode (#6291) Jul 10, 2016 framework Fixed #6316 encoding will be applied to asXml (#6317) Jul 12, 2016 templates Remove casting in query (#6290) Jul 1, 2016 .gitignore Replaced iteratees with Akka streams in tests Nov 23, 2015 .travis.yml Add some microbenchmarks (#6297) Jul 6, 2016 CONTRIBUTING.md [doc] Fix PR validation link in contributing guide (#6175) May 21, 2016 README.md Upgrade dependencies Mar 25, 2016 README.md Play Framework - The High Velocity Web Framework The Play Framework combines productivity and performance making it easy to build scalable web applications with Java and Scala. Play is developer friendly with a ""just hit refresh"" workflow and built-in testing support. With Play, applications scale predictably due to a stateless and non-blocking architecture. By being RESTful by default, including assets compilers, JSON & WebSocket support, Play is a perfect fit for modern web & mobile applications. Learn More www.playframework.com Download Install Create a new application Play for Scala developers Play for Java developers Build from source Search or create issues Get help Contribute License This software is licensed under the Apache 2 license, quoted below. Copyright (C) 2009-2016 Lightbend Inc. (https://www.lightbend.com). Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this project except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/playframework/playframework"	"Uses convention over configuration, hot code reloading and display of errors in the browser."	"true"
"Web Frameworks"	"PrimeFaces"	"http://primefaces.org/"	"JSF framework which has a free and a commercial version with support. Provides several frontend components."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PrimeFaces prime faces Overview Demos Development Support Store Social PrimeFaces Ultimate UI Framework for Java EE Demo Download Learn Features Ajax Framework Components Productivity Mobile Push Themes & Layouts PrimeFaces Premium Themes And Layouts Create awesome web applications in no time, impress your users. Icarus Venture Olympos Atlas Titan Volt Adamantium Modena Rio Ronin Spark Sentinel HTML5, CSS3, Font Icons and Less Cross-Browser Compatible Responsive Design Mobile Optimized Highly Customizable Fully Compatible With PrimeFaces Components Explore Features See All Layouts PrimeUI 3.0 Now Available PrimeUI is a pure CSS-JS library designed to work with any server side and client side technology featuring 50+ jQuery Widgets, Web Components, Premium Layouts-Themes and more. PrimeUI is an offspring project of the mighty PrimeFaces. Get PrimeUI Books on PrimeFaces NEWS TESTIMONIALS Gregory Cooper ""PrimeFaces is great. It’s the first set of JSF components that I have actually liked. Before PrimeFaces, JSF was a technology that I would “have” to use at work. PrimeFaces is one of the few Java oriented technologies I would consider using ‘outside the day job’ for a web project so I’m really happy to see it working under google app engine. I am amazed how fast this component library is taking shape. I cannot say enough good things about it."" James Khoo ""Just want to say thanks on delivering the BEST JSF framework in the market. Comprehensive list of ""usable components"", well written docs, and good community support. For comparison, here is my experience while on working with other JSF Frameworks; Err..... Huh..?...How? How? How? Here is my experience while working on PRIMEFACES; Wow...Cool....Application delivered."" view all WHO IS USING PRIMEFACES view all Overview Why PrimeFaces Who Uses PrimeFaces Testimonials License Multimedia FAQ Demos Showcase Mock OS X Mobile PrimeUI Development Getting Started Documentation Downloads Source Theme Gallery Extensions Support Support Options PrimeFaces PRO PrimeFaces ELITE Training Forum Issue Tracker Partners Social Blog Forum Newsletter Mobile Apps Twitter Facebook LinkedIn Copyright 2009-2015 PrimeTek All rights reserved."	"null"	"null"	"JSF framework which has a free and a commercial version with support. Provides several frontend components."	"true"
"Web Frameworks"	"Ratpack"	"https://ratpack.io/"	"Set of libraries that facilitate fast, efficient, evolvable and well tested HTTP applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Ratpack · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization Ratpack http://www.ratpack.io Repositories People 7 Filters Sources Forks Java 1,151 262 ratpack A toolkit for JVM web applications Updated Jul 15, 2016 Groovy 17 8 example-ratpack-standalone-groovy-script An example of a Groovy script Ratpack app. Updated Jun 30, 2016 Kotlin 12 7 example-ratpack-gradle-kotlin-app An example of a Kotlin Ratpack app built with Gradle. Updated Jun 30, 2016 Groovy 75 42 example-books An example Groovy & Gradle based Ratpack app Updated Jun 1, 2016 Java 31 24 example-ratpack-gradle-java-app An example of a Java Ratpack app built with Gradle. Updated Mar 1, 2016 PHP 4 739 FrameworkBenchmarks forked from TechEmpower/FrameworkBenchmarks Source code for the framework benchmarking project Updated Feb 6, 2016 Groovy 10 8 hands-on-ratpack A test driven Ratpack workshop Updated Oct 7, 2015 JavaScript 30 25 example-ratpack-gradle-groovy-app An example of a Groovy Ratpack app built with Gradle. Updated Sep 15, 2015 JavaScript 6 0 presentation-ratpack-under-the-hood-gr8conf-us-2015 Updated Jul 30, 2015 Java 0 3 ratpack-asset-pipeline forked from bertramdev/ratpack-asset-pipeline Asset-Pipeline adapter for ratpack Updated Jul 14, 2015 Groovy 1 1 ratpack-talks Updated Jun 20, 2015 Groovy 1 29 coveralls-gradle-plugin forked from kt3k/coveralls-gradle-plugin gradle plugin for coveralls Updated Jul 30, 2014 7 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ratpack/"	"Set of libraries that facilitate fast, efficient, evolvable and well tested HTTP applications."	"true"
"Web Frameworks"	"Spring Boot"	"http://projects.spring.io/spring-boot/"	"Microframework which simplifies the development of new Spring applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6334"	"922"	"6254"	"GitHub - spring-projects/spring-boot: Spring Boot Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 922 Star 6,334 Fork 6,254 spring-projects/spring-boot Code Issues 480 Pull requests 43 Wiki Pulse Graphs Spring Boot http://projects.spring.io/spring-boot 8,397 commits 7 branches 61 releases 276 contributors Java 97.1% HTML 0.7% SQLPL 0.6% Groovy 0.5% JavaScript 0.4% XSLT 0.3% Other 0.4% Java HTML SQLPL Groovy JavaScript XSLT Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.x 1.1.x 1.2.x 1.3.x gh-6030 gh-pages master Nothing to show v1.4.0.RC1 v1.4.0.M3 v1.4.0.M2 v1.4.0.M1 v1.3.6.RELEASE v1.3.5.RELEASE v1.3.4.RELEASE v1.3.3.RELEASE v1.3.2.RELEASE v1.3.1.RELEASE v1.3.0.RELEASE v1.3.0.RC1 v1.3.0.M5 v1.3.0.M4 v1.3.0.M3 v1.3.0.M2 v1.3.0.M1 v1.2.8.RELEASE v1.2.7.RELEASE v1.2.6.RELEASE v1.2.5.RELEASE v1.2.4.RELEASE v1.2.3.RELEASE v1.2.2.RELEASE v1.2.1.RELEASE v1.2.0.RELEASE v1.2.0.RC2 v1.2.0.RC1 v1.2.0.M2 v1.2.0.M1 v1.1.12.RELEASE v1.1.11.RELEASE v1.1.10.RELEASE v1.1.9.RELEASE v1.1.8.RELEASE v1.1.7.RELEASE v1.1.6.RELEASE v1.1.5.RELEASE v1.1.4.RELEASE v1.1.3.RELEASE v1.1.2.RELEASE v1.1.1.RELEASE v1.1.0.RELEASE v1.1.0.RC1 v1.1.0.M2 v1.1.0.M1 v1.0.2.RELEASE v1.0.1.RELEASE v1.0.0.RELEASE v1.0.0.RC5 v1.0.0.RC4 v1.0.0.RC3 v1.0.0.RC2 v1.0.0.RC1 v0.5.0.M7 v0.5.0.M6 v0.5.0.M5 v0.5.0.M4 v0.5.0.M3 v0.5.0.M2 v0.5.0.M1 Nothing to show New pull request Latest commit 5a941bb Jul 14, 2016 snicoll Polish doc … See gh-4313 Permalink Failed to load latest commit information. .github Polish Apr 26, 2016 .mvn Upgrade to Maven 3.3.9 Apr 13, 2016 eclipse Add AssertJ to Eclipse Oomph Setup Feb 6, 2016 spring-boot-actuator-docs Add MVC actuator endpoint for heap dumps Jul 2, 2016 spring-boot-actuator Improve usage of ConcurrentMap Jul 13, 2016 spring-boot-autoconfigure Merge branch '1.3.x Jul 13, 2016 spring-boot-cli Upgrade to Maven Assembly Plugin 2.6 Jul 1, 2016 spring-boot-dependencies Downgrade maven-compiler-plugin to 3.5 Jul 13, 2016 spring-boot-deployment-tests Make use of new GetMapping and PostMapping annotations May 9, 2016 spring-boot-devtools Merge branch '1.3.x Jul 13, 2016 spring-boot-docs Polish doc Jul 14, 2016 spring-boot-full-build Add spring-boot-test-autoconfigure module Mar 23, 2016 spring-boot-integration-tests Merge branch '1.3.x' Jun 15, 2016 spring-boot-parent Add setReadTimeout and setConnectTimeout to RestTemplateBuilder Jul 13, 2016 spring-boot-samples Add support for Thymeleaf 3 while keeping Thymeleaf 2 as the default Jul 12, 2016 spring-boot-starters Update starters readme with updated JSF support Jul 6, 2016 spring-boot-test-autoconfigure Make it easier to add auto-configuration to a test slice Jul 6, 2016 spring-boot-test Polish Jul 12, 2016 spring-boot-tools Fix spring-boot-gradle-plugin package tangle Jul 11, 2016 spring-boot Merge complex types from multiple source correctly Jul 13, 2016 .gitignore Refine ApplicationHome detection logic Jun 9, 2016 .settings-template.xml Increase maven central timeout Jul 6, 2016 .travis.yml Add schemaAction property to CassandraProperties Jun 28, 2016 CODE_OF_CONDUCT.adoc Add contributor covenant Jan 29, 2016 CONTRIBUTING.adoc Fix STS link in CONTRIBUTING.adoc Apr 25, 2016 LICENSE.txt Update license details Nov 18, 2014 README.adoc Replace Starter POM to Starter in the documentation May 18, 2016 mvnw Add Maven wrapper Oct 26, 2015 mvnw.cmd Add Maven wrapper Oct 26, 2015 pom.xml Fix gradle samples replacement regex Jul 11, 2016 README.adoc Spring Boot Spring Boot makes it easy to create Spring-powered, production-grade applications and services with absolute minimum fuss. It takes an opinionated view of the Spring platform so that new and existing users can quickly get to the bits they need. You can use Spring Boot to create stand-alone Java applications that can be started using java -jar or more traditional WAR deployments. We also provide a command line tool that runs spring scripts. Our primary goals are: Provide a radically faster and widely accessible getting started experience for all Spring development Be opinionated out of the box, but get out of the way quickly as requirements start to diverge from the defaults Provide a range of non-functional features that are common to large classes of projects (e.g. embedded servers, security, metrics, health checks, externalized configuration) Absolutely no code generation and no requirement for XML configuration Installation and Getting Started The reference documentation includes detailed installation instructions as well as a comprehensive getting started guide. Documentation is published in HTML, PDF and EPUB formats. Here is a quick teaser of a complete Spring Boot application in Java: import org.springframework.boot.*; import org.springframework.boot.autoconfigure.*; import org.springframework.web.bind.annotation.*;  @RestController @EnableAutoConfiguration public class Example {      @RequestMapping(""/"")     String home() {         return ""Hello World!"";     }      public static void main(String[] args) throws Exception {         SpringApplication.run(Example.class, args);     }  } Getting help Having trouble with Spring Boot? We’d like to help! Check the reference documentation, especially the How-to’s — they provide solutions to the most common questions. Learn the Spring basics — Spring Boot builds on many other Spring projects, check the spring.io web-site for a wealth of reference documentation. If you are just starting out with Spring, try one of the guides. Ask a question - we monitor stackoverflow.com for questions tagged with spring-boot. Report bugs with Spring Boot at github.com/spring-projects/spring-boot/issues. Reporting Issues Spring Boot uses GitHub’s integrated issue tracking system to record bugs and feature requests. If you want to raise an issue, please follow the recommendations below: Before you log a bug, please search the issue tracker to see if someone has already reported the problem. If the issue doesn’t already exist, create a new issue. Please provide as much information as possible with the issue report, we like to know the version of Spring Boot that you are using, as well as your Operating System and JVM version. If you need to paste code, or include a stack trace use Markdown $$```$$ escapes before and after your text. If possible try to create a test-case or project that replicates the issue. You can submit sample projects as pull-requests against the spring-boot-issues GitHub project. Use the issue number for the name of your project. Building from Source You don’t need to build from source to use Spring Boot (binaries in repo.spring.io), but if you want to try out the latest and greatest, Spring Boot can be easily built with the maven wrapper. You also need JDK 1.8 (although Boot applications can run on Java 1.6). $ ./mvnw clean install If you want to build with the regular mvn command, you will need Maven v3.0.5 or above. Note You may need to increase the amount of memory available to Maven by setting a MAVEN_OPTS environment variable with the value -Xmx512m. Remember to set the corresponding property in your IDE as well if you are building and running tests there (e.g. in Eclipse go to Preferences→Java→Installed JREs and edit the JRE definition so that all processes are launched with those arguments). This property is automatically set if you use the maven wrapper. Also see CONTRIBUTING.adoc if you wish to submit pull requests, and in particular please fill out the Contributor’s Agreement before your first change, however trivial. (Or if you filed such an agreement already for another project just mention that in your pull request.) Building reference documentation The reference documentation requires the documentation of the Maven plugin to be available so you need to build that first since it’s not generated by default. $ ./mvnw clean install -pl spring-boot-tools/spring-boot-maven-plugin -Pdefault,full The documentation also includes auto-generated information about the starters. To allow this information to be collected, the starter projects must be built first: $ ./mvnw clean install -f spring-boot-starters Once this is done, you can build the reference documentation with the command below: $ ./mvnw clean generate-resources -pl spring-boot-docs -Pdefault,full Tip The generated documentation is available from spring-boot-docs/target/contents/reference Modules There are a number of modules in Spring Boot, here is a quick overview: spring-boot The main library providing features that support the other parts of Spring Boot, these include: The SpringApplication class, providing static convenience methods that make it easy to write a stand-alone Spring Application. Its sole job is to create and refresh an appropriate Spring ApplicationContext Embedded web applications with a choice of container (Tomcat or Jetty for now) First class externalized configuration support Convenience ApplicationContext initializers, including support for sensible logging defaults spring-boot-autoconfigure Spring Boot can configure large parts of common applications based on the content of their classpath. A single @EnableAutoConfiguration annotation triggers auto-configuration of the Spring context. Auto-configuration attempts to deduce which beans a user might need. For example, If HSQLDB is on the classpath, and the user has not configured any database connections, then they probably want an in-memory database to be defined. Auto-configuration will always back away as the user starts to define their own beans. spring-boot-starters Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop-shop for all the Spring and related technology that you need without having to hunt through sample code and copy paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA for database access just include the spring-boot-starter-data-jpa dependency in your project, and you are good to go. spring-boot-cli The Spring command line application compiles and runs Groovy source, making it super easy to write the absolute minimum of code to get an application running. Spring CLI can also watch files, automatically recompiling and restarting when they change. spring-boot-actuator Spring Boot Actuator provides additional auto-configuration to decorate your application with features that make it instantly deployable and supportable in production. For instance if you are writing a JSON web service then it will provide a server, security, logging, externalized configuration, management endpoints, an audit abstraction, and more. If you want to switch off the built in features, or extend or replace them, it makes that really easy as well. spring-boot-loader Spring Boot Loader provides the secret sauce that allows you to build a single jar file that can be launched using java -jar. Generally you will not need to use spring-boot-loader directly, but instead work with the Gradle or Maven plugin. Samples Groovy samples for use with the command line application are available in spring-boot-cli/samples. To run the CLI samples type spring run <sample>.groovy from samples directory. Java samples are available in spring-boot-samples and should be built with maven and run by invoking java -jar target/<sample>.jar. Guides The spring.io site contains several guides that show how to use Spring Boot step-by-step: Building an Application with Spring Boot is a very basic guide that shows you how to create a simple application, run it and add some management services. Building a RESTful Web Service with Spring Boot Actuator is a guide to creating a REST web service and also shows how the server can be configured. Converting a Spring Boot JAR Application to a WAR shows you how to run applications in a web server as a WAR file. License Spring Boot is Open Source software released under the Apache 2.0 license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spring-projects/spring-boot"	"Microframework which simplifies the development of new Spring applications."	"true"
"Web Frameworks"	"Vaadin"	"https://vaadin.com/home"	"Event-driven framework build on top of GWT. Uses server-side architecture with Ajax on the client-side."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Vaadin – User Interface Components for business apps - vaadin.com Vaadin Framework Elements Community Services Pro Tools Company Vaadin Pro Vaadin Pro HB integration 0 Sign In Register Loading notifications … Framework Demo Get started Tutorial Docs Add-ons Comparison Elements Getting Started Videos Demos Docs Community Forum Blog Wiki Meetup Contribute Webinars Services Consulting Support Training Certification Success Stories Pro Tools Designer Charts TouchKit TestBench Spreadsheet Company Team Contact Us Newsletter Press Partners Jobs Success Stories Vaadin Pro Licenses Bugfix Feature Votes Vaadin Pro HB integration Licenses Bugfix Feature Votes User interface components for web apps UI components for web apps Build your apps in the language you ♥ Java Scala Groovy JavaScript HTML Java EE Spring GWT See more Charting components Tabular data components Buttons, Labels, Date pickers, etc. Mobile friendly components Buttons, Labels, Date pickers, etc. Charting components Tabular data components Mobile friendly components 150K developers worldwide Apache License 2.0 40% of Fortune-100 companies   Build your web UIs in HTML or Java Vaadin Framework for Java Developers Java server-side components for building single page web applications. Learn more Vaadin Elements for Web Developers High-quality Polymer Web Components for building business applications. Learn more Community Vaadin Framework and Vaadin Elements are Apache licensed open source projects with a strong community from all over the world. We all believe in a great user experience and tools that increase our productivity. Meet the community 150 000 developers  certified professionals meetups 28 348 commits  93 contributors in 74 projects  93 contributors add-ons  authors forum posts  within a month Meet the community In the blog Video Tutorials on Youtube by Fredrik Rönnlund 07/12/16 6:00 AM Styling your Vaadin Charts by Sebastian Nyholm 07/05/16 7:00 AM Vaadin Core Elements 1.1 released by Marcus Hellberg 07/01/16 12:00 PM On Twitter Nick Gaskill @nickgaskill / 4 hours ago RT @sammso: Wow .. I’m also #vaadin contributor https://t.co/iBdyIg1Oi8 .. time for celebration #opensource rocks Mihai Postelnicu @mpostelnicu / 8 hours ago @alexg6667 #vaadin is pretty cool, same concept but more support. Maybe we might just jump ship at some point :-)   Upcoming events Jul 29 07/29/2016 Forward JS San Francisco, US Aug 22 08/22/2016 Vaadin Framework Turku, Finland Aug 24 08/24/2016 Vaadin Framework Best Practices Turku, Finland Aug 26 08/26/2016 Vaadin Framework Client-side Turku, Finland See all »   Vaadin Pro Tools Get all the Pro Tools, starting from $60/developer/month * * with annual team subscription Vaadin Designer Speed up your development Real artists ship, but getting the UI just right can take a long time with all the fine tuning involved. Vaadin Designer is built to let you focus on the results instead of building the layout by trial and error.   Vaadin Spreadsheet Spreadsheet editing in the browser   Vaadin Charts Visualize your reports and data   Vaadin TestBench Deliver pixel perfect UI   Vaadin TouchKit Mobile optimized UI   Vaadin Services We want to see your project succeed. Support For most of us, time is money and a support channel pays itself back in saved development time, developers' nerves and a faster time to market.   Consulting We want to see your project succeed. We offer a variety of services to make the most out of the Vaadin framework.   Training Online and onsite training help you grasp the fundamentals and leverage the power in building highly scalable apps.     Framework Demo Learn Documentation Add-ons Tutorials Features Roadmap Elements Getting Started Videos Demos Docs Pro Tools Charts TouchKit TestBench Spreadsheet Designer Download Book Maven Font Icons Community Forum Blog Wiki Meetups Contribute Cloud Services Consulting Support Plans Training Certification Company Team Open Positions Contact Us Newsletter Press Releases Partners Success Stories Logo & Trademarks © 2016 Vaadin Ltd. All rights reserved. Terms of Service and Use"	"null"	"null"	"Event-driven framework build on top of GWT. Uses server-side architecture with Ajax on the client-side."	"true"
"Frontends"	"java.libhunt.com"	"https://java.libhunt.com/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Awesome Java | LibHunt   Subscribe Contribute About Login   Subscribe Contribute About Login Awesome Java A curated list of awesome Java frameworks, libraries and software Find the software you need Popular Categories Web Frameworks 15 Projects Distributed Applications 15 Projects Machine Learning 11 Projects REST Frameworks 14 Projects Networking 9 Projects Database 22 Projects Miscellaneous 14 Projects Imagery 5 Projects Testing 30 Projects Data structures 8 Projects Subscribe for our newsletter to know all the trending libraries, news and articles. All Categories Ancients 9 Bean Mapping 6 Build 3 Bytecode Manipulation 4 Cluster Management 3 Code Analysis 7 Code Coverage 4 Command-line Argument Parsers 4 Compiler-compiler 2 Configuration 3 Constraint Satisfaction Problem Solver 4 Continuous Integration 8 CSV 3 Database 22 Data structures 8 Date and Time 4 Dependency Injection 4 Development 10 Distributed Applications 15 Distributed Databases 6 Distribution 9 Document Processing 4 Formal Verification 10 Functional Programming 7 Game Development 3 Geospatial 9 GUI 3 High Performance 9 IDE 3 Imagery 5 JSON 5 JSON Processing 4 JVM and JDK 6 Logging 8 Machine Learning 11 Messaging 9 Miscellaneous 14 Monitoring 10 Native 2 Natural Language Processing 5 Networking 9 ORM 5 PDF 7 Performance analysis 8 Reactive libraries 3 REST Frameworks 14 Rules Engine 2 Science 5 Search 3 Security 9 Serialization 4 Server 5 Template Engine 4 Testing 30 Utility 10 Web Crawling 3 Web Frameworks 15 Recently Added Libraries JBehave 4.3 5.6 Testing Framework for Behavioural Driven Development. Quartz 4.0 1.9 Ancients Open-source job scheduler library with Apache 2.0 license. Cukes-REST 1.7 7.5 Testing A collection of Gherkin steps for REST-service testing using Cucumber. Scylla 8.0 9.9 Distributed Databases NoSQL data store using the seastar framework, compatible with Apache Cassandra Cossack Lbas 2.9 8.5 Security Crypto library for storage and messaging for Swift, ObjC, Android, С++, JS, Python, Ruby, PHP, Go Most Popular Libraries and Software Spring 10.0 9.8 Web Frameworks Provides many packages ranging from dependency injection to aspect-oriented programming to security. Apache Spark 10.0 10.0 Machine Learning Data analytics cluster computing framework. Design Patterns 10.0 9.1 Miscellaneous Implementation and explanation of the most common design patterns. RxJava 9.9 8.9 Reactive libraries Library for composing asynchronous and event-based programs using observable sequences from the JVM. ZXing 9.9 7.2 Imagery Multi-format 1D/2D barcode image processing library. Retrofit 9.9 8.1 REST Frameworks Type-safe REST client. OkHttp 9.9 8.9 Networking HTTP+SPDY client. libGDX 9.8 9.4 Game Development All-round cross-platform, high-level framework. Spring Boot 9.8 9.9 Web Frameworks Microframework which simplifies the development of new Spring applications. Protobuf 9.8 9.3 Data structures Google's data interchange format. Picasso 9.8 5.6 Imagery Image downloading and caching library for Android. Popular Comparisons in Web Frameworks Vaadin vs PrimeFaces Vaadin vs Apache Wicket Apache Tapestry vs Spring Boot Spring Boot vs Apache Tapestry Play vs Ratpack Grails vs Spring Boot About Your go-to Java Toolbox. Our goal is to help you find the software and libraries you need. Made by developers for developers. The collection of libraries and resources is based on the relevant Awesome Java List and direct contributions here. To add a new library, please, check the contribute section More from LibHunt Android C++ Elixir Go iOS JavaScript .NET Node.js PHP Python Ruby Rust Scala Self Hosted Swift Awesome Java is part of the LibHunt network. Terms. Privacy Policy."	"null"	"null"	""	"true"
